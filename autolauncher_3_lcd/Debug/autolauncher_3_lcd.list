
autolauncher_3_lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063d4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  080064e4  080064e4  000074e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068d0  080068d0  0000805c  2**0
                  CONTENTS
  4 .ARM          00000008  080068d0  080068d0  000078d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068d8  080068d8  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068d8  080068d8  000078d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068dc  080068dc  000078dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080068e0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000034c  2000005c  0800693c  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a8  0800693c  000083a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010bfa  00000000  00000000  00008085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000292f  00000000  00000000  00018c7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001070  00000000  00000000  0001b5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ce3  00000000  00000000  0001c620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b61  00000000  00000000  0001d303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015512  00000000  00000000  00035e64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009076b  00000000  00000000  0004b376  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dbae1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b2c  00000000  00000000  000dbb24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000e0650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000005c 	.word	0x2000005c
 800012c:	00000000 	.word	0x00000000
 8000130:	080064cc 	.word	0x080064cc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000060 	.word	0x20000060
 800014c:	080064cc 	.word	0x080064cc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2f>:
 80008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000900:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000904:	bf24      	itt	cs
 8000906:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800090a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800090e:	d90d      	bls.n	800092c <__aeabi_d2f+0x30>
 8000910:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000914:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000918:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800091c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000920:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000924:	bf08      	it	eq
 8000926:	f020 0001 	biceq.w	r0, r0, #1
 800092a:	4770      	bx	lr
 800092c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000930:	d121      	bne.n	8000976 <__aeabi_d2f+0x7a>
 8000932:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000936:	bfbc      	itt	lt
 8000938:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800093c:	4770      	bxlt	lr
 800093e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000942:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000946:	f1c2 0218 	rsb	r2, r2, #24
 800094a:	f1c2 0c20 	rsb	ip, r2, #32
 800094e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000952:	fa20 f002 	lsr.w	r0, r0, r2
 8000956:	bf18      	it	ne
 8000958:	f040 0001 	orrne.w	r0, r0, #1
 800095c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000960:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000964:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000968:	ea40 000c 	orr.w	r0, r0, ip
 800096c:	fa23 f302 	lsr.w	r3, r3, r2
 8000970:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000974:	e7cc      	b.n	8000910 <__aeabi_d2f+0x14>
 8000976:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800097a:	d107      	bne.n	800098c <__aeabi_d2f+0x90>
 800097c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000980:	bf1e      	ittt	ne
 8000982:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000986:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800098a:	4770      	bxne	lr
 800098c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000990:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000994:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_f2iz>:
 800099c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80009a0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80009a4:	d30f      	bcc.n	80009c6 <__aeabi_f2iz+0x2a>
 80009a6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80009aa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80009ae:	d90d      	bls.n	80009cc <__aeabi_f2iz+0x30>
 80009b0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80009b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009b8:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80009bc:	fa23 f002 	lsr.w	r0, r3, r2
 80009c0:	bf18      	it	ne
 80009c2:	4240      	negne	r0, r0
 80009c4:	4770      	bx	lr
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	4770      	bx	lr
 80009cc:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80009d0:	d101      	bne.n	80009d6 <__aeabi_f2iz+0x3a>
 80009d2:	0242      	lsls	r2, r0, #9
 80009d4:	d105      	bne.n	80009e2 <__aeabi_f2iz+0x46>
 80009d6:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 80009da:	bf08      	it	eq
 80009dc:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009e0:	4770      	bx	lr
 80009e2:	f04f 0000 	mov.w	r0, #0
 80009e6:	4770      	bx	lr

080009e8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009f8:	4b18      	ldr	r3, [pc, #96]	@ (8000a5c <MX_ADC1_Init+0x74>)
 80009fa:	4a19      	ldr	r2, [pc, #100]	@ (8000a60 <MX_ADC1_Init+0x78>)
 80009fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009fe:	4b17      	ldr	r3, [pc, #92]	@ (8000a5c <MX_ADC1_Init+0x74>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a04:	4b15      	ldr	r3, [pc, #84]	@ (8000a5c <MX_ADC1_Init+0x74>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a0a:	4b14      	ldr	r3, [pc, #80]	@ (8000a5c <MX_ADC1_Init+0x74>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a10:	4b12      	ldr	r3, [pc, #72]	@ (8000a5c <MX_ADC1_Init+0x74>)
 8000a12:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000a16:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a18:	4b10      	ldr	r3, [pc, #64]	@ (8000a5c <MX_ADC1_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a5c <MX_ADC1_Init+0x74>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a24:	480d      	ldr	r0, [pc, #52]	@ (8000a5c <MX_ADC1_Init+0x74>)
 8000a26:	f001 fb41 	bl	80020ac <HAL_ADC_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000a30:	f000 fede 	bl	80017f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000a34:	230a      	movs	r3, #10
 8000a36:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	4619      	mov	r1, r3
 8000a44:	4805      	ldr	r0, [pc, #20]	@ (8000a5c <MX_ADC1_Init+0x74>)
 8000a46:	f001 fdf5 	bl	8002634 <HAL_ADC_ConfigChannel>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000a50:	f000 fece 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a54:	bf00      	nop
 8000a56:	3710      	adds	r7, #16
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20000078 	.word	0x20000078
 8000a60:	40012400 	.word	0x40012400

08000a64 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000a74:	4b18      	ldr	r3, [pc, #96]	@ (8000ad8 <MX_ADC2_Init+0x74>)
 8000a76:	4a19      	ldr	r2, [pc, #100]	@ (8000adc <MX_ADC2_Init+0x78>)
 8000a78:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a7a:	4b17      	ldr	r3, [pc, #92]	@ (8000ad8 <MX_ADC2_Init+0x74>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000a80:	4b15      	ldr	r3, [pc, #84]	@ (8000ad8 <MX_ADC2_Init+0x74>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a86:	4b14      	ldr	r3, [pc, #80]	@ (8000ad8 <MX_ADC2_Init+0x74>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a8c:	4b12      	ldr	r3, [pc, #72]	@ (8000ad8 <MX_ADC2_Init+0x74>)
 8000a8e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000a92:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a94:	4b10      	ldr	r3, [pc, #64]	@ (8000ad8 <MX_ADC2_Init+0x74>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000a9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad8 <MX_ADC2_Init+0x74>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000aa0:	480d      	ldr	r0, [pc, #52]	@ (8000ad8 <MX_ADC2_Init+0x74>)
 8000aa2:	f001 fb03 	bl	80020ac <HAL_ADC_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000aac:	f000 fea0 	bl	80017f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000ab0:	230b      	movs	r3, #11
 8000ab2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000abc:	1d3b      	adds	r3, r7, #4
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4805      	ldr	r0, [pc, #20]	@ (8000ad8 <MX_ADC2_Init+0x74>)
 8000ac2:	f001 fdb7 	bl	8002634 <HAL_ADC_ConfigChannel>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000acc:	f000 fe90 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000ad0:	bf00      	nop
 8000ad2:	3710      	adds	r7, #16
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	200000a8 	.word	0x200000a8
 8000adc:	40012800 	.word	0x40012800

08000ae0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	@ 0x28
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 0318 	add.w	r3, r7, #24
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a28      	ldr	r2, [pc, #160]	@ (8000b9c <HAL_ADC_MspInit+0xbc>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d122      	bne.n	8000b46 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b00:	4b27      	ldr	r3, [pc, #156]	@ (8000ba0 <HAL_ADC_MspInit+0xc0>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	4a26      	ldr	r2, [pc, #152]	@ (8000ba0 <HAL_ADC_MspInit+0xc0>)
 8000b06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b0a:	6193      	str	r3, [r2, #24]
 8000b0c:	4b24      	ldr	r3, [pc, #144]	@ (8000ba0 <HAL_ADC_MspInit+0xc0>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000b14:	617b      	str	r3, [r7, #20]
 8000b16:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b18:	4b21      	ldr	r3, [pc, #132]	@ (8000ba0 <HAL_ADC_MspInit+0xc0>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	4a20      	ldr	r2, [pc, #128]	@ (8000ba0 <HAL_ADC_MspInit+0xc0>)
 8000b1e:	f043 0310 	orr.w	r3, r3, #16
 8000b22:	6193      	str	r3, [r2, #24]
 8000b24:	4b1e      	ldr	r3, [pc, #120]	@ (8000ba0 <HAL_ADC_MspInit+0xc0>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	f003 0310 	and.w	r3, r3, #16
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b30:	2301      	movs	r3, #1
 8000b32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b34:	2303      	movs	r3, #3
 8000b36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b38:	f107 0318 	add.w	r3, r7, #24
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4819      	ldr	r0, [pc, #100]	@ (8000ba4 <HAL_ADC_MspInit+0xc4>)
 8000b40:	f001 fff0 	bl	8002b24 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000b44:	e026      	b.n	8000b94 <HAL_ADC_MspInit+0xb4>
  else if(adcHandle->Instance==ADC2)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a17      	ldr	r2, [pc, #92]	@ (8000ba8 <HAL_ADC_MspInit+0xc8>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d121      	bne.n	8000b94 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000b50:	4b13      	ldr	r3, [pc, #76]	@ (8000ba0 <HAL_ADC_MspInit+0xc0>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	4a12      	ldr	r2, [pc, #72]	@ (8000ba0 <HAL_ADC_MspInit+0xc0>)
 8000b56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b5a:	6193      	str	r3, [r2, #24]
 8000b5c:	4b10      	ldr	r3, [pc, #64]	@ (8000ba0 <HAL_ADC_MspInit+0xc0>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b68:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba0 <HAL_ADC_MspInit+0xc0>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	4a0c      	ldr	r2, [pc, #48]	@ (8000ba0 <HAL_ADC_MspInit+0xc0>)
 8000b6e:	f043 0310 	orr.w	r3, r3, #16
 8000b72:	6193      	str	r3, [r2, #24]
 8000b74:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba0 <HAL_ADC_MspInit+0xc0>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	f003 0310 	and.w	r3, r3, #16
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b80:	2302      	movs	r3, #2
 8000b82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b84:	2303      	movs	r3, #3
 8000b86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b88:	f107 0318 	add.w	r3, r7, #24
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4805      	ldr	r0, [pc, #20]	@ (8000ba4 <HAL_ADC_MspInit+0xc4>)
 8000b90:	f001 ffc8 	bl	8002b24 <HAL_GPIO_Init>
}
 8000b94:	bf00      	nop
 8000b96:	3728      	adds	r7, #40	@ 0x28
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40012400 	.word	0x40012400
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	40011000 	.word	0x40011000
 8000ba8:	40012800 	.word	0x40012800

08000bac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b088      	sub	sp, #32
 8000bb0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb2:	f107 0310 	add.w	r3, r7, #16
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc0:	4b42      	ldr	r3, [pc, #264]	@ (8000ccc <MX_GPIO_Init+0x120>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	4a41      	ldr	r2, [pc, #260]	@ (8000ccc <MX_GPIO_Init+0x120>)
 8000bc6:	f043 0310 	orr.w	r3, r3, #16
 8000bca:	6193      	str	r3, [r2, #24]
 8000bcc:	4b3f      	ldr	r3, [pc, #252]	@ (8000ccc <MX_GPIO_Init+0x120>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	f003 0310 	and.w	r3, r3, #16
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bd8:	4b3c      	ldr	r3, [pc, #240]	@ (8000ccc <MX_GPIO_Init+0x120>)
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	4a3b      	ldr	r2, [pc, #236]	@ (8000ccc <MX_GPIO_Init+0x120>)
 8000bde:	f043 0320 	orr.w	r3, r3, #32
 8000be2:	6193      	str	r3, [r2, #24]
 8000be4:	4b39      	ldr	r3, [pc, #228]	@ (8000ccc <MX_GPIO_Init+0x120>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	f003 0320 	and.w	r3, r3, #32
 8000bec:	60bb      	str	r3, [r7, #8]
 8000bee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf0:	4b36      	ldr	r3, [pc, #216]	@ (8000ccc <MX_GPIO_Init+0x120>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	4a35      	ldr	r2, [pc, #212]	@ (8000ccc <MX_GPIO_Init+0x120>)
 8000bf6:	f043 0304 	orr.w	r3, r3, #4
 8000bfa:	6193      	str	r3, [r2, #24]
 8000bfc:	4b33      	ldr	r3, [pc, #204]	@ (8000ccc <MX_GPIO_Init+0x120>)
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	f003 0304 	and.w	r3, r3, #4
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c08:	4b30      	ldr	r3, [pc, #192]	@ (8000ccc <MX_GPIO_Init+0x120>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	4a2f      	ldr	r2, [pc, #188]	@ (8000ccc <MX_GPIO_Init+0x120>)
 8000c0e:	f043 0308 	orr.w	r3, r3, #8
 8000c12:	6193      	str	r3, [r2, #24]
 8000c14:	4b2d      	ldr	r3, [pc, #180]	@ (8000ccc <MX_GPIO_Init+0x120>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	f003 0308 	and.w	r3, r3, #8
 8000c1c:	603b      	str	r3, [r7, #0]
 8000c1e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SSR_XBT3_Pin|SSR_XBT2_Pin|SSR_XBT1_Pin|ENABLE_M1_Pin
 8000c20:	2200      	movs	r2, #0
 8000c22:	f64f 4114 	movw	r1, #64532	@ 0xfc14
 8000c26:	482a      	ldr	r0, [pc, #168]	@ (8000cd0 <MX_GPIO_Init+0x124>)
 8000c28:	f002 f900 	bl	8002e2c <HAL_GPIO_WritePin>
                          |DIR_Pin|RELAY_K7_Pin|RELAY_K1_Pin|RELAY_K2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MUX_SELECT_Pin|RELAY_CAL_RES_Pin|RELAY_CAL_CONT_Pin|RELAY_GND_COND_Pin
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	f649 1104 	movw	r1, #39172	@ 0x9904
 8000c32:	4828      	ldr	r0, [pc, #160]	@ (8000cd4 <MX_GPIO_Init+0x128>)
 8000c34:	f002 f8fa 	bl	8002e2c <HAL_GPIO_WritePin>
                          |RELAY_K8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|RELAY_K4_Pin|RELAY_K5_Pin|RELAY_K6_Pin
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f240 313a 	movw	r1, #826	@ 0x33a
 8000c3e:	4826      	ldr	r0, [pc, #152]	@ (8000cd8 <MX_GPIO_Init+0x12c>)
 8000c40:	f002 f8f4 	bl	8002e2c <HAL_GPIO_WritePin>
                          |RELAY_RESET_1_Pin|SSR_XBT4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_K3_GPIO_Port, RELAY_K3_Pin, GPIO_PIN_RESET);
 8000c44:	2200      	movs	r2, #0
 8000c46:	2104      	movs	r1, #4
 8000c48:	4824      	ldr	r0, [pc, #144]	@ (8000cdc <MX_GPIO_Init+0x130>)
 8000c4a:	f002 f8ef 	bl	8002e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SSR_XBT3_Pin|SSR_XBT2_Pin|SSR_XBT1_Pin|ENABLE_M1_Pin
 8000c4e:	f64f 4314 	movw	r3, #64532	@ 0xfc14
 8000c52:	613b      	str	r3, [r7, #16]
                          |DIR_Pin|RELAY_K7_Pin|RELAY_K1_Pin|RELAY_K2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c54:	2301      	movs	r3, #1
 8000c56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c60:	f107 0310 	add.w	r3, r7, #16
 8000c64:	4619      	mov	r1, r3
 8000c66:	481a      	ldr	r0, [pc, #104]	@ (8000cd0 <MX_GPIO_Init+0x124>)
 8000c68:	f001 ff5c 	bl	8002b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = MUX_SELECT_Pin|RELAY_CAL_RES_Pin|RELAY_CAL_CONT_Pin|RELAY_GND_COND_Pin
 8000c6c:	f649 1304 	movw	r3, #39172	@ 0x9904
 8000c70:	613b      	str	r3, [r7, #16]
                          |RELAY_K8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c72:	2301      	movs	r3, #1
 8000c74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7e:	f107 0310 	add.w	r3, r7, #16
 8000c82:	4619      	mov	r1, r3
 8000c84:	4813      	ldr	r0, [pc, #76]	@ (8000cd4 <MX_GPIO_Init+0x128>)
 8000c86:	f001 ff4d 	bl	8002b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = LED_Pin|RELAY_K4_Pin|RELAY_K5_Pin|RELAY_K6_Pin
 8000c8a:	f240 333a 	movw	r3, #826	@ 0x33a
 8000c8e:	613b      	str	r3, [r7, #16]
                          |RELAY_RESET_1_Pin|SSR_XBT4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c90:	2301      	movs	r3, #1
 8000c92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c9c:	f107 0310 	add.w	r3, r7, #16
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	480d      	ldr	r0, [pc, #52]	@ (8000cd8 <MX_GPIO_Init+0x12c>)
 8000ca4:	f001 ff3e 	bl	8002b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RELAY_K3_Pin;
 8000ca8:	2304      	movs	r3, #4
 8000caa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cac:	2301      	movs	r3, #1
 8000cae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RELAY_K3_GPIO_Port, &GPIO_InitStruct);
 8000cb8:	f107 0310 	add.w	r3, r7, #16
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4807      	ldr	r0, [pc, #28]	@ (8000cdc <MX_GPIO_Init+0x130>)
 8000cc0:	f001 ff30 	bl	8002b24 <HAL_GPIO_Init>

}
 8000cc4:	bf00      	nop
 8000cc6:	3720      	adds	r7, #32
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40021000 	.word	0x40021000
 8000cd0:	40011000 	.word	0x40011000
 8000cd4:	40010800 	.word	0x40010800
 8000cd8:	40010c00 	.word	0x40010c00
 8000cdc:	40011400 	.word	0x40011400

08000ce0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ce4:	4b12      	ldr	r3, [pc, #72]	@ (8000d30 <MX_I2C1_Init+0x50>)
 8000ce6:	4a13      	ldr	r2, [pc, #76]	@ (8000d34 <MX_I2C1_Init+0x54>)
 8000ce8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000cea:	4b11      	ldr	r3, [pc, #68]	@ (8000d30 <MX_I2C1_Init+0x50>)
 8000cec:	4a12      	ldr	r2, [pc, #72]	@ (8000d38 <MX_I2C1_Init+0x58>)
 8000cee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d30 <MX_I2C1_Init+0x50>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d30 <MX_I2C1_Init+0x50>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000d30 <MX_I2C1_Init+0x50>)
 8000cfe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d02:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d04:	4b0a      	ldr	r3, [pc, #40]	@ (8000d30 <MX_I2C1_Init+0x50>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d0a:	4b09      	ldr	r3, [pc, #36]	@ (8000d30 <MX_I2C1_Init+0x50>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <MX_I2C1_Init+0x50>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d16:	4b06      	ldr	r3, [pc, #24]	@ (8000d30 <MX_I2C1_Init+0x50>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d1c:	4804      	ldr	r0, [pc, #16]	@ (8000d30 <MX_I2C1_Init+0x50>)
 8000d1e:	f002 f8b7 	bl	8002e90 <HAL_I2C_Init>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d28:	f000 fd62 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	200000d8 	.word	0x200000d8
 8000d34:	40005400 	.word	0x40005400
 8000d38:	000186a0 	.word	0x000186a0

08000d3c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b088      	sub	sp, #32
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 0310 	add.w	r3, r7, #16
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a15      	ldr	r2, [pc, #84]	@ (8000dac <HAL_I2C_MspInit+0x70>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d123      	bne.n	8000da4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5c:	4b14      	ldr	r3, [pc, #80]	@ (8000db0 <HAL_I2C_MspInit+0x74>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	4a13      	ldr	r2, [pc, #76]	@ (8000db0 <HAL_I2C_MspInit+0x74>)
 8000d62:	f043 0308 	orr.w	r3, r3, #8
 8000d66:	6193      	str	r3, [r2, #24]
 8000d68:	4b11      	ldr	r3, [pc, #68]	@ (8000db0 <HAL_I2C_MspInit+0x74>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	f003 0308 	and.w	r3, r3, #8
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d74:	23c0      	movs	r3, #192	@ 0xc0
 8000d76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d78:	2312      	movs	r3, #18
 8000d7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d80:	f107 0310 	add.w	r3, r7, #16
 8000d84:	4619      	mov	r1, r3
 8000d86:	480b      	ldr	r0, [pc, #44]	@ (8000db4 <HAL_I2C_MspInit+0x78>)
 8000d88:	f001 fecc 	bl	8002b24 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d8c:	4b08      	ldr	r3, [pc, #32]	@ (8000db0 <HAL_I2C_MspInit+0x74>)
 8000d8e:	69db      	ldr	r3, [r3, #28]
 8000d90:	4a07      	ldr	r2, [pc, #28]	@ (8000db0 <HAL_I2C_MspInit+0x74>)
 8000d92:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d96:	61d3      	str	r3, [r2, #28]
 8000d98:	4b05      	ldr	r3, [pc, #20]	@ (8000db0 <HAL_I2C_MspInit+0x74>)
 8000d9a:	69db      	ldr	r3, [r3, #28]
 8000d9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000da0:	60bb      	str	r3, [r7, #8]
 8000da2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000da4:	bf00      	nop
 8000da6:	3720      	adds	r7, #32
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40005400 	.word	0x40005400
 8000db0:	40021000 	.word	0x40021000
 8000db4:	40010c00 	.word	0x40010c00

08000db8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08e      	sub	sp, #56	@ 0x38
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dbe:	f001 f8ef 	bl	8001fa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dc2:	f000 f8e9 	bl	8000f98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc6:	f7ff fef1 	bl	8000bac <MX_GPIO_Init>
  MX_TIM3_Init();
 8000dca:	f000 fdb1 	bl	8001930 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000dce:	f000 fe75 	bl	8001abc <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000dd2:	f7ff fe09 	bl	80009e8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000dd6:	f7ff fe45 	bl	8000a64 <MX_ADC2_Init>
  MX_I2C1_Init();
 8000dda:	f7ff ff81 	bl	8000ce0 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000dde:	f000 fe97 	bl	8001b10 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* LCD */
  i2c_linker(&hi2c1);
 8000de2:	4863      	ldr	r0, [pc, #396]	@ (8000f70 <main+0x1b8>)
 8000de4:	f001 f8ca 	bl	8001f7c <i2c_linker>
  lcd_init();
 8000de8:	f001 f874 	bl	8001ed4 <lcd_init>

  uint8_t text0[] = "* PCSE *";
 8000dec:	4a61      	ldr	r2, [pc, #388]	@ (8000f74 <main+0x1bc>)
 8000dee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000df2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000df4:	c303      	stmia	r3!, {r0, r1}
 8000df6:	701a      	strb	r2, [r3, #0]
  uint8_t text1[] = "CESE 2023";
 8000df8:	4a5f      	ldr	r2, [pc, #380]	@ (8000f78 <main+0x1c0>)
 8000dfa:	f107 0320 	add.w	r3, r7, #32
 8000dfe:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e00:	c303      	stmia	r3!, {r0, r1}
 8000e02:	801a      	strh	r2, [r3, #0]
  uint8_t text2[] = "UBA";
 8000e04:	4b5d      	ldr	r3, [pc, #372]	@ (8000f7c <main+0x1c4>)
 8000e06:	61fb      	str	r3, [r7, #28]
  const uint8_t space[] = " ";
 8000e08:	2320      	movs	r3, #32
 8000e0a:	833b      	strh	r3, [r7, #24]

  lcd_clear();
 8000e0c:	f000 ffc4 	bl	8001d98 <lcd_clear>
  HAL_Delay(1000);
 8000e10:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e14:	f001 f926 	bl	8002064 <HAL_Delay>
  lcd_print_text(text0, sizeof(text0));
 8000e18:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e1c:	2109      	movs	r1, #9
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f001 f802 	bl	8001e28 <lcd_print_text>
  HAL_Delay(1000);
 8000e24:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e28:	f001 f91c 	bl	8002064 <HAL_Delay>
  lcd_clear();
 8000e2c:	f000 ffb4 	bl	8001d98 <lcd_clear>
  HAL_Delay(1000);
 8000e30:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e34:	f001 f916 	bl	8002064 <HAL_Delay>
  //lcd_set_position(1, 1);
  return_home();
 8000e38:	f000 ffb7 	bl	8001daa <return_home>
  lcd_print_text(text1, sizeof(text1));
 8000e3c:	f107 0320 	add.w	r3, r7, #32
 8000e40:	210a      	movs	r1, #10
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 fff0 	bl	8001e28 <lcd_print_text>
  lcd_set_position(2, 1);
 8000e48:	2101      	movs	r1, #1
 8000e4a:	2002      	movs	r0, #2
 8000e4c:	f000 ffb6 	bl	8001dbc <lcd_set_position>
  lcd_print_text(text2, sizeof(text2));
 8000e50:	f107 031c 	add.w	r3, r7, #28
 8000e54:	2104      	movs	r1, #4
 8000e56:	4618      	mov	r0, r3
 8000e58:	f000 ffe6 	bl	8001e28 <lcd_print_text>

  lcd_print_text(space, sizeof(space));
 8000e5c:	f107 0318 	add.w	r3, r7, #24
 8000e60:	2102      	movs	r1, #2
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 ffe0 	bl	8001e28 <lcd_print_text>

  uint8_t mychar1[] = { 0x00, 0x0E, 0x11, 0x11, 0x11,0x0E, 0x00,0x00 }; // empty circle
 8000e68:	4a45      	ldr	r2, [pc, #276]	@ (8000f80 <main+0x1c8>)
 8000e6a:	f107 0310 	add.w	r3, r7, #16
 8000e6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e72:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t mychar2[] = {0x00, 0x00, 0x0A, 0x00, 0x11, 0x0E, 0x00, 0x00}; // face
 8000e76:	4a43      	ldr	r2, [pc, #268]	@ (8000f84 <main+0x1cc>)
 8000e78:	f107 0308 	add.w	r3, r7, #8
 8000e7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e80:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t mychar3[] = {0x00,0x0E,0x1F,0x1F,0x1F,0x0E,0x00,0x00}; // full circle
 8000e84:	4a40      	ldr	r2, [pc, #256]	@ (8000f88 <main+0x1d0>)
 8000e86:	463b      	mov	r3, r7
 8000e88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e8c:	e883 0003 	stmia.w	r3, {r0, r1}

  create_character(0, mychar1);
 8000e90:	f107 0310 	add.w	r3, r7, #16
 8000e94:	4619      	mov	r1, r3
 8000e96:	2000      	movs	r0, #0
 8000e98:	f000 ffe8 	bl	8001e6c <create_character>
  create_character(1, mychar2);
 8000e9c:	f107 0308 	add.w	r3, r7, #8
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	f000 ffe2 	bl	8001e6c <create_character>
  create_character(3, mychar3);
 8000ea8:	463b      	mov	r3, r7
 8000eaa:	4619      	mov	r1, r3
 8000eac:	2003      	movs	r0, #3
 8000eae:	f000 ffdd 	bl	8001e6c <create_character>

  lcd_set_position(2, 5);
 8000eb2:	2105      	movs	r1, #5
 8000eb4:	2002      	movs	r0, #2
 8000eb6:	f000 ff81 	bl	8001dbc <lcd_set_position>

  lcd_send_byte(0, RS_DATA, RW_WRITE);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	2000      	movs	r0, #0
 8000ec0:	f000 fefd 	bl	8001cbe <lcd_send_byte>
  lcd_send_byte(1, RS_DATA, RW_WRITE);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	2001      	movs	r0, #1
 8000eca:	f000 fef8 	bl	8001cbe <lcd_send_byte>
  lcd_send_byte(3, RS_DATA, RW_WRITE);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	2003      	movs	r0, #3
 8000ed4:	f000 fef3 	bl	8001cbe <lcd_send_byte>

  uint8_t charIndex = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  /* LCD */


  HAL_GPIO_WritePin(ENABLE_M1_GPIO_Port, ENABLE_M1_Pin, SET); // Active low >> start disabled
 8000ede:	2201      	movs	r2, #1
 8000ee0:	2104      	movs	r1, #4
 8000ee2:	482a      	ldr	r0, [pc, #168]	@ (8000f8c <main+0x1d4>)
 8000ee4:	f001 ffa2 	bl	8002e2c <HAL_GPIO_WritePin>

  //uint8_t option = 0; // Initial option value
  char option = '\0';
 8000ee8:	2300      	movs	r3, #0
 8000eea:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  uint8_t result = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

  // SET = UART-tx / RESET = Din from GPS
  HAL_GPIO_WritePin(MUX_SELECT_GPIO_Port, MUX_SELECT_Pin, SET);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	2104      	movs	r1, #4
 8000ef8:	4825      	ldr	r0, [pc, #148]	@ (8000f90 <main+0x1d8>)
 8000efa:	f001 ff97 	bl	8002e2c <HAL_GPIO_WritePin>

  // Initialize relay in reset state
  HAL_GPIO_WritePin(RELAY_RESET_1_GPIO_Port, RELAY_RESET_1_Pin, SET); // reset relay
 8000efe:	2201      	movs	r2, #1
 8000f00:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f04:	4823      	ldr	r0, [pc, #140]	@ (8000f94 <main+0x1dc>)
 8000f06:	f001 ff91 	bl	8002e2c <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000f0a:	200a      	movs	r0, #10
 8000f0c:	f001 f8aa 	bl	8002064 <HAL_Delay>
  HAL_GPIO_WritePin(RELAY_RESET_1_GPIO_Port, RELAY_RESET_1_Pin, RESET); // release reset coil
 8000f10:	2200      	movs	r2, #0
 8000f12:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f16:	481f      	ldr	r0, [pc, #124]	@ (8000f94 <main+0x1dc>)
 8000f18:	f001 ff88 	bl	8002e2c <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000f1c:	2005      	movs	r0, #5
 8000f1e:	f001 f8a1 	bl	8002064 <HAL_Delay>

  // Start timer for STEP signal
  //HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_3 ); // Start STEP signal >> counter toggle to toggle every 20/1000 sec = 50hz


  printWelcomeMessage();
 8000f22:	f000 f889 	bl	8001038 <printWelcomeMessage>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // display available characters
	  lcd_set_position(2, 14);
 8000f26:	210e      	movs	r1, #14
 8000f28:	2002      	movs	r0, #2
 8000f2a:	f000 ff47 	bl	8001dbc <lcd_set_position>
	  if(charIndex>207) charIndex = 0;
 8000f2e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000f32:	2bcf      	cmp	r3, #207	@ 0xcf
 8000f34:	d902      	bls.n	8000f3c <main+0x184>
 8000f36:	2300      	movs	r3, #0
 8000f38:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	  lcd_send_byte(charIndex, RS_DATA, RW_WRITE);
 8000f3c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000f40:	2200      	movs	r2, #0
 8000f42:	2101      	movs	r1, #1
 8000f44:	4618      	mov	r0, r3
 8000f46:	f000 feba 	bl	8001cbe <lcd_send_byte>
	  charIndex++;
 8000f4a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000f4e:	3301      	adds	r3, #1
 8000f50:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	  // process commands
	  option = readInput();
 8000f54:	f000 f88a 	bl	800106c <readInput>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	  result = processInput(option);
 8000f5e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 f8a4 	bl	80010b0 <processInput>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	  lcd_set_position(2, 14);
 8000f6e:	e7da      	b.n	8000f26 <main+0x16e>
 8000f70:	200000d8 	.word	0x200000d8
 8000f74:	080064e4 	.word	0x080064e4
 8000f78:	080064f0 	.word	0x080064f0
 8000f7c:	00414255 	.word	0x00414255
 8000f80:	080064fc 	.word	0x080064fc
 8000f84:	08006504 	.word	0x08006504
 8000f88:	0800650c 	.word	0x0800650c
 8000f8c:	40011000 	.word	0x40011000
 8000f90:	40010800 	.word	0x40010800
 8000f94:	40010c00 	.word	0x40010c00

08000f98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b094      	sub	sp, #80	@ 0x50
 8000f9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f9e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fa2:	2228      	movs	r2, #40	@ 0x28
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f004 fe00 	bl	8005bac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
 8000fc6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fd0:	2310      	movs	r3, #16
 8000fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f002 ff8b 	bl	8003ef8 <HAL_RCC_OscConfig>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000fe8:	f000 fc02 	bl	80017f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fec:	230f      	movs	r3, #15
 8000fee:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	2100      	movs	r1, #0
 8001006:	4618      	mov	r0, r3
 8001008:	f003 f9f8 	bl	80043fc <HAL_RCC_ClockConfig>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001012:	f000 fbed 	bl	80017f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001016:	2302      	movs	r3, #2
 8001018:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	4618      	mov	r0, r3
 8001022:	f003 fb79 	bl	8004718 <HAL_RCCEx_PeriphCLKConfig>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800102c:	f000 fbe0 	bl	80017f0 <Error_Handler>
  }
}
 8001030:	bf00      	nop
 8001032:	3750      	adds	r7, #80	@ 0x50
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <printWelcomeMessage>:

/* USER CODE BEGIN 4 */
void printWelcomeMessage(void){
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, WELCOME_MSG, strlen(WELCOME_MSG), HAL_MAX_DELAY);
 800103c:	f04f 33ff 	mov.w	r3, #4294967295
 8001040:	222a      	movs	r2, #42	@ 0x2a
 8001042:	4907      	ldr	r1, [pc, #28]	@ (8001060 <printWelcomeMessage+0x28>)
 8001044:	4807      	ldr	r0, [pc, #28]	@ (8001064 <printWelcomeMessage+0x2c>)
 8001046:	f004 faf7 	bl	8005638 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, menu, strlen(menu), HAL_MAX_DELAY);
 800104a:	f04f 33ff 	mov.w	r3, #4294967295
 800104e:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8001052:	4905      	ldr	r1, [pc, #20]	@ (8001068 <printWelcomeMessage+0x30>)
 8001054:	4803      	ldr	r0, [pc, #12]	@ (8001064 <printWelcomeMessage+0x2c>)
 8001056:	f004 faef 	bl	8005638 <HAL_UART_Transmit>
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	08006514 	.word	0x08006514
 8001064:	20000178 	.word	0x20000178
 8001068:	08006620 	.word	0x08006620

0800106c <readInput>:


/* Read user input and return the option selected 1-2-3*/
char readInput(void){
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
	char rxBuffer[1];

	HAL_UART_Transmit(&huart1, PROMPT, strlen(PROMPT), HAL_MAX_DELAY);
 8001072:	f04f 33ff 	mov.w	r3, #4294967295
 8001076:	2213      	movs	r2, #19
 8001078:	490b      	ldr	r1, [pc, #44]	@ (80010a8 <readInput+0x3c>)
 800107a:	480c      	ldr	r0, [pc, #48]	@ (80010ac <readInput+0x40>)
 800107c:	f004 fadc 	bl	8005638 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, rxBuffer, 1, HAL_MAX_DELAY);
 8001080:	1d39      	adds	r1, r7, #4
 8001082:	f04f 33ff 	mov.w	r3, #4294967295
 8001086:	2201      	movs	r2, #1
 8001088:	4808      	ldr	r0, [pc, #32]	@ (80010ac <readInput+0x40>)
 800108a:	f004 fb58 	bl	800573e <HAL_UART_Receive>
	HAL_UART_Transmit(&huart1, rxBuffer, 1, HAL_MAX_DELAY); // echo
 800108e:	1d39      	adds	r1, r7, #4
 8001090:	f04f 33ff 	mov.w	r3, #4294967295
 8001094:	2201      	movs	r2, #1
 8001096:	4805      	ldr	r0, [pc, #20]	@ (80010ac <readInput+0x40>)
 8001098:	f004 face 	bl	8005638 <HAL_UART_Transmit>

	//return atoi(rxBuffer);
	return rxBuffer[0];
 800109c:	793b      	ldrb	r3, [r7, #4]
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	08006540 	.word	0x08006540
 80010ac:	20000178 	.word	0x20000178

080010b0 <processInput>:

uint8_t processInput(char option){
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b0a2      	sub	sp, #136	@ 0x88
 80010b4:	af02      	add	r7, sp, #8
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
	// default
	char msg[30];
	// ADC measurement
	char adcmsg[30];
	float vin = 0.0;
 80010ba:	f04f 0300 	mov.w	r3, #0
 80010be:	67bb      	str	r3, [r7, #120]	@ 0x78
	uint16_t adcReading = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
	// EEPROM
	uint8_t chipAddress = 0xA0; // 0b1010000 7 bit address
 80010c6:	23a0      	movs	r3, #160	@ 0xa0
 80010c8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	uint8_t dataReceive[10];
	uint8_t dataByte[4]; // = {0x00, 5, 12, 4}; // store 5 in memory 0x00 and 12 in (n+1)= 0x01
	uint8_t startAddress[1] = {0x00};
 80010cc:	2300      	movs	r3, #0
 80010ce:	f887 3020 	strb.w	r3, [r7, #32]
	char output[20];

	// print what was selected
	sprintf(msg, "\r\n> Executing OPTION %d...\r\n",option);
 80010d2:	79fa      	ldrb	r2, [r7, #7]
 80010d4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010d8:	4990      	ldr	r1, [pc, #576]	@ (800131c <processInput+0x26c>)
 80010da:	4618      	mov	r0, r3
 80010dc:	f004 fd46 	bl	8005b6c <siprintf>
	HAL_UART_Transmit(&huart1, msg, strlen(msg), HAL_MAX_DELAY);
 80010e0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff f833 	bl	8000150 <strlen>
 80010ea:	4603      	mov	r3, r0
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 80010f2:	f04f 33ff 	mov.w	r3, #4294967295
 80010f6:	488a      	ldr	r0, [pc, #552]	@ (8001320 <processInput+0x270>)
 80010f8:	f004 fa9e 	bl	8005638 <HAL_UART_Transmit>

	// Execute selected action
	switch(option){
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	3b30      	subs	r3, #48	@ 0x30
 8001100:	2b35      	cmp	r3, #53	@ 0x35
 8001102:	f200 834e 	bhi.w	80017a2 <processInput+0x6f2>
 8001106:	a201      	add	r2, pc, #4	@ (adr r2, 800110c <processInput+0x5c>)
 8001108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800110c:	0800172f 	.word	0x0800172f
 8001110:	0800129d 	.word	0x0800129d
 8001114:	080012a9 	.word	0x080012a9
 8001118:	080012f5 	.word	0x080012f5
 800111c:	08001331 	.word	0x08001331
 8001120:	080014a1 	.word	0x080014a1
 8001124:	080014ed 	.word	0x080014ed
 8001128:	080014fb 	.word	0x080014fb
 800112c:	08001509 	.word	0x08001509
 8001130:	08001605 	.word	0x08001605
 8001134:	080017a3 	.word	0x080017a3
 8001138:	080017a3 	.word	0x080017a3
 800113c:	080017a3 	.word	0x080017a3
 8001140:	080017a3 	.word	0x080017a3
 8001144:	080017a3 	.word	0x080017a3
 8001148:	080017a3 	.word	0x080017a3
 800114c:	080017a3 	.word	0x080017a3
 8001150:	080017a3 	.word	0x080017a3
 8001154:	080017a3 	.word	0x080017a3
 8001158:	080017a3 	.word	0x080017a3
 800115c:	080017a3 	.word	0x080017a3
 8001160:	080017a3 	.word	0x080017a3
 8001164:	080017a3 	.word	0x080017a3
 8001168:	080017a3 	.word	0x080017a3
 800116c:	080017a3 	.word	0x080017a3
 8001170:	080017a3 	.word	0x080017a3
 8001174:	080017a3 	.word	0x080017a3
 8001178:	080017a3 	.word	0x080017a3
 800117c:	080017a3 	.word	0x080017a3
 8001180:	080017a3 	.word	0x080017a3
 8001184:	080017a3 	.word	0x080017a3
 8001188:	080017a3 	.word	0x080017a3
 800118c:	080017a3 	.word	0x080017a3
 8001190:	080017a3 	.word	0x080017a3
 8001194:	080017a3 	.word	0x080017a3
 8001198:	080017a3 	.word	0x080017a3
 800119c:	080017a3 	.word	0x080017a3
 80011a0:	080017a3 	.word	0x080017a3
 80011a4:	080017a3 	.word	0x080017a3
 80011a8:	080017a3 	.word	0x080017a3
 80011ac:	080017a3 	.word	0x080017a3
 80011b0:	080017a3 	.word	0x080017a3
 80011b4:	080017a3 	.word	0x080017a3
 80011b8:	080017a3 	.word	0x080017a3
 80011bc:	080017a3 	.word	0x080017a3
 80011c0:	080017a3 	.word	0x080017a3
 80011c4:	080017a3 	.word	0x080017a3
 80011c8:	080017a3 	.word	0x080017a3
 80011cc:	080017a3 	.word	0x080017a3
 80011d0:	080011e5 	.word	0x080011e5
 80011d4:	0800120d 	.word	0x0800120d
 80011d8:	08001231 	.word	0x08001231
 80011dc:	08001255 	.word	0x08001255
 80011e0:	08001279 	.word	0x08001279
	case 'a': // Set relay
		// SET relay k2
		HAL_GPIO_WritePin(RELAY_K2_GPIO_Port, RELAY_K2_Pin, SET); // set relay
 80011e4:	2201      	movs	r2, #1
 80011e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011ea:	484e      	ldr	r0, [pc, #312]	@ (8001324 <processInput+0x274>)
 80011ec:	f001 fe1e 	bl	8002e2c <HAL_GPIO_WritePin>
		HAL_Delay(10);
 80011f0:	200a      	movs	r0, #10
 80011f2:	f000 ff37 	bl	8002064 <HAL_Delay>
		HAL_GPIO_WritePin(RELAY_K2_GPIO_Port, RELAY_K2_Pin, RESET); // release coil
 80011f6:	2200      	movs	r2, #0
 80011f8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011fc:	4849      	ldr	r0, [pc, #292]	@ (8001324 <processInput+0x274>)
 80011fe:	f001 fe15 	bl	8002e2c <HAL_GPIO_WritePin>
		HAL_Delay(5);
 8001202:	2005      	movs	r0, #5
 8001204:	f000 ff2e 	bl	8002064 <HAL_Delay>
		return 0;
 8001208:	2300      	movs	r3, #0
 800120a:	e2df      	b.n	80017cc <processInput+0x71c>
	case 'b': // Set relay
		// SET relay k3
		HAL_GPIO_WritePin(RELAY_K3_GPIO_Port, RELAY_K3_Pin, SET); // set relay
 800120c:	2201      	movs	r2, #1
 800120e:	2104      	movs	r1, #4
 8001210:	4845      	ldr	r0, [pc, #276]	@ (8001328 <processInput+0x278>)
 8001212:	f001 fe0b 	bl	8002e2c <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8001216:	200a      	movs	r0, #10
 8001218:	f000 ff24 	bl	8002064 <HAL_Delay>
		HAL_GPIO_WritePin(RELAY_K3_GPIO_Port, RELAY_K3_Pin, RESET); // release coil
 800121c:	2200      	movs	r2, #0
 800121e:	2104      	movs	r1, #4
 8001220:	4841      	ldr	r0, [pc, #260]	@ (8001328 <processInput+0x278>)
 8001222:	f001 fe03 	bl	8002e2c <HAL_GPIO_WritePin>
		HAL_Delay(5);
 8001226:	2005      	movs	r0, #5
 8001228:	f000 ff1c 	bl	8002064 <HAL_Delay>
		return 0;
 800122c:	2300      	movs	r3, #0
 800122e:	e2cd      	b.n	80017cc <processInput+0x71c>
	case 'c': // Set relay
		// SET relay k4
		HAL_GPIO_WritePin(RELAY_K4_GPIO_Port, RELAY_K4_Pin, SET); // set relay
 8001230:	2201      	movs	r2, #1
 8001232:	2108      	movs	r1, #8
 8001234:	483d      	ldr	r0, [pc, #244]	@ (800132c <processInput+0x27c>)
 8001236:	f001 fdf9 	bl	8002e2c <HAL_GPIO_WritePin>
		HAL_Delay(10);
 800123a:	200a      	movs	r0, #10
 800123c:	f000 ff12 	bl	8002064 <HAL_Delay>
		HAL_GPIO_WritePin(RELAY_K4_GPIO_Port, RELAY_K4_Pin, RESET); // release coil
 8001240:	2200      	movs	r2, #0
 8001242:	2108      	movs	r1, #8
 8001244:	4839      	ldr	r0, [pc, #228]	@ (800132c <processInput+0x27c>)
 8001246:	f001 fdf1 	bl	8002e2c <HAL_GPIO_WritePin>
		HAL_Delay(5);
 800124a:	2005      	movs	r0, #5
 800124c:	f000 ff0a 	bl	8002064 <HAL_Delay>
		return 0;
 8001250:	2300      	movs	r3, #0
 8001252:	e2bb      	b.n	80017cc <processInput+0x71c>
	case 'd': // Set relay
		// SET relay k5
		HAL_GPIO_WritePin(RELAY_K5_GPIO_Port, RELAY_K5_Pin, SET); // set relay
 8001254:	2201      	movs	r2, #1
 8001256:	2110      	movs	r1, #16
 8001258:	4834      	ldr	r0, [pc, #208]	@ (800132c <processInput+0x27c>)
 800125a:	f001 fde7 	bl	8002e2c <HAL_GPIO_WritePin>
		HAL_Delay(10);
 800125e:	200a      	movs	r0, #10
 8001260:	f000 ff00 	bl	8002064 <HAL_Delay>
		HAL_GPIO_WritePin(RELAY_K5_GPIO_Port, RELAY_K5_Pin, RESET); // release coil
 8001264:	2200      	movs	r2, #0
 8001266:	2110      	movs	r1, #16
 8001268:	4830      	ldr	r0, [pc, #192]	@ (800132c <processInput+0x27c>)
 800126a:	f001 fddf 	bl	8002e2c <HAL_GPIO_WritePin>
		HAL_Delay(5);
 800126e:	2005      	movs	r0, #5
 8001270:	f000 fef8 	bl	8002064 <HAL_Delay>
		return 0;
 8001274:	2300      	movs	r3, #0
 8001276:	e2a9      	b.n	80017cc <processInput+0x71c>
	case 'e': // Set relay
		// SET relay k6
		HAL_GPIO_WritePin(RELAY_K6_GPIO_Port, RELAY_K6_Pin, SET); // set relay
 8001278:	2201      	movs	r2, #1
 800127a:	2120      	movs	r1, #32
 800127c:	482b      	ldr	r0, [pc, #172]	@ (800132c <processInput+0x27c>)
 800127e:	f001 fdd5 	bl	8002e2c <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8001282:	200a      	movs	r0, #10
 8001284:	f000 feee 	bl	8002064 <HAL_Delay>
		HAL_GPIO_WritePin(RELAY_K6_GPIO_Port, RELAY_K6_Pin, RESET); // release coil
 8001288:	2200      	movs	r2, #0
 800128a:	2120      	movs	r1, #32
 800128c:	4827      	ldr	r0, [pc, #156]	@ (800132c <processInput+0x27c>)
 800128e:	f001 fdcd 	bl	8002e2c <HAL_GPIO_WritePin>
		HAL_Delay(5);
 8001292:	2005      	movs	r0, #5
 8001294:	f000 fee6 	bl	8002064 <HAL_Delay>
		return 0;
 8001298:	2300      	movs	r3, #0
 800129a:	e297      	b.n	80017cc <processInput+0x71c>
	case '1': // toggle green led
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800129c:	2102      	movs	r1, #2
 800129e:	4823      	ldr	r0, [pc, #140]	@ (800132c <processInput+0x27c>)
 80012a0:	f001 fddc 	bl	8002e5c <HAL_GPIO_TogglePin>
		return 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	e291      	b.n	80017cc <processInput+0x71c>
	case '2': // Set relay
		// SET relay k1
		HAL_GPIO_WritePin(RELAY_K1_GPIO_Port, RELAY_K1_Pin, SET); // set relay
 80012a8:	2201      	movs	r2, #1
 80012aa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012ae:	481d      	ldr	r0, [pc, #116]	@ (8001324 <processInput+0x274>)
 80012b0:	f001 fdbc 	bl	8002e2c <HAL_GPIO_WritePin>
		HAL_Delay(10);
 80012b4:	200a      	movs	r0, #10
 80012b6:	f000 fed5 	bl	8002064 <HAL_Delay>
		HAL_GPIO_WritePin(RELAY_K1_GPIO_Port, RELAY_K1_Pin, RESET); // release coil
 80012ba:	2200      	movs	r2, #0
 80012bc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012c0:	4818      	ldr	r0, [pc, #96]	@ (8001324 <processInput+0x274>)
 80012c2:	f001 fdb3 	bl	8002e2c <HAL_GPIO_WritePin>
		HAL_Delay(5);
 80012c6:	2005      	movs	r0, #5
 80012c8:	f000 fecc 	bl	8002064 <HAL_Delay>
		// SET SSR1 XBT1
		HAL_GPIO_WritePin(SSR_XBT1_GPIO_Port, SSR_XBT1_Pin, SET); // set SSR latch
 80012cc:	2201      	movs	r2, #1
 80012ce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012d2:	4814      	ldr	r0, [pc, #80]	@ (8001324 <processInput+0x274>)
 80012d4:	f001 fdaa 	bl	8002e2c <HAL_GPIO_WritePin>
		HAL_Delay(10);
 80012d8:	200a      	movs	r0, #10
 80012da:	f000 fec3 	bl	8002064 <HAL_Delay>
		HAL_GPIO_WritePin(SSR_XBT1_GPIO_Port, SSR_XBT1_Pin, RESET); // release SSR latch
 80012de:	2200      	movs	r2, #0
 80012e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012e4:	480f      	ldr	r0, [pc, #60]	@ (8001324 <processInput+0x274>)
 80012e6:	f001 fda1 	bl	8002e2c <HAL_GPIO_WritePin>
		HAL_Delay(5);
 80012ea:	2005      	movs	r0, #5
 80012ec:	f000 feba 	bl	8002064 <HAL_Delay>
		return 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	e26b      	b.n	80017cc <processInput+0x71c>
	case '3': // Reset relay
		// RESET relay k1
		HAL_GPIO_WritePin(RELAY_RESET_1_GPIO_Port, RELAY_RESET_1_Pin, SET); // reset relay and SSR
 80012f4:	2201      	movs	r2, #1
 80012f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012fa:	480c      	ldr	r0, [pc, #48]	@ (800132c <processInput+0x27c>)
 80012fc:	f001 fd96 	bl	8002e2c <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8001300:	200a      	movs	r0, #10
 8001302:	f000 feaf 	bl	8002064 <HAL_Delay>
		HAL_GPIO_WritePin(RELAY_RESET_1_GPIO_Port, RELAY_RESET_1_Pin, RESET); // release reset coil
 8001306:	2200      	movs	r2, #0
 8001308:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800130c:	4807      	ldr	r0, [pc, #28]	@ (800132c <processInput+0x27c>)
 800130e:	f001 fd8d 	bl	8002e2c <HAL_GPIO_WritePin>
		HAL_Delay(5);
 8001312:	2005      	movs	r0, #5
 8001314:	f000 fea6 	bl	8002064 <HAL_Delay>
		return 0;
 8001318:	2300      	movs	r3, #0
 800131a:	e257      	b.n	80017cc <processInput+0x71c>
 800131c:	08006554 	.word	0x08006554
 8001320:	20000178 	.word	0x20000178
 8001324:	40011000 	.word	0x40011000
 8001328:	40011400 	.word	0x40011400
 800132c:	40010c00 	.word	0x40010c00
	case '4': // Run motor CW
		HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_3 ); // Start STEP signal >> counter toggle to toggle every 20/1000 sec = 50hz
 8001330:	2108      	movs	r1, #8
 8001332:	48a7      	ldr	r0, [pc, #668]	@ (80015d0 <processInput+0x520>)
 8001334:	f003 fc04 	bl	8004b40 <HAL_TIM_OC_Start>
		// motor
		HAL_GPIO_WritePin(ENABLE_M1_GPIO_Port, ENABLE_M1_Pin, SET); // disable driver
 8001338:	2201      	movs	r2, #1
 800133a:	2104      	movs	r1, #4
 800133c:	48a5      	ldr	r0, [pc, #660]	@ (80015d4 <processInput+0x524>)
 800133e:	f001 fd75 	bl	8002e2c <HAL_GPIO_WritePin>
		HAL_Delay(500); // wait for the motor to stop
 8001342:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001346:	f000 fe8d 	bl	8002064 <HAL_Delay>
		HAL_GPIO_WritePin(DIR_GPIO_Port,DIR_Pin, SET); // set motor direction
 800134a:	2201      	movs	r2, #1
 800134c:	2110      	movs	r1, #16
 800134e:	48a1      	ldr	r0, [pc, #644]	@ (80015d4 <processInput+0x524>)
 8001350:	f001 fd6c 	bl	8002e2c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENABLE_M1_GPIO_Port, ENABLE_M1_Pin, RESET); // enable driver to run motor
 8001354:	2200      	movs	r2, #0
 8001356:	2104      	movs	r1, #4
 8001358:	489e      	ldr	r0, [pc, #632]	@ (80015d4 <processInput+0x524>)
 800135a:	f001 fd67 	bl	8002e2c <HAL_GPIO_WritePin>
		// read current
		HAL_ADC_Start(&hadc2);
 800135e:	489e      	ldr	r0, [pc, #632]	@ (80015d8 <processInput+0x528>)
 8001360:	f000 ff7c 	bl	800225c <HAL_ADC_Start>

		HAL_ADC_PollForConversion(&hadc2, 100);
 8001364:	2164      	movs	r1, #100	@ 0x64
 8001366:	489c      	ldr	r0, [pc, #624]	@ (80015d8 <processInput+0x528>)
 8001368:	f001 f852 	bl	8002410 <HAL_ADC_PollForConversion>
		adcReading = (uint16_t) HAL_ADC_GetValue(&hadc2);
 800136c:	489a      	ldr	r0, [pc, #616]	@ (80015d8 <processInput+0x528>)
 800136e:	f001 f955 	bl	800261c <HAL_ADC_GetValue>
 8001372:	4603      	mov	r3, r0
 8001374:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
		sprintf(adcmsg, "Im_1 = %d\r\n", (uint32_t) adcReading);
 8001378:	f8b7 207e 	ldrh.w	r2, [r7, #126]	@ 0x7e
 800137c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001380:	4996      	ldr	r1, [pc, #600]	@ (80015dc <processInput+0x52c>)
 8001382:	4618      	mov	r0, r3
 8001384:	f004 fbf2 	bl	8005b6c <siprintf>
		HAL_UART_Transmit(&huart1, adcmsg, strlen(adcmsg), HAL_MAX_DELAY);
 8001388:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800138c:	4618      	mov	r0, r3
 800138e:	f7fe fedf 	bl	8000150 <strlen>
 8001392:	4603      	mov	r3, r0
 8001394:	b29a      	uxth	r2, r3
 8001396:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800139a:	f04f 33ff 	mov.w	r3, #4294967295
 800139e:	4890      	ldr	r0, [pc, #576]	@ (80015e0 <processInput+0x530>)
 80013a0:	f004 f94a 	bl	8005638 <HAL_UART_Transmit>
		HAL_Delay(1000);
 80013a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013a8:	f000 fe5c 	bl	8002064 <HAL_Delay>

		HAL_ADC_PollForConversion(&hadc2, 100);
 80013ac:	2164      	movs	r1, #100	@ 0x64
 80013ae:	488a      	ldr	r0, [pc, #552]	@ (80015d8 <processInput+0x528>)
 80013b0:	f001 f82e 	bl	8002410 <HAL_ADC_PollForConversion>
		adcReading = (uint16_t) HAL_ADC_GetValue(&hadc2);
 80013b4:	4888      	ldr	r0, [pc, #544]	@ (80015d8 <processInput+0x528>)
 80013b6:	f001 f931 	bl	800261c <HAL_ADC_GetValue>
 80013ba:	4603      	mov	r3, r0
 80013bc:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
		sprintf(adcmsg, "Im_2 = %d\r\n", (uint32_t) adcReading);
 80013c0:	f8b7 207e 	ldrh.w	r2, [r7, #126]	@ 0x7e
 80013c4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80013c8:	4986      	ldr	r1, [pc, #536]	@ (80015e4 <processInput+0x534>)
 80013ca:	4618      	mov	r0, r3
 80013cc:	f004 fbce 	bl	8005b6c <siprintf>
		HAL_UART_Transmit(&huart1, adcmsg, strlen(adcmsg), HAL_MAX_DELAY);
 80013d0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7fe febb 	bl	8000150 <strlen>
 80013da:	4603      	mov	r3, r0
 80013dc:	b29a      	uxth	r2, r3
 80013de:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80013e2:	f04f 33ff 	mov.w	r3, #4294967295
 80013e6:	487e      	ldr	r0, [pc, #504]	@ (80015e0 <processInput+0x530>)
 80013e8:	f004 f926 	bl	8005638 <HAL_UART_Transmit>
		HAL_Delay(1000);
 80013ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013f0:	f000 fe38 	bl	8002064 <HAL_Delay>

		HAL_ADC_PollForConversion(&hadc2, 100);
 80013f4:	2164      	movs	r1, #100	@ 0x64
 80013f6:	4878      	ldr	r0, [pc, #480]	@ (80015d8 <processInput+0x528>)
 80013f8:	f001 f80a 	bl	8002410 <HAL_ADC_PollForConversion>
		adcReading = (uint16_t) HAL_ADC_GetValue(&hadc2);
 80013fc:	4876      	ldr	r0, [pc, #472]	@ (80015d8 <processInput+0x528>)
 80013fe:	f001 f90d 	bl	800261c <HAL_ADC_GetValue>
 8001402:	4603      	mov	r3, r0
 8001404:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
		sprintf(adcmsg, "Im_3 = %d\r\n", (uint32_t) adcReading);
 8001408:	f8b7 207e 	ldrh.w	r2, [r7, #126]	@ 0x7e
 800140c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001410:	4975      	ldr	r1, [pc, #468]	@ (80015e8 <processInput+0x538>)
 8001412:	4618      	mov	r0, r3
 8001414:	f004 fbaa 	bl	8005b6c <siprintf>
		HAL_UART_Transmit(&huart1, adcmsg, strlen(adcmsg), HAL_MAX_DELAY);
 8001418:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800141c:	4618      	mov	r0, r3
 800141e:	f7fe fe97 	bl	8000150 <strlen>
 8001422:	4603      	mov	r3, r0
 8001424:	b29a      	uxth	r2, r3
 8001426:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800142a:	f04f 33ff 	mov.w	r3, #4294967295
 800142e:	486c      	ldr	r0, [pc, #432]	@ (80015e0 <processInput+0x530>)
 8001430:	f004 f902 	bl	8005638 <HAL_UART_Transmit>
		HAL_Delay(1000);
 8001434:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001438:	f000 fe14 	bl	8002064 <HAL_Delay>

		HAL_ADC_PollForConversion(&hadc2, 100);
 800143c:	2164      	movs	r1, #100	@ 0x64
 800143e:	4866      	ldr	r0, [pc, #408]	@ (80015d8 <processInput+0x528>)
 8001440:	f000 ffe6 	bl	8002410 <HAL_ADC_PollForConversion>
		adcReading = (uint16_t) HAL_ADC_GetValue(&hadc2);
 8001444:	4864      	ldr	r0, [pc, #400]	@ (80015d8 <processInput+0x528>)
 8001446:	f001 f8e9 	bl	800261c <HAL_ADC_GetValue>
 800144a:	4603      	mov	r3, r0
 800144c:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
		sprintf(adcmsg, "Im_4 = %d\r\n", (uint32_t) adcReading);
 8001450:	f8b7 207e 	ldrh.w	r2, [r7, #126]	@ 0x7e
 8001454:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001458:	4964      	ldr	r1, [pc, #400]	@ (80015ec <processInput+0x53c>)
 800145a:	4618      	mov	r0, r3
 800145c:	f004 fb86 	bl	8005b6c <siprintf>
		HAL_UART_Transmit(&huart1, adcmsg, strlen(adcmsg), HAL_MAX_DELAY);
 8001460:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001464:	4618      	mov	r0, r3
 8001466:	f7fe fe73 	bl	8000150 <strlen>
 800146a:	4603      	mov	r3, r0
 800146c:	b29a      	uxth	r2, r3
 800146e:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8001472:	f04f 33ff 	mov.w	r3, #4294967295
 8001476:	485a      	ldr	r0, [pc, #360]	@ (80015e0 <processInput+0x530>)
 8001478:	f004 f8de 	bl	8005638 <HAL_UART_Transmit>
		HAL_Delay(1000);
 800147c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001480:	f000 fdf0 	bl	8002064 <HAL_Delay>

		HAL_ADC_Stop(&hadc1);
 8001484:	485a      	ldr	r0, [pc, #360]	@ (80015f0 <processInput+0x540>)
 8001486:	f000 ff97 	bl	80023b8 <HAL_ADC_Stop>

		//HAL_Delay(5000); // run 5 seconds
		HAL_GPIO_WritePin(ENABLE_M1_GPIO_Port, ENABLE_M1_Pin, SET); // disable driver
 800148a:	2201      	movs	r2, #1
 800148c:	2104      	movs	r1, #4
 800148e:	4851      	ldr	r0, [pc, #324]	@ (80015d4 <processInput+0x524>)
 8001490:	f001 fccc 	bl	8002e2c <HAL_GPIO_WritePin>
		HAL_TIM_OC_Stop(&htim3, TIM_CHANNEL_3 );
 8001494:	2108      	movs	r1, #8
 8001496:	484e      	ldr	r0, [pc, #312]	@ (80015d0 <processInput+0x520>)
 8001498:	f003 fbf4 	bl	8004c84 <HAL_TIM_OC_Stop>

		return 0;
 800149c:	2300      	movs	r3, #0
 800149e:	e195      	b.n	80017cc <processInput+0x71c>
	case '5': // Run motor CCW
		HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_3 );
 80014a0:	2108      	movs	r1, #8
 80014a2:	484b      	ldr	r0, [pc, #300]	@ (80015d0 <processInput+0x520>)
 80014a4:	f003 fb4c 	bl	8004b40 <HAL_TIM_OC_Start>
		// motor
		HAL_GPIO_WritePin(ENABLE_M1_GPIO_Port, ENABLE_M1_Pin, SET); // disable driver
 80014a8:	2201      	movs	r2, #1
 80014aa:	2104      	movs	r1, #4
 80014ac:	4849      	ldr	r0, [pc, #292]	@ (80015d4 <processInput+0x524>)
 80014ae:	f001 fcbd 	bl	8002e2c <HAL_GPIO_WritePin>
		HAL_Delay(500); // wait for the motor to stop
 80014b2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80014b6:	f000 fdd5 	bl	8002064 <HAL_Delay>
		HAL_GPIO_WritePin(DIR_GPIO_Port,DIR_Pin, RESET); // set motor direction
 80014ba:	2200      	movs	r2, #0
 80014bc:	2110      	movs	r1, #16
 80014be:	4845      	ldr	r0, [pc, #276]	@ (80015d4 <processInput+0x524>)
 80014c0:	f001 fcb4 	bl	8002e2c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENABLE_M1_GPIO_Port, ENABLE_M1_Pin, RESET); // enable driver to run motor
 80014c4:	2200      	movs	r2, #0
 80014c6:	2104      	movs	r1, #4
 80014c8:	4842      	ldr	r0, [pc, #264]	@ (80015d4 <processInput+0x524>)
 80014ca:	f001 fcaf 	bl	8002e2c <HAL_GPIO_WritePin>
		HAL_Delay(5000); // run 5 seconds
 80014ce:	f241 3088 	movw	r0, #5000	@ 0x1388
 80014d2:	f000 fdc7 	bl	8002064 <HAL_Delay>
		HAL_GPIO_WritePin(ENABLE_M1_GPIO_Port, ENABLE_M1_Pin, SET); // disable driver
 80014d6:	2201      	movs	r2, #1
 80014d8:	2104      	movs	r1, #4
 80014da:	483e      	ldr	r0, [pc, #248]	@ (80015d4 <processInput+0x524>)
 80014dc:	f001 fca6 	bl	8002e2c <HAL_GPIO_WritePin>

		HAL_TIM_OC_Stop(&htim3, TIM_CHANNEL_3 );
 80014e0:	2108      	movs	r1, #8
 80014e2:	483b      	ldr	r0, [pc, #236]	@ (80015d0 <processInput+0x520>)
 80014e4:	f003 fbce 	bl	8004c84 <HAL_TIM_OC_Stop>
		return 0;
 80014e8:	2300      	movs	r3, #0
 80014ea:	e16f      	b.n	80017cc <processInput+0x71c>
	case '6': // change MUX to GPS
		HAL_GPIO_WritePin(MUX_SELECT_GPIO_Port, MUX_SELECT_Pin, RESET);
 80014ec:	2200      	movs	r2, #0
 80014ee:	2104      	movs	r1, #4
 80014f0:	4840      	ldr	r0, [pc, #256]	@ (80015f4 <processInput+0x544>)
 80014f2:	f001 fc9b 	bl	8002e2c <HAL_GPIO_WritePin>
		return 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	e168      	b.n	80017cc <processInput+0x71c>
	case '7': // change MUX to STM32
		HAL_GPIO_WritePin(MUX_SELECT_GPIO_Port, MUX_SELECT_Pin, SET);
 80014fa:	2201      	movs	r2, #1
 80014fc:	2104      	movs	r1, #4
 80014fe:	483d      	ldr	r0, [pc, #244]	@ (80015f4 <processInput+0x544>)
 8001500:	f001 fc94 	bl	8002e2c <HAL_GPIO_WritePin>
		return 0;
 8001504:	2300      	movs	r3, #0
 8001506:	e161      	b.n	80017cc <processInput+0x71c>
	case '8': // read ADC Vin
		HAL_ADC_Start(&hadc1);
 8001508:	4839      	ldr	r0, [pc, #228]	@ (80015f0 <processInput+0x540>)
 800150a:	f000 fea7 	bl	800225c <HAL_ADC_Start>
		for(uint8_t i=0; i<10; i++){
 800150e:	2300      	movs	r3, #0
 8001510:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
 8001514:	e012      	b.n	800153c <processInput+0x48c>
			HAL_ADC_PollForConversion(&hadc1, 100);
 8001516:	2164      	movs	r1, #100	@ 0x64
 8001518:	4835      	ldr	r0, [pc, #212]	@ (80015f0 <processInput+0x540>)
 800151a:	f000 ff79 	bl	8002410 <HAL_ADC_PollForConversion>
			adcReading += (uint16_t) HAL_ADC_GetValue(&hadc1);
 800151e:	4834      	ldr	r0, [pc, #208]	@ (80015f0 <processInput+0x540>)
 8001520:	f001 f87c 	bl	800261c <HAL_ADC_GetValue>
 8001524:	4603      	mov	r3, r0
 8001526:	b29a      	uxth	r2, r3
 8001528:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800152c:	4413      	add	r3, r2
 800152e:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
		for(uint8_t i=0; i<10; i++){
 8001532:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8001536:	3301      	adds	r3, #1
 8001538:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
 800153c:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8001540:	2b09      	cmp	r3, #9
 8001542:	d9e8      	bls.n	8001516 <processInput+0x466>
		}
		HAL_ADC_Stop(&hadc1);
 8001544:	482a      	ldr	r0, [pc, #168]	@ (80015f0 <processInput+0x540>)
 8001546:	f000 ff37 	bl	80023b8 <HAL_ADC_Stop>
		adcReading = adcReading/10;
 800154a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800154e:	4a2a      	ldr	r2, [pc, #168]	@ (80015f8 <processInput+0x548>)
 8001550:	fba2 2303 	umull	r2, r3, r2, r3
 8001554:	08db      	lsrs	r3, r3, #3
 8001556:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
		vin = adcReading * 17.0/1867.0;
 800155a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800155e:	4618      	mov	r0, r3
 8001560:	f7fe ff50 	bl	8000404 <__aeabi_i2d>
 8001564:	f04f 0200 	mov.w	r2, #0
 8001568:	4b24      	ldr	r3, [pc, #144]	@ (80015fc <processInput+0x54c>)
 800156a:	f7fe ffb5 	bl	80004d8 <__aeabi_dmul>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	4610      	mov	r0, r2
 8001574:	4619      	mov	r1, r3
 8001576:	a314      	add	r3, pc, #80	@ (adr r3, 80015c8 <processInput+0x518>)
 8001578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157c:	f7ff f8d6 	bl	800072c <__aeabi_ddiv>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	4610      	mov	r0, r2
 8001586:	4619      	mov	r1, r3
 8001588:	f7ff f9b8 	bl	80008fc <__aeabi_d2f>
 800158c:	4603      	mov	r3, r0
 800158e:	67bb      	str	r3, [r7, #120]	@ 0x78

		//char adcmsg[30];
		sprintf(adcmsg, "Vin = %d ", (int)vin);
 8001590:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8001592:	f7ff fa03 	bl	800099c <__aeabi_f2iz>
 8001596:	4602      	mov	r2, r0
 8001598:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800159c:	4918      	ldr	r1, [pc, #96]	@ (8001600 <processInput+0x550>)
 800159e:	4618      	mov	r0, r3
 80015a0:	f004 fae4 	bl	8005b6c <siprintf>
		HAL_UART_Transmit(&huart1, adcmsg, strlen(adcmsg), HAL_MAX_DELAY);
 80015a4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7fe fdd1 	bl	8000150 <strlen>
 80015ae:	4603      	mov	r3, r0
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80015b6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ba:	4809      	ldr	r0, [pc, #36]	@ (80015e0 <processInput+0x530>)
 80015bc:	f004 f83c 	bl	8005638 <HAL_UART_Transmit>
		return 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	e103      	b.n	80017cc <processInput+0x71c>
 80015c4:	f3af 8000 	nop.w
 80015c8:	00000000 	.word	0x00000000
 80015cc:	409d2c00 	.word	0x409d2c00
 80015d0:	20000130 	.word	0x20000130
 80015d4:	40011000 	.word	0x40011000
 80015d8:	200000a8 	.word	0x200000a8
 80015dc:	08006574 	.word	0x08006574
 80015e0:	20000178 	.word	0x20000178
 80015e4:	08006580 	.word	0x08006580
 80015e8:	0800658c 	.word	0x0800658c
 80015ec:	08006598 	.word	0x08006598
 80015f0:	20000078 	.word	0x20000078
 80015f4:	40010800 	.word	0x40010800
 80015f8:	cccccccd 	.word	0xcccccccd
 80015fc:	40310000 	.word	0x40310000
 8001600:	080065a4 	.word	0x080065a4
	case '9':
		// get values to store in eeprom
		uint8_t a,b;
		char rxBuffer[1];
		HAL_UART_Transmit(&huart1, "Val-1= ", strlen("Val-1= "), HAL_MAX_DELAY);
 8001604:	f04f 33ff 	mov.w	r3, #4294967295
 8001608:	2207      	movs	r2, #7
 800160a:	4972      	ldr	r1, [pc, #456]	@ (80017d4 <processInput+0x724>)
 800160c:	4872      	ldr	r0, [pc, #456]	@ (80017d8 <processInput+0x728>)
 800160e:	f004 f813 	bl	8005638 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart1, rxBuffer, 1, HAL_MAX_DELAY);
 8001612:	f107 0108 	add.w	r1, r7, #8
 8001616:	f04f 33ff 	mov.w	r3, #4294967295
 800161a:	2201      	movs	r2, #1
 800161c:	486e      	ldr	r0, [pc, #440]	@ (80017d8 <processInput+0x728>)
 800161e:	f004 f88e 	bl	800573e <HAL_UART_Receive>
		HAL_UART_Transmit(&huart1, rxBuffer, 1, HAL_MAX_DELAY); // echo
 8001622:	f107 0108 	add.w	r1, r7, #8
 8001626:	f04f 33ff 	mov.w	r3, #4294967295
 800162a:	2201      	movs	r2, #1
 800162c:	486a      	ldr	r0, [pc, #424]	@ (80017d8 <processInput+0x728>)
 800162e:	f004 f803 	bl	8005638 <HAL_UART_Transmit>
		a = atoi(rxBuffer);
 8001632:	f107 0308 	add.w	r3, r7, #8
 8001636:	4618      	mov	r0, r3
 8001638:	f004 fa10 	bl	8005a5c <atoi>
 800163c:	4603      	mov	r3, r0
 800163e:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
		HAL_UART_Transmit(&huart1, "\r\nVal-2= ", strlen("\r\nVal-2= "), HAL_MAX_DELAY);
 8001642:	f04f 33ff 	mov.w	r3, #4294967295
 8001646:	2209      	movs	r2, #9
 8001648:	4964      	ldr	r1, [pc, #400]	@ (80017dc <processInput+0x72c>)
 800164a:	4863      	ldr	r0, [pc, #396]	@ (80017d8 <processInput+0x728>)
 800164c:	f003 fff4 	bl	8005638 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart1, rxBuffer, 1, HAL_MAX_DELAY);
 8001650:	f107 0108 	add.w	r1, r7, #8
 8001654:	f04f 33ff 	mov.w	r3, #4294967295
 8001658:	2201      	movs	r2, #1
 800165a:	485f      	ldr	r0, [pc, #380]	@ (80017d8 <processInput+0x728>)
 800165c:	f004 f86f 	bl	800573e <HAL_UART_Receive>
		HAL_UART_Transmit(&huart1, rxBuffer, 1, HAL_MAX_DELAY); // echo
 8001660:	f107 0108 	add.w	r1, r7, #8
 8001664:	f04f 33ff 	mov.w	r3, #4294967295
 8001668:	2201      	movs	r2, #1
 800166a:	485b      	ldr	r0, [pc, #364]	@ (80017d8 <processInput+0x728>)
 800166c:	f003 ffe4 	bl	8005638 <HAL_UART_Transmit>
		b = atoi(rxBuffer);
 8001670:	f107 0308 	add.w	r3, r7, #8
 8001674:	4618      	mov	r0, r3
 8001676:	f004 f9f1 	bl	8005a5c <atoi>
 800167a:	4603      	mov	r3, r0
 800167c:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75

		// store 2 bytes starting in address 0x00 total 1 kbit = 1024 bit = 128 bytes
		// 1 page = 8 bytes >> 16 pages >> (0x00) 0-7, 8-15, 16-23, ... 120-127 (0x7F)
		dataByte[0] = 0x00;
 8001680:	2300      	movs	r3, #0
 8001682:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
		dataByte[1] = a;
 8001686:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800168a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		dataByte[2] = b;
 800168e:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8001692:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		dataByte[3] = 249; // 0-255 8bits
 8001696:	23f9      	movs	r3, #249	@ 0xf9
 8001698:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		HAL_I2C_Master_Transmit(&hi2c1, chipAddress , dataByte, 4, HAL_MAX_DELAY); // send word address, value
 800169c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80016a0:	b299      	uxth	r1, r3
 80016a2:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80016a6:	f04f 33ff 	mov.w	r3, #4294967295
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	2304      	movs	r3, #4
 80016ae:	484c      	ldr	r0, [pc, #304]	@ (80017e0 <processInput+0x730>)
 80016b0:	f001 fd32 	bl	8003118 <HAL_I2C_Master_Transmit>
		HAL_Delay(10);
 80016b4:	200a      	movs	r0, #10
 80016b6:	f000 fcd5 	bl	8002064 <HAL_Delay>

		// read 2 bytes from data address 0x00, 0x01
		HAL_I2C_Master_Transmit(&hi2c1, chipAddress , startAddress, 1, HAL_MAX_DELAY); // dummy write with word address 0x00 as starting address
 80016ba:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80016be:	b299      	uxth	r1, r3
 80016c0:	f107 0220 	add.w	r2, r7, #32
 80016c4:	f04f 33ff 	mov.w	r3, #4294967295
 80016c8:	9300      	str	r3, [sp, #0]
 80016ca:	2301      	movs	r3, #1
 80016cc:	4844      	ldr	r0, [pc, #272]	@ (80017e0 <processInput+0x730>)
 80016ce:	f001 fd23 	bl	8003118 <HAL_I2C_Master_Transmit>
		HAL_Delay(10);
 80016d2:	200a      	movs	r0, #10
 80016d4:	f000 fcc6 	bl	8002064 <HAL_Delay>
		HAL_I2C_Master_Receive(&hi2c1, chipAddress, dataReceive, 3, HAL_MAX_DELAY);
 80016d8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80016dc:	b299      	uxth	r1, r3
 80016de:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80016e2:	f04f 33ff 	mov.w	r3, #4294967295
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	2303      	movs	r3, #3
 80016ea:	483d      	ldr	r0, [pc, #244]	@ (80017e0 <processInput+0x730>)
 80016ec:	f001 fe12 	bl	8003314 <HAL_I2C_Master_Receive>

		sprintf(output,"\r\nStored values: %i, %i, %i\r\n", dataReceive[0], dataReceive[1], dataReceive[2]);
 80016f0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80016f4:	461a      	mov	r2, r3
 80016f6:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80016fa:	4619      	mov	r1, r3
 80016fc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001700:	f107 000c 	add.w	r0, r7, #12
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	460b      	mov	r3, r1
 8001708:	4936      	ldr	r1, [pc, #216]	@ (80017e4 <processInput+0x734>)
 800170a:	f004 fa2f 	bl	8005b6c <siprintf>
		HAL_UART_Transmit(&huart1, output, strlen(output), HAL_MAX_DELAY);
 800170e:	f107 030c 	add.w	r3, r7, #12
 8001712:	4618      	mov	r0, r3
 8001714:	f7fe fd1c 	bl	8000150 <strlen>
 8001718:	4603      	mov	r3, r0
 800171a:	b29a      	uxth	r2, r3
 800171c:	f107 010c 	add.w	r1, r7, #12
 8001720:	f04f 33ff 	mov.w	r3, #4294967295
 8001724:	482c      	ldr	r0, [pc, #176]	@ (80017d8 <processInput+0x728>)
 8001726:	f003 ff87 	bl	8005638 <HAL_UART_Transmit>
		return 0;
 800172a:	2300      	movs	r3, #0
 800172c:	e04e      	b.n	80017cc <processInput+0x71c>
	case '0':
		// read 2 bytes from data address 0x00, 0x01
		HAL_I2C_Master_Transmit(&hi2c1, chipAddress , startAddress, 1, HAL_MAX_DELAY); // dummy write with word address 0x00 as starting address
 800172e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001732:	b299      	uxth	r1, r3
 8001734:	f107 0220 	add.w	r2, r7, #32
 8001738:	f04f 33ff 	mov.w	r3, #4294967295
 800173c:	9300      	str	r3, [sp, #0]
 800173e:	2301      	movs	r3, #1
 8001740:	4827      	ldr	r0, [pc, #156]	@ (80017e0 <processInput+0x730>)
 8001742:	f001 fce9 	bl	8003118 <HAL_I2C_Master_Transmit>
		HAL_Delay(10);
 8001746:	200a      	movs	r0, #10
 8001748:	f000 fc8c 	bl	8002064 <HAL_Delay>
		HAL_I2C_Master_Receive(&hi2c1, chipAddress, dataReceive, 3, HAL_MAX_DELAY);
 800174c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001750:	b299      	uxth	r1, r3
 8001752:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001756:	f04f 33ff 	mov.w	r3, #4294967295
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	2303      	movs	r3, #3
 800175e:	4820      	ldr	r0, [pc, #128]	@ (80017e0 <processInput+0x730>)
 8001760:	f001 fdd8 	bl	8003314 <HAL_I2C_Master_Receive>

		sprintf(output,"Stored values: %i, %i, %i\r\n", dataReceive[0], dataReceive[1], dataReceive[2]);
 8001764:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001768:	461a      	mov	r2, r3
 800176a:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800176e:	4619      	mov	r1, r3
 8001770:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001774:	f107 000c 	add.w	r0, r7, #12
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	460b      	mov	r3, r1
 800177c:	491a      	ldr	r1, [pc, #104]	@ (80017e8 <processInput+0x738>)
 800177e:	f004 f9f5 	bl	8005b6c <siprintf>
		HAL_UART_Transmit(&huart1, output, strlen(output), HAL_MAX_DELAY);
 8001782:	f107 030c 	add.w	r3, r7, #12
 8001786:	4618      	mov	r0, r3
 8001788:	f7fe fce2 	bl	8000150 <strlen>
 800178c:	4603      	mov	r3, r0
 800178e:	b29a      	uxth	r2, r3
 8001790:	f107 010c 	add.w	r1, r7, #12
 8001794:	f04f 33ff 	mov.w	r3, #4294967295
 8001798:	480f      	ldr	r0, [pc, #60]	@ (80017d8 <processInput+0x728>)
 800179a:	f003 ff4d 	bl	8005638 <HAL_UART_Transmit>
		return 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	e014      	b.n	80017cc <processInput+0x71c>
	default:
		sprintf(msg, "\r\n> %d is not a valid option!");
 80017a2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80017a6:	4911      	ldr	r1, [pc, #68]	@ (80017ec <processInput+0x73c>)
 80017a8:	4618      	mov	r0, r3
 80017aa:	f004 f9df 	bl	8005b6c <siprintf>
		HAL_UART_Transmit(&huart1, msg, strlen(msg), HAL_MAX_DELAY);
 80017ae:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7fe fccc 	bl	8000150 <strlen>
 80017b8:	4603      	mov	r3, r0
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 80017c0:	f04f 33ff 	mov.w	r3, #4294967295
 80017c4:	4804      	ldr	r0, [pc, #16]	@ (80017d8 <processInput+0x728>)
 80017c6:	f003 ff37 	bl	8005638 <HAL_UART_Transmit>
		return 1;
 80017ca:	2301      	movs	r3, #1

	}

}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3780      	adds	r7, #128	@ 0x80
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	080065b0 	.word	0x080065b0
 80017d8:	20000178 	.word	0x20000178
 80017dc:	080065b8 	.word	0x080065b8
 80017e0:	200000d8 	.word	0x200000d8
 80017e4:	080065c4 	.word	0x080065c4
 80017e8:	080065e4 	.word	0x080065e4
 80017ec:	08006600 	.word	0x08006600

080017f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017f4:	b672      	cpsid	i
}
 80017f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017f8:	bf00      	nop
 80017fa:	e7fd      	b.n	80017f8 <Error_Handler+0x8>

080017fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001802:	4b15      	ldr	r3, [pc, #84]	@ (8001858 <HAL_MspInit+0x5c>)
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	4a14      	ldr	r2, [pc, #80]	@ (8001858 <HAL_MspInit+0x5c>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	6193      	str	r3, [r2, #24]
 800180e:	4b12      	ldr	r3, [pc, #72]	@ (8001858 <HAL_MspInit+0x5c>)
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800181a:	4b0f      	ldr	r3, [pc, #60]	@ (8001858 <HAL_MspInit+0x5c>)
 800181c:	69db      	ldr	r3, [r3, #28]
 800181e:	4a0e      	ldr	r2, [pc, #56]	@ (8001858 <HAL_MspInit+0x5c>)
 8001820:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001824:	61d3      	str	r3, [r2, #28]
 8001826:	4b0c      	ldr	r3, [pc, #48]	@ (8001858 <HAL_MspInit+0x5c>)
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800182e:	607b      	str	r3, [r7, #4]
 8001830:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001832:	4b0a      	ldr	r3, [pc, #40]	@ (800185c <HAL_MspInit+0x60>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	4a04      	ldr	r2, [pc, #16]	@ (800185c <HAL_MspInit+0x60>)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800184e:	bf00      	nop
 8001850:	3714      	adds	r7, #20
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr
 8001858:	40021000 	.word	0x40021000
 800185c:	40010000 	.word	0x40010000

08001860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001864:	bf00      	nop
 8001866:	e7fd      	b.n	8001864 <NMI_Handler+0x4>

08001868 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800186c:	bf00      	nop
 800186e:	e7fd      	b.n	800186c <HardFault_Handler+0x4>

08001870 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001874:	bf00      	nop
 8001876:	e7fd      	b.n	8001874 <MemManage_Handler+0x4>

08001878 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800187c:	bf00      	nop
 800187e:	e7fd      	b.n	800187c <BusFault_Handler+0x4>

08001880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001884:	bf00      	nop
 8001886:	e7fd      	b.n	8001884 <UsageFault_Handler+0x4>

08001888 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr

08001894 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr

080018a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr

080018ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018b0:	f000 fbbc 	bl	800202c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018b4:	bf00      	nop
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018c0:	4a14      	ldr	r2, [pc, #80]	@ (8001914 <_sbrk+0x5c>)
 80018c2:	4b15      	ldr	r3, [pc, #84]	@ (8001918 <_sbrk+0x60>)
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018cc:	4b13      	ldr	r3, [pc, #76]	@ (800191c <_sbrk+0x64>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d102      	bne.n	80018da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018d4:	4b11      	ldr	r3, [pc, #68]	@ (800191c <_sbrk+0x64>)
 80018d6:	4a12      	ldr	r2, [pc, #72]	@ (8001920 <_sbrk+0x68>)
 80018d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018da:	4b10      	ldr	r3, [pc, #64]	@ (800191c <_sbrk+0x64>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4413      	add	r3, r2
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d207      	bcs.n	80018f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018e8:	f004 f968 	bl	8005bbc <__errno>
 80018ec:	4603      	mov	r3, r0
 80018ee:	220c      	movs	r2, #12
 80018f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018f2:	f04f 33ff 	mov.w	r3, #4294967295
 80018f6:	e009      	b.n	800190c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018f8:	4b08      	ldr	r3, [pc, #32]	@ (800191c <_sbrk+0x64>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018fe:	4b07      	ldr	r3, [pc, #28]	@ (800191c <_sbrk+0x64>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4413      	add	r3, r2
 8001906:	4a05      	ldr	r2, [pc, #20]	@ (800191c <_sbrk+0x64>)
 8001908:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800190a:	68fb      	ldr	r3, [r7, #12]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3718      	adds	r7, #24
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20005000 	.word	0x20005000
 8001918:	00000400 	.word	0x00000400
 800191c:	2000012c 	.word	0x2000012c
 8001920:	200003a8 	.word	0x200003a8

08001924 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr

08001930 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b08e      	sub	sp, #56	@ 0x38
 8001934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001936:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	605a      	str	r2, [r3, #4]
 8001940:	609a      	str	r2, [r3, #8]
 8001942:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001944:	f107 0320 	add.w	r3, r7, #32
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800194e:	1d3b      	adds	r3, r7, #4
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	60da      	str	r2, [r3, #12]
 800195a:	611a      	str	r2, [r3, #16]
 800195c:	615a      	str	r2, [r3, #20]
 800195e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001960:	4b2c      	ldr	r3, [pc, #176]	@ (8001a14 <MX_TIM3_Init+0xe4>)
 8001962:	4a2d      	ldr	r2, [pc, #180]	@ (8001a18 <MX_TIM3_Init+0xe8>)
 8001964:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 8001966:	4b2b      	ldr	r3, [pc, #172]	@ (8001a14 <MX_TIM3_Init+0xe4>)
 8001968:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800196c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800196e:	4b29      	ldr	r3, [pc, #164]	@ (8001a14 <MX_TIM3_Init+0xe4>)
 8001970:	2200      	movs	r2, #0
 8001972:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 15-1;
 8001974:	4b27      	ldr	r3, [pc, #156]	@ (8001a14 <MX_TIM3_Init+0xe4>)
 8001976:	220e      	movs	r2, #14
 8001978:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800197a:	4b26      	ldr	r3, [pc, #152]	@ (8001a14 <MX_TIM3_Init+0xe4>)
 800197c:	2200      	movs	r2, #0
 800197e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001980:	4b24      	ldr	r3, [pc, #144]	@ (8001a14 <MX_TIM3_Init+0xe4>)
 8001982:	2280      	movs	r2, #128	@ 0x80
 8001984:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001986:	4823      	ldr	r0, [pc, #140]	@ (8001a14 <MX_TIM3_Init+0xe4>)
 8001988:	f003 f832 	bl	80049f0 <HAL_TIM_Base_Init>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001992:	f7ff ff2d 	bl	80017f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001996:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800199a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800199c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019a0:	4619      	mov	r1, r3
 80019a2:	481c      	ldr	r0, [pc, #112]	@ (8001a14 <MX_TIM3_Init+0xe4>)
 80019a4:	f003 fa2e 	bl	8004e04 <HAL_TIM_ConfigClockSource>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80019ae:	f7ff ff1f 	bl	80017f0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80019b2:	4818      	ldr	r0, [pc, #96]	@ (8001a14 <MX_TIM3_Init+0xe4>)
 80019b4:	f003 f86b 	bl	8004a8e <HAL_TIM_OC_Init>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80019be:	f7ff ff17 	bl	80017f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019c2:	2300      	movs	r3, #0
 80019c4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019c6:	2300      	movs	r3, #0
 80019c8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019ca:	f107 0320 	add.w	r3, r7, #32
 80019ce:	4619      	mov	r1, r3
 80019d0:	4810      	ldr	r0, [pc, #64]	@ (8001a14 <MX_TIM3_Init+0xe4>)
 80019d2:	f003 fd83 	bl	80054dc <HAL_TIMEx_MasterConfigSynchronization>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80019dc:	f7ff ff08 	bl	80017f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80019e0:	2330      	movs	r3, #48	@ 0x30
 80019e2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019e8:	2300      	movs	r3, #0
 80019ea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019f0:	1d3b      	adds	r3, r7, #4
 80019f2:	2208      	movs	r2, #8
 80019f4:	4619      	mov	r1, r3
 80019f6:	4807      	ldr	r0, [pc, #28]	@ (8001a14 <MX_TIM3_Init+0xe4>)
 80019f8:	f003 f9a8 	bl	8004d4c <HAL_TIM_OC_ConfigChannel>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001a02:	f7ff fef5 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a06:	4803      	ldr	r0, [pc, #12]	@ (8001a14 <MX_TIM3_Init+0xe4>)
 8001a08:	f000 f826 	bl	8001a58 <HAL_TIM_MspPostInit>

}
 8001a0c:	bf00      	nop
 8001a0e:	3738      	adds	r7, #56	@ 0x38
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20000130 	.word	0x20000130
 8001a18:	40000400 	.word	0x40000400

08001a1c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a09      	ldr	r2, [pc, #36]	@ (8001a50 <HAL_TIM_Base_MspInit+0x34>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d10b      	bne.n	8001a46 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a2e:	4b09      	ldr	r3, [pc, #36]	@ (8001a54 <HAL_TIM_Base_MspInit+0x38>)
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	4a08      	ldr	r2, [pc, #32]	@ (8001a54 <HAL_TIM_Base_MspInit+0x38>)
 8001a34:	f043 0302 	orr.w	r3, r3, #2
 8001a38:	61d3      	str	r3, [r2, #28]
 8001a3a:	4b06      	ldr	r3, [pc, #24]	@ (8001a54 <HAL_TIM_Base_MspInit+0x38>)
 8001a3c:	69db      	ldr	r3, [r3, #28]
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001a46:	bf00      	nop
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc80      	pop	{r7}
 8001a4e:	4770      	bx	lr
 8001a50:	40000400 	.word	0x40000400
 8001a54:	40021000 	.word	0x40021000

08001a58 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b088      	sub	sp, #32
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a60:	f107 0310 	add.w	r3, r7, #16
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a0f      	ldr	r2, [pc, #60]	@ (8001ab0 <HAL_TIM_MspPostInit+0x58>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d117      	bne.n	8001aa8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a78:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab4 <HAL_TIM_MspPostInit+0x5c>)
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ab4 <HAL_TIM_MspPostInit+0x5c>)
 8001a7e:	f043 0308 	orr.w	r3, r3, #8
 8001a82:	6193      	str	r3, [r2, #24]
 8001a84:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab4 <HAL_TIM_MspPostInit+0x5c>)
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	f003 0308 	and.w	r3, r3, #8
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a90:	2301      	movs	r3, #1
 8001a92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a94:	2302      	movs	r3, #2
 8001a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a9c:	f107 0310 	add.w	r3, r7, #16
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4805      	ldr	r0, [pc, #20]	@ (8001ab8 <HAL_TIM_MspPostInit+0x60>)
 8001aa4:	f001 f83e 	bl	8002b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001aa8:	bf00      	nop
 8001aaa:	3720      	adds	r7, #32
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40000400 	.word	0x40000400
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	40010c00 	.word	0x40010c00

08001abc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ac0:	4b11      	ldr	r3, [pc, #68]	@ (8001b08 <MX_USART1_UART_Init+0x4c>)
 8001ac2:	4a12      	ldr	r2, [pc, #72]	@ (8001b0c <MX_USART1_UART_Init+0x50>)
 8001ac4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 4800;
 8001ac6:	4b10      	ldr	r3, [pc, #64]	@ (8001b08 <MX_USART1_UART_Init+0x4c>)
 8001ac8:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8001acc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ace:	4b0e      	ldr	r3, [pc, #56]	@ (8001b08 <MX_USART1_UART_Init+0x4c>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8001b08 <MX_USART1_UART_Init+0x4c>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ada:	4b0b      	ldr	r3, [pc, #44]	@ (8001b08 <MX_USART1_UART_Init+0x4c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ae0:	4b09      	ldr	r3, [pc, #36]	@ (8001b08 <MX_USART1_UART_Init+0x4c>)
 8001ae2:	220c      	movs	r2, #12
 8001ae4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ae6:	4b08      	ldr	r3, [pc, #32]	@ (8001b08 <MX_USART1_UART_Init+0x4c>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aec:	4b06      	ldr	r3, [pc, #24]	@ (8001b08 <MX_USART1_UART_Init+0x4c>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001af2:	4805      	ldr	r0, [pc, #20]	@ (8001b08 <MX_USART1_UART_Init+0x4c>)
 8001af4:	f003 fd50 	bl	8005598 <HAL_UART_Init>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001afe:	f7ff fe77 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20000178 	.word	0x20000178
 8001b0c:	40013800 	.word	0x40013800

08001b10 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b14:	4b11      	ldr	r3, [pc, #68]	@ (8001b5c <MX_USART3_UART_Init+0x4c>)
 8001b16:	4a12      	ldr	r2, [pc, #72]	@ (8001b60 <MX_USART3_UART_Init+0x50>)
 8001b18:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b1a:	4b10      	ldr	r3, [pc, #64]	@ (8001b5c <MX_USART3_UART_Init+0x4c>)
 8001b1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b20:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b22:	4b0e      	ldr	r3, [pc, #56]	@ (8001b5c <MX_USART3_UART_Init+0x4c>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b28:	4b0c      	ldr	r3, [pc, #48]	@ (8001b5c <MX_USART3_UART_Init+0x4c>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b5c <MX_USART3_UART_Init+0x4c>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b34:	4b09      	ldr	r3, [pc, #36]	@ (8001b5c <MX_USART3_UART_Init+0x4c>)
 8001b36:	220c      	movs	r2, #12
 8001b38:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b3a:	4b08      	ldr	r3, [pc, #32]	@ (8001b5c <MX_USART3_UART_Init+0x4c>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b40:	4b06      	ldr	r3, [pc, #24]	@ (8001b5c <MX_USART3_UART_Init+0x4c>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b46:	4805      	ldr	r0, [pc, #20]	@ (8001b5c <MX_USART3_UART_Init+0x4c>)
 8001b48:	f003 fd26 	bl	8005598 <HAL_UART_Init>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001b52:	f7ff fe4d 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	200001c0 	.word	0x200001c0
 8001b60:	40004800 	.word	0x40004800

08001b64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08a      	sub	sp, #40	@ 0x28
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6c:	f107 0318 	add.w	r3, r7, #24
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a38      	ldr	r2, [pc, #224]	@ (8001c60 <HAL_UART_MspInit+0xfc>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d132      	bne.n	8001bea <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b84:	4b37      	ldr	r3, [pc, #220]	@ (8001c64 <HAL_UART_MspInit+0x100>)
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	4a36      	ldr	r2, [pc, #216]	@ (8001c64 <HAL_UART_MspInit+0x100>)
 8001b8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b8e:	6193      	str	r3, [r2, #24]
 8001b90:	4b34      	ldr	r3, [pc, #208]	@ (8001c64 <HAL_UART_MspInit+0x100>)
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b98:	617b      	str	r3, [r7, #20]
 8001b9a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9c:	4b31      	ldr	r3, [pc, #196]	@ (8001c64 <HAL_UART_MspInit+0x100>)
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	4a30      	ldr	r2, [pc, #192]	@ (8001c64 <HAL_UART_MspInit+0x100>)
 8001ba2:	f043 0304 	orr.w	r3, r3, #4
 8001ba6:	6193      	str	r3, [r2, #24]
 8001ba8:	4b2e      	ldr	r3, [pc, #184]	@ (8001c64 <HAL_UART_MspInit+0x100>)
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	f003 0304 	and.w	r3, r3, #4
 8001bb0:	613b      	str	r3, [r7, #16]
 8001bb2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001bb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001bb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc2:	f107 0318 	add.w	r3, r7, #24
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4827      	ldr	r0, [pc, #156]	@ (8001c68 <HAL_UART_MspInit+0x104>)
 8001bca:	f000 ffab 	bl	8002b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001bce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bdc:	f107 0318 	add.w	r3, r7, #24
 8001be0:	4619      	mov	r1, r3
 8001be2:	4821      	ldr	r0, [pc, #132]	@ (8001c68 <HAL_UART_MspInit+0x104>)
 8001be4:	f000 ff9e 	bl	8002b24 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001be8:	e036      	b.n	8001c58 <HAL_UART_MspInit+0xf4>
  else if(uartHandle->Instance==USART3)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a1f      	ldr	r2, [pc, #124]	@ (8001c6c <HAL_UART_MspInit+0x108>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d131      	bne.n	8001c58 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001bf4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c64 <HAL_UART_MspInit+0x100>)
 8001bf6:	69db      	ldr	r3, [r3, #28]
 8001bf8:	4a1a      	ldr	r2, [pc, #104]	@ (8001c64 <HAL_UART_MspInit+0x100>)
 8001bfa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bfe:	61d3      	str	r3, [r2, #28]
 8001c00:	4b18      	ldr	r3, [pc, #96]	@ (8001c64 <HAL_UART_MspInit+0x100>)
 8001c02:	69db      	ldr	r3, [r3, #28]
 8001c04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0c:	4b15      	ldr	r3, [pc, #84]	@ (8001c64 <HAL_UART_MspInit+0x100>)
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	4a14      	ldr	r2, [pc, #80]	@ (8001c64 <HAL_UART_MspInit+0x100>)
 8001c12:	f043 0308 	orr.w	r3, r3, #8
 8001c16:	6193      	str	r3, [r2, #24]
 8001c18:	4b12      	ldr	r3, [pc, #72]	@ (8001c64 <HAL_UART_MspInit+0x100>)
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	f003 0308 	and.w	r3, r3, #8
 8001c20:	60bb      	str	r3, [r7, #8]
 8001c22:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c32:	f107 0318 	add.w	r3, r7, #24
 8001c36:	4619      	mov	r1, r3
 8001c38:	480d      	ldr	r0, [pc, #52]	@ (8001c70 <HAL_UART_MspInit+0x10c>)
 8001c3a:	f000 ff73 	bl	8002b24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001c3e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001c42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c44:	2300      	movs	r3, #0
 8001c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c4c:	f107 0318 	add.w	r3, r7, #24
 8001c50:	4619      	mov	r1, r3
 8001c52:	4807      	ldr	r0, [pc, #28]	@ (8001c70 <HAL_UART_MspInit+0x10c>)
 8001c54:	f000 ff66 	bl	8002b24 <HAL_GPIO_Init>
}
 8001c58:	bf00      	nop
 8001c5a:	3728      	adds	r7, #40	@ 0x28
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40013800 	.word	0x40013800
 8001c64:	40021000 	.word	0x40021000
 8001c68:	40010800 	.word	0x40010800
 8001c6c:	40004800 	.word	0x40004800
 8001c70:	40010c00 	.word	0x40010c00

08001c74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c74:	f7ff fe56 	bl	8001924 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c78:	480b      	ldr	r0, [pc, #44]	@ (8001ca8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c7a:	490c      	ldr	r1, [pc, #48]	@ (8001cac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c7c:	4a0c      	ldr	r2, [pc, #48]	@ (8001cb0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c80:	e002      	b.n	8001c88 <LoopCopyDataInit>

08001c82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c86:	3304      	adds	r3, #4

08001c88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c8c:	d3f9      	bcc.n	8001c82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c8e:	4a09      	ldr	r2, [pc, #36]	@ (8001cb4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c90:	4c09      	ldr	r4, [pc, #36]	@ (8001cb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c94:	e001      	b.n	8001c9a <LoopFillZerobss>

08001c96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c98:	3204      	adds	r2, #4

08001c9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c9c:	d3fb      	bcc.n	8001c96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c9e:	f003 ff93 	bl	8005bc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ca2:	f7ff f889 	bl	8000db8 <main>
  bx lr
 8001ca6:	4770      	bx	lr
  ldr r0, =_sdata
 8001ca8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cac:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001cb0:	080068e0 	.word	0x080068e0
  ldr r2, =_sbss
 8001cb4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001cb8:	200003a8 	.word	0x200003a8

08001cbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cbc:	e7fe      	b.n	8001cbc <ADC1_2_IRQHandler>

08001cbe <lcd_send_byte>:
/**************************** WRITE TO LCD FUNCTIONS ***************************/

/* Serial->Parallel: output Byte Px: D7 D6 D5 D4 BT E RW RS */


void lcd_send_byte(uint8_t byte, bool rs, bool rw){
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b084      	sub	sp, #16
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	71fb      	strb	r3, [r7, #7]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	71bb      	strb	r3, [r7, #6]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	717b      	strb	r3, [r7, #5]
	// byte contains 8 bits of information  / byteType can be INSTRUCTION or DATA
	uint8_t upperByte = (byte & HIGH_NIBBLE); // mask with 1111 0000
 8001cd0:	79fb      	ldrb	r3, [r7, #7]
 8001cd2:	f023 030f 	bic.w	r3, r3, #15
 8001cd6:	73fb      	strb	r3, [r7, #15]
	uint8_t lowerByte = (byte << 4); // shift 4 to the left so lower nibble becomes high
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	011b      	lsls	r3, r3, #4
 8001cdc:	73bb      	strb	r3, [r7, #14]

	// add rs and rw bits
	upperByte |= ((rs<<RS_POS) | (rw<<RW_POS) | (BT_ON<<BT_POS));
 8001cde:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8001ce2:	797b      	ldrb	r3, [r7, #5]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	b25b      	sxtb	r3, r3
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	b25b      	sxtb	r3, r3
 8001cec:	b2da      	uxtb	r2, r3
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	f043 0308 	orr.w	r3, r3, #8
 8001cf8:	73fb      	strb	r3, [r7, #15]
	lowerByte |= ((rs<<RS_POS) | (rw<<RW_POS) | (BT_ON<<BT_POS));
 8001cfa:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8001cfe:	797b      	ldrb	r3, [r7, #5]
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	b25b      	sxtb	r3, r3
 8001d04:	4313      	orrs	r3, r2
 8001d06:	b25b      	sxtb	r3, r3
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	7bbb      	ldrb	r3, [r7, #14]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	f043 0308 	orr.w	r3, r3, #8
 8001d14:	73bb      	strb	r3, [r7, #14]
	// E bit 1 0 1 0 to create pulses in LCD controller

	uint8_t byteSequence[4] = {
 8001d16:	7bfb      	ldrb	r3, [r7, #15]
 8001d18:	f043 0304 	orr.w	r3, r3, #4
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	723b      	strb	r3, [r7, #8]
 8001d20:	7bfb      	ldrb	r3, [r7, #15]
 8001d22:	727b      	strb	r3, [r7, #9]
 8001d24:	7bbb      	ldrb	r3, [r7, #14]
 8001d26:	f043 0304 	orr.w	r3, r3, #4
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	72bb      	strb	r3, [r7, #10]
 8001d2e:	7bbb      	ldrb	r3, [r7, #14]
 8001d30:	72fb      	strb	r3, [r7, #11]
			(upperByte | (E_LOW<<E_POS)),
			(lowerByte | (E_HIGH<<E_POS)),
			(lowerByte | (E_LOW<<E_POS))
	};

	send_bytes_i2c(LCD_ADDRESS, byteSequence, 4, I2C_WRITE);
 8001d32:	f107 0108 	add.w	r1, r7, #8
 8001d36:	2300      	movs	r3, #0
 8001d38:	2204      	movs	r2, #4
 8001d3a:	2027      	movs	r0, #39	@ 0x27
 8001d3c:	f000 f808 	bl	8001d50 <send_bytes_i2c>
	HAL_Delay(5);
 8001d40:	2005      	movs	r0, #5
 8001d42:	f000 f98f 	bl	8002064 <HAL_Delay>

}
 8001d46:	bf00      	nop
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
	...

08001d50 <send_bytes_i2c>:

void send_bytes_i2c(uint8_t slaveAddress, uint8_t byteSequence[], uint8_t sequenceSize, bool i2c_rw){
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af02      	add	r7, sp, #8
 8001d56:	6039      	str	r1, [r7, #0]
 8001d58:	4611      	mov	r1, r2
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	71fb      	strb	r3, [r7, #7]
 8001d60:	460b      	mov	r3, r1
 8001d62:	71bb      	strb	r3, [r7, #6]
 8001d64:	4613      	mov	r3, r2
 8001d66:	717b      	strb	r3, [r7, #5]
	slaveAddress = ((slaveAddress<<1) | i2c_rw); // i2c WRITE or READ
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	b25a      	sxtb	r2, r3
 8001d6e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	b25b      	sxtb	r3, r3
 8001d76:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&i2cHandle, slaveAddress, byteSequence, sequenceSize, 100);
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	b299      	uxth	r1, r3
 8001d7c:	79bb      	ldrb	r3, [r7, #6]
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	2264      	movs	r2, #100	@ 0x64
 8001d82:	9200      	str	r2, [sp, #0]
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	4803      	ldr	r0, [pc, #12]	@ (8001d94 <send_bytes_i2c+0x44>)
 8001d88:	f001 f9c6 	bl	8003118 <HAL_I2C_Master_Transmit>
}
 8001d8c:	bf00      	nop
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20000208 	.word	0x20000208

08001d98 <lcd_clear>:

void lcd_clear(){
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
	lcd_send_byte(0x01, RS_INSTRUCTION, RW_WRITE);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	2100      	movs	r1, #0
 8001da0:	2001      	movs	r0, #1
 8001da2:	f7ff ff8c 	bl	8001cbe <lcd_send_byte>
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}

08001daa <return_home>:

void return_home(){
 8001daa:	b580      	push	{r7, lr}
 8001dac:	af00      	add	r7, sp, #0
	lcd_send_byte(0x02, RS_INSTRUCTION, RW_WRITE);
 8001dae:	2200      	movs	r2, #0
 8001db0:	2100      	movs	r1, #0
 8001db2:	2002      	movs	r0, #2
 8001db4:	f7ff ff83 	bl	8001cbe <lcd_send_byte>
}
 8001db8:	bf00      	nop
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <lcd_set_position>:

void lcd_set_position(uint8_t row, uint8_t column){
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	460a      	mov	r2, r1
 8001dc6:	71fb      	strb	r3, [r7, #7]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	71bb      	strb	r3, [r7, #6]
	// for LCD 16x2 check ranges
	if(row>2) row = 2;
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <lcd_set_position+0x1a>
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	71fb      	strb	r3, [r7, #7]
	if(row<1) row = 1;
 8001dd6:	79fb      	ldrb	r3, [r7, #7]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <lcd_set_position+0x24>
 8001ddc:	2301      	movs	r3, #1
 8001dde:	71fb      	strb	r3, [r7, #7]
	if(column>16) column = 16;
 8001de0:	79bb      	ldrb	r3, [r7, #6]
 8001de2:	2b10      	cmp	r3, #16
 8001de4:	d901      	bls.n	8001dea <lcd_set_position+0x2e>
 8001de6:	2310      	movs	r3, #16
 8001de8:	71bb      	strb	r3, [r7, #6]
	if(column<1) column = 1;
 8001dea:	79bb      	ldrb	r3, [r7, #6]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <lcd_set_position+0x38>
 8001df0:	2301      	movs	r3, #1
 8001df2:	71bb      	strb	r3, [r7, #6]

	uint8_t ddram = ddram_address_16x2[row-1][column-1];
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	1e5a      	subs	r2, r3, #1
 8001df8:	79bb      	ldrb	r3, [r7, #6]
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	4909      	ldr	r1, [pc, #36]	@ (8001e24 <lcd_set_position+0x68>)
 8001dfe:	0112      	lsls	r2, r2, #4
 8001e00:	440a      	add	r2, r1
 8001e02:	4413      	add	r3, r2
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	73fb      	strb	r3, [r7, #15]
	uint8_t ddram_cmd = ddram | (1<<7); // add a 1 in DB7 for DDRAM command
 8001e08:	7bfb      	ldrb	r3, [r7, #15]
 8001e0a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001e0e:	73bb      	strb	r3, [r7, #14]

	lcd_send_byte(ddram_cmd, RS_INSTRUCTION, RW_WRITE); // send address as instruction, not data
 8001e10:	7bbb      	ldrb	r3, [r7, #14]
 8001e12:	2200      	movs	r2, #0
 8001e14:	2100      	movs	r1, #0
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff ff51 	bl	8001cbe <lcd_send_byte>
}
 8001e1c:	bf00      	nop
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	08006754 	.word	0x08006754

08001e28 <lcd_print_text>:

void lcd_print_text(uint8_t text[], uint8_t size){
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	460b      	mov	r3, r1
 8001e32:	70fb      	strb	r3, [r7, #3]

	for(uint8_t i = 0; i < size-1; i++){ // -1 to exclude the '/0' char
 8001e34:	2300      	movs	r3, #0
 8001e36:	73fb      	strb	r3, [r7, #15]
 8001e38:	e00e      	b.n	8001e58 <lcd_print_text+0x30>
		HAL_Delay(1); // without this some chars go missing
 8001e3a:	2001      	movs	r0, #1
 8001e3c:	f000 f912 	bl	8002064 <HAL_Delay>
		lcd_send_byte(text[i], RS_DATA, RW_WRITE);
 8001e40:	7bfb      	ldrb	r3, [r7, #15]
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	4413      	add	r3, r2
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff ff36 	bl	8001cbe <lcd_send_byte>
	for(uint8_t i = 0; i < size-1; i++){ // -1 to exclude the '/0' char
 8001e52:	7bfb      	ldrb	r3, [r7, #15]
 8001e54:	3301      	adds	r3, #1
 8001e56:	73fb      	strb	r3, [r7, #15]
 8001e58:	7bfa      	ldrb	r2, [r7, #15]
 8001e5a:	78fb      	ldrb	r3, [r7, #3]
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	dbeb      	blt.n	8001e3a <lcd_print_text+0x12>
	}
}
 8001e62:	bf00      	nop
 8001e64:	bf00      	nop
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <create_character>:
void shift_display(bool shiftType, bool direction){ // DISPLAY_SHIFT / CURSOR_SHIFT - SHIFT_RIGHT / SHIFT_LEFT
	uint8_t cmd = ((direction<<SHIFT_DIRECTION_POS)|(shiftType<<CURSOR_DISPLAY_SHIFT_POS));
	lcd_send_byte(0x1C, 0, 0); // shift display to the right
}

void create_character(uint8_t index, uint8_t mychar[]){
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	6039      	str	r1, [r7, #0]
 8001e76:	71fb      	strb	r3, [r7, #7]
	// https://maxpromer.github.io/LCD-Character-Creator/
	if(index<0) index = 0;
	if(index>7) index = 7;
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	2b07      	cmp	r3, #7
 8001e7c:	d901      	bls.n	8001e82 <create_character+0x16>
 8001e7e:	2307      	movs	r3, #7
 8001e80:	71fb      	strb	r3, [r7, #7]

	lcd_send_byte(0x40 + 8*index, RS_INSTRUCTION, RW_WRITE); // set cgram memory from 0x40, 0x48, 0x50, etc +8
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	3308      	adds	r3, #8
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	2100      	movs	r1, #0
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff ff14 	bl	8001cbe <lcd_send_byte>
	HAL_Delay(50);
 8001e96:	2032      	movs	r0, #50	@ 0x32
 8001e98:	f000 f8e4 	bl	8002064 <HAL_Delay>

	for(uint8_t i = 0; i < 8; i++){
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	73fb      	strb	r3, [r7, #15]
 8001ea0:	e00e      	b.n	8001ec0 <create_character+0x54>
		lcd_send_byte(mychar[i], RS_DATA, RW_WRITE);
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	2101      	movs	r1, #1
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff ff05 	bl	8001cbe <lcd_send_byte>
		HAL_Delay(10);
 8001eb4:	200a      	movs	r0, #10
 8001eb6:	f000 f8d5 	bl	8002064 <HAL_Delay>
	for(uint8_t i = 0; i < 8; i++){
 8001eba:	7bfb      	ldrb	r3, [r7, #15]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	73fb      	strb	r3, [r7, #15]
 8001ec0:	7bfb      	ldrb	r3, [r7, #15]
 8001ec2:	2b07      	cmp	r3, #7
 8001ec4:	d9ed      	bls.n	8001ea2 <create_character+0x36>
	}
	HAL_Delay(100);
 8001ec6:	2064      	movs	r0, #100	@ 0x64
 8001ec8:	f000 f8cc 	bl	8002064 <HAL_Delay>

}
 8001ecc:	bf00      	nop
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <lcd_init>:

void lcd_init(){
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
	// initialization sequence p46 HD44780 datasheet
	HAL_Delay(60); // wait >40 ms
 8001ed8:	203c      	movs	r0, #60	@ 0x3c
 8001eda:	f000 f8c3 	bl	8002064 <HAL_Delay>
	lcd_send_byte(0x30, RS_INSTRUCTION, RW_WRITE); // 0 0 1 1 x x x x -> 0x30
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	2030      	movs	r0, #48	@ 0x30
 8001ee4:	f7ff feeb 	bl	8001cbe <lcd_send_byte>
	HAL_Delay(10); // wait > 4 ms
 8001ee8:	200a      	movs	r0, #10
 8001eea:	f000 f8bb 	bl	8002064 <HAL_Delay>
	lcd_send_byte(0x30, RS_INSTRUCTION, RW_WRITE);
 8001eee:	2200      	movs	r2, #0
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	2030      	movs	r0, #48	@ 0x30
 8001ef4:	f7ff fee3 	bl	8001cbe <lcd_send_byte>
	HAL_Delay(10); // wait > 0.1 ms
 8001ef8:	200a      	movs	r0, #10
 8001efa:	f000 f8b3 	bl	8002064 <HAL_Delay>
	lcd_send_byte(0x30, RS_INSTRUCTION, RW_WRITE);
 8001efe:	2200      	movs	r2, #0
 8001f00:	2100      	movs	r1, #0
 8001f02:	2030      	movs	r0, #48	@ 0x30
 8001f04:	f7ff fedb 	bl	8001cbe <lcd_send_byte>
	HAL_Delay(10);
 8001f08:	200a      	movs	r0, #10
 8001f0a:	f000 f8ab 	bl	8002064 <HAL_Delay>
	lcd_send_byte(0x20, RS_INSTRUCTION, RW_WRITE); // 0 0 1 DL=0 x x x x -> 0x20 / Function set: DL=4-bit mode
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2100      	movs	r1, #0
 8001f12:	2020      	movs	r0, #32
 8001f14:	f7ff fed3 	bl	8001cbe <lcd_send_byte>
	// start in 4 bit mode
	lcd_send_byte(0x28, RS_INSTRUCTION, RW_WRITE); // 0 0 1 0 N=1 F=0 x x -> 0x28 / Function set: N=2-lines, F=5x8
 8001f18:	2200      	movs	r2, #0
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	2028      	movs	r0, #40	@ 0x28
 8001f1e:	f7ff fece 	bl	8001cbe <lcd_send_byte>
	HAL_Delay(10);
 8001f22:	200a      	movs	r0, #10
 8001f24:	f000 f89e 	bl	8002064 <HAL_Delay>
	lcd_send_byte(0x08, RS_INSTRUCTION, RW_WRITE); // 0 0 0 0 1 D=0 C=0 B=0 -> 0x08 / Display control: D=display off, C=cursor off, B=blink off
 8001f28:	2200      	movs	r2, #0
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	2008      	movs	r0, #8
 8001f2e:	f7ff fec6 	bl	8001cbe <lcd_send_byte>
	HAL_Delay(10);
 8001f32:	200a      	movs	r0, #10
 8001f34:	f000 f896 	bl	8002064 <HAL_Delay>
	lcd_clear();
 8001f38:	f7ff ff2e 	bl	8001d98 <lcd_clear>
	HAL_Delay(10);
 8001f3c:	200a      	movs	r0, #10
 8001f3e:	f000 f891 	bl	8002064 <HAL_Delay>
	lcd_send_byte(0x06, RS_INSTRUCTION, RW_WRITE); // 0 0 0 0 0 1 ID=1 S=0 -> 0x06/ Entry mode: ID=increment, S=no display shift
 8001f42:	2200      	movs	r2, #0
 8001f44:	2100      	movs	r1, #0
 8001f46:	2006      	movs	r0, #6
 8001f48:	f7ff feb9 	bl	8001cbe <lcd_send_byte>
	HAL_Delay(10);
 8001f4c:	200a      	movs	r0, #10
 8001f4e:	f000 f889 	bl	8002064 <HAL_Delay>
	lcd_send_byte(0x0C, RS_INSTRUCTION, RW_WRITE); // 0 0 0 0 1 D=1 C=0 B=0 -> 0x0C / Display control:D-display on, C=cursor off, B=blink off
 8001f52:	2200      	movs	r2, #0
 8001f54:	2100      	movs	r1, #0
 8001f56:	200c      	movs	r0, #12
 8001f58:	f7ff feb1 	bl	8001cbe <lcd_send_byte>
	HAL_Delay(10);
 8001f5c:	200a      	movs	r0, #10
 8001f5e:	f000 f881 	bl	8002064 <HAL_Delay>
	lcd_clear();
 8001f62:	f7ff ff19 	bl	8001d98 <lcd_clear>
	HAL_Delay(10);
 8001f66:	200a      	movs	r0, #10
 8001f68:	f000 f87c 	bl	8002064 <HAL_Delay>
	return_home();
 8001f6c:	f7ff ff1d 	bl	8001daa <return_home>
	HAL_Delay(10);
 8001f70:	200a      	movs	r0, #10
 8001f72:	f000 f877 	bl	8002064 <HAL_Delay>
}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}
	...

08001f7c <i2c_linker>:

void i2c_linker(I2C_HandleTypeDef * i2cInstance){
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
	i2cHandle = *i2cInstance;
 8001f84:	4a05      	ldr	r2, [pc, #20]	@ (8001f9c <i2c_linker+0x20>)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4610      	mov	r0, r2
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	2354      	movs	r3, #84	@ 0x54
 8001f8e:	461a      	mov	r2, r3
 8001f90:	f003 fe40 	bl	8005c14 <memcpy>
}
 8001f94:	bf00      	nop
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	20000208 	.word	0x20000208

08001fa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fa4:	4b08      	ldr	r3, [pc, #32]	@ (8001fc8 <HAL_Init+0x28>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a07      	ldr	r2, [pc, #28]	@ (8001fc8 <HAL_Init+0x28>)
 8001faa:	f043 0310 	orr.w	r3, r3, #16
 8001fae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fb0:	2003      	movs	r0, #3
 8001fb2:	f000 fd83 	bl	8002abc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fb6:	200f      	movs	r0, #15
 8001fb8:	f000 f808 	bl	8001fcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fbc:	f7ff fc1e 	bl	80017fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40022000 	.word	0x40022000

08001fcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fd4:	4b12      	ldr	r3, [pc, #72]	@ (8002020 <HAL_InitTick+0x54>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	4b12      	ldr	r3, [pc, #72]	@ (8002024 <HAL_InitTick+0x58>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	4619      	mov	r1, r3
 8001fde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fe2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fea:	4618      	mov	r0, r3
 8001fec:	f000 fd8d 	bl	8002b0a <HAL_SYSTICK_Config>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e00e      	b.n	8002018 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2b0f      	cmp	r3, #15
 8001ffe:	d80a      	bhi.n	8002016 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002000:	2200      	movs	r2, #0
 8002002:	6879      	ldr	r1, [r7, #4]
 8002004:	f04f 30ff 	mov.w	r0, #4294967295
 8002008:	f000 fd63 	bl	8002ad2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800200c:	4a06      	ldr	r2, [pc, #24]	@ (8002028 <HAL_InitTick+0x5c>)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002012:	2300      	movs	r3, #0
 8002014:	e000      	b.n	8002018 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
}
 8002018:	4618      	mov	r0, r3
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	20000000 	.word	0x20000000
 8002024:	20000008 	.word	0x20000008
 8002028:	20000004 	.word	0x20000004

0800202c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002030:	4b05      	ldr	r3, [pc, #20]	@ (8002048 <HAL_IncTick+0x1c>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	461a      	mov	r2, r3
 8002036:	4b05      	ldr	r3, [pc, #20]	@ (800204c <HAL_IncTick+0x20>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4413      	add	r3, r2
 800203c:	4a03      	ldr	r2, [pc, #12]	@ (800204c <HAL_IncTick+0x20>)
 800203e:	6013      	str	r3, [r2, #0]
}
 8002040:	bf00      	nop
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr
 8002048:	20000008 	.word	0x20000008
 800204c:	2000025c 	.word	0x2000025c

08002050 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  return uwTick;
 8002054:	4b02      	ldr	r3, [pc, #8]	@ (8002060 <HAL_GetTick+0x10>)
 8002056:	681b      	ldr	r3, [r3, #0]
}
 8002058:	4618      	mov	r0, r3
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr
 8002060:	2000025c 	.word	0x2000025c

08002064 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800206c:	f7ff fff0 	bl	8002050 <HAL_GetTick>
 8002070:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800207c:	d005      	beq.n	800208a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800207e:	4b0a      	ldr	r3, [pc, #40]	@ (80020a8 <HAL_Delay+0x44>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	461a      	mov	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	4413      	add	r3, r2
 8002088:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800208a:	bf00      	nop
 800208c:	f7ff ffe0 	bl	8002050 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	429a      	cmp	r2, r3
 800209a:	d8f7      	bhi.n	800208c <HAL_Delay+0x28>
  {
  }
}
 800209c:	bf00      	nop
 800209e:	bf00      	nop
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20000008 	.word	0x20000008

080020ac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020b4:	2300      	movs	r3, #0
 80020b6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80020b8:	2300      	movs	r3, #0
 80020ba:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80020bc:	2300      	movs	r3, #0
 80020be:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80020c0:	2300      	movs	r3, #0
 80020c2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e0be      	b.n	800224c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d109      	bne.n	80020f0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7fe fcf8 	bl	8000ae0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 fbf1 	bl	80028d8 <ADC_ConversionStop_Disable>
 80020f6:	4603      	mov	r3, r0
 80020f8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020fe:	f003 0310 	and.w	r3, r3, #16
 8002102:	2b00      	cmp	r3, #0
 8002104:	f040 8099 	bne.w	800223a <HAL_ADC_Init+0x18e>
 8002108:	7dfb      	ldrb	r3, [r7, #23]
 800210a:	2b00      	cmp	r3, #0
 800210c:	f040 8095 	bne.w	800223a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002114:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002118:	f023 0302 	bic.w	r3, r3, #2
 800211c:	f043 0202 	orr.w	r2, r3, #2
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800212c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	7b1b      	ldrb	r3, [r3, #12]
 8002132:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002134:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002136:	68ba      	ldr	r2, [r7, #8]
 8002138:	4313      	orrs	r3, r2
 800213a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002144:	d003      	beq.n	800214e <HAL_ADC_Init+0xa2>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d102      	bne.n	8002154 <HAL_ADC_Init+0xa8>
 800214e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002152:	e000      	b.n	8002156 <HAL_ADC_Init+0xaa>
 8002154:	2300      	movs	r3, #0
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	4313      	orrs	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	7d1b      	ldrb	r3, [r3, #20]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d119      	bne.n	8002198 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	7b1b      	ldrb	r3, [r3, #12]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d109      	bne.n	8002180 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	3b01      	subs	r3, #1
 8002172:	035a      	lsls	r2, r3, #13
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	4313      	orrs	r3, r2
 8002178:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800217c:	613b      	str	r3, [r7, #16]
 800217e:	e00b      	b.n	8002198 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002184:	f043 0220 	orr.w	r2, r3, #32
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002190:	f043 0201 	orr.w	r2, r3, #1
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	430a      	orrs	r2, r1
 80021aa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	4b28      	ldr	r3, [pc, #160]	@ (8002254 <HAL_ADC_Init+0x1a8>)
 80021b4:	4013      	ands	r3, r2
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	6812      	ldr	r2, [r2, #0]
 80021ba:	68b9      	ldr	r1, [r7, #8]
 80021bc:	430b      	orrs	r3, r1
 80021be:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021c8:	d003      	beq.n	80021d2 <HAL_ADC_Init+0x126>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d104      	bne.n	80021dc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	3b01      	subs	r3, #1
 80021d8:	051b      	lsls	r3, r3, #20
 80021da:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021e2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	430a      	orrs	r2, r1
 80021ee:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689a      	ldr	r2, [r3, #8]
 80021f6:	4b18      	ldr	r3, [pc, #96]	@ (8002258 <HAL_ADC_Init+0x1ac>)
 80021f8:	4013      	ands	r3, r2
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d10b      	bne.n	8002218 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800220a:	f023 0303 	bic.w	r3, r3, #3
 800220e:	f043 0201 	orr.w	r2, r3, #1
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002216:	e018      	b.n	800224a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800221c:	f023 0312 	bic.w	r3, r3, #18
 8002220:	f043 0210 	orr.w	r2, r3, #16
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800222c:	f043 0201 	orr.w	r2, r3, #1
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002238:	e007      	b.n	800224a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800223e:	f043 0210 	orr.w	r2, r3, #16
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800224a:	7dfb      	ldrb	r3, [r7, #23]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	ffe1f7fd 	.word	0xffe1f7fd
 8002258:	ff1f0efe 	.word	0xff1f0efe

0800225c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002264:	2300      	movs	r3, #0
 8002266:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800226e:	2b01      	cmp	r3, #1
 8002270:	d101      	bne.n	8002276 <HAL_ADC_Start+0x1a>
 8002272:	2302      	movs	r3, #2
 8002274:	e098      	b.n	80023a8 <HAL_ADC_Start+0x14c>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 fad0 	bl	8002824 <ADC_Enable>
 8002284:	4603      	mov	r3, r0
 8002286:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002288:	7bfb      	ldrb	r3, [r7, #15]
 800228a:	2b00      	cmp	r3, #0
 800228c:	f040 8087 	bne.w	800239e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002294:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002298:	f023 0301 	bic.w	r3, r3, #1
 800229c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a41      	ldr	r2, [pc, #260]	@ (80023b0 <HAL_ADC_Start+0x154>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d105      	bne.n	80022ba <HAL_ADC_Start+0x5e>
 80022ae:	4b41      	ldr	r3, [pc, #260]	@ (80023b4 <HAL_ADC_Start+0x158>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d115      	bne.n	80022e6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022be:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d026      	beq.n	8002322 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022d8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80022dc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022e4:	e01d      	b.n	8002322 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ea:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a2f      	ldr	r2, [pc, #188]	@ (80023b4 <HAL_ADC_Start+0x158>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d004      	beq.n	8002306 <HAL_ADC_Start+0xaa>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a2b      	ldr	r2, [pc, #172]	@ (80023b0 <HAL_ADC_Start+0x154>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d10d      	bne.n	8002322 <HAL_ADC_Start+0xc6>
 8002306:	4b2b      	ldr	r3, [pc, #172]	@ (80023b4 <HAL_ADC_Start+0x158>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800230e:	2b00      	cmp	r3, #0
 8002310:	d007      	beq.n	8002322 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002316:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800231a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002326:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d006      	beq.n	800233c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002332:	f023 0206 	bic.w	r2, r3, #6
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	62da      	str	r2, [r3, #44]	@ 0x2c
 800233a:	e002      	b.n	8002342 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f06f 0202 	mvn.w	r2, #2
 8002352:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800235e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002362:	d113      	bne.n	800238c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002368:	4a11      	ldr	r2, [pc, #68]	@ (80023b0 <HAL_ADC_Start+0x154>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d105      	bne.n	800237a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800236e:	4b11      	ldr	r3, [pc, #68]	@ (80023b4 <HAL_ADC_Start+0x158>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002376:	2b00      	cmp	r3, #0
 8002378:	d108      	bne.n	800238c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002388:	609a      	str	r2, [r3, #8]
 800238a:	e00c      	b.n	80023a6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	689a      	ldr	r2, [r3, #8]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800239a:	609a      	str	r2, [r3, #8]
 800239c:	e003      	b.n	80023a6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80023a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40012800 	.word	0x40012800
 80023b4:	40012400 	.word	0x40012400

080023b8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023c0:	2300      	movs	r3, #0
 80023c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d101      	bne.n	80023d2 <HAL_ADC_Stop+0x1a>
 80023ce:	2302      	movs	r3, #2
 80023d0:	e01a      	b.n	8002408 <HAL_ADC_Stop+0x50>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 fa7c 	bl	80028d8 <ADC_ConversionStop_Disable>
 80023e0:	4603      	mov	r3, r0
 80023e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80023e4:	7bfb      	ldrb	r3, [r7, #15]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d109      	bne.n	80023fe <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ee:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80023f2:	f023 0301 	bic.w	r3, r3, #1
 80023f6:	f043 0201 	orr.w	r2, r3, #1
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002406:	7bfb      	ldrb	r3, [r7, #15]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002410:	b590      	push	{r4, r7, lr}
 8002412:	b087      	sub	sp, #28
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800241a:	2300      	movs	r3, #0
 800241c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800241e:	2300      	movs	r3, #0
 8002420:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002422:	2300      	movs	r3, #0
 8002424:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002426:	f7ff fe13 	bl	8002050 <HAL_GetTick>
 800242a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00b      	beq.n	8002452 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800243e:	f043 0220 	orr.w	r2, r3, #32
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e0d3      	b.n	80025fa <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800245c:	2b00      	cmp	r3, #0
 800245e:	d131      	bne.n	80024c4 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002466:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800246a:	2b00      	cmp	r3, #0
 800246c:	d12a      	bne.n	80024c4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800246e:	e021      	b.n	80024b4 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002476:	d01d      	beq.n	80024b4 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d007      	beq.n	800248e <HAL_ADC_PollForConversion+0x7e>
 800247e:	f7ff fde7 	bl	8002050 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	429a      	cmp	r2, r3
 800248c:	d212      	bcs.n	80024b4 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d10b      	bne.n	80024b4 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024a0:	f043 0204 	orr.w	r2, r3, #4
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e0a2      	b.n	80025fa <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d0d6      	beq.n	8002470 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80024c2:	e070      	b.n	80025a6 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80024c4:	4b4f      	ldr	r3, [pc, #316]	@ (8002604 <HAL_ADC_PollForConversion+0x1f4>)
 80024c6:	681c      	ldr	r4, [r3, #0]
 80024c8:	2002      	movs	r0, #2
 80024ca:	f002 f9db 	bl	8004884 <HAL_RCCEx_GetPeriphCLKFreq>
 80024ce:	4603      	mov	r3, r0
 80024d0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6919      	ldr	r1, [r3, #16]
 80024da:	4b4b      	ldr	r3, [pc, #300]	@ (8002608 <HAL_ADC_PollForConversion+0x1f8>)
 80024dc:	400b      	ands	r3, r1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d118      	bne.n	8002514 <HAL_ADC_PollForConversion+0x104>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68d9      	ldr	r1, [r3, #12]
 80024e8:	4b48      	ldr	r3, [pc, #288]	@ (800260c <HAL_ADC_PollForConversion+0x1fc>)
 80024ea:	400b      	ands	r3, r1
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d111      	bne.n	8002514 <HAL_ADC_PollForConversion+0x104>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6919      	ldr	r1, [r3, #16]
 80024f6:	4b46      	ldr	r3, [pc, #280]	@ (8002610 <HAL_ADC_PollForConversion+0x200>)
 80024f8:	400b      	ands	r3, r1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d108      	bne.n	8002510 <HAL_ADC_PollForConversion+0x100>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68d9      	ldr	r1, [r3, #12]
 8002504:	4b43      	ldr	r3, [pc, #268]	@ (8002614 <HAL_ADC_PollForConversion+0x204>)
 8002506:	400b      	ands	r3, r1
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <HAL_ADC_PollForConversion+0x100>
 800250c:	2314      	movs	r3, #20
 800250e:	e020      	b.n	8002552 <HAL_ADC_PollForConversion+0x142>
 8002510:	2329      	movs	r3, #41	@ 0x29
 8002512:	e01e      	b.n	8002552 <HAL_ADC_PollForConversion+0x142>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	6919      	ldr	r1, [r3, #16]
 800251a:	4b3d      	ldr	r3, [pc, #244]	@ (8002610 <HAL_ADC_PollForConversion+0x200>)
 800251c:	400b      	ands	r3, r1
 800251e:	2b00      	cmp	r3, #0
 8002520:	d106      	bne.n	8002530 <HAL_ADC_PollForConversion+0x120>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68d9      	ldr	r1, [r3, #12]
 8002528:	4b3a      	ldr	r3, [pc, #232]	@ (8002614 <HAL_ADC_PollForConversion+0x204>)
 800252a:	400b      	ands	r3, r1
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00d      	beq.n	800254c <HAL_ADC_PollForConversion+0x13c>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6919      	ldr	r1, [r3, #16]
 8002536:	4b38      	ldr	r3, [pc, #224]	@ (8002618 <HAL_ADC_PollForConversion+0x208>)
 8002538:	400b      	ands	r3, r1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d108      	bne.n	8002550 <HAL_ADC_PollForConversion+0x140>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68d9      	ldr	r1, [r3, #12]
 8002544:	4b34      	ldr	r3, [pc, #208]	@ (8002618 <HAL_ADC_PollForConversion+0x208>)
 8002546:	400b      	ands	r3, r1
 8002548:	2b00      	cmp	r3, #0
 800254a:	d101      	bne.n	8002550 <HAL_ADC_PollForConversion+0x140>
 800254c:	2354      	movs	r3, #84	@ 0x54
 800254e:	e000      	b.n	8002552 <HAL_ADC_PollForConversion+0x142>
 8002550:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002552:	fb02 f303 	mul.w	r3, r2, r3
 8002556:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002558:	e021      	b.n	800259e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002560:	d01a      	beq.n	8002598 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d007      	beq.n	8002578 <HAL_ADC_PollForConversion+0x168>
 8002568:	f7ff fd72 	bl	8002050 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	429a      	cmp	r2, r3
 8002576:	d20f      	bcs.n	8002598 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	429a      	cmp	r2, r3
 800257e:	d90b      	bls.n	8002598 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002584:	f043 0204 	orr.w	r2, r3, #4
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e030      	b.n	80025fa <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	3301      	adds	r3, #1
 800259c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d8d9      	bhi.n	800255a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f06f 0212 	mvn.w	r2, #18
 80025ae:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025b4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80025c6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80025ca:	d115      	bne.n	80025f8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d111      	bne.n	80025f8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d105      	bne.n	80025f8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f0:	f043 0201 	orr.w	r2, r3, #1
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	371c      	adds	r7, #28
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd90      	pop	{r4, r7, pc}
 8002602:	bf00      	nop
 8002604:	20000000 	.word	0x20000000
 8002608:	24924924 	.word	0x24924924
 800260c:	00924924 	.word	0x00924924
 8002610:	12492492 	.word	0x12492492
 8002614:	00492492 	.word	0x00492492
 8002618:	00249249 	.word	0x00249249

0800261c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800262a:	4618      	mov	r0, r3
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	bc80      	pop	{r7}
 8002632:	4770      	bx	lr

08002634 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800263e:	2300      	movs	r3, #0
 8002640:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002642:	2300      	movs	r3, #0
 8002644:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800264c:	2b01      	cmp	r3, #1
 800264e:	d101      	bne.n	8002654 <HAL_ADC_ConfigChannel+0x20>
 8002650:	2302      	movs	r3, #2
 8002652:	e0dc      	b.n	800280e <HAL_ADC_ConfigChannel+0x1da>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	2b06      	cmp	r3, #6
 8002662:	d81c      	bhi.n	800269e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	4613      	mov	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	4413      	add	r3, r2
 8002674:	3b05      	subs	r3, #5
 8002676:	221f      	movs	r2, #31
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	43db      	mvns	r3, r3
 800267e:	4019      	ands	r1, r3
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	6818      	ldr	r0, [r3, #0]
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	4613      	mov	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4413      	add	r3, r2
 800268e:	3b05      	subs	r3, #5
 8002690:	fa00 f203 	lsl.w	r2, r0, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	430a      	orrs	r2, r1
 800269a:	635a      	str	r2, [r3, #52]	@ 0x34
 800269c:	e03c      	b.n	8002718 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b0c      	cmp	r3, #12
 80026a4:	d81c      	bhi.n	80026e0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	4613      	mov	r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	4413      	add	r3, r2
 80026b6:	3b23      	subs	r3, #35	@ 0x23
 80026b8:	221f      	movs	r2, #31
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	43db      	mvns	r3, r3
 80026c0:	4019      	ands	r1, r3
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	6818      	ldr	r0, [r3, #0]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685a      	ldr	r2, [r3, #4]
 80026ca:	4613      	mov	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	4413      	add	r3, r2
 80026d0:	3b23      	subs	r3, #35	@ 0x23
 80026d2:	fa00 f203 	lsl.w	r2, r0, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	430a      	orrs	r2, r1
 80026dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80026de:	e01b      	b.n	8002718 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685a      	ldr	r2, [r3, #4]
 80026ea:	4613      	mov	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4413      	add	r3, r2
 80026f0:	3b41      	subs	r3, #65	@ 0x41
 80026f2:	221f      	movs	r2, #31
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	43db      	mvns	r3, r3
 80026fa:	4019      	ands	r1, r3
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	6818      	ldr	r0, [r3, #0]
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	4613      	mov	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	4413      	add	r3, r2
 800270a:	3b41      	subs	r3, #65	@ 0x41
 800270c:	fa00 f203 	lsl.w	r2, r0, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	430a      	orrs	r2, r1
 8002716:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2b09      	cmp	r3, #9
 800271e:	d91c      	bls.n	800275a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68d9      	ldr	r1, [r3, #12]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	4613      	mov	r3, r2
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	4413      	add	r3, r2
 8002730:	3b1e      	subs	r3, #30
 8002732:	2207      	movs	r2, #7
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	43db      	mvns	r3, r3
 800273a:	4019      	ands	r1, r3
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	6898      	ldr	r0, [r3, #8]
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	4613      	mov	r3, r2
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	4413      	add	r3, r2
 800274a:	3b1e      	subs	r3, #30
 800274c:	fa00 f203 	lsl.w	r2, r0, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	430a      	orrs	r2, r1
 8002756:	60da      	str	r2, [r3, #12]
 8002758:	e019      	b.n	800278e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6919      	ldr	r1, [r3, #16]
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	4613      	mov	r3, r2
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	4413      	add	r3, r2
 800276a:	2207      	movs	r2, #7
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	43db      	mvns	r3, r3
 8002772:	4019      	ands	r1, r3
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	6898      	ldr	r0, [r3, #8]
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	4613      	mov	r3, r2
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	4413      	add	r3, r2
 8002782:	fa00 f203 	lsl.w	r2, r0, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	430a      	orrs	r2, r1
 800278c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2b10      	cmp	r3, #16
 8002794:	d003      	beq.n	800279e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800279a:	2b11      	cmp	r3, #17
 800279c:	d132      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a1d      	ldr	r2, [pc, #116]	@ (8002818 <HAL_ADC_ConfigChannel+0x1e4>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d125      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d126      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689a      	ldr	r2, [r3, #8]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80027c4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2b10      	cmp	r3, #16
 80027cc:	d11a      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80027ce:	4b13      	ldr	r3, [pc, #76]	@ (800281c <HAL_ADC_ConfigChannel+0x1e8>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a13      	ldr	r2, [pc, #76]	@ (8002820 <HAL_ADC_ConfigChannel+0x1ec>)
 80027d4:	fba2 2303 	umull	r2, r3, r2, r3
 80027d8:	0c9a      	lsrs	r2, r3, #18
 80027da:	4613      	mov	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	4413      	add	r3, r2
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027e4:	e002      	b.n	80027ec <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	3b01      	subs	r3, #1
 80027ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1f9      	bne.n	80027e6 <HAL_ADC_ConfigChannel+0x1b2>
 80027f2:	e007      	b.n	8002804 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f8:	f043 0220 	orr.w	r2, r3, #32
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800280c:	7bfb      	ldrb	r3, [r7, #15]
}
 800280e:	4618      	mov	r0, r3
 8002810:	3714      	adds	r7, #20
 8002812:	46bd      	mov	sp, r7
 8002814:	bc80      	pop	{r7}
 8002816:	4770      	bx	lr
 8002818:	40012400 	.word	0x40012400
 800281c:	20000000 	.word	0x20000000
 8002820:	431bde83 	.word	0x431bde83

08002824 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800282c:	2300      	movs	r3, #0
 800282e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002830:	2300      	movs	r3, #0
 8002832:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	2b01      	cmp	r3, #1
 8002840:	d040      	beq.n	80028c4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f042 0201 	orr.w	r2, r2, #1
 8002850:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002852:	4b1f      	ldr	r3, [pc, #124]	@ (80028d0 <ADC_Enable+0xac>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a1f      	ldr	r2, [pc, #124]	@ (80028d4 <ADC_Enable+0xb0>)
 8002858:	fba2 2303 	umull	r2, r3, r2, r3
 800285c:	0c9b      	lsrs	r3, r3, #18
 800285e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002860:	e002      	b.n	8002868 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	3b01      	subs	r3, #1
 8002866:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1f9      	bne.n	8002862 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800286e:	f7ff fbef 	bl	8002050 <HAL_GetTick>
 8002872:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002874:	e01f      	b.n	80028b6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002876:	f7ff fbeb 	bl	8002050 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d918      	bls.n	80028b6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b01      	cmp	r3, #1
 8002890:	d011      	beq.n	80028b6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002896:	f043 0210 	orr.w	r2, r3, #16
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a2:	f043 0201 	orr.w	r2, r3, #1
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e007      	b.n	80028c6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d1d8      	bne.n	8002876 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	20000000 	.word	0x20000000
 80028d4:	431bde83 	.word	0x431bde83

080028d8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028e0:	2300      	movs	r3, #0
 80028e2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d12e      	bne.n	8002950 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 0201 	bic.w	r2, r2, #1
 8002900:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002902:	f7ff fba5 	bl	8002050 <HAL_GetTick>
 8002906:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002908:	e01b      	b.n	8002942 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800290a:	f7ff fba1 	bl	8002050 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d914      	bls.n	8002942 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b01      	cmp	r3, #1
 8002924:	d10d      	bne.n	8002942 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800292a:	f043 0210 	orr.w	r2, r3, #16
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002936:	f043 0201 	orr.w	r2, r3, #1
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e007      	b.n	8002952 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	2b01      	cmp	r3, #1
 800294e:	d0dc      	beq.n	800290a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
	...

0800295c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800296c:	4b0c      	ldr	r3, [pc, #48]	@ (80029a0 <__NVIC_SetPriorityGrouping+0x44>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002978:	4013      	ands	r3, r2
 800297a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002984:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002988:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800298c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800298e:	4a04      	ldr	r2, [pc, #16]	@ (80029a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	60d3      	str	r3, [r2, #12]
}
 8002994:	bf00      	nop
 8002996:	3714      	adds	r7, #20
 8002998:	46bd      	mov	sp, r7
 800299a:	bc80      	pop	{r7}
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	e000ed00 	.word	0xe000ed00

080029a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029a8:	4b04      	ldr	r3, [pc, #16]	@ (80029bc <__NVIC_GetPriorityGrouping+0x18>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	0a1b      	lsrs	r3, r3, #8
 80029ae:	f003 0307 	and.w	r3, r3, #7
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bc80      	pop	{r7}
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	e000ed00 	.word	0xe000ed00

080029c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	4603      	mov	r3, r0
 80029c8:	6039      	str	r1, [r7, #0]
 80029ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	db0a      	blt.n	80029ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	b2da      	uxtb	r2, r3
 80029d8:	490c      	ldr	r1, [pc, #48]	@ (8002a0c <__NVIC_SetPriority+0x4c>)
 80029da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029de:	0112      	lsls	r2, r2, #4
 80029e0:	b2d2      	uxtb	r2, r2
 80029e2:	440b      	add	r3, r1
 80029e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029e8:	e00a      	b.n	8002a00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	b2da      	uxtb	r2, r3
 80029ee:	4908      	ldr	r1, [pc, #32]	@ (8002a10 <__NVIC_SetPriority+0x50>)
 80029f0:	79fb      	ldrb	r3, [r7, #7]
 80029f2:	f003 030f 	and.w	r3, r3, #15
 80029f6:	3b04      	subs	r3, #4
 80029f8:	0112      	lsls	r2, r2, #4
 80029fa:	b2d2      	uxtb	r2, r2
 80029fc:	440b      	add	r3, r1
 80029fe:	761a      	strb	r2, [r3, #24]
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bc80      	pop	{r7}
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	e000e100 	.word	0xe000e100
 8002a10:	e000ed00 	.word	0xe000ed00

08002a14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b089      	sub	sp, #36	@ 0x24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f003 0307 	and.w	r3, r3, #7
 8002a26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	f1c3 0307 	rsb	r3, r3, #7
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	bf28      	it	cs
 8002a32:	2304      	movcs	r3, #4
 8002a34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	3304      	adds	r3, #4
 8002a3a:	2b06      	cmp	r3, #6
 8002a3c:	d902      	bls.n	8002a44 <NVIC_EncodePriority+0x30>
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	3b03      	subs	r3, #3
 8002a42:	e000      	b.n	8002a46 <NVIC_EncodePriority+0x32>
 8002a44:	2300      	movs	r3, #0
 8002a46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a48:	f04f 32ff 	mov.w	r2, #4294967295
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a52:	43da      	mvns	r2, r3
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	401a      	ands	r2, r3
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	fa01 f303 	lsl.w	r3, r1, r3
 8002a66:	43d9      	mvns	r1, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a6c:	4313      	orrs	r3, r2
         );
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3724      	adds	r7, #36	@ 0x24
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr

08002a78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a88:	d301      	bcc.n	8002a8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e00f      	b.n	8002aae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8002ab8 <SysTick_Config+0x40>)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a96:	210f      	movs	r1, #15
 8002a98:	f04f 30ff 	mov.w	r0, #4294967295
 8002a9c:	f7ff ff90 	bl	80029c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002aa0:	4b05      	ldr	r3, [pc, #20]	@ (8002ab8 <SysTick_Config+0x40>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aa6:	4b04      	ldr	r3, [pc, #16]	@ (8002ab8 <SysTick_Config+0x40>)
 8002aa8:	2207      	movs	r2, #7
 8002aaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	e000e010 	.word	0xe000e010

08002abc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f7ff ff49 	bl	800295c <__NVIC_SetPriorityGrouping>
}
 8002aca:	bf00      	nop
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b086      	sub	sp, #24
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	4603      	mov	r3, r0
 8002ada:	60b9      	str	r1, [r7, #8]
 8002adc:	607a      	str	r2, [r7, #4]
 8002ade:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ae4:	f7ff ff5e 	bl	80029a4 <__NVIC_GetPriorityGrouping>
 8002ae8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	68b9      	ldr	r1, [r7, #8]
 8002aee:	6978      	ldr	r0, [r7, #20]
 8002af0:	f7ff ff90 	bl	8002a14 <NVIC_EncodePriority>
 8002af4:	4602      	mov	r2, r0
 8002af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002afa:	4611      	mov	r1, r2
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff ff5f 	bl	80029c0 <__NVIC_SetPriority>
}
 8002b02:	bf00      	nop
 8002b04:	3718      	adds	r7, #24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b082      	sub	sp, #8
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f7ff ffb0 	bl	8002a78 <SysTick_Config>
 8002b18:	4603      	mov	r3, r0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
	...

08002b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b08b      	sub	sp, #44	@ 0x2c
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b32:	2300      	movs	r3, #0
 8002b34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b36:	e169      	b.n	8002e0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b38:	2201      	movs	r2, #1
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	69fa      	ldr	r2, [r7, #28]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	f040 8158 	bne.w	8002e06 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	4a9a      	ldr	r2, [pc, #616]	@ (8002dc4 <HAL_GPIO_Init+0x2a0>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d05e      	beq.n	8002c1e <HAL_GPIO_Init+0xfa>
 8002b60:	4a98      	ldr	r2, [pc, #608]	@ (8002dc4 <HAL_GPIO_Init+0x2a0>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d875      	bhi.n	8002c52 <HAL_GPIO_Init+0x12e>
 8002b66:	4a98      	ldr	r2, [pc, #608]	@ (8002dc8 <HAL_GPIO_Init+0x2a4>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d058      	beq.n	8002c1e <HAL_GPIO_Init+0xfa>
 8002b6c:	4a96      	ldr	r2, [pc, #600]	@ (8002dc8 <HAL_GPIO_Init+0x2a4>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d86f      	bhi.n	8002c52 <HAL_GPIO_Init+0x12e>
 8002b72:	4a96      	ldr	r2, [pc, #600]	@ (8002dcc <HAL_GPIO_Init+0x2a8>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d052      	beq.n	8002c1e <HAL_GPIO_Init+0xfa>
 8002b78:	4a94      	ldr	r2, [pc, #592]	@ (8002dcc <HAL_GPIO_Init+0x2a8>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d869      	bhi.n	8002c52 <HAL_GPIO_Init+0x12e>
 8002b7e:	4a94      	ldr	r2, [pc, #592]	@ (8002dd0 <HAL_GPIO_Init+0x2ac>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d04c      	beq.n	8002c1e <HAL_GPIO_Init+0xfa>
 8002b84:	4a92      	ldr	r2, [pc, #584]	@ (8002dd0 <HAL_GPIO_Init+0x2ac>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d863      	bhi.n	8002c52 <HAL_GPIO_Init+0x12e>
 8002b8a:	4a92      	ldr	r2, [pc, #584]	@ (8002dd4 <HAL_GPIO_Init+0x2b0>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d046      	beq.n	8002c1e <HAL_GPIO_Init+0xfa>
 8002b90:	4a90      	ldr	r2, [pc, #576]	@ (8002dd4 <HAL_GPIO_Init+0x2b0>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d85d      	bhi.n	8002c52 <HAL_GPIO_Init+0x12e>
 8002b96:	2b12      	cmp	r3, #18
 8002b98:	d82a      	bhi.n	8002bf0 <HAL_GPIO_Init+0xcc>
 8002b9a:	2b12      	cmp	r3, #18
 8002b9c:	d859      	bhi.n	8002c52 <HAL_GPIO_Init+0x12e>
 8002b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8002ba4 <HAL_GPIO_Init+0x80>)
 8002ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba4:	08002c1f 	.word	0x08002c1f
 8002ba8:	08002bf9 	.word	0x08002bf9
 8002bac:	08002c0b 	.word	0x08002c0b
 8002bb0:	08002c4d 	.word	0x08002c4d
 8002bb4:	08002c53 	.word	0x08002c53
 8002bb8:	08002c53 	.word	0x08002c53
 8002bbc:	08002c53 	.word	0x08002c53
 8002bc0:	08002c53 	.word	0x08002c53
 8002bc4:	08002c53 	.word	0x08002c53
 8002bc8:	08002c53 	.word	0x08002c53
 8002bcc:	08002c53 	.word	0x08002c53
 8002bd0:	08002c53 	.word	0x08002c53
 8002bd4:	08002c53 	.word	0x08002c53
 8002bd8:	08002c53 	.word	0x08002c53
 8002bdc:	08002c53 	.word	0x08002c53
 8002be0:	08002c53 	.word	0x08002c53
 8002be4:	08002c53 	.word	0x08002c53
 8002be8:	08002c01 	.word	0x08002c01
 8002bec:	08002c15 	.word	0x08002c15
 8002bf0:	4a79      	ldr	r2, [pc, #484]	@ (8002dd8 <HAL_GPIO_Init+0x2b4>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d013      	beq.n	8002c1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002bf6:	e02c      	b.n	8002c52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	623b      	str	r3, [r7, #32]
          break;
 8002bfe:	e029      	b.n	8002c54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	3304      	adds	r3, #4
 8002c06:	623b      	str	r3, [r7, #32]
          break;
 8002c08:	e024      	b.n	8002c54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	3308      	adds	r3, #8
 8002c10:	623b      	str	r3, [r7, #32]
          break;
 8002c12:	e01f      	b.n	8002c54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	330c      	adds	r3, #12
 8002c1a:	623b      	str	r3, [r7, #32]
          break;
 8002c1c:	e01a      	b.n	8002c54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d102      	bne.n	8002c2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c26:	2304      	movs	r3, #4
 8002c28:	623b      	str	r3, [r7, #32]
          break;
 8002c2a:	e013      	b.n	8002c54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d105      	bne.n	8002c40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c34:	2308      	movs	r3, #8
 8002c36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	69fa      	ldr	r2, [r7, #28]
 8002c3c:	611a      	str	r2, [r3, #16]
          break;
 8002c3e:	e009      	b.n	8002c54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c40:	2308      	movs	r3, #8
 8002c42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	69fa      	ldr	r2, [r7, #28]
 8002c48:	615a      	str	r2, [r3, #20]
          break;
 8002c4a:	e003      	b.n	8002c54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	623b      	str	r3, [r7, #32]
          break;
 8002c50:	e000      	b.n	8002c54 <HAL_GPIO_Init+0x130>
          break;
 8002c52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	2bff      	cmp	r3, #255	@ 0xff
 8002c58:	d801      	bhi.n	8002c5e <HAL_GPIO_Init+0x13a>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	e001      	b.n	8002c62 <HAL_GPIO_Init+0x13e>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	3304      	adds	r3, #4
 8002c62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	2bff      	cmp	r3, #255	@ 0xff
 8002c68:	d802      	bhi.n	8002c70 <HAL_GPIO_Init+0x14c>
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	e002      	b.n	8002c76 <HAL_GPIO_Init+0x152>
 8002c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c72:	3b08      	subs	r3, #8
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	210f      	movs	r1, #15
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	fa01 f303 	lsl.w	r3, r1, r3
 8002c84:	43db      	mvns	r3, r3
 8002c86:	401a      	ands	r2, r3
 8002c88:	6a39      	ldr	r1, [r7, #32]
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c90:	431a      	orrs	r2, r3
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f000 80b1 	beq.w	8002e06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ca4:	4b4d      	ldr	r3, [pc, #308]	@ (8002ddc <HAL_GPIO_Init+0x2b8>)
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	4a4c      	ldr	r2, [pc, #304]	@ (8002ddc <HAL_GPIO_Init+0x2b8>)
 8002caa:	f043 0301 	orr.w	r3, r3, #1
 8002cae:	6193      	str	r3, [r2, #24]
 8002cb0:	4b4a      	ldr	r3, [pc, #296]	@ (8002ddc <HAL_GPIO_Init+0x2b8>)
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002cbc:	4a48      	ldr	r2, [pc, #288]	@ (8002de0 <HAL_GPIO_Init+0x2bc>)
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc0:	089b      	lsrs	r3, r3, #2
 8002cc2:	3302      	adds	r3, #2
 8002cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ccc:	f003 0303 	and.w	r3, r3, #3
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	220f      	movs	r2, #15
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a40      	ldr	r2, [pc, #256]	@ (8002de4 <HAL_GPIO_Init+0x2c0>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d013      	beq.n	8002d10 <HAL_GPIO_Init+0x1ec>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a3f      	ldr	r2, [pc, #252]	@ (8002de8 <HAL_GPIO_Init+0x2c4>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d00d      	beq.n	8002d0c <HAL_GPIO_Init+0x1e8>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a3e      	ldr	r2, [pc, #248]	@ (8002dec <HAL_GPIO_Init+0x2c8>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d007      	beq.n	8002d08 <HAL_GPIO_Init+0x1e4>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a3d      	ldr	r2, [pc, #244]	@ (8002df0 <HAL_GPIO_Init+0x2cc>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d101      	bne.n	8002d04 <HAL_GPIO_Init+0x1e0>
 8002d00:	2303      	movs	r3, #3
 8002d02:	e006      	b.n	8002d12 <HAL_GPIO_Init+0x1ee>
 8002d04:	2304      	movs	r3, #4
 8002d06:	e004      	b.n	8002d12 <HAL_GPIO_Init+0x1ee>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e002      	b.n	8002d12 <HAL_GPIO_Init+0x1ee>
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e000      	b.n	8002d12 <HAL_GPIO_Init+0x1ee>
 8002d10:	2300      	movs	r3, #0
 8002d12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d14:	f002 0203 	and.w	r2, r2, #3
 8002d18:	0092      	lsls	r2, r2, #2
 8002d1a:	4093      	lsls	r3, r2
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d22:	492f      	ldr	r1, [pc, #188]	@ (8002de0 <HAL_GPIO_Init+0x2bc>)
 8002d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d26:	089b      	lsrs	r3, r3, #2
 8002d28:	3302      	adds	r3, #2
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d006      	beq.n	8002d4a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d3c:	4b2d      	ldr	r3, [pc, #180]	@ (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	492c      	ldr	r1, [pc, #176]	@ (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	608b      	str	r3, [r1, #8]
 8002d48:	e006      	b.n	8002d58 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d4a:	4b2a      	ldr	r3, [pc, #168]	@ (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002d4c:	689a      	ldr	r2, [r3, #8]
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	43db      	mvns	r3, r3
 8002d52:	4928      	ldr	r1, [pc, #160]	@ (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002d54:	4013      	ands	r3, r2
 8002d56:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d006      	beq.n	8002d72 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d64:	4b23      	ldr	r3, [pc, #140]	@ (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002d66:	68da      	ldr	r2, [r3, #12]
 8002d68:	4922      	ldr	r1, [pc, #136]	@ (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	60cb      	str	r3, [r1, #12]
 8002d70:	e006      	b.n	8002d80 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d72:	4b20      	ldr	r3, [pc, #128]	@ (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002d74:	68da      	ldr	r2, [r3, #12]
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	491e      	ldr	r1, [pc, #120]	@ (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d006      	beq.n	8002d9a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d8c:	4b19      	ldr	r3, [pc, #100]	@ (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	4918      	ldr	r1, [pc, #96]	@ (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	604b      	str	r3, [r1, #4]
 8002d98:	e006      	b.n	8002da8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d9a:	4b16      	ldr	r3, [pc, #88]	@ (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	43db      	mvns	r3, r3
 8002da2:	4914      	ldr	r1, [pc, #80]	@ (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002da4:	4013      	ands	r3, r2
 8002da6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d021      	beq.n	8002df8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002db4:	4b0f      	ldr	r3, [pc, #60]	@ (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	490e      	ldr	r1, [pc, #56]	@ (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	600b      	str	r3, [r1, #0]
 8002dc0:	e021      	b.n	8002e06 <HAL_GPIO_Init+0x2e2>
 8002dc2:	bf00      	nop
 8002dc4:	10320000 	.word	0x10320000
 8002dc8:	10310000 	.word	0x10310000
 8002dcc:	10220000 	.word	0x10220000
 8002dd0:	10210000 	.word	0x10210000
 8002dd4:	10120000 	.word	0x10120000
 8002dd8:	10110000 	.word	0x10110000
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	40010000 	.word	0x40010000
 8002de4:	40010800 	.word	0x40010800
 8002de8:	40010c00 	.word	0x40010c00
 8002dec:	40011000 	.word	0x40011000
 8002df0:	40011400 	.word	0x40011400
 8002df4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002df8:	4b0b      	ldr	r3, [pc, #44]	@ (8002e28 <HAL_GPIO_Init+0x304>)
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	43db      	mvns	r3, r3
 8002e00:	4909      	ldr	r1, [pc, #36]	@ (8002e28 <HAL_GPIO_Init+0x304>)
 8002e02:	4013      	ands	r3, r2
 8002e04:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e08:	3301      	adds	r3, #1
 8002e0a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e12:	fa22 f303 	lsr.w	r3, r2, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f47f ae8e 	bne.w	8002b38 <HAL_GPIO_Init+0x14>
  }
}
 8002e1c:	bf00      	nop
 8002e1e:	bf00      	nop
 8002e20:	372c      	adds	r7, #44	@ 0x2c
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bc80      	pop	{r7}
 8002e26:	4770      	bx	lr
 8002e28:	40010400 	.word	0x40010400

08002e2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	460b      	mov	r3, r1
 8002e36:	807b      	strh	r3, [r7, #2]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e3c:	787b      	ldrb	r3, [r7, #1]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e42:	887a      	ldrh	r2, [r7, #2]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002e48:	e003      	b.n	8002e52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e4a:	887b      	ldrh	r3, [r7, #2]
 8002e4c:	041a      	lsls	r2, r3, #16
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	611a      	str	r2, [r3, #16]
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bc80      	pop	{r7}
 8002e5a:	4770      	bx	lr

08002e5c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	460b      	mov	r3, r1
 8002e66:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e6e:	887a      	ldrh	r2, [r7, #2]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4013      	ands	r3, r2
 8002e74:	041a      	lsls	r2, r3, #16
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	43d9      	mvns	r1, r3
 8002e7a:	887b      	ldrh	r3, [r7, #2]
 8002e7c:	400b      	ands	r3, r1
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	611a      	str	r2, [r3, #16]
}
 8002e84:	bf00      	nop
 8002e86:	3714      	adds	r7, #20
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bc80      	pop	{r7}
 8002e8c:	4770      	bx	lr
	...

08002e90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e12b      	b.n	80030fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d106      	bne.n	8002ebc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f7fd ff40 	bl	8000d3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2224      	movs	r2, #36	@ 0x24
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 0201 	bic.w	r2, r2, #1
 8002ed2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ee2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ef2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ef4:	f001 fbca 	bl	800468c <HAL_RCC_GetPCLK1Freq>
 8002ef8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	4a81      	ldr	r2, [pc, #516]	@ (8003104 <HAL_I2C_Init+0x274>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d807      	bhi.n	8002f14 <HAL_I2C_Init+0x84>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	4a80      	ldr	r2, [pc, #512]	@ (8003108 <HAL_I2C_Init+0x278>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	bf94      	ite	ls
 8002f0c:	2301      	movls	r3, #1
 8002f0e:	2300      	movhi	r3, #0
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	e006      	b.n	8002f22 <HAL_I2C_Init+0x92>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	4a7d      	ldr	r2, [pc, #500]	@ (800310c <HAL_I2C_Init+0x27c>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	bf94      	ite	ls
 8002f1c:	2301      	movls	r3, #1
 8002f1e:	2300      	movhi	r3, #0
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e0e7      	b.n	80030fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	4a78      	ldr	r2, [pc, #480]	@ (8003110 <HAL_I2C_Init+0x280>)
 8002f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f32:	0c9b      	lsrs	r3, r3, #18
 8002f34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68ba      	ldr	r2, [r7, #8]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	4a6a      	ldr	r2, [pc, #424]	@ (8003104 <HAL_I2C_Init+0x274>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d802      	bhi.n	8002f64 <HAL_I2C_Init+0xd4>
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	3301      	adds	r3, #1
 8002f62:	e009      	b.n	8002f78 <HAL_I2C_Init+0xe8>
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002f6a:	fb02 f303 	mul.w	r3, r2, r3
 8002f6e:	4a69      	ldr	r2, [pc, #420]	@ (8003114 <HAL_I2C_Init+0x284>)
 8002f70:	fba2 2303 	umull	r2, r3, r2, r3
 8002f74:	099b      	lsrs	r3, r3, #6
 8002f76:	3301      	adds	r3, #1
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	6812      	ldr	r2, [r2, #0]
 8002f7c:	430b      	orrs	r3, r1
 8002f7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002f8a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	495c      	ldr	r1, [pc, #368]	@ (8003104 <HAL_I2C_Init+0x274>)
 8002f94:	428b      	cmp	r3, r1
 8002f96:	d819      	bhi.n	8002fcc <HAL_I2C_Init+0x13c>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	1e59      	subs	r1, r3, #1
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fa6:	1c59      	adds	r1, r3, #1
 8002fa8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002fac:	400b      	ands	r3, r1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00a      	beq.n	8002fc8 <HAL_I2C_Init+0x138>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	1e59      	subs	r1, r3, #1
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc6:	e051      	b.n	800306c <HAL_I2C_Init+0x1dc>
 8002fc8:	2304      	movs	r3, #4
 8002fca:	e04f      	b.n	800306c <HAL_I2C_Init+0x1dc>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d111      	bne.n	8002ff8 <HAL_I2C_Init+0x168>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	1e58      	subs	r0, r3, #1
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6859      	ldr	r1, [r3, #4]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	440b      	add	r3, r1
 8002fe2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	bf0c      	ite	eq
 8002ff0:	2301      	moveq	r3, #1
 8002ff2:	2300      	movne	r3, #0
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	e012      	b.n	800301e <HAL_I2C_Init+0x18e>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	1e58      	subs	r0, r3, #1
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6859      	ldr	r1, [r3, #4]
 8003000:	460b      	mov	r3, r1
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	0099      	lsls	r1, r3, #2
 8003008:	440b      	add	r3, r1
 800300a:	fbb0 f3f3 	udiv	r3, r0, r3
 800300e:	3301      	adds	r3, #1
 8003010:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003014:	2b00      	cmp	r3, #0
 8003016:	bf0c      	ite	eq
 8003018:	2301      	moveq	r3, #1
 800301a:	2300      	movne	r3, #0
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <HAL_I2C_Init+0x196>
 8003022:	2301      	movs	r3, #1
 8003024:	e022      	b.n	800306c <HAL_I2C_Init+0x1dc>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10e      	bne.n	800304c <HAL_I2C_Init+0x1bc>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	1e58      	subs	r0, r3, #1
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6859      	ldr	r1, [r3, #4]
 8003036:	460b      	mov	r3, r1
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	440b      	add	r3, r1
 800303c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003040:	3301      	adds	r3, #1
 8003042:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003046:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800304a:	e00f      	b.n	800306c <HAL_I2C_Init+0x1dc>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	1e58      	subs	r0, r3, #1
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6859      	ldr	r1, [r3, #4]
 8003054:	460b      	mov	r3, r1
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	440b      	add	r3, r1
 800305a:	0099      	lsls	r1, r3, #2
 800305c:	440b      	add	r3, r1
 800305e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003062:	3301      	adds	r3, #1
 8003064:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003068:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800306c:	6879      	ldr	r1, [r7, #4]
 800306e:	6809      	ldr	r1, [r1, #0]
 8003070:	4313      	orrs	r3, r2
 8003072:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	69da      	ldr	r2, [r3, #28]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	430a      	orrs	r2, r1
 800308e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800309a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6911      	ldr	r1, [r2, #16]
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	68d2      	ldr	r2, [r2, #12]
 80030a6:	4311      	orrs	r1, r2
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6812      	ldr	r2, [r2, #0]
 80030ac:	430b      	orrs	r3, r1
 80030ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	695a      	ldr	r2, [r3, #20]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	431a      	orrs	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	430a      	orrs	r2, r1
 80030ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f042 0201 	orr.w	r2, r2, #1
 80030da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2220      	movs	r2, #32
 80030e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	000186a0 	.word	0x000186a0
 8003108:	001e847f 	.word	0x001e847f
 800310c:	003d08ff 	.word	0x003d08ff
 8003110:	431bde83 	.word	0x431bde83
 8003114:	10624dd3 	.word	0x10624dd3

08003118 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b088      	sub	sp, #32
 800311c:	af02      	add	r7, sp, #8
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	607a      	str	r2, [r7, #4]
 8003122:	461a      	mov	r2, r3
 8003124:	460b      	mov	r3, r1
 8003126:	817b      	strh	r3, [r7, #10]
 8003128:	4613      	mov	r3, r2
 800312a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800312c:	f7fe ff90 	bl	8002050 <HAL_GetTick>
 8003130:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b20      	cmp	r3, #32
 800313c:	f040 80e0 	bne.w	8003300 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	9300      	str	r3, [sp, #0]
 8003144:	2319      	movs	r3, #25
 8003146:	2201      	movs	r2, #1
 8003148:	4970      	ldr	r1, [pc, #448]	@ (800330c <HAL_I2C_Master_Transmit+0x1f4>)
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f000 fc9e 	bl	8003a8c <I2C_WaitOnFlagUntilTimeout>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003156:	2302      	movs	r3, #2
 8003158:	e0d3      	b.n	8003302 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003160:	2b01      	cmp	r3, #1
 8003162:	d101      	bne.n	8003168 <HAL_I2C_Master_Transmit+0x50>
 8003164:	2302      	movs	r3, #2
 8003166:	e0cc      	b.n	8003302 <HAL_I2C_Master_Transmit+0x1ea>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b01      	cmp	r3, #1
 800317c:	d007      	beq.n	800318e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f042 0201 	orr.w	r2, r2, #1
 800318c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800319c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2221      	movs	r2, #33	@ 0x21
 80031a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2210      	movs	r2, #16
 80031aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	893a      	ldrh	r2, [r7, #8]
 80031be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	4a50      	ldr	r2, [pc, #320]	@ (8003310 <HAL_I2C_Master_Transmit+0x1f8>)
 80031ce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80031d0:	8979      	ldrh	r1, [r7, #10]
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	6a3a      	ldr	r2, [r7, #32]
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f000 fb08 	bl	80037ec <I2C_MasterRequestWrite>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e08d      	b.n	8003302 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031e6:	2300      	movs	r3, #0
 80031e8:	613b      	str	r3, [r7, #16]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	695b      	ldr	r3, [r3, #20]
 80031f0:	613b      	str	r3, [r7, #16]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	613b      	str	r3, [r7, #16]
 80031fa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80031fc:	e066      	b.n	80032cc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	6a39      	ldr	r1, [r7, #32]
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f000 fd5c 	bl	8003cc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00d      	beq.n	800322a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003212:	2b04      	cmp	r3, #4
 8003214:	d107      	bne.n	8003226 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003224:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e06b      	b.n	8003302 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800322e:	781a      	ldrb	r2, [r3, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323a:	1c5a      	adds	r2, r3, #1
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003244:	b29b      	uxth	r3, r3
 8003246:	3b01      	subs	r3, #1
 8003248:	b29a      	uxth	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003252:	3b01      	subs	r3, #1
 8003254:	b29a      	uxth	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	695b      	ldr	r3, [r3, #20]
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	2b04      	cmp	r3, #4
 8003266:	d11b      	bne.n	80032a0 <HAL_I2C_Master_Transmit+0x188>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800326c:	2b00      	cmp	r3, #0
 800326e:	d017      	beq.n	80032a0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003274:	781a      	ldrb	r2, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003280:	1c5a      	adds	r2, r3, #1
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800328a:	b29b      	uxth	r3, r3
 800328c:	3b01      	subs	r3, #1
 800328e:	b29a      	uxth	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003298:	3b01      	subs	r3, #1
 800329a:	b29a      	uxth	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032a0:	697a      	ldr	r2, [r7, #20]
 80032a2:	6a39      	ldr	r1, [r7, #32]
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f000 fd53 	bl	8003d50 <I2C_WaitOnBTFFlagUntilTimeout>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00d      	beq.n	80032cc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b4:	2b04      	cmp	r3, #4
 80032b6:	d107      	bne.n	80032c8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032c6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e01a      	b.n	8003302 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d194      	bne.n	80031fe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2220      	movs	r2, #32
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80032fc:	2300      	movs	r3, #0
 80032fe:	e000      	b.n	8003302 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003300:	2302      	movs	r3, #2
  }
}
 8003302:	4618      	mov	r0, r3
 8003304:	3718      	adds	r7, #24
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	00100002 	.word	0x00100002
 8003310:	ffff0000 	.word	0xffff0000

08003314 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b08c      	sub	sp, #48	@ 0x30
 8003318:	af02      	add	r7, sp, #8
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	607a      	str	r2, [r7, #4]
 800331e:	461a      	mov	r2, r3
 8003320:	460b      	mov	r3, r1
 8003322:	817b      	strh	r3, [r7, #10]
 8003324:	4613      	mov	r3, r2
 8003326:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003328:	2300      	movs	r3, #0
 800332a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800332c:	f7fe fe90 	bl	8002050 <HAL_GetTick>
 8003330:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b20      	cmp	r3, #32
 800333c:	f040 824b 	bne.w	80037d6 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	2319      	movs	r3, #25
 8003346:	2201      	movs	r2, #1
 8003348:	497f      	ldr	r1, [pc, #508]	@ (8003548 <HAL_I2C_Master_Receive+0x234>)
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f000 fb9e 	bl	8003a8c <I2C_WaitOnFlagUntilTimeout>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003356:	2302      	movs	r3, #2
 8003358:	e23e      	b.n	80037d8 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003360:	2b01      	cmp	r3, #1
 8003362:	d101      	bne.n	8003368 <HAL_I2C_Master_Receive+0x54>
 8003364:	2302      	movs	r3, #2
 8003366:	e237      	b.n	80037d8 <HAL_I2C_Master_Receive+0x4c4>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b01      	cmp	r3, #1
 800337c:	d007      	beq.n	800338e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f042 0201 	orr.w	r2, r2, #1
 800338c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800339c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2222      	movs	r2, #34	@ 0x22
 80033a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2210      	movs	r2, #16
 80033aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	893a      	ldrh	r2, [r7, #8]
 80033be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	4a5f      	ldr	r2, [pc, #380]	@ (800354c <HAL_I2C_Master_Receive+0x238>)
 80033ce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80033d0:	8979      	ldrh	r1, [r7, #10]
 80033d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f000 fa8a 	bl	80038f0 <I2C_MasterRequestRead>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e1f8      	b.n	80037d8 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d113      	bne.n	8003416 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ee:	2300      	movs	r3, #0
 80033f0:	61fb      	str	r3, [r7, #28]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	695b      	ldr	r3, [r3, #20]
 80033f8:	61fb      	str	r3, [r7, #28]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	61fb      	str	r3, [r7, #28]
 8003402:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	e1cc      	b.n	80037b0 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800341a:	2b01      	cmp	r3, #1
 800341c:	d11e      	bne.n	800345c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800342c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800342e:	b672      	cpsid	i
}
 8003430:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003432:	2300      	movs	r3, #0
 8003434:	61bb      	str	r3, [r7, #24]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	61bb      	str	r3, [r7, #24]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	61bb      	str	r3, [r7, #24]
 8003446:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003456:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003458:	b662      	cpsie	i
}
 800345a:	e035      	b.n	80034c8 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003460:	2b02      	cmp	r3, #2
 8003462:	d11e      	bne.n	80034a2 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003472:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003474:	b672      	cpsid	i
}
 8003476:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003478:	2300      	movs	r3, #0
 800347a:	617b      	str	r3, [r7, #20]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	617b      	str	r3, [r7, #20]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	617b      	str	r3, [r7, #20]
 800348c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800349c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800349e:	b662      	cpsie	i
}
 80034a0:	e012      	b.n	80034c8 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80034b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034b2:	2300      	movs	r3, #0
 80034b4:	613b      	str	r3, [r7, #16]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	695b      	ldr	r3, [r3, #20]
 80034bc:	613b      	str	r3, [r7, #16]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	613b      	str	r3, [r7, #16]
 80034c6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80034c8:	e172      	b.n	80037b0 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ce:	2b03      	cmp	r3, #3
 80034d0:	f200 811f 	bhi.w	8003712 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d123      	bne.n	8003524 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034de:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f000 fc7d 	bl	8003de0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e173      	b.n	80037d8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	691a      	ldr	r2, [r3, #16]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fa:	b2d2      	uxtb	r2, r2
 80034fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003502:	1c5a      	adds	r2, r3, #1
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800350c:	3b01      	subs	r3, #1
 800350e:	b29a      	uxth	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003518:	b29b      	uxth	r3, r3
 800351a:	3b01      	subs	r3, #1
 800351c:	b29a      	uxth	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003522:	e145      	b.n	80037b0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003528:	2b02      	cmp	r3, #2
 800352a:	d152      	bne.n	80035d2 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800352c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003532:	2200      	movs	r2, #0
 8003534:	4906      	ldr	r1, [pc, #24]	@ (8003550 <HAL_I2C_Master_Receive+0x23c>)
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f000 faa8 	bl	8003a8c <I2C_WaitOnFlagUntilTimeout>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d008      	beq.n	8003554 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e148      	b.n	80037d8 <HAL_I2C_Master_Receive+0x4c4>
 8003546:	bf00      	nop
 8003548:	00100002 	.word	0x00100002
 800354c:	ffff0000 	.word	0xffff0000
 8003550:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003554:	b672      	cpsid	i
}
 8003556:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003566:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	691a      	ldr	r2, [r3, #16]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003572:	b2d2      	uxtb	r2, r2
 8003574:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800357a:	1c5a      	adds	r2, r3, #1
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003584:	3b01      	subs	r3, #1
 8003586:	b29a      	uxth	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003590:	b29b      	uxth	r3, r3
 8003592:	3b01      	subs	r3, #1
 8003594:	b29a      	uxth	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800359a:	b662      	cpsie	i
}
 800359c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	691a      	ldr	r2, [r3, #16]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a8:	b2d2      	uxtb	r2, r2
 80035aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b0:	1c5a      	adds	r2, r3, #1
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ba:	3b01      	subs	r3, #1
 80035bc:	b29a      	uxth	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	3b01      	subs	r3, #1
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80035d0:	e0ee      	b.n	80037b0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d4:	9300      	str	r3, [sp, #0]
 80035d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035d8:	2200      	movs	r2, #0
 80035da:	4981      	ldr	r1, [pc, #516]	@ (80037e0 <HAL_I2C_Master_Receive+0x4cc>)
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f000 fa55 	bl	8003a8c <I2C_WaitOnFlagUntilTimeout>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d001      	beq.n	80035ec <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e0f5      	b.n	80037d8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035fa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80035fc:	b672      	cpsid	i
}
 80035fe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	691a      	ldr	r2, [r3, #16]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360a:	b2d2      	uxtb	r2, r2
 800360c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003612:	1c5a      	adds	r2, r3, #1
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800361c:	3b01      	subs	r3, #1
 800361e:	b29a      	uxth	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003628:	b29b      	uxth	r3, r3
 800362a:	3b01      	subs	r3, #1
 800362c:	b29a      	uxth	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003632:	4b6c      	ldr	r3, [pc, #432]	@ (80037e4 <HAL_I2C_Master_Receive+0x4d0>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	08db      	lsrs	r3, r3, #3
 8003638:	4a6b      	ldr	r2, [pc, #428]	@ (80037e8 <HAL_I2C_Master_Receive+0x4d4>)
 800363a:	fba2 2303 	umull	r2, r3, r2, r3
 800363e:	0a1a      	lsrs	r2, r3, #8
 8003640:	4613      	mov	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4413      	add	r3, r2
 8003646:	00da      	lsls	r2, r3, #3
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800364c:	6a3b      	ldr	r3, [r7, #32]
 800364e:	3b01      	subs	r3, #1
 8003650:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003652:	6a3b      	ldr	r3, [r7, #32]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d118      	bne.n	800368a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2220      	movs	r2, #32
 8003662:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003672:	f043 0220 	orr.w	r2, r3, #32
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800367a:	b662      	cpsie	i
}
 800367c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e0a6      	b.n	80037d8 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	f003 0304 	and.w	r3, r3, #4
 8003694:	2b04      	cmp	r3, #4
 8003696:	d1d9      	bne.n	800364c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	691a      	ldr	r2, [r3, #16]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b2:	b2d2      	uxtb	r2, r2
 80036b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ba:	1c5a      	adds	r2, r3, #1
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036c4:	3b01      	subs	r3, #1
 80036c6:	b29a      	uxth	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	3b01      	subs	r3, #1
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80036da:	b662      	cpsie	i
}
 80036dc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	691a      	ldr	r2, [r3, #16]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e8:	b2d2      	uxtb	r2, r2
 80036ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f0:	1c5a      	adds	r2, r3, #1
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036fa:	3b01      	subs	r3, #1
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003706:	b29b      	uxth	r3, r3
 8003708:	3b01      	subs	r3, #1
 800370a:	b29a      	uxth	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003710:	e04e      	b.n	80037b0 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003712:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003714:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f000 fb62 	bl	8003de0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e058      	b.n	80037d8 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	691a      	ldr	r2, [r3, #16]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003730:	b2d2      	uxtb	r2, r2
 8003732:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003738:	1c5a      	adds	r2, r3, #1
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003742:	3b01      	subs	r3, #1
 8003744:	b29a      	uxth	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800374e:	b29b      	uxth	r3, r3
 8003750:	3b01      	subs	r3, #1
 8003752:	b29a      	uxth	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	f003 0304 	and.w	r3, r3, #4
 8003762:	2b04      	cmp	r3, #4
 8003764:	d124      	bne.n	80037b0 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800376a:	2b03      	cmp	r3, #3
 800376c:	d107      	bne.n	800377e <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800377c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	691a      	ldr	r2, [r3, #16]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003788:	b2d2      	uxtb	r2, r2
 800378a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003790:	1c5a      	adds	r2, r3, #1
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800379a:	3b01      	subs	r3, #1
 800379c:	b29a      	uxth	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	3b01      	subs	r3, #1
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f47f ae88 	bne.w	80034ca <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2220      	movs	r2, #32
 80037be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80037d2:	2300      	movs	r3, #0
 80037d4:	e000      	b.n	80037d8 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80037d6:	2302      	movs	r3, #2
  }
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3728      	adds	r7, #40	@ 0x28
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	00010004 	.word	0x00010004
 80037e4:	20000000 	.word	0x20000000
 80037e8:	14f8b589 	.word	0x14f8b589

080037ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b088      	sub	sp, #32
 80037f0:	af02      	add	r7, sp, #8
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	607a      	str	r2, [r7, #4]
 80037f6:	603b      	str	r3, [r7, #0]
 80037f8:	460b      	mov	r3, r1
 80037fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003800:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	2b08      	cmp	r3, #8
 8003806:	d006      	beq.n	8003816 <I2C_MasterRequestWrite+0x2a>
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d003      	beq.n	8003816 <I2C_MasterRequestWrite+0x2a>
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003814:	d108      	bne.n	8003828 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003824:	601a      	str	r2, [r3, #0]
 8003826:	e00b      	b.n	8003840 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800382c:	2b12      	cmp	r3, #18
 800382e:	d107      	bne.n	8003840 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800383e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f000 f91d 	bl	8003a8c <I2C_WaitOnFlagUntilTimeout>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00d      	beq.n	8003874 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003862:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003866:	d103      	bne.n	8003870 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800386e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e035      	b.n	80038e0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800387c:	d108      	bne.n	8003890 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800387e:	897b      	ldrh	r3, [r7, #10]
 8003880:	b2db      	uxtb	r3, r3
 8003882:	461a      	mov	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800388c:	611a      	str	r2, [r3, #16]
 800388e:	e01b      	b.n	80038c8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003890:	897b      	ldrh	r3, [r7, #10]
 8003892:	11db      	asrs	r3, r3, #7
 8003894:	b2db      	uxtb	r3, r3
 8003896:	f003 0306 	and.w	r3, r3, #6
 800389a:	b2db      	uxtb	r3, r3
 800389c:	f063 030f 	orn	r3, r3, #15
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	490e      	ldr	r1, [pc, #56]	@ (80038e8 <I2C_MasterRequestWrite+0xfc>)
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f000 f966 	bl	8003b80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e010      	b.n	80038e0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80038be:	897b      	ldrh	r3, [r7, #10]
 80038c0:	b2da      	uxtb	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	4907      	ldr	r1, [pc, #28]	@ (80038ec <I2C_MasterRequestWrite+0x100>)
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f000 f956 	bl	8003b80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e000      	b.n	80038e0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3718      	adds	r7, #24
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	00010008 	.word	0x00010008
 80038ec:	00010002 	.word	0x00010002

080038f0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b088      	sub	sp, #32
 80038f4:	af02      	add	r7, sp, #8
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	607a      	str	r2, [r7, #4]
 80038fa:	603b      	str	r3, [r7, #0]
 80038fc:	460b      	mov	r3, r1
 80038fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003904:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003914:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	2b08      	cmp	r3, #8
 800391a:	d006      	beq.n	800392a <I2C_MasterRequestRead+0x3a>
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d003      	beq.n	800392a <I2C_MasterRequestRead+0x3a>
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003928:	d108      	bne.n	800393c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003938:	601a      	str	r2, [r3, #0]
 800393a:	e00b      	b.n	8003954 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003940:	2b11      	cmp	r3, #17
 8003942:	d107      	bne.n	8003954 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003952:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	9300      	str	r3, [sp, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f000 f893 	bl	8003a8c <I2C_WaitOnFlagUntilTimeout>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00d      	beq.n	8003988 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003976:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800397a:	d103      	bne.n	8003984 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003982:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e079      	b.n	8003a7c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003990:	d108      	bne.n	80039a4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003992:	897b      	ldrh	r3, [r7, #10]
 8003994:	b2db      	uxtb	r3, r3
 8003996:	f043 0301 	orr.w	r3, r3, #1
 800399a:	b2da      	uxtb	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	611a      	str	r2, [r3, #16]
 80039a2:	e05f      	b.n	8003a64 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80039a4:	897b      	ldrh	r3, [r7, #10]
 80039a6:	11db      	asrs	r3, r3, #7
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	f003 0306 	and.w	r3, r3, #6
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	f063 030f 	orn	r3, r3, #15
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	4930      	ldr	r1, [pc, #192]	@ (8003a84 <I2C_MasterRequestRead+0x194>)
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f000 f8dc 	bl	8003b80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e054      	b.n	8003a7c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80039d2:	897b      	ldrh	r3, [r7, #10]
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	4929      	ldr	r1, [pc, #164]	@ (8003a88 <I2C_MasterRequestRead+0x198>)
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	f000 f8cc 	bl	8003b80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e044      	b.n	8003a7c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039f2:	2300      	movs	r3, #0
 80039f4:	613b      	str	r3, [r7, #16]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	613b      	str	r3, [r7, #16]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	613b      	str	r3, [r7, #16]
 8003a06:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a16:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f000 f831 	bl	8003a8c <I2C_WaitOnFlagUntilTimeout>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00d      	beq.n	8003a4c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a3e:	d103      	bne.n	8003a48 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a46:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e017      	b.n	8003a7c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003a4c:	897b      	ldrh	r3, [r7, #10]
 8003a4e:	11db      	asrs	r3, r3, #7
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	f003 0306 	and.w	r3, r3, #6
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	f063 030e 	orn	r3, r3, #14
 8003a5c:	b2da      	uxtb	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	4907      	ldr	r1, [pc, #28]	@ (8003a88 <I2C_MasterRequestRead+0x198>)
 8003a6a:	68f8      	ldr	r0, [r7, #12]
 8003a6c:	f000 f888 	bl	8003b80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e000      	b.n	8003a7c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3718      	adds	r7, #24
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	00010008 	.word	0x00010008
 8003a88:	00010002 	.word	0x00010002

08003a8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	603b      	str	r3, [r7, #0]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a9c:	e048      	b.n	8003b30 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa4:	d044      	beq.n	8003b30 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aa6:	f7fe fad3 	bl	8002050 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	683a      	ldr	r2, [r7, #0]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d302      	bcc.n	8003abc <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d139      	bne.n	8003b30 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	0c1b      	lsrs	r3, r3, #16
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d10d      	bne.n	8003ae2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	43da      	mvns	r2, r3
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	bf0c      	ite	eq
 8003ad8:	2301      	moveq	r3, #1
 8003ada:	2300      	movne	r3, #0
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	461a      	mov	r2, r3
 8003ae0:	e00c      	b.n	8003afc <I2C_WaitOnFlagUntilTimeout+0x70>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	43da      	mvns	r2, r3
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	4013      	ands	r3, r2
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	bf0c      	ite	eq
 8003af4:	2301      	moveq	r3, #1
 8003af6:	2300      	movne	r3, #0
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	461a      	mov	r2, r3
 8003afc:	79fb      	ldrb	r3, [r7, #7]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d116      	bne.n	8003b30 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b1c:	f043 0220 	orr.w	r2, r3, #32
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e023      	b.n	8003b78 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	0c1b      	lsrs	r3, r3, #16
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d10d      	bne.n	8003b56 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	43da      	mvns	r2, r3
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	4013      	ands	r3, r2
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	bf0c      	ite	eq
 8003b4c:	2301      	moveq	r3, #1
 8003b4e:	2300      	movne	r3, #0
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	461a      	mov	r2, r3
 8003b54:	e00c      	b.n	8003b70 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	43da      	mvns	r2, r3
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	4013      	ands	r3, r2
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	bf0c      	ite	eq
 8003b68:	2301      	moveq	r3, #1
 8003b6a:	2300      	movne	r3, #0
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	461a      	mov	r2, r3
 8003b70:	79fb      	ldrb	r3, [r7, #7]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d093      	beq.n	8003a9e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
 8003b8c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b8e:	e071      	b.n	8003c74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b9e:	d123      	bne.n	8003be8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003bb8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd4:	f043 0204 	orr.w	r2, r3, #4
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e067      	b.n	8003cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bee:	d041      	beq.n	8003c74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bf0:	f7fe fa2e 	bl	8002050 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d302      	bcc.n	8003c06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d136      	bne.n	8003c74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	0c1b      	lsrs	r3, r3, #16
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d10c      	bne.n	8003c2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	43da      	mvns	r2, r3
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	bf14      	ite	ne
 8003c22:	2301      	movne	r3, #1
 8003c24:	2300      	moveq	r3, #0
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	e00b      	b.n	8003c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	43da      	mvns	r2, r3
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	4013      	ands	r3, r2
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	bf14      	ite	ne
 8003c3c:	2301      	movne	r3, #1
 8003c3e:	2300      	moveq	r3, #0
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d016      	beq.n	8003c74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c60:	f043 0220 	orr.w	r2, r3, #32
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e021      	b.n	8003cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	0c1b      	lsrs	r3, r3, #16
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d10c      	bne.n	8003c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	695b      	ldr	r3, [r3, #20]
 8003c84:	43da      	mvns	r2, r3
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	4013      	ands	r3, r2
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	bf14      	ite	ne
 8003c90:	2301      	movne	r3, #1
 8003c92:	2300      	moveq	r3, #0
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	e00b      	b.n	8003cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	43da      	mvns	r2, r3
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	bf14      	ite	ne
 8003caa:	2301      	movne	r3, #1
 8003cac:	2300      	moveq	r3, #0
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f47f af6d 	bne.w	8003b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ccc:	e034      	b.n	8003d38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f000 f8e3 	bl	8003e9a <I2C_IsAcknowledgeFailed>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e034      	b.n	8003d48 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce4:	d028      	beq.n	8003d38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ce6:	f7fe f9b3 	bl	8002050 <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	68ba      	ldr	r2, [r7, #8]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d302      	bcc.n	8003cfc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d11d      	bne.n	8003d38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d06:	2b80      	cmp	r3, #128	@ 0x80
 8003d08:	d016      	beq.n	8003d38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2220      	movs	r2, #32
 8003d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d24:	f043 0220 	orr.w	r2, r3, #32
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e007      	b.n	8003d48 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d42:	2b80      	cmp	r3, #128	@ 0x80
 8003d44:	d1c3      	bne.n	8003cce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3710      	adds	r7, #16
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d5c:	e034      	b.n	8003dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f000 f89b 	bl	8003e9a <I2C_IsAcknowledgeFailed>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e034      	b.n	8003dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d74:	d028      	beq.n	8003dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d76:	f7fe f96b 	bl	8002050 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	68ba      	ldr	r2, [r7, #8]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d302      	bcc.n	8003d8c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d11d      	bne.n	8003dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	f003 0304 	and.w	r3, r3, #4
 8003d96:	2b04      	cmp	r3, #4
 8003d98:	d016      	beq.n	8003dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2220      	movs	r2, #32
 8003da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db4:	f043 0220 	orr.w	r2, r3, #32
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e007      	b.n	8003dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	f003 0304 	and.w	r3, r3, #4
 8003dd2:	2b04      	cmp	r3, #4
 8003dd4:	d1c3      	bne.n	8003d5e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003dec:	e049      	b.n	8003e82 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	f003 0310 	and.w	r3, r3, #16
 8003df8:	2b10      	cmp	r3, #16
 8003dfa:	d119      	bne.n	8003e30 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f06f 0210 	mvn.w	r2, #16
 8003e04:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e030      	b.n	8003e92 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e30:	f7fe f90e 	bl	8002050 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d302      	bcc.n	8003e46 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d11d      	bne.n	8003e82 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	695b      	ldr	r3, [r3, #20]
 8003e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e50:	2b40      	cmp	r3, #64	@ 0x40
 8003e52:	d016      	beq.n	8003e82 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e6e:	f043 0220 	orr.w	r2, r3, #32
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e007      	b.n	8003e92 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e8c:	2b40      	cmp	r3, #64	@ 0x40
 8003e8e:	d1ae      	bne.n	8003dee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b083      	sub	sp, #12
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eb0:	d11b      	bne.n	8003eea <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003eba:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed6:	f043 0204 	orr.w	r2, r3, #4
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e000      	b.n	8003eec <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bc80      	pop	{r7}
 8003ef4:	4770      	bx	lr
	...

08003ef8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d101      	bne.n	8003f0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e272      	b.n	80043f0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f000 8087 	beq.w	8004026 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f18:	4b92      	ldr	r3, [pc, #584]	@ (8004164 <HAL_RCC_OscConfig+0x26c>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f003 030c 	and.w	r3, r3, #12
 8003f20:	2b04      	cmp	r3, #4
 8003f22:	d00c      	beq.n	8003f3e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f24:	4b8f      	ldr	r3, [pc, #572]	@ (8004164 <HAL_RCC_OscConfig+0x26c>)
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f003 030c 	and.w	r3, r3, #12
 8003f2c:	2b08      	cmp	r3, #8
 8003f2e:	d112      	bne.n	8003f56 <HAL_RCC_OscConfig+0x5e>
 8003f30:	4b8c      	ldr	r3, [pc, #560]	@ (8004164 <HAL_RCC_OscConfig+0x26c>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f3c:	d10b      	bne.n	8003f56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f3e:	4b89      	ldr	r3, [pc, #548]	@ (8004164 <HAL_RCC_OscConfig+0x26c>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d06c      	beq.n	8004024 <HAL_RCC_OscConfig+0x12c>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d168      	bne.n	8004024 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e24c      	b.n	80043f0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f5e:	d106      	bne.n	8003f6e <HAL_RCC_OscConfig+0x76>
 8003f60:	4b80      	ldr	r3, [pc, #512]	@ (8004164 <HAL_RCC_OscConfig+0x26c>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a7f      	ldr	r2, [pc, #508]	@ (8004164 <HAL_RCC_OscConfig+0x26c>)
 8003f66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f6a:	6013      	str	r3, [r2, #0]
 8003f6c:	e02e      	b.n	8003fcc <HAL_RCC_OscConfig+0xd4>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10c      	bne.n	8003f90 <HAL_RCC_OscConfig+0x98>
 8003f76:	4b7b      	ldr	r3, [pc, #492]	@ (8004164 <HAL_RCC_OscConfig+0x26c>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a7a      	ldr	r2, [pc, #488]	@ (8004164 <HAL_RCC_OscConfig+0x26c>)
 8003f7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f80:	6013      	str	r3, [r2, #0]
 8003f82:	4b78      	ldr	r3, [pc, #480]	@ (8004164 <HAL_RCC_OscConfig+0x26c>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a77      	ldr	r2, [pc, #476]	@ (8004164 <HAL_RCC_OscConfig+0x26c>)
 8003f88:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f8c:	6013      	str	r3, [r2, #0]
 8003f8e:	e01d      	b.n	8003fcc <HAL_RCC_OscConfig+0xd4>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f98:	d10c      	bne.n	8003fb4 <HAL_RCC_OscConfig+0xbc>
 8003f9a:	4b72      	ldr	r3, [pc, #456]	@ (8004164 <HAL_RCC_OscConfig+0x26c>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a71      	ldr	r2, [pc, #452]	@ (8004164 <HAL_RCC_OscConfig+0x26c>)
 8003fa0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fa4:	6013      	str	r3, [r2, #0]
 8003fa6:	4b6f      	ldr	r3, [pc, #444]	@ (8004164 <HAL_RCC_OscConfig+0x26c>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a6e      	ldr	r2, [pc, #440]	@ (8004164 <HAL_RCC_OscConfig+0x26c>)
 8003fac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fb0:	6013      	str	r3, [r2, #0]
 8003fb2:	e00b      	b.n	8003fcc <HAL_RCC_OscConfig+0xd4>
 8003fb4:	4b6b      	ldr	r3, [pc, #428]	@ (8004164 <HAL_RCC_OscConfig+0x26c>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a6a      	ldr	r2, [pc, #424]	@ (8004164 <HAL_RCC_OscConfig+0x26c>)
 8003fba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fbe:	6013      	str	r3, [r2, #0]
 8003fc0:	4b68      	ldr	r3, [pc, #416]	@ (8004164 <HAL_RCC_OscConfig+0x26c>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a67      	ldr	r2, [pc, #412]	@ (8004164 <HAL_RCC_OscConfig+0x26c>)
 8003fc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003fca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d013      	beq.n	8003ffc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd4:	f7fe f83c 	bl	8002050 <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fdc:	f7fe f838 	bl	8002050 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b64      	cmp	r3, #100	@ 0x64
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e200      	b.n	80043f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fee:	4b5d      	ldr	r3, [pc, #372]	@ (8004164 <HAL_RCC_OscConfig+0x26c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d0f0      	beq.n	8003fdc <HAL_RCC_OscConfig+0xe4>
 8003ffa:	e014      	b.n	8004026 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ffc:	f7fe f828 	bl	8002050 <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004002:	e008      	b.n	8004016 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004004:	f7fe f824 	bl	8002050 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b64      	cmp	r3, #100	@ 0x64
 8004010:	d901      	bls.n	8004016 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e1ec      	b.n	80043f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004016:	4b53      	ldr	r3, [pc, #332]	@ (8004164 <HAL_RCC_OscConfig+0x26c>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1f0      	bne.n	8004004 <HAL_RCC_OscConfig+0x10c>
 8004022:	e000      	b.n	8004026 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004024:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d063      	beq.n	80040fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004032:	4b4c      	ldr	r3, [pc, #304]	@ (8004164 <HAL_RCC_OscConfig+0x26c>)
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f003 030c 	and.w	r3, r3, #12
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00b      	beq.n	8004056 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800403e:	4b49      	ldr	r3, [pc, #292]	@ (8004164 <HAL_RCC_OscConfig+0x26c>)
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f003 030c 	and.w	r3, r3, #12
 8004046:	2b08      	cmp	r3, #8
 8004048:	d11c      	bne.n	8004084 <HAL_RCC_OscConfig+0x18c>
 800404a:	4b46      	ldr	r3, [pc, #280]	@ (8004164 <HAL_RCC_OscConfig+0x26c>)
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d116      	bne.n	8004084 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004056:	4b43      	ldr	r3, [pc, #268]	@ (8004164 <HAL_RCC_OscConfig+0x26c>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d005      	beq.n	800406e <HAL_RCC_OscConfig+0x176>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d001      	beq.n	800406e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e1c0      	b.n	80043f0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800406e:	4b3d      	ldr	r3, [pc, #244]	@ (8004164 <HAL_RCC_OscConfig+0x26c>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	4939      	ldr	r1, [pc, #228]	@ (8004164 <HAL_RCC_OscConfig+0x26c>)
 800407e:	4313      	orrs	r3, r2
 8004080:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004082:	e03a      	b.n	80040fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d020      	beq.n	80040ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800408c:	4b36      	ldr	r3, [pc, #216]	@ (8004168 <HAL_RCC_OscConfig+0x270>)
 800408e:	2201      	movs	r2, #1
 8004090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004092:	f7fd ffdd 	bl	8002050 <HAL_GetTick>
 8004096:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004098:	e008      	b.n	80040ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800409a:	f7fd ffd9 	bl	8002050 <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d901      	bls.n	80040ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e1a1      	b.n	80043f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ac:	4b2d      	ldr	r3, [pc, #180]	@ (8004164 <HAL_RCC_OscConfig+0x26c>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d0f0      	beq.n	800409a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040b8:	4b2a      	ldr	r3, [pc, #168]	@ (8004164 <HAL_RCC_OscConfig+0x26c>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	00db      	lsls	r3, r3, #3
 80040c6:	4927      	ldr	r1, [pc, #156]	@ (8004164 <HAL_RCC_OscConfig+0x26c>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	600b      	str	r3, [r1, #0]
 80040cc:	e015      	b.n	80040fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040ce:	4b26      	ldr	r3, [pc, #152]	@ (8004168 <HAL_RCC_OscConfig+0x270>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d4:	f7fd ffbc 	bl	8002050 <HAL_GetTick>
 80040d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040da:	e008      	b.n	80040ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040dc:	f7fd ffb8 	bl	8002050 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e180      	b.n	80043f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ee:	4b1d      	ldr	r3, [pc, #116]	@ (8004164 <HAL_RCC_OscConfig+0x26c>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1f0      	bne.n	80040dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0308 	and.w	r3, r3, #8
 8004102:	2b00      	cmp	r3, #0
 8004104:	d03a      	beq.n	800417c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d019      	beq.n	8004142 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800410e:	4b17      	ldr	r3, [pc, #92]	@ (800416c <HAL_RCC_OscConfig+0x274>)
 8004110:	2201      	movs	r2, #1
 8004112:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004114:	f7fd ff9c 	bl	8002050 <HAL_GetTick>
 8004118:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800411a:	e008      	b.n	800412e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800411c:	f7fd ff98 	bl	8002050 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b02      	cmp	r3, #2
 8004128:	d901      	bls.n	800412e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e160      	b.n	80043f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800412e:	4b0d      	ldr	r3, [pc, #52]	@ (8004164 <HAL_RCC_OscConfig+0x26c>)
 8004130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d0f0      	beq.n	800411c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800413a:	2001      	movs	r0, #1
 800413c:	f000 face 	bl	80046dc <RCC_Delay>
 8004140:	e01c      	b.n	800417c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004142:	4b0a      	ldr	r3, [pc, #40]	@ (800416c <HAL_RCC_OscConfig+0x274>)
 8004144:	2200      	movs	r2, #0
 8004146:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004148:	f7fd ff82 	bl	8002050 <HAL_GetTick>
 800414c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800414e:	e00f      	b.n	8004170 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004150:	f7fd ff7e 	bl	8002050 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	2b02      	cmp	r3, #2
 800415c:	d908      	bls.n	8004170 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e146      	b.n	80043f0 <HAL_RCC_OscConfig+0x4f8>
 8004162:	bf00      	nop
 8004164:	40021000 	.word	0x40021000
 8004168:	42420000 	.word	0x42420000
 800416c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004170:	4b92      	ldr	r3, [pc, #584]	@ (80043bc <HAL_RCC_OscConfig+0x4c4>)
 8004172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1e9      	bne.n	8004150 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0304 	and.w	r3, r3, #4
 8004184:	2b00      	cmp	r3, #0
 8004186:	f000 80a6 	beq.w	80042d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800418a:	2300      	movs	r3, #0
 800418c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800418e:	4b8b      	ldr	r3, [pc, #556]	@ (80043bc <HAL_RCC_OscConfig+0x4c4>)
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d10d      	bne.n	80041b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800419a:	4b88      	ldr	r3, [pc, #544]	@ (80043bc <HAL_RCC_OscConfig+0x4c4>)
 800419c:	69db      	ldr	r3, [r3, #28]
 800419e:	4a87      	ldr	r2, [pc, #540]	@ (80043bc <HAL_RCC_OscConfig+0x4c4>)
 80041a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041a4:	61d3      	str	r3, [r2, #28]
 80041a6:	4b85      	ldr	r3, [pc, #532]	@ (80043bc <HAL_RCC_OscConfig+0x4c4>)
 80041a8:	69db      	ldr	r3, [r3, #28]
 80041aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041ae:	60bb      	str	r3, [r7, #8]
 80041b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041b2:	2301      	movs	r3, #1
 80041b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041b6:	4b82      	ldr	r3, [pc, #520]	@ (80043c0 <HAL_RCC_OscConfig+0x4c8>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d118      	bne.n	80041f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041c2:	4b7f      	ldr	r3, [pc, #508]	@ (80043c0 <HAL_RCC_OscConfig+0x4c8>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a7e      	ldr	r2, [pc, #504]	@ (80043c0 <HAL_RCC_OscConfig+0x4c8>)
 80041c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041ce:	f7fd ff3f 	bl	8002050 <HAL_GetTick>
 80041d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041d4:	e008      	b.n	80041e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041d6:	f7fd ff3b 	bl	8002050 <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	2b64      	cmp	r3, #100	@ 0x64
 80041e2:	d901      	bls.n	80041e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e103      	b.n	80043f0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041e8:	4b75      	ldr	r3, [pc, #468]	@ (80043c0 <HAL_RCC_OscConfig+0x4c8>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d0f0      	beq.n	80041d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d106      	bne.n	800420a <HAL_RCC_OscConfig+0x312>
 80041fc:	4b6f      	ldr	r3, [pc, #444]	@ (80043bc <HAL_RCC_OscConfig+0x4c4>)
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	4a6e      	ldr	r2, [pc, #440]	@ (80043bc <HAL_RCC_OscConfig+0x4c4>)
 8004202:	f043 0301 	orr.w	r3, r3, #1
 8004206:	6213      	str	r3, [r2, #32]
 8004208:	e02d      	b.n	8004266 <HAL_RCC_OscConfig+0x36e>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10c      	bne.n	800422c <HAL_RCC_OscConfig+0x334>
 8004212:	4b6a      	ldr	r3, [pc, #424]	@ (80043bc <HAL_RCC_OscConfig+0x4c4>)
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	4a69      	ldr	r2, [pc, #420]	@ (80043bc <HAL_RCC_OscConfig+0x4c4>)
 8004218:	f023 0301 	bic.w	r3, r3, #1
 800421c:	6213      	str	r3, [r2, #32]
 800421e:	4b67      	ldr	r3, [pc, #412]	@ (80043bc <HAL_RCC_OscConfig+0x4c4>)
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	4a66      	ldr	r2, [pc, #408]	@ (80043bc <HAL_RCC_OscConfig+0x4c4>)
 8004224:	f023 0304 	bic.w	r3, r3, #4
 8004228:	6213      	str	r3, [r2, #32]
 800422a:	e01c      	b.n	8004266 <HAL_RCC_OscConfig+0x36e>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	2b05      	cmp	r3, #5
 8004232:	d10c      	bne.n	800424e <HAL_RCC_OscConfig+0x356>
 8004234:	4b61      	ldr	r3, [pc, #388]	@ (80043bc <HAL_RCC_OscConfig+0x4c4>)
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	4a60      	ldr	r2, [pc, #384]	@ (80043bc <HAL_RCC_OscConfig+0x4c4>)
 800423a:	f043 0304 	orr.w	r3, r3, #4
 800423e:	6213      	str	r3, [r2, #32]
 8004240:	4b5e      	ldr	r3, [pc, #376]	@ (80043bc <HAL_RCC_OscConfig+0x4c4>)
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	4a5d      	ldr	r2, [pc, #372]	@ (80043bc <HAL_RCC_OscConfig+0x4c4>)
 8004246:	f043 0301 	orr.w	r3, r3, #1
 800424a:	6213      	str	r3, [r2, #32]
 800424c:	e00b      	b.n	8004266 <HAL_RCC_OscConfig+0x36e>
 800424e:	4b5b      	ldr	r3, [pc, #364]	@ (80043bc <HAL_RCC_OscConfig+0x4c4>)
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	4a5a      	ldr	r2, [pc, #360]	@ (80043bc <HAL_RCC_OscConfig+0x4c4>)
 8004254:	f023 0301 	bic.w	r3, r3, #1
 8004258:	6213      	str	r3, [r2, #32]
 800425a:	4b58      	ldr	r3, [pc, #352]	@ (80043bc <HAL_RCC_OscConfig+0x4c4>)
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	4a57      	ldr	r2, [pc, #348]	@ (80043bc <HAL_RCC_OscConfig+0x4c4>)
 8004260:	f023 0304 	bic.w	r3, r3, #4
 8004264:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d015      	beq.n	800429a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800426e:	f7fd feef 	bl	8002050 <HAL_GetTick>
 8004272:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004274:	e00a      	b.n	800428c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004276:	f7fd feeb 	bl	8002050 <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004284:	4293      	cmp	r3, r2
 8004286:	d901      	bls.n	800428c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e0b1      	b.n	80043f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800428c:	4b4b      	ldr	r3, [pc, #300]	@ (80043bc <HAL_RCC_OscConfig+0x4c4>)
 800428e:	6a1b      	ldr	r3, [r3, #32]
 8004290:	f003 0302 	and.w	r3, r3, #2
 8004294:	2b00      	cmp	r3, #0
 8004296:	d0ee      	beq.n	8004276 <HAL_RCC_OscConfig+0x37e>
 8004298:	e014      	b.n	80042c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800429a:	f7fd fed9 	bl	8002050 <HAL_GetTick>
 800429e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042a0:	e00a      	b.n	80042b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042a2:	f7fd fed5 	bl	8002050 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d901      	bls.n	80042b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e09b      	b.n	80043f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042b8:	4b40      	ldr	r3, [pc, #256]	@ (80043bc <HAL_RCC_OscConfig+0x4c4>)
 80042ba:	6a1b      	ldr	r3, [r3, #32]
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1ee      	bne.n	80042a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80042c4:	7dfb      	ldrb	r3, [r7, #23]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d105      	bne.n	80042d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042ca:	4b3c      	ldr	r3, [pc, #240]	@ (80043bc <HAL_RCC_OscConfig+0x4c4>)
 80042cc:	69db      	ldr	r3, [r3, #28]
 80042ce:	4a3b      	ldr	r2, [pc, #236]	@ (80043bc <HAL_RCC_OscConfig+0x4c4>)
 80042d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	69db      	ldr	r3, [r3, #28]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f000 8087 	beq.w	80043ee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042e0:	4b36      	ldr	r3, [pc, #216]	@ (80043bc <HAL_RCC_OscConfig+0x4c4>)
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f003 030c 	and.w	r3, r3, #12
 80042e8:	2b08      	cmp	r3, #8
 80042ea:	d061      	beq.n	80043b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	69db      	ldr	r3, [r3, #28]
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d146      	bne.n	8004382 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042f4:	4b33      	ldr	r3, [pc, #204]	@ (80043c4 <HAL_RCC_OscConfig+0x4cc>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042fa:	f7fd fea9 	bl	8002050 <HAL_GetTick>
 80042fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004300:	e008      	b.n	8004314 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004302:	f7fd fea5 	bl	8002050 <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	2b02      	cmp	r3, #2
 800430e:	d901      	bls.n	8004314 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e06d      	b.n	80043f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004314:	4b29      	ldr	r3, [pc, #164]	@ (80043bc <HAL_RCC_OscConfig+0x4c4>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1f0      	bne.n	8004302 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a1b      	ldr	r3, [r3, #32]
 8004324:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004328:	d108      	bne.n	800433c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800432a:	4b24      	ldr	r3, [pc, #144]	@ (80043bc <HAL_RCC_OscConfig+0x4c4>)
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	4921      	ldr	r1, [pc, #132]	@ (80043bc <HAL_RCC_OscConfig+0x4c4>)
 8004338:	4313      	orrs	r3, r2
 800433a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800433c:	4b1f      	ldr	r3, [pc, #124]	@ (80043bc <HAL_RCC_OscConfig+0x4c4>)
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a19      	ldr	r1, [r3, #32]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800434c:	430b      	orrs	r3, r1
 800434e:	491b      	ldr	r1, [pc, #108]	@ (80043bc <HAL_RCC_OscConfig+0x4c4>)
 8004350:	4313      	orrs	r3, r2
 8004352:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004354:	4b1b      	ldr	r3, [pc, #108]	@ (80043c4 <HAL_RCC_OscConfig+0x4cc>)
 8004356:	2201      	movs	r2, #1
 8004358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800435a:	f7fd fe79 	bl	8002050 <HAL_GetTick>
 800435e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004360:	e008      	b.n	8004374 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004362:	f7fd fe75 	bl	8002050 <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	2b02      	cmp	r3, #2
 800436e:	d901      	bls.n	8004374 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e03d      	b.n	80043f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004374:	4b11      	ldr	r3, [pc, #68]	@ (80043bc <HAL_RCC_OscConfig+0x4c4>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d0f0      	beq.n	8004362 <HAL_RCC_OscConfig+0x46a>
 8004380:	e035      	b.n	80043ee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004382:	4b10      	ldr	r3, [pc, #64]	@ (80043c4 <HAL_RCC_OscConfig+0x4cc>)
 8004384:	2200      	movs	r2, #0
 8004386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004388:	f7fd fe62 	bl	8002050 <HAL_GetTick>
 800438c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800438e:	e008      	b.n	80043a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004390:	f7fd fe5e 	bl	8002050 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b02      	cmp	r3, #2
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e026      	b.n	80043f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043a2:	4b06      	ldr	r3, [pc, #24]	@ (80043bc <HAL_RCC_OscConfig+0x4c4>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1f0      	bne.n	8004390 <HAL_RCC_OscConfig+0x498>
 80043ae:	e01e      	b.n	80043ee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	69db      	ldr	r3, [r3, #28]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d107      	bne.n	80043c8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e019      	b.n	80043f0 <HAL_RCC_OscConfig+0x4f8>
 80043bc:	40021000 	.word	0x40021000
 80043c0:	40007000 	.word	0x40007000
 80043c4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80043c8:	4b0b      	ldr	r3, [pc, #44]	@ (80043f8 <HAL_RCC_OscConfig+0x500>)
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a1b      	ldr	r3, [r3, #32]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d106      	bne.n	80043ea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d001      	beq.n	80043ee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e000      	b.n	80043f0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3718      	adds	r7, #24
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	40021000 	.word	0x40021000

080043fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d101      	bne.n	8004410 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e0d0      	b.n	80045b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004410:	4b6a      	ldr	r3, [pc, #424]	@ (80045bc <HAL_RCC_ClockConfig+0x1c0>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0307 	and.w	r3, r3, #7
 8004418:	683a      	ldr	r2, [r7, #0]
 800441a:	429a      	cmp	r2, r3
 800441c:	d910      	bls.n	8004440 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800441e:	4b67      	ldr	r3, [pc, #412]	@ (80045bc <HAL_RCC_ClockConfig+0x1c0>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f023 0207 	bic.w	r2, r3, #7
 8004426:	4965      	ldr	r1, [pc, #404]	@ (80045bc <HAL_RCC_ClockConfig+0x1c0>)
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	4313      	orrs	r3, r2
 800442c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800442e:	4b63      	ldr	r3, [pc, #396]	@ (80045bc <HAL_RCC_ClockConfig+0x1c0>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0307 	and.w	r3, r3, #7
 8004436:	683a      	ldr	r2, [r7, #0]
 8004438:	429a      	cmp	r2, r3
 800443a:	d001      	beq.n	8004440 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e0b8      	b.n	80045b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d020      	beq.n	800448e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0304 	and.w	r3, r3, #4
 8004454:	2b00      	cmp	r3, #0
 8004456:	d005      	beq.n	8004464 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004458:	4b59      	ldr	r3, [pc, #356]	@ (80045c0 <HAL_RCC_ClockConfig+0x1c4>)
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	4a58      	ldr	r2, [pc, #352]	@ (80045c0 <HAL_RCC_ClockConfig+0x1c4>)
 800445e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004462:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0308 	and.w	r3, r3, #8
 800446c:	2b00      	cmp	r3, #0
 800446e:	d005      	beq.n	800447c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004470:	4b53      	ldr	r3, [pc, #332]	@ (80045c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	4a52      	ldr	r2, [pc, #328]	@ (80045c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004476:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800447a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800447c:	4b50      	ldr	r3, [pc, #320]	@ (80045c0 <HAL_RCC_ClockConfig+0x1c4>)
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	494d      	ldr	r1, [pc, #308]	@ (80045c0 <HAL_RCC_ClockConfig+0x1c4>)
 800448a:	4313      	orrs	r3, r2
 800448c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b00      	cmp	r3, #0
 8004498:	d040      	beq.n	800451c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d107      	bne.n	80044b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044a2:	4b47      	ldr	r3, [pc, #284]	@ (80045c0 <HAL_RCC_ClockConfig+0x1c4>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d115      	bne.n	80044da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e07f      	b.n	80045b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d107      	bne.n	80044ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ba:	4b41      	ldr	r3, [pc, #260]	@ (80045c0 <HAL_RCC_ClockConfig+0x1c4>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d109      	bne.n	80044da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e073      	b.n	80045b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ca:	4b3d      	ldr	r3, [pc, #244]	@ (80045c0 <HAL_RCC_ClockConfig+0x1c4>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e06b      	b.n	80045b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044da:	4b39      	ldr	r3, [pc, #228]	@ (80045c0 <HAL_RCC_ClockConfig+0x1c4>)
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f023 0203 	bic.w	r2, r3, #3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	4936      	ldr	r1, [pc, #216]	@ (80045c0 <HAL_RCC_ClockConfig+0x1c4>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044ec:	f7fd fdb0 	bl	8002050 <HAL_GetTick>
 80044f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044f2:	e00a      	b.n	800450a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044f4:	f7fd fdac 	bl	8002050 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004502:	4293      	cmp	r3, r2
 8004504:	d901      	bls.n	800450a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e053      	b.n	80045b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800450a:	4b2d      	ldr	r3, [pc, #180]	@ (80045c0 <HAL_RCC_ClockConfig+0x1c4>)
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f003 020c 	and.w	r2, r3, #12
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	429a      	cmp	r2, r3
 800451a:	d1eb      	bne.n	80044f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800451c:	4b27      	ldr	r3, [pc, #156]	@ (80045bc <HAL_RCC_ClockConfig+0x1c0>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0307 	and.w	r3, r3, #7
 8004524:	683a      	ldr	r2, [r7, #0]
 8004526:	429a      	cmp	r2, r3
 8004528:	d210      	bcs.n	800454c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800452a:	4b24      	ldr	r3, [pc, #144]	@ (80045bc <HAL_RCC_ClockConfig+0x1c0>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f023 0207 	bic.w	r2, r3, #7
 8004532:	4922      	ldr	r1, [pc, #136]	@ (80045bc <HAL_RCC_ClockConfig+0x1c0>)
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	4313      	orrs	r3, r2
 8004538:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800453a:	4b20      	ldr	r3, [pc, #128]	@ (80045bc <HAL_RCC_ClockConfig+0x1c0>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0307 	and.w	r3, r3, #7
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	429a      	cmp	r2, r3
 8004546:	d001      	beq.n	800454c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e032      	b.n	80045b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0304 	and.w	r3, r3, #4
 8004554:	2b00      	cmp	r3, #0
 8004556:	d008      	beq.n	800456a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004558:	4b19      	ldr	r3, [pc, #100]	@ (80045c0 <HAL_RCC_ClockConfig+0x1c4>)
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	4916      	ldr	r1, [pc, #88]	@ (80045c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004566:	4313      	orrs	r3, r2
 8004568:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0308 	and.w	r3, r3, #8
 8004572:	2b00      	cmp	r3, #0
 8004574:	d009      	beq.n	800458a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004576:	4b12      	ldr	r3, [pc, #72]	@ (80045c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	00db      	lsls	r3, r3, #3
 8004584:	490e      	ldr	r1, [pc, #56]	@ (80045c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004586:	4313      	orrs	r3, r2
 8004588:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800458a:	f000 f821 	bl	80045d0 <HAL_RCC_GetSysClockFreq>
 800458e:	4602      	mov	r2, r0
 8004590:	4b0b      	ldr	r3, [pc, #44]	@ (80045c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	091b      	lsrs	r3, r3, #4
 8004596:	f003 030f 	and.w	r3, r3, #15
 800459a:	490a      	ldr	r1, [pc, #40]	@ (80045c4 <HAL_RCC_ClockConfig+0x1c8>)
 800459c:	5ccb      	ldrb	r3, [r1, r3]
 800459e:	fa22 f303 	lsr.w	r3, r2, r3
 80045a2:	4a09      	ldr	r2, [pc, #36]	@ (80045c8 <HAL_RCC_ClockConfig+0x1cc>)
 80045a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80045a6:	4b09      	ldr	r3, [pc, #36]	@ (80045cc <HAL_RCC_ClockConfig+0x1d0>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7fd fd0e 	bl	8001fcc <HAL_InitTick>

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	40022000 	.word	0x40022000
 80045c0:	40021000 	.word	0x40021000
 80045c4:	0800673c 	.word	0x0800673c
 80045c8:	20000000 	.word	0x20000000
 80045cc:	20000004 	.word	0x20000004

080045d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b087      	sub	sp, #28
 80045d4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80045d6:	2300      	movs	r3, #0
 80045d8:	60fb      	str	r3, [r7, #12]
 80045da:	2300      	movs	r3, #0
 80045dc:	60bb      	str	r3, [r7, #8]
 80045de:	2300      	movs	r3, #0
 80045e0:	617b      	str	r3, [r7, #20]
 80045e2:	2300      	movs	r3, #0
 80045e4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80045ea:	4b1e      	ldr	r3, [pc, #120]	@ (8004664 <HAL_RCC_GetSysClockFreq+0x94>)
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f003 030c 	and.w	r3, r3, #12
 80045f6:	2b04      	cmp	r3, #4
 80045f8:	d002      	beq.n	8004600 <HAL_RCC_GetSysClockFreq+0x30>
 80045fa:	2b08      	cmp	r3, #8
 80045fc:	d003      	beq.n	8004606 <HAL_RCC_GetSysClockFreq+0x36>
 80045fe:	e027      	b.n	8004650 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004600:	4b19      	ldr	r3, [pc, #100]	@ (8004668 <HAL_RCC_GetSysClockFreq+0x98>)
 8004602:	613b      	str	r3, [r7, #16]
      break;
 8004604:	e027      	b.n	8004656 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	0c9b      	lsrs	r3, r3, #18
 800460a:	f003 030f 	and.w	r3, r3, #15
 800460e:	4a17      	ldr	r2, [pc, #92]	@ (800466c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004610:	5cd3      	ldrb	r3, [r2, r3]
 8004612:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d010      	beq.n	8004640 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800461e:	4b11      	ldr	r3, [pc, #68]	@ (8004664 <HAL_RCC_GetSysClockFreq+0x94>)
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	0c5b      	lsrs	r3, r3, #17
 8004624:	f003 0301 	and.w	r3, r3, #1
 8004628:	4a11      	ldr	r2, [pc, #68]	@ (8004670 <HAL_RCC_GetSysClockFreq+0xa0>)
 800462a:	5cd3      	ldrb	r3, [r2, r3]
 800462c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a0d      	ldr	r2, [pc, #52]	@ (8004668 <HAL_RCC_GetSysClockFreq+0x98>)
 8004632:	fb03 f202 	mul.w	r2, r3, r2
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	fbb2 f3f3 	udiv	r3, r2, r3
 800463c:	617b      	str	r3, [r7, #20]
 800463e:	e004      	b.n	800464a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a0c      	ldr	r2, [pc, #48]	@ (8004674 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004644:	fb02 f303 	mul.w	r3, r2, r3
 8004648:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	613b      	str	r3, [r7, #16]
      break;
 800464e:	e002      	b.n	8004656 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004650:	4b05      	ldr	r3, [pc, #20]	@ (8004668 <HAL_RCC_GetSysClockFreq+0x98>)
 8004652:	613b      	str	r3, [r7, #16]
      break;
 8004654:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004656:	693b      	ldr	r3, [r7, #16]
}
 8004658:	4618      	mov	r0, r3
 800465a:	371c      	adds	r7, #28
 800465c:	46bd      	mov	sp, r7
 800465e:	bc80      	pop	{r7}
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	40021000 	.word	0x40021000
 8004668:	007a1200 	.word	0x007a1200
 800466c:	08006774 	.word	0x08006774
 8004670:	08006784 	.word	0x08006784
 8004674:	003d0900 	.word	0x003d0900

08004678 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800467c:	4b02      	ldr	r3, [pc, #8]	@ (8004688 <HAL_RCC_GetHCLKFreq+0x10>)
 800467e:	681b      	ldr	r3, [r3, #0]
}
 8004680:	4618      	mov	r0, r3
 8004682:	46bd      	mov	sp, r7
 8004684:	bc80      	pop	{r7}
 8004686:	4770      	bx	lr
 8004688:	20000000 	.word	0x20000000

0800468c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004690:	f7ff fff2 	bl	8004678 <HAL_RCC_GetHCLKFreq>
 8004694:	4602      	mov	r2, r0
 8004696:	4b05      	ldr	r3, [pc, #20]	@ (80046ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	0a1b      	lsrs	r3, r3, #8
 800469c:	f003 0307 	and.w	r3, r3, #7
 80046a0:	4903      	ldr	r1, [pc, #12]	@ (80046b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046a2:	5ccb      	ldrb	r3, [r1, r3]
 80046a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	40021000 	.word	0x40021000
 80046b0:	0800674c 	.word	0x0800674c

080046b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80046b8:	f7ff ffde 	bl	8004678 <HAL_RCC_GetHCLKFreq>
 80046bc:	4602      	mov	r2, r0
 80046be:	4b05      	ldr	r3, [pc, #20]	@ (80046d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	0adb      	lsrs	r3, r3, #11
 80046c4:	f003 0307 	and.w	r3, r3, #7
 80046c8:	4903      	ldr	r1, [pc, #12]	@ (80046d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046ca:	5ccb      	ldrb	r3, [r1, r3]
 80046cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	40021000 	.word	0x40021000
 80046d8:	0800674c 	.word	0x0800674c

080046dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80046e4:	4b0a      	ldr	r3, [pc, #40]	@ (8004710 <RCC_Delay+0x34>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a0a      	ldr	r2, [pc, #40]	@ (8004714 <RCC_Delay+0x38>)
 80046ea:	fba2 2303 	umull	r2, r3, r2, r3
 80046ee:	0a5b      	lsrs	r3, r3, #9
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	fb02 f303 	mul.w	r3, r2, r3
 80046f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80046f8:	bf00      	nop
  }
  while (Delay --);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	1e5a      	subs	r2, r3, #1
 80046fe:	60fa      	str	r2, [r7, #12]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1f9      	bne.n	80046f8 <RCC_Delay+0x1c>
}
 8004704:	bf00      	nop
 8004706:	bf00      	nop
 8004708:	3714      	adds	r7, #20
 800470a:	46bd      	mov	sp, r7
 800470c:	bc80      	pop	{r7}
 800470e:	4770      	bx	lr
 8004710:	20000000 	.word	0x20000000
 8004714:	10624dd3 	.word	0x10624dd3

08004718 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004720:	2300      	movs	r3, #0
 8004722:	613b      	str	r3, [r7, #16]
 8004724:	2300      	movs	r3, #0
 8004726:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0301 	and.w	r3, r3, #1
 8004730:	2b00      	cmp	r3, #0
 8004732:	d07d      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004734:	2300      	movs	r3, #0
 8004736:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004738:	4b4f      	ldr	r3, [pc, #316]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800473a:	69db      	ldr	r3, [r3, #28]
 800473c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d10d      	bne.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004744:	4b4c      	ldr	r3, [pc, #304]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004746:	69db      	ldr	r3, [r3, #28]
 8004748:	4a4b      	ldr	r2, [pc, #300]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800474a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800474e:	61d3      	str	r3, [r2, #28]
 8004750:	4b49      	ldr	r3, [pc, #292]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004752:	69db      	ldr	r3, [r3, #28]
 8004754:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004758:	60bb      	str	r3, [r7, #8]
 800475a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800475c:	2301      	movs	r3, #1
 800475e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004760:	4b46      	ldr	r3, [pc, #280]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004768:	2b00      	cmp	r3, #0
 800476a:	d118      	bne.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800476c:	4b43      	ldr	r3, [pc, #268]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a42      	ldr	r2, [pc, #264]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004772:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004776:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004778:	f7fd fc6a 	bl	8002050 <HAL_GetTick>
 800477c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800477e:	e008      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004780:	f7fd fc66 	bl	8002050 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b64      	cmp	r3, #100	@ 0x64
 800478c:	d901      	bls.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e06d      	b.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004792:	4b3a      	ldr	r3, [pc, #232]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800479a:	2b00      	cmp	r3, #0
 800479c:	d0f0      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800479e:	4b36      	ldr	r3, [pc, #216]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047a0:	6a1b      	ldr	r3, [r3, #32]
 80047a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047a6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d02e      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d027      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047bc:	4b2e      	ldr	r3, [pc, #184]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047be:	6a1b      	ldr	r3, [r3, #32]
 80047c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047c4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047c6:	4b2e      	ldr	r3, [pc, #184]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80047c8:	2201      	movs	r2, #1
 80047ca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047cc:	4b2c      	ldr	r3, [pc, #176]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80047d2:	4a29      	ldr	r2, [pc, #164]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d014      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e2:	f7fd fc35 	bl	8002050 <HAL_GetTick>
 80047e6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047e8:	e00a      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ea:	f7fd fc31 	bl	8002050 <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d901      	bls.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e036      	b.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004800:	4b1d      	ldr	r3, [pc, #116]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004802:	6a1b      	ldr	r3, [r3, #32]
 8004804:	f003 0302 	and.w	r3, r3, #2
 8004808:	2b00      	cmp	r3, #0
 800480a:	d0ee      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800480c:	4b1a      	ldr	r3, [pc, #104]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	4917      	ldr	r1, [pc, #92]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800481a:	4313      	orrs	r3, r2
 800481c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800481e:	7dfb      	ldrb	r3, [r7, #23]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d105      	bne.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004824:	4b14      	ldr	r3, [pc, #80]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004826:	69db      	ldr	r3, [r3, #28]
 8004828:	4a13      	ldr	r2, [pc, #76]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800482a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800482e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0302 	and.w	r3, r3, #2
 8004838:	2b00      	cmp	r3, #0
 800483a:	d008      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800483c:	4b0e      	ldr	r3, [pc, #56]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	490b      	ldr	r1, [pc, #44]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800484a:	4313      	orrs	r3, r2
 800484c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0310 	and.w	r3, r3, #16
 8004856:	2b00      	cmp	r3, #0
 8004858:	d008      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800485a:	4b07      	ldr	r3, [pc, #28]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	4904      	ldr	r1, [pc, #16]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004868:	4313      	orrs	r3, r2
 800486a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3718      	adds	r7, #24
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	40021000 	.word	0x40021000
 800487c:	40007000 	.word	0x40007000
 8004880:	42420440 	.word	0x42420440

08004884 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b088      	sub	sp, #32
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800488c:	2300      	movs	r3, #0
 800488e:	617b      	str	r3, [r7, #20]
 8004890:	2300      	movs	r3, #0
 8004892:	61fb      	str	r3, [r7, #28]
 8004894:	2300      	movs	r3, #0
 8004896:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004898:	2300      	movs	r3, #0
 800489a:	60fb      	str	r3, [r7, #12]
 800489c:	2300      	movs	r3, #0
 800489e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b10      	cmp	r3, #16
 80048a4:	d00a      	beq.n	80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2b10      	cmp	r3, #16
 80048aa:	f200 808a 	bhi.w	80049c2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d045      	beq.n	8004940 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d075      	beq.n	80049a6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80048ba:	e082      	b.n	80049c2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80048bc:	4b46      	ldr	r3, [pc, #280]	@ (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80048c2:	4b45      	ldr	r3, [pc, #276]	@ (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d07b      	beq.n	80049c6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	0c9b      	lsrs	r3, r3, #18
 80048d2:	f003 030f 	and.w	r3, r3, #15
 80048d6:	4a41      	ldr	r2, [pc, #260]	@ (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80048d8:	5cd3      	ldrb	r3, [r2, r3]
 80048da:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d015      	beq.n	8004912 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80048e6:	4b3c      	ldr	r3, [pc, #240]	@ (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	0c5b      	lsrs	r3, r3, #17
 80048ec:	f003 0301 	and.w	r3, r3, #1
 80048f0:	4a3b      	ldr	r2, [pc, #236]	@ (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80048f2:	5cd3      	ldrb	r3, [r2, r3]
 80048f4:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00d      	beq.n	800491c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004900:	4a38      	ldr	r2, [pc, #224]	@ (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	fbb2 f2f3 	udiv	r2, r2, r3
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	fb02 f303 	mul.w	r3, r2, r3
 800490e:	61fb      	str	r3, [r7, #28]
 8004910:	e004      	b.n	800491c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	4a34      	ldr	r2, [pc, #208]	@ (80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004916:	fb02 f303 	mul.w	r3, r2, r3
 800491a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800491c:	4b2e      	ldr	r3, [pc, #184]	@ (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004924:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004928:	d102      	bne.n	8004930 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	61bb      	str	r3, [r7, #24]
      break;
 800492e:	e04a      	b.n	80049c6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	005b      	lsls	r3, r3, #1
 8004934:	4a2d      	ldr	r2, [pc, #180]	@ (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004936:	fba2 2303 	umull	r2, r3, r2, r3
 800493a:	085b      	lsrs	r3, r3, #1
 800493c:	61bb      	str	r3, [r7, #24]
      break;
 800493e:	e042      	b.n	80049c6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004940:	4b25      	ldr	r3, [pc, #148]	@ (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004942:	6a1b      	ldr	r3, [r3, #32]
 8004944:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800494c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004950:	d108      	bne.n	8004964 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f003 0302 	and.w	r3, r3, #2
 8004958:	2b00      	cmp	r3, #0
 800495a:	d003      	beq.n	8004964 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800495c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004960:	61bb      	str	r3, [r7, #24]
 8004962:	e01f      	b.n	80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800496a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800496e:	d109      	bne.n	8004984 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004970:	4b19      	ldr	r3, [pc, #100]	@ (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004974:	f003 0302 	and.w	r3, r3, #2
 8004978:	2b00      	cmp	r3, #0
 800497a:	d003      	beq.n	8004984 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800497c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004980:	61bb      	str	r3, [r7, #24]
 8004982:	e00f      	b.n	80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800498a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800498e:	d11c      	bne.n	80049ca <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004990:	4b11      	ldr	r3, [pc, #68]	@ (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d016      	beq.n	80049ca <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800499c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80049a0:	61bb      	str	r3, [r7, #24]
      break;
 80049a2:	e012      	b.n	80049ca <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80049a4:	e011      	b.n	80049ca <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80049a6:	f7ff fe85 	bl	80046b4 <HAL_RCC_GetPCLK2Freq>
 80049aa:	4602      	mov	r2, r0
 80049ac:	4b0a      	ldr	r3, [pc, #40]	@ (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	0b9b      	lsrs	r3, r3, #14
 80049b2:	f003 0303 	and.w	r3, r3, #3
 80049b6:	3301      	adds	r3, #1
 80049b8:	005b      	lsls	r3, r3, #1
 80049ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80049be:	61bb      	str	r3, [r7, #24]
      break;
 80049c0:	e004      	b.n	80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80049c2:	bf00      	nop
 80049c4:	e002      	b.n	80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80049c6:	bf00      	nop
 80049c8:	e000      	b.n	80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80049ca:	bf00      	nop
    }
  }
  return (frequency);
 80049cc:	69bb      	ldr	r3, [r7, #24]
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3720      	adds	r7, #32
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	40021000 	.word	0x40021000
 80049dc:	08006788 	.word	0x08006788
 80049e0:	08006798 	.word	0x08006798
 80049e4:	007a1200 	.word	0x007a1200
 80049e8:	003d0900 	.word	0x003d0900
 80049ec:	aaaaaaab 	.word	0xaaaaaaab

080049f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e041      	b.n	8004a86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d106      	bne.n	8004a1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f7fd f800 	bl	8001a1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2202      	movs	r2, #2
 8004a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	3304      	adds	r3, #4
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	4610      	mov	r0, r2
 8004a30:	f000 fab0 	bl	8004f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3708      	adds	r7, #8
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b082      	sub	sp, #8
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d101      	bne.n	8004aa0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e041      	b.n	8004b24 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d106      	bne.n	8004aba <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 f839 	bl	8004b2c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2202      	movs	r2, #2
 8004abe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	3304      	adds	r3, #4
 8004aca:	4619      	mov	r1, r3
 8004acc:	4610      	mov	r0, r2
 8004ace:	f000 fa61 	bl	8004f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3708      	adds	r7, #8
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004b34:	bf00      	nop
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bc80      	pop	{r7}
 8004b3c:	4770      	bx	lr
	...

08004b40 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d109      	bne.n	8004b64 <HAL_TIM_OC_Start+0x24>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	bf14      	ite	ne
 8004b5c:	2301      	movne	r3, #1
 8004b5e:	2300      	moveq	r3, #0
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	e022      	b.n	8004baa <HAL_TIM_OC_Start+0x6a>
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	2b04      	cmp	r3, #4
 8004b68:	d109      	bne.n	8004b7e <HAL_TIM_OC_Start+0x3e>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	bf14      	ite	ne
 8004b76:	2301      	movne	r3, #1
 8004b78:	2300      	moveq	r3, #0
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	e015      	b.n	8004baa <HAL_TIM_OC_Start+0x6a>
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	2b08      	cmp	r3, #8
 8004b82:	d109      	bne.n	8004b98 <HAL_TIM_OC_Start+0x58>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	bf14      	ite	ne
 8004b90:	2301      	movne	r3, #1
 8004b92:	2300      	moveq	r3, #0
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	e008      	b.n	8004baa <HAL_TIM_OC_Start+0x6a>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	bf14      	ite	ne
 8004ba4:	2301      	movne	r3, #1
 8004ba6:	2300      	moveq	r3, #0
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e05e      	b.n	8004c70 <HAL_TIM_OC_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d104      	bne.n	8004bc2 <HAL_TIM_OC_Start+0x82>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004bc0:	e013      	b.n	8004bea <HAL_TIM_OC_Start+0xaa>
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	2b04      	cmp	r3, #4
 8004bc6:	d104      	bne.n	8004bd2 <HAL_TIM_OC_Start+0x92>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004bd0:	e00b      	b.n	8004bea <HAL_TIM_OC_Start+0xaa>
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	2b08      	cmp	r3, #8
 8004bd6:	d104      	bne.n	8004be2 <HAL_TIM_OC_Start+0xa2>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2202      	movs	r2, #2
 8004bdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004be0:	e003      	b.n	8004bea <HAL_TIM_OC_Start+0xaa>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2202      	movs	r2, #2
 8004be6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	6839      	ldr	r1, [r7, #0]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f000 fc4e 	bl	8005494 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a1e      	ldr	r2, [pc, #120]	@ (8004c78 <HAL_TIM_OC_Start+0x138>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d107      	bne.n	8004c12 <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c10:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a18      	ldr	r2, [pc, #96]	@ (8004c78 <HAL_TIM_OC_Start+0x138>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d00e      	beq.n	8004c3a <HAL_TIM_OC_Start+0xfa>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c24:	d009      	beq.n	8004c3a <HAL_TIM_OC_Start+0xfa>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a14      	ldr	r2, [pc, #80]	@ (8004c7c <HAL_TIM_OC_Start+0x13c>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d004      	beq.n	8004c3a <HAL_TIM_OC_Start+0xfa>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a12      	ldr	r2, [pc, #72]	@ (8004c80 <HAL_TIM_OC_Start+0x140>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d111      	bne.n	8004c5e <HAL_TIM_OC_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f003 0307 	and.w	r3, r3, #7
 8004c44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2b06      	cmp	r3, #6
 8004c4a:	d010      	beq.n	8004c6e <HAL_TIM_OC_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f042 0201 	orr.w	r2, r2, #1
 8004c5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c5c:	e007      	b.n	8004c6e <HAL_TIM_OC_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f042 0201 	orr.w	r2, r2, #1
 8004c6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	40012c00 	.word	0x40012c00
 8004c7c:	40000400 	.word	0x40000400
 8004c80:	40000800 	.word	0x40000800

08004c84 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2200      	movs	r2, #0
 8004c94:	6839      	ldr	r1, [r7, #0]
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 fbfc 	bl	8005494 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a29      	ldr	r2, [pc, #164]	@ (8004d48 <HAL_TIM_OC_Stop+0xc4>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d117      	bne.n	8004cd6 <HAL_TIM_OC_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	6a1a      	ldr	r2, [r3, #32]
 8004cac:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10f      	bne.n	8004cd6 <HAL_TIM_OC_Stop+0x52>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	6a1a      	ldr	r2, [r3, #32]
 8004cbc:	f240 4344 	movw	r3, #1092	@ 0x444
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d107      	bne.n	8004cd6 <HAL_TIM_OC_Stop+0x52>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004cd4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	6a1a      	ldr	r2, [r3, #32]
 8004cdc:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10f      	bne.n	8004d06 <HAL_TIM_OC_Stop+0x82>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	6a1a      	ldr	r2, [r3, #32]
 8004cec:	f240 4344 	movw	r3, #1092	@ 0x444
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d107      	bne.n	8004d06 <HAL_TIM_OC_Stop+0x82>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f022 0201 	bic.w	r2, r2, #1
 8004d04:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d104      	bne.n	8004d16 <HAL_TIM_OC_Stop+0x92>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d14:	e013      	b.n	8004d3e <HAL_TIM_OC_Stop+0xba>
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	2b04      	cmp	r3, #4
 8004d1a:	d104      	bne.n	8004d26 <HAL_TIM_OC_Stop+0xa2>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d24:	e00b      	b.n	8004d3e <HAL_TIM_OC_Stop+0xba>
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	2b08      	cmp	r3, #8
 8004d2a:	d104      	bne.n	8004d36 <HAL_TIM_OC_Stop+0xb2>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d34:	e003      	b.n	8004d3e <HAL_TIM_OC_Stop+0xba>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8004d3e:	2300      	movs	r3, #0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3708      	adds	r7, #8
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	40012c00 	.word	0x40012c00

08004d4c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b086      	sub	sp, #24
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d101      	bne.n	8004d6a <HAL_TIM_OC_ConfigChannel+0x1e>
 8004d66:	2302      	movs	r3, #2
 8004d68:	e048      	b.n	8004dfc <HAL_TIM_OC_ConfigChannel+0xb0>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2b0c      	cmp	r3, #12
 8004d76:	d839      	bhi.n	8004dec <HAL_TIM_OC_ConfigChannel+0xa0>
 8004d78:	a201      	add	r2, pc, #4	@ (adr r2, 8004d80 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d7e:	bf00      	nop
 8004d80:	08004db5 	.word	0x08004db5
 8004d84:	08004ded 	.word	0x08004ded
 8004d88:	08004ded 	.word	0x08004ded
 8004d8c:	08004ded 	.word	0x08004ded
 8004d90:	08004dc3 	.word	0x08004dc3
 8004d94:	08004ded 	.word	0x08004ded
 8004d98:	08004ded 	.word	0x08004ded
 8004d9c:	08004ded 	.word	0x08004ded
 8004da0:	08004dd1 	.word	0x08004dd1
 8004da4:	08004ded 	.word	0x08004ded
 8004da8:	08004ded 	.word	0x08004ded
 8004dac:	08004ded 	.word	0x08004ded
 8004db0:	08004ddf 	.word	0x08004ddf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68b9      	ldr	r1, [r7, #8]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 f94c 	bl	8005058 <TIM_OC1_SetConfig>
      break;
 8004dc0:	e017      	b.n	8004df2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68b9      	ldr	r1, [r7, #8]
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f000 f9ab 	bl	8005124 <TIM_OC2_SetConfig>
      break;
 8004dce:	e010      	b.n	8004df2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68b9      	ldr	r1, [r7, #8]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f000 fa0e 	bl	80051f8 <TIM_OC3_SetConfig>
      break;
 8004ddc:	e009      	b.n	8004df2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68b9      	ldr	r1, [r7, #8]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f000 fa71 	bl	80052cc <TIM_OC4_SetConfig>
      break;
 8004dea:	e002      	b.n	8004df2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	75fb      	strb	r3, [r7, #23]
      break;
 8004df0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004dfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3718      	adds	r7, #24
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d101      	bne.n	8004e20 <HAL_TIM_ConfigClockSource+0x1c>
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	e0b4      	b.n	8004f8a <HAL_TIM_ConfigClockSource+0x186>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004e3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68ba      	ldr	r2, [r7, #8]
 8004e4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e58:	d03e      	beq.n	8004ed8 <HAL_TIM_ConfigClockSource+0xd4>
 8004e5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e5e:	f200 8087 	bhi.w	8004f70 <HAL_TIM_ConfigClockSource+0x16c>
 8004e62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e66:	f000 8086 	beq.w	8004f76 <HAL_TIM_ConfigClockSource+0x172>
 8004e6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e6e:	d87f      	bhi.n	8004f70 <HAL_TIM_ConfigClockSource+0x16c>
 8004e70:	2b70      	cmp	r3, #112	@ 0x70
 8004e72:	d01a      	beq.n	8004eaa <HAL_TIM_ConfigClockSource+0xa6>
 8004e74:	2b70      	cmp	r3, #112	@ 0x70
 8004e76:	d87b      	bhi.n	8004f70 <HAL_TIM_ConfigClockSource+0x16c>
 8004e78:	2b60      	cmp	r3, #96	@ 0x60
 8004e7a:	d050      	beq.n	8004f1e <HAL_TIM_ConfigClockSource+0x11a>
 8004e7c:	2b60      	cmp	r3, #96	@ 0x60
 8004e7e:	d877      	bhi.n	8004f70 <HAL_TIM_ConfigClockSource+0x16c>
 8004e80:	2b50      	cmp	r3, #80	@ 0x50
 8004e82:	d03c      	beq.n	8004efe <HAL_TIM_ConfigClockSource+0xfa>
 8004e84:	2b50      	cmp	r3, #80	@ 0x50
 8004e86:	d873      	bhi.n	8004f70 <HAL_TIM_ConfigClockSource+0x16c>
 8004e88:	2b40      	cmp	r3, #64	@ 0x40
 8004e8a:	d058      	beq.n	8004f3e <HAL_TIM_ConfigClockSource+0x13a>
 8004e8c:	2b40      	cmp	r3, #64	@ 0x40
 8004e8e:	d86f      	bhi.n	8004f70 <HAL_TIM_ConfigClockSource+0x16c>
 8004e90:	2b30      	cmp	r3, #48	@ 0x30
 8004e92:	d064      	beq.n	8004f5e <HAL_TIM_ConfigClockSource+0x15a>
 8004e94:	2b30      	cmp	r3, #48	@ 0x30
 8004e96:	d86b      	bhi.n	8004f70 <HAL_TIM_ConfigClockSource+0x16c>
 8004e98:	2b20      	cmp	r3, #32
 8004e9a:	d060      	beq.n	8004f5e <HAL_TIM_ConfigClockSource+0x15a>
 8004e9c:	2b20      	cmp	r3, #32
 8004e9e:	d867      	bhi.n	8004f70 <HAL_TIM_ConfigClockSource+0x16c>
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d05c      	beq.n	8004f5e <HAL_TIM_ConfigClockSource+0x15a>
 8004ea4:	2b10      	cmp	r3, #16
 8004ea6:	d05a      	beq.n	8004f5e <HAL_TIM_ConfigClockSource+0x15a>
 8004ea8:	e062      	b.n	8004f70 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004eba:	f000 facc 	bl	8005456 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004ecc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68ba      	ldr	r2, [r7, #8]
 8004ed4:	609a      	str	r2, [r3, #8]
      break;
 8004ed6:	e04f      	b.n	8004f78 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ee8:	f000 fab5 	bl	8005456 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	689a      	ldr	r2, [r3, #8]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004efa:	609a      	str	r2, [r3, #8]
      break;
 8004efc:	e03c      	b.n	8004f78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	f000 fa2c 	bl	8005368 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2150      	movs	r1, #80	@ 0x50
 8004f16:	4618      	mov	r0, r3
 8004f18:	f000 fa83 	bl	8005422 <TIM_ITRx_SetConfig>
      break;
 8004f1c:	e02c      	b.n	8004f78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	f000 fa4a 	bl	80053c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2160      	movs	r1, #96	@ 0x60
 8004f36:	4618      	mov	r0, r3
 8004f38:	f000 fa73 	bl	8005422 <TIM_ITRx_SetConfig>
      break;
 8004f3c:	e01c      	b.n	8004f78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	f000 fa0c 	bl	8005368 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2140      	movs	r1, #64	@ 0x40
 8004f56:	4618      	mov	r0, r3
 8004f58:	f000 fa63 	bl	8005422 <TIM_ITRx_SetConfig>
      break;
 8004f5c:	e00c      	b.n	8004f78 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4619      	mov	r1, r3
 8004f68:	4610      	mov	r0, r2
 8004f6a:	f000 fa5a 	bl	8005422 <TIM_ITRx_SetConfig>
      break;
 8004f6e:	e003      	b.n	8004f78 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	73fb      	strb	r3, [r7, #15]
      break;
 8004f74:	e000      	b.n	8004f78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3710      	adds	r7, #16
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
	...

08004f94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a29      	ldr	r2, [pc, #164]	@ (800504c <TIM_Base_SetConfig+0xb8>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d00b      	beq.n	8004fc4 <TIM_Base_SetConfig+0x30>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fb2:	d007      	beq.n	8004fc4 <TIM_Base_SetConfig+0x30>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a26      	ldr	r2, [pc, #152]	@ (8005050 <TIM_Base_SetConfig+0xbc>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d003      	beq.n	8004fc4 <TIM_Base_SetConfig+0x30>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a25      	ldr	r2, [pc, #148]	@ (8005054 <TIM_Base_SetConfig+0xc0>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d108      	bne.n	8004fd6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a1c      	ldr	r2, [pc, #112]	@ (800504c <TIM_Base_SetConfig+0xb8>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d00b      	beq.n	8004ff6 <TIM_Base_SetConfig+0x62>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fe4:	d007      	beq.n	8004ff6 <TIM_Base_SetConfig+0x62>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a19      	ldr	r2, [pc, #100]	@ (8005050 <TIM_Base_SetConfig+0xbc>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d003      	beq.n	8004ff6 <TIM_Base_SetConfig+0x62>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a18      	ldr	r2, [pc, #96]	@ (8005054 <TIM_Base_SetConfig+0xc0>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d108      	bne.n	8005008 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ffc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	4313      	orrs	r3, r2
 8005006:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	4313      	orrs	r3, r2
 8005014:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	689a      	ldr	r2, [r3, #8]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a07      	ldr	r2, [pc, #28]	@ (800504c <TIM_Base_SetConfig+0xb8>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d103      	bne.n	800503c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	691a      	ldr	r2, [r3, #16]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	615a      	str	r2, [r3, #20]
}
 8005042:	bf00      	nop
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	bc80      	pop	{r7}
 800504a:	4770      	bx	lr
 800504c:	40012c00 	.word	0x40012c00
 8005050:	40000400 	.word	0x40000400
 8005054:	40000800 	.word	0x40000800

08005058 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005058:	b480      	push	{r7}
 800505a:	b087      	sub	sp, #28
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a1b      	ldr	r3, [r3, #32]
 800506c:	f023 0201 	bic.w	r2, r3, #1
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f023 0303 	bic.w	r3, r3, #3
 800508e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	4313      	orrs	r3, r2
 8005098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f023 0302 	bic.w	r3, r3, #2
 80050a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a1c      	ldr	r2, [pc, #112]	@ (8005120 <TIM_OC1_SetConfig+0xc8>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d10c      	bne.n	80050ce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	f023 0308 	bic.w	r3, r3, #8
 80050ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f023 0304 	bic.w	r3, r3, #4
 80050cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a13      	ldr	r2, [pc, #76]	@ (8005120 <TIM_OC1_SetConfig+0xc8>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d111      	bne.n	80050fa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80050e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	695b      	ldr	r3, [r3, #20]
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	685a      	ldr	r2, [r3, #4]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	621a      	str	r2, [r3, #32]
}
 8005114:	bf00      	nop
 8005116:	371c      	adds	r7, #28
 8005118:	46bd      	mov	sp, r7
 800511a:	bc80      	pop	{r7}
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	40012c00 	.word	0x40012c00

08005124 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005124:	b480      	push	{r7}
 8005126:	b087      	sub	sp, #28
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a1b      	ldr	r3, [r3, #32]
 8005138:	f023 0210 	bic.w	r2, r3, #16
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800515a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	021b      	lsls	r3, r3, #8
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	4313      	orrs	r3, r2
 8005166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	f023 0320 	bic.w	r3, r3, #32
 800516e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	011b      	lsls	r3, r3, #4
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	4313      	orrs	r3, r2
 800517a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a1d      	ldr	r2, [pc, #116]	@ (80051f4 <TIM_OC2_SetConfig+0xd0>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d10d      	bne.n	80051a0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800518a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	011b      	lsls	r3, r3, #4
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	4313      	orrs	r3, r2
 8005196:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800519e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a14      	ldr	r2, [pc, #80]	@ (80051f4 <TIM_OC2_SetConfig+0xd0>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d113      	bne.n	80051d0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80051ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80051b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	695b      	ldr	r3, [r3, #20]
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	693a      	ldr	r2, [r7, #16]
 80051d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	685a      	ldr	r2, [r3, #4]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	697a      	ldr	r2, [r7, #20]
 80051e8:	621a      	str	r2, [r3, #32]
}
 80051ea:	bf00      	nop
 80051ec:	371c      	adds	r7, #28
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bc80      	pop	{r7}
 80051f2:	4770      	bx	lr
 80051f4:	40012c00 	.word	0x40012c00

080051f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b087      	sub	sp, #28
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a1b      	ldr	r3, [r3, #32]
 800520c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	69db      	ldr	r3, [r3, #28]
 800521e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f023 0303 	bic.w	r3, r3, #3
 800522e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	4313      	orrs	r3, r2
 8005238:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005240:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	021b      	lsls	r3, r3, #8
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	4313      	orrs	r3, r2
 800524c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a1d      	ldr	r2, [pc, #116]	@ (80052c8 <TIM_OC3_SetConfig+0xd0>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d10d      	bne.n	8005272 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800525c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	021b      	lsls	r3, r3, #8
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	4313      	orrs	r3, r2
 8005268:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005270:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a14      	ldr	r2, [pc, #80]	@ (80052c8 <TIM_OC3_SetConfig+0xd0>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d113      	bne.n	80052a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005280:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005288:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	011b      	lsls	r3, r3, #4
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	4313      	orrs	r3, r2
 8005294:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	011b      	lsls	r3, r3, #4
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	4313      	orrs	r3, r2
 80052a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	685a      	ldr	r2, [r3, #4]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	621a      	str	r2, [r3, #32]
}
 80052bc:	bf00      	nop
 80052be:	371c      	adds	r7, #28
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bc80      	pop	{r7}
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	40012c00 	.word	0x40012c00

080052cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b087      	sub	sp, #28
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a1b      	ldr	r3, [r3, #32]
 80052da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a1b      	ldr	r3, [r3, #32]
 80052e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	69db      	ldr	r3, [r3, #28]
 80052f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005302:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	021b      	lsls	r3, r3, #8
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	4313      	orrs	r3, r2
 800530e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005316:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	031b      	lsls	r3, r3, #12
 800531e:	693a      	ldr	r2, [r7, #16]
 8005320:	4313      	orrs	r3, r2
 8005322:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a0f      	ldr	r2, [pc, #60]	@ (8005364 <TIM_OC4_SetConfig+0x98>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d109      	bne.n	8005340 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005332:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	695b      	ldr	r3, [r3, #20]
 8005338:	019b      	lsls	r3, r3, #6
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	4313      	orrs	r3, r2
 800533e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	621a      	str	r2, [r3, #32]
}
 800535a:	bf00      	nop
 800535c:	371c      	adds	r7, #28
 800535e:	46bd      	mov	sp, r7
 8005360:	bc80      	pop	{r7}
 8005362:	4770      	bx	lr
 8005364:	40012c00 	.word	0x40012c00

08005368 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005368:	b480      	push	{r7}
 800536a:	b087      	sub	sp, #28
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6a1b      	ldr	r3, [r3, #32]
 8005378:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6a1b      	ldr	r3, [r3, #32]
 800537e:	f023 0201 	bic.w	r2, r3, #1
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	699b      	ldr	r3, [r3, #24]
 800538a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005392:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	011b      	lsls	r3, r3, #4
 8005398:	693a      	ldr	r2, [r7, #16]
 800539a:	4313      	orrs	r3, r2
 800539c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	f023 030a 	bic.w	r3, r3, #10
 80053a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	693a      	ldr	r2, [r7, #16]
 80053b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	621a      	str	r2, [r3, #32]
}
 80053ba:	bf00      	nop
 80053bc:	371c      	adds	r7, #28
 80053be:	46bd      	mov	sp, r7
 80053c0:	bc80      	pop	{r7}
 80053c2:	4770      	bx	lr

080053c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b087      	sub	sp, #28
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6a1b      	ldr	r3, [r3, #32]
 80053d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6a1b      	ldr	r3, [r3, #32]
 80053da:	f023 0210 	bic.w	r2, r3, #16
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80053ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	031b      	lsls	r3, r3, #12
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005400:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	011b      	lsls	r3, r3, #4
 8005406:	697a      	ldr	r2, [r7, #20]
 8005408:	4313      	orrs	r3, r2
 800540a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	621a      	str	r2, [r3, #32]
}
 8005418:	bf00      	nop
 800541a:	371c      	adds	r7, #28
 800541c:	46bd      	mov	sp, r7
 800541e:	bc80      	pop	{r7}
 8005420:	4770      	bx	lr

08005422 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005422:	b480      	push	{r7}
 8005424:	b085      	sub	sp, #20
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
 800542a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005438:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800543a:	683a      	ldr	r2, [r7, #0]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	4313      	orrs	r3, r2
 8005440:	f043 0307 	orr.w	r3, r3, #7
 8005444:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	609a      	str	r2, [r3, #8]
}
 800544c:	bf00      	nop
 800544e:	3714      	adds	r7, #20
 8005450:	46bd      	mov	sp, r7
 8005452:	bc80      	pop	{r7}
 8005454:	4770      	bx	lr

08005456 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005456:	b480      	push	{r7}
 8005458:	b087      	sub	sp, #28
 800545a:	af00      	add	r7, sp, #0
 800545c:	60f8      	str	r0, [r7, #12]
 800545e:	60b9      	str	r1, [r7, #8]
 8005460:	607a      	str	r2, [r7, #4]
 8005462:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005470:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	021a      	lsls	r2, r3, #8
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	431a      	orrs	r2, r3
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	4313      	orrs	r3, r2
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	4313      	orrs	r3, r2
 8005482:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	609a      	str	r2, [r3, #8]
}
 800548a:	bf00      	nop
 800548c:	371c      	adds	r7, #28
 800548e:	46bd      	mov	sp, r7
 8005490:	bc80      	pop	{r7}
 8005492:	4770      	bx	lr

08005494 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005494:	b480      	push	{r7}
 8005496:	b087      	sub	sp, #28
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	f003 031f 	and.w	r3, r3, #31
 80054a6:	2201      	movs	r2, #1
 80054a8:	fa02 f303 	lsl.w	r3, r2, r3
 80054ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6a1a      	ldr	r2, [r3, #32]
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	43db      	mvns	r3, r3
 80054b6:	401a      	ands	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6a1a      	ldr	r2, [r3, #32]
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	f003 031f 	and.w	r3, r3, #31
 80054c6:	6879      	ldr	r1, [r7, #4]
 80054c8:	fa01 f303 	lsl.w	r3, r1, r3
 80054cc:	431a      	orrs	r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	621a      	str	r2, [r3, #32]
}
 80054d2:	bf00      	nop
 80054d4:	371c      	adds	r7, #28
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bc80      	pop	{r7}
 80054da:	4770      	bx	lr

080054dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054dc:	b480      	push	{r7}
 80054de:	b085      	sub	sp, #20
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d101      	bne.n	80054f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054f0:	2302      	movs	r3, #2
 80054f2:	e046      	b.n	8005582 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2202      	movs	r2, #2
 8005500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800551a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	4313      	orrs	r3, r2
 8005524:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a16      	ldr	r2, [pc, #88]	@ (800558c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d00e      	beq.n	8005556 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005540:	d009      	beq.n	8005556 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a12      	ldr	r2, [pc, #72]	@ (8005590 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d004      	beq.n	8005556 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a10      	ldr	r2, [pc, #64]	@ (8005594 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d10c      	bne.n	8005570 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800555c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	68ba      	ldr	r2, [r7, #8]
 8005564:	4313      	orrs	r3, r2
 8005566:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68ba      	ldr	r2, [r7, #8]
 800556e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3714      	adds	r7, #20
 8005586:	46bd      	mov	sp, r7
 8005588:	bc80      	pop	{r7}
 800558a:	4770      	bx	lr
 800558c:	40012c00 	.word	0x40012c00
 8005590:	40000400 	.word	0x40000400
 8005594:	40000800 	.word	0x40000800

08005598 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d101      	bne.n	80055aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e042      	b.n	8005630 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d106      	bne.n	80055c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f7fc fad0 	bl	8001b64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2224      	movs	r2, #36	@ 0x24
 80055c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68da      	ldr	r2, [r3, #12]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80055da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 f9af 	bl	8005940 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	691a      	ldr	r2, [r3, #16]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80055f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	695a      	ldr	r2, [r3, #20]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005600:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68da      	ldr	r2, [r3, #12]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005610:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2220      	movs	r2, #32
 800561c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2220      	movs	r2, #32
 8005624:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	3708      	adds	r7, #8
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b08a      	sub	sp, #40	@ 0x28
 800563c:	af02      	add	r7, sp, #8
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	603b      	str	r3, [r7, #0]
 8005644:	4613      	mov	r3, r2
 8005646:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005648:	2300      	movs	r3, #0
 800564a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005652:	b2db      	uxtb	r3, r3
 8005654:	2b20      	cmp	r3, #32
 8005656:	d16d      	bne.n	8005734 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d002      	beq.n	8005664 <HAL_UART_Transmit+0x2c>
 800565e:	88fb      	ldrh	r3, [r7, #6]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d101      	bne.n	8005668 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e066      	b.n	8005736 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2221      	movs	r2, #33	@ 0x21
 8005672:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005676:	f7fc fceb 	bl	8002050 <HAL_GetTick>
 800567a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	88fa      	ldrh	r2, [r7, #6]
 8005680:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	88fa      	ldrh	r2, [r7, #6]
 8005686:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005690:	d108      	bne.n	80056a4 <HAL_UART_Transmit+0x6c>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d104      	bne.n	80056a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800569a:	2300      	movs	r3, #0
 800569c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	61bb      	str	r3, [r7, #24]
 80056a2:	e003      	b.n	80056ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056a8:	2300      	movs	r3, #0
 80056aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80056ac:	e02a      	b.n	8005704 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	9300      	str	r3, [sp, #0]
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	2200      	movs	r2, #0
 80056b6:	2180      	movs	r1, #128	@ 0x80
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	f000 f8d2 	bl	8005862 <UART_WaitOnFlagUntilTimeout>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d001      	beq.n	80056c8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e036      	b.n	8005736 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d10b      	bne.n	80056e6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	881b      	ldrh	r3, [r3, #0]
 80056d2:	461a      	mov	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	3302      	adds	r3, #2
 80056e2:	61bb      	str	r3, [r7, #24]
 80056e4:	e007      	b.n	80056f6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	781a      	ldrb	r2, [r3, #0]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	3301      	adds	r3, #1
 80056f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	3b01      	subs	r3, #1
 80056fe:	b29a      	uxth	r2, r3
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005708:	b29b      	uxth	r3, r3
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1cf      	bne.n	80056ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	9300      	str	r3, [sp, #0]
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	2200      	movs	r2, #0
 8005716:	2140      	movs	r1, #64	@ 0x40
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	f000 f8a2 	bl	8005862 <UART_WaitOnFlagUntilTimeout>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d001      	beq.n	8005728 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005724:	2303      	movs	r3, #3
 8005726:	e006      	b.n	8005736 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2220      	movs	r2, #32
 800572c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005730:	2300      	movs	r3, #0
 8005732:	e000      	b.n	8005736 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005734:	2302      	movs	r3, #2
  }
}
 8005736:	4618      	mov	r0, r3
 8005738:	3720      	adds	r7, #32
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800573e:	b580      	push	{r7, lr}
 8005740:	b08a      	sub	sp, #40	@ 0x28
 8005742:	af02      	add	r7, sp, #8
 8005744:	60f8      	str	r0, [r7, #12]
 8005746:	60b9      	str	r1, [r7, #8]
 8005748:	603b      	str	r3, [r7, #0]
 800574a:	4613      	mov	r3, r2
 800574c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800574e:	2300      	movs	r3, #0
 8005750:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b20      	cmp	r3, #32
 800575c:	d17c      	bne.n	8005858 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d002      	beq.n	800576a <HAL_UART_Receive+0x2c>
 8005764:	88fb      	ldrh	r3, [r7, #6]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d101      	bne.n	800576e <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e075      	b.n	800585a <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2222      	movs	r2, #34	@ 0x22
 8005778:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005782:	f7fc fc65 	bl	8002050 <HAL_GetTick>
 8005786:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	88fa      	ldrh	r2, [r7, #6]
 800578c:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	88fa      	ldrh	r2, [r7, #6]
 8005792:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800579c:	d108      	bne.n	80057b0 <HAL_UART_Receive+0x72>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d104      	bne.n	80057b0 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 80057a6:	2300      	movs	r3, #0
 80057a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	61bb      	str	r3, [r7, #24]
 80057ae:	e003      	b.n	80057b8 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057b4:	2300      	movs	r3, #0
 80057b6:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80057b8:	e043      	b.n	8005842 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	9300      	str	r3, [sp, #0]
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	2200      	movs	r2, #0
 80057c2:	2120      	movs	r1, #32
 80057c4:	68f8      	ldr	r0, [r7, #12]
 80057c6:	f000 f84c 	bl	8005862 <UART_WaitOnFlagUntilTimeout>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d001      	beq.n	80057d4 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 80057d0:	2303      	movs	r3, #3
 80057d2:	e042      	b.n	800585a <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d10c      	bne.n	80057f4 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057e6:	b29a      	uxth	r2, r3
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	3302      	adds	r3, #2
 80057f0:	61bb      	str	r3, [r7, #24]
 80057f2:	e01f      	b.n	8005834 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057fc:	d007      	beq.n	800580e <HAL_UART_Receive+0xd0>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d10a      	bne.n	800581c <HAL_UART_Receive+0xde>
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d106      	bne.n	800581c <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	b2da      	uxtb	r2, r3
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	701a      	strb	r2, [r3, #0]
 800581a:	e008      	b.n	800582e <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	b2db      	uxtb	r3, r3
 8005824:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005828:	b2da      	uxtb	r2, r3
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	3301      	adds	r3, #1
 8005832:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005838:	b29b      	uxth	r3, r3
 800583a:	3b01      	subs	r3, #1
 800583c:	b29a      	uxth	r2, r3
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005846:	b29b      	uxth	r3, r3
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1b6      	bne.n	80057ba <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2220      	movs	r2, #32
 8005850:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8005854:	2300      	movs	r3, #0
 8005856:	e000      	b.n	800585a <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005858:	2302      	movs	r3, #2
  }
}
 800585a:	4618      	mov	r0, r3
 800585c:	3720      	adds	r7, #32
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}

08005862 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005862:	b580      	push	{r7, lr}
 8005864:	b090      	sub	sp, #64	@ 0x40
 8005866:	af00      	add	r7, sp, #0
 8005868:	60f8      	str	r0, [r7, #12]
 800586a:	60b9      	str	r1, [r7, #8]
 800586c:	603b      	str	r3, [r7, #0]
 800586e:	4613      	mov	r3, r2
 8005870:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005872:	e050      	b.n	8005916 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005874:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800587a:	d04c      	beq.n	8005916 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800587c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800587e:	2b00      	cmp	r3, #0
 8005880:	d007      	beq.n	8005892 <UART_WaitOnFlagUntilTimeout+0x30>
 8005882:	f7fc fbe5 	bl	8002050 <HAL_GetTick>
 8005886:	4602      	mov	r2, r0
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800588e:	429a      	cmp	r2, r3
 8005890:	d241      	bcs.n	8005916 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	330c      	adds	r3, #12
 8005898:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800589c:	e853 3f00 	ldrex	r3, [r3]
 80058a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80058a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80058a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	330c      	adds	r3, #12
 80058b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80058b2:	637a      	str	r2, [r7, #52]	@ 0x34
 80058b4:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80058b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80058ba:	e841 2300 	strex	r3, r2, [r1]
 80058be:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80058c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1e5      	bne.n	8005892 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	3314      	adds	r3, #20
 80058cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	e853 3f00 	ldrex	r3, [r3]
 80058d4:	613b      	str	r3, [r7, #16]
   return(result);
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	f023 0301 	bic.w	r3, r3, #1
 80058dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	3314      	adds	r3, #20
 80058e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80058e6:	623a      	str	r2, [r7, #32]
 80058e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ea:	69f9      	ldr	r1, [r7, #28]
 80058ec:	6a3a      	ldr	r2, [r7, #32]
 80058ee:	e841 2300 	strex	r3, r2, [r1]
 80058f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d1e5      	bne.n	80058c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2220      	movs	r2, #32
 80058fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2220      	movs	r2, #32
 8005906:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e00f      	b.n	8005936 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	4013      	ands	r3, r2
 8005920:	68ba      	ldr	r2, [r7, #8]
 8005922:	429a      	cmp	r2, r3
 8005924:	bf0c      	ite	eq
 8005926:	2301      	moveq	r3, #1
 8005928:	2300      	movne	r3, #0
 800592a:	b2db      	uxtb	r3, r3
 800592c:	461a      	mov	r2, r3
 800592e:	79fb      	ldrb	r3, [r7, #7]
 8005930:	429a      	cmp	r2, r3
 8005932:	d09f      	beq.n	8005874 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3740      	adds	r7, #64	@ 0x40
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
	...

08005940 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	68da      	ldr	r2, [r3, #12]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	430a      	orrs	r2, r1
 800595c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	689a      	ldr	r2, [r3, #8]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	431a      	orrs	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	695b      	ldr	r3, [r3, #20]
 800596c:	4313      	orrs	r3, r2
 800596e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800597a:	f023 030c 	bic.w	r3, r3, #12
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	6812      	ldr	r2, [r2, #0]
 8005982:	68b9      	ldr	r1, [r7, #8]
 8005984:	430b      	orrs	r3, r1
 8005986:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	695b      	ldr	r3, [r3, #20]
 800598e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	699a      	ldr	r2, [r3, #24]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	430a      	orrs	r2, r1
 800599c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a2c      	ldr	r2, [pc, #176]	@ (8005a54 <UART_SetConfig+0x114>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d103      	bne.n	80059b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80059a8:	f7fe fe84 	bl	80046b4 <HAL_RCC_GetPCLK2Freq>
 80059ac:	60f8      	str	r0, [r7, #12]
 80059ae:	e002      	b.n	80059b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80059b0:	f7fe fe6c 	bl	800468c <HAL_RCC_GetPCLK1Freq>
 80059b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	4613      	mov	r3, r2
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	4413      	add	r3, r2
 80059be:	009a      	lsls	r2, r3, #2
 80059c0:	441a      	add	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059cc:	4a22      	ldr	r2, [pc, #136]	@ (8005a58 <UART_SetConfig+0x118>)
 80059ce:	fba2 2303 	umull	r2, r3, r2, r3
 80059d2:	095b      	lsrs	r3, r3, #5
 80059d4:	0119      	lsls	r1, r3, #4
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	4613      	mov	r3, r2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4413      	add	r3, r2
 80059de:	009a      	lsls	r2, r3, #2
 80059e0:	441a      	add	r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80059ec:	4b1a      	ldr	r3, [pc, #104]	@ (8005a58 <UART_SetConfig+0x118>)
 80059ee:	fba3 0302 	umull	r0, r3, r3, r2
 80059f2:	095b      	lsrs	r3, r3, #5
 80059f4:	2064      	movs	r0, #100	@ 0x64
 80059f6:	fb00 f303 	mul.w	r3, r0, r3
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	011b      	lsls	r3, r3, #4
 80059fe:	3332      	adds	r3, #50	@ 0x32
 8005a00:	4a15      	ldr	r2, [pc, #84]	@ (8005a58 <UART_SetConfig+0x118>)
 8005a02:	fba2 2303 	umull	r2, r3, r2, r3
 8005a06:	095b      	lsrs	r3, r3, #5
 8005a08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a0c:	4419      	add	r1, r3
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	4613      	mov	r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	4413      	add	r3, r2
 8005a16:	009a      	lsls	r2, r3, #2
 8005a18:	441a      	add	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a24:	4b0c      	ldr	r3, [pc, #48]	@ (8005a58 <UART_SetConfig+0x118>)
 8005a26:	fba3 0302 	umull	r0, r3, r3, r2
 8005a2a:	095b      	lsrs	r3, r3, #5
 8005a2c:	2064      	movs	r0, #100	@ 0x64
 8005a2e:	fb00 f303 	mul.w	r3, r0, r3
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	011b      	lsls	r3, r3, #4
 8005a36:	3332      	adds	r3, #50	@ 0x32
 8005a38:	4a07      	ldr	r2, [pc, #28]	@ (8005a58 <UART_SetConfig+0x118>)
 8005a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a3e:	095b      	lsrs	r3, r3, #5
 8005a40:	f003 020f 	and.w	r2, r3, #15
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	440a      	add	r2, r1
 8005a4a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005a4c:	bf00      	nop
 8005a4e:	3710      	adds	r7, #16
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	40013800 	.word	0x40013800
 8005a58:	51eb851f 	.word	0x51eb851f

08005a5c <atoi>:
 8005a5c:	220a      	movs	r2, #10
 8005a5e:	2100      	movs	r1, #0
 8005a60:	f000 b87a 	b.w	8005b58 <strtol>

08005a64 <_strtol_l.constprop.0>:
 8005a64:	2b24      	cmp	r3, #36	@ 0x24
 8005a66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a6a:	4686      	mov	lr, r0
 8005a6c:	4690      	mov	r8, r2
 8005a6e:	d801      	bhi.n	8005a74 <_strtol_l.constprop.0+0x10>
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d106      	bne.n	8005a82 <_strtol_l.constprop.0+0x1e>
 8005a74:	f000 f8a2 	bl	8005bbc <__errno>
 8005a78:	2316      	movs	r3, #22
 8005a7a:	6003      	str	r3, [r0, #0]
 8005a7c:	2000      	movs	r0, #0
 8005a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a82:	460d      	mov	r5, r1
 8005a84:	4833      	ldr	r0, [pc, #204]	@ (8005b54 <_strtol_l.constprop.0+0xf0>)
 8005a86:	462a      	mov	r2, r5
 8005a88:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005a8c:	5d06      	ldrb	r6, [r0, r4]
 8005a8e:	f016 0608 	ands.w	r6, r6, #8
 8005a92:	d1f8      	bne.n	8005a86 <_strtol_l.constprop.0+0x22>
 8005a94:	2c2d      	cmp	r4, #45	@ 0x2d
 8005a96:	d12d      	bne.n	8005af4 <_strtol_l.constprop.0+0x90>
 8005a98:	2601      	movs	r6, #1
 8005a9a:	782c      	ldrb	r4, [r5, #0]
 8005a9c:	1c95      	adds	r5, r2, #2
 8005a9e:	f033 0210 	bics.w	r2, r3, #16
 8005aa2:	d109      	bne.n	8005ab8 <_strtol_l.constprop.0+0x54>
 8005aa4:	2c30      	cmp	r4, #48	@ 0x30
 8005aa6:	d12a      	bne.n	8005afe <_strtol_l.constprop.0+0x9a>
 8005aa8:	782a      	ldrb	r2, [r5, #0]
 8005aaa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005aae:	2a58      	cmp	r2, #88	@ 0x58
 8005ab0:	d125      	bne.n	8005afe <_strtol_l.constprop.0+0x9a>
 8005ab2:	2310      	movs	r3, #16
 8005ab4:	786c      	ldrb	r4, [r5, #1]
 8005ab6:	3502      	adds	r5, #2
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005abe:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005ac2:	fbbc f9f3 	udiv	r9, ip, r3
 8005ac6:	4610      	mov	r0, r2
 8005ac8:	fb03 ca19 	mls	sl, r3, r9, ip
 8005acc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005ad0:	2f09      	cmp	r7, #9
 8005ad2:	d81b      	bhi.n	8005b0c <_strtol_l.constprop.0+0xa8>
 8005ad4:	463c      	mov	r4, r7
 8005ad6:	42a3      	cmp	r3, r4
 8005ad8:	dd27      	ble.n	8005b2a <_strtol_l.constprop.0+0xc6>
 8005ada:	1c57      	adds	r7, r2, #1
 8005adc:	d007      	beq.n	8005aee <_strtol_l.constprop.0+0x8a>
 8005ade:	4581      	cmp	r9, r0
 8005ae0:	d320      	bcc.n	8005b24 <_strtol_l.constprop.0+0xc0>
 8005ae2:	d101      	bne.n	8005ae8 <_strtol_l.constprop.0+0x84>
 8005ae4:	45a2      	cmp	sl, r4
 8005ae6:	db1d      	blt.n	8005b24 <_strtol_l.constprop.0+0xc0>
 8005ae8:	2201      	movs	r2, #1
 8005aea:	fb00 4003 	mla	r0, r0, r3, r4
 8005aee:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005af2:	e7eb      	b.n	8005acc <_strtol_l.constprop.0+0x68>
 8005af4:	2c2b      	cmp	r4, #43	@ 0x2b
 8005af6:	bf04      	itt	eq
 8005af8:	782c      	ldrbeq	r4, [r5, #0]
 8005afa:	1c95      	addeq	r5, r2, #2
 8005afc:	e7cf      	b.n	8005a9e <_strtol_l.constprop.0+0x3a>
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1da      	bne.n	8005ab8 <_strtol_l.constprop.0+0x54>
 8005b02:	2c30      	cmp	r4, #48	@ 0x30
 8005b04:	bf0c      	ite	eq
 8005b06:	2308      	moveq	r3, #8
 8005b08:	230a      	movne	r3, #10
 8005b0a:	e7d5      	b.n	8005ab8 <_strtol_l.constprop.0+0x54>
 8005b0c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005b10:	2f19      	cmp	r7, #25
 8005b12:	d801      	bhi.n	8005b18 <_strtol_l.constprop.0+0xb4>
 8005b14:	3c37      	subs	r4, #55	@ 0x37
 8005b16:	e7de      	b.n	8005ad6 <_strtol_l.constprop.0+0x72>
 8005b18:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005b1c:	2f19      	cmp	r7, #25
 8005b1e:	d804      	bhi.n	8005b2a <_strtol_l.constprop.0+0xc6>
 8005b20:	3c57      	subs	r4, #87	@ 0x57
 8005b22:	e7d8      	b.n	8005ad6 <_strtol_l.constprop.0+0x72>
 8005b24:	f04f 32ff 	mov.w	r2, #4294967295
 8005b28:	e7e1      	b.n	8005aee <_strtol_l.constprop.0+0x8a>
 8005b2a:	1c53      	adds	r3, r2, #1
 8005b2c:	d108      	bne.n	8005b40 <_strtol_l.constprop.0+0xdc>
 8005b2e:	2322      	movs	r3, #34	@ 0x22
 8005b30:	4660      	mov	r0, ip
 8005b32:	f8ce 3000 	str.w	r3, [lr]
 8005b36:	f1b8 0f00 	cmp.w	r8, #0
 8005b3a:	d0a0      	beq.n	8005a7e <_strtol_l.constprop.0+0x1a>
 8005b3c:	1e69      	subs	r1, r5, #1
 8005b3e:	e006      	b.n	8005b4e <_strtol_l.constprop.0+0xea>
 8005b40:	b106      	cbz	r6, 8005b44 <_strtol_l.constprop.0+0xe0>
 8005b42:	4240      	negs	r0, r0
 8005b44:	f1b8 0f00 	cmp.w	r8, #0
 8005b48:	d099      	beq.n	8005a7e <_strtol_l.constprop.0+0x1a>
 8005b4a:	2a00      	cmp	r2, #0
 8005b4c:	d1f6      	bne.n	8005b3c <_strtol_l.constprop.0+0xd8>
 8005b4e:	f8c8 1000 	str.w	r1, [r8]
 8005b52:	e794      	b.n	8005a7e <_strtol_l.constprop.0+0x1a>
 8005b54:	0800679b 	.word	0x0800679b

08005b58 <strtol>:
 8005b58:	4613      	mov	r3, r2
 8005b5a:	460a      	mov	r2, r1
 8005b5c:	4601      	mov	r1, r0
 8005b5e:	4802      	ldr	r0, [pc, #8]	@ (8005b68 <strtol+0x10>)
 8005b60:	6800      	ldr	r0, [r0, #0]
 8005b62:	f7ff bf7f 	b.w	8005a64 <_strtol_l.constprop.0>
 8005b66:	bf00      	nop
 8005b68:	2000000c 	.word	0x2000000c

08005b6c <siprintf>:
 8005b6c:	b40e      	push	{r1, r2, r3}
 8005b6e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005b72:	b500      	push	{lr}
 8005b74:	b09c      	sub	sp, #112	@ 0x70
 8005b76:	ab1d      	add	r3, sp, #116	@ 0x74
 8005b78:	9002      	str	r0, [sp, #8]
 8005b7a:	9006      	str	r0, [sp, #24]
 8005b7c:	9107      	str	r1, [sp, #28]
 8005b7e:	9104      	str	r1, [sp, #16]
 8005b80:	4808      	ldr	r0, [pc, #32]	@ (8005ba4 <siprintf+0x38>)
 8005b82:	4909      	ldr	r1, [pc, #36]	@ (8005ba8 <siprintf+0x3c>)
 8005b84:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b88:	9105      	str	r1, [sp, #20]
 8005b8a:	6800      	ldr	r0, [r0, #0]
 8005b8c:	a902      	add	r1, sp, #8
 8005b8e:	9301      	str	r3, [sp, #4]
 8005b90:	f000 f9a0 	bl	8005ed4 <_svfiprintf_r>
 8005b94:	2200      	movs	r2, #0
 8005b96:	9b02      	ldr	r3, [sp, #8]
 8005b98:	701a      	strb	r2, [r3, #0]
 8005b9a:	b01c      	add	sp, #112	@ 0x70
 8005b9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ba0:	b003      	add	sp, #12
 8005ba2:	4770      	bx	lr
 8005ba4:	2000000c 	.word	0x2000000c
 8005ba8:	ffff0208 	.word	0xffff0208

08005bac <memset>:
 8005bac:	4603      	mov	r3, r0
 8005bae:	4402      	add	r2, r0
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d100      	bne.n	8005bb6 <memset+0xa>
 8005bb4:	4770      	bx	lr
 8005bb6:	f803 1b01 	strb.w	r1, [r3], #1
 8005bba:	e7f9      	b.n	8005bb0 <memset+0x4>

08005bbc <__errno>:
 8005bbc:	4b01      	ldr	r3, [pc, #4]	@ (8005bc4 <__errno+0x8>)
 8005bbe:	6818      	ldr	r0, [r3, #0]
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	2000000c 	.word	0x2000000c

08005bc8 <__libc_init_array>:
 8005bc8:	b570      	push	{r4, r5, r6, lr}
 8005bca:	2600      	movs	r6, #0
 8005bcc:	4d0c      	ldr	r5, [pc, #48]	@ (8005c00 <__libc_init_array+0x38>)
 8005bce:	4c0d      	ldr	r4, [pc, #52]	@ (8005c04 <__libc_init_array+0x3c>)
 8005bd0:	1b64      	subs	r4, r4, r5
 8005bd2:	10a4      	asrs	r4, r4, #2
 8005bd4:	42a6      	cmp	r6, r4
 8005bd6:	d109      	bne.n	8005bec <__libc_init_array+0x24>
 8005bd8:	f000 fc78 	bl	80064cc <_init>
 8005bdc:	2600      	movs	r6, #0
 8005bde:	4d0a      	ldr	r5, [pc, #40]	@ (8005c08 <__libc_init_array+0x40>)
 8005be0:	4c0a      	ldr	r4, [pc, #40]	@ (8005c0c <__libc_init_array+0x44>)
 8005be2:	1b64      	subs	r4, r4, r5
 8005be4:	10a4      	asrs	r4, r4, #2
 8005be6:	42a6      	cmp	r6, r4
 8005be8:	d105      	bne.n	8005bf6 <__libc_init_array+0x2e>
 8005bea:	bd70      	pop	{r4, r5, r6, pc}
 8005bec:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bf0:	4798      	blx	r3
 8005bf2:	3601      	adds	r6, #1
 8005bf4:	e7ee      	b.n	8005bd4 <__libc_init_array+0xc>
 8005bf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bfa:	4798      	blx	r3
 8005bfc:	3601      	adds	r6, #1
 8005bfe:	e7f2      	b.n	8005be6 <__libc_init_array+0x1e>
 8005c00:	080068d8 	.word	0x080068d8
 8005c04:	080068d8 	.word	0x080068d8
 8005c08:	080068d8 	.word	0x080068d8
 8005c0c:	080068dc 	.word	0x080068dc

08005c10 <__retarget_lock_acquire_recursive>:
 8005c10:	4770      	bx	lr

08005c12 <__retarget_lock_release_recursive>:
 8005c12:	4770      	bx	lr

08005c14 <memcpy>:
 8005c14:	440a      	add	r2, r1
 8005c16:	4291      	cmp	r1, r2
 8005c18:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c1c:	d100      	bne.n	8005c20 <memcpy+0xc>
 8005c1e:	4770      	bx	lr
 8005c20:	b510      	push	{r4, lr}
 8005c22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c26:	4291      	cmp	r1, r2
 8005c28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c2c:	d1f9      	bne.n	8005c22 <memcpy+0xe>
 8005c2e:	bd10      	pop	{r4, pc}

08005c30 <_free_r>:
 8005c30:	b538      	push	{r3, r4, r5, lr}
 8005c32:	4605      	mov	r5, r0
 8005c34:	2900      	cmp	r1, #0
 8005c36:	d040      	beq.n	8005cba <_free_r+0x8a>
 8005c38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c3c:	1f0c      	subs	r4, r1, #4
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	bfb8      	it	lt
 8005c42:	18e4      	addlt	r4, r4, r3
 8005c44:	f000 f8de 	bl	8005e04 <__malloc_lock>
 8005c48:	4a1c      	ldr	r2, [pc, #112]	@ (8005cbc <_free_r+0x8c>)
 8005c4a:	6813      	ldr	r3, [r2, #0]
 8005c4c:	b933      	cbnz	r3, 8005c5c <_free_r+0x2c>
 8005c4e:	6063      	str	r3, [r4, #4]
 8005c50:	6014      	str	r4, [r2, #0]
 8005c52:	4628      	mov	r0, r5
 8005c54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c58:	f000 b8da 	b.w	8005e10 <__malloc_unlock>
 8005c5c:	42a3      	cmp	r3, r4
 8005c5e:	d908      	bls.n	8005c72 <_free_r+0x42>
 8005c60:	6820      	ldr	r0, [r4, #0]
 8005c62:	1821      	adds	r1, r4, r0
 8005c64:	428b      	cmp	r3, r1
 8005c66:	bf01      	itttt	eq
 8005c68:	6819      	ldreq	r1, [r3, #0]
 8005c6a:	685b      	ldreq	r3, [r3, #4]
 8005c6c:	1809      	addeq	r1, r1, r0
 8005c6e:	6021      	streq	r1, [r4, #0]
 8005c70:	e7ed      	b.n	8005c4e <_free_r+0x1e>
 8005c72:	461a      	mov	r2, r3
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	b10b      	cbz	r3, 8005c7c <_free_r+0x4c>
 8005c78:	42a3      	cmp	r3, r4
 8005c7a:	d9fa      	bls.n	8005c72 <_free_r+0x42>
 8005c7c:	6811      	ldr	r1, [r2, #0]
 8005c7e:	1850      	adds	r0, r2, r1
 8005c80:	42a0      	cmp	r0, r4
 8005c82:	d10b      	bne.n	8005c9c <_free_r+0x6c>
 8005c84:	6820      	ldr	r0, [r4, #0]
 8005c86:	4401      	add	r1, r0
 8005c88:	1850      	adds	r0, r2, r1
 8005c8a:	4283      	cmp	r3, r0
 8005c8c:	6011      	str	r1, [r2, #0]
 8005c8e:	d1e0      	bne.n	8005c52 <_free_r+0x22>
 8005c90:	6818      	ldr	r0, [r3, #0]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	4408      	add	r0, r1
 8005c96:	6010      	str	r0, [r2, #0]
 8005c98:	6053      	str	r3, [r2, #4]
 8005c9a:	e7da      	b.n	8005c52 <_free_r+0x22>
 8005c9c:	d902      	bls.n	8005ca4 <_free_r+0x74>
 8005c9e:	230c      	movs	r3, #12
 8005ca0:	602b      	str	r3, [r5, #0]
 8005ca2:	e7d6      	b.n	8005c52 <_free_r+0x22>
 8005ca4:	6820      	ldr	r0, [r4, #0]
 8005ca6:	1821      	adds	r1, r4, r0
 8005ca8:	428b      	cmp	r3, r1
 8005caa:	bf01      	itttt	eq
 8005cac:	6819      	ldreq	r1, [r3, #0]
 8005cae:	685b      	ldreq	r3, [r3, #4]
 8005cb0:	1809      	addeq	r1, r1, r0
 8005cb2:	6021      	streq	r1, [r4, #0]
 8005cb4:	6063      	str	r3, [r4, #4]
 8005cb6:	6054      	str	r4, [r2, #4]
 8005cb8:	e7cb      	b.n	8005c52 <_free_r+0x22>
 8005cba:	bd38      	pop	{r3, r4, r5, pc}
 8005cbc:	200003a4 	.word	0x200003a4

08005cc0 <sbrk_aligned>:
 8005cc0:	b570      	push	{r4, r5, r6, lr}
 8005cc2:	4e0f      	ldr	r6, [pc, #60]	@ (8005d00 <sbrk_aligned+0x40>)
 8005cc4:	460c      	mov	r4, r1
 8005cc6:	6831      	ldr	r1, [r6, #0]
 8005cc8:	4605      	mov	r5, r0
 8005cca:	b911      	cbnz	r1, 8005cd2 <sbrk_aligned+0x12>
 8005ccc:	f000 fbaa 	bl	8006424 <_sbrk_r>
 8005cd0:	6030      	str	r0, [r6, #0]
 8005cd2:	4621      	mov	r1, r4
 8005cd4:	4628      	mov	r0, r5
 8005cd6:	f000 fba5 	bl	8006424 <_sbrk_r>
 8005cda:	1c43      	adds	r3, r0, #1
 8005cdc:	d103      	bne.n	8005ce6 <sbrk_aligned+0x26>
 8005cde:	f04f 34ff 	mov.w	r4, #4294967295
 8005ce2:	4620      	mov	r0, r4
 8005ce4:	bd70      	pop	{r4, r5, r6, pc}
 8005ce6:	1cc4      	adds	r4, r0, #3
 8005ce8:	f024 0403 	bic.w	r4, r4, #3
 8005cec:	42a0      	cmp	r0, r4
 8005cee:	d0f8      	beq.n	8005ce2 <sbrk_aligned+0x22>
 8005cf0:	1a21      	subs	r1, r4, r0
 8005cf2:	4628      	mov	r0, r5
 8005cf4:	f000 fb96 	bl	8006424 <_sbrk_r>
 8005cf8:	3001      	adds	r0, #1
 8005cfa:	d1f2      	bne.n	8005ce2 <sbrk_aligned+0x22>
 8005cfc:	e7ef      	b.n	8005cde <sbrk_aligned+0x1e>
 8005cfe:	bf00      	nop
 8005d00:	200003a0 	.word	0x200003a0

08005d04 <_malloc_r>:
 8005d04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d08:	1ccd      	adds	r5, r1, #3
 8005d0a:	f025 0503 	bic.w	r5, r5, #3
 8005d0e:	3508      	adds	r5, #8
 8005d10:	2d0c      	cmp	r5, #12
 8005d12:	bf38      	it	cc
 8005d14:	250c      	movcc	r5, #12
 8005d16:	2d00      	cmp	r5, #0
 8005d18:	4606      	mov	r6, r0
 8005d1a:	db01      	blt.n	8005d20 <_malloc_r+0x1c>
 8005d1c:	42a9      	cmp	r1, r5
 8005d1e:	d904      	bls.n	8005d2a <_malloc_r+0x26>
 8005d20:	230c      	movs	r3, #12
 8005d22:	6033      	str	r3, [r6, #0]
 8005d24:	2000      	movs	r0, #0
 8005d26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005e00 <_malloc_r+0xfc>
 8005d2e:	f000 f869 	bl	8005e04 <__malloc_lock>
 8005d32:	f8d8 3000 	ldr.w	r3, [r8]
 8005d36:	461c      	mov	r4, r3
 8005d38:	bb44      	cbnz	r4, 8005d8c <_malloc_r+0x88>
 8005d3a:	4629      	mov	r1, r5
 8005d3c:	4630      	mov	r0, r6
 8005d3e:	f7ff ffbf 	bl	8005cc0 <sbrk_aligned>
 8005d42:	1c43      	adds	r3, r0, #1
 8005d44:	4604      	mov	r4, r0
 8005d46:	d158      	bne.n	8005dfa <_malloc_r+0xf6>
 8005d48:	f8d8 4000 	ldr.w	r4, [r8]
 8005d4c:	4627      	mov	r7, r4
 8005d4e:	2f00      	cmp	r7, #0
 8005d50:	d143      	bne.n	8005dda <_malloc_r+0xd6>
 8005d52:	2c00      	cmp	r4, #0
 8005d54:	d04b      	beq.n	8005dee <_malloc_r+0xea>
 8005d56:	6823      	ldr	r3, [r4, #0]
 8005d58:	4639      	mov	r1, r7
 8005d5a:	4630      	mov	r0, r6
 8005d5c:	eb04 0903 	add.w	r9, r4, r3
 8005d60:	f000 fb60 	bl	8006424 <_sbrk_r>
 8005d64:	4581      	cmp	r9, r0
 8005d66:	d142      	bne.n	8005dee <_malloc_r+0xea>
 8005d68:	6821      	ldr	r1, [r4, #0]
 8005d6a:	4630      	mov	r0, r6
 8005d6c:	1a6d      	subs	r5, r5, r1
 8005d6e:	4629      	mov	r1, r5
 8005d70:	f7ff ffa6 	bl	8005cc0 <sbrk_aligned>
 8005d74:	3001      	adds	r0, #1
 8005d76:	d03a      	beq.n	8005dee <_malloc_r+0xea>
 8005d78:	6823      	ldr	r3, [r4, #0]
 8005d7a:	442b      	add	r3, r5
 8005d7c:	6023      	str	r3, [r4, #0]
 8005d7e:	f8d8 3000 	ldr.w	r3, [r8]
 8005d82:	685a      	ldr	r2, [r3, #4]
 8005d84:	bb62      	cbnz	r2, 8005de0 <_malloc_r+0xdc>
 8005d86:	f8c8 7000 	str.w	r7, [r8]
 8005d8a:	e00f      	b.n	8005dac <_malloc_r+0xa8>
 8005d8c:	6822      	ldr	r2, [r4, #0]
 8005d8e:	1b52      	subs	r2, r2, r5
 8005d90:	d420      	bmi.n	8005dd4 <_malloc_r+0xd0>
 8005d92:	2a0b      	cmp	r2, #11
 8005d94:	d917      	bls.n	8005dc6 <_malloc_r+0xc2>
 8005d96:	1961      	adds	r1, r4, r5
 8005d98:	42a3      	cmp	r3, r4
 8005d9a:	6025      	str	r5, [r4, #0]
 8005d9c:	bf18      	it	ne
 8005d9e:	6059      	strne	r1, [r3, #4]
 8005da0:	6863      	ldr	r3, [r4, #4]
 8005da2:	bf08      	it	eq
 8005da4:	f8c8 1000 	streq.w	r1, [r8]
 8005da8:	5162      	str	r2, [r4, r5]
 8005daa:	604b      	str	r3, [r1, #4]
 8005dac:	4630      	mov	r0, r6
 8005dae:	f000 f82f 	bl	8005e10 <__malloc_unlock>
 8005db2:	f104 000b 	add.w	r0, r4, #11
 8005db6:	1d23      	adds	r3, r4, #4
 8005db8:	f020 0007 	bic.w	r0, r0, #7
 8005dbc:	1ac2      	subs	r2, r0, r3
 8005dbe:	bf1c      	itt	ne
 8005dc0:	1a1b      	subne	r3, r3, r0
 8005dc2:	50a3      	strne	r3, [r4, r2]
 8005dc4:	e7af      	b.n	8005d26 <_malloc_r+0x22>
 8005dc6:	6862      	ldr	r2, [r4, #4]
 8005dc8:	42a3      	cmp	r3, r4
 8005dca:	bf0c      	ite	eq
 8005dcc:	f8c8 2000 	streq.w	r2, [r8]
 8005dd0:	605a      	strne	r2, [r3, #4]
 8005dd2:	e7eb      	b.n	8005dac <_malloc_r+0xa8>
 8005dd4:	4623      	mov	r3, r4
 8005dd6:	6864      	ldr	r4, [r4, #4]
 8005dd8:	e7ae      	b.n	8005d38 <_malloc_r+0x34>
 8005dda:	463c      	mov	r4, r7
 8005ddc:	687f      	ldr	r7, [r7, #4]
 8005dde:	e7b6      	b.n	8005d4e <_malloc_r+0x4a>
 8005de0:	461a      	mov	r2, r3
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	42a3      	cmp	r3, r4
 8005de6:	d1fb      	bne.n	8005de0 <_malloc_r+0xdc>
 8005de8:	2300      	movs	r3, #0
 8005dea:	6053      	str	r3, [r2, #4]
 8005dec:	e7de      	b.n	8005dac <_malloc_r+0xa8>
 8005dee:	230c      	movs	r3, #12
 8005df0:	4630      	mov	r0, r6
 8005df2:	6033      	str	r3, [r6, #0]
 8005df4:	f000 f80c 	bl	8005e10 <__malloc_unlock>
 8005df8:	e794      	b.n	8005d24 <_malloc_r+0x20>
 8005dfa:	6005      	str	r5, [r0, #0]
 8005dfc:	e7d6      	b.n	8005dac <_malloc_r+0xa8>
 8005dfe:	bf00      	nop
 8005e00:	200003a4 	.word	0x200003a4

08005e04 <__malloc_lock>:
 8005e04:	4801      	ldr	r0, [pc, #4]	@ (8005e0c <__malloc_lock+0x8>)
 8005e06:	f7ff bf03 	b.w	8005c10 <__retarget_lock_acquire_recursive>
 8005e0a:	bf00      	nop
 8005e0c:	2000039c 	.word	0x2000039c

08005e10 <__malloc_unlock>:
 8005e10:	4801      	ldr	r0, [pc, #4]	@ (8005e18 <__malloc_unlock+0x8>)
 8005e12:	f7ff befe 	b.w	8005c12 <__retarget_lock_release_recursive>
 8005e16:	bf00      	nop
 8005e18:	2000039c 	.word	0x2000039c

08005e1c <__ssputs_r>:
 8005e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e20:	461f      	mov	r7, r3
 8005e22:	688e      	ldr	r6, [r1, #8]
 8005e24:	4682      	mov	sl, r0
 8005e26:	42be      	cmp	r6, r7
 8005e28:	460c      	mov	r4, r1
 8005e2a:	4690      	mov	r8, r2
 8005e2c:	680b      	ldr	r3, [r1, #0]
 8005e2e:	d82d      	bhi.n	8005e8c <__ssputs_r+0x70>
 8005e30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005e34:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005e38:	d026      	beq.n	8005e88 <__ssputs_r+0x6c>
 8005e3a:	6965      	ldr	r5, [r4, #20]
 8005e3c:	6909      	ldr	r1, [r1, #16]
 8005e3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e42:	eba3 0901 	sub.w	r9, r3, r1
 8005e46:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005e4a:	1c7b      	adds	r3, r7, #1
 8005e4c:	444b      	add	r3, r9
 8005e4e:	106d      	asrs	r5, r5, #1
 8005e50:	429d      	cmp	r5, r3
 8005e52:	bf38      	it	cc
 8005e54:	461d      	movcc	r5, r3
 8005e56:	0553      	lsls	r3, r2, #21
 8005e58:	d527      	bpl.n	8005eaa <__ssputs_r+0x8e>
 8005e5a:	4629      	mov	r1, r5
 8005e5c:	f7ff ff52 	bl	8005d04 <_malloc_r>
 8005e60:	4606      	mov	r6, r0
 8005e62:	b360      	cbz	r0, 8005ebe <__ssputs_r+0xa2>
 8005e64:	464a      	mov	r2, r9
 8005e66:	6921      	ldr	r1, [r4, #16]
 8005e68:	f7ff fed4 	bl	8005c14 <memcpy>
 8005e6c:	89a3      	ldrh	r3, [r4, #12]
 8005e6e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005e72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e76:	81a3      	strh	r3, [r4, #12]
 8005e78:	6126      	str	r6, [r4, #16]
 8005e7a:	444e      	add	r6, r9
 8005e7c:	6026      	str	r6, [r4, #0]
 8005e7e:	463e      	mov	r6, r7
 8005e80:	6165      	str	r5, [r4, #20]
 8005e82:	eba5 0509 	sub.w	r5, r5, r9
 8005e86:	60a5      	str	r5, [r4, #8]
 8005e88:	42be      	cmp	r6, r7
 8005e8a:	d900      	bls.n	8005e8e <__ssputs_r+0x72>
 8005e8c:	463e      	mov	r6, r7
 8005e8e:	4632      	mov	r2, r6
 8005e90:	4641      	mov	r1, r8
 8005e92:	6820      	ldr	r0, [r4, #0]
 8005e94:	f000 faac 	bl	80063f0 <memmove>
 8005e98:	2000      	movs	r0, #0
 8005e9a:	68a3      	ldr	r3, [r4, #8]
 8005e9c:	1b9b      	subs	r3, r3, r6
 8005e9e:	60a3      	str	r3, [r4, #8]
 8005ea0:	6823      	ldr	r3, [r4, #0]
 8005ea2:	4433      	add	r3, r6
 8005ea4:	6023      	str	r3, [r4, #0]
 8005ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eaa:	462a      	mov	r2, r5
 8005eac:	f000 fad8 	bl	8006460 <_realloc_r>
 8005eb0:	4606      	mov	r6, r0
 8005eb2:	2800      	cmp	r0, #0
 8005eb4:	d1e0      	bne.n	8005e78 <__ssputs_r+0x5c>
 8005eb6:	4650      	mov	r0, sl
 8005eb8:	6921      	ldr	r1, [r4, #16]
 8005eba:	f7ff feb9 	bl	8005c30 <_free_r>
 8005ebe:	230c      	movs	r3, #12
 8005ec0:	f8ca 3000 	str.w	r3, [sl]
 8005ec4:	89a3      	ldrh	r3, [r4, #12]
 8005ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8005eca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ece:	81a3      	strh	r3, [r4, #12]
 8005ed0:	e7e9      	b.n	8005ea6 <__ssputs_r+0x8a>
	...

08005ed4 <_svfiprintf_r>:
 8005ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ed8:	4698      	mov	r8, r3
 8005eda:	898b      	ldrh	r3, [r1, #12]
 8005edc:	4607      	mov	r7, r0
 8005ede:	061b      	lsls	r3, r3, #24
 8005ee0:	460d      	mov	r5, r1
 8005ee2:	4614      	mov	r4, r2
 8005ee4:	b09d      	sub	sp, #116	@ 0x74
 8005ee6:	d510      	bpl.n	8005f0a <_svfiprintf_r+0x36>
 8005ee8:	690b      	ldr	r3, [r1, #16]
 8005eea:	b973      	cbnz	r3, 8005f0a <_svfiprintf_r+0x36>
 8005eec:	2140      	movs	r1, #64	@ 0x40
 8005eee:	f7ff ff09 	bl	8005d04 <_malloc_r>
 8005ef2:	6028      	str	r0, [r5, #0]
 8005ef4:	6128      	str	r0, [r5, #16]
 8005ef6:	b930      	cbnz	r0, 8005f06 <_svfiprintf_r+0x32>
 8005ef8:	230c      	movs	r3, #12
 8005efa:	603b      	str	r3, [r7, #0]
 8005efc:	f04f 30ff 	mov.w	r0, #4294967295
 8005f00:	b01d      	add	sp, #116	@ 0x74
 8005f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f06:	2340      	movs	r3, #64	@ 0x40
 8005f08:	616b      	str	r3, [r5, #20]
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f0e:	2320      	movs	r3, #32
 8005f10:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005f14:	2330      	movs	r3, #48	@ 0x30
 8005f16:	f04f 0901 	mov.w	r9, #1
 8005f1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f1e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80060b8 <_svfiprintf_r+0x1e4>
 8005f22:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005f26:	4623      	mov	r3, r4
 8005f28:	469a      	mov	sl, r3
 8005f2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f2e:	b10a      	cbz	r2, 8005f34 <_svfiprintf_r+0x60>
 8005f30:	2a25      	cmp	r2, #37	@ 0x25
 8005f32:	d1f9      	bne.n	8005f28 <_svfiprintf_r+0x54>
 8005f34:	ebba 0b04 	subs.w	fp, sl, r4
 8005f38:	d00b      	beq.n	8005f52 <_svfiprintf_r+0x7e>
 8005f3a:	465b      	mov	r3, fp
 8005f3c:	4622      	mov	r2, r4
 8005f3e:	4629      	mov	r1, r5
 8005f40:	4638      	mov	r0, r7
 8005f42:	f7ff ff6b 	bl	8005e1c <__ssputs_r>
 8005f46:	3001      	adds	r0, #1
 8005f48:	f000 80a7 	beq.w	800609a <_svfiprintf_r+0x1c6>
 8005f4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f4e:	445a      	add	r2, fp
 8005f50:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f52:	f89a 3000 	ldrb.w	r3, [sl]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	f000 809f 	beq.w	800609a <_svfiprintf_r+0x1c6>
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	f04f 32ff 	mov.w	r2, #4294967295
 8005f62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f66:	f10a 0a01 	add.w	sl, sl, #1
 8005f6a:	9304      	str	r3, [sp, #16]
 8005f6c:	9307      	str	r3, [sp, #28]
 8005f6e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005f72:	931a      	str	r3, [sp, #104]	@ 0x68
 8005f74:	4654      	mov	r4, sl
 8005f76:	2205      	movs	r2, #5
 8005f78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f7c:	484e      	ldr	r0, [pc, #312]	@ (80060b8 <_svfiprintf_r+0x1e4>)
 8005f7e:	f000 fa61 	bl	8006444 <memchr>
 8005f82:	9a04      	ldr	r2, [sp, #16]
 8005f84:	b9d8      	cbnz	r0, 8005fbe <_svfiprintf_r+0xea>
 8005f86:	06d0      	lsls	r0, r2, #27
 8005f88:	bf44      	itt	mi
 8005f8a:	2320      	movmi	r3, #32
 8005f8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f90:	0711      	lsls	r1, r2, #28
 8005f92:	bf44      	itt	mi
 8005f94:	232b      	movmi	r3, #43	@ 0x2b
 8005f96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f9a:	f89a 3000 	ldrb.w	r3, [sl]
 8005f9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005fa0:	d015      	beq.n	8005fce <_svfiprintf_r+0xfa>
 8005fa2:	4654      	mov	r4, sl
 8005fa4:	2000      	movs	r0, #0
 8005fa6:	f04f 0c0a 	mov.w	ip, #10
 8005faa:	9a07      	ldr	r2, [sp, #28]
 8005fac:	4621      	mov	r1, r4
 8005fae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fb2:	3b30      	subs	r3, #48	@ 0x30
 8005fb4:	2b09      	cmp	r3, #9
 8005fb6:	d94b      	bls.n	8006050 <_svfiprintf_r+0x17c>
 8005fb8:	b1b0      	cbz	r0, 8005fe8 <_svfiprintf_r+0x114>
 8005fba:	9207      	str	r2, [sp, #28]
 8005fbc:	e014      	b.n	8005fe8 <_svfiprintf_r+0x114>
 8005fbe:	eba0 0308 	sub.w	r3, r0, r8
 8005fc2:	fa09 f303 	lsl.w	r3, r9, r3
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	46a2      	mov	sl, r4
 8005fca:	9304      	str	r3, [sp, #16]
 8005fcc:	e7d2      	b.n	8005f74 <_svfiprintf_r+0xa0>
 8005fce:	9b03      	ldr	r3, [sp, #12]
 8005fd0:	1d19      	adds	r1, r3, #4
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	9103      	str	r1, [sp, #12]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	bfbb      	ittet	lt
 8005fda:	425b      	neglt	r3, r3
 8005fdc:	f042 0202 	orrlt.w	r2, r2, #2
 8005fe0:	9307      	strge	r3, [sp, #28]
 8005fe2:	9307      	strlt	r3, [sp, #28]
 8005fe4:	bfb8      	it	lt
 8005fe6:	9204      	strlt	r2, [sp, #16]
 8005fe8:	7823      	ldrb	r3, [r4, #0]
 8005fea:	2b2e      	cmp	r3, #46	@ 0x2e
 8005fec:	d10a      	bne.n	8006004 <_svfiprintf_r+0x130>
 8005fee:	7863      	ldrb	r3, [r4, #1]
 8005ff0:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ff2:	d132      	bne.n	800605a <_svfiprintf_r+0x186>
 8005ff4:	9b03      	ldr	r3, [sp, #12]
 8005ff6:	3402      	adds	r4, #2
 8005ff8:	1d1a      	adds	r2, r3, #4
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	9203      	str	r2, [sp, #12]
 8005ffe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006002:	9305      	str	r3, [sp, #20]
 8006004:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80060bc <_svfiprintf_r+0x1e8>
 8006008:	2203      	movs	r2, #3
 800600a:	4650      	mov	r0, sl
 800600c:	7821      	ldrb	r1, [r4, #0]
 800600e:	f000 fa19 	bl	8006444 <memchr>
 8006012:	b138      	cbz	r0, 8006024 <_svfiprintf_r+0x150>
 8006014:	2240      	movs	r2, #64	@ 0x40
 8006016:	9b04      	ldr	r3, [sp, #16]
 8006018:	eba0 000a 	sub.w	r0, r0, sl
 800601c:	4082      	lsls	r2, r0
 800601e:	4313      	orrs	r3, r2
 8006020:	3401      	adds	r4, #1
 8006022:	9304      	str	r3, [sp, #16]
 8006024:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006028:	2206      	movs	r2, #6
 800602a:	4825      	ldr	r0, [pc, #148]	@ (80060c0 <_svfiprintf_r+0x1ec>)
 800602c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006030:	f000 fa08 	bl	8006444 <memchr>
 8006034:	2800      	cmp	r0, #0
 8006036:	d036      	beq.n	80060a6 <_svfiprintf_r+0x1d2>
 8006038:	4b22      	ldr	r3, [pc, #136]	@ (80060c4 <_svfiprintf_r+0x1f0>)
 800603a:	bb1b      	cbnz	r3, 8006084 <_svfiprintf_r+0x1b0>
 800603c:	9b03      	ldr	r3, [sp, #12]
 800603e:	3307      	adds	r3, #7
 8006040:	f023 0307 	bic.w	r3, r3, #7
 8006044:	3308      	adds	r3, #8
 8006046:	9303      	str	r3, [sp, #12]
 8006048:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800604a:	4433      	add	r3, r6
 800604c:	9309      	str	r3, [sp, #36]	@ 0x24
 800604e:	e76a      	b.n	8005f26 <_svfiprintf_r+0x52>
 8006050:	460c      	mov	r4, r1
 8006052:	2001      	movs	r0, #1
 8006054:	fb0c 3202 	mla	r2, ip, r2, r3
 8006058:	e7a8      	b.n	8005fac <_svfiprintf_r+0xd8>
 800605a:	2300      	movs	r3, #0
 800605c:	f04f 0c0a 	mov.w	ip, #10
 8006060:	4619      	mov	r1, r3
 8006062:	3401      	adds	r4, #1
 8006064:	9305      	str	r3, [sp, #20]
 8006066:	4620      	mov	r0, r4
 8006068:	f810 2b01 	ldrb.w	r2, [r0], #1
 800606c:	3a30      	subs	r2, #48	@ 0x30
 800606e:	2a09      	cmp	r2, #9
 8006070:	d903      	bls.n	800607a <_svfiprintf_r+0x1a6>
 8006072:	2b00      	cmp	r3, #0
 8006074:	d0c6      	beq.n	8006004 <_svfiprintf_r+0x130>
 8006076:	9105      	str	r1, [sp, #20]
 8006078:	e7c4      	b.n	8006004 <_svfiprintf_r+0x130>
 800607a:	4604      	mov	r4, r0
 800607c:	2301      	movs	r3, #1
 800607e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006082:	e7f0      	b.n	8006066 <_svfiprintf_r+0x192>
 8006084:	ab03      	add	r3, sp, #12
 8006086:	9300      	str	r3, [sp, #0]
 8006088:	462a      	mov	r2, r5
 800608a:	4638      	mov	r0, r7
 800608c:	4b0e      	ldr	r3, [pc, #56]	@ (80060c8 <_svfiprintf_r+0x1f4>)
 800608e:	a904      	add	r1, sp, #16
 8006090:	f3af 8000 	nop.w
 8006094:	1c42      	adds	r2, r0, #1
 8006096:	4606      	mov	r6, r0
 8006098:	d1d6      	bne.n	8006048 <_svfiprintf_r+0x174>
 800609a:	89ab      	ldrh	r3, [r5, #12]
 800609c:	065b      	lsls	r3, r3, #25
 800609e:	f53f af2d 	bmi.w	8005efc <_svfiprintf_r+0x28>
 80060a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80060a4:	e72c      	b.n	8005f00 <_svfiprintf_r+0x2c>
 80060a6:	ab03      	add	r3, sp, #12
 80060a8:	9300      	str	r3, [sp, #0]
 80060aa:	462a      	mov	r2, r5
 80060ac:	4638      	mov	r0, r7
 80060ae:	4b06      	ldr	r3, [pc, #24]	@ (80060c8 <_svfiprintf_r+0x1f4>)
 80060b0:	a904      	add	r1, sp, #16
 80060b2:	f000 f87d 	bl	80061b0 <_printf_i>
 80060b6:	e7ed      	b.n	8006094 <_svfiprintf_r+0x1c0>
 80060b8:	0800689b 	.word	0x0800689b
 80060bc:	080068a1 	.word	0x080068a1
 80060c0:	080068a5 	.word	0x080068a5
 80060c4:	00000000 	.word	0x00000000
 80060c8:	08005e1d 	.word	0x08005e1d

080060cc <_printf_common>:
 80060cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060d0:	4616      	mov	r6, r2
 80060d2:	4698      	mov	r8, r3
 80060d4:	688a      	ldr	r2, [r1, #8]
 80060d6:	690b      	ldr	r3, [r1, #16]
 80060d8:	4607      	mov	r7, r0
 80060da:	4293      	cmp	r3, r2
 80060dc:	bfb8      	it	lt
 80060de:	4613      	movlt	r3, r2
 80060e0:	6033      	str	r3, [r6, #0]
 80060e2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80060e6:	460c      	mov	r4, r1
 80060e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80060ec:	b10a      	cbz	r2, 80060f2 <_printf_common+0x26>
 80060ee:	3301      	adds	r3, #1
 80060f0:	6033      	str	r3, [r6, #0]
 80060f2:	6823      	ldr	r3, [r4, #0]
 80060f4:	0699      	lsls	r1, r3, #26
 80060f6:	bf42      	ittt	mi
 80060f8:	6833      	ldrmi	r3, [r6, #0]
 80060fa:	3302      	addmi	r3, #2
 80060fc:	6033      	strmi	r3, [r6, #0]
 80060fe:	6825      	ldr	r5, [r4, #0]
 8006100:	f015 0506 	ands.w	r5, r5, #6
 8006104:	d106      	bne.n	8006114 <_printf_common+0x48>
 8006106:	f104 0a19 	add.w	sl, r4, #25
 800610a:	68e3      	ldr	r3, [r4, #12]
 800610c:	6832      	ldr	r2, [r6, #0]
 800610e:	1a9b      	subs	r3, r3, r2
 8006110:	42ab      	cmp	r3, r5
 8006112:	dc2b      	bgt.n	800616c <_printf_common+0xa0>
 8006114:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006118:	6822      	ldr	r2, [r4, #0]
 800611a:	3b00      	subs	r3, #0
 800611c:	bf18      	it	ne
 800611e:	2301      	movne	r3, #1
 8006120:	0692      	lsls	r2, r2, #26
 8006122:	d430      	bmi.n	8006186 <_printf_common+0xba>
 8006124:	4641      	mov	r1, r8
 8006126:	4638      	mov	r0, r7
 8006128:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800612c:	47c8      	blx	r9
 800612e:	3001      	adds	r0, #1
 8006130:	d023      	beq.n	800617a <_printf_common+0xae>
 8006132:	6823      	ldr	r3, [r4, #0]
 8006134:	6922      	ldr	r2, [r4, #16]
 8006136:	f003 0306 	and.w	r3, r3, #6
 800613a:	2b04      	cmp	r3, #4
 800613c:	bf14      	ite	ne
 800613e:	2500      	movne	r5, #0
 8006140:	6833      	ldreq	r3, [r6, #0]
 8006142:	f04f 0600 	mov.w	r6, #0
 8006146:	bf08      	it	eq
 8006148:	68e5      	ldreq	r5, [r4, #12]
 800614a:	f104 041a 	add.w	r4, r4, #26
 800614e:	bf08      	it	eq
 8006150:	1aed      	subeq	r5, r5, r3
 8006152:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006156:	bf08      	it	eq
 8006158:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800615c:	4293      	cmp	r3, r2
 800615e:	bfc4      	itt	gt
 8006160:	1a9b      	subgt	r3, r3, r2
 8006162:	18ed      	addgt	r5, r5, r3
 8006164:	42b5      	cmp	r5, r6
 8006166:	d11a      	bne.n	800619e <_printf_common+0xd2>
 8006168:	2000      	movs	r0, #0
 800616a:	e008      	b.n	800617e <_printf_common+0xb2>
 800616c:	2301      	movs	r3, #1
 800616e:	4652      	mov	r2, sl
 8006170:	4641      	mov	r1, r8
 8006172:	4638      	mov	r0, r7
 8006174:	47c8      	blx	r9
 8006176:	3001      	adds	r0, #1
 8006178:	d103      	bne.n	8006182 <_printf_common+0xb6>
 800617a:	f04f 30ff 	mov.w	r0, #4294967295
 800617e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006182:	3501      	adds	r5, #1
 8006184:	e7c1      	b.n	800610a <_printf_common+0x3e>
 8006186:	2030      	movs	r0, #48	@ 0x30
 8006188:	18e1      	adds	r1, r4, r3
 800618a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800618e:	1c5a      	adds	r2, r3, #1
 8006190:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006194:	4422      	add	r2, r4
 8006196:	3302      	adds	r3, #2
 8006198:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800619c:	e7c2      	b.n	8006124 <_printf_common+0x58>
 800619e:	2301      	movs	r3, #1
 80061a0:	4622      	mov	r2, r4
 80061a2:	4641      	mov	r1, r8
 80061a4:	4638      	mov	r0, r7
 80061a6:	47c8      	blx	r9
 80061a8:	3001      	adds	r0, #1
 80061aa:	d0e6      	beq.n	800617a <_printf_common+0xae>
 80061ac:	3601      	adds	r6, #1
 80061ae:	e7d9      	b.n	8006164 <_printf_common+0x98>

080061b0 <_printf_i>:
 80061b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061b4:	7e0f      	ldrb	r7, [r1, #24]
 80061b6:	4691      	mov	r9, r2
 80061b8:	2f78      	cmp	r7, #120	@ 0x78
 80061ba:	4680      	mov	r8, r0
 80061bc:	460c      	mov	r4, r1
 80061be:	469a      	mov	sl, r3
 80061c0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80061c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80061c6:	d807      	bhi.n	80061d8 <_printf_i+0x28>
 80061c8:	2f62      	cmp	r7, #98	@ 0x62
 80061ca:	d80a      	bhi.n	80061e2 <_printf_i+0x32>
 80061cc:	2f00      	cmp	r7, #0
 80061ce:	f000 80d3 	beq.w	8006378 <_printf_i+0x1c8>
 80061d2:	2f58      	cmp	r7, #88	@ 0x58
 80061d4:	f000 80ba 	beq.w	800634c <_printf_i+0x19c>
 80061d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80061dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80061e0:	e03a      	b.n	8006258 <_printf_i+0xa8>
 80061e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80061e6:	2b15      	cmp	r3, #21
 80061e8:	d8f6      	bhi.n	80061d8 <_printf_i+0x28>
 80061ea:	a101      	add	r1, pc, #4	@ (adr r1, 80061f0 <_printf_i+0x40>)
 80061ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061f0:	08006249 	.word	0x08006249
 80061f4:	0800625d 	.word	0x0800625d
 80061f8:	080061d9 	.word	0x080061d9
 80061fc:	080061d9 	.word	0x080061d9
 8006200:	080061d9 	.word	0x080061d9
 8006204:	080061d9 	.word	0x080061d9
 8006208:	0800625d 	.word	0x0800625d
 800620c:	080061d9 	.word	0x080061d9
 8006210:	080061d9 	.word	0x080061d9
 8006214:	080061d9 	.word	0x080061d9
 8006218:	080061d9 	.word	0x080061d9
 800621c:	0800635f 	.word	0x0800635f
 8006220:	08006287 	.word	0x08006287
 8006224:	08006319 	.word	0x08006319
 8006228:	080061d9 	.word	0x080061d9
 800622c:	080061d9 	.word	0x080061d9
 8006230:	08006381 	.word	0x08006381
 8006234:	080061d9 	.word	0x080061d9
 8006238:	08006287 	.word	0x08006287
 800623c:	080061d9 	.word	0x080061d9
 8006240:	080061d9 	.word	0x080061d9
 8006244:	08006321 	.word	0x08006321
 8006248:	6833      	ldr	r3, [r6, #0]
 800624a:	1d1a      	adds	r2, r3, #4
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	6032      	str	r2, [r6, #0]
 8006250:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006254:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006258:	2301      	movs	r3, #1
 800625a:	e09e      	b.n	800639a <_printf_i+0x1ea>
 800625c:	6833      	ldr	r3, [r6, #0]
 800625e:	6820      	ldr	r0, [r4, #0]
 8006260:	1d19      	adds	r1, r3, #4
 8006262:	6031      	str	r1, [r6, #0]
 8006264:	0606      	lsls	r6, r0, #24
 8006266:	d501      	bpl.n	800626c <_printf_i+0xbc>
 8006268:	681d      	ldr	r5, [r3, #0]
 800626a:	e003      	b.n	8006274 <_printf_i+0xc4>
 800626c:	0645      	lsls	r5, r0, #25
 800626e:	d5fb      	bpl.n	8006268 <_printf_i+0xb8>
 8006270:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006274:	2d00      	cmp	r5, #0
 8006276:	da03      	bge.n	8006280 <_printf_i+0xd0>
 8006278:	232d      	movs	r3, #45	@ 0x2d
 800627a:	426d      	negs	r5, r5
 800627c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006280:	230a      	movs	r3, #10
 8006282:	4859      	ldr	r0, [pc, #356]	@ (80063e8 <_printf_i+0x238>)
 8006284:	e011      	b.n	80062aa <_printf_i+0xfa>
 8006286:	6821      	ldr	r1, [r4, #0]
 8006288:	6833      	ldr	r3, [r6, #0]
 800628a:	0608      	lsls	r0, r1, #24
 800628c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006290:	d402      	bmi.n	8006298 <_printf_i+0xe8>
 8006292:	0649      	lsls	r1, r1, #25
 8006294:	bf48      	it	mi
 8006296:	b2ad      	uxthmi	r5, r5
 8006298:	2f6f      	cmp	r7, #111	@ 0x6f
 800629a:	6033      	str	r3, [r6, #0]
 800629c:	bf14      	ite	ne
 800629e:	230a      	movne	r3, #10
 80062a0:	2308      	moveq	r3, #8
 80062a2:	4851      	ldr	r0, [pc, #324]	@ (80063e8 <_printf_i+0x238>)
 80062a4:	2100      	movs	r1, #0
 80062a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80062aa:	6866      	ldr	r6, [r4, #4]
 80062ac:	2e00      	cmp	r6, #0
 80062ae:	bfa8      	it	ge
 80062b0:	6821      	ldrge	r1, [r4, #0]
 80062b2:	60a6      	str	r6, [r4, #8]
 80062b4:	bfa4      	itt	ge
 80062b6:	f021 0104 	bicge.w	r1, r1, #4
 80062ba:	6021      	strge	r1, [r4, #0]
 80062bc:	b90d      	cbnz	r5, 80062c2 <_printf_i+0x112>
 80062be:	2e00      	cmp	r6, #0
 80062c0:	d04b      	beq.n	800635a <_printf_i+0x1aa>
 80062c2:	4616      	mov	r6, r2
 80062c4:	fbb5 f1f3 	udiv	r1, r5, r3
 80062c8:	fb03 5711 	mls	r7, r3, r1, r5
 80062cc:	5dc7      	ldrb	r7, [r0, r7]
 80062ce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80062d2:	462f      	mov	r7, r5
 80062d4:	42bb      	cmp	r3, r7
 80062d6:	460d      	mov	r5, r1
 80062d8:	d9f4      	bls.n	80062c4 <_printf_i+0x114>
 80062da:	2b08      	cmp	r3, #8
 80062dc:	d10b      	bne.n	80062f6 <_printf_i+0x146>
 80062de:	6823      	ldr	r3, [r4, #0]
 80062e0:	07df      	lsls	r7, r3, #31
 80062e2:	d508      	bpl.n	80062f6 <_printf_i+0x146>
 80062e4:	6923      	ldr	r3, [r4, #16]
 80062e6:	6861      	ldr	r1, [r4, #4]
 80062e8:	4299      	cmp	r1, r3
 80062ea:	bfde      	ittt	le
 80062ec:	2330      	movle	r3, #48	@ 0x30
 80062ee:	f806 3c01 	strble.w	r3, [r6, #-1]
 80062f2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80062f6:	1b92      	subs	r2, r2, r6
 80062f8:	6122      	str	r2, [r4, #16]
 80062fa:	464b      	mov	r3, r9
 80062fc:	4621      	mov	r1, r4
 80062fe:	4640      	mov	r0, r8
 8006300:	f8cd a000 	str.w	sl, [sp]
 8006304:	aa03      	add	r2, sp, #12
 8006306:	f7ff fee1 	bl	80060cc <_printf_common>
 800630a:	3001      	adds	r0, #1
 800630c:	d14a      	bne.n	80063a4 <_printf_i+0x1f4>
 800630e:	f04f 30ff 	mov.w	r0, #4294967295
 8006312:	b004      	add	sp, #16
 8006314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006318:	6823      	ldr	r3, [r4, #0]
 800631a:	f043 0320 	orr.w	r3, r3, #32
 800631e:	6023      	str	r3, [r4, #0]
 8006320:	2778      	movs	r7, #120	@ 0x78
 8006322:	4832      	ldr	r0, [pc, #200]	@ (80063ec <_printf_i+0x23c>)
 8006324:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006328:	6823      	ldr	r3, [r4, #0]
 800632a:	6831      	ldr	r1, [r6, #0]
 800632c:	061f      	lsls	r7, r3, #24
 800632e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006332:	d402      	bmi.n	800633a <_printf_i+0x18a>
 8006334:	065f      	lsls	r7, r3, #25
 8006336:	bf48      	it	mi
 8006338:	b2ad      	uxthmi	r5, r5
 800633a:	6031      	str	r1, [r6, #0]
 800633c:	07d9      	lsls	r1, r3, #31
 800633e:	bf44      	itt	mi
 8006340:	f043 0320 	orrmi.w	r3, r3, #32
 8006344:	6023      	strmi	r3, [r4, #0]
 8006346:	b11d      	cbz	r5, 8006350 <_printf_i+0x1a0>
 8006348:	2310      	movs	r3, #16
 800634a:	e7ab      	b.n	80062a4 <_printf_i+0xf4>
 800634c:	4826      	ldr	r0, [pc, #152]	@ (80063e8 <_printf_i+0x238>)
 800634e:	e7e9      	b.n	8006324 <_printf_i+0x174>
 8006350:	6823      	ldr	r3, [r4, #0]
 8006352:	f023 0320 	bic.w	r3, r3, #32
 8006356:	6023      	str	r3, [r4, #0]
 8006358:	e7f6      	b.n	8006348 <_printf_i+0x198>
 800635a:	4616      	mov	r6, r2
 800635c:	e7bd      	b.n	80062da <_printf_i+0x12a>
 800635e:	6833      	ldr	r3, [r6, #0]
 8006360:	6825      	ldr	r5, [r4, #0]
 8006362:	1d18      	adds	r0, r3, #4
 8006364:	6961      	ldr	r1, [r4, #20]
 8006366:	6030      	str	r0, [r6, #0]
 8006368:	062e      	lsls	r6, r5, #24
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	d501      	bpl.n	8006372 <_printf_i+0x1c2>
 800636e:	6019      	str	r1, [r3, #0]
 8006370:	e002      	b.n	8006378 <_printf_i+0x1c8>
 8006372:	0668      	lsls	r0, r5, #25
 8006374:	d5fb      	bpl.n	800636e <_printf_i+0x1be>
 8006376:	8019      	strh	r1, [r3, #0]
 8006378:	2300      	movs	r3, #0
 800637a:	4616      	mov	r6, r2
 800637c:	6123      	str	r3, [r4, #16]
 800637e:	e7bc      	b.n	80062fa <_printf_i+0x14a>
 8006380:	6833      	ldr	r3, [r6, #0]
 8006382:	2100      	movs	r1, #0
 8006384:	1d1a      	adds	r2, r3, #4
 8006386:	6032      	str	r2, [r6, #0]
 8006388:	681e      	ldr	r6, [r3, #0]
 800638a:	6862      	ldr	r2, [r4, #4]
 800638c:	4630      	mov	r0, r6
 800638e:	f000 f859 	bl	8006444 <memchr>
 8006392:	b108      	cbz	r0, 8006398 <_printf_i+0x1e8>
 8006394:	1b80      	subs	r0, r0, r6
 8006396:	6060      	str	r0, [r4, #4]
 8006398:	6863      	ldr	r3, [r4, #4]
 800639a:	6123      	str	r3, [r4, #16]
 800639c:	2300      	movs	r3, #0
 800639e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063a2:	e7aa      	b.n	80062fa <_printf_i+0x14a>
 80063a4:	4632      	mov	r2, r6
 80063a6:	4649      	mov	r1, r9
 80063a8:	4640      	mov	r0, r8
 80063aa:	6923      	ldr	r3, [r4, #16]
 80063ac:	47d0      	blx	sl
 80063ae:	3001      	adds	r0, #1
 80063b0:	d0ad      	beq.n	800630e <_printf_i+0x15e>
 80063b2:	6823      	ldr	r3, [r4, #0]
 80063b4:	079b      	lsls	r3, r3, #30
 80063b6:	d413      	bmi.n	80063e0 <_printf_i+0x230>
 80063b8:	68e0      	ldr	r0, [r4, #12]
 80063ba:	9b03      	ldr	r3, [sp, #12]
 80063bc:	4298      	cmp	r0, r3
 80063be:	bfb8      	it	lt
 80063c0:	4618      	movlt	r0, r3
 80063c2:	e7a6      	b.n	8006312 <_printf_i+0x162>
 80063c4:	2301      	movs	r3, #1
 80063c6:	4632      	mov	r2, r6
 80063c8:	4649      	mov	r1, r9
 80063ca:	4640      	mov	r0, r8
 80063cc:	47d0      	blx	sl
 80063ce:	3001      	adds	r0, #1
 80063d0:	d09d      	beq.n	800630e <_printf_i+0x15e>
 80063d2:	3501      	adds	r5, #1
 80063d4:	68e3      	ldr	r3, [r4, #12]
 80063d6:	9903      	ldr	r1, [sp, #12]
 80063d8:	1a5b      	subs	r3, r3, r1
 80063da:	42ab      	cmp	r3, r5
 80063dc:	dcf2      	bgt.n	80063c4 <_printf_i+0x214>
 80063de:	e7eb      	b.n	80063b8 <_printf_i+0x208>
 80063e0:	2500      	movs	r5, #0
 80063e2:	f104 0619 	add.w	r6, r4, #25
 80063e6:	e7f5      	b.n	80063d4 <_printf_i+0x224>
 80063e8:	080068ac 	.word	0x080068ac
 80063ec:	080068bd 	.word	0x080068bd

080063f0 <memmove>:
 80063f0:	4288      	cmp	r0, r1
 80063f2:	b510      	push	{r4, lr}
 80063f4:	eb01 0402 	add.w	r4, r1, r2
 80063f8:	d902      	bls.n	8006400 <memmove+0x10>
 80063fa:	4284      	cmp	r4, r0
 80063fc:	4623      	mov	r3, r4
 80063fe:	d807      	bhi.n	8006410 <memmove+0x20>
 8006400:	1e43      	subs	r3, r0, #1
 8006402:	42a1      	cmp	r1, r4
 8006404:	d008      	beq.n	8006418 <memmove+0x28>
 8006406:	f811 2b01 	ldrb.w	r2, [r1], #1
 800640a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800640e:	e7f8      	b.n	8006402 <memmove+0x12>
 8006410:	4601      	mov	r1, r0
 8006412:	4402      	add	r2, r0
 8006414:	428a      	cmp	r2, r1
 8006416:	d100      	bne.n	800641a <memmove+0x2a>
 8006418:	bd10      	pop	{r4, pc}
 800641a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800641e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006422:	e7f7      	b.n	8006414 <memmove+0x24>

08006424 <_sbrk_r>:
 8006424:	b538      	push	{r3, r4, r5, lr}
 8006426:	2300      	movs	r3, #0
 8006428:	4d05      	ldr	r5, [pc, #20]	@ (8006440 <_sbrk_r+0x1c>)
 800642a:	4604      	mov	r4, r0
 800642c:	4608      	mov	r0, r1
 800642e:	602b      	str	r3, [r5, #0]
 8006430:	f7fb fa42 	bl	80018b8 <_sbrk>
 8006434:	1c43      	adds	r3, r0, #1
 8006436:	d102      	bne.n	800643e <_sbrk_r+0x1a>
 8006438:	682b      	ldr	r3, [r5, #0]
 800643a:	b103      	cbz	r3, 800643e <_sbrk_r+0x1a>
 800643c:	6023      	str	r3, [r4, #0]
 800643e:	bd38      	pop	{r3, r4, r5, pc}
 8006440:	20000398 	.word	0x20000398

08006444 <memchr>:
 8006444:	4603      	mov	r3, r0
 8006446:	b510      	push	{r4, lr}
 8006448:	b2c9      	uxtb	r1, r1
 800644a:	4402      	add	r2, r0
 800644c:	4293      	cmp	r3, r2
 800644e:	4618      	mov	r0, r3
 8006450:	d101      	bne.n	8006456 <memchr+0x12>
 8006452:	2000      	movs	r0, #0
 8006454:	e003      	b.n	800645e <memchr+0x1a>
 8006456:	7804      	ldrb	r4, [r0, #0]
 8006458:	3301      	adds	r3, #1
 800645a:	428c      	cmp	r4, r1
 800645c:	d1f6      	bne.n	800644c <memchr+0x8>
 800645e:	bd10      	pop	{r4, pc}

08006460 <_realloc_r>:
 8006460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006464:	4680      	mov	r8, r0
 8006466:	4615      	mov	r5, r2
 8006468:	460c      	mov	r4, r1
 800646a:	b921      	cbnz	r1, 8006476 <_realloc_r+0x16>
 800646c:	4611      	mov	r1, r2
 800646e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006472:	f7ff bc47 	b.w	8005d04 <_malloc_r>
 8006476:	b92a      	cbnz	r2, 8006484 <_realloc_r+0x24>
 8006478:	f7ff fbda 	bl	8005c30 <_free_r>
 800647c:	2400      	movs	r4, #0
 800647e:	4620      	mov	r0, r4
 8006480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006484:	f000 f81a 	bl	80064bc <_malloc_usable_size_r>
 8006488:	4285      	cmp	r5, r0
 800648a:	4606      	mov	r6, r0
 800648c:	d802      	bhi.n	8006494 <_realloc_r+0x34>
 800648e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006492:	d8f4      	bhi.n	800647e <_realloc_r+0x1e>
 8006494:	4629      	mov	r1, r5
 8006496:	4640      	mov	r0, r8
 8006498:	f7ff fc34 	bl	8005d04 <_malloc_r>
 800649c:	4607      	mov	r7, r0
 800649e:	2800      	cmp	r0, #0
 80064a0:	d0ec      	beq.n	800647c <_realloc_r+0x1c>
 80064a2:	42b5      	cmp	r5, r6
 80064a4:	462a      	mov	r2, r5
 80064a6:	4621      	mov	r1, r4
 80064a8:	bf28      	it	cs
 80064aa:	4632      	movcs	r2, r6
 80064ac:	f7ff fbb2 	bl	8005c14 <memcpy>
 80064b0:	4621      	mov	r1, r4
 80064b2:	4640      	mov	r0, r8
 80064b4:	f7ff fbbc 	bl	8005c30 <_free_r>
 80064b8:	463c      	mov	r4, r7
 80064ba:	e7e0      	b.n	800647e <_realloc_r+0x1e>

080064bc <_malloc_usable_size_r>:
 80064bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064c0:	1f18      	subs	r0, r3, #4
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	bfbc      	itt	lt
 80064c6:	580b      	ldrlt	r3, [r1, r0]
 80064c8:	18c0      	addlt	r0, r0, r3
 80064ca:	4770      	bx	lr

080064cc <_init>:
 80064cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ce:	bf00      	nop
 80064d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064d2:	bc08      	pop	{r3}
 80064d4:	469e      	mov	lr, r3
 80064d6:	4770      	bx	lr

080064d8 <_fini>:
 80064d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064da:	bf00      	nop
 80064dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064de:	bc08      	pop	{r3}
 80064e0:	469e      	mov	lr, r3
 80064e2:	4770      	bx	lr
