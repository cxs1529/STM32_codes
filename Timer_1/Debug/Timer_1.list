
Timer_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025b8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080026c4  080026c4  000126c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002730  08002730  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08002730  08002730  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002730  08002730  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002730  08002730  00012730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002734  08002734  00012734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002738  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  2000005c  08002794  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  08002794  00020258  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ab8d  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001863  00000000  00000000  0002ac55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b60  00000000  00000000  0002c4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008ec  00000000  00000000  0002d018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016dbb  00000000  00000000  0002d904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c89f  00000000  00000000  000446bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008856f  00000000  00000000  00050f5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000034cc  00000000  00000000  000d94d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000dc99c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080026ac 	.word	0x080026ac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080026ac 	.word	0x080026ac

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b08a      	sub	sp, #40	; 0x28
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fa5b 	bl	800060c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f82b 	bl	80001b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f8df 	bl	800031c <MX_GPIO_Init>
  MX_TIM1_Init();
 800015e:	f000 f861 	bl	8000224 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000162:	f000 f8b1 	bl	80002c8 <MX_USART1_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int timerValue;
  uint8_t count = 0;
 8000166:	2300      	movs	r3, #0
 8000168:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  HAL_TIM_Base_Start(&htim1);
 800016c:	480d      	ldr	r0, [pc, #52]	; (80001a4 <main+0x58>)
 800016e:	f001 f9b3 	bl	80014d8 <HAL_TIM_Base_Start>
  uint16_t deltaTime = 0;
 8000172:	2300      	movs	r3, #0
 8000174:	84bb      	strh	r3, [r7, #36]	; 0x24

  while (1)
  {
    /* USER CODE END WHILE */
	  //timerValue = htim1.Instance->CNT; // 16 bit timer 0-65535
	  HAL_Delay(500);
 8000176:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800017a:	f000 faa9 	bl	80006d0 <HAL_Delay>
	  //deltaTime = (htim1.Instance->CNT - timerValue)/1000;
	  timerValue = __HAL_TIM_GET_COUNTER(&htim1);
 800017e:	4b09      	ldr	r3, [pc, #36]	; (80001a4 <main+0x58>)
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000184:	623b      	str	r3, [r7, #32]
	  sprintf(txBuffer,">> %i s\r\n",timerValue);
 8000186:	463b      	mov	r3, r7
 8000188:	6a3a      	ldr	r2, [r7, #32]
 800018a:	4907      	ldr	r1, [pc, #28]	; (80001a8 <main+0x5c>)
 800018c:	4618      	mov	r0, r3
 800018e:	f001 fddb 	bl	8001d48 <siprintf>
	  HAL_UART_Transmit(&huart1, txBuffer, sizeof(txBuffer), HAL_MAX_DELAY);
 8000192:	4639      	mov	r1, r7
 8000194:	f04f 33ff 	mov.w	r3, #4294967295
 8000198:	2220      	movs	r2, #32
 800019a:	4804      	ldr	r0, [pc, #16]	; (80001ac <main+0x60>)
 800019c:	f001 fc54 	bl	8001a48 <HAL_UART_Transmit>
  {
 80001a0:	e7e9      	b.n	8000176 <main+0x2a>
 80001a2:	bf00      	nop
 80001a4:	20000078 	.word	0x20000078
 80001a8:	080026c4 	.word	0x080026c4
 80001ac:	200000c0 	.word	0x200000c0

080001b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b090      	sub	sp, #64	; 0x40
 80001b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001b6:	f107 0318 	add.w	r3, r7, #24
 80001ba:	2228      	movs	r2, #40	; 0x28
 80001bc:	2100      	movs	r1, #0
 80001be:	4618      	mov	r0, r3
 80001c0:	f001 fde2 	bl	8001d88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c4:	1d3b      	adds	r3, r7, #4
 80001c6:	2200      	movs	r2, #0
 80001c8:	601a      	str	r2, [r3, #0]
 80001ca:	605a      	str	r2, [r3, #4]
 80001cc:	609a      	str	r2, [r3, #8]
 80001ce:	60da      	str	r2, [r3, #12]
 80001d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001d2:	2301      	movs	r3, #1
 80001d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001dc:	2300      	movs	r3, #0
 80001de:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001e0:	f107 0318 	add.w	r3, r7, #24
 80001e4:	4618      	mov	r0, r3
 80001e6:	f000 fd17 	bl	8000c18 <HAL_RCC_OscConfig>
 80001ea:	4603      	mov	r3, r0
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d001      	beq.n	80001f4 <SystemClock_Config+0x44>
  {
    Error_Handler();
 80001f0:	f000 f8e0 	bl	80003b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001f4:	230f      	movs	r3, #15
 80001f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80001f8:	2301      	movs	r3, #1
 80001fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001fc:	2300      	movs	r3, #0
 80001fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000200:	2300      	movs	r3, #0
 8000202:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000204:	2300      	movs	r3, #0
 8000206:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000208:	1d3b      	adds	r3, r7, #4
 800020a:	2100      	movs	r1, #0
 800020c:	4618      	mov	r0, r3
 800020e:	f000 ff85 	bl	800111c <HAL_RCC_ClockConfig>
 8000212:	4603      	mov	r3, r0
 8000214:	2b00      	cmp	r3, #0
 8000216:	d001      	beq.n	800021c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000218:	f000 f8cc 	bl	80003b4 <Error_Handler>
  }
}
 800021c:	bf00      	nop
 800021e:	3740      	adds	r7, #64	; 0x40
 8000220:	46bd      	mov	sp, r7
 8000222:	bd80      	pop	{r7, pc}

08000224 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b086      	sub	sp, #24
 8000228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800022a:	f107 0308 	add.w	r3, r7, #8
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000238:	463b      	mov	r3, r7
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
 800023e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000240:	4b1f      	ldr	r3, [pc, #124]	; (80002c0 <MX_TIM1_Init+0x9c>)
 8000242:	4a20      	ldr	r2, [pc, #128]	; (80002c4 <MX_TIM1_Init+0xa0>)
 8000244:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8000-1;
 8000246:	4b1e      	ldr	r3, [pc, #120]	; (80002c0 <MX_TIM1_Init+0x9c>)
 8000248:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800024c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800024e:	4b1c      	ldr	r3, [pc, #112]	; (80002c0 <MX_TIM1_Init+0x9c>)
 8000250:	2200      	movs	r2, #0
 8000252:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535-1;
 8000254:	4b1a      	ldr	r3, [pc, #104]	; (80002c0 <MX_TIM1_Init+0x9c>)
 8000256:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800025a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800025c:	4b18      	ldr	r3, [pc, #96]	; (80002c0 <MX_TIM1_Init+0x9c>)
 800025e:	2200      	movs	r2, #0
 8000260:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000262:	4b17      	ldr	r3, [pc, #92]	; (80002c0 <MX_TIM1_Init+0x9c>)
 8000264:	2200      	movs	r2, #0
 8000266:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000268:	4b15      	ldr	r3, [pc, #84]	; (80002c0 <MX_TIM1_Init+0x9c>)
 800026a:	2200      	movs	r2, #0
 800026c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800026e:	4814      	ldr	r0, [pc, #80]	; (80002c0 <MX_TIM1_Init+0x9c>)
 8000270:	f001 f8e2 	bl	8001438 <HAL_TIM_Base_Init>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800027a:	f000 f89b 	bl	80003b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800027e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000282:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000284:	f107 0308 	add.w	r3, r7, #8
 8000288:	4619      	mov	r1, r3
 800028a:	480d      	ldr	r0, [pc, #52]	; (80002c0 <MX_TIM1_Init+0x9c>)
 800028c:	f001 f96e 	bl	800156c <HAL_TIM_ConfigClockSource>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000296:	f000 f88d 	bl	80003b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800029a:	2300      	movs	r3, #0
 800029c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800029e:	2300      	movs	r3, #0
 80002a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80002a2:	463b      	mov	r3, r7
 80002a4:	4619      	mov	r1, r3
 80002a6:	4806      	ldr	r0, [pc, #24]	; (80002c0 <MX_TIM1_Init+0x9c>)
 80002a8:	f001 fb20 	bl	80018ec <HAL_TIMEx_MasterConfigSynchronization>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80002b2:	f000 f87f 	bl	80003b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80002b6:	bf00      	nop
 80002b8:	3718      	adds	r7, #24
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	20000078 	.word	0x20000078
 80002c4:	40012c00 	.word	0x40012c00

080002c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002cc:	4b11      	ldr	r3, [pc, #68]	; (8000314 <MX_USART1_UART_Init+0x4c>)
 80002ce:	4a12      	ldr	r2, [pc, #72]	; (8000318 <MX_USART1_UART_Init+0x50>)
 80002d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80002d2:	4b10      	ldr	r3, [pc, #64]	; (8000314 <MX_USART1_UART_Init+0x4c>)
 80002d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80002d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002da:	4b0e      	ldr	r3, [pc, #56]	; (8000314 <MX_USART1_UART_Init+0x4c>)
 80002dc:	2200      	movs	r2, #0
 80002de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002e0:	4b0c      	ldr	r3, [pc, #48]	; (8000314 <MX_USART1_UART_Init+0x4c>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002e6:	4b0b      	ldr	r3, [pc, #44]	; (8000314 <MX_USART1_UART_Init+0x4c>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002ec:	4b09      	ldr	r3, [pc, #36]	; (8000314 <MX_USART1_UART_Init+0x4c>)
 80002ee:	220c      	movs	r2, #12
 80002f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002f2:	4b08      	ldr	r3, [pc, #32]	; (8000314 <MX_USART1_UART_Init+0x4c>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002f8:	4b06      	ldr	r3, [pc, #24]	; (8000314 <MX_USART1_UART_Init+0x4c>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002fe:	4805      	ldr	r0, [pc, #20]	; (8000314 <MX_USART1_UART_Init+0x4c>)
 8000300:	f001 fb52 	bl	80019a8 <HAL_UART_Init>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800030a:	f000 f853 	bl	80003b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800030e:	bf00      	nop
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	200000c0 	.word	0x200000c0
 8000318:	40013800 	.word	0x40013800

0800031c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b088      	sub	sp, #32
 8000320:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000322:	f107 0310 	add.w	r3, r7, #16
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
 800032a:	605a      	str	r2, [r3, #4]
 800032c:	609a      	str	r2, [r3, #8]
 800032e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000330:	4b1e      	ldr	r3, [pc, #120]	; (80003ac <MX_GPIO_Init+0x90>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	4a1d      	ldr	r2, [pc, #116]	; (80003ac <MX_GPIO_Init+0x90>)
 8000336:	f043 0310 	orr.w	r3, r3, #16
 800033a:	6193      	str	r3, [r2, #24]
 800033c:	4b1b      	ldr	r3, [pc, #108]	; (80003ac <MX_GPIO_Init+0x90>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	f003 0310 	and.w	r3, r3, #16
 8000344:	60fb      	str	r3, [r7, #12]
 8000346:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000348:	4b18      	ldr	r3, [pc, #96]	; (80003ac <MX_GPIO_Init+0x90>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	4a17      	ldr	r2, [pc, #92]	; (80003ac <MX_GPIO_Init+0x90>)
 800034e:	f043 0320 	orr.w	r3, r3, #32
 8000352:	6193      	str	r3, [r2, #24]
 8000354:	4b15      	ldr	r3, [pc, #84]	; (80003ac <MX_GPIO_Init+0x90>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	f003 0320 	and.w	r3, r3, #32
 800035c:	60bb      	str	r3, [r7, #8]
 800035e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000360:	4b12      	ldr	r3, [pc, #72]	; (80003ac <MX_GPIO_Init+0x90>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	4a11      	ldr	r2, [pc, #68]	; (80003ac <MX_GPIO_Init+0x90>)
 8000366:	f043 0304 	orr.w	r3, r3, #4
 800036a:	6193      	str	r3, [r2, #24]
 800036c:	4b0f      	ldr	r3, [pc, #60]	; (80003ac <MX_GPIO_Init+0x90>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	f003 0304 	and.w	r3, r3, #4
 8000374:	607b      	str	r3, [r7, #4]
 8000376:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800037e:	480c      	ldr	r0, [pc, #48]	; (80003b0 <MX_GPIO_Init+0x94>)
 8000380:	f000 fc32 	bl	8000be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000384:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000388:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800038a:	2301      	movs	r3, #1
 800038c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800038e:	2300      	movs	r3, #0
 8000390:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000392:	2302      	movs	r3, #2
 8000394:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000396:	f107 0310 	add.w	r3, r7, #16
 800039a:	4619      	mov	r1, r3
 800039c:	4804      	ldr	r0, [pc, #16]	; (80003b0 <MX_GPIO_Init+0x94>)
 800039e:	f000 fa9f 	bl	80008e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003a2:	bf00      	nop
 80003a4:	3720      	adds	r7, #32
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	40021000 	.word	0x40021000
 80003b0:	40011000 	.word	0x40011000

080003b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003b8:	b672      	cpsid	i
}
 80003ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003bc:	e7fe      	b.n	80003bc <Error_Handler+0x8>
	...

080003c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b085      	sub	sp, #20
 80003c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003c6:	4b15      	ldr	r3, [pc, #84]	; (800041c <HAL_MspInit+0x5c>)
 80003c8:	699b      	ldr	r3, [r3, #24]
 80003ca:	4a14      	ldr	r2, [pc, #80]	; (800041c <HAL_MspInit+0x5c>)
 80003cc:	f043 0301 	orr.w	r3, r3, #1
 80003d0:	6193      	str	r3, [r2, #24]
 80003d2:	4b12      	ldr	r3, [pc, #72]	; (800041c <HAL_MspInit+0x5c>)
 80003d4:	699b      	ldr	r3, [r3, #24]
 80003d6:	f003 0301 	and.w	r3, r3, #1
 80003da:	60bb      	str	r3, [r7, #8]
 80003dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003de:	4b0f      	ldr	r3, [pc, #60]	; (800041c <HAL_MspInit+0x5c>)
 80003e0:	69db      	ldr	r3, [r3, #28]
 80003e2:	4a0e      	ldr	r2, [pc, #56]	; (800041c <HAL_MspInit+0x5c>)
 80003e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003e8:	61d3      	str	r3, [r2, #28]
 80003ea:	4b0c      	ldr	r3, [pc, #48]	; (800041c <HAL_MspInit+0x5c>)
 80003ec:	69db      	ldr	r3, [r3, #28]
 80003ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003f2:	607b      	str	r3, [r7, #4]
 80003f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003f6:	4b0a      	ldr	r3, [pc, #40]	; (8000420 <HAL_MspInit+0x60>)
 80003f8:	685b      	ldr	r3, [r3, #4]
 80003fa:	60fb      	str	r3, [r7, #12]
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000402:	60fb      	str	r3, [r7, #12]
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800040a:	60fb      	str	r3, [r7, #12]
 800040c:	4a04      	ldr	r2, [pc, #16]	; (8000420 <HAL_MspInit+0x60>)
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000412:	bf00      	nop
 8000414:	3714      	adds	r7, #20
 8000416:	46bd      	mov	sp, r7
 8000418:	bc80      	pop	{r7}
 800041a:	4770      	bx	lr
 800041c:	40021000 	.word	0x40021000
 8000420:	40010000 	.word	0x40010000

08000424 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000424:	b480      	push	{r7}
 8000426:	b085      	sub	sp, #20
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a09      	ldr	r2, [pc, #36]	; (8000458 <HAL_TIM_Base_MspInit+0x34>)
 8000432:	4293      	cmp	r3, r2
 8000434:	d10b      	bne.n	800044e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000436:	4b09      	ldr	r3, [pc, #36]	; (800045c <HAL_TIM_Base_MspInit+0x38>)
 8000438:	699b      	ldr	r3, [r3, #24]
 800043a:	4a08      	ldr	r2, [pc, #32]	; (800045c <HAL_TIM_Base_MspInit+0x38>)
 800043c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000440:	6193      	str	r3, [r2, #24]
 8000442:	4b06      	ldr	r3, [pc, #24]	; (800045c <HAL_TIM_Base_MspInit+0x38>)
 8000444:	699b      	ldr	r3, [r3, #24]
 8000446:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800044a:	60fb      	str	r3, [r7, #12]
 800044c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800044e:	bf00      	nop
 8000450:	3714      	adds	r7, #20
 8000452:	46bd      	mov	sp, r7
 8000454:	bc80      	pop	{r7}
 8000456:	4770      	bx	lr
 8000458:	40012c00 	.word	0x40012c00
 800045c:	40021000 	.word	0x40021000

08000460 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b088      	sub	sp, #32
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000468:	f107 0310 	add.w	r3, r7, #16
 800046c:	2200      	movs	r2, #0
 800046e:	601a      	str	r2, [r3, #0]
 8000470:	605a      	str	r2, [r3, #4]
 8000472:	609a      	str	r2, [r3, #8]
 8000474:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4a1c      	ldr	r2, [pc, #112]	; (80004ec <HAL_UART_MspInit+0x8c>)
 800047c:	4293      	cmp	r3, r2
 800047e:	d131      	bne.n	80004e4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000480:	4b1b      	ldr	r3, [pc, #108]	; (80004f0 <HAL_UART_MspInit+0x90>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	4a1a      	ldr	r2, [pc, #104]	; (80004f0 <HAL_UART_MspInit+0x90>)
 8000486:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800048a:	6193      	str	r3, [r2, #24]
 800048c:	4b18      	ldr	r3, [pc, #96]	; (80004f0 <HAL_UART_MspInit+0x90>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000494:	60fb      	str	r3, [r7, #12]
 8000496:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000498:	4b15      	ldr	r3, [pc, #84]	; (80004f0 <HAL_UART_MspInit+0x90>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	4a14      	ldr	r2, [pc, #80]	; (80004f0 <HAL_UART_MspInit+0x90>)
 800049e:	f043 0304 	orr.w	r3, r3, #4
 80004a2:	6193      	str	r3, [r2, #24]
 80004a4:	4b12      	ldr	r3, [pc, #72]	; (80004f0 <HAL_UART_MspInit+0x90>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	f003 0304 	and.w	r3, r3, #4
 80004ac:	60bb      	str	r3, [r7, #8]
 80004ae:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004b6:	2302      	movs	r3, #2
 80004b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004ba:	2303      	movs	r3, #3
 80004bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004be:	f107 0310 	add.w	r3, r7, #16
 80004c2:	4619      	mov	r1, r3
 80004c4:	480b      	ldr	r0, [pc, #44]	; (80004f4 <HAL_UART_MspInit+0x94>)
 80004c6:	f000 fa0b 	bl	80008e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004d0:	2300      	movs	r3, #0
 80004d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d4:	2300      	movs	r3, #0
 80004d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d8:	f107 0310 	add.w	r3, r7, #16
 80004dc:	4619      	mov	r1, r3
 80004de:	4805      	ldr	r0, [pc, #20]	; (80004f4 <HAL_UART_MspInit+0x94>)
 80004e0:	f000 f9fe 	bl	80008e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80004e4:	bf00      	nop
 80004e6:	3720      	adds	r7, #32
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	40013800 	.word	0x40013800
 80004f0:	40021000 	.word	0x40021000
 80004f4:	40010800 	.word	0x40010800

080004f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004fc:	e7fe      	b.n	80004fc <NMI_Handler+0x4>

080004fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004fe:	b480      	push	{r7}
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000502:	e7fe      	b.n	8000502 <HardFault_Handler+0x4>

08000504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000508:	e7fe      	b.n	8000508 <MemManage_Handler+0x4>

0800050a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800050a:	b480      	push	{r7}
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800050e:	e7fe      	b.n	800050e <BusFault_Handler+0x4>

08000510 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000514:	e7fe      	b.n	8000514 <UsageFault_Handler+0x4>

08000516 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000516:	b480      	push	{r7}
 8000518:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800051a:	bf00      	nop
 800051c:	46bd      	mov	sp, r7
 800051e:	bc80      	pop	{r7}
 8000520:	4770      	bx	lr

08000522 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000522:	b480      	push	{r7}
 8000524:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000526:	bf00      	nop
 8000528:	46bd      	mov	sp, r7
 800052a:	bc80      	pop	{r7}
 800052c:	4770      	bx	lr

0800052e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800052e:	b480      	push	{r7}
 8000530:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000532:	bf00      	nop
 8000534:	46bd      	mov	sp, r7
 8000536:	bc80      	pop	{r7}
 8000538:	4770      	bx	lr

0800053a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800053a:	b580      	push	{r7, lr}
 800053c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800053e:	f000 f8ab 	bl	8000698 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}
	...

08000548 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b086      	sub	sp, #24
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000550:	4a14      	ldr	r2, [pc, #80]	; (80005a4 <_sbrk+0x5c>)
 8000552:	4b15      	ldr	r3, [pc, #84]	; (80005a8 <_sbrk+0x60>)
 8000554:	1ad3      	subs	r3, r2, r3
 8000556:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000558:	697b      	ldr	r3, [r7, #20]
 800055a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800055c:	4b13      	ldr	r3, [pc, #76]	; (80005ac <_sbrk+0x64>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d102      	bne.n	800056a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000564:	4b11      	ldr	r3, [pc, #68]	; (80005ac <_sbrk+0x64>)
 8000566:	4a12      	ldr	r2, [pc, #72]	; (80005b0 <_sbrk+0x68>)
 8000568:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800056a:	4b10      	ldr	r3, [pc, #64]	; (80005ac <_sbrk+0x64>)
 800056c:	681a      	ldr	r2, [r3, #0]
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4413      	add	r3, r2
 8000572:	693a      	ldr	r2, [r7, #16]
 8000574:	429a      	cmp	r2, r3
 8000576:	d207      	bcs.n	8000588 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000578:	f001 fc0e 	bl	8001d98 <__errno>
 800057c:	4603      	mov	r3, r0
 800057e:	220c      	movs	r2, #12
 8000580:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000582:	f04f 33ff 	mov.w	r3, #4294967295
 8000586:	e009      	b.n	800059c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000588:	4b08      	ldr	r3, [pc, #32]	; (80005ac <_sbrk+0x64>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800058e:	4b07      	ldr	r3, [pc, #28]	; (80005ac <_sbrk+0x64>)
 8000590:	681a      	ldr	r2, [r3, #0]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4413      	add	r3, r2
 8000596:	4a05      	ldr	r2, [pc, #20]	; (80005ac <_sbrk+0x64>)
 8000598:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800059a:	68fb      	ldr	r3, [r7, #12]
}
 800059c:	4618      	mov	r0, r3
 800059e:	3718      	adds	r7, #24
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20005000 	.word	0x20005000
 80005a8:	00000400 	.word	0x00000400
 80005ac:	20000108 	.word	0x20000108
 80005b0:	20000258 	.word	0x20000258

080005b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bc80      	pop	{r7}
 80005be:	4770      	bx	lr

080005c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005c0:	f7ff fff8 	bl	80005b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005c4:	480b      	ldr	r0, [pc, #44]	; (80005f4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005c6:	490c      	ldr	r1, [pc, #48]	; (80005f8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005c8:	4a0c      	ldr	r2, [pc, #48]	; (80005fc <LoopFillZerobss+0x16>)
  movs r3, #0
 80005ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005cc:	e002      	b.n	80005d4 <LoopCopyDataInit>

080005ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005d2:	3304      	adds	r3, #4

080005d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005d8:	d3f9      	bcc.n	80005ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005da:	4a09      	ldr	r2, [pc, #36]	; (8000600 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005dc:	4c09      	ldr	r4, [pc, #36]	; (8000604 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005e0:	e001      	b.n	80005e6 <LoopFillZerobss>

080005e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005e4:	3204      	adds	r2, #4

080005e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005e8:	d3fb      	bcc.n	80005e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005ea:	f001 fbdb 	bl	8001da4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ee:	f7ff fdad 	bl	800014c <main>
  bx lr
 80005f2:	4770      	bx	lr
  ldr r0, =_sdata
 80005f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005f8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80005fc:	08002738 	.word	0x08002738
  ldr r2, =_sbss
 8000600:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000604:	20000258 	.word	0x20000258

08000608 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000608:	e7fe      	b.n	8000608 <ADC1_2_IRQHandler>
	...

0800060c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000610:	4b08      	ldr	r3, [pc, #32]	; (8000634 <HAL_Init+0x28>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a07      	ldr	r2, [pc, #28]	; (8000634 <HAL_Init+0x28>)
 8000616:	f043 0310 	orr.w	r3, r3, #16
 800061a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800061c:	2003      	movs	r0, #3
 800061e:	f000 f92b 	bl	8000878 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000622:	200f      	movs	r0, #15
 8000624:	f000 f808 	bl	8000638 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000628:	f7ff feca 	bl	80003c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800062c:	2300      	movs	r3, #0
}
 800062e:	4618      	mov	r0, r3
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40022000 	.word	0x40022000

08000638 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000640:	4b12      	ldr	r3, [pc, #72]	; (800068c <HAL_InitTick+0x54>)
 8000642:	681a      	ldr	r2, [r3, #0]
 8000644:	4b12      	ldr	r3, [pc, #72]	; (8000690 <HAL_InitTick+0x58>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	4619      	mov	r1, r3
 800064a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800064e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000652:	fbb2 f3f3 	udiv	r3, r2, r3
 8000656:	4618      	mov	r0, r3
 8000658:	f000 f935 	bl	80008c6 <HAL_SYSTICK_Config>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000662:	2301      	movs	r3, #1
 8000664:	e00e      	b.n	8000684 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2b0f      	cmp	r3, #15
 800066a:	d80a      	bhi.n	8000682 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800066c:	2200      	movs	r2, #0
 800066e:	6879      	ldr	r1, [r7, #4]
 8000670:	f04f 30ff 	mov.w	r0, #4294967295
 8000674:	f000 f90b 	bl	800088e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000678:	4a06      	ldr	r2, [pc, #24]	; (8000694 <HAL_InitTick+0x5c>)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800067e:	2300      	movs	r3, #0
 8000680:	e000      	b.n	8000684 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000682:	2301      	movs	r3, #1
}
 8000684:	4618      	mov	r0, r3
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20000000 	.word	0x20000000
 8000690:	20000008 	.word	0x20000008
 8000694:	20000004 	.word	0x20000004

08000698 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800069c:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <HAL_IncTick+0x1c>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	461a      	mov	r2, r3
 80006a2:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <HAL_IncTick+0x20>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4413      	add	r3, r2
 80006a8:	4a03      	ldr	r2, [pc, #12]	; (80006b8 <HAL_IncTick+0x20>)
 80006aa:	6013      	str	r3, [r2, #0]
}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr
 80006b4:	20000008 	.word	0x20000008
 80006b8:	2000010c 	.word	0x2000010c

080006bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  return uwTick;
 80006c0:	4b02      	ldr	r3, [pc, #8]	; (80006cc <HAL_GetTick+0x10>)
 80006c2:	681b      	ldr	r3, [r3, #0]
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc80      	pop	{r7}
 80006ca:	4770      	bx	lr
 80006cc:	2000010c 	.word	0x2000010c

080006d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006d8:	f7ff fff0 	bl	80006bc <HAL_GetTick>
 80006dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006e8:	d005      	beq.n	80006f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006ea:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <HAL_Delay+0x44>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	461a      	mov	r2, r3
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	4413      	add	r3, r2
 80006f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006f6:	bf00      	nop
 80006f8:	f7ff ffe0 	bl	80006bc <HAL_GetTick>
 80006fc:	4602      	mov	r2, r0
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	1ad3      	subs	r3, r2, r3
 8000702:	68fa      	ldr	r2, [r7, #12]
 8000704:	429a      	cmp	r2, r3
 8000706:	d8f7      	bhi.n	80006f8 <HAL_Delay+0x28>
  {
  }
}
 8000708:	bf00      	nop
 800070a:	bf00      	nop
 800070c:	3710      	adds	r7, #16
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000008 	.word	0x20000008

08000718 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000718:	b480      	push	{r7}
 800071a:	b085      	sub	sp, #20
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	f003 0307 	and.w	r3, r3, #7
 8000726:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <__NVIC_SetPriorityGrouping+0x44>)
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800072e:	68ba      	ldr	r2, [r7, #8]
 8000730:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000734:	4013      	ands	r3, r2
 8000736:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000740:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000748:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800074a:	4a04      	ldr	r2, [pc, #16]	; (800075c <__NVIC_SetPriorityGrouping+0x44>)
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	60d3      	str	r3, [r2, #12]
}
 8000750:	bf00      	nop
 8000752:	3714      	adds	r7, #20
 8000754:	46bd      	mov	sp, r7
 8000756:	bc80      	pop	{r7}
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	e000ed00 	.word	0xe000ed00

08000760 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000764:	4b04      	ldr	r3, [pc, #16]	; (8000778 <__NVIC_GetPriorityGrouping+0x18>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	0a1b      	lsrs	r3, r3, #8
 800076a:	f003 0307 	and.w	r3, r3, #7
}
 800076e:	4618      	mov	r0, r3
 8000770:	46bd      	mov	sp, r7
 8000772:	bc80      	pop	{r7}
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	e000ed00 	.word	0xe000ed00

0800077c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	6039      	str	r1, [r7, #0]
 8000786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078c:	2b00      	cmp	r3, #0
 800078e:	db0a      	blt.n	80007a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	b2da      	uxtb	r2, r3
 8000794:	490c      	ldr	r1, [pc, #48]	; (80007c8 <__NVIC_SetPriority+0x4c>)
 8000796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079a:	0112      	lsls	r2, r2, #4
 800079c:	b2d2      	uxtb	r2, r2
 800079e:	440b      	add	r3, r1
 80007a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007a4:	e00a      	b.n	80007bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	b2da      	uxtb	r2, r3
 80007aa:	4908      	ldr	r1, [pc, #32]	; (80007cc <__NVIC_SetPriority+0x50>)
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	f003 030f 	and.w	r3, r3, #15
 80007b2:	3b04      	subs	r3, #4
 80007b4:	0112      	lsls	r2, r2, #4
 80007b6:	b2d2      	uxtb	r2, r2
 80007b8:	440b      	add	r3, r1
 80007ba:	761a      	strb	r2, [r3, #24]
}
 80007bc:	bf00      	nop
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	e000e100 	.word	0xe000e100
 80007cc:	e000ed00 	.word	0xe000ed00

080007d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b089      	sub	sp, #36	; 0x24
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	60f8      	str	r0, [r7, #12]
 80007d8:	60b9      	str	r1, [r7, #8]
 80007da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	f003 0307 	and.w	r3, r3, #7
 80007e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007e4:	69fb      	ldr	r3, [r7, #28]
 80007e6:	f1c3 0307 	rsb	r3, r3, #7
 80007ea:	2b04      	cmp	r3, #4
 80007ec:	bf28      	it	cs
 80007ee:	2304      	movcs	r3, #4
 80007f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	3304      	adds	r3, #4
 80007f6:	2b06      	cmp	r3, #6
 80007f8:	d902      	bls.n	8000800 <NVIC_EncodePriority+0x30>
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	3b03      	subs	r3, #3
 80007fe:	e000      	b.n	8000802 <NVIC_EncodePriority+0x32>
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000804:	f04f 32ff 	mov.w	r2, #4294967295
 8000808:	69bb      	ldr	r3, [r7, #24]
 800080a:	fa02 f303 	lsl.w	r3, r2, r3
 800080e:	43da      	mvns	r2, r3
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	401a      	ands	r2, r3
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000818:	f04f 31ff 	mov.w	r1, #4294967295
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	fa01 f303 	lsl.w	r3, r1, r3
 8000822:	43d9      	mvns	r1, r3
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000828:	4313      	orrs	r3, r2
         );
}
 800082a:	4618      	mov	r0, r3
 800082c:	3724      	adds	r7, #36	; 0x24
 800082e:	46bd      	mov	sp, r7
 8000830:	bc80      	pop	{r7}
 8000832:	4770      	bx	lr

08000834 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	3b01      	subs	r3, #1
 8000840:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000844:	d301      	bcc.n	800084a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000846:	2301      	movs	r3, #1
 8000848:	e00f      	b.n	800086a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800084a:	4a0a      	ldr	r2, [pc, #40]	; (8000874 <SysTick_Config+0x40>)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	3b01      	subs	r3, #1
 8000850:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000852:	210f      	movs	r1, #15
 8000854:	f04f 30ff 	mov.w	r0, #4294967295
 8000858:	f7ff ff90 	bl	800077c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800085c:	4b05      	ldr	r3, [pc, #20]	; (8000874 <SysTick_Config+0x40>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000862:	4b04      	ldr	r3, [pc, #16]	; (8000874 <SysTick_Config+0x40>)
 8000864:	2207      	movs	r2, #7
 8000866:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000868:	2300      	movs	r3, #0
}
 800086a:	4618      	mov	r0, r3
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	e000e010 	.word	0xe000e010

08000878 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f7ff ff49 	bl	8000718 <__NVIC_SetPriorityGrouping>
}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800088e:	b580      	push	{r7, lr}
 8000890:	b086      	sub	sp, #24
 8000892:	af00      	add	r7, sp, #0
 8000894:	4603      	mov	r3, r0
 8000896:	60b9      	str	r1, [r7, #8]
 8000898:	607a      	str	r2, [r7, #4]
 800089a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008a0:	f7ff ff5e 	bl	8000760 <__NVIC_GetPriorityGrouping>
 80008a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008a6:	687a      	ldr	r2, [r7, #4]
 80008a8:	68b9      	ldr	r1, [r7, #8]
 80008aa:	6978      	ldr	r0, [r7, #20]
 80008ac:	f7ff ff90 	bl	80007d0 <NVIC_EncodePriority>
 80008b0:	4602      	mov	r2, r0
 80008b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008b6:	4611      	mov	r1, r2
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff ff5f 	bl	800077c <__NVIC_SetPriority>
}
 80008be:	bf00      	nop
 80008c0:	3718      	adds	r7, #24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b082      	sub	sp, #8
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f7ff ffb0 	bl	8000834 <SysTick_Config>
 80008d4:	4603      	mov	r3, r0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b08b      	sub	sp, #44	; 0x2c
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80008ee:	2300      	movs	r3, #0
 80008f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008f2:	e169      	b.n	8000bc8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80008f4:	2201      	movs	r2, #1
 80008f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f8:	fa02 f303 	lsl.w	r3, r2, r3
 80008fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	69fa      	ldr	r2, [r7, #28]
 8000904:	4013      	ands	r3, r2
 8000906:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000908:	69ba      	ldr	r2, [r7, #24]
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	429a      	cmp	r2, r3
 800090e:	f040 8158 	bne.w	8000bc2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	4a9a      	ldr	r2, [pc, #616]	; (8000b80 <HAL_GPIO_Init+0x2a0>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d05e      	beq.n	80009da <HAL_GPIO_Init+0xfa>
 800091c:	4a98      	ldr	r2, [pc, #608]	; (8000b80 <HAL_GPIO_Init+0x2a0>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d875      	bhi.n	8000a0e <HAL_GPIO_Init+0x12e>
 8000922:	4a98      	ldr	r2, [pc, #608]	; (8000b84 <HAL_GPIO_Init+0x2a4>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d058      	beq.n	80009da <HAL_GPIO_Init+0xfa>
 8000928:	4a96      	ldr	r2, [pc, #600]	; (8000b84 <HAL_GPIO_Init+0x2a4>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d86f      	bhi.n	8000a0e <HAL_GPIO_Init+0x12e>
 800092e:	4a96      	ldr	r2, [pc, #600]	; (8000b88 <HAL_GPIO_Init+0x2a8>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d052      	beq.n	80009da <HAL_GPIO_Init+0xfa>
 8000934:	4a94      	ldr	r2, [pc, #592]	; (8000b88 <HAL_GPIO_Init+0x2a8>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d869      	bhi.n	8000a0e <HAL_GPIO_Init+0x12e>
 800093a:	4a94      	ldr	r2, [pc, #592]	; (8000b8c <HAL_GPIO_Init+0x2ac>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d04c      	beq.n	80009da <HAL_GPIO_Init+0xfa>
 8000940:	4a92      	ldr	r2, [pc, #584]	; (8000b8c <HAL_GPIO_Init+0x2ac>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d863      	bhi.n	8000a0e <HAL_GPIO_Init+0x12e>
 8000946:	4a92      	ldr	r2, [pc, #584]	; (8000b90 <HAL_GPIO_Init+0x2b0>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d046      	beq.n	80009da <HAL_GPIO_Init+0xfa>
 800094c:	4a90      	ldr	r2, [pc, #576]	; (8000b90 <HAL_GPIO_Init+0x2b0>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d85d      	bhi.n	8000a0e <HAL_GPIO_Init+0x12e>
 8000952:	2b12      	cmp	r3, #18
 8000954:	d82a      	bhi.n	80009ac <HAL_GPIO_Init+0xcc>
 8000956:	2b12      	cmp	r3, #18
 8000958:	d859      	bhi.n	8000a0e <HAL_GPIO_Init+0x12e>
 800095a:	a201      	add	r2, pc, #4	; (adr r2, 8000960 <HAL_GPIO_Init+0x80>)
 800095c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000960:	080009db 	.word	0x080009db
 8000964:	080009b5 	.word	0x080009b5
 8000968:	080009c7 	.word	0x080009c7
 800096c:	08000a09 	.word	0x08000a09
 8000970:	08000a0f 	.word	0x08000a0f
 8000974:	08000a0f 	.word	0x08000a0f
 8000978:	08000a0f 	.word	0x08000a0f
 800097c:	08000a0f 	.word	0x08000a0f
 8000980:	08000a0f 	.word	0x08000a0f
 8000984:	08000a0f 	.word	0x08000a0f
 8000988:	08000a0f 	.word	0x08000a0f
 800098c:	08000a0f 	.word	0x08000a0f
 8000990:	08000a0f 	.word	0x08000a0f
 8000994:	08000a0f 	.word	0x08000a0f
 8000998:	08000a0f 	.word	0x08000a0f
 800099c:	08000a0f 	.word	0x08000a0f
 80009a0:	08000a0f 	.word	0x08000a0f
 80009a4:	080009bd 	.word	0x080009bd
 80009a8:	080009d1 	.word	0x080009d1
 80009ac:	4a79      	ldr	r2, [pc, #484]	; (8000b94 <HAL_GPIO_Init+0x2b4>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d013      	beq.n	80009da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009b2:	e02c      	b.n	8000a0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	623b      	str	r3, [r7, #32]
          break;
 80009ba:	e029      	b.n	8000a10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	3304      	adds	r3, #4
 80009c2:	623b      	str	r3, [r7, #32]
          break;
 80009c4:	e024      	b.n	8000a10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	68db      	ldr	r3, [r3, #12]
 80009ca:	3308      	adds	r3, #8
 80009cc:	623b      	str	r3, [r7, #32]
          break;
 80009ce:	e01f      	b.n	8000a10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	330c      	adds	r3, #12
 80009d6:	623b      	str	r3, [r7, #32]
          break;
 80009d8:	e01a      	b.n	8000a10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	689b      	ldr	r3, [r3, #8]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d102      	bne.n	80009e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009e2:	2304      	movs	r3, #4
 80009e4:	623b      	str	r3, [r7, #32]
          break;
 80009e6:	e013      	b.n	8000a10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	689b      	ldr	r3, [r3, #8]
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d105      	bne.n	80009fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009f0:	2308      	movs	r3, #8
 80009f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	69fa      	ldr	r2, [r7, #28]
 80009f8:	611a      	str	r2, [r3, #16]
          break;
 80009fa:	e009      	b.n	8000a10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009fc:	2308      	movs	r3, #8
 80009fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	69fa      	ldr	r2, [r7, #28]
 8000a04:	615a      	str	r2, [r3, #20]
          break;
 8000a06:	e003      	b.n	8000a10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	623b      	str	r3, [r7, #32]
          break;
 8000a0c:	e000      	b.n	8000a10 <HAL_GPIO_Init+0x130>
          break;
 8000a0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a10:	69bb      	ldr	r3, [r7, #24]
 8000a12:	2bff      	cmp	r3, #255	; 0xff
 8000a14:	d801      	bhi.n	8000a1a <HAL_GPIO_Init+0x13a>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	e001      	b.n	8000a1e <HAL_GPIO_Init+0x13e>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	3304      	adds	r3, #4
 8000a1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a20:	69bb      	ldr	r3, [r7, #24]
 8000a22:	2bff      	cmp	r3, #255	; 0xff
 8000a24:	d802      	bhi.n	8000a2c <HAL_GPIO_Init+0x14c>
 8000a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	e002      	b.n	8000a32 <HAL_GPIO_Init+0x152>
 8000a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2e:	3b08      	subs	r3, #8
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	210f      	movs	r1, #15
 8000a3a:	693b      	ldr	r3, [r7, #16]
 8000a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a40:	43db      	mvns	r3, r3
 8000a42:	401a      	ands	r2, r3
 8000a44:	6a39      	ldr	r1, [r7, #32]
 8000a46:	693b      	ldr	r3, [r7, #16]
 8000a48:	fa01 f303 	lsl.w	r3, r1, r3
 8000a4c:	431a      	orrs	r2, r3
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	f000 80b1 	beq.w	8000bc2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a60:	4b4d      	ldr	r3, [pc, #308]	; (8000b98 <HAL_GPIO_Init+0x2b8>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	4a4c      	ldr	r2, [pc, #304]	; (8000b98 <HAL_GPIO_Init+0x2b8>)
 8000a66:	f043 0301 	orr.w	r3, r3, #1
 8000a6a:	6193      	str	r3, [r2, #24]
 8000a6c:	4b4a      	ldr	r3, [pc, #296]	; (8000b98 <HAL_GPIO_Init+0x2b8>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	f003 0301 	and.w	r3, r3, #1
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a78:	4a48      	ldr	r2, [pc, #288]	; (8000b9c <HAL_GPIO_Init+0x2bc>)
 8000a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a7c:	089b      	lsrs	r3, r3, #2
 8000a7e:	3302      	adds	r3, #2
 8000a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a88:	f003 0303 	and.w	r3, r3, #3
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	220f      	movs	r2, #15
 8000a90:	fa02 f303 	lsl.w	r3, r2, r3
 8000a94:	43db      	mvns	r3, r3
 8000a96:	68fa      	ldr	r2, [r7, #12]
 8000a98:	4013      	ands	r3, r2
 8000a9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4a40      	ldr	r2, [pc, #256]	; (8000ba0 <HAL_GPIO_Init+0x2c0>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d013      	beq.n	8000acc <HAL_GPIO_Init+0x1ec>
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4a3f      	ldr	r2, [pc, #252]	; (8000ba4 <HAL_GPIO_Init+0x2c4>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d00d      	beq.n	8000ac8 <HAL_GPIO_Init+0x1e8>
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4a3e      	ldr	r2, [pc, #248]	; (8000ba8 <HAL_GPIO_Init+0x2c8>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d007      	beq.n	8000ac4 <HAL_GPIO_Init+0x1e4>
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	4a3d      	ldr	r2, [pc, #244]	; (8000bac <HAL_GPIO_Init+0x2cc>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d101      	bne.n	8000ac0 <HAL_GPIO_Init+0x1e0>
 8000abc:	2303      	movs	r3, #3
 8000abe:	e006      	b.n	8000ace <HAL_GPIO_Init+0x1ee>
 8000ac0:	2304      	movs	r3, #4
 8000ac2:	e004      	b.n	8000ace <HAL_GPIO_Init+0x1ee>
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	e002      	b.n	8000ace <HAL_GPIO_Init+0x1ee>
 8000ac8:	2301      	movs	r3, #1
 8000aca:	e000      	b.n	8000ace <HAL_GPIO_Init+0x1ee>
 8000acc:	2300      	movs	r3, #0
 8000ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ad0:	f002 0203 	and.w	r2, r2, #3
 8000ad4:	0092      	lsls	r2, r2, #2
 8000ad6:	4093      	lsls	r3, r2
 8000ad8:	68fa      	ldr	r2, [r7, #12]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ade:	492f      	ldr	r1, [pc, #188]	; (8000b9c <HAL_GPIO_Init+0x2bc>)
 8000ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae2:	089b      	lsrs	r3, r3, #2
 8000ae4:	3302      	adds	r3, #2
 8000ae6:	68fa      	ldr	r2, [r7, #12]
 8000ae8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d006      	beq.n	8000b06 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000af8:	4b2d      	ldr	r3, [pc, #180]	; (8000bb0 <HAL_GPIO_Init+0x2d0>)
 8000afa:	689a      	ldr	r2, [r3, #8]
 8000afc:	492c      	ldr	r1, [pc, #176]	; (8000bb0 <HAL_GPIO_Init+0x2d0>)
 8000afe:	69bb      	ldr	r3, [r7, #24]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	608b      	str	r3, [r1, #8]
 8000b04:	e006      	b.n	8000b14 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b06:	4b2a      	ldr	r3, [pc, #168]	; (8000bb0 <HAL_GPIO_Init+0x2d0>)
 8000b08:	689a      	ldr	r2, [r3, #8]
 8000b0a:	69bb      	ldr	r3, [r7, #24]
 8000b0c:	43db      	mvns	r3, r3
 8000b0e:	4928      	ldr	r1, [pc, #160]	; (8000bb0 <HAL_GPIO_Init+0x2d0>)
 8000b10:	4013      	ands	r3, r2
 8000b12:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d006      	beq.n	8000b2e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b20:	4b23      	ldr	r3, [pc, #140]	; (8000bb0 <HAL_GPIO_Init+0x2d0>)
 8000b22:	68da      	ldr	r2, [r3, #12]
 8000b24:	4922      	ldr	r1, [pc, #136]	; (8000bb0 <HAL_GPIO_Init+0x2d0>)
 8000b26:	69bb      	ldr	r3, [r7, #24]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	60cb      	str	r3, [r1, #12]
 8000b2c:	e006      	b.n	8000b3c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b2e:	4b20      	ldr	r3, [pc, #128]	; (8000bb0 <HAL_GPIO_Init+0x2d0>)
 8000b30:	68da      	ldr	r2, [r3, #12]
 8000b32:	69bb      	ldr	r3, [r7, #24]
 8000b34:	43db      	mvns	r3, r3
 8000b36:	491e      	ldr	r1, [pc, #120]	; (8000bb0 <HAL_GPIO_Init+0x2d0>)
 8000b38:	4013      	ands	r3, r2
 8000b3a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d006      	beq.n	8000b56 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b48:	4b19      	ldr	r3, [pc, #100]	; (8000bb0 <HAL_GPIO_Init+0x2d0>)
 8000b4a:	685a      	ldr	r2, [r3, #4]
 8000b4c:	4918      	ldr	r1, [pc, #96]	; (8000bb0 <HAL_GPIO_Init+0x2d0>)
 8000b4e:	69bb      	ldr	r3, [r7, #24]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	604b      	str	r3, [r1, #4]
 8000b54:	e006      	b.n	8000b64 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b56:	4b16      	ldr	r3, [pc, #88]	; (8000bb0 <HAL_GPIO_Init+0x2d0>)
 8000b58:	685a      	ldr	r2, [r3, #4]
 8000b5a:	69bb      	ldr	r3, [r7, #24]
 8000b5c:	43db      	mvns	r3, r3
 8000b5e:	4914      	ldr	r1, [pc, #80]	; (8000bb0 <HAL_GPIO_Init+0x2d0>)
 8000b60:	4013      	ands	r3, r2
 8000b62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d021      	beq.n	8000bb4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b70:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <HAL_GPIO_Init+0x2d0>)
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	490e      	ldr	r1, [pc, #56]	; (8000bb0 <HAL_GPIO_Init+0x2d0>)
 8000b76:	69bb      	ldr	r3, [r7, #24]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	600b      	str	r3, [r1, #0]
 8000b7c:	e021      	b.n	8000bc2 <HAL_GPIO_Init+0x2e2>
 8000b7e:	bf00      	nop
 8000b80:	10320000 	.word	0x10320000
 8000b84:	10310000 	.word	0x10310000
 8000b88:	10220000 	.word	0x10220000
 8000b8c:	10210000 	.word	0x10210000
 8000b90:	10120000 	.word	0x10120000
 8000b94:	10110000 	.word	0x10110000
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	40010000 	.word	0x40010000
 8000ba0:	40010800 	.word	0x40010800
 8000ba4:	40010c00 	.word	0x40010c00
 8000ba8:	40011000 	.word	0x40011000
 8000bac:	40011400 	.word	0x40011400
 8000bb0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bb4:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <HAL_GPIO_Init+0x304>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	43db      	mvns	r3, r3
 8000bbc:	4909      	ldr	r1, [pc, #36]	; (8000be4 <HAL_GPIO_Init+0x304>)
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bce:	fa22 f303 	lsr.w	r3, r2, r3
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	f47f ae8e 	bne.w	80008f4 <HAL_GPIO_Init+0x14>
  }
}
 8000bd8:	bf00      	nop
 8000bda:	bf00      	nop
 8000bdc:	372c      	adds	r7, #44	; 0x2c
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr
 8000be4:	40010400 	.word	0x40010400

08000be8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	460b      	mov	r3, r1
 8000bf2:	807b      	strh	r3, [r7, #2]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bf8:	787b      	ldrb	r3, [r7, #1]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d003      	beq.n	8000c06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bfe:	887a      	ldrh	r2, [r7, #2]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c04:	e003      	b.n	8000c0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c06:	887b      	ldrh	r3, [r7, #2]
 8000c08:	041a      	lsls	r2, r3, #16
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	611a      	str	r2, [r3, #16]
}
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr

08000c18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d101      	bne.n	8000c2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	e272      	b.n	8001110 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f000 8087 	beq.w	8000d46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c38:	4b92      	ldr	r3, [pc, #584]	; (8000e84 <HAL_RCC_OscConfig+0x26c>)
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f003 030c 	and.w	r3, r3, #12
 8000c40:	2b04      	cmp	r3, #4
 8000c42:	d00c      	beq.n	8000c5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c44:	4b8f      	ldr	r3, [pc, #572]	; (8000e84 <HAL_RCC_OscConfig+0x26c>)
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f003 030c 	and.w	r3, r3, #12
 8000c4c:	2b08      	cmp	r3, #8
 8000c4e:	d112      	bne.n	8000c76 <HAL_RCC_OscConfig+0x5e>
 8000c50:	4b8c      	ldr	r3, [pc, #560]	; (8000e84 <HAL_RCC_OscConfig+0x26c>)
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c5c:	d10b      	bne.n	8000c76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c5e:	4b89      	ldr	r3, [pc, #548]	; (8000e84 <HAL_RCC_OscConfig+0x26c>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d06c      	beq.n	8000d44 <HAL_RCC_OscConfig+0x12c>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d168      	bne.n	8000d44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	e24c      	b.n	8001110 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c7e:	d106      	bne.n	8000c8e <HAL_RCC_OscConfig+0x76>
 8000c80:	4b80      	ldr	r3, [pc, #512]	; (8000e84 <HAL_RCC_OscConfig+0x26c>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a7f      	ldr	r2, [pc, #508]	; (8000e84 <HAL_RCC_OscConfig+0x26c>)
 8000c86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c8a:	6013      	str	r3, [r2, #0]
 8000c8c:	e02e      	b.n	8000cec <HAL_RCC_OscConfig+0xd4>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d10c      	bne.n	8000cb0 <HAL_RCC_OscConfig+0x98>
 8000c96:	4b7b      	ldr	r3, [pc, #492]	; (8000e84 <HAL_RCC_OscConfig+0x26c>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a7a      	ldr	r2, [pc, #488]	; (8000e84 <HAL_RCC_OscConfig+0x26c>)
 8000c9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ca0:	6013      	str	r3, [r2, #0]
 8000ca2:	4b78      	ldr	r3, [pc, #480]	; (8000e84 <HAL_RCC_OscConfig+0x26c>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a77      	ldr	r2, [pc, #476]	; (8000e84 <HAL_RCC_OscConfig+0x26c>)
 8000ca8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cac:	6013      	str	r3, [r2, #0]
 8000cae:	e01d      	b.n	8000cec <HAL_RCC_OscConfig+0xd4>
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cb8:	d10c      	bne.n	8000cd4 <HAL_RCC_OscConfig+0xbc>
 8000cba:	4b72      	ldr	r3, [pc, #456]	; (8000e84 <HAL_RCC_OscConfig+0x26c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a71      	ldr	r2, [pc, #452]	; (8000e84 <HAL_RCC_OscConfig+0x26c>)
 8000cc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cc4:	6013      	str	r3, [r2, #0]
 8000cc6:	4b6f      	ldr	r3, [pc, #444]	; (8000e84 <HAL_RCC_OscConfig+0x26c>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a6e      	ldr	r2, [pc, #440]	; (8000e84 <HAL_RCC_OscConfig+0x26c>)
 8000ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cd0:	6013      	str	r3, [r2, #0]
 8000cd2:	e00b      	b.n	8000cec <HAL_RCC_OscConfig+0xd4>
 8000cd4:	4b6b      	ldr	r3, [pc, #428]	; (8000e84 <HAL_RCC_OscConfig+0x26c>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a6a      	ldr	r2, [pc, #424]	; (8000e84 <HAL_RCC_OscConfig+0x26c>)
 8000cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cde:	6013      	str	r3, [r2, #0]
 8000ce0:	4b68      	ldr	r3, [pc, #416]	; (8000e84 <HAL_RCC_OscConfig+0x26c>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a67      	ldr	r2, [pc, #412]	; (8000e84 <HAL_RCC_OscConfig+0x26c>)
 8000ce6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d013      	beq.n	8000d1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cf4:	f7ff fce2 	bl	80006bc <HAL_GetTick>
 8000cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cfa:	e008      	b.n	8000d0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cfc:	f7ff fcde 	bl	80006bc <HAL_GetTick>
 8000d00:	4602      	mov	r2, r0
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	2b64      	cmp	r3, #100	; 0x64
 8000d08:	d901      	bls.n	8000d0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	e200      	b.n	8001110 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d0e:	4b5d      	ldr	r3, [pc, #372]	; (8000e84 <HAL_RCC_OscConfig+0x26c>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d0f0      	beq.n	8000cfc <HAL_RCC_OscConfig+0xe4>
 8000d1a:	e014      	b.n	8000d46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d1c:	f7ff fcce 	bl	80006bc <HAL_GetTick>
 8000d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d22:	e008      	b.n	8000d36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d24:	f7ff fcca 	bl	80006bc <HAL_GetTick>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	2b64      	cmp	r3, #100	; 0x64
 8000d30:	d901      	bls.n	8000d36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d32:	2303      	movs	r3, #3
 8000d34:	e1ec      	b.n	8001110 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d36:	4b53      	ldr	r3, [pc, #332]	; (8000e84 <HAL_RCC_OscConfig+0x26c>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d1f0      	bne.n	8000d24 <HAL_RCC_OscConfig+0x10c>
 8000d42:	e000      	b.n	8000d46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f003 0302 	and.w	r3, r3, #2
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d063      	beq.n	8000e1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d52:	4b4c      	ldr	r3, [pc, #304]	; (8000e84 <HAL_RCC_OscConfig+0x26c>)
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f003 030c 	and.w	r3, r3, #12
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d00b      	beq.n	8000d76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d5e:	4b49      	ldr	r3, [pc, #292]	; (8000e84 <HAL_RCC_OscConfig+0x26c>)
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f003 030c 	and.w	r3, r3, #12
 8000d66:	2b08      	cmp	r3, #8
 8000d68:	d11c      	bne.n	8000da4 <HAL_RCC_OscConfig+0x18c>
 8000d6a:	4b46      	ldr	r3, [pc, #280]	; (8000e84 <HAL_RCC_OscConfig+0x26c>)
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d116      	bne.n	8000da4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d76:	4b43      	ldr	r3, [pc, #268]	; (8000e84 <HAL_RCC_OscConfig+0x26c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f003 0302 	and.w	r3, r3, #2
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d005      	beq.n	8000d8e <HAL_RCC_OscConfig+0x176>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	691b      	ldr	r3, [r3, #16]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d001      	beq.n	8000d8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e1c0      	b.n	8001110 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d8e:	4b3d      	ldr	r3, [pc, #244]	; (8000e84 <HAL_RCC_OscConfig+0x26c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	695b      	ldr	r3, [r3, #20]
 8000d9a:	00db      	lsls	r3, r3, #3
 8000d9c:	4939      	ldr	r1, [pc, #228]	; (8000e84 <HAL_RCC_OscConfig+0x26c>)
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000da2:	e03a      	b.n	8000e1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	691b      	ldr	r3, [r3, #16]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d020      	beq.n	8000dee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dac:	4b36      	ldr	r3, [pc, #216]	; (8000e88 <HAL_RCC_OscConfig+0x270>)
 8000dae:	2201      	movs	r2, #1
 8000db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000db2:	f7ff fc83 	bl	80006bc <HAL_GetTick>
 8000db6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000db8:	e008      	b.n	8000dcc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dba:	f7ff fc7f 	bl	80006bc <HAL_GetTick>
 8000dbe:	4602      	mov	r2, r0
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	1ad3      	subs	r3, r2, r3
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d901      	bls.n	8000dcc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	e1a1      	b.n	8001110 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dcc:	4b2d      	ldr	r3, [pc, #180]	; (8000e84 <HAL_RCC_OscConfig+0x26c>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f003 0302 	and.w	r3, r3, #2
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d0f0      	beq.n	8000dba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dd8:	4b2a      	ldr	r3, [pc, #168]	; (8000e84 <HAL_RCC_OscConfig+0x26c>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	695b      	ldr	r3, [r3, #20]
 8000de4:	00db      	lsls	r3, r3, #3
 8000de6:	4927      	ldr	r1, [pc, #156]	; (8000e84 <HAL_RCC_OscConfig+0x26c>)
 8000de8:	4313      	orrs	r3, r2
 8000dea:	600b      	str	r3, [r1, #0]
 8000dec:	e015      	b.n	8000e1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dee:	4b26      	ldr	r3, [pc, #152]	; (8000e88 <HAL_RCC_OscConfig+0x270>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000df4:	f7ff fc62 	bl	80006bc <HAL_GetTick>
 8000df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dfa:	e008      	b.n	8000e0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dfc:	f7ff fc5e 	bl	80006bc <HAL_GetTick>
 8000e00:	4602      	mov	r2, r0
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d901      	bls.n	8000e0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	e180      	b.n	8001110 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e0e:	4b1d      	ldr	r3, [pc, #116]	; (8000e84 <HAL_RCC_OscConfig+0x26c>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f003 0302 	and.w	r3, r3, #2
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d1f0      	bne.n	8000dfc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f003 0308 	and.w	r3, r3, #8
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d03a      	beq.n	8000e9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	699b      	ldr	r3, [r3, #24]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d019      	beq.n	8000e62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e2e:	4b17      	ldr	r3, [pc, #92]	; (8000e8c <HAL_RCC_OscConfig+0x274>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e34:	f7ff fc42 	bl	80006bc <HAL_GetTick>
 8000e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e3a:	e008      	b.n	8000e4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e3c:	f7ff fc3e 	bl	80006bc <HAL_GetTick>
 8000e40:	4602      	mov	r2, r0
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	2b02      	cmp	r3, #2
 8000e48:	d901      	bls.n	8000e4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	e160      	b.n	8001110 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e4e:	4b0d      	ldr	r3, [pc, #52]	; (8000e84 <HAL_RCC_OscConfig+0x26c>)
 8000e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e52:	f003 0302 	and.w	r3, r3, #2
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d0f0      	beq.n	8000e3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	f000 face 	bl	80013fc <RCC_Delay>
 8000e60:	e01c      	b.n	8000e9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e62:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <HAL_RCC_OscConfig+0x274>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e68:	f7ff fc28 	bl	80006bc <HAL_GetTick>
 8000e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e6e:	e00f      	b.n	8000e90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e70:	f7ff fc24 	bl	80006bc <HAL_GetTick>
 8000e74:	4602      	mov	r2, r0
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	d908      	bls.n	8000e90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	e146      	b.n	8001110 <HAL_RCC_OscConfig+0x4f8>
 8000e82:	bf00      	nop
 8000e84:	40021000 	.word	0x40021000
 8000e88:	42420000 	.word	0x42420000
 8000e8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e90:	4b92      	ldr	r3, [pc, #584]	; (80010dc <HAL_RCC_OscConfig+0x4c4>)
 8000e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e94:	f003 0302 	and.w	r3, r3, #2
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d1e9      	bne.n	8000e70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f003 0304 	and.w	r3, r3, #4
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	f000 80a6 	beq.w	8000ff6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eae:	4b8b      	ldr	r3, [pc, #556]	; (80010dc <HAL_RCC_OscConfig+0x4c4>)
 8000eb0:	69db      	ldr	r3, [r3, #28]
 8000eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d10d      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000eba:	4b88      	ldr	r3, [pc, #544]	; (80010dc <HAL_RCC_OscConfig+0x4c4>)
 8000ebc:	69db      	ldr	r3, [r3, #28]
 8000ebe:	4a87      	ldr	r2, [pc, #540]	; (80010dc <HAL_RCC_OscConfig+0x4c4>)
 8000ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec4:	61d3      	str	r3, [r2, #28]
 8000ec6:	4b85      	ldr	r3, [pc, #532]	; (80010dc <HAL_RCC_OscConfig+0x4c4>)
 8000ec8:	69db      	ldr	r3, [r3, #28]
 8000eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ece:	60bb      	str	r3, [r7, #8]
 8000ed0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ed6:	4b82      	ldr	r3, [pc, #520]	; (80010e0 <HAL_RCC_OscConfig+0x4c8>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d118      	bne.n	8000f14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ee2:	4b7f      	ldr	r3, [pc, #508]	; (80010e0 <HAL_RCC_OscConfig+0x4c8>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a7e      	ldr	r2, [pc, #504]	; (80010e0 <HAL_RCC_OscConfig+0x4c8>)
 8000ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000eee:	f7ff fbe5 	bl	80006bc <HAL_GetTick>
 8000ef2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ef4:	e008      	b.n	8000f08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ef6:	f7ff fbe1 	bl	80006bc <HAL_GetTick>
 8000efa:	4602      	mov	r2, r0
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	1ad3      	subs	r3, r2, r3
 8000f00:	2b64      	cmp	r3, #100	; 0x64
 8000f02:	d901      	bls.n	8000f08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f04:	2303      	movs	r3, #3
 8000f06:	e103      	b.n	8001110 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f08:	4b75      	ldr	r3, [pc, #468]	; (80010e0 <HAL_RCC_OscConfig+0x4c8>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d0f0      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d106      	bne.n	8000f2a <HAL_RCC_OscConfig+0x312>
 8000f1c:	4b6f      	ldr	r3, [pc, #444]	; (80010dc <HAL_RCC_OscConfig+0x4c4>)
 8000f1e:	6a1b      	ldr	r3, [r3, #32]
 8000f20:	4a6e      	ldr	r2, [pc, #440]	; (80010dc <HAL_RCC_OscConfig+0x4c4>)
 8000f22:	f043 0301 	orr.w	r3, r3, #1
 8000f26:	6213      	str	r3, [r2, #32]
 8000f28:	e02d      	b.n	8000f86 <HAL_RCC_OscConfig+0x36e>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	68db      	ldr	r3, [r3, #12]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d10c      	bne.n	8000f4c <HAL_RCC_OscConfig+0x334>
 8000f32:	4b6a      	ldr	r3, [pc, #424]	; (80010dc <HAL_RCC_OscConfig+0x4c4>)
 8000f34:	6a1b      	ldr	r3, [r3, #32]
 8000f36:	4a69      	ldr	r2, [pc, #420]	; (80010dc <HAL_RCC_OscConfig+0x4c4>)
 8000f38:	f023 0301 	bic.w	r3, r3, #1
 8000f3c:	6213      	str	r3, [r2, #32]
 8000f3e:	4b67      	ldr	r3, [pc, #412]	; (80010dc <HAL_RCC_OscConfig+0x4c4>)
 8000f40:	6a1b      	ldr	r3, [r3, #32]
 8000f42:	4a66      	ldr	r2, [pc, #408]	; (80010dc <HAL_RCC_OscConfig+0x4c4>)
 8000f44:	f023 0304 	bic.w	r3, r3, #4
 8000f48:	6213      	str	r3, [r2, #32]
 8000f4a:	e01c      	b.n	8000f86 <HAL_RCC_OscConfig+0x36e>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	2b05      	cmp	r3, #5
 8000f52:	d10c      	bne.n	8000f6e <HAL_RCC_OscConfig+0x356>
 8000f54:	4b61      	ldr	r3, [pc, #388]	; (80010dc <HAL_RCC_OscConfig+0x4c4>)
 8000f56:	6a1b      	ldr	r3, [r3, #32]
 8000f58:	4a60      	ldr	r2, [pc, #384]	; (80010dc <HAL_RCC_OscConfig+0x4c4>)
 8000f5a:	f043 0304 	orr.w	r3, r3, #4
 8000f5e:	6213      	str	r3, [r2, #32]
 8000f60:	4b5e      	ldr	r3, [pc, #376]	; (80010dc <HAL_RCC_OscConfig+0x4c4>)
 8000f62:	6a1b      	ldr	r3, [r3, #32]
 8000f64:	4a5d      	ldr	r2, [pc, #372]	; (80010dc <HAL_RCC_OscConfig+0x4c4>)
 8000f66:	f043 0301 	orr.w	r3, r3, #1
 8000f6a:	6213      	str	r3, [r2, #32]
 8000f6c:	e00b      	b.n	8000f86 <HAL_RCC_OscConfig+0x36e>
 8000f6e:	4b5b      	ldr	r3, [pc, #364]	; (80010dc <HAL_RCC_OscConfig+0x4c4>)
 8000f70:	6a1b      	ldr	r3, [r3, #32]
 8000f72:	4a5a      	ldr	r2, [pc, #360]	; (80010dc <HAL_RCC_OscConfig+0x4c4>)
 8000f74:	f023 0301 	bic.w	r3, r3, #1
 8000f78:	6213      	str	r3, [r2, #32]
 8000f7a:	4b58      	ldr	r3, [pc, #352]	; (80010dc <HAL_RCC_OscConfig+0x4c4>)
 8000f7c:	6a1b      	ldr	r3, [r3, #32]
 8000f7e:	4a57      	ldr	r2, [pc, #348]	; (80010dc <HAL_RCC_OscConfig+0x4c4>)
 8000f80:	f023 0304 	bic.w	r3, r3, #4
 8000f84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	68db      	ldr	r3, [r3, #12]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d015      	beq.n	8000fba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f8e:	f7ff fb95 	bl	80006bc <HAL_GetTick>
 8000f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f94:	e00a      	b.n	8000fac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f96:	f7ff fb91 	bl	80006bc <HAL_GetTick>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d901      	bls.n	8000fac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	e0b1      	b.n	8001110 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fac:	4b4b      	ldr	r3, [pc, #300]	; (80010dc <HAL_RCC_OscConfig+0x4c4>)
 8000fae:	6a1b      	ldr	r3, [r3, #32]
 8000fb0:	f003 0302 	and.w	r3, r3, #2
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d0ee      	beq.n	8000f96 <HAL_RCC_OscConfig+0x37e>
 8000fb8:	e014      	b.n	8000fe4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fba:	f7ff fb7f 	bl	80006bc <HAL_GetTick>
 8000fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fc0:	e00a      	b.n	8000fd8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fc2:	f7ff fb7b 	bl	80006bc <HAL_GetTick>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d901      	bls.n	8000fd8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	e09b      	b.n	8001110 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fd8:	4b40      	ldr	r3, [pc, #256]	; (80010dc <HAL_RCC_OscConfig+0x4c4>)
 8000fda:	6a1b      	ldr	r3, [r3, #32]
 8000fdc:	f003 0302 	and.w	r3, r3, #2
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d1ee      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000fe4:	7dfb      	ldrb	r3, [r7, #23]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d105      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fea:	4b3c      	ldr	r3, [pc, #240]	; (80010dc <HAL_RCC_OscConfig+0x4c4>)
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	4a3b      	ldr	r2, [pc, #236]	; (80010dc <HAL_RCC_OscConfig+0x4c4>)
 8000ff0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ff4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	69db      	ldr	r3, [r3, #28]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	f000 8087 	beq.w	800110e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001000:	4b36      	ldr	r3, [pc, #216]	; (80010dc <HAL_RCC_OscConfig+0x4c4>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 030c 	and.w	r3, r3, #12
 8001008:	2b08      	cmp	r3, #8
 800100a:	d061      	beq.n	80010d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	69db      	ldr	r3, [r3, #28]
 8001010:	2b02      	cmp	r3, #2
 8001012:	d146      	bne.n	80010a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001014:	4b33      	ldr	r3, [pc, #204]	; (80010e4 <HAL_RCC_OscConfig+0x4cc>)
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800101a:	f7ff fb4f 	bl	80006bc <HAL_GetTick>
 800101e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001020:	e008      	b.n	8001034 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001022:	f7ff fb4b 	bl	80006bc <HAL_GetTick>
 8001026:	4602      	mov	r2, r0
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	2b02      	cmp	r3, #2
 800102e:	d901      	bls.n	8001034 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001030:	2303      	movs	r3, #3
 8001032:	e06d      	b.n	8001110 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001034:	4b29      	ldr	r3, [pc, #164]	; (80010dc <HAL_RCC_OscConfig+0x4c4>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d1f0      	bne.n	8001022 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6a1b      	ldr	r3, [r3, #32]
 8001044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001048:	d108      	bne.n	800105c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800104a:	4b24      	ldr	r3, [pc, #144]	; (80010dc <HAL_RCC_OscConfig+0x4c4>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	4921      	ldr	r1, [pc, #132]	; (80010dc <HAL_RCC_OscConfig+0x4c4>)
 8001058:	4313      	orrs	r3, r2
 800105a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800105c:	4b1f      	ldr	r3, [pc, #124]	; (80010dc <HAL_RCC_OscConfig+0x4c4>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6a19      	ldr	r1, [r3, #32]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106c:	430b      	orrs	r3, r1
 800106e:	491b      	ldr	r1, [pc, #108]	; (80010dc <HAL_RCC_OscConfig+0x4c4>)
 8001070:	4313      	orrs	r3, r2
 8001072:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001074:	4b1b      	ldr	r3, [pc, #108]	; (80010e4 <HAL_RCC_OscConfig+0x4cc>)
 8001076:	2201      	movs	r2, #1
 8001078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800107a:	f7ff fb1f 	bl	80006bc <HAL_GetTick>
 800107e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001080:	e008      	b.n	8001094 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001082:	f7ff fb1b 	bl	80006bc <HAL_GetTick>
 8001086:	4602      	mov	r2, r0
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	2b02      	cmp	r3, #2
 800108e:	d901      	bls.n	8001094 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001090:	2303      	movs	r3, #3
 8001092:	e03d      	b.n	8001110 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001094:	4b11      	ldr	r3, [pc, #68]	; (80010dc <HAL_RCC_OscConfig+0x4c4>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d0f0      	beq.n	8001082 <HAL_RCC_OscConfig+0x46a>
 80010a0:	e035      	b.n	800110e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010a2:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <HAL_RCC_OscConfig+0x4cc>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a8:	f7ff fb08 	bl	80006bc <HAL_GetTick>
 80010ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010ae:	e008      	b.n	80010c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010b0:	f7ff fb04 	bl	80006bc <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d901      	bls.n	80010c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80010be:	2303      	movs	r3, #3
 80010c0:	e026      	b.n	8001110 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <HAL_RCC_OscConfig+0x4c4>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d1f0      	bne.n	80010b0 <HAL_RCC_OscConfig+0x498>
 80010ce:	e01e      	b.n	800110e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	69db      	ldr	r3, [r3, #28]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d107      	bne.n	80010e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e019      	b.n	8001110 <HAL_RCC_OscConfig+0x4f8>
 80010dc:	40021000 	.word	0x40021000
 80010e0:	40007000 	.word	0x40007000
 80010e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80010e8:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <HAL_RCC_OscConfig+0x500>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6a1b      	ldr	r3, [r3, #32]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d106      	bne.n	800110a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001106:	429a      	cmp	r2, r3
 8001108:	d001      	beq.n	800110e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e000      	b.n	8001110 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800110e:	2300      	movs	r3, #0
}
 8001110:	4618      	mov	r0, r3
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40021000 	.word	0x40021000

0800111c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d101      	bne.n	8001130 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	e0d0      	b.n	80012d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001130:	4b6a      	ldr	r3, [pc, #424]	; (80012dc <HAL_RCC_ClockConfig+0x1c0>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 0307 	and.w	r3, r3, #7
 8001138:	683a      	ldr	r2, [r7, #0]
 800113a:	429a      	cmp	r2, r3
 800113c:	d910      	bls.n	8001160 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800113e:	4b67      	ldr	r3, [pc, #412]	; (80012dc <HAL_RCC_ClockConfig+0x1c0>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f023 0207 	bic.w	r2, r3, #7
 8001146:	4965      	ldr	r1, [pc, #404]	; (80012dc <HAL_RCC_ClockConfig+0x1c0>)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	4313      	orrs	r3, r2
 800114c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800114e:	4b63      	ldr	r3, [pc, #396]	; (80012dc <HAL_RCC_ClockConfig+0x1c0>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	683a      	ldr	r2, [r7, #0]
 8001158:	429a      	cmp	r2, r3
 800115a:	d001      	beq.n	8001160 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	e0b8      	b.n	80012d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 0302 	and.w	r3, r3, #2
 8001168:	2b00      	cmp	r3, #0
 800116a:	d020      	beq.n	80011ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 0304 	and.w	r3, r3, #4
 8001174:	2b00      	cmp	r3, #0
 8001176:	d005      	beq.n	8001184 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001178:	4b59      	ldr	r3, [pc, #356]	; (80012e0 <HAL_RCC_ClockConfig+0x1c4>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	4a58      	ldr	r2, [pc, #352]	; (80012e0 <HAL_RCC_ClockConfig+0x1c4>)
 800117e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001182:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 0308 	and.w	r3, r3, #8
 800118c:	2b00      	cmp	r3, #0
 800118e:	d005      	beq.n	800119c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001190:	4b53      	ldr	r3, [pc, #332]	; (80012e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	4a52      	ldr	r2, [pc, #328]	; (80012e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001196:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800119a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800119c:	4b50      	ldr	r3, [pc, #320]	; (80012e0 <HAL_RCC_ClockConfig+0x1c4>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	494d      	ldr	r1, [pc, #308]	; (80012e0 <HAL_RCC_ClockConfig+0x1c4>)
 80011aa:	4313      	orrs	r3, r2
 80011ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d040      	beq.n	800123c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d107      	bne.n	80011d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c2:	4b47      	ldr	r3, [pc, #284]	; (80012e0 <HAL_RCC_ClockConfig+0x1c4>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d115      	bne.n	80011fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e07f      	b.n	80012d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d107      	bne.n	80011ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011da:	4b41      	ldr	r3, [pc, #260]	; (80012e0 <HAL_RCC_ClockConfig+0x1c4>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d109      	bne.n	80011fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e073      	b.n	80012d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ea:	4b3d      	ldr	r3, [pc, #244]	; (80012e0 <HAL_RCC_ClockConfig+0x1c4>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d101      	bne.n	80011fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e06b      	b.n	80012d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011fa:	4b39      	ldr	r3, [pc, #228]	; (80012e0 <HAL_RCC_ClockConfig+0x1c4>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f023 0203 	bic.w	r2, r3, #3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	4936      	ldr	r1, [pc, #216]	; (80012e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001208:	4313      	orrs	r3, r2
 800120a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800120c:	f7ff fa56 	bl	80006bc <HAL_GetTick>
 8001210:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001212:	e00a      	b.n	800122a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001214:	f7ff fa52 	bl	80006bc <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001222:	4293      	cmp	r3, r2
 8001224:	d901      	bls.n	800122a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e053      	b.n	80012d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800122a:	4b2d      	ldr	r3, [pc, #180]	; (80012e0 <HAL_RCC_ClockConfig+0x1c4>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f003 020c 	and.w	r2, r3, #12
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	429a      	cmp	r2, r3
 800123a:	d1eb      	bne.n	8001214 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800123c:	4b27      	ldr	r3, [pc, #156]	; (80012dc <HAL_RCC_ClockConfig+0x1c0>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0307 	and.w	r3, r3, #7
 8001244:	683a      	ldr	r2, [r7, #0]
 8001246:	429a      	cmp	r2, r3
 8001248:	d210      	bcs.n	800126c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800124a:	4b24      	ldr	r3, [pc, #144]	; (80012dc <HAL_RCC_ClockConfig+0x1c0>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f023 0207 	bic.w	r2, r3, #7
 8001252:	4922      	ldr	r1, [pc, #136]	; (80012dc <HAL_RCC_ClockConfig+0x1c0>)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	4313      	orrs	r3, r2
 8001258:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800125a:	4b20      	ldr	r3, [pc, #128]	; (80012dc <HAL_RCC_ClockConfig+0x1c0>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	683a      	ldr	r2, [r7, #0]
 8001264:	429a      	cmp	r2, r3
 8001266:	d001      	beq.n	800126c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e032      	b.n	80012d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 0304 	and.w	r3, r3, #4
 8001274:	2b00      	cmp	r3, #0
 8001276:	d008      	beq.n	800128a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001278:	4b19      	ldr	r3, [pc, #100]	; (80012e0 <HAL_RCC_ClockConfig+0x1c4>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	4916      	ldr	r1, [pc, #88]	; (80012e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001286:	4313      	orrs	r3, r2
 8001288:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0308 	and.w	r3, r3, #8
 8001292:	2b00      	cmp	r3, #0
 8001294:	d009      	beq.n	80012aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001296:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	691b      	ldr	r3, [r3, #16]
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	490e      	ldr	r1, [pc, #56]	; (80012e0 <HAL_RCC_ClockConfig+0x1c4>)
 80012a6:	4313      	orrs	r3, r2
 80012a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012aa:	f000 f821 	bl	80012f0 <HAL_RCC_GetSysClockFreq>
 80012ae:	4602      	mov	r2, r0
 80012b0:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <HAL_RCC_ClockConfig+0x1c4>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	091b      	lsrs	r3, r3, #4
 80012b6:	f003 030f 	and.w	r3, r3, #15
 80012ba:	490a      	ldr	r1, [pc, #40]	; (80012e4 <HAL_RCC_ClockConfig+0x1c8>)
 80012bc:	5ccb      	ldrb	r3, [r1, r3]
 80012be:	fa22 f303 	lsr.w	r3, r2, r3
 80012c2:	4a09      	ldr	r2, [pc, #36]	; (80012e8 <HAL_RCC_ClockConfig+0x1cc>)
 80012c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80012c6:	4b09      	ldr	r3, [pc, #36]	; (80012ec <HAL_RCC_ClockConfig+0x1d0>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff f9b4 	bl	8000638 <HAL_InitTick>

  return HAL_OK;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40022000 	.word	0x40022000
 80012e0:	40021000 	.word	0x40021000
 80012e4:	080026d0 	.word	0x080026d0
 80012e8:	20000000 	.word	0x20000000
 80012ec:	20000004 	.word	0x20000004

080012f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b087      	sub	sp, #28
 80012f4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	2300      	movs	r3, #0
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
 8001302:	2300      	movs	r3, #0
 8001304:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001306:	2300      	movs	r3, #0
 8001308:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800130a:	4b1e      	ldr	r3, [pc, #120]	; (8001384 <HAL_RCC_GetSysClockFreq+0x94>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f003 030c 	and.w	r3, r3, #12
 8001316:	2b04      	cmp	r3, #4
 8001318:	d002      	beq.n	8001320 <HAL_RCC_GetSysClockFreq+0x30>
 800131a:	2b08      	cmp	r3, #8
 800131c:	d003      	beq.n	8001326 <HAL_RCC_GetSysClockFreq+0x36>
 800131e:	e027      	b.n	8001370 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001320:	4b19      	ldr	r3, [pc, #100]	; (8001388 <HAL_RCC_GetSysClockFreq+0x98>)
 8001322:	613b      	str	r3, [r7, #16]
      break;
 8001324:	e027      	b.n	8001376 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	0c9b      	lsrs	r3, r3, #18
 800132a:	f003 030f 	and.w	r3, r3, #15
 800132e:	4a17      	ldr	r2, [pc, #92]	; (800138c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001330:	5cd3      	ldrb	r3, [r2, r3]
 8001332:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d010      	beq.n	8001360 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800133e:	4b11      	ldr	r3, [pc, #68]	; (8001384 <HAL_RCC_GetSysClockFreq+0x94>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	0c5b      	lsrs	r3, r3, #17
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	4a11      	ldr	r2, [pc, #68]	; (8001390 <HAL_RCC_GetSysClockFreq+0xa0>)
 800134a:	5cd3      	ldrb	r3, [r2, r3]
 800134c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a0d      	ldr	r2, [pc, #52]	; (8001388 <HAL_RCC_GetSysClockFreq+0x98>)
 8001352:	fb03 f202 	mul.w	r2, r3, r2
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	fbb2 f3f3 	udiv	r3, r2, r3
 800135c:	617b      	str	r3, [r7, #20]
 800135e:	e004      	b.n	800136a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a0c      	ldr	r2, [pc, #48]	; (8001394 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001364:	fb02 f303 	mul.w	r3, r2, r3
 8001368:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	613b      	str	r3, [r7, #16]
      break;
 800136e:	e002      	b.n	8001376 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001370:	4b05      	ldr	r3, [pc, #20]	; (8001388 <HAL_RCC_GetSysClockFreq+0x98>)
 8001372:	613b      	str	r3, [r7, #16]
      break;
 8001374:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001376:	693b      	ldr	r3, [r7, #16]
}
 8001378:	4618      	mov	r0, r3
 800137a:	371c      	adds	r7, #28
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	40021000 	.word	0x40021000
 8001388:	007a1200 	.word	0x007a1200
 800138c:	080026e8 	.word	0x080026e8
 8001390:	080026f8 	.word	0x080026f8
 8001394:	003d0900 	.word	0x003d0900

08001398 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800139c:	4b02      	ldr	r3, [pc, #8]	; (80013a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800139e:	681b      	ldr	r3, [r3, #0]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr
 80013a8:	20000000 	.word	0x20000000

080013ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80013b0:	f7ff fff2 	bl	8001398 <HAL_RCC_GetHCLKFreq>
 80013b4:	4602      	mov	r2, r0
 80013b6:	4b05      	ldr	r3, [pc, #20]	; (80013cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	0a1b      	lsrs	r3, r3, #8
 80013bc:	f003 0307 	and.w	r3, r3, #7
 80013c0:	4903      	ldr	r1, [pc, #12]	; (80013d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013c2:	5ccb      	ldrb	r3, [r1, r3]
 80013c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40021000 	.word	0x40021000
 80013d0:	080026e0 	.word	0x080026e0

080013d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80013d8:	f7ff ffde 	bl	8001398 <HAL_RCC_GetHCLKFreq>
 80013dc:	4602      	mov	r2, r0
 80013de:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	0adb      	lsrs	r3, r3, #11
 80013e4:	f003 0307 	and.w	r3, r3, #7
 80013e8:	4903      	ldr	r1, [pc, #12]	; (80013f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80013ea:	5ccb      	ldrb	r3, [r1, r3]
 80013ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40021000 	.word	0x40021000
 80013f8:	080026e0 	.word	0x080026e0

080013fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001404:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <RCC_Delay+0x34>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <RCC_Delay+0x38>)
 800140a:	fba2 2303 	umull	r2, r3, r2, r3
 800140e:	0a5b      	lsrs	r3, r3, #9
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	fb02 f303 	mul.w	r3, r2, r3
 8001416:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001418:	bf00      	nop
  }
  while (Delay --);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	1e5a      	subs	r2, r3, #1
 800141e:	60fa      	str	r2, [r7, #12]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d1f9      	bne.n	8001418 <RCC_Delay+0x1c>
}
 8001424:	bf00      	nop
 8001426:	bf00      	nop
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr
 8001430:	20000000 	.word	0x20000000
 8001434:	10624dd3 	.word	0x10624dd3

08001438 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e041      	b.n	80014ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b00      	cmp	r3, #0
 8001454:	d106      	bne.n	8001464 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7fe ffe0 	bl	8000424 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2202      	movs	r2, #2
 8001468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3304      	adds	r3, #4
 8001474:	4619      	mov	r1, r3
 8001476:	4610      	mov	r0, r2
 8001478:	f000 f940 	bl	80016fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2201      	movs	r2, #1
 8001480:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2201      	movs	r2, #1
 8001488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2201      	movs	r2, #1
 8001490:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2201      	movs	r2, #1
 8001498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2201      	movs	r2, #1
 80014a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2201      	movs	r2, #1
 80014a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2201      	movs	r2, #1
 80014b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2201      	movs	r2, #1
 80014b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2201      	movs	r2, #1
 80014c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
	...

080014d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d001      	beq.n	80014f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e032      	b.n	8001556 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2202      	movs	r2, #2
 80014f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a18      	ldr	r2, [pc, #96]	; (8001560 <HAL_TIM_Base_Start+0x88>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d00e      	beq.n	8001520 <HAL_TIM_Base_Start+0x48>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800150a:	d009      	beq.n	8001520 <HAL_TIM_Base_Start+0x48>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a14      	ldr	r2, [pc, #80]	; (8001564 <HAL_TIM_Base_Start+0x8c>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d004      	beq.n	8001520 <HAL_TIM_Base_Start+0x48>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a13      	ldr	r2, [pc, #76]	; (8001568 <HAL_TIM_Base_Start+0x90>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d111      	bne.n	8001544 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2b06      	cmp	r3, #6
 8001530:	d010      	beq.n	8001554 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f042 0201 	orr.w	r2, r2, #1
 8001540:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001542:	e007      	b.n	8001554 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f042 0201 	orr.w	r2, r2, #1
 8001552:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	40012c00 	.word	0x40012c00
 8001564:	40000400 	.word	0x40000400
 8001568:	40000800 	.word	0x40000800

0800156c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001576:	2300      	movs	r3, #0
 8001578:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001580:	2b01      	cmp	r3, #1
 8001582:	d101      	bne.n	8001588 <HAL_TIM_ConfigClockSource+0x1c>
 8001584:	2302      	movs	r3, #2
 8001586:	e0b4      	b.n	80016f2 <HAL_TIM_ConfigClockSource+0x186>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2201      	movs	r2, #1
 800158c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2202      	movs	r2, #2
 8001594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80015a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80015ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	68ba      	ldr	r2, [r7, #8]
 80015b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015c0:	d03e      	beq.n	8001640 <HAL_TIM_ConfigClockSource+0xd4>
 80015c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015c6:	f200 8087 	bhi.w	80016d8 <HAL_TIM_ConfigClockSource+0x16c>
 80015ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015ce:	f000 8086 	beq.w	80016de <HAL_TIM_ConfigClockSource+0x172>
 80015d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015d6:	d87f      	bhi.n	80016d8 <HAL_TIM_ConfigClockSource+0x16c>
 80015d8:	2b70      	cmp	r3, #112	; 0x70
 80015da:	d01a      	beq.n	8001612 <HAL_TIM_ConfigClockSource+0xa6>
 80015dc:	2b70      	cmp	r3, #112	; 0x70
 80015de:	d87b      	bhi.n	80016d8 <HAL_TIM_ConfigClockSource+0x16c>
 80015e0:	2b60      	cmp	r3, #96	; 0x60
 80015e2:	d050      	beq.n	8001686 <HAL_TIM_ConfigClockSource+0x11a>
 80015e4:	2b60      	cmp	r3, #96	; 0x60
 80015e6:	d877      	bhi.n	80016d8 <HAL_TIM_ConfigClockSource+0x16c>
 80015e8:	2b50      	cmp	r3, #80	; 0x50
 80015ea:	d03c      	beq.n	8001666 <HAL_TIM_ConfigClockSource+0xfa>
 80015ec:	2b50      	cmp	r3, #80	; 0x50
 80015ee:	d873      	bhi.n	80016d8 <HAL_TIM_ConfigClockSource+0x16c>
 80015f0:	2b40      	cmp	r3, #64	; 0x40
 80015f2:	d058      	beq.n	80016a6 <HAL_TIM_ConfigClockSource+0x13a>
 80015f4:	2b40      	cmp	r3, #64	; 0x40
 80015f6:	d86f      	bhi.n	80016d8 <HAL_TIM_ConfigClockSource+0x16c>
 80015f8:	2b30      	cmp	r3, #48	; 0x30
 80015fa:	d064      	beq.n	80016c6 <HAL_TIM_ConfigClockSource+0x15a>
 80015fc:	2b30      	cmp	r3, #48	; 0x30
 80015fe:	d86b      	bhi.n	80016d8 <HAL_TIM_ConfigClockSource+0x16c>
 8001600:	2b20      	cmp	r3, #32
 8001602:	d060      	beq.n	80016c6 <HAL_TIM_ConfigClockSource+0x15a>
 8001604:	2b20      	cmp	r3, #32
 8001606:	d867      	bhi.n	80016d8 <HAL_TIM_ConfigClockSource+0x16c>
 8001608:	2b00      	cmp	r3, #0
 800160a:	d05c      	beq.n	80016c6 <HAL_TIM_ConfigClockSource+0x15a>
 800160c:	2b10      	cmp	r3, #16
 800160e:	d05a      	beq.n	80016c6 <HAL_TIM_ConfigClockSource+0x15a>
 8001610:	e062      	b.n	80016d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001622:	f000 f944 	bl	80018ae <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001634:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	68ba      	ldr	r2, [r7, #8]
 800163c:	609a      	str	r2, [r3, #8]
      break;
 800163e:	e04f      	b.n	80016e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001650:	f000 f92d 	bl	80018ae <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	689a      	ldr	r2, [r3, #8]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001662:	609a      	str	r2, [r3, #8]
      break;
 8001664:	e03c      	b.n	80016e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001672:	461a      	mov	r2, r3
 8001674:	f000 f8a4 	bl	80017c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2150      	movs	r1, #80	; 0x50
 800167e:	4618      	mov	r0, r3
 8001680:	f000 f8fb 	bl	800187a <TIM_ITRx_SetConfig>
      break;
 8001684:	e02c      	b.n	80016e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001692:	461a      	mov	r2, r3
 8001694:	f000 f8c2 	bl	800181c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2160      	movs	r1, #96	; 0x60
 800169e:	4618      	mov	r0, r3
 80016a0:	f000 f8eb 	bl	800187a <TIM_ITRx_SetConfig>
      break;
 80016a4:	e01c      	b.n	80016e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80016b2:	461a      	mov	r2, r3
 80016b4:	f000 f884 	bl	80017c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2140      	movs	r1, #64	; 0x40
 80016be:	4618      	mov	r0, r3
 80016c0:	f000 f8db 	bl	800187a <TIM_ITRx_SetConfig>
      break;
 80016c4:	e00c      	b.n	80016e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4619      	mov	r1, r3
 80016d0:	4610      	mov	r0, r2
 80016d2:	f000 f8d2 	bl	800187a <TIM_ITRx_SetConfig>
      break;
 80016d6:	e003      	b.n	80016e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	73fb      	strb	r3, [r7, #15]
      break;
 80016dc:	e000      	b.n	80016e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80016de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2201      	movs	r2, #1
 80016e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80016f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
	...

080016fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4a29      	ldr	r2, [pc, #164]	; (80017b4 <TIM_Base_SetConfig+0xb8>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d00b      	beq.n	800172c <TIM_Base_SetConfig+0x30>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800171a:	d007      	beq.n	800172c <TIM_Base_SetConfig+0x30>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4a26      	ldr	r2, [pc, #152]	; (80017b8 <TIM_Base_SetConfig+0xbc>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d003      	beq.n	800172c <TIM_Base_SetConfig+0x30>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4a25      	ldr	r2, [pc, #148]	; (80017bc <TIM_Base_SetConfig+0xc0>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d108      	bne.n	800173e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001732:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	68fa      	ldr	r2, [r7, #12]
 800173a:	4313      	orrs	r3, r2
 800173c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a1c      	ldr	r2, [pc, #112]	; (80017b4 <TIM_Base_SetConfig+0xb8>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d00b      	beq.n	800175e <TIM_Base_SetConfig+0x62>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800174c:	d007      	beq.n	800175e <TIM_Base_SetConfig+0x62>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a19      	ldr	r2, [pc, #100]	; (80017b8 <TIM_Base_SetConfig+0xbc>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d003      	beq.n	800175e <TIM_Base_SetConfig+0x62>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a18      	ldr	r2, [pc, #96]	; (80017bc <TIM_Base_SetConfig+0xc0>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d108      	bne.n	8001770 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001764:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	4313      	orrs	r3, r2
 800176e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	4313      	orrs	r3, r2
 800177c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	68fa      	ldr	r2, [r7, #12]
 8001782:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	689a      	ldr	r2, [r3, #8]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4a07      	ldr	r2, [pc, #28]	; (80017b4 <TIM_Base_SetConfig+0xb8>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d103      	bne.n	80017a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	691a      	ldr	r2, [r3, #16]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2201      	movs	r2, #1
 80017a8:	615a      	str	r2, [r3, #20]
}
 80017aa:	bf00      	nop
 80017ac:	3714      	adds	r7, #20
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr
 80017b4:	40012c00 	.word	0x40012c00
 80017b8:	40000400 	.word	0x40000400
 80017bc:	40000800 	.word	0x40000800

080017c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b087      	sub	sp, #28
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	6a1b      	ldr	r3, [r3, #32]
 80017d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	6a1b      	ldr	r3, [r3, #32]
 80017d6:	f023 0201 	bic.w	r2, r3, #1
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	011b      	lsls	r3, r3, #4
 80017f0:	693a      	ldr	r2, [r7, #16]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	f023 030a 	bic.w	r3, r3, #10
 80017fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80017fe:	697a      	ldr	r2, [r7, #20]
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	4313      	orrs	r3, r2
 8001804:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	697a      	ldr	r2, [r7, #20]
 8001810:	621a      	str	r2, [r3, #32]
}
 8001812:	bf00      	nop
 8001814:	371c      	adds	r7, #28
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr

0800181c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800181c:	b480      	push	{r7}
 800181e:	b087      	sub	sp, #28
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	6a1b      	ldr	r3, [r3, #32]
 8001832:	f023 0210 	bic.w	r2, r3, #16
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001846:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	031b      	lsls	r3, r3, #12
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	4313      	orrs	r3, r2
 8001850:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001858:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	011b      	lsls	r3, r3, #4
 800185e:	697a      	ldr	r2, [r7, #20]
 8001860:	4313      	orrs	r3, r2
 8001862:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	697a      	ldr	r2, [r7, #20]
 800186e:	621a      	str	r2, [r3, #32]
}
 8001870:	bf00      	nop
 8001872:	371c      	adds	r7, #28
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr

0800187a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800187a:	b480      	push	{r7}
 800187c:	b085      	sub	sp, #20
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
 8001882:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001890:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001892:	683a      	ldr	r2, [r7, #0]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	4313      	orrs	r3, r2
 8001898:	f043 0307 	orr.w	r3, r3, #7
 800189c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68fa      	ldr	r2, [r7, #12]
 80018a2:	609a      	str	r2, [r3, #8]
}
 80018a4:	bf00      	nop
 80018a6:	3714      	adds	r7, #20
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr

080018ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b087      	sub	sp, #28
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	60f8      	str	r0, [r7, #12]
 80018b6:	60b9      	str	r1, [r7, #8]
 80018b8:	607a      	str	r2, [r7, #4]
 80018ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80018c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	021a      	lsls	r2, r3, #8
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	431a      	orrs	r2, r3
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	4313      	orrs	r3, r2
 80018da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	697a      	ldr	r2, [r7, #20]
 80018e0:	609a      	str	r2, [r3, #8]
}
 80018e2:	bf00      	nop
 80018e4:	371c      	adds	r7, #28
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr

080018ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d101      	bne.n	8001904 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001900:	2302      	movs	r3, #2
 8001902:	e046      	b.n	8001992 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2202      	movs	r2, #2
 8001910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800192a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	68fa      	ldr	r2, [r7, #12]
 8001932:	4313      	orrs	r3, r2
 8001934:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a16      	ldr	r2, [pc, #88]	; (800199c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d00e      	beq.n	8001966 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001950:	d009      	beq.n	8001966 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a12      	ldr	r2, [pc, #72]	; (80019a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d004      	beq.n	8001966 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a10      	ldr	r2, [pc, #64]	; (80019a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d10c      	bne.n	8001980 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800196c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	68ba      	ldr	r2, [r7, #8]
 8001974:	4313      	orrs	r3, r2
 8001976:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	68ba      	ldr	r2, [r7, #8]
 800197e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3714      	adds	r7, #20
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr
 800199c:	40012c00 	.word	0x40012c00
 80019a0:	40000400 	.word	0x40000400
 80019a4:	40000800 	.word	0x40000800

080019a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e042      	b.n	8001a40 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d106      	bne.n	80019d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7fe fd46 	bl	8000460 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2224      	movs	r2, #36	; 0x24
 80019d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	68da      	ldr	r2, [r3, #12]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f000 f91d 	bl	8001c2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	691a      	ldr	r2, [r3, #16]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	695a      	ldr	r2, [r3, #20]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	68da      	ldr	r2, [r3, #12]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2220      	movs	r2, #32
 8001a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2220      	movs	r2, #32
 8001a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08a      	sub	sp, #40	; 0x28
 8001a4c:	af02      	add	r7, sp, #8
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	603b      	str	r3, [r7, #0]
 8001a54:	4613      	mov	r3, r2
 8001a56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	2b20      	cmp	r3, #32
 8001a66:	d16d      	bne.n	8001b44 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d002      	beq.n	8001a74 <HAL_UART_Transmit+0x2c>
 8001a6e:	88fb      	ldrh	r3, [r7, #6]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e066      	b.n	8001b46 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2221      	movs	r2, #33	; 0x21
 8001a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001a86:	f7fe fe19 	bl	80006bc <HAL_GetTick>
 8001a8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	88fa      	ldrh	r2, [r7, #6]
 8001a90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	88fa      	ldrh	r2, [r7, #6]
 8001a96:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001aa0:	d108      	bne.n	8001ab4 <HAL_UART_Transmit+0x6c>
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	691b      	ldr	r3, [r3, #16]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d104      	bne.n	8001ab4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	61bb      	str	r3, [r7, #24]
 8001ab2:	e003      	b.n	8001abc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001abc:	e02a      	b.n	8001b14 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	2180      	movs	r1, #128	; 0x80
 8001ac8:	68f8      	ldr	r0, [r7, #12]
 8001aca:	f000 f840 	bl	8001b4e <UART_WaitOnFlagUntilTimeout>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e036      	b.n	8001b46 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d10b      	bne.n	8001af6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	881b      	ldrh	r3, [r3, #0]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001aec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	3302      	adds	r3, #2
 8001af2:	61bb      	str	r3, [r7, #24]
 8001af4:	e007      	b.n	8001b06 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	781a      	ldrb	r2, [r3, #0]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	3301      	adds	r3, #1
 8001b04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1cf      	bne.n	8001abe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	9300      	str	r3, [sp, #0]
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	2200      	movs	r2, #0
 8001b26:	2140      	movs	r1, #64	; 0x40
 8001b28:	68f8      	ldr	r0, [r7, #12]
 8001b2a:	f000 f810 	bl	8001b4e <UART_WaitOnFlagUntilTimeout>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e006      	b.n	8001b46 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2220      	movs	r2, #32
 8001b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001b40:	2300      	movs	r3, #0
 8001b42:	e000      	b.n	8001b46 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001b44:	2302      	movs	r3, #2
  }
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3720      	adds	r7, #32
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b090      	sub	sp, #64	; 0x40
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	60f8      	str	r0, [r7, #12]
 8001b56:	60b9      	str	r1, [r7, #8]
 8001b58:	603b      	str	r3, [r7, #0]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b5e:	e050      	b.n	8001c02 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b66:	d04c      	beq.n	8001c02 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001b68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d007      	beq.n	8001b7e <UART_WaitOnFlagUntilTimeout+0x30>
 8001b6e:	f7fe fda5 	bl	80006bc <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d241      	bcs.n	8001c02 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	330c      	adds	r3, #12
 8001b84:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b88:	e853 3f00 	ldrex	r3, [r3]
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001b94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	330c      	adds	r3, #12
 8001b9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b9e:	637a      	str	r2, [r7, #52]	; 0x34
 8001ba0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ba2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ba4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ba6:	e841 2300 	strex	r3, r2, [r1]
 8001baa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1e5      	bne.n	8001b7e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	3314      	adds	r3, #20
 8001bb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	e853 3f00 	ldrex	r3, [r3]
 8001bc0:	613b      	str	r3, [r7, #16]
   return(result);
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	f023 0301 	bic.w	r3, r3, #1
 8001bc8:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	3314      	adds	r3, #20
 8001bd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001bd2:	623a      	str	r2, [r7, #32]
 8001bd4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001bd6:	69f9      	ldr	r1, [r7, #28]
 8001bd8:	6a3a      	ldr	r2, [r7, #32]
 8001bda:	e841 2300 	strex	r3, r2, [r1]
 8001bde:	61bb      	str	r3, [r7, #24]
   return(result);
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1e5      	bne.n	8001bb2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2220      	movs	r2, #32
 8001bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2220      	movs	r2, #32
 8001bf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e00f      	b.n	8001c22 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	68ba      	ldr	r2, [r7, #8]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	bf0c      	ite	eq
 8001c12:	2301      	moveq	r3, #1
 8001c14:	2300      	movne	r3, #0
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	461a      	mov	r2, r3
 8001c1a:	79fb      	ldrb	r3, [r7, #7]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d09f      	beq.n	8001b60 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3740      	adds	r7, #64	; 0x40
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
	...

08001c2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	68da      	ldr	r2, [r3, #12]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	430a      	orrs	r2, r1
 8001c48:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	689a      	ldr	r2, [r3, #8]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	431a      	orrs	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	695b      	ldr	r3, [r3, #20]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001c66:	f023 030c 	bic.w	r3, r3, #12
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	6812      	ldr	r2, [r2, #0]
 8001c6e:	68b9      	ldr	r1, [r7, #8]
 8001c70:	430b      	orrs	r3, r1
 8001c72:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	699a      	ldr	r2, [r3, #24]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	430a      	orrs	r2, r1
 8001c88:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a2c      	ldr	r2, [pc, #176]	; (8001d40 <UART_SetConfig+0x114>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d103      	bne.n	8001c9c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001c94:	f7ff fb9e 	bl	80013d4 <HAL_RCC_GetPCLK2Freq>
 8001c98:	60f8      	str	r0, [r7, #12]
 8001c9a:	e002      	b.n	8001ca2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001c9c:	f7ff fb86 	bl	80013ac <HAL_RCC_GetPCLK1Freq>
 8001ca0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	009a      	lsls	r2, r3, #2
 8001cac:	441a      	add	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb8:	4a22      	ldr	r2, [pc, #136]	; (8001d44 <UART_SetConfig+0x118>)
 8001cba:	fba2 2303 	umull	r2, r3, r2, r3
 8001cbe:	095b      	lsrs	r3, r3, #5
 8001cc0:	0119      	lsls	r1, r3, #4
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	009a      	lsls	r2, r3, #2
 8001ccc:	441a      	add	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cd8:	4b1a      	ldr	r3, [pc, #104]	; (8001d44 <UART_SetConfig+0x118>)
 8001cda:	fba3 0302 	umull	r0, r3, r3, r2
 8001cde:	095b      	lsrs	r3, r3, #5
 8001ce0:	2064      	movs	r0, #100	; 0x64
 8001ce2:	fb00 f303 	mul.w	r3, r0, r3
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	011b      	lsls	r3, r3, #4
 8001cea:	3332      	adds	r3, #50	; 0x32
 8001cec:	4a15      	ldr	r2, [pc, #84]	; (8001d44 <UART_SetConfig+0x118>)
 8001cee:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf2:	095b      	lsrs	r3, r3, #5
 8001cf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cf8:	4419      	add	r1, r3
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4413      	add	r3, r2
 8001d02:	009a      	lsls	r2, r3, #2
 8001d04:	441a      	add	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d10:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <UART_SetConfig+0x118>)
 8001d12:	fba3 0302 	umull	r0, r3, r3, r2
 8001d16:	095b      	lsrs	r3, r3, #5
 8001d18:	2064      	movs	r0, #100	; 0x64
 8001d1a:	fb00 f303 	mul.w	r3, r0, r3
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	011b      	lsls	r3, r3, #4
 8001d22:	3332      	adds	r3, #50	; 0x32
 8001d24:	4a07      	ldr	r2, [pc, #28]	; (8001d44 <UART_SetConfig+0x118>)
 8001d26:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2a:	095b      	lsrs	r3, r3, #5
 8001d2c:	f003 020f 	and.w	r2, r3, #15
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	440a      	add	r2, r1
 8001d36:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001d38:	bf00      	nop
 8001d3a:	3710      	adds	r7, #16
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40013800 	.word	0x40013800
 8001d44:	51eb851f 	.word	0x51eb851f

08001d48 <siprintf>:
 8001d48:	b40e      	push	{r1, r2, r3}
 8001d4a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001d4e:	b500      	push	{lr}
 8001d50:	b09c      	sub	sp, #112	; 0x70
 8001d52:	ab1d      	add	r3, sp, #116	; 0x74
 8001d54:	9002      	str	r0, [sp, #8]
 8001d56:	9006      	str	r0, [sp, #24]
 8001d58:	9107      	str	r1, [sp, #28]
 8001d5a:	9104      	str	r1, [sp, #16]
 8001d5c:	4808      	ldr	r0, [pc, #32]	; (8001d80 <siprintf+0x38>)
 8001d5e:	4909      	ldr	r1, [pc, #36]	; (8001d84 <siprintf+0x3c>)
 8001d60:	f853 2b04 	ldr.w	r2, [r3], #4
 8001d64:	9105      	str	r1, [sp, #20]
 8001d66:	6800      	ldr	r0, [r0, #0]
 8001d68:	a902      	add	r1, sp, #8
 8001d6a:	9301      	str	r3, [sp, #4]
 8001d6c:	f000 f98e 	bl	800208c <_svfiprintf_r>
 8001d70:	2200      	movs	r2, #0
 8001d72:	9b02      	ldr	r3, [sp, #8]
 8001d74:	701a      	strb	r2, [r3, #0]
 8001d76:	b01c      	add	sp, #112	; 0x70
 8001d78:	f85d eb04 	ldr.w	lr, [sp], #4
 8001d7c:	b003      	add	sp, #12
 8001d7e:	4770      	bx	lr
 8001d80:	20000058 	.word	0x20000058
 8001d84:	ffff0208 	.word	0xffff0208

08001d88 <memset>:
 8001d88:	4603      	mov	r3, r0
 8001d8a:	4402      	add	r2, r0
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d100      	bne.n	8001d92 <memset+0xa>
 8001d90:	4770      	bx	lr
 8001d92:	f803 1b01 	strb.w	r1, [r3], #1
 8001d96:	e7f9      	b.n	8001d8c <memset+0x4>

08001d98 <__errno>:
 8001d98:	4b01      	ldr	r3, [pc, #4]	; (8001da0 <__errno+0x8>)
 8001d9a:	6818      	ldr	r0, [r3, #0]
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	20000058 	.word	0x20000058

08001da4 <__libc_init_array>:
 8001da4:	b570      	push	{r4, r5, r6, lr}
 8001da6:	2600      	movs	r6, #0
 8001da8:	4d0c      	ldr	r5, [pc, #48]	; (8001ddc <__libc_init_array+0x38>)
 8001daa:	4c0d      	ldr	r4, [pc, #52]	; (8001de0 <__libc_init_array+0x3c>)
 8001dac:	1b64      	subs	r4, r4, r5
 8001dae:	10a4      	asrs	r4, r4, #2
 8001db0:	42a6      	cmp	r6, r4
 8001db2:	d109      	bne.n	8001dc8 <__libc_init_array+0x24>
 8001db4:	f000 fc7a 	bl	80026ac <_init>
 8001db8:	2600      	movs	r6, #0
 8001dba:	4d0a      	ldr	r5, [pc, #40]	; (8001de4 <__libc_init_array+0x40>)
 8001dbc:	4c0a      	ldr	r4, [pc, #40]	; (8001de8 <__libc_init_array+0x44>)
 8001dbe:	1b64      	subs	r4, r4, r5
 8001dc0:	10a4      	asrs	r4, r4, #2
 8001dc2:	42a6      	cmp	r6, r4
 8001dc4:	d105      	bne.n	8001dd2 <__libc_init_array+0x2e>
 8001dc6:	bd70      	pop	{r4, r5, r6, pc}
 8001dc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001dcc:	4798      	blx	r3
 8001dce:	3601      	adds	r6, #1
 8001dd0:	e7ee      	b.n	8001db0 <__libc_init_array+0xc>
 8001dd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001dd6:	4798      	blx	r3
 8001dd8:	3601      	adds	r6, #1
 8001dda:	e7f2      	b.n	8001dc2 <__libc_init_array+0x1e>
 8001ddc:	08002730 	.word	0x08002730
 8001de0:	08002730 	.word	0x08002730
 8001de4:	08002730 	.word	0x08002730
 8001de8:	08002734 	.word	0x08002734

08001dec <__retarget_lock_acquire_recursive>:
 8001dec:	4770      	bx	lr

08001dee <__retarget_lock_release_recursive>:
 8001dee:	4770      	bx	lr

08001df0 <_free_r>:
 8001df0:	b538      	push	{r3, r4, r5, lr}
 8001df2:	4605      	mov	r5, r0
 8001df4:	2900      	cmp	r1, #0
 8001df6:	d040      	beq.n	8001e7a <_free_r+0x8a>
 8001df8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001dfc:	1f0c      	subs	r4, r1, #4
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	bfb8      	it	lt
 8001e02:	18e4      	addlt	r4, r4, r3
 8001e04:	f000 f8dc 	bl	8001fc0 <__malloc_lock>
 8001e08:	4a1c      	ldr	r2, [pc, #112]	; (8001e7c <_free_r+0x8c>)
 8001e0a:	6813      	ldr	r3, [r2, #0]
 8001e0c:	b933      	cbnz	r3, 8001e1c <_free_r+0x2c>
 8001e0e:	6063      	str	r3, [r4, #4]
 8001e10:	6014      	str	r4, [r2, #0]
 8001e12:	4628      	mov	r0, r5
 8001e14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e18:	f000 b8d8 	b.w	8001fcc <__malloc_unlock>
 8001e1c:	42a3      	cmp	r3, r4
 8001e1e:	d908      	bls.n	8001e32 <_free_r+0x42>
 8001e20:	6820      	ldr	r0, [r4, #0]
 8001e22:	1821      	adds	r1, r4, r0
 8001e24:	428b      	cmp	r3, r1
 8001e26:	bf01      	itttt	eq
 8001e28:	6819      	ldreq	r1, [r3, #0]
 8001e2a:	685b      	ldreq	r3, [r3, #4]
 8001e2c:	1809      	addeq	r1, r1, r0
 8001e2e:	6021      	streq	r1, [r4, #0]
 8001e30:	e7ed      	b.n	8001e0e <_free_r+0x1e>
 8001e32:	461a      	mov	r2, r3
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	b10b      	cbz	r3, 8001e3c <_free_r+0x4c>
 8001e38:	42a3      	cmp	r3, r4
 8001e3a:	d9fa      	bls.n	8001e32 <_free_r+0x42>
 8001e3c:	6811      	ldr	r1, [r2, #0]
 8001e3e:	1850      	adds	r0, r2, r1
 8001e40:	42a0      	cmp	r0, r4
 8001e42:	d10b      	bne.n	8001e5c <_free_r+0x6c>
 8001e44:	6820      	ldr	r0, [r4, #0]
 8001e46:	4401      	add	r1, r0
 8001e48:	1850      	adds	r0, r2, r1
 8001e4a:	4283      	cmp	r3, r0
 8001e4c:	6011      	str	r1, [r2, #0]
 8001e4e:	d1e0      	bne.n	8001e12 <_free_r+0x22>
 8001e50:	6818      	ldr	r0, [r3, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	4408      	add	r0, r1
 8001e56:	6010      	str	r0, [r2, #0]
 8001e58:	6053      	str	r3, [r2, #4]
 8001e5a:	e7da      	b.n	8001e12 <_free_r+0x22>
 8001e5c:	d902      	bls.n	8001e64 <_free_r+0x74>
 8001e5e:	230c      	movs	r3, #12
 8001e60:	602b      	str	r3, [r5, #0]
 8001e62:	e7d6      	b.n	8001e12 <_free_r+0x22>
 8001e64:	6820      	ldr	r0, [r4, #0]
 8001e66:	1821      	adds	r1, r4, r0
 8001e68:	428b      	cmp	r3, r1
 8001e6a:	bf01      	itttt	eq
 8001e6c:	6819      	ldreq	r1, [r3, #0]
 8001e6e:	685b      	ldreq	r3, [r3, #4]
 8001e70:	1809      	addeq	r1, r1, r0
 8001e72:	6021      	streq	r1, [r4, #0]
 8001e74:	6063      	str	r3, [r4, #4]
 8001e76:	6054      	str	r4, [r2, #4]
 8001e78:	e7cb      	b.n	8001e12 <_free_r+0x22>
 8001e7a:	bd38      	pop	{r3, r4, r5, pc}
 8001e7c:	20000250 	.word	0x20000250

08001e80 <sbrk_aligned>:
 8001e80:	b570      	push	{r4, r5, r6, lr}
 8001e82:	4e0e      	ldr	r6, [pc, #56]	; (8001ebc <sbrk_aligned+0x3c>)
 8001e84:	460c      	mov	r4, r1
 8001e86:	6831      	ldr	r1, [r6, #0]
 8001e88:	4605      	mov	r5, r0
 8001e8a:	b911      	cbnz	r1, 8001e92 <sbrk_aligned+0x12>
 8001e8c:	f000 fbaa 	bl	80025e4 <_sbrk_r>
 8001e90:	6030      	str	r0, [r6, #0]
 8001e92:	4621      	mov	r1, r4
 8001e94:	4628      	mov	r0, r5
 8001e96:	f000 fba5 	bl	80025e4 <_sbrk_r>
 8001e9a:	1c43      	adds	r3, r0, #1
 8001e9c:	d00a      	beq.n	8001eb4 <sbrk_aligned+0x34>
 8001e9e:	1cc4      	adds	r4, r0, #3
 8001ea0:	f024 0403 	bic.w	r4, r4, #3
 8001ea4:	42a0      	cmp	r0, r4
 8001ea6:	d007      	beq.n	8001eb8 <sbrk_aligned+0x38>
 8001ea8:	1a21      	subs	r1, r4, r0
 8001eaa:	4628      	mov	r0, r5
 8001eac:	f000 fb9a 	bl	80025e4 <_sbrk_r>
 8001eb0:	3001      	adds	r0, #1
 8001eb2:	d101      	bne.n	8001eb8 <sbrk_aligned+0x38>
 8001eb4:	f04f 34ff 	mov.w	r4, #4294967295
 8001eb8:	4620      	mov	r0, r4
 8001eba:	bd70      	pop	{r4, r5, r6, pc}
 8001ebc:	20000254 	.word	0x20000254

08001ec0 <_malloc_r>:
 8001ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ec4:	1ccd      	adds	r5, r1, #3
 8001ec6:	f025 0503 	bic.w	r5, r5, #3
 8001eca:	3508      	adds	r5, #8
 8001ecc:	2d0c      	cmp	r5, #12
 8001ece:	bf38      	it	cc
 8001ed0:	250c      	movcc	r5, #12
 8001ed2:	2d00      	cmp	r5, #0
 8001ed4:	4607      	mov	r7, r0
 8001ed6:	db01      	blt.n	8001edc <_malloc_r+0x1c>
 8001ed8:	42a9      	cmp	r1, r5
 8001eda:	d905      	bls.n	8001ee8 <_malloc_r+0x28>
 8001edc:	230c      	movs	r3, #12
 8001ede:	2600      	movs	r6, #0
 8001ee0:	603b      	str	r3, [r7, #0]
 8001ee2:	4630      	mov	r0, r6
 8001ee4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ee8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001fbc <_malloc_r+0xfc>
 8001eec:	f000 f868 	bl	8001fc0 <__malloc_lock>
 8001ef0:	f8d8 3000 	ldr.w	r3, [r8]
 8001ef4:	461c      	mov	r4, r3
 8001ef6:	bb5c      	cbnz	r4, 8001f50 <_malloc_r+0x90>
 8001ef8:	4629      	mov	r1, r5
 8001efa:	4638      	mov	r0, r7
 8001efc:	f7ff ffc0 	bl	8001e80 <sbrk_aligned>
 8001f00:	1c43      	adds	r3, r0, #1
 8001f02:	4604      	mov	r4, r0
 8001f04:	d155      	bne.n	8001fb2 <_malloc_r+0xf2>
 8001f06:	f8d8 4000 	ldr.w	r4, [r8]
 8001f0a:	4626      	mov	r6, r4
 8001f0c:	2e00      	cmp	r6, #0
 8001f0e:	d145      	bne.n	8001f9c <_malloc_r+0xdc>
 8001f10:	2c00      	cmp	r4, #0
 8001f12:	d048      	beq.n	8001fa6 <_malloc_r+0xe6>
 8001f14:	6823      	ldr	r3, [r4, #0]
 8001f16:	4631      	mov	r1, r6
 8001f18:	4638      	mov	r0, r7
 8001f1a:	eb04 0903 	add.w	r9, r4, r3
 8001f1e:	f000 fb61 	bl	80025e4 <_sbrk_r>
 8001f22:	4581      	cmp	r9, r0
 8001f24:	d13f      	bne.n	8001fa6 <_malloc_r+0xe6>
 8001f26:	6821      	ldr	r1, [r4, #0]
 8001f28:	4638      	mov	r0, r7
 8001f2a:	1a6d      	subs	r5, r5, r1
 8001f2c:	4629      	mov	r1, r5
 8001f2e:	f7ff ffa7 	bl	8001e80 <sbrk_aligned>
 8001f32:	3001      	adds	r0, #1
 8001f34:	d037      	beq.n	8001fa6 <_malloc_r+0xe6>
 8001f36:	6823      	ldr	r3, [r4, #0]
 8001f38:	442b      	add	r3, r5
 8001f3a:	6023      	str	r3, [r4, #0]
 8001f3c:	f8d8 3000 	ldr.w	r3, [r8]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d038      	beq.n	8001fb6 <_malloc_r+0xf6>
 8001f44:	685a      	ldr	r2, [r3, #4]
 8001f46:	42a2      	cmp	r2, r4
 8001f48:	d12b      	bne.n	8001fa2 <_malloc_r+0xe2>
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	e00f      	b.n	8001f70 <_malloc_r+0xb0>
 8001f50:	6822      	ldr	r2, [r4, #0]
 8001f52:	1b52      	subs	r2, r2, r5
 8001f54:	d41f      	bmi.n	8001f96 <_malloc_r+0xd6>
 8001f56:	2a0b      	cmp	r2, #11
 8001f58:	d917      	bls.n	8001f8a <_malloc_r+0xca>
 8001f5a:	1961      	adds	r1, r4, r5
 8001f5c:	42a3      	cmp	r3, r4
 8001f5e:	6025      	str	r5, [r4, #0]
 8001f60:	bf18      	it	ne
 8001f62:	6059      	strne	r1, [r3, #4]
 8001f64:	6863      	ldr	r3, [r4, #4]
 8001f66:	bf08      	it	eq
 8001f68:	f8c8 1000 	streq.w	r1, [r8]
 8001f6c:	5162      	str	r2, [r4, r5]
 8001f6e:	604b      	str	r3, [r1, #4]
 8001f70:	4638      	mov	r0, r7
 8001f72:	f104 060b 	add.w	r6, r4, #11
 8001f76:	f000 f829 	bl	8001fcc <__malloc_unlock>
 8001f7a:	f026 0607 	bic.w	r6, r6, #7
 8001f7e:	1d23      	adds	r3, r4, #4
 8001f80:	1af2      	subs	r2, r6, r3
 8001f82:	d0ae      	beq.n	8001ee2 <_malloc_r+0x22>
 8001f84:	1b9b      	subs	r3, r3, r6
 8001f86:	50a3      	str	r3, [r4, r2]
 8001f88:	e7ab      	b.n	8001ee2 <_malloc_r+0x22>
 8001f8a:	42a3      	cmp	r3, r4
 8001f8c:	6862      	ldr	r2, [r4, #4]
 8001f8e:	d1dd      	bne.n	8001f4c <_malloc_r+0x8c>
 8001f90:	f8c8 2000 	str.w	r2, [r8]
 8001f94:	e7ec      	b.n	8001f70 <_malloc_r+0xb0>
 8001f96:	4623      	mov	r3, r4
 8001f98:	6864      	ldr	r4, [r4, #4]
 8001f9a:	e7ac      	b.n	8001ef6 <_malloc_r+0x36>
 8001f9c:	4634      	mov	r4, r6
 8001f9e:	6876      	ldr	r6, [r6, #4]
 8001fa0:	e7b4      	b.n	8001f0c <_malloc_r+0x4c>
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	e7cc      	b.n	8001f40 <_malloc_r+0x80>
 8001fa6:	230c      	movs	r3, #12
 8001fa8:	4638      	mov	r0, r7
 8001faa:	603b      	str	r3, [r7, #0]
 8001fac:	f000 f80e 	bl	8001fcc <__malloc_unlock>
 8001fb0:	e797      	b.n	8001ee2 <_malloc_r+0x22>
 8001fb2:	6025      	str	r5, [r4, #0]
 8001fb4:	e7dc      	b.n	8001f70 <_malloc_r+0xb0>
 8001fb6:	605b      	str	r3, [r3, #4]
 8001fb8:	deff      	udf	#255	; 0xff
 8001fba:	bf00      	nop
 8001fbc:	20000250 	.word	0x20000250

08001fc0 <__malloc_lock>:
 8001fc0:	4801      	ldr	r0, [pc, #4]	; (8001fc8 <__malloc_lock+0x8>)
 8001fc2:	f7ff bf13 	b.w	8001dec <__retarget_lock_acquire_recursive>
 8001fc6:	bf00      	nop
 8001fc8:	2000024c 	.word	0x2000024c

08001fcc <__malloc_unlock>:
 8001fcc:	4801      	ldr	r0, [pc, #4]	; (8001fd4 <__malloc_unlock+0x8>)
 8001fce:	f7ff bf0e 	b.w	8001dee <__retarget_lock_release_recursive>
 8001fd2:	bf00      	nop
 8001fd4:	2000024c 	.word	0x2000024c

08001fd8 <__ssputs_r>:
 8001fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001fdc:	461f      	mov	r7, r3
 8001fde:	688e      	ldr	r6, [r1, #8]
 8001fe0:	4682      	mov	sl, r0
 8001fe2:	42be      	cmp	r6, r7
 8001fe4:	460c      	mov	r4, r1
 8001fe6:	4690      	mov	r8, r2
 8001fe8:	680b      	ldr	r3, [r1, #0]
 8001fea:	d82c      	bhi.n	8002046 <__ssputs_r+0x6e>
 8001fec:	898a      	ldrh	r2, [r1, #12]
 8001fee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001ff2:	d026      	beq.n	8002042 <__ssputs_r+0x6a>
 8001ff4:	6965      	ldr	r5, [r4, #20]
 8001ff6:	6909      	ldr	r1, [r1, #16]
 8001ff8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001ffc:	eba3 0901 	sub.w	r9, r3, r1
 8002000:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002004:	1c7b      	adds	r3, r7, #1
 8002006:	444b      	add	r3, r9
 8002008:	106d      	asrs	r5, r5, #1
 800200a:	429d      	cmp	r5, r3
 800200c:	bf38      	it	cc
 800200e:	461d      	movcc	r5, r3
 8002010:	0553      	lsls	r3, r2, #21
 8002012:	d527      	bpl.n	8002064 <__ssputs_r+0x8c>
 8002014:	4629      	mov	r1, r5
 8002016:	f7ff ff53 	bl	8001ec0 <_malloc_r>
 800201a:	4606      	mov	r6, r0
 800201c:	b360      	cbz	r0, 8002078 <__ssputs_r+0xa0>
 800201e:	464a      	mov	r2, r9
 8002020:	6921      	ldr	r1, [r4, #16]
 8002022:	f000 fafd 	bl	8002620 <memcpy>
 8002026:	89a3      	ldrh	r3, [r4, #12]
 8002028:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800202c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002030:	81a3      	strh	r3, [r4, #12]
 8002032:	6126      	str	r6, [r4, #16]
 8002034:	444e      	add	r6, r9
 8002036:	6026      	str	r6, [r4, #0]
 8002038:	463e      	mov	r6, r7
 800203a:	6165      	str	r5, [r4, #20]
 800203c:	eba5 0509 	sub.w	r5, r5, r9
 8002040:	60a5      	str	r5, [r4, #8]
 8002042:	42be      	cmp	r6, r7
 8002044:	d900      	bls.n	8002048 <__ssputs_r+0x70>
 8002046:	463e      	mov	r6, r7
 8002048:	4632      	mov	r2, r6
 800204a:	4641      	mov	r1, r8
 800204c:	6820      	ldr	r0, [r4, #0]
 800204e:	f000 faaf 	bl	80025b0 <memmove>
 8002052:	2000      	movs	r0, #0
 8002054:	68a3      	ldr	r3, [r4, #8]
 8002056:	1b9b      	subs	r3, r3, r6
 8002058:	60a3      	str	r3, [r4, #8]
 800205a:	6823      	ldr	r3, [r4, #0]
 800205c:	4433      	add	r3, r6
 800205e:	6023      	str	r3, [r4, #0]
 8002060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002064:	462a      	mov	r2, r5
 8002066:	f000 fae9 	bl	800263c <_realloc_r>
 800206a:	4606      	mov	r6, r0
 800206c:	2800      	cmp	r0, #0
 800206e:	d1e0      	bne.n	8002032 <__ssputs_r+0x5a>
 8002070:	4650      	mov	r0, sl
 8002072:	6921      	ldr	r1, [r4, #16]
 8002074:	f7ff febc 	bl	8001df0 <_free_r>
 8002078:	230c      	movs	r3, #12
 800207a:	f8ca 3000 	str.w	r3, [sl]
 800207e:	89a3      	ldrh	r3, [r4, #12]
 8002080:	f04f 30ff 	mov.w	r0, #4294967295
 8002084:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002088:	81a3      	strh	r3, [r4, #12]
 800208a:	e7e9      	b.n	8002060 <__ssputs_r+0x88>

0800208c <_svfiprintf_r>:
 800208c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002090:	4698      	mov	r8, r3
 8002092:	898b      	ldrh	r3, [r1, #12]
 8002094:	4607      	mov	r7, r0
 8002096:	061b      	lsls	r3, r3, #24
 8002098:	460d      	mov	r5, r1
 800209a:	4614      	mov	r4, r2
 800209c:	b09d      	sub	sp, #116	; 0x74
 800209e:	d50e      	bpl.n	80020be <_svfiprintf_r+0x32>
 80020a0:	690b      	ldr	r3, [r1, #16]
 80020a2:	b963      	cbnz	r3, 80020be <_svfiprintf_r+0x32>
 80020a4:	2140      	movs	r1, #64	; 0x40
 80020a6:	f7ff ff0b 	bl	8001ec0 <_malloc_r>
 80020aa:	6028      	str	r0, [r5, #0]
 80020ac:	6128      	str	r0, [r5, #16]
 80020ae:	b920      	cbnz	r0, 80020ba <_svfiprintf_r+0x2e>
 80020b0:	230c      	movs	r3, #12
 80020b2:	603b      	str	r3, [r7, #0]
 80020b4:	f04f 30ff 	mov.w	r0, #4294967295
 80020b8:	e0d0      	b.n	800225c <_svfiprintf_r+0x1d0>
 80020ba:	2340      	movs	r3, #64	; 0x40
 80020bc:	616b      	str	r3, [r5, #20]
 80020be:	2300      	movs	r3, #0
 80020c0:	9309      	str	r3, [sp, #36]	; 0x24
 80020c2:	2320      	movs	r3, #32
 80020c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80020c8:	2330      	movs	r3, #48	; 0x30
 80020ca:	f04f 0901 	mov.w	r9, #1
 80020ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80020d2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8002274 <_svfiprintf_r+0x1e8>
 80020d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80020da:	4623      	mov	r3, r4
 80020dc:	469a      	mov	sl, r3
 80020de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80020e2:	b10a      	cbz	r2, 80020e8 <_svfiprintf_r+0x5c>
 80020e4:	2a25      	cmp	r2, #37	; 0x25
 80020e6:	d1f9      	bne.n	80020dc <_svfiprintf_r+0x50>
 80020e8:	ebba 0b04 	subs.w	fp, sl, r4
 80020ec:	d00b      	beq.n	8002106 <_svfiprintf_r+0x7a>
 80020ee:	465b      	mov	r3, fp
 80020f0:	4622      	mov	r2, r4
 80020f2:	4629      	mov	r1, r5
 80020f4:	4638      	mov	r0, r7
 80020f6:	f7ff ff6f 	bl	8001fd8 <__ssputs_r>
 80020fa:	3001      	adds	r0, #1
 80020fc:	f000 80a9 	beq.w	8002252 <_svfiprintf_r+0x1c6>
 8002100:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002102:	445a      	add	r2, fp
 8002104:	9209      	str	r2, [sp, #36]	; 0x24
 8002106:	f89a 3000 	ldrb.w	r3, [sl]
 800210a:	2b00      	cmp	r3, #0
 800210c:	f000 80a1 	beq.w	8002252 <_svfiprintf_r+0x1c6>
 8002110:	2300      	movs	r3, #0
 8002112:	f04f 32ff 	mov.w	r2, #4294967295
 8002116:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800211a:	f10a 0a01 	add.w	sl, sl, #1
 800211e:	9304      	str	r3, [sp, #16]
 8002120:	9307      	str	r3, [sp, #28]
 8002122:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002126:	931a      	str	r3, [sp, #104]	; 0x68
 8002128:	4654      	mov	r4, sl
 800212a:	2205      	movs	r2, #5
 800212c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002130:	4850      	ldr	r0, [pc, #320]	; (8002274 <_svfiprintf_r+0x1e8>)
 8002132:	f000 fa67 	bl	8002604 <memchr>
 8002136:	9a04      	ldr	r2, [sp, #16]
 8002138:	b9d8      	cbnz	r0, 8002172 <_svfiprintf_r+0xe6>
 800213a:	06d0      	lsls	r0, r2, #27
 800213c:	bf44      	itt	mi
 800213e:	2320      	movmi	r3, #32
 8002140:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002144:	0711      	lsls	r1, r2, #28
 8002146:	bf44      	itt	mi
 8002148:	232b      	movmi	r3, #43	; 0x2b
 800214a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800214e:	f89a 3000 	ldrb.w	r3, [sl]
 8002152:	2b2a      	cmp	r3, #42	; 0x2a
 8002154:	d015      	beq.n	8002182 <_svfiprintf_r+0xf6>
 8002156:	4654      	mov	r4, sl
 8002158:	2000      	movs	r0, #0
 800215a:	f04f 0c0a 	mov.w	ip, #10
 800215e:	9a07      	ldr	r2, [sp, #28]
 8002160:	4621      	mov	r1, r4
 8002162:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002166:	3b30      	subs	r3, #48	; 0x30
 8002168:	2b09      	cmp	r3, #9
 800216a:	d94d      	bls.n	8002208 <_svfiprintf_r+0x17c>
 800216c:	b1b0      	cbz	r0, 800219c <_svfiprintf_r+0x110>
 800216e:	9207      	str	r2, [sp, #28]
 8002170:	e014      	b.n	800219c <_svfiprintf_r+0x110>
 8002172:	eba0 0308 	sub.w	r3, r0, r8
 8002176:	fa09 f303 	lsl.w	r3, r9, r3
 800217a:	4313      	orrs	r3, r2
 800217c:	46a2      	mov	sl, r4
 800217e:	9304      	str	r3, [sp, #16]
 8002180:	e7d2      	b.n	8002128 <_svfiprintf_r+0x9c>
 8002182:	9b03      	ldr	r3, [sp, #12]
 8002184:	1d19      	adds	r1, r3, #4
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	9103      	str	r1, [sp, #12]
 800218a:	2b00      	cmp	r3, #0
 800218c:	bfbb      	ittet	lt
 800218e:	425b      	neglt	r3, r3
 8002190:	f042 0202 	orrlt.w	r2, r2, #2
 8002194:	9307      	strge	r3, [sp, #28]
 8002196:	9307      	strlt	r3, [sp, #28]
 8002198:	bfb8      	it	lt
 800219a:	9204      	strlt	r2, [sp, #16]
 800219c:	7823      	ldrb	r3, [r4, #0]
 800219e:	2b2e      	cmp	r3, #46	; 0x2e
 80021a0:	d10c      	bne.n	80021bc <_svfiprintf_r+0x130>
 80021a2:	7863      	ldrb	r3, [r4, #1]
 80021a4:	2b2a      	cmp	r3, #42	; 0x2a
 80021a6:	d134      	bne.n	8002212 <_svfiprintf_r+0x186>
 80021a8:	9b03      	ldr	r3, [sp, #12]
 80021aa:	3402      	adds	r4, #2
 80021ac:	1d1a      	adds	r2, r3, #4
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	9203      	str	r2, [sp, #12]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	bfb8      	it	lt
 80021b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80021ba:	9305      	str	r3, [sp, #20]
 80021bc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8002278 <_svfiprintf_r+0x1ec>
 80021c0:	2203      	movs	r2, #3
 80021c2:	4650      	mov	r0, sl
 80021c4:	7821      	ldrb	r1, [r4, #0]
 80021c6:	f000 fa1d 	bl	8002604 <memchr>
 80021ca:	b138      	cbz	r0, 80021dc <_svfiprintf_r+0x150>
 80021cc:	2240      	movs	r2, #64	; 0x40
 80021ce:	9b04      	ldr	r3, [sp, #16]
 80021d0:	eba0 000a 	sub.w	r0, r0, sl
 80021d4:	4082      	lsls	r2, r0
 80021d6:	4313      	orrs	r3, r2
 80021d8:	3401      	adds	r4, #1
 80021da:	9304      	str	r3, [sp, #16]
 80021dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80021e0:	2206      	movs	r2, #6
 80021e2:	4826      	ldr	r0, [pc, #152]	; (800227c <_svfiprintf_r+0x1f0>)
 80021e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80021e8:	f000 fa0c 	bl	8002604 <memchr>
 80021ec:	2800      	cmp	r0, #0
 80021ee:	d038      	beq.n	8002262 <_svfiprintf_r+0x1d6>
 80021f0:	4b23      	ldr	r3, [pc, #140]	; (8002280 <_svfiprintf_r+0x1f4>)
 80021f2:	bb1b      	cbnz	r3, 800223c <_svfiprintf_r+0x1b0>
 80021f4:	9b03      	ldr	r3, [sp, #12]
 80021f6:	3307      	adds	r3, #7
 80021f8:	f023 0307 	bic.w	r3, r3, #7
 80021fc:	3308      	adds	r3, #8
 80021fe:	9303      	str	r3, [sp, #12]
 8002200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002202:	4433      	add	r3, r6
 8002204:	9309      	str	r3, [sp, #36]	; 0x24
 8002206:	e768      	b.n	80020da <_svfiprintf_r+0x4e>
 8002208:	460c      	mov	r4, r1
 800220a:	2001      	movs	r0, #1
 800220c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002210:	e7a6      	b.n	8002160 <_svfiprintf_r+0xd4>
 8002212:	2300      	movs	r3, #0
 8002214:	f04f 0c0a 	mov.w	ip, #10
 8002218:	4619      	mov	r1, r3
 800221a:	3401      	adds	r4, #1
 800221c:	9305      	str	r3, [sp, #20]
 800221e:	4620      	mov	r0, r4
 8002220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002224:	3a30      	subs	r2, #48	; 0x30
 8002226:	2a09      	cmp	r2, #9
 8002228:	d903      	bls.n	8002232 <_svfiprintf_r+0x1a6>
 800222a:	2b00      	cmp	r3, #0
 800222c:	d0c6      	beq.n	80021bc <_svfiprintf_r+0x130>
 800222e:	9105      	str	r1, [sp, #20]
 8002230:	e7c4      	b.n	80021bc <_svfiprintf_r+0x130>
 8002232:	4604      	mov	r4, r0
 8002234:	2301      	movs	r3, #1
 8002236:	fb0c 2101 	mla	r1, ip, r1, r2
 800223a:	e7f0      	b.n	800221e <_svfiprintf_r+0x192>
 800223c:	ab03      	add	r3, sp, #12
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	462a      	mov	r2, r5
 8002242:	4638      	mov	r0, r7
 8002244:	4b0f      	ldr	r3, [pc, #60]	; (8002284 <_svfiprintf_r+0x1f8>)
 8002246:	a904      	add	r1, sp, #16
 8002248:	f3af 8000 	nop.w
 800224c:	1c42      	adds	r2, r0, #1
 800224e:	4606      	mov	r6, r0
 8002250:	d1d6      	bne.n	8002200 <_svfiprintf_r+0x174>
 8002252:	89ab      	ldrh	r3, [r5, #12]
 8002254:	065b      	lsls	r3, r3, #25
 8002256:	f53f af2d 	bmi.w	80020b4 <_svfiprintf_r+0x28>
 800225a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800225c:	b01d      	add	sp, #116	; 0x74
 800225e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002262:	ab03      	add	r3, sp, #12
 8002264:	9300      	str	r3, [sp, #0]
 8002266:	462a      	mov	r2, r5
 8002268:	4638      	mov	r0, r7
 800226a:	4b06      	ldr	r3, [pc, #24]	; (8002284 <_svfiprintf_r+0x1f8>)
 800226c:	a904      	add	r1, sp, #16
 800226e:	f000 f87d 	bl	800236c <_printf_i>
 8002272:	e7eb      	b.n	800224c <_svfiprintf_r+0x1c0>
 8002274:	080026fa 	.word	0x080026fa
 8002278:	08002700 	.word	0x08002700
 800227c:	08002704 	.word	0x08002704
 8002280:	00000000 	.word	0x00000000
 8002284:	08001fd9 	.word	0x08001fd9

08002288 <_printf_common>:
 8002288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800228c:	4616      	mov	r6, r2
 800228e:	4699      	mov	r9, r3
 8002290:	688a      	ldr	r2, [r1, #8]
 8002292:	690b      	ldr	r3, [r1, #16]
 8002294:	4607      	mov	r7, r0
 8002296:	4293      	cmp	r3, r2
 8002298:	bfb8      	it	lt
 800229a:	4613      	movlt	r3, r2
 800229c:	6033      	str	r3, [r6, #0]
 800229e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80022a2:	460c      	mov	r4, r1
 80022a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80022a8:	b10a      	cbz	r2, 80022ae <_printf_common+0x26>
 80022aa:	3301      	adds	r3, #1
 80022ac:	6033      	str	r3, [r6, #0]
 80022ae:	6823      	ldr	r3, [r4, #0]
 80022b0:	0699      	lsls	r1, r3, #26
 80022b2:	bf42      	ittt	mi
 80022b4:	6833      	ldrmi	r3, [r6, #0]
 80022b6:	3302      	addmi	r3, #2
 80022b8:	6033      	strmi	r3, [r6, #0]
 80022ba:	6825      	ldr	r5, [r4, #0]
 80022bc:	f015 0506 	ands.w	r5, r5, #6
 80022c0:	d106      	bne.n	80022d0 <_printf_common+0x48>
 80022c2:	f104 0a19 	add.w	sl, r4, #25
 80022c6:	68e3      	ldr	r3, [r4, #12]
 80022c8:	6832      	ldr	r2, [r6, #0]
 80022ca:	1a9b      	subs	r3, r3, r2
 80022cc:	42ab      	cmp	r3, r5
 80022ce:	dc2b      	bgt.n	8002328 <_printf_common+0xa0>
 80022d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80022d4:	1e13      	subs	r3, r2, #0
 80022d6:	6822      	ldr	r2, [r4, #0]
 80022d8:	bf18      	it	ne
 80022da:	2301      	movne	r3, #1
 80022dc:	0692      	lsls	r2, r2, #26
 80022de:	d430      	bmi.n	8002342 <_printf_common+0xba>
 80022e0:	4649      	mov	r1, r9
 80022e2:	4638      	mov	r0, r7
 80022e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80022e8:	47c0      	blx	r8
 80022ea:	3001      	adds	r0, #1
 80022ec:	d023      	beq.n	8002336 <_printf_common+0xae>
 80022ee:	6823      	ldr	r3, [r4, #0]
 80022f0:	6922      	ldr	r2, [r4, #16]
 80022f2:	f003 0306 	and.w	r3, r3, #6
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	bf14      	ite	ne
 80022fa:	2500      	movne	r5, #0
 80022fc:	6833      	ldreq	r3, [r6, #0]
 80022fe:	f04f 0600 	mov.w	r6, #0
 8002302:	bf08      	it	eq
 8002304:	68e5      	ldreq	r5, [r4, #12]
 8002306:	f104 041a 	add.w	r4, r4, #26
 800230a:	bf08      	it	eq
 800230c:	1aed      	subeq	r5, r5, r3
 800230e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002312:	bf08      	it	eq
 8002314:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002318:	4293      	cmp	r3, r2
 800231a:	bfc4      	itt	gt
 800231c:	1a9b      	subgt	r3, r3, r2
 800231e:	18ed      	addgt	r5, r5, r3
 8002320:	42b5      	cmp	r5, r6
 8002322:	d11a      	bne.n	800235a <_printf_common+0xd2>
 8002324:	2000      	movs	r0, #0
 8002326:	e008      	b.n	800233a <_printf_common+0xb2>
 8002328:	2301      	movs	r3, #1
 800232a:	4652      	mov	r2, sl
 800232c:	4649      	mov	r1, r9
 800232e:	4638      	mov	r0, r7
 8002330:	47c0      	blx	r8
 8002332:	3001      	adds	r0, #1
 8002334:	d103      	bne.n	800233e <_printf_common+0xb6>
 8002336:	f04f 30ff 	mov.w	r0, #4294967295
 800233a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800233e:	3501      	adds	r5, #1
 8002340:	e7c1      	b.n	80022c6 <_printf_common+0x3e>
 8002342:	2030      	movs	r0, #48	; 0x30
 8002344:	18e1      	adds	r1, r4, r3
 8002346:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800234a:	1c5a      	adds	r2, r3, #1
 800234c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002350:	4422      	add	r2, r4
 8002352:	3302      	adds	r3, #2
 8002354:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002358:	e7c2      	b.n	80022e0 <_printf_common+0x58>
 800235a:	2301      	movs	r3, #1
 800235c:	4622      	mov	r2, r4
 800235e:	4649      	mov	r1, r9
 8002360:	4638      	mov	r0, r7
 8002362:	47c0      	blx	r8
 8002364:	3001      	adds	r0, #1
 8002366:	d0e6      	beq.n	8002336 <_printf_common+0xae>
 8002368:	3601      	adds	r6, #1
 800236a:	e7d9      	b.n	8002320 <_printf_common+0x98>

0800236c <_printf_i>:
 800236c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002370:	7e0f      	ldrb	r7, [r1, #24]
 8002372:	4691      	mov	r9, r2
 8002374:	2f78      	cmp	r7, #120	; 0x78
 8002376:	4680      	mov	r8, r0
 8002378:	460c      	mov	r4, r1
 800237a:	469a      	mov	sl, r3
 800237c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800237e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002382:	d807      	bhi.n	8002394 <_printf_i+0x28>
 8002384:	2f62      	cmp	r7, #98	; 0x62
 8002386:	d80a      	bhi.n	800239e <_printf_i+0x32>
 8002388:	2f00      	cmp	r7, #0
 800238a:	f000 80d5 	beq.w	8002538 <_printf_i+0x1cc>
 800238e:	2f58      	cmp	r7, #88	; 0x58
 8002390:	f000 80c1 	beq.w	8002516 <_printf_i+0x1aa>
 8002394:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002398:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800239c:	e03a      	b.n	8002414 <_printf_i+0xa8>
 800239e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80023a2:	2b15      	cmp	r3, #21
 80023a4:	d8f6      	bhi.n	8002394 <_printf_i+0x28>
 80023a6:	a101      	add	r1, pc, #4	; (adr r1, 80023ac <_printf_i+0x40>)
 80023a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80023ac:	08002405 	.word	0x08002405
 80023b0:	08002419 	.word	0x08002419
 80023b4:	08002395 	.word	0x08002395
 80023b8:	08002395 	.word	0x08002395
 80023bc:	08002395 	.word	0x08002395
 80023c0:	08002395 	.word	0x08002395
 80023c4:	08002419 	.word	0x08002419
 80023c8:	08002395 	.word	0x08002395
 80023cc:	08002395 	.word	0x08002395
 80023d0:	08002395 	.word	0x08002395
 80023d4:	08002395 	.word	0x08002395
 80023d8:	0800251f 	.word	0x0800251f
 80023dc:	08002445 	.word	0x08002445
 80023e0:	080024d9 	.word	0x080024d9
 80023e4:	08002395 	.word	0x08002395
 80023e8:	08002395 	.word	0x08002395
 80023ec:	08002541 	.word	0x08002541
 80023f0:	08002395 	.word	0x08002395
 80023f4:	08002445 	.word	0x08002445
 80023f8:	08002395 	.word	0x08002395
 80023fc:	08002395 	.word	0x08002395
 8002400:	080024e1 	.word	0x080024e1
 8002404:	682b      	ldr	r3, [r5, #0]
 8002406:	1d1a      	adds	r2, r3, #4
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	602a      	str	r2, [r5, #0]
 800240c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002410:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002414:	2301      	movs	r3, #1
 8002416:	e0a0      	b.n	800255a <_printf_i+0x1ee>
 8002418:	6820      	ldr	r0, [r4, #0]
 800241a:	682b      	ldr	r3, [r5, #0]
 800241c:	0607      	lsls	r7, r0, #24
 800241e:	f103 0104 	add.w	r1, r3, #4
 8002422:	6029      	str	r1, [r5, #0]
 8002424:	d501      	bpl.n	800242a <_printf_i+0xbe>
 8002426:	681e      	ldr	r6, [r3, #0]
 8002428:	e003      	b.n	8002432 <_printf_i+0xc6>
 800242a:	0646      	lsls	r6, r0, #25
 800242c:	d5fb      	bpl.n	8002426 <_printf_i+0xba>
 800242e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002432:	2e00      	cmp	r6, #0
 8002434:	da03      	bge.n	800243e <_printf_i+0xd2>
 8002436:	232d      	movs	r3, #45	; 0x2d
 8002438:	4276      	negs	r6, r6
 800243a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800243e:	230a      	movs	r3, #10
 8002440:	4859      	ldr	r0, [pc, #356]	; (80025a8 <_printf_i+0x23c>)
 8002442:	e012      	b.n	800246a <_printf_i+0xfe>
 8002444:	682b      	ldr	r3, [r5, #0]
 8002446:	6820      	ldr	r0, [r4, #0]
 8002448:	1d19      	adds	r1, r3, #4
 800244a:	6029      	str	r1, [r5, #0]
 800244c:	0605      	lsls	r5, r0, #24
 800244e:	d501      	bpl.n	8002454 <_printf_i+0xe8>
 8002450:	681e      	ldr	r6, [r3, #0]
 8002452:	e002      	b.n	800245a <_printf_i+0xee>
 8002454:	0641      	lsls	r1, r0, #25
 8002456:	d5fb      	bpl.n	8002450 <_printf_i+0xe4>
 8002458:	881e      	ldrh	r6, [r3, #0]
 800245a:	2f6f      	cmp	r7, #111	; 0x6f
 800245c:	bf0c      	ite	eq
 800245e:	2308      	moveq	r3, #8
 8002460:	230a      	movne	r3, #10
 8002462:	4851      	ldr	r0, [pc, #324]	; (80025a8 <_printf_i+0x23c>)
 8002464:	2100      	movs	r1, #0
 8002466:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800246a:	6865      	ldr	r5, [r4, #4]
 800246c:	2d00      	cmp	r5, #0
 800246e:	bfa8      	it	ge
 8002470:	6821      	ldrge	r1, [r4, #0]
 8002472:	60a5      	str	r5, [r4, #8]
 8002474:	bfa4      	itt	ge
 8002476:	f021 0104 	bicge.w	r1, r1, #4
 800247a:	6021      	strge	r1, [r4, #0]
 800247c:	b90e      	cbnz	r6, 8002482 <_printf_i+0x116>
 800247e:	2d00      	cmp	r5, #0
 8002480:	d04b      	beq.n	800251a <_printf_i+0x1ae>
 8002482:	4615      	mov	r5, r2
 8002484:	fbb6 f1f3 	udiv	r1, r6, r3
 8002488:	fb03 6711 	mls	r7, r3, r1, r6
 800248c:	5dc7      	ldrb	r7, [r0, r7]
 800248e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002492:	4637      	mov	r7, r6
 8002494:	42bb      	cmp	r3, r7
 8002496:	460e      	mov	r6, r1
 8002498:	d9f4      	bls.n	8002484 <_printf_i+0x118>
 800249a:	2b08      	cmp	r3, #8
 800249c:	d10b      	bne.n	80024b6 <_printf_i+0x14a>
 800249e:	6823      	ldr	r3, [r4, #0]
 80024a0:	07de      	lsls	r6, r3, #31
 80024a2:	d508      	bpl.n	80024b6 <_printf_i+0x14a>
 80024a4:	6923      	ldr	r3, [r4, #16]
 80024a6:	6861      	ldr	r1, [r4, #4]
 80024a8:	4299      	cmp	r1, r3
 80024aa:	bfde      	ittt	le
 80024ac:	2330      	movle	r3, #48	; 0x30
 80024ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 80024b2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80024b6:	1b52      	subs	r2, r2, r5
 80024b8:	6122      	str	r2, [r4, #16]
 80024ba:	464b      	mov	r3, r9
 80024bc:	4621      	mov	r1, r4
 80024be:	4640      	mov	r0, r8
 80024c0:	f8cd a000 	str.w	sl, [sp]
 80024c4:	aa03      	add	r2, sp, #12
 80024c6:	f7ff fedf 	bl	8002288 <_printf_common>
 80024ca:	3001      	adds	r0, #1
 80024cc:	d14a      	bne.n	8002564 <_printf_i+0x1f8>
 80024ce:	f04f 30ff 	mov.w	r0, #4294967295
 80024d2:	b004      	add	sp, #16
 80024d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024d8:	6823      	ldr	r3, [r4, #0]
 80024da:	f043 0320 	orr.w	r3, r3, #32
 80024de:	6023      	str	r3, [r4, #0]
 80024e0:	2778      	movs	r7, #120	; 0x78
 80024e2:	4832      	ldr	r0, [pc, #200]	; (80025ac <_printf_i+0x240>)
 80024e4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80024e8:	6823      	ldr	r3, [r4, #0]
 80024ea:	6829      	ldr	r1, [r5, #0]
 80024ec:	061f      	lsls	r7, r3, #24
 80024ee:	f851 6b04 	ldr.w	r6, [r1], #4
 80024f2:	d402      	bmi.n	80024fa <_printf_i+0x18e>
 80024f4:	065f      	lsls	r7, r3, #25
 80024f6:	bf48      	it	mi
 80024f8:	b2b6      	uxthmi	r6, r6
 80024fa:	07df      	lsls	r7, r3, #31
 80024fc:	bf48      	it	mi
 80024fe:	f043 0320 	orrmi.w	r3, r3, #32
 8002502:	6029      	str	r1, [r5, #0]
 8002504:	bf48      	it	mi
 8002506:	6023      	strmi	r3, [r4, #0]
 8002508:	b91e      	cbnz	r6, 8002512 <_printf_i+0x1a6>
 800250a:	6823      	ldr	r3, [r4, #0]
 800250c:	f023 0320 	bic.w	r3, r3, #32
 8002510:	6023      	str	r3, [r4, #0]
 8002512:	2310      	movs	r3, #16
 8002514:	e7a6      	b.n	8002464 <_printf_i+0xf8>
 8002516:	4824      	ldr	r0, [pc, #144]	; (80025a8 <_printf_i+0x23c>)
 8002518:	e7e4      	b.n	80024e4 <_printf_i+0x178>
 800251a:	4615      	mov	r5, r2
 800251c:	e7bd      	b.n	800249a <_printf_i+0x12e>
 800251e:	682b      	ldr	r3, [r5, #0]
 8002520:	6826      	ldr	r6, [r4, #0]
 8002522:	1d18      	adds	r0, r3, #4
 8002524:	6961      	ldr	r1, [r4, #20]
 8002526:	6028      	str	r0, [r5, #0]
 8002528:	0635      	lsls	r5, r6, #24
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	d501      	bpl.n	8002532 <_printf_i+0x1c6>
 800252e:	6019      	str	r1, [r3, #0]
 8002530:	e002      	b.n	8002538 <_printf_i+0x1cc>
 8002532:	0670      	lsls	r0, r6, #25
 8002534:	d5fb      	bpl.n	800252e <_printf_i+0x1c2>
 8002536:	8019      	strh	r1, [r3, #0]
 8002538:	2300      	movs	r3, #0
 800253a:	4615      	mov	r5, r2
 800253c:	6123      	str	r3, [r4, #16]
 800253e:	e7bc      	b.n	80024ba <_printf_i+0x14e>
 8002540:	682b      	ldr	r3, [r5, #0]
 8002542:	2100      	movs	r1, #0
 8002544:	1d1a      	adds	r2, r3, #4
 8002546:	602a      	str	r2, [r5, #0]
 8002548:	681d      	ldr	r5, [r3, #0]
 800254a:	6862      	ldr	r2, [r4, #4]
 800254c:	4628      	mov	r0, r5
 800254e:	f000 f859 	bl	8002604 <memchr>
 8002552:	b108      	cbz	r0, 8002558 <_printf_i+0x1ec>
 8002554:	1b40      	subs	r0, r0, r5
 8002556:	6060      	str	r0, [r4, #4]
 8002558:	6863      	ldr	r3, [r4, #4]
 800255a:	6123      	str	r3, [r4, #16]
 800255c:	2300      	movs	r3, #0
 800255e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002562:	e7aa      	b.n	80024ba <_printf_i+0x14e>
 8002564:	462a      	mov	r2, r5
 8002566:	4649      	mov	r1, r9
 8002568:	4640      	mov	r0, r8
 800256a:	6923      	ldr	r3, [r4, #16]
 800256c:	47d0      	blx	sl
 800256e:	3001      	adds	r0, #1
 8002570:	d0ad      	beq.n	80024ce <_printf_i+0x162>
 8002572:	6823      	ldr	r3, [r4, #0]
 8002574:	079b      	lsls	r3, r3, #30
 8002576:	d413      	bmi.n	80025a0 <_printf_i+0x234>
 8002578:	68e0      	ldr	r0, [r4, #12]
 800257a:	9b03      	ldr	r3, [sp, #12]
 800257c:	4298      	cmp	r0, r3
 800257e:	bfb8      	it	lt
 8002580:	4618      	movlt	r0, r3
 8002582:	e7a6      	b.n	80024d2 <_printf_i+0x166>
 8002584:	2301      	movs	r3, #1
 8002586:	4632      	mov	r2, r6
 8002588:	4649      	mov	r1, r9
 800258a:	4640      	mov	r0, r8
 800258c:	47d0      	blx	sl
 800258e:	3001      	adds	r0, #1
 8002590:	d09d      	beq.n	80024ce <_printf_i+0x162>
 8002592:	3501      	adds	r5, #1
 8002594:	68e3      	ldr	r3, [r4, #12]
 8002596:	9903      	ldr	r1, [sp, #12]
 8002598:	1a5b      	subs	r3, r3, r1
 800259a:	42ab      	cmp	r3, r5
 800259c:	dcf2      	bgt.n	8002584 <_printf_i+0x218>
 800259e:	e7eb      	b.n	8002578 <_printf_i+0x20c>
 80025a0:	2500      	movs	r5, #0
 80025a2:	f104 0619 	add.w	r6, r4, #25
 80025a6:	e7f5      	b.n	8002594 <_printf_i+0x228>
 80025a8:	0800270b 	.word	0x0800270b
 80025ac:	0800271c 	.word	0x0800271c

080025b0 <memmove>:
 80025b0:	4288      	cmp	r0, r1
 80025b2:	b510      	push	{r4, lr}
 80025b4:	eb01 0402 	add.w	r4, r1, r2
 80025b8:	d902      	bls.n	80025c0 <memmove+0x10>
 80025ba:	4284      	cmp	r4, r0
 80025bc:	4623      	mov	r3, r4
 80025be:	d807      	bhi.n	80025d0 <memmove+0x20>
 80025c0:	1e43      	subs	r3, r0, #1
 80025c2:	42a1      	cmp	r1, r4
 80025c4:	d008      	beq.n	80025d8 <memmove+0x28>
 80025c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80025ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80025ce:	e7f8      	b.n	80025c2 <memmove+0x12>
 80025d0:	4601      	mov	r1, r0
 80025d2:	4402      	add	r2, r0
 80025d4:	428a      	cmp	r2, r1
 80025d6:	d100      	bne.n	80025da <memmove+0x2a>
 80025d8:	bd10      	pop	{r4, pc}
 80025da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80025de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80025e2:	e7f7      	b.n	80025d4 <memmove+0x24>

080025e4 <_sbrk_r>:
 80025e4:	b538      	push	{r3, r4, r5, lr}
 80025e6:	2300      	movs	r3, #0
 80025e8:	4d05      	ldr	r5, [pc, #20]	; (8002600 <_sbrk_r+0x1c>)
 80025ea:	4604      	mov	r4, r0
 80025ec:	4608      	mov	r0, r1
 80025ee:	602b      	str	r3, [r5, #0]
 80025f0:	f7fd ffaa 	bl	8000548 <_sbrk>
 80025f4:	1c43      	adds	r3, r0, #1
 80025f6:	d102      	bne.n	80025fe <_sbrk_r+0x1a>
 80025f8:	682b      	ldr	r3, [r5, #0]
 80025fa:	b103      	cbz	r3, 80025fe <_sbrk_r+0x1a>
 80025fc:	6023      	str	r3, [r4, #0]
 80025fe:	bd38      	pop	{r3, r4, r5, pc}
 8002600:	20000248 	.word	0x20000248

08002604 <memchr>:
 8002604:	4603      	mov	r3, r0
 8002606:	b510      	push	{r4, lr}
 8002608:	b2c9      	uxtb	r1, r1
 800260a:	4402      	add	r2, r0
 800260c:	4293      	cmp	r3, r2
 800260e:	4618      	mov	r0, r3
 8002610:	d101      	bne.n	8002616 <memchr+0x12>
 8002612:	2000      	movs	r0, #0
 8002614:	e003      	b.n	800261e <memchr+0x1a>
 8002616:	7804      	ldrb	r4, [r0, #0]
 8002618:	3301      	adds	r3, #1
 800261a:	428c      	cmp	r4, r1
 800261c:	d1f6      	bne.n	800260c <memchr+0x8>
 800261e:	bd10      	pop	{r4, pc}

08002620 <memcpy>:
 8002620:	440a      	add	r2, r1
 8002622:	4291      	cmp	r1, r2
 8002624:	f100 33ff 	add.w	r3, r0, #4294967295
 8002628:	d100      	bne.n	800262c <memcpy+0xc>
 800262a:	4770      	bx	lr
 800262c:	b510      	push	{r4, lr}
 800262e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002632:	4291      	cmp	r1, r2
 8002634:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002638:	d1f9      	bne.n	800262e <memcpy+0xe>
 800263a:	bd10      	pop	{r4, pc}

0800263c <_realloc_r>:
 800263c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002640:	4680      	mov	r8, r0
 8002642:	4614      	mov	r4, r2
 8002644:	460e      	mov	r6, r1
 8002646:	b921      	cbnz	r1, 8002652 <_realloc_r+0x16>
 8002648:	4611      	mov	r1, r2
 800264a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800264e:	f7ff bc37 	b.w	8001ec0 <_malloc_r>
 8002652:	b92a      	cbnz	r2, 8002660 <_realloc_r+0x24>
 8002654:	f7ff fbcc 	bl	8001df0 <_free_r>
 8002658:	4625      	mov	r5, r4
 800265a:	4628      	mov	r0, r5
 800265c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002660:	f000 f81b 	bl	800269a <_malloc_usable_size_r>
 8002664:	4284      	cmp	r4, r0
 8002666:	4607      	mov	r7, r0
 8002668:	d802      	bhi.n	8002670 <_realloc_r+0x34>
 800266a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800266e:	d812      	bhi.n	8002696 <_realloc_r+0x5a>
 8002670:	4621      	mov	r1, r4
 8002672:	4640      	mov	r0, r8
 8002674:	f7ff fc24 	bl	8001ec0 <_malloc_r>
 8002678:	4605      	mov	r5, r0
 800267a:	2800      	cmp	r0, #0
 800267c:	d0ed      	beq.n	800265a <_realloc_r+0x1e>
 800267e:	42bc      	cmp	r4, r7
 8002680:	4622      	mov	r2, r4
 8002682:	4631      	mov	r1, r6
 8002684:	bf28      	it	cs
 8002686:	463a      	movcs	r2, r7
 8002688:	f7ff ffca 	bl	8002620 <memcpy>
 800268c:	4631      	mov	r1, r6
 800268e:	4640      	mov	r0, r8
 8002690:	f7ff fbae 	bl	8001df0 <_free_r>
 8002694:	e7e1      	b.n	800265a <_realloc_r+0x1e>
 8002696:	4635      	mov	r5, r6
 8002698:	e7df      	b.n	800265a <_realloc_r+0x1e>

0800269a <_malloc_usable_size_r>:
 800269a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800269e:	1f18      	subs	r0, r3, #4
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	bfbc      	itt	lt
 80026a4:	580b      	ldrlt	r3, [r1, r0]
 80026a6:	18c0      	addlt	r0, r0, r3
 80026a8:	4770      	bx	lr
	...

080026ac <_init>:
 80026ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ae:	bf00      	nop
 80026b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026b2:	bc08      	pop	{r3}
 80026b4:	469e      	mov	lr, r3
 80026b6:	4770      	bx	lr

080026b8 <_fini>:
 80026b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ba:	bf00      	nop
 80026bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026be:	bc08      	pop	{r3}
 80026c0:	469e      	mov	lr, r3
 80026c2:	4770      	bx	lr
