
autolauncher_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005514  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000abc  08005620  08005620  00006620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060dc  080060dc  0000807c  2**0
                  CONTENTS
  4 .ARM          00000000  080060dc  080060dc  0000807c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080060dc  080060dc  0000807c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060dc  080060dc  000070dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060e0  080060e0  000070e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080060e4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  2000007c  08006160  0000807c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  08006160  00008380  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000807c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a0b  00000000  00000000  000080a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cca  00000000  00000000  00019ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c0  00000000  00000000  0001c780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000de7  00000000  00000000  0001d940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a1a8  00000000  00000000  0001e727  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000169e3  00000000  00000000  000388cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000941b5  00000000  00000000  0004f2b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e3467  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005178  00000000  00000000  000e34ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000e8624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000007c 	.word	0x2000007c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005608 	.word	0x08005608

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000080 	.word	0x20000080
 8000148:	08005608 	.word	0x08005608

0800014c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800015c:	4b18      	ldr	r3, [pc, #96]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800015e:	4a19      	ldr	r2, [pc, #100]	@ (80001c4 <MX_ADC1_Init+0x78>)
 8000160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000162:	4b17      	ldr	r3, [pc, #92]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000164:	2200      	movs	r2, #0
 8000166:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000168:	4b15      	ldr	r3, [pc, #84]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800016a:	2200      	movs	r2, #0
 800016c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800016e:	4b14      	ldr	r3, [pc, #80]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000170:	2200      	movs	r2, #0
 8000172:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000174:	4b12      	ldr	r3, [pc, #72]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000176:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800017a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800017c:	4b10      	ldr	r3, [pc, #64]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800017e:	2200      	movs	r2, #0
 8000180:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000182:	4b0f      	ldr	r3, [pc, #60]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000184:	2201      	movs	r2, #1
 8000186:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000188:	480d      	ldr	r0, [pc, #52]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800018a:	f001 fc0d 	bl	80019a8 <HAL_ADC_Init>
 800018e:	4603      	mov	r3, r0
 8000190:	2b00      	cmp	r3, #0
 8000192:	d001      	beq.n	8000198 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000194:	f001 f89e 	bl	80012d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000198:	230a      	movs	r3, #10
 800019a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800019c:	2301      	movs	r3, #1
 800019e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001a0:	2300      	movs	r3, #0
 80001a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	4619      	mov	r1, r3
 80001a8:	4805      	ldr	r0, [pc, #20]	@ (80001c0 <MX_ADC1_Init+0x74>)
 80001aa:	f001 fcd5 	bl	8001b58 <HAL_ADC_ConfigChannel>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d001      	beq.n	80001b8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80001b4:	f001 f88e 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80001b8:	bf00      	nop
 80001ba:	3710      	adds	r7, #16
 80001bc:	46bd      	mov	sp, r7
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	20000098 	.word	0x20000098
 80001c4:	40012400 	.word	0x40012400

080001c8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80001ce:	1d3b      	adds	r3, r7, #4
 80001d0:	2200      	movs	r2, #0
 80001d2:	601a      	str	r2, [r3, #0]
 80001d4:	605a      	str	r2, [r3, #4]
 80001d6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80001d8:	4b18      	ldr	r3, [pc, #96]	@ (800023c <MX_ADC2_Init+0x74>)
 80001da:	4a19      	ldr	r2, [pc, #100]	@ (8000240 <MX_ADC2_Init+0x78>)
 80001dc:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80001de:	4b17      	ldr	r3, [pc, #92]	@ (800023c <MX_ADC2_Init+0x74>)
 80001e0:	2200      	movs	r2, #0
 80001e2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80001e4:	4b15      	ldr	r3, [pc, #84]	@ (800023c <MX_ADC2_Init+0x74>)
 80001e6:	2200      	movs	r2, #0
 80001e8:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80001ea:	4b14      	ldr	r3, [pc, #80]	@ (800023c <MX_ADC2_Init+0x74>)
 80001ec:	2200      	movs	r2, #0
 80001ee:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80001f0:	4b12      	ldr	r3, [pc, #72]	@ (800023c <MX_ADC2_Init+0x74>)
 80001f2:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80001f6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80001f8:	4b10      	ldr	r3, [pc, #64]	@ (800023c <MX_ADC2_Init+0x74>)
 80001fa:	2200      	movs	r2, #0
 80001fc:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80001fe:	4b0f      	ldr	r3, [pc, #60]	@ (800023c <MX_ADC2_Init+0x74>)
 8000200:	2201      	movs	r2, #1
 8000202:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000204:	480d      	ldr	r0, [pc, #52]	@ (800023c <MX_ADC2_Init+0x74>)
 8000206:	f001 fbcf 	bl	80019a8 <HAL_ADC_Init>
 800020a:	4603      	mov	r3, r0
 800020c:	2b00      	cmp	r3, #0
 800020e:	d001      	beq.n	8000214 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000210:	f001 f860 	bl	80012d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000214:	230b      	movs	r3, #11
 8000216:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000218:	2301      	movs	r3, #1
 800021a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800021c:	2300      	movs	r3, #0
 800021e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000220:	1d3b      	adds	r3, r7, #4
 8000222:	4619      	mov	r1, r3
 8000224:	4805      	ldr	r0, [pc, #20]	@ (800023c <MX_ADC2_Init+0x74>)
 8000226:	f001 fc97 	bl	8001b58 <HAL_ADC_ConfigChannel>
 800022a:	4603      	mov	r3, r0
 800022c:	2b00      	cmp	r3, #0
 800022e:	d001      	beq.n	8000234 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000230:	f001 f850 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000234:	bf00      	nop
 8000236:	3710      	adds	r7, #16
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}
 800023c:	200000c8 	.word	0x200000c8
 8000240:	40012800 	.word	0x40012800

08000244 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b08a      	sub	sp, #40	@ 0x28
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800024c:	f107 0318 	add.w	r3, r7, #24
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]
 8000254:	605a      	str	r2, [r3, #4]
 8000256:	609a      	str	r2, [r3, #8]
 8000258:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	4a28      	ldr	r2, [pc, #160]	@ (8000300 <HAL_ADC_MspInit+0xbc>)
 8000260:	4293      	cmp	r3, r2
 8000262:	d122      	bne.n	80002aa <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000264:	4b27      	ldr	r3, [pc, #156]	@ (8000304 <HAL_ADC_MspInit+0xc0>)
 8000266:	699b      	ldr	r3, [r3, #24]
 8000268:	4a26      	ldr	r2, [pc, #152]	@ (8000304 <HAL_ADC_MspInit+0xc0>)
 800026a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800026e:	6193      	str	r3, [r2, #24]
 8000270:	4b24      	ldr	r3, [pc, #144]	@ (8000304 <HAL_ADC_MspInit+0xc0>)
 8000272:	699b      	ldr	r3, [r3, #24]
 8000274:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000278:	617b      	str	r3, [r7, #20]
 800027a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800027c:	4b21      	ldr	r3, [pc, #132]	@ (8000304 <HAL_ADC_MspInit+0xc0>)
 800027e:	699b      	ldr	r3, [r3, #24]
 8000280:	4a20      	ldr	r2, [pc, #128]	@ (8000304 <HAL_ADC_MspInit+0xc0>)
 8000282:	f043 0310 	orr.w	r3, r3, #16
 8000286:	6193      	str	r3, [r2, #24]
 8000288:	4b1e      	ldr	r3, [pc, #120]	@ (8000304 <HAL_ADC_MspInit+0xc0>)
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	f003 0310 	and.w	r3, r3, #16
 8000290:	613b      	str	r3, [r7, #16]
 8000292:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000294:	2301      	movs	r3, #1
 8000296:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000298:	2303      	movs	r3, #3
 800029a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800029c:	f107 0318 	add.w	r3, r7, #24
 80002a0:	4619      	mov	r1, r3
 80002a2:	4819      	ldr	r0, [pc, #100]	@ (8000308 <HAL_ADC_MspInit+0xc4>)
 80002a4:	f001 ff52 	bl	800214c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80002a8:	e026      	b.n	80002f8 <HAL_ADC_MspInit+0xb4>
  else if(adcHandle->Instance==ADC2)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	4a17      	ldr	r2, [pc, #92]	@ (800030c <HAL_ADC_MspInit+0xc8>)
 80002b0:	4293      	cmp	r3, r2
 80002b2:	d121      	bne.n	80002f8 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80002b4:	4b13      	ldr	r3, [pc, #76]	@ (8000304 <HAL_ADC_MspInit+0xc0>)
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	4a12      	ldr	r2, [pc, #72]	@ (8000304 <HAL_ADC_MspInit+0xc0>)
 80002ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002be:	6193      	str	r3, [r2, #24]
 80002c0:	4b10      	ldr	r3, [pc, #64]	@ (8000304 <HAL_ADC_MspInit+0xc0>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80002c8:	60fb      	str	r3, [r7, #12]
 80002ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80002cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000304 <HAL_ADC_MspInit+0xc0>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	4a0c      	ldr	r2, [pc, #48]	@ (8000304 <HAL_ADC_MspInit+0xc0>)
 80002d2:	f043 0310 	orr.w	r3, r3, #16
 80002d6:	6193      	str	r3, [r2, #24]
 80002d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000304 <HAL_ADC_MspInit+0xc0>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	f003 0310 	and.w	r3, r3, #16
 80002e0:	60bb      	str	r3, [r7, #8]
 80002e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80002e4:	2302      	movs	r3, #2
 80002e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002e8:	2303      	movs	r3, #3
 80002ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002ec:	f107 0318 	add.w	r3, r7, #24
 80002f0:	4619      	mov	r1, r3
 80002f2:	4805      	ldr	r0, [pc, #20]	@ (8000308 <HAL_ADC_MspInit+0xc4>)
 80002f4:	f001 ff2a 	bl	800214c <HAL_GPIO_Init>
}
 80002f8:	bf00      	nop
 80002fa:	3728      	adds	r7, #40	@ 0x28
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	40012400 	.word	0x40012400
 8000304:	40021000 	.word	0x40021000
 8000308:	40011000 	.word	0x40011000
 800030c:	40012800 	.word	0x40012800

08000310 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b088      	sub	sp, #32
 8000314:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000316:	f107 0310 	add.w	r3, r7, #16
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	605a      	str	r2, [r3, #4]
 8000320:	609a      	str	r2, [r3, #8]
 8000322:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000324:	4b42      	ldr	r3, [pc, #264]	@ (8000430 <MX_GPIO_Init+0x120>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	4a41      	ldr	r2, [pc, #260]	@ (8000430 <MX_GPIO_Init+0x120>)
 800032a:	f043 0310 	orr.w	r3, r3, #16
 800032e:	6193      	str	r3, [r2, #24]
 8000330:	4b3f      	ldr	r3, [pc, #252]	@ (8000430 <MX_GPIO_Init+0x120>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	f003 0310 	and.w	r3, r3, #16
 8000338:	60fb      	str	r3, [r7, #12]
 800033a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800033c:	4b3c      	ldr	r3, [pc, #240]	@ (8000430 <MX_GPIO_Init+0x120>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	4a3b      	ldr	r2, [pc, #236]	@ (8000430 <MX_GPIO_Init+0x120>)
 8000342:	f043 0320 	orr.w	r3, r3, #32
 8000346:	6193      	str	r3, [r2, #24]
 8000348:	4b39      	ldr	r3, [pc, #228]	@ (8000430 <MX_GPIO_Init+0x120>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	f003 0320 	and.w	r3, r3, #32
 8000350:	60bb      	str	r3, [r7, #8]
 8000352:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000354:	4b36      	ldr	r3, [pc, #216]	@ (8000430 <MX_GPIO_Init+0x120>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	4a35      	ldr	r2, [pc, #212]	@ (8000430 <MX_GPIO_Init+0x120>)
 800035a:	f043 0304 	orr.w	r3, r3, #4
 800035e:	6193      	str	r3, [r2, #24]
 8000360:	4b33      	ldr	r3, [pc, #204]	@ (8000430 <MX_GPIO_Init+0x120>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	f003 0304 	and.w	r3, r3, #4
 8000368:	607b      	str	r3, [r7, #4]
 800036a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800036c:	4b30      	ldr	r3, [pc, #192]	@ (8000430 <MX_GPIO_Init+0x120>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	4a2f      	ldr	r2, [pc, #188]	@ (8000430 <MX_GPIO_Init+0x120>)
 8000372:	f043 0308 	orr.w	r3, r3, #8
 8000376:	6193      	str	r3, [r2, #24]
 8000378:	4b2d      	ldr	r3, [pc, #180]	@ (8000430 <MX_GPIO_Init+0x120>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	f003 0308 	and.w	r3, r3, #8
 8000380:	603b      	str	r3, [r7, #0]
 8000382:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SSR_3_Pin|SSR_2_Pin|SSR_1_Pin|ENABLE_M1_Pin
 8000384:	2200      	movs	r2, #0
 8000386:	f64f 71dc 	movw	r1, #65500	@ 0xffdc
 800038a:	482a      	ldr	r0, [pc, #168]	@ (8000434 <MX_GPIO_Init+0x124>)
 800038c:	f002 f862 	bl	8002454 <HAL_GPIO_WritePin>
                          |ENABLE_M2_Pin|DIR_Pin|SSR_6_Pin|SSR_5_Pin
                          |RELAY_RESET_3_Pin|RELAY_RESET_2_Pin|RELAY_K7_Pin|RELAY_K1_Pin
                          |RELAY_K2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENABLE_M3_Pin|ENABLE_M4_Pin|MUX_SELECT_Pin|ENABLE_M5_Pin
 8000390:	2200      	movs	r2, #0
 8000392:	f649 11f7 	movw	r1, #39415	@ 0x99f7
 8000396:	4828      	ldr	r0, [pc, #160]	@ (8000438 <MX_GPIO_Init+0x128>)
 8000398:	f002 f85c 	bl	8002454 <HAL_GPIO_WritePin>
                          |ENABLE_M6_Pin|ENABLE_M7_Pin|ENABLE_M8_Pin|RELAY_K12_CAL_RES_Pin
                          |RELAY_K11_CAL_CONT_Pin|RELAY_K9_K10_GND_COND_Pin|RELAY_K8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|SSR_8_Pin|SSR_7_Pin|RELAY_K4_Pin
 800039c:	2200      	movs	r2, #0
 800039e:	f24c 313a 	movw	r1, #49978	@ 0xc33a
 80003a2:	4826      	ldr	r0, [pc, #152]	@ (800043c <MX_GPIO_Init+0x12c>)
 80003a4:	f002 f856 	bl	8002454 <HAL_GPIO_WritePin>
                          |RELAY_K5_Pin|RELAY_K6_Pin|RELAY_RESET_1_Pin|SSR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_K3_GPIO_Port, RELAY_K3_Pin, GPIO_PIN_RESET);
 80003a8:	2200      	movs	r2, #0
 80003aa:	2104      	movs	r1, #4
 80003ac:	4824      	ldr	r0, [pc, #144]	@ (8000440 <MX_GPIO_Init+0x130>)
 80003ae:	f002 f851 	bl	8002454 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = SSR_3_Pin|SSR_2_Pin|SSR_1_Pin|ENABLE_M1_Pin
 80003b2:	f64f 73dc 	movw	r3, #65500	@ 0xffdc
 80003b6:	613b      	str	r3, [r7, #16]
                          |ENABLE_M2_Pin|DIR_Pin|SSR_6_Pin|SSR_5_Pin
                          |RELAY_RESET_3_Pin|RELAY_RESET_2_Pin|RELAY_K7_Pin|RELAY_K1_Pin
                          |RELAY_K2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b8:	2301      	movs	r3, #1
 80003ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003bc:	2300      	movs	r3, #0
 80003be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c0:	2302      	movs	r3, #2
 80003c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003c4:	f107 0310 	add.w	r3, r7, #16
 80003c8:	4619      	mov	r1, r3
 80003ca:	481a      	ldr	r0, [pc, #104]	@ (8000434 <MX_GPIO_Init+0x124>)
 80003cc:	f001 febe 	bl	800214c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ENABLE_M3_Pin|ENABLE_M4_Pin|MUX_SELECT_Pin|ENABLE_M5_Pin
 80003d0:	f649 13f7 	movw	r3, #39415	@ 0x99f7
 80003d4:	613b      	str	r3, [r7, #16]
                          |ENABLE_M6_Pin|ENABLE_M7_Pin|ENABLE_M8_Pin|RELAY_K12_CAL_RES_Pin
                          |RELAY_K11_CAL_CONT_Pin|RELAY_K9_K10_GND_COND_Pin|RELAY_K8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d6:	2301      	movs	r3, #1
 80003d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003da:	2300      	movs	r3, #0
 80003dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003de:	2302      	movs	r3, #2
 80003e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003e2:	f107 0310 	add.w	r3, r7, #16
 80003e6:	4619      	mov	r1, r3
 80003e8:	4813      	ldr	r0, [pc, #76]	@ (8000438 <MX_GPIO_Init+0x128>)
 80003ea:	f001 feaf 	bl	800214c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_Pin|SSR_8_Pin|SSR_7_Pin|RELAY_K4_Pin
 80003ee:	f24c 333a 	movw	r3, #49978	@ 0xc33a
 80003f2:	613b      	str	r3, [r7, #16]
                          |RELAY_K5_Pin|RELAY_K6_Pin|RELAY_RESET_1_Pin|SSR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f4:	2301      	movs	r3, #1
 80003f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f8:	2300      	movs	r3, #0
 80003fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003fc:	2302      	movs	r3, #2
 80003fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000400:	f107 0310 	add.w	r3, r7, #16
 8000404:	4619      	mov	r1, r3
 8000406:	480d      	ldr	r0, [pc, #52]	@ (800043c <MX_GPIO_Init+0x12c>)
 8000408:	f001 fea0 	bl	800214c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RELAY_K3_Pin;
 800040c:	2304      	movs	r3, #4
 800040e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000410:	2301      	movs	r3, #1
 8000412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000414:	2300      	movs	r3, #0
 8000416:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000418:	2302      	movs	r3, #2
 800041a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RELAY_K3_GPIO_Port, &GPIO_InitStruct);
 800041c:	f107 0310 	add.w	r3, r7, #16
 8000420:	4619      	mov	r1, r3
 8000422:	4807      	ldr	r0, [pc, #28]	@ (8000440 <MX_GPIO_Init+0x130>)
 8000424:	f001 fe92 	bl	800214c <HAL_GPIO_Init>

}
 8000428:	bf00      	nop
 800042a:	3720      	adds	r7, #32
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	40021000 	.word	0x40021000
 8000434:	40011000 	.word	0x40011000
 8000438:	40010800 	.word	0x40010800
 800043c:	40010c00 	.word	0x40010c00
 8000440:	40011400 	.word	0x40011400

08000444 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000448:	4b12      	ldr	r3, [pc, #72]	@ (8000494 <MX_I2C1_Init+0x50>)
 800044a:	4a13      	ldr	r2, [pc, #76]	@ (8000498 <MX_I2C1_Init+0x54>)
 800044c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800044e:	4b11      	ldr	r3, [pc, #68]	@ (8000494 <MX_I2C1_Init+0x50>)
 8000450:	4a12      	ldr	r2, [pc, #72]	@ (800049c <MX_I2C1_Init+0x58>)
 8000452:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000454:	4b0f      	ldr	r3, [pc, #60]	@ (8000494 <MX_I2C1_Init+0x50>)
 8000456:	2200      	movs	r2, #0
 8000458:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800045a:	4b0e      	ldr	r3, [pc, #56]	@ (8000494 <MX_I2C1_Init+0x50>)
 800045c:	2200      	movs	r2, #0
 800045e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000460:	4b0c      	ldr	r3, [pc, #48]	@ (8000494 <MX_I2C1_Init+0x50>)
 8000462:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000466:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000468:	4b0a      	ldr	r3, [pc, #40]	@ (8000494 <MX_I2C1_Init+0x50>)
 800046a:	2200      	movs	r2, #0
 800046c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800046e:	4b09      	ldr	r3, [pc, #36]	@ (8000494 <MX_I2C1_Init+0x50>)
 8000470:	2200      	movs	r2, #0
 8000472:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000474:	4b07      	ldr	r3, [pc, #28]	@ (8000494 <MX_I2C1_Init+0x50>)
 8000476:	2200      	movs	r2, #0
 8000478:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800047a:	4b06      	ldr	r3, [pc, #24]	@ (8000494 <MX_I2C1_Init+0x50>)
 800047c:	2200      	movs	r2, #0
 800047e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000480:	4804      	ldr	r0, [pc, #16]	@ (8000494 <MX_I2C1_Init+0x50>)
 8000482:	f001 ffff 	bl	8002484 <HAL_I2C_Init>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800048c:	f000 ff22 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000490:	bf00      	nop
 8000492:	bd80      	pop	{r7, pc}
 8000494:	200000f8 	.word	0x200000f8
 8000498:	40005400 	.word	0x40005400
 800049c:	000186a0 	.word	0x000186a0

080004a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b088      	sub	sp, #32
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a8:	f107 0310 	add.w	r3, r7, #16
 80004ac:	2200      	movs	r2, #0
 80004ae:	601a      	str	r2, [r3, #0]
 80004b0:	605a      	str	r2, [r3, #4]
 80004b2:	609a      	str	r2, [r3, #8]
 80004b4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	4a15      	ldr	r2, [pc, #84]	@ (8000510 <HAL_I2C_MspInit+0x70>)
 80004bc:	4293      	cmp	r3, r2
 80004be:	d123      	bne.n	8000508 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c0:	4b14      	ldr	r3, [pc, #80]	@ (8000514 <HAL_I2C_MspInit+0x74>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	4a13      	ldr	r2, [pc, #76]	@ (8000514 <HAL_I2C_MspInit+0x74>)
 80004c6:	f043 0308 	orr.w	r3, r3, #8
 80004ca:	6193      	str	r3, [r2, #24]
 80004cc:	4b11      	ldr	r3, [pc, #68]	@ (8000514 <HAL_I2C_MspInit+0x74>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	f003 0308 	and.w	r3, r3, #8
 80004d4:	60fb      	str	r3, [r7, #12]
 80004d6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80004d8:	23c0      	movs	r3, #192	@ 0xc0
 80004da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004dc:	2312      	movs	r3, #18
 80004de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004e0:	2303      	movs	r3, #3
 80004e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004e4:	f107 0310 	add.w	r3, r7, #16
 80004e8:	4619      	mov	r1, r3
 80004ea:	480b      	ldr	r0, [pc, #44]	@ (8000518 <HAL_I2C_MspInit+0x78>)
 80004ec:	f001 fe2e 	bl	800214c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80004f0:	4b08      	ldr	r3, [pc, #32]	@ (8000514 <HAL_I2C_MspInit+0x74>)
 80004f2:	69db      	ldr	r3, [r3, #28]
 80004f4:	4a07      	ldr	r2, [pc, #28]	@ (8000514 <HAL_I2C_MspInit+0x74>)
 80004f6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80004fa:	61d3      	str	r3, [r2, #28]
 80004fc:	4b05      	ldr	r3, [pc, #20]	@ (8000514 <HAL_I2C_MspInit+0x74>)
 80004fe:	69db      	ldr	r3, [r3, #28]
 8000500:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000504:	60bb      	str	r3, [r7, #8]
 8000506:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000508:	bf00      	nop
 800050a:	3720      	adds	r7, #32
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	40005400 	.word	0x40005400
 8000514:	40021000 	.word	0x40021000
 8000518:	40010c00 	.word	0x40010c00

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f001 f9bc 	bl	800189c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f846 	bl	80005b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f7ff fef2 	bl	8000310 <MX_GPIO_Init>
  MX_TIM3_Init();
 800052c:	f000 ffe6 	bl	80014fc <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000530:	f001 f8aa 	bl	8001688 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000534:	f7ff fe0a 	bl	800014c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000538:	f7ff fe46 	bl	80001c8 <MX_ADC2_Init>
  MX_I2C1_Init();
 800053c:	f7ff ff82 	bl	8000444 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000540:	f001 f8cc 	bl	80016dc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // Initialize autolauncher parameters i.e. read eeprom
  parameter_init();
 8000544:	f000 f8ba 	bl	80006bc <parameter_init>
  // Initialize stepper motors
  motor_init();
 8000548:	f000 fe94 	bl	8001274 <motor_init>
  // initialize multiplexer
  multiplexer_set(MUX_STM32);
 800054c:	2001      	movs	r0, #1
 800054e:	f000 fd2d 	bl	8000fac <multiplexer_set>
  // Initialize relays
  relay_init();
 8000552:	f000 fe4f 	bl	80011f4 <relay_init>
  // menu init
  //menu_init();
  // enable receive interrupt
  HAL_UART_Receive_IT(&huart1, rxBuffer, 1); // enable UART receive interrupt, store received char in rxChar buffer
 8000556:	2201      	movs	r2, #1
 8000558:	4911      	ldr	r1, [pc, #68]	@ (80005a0 <main+0x84>)
 800055a:	4812      	ldr	r0, [pc, #72]	@ (80005a4 <main+0x88>)
 800055c:	f003 fb2d 	bl	8003bba <HAL_UART_Receive_IT>
  // display main menu at startup
  menu_main();
 8000560:	f000 fbe2 	bl	8000d28 <menu_main>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // menu control loop
	  if(active == rxStatus){ // set to active with UART RX interrupt
 8000564:	4b10      	ldr	r3, [pc, #64]	@ (80005a8 <main+0x8c>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b01      	cmp	r3, #1
 800056a:	d115      	bne.n	8000598 <main+0x7c>
		  rxStatus = idle;
 800056c:	4b0e      	ldr	r3, [pc, #56]	@ (80005a8 <main+0x8c>)
 800056e:	2200      	movs	r2, #0
 8000570:	701a      	strb	r2, [r3, #0]
		  if( mainMenu == activeMenu){
 8000572:	4b0e      	ldr	r3, [pc, #56]	@ (80005ac <main+0x90>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d105      	bne.n	8000586 <main+0x6a>
			  main_process_input(rxChar); // go to main switch case menu
 800057a:	4b0d      	ldr	r3, [pc, #52]	@ (80005b0 <main+0x94>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	4618      	mov	r0, r3
 8000580:	f000 f8c6 	bl	8000710 <main_process_input>
 8000584:	e008      	b.n	8000598 <main+0x7c>
		  } else if ( configMenu == activeMenu){
 8000586:	4b09      	ldr	r3, [pc, #36]	@ (80005ac <main+0x90>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	2b01      	cmp	r3, #1
 800058c:	d104      	bne.n	8000598 <main+0x7c>
			  config_process_input(rxChar);
 800058e:	4b08      	ldr	r3, [pc, #32]	@ (80005b0 <main+0x94>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	4618      	mov	r0, r3
 8000594:	f000 fa9a 	bl	8000acc <config_process_input>
		  }
	  }
	  // monitor voltage and send alarm if it's below a threshold
	  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	  HAL_Delay(100);
 8000598:	2064      	movs	r0, #100	@ 0x64
 800059a:	f001 f9e1 	bl	8001960 <HAL_Delay>
	  if(active == rxStatus){ // set to active with UART RX interrupt
 800059e:	e7e1      	b.n	8000564 <main+0x48>
 80005a0:	20000150 	.word	0x20000150
 80005a4:	200001a0 	.word	0x200001a0
 80005a8:	2000014d 	.word	0x2000014d
 80005ac:	2000014e 	.word	0x2000014e
 80005b0:	20000151 	.word	0x20000151

080005b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b094      	sub	sp, #80	@ 0x50
 80005b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005be:	2228      	movs	r2, #40	@ 0x28
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f004 fa92 	bl	8004aec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c8:	f107 0314 	add.w	r3, r7, #20
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e4:	2302      	movs	r3, #2
 80005e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e8:	2301      	movs	r3, #1
 80005ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ec:	2310      	movs	r3, #16
 80005ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005f0:	2300      	movs	r3, #0
 80005f2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005f8:	4618      	mov	r0, r3
 80005fa:	f002 f887 	bl	800270c <HAL_RCC_OscConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000604:	f000 fe66 	bl	80012d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000608:	230f      	movs	r3, #15
 800060a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800060c:	2300      	movs	r3, #0
 800060e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800061c:	f107 0314 	add.w	r3, r7, #20
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f002 faf4 	bl	8002c10 <HAL_RCC_ClockConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800062e:	f000 fe51 	bl	80012d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000632:	2302      	movs	r3, #2
 8000634:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000636:	2300      	movs	r3, #0
 8000638:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	4618      	mov	r0, r3
 800063e:	f002 fc75 	bl	8002f2c <HAL_RCCEx_PeriphCLKConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000648:	f000 fe44 	bl	80012d4 <Error_Handler>
  }
}
 800064c:	bf00      	nop
 800064e:	3750      	adds	r7, #80	@ 0x50
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <print_inline>:


/***************************************** START AUTOLAUNCHER FUNCTIONS *****************************************/


void print_inline(char * text){
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	char temp = ' ';
 800065c:	2320      	movs	r3, #32
 800065e:	73bb      	strb	r3, [r7, #14]
	for(uint8_t i = 0; i<=255 && temp!= '\0' ; i++){
 8000660:	2300      	movs	r3, #0
 8000662:	73fb      	strb	r3, [r7, #15]
 8000664:	e00e      	b.n	8000684 <print_inline+0x30>
		temp = text[i];
 8000666:	7bfb      	ldrb	r3, [r7, #15]
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	4413      	add	r3, r2
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	73bb      	strb	r3, [r7, #14]
		HAL_UART_Transmit(&huart1, (uint8_t *) &temp, 1, 100);
 8000670:	f107 010e 	add.w	r1, r7, #14
 8000674:	2364      	movs	r3, #100	@ 0x64
 8000676:	2201      	movs	r2, #1
 8000678:	4806      	ldr	r0, [pc, #24]	@ (8000694 <print_inline+0x40>)
 800067a:	f003 fa13 	bl	8003aa4 <HAL_UART_Transmit>
	for(uint8_t i = 0; i<=255 && temp!= '\0' ; i++){
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	3301      	adds	r3, #1
 8000682:	73fb      	strb	r3, [r7, #15]
 8000684:	7bbb      	ldrb	r3, [r7, #14]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d1ed      	bne.n	8000666 <print_inline+0x12>
	}
}
 800068a:	bf00      	nop
 800068c:	bf00      	nop
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	200001a0 	.word	0x200001a0

08000698 <__io_putchar>:

/* Support printf over UART
   Warning: printf() only empties the buffer and prints after seeing an \n */
int __io_putchar(int ch){
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
	(void) HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, HAL_MAX_DELAY);
 80006a0:	1d39      	adds	r1, r7, #4
 80006a2:	f04f 33ff 	mov.w	r3, #4294967295
 80006a6:	2201      	movs	r2, #1
 80006a8:	4803      	ldr	r0, [pc, #12]	@ (80006b8 <__io_putchar+0x20>)
 80006aa:	f003 f9fb 	bl	8003aa4 <HAL_UART_Transmit>
	return ch;
 80006ae:	687b      	ldr	r3, [r7, #4]
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	200001a0 	.word	0x200001a0

080006bc <parameter_init>:

/* Initialize autolauncher parameters */
void parameter_init(void){
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
	// get parameters from eeprom or assign default values

}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr

080006c8 <HAL_UART_RxCpltCallback>:

/* UART Receive interrupt callback, set rxStatus flag for new char received and echo, re-enable uart rx interrupt*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
	// check that uart1 triggered the interrupt callback
	if(huart->Instance == USART1){
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a09      	ldr	r2, [pc, #36]	@ (80006fc <HAL_UART_RxCpltCallback+0x34>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d10b      	bne.n	80006f2 <HAL_UART_RxCpltCallback+0x2a>
		rxChar = rxBuffer[0]; // store the only element in buffer to a char for easier variable handling
 80006da:	4b09      	ldr	r3, [pc, #36]	@ (8000700 <HAL_UART_RxCpltCallback+0x38>)
 80006dc:	781a      	ldrb	r2, [r3, #0]
 80006de:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <HAL_UART_RxCpltCallback+0x3c>)
 80006e0:	701a      	strb	r2, [r3, #0]
		rxStatus = active; // set flag to enter main menu char processing
 80006e2:	4b09      	ldr	r3, [pc, #36]	@ (8000708 <HAL_UART_RxCpltCallback+0x40>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, (uint8_t *) rxBuffer, 1); // reactivate rx interrupt
 80006e8:	2201      	movs	r2, #1
 80006ea:	4905      	ldr	r1, [pc, #20]	@ (8000700 <HAL_UART_RxCpltCallback+0x38>)
 80006ec:	4807      	ldr	r0, [pc, #28]	@ (800070c <HAL_UART_RxCpltCallback+0x44>)
 80006ee:	f003 fa64 	bl	8003bba <HAL_UART_Receive_IT>
	}
}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40013800 	.word	0x40013800
 8000700:	20000150 	.word	0x20000150
 8000704:	20000151 	.word	0x20000151
 8000708:	2000014d 	.word	0x2000014d
 800070c:	200001a0 	.word	0x200001a0

08000710 <main_process_input>:

/* Process char received while in Main menu */
void main_process_input(char option){
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	71fb      	strb	r3, [r7, #7]
	printf("\r\n> Executing OPTION (%c) ...\r\n", option);
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	4619      	mov	r1, r3
 800071e:	48c5      	ldr	r0, [pc, #788]	@ (8000a34 <main_process_input+0x324>)
 8000720:	f004 f89c 	bl	800485c <iprintf>

	switch (option){
 8000724:	79fb      	ldrb	r3, [r7, #7]
 8000726:	3b30      	subs	r3, #48	@ 0x30
 8000728:	2b4e      	cmp	r3, #78	@ 0x4e
 800072a:	f200 817a 	bhi.w	8000a22 <main_process_input+0x312>
 800072e:	a201      	add	r2, pc, #4	@ (adr r2, 8000734 <main_process_input+0x24>)
 8000730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000734:	08000871 	.word	0x08000871
 8000738:	08000885 	.word	0x08000885
 800073c:	08000893 	.word	0x08000893
 8000740:	080008a1 	.word	0x080008a1
 8000744:	080008af 	.word	0x080008af
 8000748:	080008bd 	.word	0x080008bd
 800074c:	080008cb 	.word	0x080008cb
 8000750:	080008d9 	.word	0x080008d9
 8000754:	080008f7 	.word	0x080008f7
 8000758:	08000a23 	.word	0x08000a23
 800075c:	08000a23 	.word	0x08000a23
 8000760:	08000a23 	.word	0x08000a23
 8000764:	08000a23 	.word	0x08000a23
 8000768:	08000a23 	.word	0x08000a23
 800076c:	08000a23 	.word	0x08000a23
 8000770:	08000a23 	.word	0x08000a23
 8000774:	08000a23 	.word	0x08000a23
 8000778:	08000975 	.word	0x08000975
 800077c:	0800097d 	.word	0x0800097d
 8000780:	08000985 	.word	0x08000985
 8000784:	0800098d 	.word	0x0800098d
 8000788:	08000995 	.word	0x08000995
 800078c:	0800099d 	.word	0x0800099d
 8000790:	080009f9 	.word	0x080009f9
 8000794:	080009a5 	.word	0x080009a5
 8000798:	080009bd 	.word	0x080009bd
 800079c:	08000a23 	.word	0x08000a23
 80007a0:	080009d5 	.word	0x080009d5
 80007a4:	080009ed 	.word	0x080009ed
 80007a8:	08000a05 	.word	0x08000a05
 80007ac:	08000a23 	.word	0x08000a23
 80007b0:	08000a23 	.word	0x08000a23
 80007b4:	08000a23 	.word	0x08000a23
 80007b8:	08000a23 	.word	0x08000a23
 80007bc:	080009e1 	.word	0x080009e1
 80007c0:	08000945 	.word	0x08000945
 80007c4:	0800095d 	.word	0x0800095d
 80007c8:	08000915 	.word	0x08000915
 80007cc:	0800091d 	.word	0x0800091d
 80007d0:	08000925 	.word	0x08000925
 80007d4:	0800092d 	.word	0x0800092d
 80007d8:	08000935 	.word	0x08000935
 80007dc:	0800093d 	.word	0x0800093d
 80007e0:	08000a23 	.word	0x08000a23
 80007e4:	08000a23 	.word	0x08000a23
 80007e8:	08000a23 	.word	0x08000a23
 80007ec:	08000a23 	.word	0x08000a23
 80007f0:	08000a23 	.word	0x08000a23
 80007f4:	08000a23 	.word	0x08000a23
 80007f8:	08000a23 	.word	0x08000a23
 80007fc:	08000a23 	.word	0x08000a23
 8000800:	08000a23 	.word	0x08000a23
 8000804:	08000a23 	.word	0x08000a23
 8000808:	08000a23 	.word	0x08000a23
 800080c:	08000a23 	.word	0x08000a23
 8000810:	08000a23 	.word	0x08000a23
 8000814:	08000a23 	.word	0x08000a23
 8000818:	08000a23 	.word	0x08000a23
 800081c:	08000a23 	.word	0x08000a23
 8000820:	08000a23 	.word	0x08000a23
 8000824:	08000a23 	.word	0x08000a23
 8000828:	08000a23 	.word	0x08000a23
 800082c:	08000a23 	.word	0x08000a23
 8000830:	08000a23 	.word	0x08000a23
 8000834:	08000a23 	.word	0x08000a23
 8000838:	08000a23 	.word	0x08000a23
 800083c:	08000a23 	.word	0x08000a23
 8000840:	08000a17 	.word	0x08000a17
 8000844:	08000a23 	.word	0x08000a23
 8000848:	08000a23 	.word	0x08000a23
 800084c:	08000a23 	.word	0x08000a23
 8000850:	08000a23 	.word	0x08000a23
 8000854:	08000a23 	.word	0x08000a23
 8000858:	08000a23 	.word	0x08000a23
 800085c:	08000a23 	.word	0x08000a23
 8000860:	08000a23 	.word	0x08000a23
 8000864:	08000a23 	.word	0x08000a23
 8000868:	08000a23 	.word	0x08000a23
 800086c:	08000a0b 	.word	0x08000a0b
		// Connect XBT pins
    case '0':
        //engage calibration resistor
    	printf(" -- unground_xbt(),calibration_resistor(),calibrate_on() --\r\n");
 8000870:	4871      	ldr	r0, [pc, #452]	@ (8000a38 <main_process_input+0x328>)
 8000872:	f004 f85b 	bl	800492c <puts>
        unground_xbt();
 8000876:	f000 fbab 	bl	8000fd0 <unground_xbt>
        calibration_resistor();
 800087a:	f000 fbc1 	bl	8001000 <calibration_resistor>
        calibrate_on();
 800087e:	f000 fbd7 	bl	8001030 <calibrate_on>
        break;
 8000882:	e0d2      	b.n	8000a2a <main_process_input+0x31a>
    case '1':
    	printf("connect_xbt_pin(1)\r\n");
 8000884:	486d      	ldr	r0, [pc, #436]	@ (8000a3c <main_process_input+0x32c>)
 8000886:	f004 f851 	bl	800492c <puts>
        connect_xbt_pin(1);
 800088a:	2001      	movs	r0, #1
 800088c:	f000 fc14 	bl	80010b8 <connect_xbt_pin>
        break;
 8000890:	e0cb      	b.n	8000a2a <main_process_input+0x31a>
    case '2':
        connect_xbt_pin(2);
 8000892:	2002      	movs	r0, #2
 8000894:	f000 fc10 	bl	80010b8 <connect_xbt_pin>
        printf("connect_xbt_pin(2)\r\n");
 8000898:	4869      	ldr	r0, [pc, #420]	@ (8000a40 <main_process_input+0x330>)
 800089a:	f004 f847 	bl	800492c <puts>
        break;
 800089e:	e0c4      	b.n	8000a2a <main_process_input+0x31a>
    case '3':
        connect_xbt_pin(3);
 80008a0:	2003      	movs	r0, #3
 80008a2:	f000 fc09 	bl	80010b8 <connect_xbt_pin>
        printf("connect_xbt_pin(3)\r\n");
 80008a6:	4867      	ldr	r0, [pc, #412]	@ (8000a44 <main_process_input+0x334>)
 80008a8:	f004 f840 	bl	800492c <puts>
        break;
 80008ac:	e0bd      	b.n	8000a2a <main_process_input+0x31a>
    case '4':
        connect_xbt_pin(4);
 80008ae:	2004      	movs	r0, #4
 80008b0:	f000 fc02 	bl	80010b8 <connect_xbt_pin>
        printf("connect_xbt_pin(4)\r\n");
 80008b4:	4864      	ldr	r0, [pc, #400]	@ (8000a48 <main_process_input+0x338>)
 80008b6:	f004 f839 	bl	800492c <puts>
        break;
 80008ba:	e0b6      	b.n	8000a2a <main_process_input+0x31a>
    case '5':
        connect_xbt_pin(5);
 80008bc:	2005      	movs	r0, #5
 80008be:	f000 fbfb 	bl	80010b8 <connect_xbt_pin>
        printf("connect_xbt_pin(5)\r\n");
 80008c2:	4862      	ldr	r0, [pc, #392]	@ (8000a4c <main_process_input+0x33c>)
 80008c4:	f004 f832 	bl	800492c <puts>
        break;
 80008c8:	e0af      	b.n	8000a2a <main_process_input+0x31a>
    case '6':
        connect_xbt_pin(6);
 80008ca:	2006      	movs	r0, #6
 80008cc:	f000 fbf4 	bl	80010b8 <connect_xbt_pin>
        printf("connect_xbt_pin(6)\r\n");
 80008d0:	485f      	ldr	r0, [pc, #380]	@ (8000a50 <main_process_input+0x340>)
 80008d2:	f004 f82b 	bl	800492c <puts>
        break;
 80008d6:	e0a8      	b.n	8000a2a <main_process_input+0x31a>
    case '7':
        if (launcher.tubeCount == '8'){
 80008d8:	4b5e      	ldr	r3, [pc, #376]	@ (8000a54 <main_process_input+0x344>)
 80008da:	78db      	ldrb	r3, [r3, #3]
 80008dc:	2b38      	cmp	r3, #56	@ 0x38
 80008de:	d106      	bne.n	80008ee <main_process_input+0x1de>
            connect_xbt_pin(7);
 80008e0:	2007      	movs	r0, #7
 80008e2:	f000 fbe9 	bl	80010b8 <connect_xbt_pin>
            printf("connect_xbt_pin(7)\r\n");
 80008e6:	485c      	ldr	r0, [pc, #368]	@ (8000a58 <main_process_input+0x348>)
 80008e8:	f004 f820 	bl	800492c <puts>
        } else {
        	printf("\r\n* ERROR: tube 7 not available *\r\n");
        }
        break;
 80008ec:	e09d      	b.n	8000a2a <main_process_input+0x31a>
        	printf("\r\n* ERROR: tube 7 not available *\r\n");
 80008ee:	485b      	ldr	r0, [pc, #364]	@ (8000a5c <main_process_input+0x34c>)
 80008f0:	f004 f81c 	bl	800492c <puts>
        break;
 80008f4:	e099      	b.n	8000a2a <main_process_input+0x31a>
    case '8':
        if (launcher.tubeCount == '8'){
 80008f6:	4b57      	ldr	r3, [pc, #348]	@ (8000a54 <main_process_input+0x344>)
 80008f8:	78db      	ldrb	r3, [r3, #3]
 80008fa:	2b38      	cmp	r3, #56	@ 0x38
 80008fc:	d106      	bne.n	800090c <main_process_input+0x1fc>
        	connect_xbt_pin(8);
 80008fe:	2008      	movs	r0, #8
 8000900:	f000 fbda 	bl	80010b8 <connect_xbt_pin>
        	printf("connect_xbt_pin(8)\r\n");
 8000904:	4856      	ldr	r0, [pc, #344]	@ (8000a60 <main_process_input+0x350>)
 8000906:	f004 f811 	bl	800492c <puts>
        } else {
        	printf("\r\n* ERROR: tube 8 not available *\r\n");
        }
        break;
 800090a:	e08e      	b.n	8000a2a <main_process_input+0x31a>
        	printf("\r\n* ERROR: tube 8 not available *\r\n");
 800090c:	4855      	ldr	r0, [pc, #340]	@ (8000a64 <main_process_input+0x354>)
 800090e:	f004 f80d 	bl	800492c <puts>
        break;
 8000912:	e08a      	b.n	8000a2a <main_process_input+0x31a>
        //EXTEND PINS
    case 'U':
        //extend_pin('1');
    	printf("extend_pin(1)\r\n");
 8000914:	4854      	ldr	r0, [pc, #336]	@ (8000a68 <main_process_input+0x358>)
 8000916:	f004 f809 	bl	800492c <puts>
        break;
 800091a:	e086      	b.n	8000a2a <main_process_input+0x31a>
    case 'V':
        //extend_pin('2');
        printf("extend_pin(2)\r\n");
 800091c:	4853      	ldr	r0, [pc, #332]	@ (8000a6c <main_process_input+0x35c>)
 800091e:	f004 f805 	bl	800492c <puts>
        break;
 8000922:	e082      	b.n	8000a2a <main_process_input+0x31a>
    case 'W':
        //extend_pin('3');
        printf("extend_pin(3)\r\n");
 8000924:	4852      	ldr	r0, [pc, #328]	@ (8000a70 <main_process_input+0x360>)
 8000926:	f004 f801 	bl	800492c <puts>
        break;
 800092a:	e07e      	b.n	8000a2a <main_process_input+0x31a>
    case 'X':
        //extend_pin('4');
        printf("extend_pin(4)\r\n");
 800092c:	4851      	ldr	r0, [pc, #324]	@ (8000a74 <main_process_input+0x364>)
 800092e:	f003 fffd 	bl	800492c <puts>
        break;
 8000932:	e07a      	b.n	8000a2a <main_process_input+0x31a>
    case 'Y':
        //extend_pin('5');
        printf("extend_pin(5)\r\n");
 8000934:	4850      	ldr	r0, [pc, #320]	@ (8000a78 <main_process_input+0x368>)
 8000936:	f003 fff9 	bl	800492c <puts>
        break;
 800093a:	e076      	b.n	8000a2a <main_process_input+0x31a>
    case 'Z':
        //extend_pin('6');
        printf("extend_pin(6)\r\n");
 800093c:	484f      	ldr	r0, [pc, #316]	@ (8000a7c <main_process_input+0x36c>)
 800093e:	f003 fff5 	bl	800492c <puts>
        break;
 8000942:	e072      	b.n	8000a2a <main_process_input+0x31a>
    case 'S':
        if (launcher.tubeCount == '8'){
 8000944:	4b43      	ldr	r3, [pc, #268]	@ (8000a54 <main_process_input+0x344>)
 8000946:	78db      	ldrb	r3, [r3, #3]
 8000948:	2b38      	cmp	r3, #56	@ 0x38
 800094a:	d103      	bne.n	8000954 <main_process_input+0x244>
        	//extend_pin('7');
        	printf("extend_pin(7)\r\n");
 800094c:	484c      	ldr	r0, [pc, #304]	@ (8000a80 <main_process_input+0x370>)
 800094e:	f003 ffed 	bl	800492c <puts>
        } else {
        	printf("Error, tube 7 not available\r\n");
        }
        break;
 8000952:	e06a      	b.n	8000a2a <main_process_input+0x31a>
        	printf("Error, tube 7 not available\r\n");
 8000954:	484b      	ldr	r0, [pc, #300]	@ (8000a84 <main_process_input+0x374>)
 8000956:	f003 ffe9 	bl	800492c <puts>
        break;
 800095a:	e066      	b.n	8000a2a <main_process_input+0x31a>
    case 'T':
        if (launcher.tubeCount == '8'){
 800095c:	4b3d      	ldr	r3, [pc, #244]	@ (8000a54 <main_process_input+0x344>)
 800095e:	78db      	ldrb	r3, [r3, #3]
 8000960:	2b38      	cmp	r3, #56	@ 0x38
 8000962:	d103      	bne.n	800096c <main_process_input+0x25c>
        	//extend_pin('8');
        	printf("extend_pin(8)\r\n");
 8000964:	4848      	ldr	r0, [pc, #288]	@ (8000a88 <main_process_input+0x378>)
 8000966:	f003 ffe1 	bl	800492c <puts>
        } else {
        	printf("Error, tube 8 not available\r\n");
        }
        break;
 800096a:	e05e      	b.n	8000a2a <main_process_input+0x31a>
        	printf("Error, tube 8 not available\r\n");
 800096c:	4847      	ldr	r0, [pc, #284]	@ (8000a8c <main_process_input+0x37c>)
 800096e:	f003 ffdd 	bl	800492c <puts>
        break;
 8000972:	e05a      	b.n	8000a2a <main_process_input+0x31a>
        //RETRACT PINS
    case 'A':
        //retract_pin('1');
    	printf("retract_pin(1)\r\n");
 8000974:	4846      	ldr	r0, [pc, #280]	@ (8000a90 <main_process_input+0x380>)
 8000976:	f003 ffd9 	bl	800492c <puts>
        break;
 800097a:	e056      	b.n	8000a2a <main_process_input+0x31a>
    case 'B':
        //retract_pin('2');
        printf("retract_pin(2)\r\n");
 800097c:	4845      	ldr	r0, [pc, #276]	@ (8000a94 <main_process_input+0x384>)
 800097e:	f003 ffd5 	bl	800492c <puts>
        break;
 8000982:	e052      	b.n	8000a2a <main_process_input+0x31a>
    case 'C':
        //retract_pin('3');
        printf("retract_pin(3)\r\n");
 8000984:	4844      	ldr	r0, [pc, #272]	@ (8000a98 <main_process_input+0x388>)
 8000986:	f003 ffd1 	bl	800492c <puts>
        break;
 800098a:	e04e      	b.n	8000a2a <main_process_input+0x31a>
    case 'D':
        //retract_pin('4');
        printf("retract_pin(4)\r\n");
 800098c:	4843      	ldr	r0, [pc, #268]	@ (8000a9c <main_process_input+0x38c>)
 800098e:	f003 ffcd 	bl	800492c <puts>
        break;
 8000992:	e04a      	b.n	8000a2a <main_process_input+0x31a>
    case 'E':
        //retract_pin('5');
        printf("retract_pin(5)\r\n");
 8000994:	4842      	ldr	r0, [pc, #264]	@ (8000aa0 <main_process_input+0x390>)
 8000996:	f003 ffc9 	bl	800492c <puts>
        break;
 800099a:	e046      	b.n	8000a2a <main_process_input+0x31a>
    case 'F':
        //retract_pin('6');
        printf("retract_pin(6)\r\n");
 800099c:	4841      	ldr	r0, [pc, #260]	@ (8000aa4 <main_process_input+0x394>)
 800099e:	f003 ffc5 	bl	800492c <puts>
        break;
 80009a2:	e042      	b.n	8000a2a <main_process_input+0x31a>
    case 'H':
        if (launcher.tubeCount == '8'){
 80009a4:	4b2b      	ldr	r3, [pc, #172]	@ (8000a54 <main_process_input+0x344>)
 80009a6:	78db      	ldrb	r3, [r3, #3]
 80009a8:	2b38      	cmp	r3, #56	@ 0x38
 80009aa:	d103      	bne.n	80009b4 <main_process_input+0x2a4>
        	//retract_pin('7');
        	printf("retract_pin(7)\r\n");
 80009ac:	483e      	ldr	r0, [pc, #248]	@ (8000aa8 <main_process_input+0x398>)
 80009ae:	f003 ffbd 	bl	800492c <puts>
        } else {
        	printf("Error, tube 7 not available\r\n");
        }
        break;
 80009b2:	e03a      	b.n	8000a2a <main_process_input+0x31a>
        	printf("Error, tube 7 not available\r\n");
 80009b4:	4833      	ldr	r0, [pc, #204]	@ (8000a84 <main_process_input+0x374>)
 80009b6:	f003 ffb9 	bl	800492c <puts>
        break;
 80009ba:	e036      	b.n	8000a2a <main_process_input+0x31a>
    case 'I':
        if (launcher.tubeCount == '8'){
 80009bc:	4b25      	ldr	r3, [pc, #148]	@ (8000a54 <main_process_input+0x344>)
 80009be:	78db      	ldrb	r3, [r3, #3]
 80009c0:	2b38      	cmp	r3, #56	@ 0x38
 80009c2:	d103      	bne.n	80009cc <main_process_input+0x2bc>
        	//retract_pin('8');
        	printf("retract_pin(8)\r\n");
 80009c4:	4839      	ldr	r0, [pc, #228]	@ (8000aac <main_process_input+0x39c>)
 80009c6:	f003 ffb1 	bl	800492c <puts>
        } else {
        	printf("Error, tube 8 not available\r\n");
        }
        break;
 80009ca:	e02e      	b.n	8000a2a <main_process_input+0x31a>
        	printf("Error, tube 8 not available\r\n");
 80009cc:	482f      	ldr	r0, [pc, #188]	@ (8000a8c <main_process_input+0x37c>)
 80009ce:	f003 ffad 	bl	800492c <puts>
        break;
 80009d2:	e02a      	b.n	8000a2a <main_process_input+0x31a>
    case 'K':
    	printf("calibrate_on()\r\n");
 80009d4:	4836      	ldr	r0, [pc, #216]	@ (8000ab0 <main_process_input+0x3a0>)
 80009d6:	f003 ffa9 	bl	800492c <puts>
        calibrate_on();
 80009da:	f000 fb29 	bl	8001030 <calibrate_on>
        break;
 80009de:	e024      	b.n	8000a2a <main_process_input+0x31a>
    case 'R':
    	printf("reset_relay()\r\n");
 80009e0:	4834      	ldr	r0, [pc, #208]	@ (8000ab4 <main_process_input+0x3a4>)
 80009e2:	f003 ffa3 	bl	800492c <puts>
        reset_relay();
 80009e6:	f000 fb3b 	bl	8001060 <reset_relay>
        break;
 80009ea:	e01e      	b.n	8000a2a <main_process_input+0x31a>
    case 'L':
    	printf("calibration_resistor()\r\n");
 80009ec:	4832      	ldr	r0, [pc, #200]	@ (8000ab8 <main_process_input+0x3a8>)
 80009ee:	f003 ff9d 	bl	800492c <puts>
        calibration_resistor();
 80009f2:	f000 fb05 	bl	8001000 <calibration_resistor>
        break;
 80009f6:	e018      	b.n	8000a2a <main_process_input+0x31a>
    case 'G':
    	printf("unground_xbt()\r\n");
 80009f8:	4830      	ldr	r0, [pc, #192]	@ (8000abc <main_process_input+0x3ac>)
 80009fa:	f003 ff97 	bl	800492c <puts>
        unground_xbt();
 80009fe:	f000 fae7 	bl	8000fd0 <unground_xbt>
        break;
 8000a02:	e012      	b.n	8000a2a <main_process_input+0x31a>
    case 'M':
        menu_main();
 8000a04:	f000 f990 	bl	8000d28 <menu_main>
        break;
 8000a08:	e00f      	b.n	8000a2a <main_process_input+0x31a>
    case '~':
        menu_config();
 8000a0a:	f000 fa25 	bl	8000e58 <menu_config>
        activeMenu = configMenu; // set configuration menu flag
 8000a0e:	4b2c      	ldr	r3, [pc, #176]	@ (8000ac0 <main_process_input+0x3b0>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	701a      	strb	r2, [r3, #0]
        break;
 8000a14:	e009      	b.n	8000a2a <main_process_input+0x31a>
    case 's':
        print_serial_number();
 8000a16:	f000 fa73 	bl	8000f00 <print_serial_number>
        printf("\r\n");
 8000a1a:	482a      	ldr	r0, [pc, #168]	@ (8000ac4 <main_process_input+0x3b4>)
 8000a1c:	f003 ff86 	bl	800492c <puts>
        break;
 8000a20:	e003      	b.n	8000a2a <main_process_input+0x31a>
    default:
        printf("\r\n** Unrecognized command!!** \r\n");
 8000a22:	4829      	ldr	r0, [pc, #164]	@ (8000ac8 <main_process_input+0x3b8>)
 8000a24:	f003 ff82 	bl	800492c <puts>
        break;
 8000a28:	bf00      	nop
	}
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	08005620 	.word	0x08005620
 8000a38:	08005640 	.word	0x08005640
 8000a3c:	08005680 	.word	0x08005680
 8000a40:	08005694 	.word	0x08005694
 8000a44:	080056a8 	.word	0x080056a8
 8000a48:	080056bc 	.word	0x080056bc
 8000a4c:	080056d0 	.word	0x080056d0
 8000a50:	080056e4 	.word	0x080056e4
 8000a54:	20000000 	.word	0x20000000
 8000a58:	080056f8 	.word	0x080056f8
 8000a5c:	0800570c 	.word	0x0800570c
 8000a60:	08005730 	.word	0x08005730
 8000a64:	08005744 	.word	0x08005744
 8000a68:	08005768 	.word	0x08005768
 8000a6c:	08005778 	.word	0x08005778
 8000a70:	08005788 	.word	0x08005788
 8000a74:	08005798 	.word	0x08005798
 8000a78:	080057a8 	.word	0x080057a8
 8000a7c:	080057b8 	.word	0x080057b8
 8000a80:	080057c8 	.word	0x080057c8
 8000a84:	080057d8 	.word	0x080057d8
 8000a88:	080057f8 	.word	0x080057f8
 8000a8c:	08005808 	.word	0x08005808
 8000a90:	08005828 	.word	0x08005828
 8000a94:	08005838 	.word	0x08005838
 8000a98:	08005848 	.word	0x08005848
 8000a9c:	08005858 	.word	0x08005858
 8000aa0:	08005868 	.word	0x08005868
 8000aa4:	08005878 	.word	0x08005878
 8000aa8:	08005888 	.word	0x08005888
 8000aac:	08005898 	.word	0x08005898
 8000ab0:	080058a8 	.word	0x080058a8
 8000ab4:	080058b8 	.word	0x080058b8
 8000ab8:	080058c8 	.word	0x080058c8
 8000abc:	080058e0 	.word	0x080058e0
 8000ac0:	2000014e 	.word	0x2000014e
 8000ac4:	080058f0 	.word	0x080058f0
 8000ac8:	080058f4 	.word	0x080058f4

08000acc <config_process_input>:

/* Process char received while in configuration menu */
void config_process_input(char option){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	71fb      	strb	r3, [r7, #7]
    switch (option) {
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	3b31      	subs	r3, #49	@ 0x31
 8000ada:	2b20      	cmp	r3, #32
 8000adc:	f200 80f2 	bhi.w	8000cc4 <config_process_input+0x1f8>
 8000ae0:	a201      	add	r2, pc, #4	@ (adr r2, 8000ae8 <config_process_input+0x1c>)
 8000ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ae6:	bf00      	nop
 8000ae8:	08000b85 	.word	0x08000b85
 8000aec:	08000cc5 	.word	0x08000cc5
 8000af0:	08000cc5 	.word	0x08000cc5
 8000af4:	08000cc5 	.word	0x08000cc5
 8000af8:	08000cc5 	.word	0x08000cc5
 8000afc:	08000cc5 	.word	0x08000cc5
 8000b00:	08000cc5 	.word	0x08000cc5
 8000b04:	08000cc5 	.word	0x08000cc5
 8000b08:	08000cc5 	.word	0x08000cc5
 8000b0c:	08000cc5 	.word	0x08000cc5
 8000b10:	08000cc5 	.word	0x08000cc5
 8000b14:	08000cc5 	.word	0x08000cc5
 8000b18:	08000cc5 	.word	0x08000cc5
 8000b1c:	08000cc5 	.word	0x08000cc5
 8000b20:	08000cc5 	.word	0x08000cc5
 8000b24:	08000cc5 	.word	0x08000cc5
 8000b28:	08000cc5 	.word	0x08000cc5
 8000b2c:	08000cc5 	.word	0x08000cc5
 8000b30:	08000cc5 	.word	0x08000cc5
 8000b34:	08000cc5 	.word	0x08000cc5
 8000b38:	08000cc5 	.word	0x08000cc5
 8000b3c:	08000cc5 	.word	0x08000cc5
 8000b40:	08000cb7 	.word	0x08000cb7
 8000b44:	08000cc5 	.word	0x08000cc5
 8000b48:	08000cc5 	.word	0x08000cc5
 8000b4c:	08000ca7 	.word	0x08000ca7
 8000b50:	08000cc5 	.word	0x08000cc5
 8000b54:	08000cc5 	.word	0x08000cc5
 8000b58:	08000b7f 	.word	0x08000b7f
 8000b5c:	08000caf 	.word	0x08000caf
 8000b60:	08000cc5 	.word	0x08000cc5
 8000b64:	08000cc5 	.word	0x08000cc5
 8000b68:	08000b6d 	.word	0x08000b6d
        case 'Q':
            printf("\n\rLeaving Auto launcher configuration menu\n\r");
 8000b6c:	4859      	ldr	r0, [pc, #356]	@ (8000cd4 <config_process_input+0x208>)
 8000b6e:	f003 fe75 	bl	800485c <iprintf>
            activeMenu = mainMenu; // set active menu flag to main menu
 8000b72:	4b59      	ldr	r3, [pc, #356]	@ (8000cd8 <config_process_input+0x20c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	701a      	strb	r2, [r3, #0]
            menu_main();
 8000b78:	f000 f8d6 	bl	8000d28 <menu_main>
            break;
 8000b7c:	e0a6      	b.n	8000ccc <config_process_input+0x200>
        case 'M':
            menu_config();
 8000b7e:	f000 f96b 	bl	8000e58 <menu_config>
            break;
 8000b82:	e0a3      	b.n	8000ccc <config_process_input+0x200>
        case '1':
        	// get the autolauncher tube count
            print_inline("\r\nEnter AL tube count [6] or [8]: ");
 8000b84:	4855      	ldr	r0, [pc, #340]	@ (8000cdc <config_process_input+0x210>)
 8000b86:	f7ff fd65 	bl	8000654 <print_inline>
            while(1){
            	if(rxStatus == active){
 8000b8a:	4b55      	ldr	r3, [pc, #340]	@ (8000ce0 <config_process_input+0x214>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d1fb      	bne.n	8000b8a <config_process_input+0xbe>
            		rxStatus = idle;
 8000b92:	4b53      	ldr	r3, [pc, #332]	@ (8000ce0 <config_process_input+0x214>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	701a      	strb	r2, [r3, #0]
            		printf(" %c\r\n", rxChar);
 8000b98:	4b52      	ldr	r3, [pc, #328]	@ (8000ce4 <config_process_input+0x218>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4852      	ldr	r0, [pc, #328]	@ (8000ce8 <config_process_input+0x21c>)
 8000ba0:	f003 fe5c 	bl	800485c <iprintf>
            		if(rxChar == '6' || rxChar == '8'){
 8000ba4:	4b4f      	ldr	r3, [pc, #316]	@ (8000ce4 <config_process_input+0x218>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b36      	cmp	r3, #54	@ 0x36
 8000baa:	d003      	beq.n	8000bb4 <config_process_input+0xe8>
 8000bac:	4b4d      	ldr	r3, [pc, #308]	@ (8000ce4 <config_process_input+0x218>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b38      	cmp	r3, #56	@ 0x38
 8000bb2:	d109      	bne.n	8000bc8 <config_process_input+0xfc>
            			launcher.tubeCount = rxChar;
 8000bb4:	4b4b      	ldr	r3, [pc, #300]	@ (8000ce4 <config_process_input+0x218>)
 8000bb6:	781a      	ldrb	r2, [r3, #0]
 8000bb8:	4b4c      	ldr	r3, [pc, #304]	@ (8000cec <config_process_input+0x220>)
 8000bba:	70da      	strb	r2, [r3, #3]
            			break;
 8000bbc:	bf00      	nop
            			print_inline("\r\nEnter AL tube count [6] or [8]: ");
            		}
            	}
            }
            // get the autolauncher type, R regular or X extended, only for 8 tube AL
            if(launcher.tubeCount == '8'){
 8000bbe:	4b4b      	ldr	r3, [pc, #300]	@ (8000cec <config_process_input+0x220>)
 8000bc0:	78db      	ldrb	r3, [r3, #3]
 8000bc2:	2b38      	cmp	r3, #56	@ 0x38
 8000bc4:	d12b      	bne.n	8000c1e <config_process_input+0x152>
 8000bc6:	e006      	b.n	8000bd6 <config_process_input+0x10a>
            			printf("\r\nError, Enter 6 or 8 !\r\n");
 8000bc8:	4849      	ldr	r0, [pc, #292]	@ (8000cf0 <config_process_input+0x224>)
 8000bca:	f003 feaf 	bl	800492c <puts>
            			print_inline("\r\nEnter AL tube count [6] or [8]: ");
 8000bce:	4843      	ldr	r0, [pc, #268]	@ (8000cdc <config_process_input+0x210>)
 8000bd0:	f7ff fd40 	bl	8000654 <print_inline>
            	if(rxStatus == active){
 8000bd4:	e7d9      	b.n	8000b8a <config_process_input+0xbe>
            	print_inline("Enter launcher type, [X] extended or [R] regular: ");
 8000bd6:	4847      	ldr	r0, [pc, #284]	@ (8000cf4 <config_process_input+0x228>)
 8000bd8:	f7ff fd3c 	bl	8000654 <print_inline>
                while(1){
                	if(rxStatus == active){
 8000bdc:	4b40      	ldr	r3, [pc, #256]	@ (8000ce0 <config_process_input+0x214>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d1fb      	bne.n	8000bdc <config_process_input+0x110>
                		rxStatus = idle;
 8000be4:	4b3e      	ldr	r3, [pc, #248]	@ (8000ce0 <config_process_input+0x214>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	701a      	strb	r2, [r3, #0]
                		printf(" %c\r\n", rxChar);
 8000bea:	4b3e      	ldr	r3, [pc, #248]	@ (8000ce4 <config_process_input+0x218>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	4619      	mov	r1, r3
 8000bf0:	483d      	ldr	r0, [pc, #244]	@ (8000ce8 <config_process_input+0x21c>)
 8000bf2:	f003 fe33 	bl	800485c <iprintf>
                		if(rxChar == 'X' || rxChar == 'R'){
 8000bf6:	4b3b      	ldr	r3, [pc, #236]	@ (8000ce4 <config_process_input+0x218>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	2b58      	cmp	r3, #88	@ 0x58
 8000bfc:	d003      	beq.n	8000c06 <config_process_input+0x13a>
 8000bfe:	4b39      	ldr	r3, [pc, #228]	@ (8000ce4 <config_process_input+0x218>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	2b52      	cmp	r3, #82	@ 0x52
 8000c04:	d104      	bne.n	8000c10 <config_process_input+0x144>
                			launcher.type = rxChar;
 8000c06:	4b37      	ldr	r3, [pc, #220]	@ (8000ce4 <config_process_input+0x218>)
 8000c08:	781a      	ldrb	r2, [r3, #0]
 8000c0a:	4b38      	ldr	r3, [pc, #224]	@ (8000cec <config_process_input+0x220>)
 8000c0c:	711a      	strb	r2, [r3, #4]
                			break;
 8000c0e:	e009      	b.n	8000c24 <config_process_input+0x158>
                		} else {
                			printf("\r\nError, Enter X or R !\r\n");
 8000c10:	4839      	ldr	r0, [pc, #228]	@ (8000cf8 <config_process_input+0x22c>)
 8000c12:	f003 fe8b 	bl	800492c <puts>
                			print_inline("Enter launcher type, [X] extended or [R] regular: ");
 8000c16:	4837      	ldr	r0, [pc, #220]	@ (8000cf4 <config_process_input+0x228>)
 8000c18:	f7ff fd1c 	bl	8000654 <print_inline>
                	if(rxStatus == active){
 8000c1c:	e7de      	b.n	8000bdc <config_process_input+0x110>
                		}
                	}
                }
            } else {
            	launcher.type = '?'; // if not 8 tubes, reset type to unknown
 8000c1e:	4b33      	ldr	r3, [pc, #204]	@ (8000cec <config_process_input+0x220>)
 8000c20:	223f      	movs	r2, #63	@ 0x3f
 8000c22:	711a      	strb	r2, [r3, #4]
            }
            print_inline("Enter a two-digit autolauncher serial number [0-99]: ");
 8000c24:	4835      	ldr	r0, [pc, #212]	@ (8000cfc <config_process_input+0x230>)
 8000c26:	f7ff fd15 	bl	8000654 <print_inline>
            // get the 2 digit serial number
    		for(uint8_t i = 0; i < 2; i++){
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	73fb      	strb	r3, [r7, #15]
 8000c2e:	e020      	b.n	8000c72 <config_process_input+0x1a6>
    			while(1){
					if(rxStatus == active){
 8000c30:	4b2b      	ldr	r3, [pc, #172]	@ (8000ce0 <config_process_input+0x214>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d1fb      	bne.n	8000c30 <config_process_input+0x164>
						rxStatus = idle;
 8000c38:	4b29      	ldr	r3, [pc, #164]	@ (8000ce0 <config_process_input+0x214>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	701a      	strb	r2, [r3, #0]
						if(is_num(rxChar) == 1){ // check it's a number to store it
 8000c3e:	4b29      	ldr	r3, [pc, #164]	@ (8000ce4 <config_process_input+0x218>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	4618      	mov	r0, r3
 8000c44:	f000 f982 	bl	8000f4c <is_num>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d105      	bne.n	8000c5a <config_process_input+0x18e>
							launcher.serialNumber[i] = rxChar;
 8000c4e:	7bfb      	ldrb	r3, [r7, #15]
 8000c50:	4a24      	ldr	r2, [pc, #144]	@ (8000ce4 <config_process_input+0x218>)
 8000c52:	7811      	ldrb	r1, [r2, #0]
 8000c54:	4a25      	ldr	r2, [pc, #148]	@ (8000cec <config_process_input+0x220>)
 8000c56:	54d1      	strb	r1, [r2, r3]
							break;
 8000c58:	e008      	b.n	8000c6c <config_process_input+0x1a0>
						} else {
							printf("\r\nEnter only numbers!\r\n");
 8000c5a:	4829      	ldr	r0, [pc, #164]	@ (8000d00 <config_process_input+0x234>)
 8000c5c:	f003 fe66 	bl	800492c <puts>
							i = 0; // restart index count
 8000c60:	2300      	movs	r3, #0
 8000c62:	73fb      	strb	r3, [r7, #15]
							print_inline("Enter a two-digit autolauncher serial number [0-99]: ");
 8000c64:	4825      	ldr	r0, [pc, #148]	@ (8000cfc <config_process_input+0x230>)
 8000c66:	f7ff fcf5 	bl	8000654 <print_inline>
					if(rxStatus == active){
 8000c6a:	e7e1      	b.n	8000c30 <config_process_input+0x164>
    		for(uint8_t i = 0; i < 2; i++){
 8000c6c:	7bfb      	ldrb	r3, [r7, #15]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	73fb      	strb	r3, [r7, #15]
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d9db      	bls.n	8000c30 <config_process_input+0x164>
						}
    				}
    			}
    		}
    		printf("%s\r\n", launcher.serialNumber);
 8000c78:	491c      	ldr	r1, [pc, #112]	@ (8000cec <config_process_input+0x220>)
 8000c7a:	4822      	ldr	r0, [pc, #136]	@ (8000d04 <config_process_input+0x238>)
 8000c7c:	f003 fdee 	bl	800485c <iprintf>
    		// set the AL configured flag and print configuration
            eeprom.configured = '|';
 8000c80:	4b21      	ldr	r3, [pc, #132]	@ (8000d08 <config_process_input+0x23c>)
 8000c82:	227c      	movs	r2, #124	@ 0x7c
 8000c84:	711a      	strb	r2, [r3, #4]
            printf("\r\nNew autolauncher configuration: Tubes: %c | Type: %c | Serial: %s\r\n", launcher.tubeCount, launcher.type, launcher.serialNumber);
 8000c86:	4b19      	ldr	r3, [pc, #100]	@ (8000cec <config_process_input+0x220>)
 8000c88:	78db      	ldrb	r3, [r3, #3]
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4b17      	ldr	r3, [pc, #92]	@ (8000cec <config_process_input+0x220>)
 8000c8e:	791b      	ldrb	r3, [r3, #4]
 8000c90:	461a      	mov	r2, r3
 8000c92:	4b16      	ldr	r3, [pc, #88]	@ (8000cec <config_process_input+0x220>)
 8000c94:	481d      	ldr	r0, [pc, #116]	@ (8000d0c <config_process_input+0x240>)
 8000c96:	f003 fde1 	bl	800485c <iprintf>

            // store parameters in eeprom
            printf("Settings saved!\r\n");
 8000c9a:	481d      	ldr	r0, [pc, #116]	@ (8000d10 <config_process_input+0x244>)
 8000c9c:	f003 fe46 	bl	800492c <puts>
//            eeprom_write(0x02, num1);
//            eeprom_write(0x03, num2);
//            eeprom_write(0x04, configed);

            //activeMenu = configMenu;
            menu_config();
 8000ca0:	f000 f8da 	bl	8000e58 <menu_config>
            break;
 8000ca4:	e012      	b.n	8000ccc <config_process_input+0x200>
        case 'J':
            //extend_all_pins();
        	printf("extend_all_pins()\r\n");
 8000ca6:	481b      	ldr	r0, [pc, #108]	@ (8000d14 <config_process_input+0x248>)
 8000ca8:	f003 fe40 	bl	800492c <puts>
            break;
 8000cac:	e00e      	b.n	8000ccc <config_process_input+0x200>
        case 'N':
            //retract_all_pins();
        	printf("retract_all_pins()\r\n");
 8000cae:	481a      	ldr	r0, [pc, #104]	@ (8000d18 <config_process_input+0x24c>)
 8000cb0:	f003 fe3c 	bl	800492c <puts>
            break;
 8000cb4:	e00a      	b.n	8000ccc <config_process_input+0x200>
        case 'G':
            printf("\n\rSend the \"@\" symbol repeatedly to exit grease pins mode\r\n");
 8000cb6:	4819      	ldr	r0, [pc, #100]	@ (8000d1c <config_process_input+0x250>)
 8000cb8:	f003 fe38 	bl	800492c <puts>
            //grease_pins();
            printf("grease_pins();");
 8000cbc:	4818      	ldr	r0, [pc, #96]	@ (8000d20 <config_process_input+0x254>)
 8000cbe:	f003 fdcd 	bl	800485c <iprintf>
            break;
 8000cc2:	e003      	b.n	8000ccc <config_process_input+0x200>
        default:
        	printf("\r\n** Unrecognized command!!** \r\n");
 8000cc4:	4817      	ldr	r0, [pc, #92]	@ (8000d24 <config_process_input+0x258>)
 8000cc6:	f003 fe31 	bl	800492c <puts>
            break;
 8000cca:	bf00      	nop
    }
}
 8000ccc:	bf00      	nop
 8000cce:	3710      	adds	r7, #16
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	08005914 	.word	0x08005914
 8000cd8:	2000014e 	.word	0x2000014e
 8000cdc:	08005944 	.word	0x08005944
 8000ce0:	2000014d 	.word	0x2000014d
 8000ce4:	20000151 	.word	0x20000151
 8000ce8:	08005968 	.word	0x08005968
 8000cec:	20000000 	.word	0x20000000
 8000cf0:	08005970 	.word	0x08005970
 8000cf4:	0800598c 	.word	0x0800598c
 8000cf8:	080059c0 	.word	0x080059c0
 8000cfc:	080059dc 	.word	0x080059dc
 8000d00:	08005a14 	.word	0x08005a14
 8000d04:	08005a2c 	.word	0x08005a2c
 8000d08:	2000000c 	.word	0x2000000c
 8000d0c:	08005a34 	.word	0x08005a34
 8000d10:	08005a7c 	.word	0x08005a7c
 8000d14:	08005a90 	.word	0x08005a90
 8000d18:	08005aa4 	.word	0x08005aa4
 8000d1c:	08005ab8 	.word	0x08005ab8
 8000d20:	08005af4 	.word	0x08005af4
 8000d24:	080058f4 	.word	0x080058f4

08000d28 <menu_main>:


void menu_main(void) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
    printf("\r\n\n\r");
 8000d2c:	4831      	ldr	r0, [pc, #196]	@ (8000df4 <menu_main+0xcc>)
 8000d2e:	f003 fd95 	bl	800485c <iprintf>
    printf("=========================================\n\r");
 8000d32:	4831      	ldr	r0, [pc, #196]	@ (8000df8 <menu_main+0xd0>)
 8000d34:	f003 fd92 	bl	800485c <iprintf>
    printf("|  AOML auto launcher board version 3.0 |\n\r");
 8000d38:	4830      	ldr	r0, [pc, #192]	@ (8000dfc <menu_main+0xd4>)
 8000d3a:	f003 fd8f 	bl	800485c <iprintf>
    printf("|  Firmware version 2024.mm.dd.hhmm     |\n\r");
 8000d3e:	4830      	ldr	r0, [pc, #192]	@ (8000e00 <menu_main+0xd8>)
 8000d40:	f003 fd8c 	bl	800485c <iprintf>
    printf("=========================================\n\r");
 8000d44:	482c      	ldr	r0, [pc, #176]	@ (8000df8 <menu_main+0xd0>)
 8000d46:	f003 fd89 	bl	800485c <iprintf>
    printf("|    Model #ALV3.0      S/N ");
 8000d4a:	482e      	ldr	r0, [pc, #184]	@ (8000e04 <menu_main+0xdc>)
 8000d4c:	f003 fd86 	bl	800485c <iprintf>
    print_serial_number();
 8000d50:	f000 f8d6 	bl	8000f00 <print_serial_number>
    printf("       |\n\r");
 8000d54:	482c      	ldr	r0, [pc, #176]	@ (8000e08 <menu_main+0xe0>)
 8000d56:	f003 fd81 	bl	800485c <iprintf>
    printf("=========================================\n\r");
 8000d5a:	4827      	ldr	r0, [pc, #156]	@ (8000df8 <menu_main+0xd0>)
 8000d5c:	f003 fd7e 	bl	800485c <iprintf>
    printf("|               COMMANDS                |\n\r");
 8000d60:	482a      	ldr	r0, [pc, #168]	@ (8000e0c <menu_main+0xe4>)
 8000d62:	f003 fd7b 	bl	800485c <iprintf>
    if (eeprom.configured != '|') {
 8000d66:	4b2a      	ldr	r3, [pc, #168]	@ (8000e10 <menu_main+0xe8>)
 8000d68:	791b      	ldrb	r3, [r3, #4]
 8000d6a:	2b7c      	cmp	r3, #124	@ 0x7c
 8000d6c:	d002      	beq.n	8000d74 <menu_main+0x4c>
        printf("| ERROR, NO SERIAL NUMBER ASSIGNED  |\n\r");
 8000d6e:	4829      	ldr	r0, [pc, #164]	@ (8000e14 <menu_main+0xec>)
 8000d70:	f003 fd74 	bl	800485c <iprintf>
    }
    printf("=========================================\n\r");
 8000d74:	4820      	ldr	r0, [pc, #128]	@ (8000df8 <menu_main+0xd0>)
 8000d76:	f003 fd71 	bl	800485c <iprintf>
    printf("| Connect  cal Sim BT  0                |\n\r");
 8000d7a:	4827      	ldr	r0, [pc, #156]	@ (8000e18 <menu_main+0xf0>)
 8000d7c:	f003 fd6e 	bl	800485c <iprintf>
    if (launcher.tubeCount == '6') {
 8000d80:	4b26      	ldr	r3, [pc, #152]	@ (8000e1c <menu_main+0xf4>)
 8000d82:	78db      	ldrb	r3, [r3, #3]
 8000d84:	2b36      	cmp	r3, #54	@ 0x36
 8000d86:	d109      	bne.n	8000d9c <menu_main+0x74>
        printf("| Connect  XBT 1-6     1,2,3,4,5,6      |\n\r");
 8000d88:	4825      	ldr	r0, [pc, #148]	@ (8000e20 <menu_main+0xf8>)
 8000d8a:	f003 fd67 	bl	800485c <iprintf>
        printf("| Extend   Pin 1-6     U,V,W,X,Y,Z      |\n\r");
 8000d8e:	4825      	ldr	r0, [pc, #148]	@ (8000e24 <menu_main+0xfc>)
 8000d90:	f003 fd64 	bl	800485c <iprintf>
        printf("| Retract  Pin 1-6     A,B,C,D,E,F      |\n\r");
 8000d94:	4824      	ldr	r0, [pc, #144]	@ (8000e28 <menu_main+0x100>)
 8000d96:	f003 fd61 	bl	800485c <iprintf>
 8000d9a:	e010      	b.n	8000dbe <menu_main+0x96>
    } else if (launcher.tubeCount == '8') {
 8000d9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000e1c <menu_main+0xf4>)
 8000d9e:	78db      	ldrb	r3, [r3, #3]
 8000da0:	2b38      	cmp	r3, #56	@ 0x38
 8000da2:	d109      	bne.n	8000db8 <menu_main+0x90>

        printf("| Connect  XBT 1-8     1,2,3,4,5,6,7,8  |\n\r");
 8000da4:	4821      	ldr	r0, [pc, #132]	@ (8000e2c <menu_main+0x104>)
 8000da6:	f003 fd59 	bl	800485c <iprintf>
        printf("| Extend   Pin 1-8     U,V,W,X,Y,Z,S,T  |\n\r");
 8000daa:	4821      	ldr	r0, [pc, #132]	@ (8000e30 <menu_main+0x108>)
 8000dac:	f003 fd56 	bl	800485c <iprintf>
        printf("| Retract  Pin 1-8     A,B,C,D,E,F,H,I  |\n\r");
 8000db0:	4820      	ldr	r0, [pc, #128]	@ (8000e34 <menu_main+0x10c>)
 8000db2:	f003 fd53 	bl	800485c <iprintf>
 8000db6:	e002      	b.n	8000dbe <menu_main+0x96>
    } else {
    	printf("| ERROR, NO TUBE COUNT!!     	        |\n\r");
 8000db8:	481f      	ldr	r0, [pc, #124]	@ (8000e38 <menu_main+0x110>)
 8000dba:	f003 fd4f 	bl	800485c <iprintf>
    }
    printf("| Unground   XBT       G                |\n\r");
 8000dbe:	481f      	ldr	r0, [pc, #124]	@ (8000e3c <menu_main+0x114>)
 8000dc0:	f003 fd4c 	bl	800485c <iprintf>
    printf("| Calibrate on         K                |\n\r");
 8000dc4:	481e      	ldr	r0, [pc, #120]	@ (8000e40 <menu_main+0x118>)
 8000dc6:	f003 fd49 	bl	800485c <iprintf>
    printf("| Cal resistor         L                |\n\r");
 8000dca:	481e      	ldr	r0, [pc, #120]	@ (8000e44 <menu_main+0x11c>)
 8000dcc:	f003 fd46 	bl	800485c <iprintf>
    printf("| Reset Relays         R                |\n\r");
 8000dd0:	481d      	ldr	r0, [pc, #116]	@ (8000e48 <menu_main+0x120>)
 8000dd2:	f003 fd43 	bl	800485c <iprintf>
    printf("| Print serial number  s                |\n\r");
 8000dd6:	481d      	ldr	r0, [pc, #116]	@ (8000e4c <menu_main+0x124>)
 8000dd8:	f003 fd40 	bl	800485c <iprintf>
    printf("| This Menu            M                |\n\r");
 8000ddc:	481c      	ldr	r0, [pc, #112]	@ (8000e50 <menu_main+0x128>)
 8000dde:	f003 fd3d 	bl	800485c <iprintf>
    printf("=========================================\n\r");
 8000de2:	4805      	ldr	r0, [pc, #20]	@ (8000df8 <menu_main+0xd0>)
 8000de4:	f003 fd3a 	bl	800485c <iprintf>
    printf("\r\n");
 8000de8:	481a      	ldr	r0, [pc, #104]	@ (8000e54 <menu_main+0x12c>)
 8000dea:	f003 fd9f 	bl	800492c <puts>
}//end status_message
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	08005b04 	.word	0x08005b04
 8000df8:	08005b0c 	.word	0x08005b0c
 8000dfc:	08005b38 	.word	0x08005b38
 8000e00:	08005b64 	.word	0x08005b64
 8000e04:	08005b90 	.word	0x08005b90
 8000e08:	08005bb0 	.word	0x08005bb0
 8000e0c:	08005bbc 	.word	0x08005bbc
 8000e10:	2000000c 	.word	0x2000000c
 8000e14:	08005be8 	.word	0x08005be8
 8000e18:	08005c10 	.word	0x08005c10
 8000e1c:	20000000 	.word	0x20000000
 8000e20:	08005c3c 	.word	0x08005c3c
 8000e24:	08005c68 	.word	0x08005c68
 8000e28:	08005c94 	.word	0x08005c94
 8000e2c:	08005cc0 	.word	0x08005cc0
 8000e30:	08005cec 	.word	0x08005cec
 8000e34:	08005d18 	.word	0x08005d18
 8000e38:	08005d44 	.word	0x08005d44
 8000e3c:	08005d70 	.word	0x08005d70
 8000e40:	08005d9c 	.word	0x08005d9c
 8000e44:	08005dc8 	.word	0x08005dc8
 8000e48:	08005df4 	.word	0x08005df4
 8000e4c:	08005e20 	.word	0x08005e20
 8000e50:	08005e4c 	.word	0x08005e4c
 8000e54:	080058f0 	.word	0x080058f0

08000e58 <menu_config>:


void menu_config(void) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
    printf("\n\r");
 8000e5c:	481b      	ldr	r0, [pc, #108]	@ (8000ecc <menu_config+0x74>)
 8000e5e:	f003 fcfd 	bl	800485c <iprintf>
    printf("=========================================\n\r");
 8000e62:	481b      	ldr	r0, [pc, #108]	@ (8000ed0 <menu_config+0x78>)
 8000e64:	f003 fcfa 	bl	800485c <iprintf>
    printf("|  AOML auto launcher config menu       |\n\r");
 8000e68:	481a      	ldr	r0, [pc, #104]	@ (8000ed4 <menu_config+0x7c>)
 8000e6a:	f003 fcf7 	bl	800485c <iprintf>
    printf("=========================================\n\r");
 8000e6e:	4818      	ldr	r0, [pc, #96]	@ (8000ed0 <menu_config+0x78>)
 8000e70:	f003 fcf4 	bl	800485c <iprintf>
    printf("|    Model #ALV3.0      S/N ");
 8000e74:	4818      	ldr	r0, [pc, #96]	@ (8000ed8 <menu_config+0x80>)
 8000e76:	f003 fcf1 	bl	800485c <iprintf>
    print_serial_number();
 8000e7a:	f000 f841 	bl	8000f00 <print_serial_number>
    printf("       |\n\r");
 8000e7e:	4817      	ldr	r0, [pc, #92]	@ (8000edc <menu_config+0x84>)
 8000e80:	f003 fcec 	bl	800485c <iprintf>
    printf("=========================================\n\r");
 8000e84:	4812      	ldr	r0, [pc, #72]	@ (8000ed0 <menu_config+0x78>)
 8000e86:	f003 fce9 	bl	800485c <iprintf>
    printf("|               COMMANDS                |\n\r");
 8000e8a:	4815      	ldr	r0, [pc, #84]	@ (8000ee0 <menu_config+0x88>)
 8000e8c:	f003 fce6 	bl	800485c <iprintf>
    printf("=========================================\n\r");
 8000e90:	480f      	ldr	r0, [pc, #60]	@ (8000ed0 <menu_config+0x78>)
 8000e92:	f003 fce3 	bl	800485c <iprintf>
    printf("| Set tubes & S/N      1                |\n\r");
 8000e96:	4813      	ldr	r0, [pc, #76]	@ (8000ee4 <menu_config+0x8c>)
 8000e98:	f003 fce0 	bl	800485c <iprintf>
    printf("| This Menu            M                |\n\r");
 8000e9c:	4812      	ldr	r0, [pc, #72]	@ (8000ee8 <menu_config+0x90>)
 8000e9e:	f003 fcdd 	bl	800485c <iprintf>
    printf("| Extend all   pins    J                |\n\r");
 8000ea2:	4812      	ldr	r0, [pc, #72]	@ (8000eec <menu_config+0x94>)
 8000ea4:	f003 fcda 	bl	800485c <iprintf>
    printf("| Retract all  pins    N                |\n\r");
 8000ea8:	4811      	ldr	r0, [pc, #68]	@ (8000ef0 <menu_config+0x98>)
 8000eaa:	f003 fcd7 	bl	800485c <iprintf>
    printf("| Grease pins  mode    G                |\n\r");
 8000eae:	4811      	ldr	r0, [pc, #68]	@ (8000ef4 <menu_config+0x9c>)
 8000eb0:	f003 fcd4 	bl	800485c <iprintf>
    printf("| Quit config menu     Q                |\n\r");
 8000eb4:	4810      	ldr	r0, [pc, #64]	@ (8000ef8 <menu_config+0xa0>)
 8000eb6:	f003 fcd1 	bl	800485c <iprintf>
    printf("=========================================\n\r");
 8000eba:	4805      	ldr	r0, [pc, #20]	@ (8000ed0 <menu_config+0x78>)
 8000ebc:	f003 fcce 	bl	800485c <iprintf>
    printf("\r\n");
 8000ec0:	480e      	ldr	r0, [pc, #56]	@ (8000efc <menu_config+0xa4>)
 8000ec2:	f003 fd33 	bl	800492c <puts>
}//end status_message
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	08005e78 	.word	0x08005e78
 8000ed0:	08005b0c 	.word	0x08005b0c
 8000ed4:	08005e7c 	.word	0x08005e7c
 8000ed8:	08005b90 	.word	0x08005b90
 8000edc:	08005bb0 	.word	0x08005bb0
 8000ee0:	08005bbc 	.word	0x08005bbc
 8000ee4:	08005ea8 	.word	0x08005ea8
 8000ee8:	08005e4c 	.word	0x08005e4c
 8000eec:	08005ed4 	.word	0x08005ed4
 8000ef0:	08005f00 	.word	0x08005f00
 8000ef4:	08005f2c 	.word	0x08005f2c
 8000ef8:	08005f58 	.word	0x08005f58
 8000efc:	080058f0 	.word	0x080058f0

08000f00 <print_serial_number>:

void print_serial_number(void){
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
	//printf( "AL%c%s", launcher.type[0], launcher.serialNumber);
    if(eeprom.configured == '|'){
 8000f04:	4b0c      	ldr	r3, [pc, #48]	@ (8000f38 <print_serial_number+0x38>)
 8000f06:	791b      	ldrb	r3, [r3, #4]
 8000f08:	2b7c      	cmp	r3, #124	@ 0x7c
 8000f0a:	d107      	bne.n	8000f1c <print_serial_number+0x1c>
    	printf( "AL%c%s", launcher.type, launcher.serialNumber);
 8000f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f3c <print_serial_number+0x3c>)
 8000f0e:	791b      	ldrb	r3, [r3, #4]
 8000f10:	4a0a      	ldr	r2, [pc, #40]	@ (8000f3c <print_serial_number+0x3c>)
 8000f12:	4619      	mov	r1, r3
 8000f14:	480a      	ldr	r0, [pc, #40]	@ (8000f40 <print_serial_number+0x40>)
 8000f16:	f003 fca1 	bl	800485c <iprintf>
        if (launcher.tubeCount == '6')
            printf("AL6XX");
        else
            printf("ALRXX");
    }
}
 8000f1a:	e00a      	b.n	8000f32 <print_serial_number+0x32>
        if (launcher.tubeCount == '6')
 8000f1c:	4b07      	ldr	r3, [pc, #28]	@ (8000f3c <print_serial_number+0x3c>)
 8000f1e:	78db      	ldrb	r3, [r3, #3]
 8000f20:	2b36      	cmp	r3, #54	@ 0x36
 8000f22:	d103      	bne.n	8000f2c <print_serial_number+0x2c>
            printf("AL6XX");
 8000f24:	4807      	ldr	r0, [pc, #28]	@ (8000f44 <print_serial_number+0x44>)
 8000f26:	f003 fc99 	bl	800485c <iprintf>
}
 8000f2a:	e002      	b.n	8000f32 <print_serial_number+0x32>
            printf("ALRXX");
 8000f2c:	4806      	ldr	r0, [pc, #24]	@ (8000f48 <print_serial_number+0x48>)
 8000f2e:	f003 fc95 	bl	800485c <iprintf>
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	2000000c 	.word	0x2000000c
 8000f3c:	20000000 	.word	0x20000000
 8000f40:	08005f84 	.word	0x08005f84
 8000f44:	08005f8c 	.word	0x08005f8c
 8000f48:	08005f94 	.word	0x08005f94

08000f4c <is_num>:

/* is_num()
 * Parameters: character c
 * Return: 1 if c is a digit, 0 if not */
uint8_t is_num(char c){
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
	uint8_t isNum = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	73fb      	strb	r3, [r7, #15]
	isNum = ('0' == c || '1' == c || '2' == c || '3' == c || '4' == c || '5' == c || '6' == c || '7' == c || '8' == c || '9' == c);
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	2b30      	cmp	r3, #48	@ 0x30
 8000f5e:	d01a      	beq.n	8000f96 <is_num+0x4a>
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	2b31      	cmp	r3, #49	@ 0x31
 8000f64:	d017      	beq.n	8000f96 <is_num+0x4a>
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	2b32      	cmp	r3, #50	@ 0x32
 8000f6a:	d014      	beq.n	8000f96 <is_num+0x4a>
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	2b33      	cmp	r3, #51	@ 0x33
 8000f70:	d011      	beq.n	8000f96 <is_num+0x4a>
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	2b34      	cmp	r3, #52	@ 0x34
 8000f76:	d00e      	beq.n	8000f96 <is_num+0x4a>
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	2b35      	cmp	r3, #53	@ 0x35
 8000f7c:	d00b      	beq.n	8000f96 <is_num+0x4a>
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	2b36      	cmp	r3, #54	@ 0x36
 8000f82:	d008      	beq.n	8000f96 <is_num+0x4a>
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	2b37      	cmp	r3, #55	@ 0x37
 8000f88:	d005      	beq.n	8000f96 <is_num+0x4a>
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	2b38      	cmp	r3, #56	@ 0x38
 8000f8e:	d002      	beq.n	8000f96 <is_num+0x4a>
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	2b39      	cmp	r3, #57	@ 0x39
 8000f94:	d101      	bne.n	8000f9a <is_num+0x4e>
 8000f96:	2301      	movs	r3, #1
 8000f98:	e000      	b.n	8000f9c <is_num+0x50>
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	73fb      	strb	r3, [r7, #15]
	return isNum;
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr
	...

08000fac <multiplexer_set>:

/* RELAY AND MOTOR CONTROL */
void multiplexer_set(mux_t select){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(MUX_SELECT_GPIO_Port, MUX_SELECT_Pin, select); // SET = UART-tx / RESET = Din from GPS
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	2104      	movs	r1, #4
 8000fbc:	4803      	ldr	r0, [pc, #12]	@ (8000fcc <multiplexer_set+0x20>)
 8000fbe:	f001 fa49 	bl	8002454 <HAL_GPIO_WritePin>
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40010800 	.word	0x40010800

08000fd0 <unground_xbt>:

/* Disconnect the XBT ABC pins from ground
 * 3 relays can be used as ground when SET, or ground when RESET based on jumpers JP6-7-8
 * If 1-2 pads are soldered, SET relays to unground, RESET relays to ground
 * Note: reset signal 3 is tied to other relays: CAL cont & CAL res */
void unground_xbt(void){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
	if(relayLock == reFree){
 8000fd4:	4b08      	ldr	r3, [pc, #32]	@ (8000ff8 <unground_xbt+0x28>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d10b      	bne.n	8000ff4 <unground_xbt+0x24>
		relayLock = reLocked;
 8000fdc:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <unground_xbt+0x28>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	701a      	strb	r2, [r3, #0]
		drive_relay(RELAY_RESET_3_GPIO_Port, RELAY_RESET_3_Pin, 10); // RESET relay k9, k10, k11, k12
 8000fe2:	220a      	movs	r2, #10
 8000fe4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fe8:	4804      	ldr	r0, [pc, #16]	@ (8000ffc <unground_xbt+0x2c>)
 8000fea:	f000 f923 	bl	8001234 <drive_relay>
		relayLock = reFree;
 8000fee:	4b02      	ldr	r3, [pc, #8]	@ (8000ff8 <unground_xbt+0x28>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	701a      	strb	r2, [r3, #0]
	}
}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	2000014c 	.word	0x2000014c
 8000ffc:	40011000 	.word	0x40011000

08001000 <calibration_resistor>:

void calibration_resistor(void){
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
	if(relayLock == reFree){
 8001004:	4b08      	ldr	r3, [pc, #32]	@ (8001028 <calibration_resistor+0x28>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d10b      	bne.n	8001024 <calibration_resistor+0x24>
		relayLock = reLocked;
 800100c:	4b06      	ldr	r3, [pc, #24]	@ (8001028 <calibration_resistor+0x28>)
 800100e:	2201      	movs	r2, #1
 8001010:	701a      	strb	r2, [r3, #0]
		drive_relay(RELAY_K12_CAL_RES_GPIO_Port, RELAY_K12_CAL_RES_Pin, 10); // SET relay k12
 8001012:	220a      	movs	r2, #10
 8001014:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001018:	4804      	ldr	r0, [pc, #16]	@ (800102c <calibration_resistor+0x2c>)
 800101a:	f000 f90b 	bl	8001234 <drive_relay>
		relayLock = reFree;
 800101e:	4b02      	ldr	r3, [pc, #8]	@ (8001028 <calibration_resistor+0x28>)
 8001020:	2200      	movs	r2, #0
 8001022:	701a      	strb	r2, [r3, #0]
	}
}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}
 8001028:	2000014c 	.word	0x2000014c
 800102c:	40010800 	.word	0x40010800

08001030 <calibrate_on>:

void calibrate_on(void){
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	if(relayLock == reFree){
 8001034:	4b08      	ldr	r3, [pc, #32]	@ (8001058 <calibrate_on+0x28>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d10b      	bne.n	8001054 <calibrate_on+0x24>
		relayLock = reLocked;
 800103c:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <calibrate_on+0x28>)
 800103e:	2201      	movs	r2, #1
 8001040:	701a      	strb	r2, [r3, #0]
		drive_relay(RELAY_K11_CAL_CONT_GPIO_Port, RELAY_K11_CAL_CONT_Pin, 10); // SET relay k11
 8001042:	220a      	movs	r2, #10
 8001044:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001048:	4804      	ldr	r0, [pc, #16]	@ (800105c <calibrate_on+0x2c>)
 800104a:	f000 f8f3 	bl	8001234 <drive_relay>
		relayLock = reFree;
 800104e:	4b02      	ldr	r3, [pc, #8]	@ (8001058 <calibrate_on+0x28>)
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
	}
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}
 8001058:	2000014c 	.word	0x2000014c
 800105c:	40010800 	.word	0x40010800

08001060 <reset_relay>:

void reset_relay(void){
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	if(relayLock == reFree){
 8001064:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <reset_relay+0x4c>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d11d      	bne.n	80010a8 <reset_relay+0x48>
		relayLock = reLocked;
 800106c:	4b0f      	ldr	r3, [pc, #60]	@ (80010ac <reset_relay+0x4c>)
 800106e:	2201      	movs	r2, #1
 8001070:	701a      	strb	r2, [r3, #0]
		drive_relay(RELAY_RESET_1_GPIO_Port, RELAY_RESET_1_Pin, 10); // RESET relay k1, k2, k3, k4, SSR1, SSR2, SSR3, SSR4
 8001072:	220a      	movs	r2, #10
 8001074:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001078:	480d      	ldr	r0, [pc, #52]	@ (80010b0 <reset_relay+0x50>)
 800107a:	f000 f8db 	bl	8001234 <drive_relay>
		HAL_Delay(10);
 800107e:	200a      	movs	r0, #10
 8001080:	f000 fc6e 	bl	8001960 <HAL_Delay>
		drive_relay(RELAY_RESET_2_GPIO_Port, RELAY_RESET_2_Pin, 10); // RESET relay k5, k6, k7, k8, SSR5, SSR6, SSR7, SSR8
 8001084:	220a      	movs	r2, #10
 8001086:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800108a:	480a      	ldr	r0, [pc, #40]	@ (80010b4 <reset_relay+0x54>)
 800108c:	f000 f8d2 	bl	8001234 <drive_relay>
		HAL_Delay(10);
 8001090:	200a      	movs	r0, #10
 8001092:	f000 fc65 	bl	8001960 <HAL_Delay>
		drive_relay(RELAY_RESET_3_GPIO_Port, RELAY_RESET_3_Pin, 10); // RESET relay k9, k10, k11, k12 - This grounds ABC
 8001096:	220a      	movs	r2, #10
 8001098:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800109c:	4805      	ldr	r0, [pc, #20]	@ (80010b4 <reset_relay+0x54>)
 800109e:	f000 f8c9 	bl	8001234 <drive_relay>
		relayLock = reFree;
 80010a2:	4b02      	ldr	r3, [pc, #8]	@ (80010ac <reset_relay+0x4c>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	701a      	strb	r2, [r3, #0]
	}
}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	2000014c 	.word	0x2000014c
 80010b0:	40010c00 	.word	0x40010c00
 80010b4:	40011000 	.word	0x40011000

080010b8 <connect_xbt_pin>:


void connect_xbt_pin(uint8_t xbtNum){
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]

	if(relayLock == reFree){
 80010c2:	4b46      	ldr	r3, [pc, #280]	@ (80011dc <connect_xbt_pin+0x124>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	f040 8083 	bne.w	80011d2 <connect_xbt_pin+0x11a>
		relayLock = reLocked;
 80010cc:	4b43      	ldr	r3, [pc, #268]	@ (80011dc <connect_xbt_pin+0x124>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	701a      	strb	r2, [r3, #0]

		switch (xbtNum){
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	3b01      	subs	r3, #1
 80010d6:	2b07      	cmp	r3, #7
 80010d8:	d874      	bhi.n	80011c4 <connect_xbt_pin+0x10c>
 80010da:	a201      	add	r2, pc, #4	@ (adr r2, 80010e0 <connect_xbt_pin+0x28>)
 80010dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e0:	08001101 	.word	0x08001101
 80010e4:	0800111b 	.word	0x0800111b
 80010e8:	08001135 	.word	0x08001135
 80010ec:	0800114d 	.word	0x0800114d
 80010f0:	08001165 	.word	0x08001165
 80010f4:	0800117b 	.word	0x0800117b
 80010f8:	08001191 	.word	0x08001191
 80010fc:	080011ab 	.word	0x080011ab
		case 1:
			drive_relay(RELAY_K1_GPIO_Port, RELAY_K1_Pin, 10); // SET relay k1
 8001100:	220a      	movs	r2, #10
 8001102:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001106:	4836      	ldr	r0, [pc, #216]	@ (80011e0 <connect_xbt_pin+0x128>)
 8001108:	f000 f894 	bl	8001234 <drive_relay>
			drive_relay(SSR_1_GPIO_Port, SSR_1_Pin, 1); // SET SSR1
 800110c:	2201      	movs	r2, #1
 800110e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001112:	4833      	ldr	r0, [pc, #204]	@ (80011e0 <connect_xbt_pin+0x128>)
 8001114:	f000 f88e 	bl	8001234 <drive_relay>
			break;
 8001118:	e058      	b.n	80011cc <connect_xbt_pin+0x114>
		case 2:
			drive_relay(RELAY_K2_GPIO_Port, RELAY_K2_Pin, 10); // SET relay k2
 800111a:	220a      	movs	r2, #10
 800111c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001120:	482f      	ldr	r0, [pc, #188]	@ (80011e0 <connect_xbt_pin+0x128>)
 8001122:	f000 f887 	bl	8001234 <drive_relay>
			drive_relay(SSR_2_GPIO_Port, SSR_2_Pin, 1); // SET SSR2
 8001126:	2201      	movs	r2, #1
 8001128:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800112c:	482c      	ldr	r0, [pc, #176]	@ (80011e0 <connect_xbt_pin+0x128>)
 800112e:	f000 f881 	bl	8001234 <drive_relay>
			break;
 8001132:	e04b      	b.n	80011cc <connect_xbt_pin+0x114>
		case 3:
			drive_relay(RELAY_K3_GPIO_Port, RELAY_K3_Pin, 10); // SET relay k3
 8001134:	220a      	movs	r2, #10
 8001136:	2104      	movs	r1, #4
 8001138:	482a      	ldr	r0, [pc, #168]	@ (80011e4 <connect_xbt_pin+0x12c>)
 800113a:	f000 f87b 	bl	8001234 <drive_relay>
			drive_relay(SSR_3_GPIO_Port, SSR_3_Pin, 1); // SET SSR3
 800113e:	2201      	movs	r2, #1
 8001140:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001144:	4826      	ldr	r0, [pc, #152]	@ (80011e0 <connect_xbt_pin+0x128>)
 8001146:	f000 f875 	bl	8001234 <drive_relay>
			break;
 800114a:	e03f      	b.n	80011cc <connect_xbt_pin+0x114>
		case 4:
			drive_relay(RELAY_K4_GPIO_Port, RELAY_K4_Pin, 10); // SET relay k4
 800114c:	220a      	movs	r2, #10
 800114e:	2108      	movs	r1, #8
 8001150:	4825      	ldr	r0, [pc, #148]	@ (80011e8 <connect_xbt_pin+0x130>)
 8001152:	f000 f86f 	bl	8001234 <drive_relay>
			drive_relay(SSR_4_GPIO_Port, SSR_4_Pin, 1); // SET SSR4
 8001156:	2201      	movs	r2, #1
 8001158:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800115c:	4822      	ldr	r0, [pc, #136]	@ (80011e8 <connect_xbt_pin+0x130>)
 800115e:	f000 f869 	bl	8001234 <drive_relay>
			break;
 8001162:	e033      	b.n	80011cc <connect_xbt_pin+0x114>
		case 5:
			drive_relay(RELAY_K5_GPIO_Port, RELAY_K5_Pin, 10); // SET relay k5
 8001164:	220a      	movs	r2, #10
 8001166:	2110      	movs	r1, #16
 8001168:	481f      	ldr	r0, [pc, #124]	@ (80011e8 <connect_xbt_pin+0x130>)
 800116a:	f000 f863 	bl	8001234 <drive_relay>
			drive_relay(SSR_5_GPIO_Port, SSR_5_Pin, 1); // SET SSR5
 800116e:	2201      	movs	r2, #1
 8001170:	2180      	movs	r1, #128	@ 0x80
 8001172:	481b      	ldr	r0, [pc, #108]	@ (80011e0 <connect_xbt_pin+0x128>)
 8001174:	f000 f85e 	bl	8001234 <drive_relay>
			break;
 8001178:	e028      	b.n	80011cc <connect_xbt_pin+0x114>
		case 6:
			drive_relay(RELAY_K6_GPIO_Port, RELAY_K6_Pin, 10); // SET relay k6
 800117a:	220a      	movs	r2, #10
 800117c:	2120      	movs	r1, #32
 800117e:	481a      	ldr	r0, [pc, #104]	@ (80011e8 <connect_xbt_pin+0x130>)
 8001180:	f000 f858 	bl	8001234 <drive_relay>
			drive_relay(SSR_6_GPIO_Port, SSR_6_Pin, 1); // SET SSR6
 8001184:	2201      	movs	r2, #1
 8001186:	2140      	movs	r1, #64	@ 0x40
 8001188:	4815      	ldr	r0, [pc, #84]	@ (80011e0 <connect_xbt_pin+0x128>)
 800118a:	f000 f853 	bl	8001234 <drive_relay>
			break;
 800118e:	e01d      	b.n	80011cc <connect_xbt_pin+0x114>
		case 7:
			drive_relay(RELAY_K7_GPIO_Port, RELAY_K7_Pin, 10); // SET relay k7
 8001190:	220a      	movs	r2, #10
 8001192:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001196:	4812      	ldr	r0, [pc, #72]	@ (80011e0 <connect_xbt_pin+0x128>)
 8001198:	f000 f84c 	bl	8001234 <drive_relay>
			drive_relay(SSR_7_GPIO_Port, SSR_7_Pin, 1); // SET SSR7
 800119c:	2201      	movs	r2, #1
 800119e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011a2:	4811      	ldr	r0, [pc, #68]	@ (80011e8 <connect_xbt_pin+0x130>)
 80011a4:	f000 f846 	bl	8001234 <drive_relay>
			break;
 80011a8:	e010      	b.n	80011cc <connect_xbt_pin+0x114>
		case 8:
			drive_relay(RELAY_K8_GPIO_Port, RELAY_K8_Pin, 10); // SET relay k8
 80011aa:	220a      	movs	r2, #10
 80011ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011b0:	480e      	ldr	r0, [pc, #56]	@ (80011ec <connect_xbt_pin+0x134>)
 80011b2:	f000 f83f 	bl	8001234 <drive_relay>
			drive_relay(SSR_8_GPIO_Port, SSR_8_Pin, 1); // SET SSR8
 80011b6:	2201      	movs	r2, #1
 80011b8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011bc:	480a      	ldr	r0, [pc, #40]	@ (80011e8 <connect_xbt_pin+0x130>)
 80011be:	f000 f839 	bl	8001234 <drive_relay>
			break;
 80011c2:	e003      	b.n	80011cc <connect_xbt_pin+0x114>
		default:
			printf("\r\n* ERROR: xbt not found *\r\n");
 80011c4:	480a      	ldr	r0, [pc, #40]	@ (80011f0 <connect_xbt_pin+0x138>)
 80011c6:	f003 fbb1 	bl	800492c <puts>
			break;
 80011ca:	bf00      	nop
		}
		relayLock = reFree;
 80011cc:	4b03      	ldr	r3, [pc, #12]	@ (80011dc <connect_xbt_pin+0x124>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	701a      	strb	r2, [r3, #0]
	}
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	2000014c 	.word	0x2000014c
 80011e0:	40011000 	.word	0x40011000
 80011e4:	40011400 	.word	0x40011400
 80011e8:	40010c00 	.word	0x40010c00
 80011ec:	40010800 	.word	0x40010800
 80011f0:	08005f9c 	.word	0x08005f9c

080011f4 <relay_init>:
		return 1;
	}
}


void relay_init(void){
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
	drive_relay(RELAY_RESET_1_GPIO_Port, RELAY_RESET_1_Pin, 10);  // RESET relay k1, k2, k3, k4, SSR1, SSR2, SSR3, SSR4
 80011f8:	220a      	movs	r2, #10
 80011fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011fe:	480b      	ldr	r0, [pc, #44]	@ (800122c <relay_init+0x38>)
 8001200:	f000 f818 	bl	8001234 <drive_relay>
	HAL_Delay(10);
 8001204:	200a      	movs	r0, #10
 8001206:	f000 fbab 	bl	8001960 <HAL_Delay>
	drive_relay(RELAY_RESET_2_GPIO_Port, RELAY_RESET_2_Pin, 10); // RESET relay k5, k6, k7, k8, SSR5, SSR6, SSR7, SSR8
 800120a:	220a      	movs	r2, #10
 800120c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001210:	4807      	ldr	r0, [pc, #28]	@ (8001230 <relay_init+0x3c>)
 8001212:	f000 f80f 	bl	8001234 <drive_relay>
	HAL_Delay(10);
 8001216:	200a      	movs	r0, #10
 8001218:	f000 fba2 	bl	8001960 <HAL_Delay>
	drive_relay(RELAY_RESET_3_GPIO_Port, RELAY_RESET_3_Pin, 10); // RESET relay k9, k10, k11, k12 (GND, calibration and continuity circuit)
 800121c:	220a      	movs	r2, #10
 800121e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001222:	4803      	ldr	r0, [pc, #12]	@ (8001230 <relay_init+0x3c>)
 8001224:	f000 f806 	bl	8001234 <drive_relay>
}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40010c00 	.word	0x40010c00
 8001230:	40011000 	.word	0x40011000

08001234 <drive_relay>:


void drive_relay(GPIO_TypeDef * relayPort, uint16_t relayPin, uint8_t onTime){
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	460b      	mov	r3, r1
 800123e:	807b      	strh	r3, [r7, #2]
 8001240:	4613      	mov	r3, r2
 8001242:	707b      	strb	r3, [r7, #1]
	// SET relay k
	HAL_GPIO_WritePin(relayPort, relayPin, SET); // set
 8001244:	887b      	ldrh	r3, [r7, #2]
 8001246:	2201      	movs	r2, #1
 8001248:	4619      	mov	r1, r3
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f001 f902 	bl	8002454 <HAL_GPIO_WritePin>
	HAL_Delay(onTime); // time coil is driven in ms
 8001250:	787b      	ldrb	r3, [r7, #1]
 8001252:	4618      	mov	r0, r3
 8001254:	f000 fb84 	bl	8001960 <HAL_Delay>
	HAL_GPIO_WritePin(relayPort, relayPin, RESET); // release
 8001258:	887b      	ldrh	r3, [r7, #2]
 800125a:	2200      	movs	r2, #0
 800125c:	4619      	mov	r1, r3
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f001 f8f8 	bl	8002454 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8001264:	2002      	movs	r0, #2
 8001266:	f000 fb7b 	bl	8001960 <HAL_Delay>
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <motor_init>:


void motor_init(void){
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(ENABLE_M1_GPIO_Port, ENABLE_M1_Pin, RESET); // start disabled
 8001278:	2200      	movs	r2, #0
 800127a:	2104      	movs	r1, #4
 800127c:	4813      	ldr	r0, [pc, #76]	@ (80012cc <motor_init+0x58>)
 800127e:	f001 f8e9 	bl	8002454 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M2_GPIO_Port, ENABLE_M2_Pin, RESET); // start disabled
 8001282:	2200      	movs	r2, #0
 8001284:	2108      	movs	r1, #8
 8001286:	4811      	ldr	r0, [pc, #68]	@ (80012cc <motor_init+0x58>)
 8001288:	f001 f8e4 	bl	8002454 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M3_GPIO_Port, ENABLE_M3_Pin, RESET); // start disabled
 800128c:	2200      	movs	r2, #0
 800128e:	2101      	movs	r1, #1
 8001290:	480f      	ldr	r0, [pc, #60]	@ (80012d0 <motor_init+0x5c>)
 8001292:	f001 f8df 	bl	8002454 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M4_GPIO_Port, ENABLE_M4_Pin, RESET); // start disabled
 8001296:	2200      	movs	r2, #0
 8001298:	2102      	movs	r1, #2
 800129a:	480d      	ldr	r0, [pc, #52]	@ (80012d0 <motor_init+0x5c>)
 800129c:	f001 f8da 	bl	8002454 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M5_GPIO_Port, ENABLE_M5_Pin, RESET); // start disabled
 80012a0:	2200      	movs	r2, #0
 80012a2:	2110      	movs	r1, #16
 80012a4:	480a      	ldr	r0, [pc, #40]	@ (80012d0 <motor_init+0x5c>)
 80012a6:	f001 f8d5 	bl	8002454 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M6_GPIO_Port, ENABLE_M6_Pin, RESET); // start disabled
 80012aa:	2200      	movs	r2, #0
 80012ac:	2120      	movs	r1, #32
 80012ae:	4808      	ldr	r0, [pc, #32]	@ (80012d0 <motor_init+0x5c>)
 80012b0:	f001 f8d0 	bl	8002454 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M7_GPIO_Port, ENABLE_M7_Pin, RESET); // start disabled
 80012b4:	2200      	movs	r2, #0
 80012b6:	2140      	movs	r1, #64	@ 0x40
 80012b8:	4805      	ldr	r0, [pc, #20]	@ (80012d0 <motor_init+0x5c>)
 80012ba:	f001 f8cb 	bl	8002454 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M8_GPIO_Port, ENABLE_M8_Pin, RESET); // start disabled
 80012be:	2200      	movs	r2, #0
 80012c0:	2180      	movs	r1, #128	@ 0x80
 80012c2:	4803      	ldr	r0, [pc, #12]	@ (80012d0 <motor_init+0x5c>)
 80012c4:	f001 f8c6 	bl	8002454 <HAL_GPIO_WritePin>
}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40011000 	.word	0x40011000
 80012d0:	40010800 	.word	0x40010800

080012d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d8:	b672      	cpsid	i
}
 80012da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012dc:	bf00      	nop
 80012de:	e7fd      	b.n	80012dc <Error_Handler+0x8>

080012e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012e6:	4b15      	ldr	r3, [pc, #84]	@ (800133c <HAL_MspInit+0x5c>)
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	4a14      	ldr	r2, [pc, #80]	@ (800133c <HAL_MspInit+0x5c>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	6193      	str	r3, [r2, #24]
 80012f2:	4b12      	ldr	r3, [pc, #72]	@ (800133c <HAL_MspInit+0x5c>)
 80012f4:	699b      	ldr	r3, [r3, #24]
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012fe:	4b0f      	ldr	r3, [pc, #60]	@ (800133c <HAL_MspInit+0x5c>)
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	4a0e      	ldr	r2, [pc, #56]	@ (800133c <HAL_MspInit+0x5c>)
 8001304:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001308:	61d3      	str	r3, [r2, #28]
 800130a:	4b0c      	ldr	r3, [pc, #48]	@ (800133c <HAL_MspInit+0x5c>)
 800130c:	69db      	ldr	r3, [r3, #28]
 800130e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001316:	4b0a      	ldr	r3, [pc, #40]	@ (8001340 <HAL_MspInit+0x60>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	4a04      	ldr	r2, [pc, #16]	@ (8001340 <HAL_MspInit+0x60>)
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001332:	bf00      	nop
 8001334:	3714      	adds	r7, #20
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr
 800133c:	40021000 	.word	0x40021000
 8001340:	40010000 	.word	0x40010000

08001344 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001348:	bf00      	nop
 800134a:	e7fd      	b.n	8001348 <NMI_Handler+0x4>

0800134c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001350:	bf00      	nop
 8001352:	e7fd      	b.n	8001350 <HardFault_Handler+0x4>

08001354 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001358:	bf00      	nop
 800135a:	e7fd      	b.n	8001358 <MemManage_Handler+0x4>

0800135c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001360:	bf00      	nop
 8001362:	e7fd      	b.n	8001360 <BusFault_Handler+0x4>

08001364 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001368:	bf00      	nop
 800136a:	e7fd      	b.n	8001368 <UsageFault_Handler+0x4>

0800136c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr

08001378 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr

08001384 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr

08001390 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001394:	f000 fac8 	bl	8001928 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}

0800139c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013a0:	4802      	ldr	r0, [pc, #8]	@ (80013ac <USART1_IRQHandler+0x10>)
 80013a2:	f002 fc2f 	bl	8003c04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	200001a0 	.word	0x200001a0

080013b0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
 80013c0:	e00a      	b.n	80013d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013c2:	f3af 8000 	nop.w
 80013c6:	4601      	mov	r1, r0
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	1c5a      	adds	r2, r3, #1
 80013cc:	60ba      	str	r2, [r7, #8]
 80013ce:	b2ca      	uxtb	r2, r1
 80013d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	3301      	adds	r3, #1
 80013d6:	617b      	str	r3, [r7, #20]
 80013d8:	697a      	ldr	r2, [r7, #20]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	429a      	cmp	r2, r3
 80013de:	dbf0      	blt.n	80013c2 <_read+0x12>
  }

  return len;
 80013e0:	687b      	ldr	r3, [r7, #4]
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3718      	adds	r7, #24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b086      	sub	sp, #24
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	60f8      	str	r0, [r7, #12]
 80013f2:	60b9      	str	r1, [r7, #8]
 80013f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
 80013fa:	e009      	b.n	8001410 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	1c5a      	adds	r2, r3, #1
 8001400:	60ba      	str	r2, [r7, #8]
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff f947 	bl	8000698 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	3301      	adds	r3, #1
 800140e:	617b      	str	r3, [r7, #20]
 8001410:	697a      	ldr	r2, [r7, #20]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	429a      	cmp	r2, r3
 8001416:	dbf1      	blt.n	80013fc <_write+0x12>
  }
  return len;
 8001418:	687b      	ldr	r3, [r7, #4]
}
 800141a:	4618      	mov	r0, r3
 800141c:	3718      	adds	r7, #24
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <_close>:

int _close(int file)
{
 8001422:	b480      	push	{r7}
 8001424:	b083      	sub	sp, #12
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800142a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800142e:	4618      	mov	r0, r3
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr

08001438 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001448:	605a      	str	r2, [r3, #4]
  return 0;
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr

08001456 <_isatty>:

int _isatty(int file)
{
 8001456:	b480      	push	{r7}
 8001458:	b083      	sub	sp, #12
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800145e:	2301      	movs	r3, #1
}
 8001460:	4618      	mov	r0, r3
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr

0800146a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800146a:	b480      	push	{r7}
 800146c:	b085      	sub	sp, #20
 800146e:	af00      	add	r7, sp, #0
 8001470:	60f8      	str	r0, [r7, #12]
 8001472:	60b9      	str	r1, [r7, #8]
 8001474:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr
	...

08001484 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800148c:	4a14      	ldr	r2, [pc, #80]	@ (80014e0 <_sbrk+0x5c>)
 800148e:	4b15      	ldr	r3, [pc, #84]	@ (80014e4 <_sbrk+0x60>)
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001498:	4b13      	ldr	r3, [pc, #76]	@ (80014e8 <_sbrk+0x64>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d102      	bne.n	80014a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014a0:	4b11      	ldr	r3, [pc, #68]	@ (80014e8 <_sbrk+0x64>)
 80014a2:	4a12      	ldr	r2, [pc, #72]	@ (80014ec <_sbrk+0x68>)
 80014a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014a6:	4b10      	ldr	r3, [pc, #64]	@ (80014e8 <_sbrk+0x64>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4413      	add	r3, r2
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d207      	bcs.n	80014c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014b4:	f003 fb68 	bl	8004b88 <__errno>
 80014b8:	4603      	mov	r3, r0
 80014ba:	220c      	movs	r2, #12
 80014bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014be:	f04f 33ff 	mov.w	r3, #4294967295
 80014c2:	e009      	b.n	80014d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014c4:	4b08      	ldr	r3, [pc, #32]	@ (80014e8 <_sbrk+0x64>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ca:	4b07      	ldr	r3, [pc, #28]	@ (80014e8 <_sbrk+0x64>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4413      	add	r3, r2
 80014d2:	4a05      	ldr	r2, [pc, #20]	@ (80014e8 <_sbrk+0x64>)
 80014d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014d6:	68fb      	ldr	r3, [r7, #12]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3718      	adds	r7, #24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20005000 	.word	0x20005000
 80014e4:	00000400 	.word	0x00000400
 80014e8:	20000154 	.word	0x20000154
 80014ec:	20000380 	.word	0x20000380

080014f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr

080014fc <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08e      	sub	sp, #56	@ 0x38
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001502:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001510:	f107 0320 	add.w	r3, r7, #32
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
 8001528:	615a      	str	r2, [r3, #20]
 800152a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800152c:	4b2c      	ldr	r3, [pc, #176]	@ (80015e0 <MX_TIM3_Init+0xe4>)
 800152e:	4a2d      	ldr	r2, [pc, #180]	@ (80015e4 <MX_TIM3_Init+0xe8>)
 8001530:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 8001532:	4b2b      	ldr	r3, [pc, #172]	@ (80015e0 <MX_TIM3_Init+0xe4>)
 8001534:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001538:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800153a:	4b29      	ldr	r3, [pc, #164]	@ (80015e0 <MX_TIM3_Init+0xe4>)
 800153c:	2200      	movs	r2, #0
 800153e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 15-1;
 8001540:	4b27      	ldr	r3, [pc, #156]	@ (80015e0 <MX_TIM3_Init+0xe4>)
 8001542:	220e      	movs	r2, #14
 8001544:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001546:	4b26      	ldr	r3, [pc, #152]	@ (80015e0 <MX_TIM3_Init+0xe4>)
 8001548:	2200      	movs	r2, #0
 800154a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800154c:	4b24      	ldr	r3, [pc, #144]	@ (80015e0 <MX_TIM3_Init+0xe4>)
 800154e:	2280      	movs	r2, #128	@ 0x80
 8001550:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001552:	4823      	ldr	r0, [pc, #140]	@ (80015e0 <MX_TIM3_Init+0xe4>)
 8001554:	f001 fda0 	bl	8003098 <HAL_TIM_Base_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800155e:	f7ff feb9 	bl	80012d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001562:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001566:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001568:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800156c:	4619      	mov	r1, r3
 800156e:	481c      	ldr	r0, [pc, #112]	@ (80015e0 <MX_TIM3_Init+0xe4>)
 8001570:	f001 fe96 	bl	80032a0 <HAL_TIM_ConfigClockSource>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800157a:	f7ff feab 	bl	80012d4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800157e:	4818      	ldr	r0, [pc, #96]	@ (80015e0 <MX_TIM3_Init+0xe4>)
 8001580:	f001 fdd9 	bl	8003136 <HAL_TIM_OC_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800158a:	f7ff fea3 	bl	80012d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800158e:	2300      	movs	r3, #0
 8001590:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001592:	2300      	movs	r3, #0
 8001594:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001596:	f107 0320 	add.w	r3, r7, #32
 800159a:	4619      	mov	r1, r3
 800159c:	4810      	ldr	r0, [pc, #64]	@ (80015e0 <MX_TIM3_Init+0xe4>)
 800159e:	f002 f9d3 	bl	8003948 <HAL_TIMEx_MasterConfigSynchronization>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80015a8:	f7ff fe94 	bl	80012d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80015ac:	2330      	movs	r3, #48	@ 0x30
 80015ae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015b4:	2300      	movs	r3, #0
 80015b6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015bc:	1d3b      	adds	r3, r7, #4
 80015be:	2208      	movs	r2, #8
 80015c0:	4619      	mov	r1, r3
 80015c2:	4807      	ldr	r0, [pc, #28]	@ (80015e0 <MX_TIM3_Init+0xe4>)
 80015c4:	f001 fe10 	bl	80031e8 <HAL_TIM_OC_ConfigChannel>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80015ce:	f7ff fe81 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80015d2:	4803      	ldr	r0, [pc, #12]	@ (80015e0 <MX_TIM3_Init+0xe4>)
 80015d4:	f000 f826 	bl	8001624 <HAL_TIM_MspPostInit>

}
 80015d8:	bf00      	nop
 80015da:	3738      	adds	r7, #56	@ 0x38
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000158 	.word	0x20000158
 80015e4:	40000400 	.word	0x40000400

080015e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a09      	ldr	r2, [pc, #36]	@ (800161c <HAL_TIM_Base_MspInit+0x34>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d10b      	bne.n	8001612 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015fa:	4b09      	ldr	r3, [pc, #36]	@ (8001620 <HAL_TIM_Base_MspInit+0x38>)
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	4a08      	ldr	r2, [pc, #32]	@ (8001620 <HAL_TIM_Base_MspInit+0x38>)
 8001600:	f043 0302 	orr.w	r3, r3, #2
 8001604:	61d3      	str	r3, [r2, #28]
 8001606:	4b06      	ldr	r3, [pc, #24]	@ (8001620 <HAL_TIM_Base_MspInit+0x38>)
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001612:	bf00      	nop
 8001614:	3714      	adds	r7, #20
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr
 800161c:	40000400 	.word	0x40000400
 8001620:	40021000 	.word	0x40021000

08001624 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b088      	sub	sp, #32
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162c:	f107 0310 	add.w	r3, r7, #16
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a0f      	ldr	r2, [pc, #60]	@ (800167c <HAL_TIM_MspPostInit+0x58>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d117      	bne.n	8001674 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001644:	4b0e      	ldr	r3, [pc, #56]	@ (8001680 <HAL_TIM_MspPostInit+0x5c>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	4a0d      	ldr	r2, [pc, #52]	@ (8001680 <HAL_TIM_MspPostInit+0x5c>)
 800164a:	f043 0308 	orr.w	r3, r3, #8
 800164e:	6193      	str	r3, [r2, #24]
 8001650:	4b0b      	ldr	r3, [pc, #44]	@ (8001680 <HAL_TIM_MspPostInit+0x5c>)
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	f003 0308 	and.w	r3, r3, #8
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800165c:	2301      	movs	r3, #1
 800165e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001660:	2302      	movs	r3, #2
 8001662:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001664:	2302      	movs	r3, #2
 8001666:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001668:	f107 0310 	add.w	r3, r7, #16
 800166c:	4619      	mov	r1, r3
 800166e:	4805      	ldr	r0, [pc, #20]	@ (8001684 <HAL_TIM_MspPostInit+0x60>)
 8001670:	f000 fd6c 	bl	800214c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001674:	bf00      	nop
 8001676:	3720      	adds	r7, #32
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40000400 	.word	0x40000400
 8001680:	40021000 	.word	0x40021000
 8001684:	40010c00 	.word	0x40010c00

08001688 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800168c:	4b11      	ldr	r3, [pc, #68]	@ (80016d4 <MX_USART1_UART_Init+0x4c>)
 800168e:	4a12      	ldr	r2, [pc, #72]	@ (80016d8 <MX_USART1_UART_Init+0x50>)
 8001690:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001692:	4b10      	ldr	r3, [pc, #64]	@ (80016d4 <MX_USART1_UART_Init+0x4c>)
 8001694:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001698:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800169a:	4b0e      	ldr	r3, [pc, #56]	@ (80016d4 <MX_USART1_UART_Init+0x4c>)
 800169c:	2200      	movs	r2, #0
 800169e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016a0:	4b0c      	ldr	r3, [pc, #48]	@ (80016d4 <MX_USART1_UART_Init+0x4c>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016a6:	4b0b      	ldr	r3, [pc, #44]	@ (80016d4 <MX_USART1_UART_Init+0x4c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016ac:	4b09      	ldr	r3, [pc, #36]	@ (80016d4 <MX_USART1_UART_Init+0x4c>)
 80016ae:	220c      	movs	r2, #12
 80016b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016b2:	4b08      	ldr	r3, [pc, #32]	@ (80016d4 <MX_USART1_UART_Init+0x4c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b8:	4b06      	ldr	r3, [pc, #24]	@ (80016d4 <MX_USART1_UART_Init+0x4c>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016be:	4805      	ldr	r0, [pc, #20]	@ (80016d4 <MX_USART1_UART_Init+0x4c>)
 80016c0:	f002 f9a0 	bl	8003a04 <HAL_UART_Init>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016ca:	f7ff fe03 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	200001a0 	.word	0x200001a0
 80016d8:	40013800 	.word	0x40013800

080016dc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016e0:	4b11      	ldr	r3, [pc, #68]	@ (8001728 <MX_USART3_UART_Init+0x4c>)
 80016e2:	4a12      	ldr	r2, [pc, #72]	@ (800172c <MX_USART3_UART_Init+0x50>)
 80016e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80016e6:	4b10      	ldr	r3, [pc, #64]	@ (8001728 <MX_USART3_UART_Init+0x4c>)
 80016e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001728 <MX_USART3_UART_Init+0x4c>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001728 <MX_USART3_UART_Init+0x4c>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001728 <MX_USART3_UART_Init+0x4c>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001700:	4b09      	ldr	r3, [pc, #36]	@ (8001728 <MX_USART3_UART_Init+0x4c>)
 8001702:	220c      	movs	r2, #12
 8001704:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001706:	4b08      	ldr	r3, [pc, #32]	@ (8001728 <MX_USART3_UART_Init+0x4c>)
 8001708:	2200      	movs	r2, #0
 800170a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800170c:	4b06      	ldr	r3, [pc, #24]	@ (8001728 <MX_USART3_UART_Init+0x4c>)
 800170e:	2200      	movs	r2, #0
 8001710:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001712:	4805      	ldr	r0, [pc, #20]	@ (8001728 <MX_USART3_UART_Init+0x4c>)
 8001714:	f002 f976 	bl	8003a04 <HAL_UART_Init>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800171e:	f7ff fdd9 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	200001e8 	.word	0x200001e8
 800172c:	40004800 	.word	0x40004800

08001730 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b08a      	sub	sp, #40	@ 0x28
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001738:	f107 0318 	add.w	r3, r7, #24
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a3c      	ldr	r2, [pc, #240]	@ (800183c <HAL_UART_MspInit+0x10c>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d13a      	bne.n	80017c6 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001750:	4b3b      	ldr	r3, [pc, #236]	@ (8001840 <HAL_UART_MspInit+0x110>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	4a3a      	ldr	r2, [pc, #232]	@ (8001840 <HAL_UART_MspInit+0x110>)
 8001756:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800175a:	6193      	str	r3, [r2, #24]
 800175c:	4b38      	ldr	r3, [pc, #224]	@ (8001840 <HAL_UART_MspInit+0x110>)
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001764:	617b      	str	r3, [r7, #20]
 8001766:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001768:	4b35      	ldr	r3, [pc, #212]	@ (8001840 <HAL_UART_MspInit+0x110>)
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	4a34      	ldr	r2, [pc, #208]	@ (8001840 <HAL_UART_MspInit+0x110>)
 800176e:	f043 0304 	orr.w	r3, r3, #4
 8001772:	6193      	str	r3, [r2, #24]
 8001774:	4b32      	ldr	r3, [pc, #200]	@ (8001840 <HAL_UART_MspInit+0x110>)
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	613b      	str	r3, [r7, #16]
 800177e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001780:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001784:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001786:	2302      	movs	r3, #2
 8001788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800178a:	2303      	movs	r3, #3
 800178c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178e:	f107 0318 	add.w	r3, r7, #24
 8001792:	4619      	mov	r1, r3
 8001794:	482b      	ldr	r0, [pc, #172]	@ (8001844 <HAL_UART_MspInit+0x114>)
 8001796:	f000 fcd9 	bl	800214c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800179a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800179e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a0:	2300      	movs	r3, #0
 80017a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a8:	f107 0318 	add.w	r3, r7, #24
 80017ac:	4619      	mov	r1, r3
 80017ae:	4825      	ldr	r0, [pc, #148]	@ (8001844 <HAL_UART_MspInit+0x114>)
 80017b0:	f000 fccc 	bl	800214c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80017b4:	2200      	movs	r2, #0
 80017b6:	2100      	movs	r1, #0
 80017b8:	2025      	movs	r0, #37	@ 0x25
 80017ba:	f000 fbde 	bl	8001f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017be:	2025      	movs	r0, #37	@ 0x25
 80017c0:	f000 fbf7 	bl	8001fb2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80017c4:	e036      	b.n	8001834 <HAL_UART_MspInit+0x104>
  else if(uartHandle->Instance==USART3)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a1f      	ldr	r2, [pc, #124]	@ (8001848 <HAL_UART_MspInit+0x118>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d131      	bne.n	8001834 <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 80017d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001840 <HAL_UART_MspInit+0x110>)
 80017d2:	69db      	ldr	r3, [r3, #28]
 80017d4:	4a1a      	ldr	r2, [pc, #104]	@ (8001840 <HAL_UART_MspInit+0x110>)
 80017d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017da:	61d3      	str	r3, [r2, #28]
 80017dc:	4b18      	ldr	r3, [pc, #96]	@ (8001840 <HAL_UART_MspInit+0x110>)
 80017de:	69db      	ldr	r3, [r3, #28]
 80017e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e8:	4b15      	ldr	r3, [pc, #84]	@ (8001840 <HAL_UART_MspInit+0x110>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	4a14      	ldr	r2, [pc, #80]	@ (8001840 <HAL_UART_MspInit+0x110>)
 80017ee:	f043 0308 	orr.w	r3, r3, #8
 80017f2:	6193      	str	r3, [r2, #24]
 80017f4:	4b12      	ldr	r3, [pc, #72]	@ (8001840 <HAL_UART_MspInit+0x110>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	f003 0308 	and.w	r3, r3, #8
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001800:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001806:	2302      	movs	r3, #2
 8001808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800180a:	2303      	movs	r3, #3
 800180c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180e:	f107 0318 	add.w	r3, r7, #24
 8001812:	4619      	mov	r1, r3
 8001814:	480d      	ldr	r0, [pc, #52]	@ (800184c <HAL_UART_MspInit+0x11c>)
 8001816:	f000 fc99 	bl	800214c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800181a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800181e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001820:	2300      	movs	r3, #0
 8001822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001828:	f107 0318 	add.w	r3, r7, #24
 800182c:	4619      	mov	r1, r3
 800182e:	4807      	ldr	r0, [pc, #28]	@ (800184c <HAL_UART_MspInit+0x11c>)
 8001830:	f000 fc8c 	bl	800214c <HAL_GPIO_Init>
}
 8001834:	bf00      	nop
 8001836:	3728      	adds	r7, #40	@ 0x28
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40013800 	.word	0x40013800
 8001840:	40021000 	.word	0x40021000
 8001844:	40010800 	.word	0x40010800
 8001848:	40004800 	.word	0x40004800
 800184c:	40010c00 	.word	0x40010c00

08001850 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001850:	f7ff fe4e 	bl	80014f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001854:	480b      	ldr	r0, [pc, #44]	@ (8001884 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001856:	490c      	ldr	r1, [pc, #48]	@ (8001888 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001858:	4a0c      	ldr	r2, [pc, #48]	@ (800188c <LoopFillZerobss+0x16>)
  movs r3, #0
 800185a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800185c:	e002      	b.n	8001864 <LoopCopyDataInit>

0800185e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800185e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001860:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001862:	3304      	adds	r3, #4

08001864 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001864:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001866:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001868:	d3f9      	bcc.n	800185e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800186a:	4a09      	ldr	r2, [pc, #36]	@ (8001890 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800186c:	4c09      	ldr	r4, [pc, #36]	@ (8001894 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800186e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001870:	e001      	b.n	8001876 <LoopFillZerobss>

08001872 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001872:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001874:	3204      	adds	r2, #4

08001876 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001876:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001878:	d3fb      	bcc.n	8001872 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800187a:	f003 f98b 	bl	8004b94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800187e:	f7fe fe4d 	bl	800051c <main>
  bx lr
 8001882:	4770      	bx	lr
  ldr r0, =_sdata
 8001884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001888:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800188c:	080060e4 	.word	0x080060e4
  ldr r2, =_sbss
 8001890:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001894:	20000380 	.word	0x20000380

08001898 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001898:	e7fe      	b.n	8001898 <ADC1_2_IRQHandler>
	...

0800189c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018a0:	4b08      	ldr	r3, [pc, #32]	@ (80018c4 <HAL_Init+0x28>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a07      	ldr	r2, [pc, #28]	@ (80018c4 <HAL_Init+0x28>)
 80018a6:	f043 0310 	orr.w	r3, r3, #16
 80018aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018ac:	2003      	movs	r0, #3
 80018ae:	f000 fb59 	bl	8001f64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018b2:	200f      	movs	r0, #15
 80018b4:	f000 f808 	bl	80018c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018b8:	f7ff fd12 	bl	80012e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40022000 	.word	0x40022000

080018c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018d0:	4b12      	ldr	r3, [pc, #72]	@ (800191c <HAL_InitTick+0x54>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	4b12      	ldr	r3, [pc, #72]	@ (8001920 <HAL_InitTick+0x58>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	4619      	mov	r1, r3
 80018da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018de:	fbb3 f3f1 	udiv	r3, r3, r1
 80018e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e6:	4618      	mov	r0, r3
 80018e8:	f000 fb71 	bl	8001fce <HAL_SYSTICK_Config>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e00e      	b.n	8001914 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2b0f      	cmp	r3, #15
 80018fa:	d80a      	bhi.n	8001912 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018fc:	2200      	movs	r2, #0
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	f04f 30ff 	mov.w	r0, #4294967295
 8001904:	f000 fb39 	bl	8001f7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001908:	4a06      	ldr	r2, [pc, #24]	@ (8001924 <HAL_InitTick+0x5c>)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800190e:	2300      	movs	r3, #0
 8001910:	e000      	b.n	8001914 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
}
 8001914:	4618      	mov	r0, r3
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20000014 	.word	0x20000014
 8001920:	2000001c 	.word	0x2000001c
 8001924:	20000018 	.word	0x20000018

08001928 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800192c:	4b05      	ldr	r3, [pc, #20]	@ (8001944 <HAL_IncTick+0x1c>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	461a      	mov	r2, r3
 8001932:	4b05      	ldr	r3, [pc, #20]	@ (8001948 <HAL_IncTick+0x20>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4413      	add	r3, r2
 8001938:	4a03      	ldr	r2, [pc, #12]	@ (8001948 <HAL_IncTick+0x20>)
 800193a:	6013      	str	r3, [r2, #0]
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr
 8001944:	2000001c 	.word	0x2000001c
 8001948:	20000230 	.word	0x20000230

0800194c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  return uwTick;
 8001950:	4b02      	ldr	r3, [pc, #8]	@ (800195c <HAL_GetTick+0x10>)
 8001952:	681b      	ldr	r3, [r3, #0]
}
 8001954:	4618      	mov	r0, r3
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr
 800195c:	20000230 	.word	0x20000230

08001960 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001968:	f7ff fff0 	bl	800194c <HAL_GetTick>
 800196c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001978:	d005      	beq.n	8001986 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800197a:	4b0a      	ldr	r3, [pc, #40]	@ (80019a4 <HAL_Delay+0x44>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	461a      	mov	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	4413      	add	r3, r2
 8001984:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001986:	bf00      	nop
 8001988:	f7ff ffe0 	bl	800194c <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	68fa      	ldr	r2, [r7, #12]
 8001994:	429a      	cmp	r2, r3
 8001996:	d8f7      	bhi.n	8001988 <HAL_Delay+0x28>
  {
  }
}
 8001998:	bf00      	nop
 800199a:	bf00      	nop
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	2000001c 	.word	0x2000001c

080019a8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019b0:	2300      	movs	r3, #0
 80019b2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80019bc:	2300      	movs	r3, #0
 80019be:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e0be      	b.n	8001b48 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d109      	bne.n	80019ec <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7fe fc2c 	bl	8000244 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f000 f9ab 	bl	8001d48 <ADC_ConversionStop_Disable>
 80019f2:	4603      	mov	r3, r0
 80019f4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019fa:	f003 0310 	and.w	r3, r3, #16
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f040 8099 	bne.w	8001b36 <HAL_ADC_Init+0x18e>
 8001a04:	7dfb      	ldrb	r3, [r7, #23]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f040 8095 	bne.w	8001b36 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a10:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a14:	f023 0302 	bic.w	r3, r3, #2
 8001a18:	f043 0202 	orr.w	r2, r3, #2
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a28:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	7b1b      	ldrb	r3, [r3, #12]
 8001a2e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a30:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a32:	68ba      	ldr	r2, [r7, #8]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a40:	d003      	beq.n	8001a4a <HAL_ADC_Init+0xa2>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d102      	bne.n	8001a50 <HAL_ADC_Init+0xa8>
 8001a4a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a4e:	e000      	b.n	8001a52 <HAL_ADC_Init+0xaa>
 8001a50:	2300      	movs	r3, #0
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	7d1b      	ldrb	r3, [r3, #20]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d119      	bne.n	8001a94 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	7b1b      	ldrb	r3, [r3, #12]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d109      	bne.n	8001a7c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	035a      	lsls	r2, r3, #13
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a78:	613b      	str	r3, [r7, #16]
 8001a7a:	e00b      	b.n	8001a94 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a80:	f043 0220 	orr.w	r2, r3, #32
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a8c:	f043 0201 	orr.w	r2, r3, #1
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	689a      	ldr	r2, [r3, #8]
 8001aae:	4b28      	ldr	r3, [pc, #160]	@ (8001b50 <HAL_ADC_Init+0x1a8>)
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	6812      	ldr	r2, [r2, #0]
 8001ab6:	68b9      	ldr	r1, [r7, #8]
 8001ab8:	430b      	orrs	r3, r1
 8001aba:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ac4:	d003      	beq.n	8001ace <HAL_ADC_Init+0x126>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d104      	bne.n	8001ad8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	051b      	lsls	r3, r3, #20
 8001ad6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ade:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	689a      	ldr	r2, [r3, #8]
 8001af2:	4b18      	ldr	r3, [pc, #96]	@ (8001b54 <HAL_ADC_Init+0x1ac>)
 8001af4:	4013      	ands	r3, r2
 8001af6:	68ba      	ldr	r2, [r7, #8]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d10b      	bne.n	8001b14 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b06:	f023 0303 	bic.w	r3, r3, #3
 8001b0a:	f043 0201 	orr.w	r2, r3, #1
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b12:	e018      	b.n	8001b46 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b18:	f023 0312 	bic.w	r3, r3, #18
 8001b1c:	f043 0210 	orr.w	r2, r3, #16
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b28:	f043 0201 	orr.w	r2, r3, #1
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b34:	e007      	b.n	8001b46 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b3a:	f043 0210 	orr.w	r2, r3, #16
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b46:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3718      	adds	r7, #24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	ffe1f7fd 	.word	0xffe1f7fd
 8001b54:	ff1f0efe 	.word	0xff1f0efe

08001b58 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b62:	2300      	movs	r3, #0
 8001b64:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001b66:	2300      	movs	r3, #0
 8001b68:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d101      	bne.n	8001b78 <HAL_ADC_ConfigChannel+0x20>
 8001b74:	2302      	movs	r3, #2
 8001b76:	e0dc      	b.n	8001d32 <HAL_ADC_ConfigChannel+0x1da>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	2b06      	cmp	r3, #6
 8001b86:	d81c      	bhi.n	8001bc2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	4613      	mov	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4413      	add	r3, r2
 8001b98:	3b05      	subs	r3, #5
 8001b9a:	221f      	movs	r2, #31
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	4019      	ands	r1, r3
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	6818      	ldr	r0, [r3, #0]
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685a      	ldr	r2, [r3, #4]
 8001bac:	4613      	mov	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	3b05      	subs	r3, #5
 8001bb4:	fa00 f203 	lsl.w	r2, r0, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	635a      	str	r2, [r3, #52]	@ 0x34
 8001bc0:	e03c      	b.n	8001c3c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	2b0c      	cmp	r3, #12
 8001bc8:	d81c      	bhi.n	8001c04 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	3b23      	subs	r3, #35	@ 0x23
 8001bdc:	221f      	movs	r2, #31
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43db      	mvns	r3, r3
 8001be4:	4019      	ands	r1, r3
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	6818      	ldr	r0, [r3, #0]
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685a      	ldr	r2, [r3, #4]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	4413      	add	r3, r2
 8001bf4:	3b23      	subs	r3, #35	@ 0x23
 8001bf6:	fa00 f203 	lsl.w	r2, r0, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c02:	e01b      	b.n	8001c3c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685a      	ldr	r2, [r3, #4]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	3b41      	subs	r3, #65	@ 0x41
 8001c16:	221f      	movs	r2, #31
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	4019      	ands	r1, r3
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	6818      	ldr	r0, [r3, #0]
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	3b41      	subs	r3, #65	@ 0x41
 8001c30:	fa00 f203 	lsl.w	r2, r0, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2b09      	cmp	r3, #9
 8001c42:	d91c      	bls.n	8001c7e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68d9      	ldr	r1, [r3, #12]
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	4413      	add	r3, r2
 8001c54:	3b1e      	subs	r3, #30
 8001c56:	2207      	movs	r2, #7
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	4019      	ands	r1, r3
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	6898      	ldr	r0, [r3, #8]
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	4413      	add	r3, r2
 8001c6e:	3b1e      	subs	r3, #30
 8001c70:	fa00 f203 	lsl.w	r2, r0, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	60da      	str	r2, [r3, #12]
 8001c7c:	e019      	b.n	8001cb2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	6919      	ldr	r1, [r3, #16]
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	4413      	add	r3, r2
 8001c8e:	2207      	movs	r2, #7
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	43db      	mvns	r3, r3
 8001c96:	4019      	ands	r1, r3
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	6898      	ldr	r0, [r3, #8]
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	4413      	add	r3, r2
 8001ca6:	fa00 f203 	lsl.w	r2, r0, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2b10      	cmp	r3, #16
 8001cb8:	d003      	beq.n	8001cc2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001cbe:	2b11      	cmp	r3, #17
 8001cc0:	d132      	bne.n	8001d28 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a1d      	ldr	r2, [pc, #116]	@ (8001d3c <HAL_ADC_ConfigChannel+0x1e4>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d125      	bne.n	8001d18 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d126      	bne.n	8001d28 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001ce8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2b10      	cmp	r3, #16
 8001cf0:	d11a      	bne.n	8001d28 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cf2:	4b13      	ldr	r3, [pc, #76]	@ (8001d40 <HAL_ADC_ConfigChannel+0x1e8>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a13      	ldr	r2, [pc, #76]	@ (8001d44 <HAL_ADC_ConfigChannel+0x1ec>)
 8001cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfc:	0c9a      	lsrs	r2, r3, #18
 8001cfe:	4613      	mov	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d08:	e002      	b.n	8001d10 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1f9      	bne.n	8001d0a <HAL_ADC_ConfigChannel+0x1b2>
 8001d16:	e007      	b.n	8001d28 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d1c:	f043 0220 	orr.w	r2, r3, #32
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3714      	adds	r7, #20
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr
 8001d3c:	40012400 	.word	0x40012400
 8001d40:	20000014 	.word	0x20000014
 8001d44:	431bde83 	.word	0x431bde83

08001d48 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d12e      	bne.n	8001dc0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f022 0201 	bic.w	r2, r2, #1
 8001d70:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d72:	f7ff fdeb 	bl	800194c <HAL_GetTick>
 8001d76:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d78:	e01b      	b.n	8001db2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d7a:	f7ff fde7 	bl	800194c <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d914      	bls.n	8001db2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d10d      	bne.n	8001db2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d9a:	f043 0210 	orr.w	r2, r3, #16
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001da6:	f043 0201 	orr.w	r2, r3, #1
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e007      	b.n	8001dc2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d0dc      	beq.n	8001d7a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
	...

08001dcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8001e10 <__NVIC_SetPriorityGrouping+0x44>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001de2:	68ba      	ldr	r2, [r7, #8]
 8001de4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001de8:	4013      	ands	r3, r2
 8001dea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001df4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001df8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dfe:	4a04      	ldr	r2, [pc, #16]	@ (8001e10 <__NVIC_SetPriorityGrouping+0x44>)
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	60d3      	str	r3, [r2, #12]
}
 8001e04:	bf00      	nop
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bc80      	pop	{r7}
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e18:	4b04      	ldr	r3, [pc, #16]	@ (8001e2c <__NVIC_GetPriorityGrouping+0x18>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	0a1b      	lsrs	r3, r3, #8
 8001e1e:	f003 0307 	and.w	r3, r3, #7
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bc80      	pop	{r7}
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	db0b      	blt.n	8001e5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e42:	79fb      	ldrb	r3, [r7, #7]
 8001e44:	f003 021f 	and.w	r2, r3, #31
 8001e48:	4906      	ldr	r1, [pc, #24]	@ (8001e64 <__NVIC_EnableIRQ+0x34>)
 8001e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4e:	095b      	lsrs	r3, r3, #5
 8001e50:	2001      	movs	r0, #1
 8001e52:	fa00 f202 	lsl.w	r2, r0, r2
 8001e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr
 8001e64:	e000e100 	.word	0xe000e100

08001e68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	6039      	str	r1, [r7, #0]
 8001e72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	db0a      	blt.n	8001e92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	490c      	ldr	r1, [pc, #48]	@ (8001eb4 <__NVIC_SetPriority+0x4c>)
 8001e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e86:	0112      	lsls	r2, r2, #4
 8001e88:	b2d2      	uxtb	r2, r2
 8001e8a:	440b      	add	r3, r1
 8001e8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e90:	e00a      	b.n	8001ea8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	4908      	ldr	r1, [pc, #32]	@ (8001eb8 <__NVIC_SetPriority+0x50>)
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	3b04      	subs	r3, #4
 8001ea0:	0112      	lsls	r2, r2, #4
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	440b      	add	r3, r1
 8001ea6:	761a      	strb	r2, [r3, #24]
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bc80      	pop	{r7}
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	e000e100 	.word	0xe000e100
 8001eb8:	e000ed00 	.word	0xe000ed00

08001ebc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b089      	sub	sp, #36	@ 0x24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	f1c3 0307 	rsb	r3, r3, #7
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	bf28      	it	cs
 8001eda:	2304      	movcs	r3, #4
 8001edc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	2b06      	cmp	r3, #6
 8001ee4:	d902      	bls.n	8001eec <NVIC_EncodePriority+0x30>
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	3b03      	subs	r3, #3
 8001eea:	e000      	b.n	8001eee <NVIC_EncodePriority+0x32>
 8001eec:	2300      	movs	r3, #0
 8001eee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43da      	mvns	r2, r3
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	401a      	ands	r2, r3
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f04:	f04f 31ff 	mov.w	r1, #4294967295
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0e:	43d9      	mvns	r1, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f14:	4313      	orrs	r3, r2
         );
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3724      	adds	r7, #36	@ 0x24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr

08001f20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f30:	d301      	bcc.n	8001f36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f32:	2301      	movs	r3, #1
 8001f34:	e00f      	b.n	8001f56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f36:	4a0a      	ldr	r2, [pc, #40]	@ (8001f60 <SysTick_Config+0x40>)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f3e:	210f      	movs	r1, #15
 8001f40:	f04f 30ff 	mov.w	r0, #4294967295
 8001f44:	f7ff ff90 	bl	8001e68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f48:	4b05      	ldr	r3, [pc, #20]	@ (8001f60 <SysTick_Config+0x40>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f4e:	4b04      	ldr	r3, [pc, #16]	@ (8001f60 <SysTick_Config+0x40>)
 8001f50:	2207      	movs	r2, #7
 8001f52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	e000e010 	.word	0xe000e010

08001f64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7ff ff2d 	bl	8001dcc <__NVIC_SetPriorityGrouping>
}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b086      	sub	sp, #24
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	4603      	mov	r3, r0
 8001f82:	60b9      	str	r1, [r7, #8]
 8001f84:	607a      	str	r2, [r7, #4]
 8001f86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f8c:	f7ff ff42 	bl	8001e14 <__NVIC_GetPriorityGrouping>
 8001f90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	68b9      	ldr	r1, [r7, #8]
 8001f96:	6978      	ldr	r0, [r7, #20]
 8001f98:	f7ff ff90 	bl	8001ebc <NVIC_EncodePriority>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fa2:	4611      	mov	r1, r2
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff ff5f 	bl	8001e68 <__NVIC_SetPriority>
}
 8001faa:	bf00      	nop
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	4603      	mov	r3, r0
 8001fba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff ff35 	bl	8001e30 <__NVIC_EnableIRQ>
}
 8001fc6:	bf00      	nop
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b082      	sub	sp, #8
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7ff ffa2 	bl	8001f20 <SysTick_Config>
 8001fdc:	4603      	mov	r3, r0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b085      	sub	sp, #20
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d008      	beq.n	8002010 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2204      	movs	r2, #4
 8002002:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e020      	b.n	8002052 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 020e 	bic.w	r2, r2, #14
 800201e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f022 0201 	bic.w	r2, r2, #1
 800202e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002038:	2101      	movs	r1, #1
 800203a:	fa01 f202 	lsl.w	r2, r1, r2
 800203e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002050:	7bfb      	ldrb	r3, [r7, #15]
}
 8002052:	4618      	mov	r0, r3
 8002054:	3714      	adds	r7, #20
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr

0800205c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002064:	2300      	movs	r3, #0
 8002066:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d005      	beq.n	8002080 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2204      	movs	r2, #4
 8002078:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	73fb      	strb	r3, [r7, #15]
 800207e:	e051      	b.n	8002124 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 020e 	bic.w	r2, r2, #14
 800208e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 0201 	bic.w	r2, r2, #1
 800209e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a22      	ldr	r2, [pc, #136]	@ (8002130 <HAL_DMA_Abort_IT+0xd4>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d029      	beq.n	80020fe <HAL_DMA_Abort_IT+0xa2>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a21      	ldr	r2, [pc, #132]	@ (8002134 <HAL_DMA_Abort_IT+0xd8>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d022      	beq.n	80020fa <HAL_DMA_Abort_IT+0x9e>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a1f      	ldr	r2, [pc, #124]	@ (8002138 <HAL_DMA_Abort_IT+0xdc>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d01a      	beq.n	80020f4 <HAL_DMA_Abort_IT+0x98>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a1e      	ldr	r2, [pc, #120]	@ (800213c <HAL_DMA_Abort_IT+0xe0>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d012      	beq.n	80020ee <HAL_DMA_Abort_IT+0x92>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a1c      	ldr	r2, [pc, #112]	@ (8002140 <HAL_DMA_Abort_IT+0xe4>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d00a      	beq.n	80020e8 <HAL_DMA_Abort_IT+0x8c>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a1b      	ldr	r2, [pc, #108]	@ (8002144 <HAL_DMA_Abort_IT+0xe8>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d102      	bne.n	80020e2 <HAL_DMA_Abort_IT+0x86>
 80020dc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80020e0:	e00e      	b.n	8002100 <HAL_DMA_Abort_IT+0xa4>
 80020e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80020e6:	e00b      	b.n	8002100 <HAL_DMA_Abort_IT+0xa4>
 80020e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80020ec:	e008      	b.n	8002100 <HAL_DMA_Abort_IT+0xa4>
 80020ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020f2:	e005      	b.n	8002100 <HAL_DMA_Abort_IT+0xa4>
 80020f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020f8:	e002      	b.n	8002100 <HAL_DMA_Abort_IT+0xa4>
 80020fa:	2310      	movs	r3, #16
 80020fc:	e000      	b.n	8002100 <HAL_DMA_Abort_IT+0xa4>
 80020fe:	2301      	movs	r3, #1
 8002100:	4a11      	ldr	r2, [pc, #68]	@ (8002148 <HAL_DMA_Abort_IT+0xec>)
 8002102:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002118:	2b00      	cmp	r3, #0
 800211a:	d003      	beq.n	8002124 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	4798      	blx	r3
    } 
  }
  return status;
 8002124:	7bfb      	ldrb	r3, [r7, #15]
}
 8002126:	4618      	mov	r0, r3
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40020008 	.word	0x40020008
 8002134:	4002001c 	.word	0x4002001c
 8002138:	40020030 	.word	0x40020030
 800213c:	40020044 	.word	0x40020044
 8002140:	40020058 	.word	0x40020058
 8002144:	4002006c 	.word	0x4002006c
 8002148:	40020000 	.word	0x40020000

0800214c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800214c:	b480      	push	{r7}
 800214e:	b08b      	sub	sp, #44	@ 0x2c
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002156:	2300      	movs	r3, #0
 8002158:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800215a:	2300      	movs	r3, #0
 800215c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800215e:	e169      	b.n	8002434 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002160:	2201      	movs	r2, #1
 8002162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	69fa      	ldr	r2, [r7, #28]
 8002170:	4013      	ands	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	429a      	cmp	r2, r3
 800217a:	f040 8158 	bne.w	800242e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	4a9a      	ldr	r2, [pc, #616]	@ (80023ec <HAL_GPIO_Init+0x2a0>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d05e      	beq.n	8002246 <HAL_GPIO_Init+0xfa>
 8002188:	4a98      	ldr	r2, [pc, #608]	@ (80023ec <HAL_GPIO_Init+0x2a0>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d875      	bhi.n	800227a <HAL_GPIO_Init+0x12e>
 800218e:	4a98      	ldr	r2, [pc, #608]	@ (80023f0 <HAL_GPIO_Init+0x2a4>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d058      	beq.n	8002246 <HAL_GPIO_Init+0xfa>
 8002194:	4a96      	ldr	r2, [pc, #600]	@ (80023f0 <HAL_GPIO_Init+0x2a4>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d86f      	bhi.n	800227a <HAL_GPIO_Init+0x12e>
 800219a:	4a96      	ldr	r2, [pc, #600]	@ (80023f4 <HAL_GPIO_Init+0x2a8>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d052      	beq.n	8002246 <HAL_GPIO_Init+0xfa>
 80021a0:	4a94      	ldr	r2, [pc, #592]	@ (80023f4 <HAL_GPIO_Init+0x2a8>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d869      	bhi.n	800227a <HAL_GPIO_Init+0x12e>
 80021a6:	4a94      	ldr	r2, [pc, #592]	@ (80023f8 <HAL_GPIO_Init+0x2ac>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d04c      	beq.n	8002246 <HAL_GPIO_Init+0xfa>
 80021ac:	4a92      	ldr	r2, [pc, #584]	@ (80023f8 <HAL_GPIO_Init+0x2ac>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d863      	bhi.n	800227a <HAL_GPIO_Init+0x12e>
 80021b2:	4a92      	ldr	r2, [pc, #584]	@ (80023fc <HAL_GPIO_Init+0x2b0>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d046      	beq.n	8002246 <HAL_GPIO_Init+0xfa>
 80021b8:	4a90      	ldr	r2, [pc, #576]	@ (80023fc <HAL_GPIO_Init+0x2b0>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d85d      	bhi.n	800227a <HAL_GPIO_Init+0x12e>
 80021be:	2b12      	cmp	r3, #18
 80021c0:	d82a      	bhi.n	8002218 <HAL_GPIO_Init+0xcc>
 80021c2:	2b12      	cmp	r3, #18
 80021c4:	d859      	bhi.n	800227a <HAL_GPIO_Init+0x12e>
 80021c6:	a201      	add	r2, pc, #4	@ (adr r2, 80021cc <HAL_GPIO_Init+0x80>)
 80021c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021cc:	08002247 	.word	0x08002247
 80021d0:	08002221 	.word	0x08002221
 80021d4:	08002233 	.word	0x08002233
 80021d8:	08002275 	.word	0x08002275
 80021dc:	0800227b 	.word	0x0800227b
 80021e0:	0800227b 	.word	0x0800227b
 80021e4:	0800227b 	.word	0x0800227b
 80021e8:	0800227b 	.word	0x0800227b
 80021ec:	0800227b 	.word	0x0800227b
 80021f0:	0800227b 	.word	0x0800227b
 80021f4:	0800227b 	.word	0x0800227b
 80021f8:	0800227b 	.word	0x0800227b
 80021fc:	0800227b 	.word	0x0800227b
 8002200:	0800227b 	.word	0x0800227b
 8002204:	0800227b 	.word	0x0800227b
 8002208:	0800227b 	.word	0x0800227b
 800220c:	0800227b 	.word	0x0800227b
 8002210:	08002229 	.word	0x08002229
 8002214:	0800223d 	.word	0x0800223d
 8002218:	4a79      	ldr	r2, [pc, #484]	@ (8002400 <HAL_GPIO_Init+0x2b4>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d013      	beq.n	8002246 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800221e:	e02c      	b.n	800227a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	623b      	str	r3, [r7, #32]
          break;
 8002226:	e029      	b.n	800227c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	3304      	adds	r3, #4
 800222e:	623b      	str	r3, [r7, #32]
          break;
 8002230:	e024      	b.n	800227c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	3308      	adds	r3, #8
 8002238:	623b      	str	r3, [r7, #32]
          break;
 800223a:	e01f      	b.n	800227c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	330c      	adds	r3, #12
 8002242:	623b      	str	r3, [r7, #32]
          break;
 8002244:	e01a      	b.n	800227c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d102      	bne.n	8002254 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800224e:	2304      	movs	r3, #4
 8002250:	623b      	str	r3, [r7, #32]
          break;
 8002252:	e013      	b.n	800227c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d105      	bne.n	8002268 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800225c:	2308      	movs	r3, #8
 800225e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	69fa      	ldr	r2, [r7, #28]
 8002264:	611a      	str	r2, [r3, #16]
          break;
 8002266:	e009      	b.n	800227c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002268:	2308      	movs	r3, #8
 800226a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	69fa      	ldr	r2, [r7, #28]
 8002270:	615a      	str	r2, [r3, #20]
          break;
 8002272:	e003      	b.n	800227c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002274:	2300      	movs	r3, #0
 8002276:	623b      	str	r3, [r7, #32]
          break;
 8002278:	e000      	b.n	800227c <HAL_GPIO_Init+0x130>
          break;
 800227a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	2bff      	cmp	r3, #255	@ 0xff
 8002280:	d801      	bhi.n	8002286 <HAL_GPIO_Init+0x13a>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	e001      	b.n	800228a <HAL_GPIO_Init+0x13e>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	3304      	adds	r3, #4
 800228a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	2bff      	cmp	r3, #255	@ 0xff
 8002290:	d802      	bhi.n	8002298 <HAL_GPIO_Init+0x14c>
 8002292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	e002      	b.n	800229e <HAL_GPIO_Init+0x152>
 8002298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800229a:	3b08      	subs	r3, #8
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	210f      	movs	r1, #15
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	fa01 f303 	lsl.w	r3, r1, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	401a      	ands	r2, r3
 80022b0:	6a39      	ldr	r1, [r7, #32]
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	fa01 f303 	lsl.w	r3, r1, r3
 80022b8:	431a      	orrs	r2, r3
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 80b1 	beq.w	800242e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022cc:	4b4d      	ldr	r3, [pc, #308]	@ (8002404 <HAL_GPIO_Init+0x2b8>)
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	4a4c      	ldr	r2, [pc, #304]	@ (8002404 <HAL_GPIO_Init+0x2b8>)
 80022d2:	f043 0301 	orr.w	r3, r3, #1
 80022d6:	6193      	str	r3, [r2, #24]
 80022d8:	4b4a      	ldr	r3, [pc, #296]	@ (8002404 <HAL_GPIO_Init+0x2b8>)
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	60bb      	str	r3, [r7, #8]
 80022e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022e4:	4a48      	ldr	r2, [pc, #288]	@ (8002408 <HAL_GPIO_Init+0x2bc>)
 80022e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e8:	089b      	lsrs	r3, r3, #2
 80022ea:	3302      	adds	r3, #2
 80022ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f4:	f003 0303 	and.w	r3, r3, #3
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	220f      	movs	r2, #15
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	43db      	mvns	r3, r3
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	4013      	ands	r3, r2
 8002306:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a40      	ldr	r2, [pc, #256]	@ (800240c <HAL_GPIO_Init+0x2c0>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d013      	beq.n	8002338 <HAL_GPIO_Init+0x1ec>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a3f      	ldr	r2, [pc, #252]	@ (8002410 <HAL_GPIO_Init+0x2c4>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d00d      	beq.n	8002334 <HAL_GPIO_Init+0x1e8>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a3e      	ldr	r2, [pc, #248]	@ (8002414 <HAL_GPIO_Init+0x2c8>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d007      	beq.n	8002330 <HAL_GPIO_Init+0x1e4>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a3d      	ldr	r2, [pc, #244]	@ (8002418 <HAL_GPIO_Init+0x2cc>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d101      	bne.n	800232c <HAL_GPIO_Init+0x1e0>
 8002328:	2303      	movs	r3, #3
 800232a:	e006      	b.n	800233a <HAL_GPIO_Init+0x1ee>
 800232c:	2304      	movs	r3, #4
 800232e:	e004      	b.n	800233a <HAL_GPIO_Init+0x1ee>
 8002330:	2302      	movs	r3, #2
 8002332:	e002      	b.n	800233a <HAL_GPIO_Init+0x1ee>
 8002334:	2301      	movs	r3, #1
 8002336:	e000      	b.n	800233a <HAL_GPIO_Init+0x1ee>
 8002338:	2300      	movs	r3, #0
 800233a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800233c:	f002 0203 	and.w	r2, r2, #3
 8002340:	0092      	lsls	r2, r2, #2
 8002342:	4093      	lsls	r3, r2
 8002344:	68fa      	ldr	r2, [r7, #12]
 8002346:	4313      	orrs	r3, r2
 8002348:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800234a:	492f      	ldr	r1, [pc, #188]	@ (8002408 <HAL_GPIO_Init+0x2bc>)
 800234c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234e:	089b      	lsrs	r3, r3, #2
 8002350:	3302      	adds	r3, #2
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d006      	beq.n	8002372 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002364:	4b2d      	ldr	r3, [pc, #180]	@ (800241c <HAL_GPIO_Init+0x2d0>)
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	492c      	ldr	r1, [pc, #176]	@ (800241c <HAL_GPIO_Init+0x2d0>)
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	4313      	orrs	r3, r2
 800236e:	608b      	str	r3, [r1, #8]
 8002370:	e006      	b.n	8002380 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002372:	4b2a      	ldr	r3, [pc, #168]	@ (800241c <HAL_GPIO_Init+0x2d0>)
 8002374:	689a      	ldr	r2, [r3, #8]
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	43db      	mvns	r3, r3
 800237a:	4928      	ldr	r1, [pc, #160]	@ (800241c <HAL_GPIO_Init+0x2d0>)
 800237c:	4013      	ands	r3, r2
 800237e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d006      	beq.n	800239a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800238c:	4b23      	ldr	r3, [pc, #140]	@ (800241c <HAL_GPIO_Init+0x2d0>)
 800238e:	68da      	ldr	r2, [r3, #12]
 8002390:	4922      	ldr	r1, [pc, #136]	@ (800241c <HAL_GPIO_Init+0x2d0>)
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	4313      	orrs	r3, r2
 8002396:	60cb      	str	r3, [r1, #12]
 8002398:	e006      	b.n	80023a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800239a:	4b20      	ldr	r3, [pc, #128]	@ (800241c <HAL_GPIO_Init+0x2d0>)
 800239c:	68da      	ldr	r2, [r3, #12]
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	43db      	mvns	r3, r3
 80023a2:	491e      	ldr	r1, [pc, #120]	@ (800241c <HAL_GPIO_Init+0x2d0>)
 80023a4:	4013      	ands	r3, r2
 80023a6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d006      	beq.n	80023c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023b4:	4b19      	ldr	r3, [pc, #100]	@ (800241c <HAL_GPIO_Init+0x2d0>)
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	4918      	ldr	r1, [pc, #96]	@ (800241c <HAL_GPIO_Init+0x2d0>)
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	4313      	orrs	r3, r2
 80023be:	604b      	str	r3, [r1, #4]
 80023c0:	e006      	b.n	80023d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023c2:	4b16      	ldr	r3, [pc, #88]	@ (800241c <HAL_GPIO_Init+0x2d0>)
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	43db      	mvns	r3, r3
 80023ca:	4914      	ldr	r1, [pc, #80]	@ (800241c <HAL_GPIO_Init+0x2d0>)
 80023cc:	4013      	ands	r3, r2
 80023ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d021      	beq.n	8002420 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80023dc:	4b0f      	ldr	r3, [pc, #60]	@ (800241c <HAL_GPIO_Init+0x2d0>)
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	490e      	ldr	r1, [pc, #56]	@ (800241c <HAL_GPIO_Init+0x2d0>)
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	600b      	str	r3, [r1, #0]
 80023e8:	e021      	b.n	800242e <HAL_GPIO_Init+0x2e2>
 80023ea:	bf00      	nop
 80023ec:	10320000 	.word	0x10320000
 80023f0:	10310000 	.word	0x10310000
 80023f4:	10220000 	.word	0x10220000
 80023f8:	10210000 	.word	0x10210000
 80023fc:	10120000 	.word	0x10120000
 8002400:	10110000 	.word	0x10110000
 8002404:	40021000 	.word	0x40021000
 8002408:	40010000 	.word	0x40010000
 800240c:	40010800 	.word	0x40010800
 8002410:	40010c00 	.word	0x40010c00
 8002414:	40011000 	.word	0x40011000
 8002418:	40011400 	.word	0x40011400
 800241c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002420:	4b0b      	ldr	r3, [pc, #44]	@ (8002450 <HAL_GPIO_Init+0x304>)
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	43db      	mvns	r3, r3
 8002428:	4909      	ldr	r1, [pc, #36]	@ (8002450 <HAL_GPIO_Init+0x304>)
 800242a:	4013      	ands	r3, r2
 800242c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800242e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002430:	3301      	adds	r3, #1
 8002432:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243a:	fa22 f303 	lsr.w	r3, r2, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	f47f ae8e 	bne.w	8002160 <HAL_GPIO_Init+0x14>
  }
}
 8002444:	bf00      	nop
 8002446:	bf00      	nop
 8002448:	372c      	adds	r7, #44	@ 0x2c
 800244a:	46bd      	mov	sp, r7
 800244c:	bc80      	pop	{r7}
 800244e:	4770      	bx	lr
 8002450:	40010400 	.word	0x40010400

08002454 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	460b      	mov	r3, r1
 800245e:	807b      	strh	r3, [r7, #2]
 8002460:	4613      	mov	r3, r2
 8002462:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002464:	787b      	ldrb	r3, [r7, #1]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800246a:	887a      	ldrh	r2, [r7, #2]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002470:	e003      	b.n	800247a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002472:	887b      	ldrh	r3, [r7, #2]
 8002474:	041a      	lsls	r2, r3, #16
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	611a      	str	r2, [r3, #16]
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	bc80      	pop	{r7}
 8002482:	4770      	bx	lr

08002484 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e12b      	b.n	80026ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d106      	bne.n	80024b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7fd fff8 	bl	80004a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2224      	movs	r2, #36	@ 0x24
 80024b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 0201 	bic.w	r2, r2, #1
 80024c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80024d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80024e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024e8:	f000 fcda 	bl	8002ea0 <HAL_RCC_GetPCLK1Freq>
 80024ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	4a81      	ldr	r2, [pc, #516]	@ (80026f8 <HAL_I2C_Init+0x274>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d807      	bhi.n	8002508 <HAL_I2C_Init+0x84>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4a80      	ldr	r2, [pc, #512]	@ (80026fc <HAL_I2C_Init+0x278>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	bf94      	ite	ls
 8002500:	2301      	movls	r3, #1
 8002502:	2300      	movhi	r3, #0
 8002504:	b2db      	uxtb	r3, r3
 8002506:	e006      	b.n	8002516 <HAL_I2C_Init+0x92>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	4a7d      	ldr	r2, [pc, #500]	@ (8002700 <HAL_I2C_Init+0x27c>)
 800250c:	4293      	cmp	r3, r2
 800250e:	bf94      	ite	ls
 8002510:	2301      	movls	r3, #1
 8002512:	2300      	movhi	r3, #0
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e0e7      	b.n	80026ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	4a78      	ldr	r2, [pc, #480]	@ (8002704 <HAL_I2C_Init+0x280>)
 8002522:	fba2 2303 	umull	r2, r3, r2, r3
 8002526:	0c9b      	lsrs	r3, r3, #18
 8002528:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68ba      	ldr	r2, [r7, #8]
 800253a:	430a      	orrs	r2, r1
 800253c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	4a6a      	ldr	r2, [pc, #424]	@ (80026f8 <HAL_I2C_Init+0x274>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d802      	bhi.n	8002558 <HAL_I2C_Init+0xd4>
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	3301      	adds	r3, #1
 8002556:	e009      	b.n	800256c <HAL_I2C_Init+0xe8>
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800255e:	fb02 f303 	mul.w	r3, r2, r3
 8002562:	4a69      	ldr	r2, [pc, #420]	@ (8002708 <HAL_I2C_Init+0x284>)
 8002564:	fba2 2303 	umull	r2, r3, r2, r3
 8002568:	099b      	lsrs	r3, r3, #6
 800256a:	3301      	adds	r3, #1
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6812      	ldr	r2, [r2, #0]
 8002570:	430b      	orrs	r3, r1
 8002572:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800257e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	495c      	ldr	r1, [pc, #368]	@ (80026f8 <HAL_I2C_Init+0x274>)
 8002588:	428b      	cmp	r3, r1
 800258a:	d819      	bhi.n	80025c0 <HAL_I2C_Init+0x13c>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	1e59      	subs	r1, r3, #1
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	fbb1 f3f3 	udiv	r3, r1, r3
 800259a:	1c59      	adds	r1, r3, #1
 800259c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80025a0:	400b      	ands	r3, r1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00a      	beq.n	80025bc <HAL_I2C_Init+0x138>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	1e59      	subs	r1, r3, #1
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80025b4:	3301      	adds	r3, #1
 80025b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025ba:	e051      	b.n	8002660 <HAL_I2C_Init+0x1dc>
 80025bc:	2304      	movs	r3, #4
 80025be:	e04f      	b.n	8002660 <HAL_I2C_Init+0x1dc>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d111      	bne.n	80025ec <HAL_I2C_Init+0x168>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	1e58      	subs	r0, r3, #1
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6859      	ldr	r1, [r3, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	440b      	add	r3, r1
 80025d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80025da:	3301      	adds	r3, #1
 80025dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	bf0c      	ite	eq
 80025e4:	2301      	moveq	r3, #1
 80025e6:	2300      	movne	r3, #0
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	e012      	b.n	8002612 <HAL_I2C_Init+0x18e>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	1e58      	subs	r0, r3, #1
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6859      	ldr	r1, [r3, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	440b      	add	r3, r1
 80025fa:	0099      	lsls	r1, r3, #2
 80025fc:	440b      	add	r3, r1
 80025fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002602:	3301      	adds	r3, #1
 8002604:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002608:	2b00      	cmp	r3, #0
 800260a:	bf0c      	ite	eq
 800260c:	2301      	moveq	r3, #1
 800260e:	2300      	movne	r3, #0
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <HAL_I2C_Init+0x196>
 8002616:	2301      	movs	r3, #1
 8002618:	e022      	b.n	8002660 <HAL_I2C_Init+0x1dc>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10e      	bne.n	8002640 <HAL_I2C_Init+0x1bc>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	1e58      	subs	r0, r3, #1
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6859      	ldr	r1, [r3, #4]
 800262a:	460b      	mov	r3, r1
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	440b      	add	r3, r1
 8002630:	fbb0 f3f3 	udiv	r3, r0, r3
 8002634:	3301      	adds	r3, #1
 8002636:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800263a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800263e:	e00f      	b.n	8002660 <HAL_I2C_Init+0x1dc>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	1e58      	subs	r0, r3, #1
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6859      	ldr	r1, [r3, #4]
 8002648:	460b      	mov	r3, r1
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	0099      	lsls	r1, r3, #2
 8002650:	440b      	add	r3, r1
 8002652:	fbb0 f3f3 	udiv	r3, r0, r3
 8002656:	3301      	adds	r3, #1
 8002658:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800265c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002660:	6879      	ldr	r1, [r7, #4]
 8002662:	6809      	ldr	r1, [r1, #0]
 8002664:	4313      	orrs	r3, r2
 8002666:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	69da      	ldr	r2, [r3, #28]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	431a      	orrs	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	430a      	orrs	r2, r1
 8002682:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800268e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	6911      	ldr	r1, [r2, #16]
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	68d2      	ldr	r2, [r2, #12]
 800269a:	4311      	orrs	r1, r2
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	6812      	ldr	r2, [r2, #0]
 80026a0:	430b      	orrs	r3, r1
 80026a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	695a      	ldr	r2, [r3, #20]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	431a      	orrs	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	430a      	orrs	r2, r1
 80026be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f042 0201 	orr.w	r2, r2, #1
 80026ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2220      	movs	r2, #32
 80026da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	000186a0 	.word	0x000186a0
 80026fc:	001e847f 	.word	0x001e847f
 8002700:	003d08ff 	.word	0x003d08ff
 8002704:	431bde83 	.word	0x431bde83
 8002708:	10624dd3 	.word	0x10624dd3

0800270c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e272      	b.n	8002c04 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b00      	cmp	r3, #0
 8002728:	f000 8087 	beq.w	800283a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800272c:	4b92      	ldr	r3, [pc, #584]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f003 030c 	and.w	r3, r3, #12
 8002734:	2b04      	cmp	r3, #4
 8002736:	d00c      	beq.n	8002752 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002738:	4b8f      	ldr	r3, [pc, #572]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f003 030c 	and.w	r3, r3, #12
 8002740:	2b08      	cmp	r3, #8
 8002742:	d112      	bne.n	800276a <HAL_RCC_OscConfig+0x5e>
 8002744:	4b8c      	ldr	r3, [pc, #560]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800274c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002750:	d10b      	bne.n	800276a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002752:	4b89      	ldr	r3, [pc, #548]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d06c      	beq.n	8002838 <HAL_RCC_OscConfig+0x12c>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d168      	bne.n	8002838 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e24c      	b.n	8002c04 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002772:	d106      	bne.n	8002782 <HAL_RCC_OscConfig+0x76>
 8002774:	4b80      	ldr	r3, [pc, #512]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a7f      	ldr	r2, [pc, #508]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 800277a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800277e:	6013      	str	r3, [r2, #0]
 8002780:	e02e      	b.n	80027e0 <HAL_RCC_OscConfig+0xd4>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10c      	bne.n	80027a4 <HAL_RCC_OscConfig+0x98>
 800278a:	4b7b      	ldr	r3, [pc, #492]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a7a      	ldr	r2, [pc, #488]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 8002790:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002794:	6013      	str	r3, [r2, #0]
 8002796:	4b78      	ldr	r3, [pc, #480]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a77      	ldr	r2, [pc, #476]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 800279c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027a0:	6013      	str	r3, [r2, #0]
 80027a2:	e01d      	b.n	80027e0 <HAL_RCC_OscConfig+0xd4>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027ac:	d10c      	bne.n	80027c8 <HAL_RCC_OscConfig+0xbc>
 80027ae:	4b72      	ldr	r3, [pc, #456]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a71      	ldr	r2, [pc, #452]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 80027b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027b8:	6013      	str	r3, [r2, #0]
 80027ba:	4b6f      	ldr	r3, [pc, #444]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a6e      	ldr	r2, [pc, #440]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 80027c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027c4:	6013      	str	r3, [r2, #0]
 80027c6:	e00b      	b.n	80027e0 <HAL_RCC_OscConfig+0xd4>
 80027c8:	4b6b      	ldr	r3, [pc, #428]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a6a      	ldr	r2, [pc, #424]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 80027ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027d2:	6013      	str	r3, [r2, #0]
 80027d4:	4b68      	ldr	r3, [pc, #416]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a67      	ldr	r2, [pc, #412]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 80027da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d013      	beq.n	8002810 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e8:	f7ff f8b0 	bl	800194c <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027f0:	f7ff f8ac 	bl	800194c <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b64      	cmp	r3, #100	@ 0x64
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e200      	b.n	8002c04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002802:	4b5d      	ldr	r3, [pc, #372]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0f0      	beq.n	80027f0 <HAL_RCC_OscConfig+0xe4>
 800280e:	e014      	b.n	800283a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002810:	f7ff f89c 	bl	800194c <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002818:	f7ff f898 	bl	800194c <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b64      	cmp	r3, #100	@ 0x64
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e1ec      	b.n	8002c04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800282a:	4b53      	ldr	r3, [pc, #332]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1f0      	bne.n	8002818 <HAL_RCC_OscConfig+0x10c>
 8002836:	e000      	b.n	800283a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002838:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d063      	beq.n	800290e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002846:	4b4c      	ldr	r3, [pc, #304]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f003 030c 	and.w	r3, r3, #12
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00b      	beq.n	800286a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002852:	4b49      	ldr	r3, [pc, #292]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f003 030c 	and.w	r3, r3, #12
 800285a:	2b08      	cmp	r3, #8
 800285c:	d11c      	bne.n	8002898 <HAL_RCC_OscConfig+0x18c>
 800285e:	4b46      	ldr	r3, [pc, #280]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d116      	bne.n	8002898 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800286a:	4b43      	ldr	r3, [pc, #268]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d005      	beq.n	8002882 <HAL_RCC_OscConfig+0x176>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d001      	beq.n	8002882 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e1c0      	b.n	8002c04 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002882:	4b3d      	ldr	r3, [pc, #244]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	4939      	ldr	r1, [pc, #228]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 8002892:	4313      	orrs	r3, r2
 8002894:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002896:	e03a      	b.n	800290e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d020      	beq.n	80028e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028a0:	4b36      	ldr	r3, [pc, #216]	@ (800297c <HAL_RCC_OscConfig+0x270>)
 80028a2:	2201      	movs	r2, #1
 80028a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a6:	f7ff f851 	bl	800194c <HAL_GetTick>
 80028aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ae:	f7ff f84d 	bl	800194c <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e1a1      	b.n	8002c04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c0:	4b2d      	ldr	r3, [pc, #180]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0f0      	beq.n	80028ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028cc:	4b2a      	ldr	r3, [pc, #168]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	4927      	ldr	r1, [pc, #156]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	600b      	str	r3, [r1, #0]
 80028e0:	e015      	b.n	800290e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028e2:	4b26      	ldr	r3, [pc, #152]	@ (800297c <HAL_RCC_OscConfig+0x270>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e8:	f7ff f830 	bl	800194c <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028f0:	f7ff f82c 	bl	800194c <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e180      	b.n	8002c04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002902:	4b1d      	ldr	r3, [pc, #116]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1f0      	bne.n	80028f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0308 	and.w	r3, r3, #8
 8002916:	2b00      	cmp	r3, #0
 8002918:	d03a      	beq.n	8002990 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d019      	beq.n	8002956 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002922:	4b17      	ldr	r3, [pc, #92]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 8002924:	2201      	movs	r2, #1
 8002926:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002928:	f7ff f810 	bl	800194c <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002930:	f7ff f80c 	bl	800194c <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e160      	b.n	8002c04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002942:	4b0d      	ldr	r3, [pc, #52]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 8002944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d0f0      	beq.n	8002930 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800294e:	2001      	movs	r0, #1
 8002950:	f000 face 	bl	8002ef0 <RCC_Delay>
 8002954:	e01c      	b.n	8002990 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002956:	4b0a      	ldr	r3, [pc, #40]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800295c:	f7fe fff6 	bl	800194c <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002962:	e00f      	b.n	8002984 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002964:	f7fe fff2 	bl	800194c <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d908      	bls.n	8002984 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e146      	b.n	8002c04 <HAL_RCC_OscConfig+0x4f8>
 8002976:	bf00      	nop
 8002978:	40021000 	.word	0x40021000
 800297c:	42420000 	.word	0x42420000
 8002980:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002984:	4b92      	ldr	r3, [pc, #584]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d1e9      	bne.n	8002964 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0304 	and.w	r3, r3, #4
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 80a6 	beq.w	8002aea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800299e:	2300      	movs	r3, #0
 80029a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029a2:	4b8b      	ldr	r3, [pc, #556]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 80029a4:	69db      	ldr	r3, [r3, #28]
 80029a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10d      	bne.n	80029ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ae:	4b88      	ldr	r3, [pc, #544]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 80029b0:	69db      	ldr	r3, [r3, #28]
 80029b2:	4a87      	ldr	r2, [pc, #540]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 80029b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029b8:	61d3      	str	r3, [r2, #28]
 80029ba:	4b85      	ldr	r3, [pc, #532]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029c2:	60bb      	str	r3, [r7, #8]
 80029c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029c6:	2301      	movs	r3, #1
 80029c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ca:	4b82      	ldr	r3, [pc, #520]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c8>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d118      	bne.n	8002a08 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029d6:	4b7f      	ldr	r3, [pc, #508]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c8>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a7e      	ldr	r2, [pc, #504]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c8>)
 80029dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029e2:	f7fe ffb3 	bl	800194c <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e8:	e008      	b.n	80029fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ea:	f7fe ffaf 	bl	800194c <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b64      	cmp	r3, #100	@ 0x64
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e103      	b.n	8002c04 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029fc:	4b75      	ldr	r3, [pc, #468]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c8>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d0f0      	beq.n	80029ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d106      	bne.n	8002a1e <HAL_RCC_OscConfig+0x312>
 8002a10:	4b6f      	ldr	r3, [pc, #444]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	4a6e      	ldr	r2, [pc, #440]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002a16:	f043 0301 	orr.w	r3, r3, #1
 8002a1a:	6213      	str	r3, [r2, #32]
 8002a1c:	e02d      	b.n	8002a7a <HAL_RCC_OscConfig+0x36e>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10c      	bne.n	8002a40 <HAL_RCC_OscConfig+0x334>
 8002a26:	4b6a      	ldr	r3, [pc, #424]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002a28:	6a1b      	ldr	r3, [r3, #32]
 8002a2a:	4a69      	ldr	r2, [pc, #420]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002a2c:	f023 0301 	bic.w	r3, r3, #1
 8002a30:	6213      	str	r3, [r2, #32]
 8002a32:	4b67      	ldr	r3, [pc, #412]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	4a66      	ldr	r2, [pc, #408]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002a38:	f023 0304 	bic.w	r3, r3, #4
 8002a3c:	6213      	str	r3, [r2, #32]
 8002a3e:	e01c      	b.n	8002a7a <HAL_RCC_OscConfig+0x36e>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	2b05      	cmp	r3, #5
 8002a46:	d10c      	bne.n	8002a62 <HAL_RCC_OscConfig+0x356>
 8002a48:	4b61      	ldr	r3, [pc, #388]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	4a60      	ldr	r2, [pc, #384]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002a4e:	f043 0304 	orr.w	r3, r3, #4
 8002a52:	6213      	str	r3, [r2, #32]
 8002a54:	4b5e      	ldr	r3, [pc, #376]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002a56:	6a1b      	ldr	r3, [r3, #32]
 8002a58:	4a5d      	ldr	r2, [pc, #372]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002a5a:	f043 0301 	orr.w	r3, r3, #1
 8002a5e:	6213      	str	r3, [r2, #32]
 8002a60:	e00b      	b.n	8002a7a <HAL_RCC_OscConfig+0x36e>
 8002a62:	4b5b      	ldr	r3, [pc, #364]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	4a5a      	ldr	r2, [pc, #360]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002a68:	f023 0301 	bic.w	r3, r3, #1
 8002a6c:	6213      	str	r3, [r2, #32]
 8002a6e:	4b58      	ldr	r3, [pc, #352]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	4a57      	ldr	r2, [pc, #348]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002a74:	f023 0304 	bic.w	r3, r3, #4
 8002a78:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d015      	beq.n	8002aae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a82:	f7fe ff63 	bl	800194c <HAL_GetTick>
 8002a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a88:	e00a      	b.n	8002aa0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a8a:	f7fe ff5f 	bl	800194c <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e0b1      	b.n	8002c04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa0:	4b4b      	ldr	r3, [pc, #300]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d0ee      	beq.n	8002a8a <HAL_RCC_OscConfig+0x37e>
 8002aac:	e014      	b.n	8002ad8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aae:	f7fe ff4d 	bl	800194c <HAL_GetTick>
 8002ab2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ab4:	e00a      	b.n	8002acc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ab6:	f7fe ff49 	bl	800194c <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d901      	bls.n	8002acc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e09b      	b.n	8002c04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002acc:	4b40      	ldr	r3, [pc, #256]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1ee      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ad8:	7dfb      	ldrb	r3, [r7, #23]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d105      	bne.n	8002aea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ade:	4b3c      	ldr	r3, [pc, #240]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	4a3b      	ldr	r2, [pc, #236]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002ae4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ae8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	69db      	ldr	r3, [r3, #28]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f000 8087 	beq.w	8002c02 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002af4:	4b36      	ldr	r3, [pc, #216]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f003 030c 	and.w	r3, r3, #12
 8002afc:	2b08      	cmp	r3, #8
 8002afe:	d061      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	69db      	ldr	r3, [r3, #28]
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d146      	bne.n	8002b96 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b08:	4b33      	ldr	r3, [pc, #204]	@ (8002bd8 <HAL_RCC_OscConfig+0x4cc>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0e:	f7fe ff1d 	bl	800194c <HAL_GetTick>
 8002b12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b14:	e008      	b.n	8002b28 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b16:	f7fe ff19 	bl	800194c <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e06d      	b.n	8002c04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b28:	4b29      	ldr	r3, [pc, #164]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1f0      	bne.n	8002b16 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b3c:	d108      	bne.n	8002b50 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b3e:	4b24      	ldr	r3, [pc, #144]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	4921      	ldr	r1, [pc, #132]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b50:	4b1f      	ldr	r3, [pc, #124]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a19      	ldr	r1, [r3, #32]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b60:	430b      	orrs	r3, r1
 8002b62:	491b      	ldr	r1, [pc, #108]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b68:	4b1b      	ldr	r3, [pc, #108]	@ (8002bd8 <HAL_RCC_OscConfig+0x4cc>)
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6e:	f7fe feed 	bl	800194c <HAL_GetTick>
 8002b72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b74:	e008      	b.n	8002b88 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b76:	f7fe fee9 	bl	800194c <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e03d      	b.n	8002c04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b88:	4b11      	ldr	r3, [pc, #68]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0f0      	beq.n	8002b76 <HAL_RCC_OscConfig+0x46a>
 8002b94:	e035      	b.n	8002c02 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b96:	4b10      	ldr	r3, [pc, #64]	@ (8002bd8 <HAL_RCC_OscConfig+0x4cc>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9c:	f7fe fed6 	bl	800194c <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba4:	f7fe fed2 	bl	800194c <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e026      	b.n	8002c04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bb6:	4b06      	ldr	r3, [pc, #24]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1f0      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x498>
 8002bc2:	e01e      	b.n	8002c02 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	69db      	ldr	r3, [r3, #28]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d107      	bne.n	8002bdc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e019      	b.n	8002c04 <HAL_RCC_OscConfig+0x4f8>
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	40007000 	.word	0x40007000
 8002bd8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8002c0c <HAL_RCC_OscConfig+0x500>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d106      	bne.n	8002bfe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d001      	beq.n	8002c02 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e000      	b.n	8002c04 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3718      	adds	r7, #24
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40021000 	.word	0x40021000

08002c10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d101      	bne.n	8002c24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e0d0      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c24:	4b6a      	ldr	r3, [pc, #424]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0307 	and.w	r3, r3, #7
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d910      	bls.n	8002c54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c32:	4b67      	ldr	r3, [pc, #412]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f023 0207 	bic.w	r2, r3, #7
 8002c3a:	4965      	ldr	r1, [pc, #404]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c42:	4b63      	ldr	r3, [pc, #396]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d001      	beq.n	8002c54 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e0b8      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d020      	beq.n	8002ca2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d005      	beq.n	8002c78 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c6c:	4b59      	ldr	r3, [pc, #356]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	4a58      	ldr	r2, [pc, #352]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c72:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002c76:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0308 	and.w	r3, r3, #8
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d005      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c84:	4b53      	ldr	r3, [pc, #332]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	4a52      	ldr	r2, [pc, #328]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002c8e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c90:	4b50      	ldr	r3, [pc, #320]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	494d      	ldr	r1, [pc, #308]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d040      	beq.n	8002d30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d107      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb6:	4b47      	ldr	r3, [pc, #284]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d115      	bne.n	8002cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e07f      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d107      	bne.n	8002cde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cce:	4b41      	ldr	r3, [pc, #260]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d109      	bne.n	8002cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e073      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cde:	4b3d      	ldr	r3, [pc, #244]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e06b      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cee:	4b39      	ldr	r3, [pc, #228]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f023 0203 	bic.w	r2, r3, #3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	4936      	ldr	r1, [pc, #216]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d00:	f7fe fe24 	bl	800194c <HAL_GetTick>
 8002d04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d06:	e00a      	b.n	8002d1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d08:	f7fe fe20 	bl	800194c <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e053      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d1e:	4b2d      	ldr	r3, [pc, #180]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f003 020c 	and.w	r2, r3, #12
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d1eb      	bne.n	8002d08 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d30:	4b27      	ldr	r3, [pc, #156]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0307 	and.w	r3, r3, #7
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d210      	bcs.n	8002d60 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3e:	4b24      	ldr	r3, [pc, #144]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f023 0207 	bic.w	r2, r3, #7
 8002d46:	4922      	ldr	r1, [pc, #136]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d4e:	4b20      	ldr	r3, [pc, #128]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0307 	and.w	r3, r3, #7
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d001      	beq.n	8002d60 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e032      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d008      	beq.n	8002d7e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d6c:	4b19      	ldr	r3, [pc, #100]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	4916      	ldr	r1, [pc, #88]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0308 	and.w	r3, r3, #8
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d009      	beq.n	8002d9e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d8a:	4b12      	ldr	r3, [pc, #72]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	490e      	ldr	r1, [pc, #56]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d9e:	f000 f821 	bl	8002de4 <HAL_RCC_GetSysClockFreq>
 8002da2:	4602      	mov	r2, r0
 8002da4:	4b0b      	ldr	r3, [pc, #44]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	091b      	lsrs	r3, r3, #4
 8002daa:	f003 030f 	and.w	r3, r3, #15
 8002dae:	490a      	ldr	r1, [pc, #40]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002db0:	5ccb      	ldrb	r3, [r1, r3]
 8002db2:	fa22 f303 	lsr.w	r3, r2, r3
 8002db6:	4a09      	ldr	r2, [pc, #36]	@ (8002ddc <HAL_RCC_ClockConfig+0x1cc>)
 8002db8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002dba:	4b09      	ldr	r3, [pc, #36]	@ (8002de0 <HAL_RCC_ClockConfig+0x1d0>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fe fd82 	bl	80018c8 <HAL_InitTick>

  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40022000 	.word	0x40022000
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	0800607c 	.word	0x0800607c
 8002ddc:	20000014 	.word	0x20000014
 8002de0:	20000018 	.word	0x20000018

08002de4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b087      	sub	sp, #28
 8002de8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002dea:	2300      	movs	r3, #0
 8002dec:	60fb      	str	r3, [r7, #12]
 8002dee:	2300      	movs	r3, #0
 8002df0:	60bb      	str	r3, [r7, #8]
 8002df2:	2300      	movs	r3, #0
 8002df4:	617b      	str	r3, [r7, #20]
 8002df6:	2300      	movs	r3, #0
 8002df8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002dfe:	4b1e      	ldr	r3, [pc, #120]	@ (8002e78 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f003 030c 	and.w	r3, r3, #12
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	d002      	beq.n	8002e14 <HAL_RCC_GetSysClockFreq+0x30>
 8002e0e:	2b08      	cmp	r3, #8
 8002e10:	d003      	beq.n	8002e1a <HAL_RCC_GetSysClockFreq+0x36>
 8002e12:	e027      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e14:	4b19      	ldr	r3, [pc, #100]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x98>)
 8002e16:	613b      	str	r3, [r7, #16]
      break;
 8002e18:	e027      	b.n	8002e6a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	0c9b      	lsrs	r3, r3, #18
 8002e1e:	f003 030f 	and.w	r3, r3, #15
 8002e22:	4a17      	ldr	r2, [pc, #92]	@ (8002e80 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e24:	5cd3      	ldrb	r3, [r2, r3]
 8002e26:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d010      	beq.n	8002e54 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e32:	4b11      	ldr	r3, [pc, #68]	@ (8002e78 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	0c5b      	lsrs	r3, r3, #17
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	4a11      	ldr	r2, [pc, #68]	@ (8002e84 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e3e:	5cd3      	ldrb	r3, [r2, r3]
 8002e40:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a0d      	ldr	r2, [pc, #52]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x98>)
 8002e46:	fb03 f202 	mul.w	r2, r3, r2
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e50:	617b      	str	r3, [r7, #20]
 8002e52:	e004      	b.n	8002e5e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a0c      	ldr	r2, [pc, #48]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e58:	fb02 f303 	mul.w	r3, r2, r3
 8002e5c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	613b      	str	r3, [r7, #16]
      break;
 8002e62:	e002      	b.n	8002e6a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e64:	4b05      	ldr	r3, [pc, #20]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x98>)
 8002e66:	613b      	str	r3, [r7, #16]
      break;
 8002e68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e6a:	693b      	ldr	r3, [r7, #16]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	371c      	adds	r7, #28
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bc80      	pop	{r7}
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	007a1200 	.word	0x007a1200
 8002e80:	08006094 	.word	0x08006094
 8002e84:	080060a4 	.word	0x080060a4
 8002e88:	003d0900 	.word	0x003d0900

08002e8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e90:	4b02      	ldr	r3, [pc, #8]	@ (8002e9c <HAL_RCC_GetHCLKFreq+0x10>)
 8002e92:	681b      	ldr	r3, [r3, #0]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bc80      	pop	{r7}
 8002e9a:	4770      	bx	lr
 8002e9c:	20000014 	.word	0x20000014

08002ea0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ea4:	f7ff fff2 	bl	8002e8c <HAL_RCC_GetHCLKFreq>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	4b05      	ldr	r3, [pc, #20]	@ (8002ec0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	0a1b      	lsrs	r3, r3, #8
 8002eb0:	f003 0307 	and.w	r3, r3, #7
 8002eb4:	4903      	ldr	r1, [pc, #12]	@ (8002ec4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eb6:	5ccb      	ldrb	r3, [r1, r3]
 8002eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	0800608c 	.word	0x0800608c

08002ec8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ecc:	f7ff ffde 	bl	8002e8c <HAL_RCC_GetHCLKFreq>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	4b05      	ldr	r3, [pc, #20]	@ (8002ee8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	0adb      	lsrs	r3, r3, #11
 8002ed8:	f003 0307 	and.w	r3, r3, #7
 8002edc:	4903      	ldr	r1, [pc, #12]	@ (8002eec <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ede:	5ccb      	ldrb	r3, [r1, r3]
 8002ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	0800608c 	.word	0x0800608c

08002ef0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8002f24 <RCC_Delay+0x34>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a0a      	ldr	r2, [pc, #40]	@ (8002f28 <RCC_Delay+0x38>)
 8002efe:	fba2 2303 	umull	r2, r3, r2, r3
 8002f02:	0a5b      	lsrs	r3, r3, #9
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	fb02 f303 	mul.w	r3, r2, r3
 8002f0a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f0c:	bf00      	nop
  }
  while (Delay --);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	1e5a      	subs	r2, r3, #1
 8002f12:	60fa      	str	r2, [r7, #12]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1f9      	bne.n	8002f0c <RCC_Delay+0x1c>
}
 8002f18:	bf00      	nop
 8002f1a:	bf00      	nop
 8002f1c:	3714      	adds	r7, #20
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bc80      	pop	{r7}
 8002f22:	4770      	bx	lr
 8002f24:	20000014 	.word	0x20000014
 8002f28:	10624dd3 	.word	0x10624dd3

08002f2c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002f34:	2300      	movs	r3, #0
 8002f36:	613b      	str	r3, [r7, #16]
 8002f38:	2300      	movs	r3, #0
 8002f3a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d07d      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f4c:	4b4f      	ldr	r3, [pc, #316]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f4e:	69db      	ldr	r3, [r3, #28]
 8002f50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d10d      	bne.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f58:	4b4c      	ldr	r3, [pc, #304]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f5a:	69db      	ldr	r3, [r3, #28]
 8002f5c:	4a4b      	ldr	r2, [pc, #300]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f62:	61d3      	str	r3, [r2, #28]
 8002f64:	4b49      	ldr	r3, [pc, #292]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f6c:	60bb      	str	r3, [r7, #8]
 8002f6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f70:	2301      	movs	r3, #1
 8002f72:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f74:	4b46      	ldr	r3, [pc, #280]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d118      	bne.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f80:	4b43      	ldr	r3, [pc, #268]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a42      	ldr	r2, [pc, #264]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f8c:	f7fe fcde 	bl	800194c <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f92:	e008      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f94:	f7fe fcda 	bl	800194c <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b64      	cmp	r3, #100	@ 0x64
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e06d      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa6:	4b3a      	ldr	r3, [pc, #232]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d0f0      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fb2:	4b36      	ldr	r3, [pc, #216]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fba:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d02e      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d027      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fd0:	4b2e      	ldr	r3, [pc, #184]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
 8002fd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fd8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fda:	4b2e      	ldr	r3, [pc, #184]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002fdc:	2201      	movs	r2, #1
 8002fde:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fe0:	4b2c      	ldr	r3, [pc, #176]	@ (8003094 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002fe6:	4a29      	ldr	r2, [pc, #164]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d014      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff6:	f7fe fca9 	bl	800194c <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ffc:	e00a      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ffe:	f7fe fca5 	bl	800194c <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	f241 3288 	movw	r2, #5000	@ 0x1388
 800300c:	4293      	cmp	r3, r2
 800300e:	d901      	bls.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e036      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003014:	4b1d      	ldr	r3, [pc, #116]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d0ee      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003020:	4b1a      	ldr	r3, [pc, #104]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	4917      	ldr	r1, [pc, #92]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800302e:	4313      	orrs	r3, r2
 8003030:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003032:	7dfb      	ldrb	r3, [r7, #23]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d105      	bne.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003038:	4b14      	ldr	r3, [pc, #80]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800303a:	69db      	ldr	r3, [r3, #28]
 800303c:	4a13      	ldr	r2, [pc, #76]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800303e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003042:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d008      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003050:	4b0e      	ldr	r3, [pc, #56]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	490b      	ldr	r1, [pc, #44]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800305e:	4313      	orrs	r3, r2
 8003060:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0310 	and.w	r3, r3, #16
 800306a:	2b00      	cmp	r3, #0
 800306c:	d008      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800306e:	4b07      	ldr	r3, [pc, #28]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	4904      	ldr	r1, [pc, #16]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800307c:	4313      	orrs	r3, r2
 800307e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3718      	adds	r7, #24
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40021000 	.word	0x40021000
 8003090:	40007000 	.word	0x40007000
 8003094:	42420440 	.word	0x42420440

08003098 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e041      	b.n	800312e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d106      	bne.n	80030c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7fe fa92 	bl	80015e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2202      	movs	r2, #2
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3304      	adds	r3, #4
 80030d4:	4619      	mov	r1, r3
 80030d6:	4610      	mov	r0, r2
 80030d8:	f000 f9aa 	bl	8003430 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b082      	sub	sp, #8
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d101      	bne.n	8003148 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e041      	b.n	80031cc <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2b00      	cmp	r3, #0
 8003152:	d106      	bne.n	8003162 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 f839 	bl	80031d4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2202      	movs	r2, #2
 8003166:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	3304      	adds	r3, #4
 8003172:	4619      	mov	r1, r3
 8003174:	4610      	mov	r0, r2
 8003176:	f000 f95b 	bl	8003430 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bc80      	pop	{r7}
 80031e4:	4770      	bx	lr
	...

080031e8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031f4:	2300      	movs	r3, #0
 80031f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d101      	bne.n	8003206 <HAL_TIM_OC_ConfigChannel+0x1e>
 8003202:	2302      	movs	r3, #2
 8003204:	e048      	b.n	8003298 <HAL_TIM_OC_ConfigChannel+0xb0>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2b0c      	cmp	r3, #12
 8003212:	d839      	bhi.n	8003288 <HAL_TIM_OC_ConfigChannel+0xa0>
 8003214:	a201      	add	r2, pc, #4	@ (adr r2, 800321c <HAL_TIM_OC_ConfigChannel+0x34>)
 8003216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800321a:	bf00      	nop
 800321c:	08003251 	.word	0x08003251
 8003220:	08003289 	.word	0x08003289
 8003224:	08003289 	.word	0x08003289
 8003228:	08003289 	.word	0x08003289
 800322c:	0800325f 	.word	0x0800325f
 8003230:	08003289 	.word	0x08003289
 8003234:	08003289 	.word	0x08003289
 8003238:	08003289 	.word	0x08003289
 800323c:	0800326d 	.word	0x0800326d
 8003240:	08003289 	.word	0x08003289
 8003244:	08003289 	.word	0x08003289
 8003248:	08003289 	.word	0x08003289
 800324c:	0800327b 	.word	0x0800327b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68b9      	ldr	r1, [r7, #8]
 8003256:	4618      	mov	r0, r3
 8003258:	f000 f958 	bl	800350c <TIM_OC1_SetConfig>
      break;
 800325c:	e017      	b.n	800328e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68b9      	ldr	r1, [r7, #8]
 8003264:	4618      	mov	r0, r3
 8003266:	f000 f9b7 	bl	80035d8 <TIM_OC2_SetConfig>
      break;
 800326a:	e010      	b.n	800328e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68b9      	ldr	r1, [r7, #8]
 8003272:	4618      	mov	r0, r3
 8003274:	f000 fa1a 	bl	80036ac <TIM_OC3_SetConfig>
      break;
 8003278:	e009      	b.n	800328e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68b9      	ldr	r1, [r7, #8]
 8003280:	4618      	mov	r0, r3
 8003282:	f000 fa7d 	bl	8003780 <TIM_OC4_SetConfig>
      break;
 8003286:	e002      	b.n	800328e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	75fb      	strb	r3, [r7, #23]
      break;
 800328c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003296:	7dfb      	ldrb	r3, [r7, #23]
}
 8003298:	4618      	mov	r0, r3
 800329a:	3718      	adds	r7, #24
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032aa:	2300      	movs	r3, #0
 80032ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d101      	bne.n	80032bc <HAL_TIM_ConfigClockSource+0x1c>
 80032b8:	2302      	movs	r3, #2
 80032ba:	e0b4      	b.n	8003426 <HAL_TIM_ConfigClockSource+0x186>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2202      	movs	r2, #2
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80032da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80032e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68ba      	ldr	r2, [r7, #8]
 80032ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032f4:	d03e      	beq.n	8003374 <HAL_TIM_ConfigClockSource+0xd4>
 80032f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032fa:	f200 8087 	bhi.w	800340c <HAL_TIM_ConfigClockSource+0x16c>
 80032fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003302:	f000 8086 	beq.w	8003412 <HAL_TIM_ConfigClockSource+0x172>
 8003306:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800330a:	d87f      	bhi.n	800340c <HAL_TIM_ConfigClockSource+0x16c>
 800330c:	2b70      	cmp	r3, #112	@ 0x70
 800330e:	d01a      	beq.n	8003346 <HAL_TIM_ConfigClockSource+0xa6>
 8003310:	2b70      	cmp	r3, #112	@ 0x70
 8003312:	d87b      	bhi.n	800340c <HAL_TIM_ConfigClockSource+0x16c>
 8003314:	2b60      	cmp	r3, #96	@ 0x60
 8003316:	d050      	beq.n	80033ba <HAL_TIM_ConfigClockSource+0x11a>
 8003318:	2b60      	cmp	r3, #96	@ 0x60
 800331a:	d877      	bhi.n	800340c <HAL_TIM_ConfigClockSource+0x16c>
 800331c:	2b50      	cmp	r3, #80	@ 0x50
 800331e:	d03c      	beq.n	800339a <HAL_TIM_ConfigClockSource+0xfa>
 8003320:	2b50      	cmp	r3, #80	@ 0x50
 8003322:	d873      	bhi.n	800340c <HAL_TIM_ConfigClockSource+0x16c>
 8003324:	2b40      	cmp	r3, #64	@ 0x40
 8003326:	d058      	beq.n	80033da <HAL_TIM_ConfigClockSource+0x13a>
 8003328:	2b40      	cmp	r3, #64	@ 0x40
 800332a:	d86f      	bhi.n	800340c <HAL_TIM_ConfigClockSource+0x16c>
 800332c:	2b30      	cmp	r3, #48	@ 0x30
 800332e:	d064      	beq.n	80033fa <HAL_TIM_ConfigClockSource+0x15a>
 8003330:	2b30      	cmp	r3, #48	@ 0x30
 8003332:	d86b      	bhi.n	800340c <HAL_TIM_ConfigClockSource+0x16c>
 8003334:	2b20      	cmp	r3, #32
 8003336:	d060      	beq.n	80033fa <HAL_TIM_ConfigClockSource+0x15a>
 8003338:	2b20      	cmp	r3, #32
 800333a:	d867      	bhi.n	800340c <HAL_TIM_ConfigClockSource+0x16c>
 800333c:	2b00      	cmp	r3, #0
 800333e:	d05c      	beq.n	80033fa <HAL_TIM_ConfigClockSource+0x15a>
 8003340:	2b10      	cmp	r3, #16
 8003342:	d05a      	beq.n	80033fa <HAL_TIM_ConfigClockSource+0x15a>
 8003344:	e062      	b.n	800340c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003356:	f000 fad8 	bl	800390a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003368:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	609a      	str	r2, [r3, #8]
      break;
 8003372:	e04f      	b.n	8003414 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003384:	f000 fac1 	bl	800390a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	689a      	ldr	r2, [r3, #8]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003396:	609a      	str	r2, [r3, #8]
      break;
 8003398:	e03c      	b.n	8003414 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033a6:	461a      	mov	r2, r3
 80033a8:	f000 fa38 	bl	800381c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2150      	movs	r1, #80	@ 0x50
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 fa8f 	bl	80038d6 <TIM_ITRx_SetConfig>
      break;
 80033b8:	e02c      	b.n	8003414 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033c6:	461a      	mov	r2, r3
 80033c8:	f000 fa56 	bl	8003878 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2160      	movs	r1, #96	@ 0x60
 80033d2:	4618      	mov	r0, r3
 80033d4:	f000 fa7f 	bl	80038d6 <TIM_ITRx_SetConfig>
      break;
 80033d8:	e01c      	b.n	8003414 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033e6:	461a      	mov	r2, r3
 80033e8:	f000 fa18 	bl	800381c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2140      	movs	r1, #64	@ 0x40
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 fa6f 	bl	80038d6 <TIM_ITRx_SetConfig>
      break;
 80033f8:	e00c      	b.n	8003414 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4619      	mov	r1, r3
 8003404:	4610      	mov	r0, r2
 8003406:	f000 fa66 	bl	80038d6 <TIM_ITRx_SetConfig>
      break;
 800340a:	e003      	b.n	8003414 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	73fb      	strb	r3, [r7, #15]
      break;
 8003410:	e000      	b.n	8003414 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003412:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003424:	7bfb      	ldrb	r3, [r7, #15]
}
 8003426:	4618      	mov	r0, r3
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
	...

08003430 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a2f      	ldr	r2, [pc, #188]	@ (8003500 <TIM_Base_SetConfig+0xd0>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d00b      	beq.n	8003460 <TIM_Base_SetConfig+0x30>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800344e:	d007      	beq.n	8003460 <TIM_Base_SetConfig+0x30>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a2c      	ldr	r2, [pc, #176]	@ (8003504 <TIM_Base_SetConfig+0xd4>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d003      	beq.n	8003460 <TIM_Base_SetConfig+0x30>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a2b      	ldr	r2, [pc, #172]	@ (8003508 <TIM_Base_SetConfig+0xd8>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d108      	bne.n	8003472 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003466:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	4313      	orrs	r3, r2
 8003470:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a22      	ldr	r2, [pc, #136]	@ (8003500 <TIM_Base_SetConfig+0xd0>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d00b      	beq.n	8003492 <TIM_Base_SetConfig+0x62>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003480:	d007      	beq.n	8003492 <TIM_Base_SetConfig+0x62>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a1f      	ldr	r2, [pc, #124]	@ (8003504 <TIM_Base_SetConfig+0xd4>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d003      	beq.n	8003492 <TIM_Base_SetConfig+0x62>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a1e      	ldr	r2, [pc, #120]	@ (8003508 <TIM_Base_SetConfig+0xd8>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d108      	bne.n	80034a4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003498:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	689a      	ldr	r2, [r3, #8]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a0d      	ldr	r2, [pc, #52]	@ (8003500 <TIM_Base_SetConfig+0xd0>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d103      	bne.n	80034d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	691a      	ldr	r2, [r3, #16]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d005      	beq.n	80034f6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	f023 0201 	bic.w	r2, r3, #1
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	611a      	str	r2, [r3, #16]
  }
}
 80034f6:	bf00      	nop
 80034f8:	3714      	adds	r7, #20
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bc80      	pop	{r7}
 80034fe:	4770      	bx	lr
 8003500:	40012c00 	.word	0x40012c00
 8003504:	40000400 	.word	0x40000400
 8003508:	40000800 	.word	0x40000800

0800350c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800350c:	b480      	push	{r7}
 800350e:	b087      	sub	sp, #28
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	f023 0201 	bic.w	r2, r3, #1
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800353a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f023 0303 	bic.w	r3, r3, #3
 8003542:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	4313      	orrs	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	f023 0302 	bic.w	r3, r3, #2
 8003554:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	4313      	orrs	r3, r2
 800355e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a1c      	ldr	r2, [pc, #112]	@ (80035d4 <TIM_OC1_SetConfig+0xc8>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d10c      	bne.n	8003582 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	f023 0308 	bic.w	r3, r3, #8
 800356e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	4313      	orrs	r3, r2
 8003578:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	f023 0304 	bic.w	r3, r3, #4
 8003580:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a13      	ldr	r2, [pc, #76]	@ (80035d4 <TIM_OC1_SetConfig+0xc8>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d111      	bne.n	80035ae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003590:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003598:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	621a      	str	r2, [r3, #32]
}
 80035c8:	bf00      	nop
 80035ca:	371c      	adds	r7, #28
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bc80      	pop	{r7}
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	40012c00 	.word	0x40012c00

080035d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035d8:	b480      	push	{r7}
 80035da:	b087      	sub	sp, #28
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a1b      	ldr	r3, [r3, #32]
 80035ec:	f023 0210 	bic.w	r2, r3, #16
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003606:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800360e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	021b      	lsls	r3, r3, #8
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	4313      	orrs	r3, r2
 800361a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	f023 0320 	bic.w	r3, r3, #32
 8003622:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	011b      	lsls	r3, r3, #4
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	4313      	orrs	r3, r2
 800362e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4a1d      	ldr	r2, [pc, #116]	@ (80036a8 <TIM_OC2_SetConfig+0xd0>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d10d      	bne.n	8003654 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800363e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	011b      	lsls	r3, r3, #4
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	4313      	orrs	r3, r2
 800364a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003652:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a14      	ldr	r2, [pc, #80]	@ (80036a8 <TIM_OC2_SetConfig+0xd0>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d113      	bne.n	8003684 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003662:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800366a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	695b      	ldr	r3, [r3, #20]
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	4313      	orrs	r3, r2
 8003676:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	4313      	orrs	r3, r2
 8003682:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	621a      	str	r2, [r3, #32]
}
 800369e:	bf00      	nop
 80036a0:	371c      	adds	r7, #28
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bc80      	pop	{r7}
 80036a6:	4770      	bx	lr
 80036a8:	40012c00 	.word	0x40012c00

080036ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b087      	sub	sp, #28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	69db      	ldr	r3, [r3, #28]
 80036d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f023 0303 	bic.w	r3, r3, #3
 80036e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80036f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	021b      	lsls	r3, r3, #8
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	4313      	orrs	r3, r2
 8003700:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a1d      	ldr	r2, [pc, #116]	@ (800377c <TIM_OC3_SetConfig+0xd0>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d10d      	bne.n	8003726 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003710:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	021b      	lsls	r3, r3, #8
 8003718:	697a      	ldr	r2, [r7, #20]
 800371a:	4313      	orrs	r3, r2
 800371c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003724:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a14      	ldr	r2, [pc, #80]	@ (800377c <TIM_OC3_SetConfig+0xd0>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d113      	bne.n	8003756 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003734:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800373c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	011b      	lsls	r3, r3, #4
 8003744:	693a      	ldr	r2, [r7, #16]
 8003746:	4313      	orrs	r3, r2
 8003748:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	011b      	lsls	r3, r3, #4
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	4313      	orrs	r3, r2
 8003754:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	685a      	ldr	r2, [r3, #4]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	621a      	str	r2, [r3, #32]
}
 8003770:	bf00      	nop
 8003772:	371c      	adds	r7, #28
 8003774:	46bd      	mov	sp, r7
 8003776:	bc80      	pop	{r7}
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	40012c00 	.word	0x40012c00

08003780 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003780:	b480      	push	{r7}
 8003782:	b087      	sub	sp, #28
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a1b      	ldr	r3, [r3, #32]
 8003794:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	69db      	ldr	r3, [r3, #28]
 80037a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	021b      	lsls	r3, r3, #8
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80037ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	031b      	lsls	r3, r3, #12
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a0f      	ldr	r2, [pc, #60]	@ (8003818 <TIM_OC4_SetConfig+0x98>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d109      	bne.n	80037f4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80037e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	019b      	lsls	r3, r3, #6
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	621a      	str	r2, [r3, #32]
}
 800380e:	bf00      	nop
 8003810:	371c      	adds	r7, #28
 8003812:	46bd      	mov	sp, r7
 8003814:	bc80      	pop	{r7}
 8003816:	4770      	bx	lr
 8003818:	40012c00 	.word	0x40012c00

0800381c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800381c:	b480      	push	{r7}
 800381e:	b087      	sub	sp, #28
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6a1b      	ldr	r3, [r3, #32]
 800382c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	f023 0201 	bic.w	r2, r3, #1
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003846:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	011b      	lsls	r3, r3, #4
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	4313      	orrs	r3, r2
 8003850:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	f023 030a 	bic.w	r3, r3, #10
 8003858:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	4313      	orrs	r3, r2
 8003860:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	621a      	str	r2, [r3, #32]
}
 800386e:	bf00      	nop
 8003870:	371c      	adds	r7, #28
 8003872:	46bd      	mov	sp, r7
 8003874:	bc80      	pop	{r7}
 8003876:	4770      	bx	lr

08003878 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003878:	b480      	push	{r7}
 800387a:	b087      	sub	sp, #28
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	f023 0210 	bic.w	r2, r3, #16
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80038a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	031b      	lsls	r3, r3, #12
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80038b4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	011b      	lsls	r3, r3, #4
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	4313      	orrs	r3, r2
 80038be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	621a      	str	r2, [r3, #32]
}
 80038cc:	bf00      	nop
 80038ce:	371c      	adds	r7, #28
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bc80      	pop	{r7}
 80038d4:	4770      	bx	lr

080038d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038d6:	b480      	push	{r7}
 80038d8:	b085      	sub	sp, #20
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
 80038de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038ee:	683a      	ldr	r2, [r7, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	f043 0307 	orr.w	r3, r3, #7
 80038f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	609a      	str	r2, [r3, #8]
}
 8003900:	bf00      	nop
 8003902:	3714      	adds	r7, #20
 8003904:	46bd      	mov	sp, r7
 8003906:	bc80      	pop	{r7}
 8003908:	4770      	bx	lr

0800390a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800390a:	b480      	push	{r7}
 800390c:	b087      	sub	sp, #28
 800390e:	af00      	add	r7, sp, #0
 8003910:	60f8      	str	r0, [r7, #12]
 8003912:	60b9      	str	r1, [r7, #8]
 8003914:	607a      	str	r2, [r7, #4]
 8003916:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003924:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	021a      	lsls	r2, r3, #8
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	431a      	orrs	r2, r3
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	4313      	orrs	r3, r2
 8003932:	697a      	ldr	r2, [r7, #20]
 8003934:	4313      	orrs	r3, r2
 8003936:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	609a      	str	r2, [r3, #8]
}
 800393e:	bf00      	nop
 8003940:	371c      	adds	r7, #28
 8003942:	46bd      	mov	sp, r7
 8003944:	bc80      	pop	{r7}
 8003946:	4770      	bx	lr

08003948 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003948:	b480      	push	{r7}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003958:	2b01      	cmp	r3, #1
 800395a:	d101      	bne.n	8003960 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800395c:	2302      	movs	r3, #2
 800395e:	e046      	b.n	80039ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2202      	movs	r2, #2
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003986:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	4313      	orrs	r3, r2
 8003990:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a16      	ldr	r2, [pc, #88]	@ (80039f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d00e      	beq.n	80039c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039ac:	d009      	beq.n	80039c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a12      	ldr	r2, [pc, #72]	@ (80039fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d004      	beq.n	80039c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a10      	ldr	r2, [pc, #64]	@ (8003a00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d10c      	bne.n	80039dc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	68ba      	ldr	r2, [r7, #8]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68ba      	ldr	r2, [r7, #8]
 80039da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3714      	adds	r7, #20
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bc80      	pop	{r7}
 80039f6:	4770      	bx	lr
 80039f8:	40012c00 	.word	0x40012c00
 80039fc:	40000400 	.word	0x40000400
 8003a00:	40000800 	.word	0x40000800

08003a04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e042      	b.n	8003a9c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d106      	bne.n	8003a30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f7fd fe80 	bl	8001730 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2224      	movs	r2, #36	@ 0x24
 8003a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68da      	ldr	r2, [r3, #12]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 fdb7 	bl	80045bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	691a      	ldr	r2, [r3, #16]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	695a      	ldr	r2, [r3, #20]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68da      	ldr	r2, [r3, #12]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2220      	movs	r2, #32
 8003a88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b08a      	sub	sp, #40	@ 0x28
 8003aa8:	af02      	add	r7, sp, #8
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	603b      	str	r3, [r7, #0]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2b20      	cmp	r3, #32
 8003ac2:	d175      	bne.n	8003bb0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d002      	beq.n	8003ad0 <HAL_UART_Transmit+0x2c>
 8003aca:	88fb      	ldrh	r3, [r7, #6]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d101      	bne.n	8003ad4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e06e      	b.n	8003bb2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2221      	movs	r2, #33	@ 0x21
 8003ade:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ae2:	f7fd ff33 	bl	800194c <HAL_GetTick>
 8003ae6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	88fa      	ldrh	r2, [r7, #6]
 8003aec:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	88fa      	ldrh	r2, [r7, #6]
 8003af2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003afc:	d108      	bne.n	8003b10 <HAL_UART_Transmit+0x6c>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d104      	bne.n	8003b10 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003b06:	2300      	movs	r3, #0
 8003b08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	61bb      	str	r3, [r7, #24]
 8003b0e:	e003      	b.n	8003b18 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b14:	2300      	movs	r3, #0
 8003b16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b18:	e02e      	b.n	8003b78 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	2200      	movs	r2, #0
 8003b22:	2180      	movs	r1, #128	@ 0x80
 8003b24:	68f8      	ldr	r0, [r7, #12]
 8003b26:	f000 fb1c 	bl	8004162 <UART_WaitOnFlagUntilTimeout>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d005      	beq.n	8003b3c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2220      	movs	r2, #32
 8003b34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e03a      	b.n	8003bb2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10b      	bne.n	8003b5a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	881b      	ldrh	r3, [r3, #0]
 8003b46:	461a      	mov	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	3302      	adds	r3, #2
 8003b56:	61bb      	str	r3, [r7, #24]
 8003b58:	e007      	b.n	8003b6a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	781a      	ldrb	r2, [r3, #0]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	3301      	adds	r3, #1
 8003b68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	3b01      	subs	r3, #1
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1cb      	bne.n	8003b1a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	2140      	movs	r1, #64	@ 0x40
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f000 fae8 	bl	8004162 <UART_WaitOnFlagUntilTimeout>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d005      	beq.n	8003ba4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e006      	b.n	8003bb2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003bac:	2300      	movs	r3, #0
 8003bae:	e000      	b.n	8003bb2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003bb0:	2302      	movs	r3, #2
  }
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3720      	adds	r7, #32
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b084      	sub	sp, #16
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	60f8      	str	r0, [r7, #12]
 8003bc2:	60b9      	str	r1, [r7, #8]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2b20      	cmp	r3, #32
 8003bd2:	d112      	bne.n	8003bfa <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d002      	beq.n	8003be0 <HAL_UART_Receive_IT+0x26>
 8003bda:	88fb      	ldrh	r3, [r7, #6]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d101      	bne.n	8003be4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e00b      	b.n	8003bfc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003bea:	88fb      	ldrh	r3, [r7, #6]
 8003bec:	461a      	mov	r2, r3
 8003bee:	68b9      	ldr	r1, [r7, #8]
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f000 fb0f 	bl	8004214 <UART_Start_Receive_IT>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	e000      	b.n	8003bfc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003bfa:	2302      	movs	r3, #2
  }
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3710      	adds	r7, #16
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b0ba      	sub	sp, #232	@ 0xe8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003c30:	2300      	movs	r3, #0
 8003c32:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c3a:	f003 030f 	and.w	r3, r3, #15
 8003c3e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003c42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10f      	bne.n	8003c6a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c4e:	f003 0320 	and.w	r3, r3, #32
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d009      	beq.n	8003c6a <HAL_UART_IRQHandler+0x66>
 8003c56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c5a:	f003 0320 	and.w	r3, r3, #32
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d003      	beq.n	8003c6a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 fbec 	bl	8004440 <UART_Receive_IT>
      return;
 8003c68:	e25b      	b.n	8004122 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003c6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f000 80de 	beq.w	8003e30 <HAL_UART_IRQHandler+0x22c>
 8003c74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d106      	bne.n	8003c8e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c84:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f000 80d1 	beq.w	8003e30 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00b      	beq.n	8003cb2 <HAL_UART_IRQHandler+0xae>
 8003c9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d005      	beq.n	8003cb2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003caa:	f043 0201 	orr.w	r2, r3, #1
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cb6:	f003 0304 	and.w	r3, r3, #4
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00b      	beq.n	8003cd6 <HAL_UART_IRQHandler+0xd2>
 8003cbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d005      	beq.n	8003cd6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cce:	f043 0202 	orr.w	r2, r3, #2
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00b      	beq.n	8003cfa <HAL_UART_IRQHandler+0xf6>
 8003ce2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d005      	beq.n	8003cfa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cf2:	f043 0204 	orr.w	r2, r3, #4
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cfe:	f003 0308 	and.w	r3, r3, #8
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d011      	beq.n	8003d2a <HAL_UART_IRQHandler+0x126>
 8003d06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d0a:	f003 0320 	and.w	r3, r3, #32
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d105      	bne.n	8003d1e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d005      	beq.n	8003d2a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d22:	f043 0208 	orr.w	r2, r3, #8
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	f000 81f2 	beq.w	8004118 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d38:	f003 0320 	and.w	r3, r3, #32
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d008      	beq.n	8003d52 <HAL_UART_IRQHandler+0x14e>
 8003d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d44:	f003 0320 	and.w	r3, r3, #32
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d002      	beq.n	8003d52 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 fb77 	bl	8004440 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	bf14      	ite	ne
 8003d60:	2301      	movne	r3, #1
 8003d62:	2300      	moveq	r3, #0
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d6e:	f003 0308 	and.w	r3, r3, #8
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d103      	bne.n	8003d7e <HAL_UART_IRQHandler+0x17a>
 8003d76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d04f      	beq.n	8003e1e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 fa81 	bl	8004286 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d041      	beq.n	8003e16 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	3314      	adds	r3, #20
 8003d98:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003da0:	e853 3f00 	ldrex	r3, [r3]
 8003da4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003da8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003dac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003db0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	3314      	adds	r3, #20
 8003dba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003dbe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003dc2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003dca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003dce:	e841 2300 	strex	r3, r2, [r1]
 8003dd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003dd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1d9      	bne.n	8003d92 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d013      	beq.n	8003e0e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dea:	4a7e      	ldr	r2, [pc, #504]	@ (8003fe4 <HAL_UART_IRQHandler+0x3e0>)
 8003dec:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7fe f932 	bl	800205c <HAL_DMA_Abort_IT>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d016      	beq.n	8003e2c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003e08:	4610      	mov	r0, r2
 8003e0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e0c:	e00e      	b.n	8003e2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f993 	bl	800413a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e14:	e00a      	b.n	8003e2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f98f 	bl	800413a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e1c:	e006      	b.n	8003e2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 f98b 	bl	800413a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003e2a:	e175      	b.n	8004118 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e2c:	bf00      	nop
    return;
 8003e2e:	e173      	b.n	8004118 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	f040 814f 	bne.w	80040d8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e3e:	f003 0310 	and.w	r3, r3, #16
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	f000 8148 	beq.w	80040d8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e4c:	f003 0310 	and.w	r3, r3, #16
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f000 8141 	beq.w	80040d8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e56:	2300      	movs	r3, #0
 8003e58:	60bb      	str	r3, [r7, #8]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	60bb      	str	r3, [r7, #8]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	60bb      	str	r3, [r7, #8]
 8003e6a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f000 80b6 	beq.w	8003fe8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f000 8145 	beq.w	800411c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	f080 813e 	bcs.w	800411c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ea6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	2b20      	cmp	r3, #32
 8003eb0:	f000 8088 	beq.w	8003fc4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	330c      	adds	r3, #12
 8003eba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ebe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ec2:	e853 3f00 	ldrex	r3, [r3]
 8003ec6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003eca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ece:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ed2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	330c      	adds	r3, #12
 8003edc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003ee0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003ee4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003eec:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003ef0:	e841 2300 	strex	r3, r2, [r1]
 8003ef4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003ef8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1d9      	bne.n	8003eb4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	3314      	adds	r3, #20
 8003f06:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f08:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f0a:	e853 3f00 	ldrex	r3, [r3]
 8003f0e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003f10:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f12:	f023 0301 	bic.w	r3, r3, #1
 8003f16:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	3314      	adds	r3, #20
 8003f20:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f24:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003f28:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003f2c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003f30:	e841 2300 	strex	r3, r2, [r1]
 8003f34:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003f36:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1e1      	bne.n	8003f00 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	3314      	adds	r3, #20
 8003f42:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f44:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f46:	e853 3f00 	ldrex	r3, [r3]
 8003f4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003f4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	3314      	adds	r3, #20
 8003f5c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003f60:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003f62:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f64:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003f66:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003f68:	e841 2300 	strex	r3, r2, [r1]
 8003f6c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003f6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1e3      	bne.n	8003f3c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2220      	movs	r2, #32
 8003f78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	330c      	adds	r3, #12
 8003f88:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f8c:	e853 3f00 	ldrex	r3, [r3]
 8003f90:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003f92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f94:	f023 0310 	bic.w	r3, r3, #16
 8003f98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	330c      	adds	r3, #12
 8003fa2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003fa6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003fa8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003faa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003fac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003fae:	e841 2300 	strex	r3, r2, [r1]
 8003fb2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003fb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1e3      	bne.n	8003f82 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7fe f811 	bl	8001fe6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	4619      	mov	r1, r3
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 f8b6 	bl	800414c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003fe0:	e09c      	b.n	800411c <HAL_UART_IRQHandler+0x518>
 8003fe2:	bf00      	nop
 8003fe4:	0800434b 	.word	0x0800434b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f000 808e 	beq.w	8004120 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004004:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004008:	2b00      	cmp	r3, #0
 800400a:	f000 8089 	beq.w	8004120 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	330c      	adds	r3, #12
 8004014:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004018:	e853 3f00 	ldrex	r3, [r3]
 800401c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800401e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004020:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004024:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	330c      	adds	r3, #12
 800402e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004032:	647a      	str	r2, [r7, #68]	@ 0x44
 8004034:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004036:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004038:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800403a:	e841 2300 	strex	r3, r2, [r1]
 800403e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004040:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1e3      	bne.n	800400e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	3314      	adds	r3, #20
 800404c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004050:	e853 3f00 	ldrex	r3, [r3]
 8004054:	623b      	str	r3, [r7, #32]
   return(result);
 8004056:	6a3b      	ldr	r3, [r7, #32]
 8004058:	f023 0301 	bic.w	r3, r3, #1
 800405c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	3314      	adds	r3, #20
 8004066:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800406a:	633a      	str	r2, [r7, #48]	@ 0x30
 800406c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004070:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004072:	e841 2300 	strex	r3, r2, [r1]
 8004076:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1e3      	bne.n	8004046 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2220      	movs	r2, #32
 8004082:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	330c      	adds	r3, #12
 8004092:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	e853 3f00 	ldrex	r3, [r3]
 800409a:	60fb      	str	r3, [r7, #12]
   return(result);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f023 0310 	bic.w	r3, r3, #16
 80040a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	330c      	adds	r3, #12
 80040ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80040b0:	61fa      	str	r2, [r7, #28]
 80040b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b4:	69b9      	ldr	r1, [r7, #24]
 80040b6:	69fa      	ldr	r2, [r7, #28]
 80040b8:	e841 2300 	strex	r3, r2, [r1]
 80040bc:	617b      	str	r3, [r7, #20]
   return(result);
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d1e3      	bne.n	800408c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2202      	movs	r2, #2
 80040c8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80040ce:	4619      	mov	r1, r3
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 f83b 	bl	800414c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80040d6:	e023      	b.n	8004120 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80040d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d009      	beq.n	80040f8 <HAL_UART_IRQHandler+0x4f4>
 80040e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d003      	beq.n	80040f8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 f93e 	bl	8004372 <UART_Transmit_IT>
    return;
 80040f6:	e014      	b.n	8004122 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80040f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00e      	beq.n	8004122 <HAL_UART_IRQHandler+0x51e>
 8004104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004108:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800410c:	2b00      	cmp	r3, #0
 800410e:	d008      	beq.n	8004122 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 f97d 	bl	8004410 <UART_EndTransmit_IT>
    return;
 8004116:	e004      	b.n	8004122 <HAL_UART_IRQHandler+0x51e>
    return;
 8004118:	bf00      	nop
 800411a:	e002      	b.n	8004122 <HAL_UART_IRQHandler+0x51e>
      return;
 800411c:	bf00      	nop
 800411e:	e000      	b.n	8004122 <HAL_UART_IRQHandler+0x51e>
      return;
 8004120:	bf00      	nop
  }
}
 8004122:	37e8      	adds	r7, #232	@ 0xe8
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	bc80      	pop	{r7}
 8004138:	4770      	bx	lr

0800413a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800413a:	b480      	push	{r7}
 800413c:	b083      	sub	sp, #12
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004142:	bf00      	nop
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	bc80      	pop	{r7}
 800414a:	4770      	bx	lr

0800414c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	460b      	mov	r3, r1
 8004156:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	bc80      	pop	{r7}
 8004160:	4770      	bx	lr

08004162 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b086      	sub	sp, #24
 8004166:	af00      	add	r7, sp, #0
 8004168:	60f8      	str	r0, [r7, #12]
 800416a:	60b9      	str	r1, [r7, #8]
 800416c:	603b      	str	r3, [r7, #0]
 800416e:	4613      	mov	r3, r2
 8004170:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004172:	e03b      	b.n	80041ec <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004174:	6a3b      	ldr	r3, [r7, #32]
 8004176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417a:	d037      	beq.n	80041ec <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800417c:	f7fd fbe6 	bl	800194c <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	6a3a      	ldr	r2, [r7, #32]
 8004188:	429a      	cmp	r2, r3
 800418a:	d302      	bcc.n	8004192 <UART_WaitOnFlagUntilTimeout+0x30>
 800418c:	6a3b      	ldr	r3, [r7, #32]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e03a      	b.n	800420c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	f003 0304 	and.w	r3, r3, #4
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d023      	beq.n	80041ec <UART_WaitOnFlagUntilTimeout+0x8a>
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	2b80      	cmp	r3, #128	@ 0x80
 80041a8:	d020      	beq.n	80041ec <UART_WaitOnFlagUntilTimeout+0x8a>
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	2b40      	cmp	r3, #64	@ 0x40
 80041ae:	d01d      	beq.n	80041ec <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0308 	and.w	r3, r3, #8
 80041ba:	2b08      	cmp	r3, #8
 80041bc:	d116      	bne.n	80041ec <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80041be:	2300      	movs	r3, #0
 80041c0:	617b      	str	r3, [r7, #20]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	617b      	str	r3, [r7, #20]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	617b      	str	r3, [r7, #20]
 80041d2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f000 f856 	bl	8004286 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2208      	movs	r2, #8
 80041de:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e00f      	b.n	800420c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	4013      	ands	r3, r2
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	bf0c      	ite	eq
 80041fc:	2301      	moveq	r3, #1
 80041fe:	2300      	movne	r3, #0
 8004200:	b2db      	uxtb	r3, r3
 8004202:	461a      	mov	r2, r3
 8004204:	79fb      	ldrb	r3, [r7, #7]
 8004206:	429a      	cmp	r2, r3
 8004208:	d0b4      	beq.n	8004174 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3718      	adds	r7, #24
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	4613      	mov	r3, r2
 8004220:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	68ba      	ldr	r2, [r7, #8]
 8004226:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	88fa      	ldrh	r2, [r7, #6]
 800422c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	88fa      	ldrh	r2, [r7, #6]
 8004232:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2222      	movs	r2, #34	@ 0x22
 800423e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d007      	beq.n	800425a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68da      	ldr	r2, [r3, #12]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004258:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	695a      	ldr	r2, [r3, #20]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f042 0201 	orr.w	r2, r2, #1
 8004268:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68da      	ldr	r2, [r3, #12]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f042 0220 	orr.w	r2, r2, #32
 8004278:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3714      	adds	r7, #20
 8004280:	46bd      	mov	sp, r7
 8004282:	bc80      	pop	{r7}
 8004284:	4770      	bx	lr

08004286 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004286:	b480      	push	{r7}
 8004288:	b095      	sub	sp, #84	@ 0x54
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	330c      	adds	r3, #12
 8004294:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004298:	e853 3f00 	ldrex	r3, [r3]
 800429c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800429e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	330c      	adds	r3, #12
 80042ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80042ae:	643a      	str	r2, [r7, #64]	@ 0x40
 80042b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042b6:	e841 2300 	strex	r3, r2, [r1]
 80042ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1e5      	bne.n	800428e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	3314      	adds	r3, #20
 80042c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ca:	6a3b      	ldr	r3, [r7, #32]
 80042cc:	e853 3f00 	ldrex	r3, [r3]
 80042d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	f023 0301 	bic.w	r3, r3, #1
 80042d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	3314      	adds	r3, #20
 80042e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042ea:	e841 2300 	strex	r3, r2, [r1]
 80042ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1e5      	bne.n	80042c2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d119      	bne.n	8004332 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	330c      	adds	r3, #12
 8004304:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	e853 3f00 	ldrex	r3, [r3]
 800430c:	60bb      	str	r3, [r7, #8]
   return(result);
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	f023 0310 	bic.w	r3, r3, #16
 8004314:	647b      	str	r3, [r7, #68]	@ 0x44
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	330c      	adds	r3, #12
 800431c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800431e:	61ba      	str	r2, [r7, #24]
 8004320:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004322:	6979      	ldr	r1, [r7, #20]
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	e841 2300 	strex	r3, r2, [r1]
 800432a:	613b      	str	r3, [r7, #16]
   return(result);
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1e5      	bne.n	80042fe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2220      	movs	r2, #32
 8004336:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004340:	bf00      	nop
 8004342:	3754      	adds	r7, #84	@ 0x54
 8004344:	46bd      	mov	sp, r7
 8004346:	bc80      	pop	{r7}
 8004348:	4770      	bx	lr

0800434a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b084      	sub	sp, #16
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004356:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004364:	68f8      	ldr	r0, [r7, #12]
 8004366:	f7ff fee8 	bl	800413a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800436a:	bf00      	nop
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004372:	b480      	push	{r7}
 8004374:	b085      	sub	sp, #20
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b21      	cmp	r3, #33	@ 0x21
 8004384:	d13e      	bne.n	8004404 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800438e:	d114      	bne.n	80043ba <UART_Transmit_IT+0x48>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d110      	bne.n	80043ba <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a1b      	ldr	r3, [r3, #32]
 800439c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	881b      	ldrh	r3, [r3, #0]
 80043a2:	461a      	mov	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043ac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	1c9a      	adds	r2, r3, #2
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	621a      	str	r2, [r3, #32]
 80043b8:	e008      	b.n	80043cc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	1c59      	adds	r1, r3, #1
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	6211      	str	r1, [r2, #32]
 80043c4:	781a      	ldrb	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	3b01      	subs	r3, #1
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	4619      	mov	r1, r3
 80043da:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d10f      	bne.n	8004400 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68da      	ldr	r2, [r3, #12]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80043ee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68da      	ldr	r2, [r3, #12]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80043fe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004400:	2300      	movs	r3, #0
 8004402:	e000      	b.n	8004406 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004404:	2302      	movs	r3, #2
  }
}
 8004406:	4618      	mov	r0, r3
 8004408:	3714      	adds	r7, #20
 800440a:	46bd      	mov	sp, r7
 800440c:	bc80      	pop	{r7}
 800440e:	4770      	bx	lr

08004410 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68da      	ldr	r2, [r3, #12]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004426:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2220      	movs	r2, #32
 800442c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f7ff fe79 	bl	8004128 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	3708      	adds	r7, #8
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b08c      	sub	sp, #48	@ 0x30
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b22      	cmp	r3, #34	@ 0x22
 8004452:	f040 80ae 	bne.w	80045b2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800445e:	d117      	bne.n	8004490 <UART_Receive_IT+0x50>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d113      	bne.n	8004490 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004468:	2300      	movs	r3, #0
 800446a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004470:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	b29b      	uxth	r3, r3
 800447a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800447e:	b29a      	uxth	r2, r3
 8004480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004482:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004488:	1c9a      	adds	r2, r3, #2
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	629a      	str	r2, [r3, #40]	@ 0x28
 800448e:	e026      	b.n	80044de <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004494:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004496:	2300      	movs	r3, #0
 8004498:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044a2:	d007      	beq.n	80044b4 <UART_Receive_IT+0x74>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10a      	bne.n	80044c2 <UART_Receive_IT+0x82>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d106      	bne.n	80044c2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	b2da      	uxtb	r2, r3
 80044bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044be:	701a      	strb	r2, [r3, #0]
 80044c0:	e008      	b.n	80044d4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044ce:	b2da      	uxtb	r2, r3
 80044d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044d2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d8:	1c5a      	adds	r2, r3, #1
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	3b01      	subs	r3, #1
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	4619      	mov	r1, r3
 80044ec:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d15d      	bne.n	80045ae <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68da      	ldr	r2, [r3, #12]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f022 0220 	bic.w	r2, r2, #32
 8004500:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68da      	ldr	r2, [r3, #12]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004510:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	695a      	ldr	r2, [r3, #20]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f022 0201 	bic.w	r2, r2, #1
 8004520:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2220      	movs	r2, #32
 8004526:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004534:	2b01      	cmp	r3, #1
 8004536:	d135      	bne.n	80045a4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	330c      	adds	r3, #12
 8004544:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	e853 3f00 	ldrex	r3, [r3]
 800454c:	613b      	str	r3, [r7, #16]
   return(result);
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	f023 0310 	bic.w	r3, r3, #16
 8004554:	627b      	str	r3, [r7, #36]	@ 0x24
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	330c      	adds	r3, #12
 800455c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800455e:	623a      	str	r2, [r7, #32]
 8004560:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004562:	69f9      	ldr	r1, [r7, #28]
 8004564:	6a3a      	ldr	r2, [r7, #32]
 8004566:	e841 2300 	strex	r3, r2, [r1]
 800456a:	61bb      	str	r3, [r7, #24]
   return(result);
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1e5      	bne.n	800453e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0310 	and.w	r3, r3, #16
 800457c:	2b10      	cmp	r3, #16
 800457e:	d10a      	bne.n	8004596 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004580:	2300      	movs	r3, #0
 8004582:	60fb      	str	r3, [r7, #12]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	60fb      	str	r3, [r7, #12]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	60fb      	str	r3, [r7, #12]
 8004594:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800459a:	4619      	mov	r1, r3
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f7ff fdd5 	bl	800414c <HAL_UARTEx_RxEventCallback>
 80045a2:	e002      	b.n	80045aa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f7fc f88f 	bl	80006c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80045aa:	2300      	movs	r3, #0
 80045ac:	e002      	b.n	80045b4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80045ae:	2300      	movs	r3, #0
 80045b0:	e000      	b.n	80045b4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80045b2:	2302      	movs	r3, #2
  }
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3730      	adds	r7, #48	@ 0x30
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68da      	ldr	r2, [r3, #12]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	430a      	orrs	r2, r1
 80045d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	689a      	ldr	r2, [r3, #8]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	431a      	orrs	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	695b      	ldr	r3, [r3, #20]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80045f6:	f023 030c 	bic.w	r3, r3, #12
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	6812      	ldr	r2, [r2, #0]
 80045fe:	68b9      	ldr	r1, [r7, #8]
 8004600:	430b      	orrs	r3, r1
 8004602:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	699a      	ldr	r2, [r3, #24]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	430a      	orrs	r2, r1
 8004618:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a2c      	ldr	r2, [pc, #176]	@ (80046d0 <UART_SetConfig+0x114>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d103      	bne.n	800462c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004624:	f7fe fc50 	bl	8002ec8 <HAL_RCC_GetPCLK2Freq>
 8004628:	60f8      	str	r0, [r7, #12]
 800462a:	e002      	b.n	8004632 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800462c:	f7fe fc38 	bl	8002ea0 <HAL_RCC_GetPCLK1Freq>
 8004630:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	4613      	mov	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	4413      	add	r3, r2
 800463a:	009a      	lsls	r2, r3, #2
 800463c:	441a      	add	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	fbb2 f3f3 	udiv	r3, r2, r3
 8004648:	4a22      	ldr	r2, [pc, #136]	@ (80046d4 <UART_SetConfig+0x118>)
 800464a:	fba2 2303 	umull	r2, r3, r2, r3
 800464e:	095b      	lsrs	r3, r3, #5
 8004650:	0119      	lsls	r1, r3, #4
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	4613      	mov	r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	4413      	add	r3, r2
 800465a:	009a      	lsls	r2, r3, #2
 800465c:	441a      	add	r2, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	fbb2 f2f3 	udiv	r2, r2, r3
 8004668:	4b1a      	ldr	r3, [pc, #104]	@ (80046d4 <UART_SetConfig+0x118>)
 800466a:	fba3 0302 	umull	r0, r3, r3, r2
 800466e:	095b      	lsrs	r3, r3, #5
 8004670:	2064      	movs	r0, #100	@ 0x64
 8004672:	fb00 f303 	mul.w	r3, r0, r3
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	011b      	lsls	r3, r3, #4
 800467a:	3332      	adds	r3, #50	@ 0x32
 800467c:	4a15      	ldr	r2, [pc, #84]	@ (80046d4 <UART_SetConfig+0x118>)
 800467e:	fba2 2303 	umull	r2, r3, r2, r3
 8004682:	095b      	lsrs	r3, r3, #5
 8004684:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004688:	4419      	add	r1, r3
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	4613      	mov	r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	4413      	add	r3, r2
 8004692:	009a      	lsls	r2, r3, #2
 8004694:	441a      	add	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	fbb2 f2f3 	udiv	r2, r2, r3
 80046a0:	4b0c      	ldr	r3, [pc, #48]	@ (80046d4 <UART_SetConfig+0x118>)
 80046a2:	fba3 0302 	umull	r0, r3, r3, r2
 80046a6:	095b      	lsrs	r3, r3, #5
 80046a8:	2064      	movs	r0, #100	@ 0x64
 80046aa:	fb00 f303 	mul.w	r3, r0, r3
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	011b      	lsls	r3, r3, #4
 80046b2:	3332      	adds	r3, #50	@ 0x32
 80046b4:	4a07      	ldr	r2, [pc, #28]	@ (80046d4 <UART_SetConfig+0x118>)
 80046b6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ba:	095b      	lsrs	r3, r3, #5
 80046bc:	f003 020f 	and.w	r2, r3, #15
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	440a      	add	r2, r1
 80046c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80046c8:	bf00      	nop
 80046ca:	3710      	adds	r7, #16
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	40013800 	.word	0x40013800
 80046d4:	51eb851f 	.word	0x51eb851f

080046d8 <std>:
 80046d8:	2300      	movs	r3, #0
 80046da:	b510      	push	{r4, lr}
 80046dc:	4604      	mov	r4, r0
 80046de:	e9c0 3300 	strd	r3, r3, [r0]
 80046e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80046e6:	6083      	str	r3, [r0, #8]
 80046e8:	8181      	strh	r1, [r0, #12]
 80046ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80046ec:	81c2      	strh	r2, [r0, #14]
 80046ee:	6183      	str	r3, [r0, #24]
 80046f0:	4619      	mov	r1, r3
 80046f2:	2208      	movs	r2, #8
 80046f4:	305c      	adds	r0, #92	@ 0x5c
 80046f6:	f000 f9f9 	bl	8004aec <memset>
 80046fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004730 <std+0x58>)
 80046fc:	6224      	str	r4, [r4, #32]
 80046fe:	6263      	str	r3, [r4, #36]	@ 0x24
 8004700:	4b0c      	ldr	r3, [pc, #48]	@ (8004734 <std+0x5c>)
 8004702:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004704:	4b0c      	ldr	r3, [pc, #48]	@ (8004738 <std+0x60>)
 8004706:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004708:	4b0c      	ldr	r3, [pc, #48]	@ (800473c <std+0x64>)
 800470a:	6323      	str	r3, [r4, #48]	@ 0x30
 800470c:	4b0c      	ldr	r3, [pc, #48]	@ (8004740 <std+0x68>)
 800470e:	429c      	cmp	r4, r3
 8004710:	d006      	beq.n	8004720 <std+0x48>
 8004712:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004716:	4294      	cmp	r4, r2
 8004718:	d002      	beq.n	8004720 <std+0x48>
 800471a:	33d0      	adds	r3, #208	@ 0xd0
 800471c:	429c      	cmp	r4, r3
 800471e:	d105      	bne.n	800472c <std+0x54>
 8004720:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004728:	f000 ba58 	b.w	8004bdc <__retarget_lock_init_recursive>
 800472c:	bd10      	pop	{r4, pc}
 800472e:	bf00      	nop
 8004730:	0800493d 	.word	0x0800493d
 8004734:	0800495f 	.word	0x0800495f
 8004738:	08004997 	.word	0x08004997
 800473c:	080049bb 	.word	0x080049bb
 8004740:	20000234 	.word	0x20000234

08004744 <stdio_exit_handler>:
 8004744:	4a02      	ldr	r2, [pc, #8]	@ (8004750 <stdio_exit_handler+0xc>)
 8004746:	4903      	ldr	r1, [pc, #12]	@ (8004754 <stdio_exit_handler+0x10>)
 8004748:	4803      	ldr	r0, [pc, #12]	@ (8004758 <stdio_exit_handler+0x14>)
 800474a:	f000 b869 	b.w	8004820 <_fwalk_sglue>
 800474e:	bf00      	nop
 8004750:	20000020 	.word	0x20000020
 8004754:	08005475 	.word	0x08005475
 8004758:	20000030 	.word	0x20000030

0800475c <cleanup_stdio>:
 800475c:	6841      	ldr	r1, [r0, #4]
 800475e:	4b0c      	ldr	r3, [pc, #48]	@ (8004790 <cleanup_stdio+0x34>)
 8004760:	b510      	push	{r4, lr}
 8004762:	4299      	cmp	r1, r3
 8004764:	4604      	mov	r4, r0
 8004766:	d001      	beq.n	800476c <cleanup_stdio+0x10>
 8004768:	f000 fe84 	bl	8005474 <_fflush_r>
 800476c:	68a1      	ldr	r1, [r4, #8]
 800476e:	4b09      	ldr	r3, [pc, #36]	@ (8004794 <cleanup_stdio+0x38>)
 8004770:	4299      	cmp	r1, r3
 8004772:	d002      	beq.n	800477a <cleanup_stdio+0x1e>
 8004774:	4620      	mov	r0, r4
 8004776:	f000 fe7d 	bl	8005474 <_fflush_r>
 800477a:	68e1      	ldr	r1, [r4, #12]
 800477c:	4b06      	ldr	r3, [pc, #24]	@ (8004798 <cleanup_stdio+0x3c>)
 800477e:	4299      	cmp	r1, r3
 8004780:	d004      	beq.n	800478c <cleanup_stdio+0x30>
 8004782:	4620      	mov	r0, r4
 8004784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004788:	f000 be74 	b.w	8005474 <_fflush_r>
 800478c:	bd10      	pop	{r4, pc}
 800478e:	bf00      	nop
 8004790:	20000234 	.word	0x20000234
 8004794:	2000029c 	.word	0x2000029c
 8004798:	20000304 	.word	0x20000304

0800479c <global_stdio_init.part.0>:
 800479c:	b510      	push	{r4, lr}
 800479e:	4b0b      	ldr	r3, [pc, #44]	@ (80047cc <global_stdio_init.part.0+0x30>)
 80047a0:	4c0b      	ldr	r4, [pc, #44]	@ (80047d0 <global_stdio_init.part.0+0x34>)
 80047a2:	4a0c      	ldr	r2, [pc, #48]	@ (80047d4 <global_stdio_init.part.0+0x38>)
 80047a4:	4620      	mov	r0, r4
 80047a6:	601a      	str	r2, [r3, #0]
 80047a8:	2104      	movs	r1, #4
 80047aa:	2200      	movs	r2, #0
 80047ac:	f7ff ff94 	bl	80046d8 <std>
 80047b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80047b4:	2201      	movs	r2, #1
 80047b6:	2109      	movs	r1, #9
 80047b8:	f7ff ff8e 	bl	80046d8 <std>
 80047bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80047c0:	2202      	movs	r2, #2
 80047c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047c6:	2112      	movs	r1, #18
 80047c8:	f7ff bf86 	b.w	80046d8 <std>
 80047cc:	2000036c 	.word	0x2000036c
 80047d0:	20000234 	.word	0x20000234
 80047d4:	08004745 	.word	0x08004745

080047d8 <__sfp_lock_acquire>:
 80047d8:	4801      	ldr	r0, [pc, #4]	@ (80047e0 <__sfp_lock_acquire+0x8>)
 80047da:	f000 ba00 	b.w	8004bde <__retarget_lock_acquire_recursive>
 80047de:	bf00      	nop
 80047e0:	20000375 	.word	0x20000375

080047e4 <__sfp_lock_release>:
 80047e4:	4801      	ldr	r0, [pc, #4]	@ (80047ec <__sfp_lock_release+0x8>)
 80047e6:	f000 b9fb 	b.w	8004be0 <__retarget_lock_release_recursive>
 80047ea:	bf00      	nop
 80047ec:	20000375 	.word	0x20000375

080047f0 <__sinit>:
 80047f0:	b510      	push	{r4, lr}
 80047f2:	4604      	mov	r4, r0
 80047f4:	f7ff fff0 	bl	80047d8 <__sfp_lock_acquire>
 80047f8:	6a23      	ldr	r3, [r4, #32]
 80047fa:	b11b      	cbz	r3, 8004804 <__sinit+0x14>
 80047fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004800:	f7ff bff0 	b.w	80047e4 <__sfp_lock_release>
 8004804:	4b04      	ldr	r3, [pc, #16]	@ (8004818 <__sinit+0x28>)
 8004806:	6223      	str	r3, [r4, #32]
 8004808:	4b04      	ldr	r3, [pc, #16]	@ (800481c <__sinit+0x2c>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1f5      	bne.n	80047fc <__sinit+0xc>
 8004810:	f7ff ffc4 	bl	800479c <global_stdio_init.part.0>
 8004814:	e7f2      	b.n	80047fc <__sinit+0xc>
 8004816:	bf00      	nop
 8004818:	0800475d 	.word	0x0800475d
 800481c:	2000036c 	.word	0x2000036c

08004820 <_fwalk_sglue>:
 8004820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004824:	4607      	mov	r7, r0
 8004826:	4688      	mov	r8, r1
 8004828:	4614      	mov	r4, r2
 800482a:	2600      	movs	r6, #0
 800482c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004830:	f1b9 0901 	subs.w	r9, r9, #1
 8004834:	d505      	bpl.n	8004842 <_fwalk_sglue+0x22>
 8004836:	6824      	ldr	r4, [r4, #0]
 8004838:	2c00      	cmp	r4, #0
 800483a:	d1f7      	bne.n	800482c <_fwalk_sglue+0xc>
 800483c:	4630      	mov	r0, r6
 800483e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004842:	89ab      	ldrh	r3, [r5, #12]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d907      	bls.n	8004858 <_fwalk_sglue+0x38>
 8004848:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800484c:	3301      	adds	r3, #1
 800484e:	d003      	beq.n	8004858 <_fwalk_sglue+0x38>
 8004850:	4629      	mov	r1, r5
 8004852:	4638      	mov	r0, r7
 8004854:	47c0      	blx	r8
 8004856:	4306      	orrs	r6, r0
 8004858:	3568      	adds	r5, #104	@ 0x68
 800485a:	e7e9      	b.n	8004830 <_fwalk_sglue+0x10>

0800485c <iprintf>:
 800485c:	b40f      	push	{r0, r1, r2, r3}
 800485e:	b507      	push	{r0, r1, r2, lr}
 8004860:	4906      	ldr	r1, [pc, #24]	@ (800487c <iprintf+0x20>)
 8004862:	ab04      	add	r3, sp, #16
 8004864:	6808      	ldr	r0, [r1, #0]
 8004866:	f853 2b04 	ldr.w	r2, [r3], #4
 800486a:	6881      	ldr	r1, [r0, #8]
 800486c:	9301      	str	r3, [sp, #4]
 800486e:	f000 fad7 	bl	8004e20 <_vfiprintf_r>
 8004872:	b003      	add	sp, #12
 8004874:	f85d eb04 	ldr.w	lr, [sp], #4
 8004878:	b004      	add	sp, #16
 800487a:	4770      	bx	lr
 800487c:	2000002c 	.word	0x2000002c

08004880 <_puts_r>:
 8004880:	6a03      	ldr	r3, [r0, #32]
 8004882:	b570      	push	{r4, r5, r6, lr}
 8004884:	4605      	mov	r5, r0
 8004886:	460e      	mov	r6, r1
 8004888:	6884      	ldr	r4, [r0, #8]
 800488a:	b90b      	cbnz	r3, 8004890 <_puts_r+0x10>
 800488c:	f7ff ffb0 	bl	80047f0 <__sinit>
 8004890:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004892:	07db      	lsls	r3, r3, #31
 8004894:	d405      	bmi.n	80048a2 <_puts_r+0x22>
 8004896:	89a3      	ldrh	r3, [r4, #12]
 8004898:	0598      	lsls	r0, r3, #22
 800489a:	d402      	bmi.n	80048a2 <_puts_r+0x22>
 800489c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800489e:	f000 f99e 	bl	8004bde <__retarget_lock_acquire_recursive>
 80048a2:	89a3      	ldrh	r3, [r4, #12]
 80048a4:	0719      	lsls	r1, r3, #28
 80048a6:	d502      	bpl.n	80048ae <_puts_r+0x2e>
 80048a8:	6923      	ldr	r3, [r4, #16]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d135      	bne.n	800491a <_puts_r+0x9a>
 80048ae:	4621      	mov	r1, r4
 80048b0:	4628      	mov	r0, r5
 80048b2:	f000 f8c5 	bl	8004a40 <__swsetup_r>
 80048b6:	b380      	cbz	r0, 800491a <_puts_r+0x9a>
 80048b8:	f04f 35ff 	mov.w	r5, #4294967295
 80048bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80048be:	07da      	lsls	r2, r3, #31
 80048c0:	d405      	bmi.n	80048ce <_puts_r+0x4e>
 80048c2:	89a3      	ldrh	r3, [r4, #12]
 80048c4:	059b      	lsls	r3, r3, #22
 80048c6:	d402      	bmi.n	80048ce <_puts_r+0x4e>
 80048c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80048ca:	f000 f989 	bl	8004be0 <__retarget_lock_release_recursive>
 80048ce:	4628      	mov	r0, r5
 80048d0:	bd70      	pop	{r4, r5, r6, pc}
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	da04      	bge.n	80048e0 <_puts_r+0x60>
 80048d6:	69a2      	ldr	r2, [r4, #24]
 80048d8:	429a      	cmp	r2, r3
 80048da:	dc17      	bgt.n	800490c <_puts_r+0x8c>
 80048dc:	290a      	cmp	r1, #10
 80048de:	d015      	beq.n	800490c <_puts_r+0x8c>
 80048e0:	6823      	ldr	r3, [r4, #0]
 80048e2:	1c5a      	adds	r2, r3, #1
 80048e4:	6022      	str	r2, [r4, #0]
 80048e6:	7019      	strb	r1, [r3, #0]
 80048e8:	68a3      	ldr	r3, [r4, #8]
 80048ea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80048ee:	3b01      	subs	r3, #1
 80048f0:	60a3      	str	r3, [r4, #8]
 80048f2:	2900      	cmp	r1, #0
 80048f4:	d1ed      	bne.n	80048d2 <_puts_r+0x52>
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	da11      	bge.n	800491e <_puts_r+0x9e>
 80048fa:	4622      	mov	r2, r4
 80048fc:	210a      	movs	r1, #10
 80048fe:	4628      	mov	r0, r5
 8004900:	f000 f85f 	bl	80049c2 <__swbuf_r>
 8004904:	3001      	adds	r0, #1
 8004906:	d0d7      	beq.n	80048b8 <_puts_r+0x38>
 8004908:	250a      	movs	r5, #10
 800490a:	e7d7      	b.n	80048bc <_puts_r+0x3c>
 800490c:	4622      	mov	r2, r4
 800490e:	4628      	mov	r0, r5
 8004910:	f000 f857 	bl	80049c2 <__swbuf_r>
 8004914:	3001      	adds	r0, #1
 8004916:	d1e7      	bne.n	80048e8 <_puts_r+0x68>
 8004918:	e7ce      	b.n	80048b8 <_puts_r+0x38>
 800491a:	3e01      	subs	r6, #1
 800491c:	e7e4      	b.n	80048e8 <_puts_r+0x68>
 800491e:	6823      	ldr	r3, [r4, #0]
 8004920:	1c5a      	adds	r2, r3, #1
 8004922:	6022      	str	r2, [r4, #0]
 8004924:	220a      	movs	r2, #10
 8004926:	701a      	strb	r2, [r3, #0]
 8004928:	e7ee      	b.n	8004908 <_puts_r+0x88>
	...

0800492c <puts>:
 800492c:	4b02      	ldr	r3, [pc, #8]	@ (8004938 <puts+0xc>)
 800492e:	4601      	mov	r1, r0
 8004930:	6818      	ldr	r0, [r3, #0]
 8004932:	f7ff bfa5 	b.w	8004880 <_puts_r>
 8004936:	bf00      	nop
 8004938:	2000002c 	.word	0x2000002c

0800493c <__sread>:
 800493c:	b510      	push	{r4, lr}
 800493e:	460c      	mov	r4, r1
 8004940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004944:	f000 f8fc 	bl	8004b40 <_read_r>
 8004948:	2800      	cmp	r0, #0
 800494a:	bfab      	itete	ge
 800494c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800494e:	89a3      	ldrhlt	r3, [r4, #12]
 8004950:	181b      	addge	r3, r3, r0
 8004952:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004956:	bfac      	ite	ge
 8004958:	6563      	strge	r3, [r4, #84]	@ 0x54
 800495a:	81a3      	strhlt	r3, [r4, #12]
 800495c:	bd10      	pop	{r4, pc}

0800495e <__swrite>:
 800495e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004962:	461f      	mov	r7, r3
 8004964:	898b      	ldrh	r3, [r1, #12]
 8004966:	4605      	mov	r5, r0
 8004968:	05db      	lsls	r3, r3, #23
 800496a:	460c      	mov	r4, r1
 800496c:	4616      	mov	r6, r2
 800496e:	d505      	bpl.n	800497c <__swrite+0x1e>
 8004970:	2302      	movs	r3, #2
 8004972:	2200      	movs	r2, #0
 8004974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004978:	f000 f8d0 	bl	8004b1c <_lseek_r>
 800497c:	89a3      	ldrh	r3, [r4, #12]
 800497e:	4632      	mov	r2, r6
 8004980:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004984:	81a3      	strh	r3, [r4, #12]
 8004986:	4628      	mov	r0, r5
 8004988:	463b      	mov	r3, r7
 800498a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800498e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004992:	f000 b8e7 	b.w	8004b64 <_write_r>

08004996 <__sseek>:
 8004996:	b510      	push	{r4, lr}
 8004998:	460c      	mov	r4, r1
 800499a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800499e:	f000 f8bd 	bl	8004b1c <_lseek_r>
 80049a2:	1c43      	adds	r3, r0, #1
 80049a4:	89a3      	ldrh	r3, [r4, #12]
 80049a6:	bf15      	itete	ne
 80049a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80049aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80049ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80049b2:	81a3      	strheq	r3, [r4, #12]
 80049b4:	bf18      	it	ne
 80049b6:	81a3      	strhne	r3, [r4, #12]
 80049b8:	bd10      	pop	{r4, pc}

080049ba <__sclose>:
 80049ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049be:	f000 b89d 	b.w	8004afc <_close_r>

080049c2 <__swbuf_r>:
 80049c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049c4:	460e      	mov	r6, r1
 80049c6:	4614      	mov	r4, r2
 80049c8:	4605      	mov	r5, r0
 80049ca:	b118      	cbz	r0, 80049d4 <__swbuf_r+0x12>
 80049cc:	6a03      	ldr	r3, [r0, #32]
 80049ce:	b90b      	cbnz	r3, 80049d4 <__swbuf_r+0x12>
 80049d0:	f7ff ff0e 	bl	80047f0 <__sinit>
 80049d4:	69a3      	ldr	r3, [r4, #24]
 80049d6:	60a3      	str	r3, [r4, #8]
 80049d8:	89a3      	ldrh	r3, [r4, #12]
 80049da:	071a      	lsls	r2, r3, #28
 80049dc:	d501      	bpl.n	80049e2 <__swbuf_r+0x20>
 80049de:	6923      	ldr	r3, [r4, #16]
 80049e0:	b943      	cbnz	r3, 80049f4 <__swbuf_r+0x32>
 80049e2:	4621      	mov	r1, r4
 80049e4:	4628      	mov	r0, r5
 80049e6:	f000 f82b 	bl	8004a40 <__swsetup_r>
 80049ea:	b118      	cbz	r0, 80049f4 <__swbuf_r+0x32>
 80049ec:	f04f 37ff 	mov.w	r7, #4294967295
 80049f0:	4638      	mov	r0, r7
 80049f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049f4:	6823      	ldr	r3, [r4, #0]
 80049f6:	6922      	ldr	r2, [r4, #16]
 80049f8:	b2f6      	uxtb	r6, r6
 80049fa:	1a98      	subs	r0, r3, r2
 80049fc:	6963      	ldr	r3, [r4, #20]
 80049fe:	4637      	mov	r7, r6
 8004a00:	4283      	cmp	r3, r0
 8004a02:	dc05      	bgt.n	8004a10 <__swbuf_r+0x4e>
 8004a04:	4621      	mov	r1, r4
 8004a06:	4628      	mov	r0, r5
 8004a08:	f000 fd34 	bl	8005474 <_fflush_r>
 8004a0c:	2800      	cmp	r0, #0
 8004a0e:	d1ed      	bne.n	80049ec <__swbuf_r+0x2a>
 8004a10:	68a3      	ldr	r3, [r4, #8]
 8004a12:	3b01      	subs	r3, #1
 8004a14:	60a3      	str	r3, [r4, #8]
 8004a16:	6823      	ldr	r3, [r4, #0]
 8004a18:	1c5a      	adds	r2, r3, #1
 8004a1a:	6022      	str	r2, [r4, #0]
 8004a1c:	701e      	strb	r6, [r3, #0]
 8004a1e:	6962      	ldr	r2, [r4, #20]
 8004a20:	1c43      	adds	r3, r0, #1
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d004      	beq.n	8004a30 <__swbuf_r+0x6e>
 8004a26:	89a3      	ldrh	r3, [r4, #12]
 8004a28:	07db      	lsls	r3, r3, #31
 8004a2a:	d5e1      	bpl.n	80049f0 <__swbuf_r+0x2e>
 8004a2c:	2e0a      	cmp	r6, #10
 8004a2e:	d1df      	bne.n	80049f0 <__swbuf_r+0x2e>
 8004a30:	4621      	mov	r1, r4
 8004a32:	4628      	mov	r0, r5
 8004a34:	f000 fd1e 	bl	8005474 <_fflush_r>
 8004a38:	2800      	cmp	r0, #0
 8004a3a:	d0d9      	beq.n	80049f0 <__swbuf_r+0x2e>
 8004a3c:	e7d6      	b.n	80049ec <__swbuf_r+0x2a>
	...

08004a40 <__swsetup_r>:
 8004a40:	b538      	push	{r3, r4, r5, lr}
 8004a42:	4b29      	ldr	r3, [pc, #164]	@ (8004ae8 <__swsetup_r+0xa8>)
 8004a44:	4605      	mov	r5, r0
 8004a46:	6818      	ldr	r0, [r3, #0]
 8004a48:	460c      	mov	r4, r1
 8004a4a:	b118      	cbz	r0, 8004a54 <__swsetup_r+0x14>
 8004a4c:	6a03      	ldr	r3, [r0, #32]
 8004a4e:	b90b      	cbnz	r3, 8004a54 <__swsetup_r+0x14>
 8004a50:	f7ff fece 	bl	80047f0 <__sinit>
 8004a54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a58:	0719      	lsls	r1, r3, #28
 8004a5a:	d422      	bmi.n	8004aa2 <__swsetup_r+0x62>
 8004a5c:	06da      	lsls	r2, r3, #27
 8004a5e:	d407      	bmi.n	8004a70 <__swsetup_r+0x30>
 8004a60:	2209      	movs	r2, #9
 8004a62:	602a      	str	r2, [r5, #0]
 8004a64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a68:	f04f 30ff 	mov.w	r0, #4294967295
 8004a6c:	81a3      	strh	r3, [r4, #12]
 8004a6e:	e033      	b.n	8004ad8 <__swsetup_r+0x98>
 8004a70:	0758      	lsls	r0, r3, #29
 8004a72:	d512      	bpl.n	8004a9a <__swsetup_r+0x5a>
 8004a74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a76:	b141      	cbz	r1, 8004a8a <__swsetup_r+0x4a>
 8004a78:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004a7c:	4299      	cmp	r1, r3
 8004a7e:	d002      	beq.n	8004a86 <__swsetup_r+0x46>
 8004a80:	4628      	mov	r0, r5
 8004a82:	f000 f8af 	bl	8004be4 <_free_r>
 8004a86:	2300      	movs	r3, #0
 8004a88:	6363      	str	r3, [r4, #52]	@ 0x34
 8004a8a:	89a3      	ldrh	r3, [r4, #12]
 8004a8c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004a90:	81a3      	strh	r3, [r4, #12]
 8004a92:	2300      	movs	r3, #0
 8004a94:	6063      	str	r3, [r4, #4]
 8004a96:	6923      	ldr	r3, [r4, #16]
 8004a98:	6023      	str	r3, [r4, #0]
 8004a9a:	89a3      	ldrh	r3, [r4, #12]
 8004a9c:	f043 0308 	orr.w	r3, r3, #8
 8004aa0:	81a3      	strh	r3, [r4, #12]
 8004aa2:	6923      	ldr	r3, [r4, #16]
 8004aa4:	b94b      	cbnz	r3, 8004aba <__swsetup_r+0x7a>
 8004aa6:	89a3      	ldrh	r3, [r4, #12]
 8004aa8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004aac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ab0:	d003      	beq.n	8004aba <__swsetup_r+0x7a>
 8004ab2:	4621      	mov	r1, r4
 8004ab4:	4628      	mov	r0, r5
 8004ab6:	f000 fd2a 	bl	800550e <__smakebuf_r>
 8004aba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004abe:	f013 0201 	ands.w	r2, r3, #1
 8004ac2:	d00a      	beq.n	8004ada <__swsetup_r+0x9a>
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	60a2      	str	r2, [r4, #8]
 8004ac8:	6962      	ldr	r2, [r4, #20]
 8004aca:	4252      	negs	r2, r2
 8004acc:	61a2      	str	r2, [r4, #24]
 8004ace:	6922      	ldr	r2, [r4, #16]
 8004ad0:	b942      	cbnz	r2, 8004ae4 <__swsetup_r+0xa4>
 8004ad2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004ad6:	d1c5      	bne.n	8004a64 <__swsetup_r+0x24>
 8004ad8:	bd38      	pop	{r3, r4, r5, pc}
 8004ada:	0799      	lsls	r1, r3, #30
 8004adc:	bf58      	it	pl
 8004ade:	6962      	ldrpl	r2, [r4, #20]
 8004ae0:	60a2      	str	r2, [r4, #8]
 8004ae2:	e7f4      	b.n	8004ace <__swsetup_r+0x8e>
 8004ae4:	2000      	movs	r0, #0
 8004ae6:	e7f7      	b.n	8004ad8 <__swsetup_r+0x98>
 8004ae8:	2000002c 	.word	0x2000002c

08004aec <memset>:
 8004aec:	4603      	mov	r3, r0
 8004aee:	4402      	add	r2, r0
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d100      	bne.n	8004af6 <memset+0xa>
 8004af4:	4770      	bx	lr
 8004af6:	f803 1b01 	strb.w	r1, [r3], #1
 8004afa:	e7f9      	b.n	8004af0 <memset+0x4>

08004afc <_close_r>:
 8004afc:	b538      	push	{r3, r4, r5, lr}
 8004afe:	2300      	movs	r3, #0
 8004b00:	4d05      	ldr	r5, [pc, #20]	@ (8004b18 <_close_r+0x1c>)
 8004b02:	4604      	mov	r4, r0
 8004b04:	4608      	mov	r0, r1
 8004b06:	602b      	str	r3, [r5, #0]
 8004b08:	f7fc fc8b 	bl	8001422 <_close>
 8004b0c:	1c43      	adds	r3, r0, #1
 8004b0e:	d102      	bne.n	8004b16 <_close_r+0x1a>
 8004b10:	682b      	ldr	r3, [r5, #0]
 8004b12:	b103      	cbz	r3, 8004b16 <_close_r+0x1a>
 8004b14:	6023      	str	r3, [r4, #0]
 8004b16:	bd38      	pop	{r3, r4, r5, pc}
 8004b18:	20000370 	.word	0x20000370

08004b1c <_lseek_r>:
 8004b1c:	b538      	push	{r3, r4, r5, lr}
 8004b1e:	4604      	mov	r4, r0
 8004b20:	4608      	mov	r0, r1
 8004b22:	4611      	mov	r1, r2
 8004b24:	2200      	movs	r2, #0
 8004b26:	4d05      	ldr	r5, [pc, #20]	@ (8004b3c <_lseek_r+0x20>)
 8004b28:	602a      	str	r2, [r5, #0]
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	f7fc fc9d 	bl	800146a <_lseek>
 8004b30:	1c43      	adds	r3, r0, #1
 8004b32:	d102      	bne.n	8004b3a <_lseek_r+0x1e>
 8004b34:	682b      	ldr	r3, [r5, #0]
 8004b36:	b103      	cbz	r3, 8004b3a <_lseek_r+0x1e>
 8004b38:	6023      	str	r3, [r4, #0]
 8004b3a:	bd38      	pop	{r3, r4, r5, pc}
 8004b3c:	20000370 	.word	0x20000370

08004b40 <_read_r>:
 8004b40:	b538      	push	{r3, r4, r5, lr}
 8004b42:	4604      	mov	r4, r0
 8004b44:	4608      	mov	r0, r1
 8004b46:	4611      	mov	r1, r2
 8004b48:	2200      	movs	r2, #0
 8004b4a:	4d05      	ldr	r5, [pc, #20]	@ (8004b60 <_read_r+0x20>)
 8004b4c:	602a      	str	r2, [r5, #0]
 8004b4e:	461a      	mov	r2, r3
 8004b50:	f7fc fc2e 	bl	80013b0 <_read>
 8004b54:	1c43      	adds	r3, r0, #1
 8004b56:	d102      	bne.n	8004b5e <_read_r+0x1e>
 8004b58:	682b      	ldr	r3, [r5, #0]
 8004b5a:	b103      	cbz	r3, 8004b5e <_read_r+0x1e>
 8004b5c:	6023      	str	r3, [r4, #0]
 8004b5e:	bd38      	pop	{r3, r4, r5, pc}
 8004b60:	20000370 	.word	0x20000370

08004b64 <_write_r>:
 8004b64:	b538      	push	{r3, r4, r5, lr}
 8004b66:	4604      	mov	r4, r0
 8004b68:	4608      	mov	r0, r1
 8004b6a:	4611      	mov	r1, r2
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	4d05      	ldr	r5, [pc, #20]	@ (8004b84 <_write_r+0x20>)
 8004b70:	602a      	str	r2, [r5, #0]
 8004b72:	461a      	mov	r2, r3
 8004b74:	f7fc fc39 	bl	80013ea <_write>
 8004b78:	1c43      	adds	r3, r0, #1
 8004b7a:	d102      	bne.n	8004b82 <_write_r+0x1e>
 8004b7c:	682b      	ldr	r3, [r5, #0]
 8004b7e:	b103      	cbz	r3, 8004b82 <_write_r+0x1e>
 8004b80:	6023      	str	r3, [r4, #0]
 8004b82:	bd38      	pop	{r3, r4, r5, pc}
 8004b84:	20000370 	.word	0x20000370

08004b88 <__errno>:
 8004b88:	4b01      	ldr	r3, [pc, #4]	@ (8004b90 <__errno+0x8>)
 8004b8a:	6818      	ldr	r0, [r3, #0]
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	2000002c 	.word	0x2000002c

08004b94 <__libc_init_array>:
 8004b94:	b570      	push	{r4, r5, r6, lr}
 8004b96:	2600      	movs	r6, #0
 8004b98:	4d0c      	ldr	r5, [pc, #48]	@ (8004bcc <__libc_init_array+0x38>)
 8004b9a:	4c0d      	ldr	r4, [pc, #52]	@ (8004bd0 <__libc_init_array+0x3c>)
 8004b9c:	1b64      	subs	r4, r4, r5
 8004b9e:	10a4      	asrs	r4, r4, #2
 8004ba0:	42a6      	cmp	r6, r4
 8004ba2:	d109      	bne.n	8004bb8 <__libc_init_array+0x24>
 8004ba4:	f000 fd30 	bl	8005608 <_init>
 8004ba8:	2600      	movs	r6, #0
 8004baa:	4d0a      	ldr	r5, [pc, #40]	@ (8004bd4 <__libc_init_array+0x40>)
 8004bac:	4c0a      	ldr	r4, [pc, #40]	@ (8004bd8 <__libc_init_array+0x44>)
 8004bae:	1b64      	subs	r4, r4, r5
 8004bb0:	10a4      	asrs	r4, r4, #2
 8004bb2:	42a6      	cmp	r6, r4
 8004bb4:	d105      	bne.n	8004bc2 <__libc_init_array+0x2e>
 8004bb6:	bd70      	pop	{r4, r5, r6, pc}
 8004bb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bbc:	4798      	blx	r3
 8004bbe:	3601      	adds	r6, #1
 8004bc0:	e7ee      	b.n	8004ba0 <__libc_init_array+0xc>
 8004bc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bc6:	4798      	blx	r3
 8004bc8:	3601      	adds	r6, #1
 8004bca:	e7f2      	b.n	8004bb2 <__libc_init_array+0x1e>
 8004bcc:	080060dc 	.word	0x080060dc
 8004bd0:	080060dc 	.word	0x080060dc
 8004bd4:	080060dc 	.word	0x080060dc
 8004bd8:	080060e0 	.word	0x080060e0

08004bdc <__retarget_lock_init_recursive>:
 8004bdc:	4770      	bx	lr

08004bde <__retarget_lock_acquire_recursive>:
 8004bde:	4770      	bx	lr

08004be0 <__retarget_lock_release_recursive>:
 8004be0:	4770      	bx	lr
	...

08004be4 <_free_r>:
 8004be4:	b538      	push	{r3, r4, r5, lr}
 8004be6:	4605      	mov	r5, r0
 8004be8:	2900      	cmp	r1, #0
 8004bea:	d040      	beq.n	8004c6e <_free_r+0x8a>
 8004bec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bf0:	1f0c      	subs	r4, r1, #4
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	bfb8      	it	lt
 8004bf6:	18e4      	addlt	r4, r4, r3
 8004bf8:	f000 f8de 	bl	8004db8 <__malloc_lock>
 8004bfc:	4a1c      	ldr	r2, [pc, #112]	@ (8004c70 <_free_r+0x8c>)
 8004bfe:	6813      	ldr	r3, [r2, #0]
 8004c00:	b933      	cbnz	r3, 8004c10 <_free_r+0x2c>
 8004c02:	6063      	str	r3, [r4, #4]
 8004c04:	6014      	str	r4, [r2, #0]
 8004c06:	4628      	mov	r0, r5
 8004c08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c0c:	f000 b8da 	b.w	8004dc4 <__malloc_unlock>
 8004c10:	42a3      	cmp	r3, r4
 8004c12:	d908      	bls.n	8004c26 <_free_r+0x42>
 8004c14:	6820      	ldr	r0, [r4, #0]
 8004c16:	1821      	adds	r1, r4, r0
 8004c18:	428b      	cmp	r3, r1
 8004c1a:	bf01      	itttt	eq
 8004c1c:	6819      	ldreq	r1, [r3, #0]
 8004c1e:	685b      	ldreq	r3, [r3, #4]
 8004c20:	1809      	addeq	r1, r1, r0
 8004c22:	6021      	streq	r1, [r4, #0]
 8004c24:	e7ed      	b.n	8004c02 <_free_r+0x1e>
 8004c26:	461a      	mov	r2, r3
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	b10b      	cbz	r3, 8004c30 <_free_r+0x4c>
 8004c2c:	42a3      	cmp	r3, r4
 8004c2e:	d9fa      	bls.n	8004c26 <_free_r+0x42>
 8004c30:	6811      	ldr	r1, [r2, #0]
 8004c32:	1850      	adds	r0, r2, r1
 8004c34:	42a0      	cmp	r0, r4
 8004c36:	d10b      	bne.n	8004c50 <_free_r+0x6c>
 8004c38:	6820      	ldr	r0, [r4, #0]
 8004c3a:	4401      	add	r1, r0
 8004c3c:	1850      	adds	r0, r2, r1
 8004c3e:	4283      	cmp	r3, r0
 8004c40:	6011      	str	r1, [r2, #0]
 8004c42:	d1e0      	bne.n	8004c06 <_free_r+0x22>
 8004c44:	6818      	ldr	r0, [r3, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	4408      	add	r0, r1
 8004c4a:	6010      	str	r0, [r2, #0]
 8004c4c:	6053      	str	r3, [r2, #4]
 8004c4e:	e7da      	b.n	8004c06 <_free_r+0x22>
 8004c50:	d902      	bls.n	8004c58 <_free_r+0x74>
 8004c52:	230c      	movs	r3, #12
 8004c54:	602b      	str	r3, [r5, #0]
 8004c56:	e7d6      	b.n	8004c06 <_free_r+0x22>
 8004c58:	6820      	ldr	r0, [r4, #0]
 8004c5a:	1821      	adds	r1, r4, r0
 8004c5c:	428b      	cmp	r3, r1
 8004c5e:	bf01      	itttt	eq
 8004c60:	6819      	ldreq	r1, [r3, #0]
 8004c62:	685b      	ldreq	r3, [r3, #4]
 8004c64:	1809      	addeq	r1, r1, r0
 8004c66:	6021      	streq	r1, [r4, #0]
 8004c68:	6063      	str	r3, [r4, #4]
 8004c6a:	6054      	str	r4, [r2, #4]
 8004c6c:	e7cb      	b.n	8004c06 <_free_r+0x22>
 8004c6e:	bd38      	pop	{r3, r4, r5, pc}
 8004c70:	2000037c 	.word	0x2000037c

08004c74 <sbrk_aligned>:
 8004c74:	b570      	push	{r4, r5, r6, lr}
 8004c76:	4e0f      	ldr	r6, [pc, #60]	@ (8004cb4 <sbrk_aligned+0x40>)
 8004c78:	460c      	mov	r4, r1
 8004c7a:	6831      	ldr	r1, [r6, #0]
 8004c7c:	4605      	mov	r5, r0
 8004c7e:	b911      	cbnz	r1, 8004c86 <sbrk_aligned+0x12>
 8004c80:	f000 fca4 	bl	80055cc <_sbrk_r>
 8004c84:	6030      	str	r0, [r6, #0]
 8004c86:	4621      	mov	r1, r4
 8004c88:	4628      	mov	r0, r5
 8004c8a:	f000 fc9f 	bl	80055cc <_sbrk_r>
 8004c8e:	1c43      	adds	r3, r0, #1
 8004c90:	d103      	bne.n	8004c9a <sbrk_aligned+0x26>
 8004c92:	f04f 34ff 	mov.w	r4, #4294967295
 8004c96:	4620      	mov	r0, r4
 8004c98:	bd70      	pop	{r4, r5, r6, pc}
 8004c9a:	1cc4      	adds	r4, r0, #3
 8004c9c:	f024 0403 	bic.w	r4, r4, #3
 8004ca0:	42a0      	cmp	r0, r4
 8004ca2:	d0f8      	beq.n	8004c96 <sbrk_aligned+0x22>
 8004ca4:	1a21      	subs	r1, r4, r0
 8004ca6:	4628      	mov	r0, r5
 8004ca8:	f000 fc90 	bl	80055cc <_sbrk_r>
 8004cac:	3001      	adds	r0, #1
 8004cae:	d1f2      	bne.n	8004c96 <sbrk_aligned+0x22>
 8004cb0:	e7ef      	b.n	8004c92 <sbrk_aligned+0x1e>
 8004cb2:	bf00      	nop
 8004cb4:	20000378 	.word	0x20000378

08004cb8 <_malloc_r>:
 8004cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cbc:	1ccd      	adds	r5, r1, #3
 8004cbe:	f025 0503 	bic.w	r5, r5, #3
 8004cc2:	3508      	adds	r5, #8
 8004cc4:	2d0c      	cmp	r5, #12
 8004cc6:	bf38      	it	cc
 8004cc8:	250c      	movcc	r5, #12
 8004cca:	2d00      	cmp	r5, #0
 8004ccc:	4606      	mov	r6, r0
 8004cce:	db01      	blt.n	8004cd4 <_malloc_r+0x1c>
 8004cd0:	42a9      	cmp	r1, r5
 8004cd2:	d904      	bls.n	8004cde <_malloc_r+0x26>
 8004cd4:	230c      	movs	r3, #12
 8004cd6:	6033      	str	r3, [r6, #0]
 8004cd8:	2000      	movs	r0, #0
 8004cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cde:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004db4 <_malloc_r+0xfc>
 8004ce2:	f000 f869 	bl	8004db8 <__malloc_lock>
 8004ce6:	f8d8 3000 	ldr.w	r3, [r8]
 8004cea:	461c      	mov	r4, r3
 8004cec:	bb44      	cbnz	r4, 8004d40 <_malloc_r+0x88>
 8004cee:	4629      	mov	r1, r5
 8004cf0:	4630      	mov	r0, r6
 8004cf2:	f7ff ffbf 	bl	8004c74 <sbrk_aligned>
 8004cf6:	1c43      	adds	r3, r0, #1
 8004cf8:	4604      	mov	r4, r0
 8004cfa:	d158      	bne.n	8004dae <_malloc_r+0xf6>
 8004cfc:	f8d8 4000 	ldr.w	r4, [r8]
 8004d00:	4627      	mov	r7, r4
 8004d02:	2f00      	cmp	r7, #0
 8004d04:	d143      	bne.n	8004d8e <_malloc_r+0xd6>
 8004d06:	2c00      	cmp	r4, #0
 8004d08:	d04b      	beq.n	8004da2 <_malloc_r+0xea>
 8004d0a:	6823      	ldr	r3, [r4, #0]
 8004d0c:	4639      	mov	r1, r7
 8004d0e:	4630      	mov	r0, r6
 8004d10:	eb04 0903 	add.w	r9, r4, r3
 8004d14:	f000 fc5a 	bl	80055cc <_sbrk_r>
 8004d18:	4581      	cmp	r9, r0
 8004d1a:	d142      	bne.n	8004da2 <_malloc_r+0xea>
 8004d1c:	6821      	ldr	r1, [r4, #0]
 8004d1e:	4630      	mov	r0, r6
 8004d20:	1a6d      	subs	r5, r5, r1
 8004d22:	4629      	mov	r1, r5
 8004d24:	f7ff ffa6 	bl	8004c74 <sbrk_aligned>
 8004d28:	3001      	adds	r0, #1
 8004d2a:	d03a      	beq.n	8004da2 <_malloc_r+0xea>
 8004d2c:	6823      	ldr	r3, [r4, #0]
 8004d2e:	442b      	add	r3, r5
 8004d30:	6023      	str	r3, [r4, #0]
 8004d32:	f8d8 3000 	ldr.w	r3, [r8]
 8004d36:	685a      	ldr	r2, [r3, #4]
 8004d38:	bb62      	cbnz	r2, 8004d94 <_malloc_r+0xdc>
 8004d3a:	f8c8 7000 	str.w	r7, [r8]
 8004d3e:	e00f      	b.n	8004d60 <_malloc_r+0xa8>
 8004d40:	6822      	ldr	r2, [r4, #0]
 8004d42:	1b52      	subs	r2, r2, r5
 8004d44:	d420      	bmi.n	8004d88 <_malloc_r+0xd0>
 8004d46:	2a0b      	cmp	r2, #11
 8004d48:	d917      	bls.n	8004d7a <_malloc_r+0xc2>
 8004d4a:	1961      	adds	r1, r4, r5
 8004d4c:	42a3      	cmp	r3, r4
 8004d4e:	6025      	str	r5, [r4, #0]
 8004d50:	bf18      	it	ne
 8004d52:	6059      	strne	r1, [r3, #4]
 8004d54:	6863      	ldr	r3, [r4, #4]
 8004d56:	bf08      	it	eq
 8004d58:	f8c8 1000 	streq.w	r1, [r8]
 8004d5c:	5162      	str	r2, [r4, r5]
 8004d5e:	604b      	str	r3, [r1, #4]
 8004d60:	4630      	mov	r0, r6
 8004d62:	f000 f82f 	bl	8004dc4 <__malloc_unlock>
 8004d66:	f104 000b 	add.w	r0, r4, #11
 8004d6a:	1d23      	adds	r3, r4, #4
 8004d6c:	f020 0007 	bic.w	r0, r0, #7
 8004d70:	1ac2      	subs	r2, r0, r3
 8004d72:	bf1c      	itt	ne
 8004d74:	1a1b      	subne	r3, r3, r0
 8004d76:	50a3      	strne	r3, [r4, r2]
 8004d78:	e7af      	b.n	8004cda <_malloc_r+0x22>
 8004d7a:	6862      	ldr	r2, [r4, #4]
 8004d7c:	42a3      	cmp	r3, r4
 8004d7e:	bf0c      	ite	eq
 8004d80:	f8c8 2000 	streq.w	r2, [r8]
 8004d84:	605a      	strne	r2, [r3, #4]
 8004d86:	e7eb      	b.n	8004d60 <_malloc_r+0xa8>
 8004d88:	4623      	mov	r3, r4
 8004d8a:	6864      	ldr	r4, [r4, #4]
 8004d8c:	e7ae      	b.n	8004cec <_malloc_r+0x34>
 8004d8e:	463c      	mov	r4, r7
 8004d90:	687f      	ldr	r7, [r7, #4]
 8004d92:	e7b6      	b.n	8004d02 <_malloc_r+0x4a>
 8004d94:	461a      	mov	r2, r3
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	42a3      	cmp	r3, r4
 8004d9a:	d1fb      	bne.n	8004d94 <_malloc_r+0xdc>
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	6053      	str	r3, [r2, #4]
 8004da0:	e7de      	b.n	8004d60 <_malloc_r+0xa8>
 8004da2:	230c      	movs	r3, #12
 8004da4:	4630      	mov	r0, r6
 8004da6:	6033      	str	r3, [r6, #0]
 8004da8:	f000 f80c 	bl	8004dc4 <__malloc_unlock>
 8004dac:	e794      	b.n	8004cd8 <_malloc_r+0x20>
 8004dae:	6005      	str	r5, [r0, #0]
 8004db0:	e7d6      	b.n	8004d60 <_malloc_r+0xa8>
 8004db2:	bf00      	nop
 8004db4:	2000037c 	.word	0x2000037c

08004db8 <__malloc_lock>:
 8004db8:	4801      	ldr	r0, [pc, #4]	@ (8004dc0 <__malloc_lock+0x8>)
 8004dba:	f7ff bf10 	b.w	8004bde <__retarget_lock_acquire_recursive>
 8004dbe:	bf00      	nop
 8004dc0:	20000374 	.word	0x20000374

08004dc4 <__malloc_unlock>:
 8004dc4:	4801      	ldr	r0, [pc, #4]	@ (8004dcc <__malloc_unlock+0x8>)
 8004dc6:	f7ff bf0b 	b.w	8004be0 <__retarget_lock_release_recursive>
 8004dca:	bf00      	nop
 8004dcc:	20000374 	.word	0x20000374

08004dd0 <__sfputc_r>:
 8004dd0:	6893      	ldr	r3, [r2, #8]
 8004dd2:	b410      	push	{r4}
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	6093      	str	r3, [r2, #8]
 8004dda:	da07      	bge.n	8004dec <__sfputc_r+0x1c>
 8004ddc:	6994      	ldr	r4, [r2, #24]
 8004dde:	42a3      	cmp	r3, r4
 8004de0:	db01      	blt.n	8004de6 <__sfputc_r+0x16>
 8004de2:	290a      	cmp	r1, #10
 8004de4:	d102      	bne.n	8004dec <__sfputc_r+0x1c>
 8004de6:	bc10      	pop	{r4}
 8004de8:	f7ff bdeb 	b.w	80049c2 <__swbuf_r>
 8004dec:	6813      	ldr	r3, [r2, #0]
 8004dee:	1c58      	adds	r0, r3, #1
 8004df0:	6010      	str	r0, [r2, #0]
 8004df2:	7019      	strb	r1, [r3, #0]
 8004df4:	4608      	mov	r0, r1
 8004df6:	bc10      	pop	{r4}
 8004df8:	4770      	bx	lr

08004dfa <__sfputs_r>:
 8004dfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dfc:	4606      	mov	r6, r0
 8004dfe:	460f      	mov	r7, r1
 8004e00:	4614      	mov	r4, r2
 8004e02:	18d5      	adds	r5, r2, r3
 8004e04:	42ac      	cmp	r4, r5
 8004e06:	d101      	bne.n	8004e0c <__sfputs_r+0x12>
 8004e08:	2000      	movs	r0, #0
 8004e0a:	e007      	b.n	8004e1c <__sfputs_r+0x22>
 8004e0c:	463a      	mov	r2, r7
 8004e0e:	4630      	mov	r0, r6
 8004e10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e14:	f7ff ffdc 	bl	8004dd0 <__sfputc_r>
 8004e18:	1c43      	adds	r3, r0, #1
 8004e1a:	d1f3      	bne.n	8004e04 <__sfputs_r+0xa>
 8004e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004e20 <_vfiprintf_r>:
 8004e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e24:	460d      	mov	r5, r1
 8004e26:	4614      	mov	r4, r2
 8004e28:	4698      	mov	r8, r3
 8004e2a:	4606      	mov	r6, r0
 8004e2c:	b09d      	sub	sp, #116	@ 0x74
 8004e2e:	b118      	cbz	r0, 8004e38 <_vfiprintf_r+0x18>
 8004e30:	6a03      	ldr	r3, [r0, #32]
 8004e32:	b90b      	cbnz	r3, 8004e38 <_vfiprintf_r+0x18>
 8004e34:	f7ff fcdc 	bl	80047f0 <__sinit>
 8004e38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004e3a:	07d9      	lsls	r1, r3, #31
 8004e3c:	d405      	bmi.n	8004e4a <_vfiprintf_r+0x2a>
 8004e3e:	89ab      	ldrh	r3, [r5, #12]
 8004e40:	059a      	lsls	r2, r3, #22
 8004e42:	d402      	bmi.n	8004e4a <_vfiprintf_r+0x2a>
 8004e44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004e46:	f7ff feca 	bl	8004bde <__retarget_lock_acquire_recursive>
 8004e4a:	89ab      	ldrh	r3, [r5, #12]
 8004e4c:	071b      	lsls	r3, r3, #28
 8004e4e:	d501      	bpl.n	8004e54 <_vfiprintf_r+0x34>
 8004e50:	692b      	ldr	r3, [r5, #16]
 8004e52:	b99b      	cbnz	r3, 8004e7c <_vfiprintf_r+0x5c>
 8004e54:	4629      	mov	r1, r5
 8004e56:	4630      	mov	r0, r6
 8004e58:	f7ff fdf2 	bl	8004a40 <__swsetup_r>
 8004e5c:	b170      	cbz	r0, 8004e7c <_vfiprintf_r+0x5c>
 8004e5e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004e60:	07dc      	lsls	r4, r3, #31
 8004e62:	d504      	bpl.n	8004e6e <_vfiprintf_r+0x4e>
 8004e64:	f04f 30ff 	mov.w	r0, #4294967295
 8004e68:	b01d      	add	sp, #116	@ 0x74
 8004e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e6e:	89ab      	ldrh	r3, [r5, #12]
 8004e70:	0598      	lsls	r0, r3, #22
 8004e72:	d4f7      	bmi.n	8004e64 <_vfiprintf_r+0x44>
 8004e74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004e76:	f7ff feb3 	bl	8004be0 <__retarget_lock_release_recursive>
 8004e7a:	e7f3      	b.n	8004e64 <_vfiprintf_r+0x44>
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e80:	2320      	movs	r3, #32
 8004e82:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004e86:	2330      	movs	r3, #48	@ 0x30
 8004e88:	f04f 0901 	mov.w	r9, #1
 8004e8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e90:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800503c <_vfiprintf_r+0x21c>
 8004e94:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004e98:	4623      	mov	r3, r4
 8004e9a:	469a      	mov	sl, r3
 8004e9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ea0:	b10a      	cbz	r2, 8004ea6 <_vfiprintf_r+0x86>
 8004ea2:	2a25      	cmp	r2, #37	@ 0x25
 8004ea4:	d1f9      	bne.n	8004e9a <_vfiprintf_r+0x7a>
 8004ea6:	ebba 0b04 	subs.w	fp, sl, r4
 8004eaa:	d00b      	beq.n	8004ec4 <_vfiprintf_r+0xa4>
 8004eac:	465b      	mov	r3, fp
 8004eae:	4622      	mov	r2, r4
 8004eb0:	4629      	mov	r1, r5
 8004eb2:	4630      	mov	r0, r6
 8004eb4:	f7ff ffa1 	bl	8004dfa <__sfputs_r>
 8004eb8:	3001      	adds	r0, #1
 8004eba:	f000 80a7 	beq.w	800500c <_vfiprintf_r+0x1ec>
 8004ebe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ec0:	445a      	add	r2, fp
 8004ec2:	9209      	str	r2, [sp, #36]	@ 0x24
 8004ec4:	f89a 3000 	ldrb.w	r3, [sl]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 809f 	beq.w	800500c <_vfiprintf_r+0x1ec>
 8004ece:	2300      	movs	r3, #0
 8004ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ed4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ed8:	f10a 0a01 	add.w	sl, sl, #1
 8004edc:	9304      	str	r3, [sp, #16]
 8004ede:	9307      	str	r3, [sp, #28]
 8004ee0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004ee4:	931a      	str	r3, [sp, #104]	@ 0x68
 8004ee6:	4654      	mov	r4, sl
 8004ee8:	2205      	movs	r2, #5
 8004eea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004eee:	4853      	ldr	r0, [pc, #332]	@ (800503c <_vfiprintf_r+0x21c>)
 8004ef0:	f000 fb7c 	bl	80055ec <memchr>
 8004ef4:	9a04      	ldr	r2, [sp, #16]
 8004ef6:	b9d8      	cbnz	r0, 8004f30 <_vfiprintf_r+0x110>
 8004ef8:	06d1      	lsls	r1, r2, #27
 8004efa:	bf44      	itt	mi
 8004efc:	2320      	movmi	r3, #32
 8004efe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f02:	0713      	lsls	r3, r2, #28
 8004f04:	bf44      	itt	mi
 8004f06:	232b      	movmi	r3, #43	@ 0x2b
 8004f08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f0c:	f89a 3000 	ldrb.w	r3, [sl]
 8004f10:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f12:	d015      	beq.n	8004f40 <_vfiprintf_r+0x120>
 8004f14:	4654      	mov	r4, sl
 8004f16:	2000      	movs	r0, #0
 8004f18:	f04f 0c0a 	mov.w	ip, #10
 8004f1c:	9a07      	ldr	r2, [sp, #28]
 8004f1e:	4621      	mov	r1, r4
 8004f20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f24:	3b30      	subs	r3, #48	@ 0x30
 8004f26:	2b09      	cmp	r3, #9
 8004f28:	d94b      	bls.n	8004fc2 <_vfiprintf_r+0x1a2>
 8004f2a:	b1b0      	cbz	r0, 8004f5a <_vfiprintf_r+0x13a>
 8004f2c:	9207      	str	r2, [sp, #28]
 8004f2e:	e014      	b.n	8004f5a <_vfiprintf_r+0x13a>
 8004f30:	eba0 0308 	sub.w	r3, r0, r8
 8004f34:	fa09 f303 	lsl.w	r3, r9, r3
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	46a2      	mov	sl, r4
 8004f3c:	9304      	str	r3, [sp, #16]
 8004f3e:	e7d2      	b.n	8004ee6 <_vfiprintf_r+0xc6>
 8004f40:	9b03      	ldr	r3, [sp, #12]
 8004f42:	1d19      	adds	r1, r3, #4
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	9103      	str	r1, [sp, #12]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	bfbb      	ittet	lt
 8004f4c:	425b      	neglt	r3, r3
 8004f4e:	f042 0202 	orrlt.w	r2, r2, #2
 8004f52:	9307      	strge	r3, [sp, #28]
 8004f54:	9307      	strlt	r3, [sp, #28]
 8004f56:	bfb8      	it	lt
 8004f58:	9204      	strlt	r2, [sp, #16]
 8004f5a:	7823      	ldrb	r3, [r4, #0]
 8004f5c:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f5e:	d10a      	bne.n	8004f76 <_vfiprintf_r+0x156>
 8004f60:	7863      	ldrb	r3, [r4, #1]
 8004f62:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f64:	d132      	bne.n	8004fcc <_vfiprintf_r+0x1ac>
 8004f66:	9b03      	ldr	r3, [sp, #12]
 8004f68:	3402      	adds	r4, #2
 8004f6a:	1d1a      	adds	r2, r3, #4
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	9203      	str	r2, [sp, #12]
 8004f70:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004f74:	9305      	str	r3, [sp, #20]
 8004f76:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005040 <_vfiprintf_r+0x220>
 8004f7a:	2203      	movs	r2, #3
 8004f7c:	4650      	mov	r0, sl
 8004f7e:	7821      	ldrb	r1, [r4, #0]
 8004f80:	f000 fb34 	bl	80055ec <memchr>
 8004f84:	b138      	cbz	r0, 8004f96 <_vfiprintf_r+0x176>
 8004f86:	2240      	movs	r2, #64	@ 0x40
 8004f88:	9b04      	ldr	r3, [sp, #16]
 8004f8a:	eba0 000a 	sub.w	r0, r0, sl
 8004f8e:	4082      	lsls	r2, r0
 8004f90:	4313      	orrs	r3, r2
 8004f92:	3401      	adds	r4, #1
 8004f94:	9304      	str	r3, [sp, #16]
 8004f96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f9a:	2206      	movs	r2, #6
 8004f9c:	4829      	ldr	r0, [pc, #164]	@ (8005044 <_vfiprintf_r+0x224>)
 8004f9e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004fa2:	f000 fb23 	bl	80055ec <memchr>
 8004fa6:	2800      	cmp	r0, #0
 8004fa8:	d03f      	beq.n	800502a <_vfiprintf_r+0x20a>
 8004faa:	4b27      	ldr	r3, [pc, #156]	@ (8005048 <_vfiprintf_r+0x228>)
 8004fac:	bb1b      	cbnz	r3, 8004ff6 <_vfiprintf_r+0x1d6>
 8004fae:	9b03      	ldr	r3, [sp, #12]
 8004fb0:	3307      	adds	r3, #7
 8004fb2:	f023 0307 	bic.w	r3, r3, #7
 8004fb6:	3308      	adds	r3, #8
 8004fb8:	9303      	str	r3, [sp, #12]
 8004fba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fbc:	443b      	add	r3, r7
 8004fbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8004fc0:	e76a      	b.n	8004e98 <_vfiprintf_r+0x78>
 8004fc2:	460c      	mov	r4, r1
 8004fc4:	2001      	movs	r0, #1
 8004fc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fca:	e7a8      	b.n	8004f1e <_vfiprintf_r+0xfe>
 8004fcc:	2300      	movs	r3, #0
 8004fce:	f04f 0c0a 	mov.w	ip, #10
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	3401      	adds	r4, #1
 8004fd6:	9305      	str	r3, [sp, #20]
 8004fd8:	4620      	mov	r0, r4
 8004fda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fde:	3a30      	subs	r2, #48	@ 0x30
 8004fe0:	2a09      	cmp	r2, #9
 8004fe2:	d903      	bls.n	8004fec <_vfiprintf_r+0x1cc>
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d0c6      	beq.n	8004f76 <_vfiprintf_r+0x156>
 8004fe8:	9105      	str	r1, [sp, #20]
 8004fea:	e7c4      	b.n	8004f76 <_vfiprintf_r+0x156>
 8004fec:	4604      	mov	r4, r0
 8004fee:	2301      	movs	r3, #1
 8004ff0:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ff4:	e7f0      	b.n	8004fd8 <_vfiprintf_r+0x1b8>
 8004ff6:	ab03      	add	r3, sp, #12
 8004ff8:	9300      	str	r3, [sp, #0]
 8004ffa:	462a      	mov	r2, r5
 8004ffc:	4630      	mov	r0, r6
 8004ffe:	4b13      	ldr	r3, [pc, #76]	@ (800504c <_vfiprintf_r+0x22c>)
 8005000:	a904      	add	r1, sp, #16
 8005002:	f3af 8000 	nop.w
 8005006:	4607      	mov	r7, r0
 8005008:	1c78      	adds	r0, r7, #1
 800500a:	d1d6      	bne.n	8004fba <_vfiprintf_r+0x19a>
 800500c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800500e:	07d9      	lsls	r1, r3, #31
 8005010:	d405      	bmi.n	800501e <_vfiprintf_r+0x1fe>
 8005012:	89ab      	ldrh	r3, [r5, #12]
 8005014:	059a      	lsls	r2, r3, #22
 8005016:	d402      	bmi.n	800501e <_vfiprintf_r+0x1fe>
 8005018:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800501a:	f7ff fde1 	bl	8004be0 <__retarget_lock_release_recursive>
 800501e:	89ab      	ldrh	r3, [r5, #12]
 8005020:	065b      	lsls	r3, r3, #25
 8005022:	f53f af1f 	bmi.w	8004e64 <_vfiprintf_r+0x44>
 8005026:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005028:	e71e      	b.n	8004e68 <_vfiprintf_r+0x48>
 800502a:	ab03      	add	r3, sp, #12
 800502c:	9300      	str	r3, [sp, #0]
 800502e:	462a      	mov	r2, r5
 8005030:	4630      	mov	r0, r6
 8005032:	4b06      	ldr	r3, [pc, #24]	@ (800504c <_vfiprintf_r+0x22c>)
 8005034:	a904      	add	r1, sp, #16
 8005036:	f000 f87d 	bl	8005134 <_printf_i>
 800503a:	e7e4      	b.n	8005006 <_vfiprintf_r+0x1e6>
 800503c:	080060a6 	.word	0x080060a6
 8005040:	080060ac 	.word	0x080060ac
 8005044:	080060b0 	.word	0x080060b0
 8005048:	00000000 	.word	0x00000000
 800504c:	08004dfb 	.word	0x08004dfb

08005050 <_printf_common>:
 8005050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005054:	4616      	mov	r6, r2
 8005056:	4698      	mov	r8, r3
 8005058:	688a      	ldr	r2, [r1, #8]
 800505a:	690b      	ldr	r3, [r1, #16]
 800505c:	4607      	mov	r7, r0
 800505e:	4293      	cmp	r3, r2
 8005060:	bfb8      	it	lt
 8005062:	4613      	movlt	r3, r2
 8005064:	6033      	str	r3, [r6, #0]
 8005066:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800506a:	460c      	mov	r4, r1
 800506c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005070:	b10a      	cbz	r2, 8005076 <_printf_common+0x26>
 8005072:	3301      	adds	r3, #1
 8005074:	6033      	str	r3, [r6, #0]
 8005076:	6823      	ldr	r3, [r4, #0]
 8005078:	0699      	lsls	r1, r3, #26
 800507a:	bf42      	ittt	mi
 800507c:	6833      	ldrmi	r3, [r6, #0]
 800507e:	3302      	addmi	r3, #2
 8005080:	6033      	strmi	r3, [r6, #0]
 8005082:	6825      	ldr	r5, [r4, #0]
 8005084:	f015 0506 	ands.w	r5, r5, #6
 8005088:	d106      	bne.n	8005098 <_printf_common+0x48>
 800508a:	f104 0a19 	add.w	sl, r4, #25
 800508e:	68e3      	ldr	r3, [r4, #12]
 8005090:	6832      	ldr	r2, [r6, #0]
 8005092:	1a9b      	subs	r3, r3, r2
 8005094:	42ab      	cmp	r3, r5
 8005096:	dc2b      	bgt.n	80050f0 <_printf_common+0xa0>
 8005098:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800509c:	6822      	ldr	r2, [r4, #0]
 800509e:	3b00      	subs	r3, #0
 80050a0:	bf18      	it	ne
 80050a2:	2301      	movne	r3, #1
 80050a4:	0692      	lsls	r2, r2, #26
 80050a6:	d430      	bmi.n	800510a <_printf_common+0xba>
 80050a8:	4641      	mov	r1, r8
 80050aa:	4638      	mov	r0, r7
 80050ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80050b0:	47c8      	blx	r9
 80050b2:	3001      	adds	r0, #1
 80050b4:	d023      	beq.n	80050fe <_printf_common+0xae>
 80050b6:	6823      	ldr	r3, [r4, #0]
 80050b8:	6922      	ldr	r2, [r4, #16]
 80050ba:	f003 0306 	and.w	r3, r3, #6
 80050be:	2b04      	cmp	r3, #4
 80050c0:	bf14      	ite	ne
 80050c2:	2500      	movne	r5, #0
 80050c4:	6833      	ldreq	r3, [r6, #0]
 80050c6:	f04f 0600 	mov.w	r6, #0
 80050ca:	bf08      	it	eq
 80050cc:	68e5      	ldreq	r5, [r4, #12]
 80050ce:	f104 041a 	add.w	r4, r4, #26
 80050d2:	bf08      	it	eq
 80050d4:	1aed      	subeq	r5, r5, r3
 80050d6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80050da:	bf08      	it	eq
 80050dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050e0:	4293      	cmp	r3, r2
 80050e2:	bfc4      	itt	gt
 80050e4:	1a9b      	subgt	r3, r3, r2
 80050e6:	18ed      	addgt	r5, r5, r3
 80050e8:	42b5      	cmp	r5, r6
 80050ea:	d11a      	bne.n	8005122 <_printf_common+0xd2>
 80050ec:	2000      	movs	r0, #0
 80050ee:	e008      	b.n	8005102 <_printf_common+0xb2>
 80050f0:	2301      	movs	r3, #1
 80050f2:	4652      	mov	r2, sl
 80050f4:	4641      	mov	r1, r8
 80050f6:	4638      	mov	r0, r7
 80050f8:	47c8      	blx	r9
 80050fa:	3001      	adds	r0, #1
 80050fc:	d103      	bne.n	8005106 <_printf_common+0xb6>
 80050fe:	f04f 30ff 	mov.w	r0, #4294967295
 8005102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005106:	3501      	adds	r5, #1
 8005108:	e7c1      	b.n	800508e <_printf_common+0x3e>
 800510a:	2030      	movs	r0, #48	@ 0x30
 800510c:	18e1      	adds	r1, r4, r3
 800510e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005112:	1c5a      	adds	r2, r3, #1
 8005114:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005118:	4422      	add	r2, r4
 800511a:	3302      	adds	r3, #2
 800511c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005120:	e7c2      	b.n	80050a8 <_printf_common+0x58>
 8005122:	2301      	movs	r3, #1
 8005124:	4622      	mov	r2, r4
 8005126:	4641      	mov	r1, r8
 8005128:	4638      	mov	r0, r7
 800512a:	47c8      	blx	r9
 800512c:	3001      	adds	r0, #1
 800512e:	d0e6      	beq.n	80050fe <_printf_common+0xae>
 8005130:	3601      	adds	r6, #1
 8005132:	e7d9      	b.n	80050e8 <_printf_common+0x98>

08005134 <_printf_i>:
 8005134:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005138:	7e0f      	ldrb	r7, [r1, #24]
 800513a:	4691      	mov	r9, r2
 800513c:	2f78      	cmp	r7, #120	@ 0x78
 800513e:	4680      	mov	r8, r0
 8005140:	460c      	mov	r4, r1
 8005142:	469a      	mov	sl, r3
 8005144:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005146:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800514a:	d807      	bhi.n	800515c <_printf_i+0x28>
 800514c:	2f62      	cmp	r7, #98	@ 0x62
 800514e:	d80a      	bhi.n	8005166 <_printf_i+0x32>
 8005150:	2f00      	cmp	r7, #0
 8005152:	f000 80d3 	beq.w	80052fc <_printf_i+0x1c8>
 8005156:	2f58      	cmp	r7, #88	@ 0x58
 8005158:	f000 80ba 	beq.w	80052d0 <_printf_i+0x19c>
 800515c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005160:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005164:	e03a      	b.n	80051dc <_printf_i+0xa8>
 8005166:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800516a:	2b15      	cmp	r3, #21
 800516c:	d8f6      	bhi.n	800515c <_printf_i+0x28>
 800516e:	a101      	add	r1, pc, #4	@ (adr r1, 8005174 <_printf_i+0x40>)
 8005170:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005174:	080051cd 	.word	0x080051cd
 8005178:	080051e1 	.word	0x080051e1
 800517c:	0800515d 	.word	0x0800515d
 8005180:	0800515d 	.word	0x0800515d
 8005184:	0800515d 	.word	0x0800515d
 8005188:	0800515d 	.word	0x0800515d
 800518c:	080051e1 	.word	0x080051e1
 8005190:	0800515d 	.word	0x0800515d
 8005194:	0800515d 	.word	0x0800515d
 8005198:	0800515d 	.word	0x0800515d
 800519c:	0800515d 	.word	0x0800515d
 80051a0:	080052e3 	.word	0x080052e3
 80051a4:	0800520b 	.word	0x0800520b
 80051a8:	0800529d 	.word	0x0800529d
 80051ac:	0800515d 	.word	0x0800515d
 80051b0:	0800515d 	.word	0x0800515d
 80051b4:	08005305 	.word	0x08005305
 80051b8:	0800515d 	.word	0x0800515d
 80051bc:	0800520b 	.word	0x0800520b
 80051c0:	0800515d 	.word	0x0800515d
 80051c4:	0800515d 	.word	0x0800515d
 80051c8:	080052a5 	.word	0x080052a5
 80051cc:	6833      	ldr	r3, [r6, #0]
 80051ce:	1d1a      	adds	r2, r3, #4
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	6032      	str	r2, [r6, #0]
 80051d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80051d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80051dc:	2301      	movs	r3, #1
 80051de:	e09e      	b.n	800531e <_printf_i+0x1ea>
 80051e0:	6833      	ldr	r3, [r6, #0]
 80051e2:	6820      	ldr	r0, [r4, #0]
 80051e4:	1d19      	adds	r1, r3, #4
 80051e6:	6031      	str	r1, [r6, #0]
 80051e8:	0606      	lsls	r6, r0, #24
 80051ea:	d501      	bpl.n	80051f0 <_printf_i+0xbc>
 80051ec:	681d      	ldr	r5, [r3, #0]
 80051ee:	e003      	b.n	80051f8 <_printf_i+0xc4>
 80051f0:	0645      	lsls	r5, r0, #25
 80051f2:	d5fb      	bpl.n	80051ec <_printf_i+0xb8>
 80051f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80051f8:	2d00      	cmp	r5, #0
 80051fa:	da03      	bge.n	8005204 <_printf_i+0xd0>
 80051fc:	232d      	movs	r3, #45	@ 0x2d
 80051fe:	426d      	negs	r5, r5
 8005200:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005204:	230a      	movs	r3, #10
 8005206:	4859      	ldr	r0, [pc, #356]	@ (800536c <_printf_i+0x238>)
 8005208:	e011      	b.n	800522e <_printf_i+0xfa>
 800520a:	6821      	ldr	r1, [r4, #0]
 800520c:	6833      	ldr	r3, [r6, #0]
 800520e:	0608      	lsls	r0, r1, #24
 8005210:	f853 5b04 	ldr.w	r5, [r3], #4
 8005214:	d402      	bmi.n	800521c <_printf_i+0xe8>
 8005216:	0649      	lsls	r1, r1, #25
 8005218:	bf48      	it	mi
 800521a:	b2ad      	uxthmi	r5, r5
 800521c:	2f6f      	cmp	r7, #111	@ 0x6f
 800521e:	6033      	str	r3, [r6, #0]
 8005220:	bf14      	ite	ne
 8005222:	230a      	movne	r3, #10
 8005224:	2308      	moveq	r3, #8
 8005226:	4851      	ldr	r0, [pc, #324]	@ (800536c <_printf_i+0x238>)
 8005228:	2100      	movs	r1, #0
 800522a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800522e:	6866      	ldr	r6, [r4, #4]
 8005230:	2e00      	cmp	r6, #0
 8005232:	bfa8      	it	ge
 8005234:	6821      	ldrge	r1, [r4, #0]
 8005236:	60a6      	str	r6, [r4, #8]
 8005238:	bfa4      	itt	ge
 800523a:	f021 0104 	bicge.w	r1, r1, #4
 800523e:	6021      	strge	r1, [r4, #0]
 8005240:	b90d      	cbnz	r5, 8005246 <_printf_i+0x112>
 8005242:	2e00      	cmp	r6, #0
 8005244:	d04b      	beq.n	80052de <_printf_i+0x1aa>
 8005246:	4616      	mov	r6, r2
 8005248:	fbb5 f1f3 	udiv	r1, r5, r3
 800524c:	fb03 5711 	mls	r7, r3, r1, r5
 8005250:	5dc7      	ldrb	r7, [r0, r7]
 8005252:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005256:	462f      	mov	r7, r5
 8005258:	42bb      	cmp	r3, r7
 800525a:	460d      	mov	r5, r1
 800525c:	d9f4      	bls.n	8005248 <_printf_i+0x114>
 800525e:	2b08      	cmp	r3, #8
 8005260:	d10b      	bne.n	800527a <_printf_i+0x146>
 8005262:	6823      	ldr	r3, [r4, #0]
 8005264:	07df      	lsls	r7, r3, #31
 8005266:	d508      	bpl.n	800527a <_printf_i+0x146>
 8005268:	6923      	ldr	r3, [r4, #16]
 800526a:	6861      	ldr	r1, [r4, #4]
 800526c:	4299      	cmp	r1, r3
 800526e:	bfde      	ittt	le
 8005270:	2330      	movle	r3, #48	@ 0x30
 8005272:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005276:	f106 36ff 	addle.w	r6, r6, #4294967295
 800527a:	1b92      	subs	r2, r2, r6
 800527c:	6122      	str	r2, [r4, #16]
 800527e:	464b      	mov	r3, r9
 8005280:	4621      	mov	r1, r4
 8005282:	4640      	mov	r0, r8
 8005284:	f8cd a000 	str.w	sl, [sp]
 8005288:	aa03      	add	r2, sp, #12
 800528a:	f7ff fee1 	bl	8005050 <_printf_common>
 800528e:	3001      	adds	r0, #1
 8005290:	d14a      	bne.n	8005328 <_printf_i+0x1f4>
 8005292:	f04f 30ff 	mov.w	r0, #4294967295
 8005296:	b004      	add	sp, #16
 8005298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800529c:	6823      	ldr	r3, [r4, #0]
 800529e:	f043 0320 	orr.w	r3, r3, #32
 80052a2:	6023      	str	r3, [r4, #0]
 80052a4:	2778      	movs	r7, #120	@ 0x78
 80052a6:	4832      	ldr	r0, [pc, #200]	@ (8005370 <_printf_i+0x23c>)
 80052a8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80052ac:	6823      	ldr	r3, [r4, #0]
 80052ae:	6831      	ldr	r1, [r6, #0]
 80052b0:	061f      	lsls	r7, r3, #24
 80052b2:	f851 5b04 	ldr.w	r5, [r1], #4
 80052b6:	d402      	bmi.n	80052be <_printf_i+0x18a>
 80052b8:	065f      	lsls	r7, r3, #25
 80052ba:	bf48      	it	mi
 80052bc:	b2ad      	uxthmi	r5, r5
 80052be:	6031      	str	r1, [r6, #0]
 80052c0:	07d9      	lsls	r1, r3, #31
 80052c2:	bf44      	itt	mi
 80052c4:	f043 0320 	orrmi.w	r3, r3, #32
 80052c8:	6023      	strmi	r3, [r4, #0]
 80052ca:	b11d      	cbz	r5, 80052d4 <_printf_i+0x1a0>
 80052cc:	2310      	movs	r3, #16
 80052ce:	e7ab      	b.n	8005228 <_printf_i+0xf4>
 80052d0:	4826      	ldr	r0, [pc, #152]	@ (800536c <_printf_i+0x238>)
 80052d2:	e7e9      	b.n	80052a8 <_printf_i+0x174>
 80052d4:	6823      	ldr	r3, [r4, #0]
 80052d6:	f023 0320 	bic.w	r3, r3, #32
 80052da:	6023      	str	r3, [r4, #0]
 80052dc:	e7f6      	b.n	80052cc <_printf_i+0x198>
 80052de:	4616      	mov	r6, r2
 80052e0:	e7bd      	b.n	800525e <_printf_i+0x12a>
 80052e2:	6833      	ldr	r3, [r6, #0]
 80052e4:	6825      	ldr	r5, [r4, #0]
 80052e6:	1d18      	adds	r0, r3, #4
 80052e8:	6961      	ldr	r1, [r4, #20]
 80052ea:	6030      	str	r0, [r6, #0]
 80052ec:	062e      	lsls	r6, r5, #24
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	d501      	bpl.n	80052f6 <_printf_i+0x1c2>
 80052f2:	6019      	str	r1, [r3, #0]
 80052f4:	e002      	b.n	80052fc <_printf_i+0x1c8>
 80052f6:	0668      	lsls	r0, r5, #25
 80052f8:	d5fb      	bpl.n	80052f2 <_printf_i+0x1be>
 80052fa:	8019      	strh	r1, [r3, #0]
 80052fc:	2300      	movs	r3, #0
 80052fe:	4616      	mov	r6, r2
 8005300:	6123      	str	r3, [r4, #16]
 8005302:	e7bc      	b.n	800527e <_printf_i+0x14a>
 8005304:	6833      	ldr	r3, [r6, #0]
 8005306:	2100      	movs	r1, #0
 8005308:	1d1a      	adds	r2, r3, #4
 800530a:	6032      	str	r2, [r6, #0]
 800530c:	681e      	ldr	r6, [r3, #0]
 800530e:	6862      	ldr	r2, [r4, #4]
 8005310:	4630      	mov	r0, r6
 8005312:	f000 f96b 	bl	80055ec <memchr>
 8005316:	b108      	cbz	r0, 800531c <_printf_i+0x1e8>
 8005318:	1b80      	subs	r0, r0, r6
 800531a:	6060      	str	r0, [r4, #4]
 800531c:	6863      	ldr	r3, [r4, #4]
 800531e:	6123      	str	r3, [r4, #16]
 8005320:	2300      	movs	r3, #0
 8005322:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005326:	e7aa      	b.n	800527e <_printf_i+0x14a>
 8005328:	4632      	mov	r2, r6
 800532a:	4649      	mov	r1, r9
 800532c:	4640      	mov	r0, r8
 800532e:	6923      	ldr	r3, [r4, #16]
 8005330:	47d0      	blx	sl
 8005332:	3001      	adds	r0, #1
 8005334:	d0ad      	beq.n	8005292 <_printf_i+0x15e>
 8005336:	6823      	ldr	r3, [r4, #0]
 8005338:	079b      	lsls	r3, r3, #30
 800533a:	d413      	bmi.n	8005364 <_printf_i+0x230>
 800533c:	68e0      	ldr	r0, [r4, #12]
 800533e:	9b03      	ldr	r3, [sp, #12]
 8005340:	4298      	cmp	r0, r3
 8005342:	bfb8      	it	lt
 8005344:	4618      	movlt	r0, r3
 8005346:	e7a6      	b.n	8005296 <_printf_i+0x162>
 8005348:	2301      	movs	r3, #1
 800534a:	4632      	mov	r2, r6
 800534c:	4649      	mov	r1, r9
 800534e:	4640      	mov	r0, r8
 8005350:	47d0      	blx	sl
 8005352:	3001      	adds	r0, #1
 8005354:	d09d      	beq.n	8005292 <_printf_i+0x15e>
 8005356:	3501      	adds	r5, #1
 8005358:	68e3      	ldr	r3, [r4, #12]
 800535a:	9903      	ldr	r1, [sp, #12]
 800535c:	1a5b      	subs	r3, r3, r1
 800535e:	42ab      	cmp	r3, r5
 8005360:	dcf2      	bgt.n	8005348 <_printf_i+0x214>
 8005362:	e7eb      	b.n	800533c <_printf_i+0x208>
 8005364:	2500      	movs	r5, #0
 8005366:	f104 0619 	add.w	r6, r4, #25
 800536a:	e7f5      	b.n	8005358 <_printf_i+0x224>
 800536c:	080060b7 	.word	0x080060b7
 8005370:	080060c8 	.word	0x080060c8

08005374 <__sflush_r>:
 8005374:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800537a:	0716      	lsls	r6, r2, #28
 800537c:	4605      	mov	r5, r0
 800537e:	460c      	mov	r4, r1
 8005380:	d454      	bmi.n	800542c <__sflush_r+0xb8>
 8005382:	684b      	ldr	r3, [r1, #4]
 8005384:	2b00      	cmp	r3, #0
 8005386:	dc02      	bgt.n	800538e <__sflush_r+0x1a>
 8005388:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800538a:	2b00      	cmp	r3, #0
 800538c:	dd48      	ble.n	8005420 <__sflush_r+0xac>
 800538e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005390:	2e00      	cmp	r6, #0
 8005392:	d045      	beq.n	8005420 <__sflush_r+0xac>
 8005394:	2300      	movs	r3, #0
 8005396:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800539a:	682f      	ldr	r7, [r5, #0]
 800539c:	6a21      	ldr	r1, [r4, #32]
 800539e:	602b      	str	r3, [r5, #0]
 80053a0:	d030      	beq.n	8005404 <__sflush_r+0x90>
 80053a2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80053a4:	89a3      	ldrh	r3, [r4, #12]
 80053a6:	0759      	lsls	r1, r3, #29
 80053a8:	d505      	bpl.n	80053b6 <__sflush_r+0x42>
 80053aa:	6863      	ldr	r3, [r4, #4]
 80053ac:	1ad2      	subs	r2, r2, r3
 80053ae:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80053b0:	b10b      	cbz	r3, 80053b6 <__sflush_r+0x42>
 80053b2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80053b4:	1ad2      	subs	r2, r2, r3
 80053b6:	2300      	movs	r3, #0
 80053b8:	4628      	mov	r0, r5
 80053ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80053bc:	6a21      	ldr	r1, [r4, #32]
 80053be:	47b0      	blx	r6
 80053c0:	1c43      	adds	r3, r0, #1
 80053c2:	89a3      	ldrh	r3, [r4, #12]
 80053c4:	d106      	bne.n	80053d4 <__sflush_r+0x60>
 80053c6:	6829      	ldr	r1, [r5, #0]
 80053c8:	291d      	cmp	r1, #29
 80053ca:	d82b      	bhi.n	8005424 <__sflush_r+0xb0>
 80053cc:	4a28      	ldr	r2, [pc, #160]	@ (8005470 <__sflush_r+0xfc>)
 80053ce:	410a      	asrs	r2, r1
 80053d0:	07d6      	lsls	r6, r2, #31
 80053d2:	d427      	bmi.n	8005424 <__sflush_r+0xb0>
 80053d4:	2200      	movs	r2, #0
 80053d6:	6062      	str	r2, [r4, #4]
 80053d8:	6922      	ldr	r2, [r4, #16]
 80053da:	04d9      	lsls	r1, r3, #19
 80053dc:	6022      	str	r2, [r4, #0]
 80053de:	d504      	bpl.n	80053ea <__sflush_r+0x76>
 80053e0:	1c42      	adds	r2, r0, #1
 80053e2:	d101      	bne.n	80053e8 <__sflush_r+0x74>
 80053e4:	682b      	ldr	r3, [r5, #0]
 80053e6:	b903      	cbnz	r3, 80053ea <__sflush_r+0x76>
 80053e8:	6560      	str	r0, [r4, #84]	@ 0x54
 80053ea:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80053ec:	602f      	str	r7, [r5, #0]
 80053ee:	b1b9      	cbz	r1, 8005420 <__sflush_r+0xac>
 80053f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80053f4:	4299      	cmp	r1, r3
 80053f6:	d002      	beq.n	80053fe <__sflush_r+0x8a>
 80053f8:	4628      	mov	r0, r5
 80053fa:	f7ff fbf3 	bl	8004be4 <_free_r>
 80053fe:	2300      	movs	r3, #0
 8005400:	6363      	str	r3, [r4, #52]	@ 0x34
 8005402:	e00d      	b.n	8005420 <__sflush_r+0xac>
 8005404:	2301      	movs	r3, #1
 8005406:	4628      	mov	r0, r5
 8005408:	47b0      	blx	r6
 800540a:	4602      	mov	r2, r0
 800540c:	1c50      	adds	r0, r2, #1
 800540e:	d1c9      	bne.n	80053a4 <__sflush_r+0x30>
 8005410:	682b      	ldr	r3, [r5, #0]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d0c6      	beq.n	80053a4 <__sflush_r+0x30>
 8005416:	2b1d      	cmp	r3, #29
 8005418:	d001      	beq.n	800541e <__sflush_r+0xaa>
 800541a:	2b16      	cmp	r3, #22
 800541c:	d11d      	bne.n	800545a <__sflush_r+0xe6>
 800541e:	602f      	str	r7, [r5, #0]
 8005420:	2000      	movs	r0, #0
 8005422:	e021      	b.n	8005468 <__sflush_r+0xf4>
 8005424:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005428:	b21b      	sxth	r3, r3
 800542a:	e01a      	b.n	8005462 <__sflush_r+0xee>
 800542c:	690f      	ldr	r7, [r1, #16]
 800542e:	2f00      	cmp	r7, #0
 8005430:	d0f6      	beq.n	8005420 <__sflush_r+0xac>
 8005432:	0793      	lsls	r3, r2, #30
 8005434:	bf18      	it	ne
 8005436:	2300      	movne	r3, #0
 8005438:	680e      	ldr	r6, [r1, #0]
 800543a:	bf08      	it	eq
 800543c:	694b      	ldreq	r3, [r1, #20]
 800543e:	1bf6      	subs	r6, r6, r7
 8005440:	600f      	str	r7, [r1, #0]
 8005442:	608b      	str	r3, [r1, #8]
 8005444:	2e00      	cmp	r6, #0
 8005446:	ddeb      	ble.n	8005420 <__sflush_r+0xac>
 8005448:	4633      	mov	r3, r6
 800544a:	463a      	mov	r2, r7
 800544c:	4628      	mov	r0, r5
 800544e:	6a21      	ldr	r1, [r4, #32]
 8005450:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005454:	47e0      	blx	ip
 8005456:	2800      	cmp	r0, #0
 8005458:	dc07      	bgt.n	800546a <__sflush_r+0xf6>
 800545a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800545e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005462:	f04f 30ff 	mov.w	r0, #4294967295
 8005466:	81a3      	strh	r3, [r4, #12]
 8005468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800546a:	4407      	add	r7, r0
 800546c:	1a36      	subs	r6, r6, r0
 800546e:	e7e9      	b.n	8005444 <__sflush_r+0xd0>
 8005470:	dfbffffe 	.word	0xdfbffffe

08005474 <_fflush_r>:
 8005474:	b538      	push	{r3, r4, r5, lr}
 8005476:	690b      	ldr	r3, [r1, #16]
 8005478:	4605      	mov	r5, r0
 800547a:	460c      	mov	r4, r1
 800547c:	b913      	cbnz	r3, 8005484 <_fflush_r+0x10>
 800547e:	2500      	movs	r5, #0
 8005480:	4628      	mov	r0, r5
 8005482:	bd38      	pop	{r3, r4, r5, pc}
 8005484:	b118      	cbz	r0, 800548e <_fflush_r+0x1a>
 8005486:	6a03      	ldr	r3, [r0, #32]
 8005488:	b90b      	cbnz	r3, 800548e <_fflush_r+0x1a>
 800548a:	f7ff f9b1 	bl	80047f0 <__sinit>
 800548e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d0f3      	beq.n	800547e <_fflush_r+0xa>
 8005496:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005498:	07d0      	lsls	r0, r2, #31
 800549a:	d404      	bmi.n	80054a6 <_fflush_r+0x32>
 800549c:	0599      	lsls	r1, r3, #22
 800549e:	d402      	bmi.n	80054a6 <_fflush_r+0x32>
 80054a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054a2:	f7ff fb9c 	bl	8004bde <__retarget_lock_acquire_recursive>
 80054a6:	4628      	mov	r0, r5
 80054a8:	4621      	mov	r1, r4
 80054aa:	f7ff ff63 	bl	8005374 <__sflush_r>
 80054ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80054b0:	4605      	mov	r5, r0
 80054b2:	07da      	lsls	r2, r3, #31
 80054b4:	d4e4      	bmi.n	8005480 <_fflush_r+0xc>
 80054b6:	89a3      	ldrh	r3, [r4, #12]
 80054b8:	059b      	lsls	r3, r3, #22
 80054ba:	d4e1      	bmi.n	8005480 <_fflush_r+0xc>
 80054bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054be:	f7ff fb8f 	bl	8004be0 <__retarget_lock_release_recursive>
 80054c2:	e7dd      	b.n	8005480 <_fflush_r+0xc>

080054c4 <__swhatbuf_r>:
 80054c4:	b570      	push	{r4, r5, r6, lr}
 80054c6:	460c      	mov	r4, r1
 80054c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054cc:	4615      	mov	r5, r2
 80054ce:	2900      	cmp	r1, #0
 80054d0:	461e      	mov	r6, r3
 80054d2:	b096      	sub	sp, #88	@ 0x58
 80054d4:	da0c      	bge.n	80054f0 <__swhatbuf_r+0x2c>
 80054d6:	89a3      	ldrh	r3, [r4, #12]
 80054d8:	2100      	movs	r1, #0
 80054da:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80054de:	bf14      	ite	ne
 80054e0:	2340      	movne	r3, #64	@ 0x40
 80054e2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80054e6:	2000      	movs	r0, #0
 80054e8:	6031      	str	r1, [r6, #0]
 80054ea:	602b      	str	r3, [r5, #0]
 80054ec:	b016      	add	sp, #88	@ 0x58
 80054ee:	bd70      	pop	{r4, r5, r6, pc}
 80054f0:	466a      	mov	r2, sp
 80054f2:	f000 f849 	bl	8005588 <_fstat_r>
 80054f6:	2800      	cmp	r0, #0
 80054f8:	dbed      	blt.n	80054d6 <__swhatbuf_r+0x12>
 80054fa:	9901      	ldr	r1, [sp, #4]
 80054fc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005500:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005504:	4259      	negs	r1, r3
 8005506:	4159      	adcs	r1, r3
 8005508:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800550c:	e7eb      	b.n	80054e6 <__swhatbuf_r+0x22>

0800550e <__smakebuf_r>:
 800550e:	898b      	ldrh	r3, [r1, #12]
 8005510:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005512:	079d      	lsls	r5, r3, #30
 8005514:	4606      	mov	r6, r0
 8005516:	460c      	mov	r4, r1
 8005518:	d507      	bpl.n	800552a <__smakebuf_r+0x1c>
 800551a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800551e:	6023      	str	r3, [r4, #0]
 8005520:	6123      	str	r3, [r4, #16]
 8005522:	2301      	movs	r3, #1
 8005524:	6163      	str	r3, [r4, #20]
 8005526:	b003      	add	sp, #12
 8005528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800552a:	466a      	mov	r2, sp
 800552c:	ab01      	add	r3, sp, #4
 800552e:	f7ff ffc9 	bl	80054c4 <__swhatbuf_r>
 8005532:	9f00      	ldr	r7, [sp, #0]
 8005534:	4605      	mov	r5, r0
 8005536:	4639      	mov	r1, r7
 8005538:	4630      	mov	r0, r6
 800553a:	f7ff fbbd 	bl	8004cb8 <_malloc_r>
 800553e:	b948      	cbnz	r0, 8005554 <__smakebuf_r+0x46>
 8005540:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005544:	059a      	lsls	r2, r3, #22
 8005546:	d4ee      	bmi.n	8005526 <__smakebuf_r+0x18>
 8005548:	f023 0303 	bic.w	r3, r3, #3
 800554c:	f043 0302 	orr.w	r3, r3, #2
 8005550:	81a3      	strh	r3, [r4, #12]
 8005552:	e7e2      	b.n	800551a <__smakebuf_r+0xc>
 8005554:	89a3      	ldrh	r3, [r4, #12]
 8005556:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800555a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800555e:	81a3      	strh	r3, [r4, #12]
 8005560:	9b01      	ldr	r3, [sp, #4]
 8005562:	6020      	str	r0, [r4, #0]
 8005564:	b15b      	cbz	r3, 800557e <__smakebuf_r+0x70>
 8005566:	4630      	mov	r0, r6
 8005568:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800556c:	f000 f81e 	bl	80055ac <_isatty_r>
 8005570:	b128      	cbz	r0, 800557e <__smakebuf_r+0x70>
 8005572:	89a3      	ldrh	r3, [r4, #12]
 8005574:	f023 0303 	bic.w	r3, r3, #3
 8005578:	f043 0301 	orr.w	r3, r3, #1
 800557c:	81a3      	strh	r3, [r4, #12]
 800557e:	89a3      	ldrh	r3, [r4, #12]
 8005580:	431d      	orrs	r5, r3
 8005582:	81a5      	strh	r5, [r4, #12]
 8005584:	e7cf      	b.n	8005526 <__smakebuf_r+0x18>
	...

08005588 <_fstat_r>:
 8005588:	b538      	push	{r3, r4, r5, lr}
 800558a:	2300      	movs	r3, #0
 800558c:	4d06      	ldr	r5, [pc, #24]	@ (80055a8 <_fstat_r+0x20>)
 800558e:	4604      	mov	r4, r0
 8005590:	4608      	mov	r0, r1
 8005592:	4611      	mov	r1, r2
 8005594:	602b      	str	r3, [r5, #0]
 8005596:	f7fb ff4f 	bl	8001438 <_fstat>
 800559a:	1c43      	adds	r3, r0, #1
 800559c:	d102      	bne.n	80055a4 <_fstat_r+0x1c>
 800559e:	682b      	ldr	r3, [r5, #0]
 80055a0:	b103      	cbz	r3, 80055a4 <_fstat_r+0x1c>
 80055a2:	6023      	str	r3, [r4, #0]
 80055a4:	bd38      	pop	{r3, r4, r5, pc}
 80055a6:	bf00      	nop
 80055a8:	20000370 	.word	0x20000370

080055ac <_isatty_r>:
 80055ac:	b538      	push	{r3, r4, r5, lr}
 80055ae:	2300      	movs	r3, #0
 80055b0:	4d05      	ldr	r5, [pc, #20]	@ (80055c8 <_isatty_r+0x1c>)
 80055b2:	4604      	mov	r4, r0
 80055b4:	4608      	mov	r0, r1
 80055b6:	602b      	str	r3, [r5, #0]
 80055b8:	f7fb ff4d 	bl	8001456 <_isatty>
 80055bc:	1c43      	adds	r3, r0, #1
 80055be:	d102      	bne.n	80055c6 <_isatty_r+0x1a>
 80055c0:	682b      	ldr	r3, [r5, #0]
 80055c2:	b103      	cbz	r3, 80055c6 <_isatty_r+0x1a>
 80055c4:	6023      	str	r3, [r4, #0]
 80055c6:	bd38      	pop	{r3, r4, r5, pc}
 80055c8:	20000370 	.word	0x20000370

080055cc <_sbrk_r>:
 80055cc:	b538      	push	{r3, r4, r5, lr}
 80055ce:	2300      	movs	r3, #0
 80055d0:	4d05      	ldr	r5, [pc, #20]	@ (80055e8 <_sbrk_r+0x1c>)
 80055d2:	4604      	mov	r4, r0
 80055d4:	4608      	mov	r0, r1
 80055d6:	602b      	str	r3, [r5, #0]
 80055d8:	f7fb ff54 	bl	8001484 <_sbrk>
 80055dc:	1c43      	adds	r3, r0, #1
 80055de:	d102      	bne.n	80055e6 <_sbrk_r+0x1a>
 80055e0:	682b      	ldr	r3, [r5, #0]
 80055e2:	b103      	cbz	r3, 80055e6 <_sbrk_r+0x1a>
 80055e4:	6023      	str	r3, [r4, #0]
 80055e6:	bd38      	pop	{r3, r4, r5, pc}
 80055e8:	20000370 	.word	0x20000370

080055ec <memchr>:
 80055ec:	4603      	mov	r3, r0
 80055ee:	b510      	push	{r4, lr}
 80055f0:	b2c9      	uxtb	r1, r1
 80055f2:	4402      	add	r2, r0
 80055f4:	4293      	cmp	r3, r2
 80055f6:	4618      	mov	r0, r3
 80055f8:	d101      	bne.n	80055fe <memchr+0x12>
 80055fa:	2000      	movs	r0, #0
 80055fc:	e003      	b.n	8005606 <memchr+0x1a>
 80055fe:	7804      	ldrb	r4, [r0, #0]
 8005600:	3301      	adds	r3, #1
 8005602:	428c      	cmp	r4, r1
 8005604:	d1f6      	bne.n	80055f4 <memchr+0x8>
 8005606:	bd10      	pop	{r4, pc}

08005608 <_init>:
 8005608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800560a:	bf00      	nop
 800560c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800560e:	bc08      	pop	{r3}
 8005610:	469e      	mov	lr, r3
 8005612:	4770      	bx	lr

08005614 <_fini>:
 8005614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005616:	bf00      	nop
 8005618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800561a:	bc08      	pop	{r3}
 800561c:	469e      	mov	lr, r3
 800561e:	4770      	bx	lr
