
autolauncher_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d98  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000374  08004ea4  08004ea4  00005ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005218  08005218  00007068  2**0
                  CONTENTS
  4 .ARM          00000000  08005218  08005218  00007068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005218  08005218  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005218  08005218  00006218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800521c  0800521c  0000621c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005220  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  20000068  08005288  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  08005288  0000736c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011893  00000000  00000000  00007091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ccb  00000000  00000000  00018924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001178  00000000  00000000  0001b5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dad  00000000  00000000  0001c768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a1ae  00000000  00000000  0001d515  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001663a  00000000  00000000  000376c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000940da  00000000  00000000  0004dcfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e1dd7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051bc  00000000  00000000  000e1e1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000e6fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08004e8c 	.word	0x08004e8c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08004e8c 	.word	0x08004e8c

0800014c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800015c:	4b18      	ldr	r3, [pc, #96]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800015e:	4a19      	ldr	r2, [pc, #100]	@ (80001c4 <MX_ADC1_Init+0x78>)
 8000160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000162:	4b17      	ldr	r3, [pc, #92]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000164:	2200      	movs	r2, #0
 8000166:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000168:	4b15      	ldr	r3, [pc, #84]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800016a:	2200      	movs	r2, #0
 800016c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800016e:	4b14      	ldr	r3, [pc, #80]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000170:	2200      	movs	r2, #0
 8000172:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000174:	4b12      	ldr	r3, [pc, #72]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000176:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800017a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800017c:	4b10      	ldr	r3, [pc, #64]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800017e:	2200      	movs	r2, #0
 8000180:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000182:	4b0f      	ldr	r3, [pc, #60]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000184:	2201      	movs	r2, #1
 8000186:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000188:	480d      	ldr	r0, [pc, #52]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800018a:	f000 fed7 	bl	8000f3c <HAL_ADC_Init>
 800018e:	4603      	mov	r3, r0
 8000190:	2b00      	cmp	r3, #0
 8000192:	d001      	beq.n	8000198 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000194:	f000 fb84 	bl	80008a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000198:	230a      	movs	r3, #10
 800019a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800019c:	2301      	movs	r3, #1
 800019e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001a0:	2300      	movs	r3, #0
 80001a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	4619      	mov	r1, r3
 80001a8:	4805      	ldr	r0, [pc, #20]	@ (80001c0 <MX_ADC1_Init+0x74>)
 80001aa:	f000 ff9f 	bl	80010ec <HAL_ADC_ConfigChannel>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d001      	beq.n	80001b8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80001b4:	f000 fb74 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80001b8:	bf00      	nop
 80001ba:	3710      	adds	r7, #16
 80001bc:	46bd      	mov	sp, r7
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	20000084 	.word	0x20000084
 80001c4:	40012400 	.word	0x40012400

080001c8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80001ce:	1d3b      	adds	r3, r7, #4
 80001d0:	2200      	movs	r2, #0
 80001d2:	601a      	str	r2, [r3, #0]
 80001d4:	605a      	str	r2, [r3, #4]
 80001d6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80001d8:	4b18      	ldr	r3, [pc, #96]	@ (800023c <MX_ADC2_Init+0x74>)
 80001da:	4a19      	ldr	r2, [pc, #100]	@ (8000240 <MX_ADC2_Init+0x78>)
 80001dc:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80001de:	4b17      	ldr	r3, [pc, #92]	@ (800023c <MX_ADC2_Init+0x74>)
 80001e0:	2200      	movs	r2, #0
 80001e2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80001e4:	4b15      	ldr	r3, [pc, #84]	@ (800023c <MX_ADC2_Init+0x74>)
 80001e6:	2200      	movs	r2, #0
 80001e8:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80001ea:	4b14      	ldr	r3, [pc, #80]	@ (800023c <MX_ADC2_Init+0x74>)
 80001ec:	2200      	movs	r2, #0
 80001ee:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80001f0:	4b12      	ldr	r3, [pc, #72]	@ (800023c <MX_ADC2_Init+0x74>)
 80001f2:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80001f6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80001f8:	4b10      	ldr	r3, [pc, #64]	@ (800023c <MX_ADC2_Init+0x74>)
 80001fa:	2200      	movs	r2, #0
 80001fc:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80001fe:	4b0f      	ldr	r3, [pc, #60]	@ (800023c <MX_ADC2_Init+0x74>)
 8000200:	2201      	movs	r2, #1
 8000202:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000204:	480d      	ldr	r0, [pc, #52]	@ (800023c <MX_ADC2_Init+0x74>)
 8000206:	f000 fe99 	bl	8000f3c <HAL_ADC_Init>
 800020a:	4603      	mov	r3, r0
 800020c:	2b00      	cmp	r3, #0
 800020e:	d001      	beq.n	8000214 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000210:	f000 fb46 	bl	80008a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000214:	230b      	movs	r3, #11
 8000216:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000218:	2301      	movs	r3, #1
 800021a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800021c:	2300      	movs	r3, #0
 800021e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000220:	1d3b      	adds	r3, r7, #4
 8000222:	4619      	mov	r1, r3
 8000224:	4805      	ldr	r0, [pc, #20]	@ (800023c <MX_ADC2_Init+0x74>)
 8000226:	f000 ff61 	bl	80010ec <HAL_ADC_ConfigChannel>
 800022a:	4603      	mov	r3, r0
 800022c:	2b00      	cmp	r3, #0
 800022e:	d001      	beq.n	8000234 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000230:	f000 fb36 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000234:	bf00      	nop
 8000236:	3710      	adds	r7, #16
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}
 800023c:	200000b4 	.word	0x200000b4
 8000240:	40012800 	.word	0x40012800

08000244 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b08a      	sub	sp, #40	@ 0x28
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800024c:	f107 0318 	add.w	r3, r7, #24
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]
 8000254:	605a      	str	r2, [r3, #4]
 8000256:	609a      	str	r2, [r3, #8]
 8000258:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	4a28      	ldr	r2, [pc, #160]	@ (8000300 <HAL_ADC_MspInit+0xbc>)
 8000260:	4293      	cmp	r3, r2
 8000262:	d122      	bne.n	80002aa <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000264:	4b27      	ldr	r3, [pc, #156]	@ (8000304 <HAL_ADC_MspInit+0xc0>)
 8000266:	699b      	ldr	r3, [r3, #24]
 8000268:	4a26      	ldr	r2, [pc, #152]	@ (8000304 <HAL_ADC_MspInit+0xc0>)
 800026a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800026e:	6193      	str	r3, [r2, #24]
 8000270:	4b24      	ldr	r3, [pc, #144]	@ (8000304 <HAL_ADC_MspInit+0xc0>)
 8000272:	699b      	ldr	r3, [r3, #24]
 8000274:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000278:	617b      	str	r3, [r7, #20]
 800027a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800027c:	4b21      	ldr	r3, [pc, #132]	@ (8000304 <HAL_ADC_MspInit+0xc0>)
 800027e:	699b      	ldr	r3, [r3, #24]
 8000280:	4a20      	ldr	r2, [pc, #128]	@ (8000304 <HAL_ADC_MspInit+0xc0>)
 8000282:	f043 0310 	orr.w	r3, r3, #16
 8000286:	6193      	str	r3, [r2, #24]
 8000288:	4b1e      	ldr	r3, [pc, #120]	@ (8000304 <HAL_ADC_MspInit+0xc0>)
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	f003 0310 	and.w	r3, r3, #16
 8000290:	613b      	str	r3, [r7, #16]
 8000292:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000294:	2301      	movs	r3, #1
 8000296:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000298:	2303      	movs	r3, #3
 800029a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800029c:	f107 0318 	add.w	r3, r7, #24
 80002a0:	4619      	mov	r1, r3
 80002a2:	4819      	ldr	r0, [pc, #100]	@ (8000308 <HAL_ADC_MspInit+0xc4>)
 80002a4:	f001 fa1c 	bl	80016e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80002a8:	e026      	b.n	80002f8 <HAL_ADC_MspInit+0xb4>
  else if(adcHandle->Instance==ADC2)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	4a17      	ldr	r2, [pc, #92]	@ (800030c <HAL_ADC_MspInit+0xc8>)
 80002b0:	4293      	cmp	r3, r2
 80002b2:	d121      	bne.n	80002f8 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80002b4:	4b13      	ldr	r3, [pc, #76]	@ (8000304 <HAL_ADC_MspInit+0xc0>)
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	4a12      	ldr	r2, [pc, #72]	@ (8000304 <HAL_ADC_MspInit+0xc0>)
 80002ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002be:	6193      	str	r3, [r2, #24]
 80002c0:	4b10      	ldr	r3, [pc, #64]	@ (8000304 <HAL_ADC_MspInit+0xc0>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80002c8:	60fb      	str	r3, [r7, #12]
 80002ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80002cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000304 <HAL_ADC_MspInit+0xc0>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	4a0c      	ldr	r2, [pc, #48]	@ (8000304 <HAL_ADC_MspInit+0xc0>)
 80002d2:	f043 0310 	orr.w	r3, r3, #16
 80002d6:	6193      	str	r3, [r2, #24]
 80002d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000304 <HAL_ADC_MspInit+0xc0>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	f003 0310 	and.w	r3, r3, #16
 80002e0:	60bb      	str	r3, [r7, #8]
 80002e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80002e4:	2302      	movs	r3, #2
 80002e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002e8:	2303      	movs	r3, #3
 80002ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002ec:	f107 0318 	add.w	r3, r7, #24
 80002f0:	4619      	mov	r1, r3
 80002f2:	4805      	ldr	r0, [pc, #20]	@ (8000308 <HAL_ADC_MspInit+0xc4>)
 80002f4:	f001 f9f4 	bl	80016e0 <HAL_GPIO_Init>
}
 80002f8:	bf00      	nop
 80002fa:	3728      	adds	r7, #40	@ 0x28
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	40012400 	.word	0x40012400
 8000304:	40021000 	.word	0x40021000
 8000308:	40011000 	.word	0x40011000
 800030c:	40012800 	.word	0x40012800

08000310 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b088      	sub	sp, #32
 8000314:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000316:	f107 0310 	add.w	r3, r7, #16
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	605a      	str	r2, [r3, #4]
 8000320:	609a      	str	r2, [r3, #8]
 8000322:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000324:	4b42      	ldr	r3, [pc, #264]	@ (8000430 <MX_GPIO_Init+0x120>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	4a41      	ldr	r2, [pc, #260]	@ (8000430 <MX_GPIO_Init+0x120>)
 800032a:	f043 0310 	orr.w	r3, r3, #16
 800032e:	6193      	str	r3, [r2, #24]
 8000330:	4b3f      	ldr	r3, [pc, #252]	@ (8000430 <MX_GPIO_Init+0x120>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	f003 0310 	and.w	r3, r3, #16
 8000338:	60fb      	str	r3, [r7, #12]
 800033a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800033c:	4b3c      	ldr	r3, [pc, #240]	@ (8000430 <MX_GPIO_Init+0x120>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	4a3b      	ldr	r2, [pc, #236]	@ (8000430 <MX_GPIO_Init+0x120>)
 8000342:	f043 0320 	orr.w	r3, r3, #32
 8000346:	6193      	str	r3, [r2, #24]
 8000348:	4b39      	ldr	r3, [pc, #228]	@ (8000430 <MX_GPIO_Init+0x120>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	f003 0320 	and.w	r3, r3, #32
 8000350:	60bb      	str	r3, [r7, #8]
 8000352:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000354:	4b36      	ldr	r3, [pc, #216]	@ (8000430 <MX_GPIO_Init+0x120>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	4a35      	ldr	r2, [pc, #212]	@ (8000430 <MX_GPIO_Init+0x120>)
 800035a:	f043 0304 	orr.w	r3, r3, #4
 800035e:	6193      	str	r3, [r2, #24]
 8000360:	4b33      	ldr	r3, [pc, #204]	@ (8000430 <MX_GPIO_Init+0x120>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	f003 0304 	and.w	r3, r3, #4
 8000368:	607b      	str	r3, [r7, #4]
 800036a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800036c:	4b30      	ldr	r3, [pc, #192]	@ (8000430 <MX_GPIO_Init+0x120>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	4a2f      	ldr	r2, [pc, #188]	@ (8000430 <MX_GPIO_Init+0x120>)
 8000372:	f043 0308 	orr.w	r3, r3, #8
 8000376:	6193      	str	r3, [r2, #24]
 8000378:	4b2d      	ldr	r3, [pc, #180]	@ (8000430 <MX_GPIO_Init+0x120>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	f003 0308 	and.w	r3, r3, #8
 8000380:	603b      	str	r3, [r7, #0]
 8000382:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SSR_3_Pin|SSR_2_Pin|SSR_1_Pin|ENABLE_M1_Pin
 8000384:	2200      	movs	r2, #0
 8000386:	f64f 71dc 	movw	r1, #65500	@ 0xffdc
 800038a:	482a      	ldr	r0, [pc, #168]	@ (8000434 <MX_GPIO_Init+0x124>)
 800038c:	f001 fb2c 	bl	80019e8 <HAL_GPIO_WritePin>
                          |ENABLE_M2_Pin|DIR_Pin|SSR_6_Pin|SSR_5_Pin
                          |RELAY_RESET_3_Pin|RELAY_RESET_2_Pin|RELAY_K7_Pin|RELAY_K1_Pin
                          |RELAY_K2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENABLE_M3_Pin|ENABLE_M4_Pin|MUX_SELECT_Pin|ENABLE_M5_Pin
 8000390:	2200      	movs	r2, #0
 8000392:	f649 11f7 	movw	r1, #39415	@ 0x99f7
 8000396:	4828      	ldr	r0, [pc, #160]	@ (8000438 <MX_GPIO_Init+0x128>)
 8000398:	f001 fb26 	bl	80019e8 <HAL_GPIO_WritePin>
                          |ENABLE_M6_Pin|ENABLE_M7_Pin|ENABLE_M8_Pin|RELAY_K12_CAL_RES_Pin
                          |RELAY_K11_CAL_CONT_Pin|RELAY_K9_K10_GND_COND_Pin|RELAY_K8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|SSR_8_Pin|SSR_7_Pin|RELAY_K4_Pin
 800039c:	2200      	movs	r2, #0
 800039e:	f24c 313a 	movw	r1, #49978	@ 0xc33a
 80003a2:	4826      	ldr	r0, [pc, #152]	@ (800043c <MX_GPIO_Init+0x12c>)
 80003a4:	f001 fb20 	bl	80019e8 <HAL_GPIO_WritePin>
                          |RELAY_K5_Pin|RELAY_K6_Pin|RELAY_RESET_1_Pin|SSR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_K3_GPIO_Port, RELAY_K3_Pin, GPIO_PIN_RESET);
 80003a8:	2200      	movs	r2, #0
 80003aa:	2104      	movs	r1, #4
 80003ac:	4824      	ldr	r0, [pc, #144]	@ (8000440 <MX_GPIO_Init+0x130>)
 80003ae:	f001 fb1b 	bl	80019e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = SSR_3_Pin|SSR_2_Pin|SSR_1_Pin|ENABLE_M1_Pin
 80003b2:	f64f 73dc 	movw	r3, #65500	@ 0xffdc
 80003b6:	613b      	str	r3, [r7, #16]
                          |ENABLE_M2_Pin|DIR_Pin|SSR_6_Pin|SSR_5_Pin
                          |RELAY_RESET_3_Pin|RELAY_RESET_2_Pin|RELAY_K7_Pin|RELAY_K1_Pin
                          |RELAY_K2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b8:	2301      	movs	r3, #1
 80003ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003bc:	2300      	movs	r3, #0
 80003be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c0:	2302      	movs	r3, #2
 80003c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003c4:	f107 0310 	add.w	r3, r7, #16
 80003c8:	4619      	mov	r1, r3
 80003ca:	481a      	ldr	r0, [pc, #104]	@ (8000434 <MX_GPIO_Init+0x124>)
 80003cc:	f001 f988 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ENABLE_M3_Pin|ENABLE_M4_Pin|MUX_SELECT_Pin|ENABLE_M5_Pin
 80003d0:	f649 13f7 	movw	r3, #39415	@ 0x99f7
 80003d4:	613b      	str	r3, [r7, #16]
                          |ENABLE_M6_Pin|ENABLE_M7_Pin|ENABLE_M8_Pin|RELAY_K12_CAL_RES_Pin
                          |RELAY_K11_CAL_CONT_Pin|RELAY_K9_K10_GND_COND_Pin|RELAY_K8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d6:	2301      	movs	r3, #1
 80003d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003da:	2300      	movs	r3, #0
 80003dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003de:	2302      	movs	r3, #2
 80003e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003e2:	f107 0310 	add.w	r3, r7, #16
 80003e6:	4619      	mov	r1, r3
 80003e8:	4813      	ldr	r0, [pc, #76]	@ (8000438 <MX_GPIO_Init+0x128>)
 80003ea:	f001 f979 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_Pin|SSR_8_Pin|SSR_7_Pin|RELAY_K4_Pin
 80003ee:	f24c 333a 	movw	r3, #49978	@ 0xc33a
 80003f2:	613b      	str	r3, [r7, #16]
                          |RELAY_K5_Pin|RELAY_K6_Pin|RELAY_RESET_1_Pin|SSR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f4:	2301      	movs	r3, #1
 80003f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f8:	2300      	movs	r3, #0
 80003fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003fc:	2302      	movs	r3, #2
 80003fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000400:	f107 0310 	add.w	r3, r7, #16
 8000404:	4619      	mov	r1, r3
 8000406:	480d      	ldr	r0, [pc, #52]	@ (800043c <MX_GPIO_Init+0x12c>)
 8000408:	f001 f96a 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RELAY_K3_Pin;
 800040c:	2304      	movs	r3, #4
 800040e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000410:	2301      	movs	r3, #1
 8000412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000414:	2300      	movs	r3, #0
 8000416:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000418:	2302      	movs	r3, #2
 800041a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RELAY_K3_GPIO_Port, &GPIO_InitStruct);
 800041c:	f107 0310 	add.w	r3, r7, #16
 8000420:	4619      	mov	r1, r3
 8000422:	4807      	ldr	r0, [pc, #28]	@ (8000440 <MX_GPIO_Init+0x130>)
 8000424:	f001 f95c 	bl	80016e0 <HAL_GPIO_Init>

}
 8000428:	bf00      	nop
 800042a:	3720      	adds	r7, #32
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	40021000 	.word	0x40021000
 8000434:	40011000 	.word	0x40011000
 8000438:	40010800 	.word	0x40010800
 800043c:	40010c00 	.word	0x40010c00
 8000440:	40011400 	.word	0x40011400

08000444 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000448:	4b12      	ldr	r3, [pc, #72]	@ (8000494 <MX_I2C1_Init+0x50>)
 800044a:	4a13      	ldr	r2, [pc, #76]	@ (8000498 <MX_I2C1_Init+0x54>)
 800044c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800044e:	4b11      	ldr	r3, [pc, #68]	@ (8000494 <MX_I2C1_Init+0x50>)
 8000450:	4a12      	ldr	r2, [pc, #72]	@ (800049c <MX_I2C1_Init+0x58>)
 8000452:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000454:	4b0f      	ldr	r3, [pc, #60]	@ (8000494 <MX_I2C1_Init+0x50>)
 8000456:	2200      	movs	r2, #0
 8000458:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800045a:	4b0e      	ldr	r3, [pc, #56]	@ (8000494 <MX_I2C1_Init+0x50>)
 800045c:	2200      	movs	r2, #0
 800045e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000460:	4b0c      	ldr	r3, [pc, #48]	@ (8000494 <MX_I2C1_Init+0x50>)
 8000462:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000466:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000468:	4b0a      	ldr	r3, [pc, #40]	@ (8000494 <MX_I2C1_Init+0x50>)
 800046a:	2200      	movs	r2, #0
 800046c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800046e:	4b09      	ldr	r3, [pc, #36]	@ (8000494 <MX_I2C1_Init+0x50>)
 8000470:	2200      	movs	r2, #0
 8000472:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000474:	4b07      	ldr	r3, [pc, #28]	@ (8000494 <MX_I2C1_Init+0x50>)
 8000476:	2200      	movs	r2, #0
 8000478:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800047a:	4b06      	ldr	r3, [pc, #24]	@ (8000494 <MX_I2C1_Init+0x50>)
 800047c:	2200      	movs	r2, #0
 800047e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000480:	4804      	ldr	r0, [pc, #16]	@ (8000494 <MX_I2C1_Init+0x50>)
 8000482:	f001 fac9 	bl	8001a18 <HAL_I2C_Init>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800048c:	f000 fa08 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000490:	bf00      	nop
 8000492:	bd80      	pop	{r7, pc}
 8000494:	200000e4 	.word	0x200000e4
 8000498:	40005400 	.word	0x40005400
 800049c:	000186a0 	.word	0x000186a0

080004a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b088      	sub	sp, #32
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a8:	f107 0310 	add.w	r3, r7, #16
 80004ac:	2200      	movs	r2, #0
 80004ae:	601a      	str	r2, [r3, #0]
 80004b0:	605a      	str	r2, [r3, #4]
 80004b2:	609a      	str	r2, [r3, #8]
 80004b4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	4a15      	ldr	r2, [pc, #84]	@ (8000510 <HAL_I2C_MspInit+0x70>)
 80004bc:	4293      	cmp	r3, r2
 80004be:	d123      	bne.n	8000508 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c0:	4b14      	ldr	r3, [pc, #80]	@ (8000514 <HAL_I2C_MspInit+0x74>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	4a13      	ldr	r2, [pc, #76]	@ (8000514 <HAL_I2C_MspInit+0x74>)
 80004c6:	f043 0308 	orr.w	r3, r3, #8
 80004ca:	6193      	str	r3, [r2, #24]
 80004cc:	4b11      	ldr	r3, [pc, #68]	@ (8000514 <HAL_I2C_MspInit+0x74>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	f003 0308 	and.w	r3, r3, #8
 80004d4:	60fb      	str	r3, [r7, #12]
 80004d6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80004d8:	23c0      	movs	r3, #192	@ 0xc0
 80004da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004dc:	2312      	movs	r3, #18
 80004de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004e0:	2303      	movs	r3, #3
 80004e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004e4:	f107 0310 	add.w	r3, r7, #16
 80004e8:	4619      	mov	r1, r3
 80004ea:	480b      	ldr	r0, [pc, #44]	@ (8000518 <HAL_I2C_MspInit+0x78>)
 80004ec:	f001 f8f8 	bl	80016e0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80004f0:	4b08      	ldr	r3, [pc, #32]	@ (8000514 <HAL_I2C_MspInit+0x74>)
 80004f2:	69db      	ldr	r3, [r3, #28]
 80004f4:	4a07      	ldr	r2, [pc, #28]	@ (8000514 <HAL_I2C_MspInit+0x74>)
 80004f6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80004fa:	61d3      	str	r3, [r2, #28]
 80004fc:	4b05      	ldr	r3, [pc, #20]	@ (8000514 <HAL_I2C_MspInit+0x74>)
 80004fe:	69db      	ldr	r3, [r3, #28]
 8000500:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000504:	60bb      	str	r3, [r7, #8]
 8000506:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000508:	bf00      	nop
 800050a:	3720      	adds	r7, #32
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	40005400 	.word	0x40005400
 8000514:	40021000 	.word	0x40021000
 8000518:	40010c00 	.word	0x40010c00

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000522:	f000 fc85 	bl	8000e30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000526:	f000 f841 	bl	80005ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052a:	f7ff fef1 	bl	8000310 <MX_GPIO_Init>
  MX_TIM3_Init();
 800052e:	f000 faaf 	bl	8000a90 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000532:	f000 fb73 	bl	8000c1c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000536:	f7ff fe09 	bl	800014c <MX_ADC1_Init>
  MX_ADC2_Init();
 800053a:	f7ff fe45 	bl	80001c8 <MX_ADC2_Init>
  MX_I2C1_Init();
 800053e:	f7ff ff81 	bl	8000444 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000542:	f000 fb95 	bl	8000c70 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  // Initialize autolauncher parameters i.e. read eeprom
  parameter_init();
 8000546:	f000 f89d 	bl	8000684 <parameter_init>

  // Initialize stepper motors
  motor_init();
 800054a:	f000 f979 	bl	8000840 <motor_init>
  motorLock = mFree;
 800054e:	4b11      	ldr	r3, [pc, #68]	@ (8000594 <main+0x78>)
 8000550:	2200      	movs	r2, #0
 8000552:	701a      	strb	r2, [r3, #0]

  // initialize multiplexer
  HAL_GPIO_WritePin(MUX_SELECT_GPIO_Port, MUX_SELECT_Pin, SET); // SET = UART-tx / RESET = Din from GPS
 8000554:	2201      	movs	r2, #1
 8000556:	2104      	movs	r1, #4
 8000558:	480f      	ldr	r0, [pc, #60]	@ (8000598 <main+0x7c>)
 800055a:	f001 fa45 	bl	80019e8 <HAL_GPIO_WritePin>

  // Initialize relays
  relay_init();
 800055e:	f000 f935 	bl	80007cc <relay_init>
  relayLock = reFree;
 8000562:	4b0e      	ldr	r3, [pc, #56]	@ (800059c <main+0x80>)
 8000564:	2200      	movs	r2, #0
 8000566:	701a      	strb	r2, [r3, #0]

  // menu init
  menu_init();
 8000568:	f000 f870 	bl	800064c <menu_init>

  // enable receive interrupt
  HAL_UART_Receive_IT(&huart1, rxChar, 1);
 800056c:	2201      	movs	r2, #1
 800056e:	490c      	ldr	r1, [pc, #48]	@ (80005a0 <main+0x84>)
 8000570:	480c      	ldr	r0, [pc, #48]	@ (80005a4 <main+0x88>)
 8000572:	f002 fdec 	bl	800314e <HAL_UART_Receive_IT>


  uint8_t count = 0;
 8000576:	2300      	movs	r3, #0
 8000578:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  if(active == rxStatus){ // set to active with interrupt
 800057a:	4b0b      	ldr	r3, [pc, #44]	@ (80005a8 <main+0x8c>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b01      	cmp	r3, #1
 8000580:	d1fb      	bne.n	800057a <main+0x5e>
		  process_input(rxChar[0]); // go to main switch case menu
 8000582:	4b07      	ldr	r3, [pc, #28]	@ (80005a0 <main+0x84>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	4618      	mov	r0, r3
 8000588:	f000 f8b8 	bl	80006fc <process_input>
		  rxStatus = idle;
 800058c:	4b06      	ldr	r3, [pc, #24]	@ (80005a8 <main+0x8c>)
 800058e:	2200      	movs	r2, #0
 8000590:	701a      	strb	r2, [r3, #0]
	  if(active == rxStatus){ // set to active with interrupt
 8000592:	e7f2      	b.n	800057a <main+0x5e>
 8000594:	20000138 	.word	0x20000138
 8000598:	40010800 	.word	0x40010800
 800059c:	20000139 	.word	0x20000139
 80005a0:	2000013c 	.word	0x2000013c
 80005a4:	2000018c 	.word	0x2000018c
 80005a8:	2000013a 	.word	0x2000013a

080005ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b094      	sub	sp, #80	@ 0x50
 80005b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005b6:	2228      	movs	r2, #40	@ 0x28
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f003 fc8d 	bl	8003eda <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c0:	f107 0314 	add.w	r3, r7, #20
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005dc:	2302      	movs	r3, #2
 80005de:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e0:	2301      	movs	r3, #1
 80005e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e4:	2310      	movs	r3, #16
 80005e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005e8:	2300      	movs	r3, #0
 80005ea:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005f0:	4618      	mov	r0, r3
 80005f2:	f001 fb55 	bl	8001ca0 <HAL_RCC_OscConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80005fc:	f000 f950 	bl	80008a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000600:	230f      	movs	r3, #15
 8000602:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000604:	2300      	movs	r3, #0
 8000606:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000614:	f107 0314 	add.w	r3, r7, #20
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f001 fdc2 	bl	80021a4 <HAL_RCC_ClockConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000626:	f000 f93b 	bl	80008a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800062a:	2302      	movs	r3, #2
 800062c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800062e:	2300      	movs	r3, #0
 8000630:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	4618      	mov	r0, r3
 8000636:	f001 ff43 	bl	80024c0 <HAL_RCCEx_PeriphCLKConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000640:	f000 f92e 	bl	80008a0 <Error_Handler>
  }
}
 8000644:	bf00      	nop
 8000646:	3750      	adds	r7, #80	@ 0x50
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <menu_init>:

/* USER CODE BEGIN 4 */
/***************************************** START AUTOLAUNCHER FUNCTIONS *****************************************/

void menu_init(void){
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	// print status message and anything else required to initialize
	status_message();
 8000650:	f000 f86a 	bl	8000728 <status_message>
}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}

08000658 <_write>:



int _write(int file, char *ptr, int len){
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	60b9      	str	r1, [r7, #8]
 8000662:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	b29a      	uxth	r2, r3
 8000668:	f04f 33ff 	mov.w	r3, #4294967295
 800066c:	68b9      	ldr	r1, [r7, #8]
 800066e:	4804      	ldr	r0, [pc, #16]	@ (8000680 <_write+0x28>)
 8000670:	f002 fce2 	bl	8003038 <HAL_UART_Transmit>
	return len;
 8000674:	687b      	ldr	r3, [r7, #4]
}
 8000676:	4618      	mov	r0, r3
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	2000018c 	.word	0x2000018c

08000684 <parameter_init>:

/* Initialize autolauncher parameters */
void parameter_init(void){
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
	// get parameters from eeprom or assign default values

}
 8000688:	bf00      	nop
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr

08000690 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8000690:	b580      	push	{r7, lr}
 8000692:	b086      	sub	sp, #24
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
	uint8_t txBuffer[10] = {'\0'};
 8000698:	2300      	movs	r3, #0
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	f107 0310 	add.w	r3, r7, #16
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	809a      	strh	r2, [r3, #4]

	if(huart->Instance == USART1){ // check that uart1 triggered the interrupt callback
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4a0f      	ldr	r2, [pc, #60]	@ (80006e8 <HAL_UART_RxCpltCallback+0x58>)
 80006ac:	4293      	cmp	r3, r2
 80006ae:	d117      	bne.n	80006e0 <HAL_UART_RxCpltCallback+0x50>
		rxStatus = active;
 80006b0:	4b0e      	ldr	r3, [pc, #56]	@ (80006ec <HAL_UART_RxCpltCallback+0x5c>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	701a      	strb	r2, [r3, #0]
		//command = rxChar[0]
		if(RXECHO == 1){
			sprintf(txBuffer,"\r\n>> %c\r\n", rxChar[0]);
 80006b6:	4b0e      	ldr	r3, [pc, #56]	@ (80006f0 <HAL_UART_RxCpltCallback+0x60>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	461a      	mov	r2, r3
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	490c      	ldr	r1, [pc, #48]	@ (80006f4 <HAL_UART_RxCpltCallback+0x64>)
 80006c2:	4618      	mov	r0, r3
 80006c4:	f003 fba6 	bl	8003e14 <siprintf>
			HAL_UART_Transmit(&huart1, (const uint8_t *) txBuffer, sizeof(txBuffer), 100);
 80006c8:	f107 010c 	add.w	r1, r7, #12
 80006cc:	2364      	movs	r3, #100	@ 0x64
 80006ce:	220a      	movs	r2, #10
 80006d0:	4809      	ldr	r0, [pc, #36]	@ (80006f8 <HAL_UART_RxCpltCallback+0x68>)
 80006d2:	f002 fcb1 	bl	8003038 <HAL_UART_Transmit>
		}
		HAL_UART_Receive_IT(&huart1, (uint8_t *) rxChar, 1); // reactivate rx interrupt
 80006d6:	2201      	movs	r2, #1
 80006d8:	4905      	ldr	r1, [pc, #20]	@ (80006f0 <HAL_UART_RxCpltCallback+0x60>)
 80006da:	4807      	ldr	r0, [pc, #28]	@ (80006f8 <HAL_UART_RxCpltCallback+0x68>)
 80006dc:	f002 fd37 	bl	800314e <HAL_UART_Receive_IT>
	}
}
 80006e0:	bf00      	nop
 80006e2:	3718      	adds	r7, #24
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40013800 	.word	0x40013800
 80006ec:	2000013a 	.word	0x2000013a
 80006f0:	2000013c 	.word	0x2000013c
 80006f4:	08004ea4 	.word	0x08004ea4
 80006f8:	2000018c 	.word	0x2000018c

080006fc <process_input>:

void process_input(char option){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
	printf("\r\n> Executing OPTION %c...\r\n", option);
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	4619      	mov	r1, r3
 800070a:	4806      	ldr	r0, [pc, #24]	@ (8000724 <process_input+0x28>)
 800070c:	f003 fb70 	bl	8003df0 <iprintf>
	if (option == 'M') status_message();
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	2b4d      	cmp	r3, #77	@ 0x4d
 8000714:	d101      	bne.n	800071a <process_input+0x1e>
 8000716:	f000 f807 	bl	8000728 <status_message>

}
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	08004eb0 	.word	0x08004eb0

08000728 <status_message>:



void status_message() {
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
    printf("\r\n\n\r");
 800072c:	481a      	ldr	r0, [pc, #104]	@ (8000798 <status_message+0x70>)
 800072e:	f003 fb5f 	bl	8003df0 <iprintf>
    printf("=========================================\n\r");
 8000732:	481a      	ldr	r0, [pc, #104]	@ (800079c <status_message+0x74>)
 8000734:	f003 fb5c 	bl	8003df0 <iprintf>
    printf("|  AOML auto launcher board version 3.0 |\n\r");
 8000738:	4819      	ldr	r0, [pc, #100]	@ (80007a0 <status_message+0x78>)
 800073a:	f003 fb59 	bl	8003df0 <iprintf>
    printf("|  Firmware version 2024.mm.dd.hhmm     |\n\r");
 800073e:	4819      	ldr	r0, [pc, #100]	@ (80007a4 <status_message+0x7c>)
 8000740:	f003 fb56 	bl	8003df0 <iprintf>
    printf("=========================================\n\r");
 8000744:	4815      	ldr	r0, [pc, #84]	@ (800079c <status_message+0x74>)
 8000746:	f003 fb53 	bl	8003df0 <iprintf>
    printf("|    Model #ALV3.0      S/N ");
 800074a:	4817      	ldr	r0, [pc, #92]	@ (80007a8 <status_message+0x80>)
 800074c:	f003 fb50 	bl	8003df0 <iprintf>
//    print_serial_number();
//    printf("       |\n\r");
    printf("=========================================\n\r");
 8000750:	4812      	ldr	r0, [pc, #72]	@ (800079c <status_message+0x74>)
 8000752:	f003 fb4d 	bl	8003df0 <iprintf>
    printf("|               COMMANDS                |\n\r");
 8000756:	4815      	ldr	r0, [pc, #84]	@ (80007ac <status_message+0x84>)
 8000758:	f003 fb4a 	bl	8003df0 <iprintf>
//    if (configed != '|') {
//        printf("|!!! YOU MUST ASSIGN A SERIAL NUMBER !!!|\n\r");
//    }
    printf("=========================================\n\r");
 800075c:	480f      	ldr	r0, [pc, #60]	@ (800079c <status_message+0x74>)
 800075e:	f003 fb47 	bl	8003df0 <iprintf>
    printf("| Connect  cal Sim BT  0                |\n\r");
 8000762:	4813      	ldr	r0, [pc, #76]	@ (80007b0 <status_message+0x88>)
 8000764:	f003 fb44 	bl	8003df0 <iprintf>
//
//        printf("| Connect  XBT 1-8     1,2,3,4,5,6,7,8  |\n\r");
//        printf("| Extend   Pin 1-8     U,V,W,X,Y,Z,S,T  |\n\r");
//        printf("| Retract  Pin 1-8     A,B,C,D,E,F,H,I  |\n\r");
//    }
    printf("| Unground   XBT       G                |\n\r");
 8000768:	4812      	ldr	r0, [pc, #72]	@ (80007b4 <status_message+0x8c>)
 800076a:	f003 fb41 	bl	8003df0 <iprintf>
    printf("| Calibrate on         K                |\n\r");
 800076e:	4812      	ldr	r0, [pc, #72]	@ (80007b8 <status_message+0x90>)
 8000770:	f003 fb3e 	bl	8003df0 <iprintf>
    printf("| Cal resistor         L                |\n\r");
 8000774:	4811      	ldr	r0, [pc, #68]	@ (80007bc <status_message+0x94>)
 8000776:	f003 fb3b 	bl	8003df0 <iprintf>
    printf("| Reset Relays         R                |\n\r");
 800077a:	4811      	ldr	r0, [pc, #68]	@ (80007c0 <status_message+0x98>)
 800077c:	f003 fb38 	bl	8003df0 <iprintf>
    printf("| Print serial number  s                |\n\r");
 8000780:	4810      	ldr	r0, [pc, #64]	@ (80007c4 <status_message+0x9c>)
 8000782:	f003 fb35 	bl	8003df0 <iprintf>
    printf("| This Menu            M                |\n\r");
 8000786:	4810      	ldr	r0, [pc, #64]	@ (80007c8 <status_message+0xa0>)
 8000788:	f003 fb32 	bl	8003df0 <iprintf>
    printf("=========================================\n\r");
 800078c:	4803      	ldr	r0, [pc, #12]	@ (800079c <status_message+0x74>)
 800078e:	f003 fb2f 	bl	8003df0 <iprintf>
}//end status_message
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	08004ed0 	.word	0x08004ed0
 800079c:	08004ed8 	.word	0x08004ed8
 80007a0:	08004f04 	.word	0x08004f04
 80007a4:	08004f30 	.word	0x08004f30
 80007a8:	08004f5c 	.word	0x08004f5c
 80007ac:	08004f7c 	.word	0x08004f7c
 80007b0:	08004fa8 	.word	0x08004fa8
 80007b4:	08004fd4 	.word	0x08004fd4
 80007b8:	08005000 	.word	0x08005000
 80007bc:	0800502c 	.word	0x0800502c
 80007c0:	08005058 	.word	0x08005058
 80007c4:	08005084 	.word	0x08005084
 80007c8:	080050b0 	.word	0x080050b0

080007cc <relay_init>:
		return 1;
	}
}


void relay_init(void){
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	drive_relay(RELAY_RESET_1_GPIO_Port, RELAY_RESET_1_Pin, 10);  // RESET relay k1, k2, k3, k4, SSR1, SSR2, SSR3, SSR4
 80007d0:	220a      	movs	r2, #10
 80007d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007d6:	4808      	ldr	r0, [pc, #32]	@ (80007f8 <relay_init+0x2c>)
 80007d8:	f000 f812 	bl	8000800 <drive_relay>
	drive_relay(RELAY_RESET_2_GPIO_Port, RELAY_RESET_2_Pin, 10); // RESET relay k5, k6, k7, k8, SSR5, SSR6, SSR7, SSR8
 80007dc:	220a      	movs	r2, #10
 80007de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007e2:	4806      	ldr	r0, [pc, #24]	@ (80007fc <relay_init+0x30>)
 80007e4:	f000 f80c 	bl	8000800 <drive_relay>
	drive_relay(RELAY_RESET_3_GPIO_Port, RELAY_RESET_3_Pin, 10); // RESET relay k9, k10, k11, k12 (GND, calibration and continuity circuit)
 80007e8:	220a      	movs	r2, #10
 80007ea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007ee:	4803      	ldr	r0, [pc, #12]	@ (80007fc <relay_init+0x30>)
 80007f0:	f000 f806 	bl	8000800 <drive_relay>

}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40010c00 	.word	0x40010c00
 80007fc:	40011000 	.word	0x40011000

08000800 <drive_relay>:


void drive_relay(GPIO_TypeDef * relayPort, uint16_t relayPin, uint8_t onTime){
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	460b      	mov	r3, r1
 800080a:	807b      	strh	r3, [r7, #2]
 800080c:	4613      	mov	r3, r2
 800080e:	707b      	strb	r3, [r7, #1]
	// SET relay k
	HAL_GPIO_WritePin(relayPort, relayPin, SET); // set
 8000810:	887b      	ldrh	r3, [r7, #2]
 8000812:	2201      	movs	r2, #1
 8000814:	4619      	mov	r1, r3
 8000816:	6878      	ldr	r0, [r7, #4]
 8000818:	f001 f8e6 	bl	80019e8 <HAL_GPIO_WritePin>
	HAL_Delay(onTime); // time coil is driven in ms
 800081c:	787b      	ldrb	r3, [r7, #1]
 800081e:	4618      	mov	r0, r3
 8000820:	f000 fb68 	bl	8000ef4 <HAL_Delay>
	HAL_GPIO_WritePin(relayPort, relayPin, RESET); // release
 8000824:	887b      	ldrh	r3, [r7, #2]
 8000826:	2200      	movs	r2, #0
 8000828:	4619      	mov	r1, r3
 800082a:	6878      	ldr	r0, [r7, #4]
 800082c:	f001 f8dc 	bl	80019e8 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8000830:	2002      	movs	r0, #2
 8000832:	f000 fb5f 	bl	8000ef4 <HAL_Delay>
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
	...

08000840 <motor_init>:


void motor_init(void){
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(ENABLE_M1_GPIO_Port, ENABLE_M1_Pin, RESET); // start disabled
 8000844:	2200      	movs	r2, #0
 8000846:	2104      	movs	r1, #4
 8000848:	4813      	ldr	r0, [pc, #76]	@ (8000898 <motor_init+0x58>)
 800084a:	f001 f8cd 	bl	80019e8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M2_GPIO_Port, ENABLE_M2_Pin, RESET); // start disabled
 800084e:	2200      	movs	r2, #0
 8000850:	2108      	movs	r1, #8
 8000852:	4811      	ldr	r0, [pc, #68]	@ (8000898 <motor_init+0x58>)
 8000854:	f001 f8c8 	bl	80019e8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M3_GPIO_Port, ENABLE_M3_Pin, RESET); // start disabled
 8000858:	2200      	movs	r2, #0
 800085a:	2101      	movs	r1, #1
 800085c:	480f      	ldr	r0, [pc, #60]	@ (800089c <motor_init+0x5c>)
 800085e:	f001 f8c3 	bl	80019e8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M4_GPIO_Port, ENABLE_M4_Pin, RESET); // start disabled
 8000862:	2200      	movs	r2, #0
 8000864:	2102      	movs	r1, #2
 8000866:	480d      	ldr	r0, [pc, #52]	@ (800089c <motor_init+0x5c>)
 8000868:	f001 f8be 	bl	80019e8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M5_GPIO_Port, ENABLE_M5_Pin, RESET); // start disabled
 800086c:	2200      	movs	r2, #0
 800086e:	2110      	movs	r1, #16
 8000870:	480a      	ldr	r0, [pc, #40]	@ (800089c <motor_init+0x5c>)
 8000872:	f001 f8b9 	bl	80019e8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M6_GPIO_Port, ENABLE_M6_Pin, RESET); // start disabled
 8000876:	2200      	movs	r2, #0
 8000878:	2120      	movs	r1, #32
 800087a:	4808      	ldr	r0, [pc, #32]	@ (800089c <motor_init+0x5c>)
 800087c:	f001 f8b4 	bl	80019e8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M7_GPIO_Port, ENABLE_M7_Pin, RESET); // start disabled
 8000880:	2200      	movs	r2, #0
 8000882:	2140      	movs	r1, #64	@ 0x40
 8000884:	4805      	ldr	r0, [pc, #20]	@ (800089c <motor_init+0x5c>)
 8000886:	f001 f8af 	bl	80019e8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M8_GPIO_Port, ENABLE_M8_Pin, RESET); // start disabled
 800088a:	2200      	movs	r2, #0
 800088c:	2180      	movs	r1, #128	@ 0x80
 800088e:	4803      	ldr	r0, [pc, #12]	@ (800089c <motor_init+0x5c>)
 8000890:	f001 f8aa 	bl	80019e8 <HAL_GPIO_WritePin>
}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40011000 	.word	0x40011000
 800089c:	40010800 	.word	0x40010800

080008a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a4:	b672      	cpsid	i
}
 80008a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a8:	bf00      	nop
 80008aa:	e7fd      	b.n	80008a8 <Error_Handler+0x8>

080008ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008b2:	4b15      	ldr	r3, [pc, #84]	@ (8000908 <HAL_MspInit+0x5c>)
 80008b4:	699b      	ldr	r3, [r3, #24]
 80008b6:	4a14      	ldr	r2, [pc, #80]	@ (8000908 <HAL_MspInit+0x5c>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	6193      	str	r3, [r2, #24]
 80008be:	4b12      	ldr	r3, [pc, #72]	@ (8000908 <HAL_MspInit+0x5c>)
 80008c0:	699b      	ldr	r3, [r3, #24]
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000908 <HAL_MspInit+0x5c>)
 80008cc:	69db      	ldr	r3, [r3, #28]
 80008ce:	4a0e      	ldr	r2, [pc, #56]	@ (8000908 <HAL_MspInit+0x5c>)
 80008d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008d4:	61d3      	str	r3, [r2, #28]
 80008d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000908 <HAL_MspInit+0x5c>)
 80008d8:	69db      	ldr	r3, [r3, #28]
 80008da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008e2:	4b0a      	ldr	r3, [pc, #40]	@ (800090c <HAL_MspInit+0x60>)
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	4a04      	ldr	r2, [pc, #16]	@ (800090c <HAL_MspInit+0x60>)
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fe:	bf00      	nop
 8000900:	3714      	adds	r7, #20
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr
 8000908:	40021000 	.word	0x40021000
 800090c:	40010000 	.word	0x40010000

08000910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000914:	bf00      	nop
 8000916:	e7fd      	b.n	8000914 <NMI_Handler+0x4>

08000918 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800091c:	bf00      	nop
 800091e:	e7fd      	b.n	800091c <HardFault_Handler+0x4>

08000920 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000924:	bf00      	nop
 8000926:	e7fd      	b.n	8000924 <MemManage_Handler+0x4>

08000928 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800092c:	bf00      	nop
 800092e:	e7fd      	b.n	800092c <BusFault_Handler+0x4>

08000930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000934:	bf00      	nop
 8000936:	e7fd      	b.n	8000934 <UsageFault_Handler+0x4>

08000938 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr

08000944 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr

08000950 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr

0800095c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000960:	f000 faac 	bl	8000ebc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}

08000968 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800096c:	4802      	ldr	r0, [pc, #8]	@ (8000978 <USART1_IRQHandler+0x10>)
 800096e:	f002 fc13 	bl	8003198 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	2000018c 	.word	0x2000018c

0800097c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b086      	sub	sp, #24
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000988:	2300      	movs	r3, #0
 800098a:	617b      	str	r3, [r7, #20]
 800098c:	e00a      	b.n	80009a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800098e:	f3af 8000 	nop.w
 8000992:	4601      	mov	r1, r0
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	1c5a      	adds	r2, r3, #1
 8000998:	60ba      	str	r2, [r7, #8]
 800099a:	b2ca      	uxtb	r2, r1
 800099c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	3301      	adds	r3, #1
 80009a2:	617b      	str	r3, [r7, #20]
 80009a4:	697a      	ldr	r2, [r7, #20]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	dbf0      	blt.n	800098e <_read+0x12>
  }

  return len;
 80009ac:	687b      	ldr	r3, [r7, #4]
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3718      	adds	r7, #24
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80009b6:	b480      	push	{r7}
 80009b8:	b083      	sub	sp, #12
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr

080009cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009dc:	605a      	str	r2, [r3, #4]
  return 0;
 80009de:	2300      	movs	r3, #0
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	370c      	adds	r7, #12
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bc80      	pop	{r7}
 80009e8:	4770      	bx	lr

080009ea <_isatty>:

int _isatty(int file)
{
 80009ea:	b480      	push	{r7}
 80009ec:	b083      	sub	sp, #12
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009f2:	2301      	movs	r3, #1
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bc80      	pop	{r7}
 80009fc:	4770      	bx	lr

080009fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009fe:	b480      	push	{r7}
 8000a00:	b085      	sub	sp, #20
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	60f8      	str	r0, [r7, #12]
 8000a06:	60b9      	str	r1, [r7, #8]
 8000a08:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a0a:	2300      	movs	r3, #0
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3714      	adds	r7, #20
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr
	...

08000a18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a20:	4a14      	ldr	r2, [pc, #80]	@ (8000a74 <_sbrk+0x5c>)
 8000a22:	4b15      	ldr	r3, [pc, #84]	@ (8000a78 <_sbrk+0x60>)
 8000a24:	1ad3      	subs	r3, r2, r3
 8000a26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a2c:	4b13      	ldr	r3, [pc, #76]	@ (8000a7c <_sbrk+0x64>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d102      	bne.n	8000a3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a34:	4b11      	ldr	r3, [pc, #68]	@ (8000a7c <_sbrk+0x64>)
 8000a36:	4a12      	ldr	r2, [pc, #72]	@ (8000a80 <_sbrk+0x68>)
 8000a38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a3a:	4b10      	ldr	r3, [pc, #64]	@ (8000a7c <_sbrk+0x64>)
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4413      	add	r3, r2
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d207      	bcs.n	8000a58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a48:	f003 fa96 	bl	8003f78 <__errno>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	220c      	movs	r2, #12
 8000a50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a52:	f04f 33ff 	mov.w	r3, #4294967295
 8000a56:	e009      	b.n	8000a6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a58:	4b08      	ldr	r3, [pc, #32]	@ (8000a7c <_sbrk+0x64>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a5e:	4b07      	ldr	r3, [pc, #28]	@ (8000a7c <_sbrk+0x64>)
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4413      	add	r3, r2
 8000a66:	4a05      	ldr	r2, [pc, #20]	@ (8000a7c <_sbrk+0x64>)
 8000a68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a6a:	68fb      	ldr	r3, [r7, #12]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3718      	adds	r7, #24
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20005000 	.word	0x20005000
 8000a78:	00000400 	.word	0x00000400
 8000a7c:	20000140 	.word	0x20000140
 8000a80:	20000370 	.word	0x20000370

08000a84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr

08000a90 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08e      	sub	sp, #56	@ 0x38
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a96:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aa4:	f107 0320 	add.w	r3, r7, #32
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]
 8000abc:	615a      	str	r2, [r3, #20]
 8000abe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ac0:	4b2c      	ldr	r3, [pc, #176]	@ (8000b74 <MX_TIM3_Init+0xe4>)
 8000ac2:	4a2d      	ldr	r2, [pc, #180]	@ (8000b78 <MX_TIM3_Init+0xe8>)
 8000ac4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 8000ac6:	4b2b      	ldr	r3, [pc, #172]	@ (8000b74 <MX_TIM3_Init+0xe4>)
 8000ac8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000acc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ace:	4b29      	ldr	r3, [pc, #164]	@ (8000b74 <MX_TIM3_Init+0xe4>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 15-1;
 8000ad4:	4b27      	ldr	r3, [pc, #156]	@ (8000b74 <MX_TIM3_Init+0xe4>)
 8000ad6:	220e      	movs	r2, #14
 8000ad8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ada:	4b26      	ldr	r3, [pc, #152]	@ (8000b74 <MX_TIM3_Init+0xe4>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ae0:	4b24      	ldr	r3, [pc, #144]	@ (8000b74 <MX_TIM3_Init+0xe4>)
 8000ae2:	2280      	movs	r2, #128	@ 0x80
 8000ae4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ae6:	4823      	ldr	r0, [pc, #140]	@ (8000b74 <MX_TIM3_Init+0xe4>)
 8000ae8:	f001 fda0 	bl	800262c <HAL_TIM_Base_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000af2:	f7ff fed5 	bl	80008a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000af6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000afa:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000afc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b00:	4619      	mov	r1, r3
 8000b02:	481c      	ldr	r0, [pc, #112]	@ (8000b74 <MX_TIM3_Init+0xe4>)
 8000b04:	f001 fe96 	bl	8002834 <HAL_TIM_ConfigClockSource>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000b0e:	f7ff fec7 	bl	80008a0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000b12:	4818      	ldr	r0, [pc, #96]	@ (8000b74 <MX_TIM3_Init+0xe4>)
 8000b14:	f001 fdd9 	bl	80026ca <HAL_TIM_OC_Init>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000b1e:	f7ff febf 	bl	80008a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b22:	2300      	movs	r3, #0
 8000b24:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b26:	2300      	movs	r3, #0
 8000b28:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b2a:	f107 0320 	add.w	r3, r7, #32
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4810      	ldr	r0, [pc, #64]	@ (8000b74 <MX_TIM3_Init+0xe4>)
 8000b32:	f002 f9d3 	bl	8002edc <HAL_TIMEx_MasterConfigSynchronization>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000b3c:	f7ff feb0 	bl	80008a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000b40:	2330      	movs	r3, #48	@ 0x30
 8000b42:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b50:	1d3b      	adds	r3, r7, #4
 8000b52:	2208      	movs	r2, #8
 8000b54:	4619      	mov	r1, r3
 8000b56:	4807      	ldr	r0, [pc, #28]	@ (8000b74 <MX_TIM3_Init+0xe4>)
 8000b58:	f001 fe10 	bl	800277c <HAL_TIM_OC_ConfigChannel>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000b62:	f7ff fe9d 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b66:	4803      	ldr	r0, [pc, #12]	@ (8000b74 <MX_TIM3_Init+0xe4>)
 8000b68:	f000 f826 	bl	8000bb8 <HAL_TIM_MspPostInit>

}
 8000b6c:	bf00      	nop
 8000b6e:	3738      	adds	r7, #56	@ 0x38
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000144 	.word	0x20000144
 8000b78:	40000400 	.word	0x40000400

08000b7c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a09      	ldr	r2, [pc, #36]	@ (8000bb0 <HAL_TIM_Base_MspInit+0x34>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d10b      	bne.n	8000ba6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b8e:	4b09      	ldr	r3, [pc, #36]	@ (8000bb4 <HAL_TIM_Base_MspInit+0x38>)
 8000b90:	69db      	ldr	r3, [r3, #28]
 8000b92:	4a08      	ldr	r2, [pc, #32]	@ (8000bb4 <HAL_TIM_Base_MspInit+0x38>)
 8000b94:	f043 0302 	orr.w	r3, r3, #2
 8000b98:	61d3      	str	r3, [r2, #28]
 8000b9a:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <HAL_TIM_Base_MspInit+0x38>)
 8000b9c:	69db      	ldr	r3, [r3, #28]
 8000b9e:	f003 0302 	and.w	r3, r3, #2
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000ba6:	bf00      	nop
 8000ba8:	3714      	adds	r7, #20
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr
 8000bb0:	40000400 	.word	0x40000400
 8000bb4:	40021000 	.word	0x40021000

08000bb8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b088      	sub	sp, #32
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	f107 0310 	add.w	r3, r7, #16
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a0f      	ldr	r2, [pc, #60]	@ (8000c10 <HAL_TIM_MspPostInit+0x58>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d117      	bne.n	8000c08 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8000c14 <HAL_TIM_MspPostInit+0x5c>)
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	4a0d      	ldr	r2, [pc, #52]	@ (8000c14 <HAL_TIM_MspPostInit+0x5c>)
 8000bde:	f043 0308 	orr.w	r3, r3, #8
 8000be2:	6193      	str	r3, [r2, #24]
 8000be4:	4b0b      	ldr	r3, [pc, #44]	@ (8000c14 <HAL_TIM_MspPostInit+0x5c>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	f003 0308 	and.w	r3, r3, #8
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfc:	f107 0310 	add.w	r3, r7, #16
 8000c00:	4619      	mov	r1, r3
 8000c02:	4805      	ldr	r0, [pc, #20]	@ (8000c18 <HAL_TIM_MspPostInit+0x60>)
 8000c04:	f000 fd6c 	bl	80016e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000c08:	bf00      	nop
 8000c0a:	3720      	adds	r7, #32
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40000400 	.word	0x40000400
 8000c14:	40021000 	.word	0x40021000
 8000c18:	40010c00 	.word	0x40010c00

08000c1c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c20:	4b11      	ldr	r3, [pc, #68]	@ (8000c68 <MX_USART1_UART_Init+0x4c>)
 8000c22:	4a12      	ldr	r2, [pc, #72]	@ (8000c6c <MX_USART1_UART_Init+0x50>)
 8000c24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000c26:	4b10      	ldr	r3, [pc, #64]	@ (8000c68 <MX_USART1_UART_Init+0x4c>)
 8000c28:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000c2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c68 <MX_USART1_UART_Init+0x4c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c34:	4b0c      	ldr	r3, [pc, #48]	@ (8000c68 <MX_USART1_UART_Init+0x4c>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c68 <MX_USART1_UART_Init+0x4c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c40:	4b09      	ldr	r3, [pc, #36]	@ (8000c68 <MX_USART1_UART_Init+0x4c>)
 8000c42:	220c      	movs	r2, #12
 8000c44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c46:	4b08      	ldr	r3, [pc, #32]	@ (8000c68 <MX_USART1_UART_Init+0x4c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c4c:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <MX_USART1_UART_Init+0x4c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c52:	4805      	ldr	r0, [pc, #20]	@ (8000c68 <MX_USART1_UART_Init+0x4c>)
 8000c54:	f002 f9a0 	bl	8002f98 <HAL_UART_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c5e:	f7ff fe1f 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	2000018c 	.word	0x2000018c
 8000c6c:	40013800 	.word	0x40013800

08000c70 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c74:	4b11      	ldr	r3, [pc, #68]	@ (8000cbc <MX_USART3_UART_Init+0x4c>)
 8000c76:	4a12      	ldr	r2, [pc, #72]	@ (8000cc0 <MX_USART3_UART_Init+0x50>)
 8000c78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c7a:	4b10      	ldr	r3, [pc, #64]	@ (8000cbc <MX_USART3_UART_Init+0x4c>)
 8000c7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c82:	4b0e      	ldr	r3, [pc, #56]	@ (8000cbc <MX_USART3_UART_Init+0x4c>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c88:	4b0c      	ldr	r3, [pc, #48]	@ (8000cbc <MX_USART3_UART_Init+0x4c>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000cbc <MX_USART3_UART_Init+0x4c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c94:	4b09      	ldr	r3, [pc, #36]	@ (8000cbc <MX_USART3_UART_Init+0x4c>)
 8000c96:	220c      	movs	r2, #12
 8000c98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c9a:	4b08      	ldr	r3, [pc, #32]	@ (8000cbc <MX_USART3_UART_Init+0x4c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	@ (8000cbc <MX_USART3_UART_Init+0x4c>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ca6:	4805      	ldr	r0, [pc, #20]	@ (8000cbc <MX_USART3_UART_Init+0x4c>)
 8000ca8:	f002 f976 	bl	8002f98 <HAL_UART_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000cb2:	f7ff fdf5 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	200001d4 	.word	0x200001d4
 8000cc0:	40004800 	.word	0x40004800

08000cc4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08a      	sub	sp, #40	@ 0x28
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	f107 0318 	add.w	r3, r7, #24
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a3c      	ldr	r2, [pc, #240]	@ (8000dd0 <HAL_UART_MspInit+0x10c>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d13a      	bne.n	8000d5a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ce4:	4b3b      	ldr	r3, [pc, #236]	@ (8000dd4 <HAL_UART_MspInit+0x110>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	4a3a      	ldr	r2, [pc, #232]	@ (8000dd4 <HAL_UART_MspInit+0x110>)
 8000cea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cee:	6193      	str	r3, [r2, #24]
 8000cf0:	4b38      	ldr	r3, [pc, #224]	@ (8000dd4 <HAL_UART_MspInit+0x110>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cf8:	617b      	str	r3, [r7, #20]
 8000cfa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfc:	4b35      	ldr	r3, [pc, #212]	@ (8000dd4 <HAL_UART_MspInit+0x110>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	4a34      	ldr	r2, [pc, #208]	@ (8000dd4 <HAL_UART_MspInit+0x110>)
 8000d02:	f043 0304 	orr.w	r3, r3, #4
 8000d06:	6193      	str	r3, [r2, #24]
 8000d08:	4b32      	ldr	r3, [pc, #200]	@ (8000dd4 <HAL_UART_MspInit+0x110>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	f003 0304 	and.w	r3, r3, #4
 8000d10:	613b      	str	r3, [r7, #16]
 8000d12:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d22:	f107 0318 	add.w	r3, r7, #24
 8000d26:	4619      	mov	r1, r3
 8000d28:	482b      	ldr	r0, [pc, #172]	@ (8000dd8 <HAL_UART_MspInit+0x114>)
 8000d2a:	f000 fcd9 	bl	80016e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3c:	f107 0318 	add.w	r3, r7, #24
 8000d40:	4619      	mov	r1, r3
 8000d42:	4825      	ldr	r0, [pc, #148]	@ (8000dd8 <HAL_UART_MspInit+0x114>)
 8000d44:	f000 fccc 	bl	80016e0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	2025      	movs	r0, #37	@ 0x25
 8000d4e:	f000 fbde 	bl	800150e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d52:	2025      	movs	r0, #37	@ 0x25
 8000d54:	f000 fbf7 	bl	8001546 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000d58:	e036      	b.n	8000dc8 <HAL_UART_MspInit+0x104>
  else if(uartHandle->Instance==USART3)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a1f      	ldr	r2, [pc, #124]	@ (8000ddc <HAL_UART_MspInit+0x118>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d131      	bne.n	8000dc8 <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d64:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd4 <HAL_UART_MspInit+0x110>)
 8000d66:	69db      	ldr	r3, [r3, #28]
 8000d68:	4a1a      	ldr	r2, [pc, #104]	@ (8000dd4 <HAL_UART_MspInit+0x110>)
 8000d6a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d6e:	61d3      	str	r3, [r2, #28]
 8000d70:	4b18      	ldr	r3, [pc, #96]	@ (8000dd4 <HAL_UART_MspInit+0x110>)
 8000d72:	69db      	ldr	r3, [r3, #28]
 8000d74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7c:	4b15      	ldr	r3, [pc, #84]	@ (8000dd4 <HAL_UART_MspInit+0x110>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	4a14      	ldr	r2, [pc, #80]	@ (8000dd4 <HAL_UART_MspInit+0x110>)
 8000d82:	f043 0308 	orr.w	r3, r3, #8
 8000d86:	6193      	str	r3, [r2, #24]
 8000d88:	4b12      	ldr	r3, [pc, #72]	@ (8000dd4 <HAL_UART_MspInit+0x110>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	f003 0308 	and.w	r3, r3, #8
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da2:	f107 0318 	add.w	r3, r7, #24
 8000da6:	4619      	mov	r1, r3
 8000da8:	480d      	ldr	r0, [pc, #52]	@ (8000de0 <HAL_UART_MspInit+0x11c>)
 8000daa:	f000 fc99 	bl	80016e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000dae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000db2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db4:	2300      	movs	r3, #0
 8000db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dbc:	f107 0318 	add.w	r3, r7, #24
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4807      	ldr	r0, [pc, #28]	@ (8000de0 <HAL_UART_MspInit+0x11c>)
 8000dc4:	f000 fc8c 	bl	80016e0 <HAL_GPIO_Init>
}
 8000dc8:	bf00      	nop
 8000dca:	3728      	adds	r7, #40	@ 0x28
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40013800 	.word	0x40013800
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	40010800 	.word	0x40010800
 8000ddc:	40004800 	.word	0x40004800
 8000de0:	40010c00 	.word	0x40010c00

08000de4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000de4:	f7ff fe4e 	bl	8000a84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000de8:	480b      	ldr	r0, [pc, #44]	@ (8000e18 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000dea:	490c      	ldr	r1, [pc, #48]	@ (8000e1c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000dec:	4a0c      	ldr	r2, [pc, #48]	@ (8000e20 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000dee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df0:	e002      	b.n	8000df8 <LoopCopyDataInit>

08000df2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df6:	3304      	adds	r3, #4

08000df8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dfc:	d3f9      	bcc.n	8000df2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfe:	4a09      	ldr	r2, [pc, #36]	@ (8000e24 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e00:	4c09      	ldr	r4, [pc, #36]	@ (8000e28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e04:	e001      	b.n	8000e0a <LoopFillZerobss>

08000e06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e08:	3204      	adds	r2, #4

08000e0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e0c:	d3fb      	bcc.n	8000e06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e0e:	f003 f8b9 	bl	8003f84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e12:	f7ff fb83 	bl	800051c <main>
  bx lr
 8000e16:	4770      	bx	lr
  ldr r0, =_sdata
 8000e18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e1c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e20:	08005220 	.word	0x08005220
  ldr r2, =_sbss
 8000e24:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e28:	2000036c 	.word	0x2000036c

08000e2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e2c:	e7fe      	b.n	8000e2c <ADC1_2_IRQHandler>
	...

08000e30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e34:	4b08      	ldr	r3, [pc, #32]	@ (8000e58 <HAL_Init+0x28>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a07      	ldr	r2, [pc, #28]	@ (8000e58 <HAL_Init+0x28>)
 8000e3a:	f043 0310 	orr.w	r3, r3, #16
 8000e3e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e40:	2003      	movs	r0, #3
 8000e42:	f000 fb59 	bl	80014f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e46:	200f      	movs	r0, #15
 8000e48:	f000 f808 	bl	8000e5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e4c:	f7ff fd2e 	bl	80008ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40022000 	.word	0x40022000

08000e5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e64:	4b12      	ldr	r3, [pc, #72]	@ (8000eb0 <HAL_InitTick+0x54>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	4b12      	ldr	r3, [pc, #72]	@ (8000eb4 <HAL_InitTick+0x58>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f000 fb71 	bl	8001562 <HAL_SYSTICK_Config>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e00e      	b.n	8000ea8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2b0f      	cmp	r3, #15
 8000e8e:	d80a      	bhi.n	8000ea6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e90:	2200      	movs	r2, #0
 8000e92:	6879      	ldr	r1, [r7, #4]
 8000e94:	f04f 30ff 	mov.w	r0, #4294967295
 8000e98:	f000 fb39 	bl	800150e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e9c:	4a06      	ldr	r2, [pc, #24]	@ (8000eb8 <HAL_InitTick+0x5c>)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	e000      	b.n	8000ea8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000000 	.word	0x20000000
 8000eb4:	20000008 	.word	0x20000008
 8000eb8:	20000004 	.word	0x20000004

08000ebc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec0:	4b05      	ldr	r3, [pc, #20]	@ (8000ed8 <HAL_IncTick+0x1c>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	4b05      	ldr	r3, [pc, #20]	@ (8000edc <HAL_IncTick+0x20>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4413      	add	r3, r2
 8000ecc:	4a03      	ldr	r2, [pc, #12]	@ (8000edc <HAL_IncTick+0x20>)
 8000ece:	6013      	str	r3, [r2, #0]
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr
 8000ed8:	20000008 	.word	0x20000008
 8000edc:	2000021c 	.word	0x2000021c

08000ee0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee4:	4b02      	ldr	r3, [pc, #8]	@ (8000ef0 <HAL_GetTick+0x10>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr
 8000ef0:	2000021c 	.word	0x2000021c

08000ef4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000efc:	f7ff fff0 	bl	8000ee0 <HAL_GetTick>
 8000f00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f0c:	d005      	beq.n	8000f1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f38 <HAL_Delay+0x44>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	461a      	mov	r2, r3
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	4413      	add	r3, r2
 8000f18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f1a:	bf00      	nop
 8000f1c:	f7ff ffe0 	bl	8000ee0 <HAL_GetTick>
 8000f20:	4602      	mov	r2, r0
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d8f7      	bhi.n	8000f1c <HAL_Delay+0x28>
  {
  }
}
 8000f2c:	bf00      	nop
 8000f2e:	bf00      	nop
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000008 	.word	0x20000008

08000f3c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f44:	2300      	movs	r3, #0
 8000f46:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000f50:	2300      	movs	r3, #0
 8000f52:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d101      	bne.n	8000f5e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e0be      	b.n	80010dc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d109      	bne.n	8000f80 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff f962 	bl	8000244 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f000 f9ab 	bl	80012dc <ADC_ConversionStop_Disable>
 8000f86:	4603      	mov	r3, r0
 8000f88:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f8e:	f003 0310 	and.w	r3, r3, #16
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	f040 8099 	bne.w	80010ca <HAL_ADC_Init+0x18e>
 8000f98:	7dfb      	ldrb	r3, [r7, #23]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	f040 8095 	bne.w	80010ca <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fa4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000fa8:	f023 0302 	bic.w	r3, r3, #2
 8000fac:	f043 0202 	orr.w	r2, r3, #2
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000fbc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	7b1b      	ldrb	r3, [r3, #12]
 8000fc2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000fc4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000fc6:	68ba      	ldr	r2, [r7, #8]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000fd4:	d003      	beq.n	8000fde <HAL_ADC_Init+0xa2>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d102      	bne.n	8000fe4 <HAL_ADC_Init+0xa8>
 8000fde:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fe2:	e000      	b.n	8000fe6 <HAL_ADC_Init+0xaa>
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	7d1b      	ldrb	r3, [r3, #20]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d119      	bne.n	8001028 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	7b1b      	ldrb	r3, [r3, #12]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d109      	bne.n	8001010 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	3b01      	subs	r3, #1
 8001002:	035a      	lsls	r2, r3, #13
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	4313      	orrs	r3, r2
 8001008:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	e00b      	b.n	8001028 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001014:	f043 0220 	orr.w	r2, r3, #32
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001020:	f043 0201 	orr.w	r2, r3, #1
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	430a      	orrs	r2, r1
 800103a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	689a      	ldr	r2, [r3, #8]
 8001042:	4b28      	ldr	r3, [pc, #160]	@ (80010e4 <HAL_ADC_Init+0x1a8>)
 8001044:	4013      	ands	r3, r2
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	6812      	ldr	r2, [r2, #0]
 800104a:	68b9      	ldr	r1, [r7, #8]
 800104c:	430b      	orrs	r3, r1
 800104e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001058:	d003      	beq.n	8001062 <HAL_ADC_Init+0x126>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d104      	bne.n	800106c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	691b      	ldr	r3, [r3, #16]
 8001066:	3b01      	subs	r3, #1
 8001068:	051b      	lsls	r3, r3, #20
 800106a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001072:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	68fa      	ldr	r2, [r7, #12]
 800107c:	430a      	orrs	r2, r1
 800107e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	689a      	ldr	r2, [r3, #8]
 8001086:	4b18      	ldr	r3, [pc, #96]	@ (80010e8 <HAL_ADC_Init+0x1ac>)
 8001088:	4013      	ands	r3, r2
 800108a:	68ba      	ldr	r2, [r7, #8]
 800108c:	429a      	cmp	r2, r3
 800108e:	d10b      	bne.n	80010a8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800109a:	f023 0303 	bic.w	r3, r3, #3
 800109e:	f043 0201 	orr.w	r2, r3, #1
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80010a6:	e018      	b.n	80010da <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010ac:	f023 0312 	bic.w	r3, r3, #18
 80010b0:	f043 0210 	orr.w	r2, r3, #16
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010bc:	f043 0201 	orr.w	r2, r3, #1
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80010c8:	e007      	b.n	80010da <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010ce:	f043 0210 	orr.w	r2, r3, #16
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80010da:	7dfb      	ldrb	r3, [r7, #23]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3718      	adds	r7, #24
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	ffe1f7fd 	.word	0xffe1f7fd
 80010e8:	ff1f0efe 	.word	0xff1f0efe

080010ec <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010f6:	2300      	movs	r3, #0
 80010f8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001104:	2b01      	cmp	r3, #1
 8001106:	d101      	bne.n	800110c <HAL_ADC_ConfigChannel+0x20>
 8001108:	2302      	movs	r3, #2
 800110a:	e0dc      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x1da>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2201      	movs	r2, #1
 8001110:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	2b06      	cmp	r3, #6
 800111a:	d81c      	bhi.n	8001156 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685a      	ldr	r2, [r3, #4]
 8001126:	4613      	mov	r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	4413      	add	r3, r2
 800112c:	3b05      	subs	r3, #5
 800112e:	221f      	movs	r2, #31
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	4019      	ands	r1, r3
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	6818      	ldr	r0, [r3, #0]
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685a      	ldr	r2, [r3, #4]
 8001140:	4613      	mov	r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4413      	add	r3, r2
 8001146:	3b05      	subs	r3, #5
 8001148:	fa00 f203 	lsl.w	r2, r0, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	430a      	orrs	r2, r1
 8001152:	635a      	str	r2, [r3, #52]	@ 0x34
 8001154:	e03c      	b.n	80011d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	2b0c      	cmp	r3, #12
 800115c:	d81c      	bhi.n	8001198 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	4613      	mov	r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	4413      	add	r3, r2
 800116e:	3b23      	subs	r3, #35	@ 0x23
 8001170:	221f      	movs	r2, #31
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43db      	mvns	r3, r3
 8001178:	4019      	ands	r1, r3
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	6818      	ldr	r0, [r3, #0]
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685a      	ldr	r2, [r3, #4]
 8001182:	4613      	mov	r3, r2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	4413      	add	r3, r2
 8001188:	3b23      	subs	r3, #35	@ 0x23
 800118a:	fa00 f203 	lsl.w	r2, r0, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	430a      	orrs	r2, r1
 8001194:	631a      	str	r2, [r3, #48]	@ 0x30
 8001196:	e01b      	b.n	80011d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	4613      	mov	r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	4413      	add	r3, r2
 80011a8:	3b41      	subs	r3, #65	@ 0x41
 80011aa:	221f      	movs	r2, #31
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	4019      	ands	r1, r3
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	6818      	ldr	r0, [r3, #0]
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685a      	ldr	r2, [r3, #4]
 80011bc:	4613      	mov	r3, r2
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	4413      	add	r3, r2
 80011c2:	3b41      	subs	r3, #65	@ 0x41
 80011c4:	fa00 f203 	lsl.w	r2, r0, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	430a      	orrs	r2, r1
 80011ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2b09      	cmp	r3, #9
 80011d6:	d91c      	bls.n	8001212 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	68d9      	ldr	r1, [r3, #12]
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	4613      	mov	r3, r2
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	4413      	add	r3, r2
 80011e8:	3b1e      	subs	r3, #30
 80011ea:	2207      	movs	r2, #7
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	43db      	mvns	r3, r3
 80011f2:	4019      	ands	r1, r3
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	6898      	ldr	r0, [r3, #8]
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	4613      	mov	r3, r2
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	4413      	add	r3, r2
 8001202:	3b1e      	subs	r3, #30
 8001204:	fa00 f203 	lsl.w	r2, r0, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	430a      	orrs	r2, r1
 800120e:	60da      	str	r2, [r3, #12]
 8001210:	e019      	b.n	8001246 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	6919      	ldr	r1, [r3, #16]
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	4613      	mov	r3, r2
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	4413      	add	r3, r2
 8001222:	2207      	movs	r2, #7
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	4019      	ands	r1, r3
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	6898      	ldr	r0, [r3, #8]
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4613      	mov	r3, r2
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	4413      	add	r3, r2
 800123a:	fa00 f203 	lsl.w	r2, r0, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	430a      	orrs	r2, r1
 8001244:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2b10      	cmp	r3, #16
 800124c:	d003      	beq.n	8001256 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001252:	2b11      	cmp	r3, #17
 8001254:	d132      	bne.n	80012bc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a1d      	ldr	r2, [pc, #116]	@ (80012d0 <HAL_ADC_ConfigChannel+0x1e4>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d125      	bne.n	80012ac <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d126      	bne.n	80012bc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	689a      	ldr	r2, [r3, #8]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800127c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2b10      	cmp	r3, #16
 8001284:	d11a      	bne.n	80012bc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001286:	4b13      	ldr	r3, [pc, #76]	@ (80012d4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a13      	ldr	r2, [pc, #76]	@ (80012d8 <HAL_ADC_ConfigChannel+0x1ec>)
 800128c:	fba2 2303 	umull	r2, r3, r2, r3
 8001290:	0c9a      	lsrs	r2, r3, #18
 8001292:	4613      	mov	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4413      	add	r3, r2
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800129c:	e002      	b.n	80012a4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	3b01      	subs	r3, #1
 80012a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d1f9      	bne.n	800129e <HAL_ADC_ConfigChannel+0x1b2>
 80012aa:	e007      	b.n	80012bc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012b0:	f043 0220 	orr.w	r2, r3, #32
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr
 80012d0:	40012400 	.word	0x40012400
 80012d4:	20000000 	.word	0x20000000
 80012d8:	431bde83 	.word	0x431bde83

080012dc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d12e      	bne.n	8001354 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	689a      	ldr	r2, [r3, #8]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f022 0201 	bic.w	r2, r2, #1
 8001304:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001306:	f7ff fdeb 	bl	8000ee0 <HAL_GetTick>
 800130a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800130c:	e01b      	b.n	8001346 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800130e:	f7ff fde7 	bl	8000ee0 <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b02      	cmp	r3, #2
 800131a:	d914      	bls.n	8001346 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	2b01      	cmp	r3, #1
 8001328:	d10d      	bne.n	8001346 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800132e:	f043 0210 	orr.w	r2, r3, #16
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800133a:	f043 0201 	orr.w	r2, r3, #1
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e007      	b.n	8001356 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	f003 0301 	and.w	r3, r3, #1
 8001350:	2b01      	cmp	r3, #1
 8001352:	d0dc      	beq.n	800130e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
	...

08001360 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001370:	4b0c      	ldr	r3, [pc, #48]	@ (80013a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001376:	68ba      	ldr	r2, [r7, #8]
 8001378:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800137c:	4013      	ands	r3, r2
 800137e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001388:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800138c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001392:	4a04      	ldr	r2, [pc, #16]	@ (80013a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	60d3      	str	r3, [r2, #12]
}
 8001398:	bf00      	nop
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	bc80      	pop	{r7}
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013ac:	4b04      	ldr	r3, [pc, #16]	@ (80013c0 <__NVIC_GetPriorityGrouping+0x18>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	0a1b      	lsrs	r3, r3, #8
 80013b2:	f003 0307 	and.w	r3, r3, #7
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bc80      	pop	{r7}
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	db0b      	blt.n	80013ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	f003 021f 	and.w	r2, r3, #31
 80013dc:	4906      	ldr	r1, [pc, #24]	@ (80013f8 <__NVIC_EnableIRQ+0x34>)
 80013de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e2:	095b      	lsrs	r3, r3, #5
 80013e4:	2001      	movs	r0, #1
 80013e6:	fa00 f202 	lsl.w	r2, r0, r2
 80013ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr
 80013f8:	e000e100 	.word	0xe000e100

080013fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	6039      	str	r1, [r7, #0]
 8001406:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140c:	2b00      	cmp	r3, #0
 800140e:	db0a      	blt.n	8001426 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	b2da      	uxtb	r2, r3
 8001414:	490c      	ldr	r1, [pc, #48]	@ (8001448 <__NVIC_SetPriority+0x4c>)
 8001416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141a:	0112      	lsls	r2, r2, #4
 800141c:	b2d2      	uxtb	r2, r2
 800141e:	440b      	add	r3, r1
 8001420:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001424:	e00a      	b.n	800143c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	b2da      	uxtb	r2, r3
 800142a:	4908      	ldr	r1, [pc, #32]	@ (800144c <__NVIC_SetPriority+0x50>)
 800142c:	79fb      	ldrb	r3, [r7, #7]
 800142e:	f003 030f 	and.w	r3, r3, #15
 8001432:	3b04      	subs	r3, #4
 8001434:	0112      	lsls	r2, r2, #4
 8001436:	b2d2      	uxtb	r2, r2
 8001438:	440b      	add	r3, r1
 800143a:	761a      	strb	r2, [r3, #24]
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	e000e100 	.word	0xe000e100
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001450:	b480      	push	{r7}
 8001452:	b089      	sub	sp, #36	@ 0x24
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	f1c3 0307 	rsb	r3, r3, #7
 800146a:	2b04      	cmp	r3, #4
 800146c:	bf28      	it	cs
 800146e:	2304      	movcs	r3, #4
 8001470:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	3304      	adds	r3, #4
 8001476:	2b06      	cmp	r3, #6
 8001478:	d902      	bls.n	8001480 <NVIC_EncodePriority+0x30>
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	3b03      	subs	r3, #3
 800147e:	e000      	b.n	8001482 <NVIC_EncodePriority+0x32>
 8001480:	2300      	movs	r3, #0
 8001482:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001484:	f04f 32ff 	mov.w	r2, #4294967295
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43da      	mvns	r2, r3
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	401a      	ands	r2, r3
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001498:	f04f 31ff 	mov.w	r1, #4294967295
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	fa01 f303 	lsl.w	r3, r1, r3
 80014a2:	43d9      	mvns	r1, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a8:	4313      	orrs	r3, r2
         );
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3724      	adds	r7, #36	@ 0x24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr

080014b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3b01      	subs	r3, #1
 80014c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014c4:	d301      	bcc.n	80014ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014c6:	2301      	movs	r3, #1
 80014c8:	e00f      	b.n	80014ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ca:	4a0a      	ldr	r2, [pc, #40]	@ (80014f4 <SysTick_Config+0x40>)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014d2:	210f      	movs	r1, #15
 80014d4:	f04f 30ff 	mov.w	r0, #4294967295
 80014d8:	f7ff ff90 	bl	80013fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014dc:	4b05      	ldr	r3, [pc, #20]	@ (80014f4 <SysTick_Config+0x40>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014e2:	4b04      	ldr	r3, [pc, #16]	@ (80014f4 <SysTick_Config+0x40>)
 80014e4:	2207      	movs	r2, #7
 80014e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	e000e010 	.word	0xe000e010

080014f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff ff2d 	bl	8001360 <__NVIC_SetPriorityGrouping>
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800150e:	b580      	push	{r7, lr}
 8001510:	b086      	sub	sp, #24
 8001512:	af00      	add	r7, sp, #0
 8001514:	4603      	mov	r3, r0
 8001516:	60b9      	str	r1, [r7, #8]
 8001518:	607a      	str	r2, [r7, #4]
 800151a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001520:	f7ff ff42 	bl	80013a8 <__NVIC_GetPriorityGrouping>
 8001524:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	68b9      	ldr	r1, [r7, #8]
 800152a:	6978      	ldr	r0, [r7, #20]
 800152c:	f7ff ff90 	bl	8001450 <NVIC_EncodePriority>
 8001530:	4602      	mov	r2, r0
 8001532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001536:	4611      	mov	r1, r2
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff ff5f 	bl	80013fc <__NVIC_SetPriority>
}
 800153e:	bf00      	nop
 8001540:	3718      	adds	r7, #24
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b082      	sub	sp, #8
 800154a:	af00      	add	r7, sp, #0
 800154c:	4603      	mov	r3, r0
 800154e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff ff35 	bl	80013c4 <__NVIC_EnableIRQ>
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b082      	sub	sp, #8
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f7ff ffa2 	bl	80014b4 <SysTick_Config>
 8001570:	4603      	mov	r3, r0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800157a:	b480      	push	{r7}
 800157c:	b085      	sub	sp, #20
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001582:	2300      	movs	r3, #0
 8001584:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b02      	cmp	r3, #2
 8001590:	d008      	beq.n	80015a4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2204      	movs	r2, #4
 8001596:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e020      	b.n	80015e6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f022 020e 	bic.w	r2, r2, #14
 80015b2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f022 0201 	bic.w	r2, r2, #1
 80015c2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015cc:	2101      	movs	r1, #1
 80015ce:	fa01 f202 	lsl.w	r2, r1, r2
 80015d2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2201      	movs	r2, #1
 80015d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80015e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3714      	adds	r7, #20
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr

080015f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015f8:	2300      	movs	r3, #0
 80015fa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001602:	b2db      	uxtb	r3, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d005      	beq.n	8001614 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2204      	movs	r2, #4
 800160c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	73fb      	strb	r3, [r7, #15]
 8001612:	e051      	b.n	80016b8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f022 020e 	bic.w	r2, r2, #14
 8001622:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f022 0201 	bic.w	r2, r2, #1
 8001632:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a22      	ldr	r2, [pc, #136]	@ (80016c4 <HAL_DMA_Abort_IT+0xd4>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d029      	beq.n	8001692 <HAL_DMA_Abort_IT+0xa2>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a21      	ldr	r2, [pc, #132]	@ (80016c8 <HAL_DMA_Abort_IT+0xd8>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d022      	beq.n	800168e <HAL_DMA_Abort_IT+0x9e>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a1f      	ldr	r2, [pc, #124]	@ (80016cc <HAL_DMA_Abort_IT+0xdc>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d01a      	beq.n	8001688 <HAL_DMA_Abort_IT+0x98>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a1e      	ldr	r2, [pc, #120]	@ (80016d0 <HAL_DMA_Abort_IT+0xe0>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d012      	beq.n	8001682 <HAL_DMA_Abort_IT+0x92>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a1c      	ldr	r2, [pc, #112]	@ (80016d4 <HAL_DMA_Abort_IT+0xe4>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d00a      	beq.n	800167c <HAL_DMA_Abort_IT+0x8c>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a1b      	ldr	r2, [pc, #108]	@ (80016d8 <HAL_DMA_Abort_IT+0xe8>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d102      	bne.n	8001676 <HAL_DMA_Abort_IT+0x86>
 8001670:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001674:	e00e      	b.n	8001694 <HAL_DMA_Abort_IT+0xa4>
 8001676:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800167a:	e00b      	b.n	8001694 <HAL_DMA_Abort_IT+0xa4>
 800167c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001680:	e008      	b.n	8001694 <HAL_DMA_Abort_IT+0xa4>
 8001682:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001686:	e005      	b.n	8001694 <HAL_DMA_Abort_IT+0xa4>
 8001688:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800168c:	e002      	b.n	8001694 <HAL_DMA_Abort_IT+0xa4>
 800168e:	2310      	movs	r3, #16
 8001690:	e000      	b.n	8001694 <HAL_DMA_Abort_IT+0xa4>
 8001692:	2301      	movs	r3, #1
 8001694:	4a11      	ldr	r2, [pc, #68]	@ (80016dc <HAL_DMA_Abort_IT+0xec>)
 8001696:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2201      	movs	r2, #1
 800169c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d003      	beq.n	80016b8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	4798      	blx	r3
    } 
  }
  return status;
 80016b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40020008 	.word	0x40020008
 80016c8:	4002001c 	.word	0x4002001c
 80016cc:	40020030 	.word	0x40020030
 80016d0:	40020044 	.word	0x40020044
 80016d4:	40020058 	.word	0x40020058
 80016d8:	4002006c 	.word	0x4002006c
 80016dc:	40020000 	.word	0x40020000

080016e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b08b      	sub	sp, #44	@ 0x2c
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ea:	2300      	movs	r3, #0
 80016ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016ee:	2300      	movs	r3, #0
 80016f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016f2:	e169      	b.n	80019c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016f4:	2201      	movs	r2, #1
 80016f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	69fa      	ldr	r2, [r7, #28]
 8001704:	4013      	ands	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	429a      	cmp	r2, r3
 800170e:	f040 8158 	bne.w	80019c2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	4a9a      	ldr	r2, [pc, #616]	@ (8001980 <HAL_GPIO_Init+0x2a0>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d05e      	beq.n	80017da <HAL_GPIO_Init+0xfa>
 800171c:	4a98      	ldr	r2, [pc, #608]	@ (8001980 <HAL_GPIO_Init+0x2a0>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d875      	bhi.n	800180e <HAL_GPIO_Init+0x12e>
 8001722:	4a98      	ldr	r2, [pc, #608]	@ (8001984 <HAL_GPIO_Init+0x2a4>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d058      	beq.n	80017da <HAL_GPIO_Init+0xfa>
 8001728:	4a96      	ldr	r2, [pc, #600]	@ (8001984 <HAL_GPIO_Init+0x2a4>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d86f      	bhi.n	800180e <HAL_GPIO_Init+0x12e>
 800172e:	4a96      	ldr	r2, [pc, #600]	@ (8001988 <HAL_GPIO_Init+0x2a8>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d052      	beq.n	80017da <HAL_GPIO_Init+0xfa>
 8001734:	4a94      	ldr	r2, [pc, #592]	@ (8001988 <HAL_GPIO_Init+0x2a8>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d869      	bhi.n	800180e <HAL_GPIO_Init+0x12e>
 800173a:	4a94      	ldr	r2, [pc, #592]	@ (800198c <HAL_GPIO_Init+0x2ac>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d04c      	beq.n	80017da <HAL_GPIO_Init+0xfa>
 8001740:	4a92      	ldr	r2, [pc, #584]	@ (800198c <HAL_GPIO_Init+0x2ac>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d863      	bhi.n	800180e <HAL_GPIO_Init+0x12e>
 8001746:	4a92      	ldr	r2, [pc, #584]	@ (8001990 <HAL_GPIO_Init+0x2b0>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d046      	beq.n	80017da <HAL_GPIO_Init+0xfa>
 800174c:	4a90      	ldr	r2, [pc, #576]	@ (8001990 <HAL_GPIO_Init+0x2b0>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d85d      	bhi.n	800180e <HAL_GPIO_Init+0x12e>
 8001752:	2b12      	cmp	r3, #18
 8001754:	d82a      	bhi.n	80017ac <HAL_GPIO_Init+0xcc>
 8001756:	2b12      	cmp	r3, #18
 8001758:	d859      	bhi.n	800180e <HAL_GPIO_Init+0x12e>
 800175a:	a201      	add	r2, pc, #4	@ (adr r2, 8001760 <HAL_GPIO_Init+0x80>)
 800175c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001760:	080017db 	.word	0x080017db
 8001764:	080017b5 	.word	0x080017b5
 8001768:	080017c7 	.word	0x080017c7
 800176c:	08001809 	.word	0x08001809
 8001770:	0800180f 	.word	0x0800180f
 8001774:	0800180f 	.word	0x0800180f
 8001778:	0800180f 	.word	0x0800180f
 800177c:	0800180f 	.word	0x0800180f
 8001780:	0800180f 	.word	0x0800180f
 8001784:	0800180f 	.word	0x0800180f
 8001788:	0800180f 	.word	0x0800180f
 800178c:	0800180f 	.word	0x0800180f
 8001790:	0800180f 	.word	0x0800180f
 8001794:	0800180f 	.word	0x0800180f
 8001798:	0800180f 	.word	0x0800180f
 800179c:	0800180f 	.word	0x0800180f
 80017a0:	0800180f 	.word	0x0800180f
 80017a4:	080017bd 	.word	0x080017bd
 80017a8:	080017d1 	.word	0x080017d1
 80017ac:	4a79      	ldr	r2, [pc, #484]	@ (8001994 <HAL_GPIO_Init+0x2b4>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d013      	beq.n	80017da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017b2:	e02c      	b.n	800180e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	623b      	str	r3, [r7, #32]
          break;
 80017ba:	e029      	b.n	8001810 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	3304      	adds	r3, #4
 80017c2:	623b      	str	r3, [r7, #32]
          break;
 80017c4:	e024      	b.n	8001810 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	3308      	adds	r3, #8
 80017cc:	623b      	str	r3, [r7, #32]
          break;
 80017ce:	e01f      	b.n	8001810 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	330c      	adds	r3, #12
 80017d6:	623b      	str	r3, [r7, #32]
          break;
 80017d8:	e01a      	b.n	8001810 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d102      	bne.n	80017e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017e2:	2304      	movs	r3, #4
 80017e4:	623b      	str	r3, [r7, #32]
          break;
 80017e6:	e013      	b.n	8001810 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d105      	bne.n	80017fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017f0:	2308      	movs	r3, #8
 80017f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	69fa      	ldr	r2, [r7, #28]
 80017f8:	611a      	str	r2, [r3, #16]
          break;
 80017fa:	e009      	b.n	8001810 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017fc:	2308      	movs	r3, #8
 80017fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	69fa      	ldr	r2, [r7, #28]
 8001804:	615a      	str	r2, [r3, #20]
          break;
 8001806:	e003      	b.n	8001810 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001808:	2300      	movs	r3, #0
 800180a:	623b      	str	r3, [r7, #32]
          break;
 800180c:	e000      	b.n	8001810 <HAL_GPIO_Init+0x130>
          break;
 800180e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	2bff      	cmp	r3, #255	@ 0xff
 8001814:	d801      	bhi.n	800181a <HAL_GPIO_Init+0x13a>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	e001      	b.n	800181e <HAL_GPIO_Init+0x13e>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3304      	adds	r3, #4
 800181e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	2bff      	cmp	r3, #255	@ 0xff
 8001824:	d802      	bhi.n	800182c <HAL_GPIO_Init+0x14c>
 8001826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	e002      	b.n	8001832 <HAL_GPIO_Init+0x152>
 800182c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800182e:	3b08      	subs	r3, #8
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	210f      	movs	r1, #15
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	fa01 f303 	lsl.w	r3, r1, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	401a      	ands	r2, r3
 8001844:	6a39      	ldr	r1, [r7, #32]
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	fa01 f303 	lsl.w	r3, r1, r3
 800184c:	431a      	orrs	r2, r3
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800185a:	2b00      	cmp	r3, #0
 800185c:	f000 80b1 	beq.w	80019c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001860:	4b4d      	ldr	r3, [pc, #308]	@ (8001998 <HAL_GPIO_Init+0x2b8>)
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	4a4c      	ldr	r2, [pc, #304]	@ (8001998 <HAL_GPIO_Init+0x2b8>)
 8001866:	f043 0301 	orr.w	r3, r3, #1
 800186a:	6193      	str	r3, [r2, #24]
 800186c:	4b4a      	ldr	r3, [pc, #296]	@ (8001998 <HAL_GPIO_Init+0x2b8>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	60bb      	str	r3, [r7, #8]
 8001876:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001878:	4a48      	ldr	r2, [pc, #288]	@ (800199c <HAL_GPIO_Init+0x2bc>)
 800187a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800187c:	089b      	lsrs	r3, r3, #2
 800187e:	3302      	adds	r3, #2
 8001880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001884:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001888:	f003 0303 	and.w	r3, r3, #3
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	220f      	movs	r2, #15
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	4013      	ands	r3, r2
 800189a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4a40      	ldr	r2, [pc, #256]	@ (80019a0 <HAL_GPIO_Init+0x2c0>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d013      	beq.n	80018cc <HAL_GPIO_Init+0x1ec>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4a3f      	ldr	r2, [pc, #252]	@ (80019a4 <HAL_GPIO_Init+0x2c4>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d00d      	beq.n	80018c8 <HAL_GPIO_Init+0x1e8>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a3e      	ldr	r2, [pc, #248]	@ (80019a8 <HAL_GPIO_Init+0x2c8>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d007      	beq.n	80018c4 <HAL_GPIO_Init+0x1e4>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a3d      	ldr	r2, [pc, #244]	@ (80019ac <HAL_GPIO_Init+0x2cc>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d101      	bne.n	80018c0 <HAL_GPIO_Init+0x1e0>
 80018bc:	2303      	movs	r3, #3
 80018be:	e006      	b.n	80018ce <HAL_GPIO_Init+0x1ee>
 80018c0:	2304      	movs	r3, #4
 80018c2:	e004      	b.n	80018ce <HAL_GPIO_Init+0x1ee>
 80018c4:	2302      	movs	r3, #2
 80018c6:	e002      	b.n	80018ce <HAL_GPIO_Init+0x1ee>
 80018c8:	2301      	movs	r3, #1
 80018ca:	e000      	b.n	80018ce <HAL_GPIO_Init+0x1ee>
 80018cc:	2300      	movs	r3, #0
 80018ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018d0:	f002 0203 	and.w	r2, r2, #3
 80018d4:	0092      	lsls	r2, r2, #2
 80018d6:	4093      	lsls	r3, r2
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	4313      	orrs	r3, r2
 80018dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018de:	492f      	ldr	r1, [pc, #188]	@ (800199c <HAL_GPIO_Init+0x2bc>)
 80018e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e2:	089b      	lsrs	r3, r3, #2
 80018e4:	3302      	adds	r3, #2
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d006      	beq.n	8001906 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018f8:	4b2d      	ldr	r3, [pc, #180]	@ (80019b0 <HAL_GPIO_Init+0x2d0>)
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	492c      	ldr	r1, [pc, #176]	@ (80019b0 <HAL_GPIO_Init+0x2d0>)
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	4313      	orrs	r3, r2
 8001902:	608b      	str	r3, [r1, #8]
 8001904:	e006      	b.n	8001914 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001906:	4b2a      	ldr	r3, [pc, #168]	@ (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001908:	689a      	ldr	r2, [r3, #8]
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	43db      	mvns	r3, r3
 800190e:	4928      	ldr	r1, [pc, #160]	@ (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001910:	4013      	ands	r3, r2
 8001912:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d006      	beq.n	800192e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001920:	4b23      	ldr	r3, [pc, #140]	@ (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001922:	68da      	ldr	r2, [r3, #12]
 8001924:	4922      	ldr	r1, [pc, #136]	@ (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	4313      	orrs	r3, r2
 800192a:	60cb      	str	r3, [r1, #12]
 800192c:	e006      	b.n	800193c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800192e:	4b20      	ldr	r3, [pc, #128]	@ (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001930:	68da      	ldr	r2, [r3, #12]
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	43db      	mvns	r3, r3
 8001936:	491e      	ldr	r1, [pc, #120]	@ (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001938:	4013      	ands	r3, r2
 800193a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d006      	beq.n	8001956 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001948:	4b19      	ldr	r3, [pc, #100]	@ (80019b0 <HAL_GPIO_Init+0x2d0>)
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	4918      	ldr	r1, [pc, #96]	@ (80019b0 <HAL_GPIO_Init+0x2d0>)
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	4313      	orrs	r3, r2
 8001952:	604b      	str	r3, [r1, #4]
 8001954:	e006      	b.n	8001964 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001956:	4b16      	ldr	r3, [pc, #88]	@ (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001958:	685a      	ldr	r2, [r3, #4]
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	43db      	mvns	r3, r3
 800195e:	4914      	ldr	r1, [pc, #80]	@ (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001960:	4013      	ands	r3, r2
 8001962:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d021      	beq.n	80019b4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001970:	4b0f      	ldr	r3, [pc, #60]	@ (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	490e      	ldr	r1, [pc, #56]	@ (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	4313      	orrs	r3, r2
 800197a:	600b      	str	r3, [r1, #0]
 800197c:	e021      	b.n	80019c2 <HAL_GPIO_Init+0x2e2>
 800197e:	bf00      	nop
 8001980:	10320000 	.word	0x10320000
 8001984:	10310000 	.word	0x10310000
 8001988:	10220000 	.word	0x10220000
 800198c:	10210000 	.word	0x10210000
 8001990:	10120000 	.word	0x10120000
 8001994:	10110000 	.word	0x10110000
 8001998:	40021000 	.word	0x40021000
 800199c:	40010000 	.word	0x40010000
 80019a0:	40010800 	.word	0x40010800
 80019a4:	40010c00 	.word	0x40010c00
 80019a8:	40011000 	.word	0x40011000
 80019ac:	40011400 	.word	0x40011400
 80019b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019b4:	4b0b      	ldr	r3, [pc, #44]	@ (80019e4 <HAL_GPIO_Init+0x304>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	43db      	mvns	r3, r3
 80019bc:	4909      	ldr	r1, [pc, #36]	@ (80019e4 <HAL_GPIO_Init+0x304>)
 80019be:	4013      	ands	r3, r2
 80019c0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80019c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c4:	3301      	adds	r3, #1
 80019c6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ce:	fa22 f303 	lsr.w	r3, r2, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f47f ae8e 	bne.w	80016f4 <HAL_GPIO_Init+0x14>
  }
}
 80019d8:	bf00      	nop
 80019da:	bf00      	nop
 80019dc:	372c      	adds	r7, #44	@ 0x2c
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr
 80019e4:	40010400 	.word	0x40010400

080019e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	460b      	mov	r3, r1
 80019f2:	807b      	strh	r3, [r7, #2]
 80019f4:	4613      	mov	r3, r2
 80019f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019f8:	787b      	ldrb	r3, [r7, #1]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019fe:	887a      	ldrh	r2, [r7, #2]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a04:	e003      	b.n	8001a0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a06:	887b      	ldrh	r3, [r7, #2]
 8001a08:	041a      	lsls	r2, r3, #16
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	611a      	str	r2, [r3, #16]
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bc80      	pop	{r7}
 8001a16:	4770      	bx	lr

08001a18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e12b      	b.n	8001c82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d106      	bne.n	8001a44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7fe fd2e 	bl	80004a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2224      	movs	r2, #36	@ 0x24
 8001a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 0201 	bic.w	r2, r2, #1
 8001a5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001a6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a7c:	f000 fcda 	bl	8002434 <HAL_RCC_GetPCLK1Freq>
 8001a80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	4a81      	ldr	r2, [pc, #516]	@ (8001c8c <HAL_I2C_Init+0x274>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d807      	bhi.n	8001a9c <HAL_I2C_Init+0x84>
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	4a80      	ldr	r2, [pc, #512]	@ (8001c90 <HAL_I2C_Init+0x278>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	bf94      	ite	ls
 8001a94:	2301      	movls	r3, #1
 8001a96:	2300      	movhi	r3, #0
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	e006      	b.n	8001aaa <HAL_I2C_Init+0x92>
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	4a7d      	ldr	r2, [pc, #500]	@ (8001c94 <HAL_I2C_Init+0x27c>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	bf94      	ite	ls
 8001aa4:	2301      	movls	r3, #1
 8001aa6:	2300      	movhi	r3, #0
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e0e7      	b.n	8001c82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	4a78      	ldr	r2, [pc, #480]	@ (8001c98 <HAL_I2C_Init+0x280>)
 8001ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aba:	0c9b      	lsrs	r3, r3, #18
 8001abc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	68ba      	ldr	r2, [r7, #8]
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6a1b      	ldr	r3, [r3, #32]
 8001ad8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	4a6a      	ldr	r2, [pc, #424]	@ (8001c8c <HAL_I2C_Init+0x274>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d802      	bhi.n	8001aec <HAL_I2C_Init+0xd4>
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	e009      	b.n	8001b00 <HAL_I2C_Init+0xe8>
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001af2:	fb02 f303 	mul.w	r3, r2, r3
 8001af6:	4a69      	ldr	r2, [pc, #420]	@ (8001c9c <HAL_I2C_Init+0x284>)
 8001af8:	fba2 2303 	umull	r2, r3, r2, r3
 8001afc:	099b      	lsrs	r3, r3, #6
 8001afe:	3301      	adds	r3, #1
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	6812      	ldr	r2, [r2, #0]
 8001b04:	430b      	orrs	r3, r1
 8001b06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001b12:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	495c      	ldr	r1, [pc, #368]	@ (8001c8c <HAL_I2C_Init+0x274>)
 8001b1c:	428b      	cmp	r3, r1
 8001b1e:	d819      	bhi.n	8001b54 <HAL_I2C_Init+0x13c>
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	1e59      	subs	r1, r3, #1
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b2e:	1c59      	adds	r1, r3, #1
 8001b30:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001b34:	400b      	ands	r3, r1
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d00a      	beq.n	8001b50 <HAL_I2C_Init+0x138>
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	1e59      	subs	r1, r3, #1
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b48:	3301      	adds	r3, #1
 8001b4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b4e:	e051      	b.n	8001bf4 <HAL_I2C_Init+0x1dc>
 8001b50:	2304      	movs	r3, #4
 8001b52:	e04f      	b.n	8001bf4 <HAL_I2C_Init+0x1dc>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d111      	bne.n	8001b80 <HAL_I2C_Init+0x168>
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	1e58      	subs	r0, r3, #1
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6859      	ldr	r1, [r3, #4]
 8001b64:	460b      	mov	r3, r1
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	440b      	add	r3, r1
 8001b6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b6e:	3301      	adds	r3, #1
 8001b70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	bf0c      	ite	eq
 8001b78:	2301      	moveq	r3, #1
 8001b7a:	2300      	movne	r3, #0
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	e012      	b.n	8001ba6 <HAL_I2C_Init+0x18e>
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	1e58      	subs	r0, r3, #1
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6859      	ldr	r1, [r3, #4]
 8001b88:	460b      	mov	r3, r1
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	440b      	add	r3, r1
 8001b8e:	0099      	lsls	r1, r3, #2
 8001b90:	440b      	add	r3, r1
 8001b92:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b96:	3301      	adds	r3, #1
 8001b98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	bf0c      	ite	eq
 8001ba0:	2301      	moveq	r3, #1
 8001ba2:	2300      	movne	r3, #0
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <HAL_I2C_Init+0x196>
 8001baa:	2301      	movs	r3, #1
 8001bac:	e022      	b.n	8001bf4 <HAL_I2C_Init+0x1dc>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d10e      	bne.n	8001bd4 <HAL_I2C_Init+0x1bc>
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	1e58      	subs	r0, r3, #1
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6859      	ldr	r1, [r3, #4]
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	440b      	add	r3, r1
 8001bc4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bc8:	3301      	adds	r3, #1
 8001bca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bd2:	e00f      	b.n	8001bf4 <HAL_I2C_Init+0x1dc>
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	1e58      	subs	r0, r3, #1
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6859      	ldr	r1, [r3, #4]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	440b      	add	r3, r1
 8001be2:	0099      	lsls	r1, r3, #2
 8001be4:	440b      	add	r3, r1
 8001be6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bea:	3301      	adds	r3, #1
 8001bec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bf0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001bf4:	6879      	ldr	r1, [r7, #4]
 8001bf6:	6809      	ldr	r1, [r1, #0]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	69da      	ldr	r2, [r3, #28]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a1b      	ldr	r3, [r3, #32]
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	430a      	orrs	r2, r1
 8001c16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001c22:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	6911      	ldr	r1, [r2, #16]
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	68d2      	ldr	r2, [r2, #12]
 8001c2e:	4311      	orrs	r1, r2
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	6812      	ldr	r2, [r2, #0]
 8001c34:	430b      	orrs	r3, r1
 8001c36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	695a      	ldr	r2, [r3, #20]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	430a      	orrs	r2, r1
 8001c52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f042 0201 	orr.w	r2, r2, #1
 8001c62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2220      	movs	r2, #32
 8001c6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	000186a0 	.word	0x000186a0
 8001c90:	001e847f 	.word	0x001e847f
 8001c94:	003d08ff 	.word	0x003d08ff
 8001c98:	431bde83 	.word	0x431bde83
 8001c9c:	10624dd3 	.word	0x10624dd3

08001ca0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e272      	b.n	8002198 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f000 8087 	beq.w	8001dce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cc0:	4b92      	ldr	r3, [pc, #584]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 030c 	and.w	r3, r3, #12
 8001cc8:	2b04      	cmp	r3, #4
 8001cca:	d00c      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ccc:	4b8f      	ldr	r3, [pc, #572]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f003 030c 	and.w	r3, r3, #12
 8001cd4:	2b08      	cmp	r3, #8
 8001cd6:	d112      	bne.n	8001cfe <HAL_RCC_OscConfig+0x5e>
 8001cd8:	4b8c      	ldr	r3, [pc, #560]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ce0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ce4:	d10b      	bne.n	8001cfe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce6:	4b89      	ldr	r3, [pc, #548]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d06c      	beq.n	8001dcc <HAL_RCC_OscConfig+0x12c>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d168      	bne.n	8001dcc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e24c      	b.n	8002198 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d06:	d106      	bne.n	8001d16 <HAL_RCC_OscConfig+0x76>
 8001d08:	4b80      	ldr	r3, [pc, #512]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a7f      	ldr	r2, [pc, #508]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001d0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d12:	6013      	str	r3, [r2, #0]
 8001d14:	e02e      	b.n	8001d74 <HAL_RCC_OscConfig+0xd4>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d10c      	bne.n	8001d38 <HAL_RCC_OscConfig+0x98>
 8001d1e:	4b7b      	ldr	r3, [pc, #492]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a7a      	ldr	r2, [pc, #488]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001d24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d28:	6013      	str	r3, [r2, #0]
 8001d2a:	4b78      	ldr	r3, [pc, #480]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a77      	ldr	r2, [pc, #476]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001d30:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d34:	6013      	str	r3, [r2, #0]
 8001d36:	e01d      	b.n	8001d74 <HAL_RCC_OscConfig+0xd4>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d40:	d10c      	bne.n	8001d5c <HAL_RCC_OscConfig+0xbc>
 8001d42:	4b72      	ldr	r3, [pc, #456]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a71      	ldr	r2, [pc, #452]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001d48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	4b6f      	ldr	r3, [pc, #444]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a6e      	ldr	r2, [pc, #440]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001d54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d58:	6013      	str	r3, [r2, #0]
 8001d5a:	e00b      	b.n	8001d74 <HAL_RCC_OscConfig+0xd4>
 8001d5c:	4b6b      	ldr	r3, [pc, #428]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a6a      	ldr	r2, [pc, #424]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001d62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d66:	6013      	str	r3, [r2, #0]
 8001d68:	4b68      	ldr	r3, [pc, #416]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a67      	ldr	r2, [pc, #412]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001d6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d72:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d013      	beq.n	8001da4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7c:	f7ff f8b0 	bl	8000ee0 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d84:	f7ff f8ac 	bl	8000ee0 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b64      	cmp	r3, #100	@ 0x64
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e200      	b.n	8002198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d96:	4b5d      	ldr	r3, [pc, #372]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d0f0      	beq.n	8001d84 <HAL_RCC_OscConfig+0xe4>
 8001da2:	e014      	b.n	8001dce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da4:	f7ff f89c 	bl	8000ee0 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dac:	f7ff f898 	bl	8000ee0 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b64      	cmp	r3, #100	@ 0x64
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e1ec      	b.n	8002198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dbe:	4b53      	ldr	r3, [pc, #332]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1f0      	bne.n	8001dac <HAL_RCC_OscConfig+0x10c>
 8001dca:	e000      	b.n	8001dce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d063      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dda:	4b4c      	ldr	r3, [pc, #304]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f003 030c 	and.w	r3, r3, #12
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d00b      	beq.n	8001dfe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001de6:	4b49      	ldr	r3, [pc, #292]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f003 030c 	and.w	r3, r3, #12
 8001dee:	2b08      	cmp	r3, #8
 8001df0:	d11c      	bne.n	8001e2c <HAL_RCC_OscConfig+0x18c>
 8001df2:	4b46      	ldr	r3, [pc, #280]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d116      	bne.n	8001e2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dfe:	4b43      	ldr	r3, [pc, #268]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d005      	beq.n	8001e16 <HAL_RCC_OscConfig+0x176>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d001      	beq.n	8001e16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e1c0      	b.n	8002198 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e16:	4b3d      	ldr	r3, [pc, #244]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	4939      	ldr	r1, [pc, #228]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e2a:	e03a      	b.n	8001ea2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d020      	beq.n	8001e76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e34:	4b36      	ldr	r3, [pc, #216]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001e36:	2201      	movs	r2, #1
 8001e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3a:	f7ff f851 	bl	8000ee0 <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e40:	e008      	b.n	8001e54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e42:	f7ff f84d 	bl	8000ee0 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e1a1      	b.n	8002198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e54:	4b2d      	ldr	r3, [pc, #180]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d0f0      	beq.n	8001e42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e60:	4b2a      	ldr	r3, [pc, #168]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	695b      	ldr	r3, [r3, #20]
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	4927      	ldr	r1, [pc, #156]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	600b      	str	r3, [r1, #0]
 8001e74:	e015      	b.n	8001ea2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e76:	4b26      	ldr	r3, [pc, #152]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7c:	f7ff f830 	bl	8000ee0 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e84:	f7ff f82c 	bl	8000ee0 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e180      	b.n	8002198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e96:	4b1d      	ldr	r3, [pc, #116]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1f0      	bne.n	8001e84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0308 	and.w	r3, r3, #8
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d03a      	beq.n	8001f24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d019      	beq.n	8001eea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eb6:	4b17      	ldr	r3, [pc, #92]	@ (8001f14 <HAL_RCC_OscConfig+0x274>)
 8001eb8:	2201      	movs	r2, #1
 8001eba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ebc:	f7ff f810 	bl	8000ee0 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ec4:	f7ff f80c 	bl	8000ee0 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e160      	b.n	8002198 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d0f0      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ee2:	2001      	movs	r0, #1
 8001ee4:	f000 face 	bl	8002484 <RCC_Delay>
 8001ee8:	e01c      	b.n	8001f24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eea:	4b0a      	ldr	r3, [pc, #40]	@ (8001f14 <HAL_RCC_OscConfig+0x274>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ef0:	f7fe fff6 	bl	8000ee0 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ef6:	e00f      	b.n	8001f18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ef8:	f7fe fff2 	bl	8000ee0 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d908      	bls.n	8001f18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e146      	b.n	8002198 <HAL_RCC_OscConfig+0x4f8>
 8001f0a:	bf00      	nop
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	42420000 	.word	0x42420000
 8001f14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f18:	4b92      	ldr	r3, [pc, #584]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1e9      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f000 80a6 	beq.w	800207e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f32:	2300      	movs	r3, #0
 8001f34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f36:	4b8b      	ldr	r3, [pc, #556]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10d      	bne.n	8001f5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f42:	4b88      	ldr	r3, [pc, #544]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	4a87      	ldr	r2, [pc, #540]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 8001f48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f4c:	61d3      	str	r3, [r2, #28]
 8001f4e:	4b85      	ldr	r3, [pc, #532]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f56:	60bb      	str	r3, [r7, #8]
 8001f58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f5e:	4b82      	ldr	r3, [pc, #520]	@ (8002168 <HAL_RCC_OscConfig+0x4c8>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d118      	bne.n	8001f9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f6a:	4b7f      	ldr	r3, [pc, #508]	@ (8002168 <HAL_RCC_OscConfig+0x4c8>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a7e      	ldr	r2, [pc, #504]	@ (8002168 <HAL_RCC_OscConfig+0x4c8>)
 8001f70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f76:	f7fe ffb3 	bl	8000ee0 <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f7e:	f7fe ffaf 	bl	8000ee0 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b64      	cmp	r3, #100	@ 0x64
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e103      	b.n	8002198 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f90:	4b75      	ldr	r3, [pc, #468]	@ (8002168 <HAL_RCC_OscConfig+0x4c8>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0f0      	beq.n	8001f7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d106      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x312>
 8001fa4:	4b6f      	ldr	r3, [pc, #444]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	4a6e      	ldr	r2, [pc, #440]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 8001faa:	f043 0301 	orr.w	r3, r3, #1
 8001fae:	6213      	str	r3, [r2, #32]
 8001fb0:	e02d      	b.n	800200e <HAL_RCC_OscConfig+0x36e>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10c      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x334>
 8001fba:	4b6a      	ldr	r3, [pc, #424]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
 8001fbe:	4a69      	ldr	r2, [pc, #420]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 8001fc0:	f023 0301 	bic.w	r3, r3, #1
 8001fc4:	6213      	str	r3, [r2, #32]
 8001fc6:	4b67      	ldr	r3, [pc, #412]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 8001fc8:	6a1b      	ldr	r3, [r3, #32]
 8001fca:	4a66      	ldr	r2, [pc, #408]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 8001fcc:	f023 0304 	bic.w	r3, r3, #4
 8001fd0:	6213      	str	r3, [r2, #32]
 8001fd2:	e01c      	b.n	800200e <HAL_RCC_OscConfig+0x36e>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	2b05      	cmp	r3, #5
 8001fda:	d10c      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x356>
 8001fdc:	4b61      	ldr	r3, [pc, #388]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	4a60      	ldr	r2, [pc, #384]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 8001fe2:	f043 0304 	orr.w	r3, r3, #4
 8001fe6:	6213      	str	r3, [r2, #32]
 8001fe8:	4b5e      	ldr	r3, [pc, #376]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	4a5d      	ldr	r2, [pc, #372]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 8001fee:	f043 0301 	orr.w	r3, r3, #1
 8001ff2:	6213      	str	r3, [r2, #32]
 8001ff4:	e00b      	b.n	800200e <HAL_RCC_OscConfig+0x36e>
 8001ff6:	4b5b      	ldr	r3, [pc, #364]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	4a5a      	ldr	r2, [pc, #360]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 8001ffc:	f023 0301 	bic.w	r3, r3, #1
 8002000:	6213      	str	r3, [r2, #32]
 8002002:	4b58      	ldr	r3, [pc, #352]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 8002004:	6a1b      	ldr	r3, [r3, #32]
 8002006:	4a57      	ldr	r2, [pc, #348]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 8002008:	f023 0304 	bic.w	r3, r3, #4
 800200c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d015      	beq.n	8002042 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002016:	f7fe ff63 	bl	8000ee0 <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800201c:	e00a      	b.n	8002034 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800201e:	f7fe ff5f 	bl	8000ee0 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	f241 3288 	movw	r2, #5000	@ 0x1388
 800202c:	4293      	cmp	r3, r2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e0b1      	b.n	8002198 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002034:	4b4b      	ldr	r3, [pc, #300]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 8002036:	6a1b      	ldr	r3, [r3, #32]
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d0ee      	beq.n	800201e <HAL_RCC_OscConfig+0x37e>
 8002040:	e014      	b.n	800206c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002042:	f7fe ff4d 	bl	8000ee0 <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002048:	e00a      	b.n	8002060 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800204a:	f7fe ff49 	bl	8000ee0 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002058:	4293      	cmp	r3, r2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e09b      	b.n	8002198 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002060:	4b40      	ldr	r3, [pc, #256]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 8002062:	6a1b      	ldr	r3, [r3, #32]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1ee      	bne.n	800204a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800206c:	7dfb      	ldrb	r3, [r7, #23]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d105      	bne.n	800207e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002072:	4b3c      	ldr	r3, [pc, #240]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	4a3b      	ldr	r2, [pc, #236]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 8002078:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800207c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	2b00      	cmp	r3, #0
 8002084:	f000 8087 	beq.w	8002196 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002088:	4b36      	ldr	r3, [pc, #216]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f003 030c 	and.w	r3, r3, #12
 8002090:	2b08      	cmp	r3, #8
 8002092:	d061      	beq.n	8002158 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	69db      	ldr	r3, [r3, #28]
 8002098:	2b02      	cmp	r3, #2
 800209a:	d146      	bne.n	800212a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800209c:	4b33      	ldr	r3, [pc, #204]	@ (800216c <HAL_RCC_OscConfig+0x4cc>)
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a2:	f7fe ff1d 	bl	8000ee0 <HAL_GetTick>
 80020a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020a8:	e008      	b.n	80020bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020aa:	f7fe ff19 	bl	8000ee0 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e06d      	b.n	8002198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020bc:	4b29      	ldr	r3, [pc, #164]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1f0      	bne.n	80020aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020d0:	d108      	bne.n	80020e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020d2:	4b24      	ldr	r3, [pc, #144]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	4921      	ldr	r1, [pc, #132]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020e4:	4b1f      	ldr	r3, [pc, #124]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a19      	ldr	r1, [r3, #32]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f4:	430b      	orrs	r3, r1
 80020f6:	491b      	ldr	r1, [pc, #108]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020fc:	4b1b      	ldr	r3, [pc, #108]	@ (800216c <HAL_RCC_OscConfig+0x4cc>)
 80020fe:	2201      	movs	r2, #1
 8002100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002102:	f7fe feed 	bl	8000ee0 <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800210a:	f7fe fee9 	bl	8000ee0 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e03d      	b.n	8002198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800211c:	4b11      	ldr	r3, [pc, #68]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0f0      	beq.n	800210a <HAL_RCC_OscConfig+0x46a>
 8002128:	e035      	b.n	8002196 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800212a:	4b10      	ldr	r3, [pc, #64]	@ (800216c <HAL_RCC_OscConfig+0x4cc>)
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002130:	f7fe fed6 	bl	8000ee0 <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002138:	f7fe fed2 	bl	8000ee0 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e026      	b.n	8002198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800214a:	4b06      	ldr	r3, [pc, #24]	@ (8002164 <HAL_RCC_OscConfig+0x4c4>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1f0      	bne.n	8002138 <HAL_RCC_OscConfig+0x498>
 8002156:	e01e      	b.n	8002196 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	69db      	ldr	r3, [r3, #28]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d107      	bne.n	8002170 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e019      	b.n	8002198 <HAL_RCC_OscConfig+0x4f8>
 8002164:	40021000 	.word	0x40021000
 8002168:	40007000 	.word	0x40007000
 800216c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002170:	4b0b      	ldr	r3, [pc, #44]	@ (80021a0 <HAL_RCC_OscConfig+0x500>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	429a      	cmp	r2, r3
 8002182:	d106      	bne.n	8002192 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800218e:	429a      	cmp	r2, r3
 8002190:	d001      	beq.n	8002196 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e000      	b.n	8002198 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3718      	adds	r7, #24
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40021000 	.word	0x40021000

080021a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d101      	bne.n	80021b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e0d0      	b.n	800235a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021b8:	4b6a      	ldr	r3, [pc, #424]	@ (8002364 <HAL_RCC_ClockConfig+0x1c0>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0307 	and.w	r3, r3, #7
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d910      	bls.n	80021e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021c6:	4b67      	ldr	r3, [pc, #412]	@ (8002364 <HAL_RCC_ClockConfig+0x1c0>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f023 0207 	bic.w	r2, r3, #7
 80021ce:	4965      	ldr	r1, [pc, #404]	@ (8002364 <HAL_RCC_ClockConfig+0x1c0>)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021d6:	4b63      	ldr	r3, [pc, #396]	@ (8002364 <HAL_RCC_ClockConfig+0x1c0>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d001      	beq.n	80021e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e0b8      	b.n	800235a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d020      	beq.n	8002236 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0304 	and.w	r3, r3, #4
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d005      	beq.n	800220c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002200:	4b59      	ldr	r3, [pc, #356]	@ (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	4a58      	ldr	r2, [pc, #352]	@ (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 8002206:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800220a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0308 	and.w	r3, r3, #8
 8002214:	2b00      	cmp	r3, #0
 8002216:	d005      	beq.n	8002224 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002218:	4b53      	ldr	r3, [pc, #332]	@ (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	4a52      	ldr	r2, [pc, #328]	@ (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 800221e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002222:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002224:	4b50      	ldr	r3, [pc, #320]	@ (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	494d      	ldr	r1, [pc, #308]	@ (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 8002232:	4313      	orrs	r3, r2
 8002234:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	d040      	beq.n	80022c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d107      	bne.n	800225a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800224a:	4b47      	ldr	r3, [pc, #284]	@ (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d115      	bne.n	8002282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e07f      	b.n	800235a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	2b02      	cmp	r3, #2
 8002260:	d107      	bne.n	8002272 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002262:	4b41      	ldr	r3, [pc, #260]	@ (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d109      	bne.n	8002282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e073      	b.n	800235a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002272:	4b3d      	ldr	r3, [pc, #244]	@ (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e06b      	b.n	800235a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002282:	4b39      	ldr	r3, [pc, #228]	@ (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f023 0203 	bic.w	r2, r3, #3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	4936      	ldr	r1, [pc, #216]	@ (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 8002290:	4313      	orrs	r3, r2
 8002292:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002294:	f7fe fe24 	bl	8000ee0 <HAL_GetTick>
 8002298:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800229a:	e00a      	b.n	80022b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800229c:	f7fe fe20 	bl	8000ee0 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e053      	b.n	800235a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022b2:	4b2d      	ldr	r3, [pc, #180]	@ (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f003 020c 	and.w	r2, r3, #12
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d1eb      	bne.n	800229c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022c4:	4b27      	ldr	r3, [pc, #156]	@ (8002364 <HAL_RCC_ClockConfig+0x1c0>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0307 	and.w	r3, r3, #7
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d210      	bcs.n	80022f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d2:	4b24      	ldr	r3, [pc, #144]	@ (8002364 <HAL_RCC_ClockConfig+0x1c0>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f023 0207 	bic.w	r2, r3, #7
 80022da:	4922      	ldr	r1, [pc, #136]	@ (8002364 <HAL_RCC_ClockConfig+0x1c0>)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	4313      	orrs	r3, r2
 80022e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e2:	4b20      	ldr	r3, [pc, #128]	@ (8002364 <HAL_RCC_ClockConfig+0x1c0>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d001      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e032      	b.n	800235a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0304 	and.w	r3, r3, #4
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d008      	beq.n	8002312 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002300:	4b19      	ldr	r3, [pc, #100]	@ (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	4916      	ldr	r1, [pc, #88]	@ (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 800230e:	4313      	orrs	r3, r2
 8002310:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0308 	and.w	r3, r3, #8
 800231a:	2b00      	cmp	r3, #0
 800231c:	d009      	beq.n	8002332 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800231e:	4b12      	ldr	r3, [pc, #72]	@ (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	490e      	ldr	r1, [pc, #56]	@ (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 800232e:	4313      	orrs	r3, r2
 8002330:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002332:	f000 f821 	bl	8002378 <HAL_RCC_GetSysClockFreq>
 8002336:	4602      	mov	r2, r0
 8002338:	4b0b      	ldr	r3, [pc, #44]	@ (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	091b      	lsrs	r3, r3, #4
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	490a      	ldr	r1, [pc, #40]	@ (800236c <HAL_RCC_ClockConfig+0x1c8>)
 8002344:	5ccb      	ldrb	r3, [r1, r3]
 8002346:	fa22 f303 	lsr.w	r3, r2, r3
 800234a:	4a09      	ldr	r2, [pc, #36]	@ (8002370 <HAL_RCC_ClockConfig+0x1cc>)
 800234c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800234e:	4b09      	ldr	r3, [pc, #36]	@ (8002374 <HAL_RCC_ClockConfig+0x1d0>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f7fe fd82 	bl	8000e5c <HAL_InitTick>

  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40022000 	.word	0x40022000
 8002368:	40021000 	.word	0x40021000
 800236c:	080051b8 	.word	0x080051b8
 8002370:	20000000 	.word	0x20000000
 8002374:	20000004 	.word	0x20000004

08002378 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002378:	b480      	push	{r7}
 800237a:	b087      	sub	sp, #28
 800237c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800237e:	2300      	movs	r3, #0
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	2300      	movs	r3, #0
 8002384:	60bb      	str	r3, [r7, #8]
 8002386:	2300      	movs	r3, #0
 8002388:	617b      	str	r3, [r7, #20]
 800238a:	2300      	movs	r3, #0
 800238c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800238e:	2300      	movs	r3, #0
 8002390:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002392:	4b1e      	ldr	r3, [pc, #120]	@ (800240c <HAL_RCC_GetSysClockFreq+0x94>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f003 030c 	and.w	r3, r3, #12
 800239e:	2b04      	cmp	r3, #4
 80023a0:	d002      	beq.n	80023a8 <HAL_RCC_GetSysClockFreq+0x30>
 80023a2:	2b08      	cmp	r3, #8
 80023a4:	d003      	beq.n	80023ae <HAL_RCC_GetSysClockFreq+0x36>
 80023a6:	e027      	b.n	80023f8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023a8:	4b19      	ldr	r3, [pc, #100]	@ (8002410 <HAL_RCC_GetSysClockFreq+0x98>)
 80023aa:	613b      	str	r3, [r7, #16]
      break;
 80023ac:	e027      	b.n	80023fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	0c9b      	lsrs	r3, r3, #18
 80023b2:	f003 030f 	and.w	r3, r3, #15
 80023b6:	4a17      	ldr	r2, [pc, #92]	@ (8002414 <HAL_RCC_GetSysClockFreq+0x9c>)
 80023b8:	5cd3      	ldrb	r3, [r2, r3]
 80023ba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d010      	beq.n	80023e8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023c6:	4b11      	ldr	r3, [pc, #68]	@ (800240c <HAL_RCC_GetSysClockFreq+0x94>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	0c5b      	lsrs	r3, r3, #17
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	4a11      	ldr	r2, [pc, #68]	@ (8002418 <HAL_RCC_GetSysClockFreq+0xa0>)
 80023d2:	5cd3      	ldrb	r3, [r2, r3]
 80023d4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002410 <HAL_RCC_GetSysClockFreq+0x98>)
 80023da:	fb03 f202 	mul.w	r2, r3, r2
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e4:	617b      	str	r3, [r7, #20]
 80023e6:	e004      	b.n	80023f2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a0c      	ldr	r2, [pc, #48]	@ (800241c <HAL_RCC_GetSysClockFreq+0xa4>)
 80023ec:	fb02 f303 	mul.w	r3, r2, r3
 80023f0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	613b      	str	r3, [r7, #16]
      break;
 80023f6:	e002      	b.n	80023fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023f8:	4b05      	ldr	r3, [pc, #20]	@ (8002410 <HAL_RCC_GetSysClockFreq+0x98>)
 80023fa:	613b      	str	r3, [r7, #16]
      break;
 80023fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023fe:	693b      	ldr	r3, [r7, #16]
}
 8002400:	4618      	mov	r0, r3
 8002402:	371c      	adds	r7, #28
 8002404:	46bd      	mov	sp, r7
 8002406:	bc80      	pop	{r7}
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	40021000 	.word	0x40021000
 8002410:	007a1200 	.word	0x007a1200
 8002414:	080051d0 	.word	0x080051d0
 8002418:	080051e0 	.word	0x080051e0
 800241c:	003d0900 	.word	0x003d0900

08002420 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002424:	4b02      	ldr	r3, [pc, #8]	@ (8002430 <HAL_RCC_GetHCLKFreq+0x10>)
 8002426:	681b      	ldr	r3, [r3, #0]
}
 8002428:	4618      	mov	r0, r3
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr
 8002430:	20000000 	.word	0x20000000

08002434 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002438:	f7ff fff2 	bl	8002420 <HAL_RCC_GetHCLKFreq>
 800243c:	4602      	mov	r2, r0
 800243e:	4b05      	ldr	r3, [pc, #20]	@ (8002454 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	0a1b      	lsrs	r3, r3, #8
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	4903      	ldr	r1, [pc, #12]	@ (8002458 <HAL_RCC_GetPCLK1Freq+0x24>)
 800244a:	5ccb      	ldrb	r3, [r1, r3]
 800244c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002450:	4618      	mov	r0, r3
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40021000 	.word	0x40021000
 8002458:	080051c8 	.word	0x080051c8

0800245c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002460:	f7ff ffde 	bl	8002420 <HAL_RCC_GetHCLKFreq>
 8002464:	4602      	mov	r2, r0
 8002466:	4b05      	ldr	r3, [pc, #20]	@ (800247c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	0adb      	lsrs	r3, r3, #11
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	4903      	ldr	r1, [pc, #12]	@ (8002480 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002472:	5ccb      	ldrb	r3, [r1, r3]
 8002474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002478:	4618      	mov	r0, r3
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40021000 	.word	0x40021000
 8002480:	080051c8 	.word	0x080051c8

08002484 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800248c:	4b0a      	ldr	r3, [pc, #40]	@ (80024b8 <RCC_Delay+0x34>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a0a      	ldr	r2, [pc, #40]	@ (80024bc <RCC_Delay+0x38>)
 8002492:	fba2 2303 	umull	r2, r3, r2, r3
 8002496:	0a5b      	lsrs	r3, r3, #9
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	fb02 f303 	mul.w	r3, r2, r3
 800249e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024a0:	bf00      	nop
  }
  while (Delay --);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	1e5a      	subs	r2, r3, #1
 80024a6:	60fa      	str	r2, [r7, #12]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1f9      	bne.n	80024a0 <RCC_Delay+0x1c>
}
 80024ac:	bf00      	nop
 80024ae:	bf00      	nop
 80024b0:	3714      	adds	r7, #20
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr
 80024b8:	20000000 	.word	0x20000000
 80024bc:	10624dd3 	.word	0x10624dd3

080024c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80024c8:	2300      	movs	r3, #0
 80024ca:	613b      	str	r3, [r7, #16]
 80024cc:	2300      	movs	r3, #0
 80024ce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d07d      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80024dc:	2300      	movs	r3, #0
 80024de:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024e0:	4b4f      	ldr	r3, [pc, #316]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024e2:	69db      	ldr	r3, [r3, #28]
 80024e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d10d      	bne.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ec:	4b4c      	ldr	r3, [pc, #304]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ee:	69db      	ldr	r3, [r3, #28]
 80024f0:	4a4b      	ldr	r2, [pc, #300]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024f6:	61d3      	str	r3, [r2, #28]
 80024f8:	4b49      	ldr	r3, [pc, #292]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024fa:	69db      	ldr	r3, [r3, #28]
 80024fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002500:	60bb      	str	r3, [r7, #8]
 8002502:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002504:	2301      	movs	r3, #1
 8002506:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002508:	4b46      	ldr	r3, [pc, #280]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002510:	2b00      	cmp	r3, #0
 8002512:	d118      	bne.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002514:	4b43      	ldr	r3, [pc, #268]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a42      	ldr	r2, [pc, #264]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800251a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800251e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002520:	f7fe fcde 	bl	8000ee0 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002526:	e008      	b.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002528:	f7fe fcda 	bl	8000ee0 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b64      	cmp	r3, #100	@ 0x64
 8002534:	d901      	bls.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e06d      	b.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800253a:	4b3a      	ldr	r3, [pc, #232]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0f0      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002546:	4b36      	ldr	r3, [pc, #216]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800254e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d02e      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	429a      	cmp	r2, r3
 8002562:	d027      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002564:	4b2e      	ldr	r3, [pc, #184]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800256c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800256e:	4b2e      	ldr	r3, [pc, #184]	@ (8002628 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002570:	2201      	movs	r2, #1
 8002572:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002574:	4b2c      	ldr	r3, [pc, #176]	@ (8002628 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002576:	2200      	movs	r2, #0
 8002578:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800257a:	4a29      	ldr	r2, [pc, #164]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b00      	cmp	r3, #0
 8002588:	d014      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258a:	f7fe fca9 	bl	8000ee0 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002590:	e00a      	b.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002592:	f7fe fca5 	bl	8000ee0 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e036      	b.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025aa:	6a1b      	ldr	r3, [r3, #32]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0ee      	beq.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	4917      	ldr	r1, [pc, #92]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025c6:	7dfb      	ldrb	r3, [r7, #23]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d105      	bne.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025cc:	4b14      	ldr	r3, [pc, #80]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ce:	69db      	ldr	r3, [r3, #28]
 80025d0:	4a13      	ldr	r2, [pc, #76]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025d6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d008      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	490b      	ldr	r1, [pc, #44]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0310 	and.w	r3, r3, #16
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d008      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002602:	4b07      	ldr	r3, [pc, #28]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	4904      	ldr	r1, [pc, #16]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002610:	4313      	orrs	r3, r2
 8002612:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3718      	adds	r7, #24
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40021000 	.word	0x40021000
 8002624:	40007000 	.word	0x40007000
 8002628:	42420440 	.word	0x42420440

0800262c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e041      	b.n	80026c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d106      	bne.n	8002658 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7fe fa92 	bl	8000b7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2202      	movs	r2, #2
 800265c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3304      	adds	r3, #4
 8002668:	4619      	mov	r1, r3
 800266a:	4610      	mov	r0, r2
 800266c:	f000 f9aa 	bl	80029c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b082      	sub	sp, #8
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d101      	bne.n	80026dc <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e041      	b.n	8002760 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d106      	bne.n	80026f6 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 f839 	bl	8002768 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2202      	movs	r2, #2
 80026fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	3304      	adds	r3, #4
 8002706:	4619      	mov	r1, r3
 8002708:	4610      	mov	r0, r2
 800270a:	f000 f95b 	bl	80029c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	bc80      	pop	{r7}
 8002778:	4770      	bx	lr
	...

0800277c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002788:	2300      	movs	r3, #0
 800278a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002792:	2b01      	cmp	r3, #1
 8002794:	d101      	bne.n	800279a <HAL_TIM_OC_ConfigChannel+0x1e>
 8002796:	2302      	movs	r3, #2
 8002798:	e048      	b.n	800282c <HAL_TIM_OC_ConfigChannel+0xb0>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2b0c      	cmp	r3, #12
 80027a6:	d839      	bhi.n	800281c <HAL_TIM_OC_ConfigChannel+0xa0>
 80027a8:	a201      	add	r2, pc, #4	@ (adr r2, 80027b0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80027aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ae:	bf00      	nop
 80027b0:	080027e5 	.word	0x080027e5
 80027b4:	0800281d 	.word	0x0800281d
 80027b8:	0800281d 	.word	0x0800281d
 80027bc:	0800281d 	.word	0x0800281d
 80027c0:	080027f3 	.word	0x080027f3
 80027c4:	0800281d 	.word	0x0800281d
 80027c8:	0800281d 	.word	0x0800281d
 80027cc:	0800281d 	.word	0x0800281d
 80027d0:	08002801 	.word	0x08002801
 80027d4:	0800281d 	.word	0x0800281d
 80027d8:	0800281d 	.word	0x0800281d
 80027dc:	0800281d 	.word	0x0800281d
 80027e0:	0800280f 	.word	0x0800280f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68b9      	ldr	r1, [r7, #8]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f000 f958 	bl	8002aa0 <TIM_OC1_SetConfig>
      break;
 80027f0:	e017      	b.n	8002822 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68b9      	ldr	r1, [r7, #8]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f000 f9b7 	bl	8002b6c <TIM_OC2_SetConfig>
      break;
 80027fe:	e010      	b.n	8002822 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68b9      	ldr	r1, [r7, #8]
 8002806:	4618      	mov	r0, r3
 8002808:	f000 fa1a 	bl	8002c40 <TIM_OC3_SetConfig>
      break;
 800280c:	e009      	b.n	8002822 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68b9      	ldr	r1, [r7, #8]
 8002814:	4618      	mov	r0, r3
 8002816:	f000 fa7d 	bl	8002d14 <TIM_OC4_SetConfig>
      break;
 800281a:	e002      	b.n	8002822 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	75fb      	strb	r3, [r7, #23]
      break;
 8002820:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800282a:	7dfb      	ldrb	r3, [r7, #23]
}
 800282c:	4618      	mov	r0, r3
 800282e:	3718      	adds	r7, #24
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800283e:	2300      	movs	r3, #0
 8002840:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002848:	2b01      	cmp	r3, #1
 800284a:	d101      	bne.n	8002850 <HAL_TIM_ConfigClockSource+0x1c>
 800284c:	2302      	movs	r3, #2
 800284e:	e0b4      	b.n	80029ba <HAL_TIM_ConfigClockSource+0x186>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2202      	movs	r2, #2
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800286e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002876:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68ba      	ldr	r2, [r7, #8]
 800287e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002888:	d03e      	beq.n	8002908 <HAL_TIM_ConfigClockSource+0xd4>
 800288a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800288e:	f200 8087 	bhi.w	80029a0 <HAL_TIM_ConfigClockSource+0x16c>
 8002892:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002896:	f000 8086 	beq.w	80029a6 <HAL_TIM_ConfigClockSource+0x172>
 800289a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800289e:	d87f      	bhi.n	80029a0 <HAL_TIM_ConfigClockSource+0x16c>
 80028a0:	2b70      	cmp	r3, #112	@ 0x70
 80028a2:	d01a      	beq.n	80028da <HAL_TIM_ConfigClockSource+0xa6>
 80028a4:	2b70      	cmp	r3, #112	@ 0x70
 80028a6:	d87b      	bhi.n	80029a0 <HAL_TIM_ConfigClockSource+0x16c>
 80028a8:	2b60      	cmp	r3, #96	@ 0x60
 80028aa:	d050      	beq.n	800294e <HAL_TIM_ConfigClockSource+0x11a>
 80028ac:	2b60      	cmp	r3, #96	@ 0x60
 80028ae:	d877      	bhi.n	80029a0 <HAL_TIM_ConfigClockSource+0x16c>
 80028b0:	2b50      	cmp	r3, #80	@ 0x50
 80028b2:	d03c      	beq.n	800292e <HAL_TIM_ConfigClockSource+0xfa>
 80028b4:	2b50      	cmp	r3, #80	@ 0x50
 80028b6:	d873      	bhi.n	80029a0 <HAL_TIM_ConfigClockSource+0x16c>
 80028b8:	2b40      	cmp	r3, #64	@ 0x40
 80028ba:	d058      	beq.n	800296e <HAL_TIM_ConfigClockSource+0x13a>
 80028bc:	2b40      	cmp	r3, #64	@ 0x40
 80028be:	d86f      	bhi.n	80029a0 <HAL_TIM_ConfigClockSource+0x16c>
 80028c0:	2b30      	cmp	r3, #48	@ 0x30
 80028c2:	d064      	beq.n	800298e <HAL_TIM_ConfigClockSource+0x15a>
 80028c4:	2b30      	cmp	r3, #48	@ 0x30
 80028c6:	d86b      	bhi.n	80029a0 <HAL_TIM_ConfigClockSource+0x16c>
 80028c8:	2b20      	cmp	r3, #32
 80028ca:	d060      	beq.n	800298e <HAL_TIM_ConfigClockSource+0x15a>
 80028cc:	2b20      	cmp	r3, #32
 80028ce:	d867      	bhi.n	80029a0 <HAL_TIM_ConfigClockSource+0x16c>
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d05c      	beq.n	800298e <HAL_TIM_ConfigClockSource+0x15a>
 80028d4:	2b10      	cmp	r3, #16
 80028d6:	d05a      	beq.n	800298e <HAL_TIM_ConfigClockSource+0x15a>
 80028d8:	e062      	b.n	80029a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028ea:	f000 fad8 	bl	8002e9e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80028fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68ba      	ldr	r2, [r7, #8]
 8002904:	609a      	str	r2, [r3, #8]
      break;
 8002906:	e04f      	b.n	80029a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002918:	f000 fac1 	bl	8002e9e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689a      	ldr	r2, [r3, #8]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800292a:	609a      	str	r2, [r3, #8]
      break;
 800292c:	e03c      	b.n	80029a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800293a:	461a      	mov	r2, r3
 800293c:	f000 fa38 	bl	8002db0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2150      	movs	r1, #80	@ 0x50
 8002946:	4618      	mov	r0, r3
 8002948:	f000 fa8f 	bl	8002e6a <TIM_ITRx_SetConfig>
      break;
 800294c:	e02c      	b.n	80029a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800295a:	461a      	mov	r2, r3
 800295c:	f000 fa56 	bl	8002e0c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2160      	movs	r1, #96	@ 0x60
 8002966:	4618      	mov	r0, r3
 8002968:	f000 fa7f 	bl	8002e6a <TIM_ITRx_SetConfig>
      break;
 800296c:	e01c      	b.n	80029a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800297a:	461a      	mov	r2, r3
 800297c:	f000 fa18 	bl	8002db0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2140      	movs	r1, #64	@ 0x40
 8002986:	4618      	mov	r0, r3
 8002988:	f000 fa6f 	bl	8002e6a <TIM_ITRx_SetConfig>
      break;
 800298c:	e00c      	b.n	80029a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4619      	mov	r1, r3
 8002998:	4610      	mov	r0, r2
 800299a:	f000 fa66 	bl	8002e6a <TIM_ITRx_SetConfig>
      break;
 800299e:	e003      	b.n	80029a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	73fb      	strb	r3, [r7, #15]
      break;
 80029a4:	e000      	b.n	80029a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80029a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80029b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
	...

080029c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a2f      	ldr	r2, [pc, #188]	@ (8002a94 <TIM_Base_SetConfig+0xd0>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d00b      	beq.n	80029f4 <TIM_Base_SetConfig+0x30>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029e2:	d007      	beq.n	80029f4 <TIM_Base_SetConfig+0x30>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a2c      	ldr	r2, [pc, #176]	@ (8002a98 <TIM_Base_SetConfig+0xd4>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d003      	beq.n	80029f4 <TIM_Base_SetConfig+0x30>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a2b      	ldr	r2, [pc, #172]	@ (8002a9c <TIM_Base_SetConfig+0xd8>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d108      	bne.n	8002a06 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a22      	ldr	r2, [pc, #136]	@ (8002a94 <TIM_Base_SetConfig+0xd0>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d00b      	beq.n	8002a26 <TIM_Base_SetConfig+0x62>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a14:	d007      	beq.n	8002a26 <TIM_Base_SetConfig+0x62>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a1f      	ldr	r2, [pc, #124]	@ (8002a98 <TIM_Base_SetConfig+0xd4>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d003      	beq.n	8002a26 <TIM_Base_SetConfig+0x62>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a1e      	ldr	r2, [pc, #120]	@ (8002a9c <TIM_Base_SetConfig+0xd8>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d108      	bne.n	8002a38 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a0d      	ldr	r2, [pc, #52]	@ (8002a94 <TIM_Base_SetConfig+0xd0>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d103      	bne.n	8002a6c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	691a      	ldr	r2, [r3, #16]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d005      	beq.n	8002a8a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	f023 0201 	bic.w	r2, r3, #1
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	611a      	str	r2, [r3, #16]
  }
}
 8002a8a:	bf00      	nop
 8002a8c:	3714      	adds	r7, #20
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr
 8002a94:	40012c00 	.word	0x40012c00
 8002a98:	40000400 	.word	0x40000400
 8002a9c:	40000800 	.word	0x40000800

08002aa0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b087      	sub	sp, #28
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	f023 0201 	bic.w	r2, r3, #1
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f023 0303 	bic.w	r3, r3, #3
 8002ad6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	f023 0302 	bic.w	r3, r3, #2
 8002ae8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a1c      	ldr	r2, [pc, #112]	@ (8002b68 <TIM_OC1_SetConfig+0xc8>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d10c      	bne.n	8002b16 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	f023 0308 	bic.w	r3, r3, #8
 8002b02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	f023 0304 	bic.w	r3, r3, #4
 8002b14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a13      	ldr	r2, [pc, #76]	@ (8002b68 <TIM_OC1_SetConfig+0xc8>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d111      	bne.n	8002b42 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002b2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685a      	ldr	r2, [r3, #4]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	621a      	str	r2, [r3, #32]
}
 8002b5c:	bf00      	nop
 8002b5e:	371c      	adds	r7, #28
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bc80      	pop	{r7}
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	40012c00 	.word	0x40012c00

08002b6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b087      	sub	sp, #28
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	f023 0210 	bic.w	r2, r3, #16
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ba2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	021b      	lsls	r3, r3, #8
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	f023 0320 	bic.w	r3, r3, #32
 8002bb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	011b      	lsls	r3, r3, #4
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a1d      	ldr	r2, [pc, #116]	@ (8002c3c <TIM_OC2_SetConfig+0xd0>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d10d      	bne.n	8002be8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002bd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	011b      	lsls	r3, r3, #4
 8002bda:	697a      	ldr	r2, [r7, #20]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002be6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a14      	ldr	r2, [pc, #80]	@ (8002c3c <TIM_OC2_SetConfig+0xd0>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d113      	bne.n	8002c18 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002bf6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002bfe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	695b      	ldr	r3, [r3, #20]
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685a      	ldr	r2, [r3, #4]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	621a      	str	r2, [r3, #32]
}
 8002c32:	bf00      	nop
 8002c34:	371c      	adds	r7, #28
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr
 8002c3c:	40012c00 	.word	0x40012c00

08002c40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b087      	sub	sp, #28
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f023 0303 	bic.w	r3, r3, #3
 8002c76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002c88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	021b      	lsls	r3, r3, #8
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a1d      	ldr	r2, [pc, #116]	@ (8002d10 <TIM_OC3_SetConfig+0xd0>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d10d      	bne.n	8002cba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002ca4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	021b      	lsls	r3, r3, #8
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002cb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a14      	ldr	r2, [pc, #80]	@ (8002d10 <TIM_OC3_SetConfig+0xd0>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d113      	bne.n	8002cea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002cc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002cd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	011b      	lsls	r3, r3, #4
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	011b      	lsls	r3, r3, #4
 8002ce4:	693a      	ldr	r2, [r7, #16]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685a      	ldr	r2, [r3, #4]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	621a      	str	r2, [r3, #32]
}
 8002d04:	bf00      	nop
 8002d06:	371c      	adds	r7, #28
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bc80      	pop	{r7}
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	40012c00 	.word	0x40012c00

08002d14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b087      	sub	sp, #28
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a1b      	ldr	r3, [r3, #32]
 8002d28:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	021b      	lsls	r3, r3, #8
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	031b      	lsls	r3, r3, #12
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a0f      	ldr	r2, [pc, #60]	@ (8002dac <TIM_OC4_SetConfig+0x98>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d109      	bne.n	8002d88 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	019b      	lsls	r3, r3, #6
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	621a      	str	r2, [r3, #32]
}
 8002da2:	bf00      	nop
 8002da4:	371c      	adds	r7, #28
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bc80      	pop	{r7}
 8002daa:	4770      	bx	lr
 8002dac:	40012c00 	.word	0x40012c00

08002db0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b087      	sub	sp, #28
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	f023 0201 	bic.w	r2, r3, #1
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002dda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	011b      	lsls	r3, r3, #4
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	f023 030a 	bic.w	r3, r3, #10
 8002dec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	621a      	str	r2, [r3, #32]
}
 8002e02:	bf00      	nop
 8002e04:	371c      	adds	r7, #28
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr

08002e0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b087      	sub	sp, #28
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	f023 0210 	bic.w	r2, r3, #16
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002e36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	031b      	lsls	r3, r3, #12
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002e48:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	011b      	lsls	r3, r3, #4
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	621a      	str	r2, [r3, #32]
}
 8002e60:	bf00      	nop
 8002e62:	371c      	adds	r7, #28
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bc80      	pop	{r7}
 8002e68:	4770      	bx	lr

08002e6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b085      	sub	sp, #20
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
 8002e72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	f043 0307 	orr.w	r3, r3, #7
 8002e8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	609a      	str	r2, [r3, #8]
}
 8002e94:	bf00      	nop
 8002e96:	3714      	adds	r7, #20
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bc80      	pop	{r7}
 8002e9c:	4770      	bx	lr

08002e9e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b087      	sub	sp, #28
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	60f8      	str	r0, [r7, #12]
 8002ea6:	60b9      	str	r1, [r7, #8]
 8002ea8:	607a      	str	r2, [r7, #4]
 8002eaa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002eb8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	021a      	lsls	r2, r3, #8
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	609a      	str	r2, [r3, #8]
}
 8002ed2:	bf00      	nop
 8002ed4:	371c      	adds	r7, #28
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bc80      	pop	{r7}
 8002eda:	4770      	bx	lr

08002edc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d101      	bne.n	8002ef4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	e046      	b.n	8002f82 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2202      	movs	r2, #2
 8002f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a16      	ldr	r2, [pc, #88]	@ (8002f8c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d00e      	beq.n	8002f56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f40:	d009      	beq.n	8002f56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a12      	ldr	r2, [pc, #72]	@ (8002f90 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d004      	beq.n	8002f56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a10      	ldr	r2, [pc, #64]	@ (8002f94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d10c      	bne.n	8002f70 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	68ba      	ldr	r2, [r7, #8]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68ba      	ldr	r2, [r7, #8]
 8002f6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bc80      	pop	{r7}
 8002f8a:	4770      	bx	lr
 8002f8c:	40012c00 	.word	0x40012c00
 8002f90:	40000400 	.word	0x40000400
 8002f94:	40000800 	.word	0x40000800

08002f98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e042      	b.n	8003030 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d106      	bne.n	8002fc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f7fd fe80 	bl	8000cc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2224      	movs	r2, #36	@ 0x24
 8002fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68da      	ldr	r2, [r3, #12]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002fda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 fdb7 	bl	8003b50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	691a      	ldr	r2, [r3, #16]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ff0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	695a      	ldr	r2, [r3, #20]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003000:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68da      	ldr	r2, [r3, #12]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003010:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2220      	movs	r2, #32
 800301c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2220      	movs	r2, #32
 8003024:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3708      	adds	r7, #8
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b08a      	sub	sp, #40	@ 0x28
 800303c:	af02      	add	r7, sp, #8
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	603b      	str	r3, [r7, #0]
 8003044:	4613      	mov	r3, r2
 8003046:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003048:	2300      	movs	r3, #0
 800304a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2b20      	cmp	r3, #32
 8003056:	d175      	bne.n	8003144 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d002      	beq.n	8003064 <HAL_UART_Transmit+0x2c>
 800305e:	88fb      	ldrh	r3, [r7, #6]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e06e      	b.n	8003146 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2221      	movs	r2, #33	@ 0x21
 8003072:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003076:	f7fd ff33 	bl	8000ee0 <HAL_GetTick>
 800307a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	88fa      	ldrh	r2, [r7, #6]
 8003080:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	88fa      	ldrh	r2, [r7, #6]
 8003086:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003090:	d108      	bne.n	80030a4 <HAL_UART_Transmit+0x6c>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d104      	bne.n	80030a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800309a:	2300      	movs	r3, #0
 800309c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	61bb      	str	r3, [r7, #24]
 80030a2:	e003      	b.n	80030ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030a8:	2300      	movs	r3, #0
 80030aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80030ac:	e02e      	b.n	800310c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	2200      	movs	r2, #0
 80030b6:	2180      	movs	r1, #128	@ 0x80
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f000 fb1c 	bl	80036f6 <UART_WaitOnFlagUntilTimeout>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d005      	beq.n	80030d0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2220      	movs	r2, #32
 80030c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e03a      	b.n	8003146 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10b      	bne.n	80030ee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	881b      	ldrh	r3, [r3, #0]
 80030da:	461a      	mov	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	3302      	adds	r3, #2
 80030ea:	61bb      	str	r3, [r7, #24]
 80030ec:	e007      	b.n	80030fe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	781a      	ldrb	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	3301      	adds	r3, #1
 80030fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003102:	b29b      	uxth	r3, r3
 8003104:	3b01      	subs	r3, #1
 8003106:	b29a      	uxth	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003110:	b29b      	uxth	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1cb      	bne.n	80030ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	9300      	str	r3, [sp, #0]
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	2200      	movs	r2, #0
 800311e:	2140      	movs	r1, #64	@ 0x40
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f000 fae8 	bl	80036f6 <UART_WaitOnFlagUntilTimeout>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d005      	beq.n	8003138 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2220      	movs	r2, #32
 8003130:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e006      	b.n	8003146 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2220      	movs	r2, #32
 800313c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003140:	2300      	movs	r3, #0
 8003142:	e000      	b.n	8003146 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003144:	2302      	movs	r3, #2
  }
}
 8003146:	4618      	mov	r0, r3
 8003148:	3720      	adds	r7, #32
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b084      	sub	sp, #16
 8003152:	af00      	add	r7, sp, #0
 8003154:	60f8      	str	r0, [r7, #12]
 8003156:	60b9      	str	r1, [r7, #8]
 8003158:	4613      	mov	r3, r2
 800315a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b20      	cmp	r3, #32
 8003166:	d112      	bne.n	800318e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d002      	beq.n	8003174 <HAL_UART_Receive_IT+0x26>
 800316e:	88fb      	ldrh	r3, [r7, #6]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d101      	bne.n	8003178 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e00b      	b.n	8003190 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800317e:	88fb      	ldrh	r3, [r7, #6]
 8003180:	461a      	mov	r2, r3
 8003182:	68b9      	ldr	r1, [r7, #8]
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f000 fb0f 	bl	80037a8 <UART_Start_Receive_IT>
 800318a:	4603      	mov	r3, r0
 800318c:	e000      	b.n	8003190 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800318e:	2302      	movs	r3, #2
  }
}
 8003190:	4618      	mov	r0, r3
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b0ba      	sub	sp, #232	@ 0xe8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80031be:	2300      	movs	r3, #0
 80031c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80031c4:	2300      	movs	r3, #0
 80031c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80031ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80031d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10f      	bne.n	80031fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031e2:	f003 0320 	and.w	r3, r3, #32
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d009      	beq.n	80031fe <HAL_UART_IRQHandler+0x66>
 80031ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031ee:	f003 0320 	and.w	r3, r3, #32
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 fbec 	bl	80039d4 <UART_Receive_IT>
      return;
 80031fc:	e25b      	b.n	80036b6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80031fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003202:	2b00      	cmp	r3, #0
 8003204:	f000 80de 	beq.w	80033c4 <HAL_UART_IRQHandler+0x22c>
 8003208:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b00      	cmp	r3, #0
 8003212:	d106      	bne.n	8003222 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003218:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 80d1 	beq.w	80033c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00b      	beq.n	8003246 <HAL_UART_IRQHandler+0xae>
 800322e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003236:	2b00      	cmp	r3, #0
 8003238:	d005      	beq.n	8003246 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800323e:	f043 0201 	orr.w	r2, r3, #1
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800324a:	f003 0304 	and.w	r3, r3, #4
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00b      	beq.n	800326a <HAL_UART_IRQHandler+0xd2>
 8003252:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	d005      	beq.n	800326a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003262:	f043 0202 	orr.w	r2, r3, #2
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800326a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00b      	beq.n	800328e <HAL_UART_IRQHandler+0xf6>
 8003276:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d005      	beq.n	800328e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003286:	f043 0204 	orr.w	r2, r3, #4
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800328e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003292:	f003 0308 	and.w	r3, r3, #8
 8003296:	2b00      	cmp	r3, #0
 8003298:	d011      	beq.n	80032be <HAL_UART_IRQHandler+0x126>
 800329a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800329e:	f003 0320 	and.w	r3, r3, #32
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d105      	bne.n	80032b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80032a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d005      	beq.n	80032be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032b6:	f043 0208 	orr.w	r2, r3, #8
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f000 81f2 	beq.w	80036ac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032cc:	f003 0320 	and.w	r3, r3, #32
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d008      	beq.n	80032e6 <HAL_UART_IRQHandler+0x14e>
 80032d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032d8:	f003 0320 	and.w	r3, r3, #32
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d002      	beq.n	80032e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 fb77 	bl	80039d4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	bf14      	ite	ne
 80032f4:	2301      	movne	r3, #1
 80032f6:	2300      	moveq	r3, #0
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003302:	f003 0308 	and.w	r3, r3, #8
 8003306:	2b00      	cmp	r3, #0
 8003308:	d103      	bne.n	8003312 <HAL_UART_IRQHandler+0x17a>
 800330a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800330e:	2b00      	cmp	r3, #0
 8003310:	d04f      	beq.n	80033b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 fa81 	bl	800381a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003322:	2b00      	cmp	r3, #0
 8003324:	d041      	beq.n	80033aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	3314      	adds	r3, #20
 800332c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003330:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003334:	e853 3f00 	ldrex	r3, [r3]
 8003338:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800333c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003340:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003344:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	3314      	adds	r3, #20
 800334e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003352:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003356:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800335e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003362:	e841 2300 	strex	r3, r2, [r1]
 8003366:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800336a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1d9      	bne.n	8003326 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003376:	2b00      	cmp	r3, #0
 8003378:	d013      	beq.n	80033a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800337e:	4a7e      	ldr	r2, [pc, #504]	@ (8003578 <HAL_UART_IRQHandler+0x3e0>)
 8003380:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003386:	4618      	mov	r0, r3
 8003388:	f7fe f932 	bl	80015f0 <HAL_DMA_Abort_IT>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d016      	beq.n	80033c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003396:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800339c:	4610      	mov	r0, r2
 800339e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033a0:	e00e      	b.n	80033c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 f993 	bl	80036ce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033a8:	e00a      	b.n	80033c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f98f 	bl	80036ce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b0:	e006      	b.n	80033c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 f98b 	bl	80036ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80033be:	e175      	b.n	80036ac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c0:	bf00      	nop
    return;
 80033c2:	e173      	b.n	80036ac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	f040 814f 	bne.w	800366c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80033ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033d2:	f003 0310 	and.w	r3, r3, #16
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 8148 	beq.w	800366c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80033dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033e0:	f003 0310 	and.w	r3, r3, #16
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f000 8141 	beq.w	800366c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033ea:	2300      	movs	r3, #0
 80033ec:	60bb      	str	r3, [r7, #8]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	60bb      	str	r3, [r7, #8]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	60bb      	str	r3, [r7, #8]
 80033fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800340a:	2b00      	cmp	r3, #0
 800340c:	f000 80b6 	beq.w	800357c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800341c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 8145 	beq.w	80036b0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800342a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800342e:	429a      	cmp	r2, r3
 8003430:	f080 813e 	bcs.w	80036b0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800343a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	2b20      	cmp	r3, #32
 8003444:	f000 8088 	beq.w	8003558 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	330c      	adds	r3, #12
 800344e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003452:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003456:	e853 3f00 	ldrex	r3, [r3]
 800345a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800345e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003462:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003466:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	330c      	adds	r3, #12
 8003470:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003474:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003478:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800347c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003480:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003484:	e841 2300 	strex	r3, r2, [r1]
 8003488:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800348c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1d9      	bne.n	8003448 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	3314      	adds	r3, #20
 800349a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800349c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800349e:	e853 3f00 	ldrex	r3, [r3]
 80034a2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80034a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80034a6:	f023 0301 	bic.w	r3, r3, #1
 80034aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	3314      	adds	r3, #20
 80034b4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80034b8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80034bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034be:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80034c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80034c4:	e841 2300 	strex	r3, r2, [r1]
 80034c8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80034ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1e1      	bne.n	8003494 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	3314      	adds	r3, #20
 80034d6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80034da:	e853 3f00 	ldrex	r3, [r3]
 80034de:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80034e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	3314      	adds	r3, #20
 80034f0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80034f4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80034f6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80034fa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80034fc:	e841 2300 	strex	r3, r2, [r1]
 8003500:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003502:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003504:	2b00      	cmp	r3, #0
 8003506:	d1e3      	bne.n	80034d0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2220      	movs	r2, #32
 800350c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	330c      	adds	r3, #12
 800351c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800351e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003520:	e853 3f00 	ldrex	r3, [r3]
 8003524:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003526:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003528:	f023 0310 	bic.w	r3, r3, #16
 800352c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	330c      	adds	r3, #12
 8003536:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800353a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800353c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800353e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003540:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003542:	e841 2300 	strex	r3, r2, [r1]
 8003546:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003548:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1e3      	bne.n	8003516 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003552:	4618      	mov	r0, r3
 8003554:	f7fe f811 	bl	800157a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2202      	movs	r2, #2
 800355c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003566:	b29b      	uxth	r3, r3
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	b29b      	uxth	r3, r3
 800356c:	4619      	mov	r1, r3
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f8b6 	bl	80036e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003574:	e09c      	b.n	80036b0 <HAL_UART_IRQHandler+0x518>
 8003576:	bf00      	nop
 8003578:	080038df 	.word	0x080038df
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003584:	b29b      	uxth	r3, r3
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003590:	b29b      	uxth	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	f000 808e 	beq.w	80036b4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003598:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 8089 	beq.w	80036b4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	330c      	adds	r3, #12
 80035a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035ac:	e853 3f00 	ldrex	r3, [r3]
 80035b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80035b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	330c      	adds	r3, #12
 80035c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80035c6:	647a      	str	r2, [r7, #68]	@ 0x44
 80035c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80035cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035ce:	e841 2300 	strex	r3, r2, [r1]
 80035d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80035d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1e3      	bne.n	80035a2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	3314      	adds	r3, #20
 80035e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e4:	e853 3f00 	ldrex	r3, [r3]
 80035e8:	623b      	str	r3, [r7, #32]
   return(result);
 80035ea:	6a3b      	ldr	r3, [r7, #32]
 80035ec:	f023 0301 	bic.w	r3, r3, #1
 80035f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	3314      	adds	r3, #20
 80035fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80035fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8003600:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003602:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003604:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003606:	e841 2300 	strex	r3, r2, [r1]
 800360a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800360c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1e3      	bne.n	80035da <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2220      	movs	r2, #32
 8003616:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	330c      	adds	r3, #12
 8003626:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	e853 3f00 	ldrex	r3, [r3]
 800362e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f023 0310 	bic.w	r3, r3, #16
 8003636:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	330c      	adds	r3, #12
 8003640:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003644:	61fa      	str	r2, [r7, #28]
 8003646:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003648:	69b9      	ldr	r1, [r7, #24]
 800364a:	69fa      	ldr	r2, [r7, #28]
 800364c:	e841 2300 	strex	r3, r2, [r1]
 8003650:	617b      	str	r3, [r7, #20]
   return(result);
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1e3      	bne.n	8003620 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2202      	movs	r2, #2
 800365c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800365e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003662:	4619      	mov	r1, r3
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 f83b 	bl	80036e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800366a:	e023      	b.n	80036b4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800366c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003670:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003674:	2b00      	cmp	r3, #0
 8003676:	d009      	beq.n	800368c <HAL_UART_IRQHandler+0x4f4>
 8003678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800367c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003680:	2b00      	cmp	r3, #0
 8003682:	d003      	beq.n	800368c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 f93e 	bl	8003906 <UART_Transmit_IT>
    return;
 800368a:	e014      	b.n	80036b6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800368c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00e      	beq.n	80036b6 <HAL_UART_IRQHandler+0x51e>
 8003698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800369c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d008      	beq.n	80036b6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 f97d 	bl	80039a4 <UART_EndTransmit_IT>
    return;
 80036aa:	e004      	b.n	80036b6 <HAL_UART_IRQHandler+0x51e>
    return;
 80036ac:	bf00      	nop
 80036ae:	e002      	b.n	80036b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80036b0:	bf00      	nop
 80036b2:	e000      	b.n	80036b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80036b4:	bf00      	nop
  }
}
 80036b6:	37e8      	adds	r7, #232	@ 0xe8
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bc80      	pop	{r7}
 80036cc:	4770      	bx	lr

080036ce <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b083      	sub	sp, #12
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	bc80      	pop	{r7}
 80036de:	4770      	bx	lr

080036e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	460b      	mov	r3, r1
 80036ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bc80      	pop	{r7}
 80036f4:	4770      	bx	lr

080036f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b086      	sub	sp, #24
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	60f8      	str	r0, [r7, #12]
 80036fe:	60b9      	str	r1, [r7, #8]
 8003700:	603b      	str	r3, [r7, #0]
 8003702:	4613      	mov	r3, r2
 8003704:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003706:	e03b      	b.n	8003780 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800370e:	d037      	beq.n	8003780 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003710:	f7fd fbe6 	bl	8000ee0 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	6a3a      	ldr	r2, [r7, #32]
 800371c:	429a      	cmp	r2, r3
 800371e:	d302      	bcc.n	8003726 <UART_WaitOnFlagUntilTimeout+0x30>
 8003720:	6a3b      	ldr	r3, [r7, #32]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e03a      	b.n	80037a0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	f003 0304 	and.w	r3, r3, #4
 8003734:	2b00      	cmp	r3, #0
 8003736:	d023      	beq.n	8003780 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	2b80      	cmp	r3, #128	@ 0x80
 800373c:	d020      	beq.n	8003780 <UART_WaitOnFlagUntilTimeout+0x8a>
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	2b40      	cmp	r3, #64	@ 0x40
 8003742:	d01d      	beq.n	8003780 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0308 	and.w	r3, r3, #8
 800374e:	2b08      	cmp	r3, #8
 8003750:	d116      	bne.n	8003780 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003752:	2300      	movs	r3, #0
 8003754:	617b      	str	r3, [r7, #20]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	617b      	str	r3, [r7, #20]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	617b      	str	r3, [r7, #20]
 8003766:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f000 f856 	bl	800381a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2208      	movs	r2, #8
 8003772:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e00f      	b.n	80037a0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	4013      	ands	r3, r2
 800378a:	68ba      	ldr	r2, [r7, #8]
 800378c:	429a      	cmp	r2, r3
 800378e:	bf0c      	ite	eq
 8003790:	2301      	moveq	r3, #1
 8003792:	2300      	movne	r3, #0
 8003794:	b2db      	uxtb	r3, r3
 8003796:	461a      	mov	r2, r3
 8003798:	79fb      	ldrb	r3, [r7, #7]
 800379a:	429a      	cmp	r2, r3
 800379c:	d0b4      	beq.n	8003708 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3718      	adds	r7, #24
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	4613      	mov	r3, r2
 80037b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	68ba      	ldr	r2, [r7, #8]
 80037ba:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	88fa      	ldrh	r2, [r7, #6]
 80037c0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	88fa      	ldrh	r2, [r7, #6]
 80037c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2222      	movs	r2, #34	@ 0x22
 80037d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d007      	beq.n	80037ee <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68da      	ldr	r2, [r3, #12]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037ec:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	695a      	ldr	r2, [r3, #20]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f042 0201 	orr.w	r2, r2, #1
 80037fc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68da      	ldr	r2, [r3, #12]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f042 0220 	orr.w	r2, r2, #32
 800380c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3714      	adds	r7, #20
 8003814:	46bd      	mov	sp, r7
 8003816:	bc80      	pop	{r7}
 8003818:	4770      	bx	lr

0800381a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800381a:	b480      	push	{r7}
 800381c:	b095      	sub	sp, #84	@ 0x54
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	330c      	adds	r3, #12
 8003828:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800382c:	e853 3f00 	ldrex	r3, [r3]
 8003830:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003834:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003838:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	330c      	adds	r3, #12
 8003840:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003842:	643a      	str	r2, [r7, #64]	@ 0x40
 8003844:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003846:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003848:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800384a:	e841 2300 	strex	r3, r2, [r1]
 800384e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1e5      	bne.n	8003822 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	3314      	adds	r3, #20
 800385c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385e:	6a3b      	ldr	r3, [r7, #32]
 8003860:	e853 3f00 	ldrex	r3, [r3]
 8003864:	61fb      	str	r3, [r7, #28]
   return(result);
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	f023 0301 	bic.w	r3, r3, #1
 800386c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	3314      	adds	r3, #20
 8003874:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003876:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003878:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800387c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800387e:	e841 2300 	strex	r3, r2, [r1]
 8003882:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1e5      	bne.n	8003856 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800388e:	2b01      	cmp	r3, #1
 8003890:	d119      	bne.n	80038c6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	330c      	adds	r3, #12
 8003898:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	e853 3f00 	ldrex	r3, [r3]
 80038a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	f023 0310 	bic.w	r3, r3, #16
 80038a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	330c      	adds	r3, #12
 80038b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80038b2:	61ba      	str	r2, [r7, #24]
 80038b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b6:	6979      	ldr	r1, [r7, #20]
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	e841 2300 	strex	r3, r2, [r1]
 80038be:	613b      	str	r3, [r7, #16]
   return(result);
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1e5      	bne.n	8003892 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2220      	movs	r2, #32
 80038ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80038d4:	bf00      	nop
 80038d6:	3754      	adds	r7, #84	@ 0x54
 80038d8:	46bd      	mov	sp, r7
 80038da:	bc80      	pop	{r7}
 80038dc:	4770      	bx	lr

080038de <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b084      	sub	sp, #16
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f7ff fee8 	bl	80036ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038fe:	bf00      	nop
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003906:	b480      	push	{r7}
 8003908:	b085      	sub	sp, #20
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b21      	cmp	r3, #33	@ 0x21
 8003918:	d13e      	bne.n	8003998 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003922:	d114      	bne.n	800394e <UART_Transmit_IT+0x48>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d110      	bne.n	800394e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a1b      	ldr	r3, [r3, #32]
 8003930:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	881b      	ldrh	r3, [r3, #0]
 8003936:	461a      	mov	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003940:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	1c9a      	adds	r2, r3, #2
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	621a      	str	r2, [r3, #32]
 800394c:	e008      	b.n	8003960 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	1c59      	adds	r1, r3, #1
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	6211      	str	r1, [r2, #32]
 8003958:	781a      	ldrb	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003964:	b29b      	uxth	r3, r3
 8003966:	3b01      	subs	r3, #1
 8003968:	b29b      	uxth	r3, r3
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	4619      	mov	r1, r3
 800396e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003970:	2b00      	cmp	r3, #0
 8003972:	d10f      	bne.n	8003994 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68da      	ldr	r2, [r3, #12]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003982:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68da      	ldr	r2, [r3, #12]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003992:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003994:	2300      	movs	r3, #0
 8003996:	e000      	b.n	800399a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003998:	2302      	movs	r3, #2
  }
}
 800399a:	4618      	mov	r0, r3
 800399c:	3714      	adds	r7, #20
 800399e:	46bd      	mov	sp, r7
 80039a0:	bc80      	pop	{r7}
 80039a2:	4770      	bx	lr

080039a4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68da      	ldr	r2, [r3, #12]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039ba:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2220      	movs	r2, #32
 80039c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f7ff fe79 	bl	80036bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3708      	adds	r7, #8
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b08c      	sub	sp, #48	@ 0x30
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b22      	cmp	r3, #34	@ 0x22
 80039e6:	f040 80ae 	bne.w	8003b46 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039f2:	d117      	bne.n	8003a24 <UART_Receive_IT+0x50>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d113      	bne.n	8003a24 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80039fc:	2300      	movs	r3, #0
 80039fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a04:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a16:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a1c:	1c9a      	adds	r2, r3, #2
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a22:	e026      	b.n	8003a72 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a36:	d007      	beq.n	8003a48 <UART_Receive_IT+0x74>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10a      	bne.n	8003a56 <UART_Receive_IT+0x82>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d106      	bne.n	8003a56 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	b2da      	uxtb	r2, r3
 8003a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a52:	701a      	strb	r2, [r3, #0]
 8003a54:	e008      	b.n	8003a68 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a62:	b2da      	uxtb	r2, r3
 8003a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a66:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a6c:	1c5a      	adds	r2, r3, #1
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	4619      	mov	r1, r3
 8003a80:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d15d      	bne.n	8003b42 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68da      	ldr	r2, [r3, #12]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f022 0220 	bic.w	r2, r2, #32
 8003a94:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68da      	ldr	r2, [r3, #12]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003aa4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	695a      	ldr	r2, [r3, #20]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 0201 	bic.w	r2, r2, #1
 8003ab4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2220      	movs	r2, #32
 8003aba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d135      	bne.n	8003b38 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	330c      	adds	r3, #12
 8003ad8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	e853 3f00 	ldrex	r3, [r3]
 8003ae0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	f023 0310 	bic.w	r3, r3, #16
 8003ae8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	330c      	adds	r3, #12
 8003af0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003af2:	623a      	str	r2, [r7, #32]
 8003af4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af6:	69f9      	ldr	r1, [r7, #28]
 8003af8:	6a3a      	ldr	r2, [r7, #32]
 8003afa:	e841 2300 	strex	r3, r2, [r1]
 8003afe:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1e5      	bne.n	8003ad2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0310 	and.w	r3, r3, #16
 8003b10:	2b10      	cmp	r3, #16
 8003b12:	d10a      	bne.n	8003b2a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b14:	2300      	movs	r3, #0
 8003b16:	60fb      	str	r3, [r7, #12]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	60fb      	str	r3, [r7, #12]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	60fb      	str	r3, [r7, #12]
 8003b28:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003b2e:	4619      	mov	r1, r3
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f7ff fdd5 	bl	80036e0 <HAL_UARTEx_RxEventCallback>
 8003b36:	e002      	b.n	8003b3e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f7fc fda9 	bl	8000690 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	e002      	b.n	8003b48 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003b42:	2300      	movs	r3, #0
 8003b44:	e000      	b.n	8003b48 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003b46:	2302      	movs	r3, #2
  }
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3730      	adds	r7, #48	@ 0x30
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68da      	ldr	r2, [r3, #12]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	689a      	ldr	r2, [r3, #8]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	431a      	orrs	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	695b      	ldr	r3, [r3, #20]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003b8a:	f023 030c 	bic.w	r3, r3, #12
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	6812      	ldr	r2, [r2, #0]
 8003b92:	68b9      	ldr	r1, [r7, #8]
 8003b94:	430b      	orrs	r3, r1
 8003b96:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	699a      	ldr	r2, [r3, #24]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a2c      	ldr	r2, [pc, #176]	@ (8003c64 <UART_SetConfig+0x114>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d103      	bne.n	8003bc0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003bb8:	f7fe fc50 	bl	800245c <HAL_RCC_GetPCLK2Freq>
 8003bbc:	60f8      	str	r0, [r7, #12]
 8003bbe:	e002      	b.n	8003bc6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003bc0:	f7fe fc38 	bl	8002434 <HAL_RCC_GetPCLK1Freq>
 8003bc4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	4413      	add	r3, r2
 8003bce:	009a      	lsls	r2, r3, #2
 8003bd0:	441a      	add	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bdc:	4a22      	ldr	r2, [pc, #136]	@ (8003c68 <UART_SetConfig+0x118>)
 8003bde:	fba2 2303 	umull	r2, r3, r2, r3
 8003be2:	095b      	lsrs	r3, r3, #5
 8003be4:	0119      	lsls	r1, r3, #4
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	4613      	mov	r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	4413      	add	r3, r2
 8003bee:	009a      	lsls	r2, r3, #2
 8003bf0:	441a      	add	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8003c68 <UART_SetConfig+0x118>)
 8003bfe:	fba3 0302 	umull	r0, r3, r3, r2
 8003c02:	095b      	lsrs	r3, r3, #5
 8003c04:	2064      	movs	r0, #100	@ 0x64
 8003c06:	fb00 f303 	mul.w	r3, r0, r3
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	011b      	lsls	r3, r3, #4
 8003c0e:	3332      	adds	r3, #50	@ 0x32
 8003c10:	4a15      	ldr	r2, [pc, #84]	@ (8003c68 <UART_SetConfig+0x118>)
 8003c12:	fba2 2303 	umull	r2, r3, r2, r3
 8003c16:	095b      	lsrs	r3, r3, #5
 8003c18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c1c:	4419      	add	r1, r3
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	4613      	mov	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4413      	add	r3, r2
 8003c26:	009a      	lsls	r2, r3, #2
 8003c28:	441a      	add	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c34:	4b0c      	ldr	r3, [pc, #48]	@ (8003c68 <UART_SetConfig+0x118>)
 8003c36:	fba3 0302 	umull	r0, r3, r3, r2
 8003c3a:	095b      	lsrs	r3, r3, #5
 8003c3c:	2064      	movs	r0, #100	@ 0x64
 8003c3e:	fb00 f303 	mul.w	r3, r0, r3
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	011b      	lsls	r3, r3, #4
 8003c46:	3332      	adds	r3, #50	@ 0x32
 8003c48:	4a07      	ldr	r2, [pc, #28]	@ (8003c68 <UART_SetConfig+0x118>)
 8003c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4e:	095b      	lsrs	r3, r3, #5
 8003c50:	f003 020f 	and.w	r2, r3, #15
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	440a      	add	r2, r1
 8003c5a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003c5c:	bf00      	nop
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	40013800 	.word	0x40013800
 8003c68:	51eb851f 	.word	0x51eb851f

08003c6c <std>:
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	b510      	push	{r4, lr}
 8003c70:	4604      	mov	r4, r0
 8003c72:	e9c0 3300 	strd	r3, r3, [r0]
 8003c76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c7a:	6083      	str	r3, [r0, #8]
 8003c7c:	8181      	strh	r1, [r0, #12]
 8003c7e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003c80:	81c2      	strh	r2, [r0, #14]
 8003c82:	6183      	str	r3, [r0, #24]
 8003c84:	4619      	mov	r1, r3
 8003c86:	2208      	movs	r2, #8
 8003c88:	305c      	adds	r0, #92	@ 0x5c
 8003c8a:	f000 f926 	bl	8003eda <memset>
 8003c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003cc4 <std+0x58>)
 8003c90:	6224      	str	r4, [r4, #32]
 8003c92:	6263      	str	r3, [r4, #36]	@ 0x24
 8003c94:	4b0c      	ldr	r3, [pc, #48]	@ (8003cc8 <std+0x5c>)
 8003c96:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003c98:	4b0c      	ldr	r3, [pc, #48]	@ (8003ccc <std+0x60>)
 8003c9a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8003cd0 <std+0x64>)
 8003c9e:	6323      	str	r3, [r4, #48]	@ 0x30
 8003ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8003cd4 <std+0x68>)
 8003ca2:	429c      	cmp	r4, r3
 8003ca4:	d006      	beq.n	8003cb4 <std+0x48>
 8003ca6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003caa:	4294      	cmp	r4, r2
 8003cac:	d002      	beq.n	8003cb4 <std+0x48>
 8003cae:	33d0      	adds	r3, #208	@ 0xd0
 8003cb0:	429c      	cmp	r4, r3
 8003cb2:	d105      	bne.n	8003cc0 <std+0x54>
 8003cb4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003cb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cbc:	f000 b986 	b.w	8003fcc <__retarget_lock_init_recursive>
 8003cc0:	bd10      	pop	{r4, pc}
 8003cc2:	bf00      	nop
 8003cc4:	08003e55 	.word	0x08003e55
 8003cc8:	08003e77 	.word	0x08003e77
 8003ccc:	08003eaf 	.word	0x08003eaf
 8003cd0:	08003ed3 	.word	0x08003ed3
 8003cd4:	20000220 	.word	0x20000220

08003cd8 <stdio_exit_handler>:
 8003cd8:	4a02      	ldr	r2, [pc, #8]	@ (8003ce4 <stdio_exit_handler+0xc>)
 8003cda:	4903      	ldr	r1, [pc, #12]	@ (8003ce8 <stdio_exit_handler+0x10>)
 8003cdc:	4803      	ldr	r0, [pc, #12]	@ (8003cec <stdio_exit_handler+0x14>)
 8003cde:	f000 b869 	b.w	8003db4 <_fwalk_sglue>
 8003ce2:	bf00      	nop
 8003ce4:	2000000c 	.word	0x2000000c
 8003ce8:	08004b15 	.word	0x08004b15
 8003cec:	2000001c 	.word	0x2000001c

08003cf0 <cleanup_stdio>:
 8003cf0:	6841      	ldr	r1, [r0, #4]
 8003cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8003d24 <cleanup_stdio+0x34>)
 8003cf4:	b510      	push	{r4, lr}
 8003cf6:	4299      	cmp	r1, r3
 8003cf8:	4604      	mov	r4, r0
 8003cfa:	d001      	beq.n	8003d00 <cleanup_stdio+0x10>
 8003cfc:	f000 ff0a 	bl	8004b14 <_fflush_r>
 8003d00:	68a1      	ldr	r1, [r4, #8]
 8003d02:	4b09      	ldr	r3, [pc, #36]	@ (8003d28 <cleanup_stdio+0x38>)
 8003d04:	4299      	cmp	r1, r3
 8003d06:	d002      	beq.n	8003d0e <cleanup_stdio+0x1e>
 8003d08:	4620      	mov	r0, r4
 8003d0a:	f000 ff03 	bl	8004b14 <_fflush_r>
 8003d0e:	68e1      	ldr	r1, [r4, #12]
 8003d10:	4b06      	ldr	r3, [pc, #24]	@ (8003d2c <cleanup_stdio+0x3c>)
 8003d12:	4299      	cmp	r1, r3
 8003d14:	d004      	beq.n	8003d20 <cleanup_stdio+0x30>
 8003d16:	4620      	mov	r0, r4
 8003d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d1c:	f000 befa 	b.w	8004b14 <_fflush_r>
 8003d20:	bd10      	pop	{r4, pc}
 8003d22:	bf00      	nop
 8003d24:	20000220 	.word	0x20000220
 8003d28:	20000288 	.word	0x20000288
 8003d2c:	200002f0 	.word	0x200002f0

08003d30 <global_stdio_init.part.0>:
 8003d30:	b510      	push	{r4, lr}
 8003d32:	4b0b      	ldr	r3, [pc, #44]	@ (8003d60 <global_stdio_init.part.0+0x30>)
 8003d34:	4c0b      	ldr	r4, [pc, #44]	@ (8003d64 <global_stdio_init.part.0+0x34>)
 8003d36:	4a0c      	ldr	r2, [pc, #48]	@ (8003d68 <global_stdio_init.part.0+0x38>)
 8003d38:	4620      	mov	r0, r4
 8003d3a:	601a      	str	r2, [r3, #0]
 8003d3c:	2104      	movs	r1, #4
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f7ff ff94 	bl	8003c6c <std>
 8003d44:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003d48:	2201      	movs	r2, #1
 8003d4a:	2109      	movs	r1, #9
 8003d4c:	f7ff ff8e 	bl	8003c6c <std>
 8003d50:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003d54:	2202      	movs	r2, #2
 8003d56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d5a:	2112      	movs	r1, #18
 8003d5c:	f7ff bf86 	b.w	8003c6c <std>
 8003d60:	20000358 	.word	0x20000358
 8003d64:	20000220 	.word	0x20000220
 8003d68:	08003cd9 	.word	0x08003cd9

08003d6c <__sfp_lock_acquire>:
 8003d6c:	4801      	ldr	r0, [pc, #4]	@ (8003d74 <__sfp_lock_acquire+0x8>)
 8003d6e:	f000 b92e 	b.w	8003fce <__retarget_lock_acquire_recursive>
 8003d72:	bf00      	nop
 8003d74:	20000361 	.word	0x20000361

08003d78 <__sfp_lock_release>:
 8003d78:	4801      	ldr	r0, [pc, #4]	@ (8003d80 <__sfp_lock_release+0x8>)
 8003d7a:	f000 b929 	b.w	8003fd0 <__retarget_lock_release_recursive>
 8003d7e:	bf00      	nop
 8003d80:	20000361 	.word	0x20000361

08003d84 <__sinit>:
 8003d84:	b510      	push	{r4, lr}
 8003d86:	4604      	mov	r4, r0
 8003d88:	f7ff fff0 	bl	8003d6c <__sfp_lock_acquire>
 8003d8c:	6a23      	ldr	r3, [r4, #32]
 8003d8e:	b11b      	cbz	r3, 8003d98 <__sinit+0x14>
 8003d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d94:	f7ff bff0 	b.w	8003d78 <__sfp_lock_release>
 8003d98:	4b04      	ldr	r3, [pc, #16]	@ (8003dac <__sinit+0x28>)
 8003d9a:	6223      	str	r3, [r4, #32]
 8003d9c:	4b04      	ldr	r3, [pc, #16]	@ (8003db0 <__sinit+0x2c>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1f5      	bne.n	8003d90 <__sinit+0xc>
 8003da4:	f7ff ffc4 	bl	8003d30 <global_stdio_init.part.0>
 8003da8:	e7f2      	b.n	8003d90 <__sinit+0xc>
 8003daa:	bf00      	nop
 8003dac:	08003cf1 	.word	0x08003cf1
 8003db0:	20000358 	.word	0x20000358

08003db4 <_fwalk_sglue>:
 8003db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003db8:	4607      	mov	r7, r0
 8003dba:	4688      	mov	r8, r1
 8003dbc:	4614      	mov	r4, r2
 8003dbe:	2600      	movs	r6, #0
 8003dc0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003dc4:	f1b9 0901 	subs.w	r9, r9, #1
 8003dc8:	d505      	bpl.n	8003dd6 <_fwalk_sglue+0x22>
 8003dca:	6824      	ldr	r4, [r4, #0]
 8003dcc:	2c00      	cmp	r4, #0
 8003dce:	d1f7      	bne.n	8003dc0 <_fwalk_sglue+0xc>
 8003dd0:	4630      	mov	r0, r6
 8003dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003dd6:	89ab      	ldrh	r3, [r5, #12]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d907      	bls.n	8003dec <_fwalk_sglue+0x38>
 8003ddc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003de0:	3301      	adds	r3, #1
 8003de2:	d003      	beq.n	8003dec <_fwalk_sglue+0x38>
 8003de4:	4629      	mov	r1, r5
 8003de6:	4638      	mov	r0, r7
 8003de8:	47c0      	blx	r8
 8003dea:	4306      	orrs	r6, r0
 8003dec:	3568      	adds	r5, #104	@ 0x68
 8003dee:	e7e9      	b.n	8003dc4 <_fwalk_sglue+0x10>

08003df0 <iprintf>:
 8003df0:	b40f      	push	{r0, r1, r2, r3}
 8003df2:	b507      	push	{r0, r1, r2, lr}
 8003df4:	4906      	ldr	r1, [pc, #24]	@ (8003e10 <iprintf+0x20>)
 8003df6:	ab04      	add	r3, sp, #16
 8003df8:	6808      	ldr	r0, [r1, #0]
 8003dfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8003dfe:	6881      	ldr	r1, [r0, #8]
 8003e00:	9301      	str	r3, [sp, #4]
 8003e02:	f000 fb5d 	bl	80044c0 <_vfiprintf_r>
 8003e06:	b003      	add	sp, #12
 8003e08:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e0c:	b004      	add	sp, #16
 8003e0e:	4770      	bx	lr
 8003e10:	20000018 	.word	0x20000018

08003e14 <siprintf>:
 8003e14:	b40e      	push	{r1, r2, r3}
 8003e16:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003e1a:	b500      	push	{lr}
 8003e1c:	b09c      	sub	sp, #112	@ 0x70
 8003e1e:	ab1d      	add	r3, sp, #116	@ 0x74
 8003e20:	9002      	str	r0, [sp, #8]
 8003e22:	9006      	str	r0, [sp, #24]
 8003e24:	9107      	str	r1, [sp, #28]
 8003e26:	9104      	str	r1, [sp, #16]
 8003e28:	4808      	ldr	r0, [pc, #32]	@ (8003e4c <siprintf+0x38>)
 8003e2a:	4909      	ldr	r1, [pc, #36]	@ (8003e50 <siprintf+0x3c>)
 8003e2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e30:	9105      	str	r1, [sp, #20]
 8003e32:	6800      	ldr	r0, [r0, #0]
 8003e34:	a902      	add	r1, sp, #8
 8003e36:	9301      	str	r3, [sp, #4]
 8003e38:	f000 fa1e 	bl	8004278 <_svfiprintf_r>
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	9b02      	ldr	r3, [sp, #8]
 8003e40:	701a      	strb	r2, [r3, #0]
 8003e42:	b01c      	add	sp, #112	@ 0x70
 8003e44:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e48:	b003      	add	sp, #12
 8003e4a:	4770      	bx	lr
 8003e4c:	20000018 	.word	0x20000018
 8003e50:	ffff0208 	.word	0xffff0208

08003e54 <__sread>:
 8003e54:	b510      	push	{r4, lr}
 8003e56:	460c      	mov	r4, r1
 8003e58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e5c:	f000 f868 	bl	8003f30 <_read_r>
 8003e60:	2800      	cmp	r0, #0
 8003e62:	bfab      	itete	ge
 8003e64:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003e66:	89a3      	ldrhlt	r3, [r4, #12]
 8003e68:	181b      	addge	r3, r3, r0
 8003e6a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003e6e:	bfac      	ite	ge
 8003e70:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003e72:	81a3      	strhlt	r3, [r4, #12]
 8003e74:	bd10      	pop	{r4, pc}

08003e76 <__swrite>:
 8003e76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e7a:	461f      	mov	r7, r3
 8003e7c:	898b      	ldrh	r3, [r1, #12]
 8003e7e:	4605      	mov	r5, r0
 8003e80:	05db      	lsls	r3, r3, #23
 8003e82:	460c      	mov	r4, r1
 8003e84:	4616      	mov	r6, r2
 8003e86:	d505      	bpl.n	8003e94 <__swrite+0x1e>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e90:	f000 f83c 	bl	8003f0c <_lseek_r>
 8003e94:	89a3      	ldrh	r3, [r4, #12]
 8003e96:	4632      	mov	r2, r6
 8003e98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e9c:	81a3      	strh	r3, [r4, #12]
 8003e9e:	4628      	mov	r0, r5
 8003ea0:	463b      	mov	r3, r7
 8003ea2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ea6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003eaa:	f000 b853 	b.w	8003f54 <_write_r>

08003eae <__sseek>:
 8003eae:	b510      	push	{r4, lr}
 8003eb0:	460c      	mov	r4, r1
 8003eb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eb6:	f000 f829 	bl	8003f0c <_lseek_r>
 8003eba:	1c43      	adds	r3, r0, #1
 8003ebc:	89a3      	ldrh	r3, [r4, #12]
 8003ebe:	bf15      	itete	ne
 8003ec0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003ec2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003ec6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003eca:	81a3      	strheq	r3, [r4, #12]
 8003ecc:	bf18      	it	ne
 8003ece:	81a3      	strhne	r3, [r4, #12]
 8003ed0:	bd10      	pop	{r4, pc}

08003ed2 <__sclose>:
 8003ed2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ed6:	f000 b809 	b.w	8003eec <_close_r>

08003eda <memset>:
 8003eda:	4603      	mov	r3, r0
 8003edc:	4402      	add	r2, r0
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d100      	bne.n	8003ee4 <memset+0xa>
 8003ee2:	4770      	bx	lr
 8003ee4:	f803 1b01 	strb.w	r1, [r3], #1
 8003ee8:	e7f9      	b.n	8003ede <memset+0x4>
	...

08003eec <_close_r>:
 8003eec:	b538      	push	{r3, r4, r5, lr}
 8003eee:	2300      	movs	r3, #0
 8003ef0:	4d05      	ldr	r5, [pc, #20]	@ (8003f08 <_close_r+0x1c>)
 8003ef2:	4604      	mov	r4, r0
 8003ef4:	4608      	mov	r0, r1
 8003ef6:	602b      	str	r3, [r5, #0]
 8003ef8:	f7fc fd5d 	bl	80009b6 <_close>
 8003efc:	1c43      	adds	r3, r0, #1
 8003efe:	d102      	bne.n	8003f06 <_close_r+0x1a>
 8003f00:	682b      	ldr	r3, [r5, #0]
 8003f02:	b103      	cbz	r3, 8003f06 <_close_r+0x1a>
 8003f04:	6023      	str	r3, [r4, #0]
 8003f06:	bd38      	pop	{r3, r4, r5, pc}
 8003f08:	2000035c 	.word	0x2000035c

08003f0c <_lseek_r>:
 8003f0c:	b538      	push	{r3, r4, r5, lr}
 8003f0e:	4604      	mov	r4, r0
 8003f10:	4608      	mov	r0, r1
 8003f12:	4611      	mov	r1, r2
 8003f14:	2200      	movs	r2, #0
 8003f16:	4d05      	ldr	r5, [pc, #20]	@ (8003f2c <_lseek_r+0x20>)
 8003f18:	602a      	str	r2, [r5, #0]
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	f7fc fd6f 	bl	80009fe <_lseek>
 8003f20:	1c43      	adds	r3, r0, #1
 8003f22:	d102      	bne.n	8003f2a <_lseek_r+0x1e>
 8003f24:	682b      	ldr	r3, [r5, #0]
 8003f26:	b103      	cbz	r3, 8003f2a <_lseek_r+0x1e>
 8003f28:	6023      	str	r3, [r4, #0]
 8003f2a:	bd38      	pop	{r3, r4, r5, pc}
 8003f2c:	2000035c 	.word	0x2000035c

08003f30 <_read_r>:
 8003f30:	b538      	push	{r3, r4, r5, lr}
 8003f32:	4604      	mov	r4, r0
 8003f34:	4608      	mov	r0, r1
 8003f36:	4611      	mov	r1, r2
 8003f38:	2200      	movs	r2, #0
 8003f3a:	4d05      	ldr	r5, [pc, #20]	@ (8003f50 <_read_r+0x20>)
 8003f3c:	602a      	str	r2, [r5, #0]
 8003f3e:	461a      	mov	r2, r3
 8003f40:	f7fc fd1c 	bl	800097c <_read>
 8003f44:	1c43      	adds	r3, r0, #1
 8003f46:	d102      	bne.n	8003f4e <_read_r+0x1e>
 8003f48:	682b      	ldr	r3, [r5, #0]
 8003f4a:	b103      	cbz	r3, 8003f4e <_read_r+0x1e>
 8003f4c:	6023      	str	r3, [r4, #0]
 8003f4e:	bd38      	pop	{r3, r4, r5, pc}
 8003f50:	2000035c 	.word	0x2000035c

08003f54 <_write_r>:
 8003f54:	b538      	push	{r3, r4, r5, lr}
 8003f56:	4604      	mov	r4, r0
 8003f58:	4608      	mov	r0, r1
 8003f5a:	4611      	mov	r1, r2
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	4d05      	ldr	r5, [pc, #20]	@ (8003f74 <_write_r+0x20>)
 8003f60:	602a      	str	r2, [r5, #0]
 8003f62:	461a      	mov	r2, r3
 8003f64:	f7fc fb78 	bl	8000658 <_write>
 8003f68:	1c43      	adds	r3, r0, #1
 8003f6a:	d102      	bne.n	8003f72 <_write_r+0x1e>
 8003f6c:	682b      	ldr	r3, [r5, #0]
 8003f6e:	b103      	cbz	r3, 8003f72 <_write_r+0x1e>
 8003f70:	6023      	str	r3, [r4, #0]
 8003f72:	bd38      	pop	{r3, r4, r5, pc}
 8003f74:	2000035c 	.word	0x2000035c

08003f78 <__errno>:
 8003f78:	4b01      	ldr	r3, [pc, #4]	@ (8003f80 <__errno+0x8>)
 8003f7a:	6818      	ldr	r0, [r3, #0]
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	20000018 	.word	0x20000018

08003f84 <__libc_init_array>:
 8003f84:	b570      	push	{r4, r5, r6, lr}
 8003f86:	2600      	movs	r6, #0
 8003f88:	4d0c      	ldr	r5, [pc, #48]	@ (8003fbc <__libc_init_array+0x38>)
 8003f8a:	4c0d      	ldr	r4, [pc, #52]	@ (8003fc0 <__libc_init_array+0x3c>)
 8003f8c:	1b64      	subs	r4, r4, r5
 8003f8e:	10a4      	asrs	r4, r4, #2
 8003f90:	42a6      	cmp	r6, r4
 8003f92:	d109      	bne.n	8003fa8 <__libc_init_array+0x24>
 8003f94:	f000 ff7a 	bl	8004e8c <_init>
 8003f98:	2600      	movs	r6, #0
 8003f9a:	4d0a      	ldr	r5, [pc, #40]	@ (8003fc4 <__libc_init_array+0x40>)
 8003f9c:	4c0a      	ldr	r4, [pc, #40]	@ (8003fc8 <__libc_init_array+0x44>)
 8003f9e:	1b64      	subs	r4, r4, r5
 8003fa0:	10a4      	asrs	r4, r4, #2
 8003fa2:	42a6      	cmp	r6, r4
 8003fa4:	d105      	bne.n	8003fb2 <__libc_init_array+0x2e>
 8003fa6:	bd70      	pop	{r4, r5, r6, pc}
 8003fa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fac:	4798      	blx	r3
 8003fae:	3601      	adds	r6, #1
 8003fb0:	e7ee      	b.n	8003f90 <__libc_init_array+0xc>
 8003fb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fb6:	4798      	blx	r3
 8003fb8:	3601      	adds	r6, #1
 8003fba:	e7f2      	b.n	8003fa2 <__libc_init_array+0x1e>
 8003fbc:	08005218 	.word	0x08005218
 8003fc0:	08005218 	.word	0x08005218
 8003fc4:	08005218 	.word	0x08005218
 8003fc8:	0800521c 	.word	0x0800521c

08003fcc <__retarget_lock_init_recursive>:
 8003fcc:	4770      	bx	lr

08003fce <__retarget_lock_acquire_recursive>:
 8003fce:	4770      	bx	lr

08003fd0 <__retarget_lock_release_recursive>:
 8003fd0:	4770      	bx	lr
	...

08003fd4 <_free_r>:
 8003fd4:	b538      	push	{r3, r4, r5, lr}
 8003fd6:	4605      	mov	r5, r0
 8003fd8:	2900      	cmp	r1, #0
 8003fda:	d040      	beq.n	800405e <_free_r+0x8a>
 8003fdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fe0:	1f0c      	subs	r4, r1, #4
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	bfb8      	it	lt
 8003fe6:	18e4      	addlt	r4, r4, r3
 8003fe8:	f000 f8de 	bl	80041a8 <__malloc_lock>
 8003fec:	4a1c      	ldr	r2, [pc, #112]	@ (8004060 <_free_r+0x8c>)
 8003fee:	6813      	ldr	r3, [r2, #0]
 8003ff0:	b933      	cbnz	r3, 8004000 <_free_r+0x2c>
 8003ff2:	6063      	str	r3, [r4, #4]
 8003ff4:	6014      	str	r4, [r2, #0]
 8003ff6:	4628      	mov	r0, r5
 8003ff8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ffc:	f000 b8da 	b.w	80041b4 <__malloc_unlock>
 8004000:	42a3      	cmp	r3, r4
 8004002:	d908      	bls.n	8004016 <_free_r+0x42>
 8004004:	6820      	ldr	r0, [r4, #0]
 8004006:	1821      	adds	r1, r4, r0
 8004008:	428b      	cmp	r3, r1
 800400a:	bf01      	itttt	eq
 800400c:	6819      	ldreq	r1, [r3, #0]
 800400e:	685b      	ldreq	r3, [r3, #4]
 8004010:	1809      	addeq	r1, r1, r0
 8004012:	6021      	streq	r1, [r4, #0]
 8004014:	e7ed      	b.n	8003ff2 <_free_r+0x1e>
 8004016:	461a      	mov	r2, r3
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	b10b      	cbz	r3, 8004020 <_free_r+0x4c>
 800401c:	42a3      	cmp	r3, r4
 800401e:	d9fa      	bls.n	8004016 <_free_r+0x42>
 8004020:	6811      	ldr	r1, [r2, #0]
 8004022:	1850      	adds	r0, r2, r1
 8004024:	42a0      	cmp	r0, r4
 8004026:	d10b      	bne.n	8004040 <_free_r+0x6c>
 8004028:	6820      	ldr	r0, [r4, #0]
 800402a:	4401      	add	r1, r0
 800402c:	1850      	adds	r0, r2, r1
 800402e:	4283      	cmp	r3, r0
 8004030:	6011      	str	r1, [r2, #0]
 8004032:	d1e0      	bne.n	8003ff6 <_free_r+0x22>
 8004034:	6818      	ldr	r0, [r3, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	4408      	add	r0, r1
 800403a:	6010      	str	r0, [r2, #0]
 800403c:	6053      	str	r3, [r2, #4]
 800403e:	e7da      	b.n	8003ff6 <_free_r+0x22>
 8004040:	d902      	bls.n	8004048 <_free_r+0x74>
 8004042:	230c      	movs	r3, #12
 8004044:	602b      	str	r3, [r5, #0]
 8004046:	e7d6      	b.n	8003ff6 <_free_r+0x22>
 8004048:	6820      	ldr	r0, [r4, #0]
 800404a:	1821      	adds	r1, r4, r0
 800404c:	428b      	cmp	r3, r1
 800404e:	bf01      	itttt	eq
 8004050:	6819      	ldreq	r1, [r3, #0]
 8004052:	685b      	ldreq	r3, [r3, #4]
 8004054:	1809      	addeq	r1, r1, r0
 8004056:	6021      	streq	r1, [r4, #0]
 8004058:	6063      	str	r3, [r4, #4]
 800405a:	6054      	str	r4, [r2, #4]
 800405c:	e7cb      	b.n	8003ff6 <_free_r+0x22>
 800405e:	bd38      	pop	{r3, r4, r5, pc}
 8004060:	20000368 	.word	0x20000368

08004064 <sbrk_aligned>:
 8004064:	b570      	push	{r4, r5, r6, lr}
 8004066:	4e0f      	ldr	r6, [pc, #60]	@ (80040a4 <sbrk_aligned+0x40>)
 8004068:	460c      	mov	r4, r1
 800406a:	6831      	ldr	r1, [r6, #0]
 800406c:	4605      	mov	r5, r0
 800406e:	b911      	cbnz	r1, 8004076 <sbrk_aligned+0x12>
 8004070:	f000 fe26 	bl	8004cc0 <_sbrk_r>
 8004074:	6030      	str	r0, [r6, #0]
 8004076:	4621      	mov	r1, r4
 8004078:	4628      	mov	r0, r5
 800407a:	f000 fe21 	bl	8004cc0 <_sbrk_r>
 800407e:	1c43      	adds	r3, r0, #1
 8004080:	d103      	bne.n	800408a <sbrk_aligned+0x26>
 8004082:	f04f 34ff 	mov.w	r4, #4294967295
 8004086:	4620      	mov	r0, r4
 8004088:	bd70      	pop	{r4, r5, r6, pc}
 800408a:	1cc4      	adds	r4, r0, #3
 800408c:	f024 0403 	bic.w	r4, r4, #3
 8004090:	42a0      	cmp	r0, r4
 8004092:	d0f8      	beq.n	8004086 <sbrk_aligned+0x22>
 8004094:	1a21      	subs	r1, r4, r0
 8004096:	4628      	mov	r0, r5
 8004098:	f000 fe12 	bl	8004cc0 <_sbrk_r>
 800409c:	3001      	adds	r0, #1
 800409e:	d1f2      	bne.n	8004086 <sbrk_aligned+0x22>
 80040a0:	e7ef      	b.n	8004082 <sbrk_aligned+0x1e>
 80040a2:	bf00      	nop
 80040a4:	20000364 	.word	0x20000364

080040a8 <_malloc_r>:
 80040a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040ac:	1ccd      	adds	r5, r1, #3
 80040ae:	f025 0503 	bic.w	r5, r5, #3
 80040b2:	3508      	adds	r5, #8
 80040b4:	2d0c      	cmp	r5, #12
 80040b6:	bf38      	it	cc
 80040b8:	250c      	movcc	r5, #12
 80040ba:	2d00      	cmp	r5, #0
 80040bc:	4606      	mov	r6, r0
 80040be:	db01      	blt.n	80040c4 <_malloc_r+0x1c>
 80040c0:	42a9      	cmp	r1, r5
 80040c2:	d904      	bls.n	80040ce <_malloc_r+0x26>
 80040c4:	230c      	movs	r3, #12
 80040c6:	6033      	str	r3, [r6, #0]
 80040c8:	2000      	movs	r0, #0
 80040ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80041a4 <_malloc_r+0xfc>
 80040d2:	f000 f869 	bl	80041a8 <__malloc_lock>
 80040d6:	f8d8 3000 	ldr.w	r3, [r8]
 80040da:	461c      	mov	r4, r3
 80040dc:	bb44      	cbnz	r4, 8004130 <_malloc_r+0x88>
 80040de:	4629      	mov	r1, r5
 80040e0:	4630      	mov	r0, r6
 80040e2:	f7ff ffbf 	bl	8004064 <sbrk_aligned>
 80040e6:	1c43      	adds	r3, r0, #1
 80040e8:	4604      	mov	r4, r0
 80040ea:	d158      	bne.n	800419e <_malloc_r+0xf6>
 80040ec:	f8d8 4000 	ldr.w	r4, [r8]
 80040f0:	4627      	mov	r7, r4
 80040f2:	2f00      	cmp	r7, #0
 80040f4:	d143      	bne.n	800417e <_malloc_r+0xd6>
 80040f6:	2c00      	cmp	r4, #0
 80040f8:	d04b      	beq.n	8004192 <_malloc_r+0xea>
 80040fa:	6823      	ldr	r3, [r4, #0]
 80040fc:	4639      	mov	r1, r7
 80040fe:	4630      	mov	r0, r6
 8004100:	eb04 0903 	add.w	r9, r4, r3
 8004104:	f000 fddc 	bl	8004cc0 <_sbrk_r>
 8004108:	4581      	cmp	r9, r0
 800410a:	d142      	bne.n	8004192 <_malloc_r+0xea>
 800410c:	6821      	ldr	r1, [r4, #0]
 800410e:	4630      	mov	r0, r6
 8004110:	1a6d      	subs	r5, r5, r1
 8004112:	4629      	mov	r1, r5
 8004114:	f7ff ffa6 	bl	8004064 <sbrk_aligned>
 8004118:	3001      	adds	r0, #1
 800411a:	d03a      	beq.n	8004192 <_malloc_r+0xea>
 800411c:	6823      	ldr	r3, [r4, #0]
 800411e:	442b      	add	r3, r5
 8004120:	6023      	str	r3, [r4, #0]
 8004122:	f8d8 3000 	ldr.w	r3, [r8]
 8004126:	685a      	ldr	r2, [r3, #4]
 8004128:	bb62      	cbnz	r2, 8004184 <_malloc_r+0xdc>
 800412a:	f8c8 7000 	str.w	r7, [r8]
 800412e:	e00f      	b.n	8004150 <_malloc_r+0xa8>
 8004130:	6822      	ldr	r2, [r4, #0]
 8004132:	1b52      	subs	r2, r2, r5
 8004134:	d420      	bmi.n	8004178 <_malloc_r+0xd0>
 8004136:	2a0b      	cmp	r2, #11
 8004138:	d917      	bls.n	800416a <_malloc_r+0xc2>
 800413a:	1961      	adds	r1, r4, r5
 800413c:	42a3      	cmp	r3, r4
 800413e:	6025      	str	r5, [r4, #0]
 8004140:	bf18      	it	ne
 8004142:	6059      	strne	r1, [r3, #4]
 8004144:	6863      	ldr	r3, [r4, #4]
 8004146:	bf08      	it	eq
 8004148:	f8c8 1000 	streq.w	r1, [r8]
 800414c:	5162      	str	r2, [r4, r5]
 800414e:	604b      	str	r3, [r1, #4]
 8004150:	4630      	mov	r0, r6
 8004152:	f000 f82f 	bl	80041b4 <__malloc_unlock>
 8004156:	f104 000b 	add.w	r0, r4, #11
 800415a:	1d23      	adds	r3, r4, #4
 800415c:	f020 0007 	bic.w	r0, r0, #7
 8004160:	1ac2      	subs	r2, r0, r3
 8004162:	bf1c      	itt	ne
 8004164:	1a1b      	subne	r3, r3, r0
 8004166:	50a3      	strne	r3, [r4, r2]
 8004168:	e7af      	b.n	80040ca <_malloc_r+0x22>
 800416a:	6862      	ldr	r2, [r4, #4]
 800416c:	42a3      	cmp	r3, r4
 800416e:	bf0c      	ite	eq
 8004170:	f8c8 2000 	streq.w	r2, [r8]
 8004174:	605a      	strne	r2, [r3, #4]
 8004176:	e7eb      	b.n	8004150 <_malloc_r+0xa8>
 8004178:	4623      	mov	r3, r4
 800417a:	6864      	ldr	r4, [r4, #4]
 800417c:	e7ae      	b.n	80040dc <_malloc_r+0x34>
 800417e:	463c      	mov	r4, r7
 8004180:	687f      	ldr	r7, [r7, #4]
 8004182:	e7b6      	b.n	80040f2 <_malloc_r+0x4a>
 8004184:	461a      	mov	r2, r3
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	42a3      	cmp	r3, r4
 800418a:	d1fb      	bne.n	8004184 <_malloc_r+0xdc>
 800418c:	2300      	movs	r3, #0
 800418e:	6053      	str	r3, [r2, #4]
 8004190:	e7de      	b.n	8004150 <_malloc_r+0xa8>
 8004192:	230c      	movs	r3, #12
 8004194:	4630      	mov	r0, r6
 8004196:	6033      	str	r3, [r6, #0]
 8004198:	f000 f80c 	bl	80041b4 <__malloc_unlock>
 800419c:	e794      	b.n	80040c8 <_malloc_r+0x20>
 800419e:	6005      	str	r5, [r0, #0]
 80041a0:	e7d6      	b.n	8004150 <_malloc_r+0xa8>
 80041a2:	bf00      	nop
 80041a4:	20000368 	.word	0x20000368

080041a8 <__malloc_lock>:
 80041a8:	4801      	ldr	r0, [pc, #4]	@ (80041b0 <__malloc_lock+0x8>)
 80041aa:	f7ff bf10 	b.w	8003fce <__retarget_lock_acquire_recursive>
 80041ae:	bf00      	nop
 80041b0:	20000360 	.word	0x20000360

080041b4 <__malloc_unlock>:
 80041b4:	4801      	ldr	r0, [pc, #4]	@ (80041bc <__malloc_unlock+0x8>)
 80041b6:	f7ff bf0b 	b.w	8003fd0 <__retarget_lock_release_recursive>
 80041ba:	bf00      	nop
 80041bc:	20000360 	.word	0x20000360

080041c0 <__ssputs_r>:
 80041c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041c4:	461f      	mov	r7, r3
 80041c6:	688e      	ldr	r6, [r1, #8]
 80041c8:	4682      	mov	sl, r0
 80041ca:	42be      	cmp	r6, r7
 80041cc:	460c      	mov	r4, r1
 80041ce:	4690      	mov	r8, r2
 80041d0:	680b      	ldr	r3, [r1, #0]
 80041d2:	d82d      	bhi.n	8004230 <__ssputs_r+0x70>
 80041d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80041d8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80041dc:	d026      	beq.n	800422c <__ssputs_r+0x6c>
 80041de:	6965      	ldr	r5, [r4, #20]
 80041e0:	6909      	ldr	r1, [r1, #16]
 80041e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80041e6:	eba3 0901 	sub.w	r9, r3, r1
 80041ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80041ee:	1c7b      	adds	r3, r7, #1
 80041f0:	444b      	add	r3, r9
 80041f2:	106d      	asrs	r5, r5, #1
 80041f4:	429d      	cmp	r5, r3
 80041f6:	bf38      	it	cc
 80041f8:	461d      	movcc	r5, r3
 80041fa:	0553      	lsls	r3, r2, #21
 80041fc:	d527      	bpl.n	800424e <__ssputs_r+0x8e>
 80041fe:	4629      	mov	r1, r5
 8004200:	f7ff ff52 	bl	80040a8 <_malloc_r>
 8004204:	4606      	mov	r6, r0
 8004206:	b360      	cbz	r0, 8004262 <__ssputs_r+0xa2>
 8004208:	464a      	mov	r2, r9
 800420a:	6921      	ldr	r1, [r4, #16]
 800420c:	f000 fd76 	bl	8004cfc <memcpy>
 8004210:	89a3      	ldrh	r3, [r4, #12]
 8004212:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004216:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800421a:	81a3      	strh	r3, [r4, #12]
 800421c:	6126      	str	r6, [r4, #16]
 800421e:	444e      	add	r6, r9
 8004220:	6026      	str	r6, [r4, #0]
 8004222:	463e      	mov	r6, r7
 8004224:	6165      	str	r5, [r4, #20]
 8004226:	eba5 0509 	sub.w	r5, r5, r9
 800422a:	60a5      	str	r5, [r4, #8]
 800422c:	42be      	cmp	r6, r7
 800422e:	d900      	bls.n	8004232 <__ssputs_r+0x72>
 8004230:	463e      	mov	r6, r7
 8004232:	4632      	mov	r2, r6
 8004234:	4641      	mov	r1, r8
 8004236:	6820      	ldr	r0, [r4, #0]
 8004238:	f000 fd28 	bl	8004c8c <memmove>
 800423c:	2000      	movs	r0, #0
 800423e:	68a3      	ldr	r3, [r4, #8]
 8004240:	1b9b      	subs	r3, r3, r6
 8004242:	60a3      	str	r3, [r4, #8]
 8004244:	6823      	ldr	r3, [r4, #0]
 8004246:	4433      	add	r3, r6
 8004248:	6023      	str	r3, [r4, #0]
 800424a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800424e:	462a      	mov	r2, r5
 8004250:	f000 fd62 	bl	8004d18 <_realloc_r>
 8004254:	4606      	mov	r6, r0
 8004256:	2800      	cmp	r0, #0
 8004258:	d1e0      	bne.n	800421c <__ssputs_r+0x5c>
 800425a:	4650      	mov	r0, sl
 800425c:	6921      	ldr	r1, [r4, #16]
 800425e:	f7ff feb9 	bl	8003fd4 <_free_r>
 8004262:	230c      	movs	r3, #12
 8004264:	f8ca 3000 	str.w	r3, [sl]
 8004268:	89a3      	ldrh	r3, [r4, #12]
 800426a:	f04f 30ff 	mov.w	r0, #4294967295
 800426e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004272:	81a3      	strh	r3, [r4, #12]
 8004274:	e7e9      	b.n	800424a <__ssputs_r+0x8a>
	...

08004278 <_svfiprintf_r>:
 8004278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800427c:	4698      	mov	r8, r3
 800427e:	898b      	ldrh	r3, [r1, #12]
 8004280:	4607      	mov	r7, r0
 8004282:	061b      	lsls	r3, r3, #24
 8004284:	460d      	mov	r5, r1
 8004286:	4614      	mov	r4, r2
 8004288:	b09d      	sub	sp, #116	@ 0x74
 800428a:	d510      	bpl.n	80042ae <_svfiprintf_r+0x36>
 800428c:	690b      	ldr	r3, [r1, #16]
 800428e:	b973      	cbnz	r3, 80042ae <_svfiprintf_r+0x36>
 8004290:	2140      	movs	r1, #64	@ 0x40
 8004292:	f7ff ff09 	bl	80040a8 <_malloc_r>
 8004296:	6028      	str	r0, [r5, #0]
 8004298:	6128      	str	r0, [r5, #16]
 800429a:	b930      	cbnz	r0, 80042aa <_svfiprintf_r+0x32>
 800429c:	230c      	movs	r3, #12
 800429e:	603b      	str	r3, [r7, #0]
 80042a0:	f04f 30ff 	mov.w	r0, #4294967295
 80042a4:	b01d      	add	sp, #116	@ 0x74
 80042a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042aa:	2340      	movs	r3, #64	@ 0x40
 80042ac:	616b      	str	r3, [r5, #20]
 80042ae:	2300      	movs	r3, #0
 80042b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80042b2:	2320      	movs	r3, #32
 80042b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80042b8:	2330      	movs	r3, #48	@ 0x30
 80042ba:	f04f 0901 	mov.w	r9, #1
 80042be:	f8cd 800c 	str.w	r8, [sp, #12]
 80042c2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800445c <_svfiprintf_r+0x1e4>
 80042c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80042ca:	4623      	mov	r3, r4
 80042cc:	469a      	mov	sl, r3
 80042ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042d2:	b10a      	cbz	r2, 80042d8 <_svfiprintf_r+0x60>
 80042d4:	2a25      	cmp	r2, #37	@ 0x25
 80042d6:	d1f9      	bne.n	80042cc <_svfiprintf_r+0x54>
 80042d8:	ebba 0b04 	subs.w	fp, sl, r4
 80042dc:	d00b      	beq.n	80042f6 <_svfiprintf_r+0x7e>
 80042de:	465b      	mov	r3, fp
 80042e0:	4622      	mov	r2, r4
 80042e2:	4629      	mov	r1, r5
 80042e4:	4638      	mov	r0, r7
 80042e6:	f7ff ff6b 	bl	80041c0 <__ssputs_r>
 80042ea:	3001      	adds	r0, #1
 80042ec:	f000 80a7 	beq.w	800443e <_svfiprintf_r+0x1c6>
 80042f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80042f2:	445a      	add	r2, fp
 80042f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80042f6:	f89a 3000 	ldrb.w	r3, [sl]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f000 809f 	beq.w	800443e <_svfiprintf_r+0x1c6>
 8004300:	2300      	movs	r3, #0
 8004302:	f04f 32ff 	mov.w	r2, #4294967295
 8004306:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800430a:	f10a 0a01 	add.w	sl, sl, #1
 800430e:	9304      	str	r3, [sp, #16]
 8004310:	9307      	str	r3, [sp, #28]
 8004312:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004316:	931a      	str	r3, [sp, #104]	@ 0x68
 8004318:	4654      	mov	r4, sl
 800431a:	2205      	movs	r2, #5
 800431c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004320:	484e      	ldr	r0, [pc, #312]	@ (800445c <_svfiprintf_r+0x1e4>)
 8004322:	f000 fcdd 	bl	8004ce0 <memchr>
 8004326:	9a04      	ldr	r2, [sp, #16]
 8004328:	b9d8      	cbnz	r0, 8004362 <_svfiprintf_r+0xea>
 800432a:	06d0      	lsls	r0, r2, #27
 800432c:	bf44      	itt	mi
 800432e:	2320      	movmi	r3, #32
 8004330:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004334:	0711      	lsls	r1, r2, #28
 8004336:	bf44      	itt	mi
 8004338:	232b      	movmi	r3, #43	@ 0x2b
 800433a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800433e:	f89a 3000 	ldrb.w	r3, [sl]
 8004342:	2b2a      	cmp	r3, #42	@ 0x2a
 8004344:	d015      	beq.n	8004372 <_svfiprintf_r+0xfa>
 8004346:	4654      	mov	r4, sl
 8004348:	2000      	movs	r0, #0
 800434a:	f04f 0c0a 	mov.w	ip, #10
 800434e:	9a07      	ldr	r2, [sp, #28]
 8004350:	4621      	mov	r1, r4
 8004352:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004356:	3b30      	subs	r3, #48	@ 0x30
 8004358:	2b09      	cmp	r3, #9
 800435a:	d94b      	bls.n	80043f4 <_svfiprintf_r+0x17c>
 800435c:	b1b0      	cbz	r0, 800438c <_svfiprintf_r+0x114>
 800435e:	9207      	str	r2, [sp, #28]
 8004360:	e014      	b.n	800438c <_svfiprintf_r+0x114>
 8004362:	eba0 0308 	sub.w	r3, r0, r8
 8004366:	fa09 f303 	lsl.w	r3, r9, r3
 800436a:	4313      	orrs	r3, r2
 800436c:	46a2      	mov	sl, r4
 800436e:	9304      	str	r3, [sp, #16]
 8004370:	e7d2      	b.n	8004318 <_svfiprintf_r+0xa0>
 8004372:	9b03      	ldr	r3, [sp, #12]
 8004374:	1d19      	adds	r1, r3, #4
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	9103      	str	r1, [sp, #12]
 800437a:	2b00      	cmp	r3, #0
 800437c:	bfbb      	ittet	lt
 800437e:	425b      	neglt	r3, r3
 8004380:	f042 0202 	orrlt.w	r2, r2, #2
 8004384:	9307      	strge	r3, [sp, #28]
 8004386:	9307      	strlt	r3, [sp, #28]
 8004388:	bfb8      	it	lt
 800438a:	9204      	strlt	r2, [sp, #16]
 800438c:	7823      	ldrb	r3, [r4, #0]
 800438e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004390:	d10a      	bne.n	80043a8 <_svfiprintf_r+0x130>
 8004392:	7863      	ldrb	r3, [r4, #1]
 8004394:	2b2a      	cmp	r3, #42	@ 0x2a
 8004396:	d132      	bne.n	80043fe <_svfiprintf_r+0x186>
 8004398:	9b03      	ldr	r3, [sp, #12]
 800439a:	3402      	adds	r4, #2
 800439c:	1d1a      	adds	r2, r3, #4
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	9203      	str	r2, [sp, #12]
 80043a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80043a6:	9305      	str	r3, [sp, #20]
 80043a8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004460 <_svfiprintf_r+0x1e8>
 80043ac:	2203      	movs	r2, #3
 80043ae:	4650      	mov	r0, sl
 80043b0:	7821      	ldrb	r1, [r4, #0]
 80043b2:	f000 fc95 	bl	8004ce0 <memchr>
 80043b6:	b138      	cbz	r0, 80043c8 <_svfiprintf_r+0x150>
 80043b8:	2240      	movs	r2, #64	@ 0x40
 80043ba:	9b04      	ldr	r3, [sp, #16]
 80043bc:	eba0 000a 	sub.w	r0, r0, sl
 80043c0:	4082      	lsls	r2, r0
 80043c2:	4313      	orrs	r3, r2
 80043c4:	3401      	adds	r4, #1
 80043c6:	9304      	str	r3, [sp, #16]
 80043c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043cc:	2206      	movs	r2, #6
 80043ce:	4825      	ldr	r0, [pc, #148]	@ (8004464 <_svfiprintf_r+0x1ec>)
 80043d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80043d4:	f000 fc84 	bl	8004ce0 <memchr>
 80043d8:	2800      	cmp	r0, #0
 80043da:	d036      	beq.n	800444a <_svfiprintf_r+0x1d2>
 80043dc:	4b22      	ldr	r3, [pc, #136]	@ (8004468 <_svfiprintf_r+0x1f0>)
 80043de:	bb1b      	cbnz	r3, 8004428 <_svfiprintf_r+0x1b0>
 80043e0:	9b03      	ldr	r3, [sp, #12]
 80043e2:	3307      	adds	r3, #7
 80043e4:	f023 0307 	bic.w	r3, r3, #7
 80043e8:	3308      	adds	r3, #8
 80043ea:	9303      	str	r3, [sp, #12]
 80043ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043ee:	4433      	add	r3, r6
 80043f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80043f2:	e76a      	b.n	80042ca <_svfiprintf_r+0x52>
 80043f4:	460c      	mov	r4, r1
 80043f6:	2001      	movs	r0, #1
 80043f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80043fc:	e7a8      	b.n	8004350 <_svfiprintf_r+0xd8>
 80043fe:	2300      	movs	r3, #0
 8004400:	f04f 0c0a 	mov.w	ip, #10
 8004404:	4619      	mov	r1, r3
 8004406:	3401      	adds	r4, #1
 8004408:	9305      	str	r3, [sp, #20]
 800440a:	4620      	mov	r0, r4
 800440c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004410:	3a30      	subs	r2, #48	@ 0x30
 8004412:	2a09      	cmp	r2, #9
 8004414:	d903      	bls.n	800441e <_svfiprintf_r+0x1a6>
 8004416:	2b00      	cmp	r3, #0
 8004418:	d0c6      	beq.n	80043a8 <_svfiprintf_r+0x130>
 800441a:	9105      	str	r1, [sp, #20]
 800441c:	e7c4      	b.n	80043a8 <_svfiprintf_r+0x130>
 800441e:	4604      	mov	r4, r0
 8004420:	2301      	movs	r3, #1
 8004422:	fb0c 2101 	mla	r1, ip, r1, r2
 8004426:	e7f0      	b.n	800440a <_svfiprintf_r+0x192>
 8004428:	ab03      	add	r3, sp, #12
 800442a:	9300      	str	r3, [sp, #0]
 800442c:	462a      	mov	r2, r5
 800442e:	4638      	mov	r0, r7
 8004430:	4b0e      	ldr	r3, [pc, #56]	@ (800446c <_svfiprintf_r+0x1f4>)
 8004432:	a904      	add	r1, sp, #16
 8004434:	f3af 8000 	nop.w
 8004438:	1c42      	adds	r2, r0, #1
 800443a:	4606      	mov	r6, r0
 800443c:	d1d6      	bne.n	80043ec <_svfiprintf_r+0x174>
 800443e:	89ab      	ldrh	r3, [r5, #12]
 8004440:	065b      	lsls	r3, r3, #25
 8004442:	f53f af2d 	bmi.w	80042a0 <_svfiprintf_r+0x28>
 8004446:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004448:	e72c      	b.n	80042a4 <_svfiprintf_r+0x2c>
 800444a:	ab03      	add	r3, sp, #12
 800444c:	9300      	str	r3, [sp, #0]
 800444e:	462a      	mov	r2, r5
 8004450:	4638      	mov	r0, r7
 8004452:	4b06      	ldr	r3, [pc, #24]	@ (800446c <_svfiprintf_r+0x1f4>)
 8004454:	a904      	add	r1, sp, #16
 8004456:	f000 f9bd 	bl	80047d4 <_printf_i>
 800445a:	e7ed      	b.n	8004438 <_svfiprintf_r+0x1c0>
 800445c:	080051e2 	.word	0x080051e2
 8004460:	080051e8 	.word	0x080051e8
 8004464:	080051ec 	.word	0x080051ec
 8004468:	00000000 	.word	0x00000000
 800446c:	080041c1 	.word	0x080041c1

08004470 <__sfputc_r>:
 8004470:	6893      	ldr	r3, [r2, #8]
 8004472:	b410      	push	{r4}
 8004474:	3b01      	subs	r3, #1
 8004476:	2b00      	cmp	r3, #0
 8004478:	6093      	str	r3, [r2, #8]
 800447a:	da07      	bge.n	800448c <__sfputc_r+0x1c>
 800447c:	6994      	ldr	r4, [r2, #24]
 800447e:	42a3      	cmp	r3, r4
 8004480:	db01      	blt.n	8004486 <__sfputc_r+0x16>
 8004482:	290a      	cmp	r1, #10
 8004484:	d102      	bne.n	800448c <__sfputc_r+0x1c>
 8004486:	bc10      	pop	{r4}
 8004488:	f000 bb6c 	b.w	8004b64 <__swbuf_r>
 800448c:	6813      	ldr	r3, [r2, #0]
 800448e:	1c58      	adds	r0, r3, #1
 8004490:	6010      	str	r0, [r2, #0]
 8004492:	7019      	strb	r1, [r3, #0]
 8004494:	4608      	mov	r0, r1
 8004496:	bc10      	pop	{r4}
 8004498:	4770      	bx	lr

0800449a <__sfputs_r>:
 800449a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800449c:	4606      	mov	r6, r0
 800449e:	460f      	mov	r7, r1
 80044a0:	4614      	mov	r4, r2
 80044a2:	18d5      	adds	r5, r2, r3
 80044a4:	42ac      	cmp	r4, r5
 80044a6:	d101      	bne.n	80044ac <__sfputs_r+0x12>
 80044a8:	2000      	movs	r0, #0
 80044aa:	e007      	b.n	80044bc <__sfputs_r+0x22>
 80044ac:	463a      	mov	r2, r7
 80044ae:	4630      	mov	r0, r6
 80044b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044b4:	f7ff ffdc 	bl	8004470 <__sfputc_r>
 80044b8:	1c43      	adds	r3, r0, #1
 80044ba:	d1f3      	bne.n	80044a4 <__sfputs_r+0xa>
 80044bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080044c0 <_vfiprintf_r>:
 80044c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044c4:	460d      	mov	r5, r1
 80044c6:	4614      	mov	r4, r2
 80044c8:	4698      	mov	r8, r3
 80044ca:	4606      	mov	r6, r0
 80044cc:	b09d      	sub	sp, #116	@ 0x74
 80044ce:	b118      	cbz	r0, 80044d8 <_vfiprintf_r+0x18>
 80044d0:	6a03      	ldr	r3, [r0, #32]
 80044d2:	b90b      	cbnz	r3, 80044d8 <_vfiprintf_r+0x18>
 80044d4:	f7ff fc56 	bl	8003d84 <__sinit>
 80044d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80044da:	07d9      	lsls	r1, r3, #31
 80044dc:	d405      	bmi.n	80044ea <_vfiprintf_r+0x2a>
 80044de:	89ab      	ldrh	r3, [r5, #12]
 80044e0:	059a      	lsls	r2, r3, #22
 80044e2:	d402      	bmi.n	80044ea <_vfiprintf_r+0x2a>
 80044e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80044e6:	f7ff fd72 	bl	8003fce <__retarget_lock_acquire_recursive>
 80044ea:	89ab      	ldrh	r3, [r5, #12]
 80044ec:	071b      	lsls	r3, r3, #28
 80044ee:	d501      	bpl.n	80044f4 <_vfiprintf_r+0x34>
 80044f0:	692b      	ldr	r3, [r5, #16]
 80044f2:	b99b      	cbnz	r3, 800451c <_vfiprintf_r+0x5c>
 80044f4:	4629      	mov	r1, r5
 80044f6:	4630      	mov	r0, r6
 80044f8:	f000 fb72 	bl	8004be0 <__swsetup_r>
 80044fc:	b170      	cbz	r0, 800451c <_vfiprintf_r+0x5c>
 80044fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004500:	07dc      	lsls	r4, r3, #31
 8004502:	d504      	bpl.n	800450e <_vfiprintf_r+0x4e>
 8004504:	f04f 30ff 	mov.w	r0, #4294967295
 8004508:	b01d      	add	sp, #116	@ 0x74
 800450a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800450e:	89ab      	ldrh	r3, [r5, #12]
 8004510:	0598      	lsls	r0, r3, #22
 8004512:	d4f7      	bmi.n	8004504 <_vfiprintf_r+0x44>
 8004514:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004516:	f7ff fd5b 	bl	8003fd0 <__retarget_lock_release_recursive>
 800451a:	e7f3      	b.n	8004504 <_vfiprintf_r+0x44>
 800451c:	2300      	movs	r3, #0
 800451e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004520:	2320      	movs	r3, #32
 8004522:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004526:	2330      	movs	r3, #48	@ 0x30
 8004528:	f04f 0901 	mov.w	r9, #1
 800452c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004530:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80046dc <_vfiprintf_r+0x21c>
 8004534:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004538:	4623      	mov	r3, r4
 800453a:	469a      	mov	sl, r3
 800453c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004540:	b10a      	cbz	r2, 8004546 <_vfiprintf_r+0x86>
 8004542:	2a25      	cmp	r2, #37	@ 0x25
 8004544:	d1f9      	bne.n	800453a <_vfiprintf_r+0x7a>
 8004546:	ebba 0b04 	subs.w	fp, sl, r4
 800454a:	d00b      	beq.n	8004564 <_vfiprintf_r+0xa4>
 800454c:	465b      	mov	r3, fp
 800454e:	4622      	mov	r2, r4
 8004550:	4629      	mov	r1, r5
 8004552:	4630      	mov	r0, r6
 8004554:	f7ff ffa1 	bl	800449a <__sfputs_r>
 8004558:	3001      	adds	r0, #1
 800455a:	f000 80a7 	beq.w	80046ac <_vfiprintf_r+0x1ec>
 800455e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004560:	445a      	add	r2, fp
 8004562:	9209      	str	r2, [sp, #36]	@ 0x24
 8004564:	f89a 3000 	ldrb.w	r3, [sl]
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 809f 	beq.w	80046ac <_vfiprintf_r+0x1ec>
 800456e:	2300      	movs	r3, #0
 8004570:	f04f 32ff 	mov.w	r2, #4294967295
 8004574:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004578:	f10a 0a01 	add.w	sl, sl, #1
 800457c:	9304      	str	r3, [sp, #16]
 800457e:	9307      	str	r3, [sp, #28]
 8004580:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004584:	931a      	str	r3, [sp, #104]	@ 0x68
 8004586:	4654      	mov	r4, sl
 8004588:	2205      	movs	r2, #5
 800458a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800458e:	4853      	ldr	r0, [pc, #332]	@ (80046dc <_vfiprintf_r+0x21c>)
 8004590:	f000 fba6 	bl	8004ce0 <memchr>
 8004594:	9a04      	ldr	r2, [sp, #16]
 8004596:	b9d8      	cbnz	r0, 80045d0 <_vfiprintf_r+0x110>
 8004598:	06d1      	lsls	r1, r2, #27
 800459a:	bf44      	itt	mi
 800459c:	2320      	movmi	r3, #32
 800459e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80045a2:	0713      	lsls	r3, r2, #28
 80045a4:	bf44      	itt	mi
 80045a6:	232b      	movmi	r3, #43	@ 0x2b
 80045a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80045ac:	f89a 3000 	ldrb.w	r3, [sl]
 80045b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80045b2:	d015      	beq.n	80045e0 <_vfiprintf_r+0x120>
 80045b4:	4654      	mov	r4, sl
 80045b6:	2000      	movs	r0, #0
 80045b8:	f04f 0c0a 	mov.w	ip, #10
 80045bc:	9a07      	ldr	r2, [sp, #28]
 80045be:	4621      	mov	r1, r4
 80045c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045c4:	3b30      	subs	r3, #48	@ 0x30
 80045c6:	2b09      	cmp	r3, #9
 80045c8:	d94b      	bls.n	8004662 <_vfiprintf_r+0x1a2>
 80045ca:	b1b0      	cbz	r0, 80045fa <_vfiprintf_r+0x13a>
 80045cc:	9207      	str	r2, [sp, #28]
 80045ce:	e014      	b.n	80045fa <_vfiprintf_r+0x13a>
 80045d0:	eba0 0308 	sub.w	r3, r0, r8
 80045d4:	fa09 f303 	lsl.w	r3, r9, r3
 80045d8:	4313      	orrs	r3, r2
 80045da:	46a2      	mov	sl, r4
 80045dc:	9304      	str	r3, [sp, #16]
 80045de:	e7d2      	b.n	8004586 <_vfiprintf_r+0xc6>
 80045e0:	9b03      	ldr	r3, [sp, #12]
 80045e2:	1d19      	adds	r1, r3, #4
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	9103      	str	r1, [sp, #12]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	bfbb      	ittet	lt
 80045ec:	425b      	neglt	r3, r3
 80045ee:	f042 0202 	orrlt.w	r2, r2, #2
 80045f2:	9307      	strge	r3, [sp, #28]
 80045f4:	9307      	strlt	r3, [sp, #28]
 80045f6:	bfb8      	it	lt
 80045f8:	9204      	strlt	r2, [sp, #16]
 80045fa:	7823      	ldrb	r3, [r4, #0]
 80045fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80045fe:	d10a      	bne.n	8004616 <_vfiprintf_r+0x156>
 8004600:	7863      	ldrb	r3, [r4, #1]
 8004602:	2b2a      	cmp	r3, #42	@ 0x2a
 8004604:	d132      	bne.n	800466c <_vfiprintf_r+0x1ac>
 8004606:	9b03      	ldr	r3, [sp, #12]
 8004608:	3402      	adds	r4, #2
 800460a:	1d1a      	adds	r2, r3, #4
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	9203      	str	r2, [sp, #12]
 8004610:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004614:	9305      	str	r3, [sp, #20]
 8004616:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80046e0 <_vfiprintf_r+0x220>
 800461a:	2203      	movs	r2, #3
 800461c:	4650      	mov	r0, sl
 800461e:	7821      	ldrb	r1, [r4, #0]
 8004620:	f000 fb5e 	bl	8004ce0 <memchr>
 8004624:	b138      	cbz	r0, 8004636 <_vfiprintf_r+0x176>
 8004626:	2240      	movs	r2, #64	@ 0x40
 8004628:	9b04      	ldr	r3, [sp, #16]
 800462a:	eba0 000a 	sub.w	r0, r0, sl
 800462e:	4082      	lsls	r2, r0
 8004630:	4313      	orrs	r3, r2
 8004632:	3401      	adds	r4, #1
 8004634:	9304      	str	r3, [sp, #16]
 8004636:	f814 1b01 	ldrb.w	r1, [r4], #1
 800463a:	2206      	movs	r2, #6
 800463c:	4829      	ldr	r0, [pc, #164]	@ (80046e4 <_vfiprintf_r+0x224>)
 800463e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004642:	f000 fb4d 	bl	8004ce0 <memchr>
 8004646:	2800      	cmp	r0, #0
 8004648:	d03f      	beq.n	80046ca <_vfiprintf_r+0x20a>
 800464a:	4b27      	ldr	r3, [pc, #156]	@ (80046e8 <_vfiprintf_r+0x228>)
 800464c:	bb1b      	cbnz	r3, 8004696 <_vfiprintf_r+0x1d6>
 800464e:	9b03      	ldr	r3, [sp, #12]
 8004650:	3307      	adds	r3, #7
 8004652:	f023 0307 	bic.w	r3, r3, #7
 8004656:	3308      	adds	r3, #8
 8004658:	9303      	str	r3, [sp, #12]
 800465a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800465c:	443b      	add	r3, r7
 800465e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004660:	e76a      	b.n	8004538 <_vfiprintf_r+0x78>
 8004662:	460c      	mov	r4, r1
 8004664:	2001      	movs	r0, #1
 8004666:	fb0c 3202 	mla	r2, ip, r2, r3
 800466a:	e7a8      	b.n	80045be <_vfiprintf_r+0xfe>
 800466c:	2300      	movs	r3, #0
 800466e:	f04f 0c0a 	mov.w	ip, #10
 8004672:	4619      	mov	r1, r3
 8004674:	3401      	adds	r4, #1
 8004676:	9305      	str	r3, [sp, #20]
 8004678:	4620      	mov	r0, r4
 800467a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800467e:	3a30      	subs	r2, #48	@ 0x30
 8004680:	2a09      	cmp	r2, #9
 8004682:	d903      	bls.n	800468c <_vfiprintf_r+0x1cc>
 8004684:	2b00      	cmp	r3, #0
 8004686:	d0c6      	beq.n	8004616 <_vfiprintf_r+0x156>
 8004688:	9105      	str	r1, [sp, #20]
 800468a:	e7c4      	b.n	8004616 <_vfiprintf_r+0x156>
 800468c:	4604      	mov	r4, r0
 800468e:	2301      	movs	r3, #1
 8004690:	fb0c 2101 	mla	r1, ip, r1, r2
 8004694:	e7f0      	b.n	8004678 <_vfiprintf_r+0x1b8>
 8004696:	ab03      	add	r3, sp, #12
 8004698:	9300      	str	r3, [sp, #0]
 800469a:	462a      	mov	r2, r5
 800469c:	4630      	mov	r0, r6
 800469e:	4b13      	ldr	r3, [pc, #76]	@ (80046ec <_vfiprintf_r+0x22c>)
 80046a0:	a904      	add	r1, sp, #16
 80046a2:	f3af 8000 	nop.w
 80046a6:	4607      	mov	r7, r0
 80046a8:	1c78      	adds	r0, r7, #1
 80046aa:	d1d6      	bne.n	800465a <_vfiprintf_r+0x19a>
 80046ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80046ae:	07d9      	lsls	r1, r3, #31
 80046b0:	d405      	bmi.n	80046be <_vfiprintf_r+0x1fe>
 80046b2:	89ab      	ldrh	r3, [r5, #12]
 80046b4:	059a      	lsls	r2, r3, #22
 80046b6:	d402      	bmi.n	80046be <_vfiprintf_r+0x1fe>
 80046b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80046ba:	f7ff fc89 	bl	8003fd0 <__retarget_lock_release_recursive>
 80046be:	89ab      	ldrh	r3, [r5, #12]
 80046c0:	065b      	lsls	r3, r3, #25
 80046c2:	f53f af1f 	bmi.w	8004504 <_vfiprintf_r+0x44>
 80046c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80046c8:	e71e      	b.n	8004508 <_vfiprintf_r+0x48>
 80046ca:	ab03      	add	r3, sp, #12
 80046cc:	9300      	str	r3, [sp, #0]
 80046ce:	462a      	mov	r2, r5
 80046d0:	4630      	mov	r0, r6
 80046d2:	4b06      	ldr	r3, [pc, #24]	@ (80046ec <_vfiprintf_r+0x22c>)
 80046d4:	a904      	add	r1, sp, #16
 80046d6:	f000 f87d 	bl	80047d4 <_printf_i>
 80046da:	e7e4      	b.n	80046a6 <_vfiprintf_r+0x1e6>
 80046dc:	080051e2 	.word	0x080051e2
 80046e0:	080051e8 	.word	0x080051e8
 80046e4:	080051ec 	.word	0x080051ec
 80046e8:	00000000 	.word	0x00000000
 80046ec:	0800449b 	.word	0x0800449b

080046f0 <_printf_common>:
 80046f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046f4:	4616      	mov	r6, r2
 80046f6:	4698      	mov	r8, r3
 80046f8:	688a      	ldr	r2, [r1, #8]
 80046fa:	690b      	ldr	r3, [r1, #16]
 80046fc:	4607      	mov	r7, r0
 80046fe:	4293      	cmp	r3, r2
 8004700:	bfb8      	it	lt
 8004702:	4613      	movlt	r3, r2
 8004704:	6033      	str	r3, [r6, #0]
 8004706:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800470a:	460c      	mov	r4, r1
 800470c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004710:	b10a      	cbz	r2, 8004716 <_printf_common+0x26>
 8004712:	3301      	adds	r3, #1
 8004714:	6033      	str	r3, [r6, #0]
 8004716:	6823      	ldr	r3, [r4, #0]
 8004718:	0699      	lsls	r1, r3, #26
 800471a:	bf42      	ittt	mi
 800471c:	6833      	ldrmi	r3, [r6, #0]
 800471e:	3302      	addmi	r3, #2
 8004720:	6033      	strmi	r3, [r6, #0]
 8004722:	6825      	ldr	r5, [r4, #0]
 8004724:	f015 0506 	ands.w	r5, r5, #6
 8004728:	d106      	bne.n	8004738 <_printf_common+0x48>
 800472a:	f104 0a19 	add.w	sl, r4, #25
 800472e:	68e3      	ldr	r3, [r4, #12]
 8004730:	6832      	ldr	r2, [r6, #0]
 8004732:	1a9b      	subs	r3, r3, r2
 8004734:	42ab      	cmp	r3, r5
 8004736:	dc2b      	bgt.n	8004790 <_printf_common+0xa0>
 8004738:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800473c:	6822      	ldr	r2, [r4, #0]
 800473e:	3b00      	subs	r3, #0
 8004740:	bf18      	it	ne
 8004742:	2301      	movne	r3, #1
 8004744:	0692      	lsls	r2, r2, #26
 8004746:	d430      	bmi.n	80047aa <_printf_common+0xba>
 8004748:	4641      	mov	r1, r8
 800474a:	4638      	mov	r0, r7
 800474c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004750:	47c8      	blx	r9
 8004752:	3001      	adds	r0, #1
 8004754:	d023      	beq.n	800479e <_printf_common+0xae>
 8004756:	6823      	ldr	r3, [r4, #0]
 8004758:	6922      	ldr	r2, [r4, #16]
 800475a:	f003 0306 	and.w	r3, r3, #6
 800475e:	2b04      	cmp	r3, #4
 8004760:	bf14      	ite	ne
 8004762:	2500      	movne	r5, #0
 8004764:	6833      	ldreq	r3, [r6, #0]
 8004766:	f04f 0600 	mov.w	r6, #0
 800476a:	bf08      	it	eq
 800476c:	68e5      	ldreq	r5, [r4, #12]
 800476e:	f104 041a 	add.w	r4, r4, #26
 8004772:	bf08      	it	eq
 8004774:	1aed      	subeq	r5, r5, r3
 8004776:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800477a:	bf08      	it	eq
 800477c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004780:	4293      	cmp	r3, r2
 8004782:	bfc4      	itt	gt
 8004784:	1a9b      	subgt	r3, r3, r2
 8004786:	18ed      	addgt	r5, r5, r3
 8004788:	42b5      	cmp	r5, r6
 800478a:	d11a      	bne.n	80047c2 <_printf_common+0xd2>
 800478c:	2000      	movs	r0, #0
 800478e:	e008      	b.n	80047a2 <_printf_common+0xb2>
 8004790:	2301      	movs	r3, #1
 8004792:	4652      	mov	r2, sl
 8004794:	4641      	mov	r1, r8
 8004796:	4638      	mov	r0, r7
 8004798:	47c8      	blx	r9
 800479a:	3001      	adds	r0, #1
 800479c:	d103      	bne.n	80047a6 <_printf_common+0xb6>
 800479e:	f04f 30ff 	mov.w	r0, #4294967295
 80047a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047a6:	3501      	adds	r5, #1
 80047a8:	e7c1      	b.n	800472e <_printf_common+0x3e>
 80047aa:	2030      	movs	r0, #48	@ 0x30
 80047ac:	18e1      	adds	r1, r4, r3
 80047ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80047b2:	1c5a      	adds	r2, r3, #1
 80047b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80047b8:	4422      	add	r2, r4
 80047ba:	3302      	adds	r3, #2
 80047bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80047c0:	e7c2      	b.n	8004748 <_printf_common+0x58>
 80047c2:	2301      	movs	r3, #1
 80047c4:	4622      	mov	r2, r4
 80047c6:	4641      	mov	r1, r8
 80047c8:	4638      	mov	r0, r7
 80047ca:	47c8      	blx	r9
 80047cc:	3001      	adds	r0, #1
 80047ce:	d0e6      	beq.n	800479e <_printf_common+0xae>
 80047d0:	3601      	adds	r6, #1
 80047d2:	e7d9      	b.n	8004788 <_printf_common+0x98>

080047d4 <_printf_i>:
 80047d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047d8:	7e0f      	ldrb	r7, [r1, #24]
 80047da:	4691      	mov	r9, r2
 80047dc:	2f78      	cmp	r7, #120	@ 0x78
 80047de:	4680      	mov	r8, r0
 80047e0:	460c      	mov	r4, r1
 80047e2:	469a      	mov	sl, r3
 80047e4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80047e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80047ea:	d807      	bhi.n	80047fc <_printf_i+0x28>
 80047ec:	2f62      	cmp	r7, #98	@ 0x62
 80047ee:	d80a      	bhi.n	8004806 <_printf_i+0x32>
 80047f0:	2f00      	cmp	r7, #0
 80047f2:	f000 80d3 	beq.w	800499c <_printf_i+0x1c8>
 80047f6:	2f58      	cmp	r7, #88	@ 0x58
 80047f8:	f000 80ba 	beq.w	8004970 <_printf_i+0x19c>
 80047fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004800:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004804:	e03a      	b.n	800487c <_printf_i+0xa8>
 8004806:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800480a:	2b15      	cmp	r3, #21
 800480c:	d8f6      	bhi.n	80047fc <_printf_i+0x28>
 800480e:	a101      	add	r1, pc, #4	@ (adr r1, 8004814 <_printf_i+0x40>)
 8004810:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004814:	0800486d 	.word	0x0800486d
 8004818:	08004881 	.word	0x08004881
 800481c:	080047fd 	.word	0x080047fd
 8004820:	080047fd 	.word	0x080047fd
 8004824:	080047fd 	.word	0x080047fd
 8004828:	080047fd 	.word	0x080047fd
 800482c:	08004881 	.word	0x08004881
 8004830:	080047fd 	.word	0x080047fd
 8004834:	080047fd 	.word	0x080047fd
 8004838:	080047fd 	.word	0x080047fd
 800483c:	080047fd 	.word	0x080047fd
 8004840:	08004983 	.word	0x08004983
 8004844:	080048ab 	.word	0x080048ab
 8004848:	0800493d 	.word	0x0800493d
 800484c:	080047fd 	.word	0x080047fd
 8004850:	080047fd 	.word	0x080047fd
 8004854:	080049a5 	.word	0x080049a5
 8004858:	080047fd 	.word	0x080047fd
 800485c:	080048ab 	.word	0x080048ab
 8004860:	080047fd 	.word	0x080047fd
 8004864:	080047fd 	.word	0x080047fd
 8004868:	08004945 	.word	0x08004945
 800486c:	6833      	ldr	r3, [r6, #0]
 800486e:	1d1a      	adds	r2, r3, #4
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	6032      	str	r2, [r6, #0]
 8004874:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004878:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800487c:	2301      	movs	r3, #1
 800487e:	e09e      	b.n	80049be <_printf_i+0x1ea>
 8004880:	6833      	ldr	r3, [r6, #0]
 8004882:	6820      	ldr	r0, [r4, #0]
 8004884:	1d19      	adds	r1, r3, #4
 8004886:	6031      	str	r1, [r6, #0]
 8004888:	0606      	lsls	r6, r0, #24
 800488a:	d501      	bpl.n	8004890 <_printf_i+0xbc>
 800488c:	681d      	ldr	r5, [r3, #0]
 800488e:	e003      	b.n	8004898 <_printf_i+0xc4>
 8004890:	0645      	lsls	r5, r0, #25
 8004892:	d5fb      	bpl.n	800488c <_printf_i+0xb8>
 8004894:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004898:	2d00      	cmp	r5, #0
 800489a:	da03      	bge.n	80048a4 <_printf_i+0xd0>
 800489c:	232d      	movs	r3, #45	@ 0x2d
 800489e:	426d      	negs	r5, r5
 80048a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048a4:	230a      	movs	r3, #10
 80048a6:	4859      	ldr	r0, [pc, #356]	@ (8004a0c <_printf_i+0x238>)
 80048a8:	e011      	b.n	80048ce <_printf_i+0xfa>
 80048aa:	6821      	ldr	r1, [r4, #0]
 80048ac:	6833      	ldr	r3, [r6, #0]
 80048ae:	0608      	lsls	r0, r1, #24
 80048b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80048b4:	d402      	bmi.n	80048bc <_printf_i+0xe8>
 80048b6:	0649      	lsls	r1, r1, #25
 80048b8:	bf48      	it	mi
 80048ba:	b2ad      	uxthmi	r5, r5
 80048bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80048be:	6033      	str	r3, [r6, #0]
 80048c0:	bf14      	ite	ne
 80048c2:	230a      	movne	r3, #10
 80048c4:	2308      	moveq	r3, #8
 80048c6:	4851      	ldr	r0, [pc, #324]	@ (8004a0c <_printf_i+0x238>)
 80048c8:	2100      	movs	r1, #0
 80048ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80048ce:	6866      	ldr	r6, [r4, #4]
 80048d0:	2e00      	cmp	r6, #0
 80048d2:	bfa8      	it	ge
 80048d4:	6821      	ldrge	r1, [r4, #0]
 80048d6:	60a6      	str	r6, [r4, #8]
 80048d8:	bfa4      	itt	ge
 80048da:	f021 0104 	bicge.w	r1, r1, #4
 80048de:	6021      	strge	r1, [r4, #0]
 80048e0:	b90d      	cbnz	r5, 80048e6 <_printf_i+0x112>
 80048e2:	2e00      	cmp	r6, #0
 80048e4:	d04b      	beq.n	800497e <_printf_i+0x1aa>
 80048e6:	4616      	mov	r6, r2
 80048e8:	fbb5 f1f3 	udiv	r1, r5, r3
 80048ec:	fb03 5711 	mls	r7, r3, r1, r5
 80048f0:	5dc7      	ldrb	r7, [r0, r7]
 80048f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80048f6:	462f      	mov	r7, r5
 80048f8:	42bb      	cmp	r3, r7
 80048fa:	460d      	mov	r5, r1
 80048fc:	d9f4      	bls.n	80048e8 <_printf_i+0x114>
 80048fe:	2b08      	cmp	r3, #8
 8004900:	d10b      	bne.n	800491a <_printf_i+0x146>
 8004902:	6823      	ldr	r3, [r4, #0]
 8004904:	07df      	lsls	r7, r3, #31
 8004906:	d508      	bpl.n	800491a <_printf_i+0x146>
 8004908:	6923      	ldr	r3, [r4, #16]
 800490a:	6861      	ldr	r1, [r4, #4]
 800490c:	4299      	cmp	r1, r3
 800490e:	bfde      	ittt	le
 8004910:	2330      	movle	r3, #48	@ 0x30
 8004912:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004916:	f106 36ff 	addle.w	r6, r6, #4294967295
 800491a:	1b92      	subs	r2, r2, r6
 800491c:	6122      	str	r2, [r4, #16]
 800491e:	464b      	mov	r3, r9
 8004920:	4621      	mov	r1, r4
 8004922:	4640      	mov	r0, r8
 8004924:	f8cd a000 	str.w	sl, [sp]
 8004928:	aa03      	add	r2, sp, #12
 800492a:	f7ff fee1 	bl	80046f0 <_printf_common>
 800492e:	3001      	adds	r0, #1
 8004930:	d14a      	bne.n	80049c8 <_printf_i+0x1f4>
 8004932:	f04f 30ff 	mov.w	r0, #4294967295
 8004936:	b004      	add	sp, #16
 8004938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800493c:	6823      	ldr	r3, [r4, #0]
 800493e:	f043 0320 	orr.w	r3, r3, #32
 8004942:	6023      	str	r3, [r4, #0]
 8004944:	2778      	movs	r7, #120	@ 0x78
 8004946:	4832      	ldr	r0, [pc, #200]	@ (8004a10 <_printf_i+0x23c>)
 8004948:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800494c:	6823      	ldr	r3, [r4, #0]
 800494e:	6831      	ldr	r1, [r6, #0]
 8004950:	061f      	lsls	r7, r3, #24
 8004952:	f851 5b04 	ldr.w	r5, [r1], #4
 8004956:	d402      	bmi.n	800495e <_printf_i+0x18a>
 8004958:	065f      	lsls	r7, r3, #25
 800495a:	bf48      	it	mi
 800495c:	b2ad      	uxthmi	r5, r5
 800495e:	6031      	str	r1, [r6, #0]
 8004960:	07d9      	lsls	r1, r3, #31
 8004962:	bf44      	itt	mi
 8004964:	f043 0320 	orrmi.w	r3, r3, #32
 8004968:	6023      	strmi	r3, [r4, #0]
 800496a:	b11d      	cbz	r5, 8004974 <_printf_i+0x1a0>
 800496c:	2310      	movs	r3, #16
 800496e:	e7ab      	b.n	80048c8 <_printf_i+0xf4>
 8004970:	4826      	ldr	r0, [pc, #152]	@ (8004a0c <_printf_i+0x238>)
 8004972:	e7e9      	b.n	8004948 <_printf_i+0x174>
 8004974:	6823      	ldr	r3, [r4, #0]
 8004976:	f023 0320 	bic.w	r3, r3, #32
 800497a:	6023      	str	r3, [r4, #0]
 800497c:	e7f6      	b.n	800496c <_printf_i+0x198>
 800497e:	4616      	mov	r6, r2
 8004980:	e7bd      	b.n	80048fe <_printf_i+0x12a>
 8004982:	6833      	ldr	r3, [r6, #0]
 8004984:	6825      	ldr	r5, [r4, #0]
 8004986:	1d18      	adds	r0, r3, #4
 8004988:	6961      	ldr	r1, [r4, #20]
 800498a:	6030      	str	r0, [r6, #0]
 800498c:	062e      	lsls	r6, r5, #24
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	d501      	bpl.n	8004996 <_printf_i+0x1c2>
 8004992:	6019      	str	r1, [r3, #0]
 8004994:	e002      	b.n	800499c <_printf_i+0x1c8>
 8004996:	0668      	lsls	r0, r5, #25
 8004998:	d5fb      	bpl.n	8004992 <_printf_i+0x1be>
 800499a:	8019      	strh	r1, [r3, #0]
 800499c:	2300      	movs	r3, #0
 800499e:	4616      	mov	r6, r2
 80049a0:	6123      	str	r3, [r4, #16]
 80049a2:	e7bc      	b.n	800491e <_printf_i+0x14a>
 80049a4:	6833      	ldr	r3, [r6, #0]
 80049a6:	2100      	movs	r1, #0
 80049a8:	1d1a      	adds	r2, r3, #4
 80049aa:	6032      	str	r2, [r6, #0]
 80049ac:	681e      	ldr	r6, [r3, #0]
 80049ae:	6862      	ldr	r2, [r4, #4]
 80049b0:	4630      	mov	r0, r6
 80049b2:	f000 f995 	bl	8004ce0 <memchr>
 80049b6:	b108      	cbz	r0, 80049bc <_printf_i+0x1e8>
 80049b8:	1b80      	subs	r0, r0, r6
 80049ba:	6060      	str	r0, [r4, #4]
 80049bc:	6863      	ldr	r3, [r4, #4]
 80049be:	6123      	str	r3, [r4, #16]
 80049c0:	2300      	movs	r3, #0
 80049c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80049c6:	e7aa      	b.n	800491e <_printf_i+0x14a>
 80049c8:	4632      	mov	r2, r6
 80049ca:	4649      	mov	r1, r9
 80049cc:	4640      	mov	r0, r8
 80049ce:	6923      	ldr	r3, [r4, #16]
 80049d0:	47d0      	blx	sl
 80049d2:	3001      	adds	r0, #1
 80049d4:	d0ad      	beq.n	8004932 <_printf_i+0x15e>
 80049d6:	6823      	ldr	r3, [r4, #0]
 80049d8:	079b      	lsls	r3, r3, #30
 80049da:	d413      	bmi.n	8004a04 <_printf_i+0x230>
 80049dc:	68e0      	ldr	r0, [r4, #12]
 80049de:	9b03      	ldr	r3, [sp, #12]
 80049e0:	4298      	cmp	r0, r3
 80049e2:	bfb8      	it	lt
 80049e4:	4618      	movlt	r0, r3
 80049e6:	e7a6      	b.n	8004936 <_printf_i+0x162>
 80049e8:	2301      	movs	r3, #1
 80049ea:	4632      	mov	r2, r6
 80049ec:	4649      	mov	r1, r9
 80049ee:	4640      	mov	r0, r8
 80049f0:	47d0      	blx	sl
 80049f2:	3001      	adds	r0, #1
 80049f4:	d09d      	beq.n	8004932 <_printf_i+0x15e>
 80049f6:	3501      	adds	r5, #1
 80049f8:	68e3      	ldr	r3, [r4, #12]
 80049fa:	9903      	ldr	r1, [sp, #12]
 80049fc:	1a5b      	subs	r3, r3, r1
 80049fe:	42ab      	cmp	r3, r5
 8004a00:	dcf2      	bgt.n	80049e8 <_printf_i+0x214>
 8004a02:	e7eb      	b.n	80049dc <_printf_i+0x208>
 8004a04:	2500      	movs	r5, #0
 8004a06:	f104 0619 	add.w	r6, r4, #25
 8004a0a:	e7f5      	b.n	80049f8 <_printf_i+0x224>
 8004a0c:	080051f3 	.word	0x080051f3
 8004a10:	08005204 	.word	0x08005204

08004a14 <__sflush_r>:
 8004a14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a1a:	0716      	lsls	r6, r2, #28
 8004a1c:	4605      	mov	r5, r0
 8004a1e:	460c      	mov	r4, r1
 8004a20:	d454      	bmi.n	8004acc <__sflush_r+0xb8>
 8004a22:	684b      	ldr	r3, [r1, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	dc02      	bgt.n	8004a2e <__sflush_r+0x1a>
 8004a28:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	dd48      	ble.n	8004ac0 <__sflush_r+0xac>
 8004a2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004a30:	2e00      	cmp	r6, #0
 8004a32:	d045      	beq.n	8004ac0 <__sflush_r+0xac>
 8004a34:	2300      	movs	r3, #0
 8004a36:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004a3a:	682f      	ldr	r7, [r5, #0]
 8004a3c:	6a21      	ldr	r1, [r4, #32]
 8004a3e:	602b      	str	r3, [r5, #0]
 8004a40:	d030      	beq.n	8004aa4 <__sflush_r+0x90>
 8004a42:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004a44:	89a3      	ldrh	r3, [r4, #12]
 8004a46:	0759      	lsls	r1, r3, #29
 8004a48:	d505      	bpl.n	8004a56 <__sflush_r+0x42>
 8004a4a:	6863      	ldr	r3, [r4, #4]
 8004a4c:	1ad2      	subs	r2, r2, r3
 8004a4e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004a50:	b10b      	cbz	r3, 8004a56 <__sflush_r+0x42>
 8004a52:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004a54:	1ad2      	subs	r2, r2, r3
 8004a56:	2300      	movs	r3, #0
 8004a58:	4628      	mov	r0, r5
 8004a5a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004a5c:	6a21      	ldr	r1, [r4, #32]
 8004a5e:	47b0      	blx	r6
 8004a60:	1c43      	adds	r3, r0, #1
 8004a62:	89a3      	ldrh	r3, [r4, #12]
 8004a64:	d106      	bne.n	8004a74 <__sflush_r+0x60>
 8004a66:	6829      	ldr	r1, [r5, #0]
 8004a68:	291d      	cmp	r1, #29
 8004a6a:	d82b      	bhi.n	8004ac4 <__sflush_r+0xb0>
 8004a6c:	4a28      	ldr	r2, [pc, #160]	@ (8004b10 <__sflush_r+0xfc>)
 8004a6e:	410a      	asrs	r2, r1
 8004a70:	07d6      	lsls	r6, r2, #31
 8004a72:	d427      	bmi.n	8004ac4 <__sflush_r+0xb0>
 8004a74:	2200      	movs	r2, #0
 8004a76:	6062      	str	r2, [r4, #4]
 8004a78:	6922      	ldr	r2, [r4, #16]
 8004a7a:	04d9      	lsls	r1, r3, #19
 8004a7c:	6022      	str	r2, [r4, #0]
 8004a7e:	d504      	bpl.n	8004a8a <__sflush_r+0x76>
 8004a80:	1c42      	adds	r2, r0, #1
 8004a82:	d101      	bne.n	8004a88 <__sflush_r+0x74>
 8004a84:	682b      	ldr	r3, [r5, #0]
 8004a86:	b903      	cbnz	r3, 8004a8a <__sflush_r+0x76>
 8004a88:	6560      	str	r0, [r4, #84]	@ 0x54
 8004a8a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a8c:	602f      	str	r7, [r5, #0]
 8004a8e:	b1b9      	cbz	r1, 8004ac0 <__sflush_r+0xac>
 8004a90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004a94:	4299      	cmp	r1, r3
 8004a96:	d002      	beq.n	8004a9e <__sflush_r+0x8a>
 8004a98:	4628      	mov	r0, r5
 8004a9a:	f7ff fa9b 	bl	8003fd4 <_free_r>
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	6363      	str	r3, [r4, #52]	@ 0x34
 8004aa2:	e00d      	b.n	8004ac0 <__sflush_r+0xac>
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	4628      	mov	r0, r5
 8004aa8:	47b0      	blx	r6
 8004aaa:	4602      	mov	r2, r0
 8004aac:	1c50      	adds	r0, r2, #1
 8004aae:	d1c9      	bne.n	8004a44 <__sflush_r+0x30>
 8004ab0:	682b      	ldr	r3, [r5, #0]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d0c6      	beq.n	8004a44 <__sflush_r+0x30>
 8004ab6:	2b1d      	cmp	r3, #29
 8004ab8:	d001      	beq.n	8004abe <__sflush_r+0xaa>
 8004aba:	2b16      	cmp	r3, #22
 8004abc:	d11d      	bne.n	8004afa <__sflush_r+0xe6>
 8004abe:	602f      	str	r7, [r5, #0]
 8004ac0:	2000      	movs	r0, #0
 8004ac2:	e021      	b.n	8004b08 <__sflush_r+0xf4>
 8004ac4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ac8:	b21b      	sxth	r3, r3
 8004aca:	e01a      	b.n	8004b02 <__sflush_r+0xee>
 8004acc:	690f      	ldr	r7, [r1, #16]
 8004ace:	2f00      	cmp	r7, #0
 8004ad0:	d0f6      	beq.n	8004ac0 <__sflush_r+0xac>
 8004ad2:	0793      	lsls	r3, r2, #30
 8004ad4:	bf18      	it	ne
 8004ad6:	2300      	movne	r3, #0
 8004ad8:	680e      	ldr	r6, [r1, #0]
 8004ada:	bf08      	it	eq
 8004adc:	694b      	ldreq	r3, [r1, #20]
 8004ade:	1bf6      	subs	r6, r6, r7
 8004ae0:	600f      	str	r7, [r1, #0]
 8004ae2:	608b      	str	r3, [r1, #8]
 8004ae4:	2e00      	cmp	r6, #0
 8004ae6:	ddeb      	ble.n	8004ac0 <__sflush_r+0xac>
 8004ae8:	4633      	mov	r3, r6
 8004aea:	463a      	mov	r2, r7
 8004aec:	4628      	mov	r0, r5
 8004aee:	6a21      	ldr	r1, [r4, #32]
 8004af0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004af4:	47e0      	blx	ip
 8004af6:	2800      	cmp	r0, #0
 8004af8:	dc07      	bgt.n	8004b0a <__sflush_r+0xf6>
 8004afa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004afe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b02:	f04f 30ff 	mov.w	r0, #4294967295
 8004b06:	81a3      	strh	r3, [r4, #12]
 8004b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b0a:	4407      	add	r7, r0
 8004b0c:	1a36      	subs	r6, r6, r0
 8004b0e:	e7e9      	b.n	8004ae4 <__sflush_r+0xd0>
 8004b10:	dfbffffe 	.word	0xdfbffffe

08004b14 <_fflush_r>:
 8004b14:	b538      	push	{r3, r4, r5, lr}
 8004b16:	690b      	ldr	r3, [r1, #16]
 8004b18:	4605      	mov	r5, r0
 8004b1a:	460c      	mov	r4, r1
 8004b1c:	b913      	cbnz	r3, 8004b24 <_fflush_r+0x10>
 8004b1e:	2500      	movs	r5, #0
 8004b20:	4628      	mov	r0, r5
 8004b22:	bd38      	pop	{r3, r4, r5, pc}
 8004b24:	b118      	cbz	r0, 8004b2e <_fflush_r+0x1a>
 8004b26:	6a03      	ldr	r3, [r0, #32]
 8004b28:	b90b      	cbnz	r3, 8004b2e <_fflush_r+0x1a>
 8004b2a:	f7ff f92b 	bl	8003d84 <__sinit>
 8004b2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d0f3      	beq.n	8004b1e <_fflush_r+0xa>
 8004b36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004b38:	07d0      	lsls	r0, r2, #31
 8004b3a:	d404      	bmi.n	8004b46 <_fflush_r+0x32>
 8004b3c:	0599      	lsls	r1, r3, #22
 8004b3e:	d402      	bmi.n	8004b46 <_fflush_r+0x32>
 8004b40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b42:	f7ff fa44 	bl	8003fce <__retarget_lock_acquire_recursive>
 8004b46:	4628      	mov	r0, r5
 8004b48:	4621      	mov	r1, r4
 8004b4a:	f7ff ff63 	bl	8004a14 <__sflush_r>
 8004b4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004b50:	4605      	mov	r5, r0
 8004b52:	07da      	lsls	r2, r3, #31
 8004b54:	d4e4      	bmi.n	8004b20 <_fflush_r+0xc>
 8004b56:	89a3      	ldrh	r3, [r4, #12]
 8004b58:	059b      	lsls	r3, r3, #22
 8004b5a:	d4e1      	bmi.n	8004b20 <_fflush_r+0xc>
 8004b5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b5e:	f7ff fa37 	bl	8003fd0 <__retarget_lock_release_recursive>
 8004b62:	e7dd      	b.n	8004b20 <_fflush_r+0xc>

08004b64 <__swbuf_r>:
 8004b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b66:	460e      	mov	r6, r1
 8004b68:	4614      	mov	r4, r2
 8004b6a:	4605      	mov	r5, r0
 8004b6c:	b118      	cbz	r0, 8004b76 <__swbuf_r+0x12>
 8004b6e:	6a03      	ldr	r3, [r0, #32]
 8004b70:	b90b      	cbnz	r3, 8004b76 <__swbuf_r+0x12>
 8004b72:	f7ff f907 	bl	8003d84 <__sinit>
 8004b76:	69a3      	ldr	r3, [r4, #24]
 8004b78:	60a3      	str	r3, [r4, #8]
 8004b7a:	89a3      	ldrh	r3, [r4, #12]
 8004b7c:	071a      	lsls	r2, r3, #28
 8004b7e:	d501      	bpl.n	8004b84 <__swbuf_r+0x20>
 8004b80:	6923      	ldr	r3, [r4, #16]
 8004b82:	b943      	cbnz	r3, 8004b96 <__swbuf_r+0x32>
 8004b84:	4621      	mov	r1, r4
 8004b86:	4628      	mov	r0, r5
 8004b88:	f000 f82a 	bl	8004be0 <__swsetup_r>
 8004b8c:	b118      	cbz	r0, 8004b96 <__swbuf_r+0x32>
 8004b8e:	f04f 37ff 	mov.w	r7, #4294967295
 8004b92:	4638      	mov	r0, r7
 8004b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b96:	6823      	ldr	r3, [r4, #0]
 8004b98:	6922      	ldr	r2, [r4, #16]
 8004b9a:	b2f6      	uxtb	r6, r6
 8004b9c:	1a98      	subs	r0, r3, r2
 8004b9e:	6963      	ldr	r3, [r4, #20]
 8004ba0:	4637      	mov	r7, r6
 8004ba2:	4283      	cmp	r3, r0
 8004ba4:	dc05      	bgt.n	8004bb2 <__swbuf_r+0x4e>
 8004ba6:	4621      	mov	r1, r4
 8004ba8:	4628      	mov	r0, r5
 8004baa:	f7ff ffb3 	bl	8004b14 <_fflush_r>
 8004bae:	2800      	cmp	r0, #0
 8004bb0:	d1ed      	bne.n	8004b8e <__swbuf_r+0x2a>
 8004bb2:	68a3      	ldr	r3, [r4, #8]
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	60a3      	str	r3, [r4, #8]
 8004bb8:	6823      	ldr	r3, [r4, #0]
 8004bba:	1c5a      	adds	r2, r3, #1
 8004bbc:	6022      	str	r2, [r4, #0]
 8004bbe:	701e      	strb	r6, [r3, #0]
 8004bc0:	6962      	ldr	r2, [r4, #20]
 8004bc2:	1c43      	adds	r3, r0, #1
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d004      	beq.n	8004bd2 <__swbuf_r+0x6e>
 8004bc8:	89a3      	ldrh	r3, [r4, #12]
 8004bca:	07db      	lsls	r3, r3, #31
 8004bcc:	d5e1      	bpl.n	8004b92 <__swbuf_r+0x2e>
 8004bce:	2e0a      	cmp	r6, #10
 8004bd0:	d1df      	bne.n	8004b92 <__swbuf_r+0x2e>
 8004bd2:	4621      	mov	r1, r4
 8004bd4:	4628      	mov	r0, r5
 8004bd6:	f7ff ff9d 	bl	8004b14 <_fflush_r>
 8004bda:	2800      	cmp	r0, #0
 8004bdc:	d0d9      	beq.n	8004b92 <__swbuf_r+0x2e>
 8004bde:	e7d6      	b.n	8004b8e <__swbuf_r+0x2a>

08004be0 <__swsetup_r>:
 8004be0:	b538      	push	{r3, r4, r5, lr}
 8004be2:	4b29      	ldr	r3, [pc, #164]	@ (8004c88 <__swsetup_r+0xa8>)
 8004be4:	4605      	mov	r5, r0
 8004be6:	6818      	ldr	r0, [r3, #0]
 8004be8:	460c      	mov	r4, r1
 8004bea:	b118      	cbz	r0, 8004bf4 <__swsetup_r+0x14>
 8004bec:	6a03      	ldr	r3, [r0, #32]
 8004bee:	b90b      	cbnz	r3, 8004bf4 <__swsetup_r+0x14>
 8004bf0:	f7ff f8c8 	bl	8003d84 <__sinit>
 8004bf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bf8:	0719      	lsls	r1, r3, #28
 8004bfa:	d422      	bmi.n	8004c42 <__swsetup_r+0x62>
 8004bfc:	06da      	lsls	r2, r3, #27
 8004bfe:	d407      	bmi.n	8004c10 <__swsetup_r+0x30>
 8004c00:	2209      	movs	r2, #9
 8004c02:	602a      	str	r2, [r5, #0]
 8004c04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c08:	f04f 30ff 	mov.w	r0, #4294967295
 8004c0c:	81a3      	strh	r3, [r4, #12]
 8004c0e:	e033      	b.n	8004c78 <__swsetup_r+0x98>
 8004c10:	0758      	lsls	r0, r3, #29
 8004c12:	d512      	bpl.n	8004c3a <__swsetup_r+0x5a>
 8004c14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c16:	b141      	cbz	r1, 8004c2a <__swsetup_r+0x4a>
 8004c18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004c1c:	4299      	cmp	r1, r3
 8004c1e:	d002      	beq.n	8004c26 <__swsetup_r+0x46>
 8004c20:	4628      	mov	r0, r5
 8004c22:	f7ff f9d7 	bl	8003fd4 <_free_r>
 8004c26:	2300      	movs	r3, #0
 8004c28:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c2a:	89a3      	ldrh	r3, [r4, #12]
 8004c2c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004c30:	81a3      	strh	r3, [r4, #12]
 8004c32:	2300      	movs	r3, #0
 8004c34:	6063      	str	r3, [r4, #4]
 8004c36:	6923      	ldr	r3, [r4, #16]
 8004c38:	6023      	str	r3, [r4, #0]
 8004c3a:	89a3      	ldrh	r3, [r4, #12]
 8004c3c:	f043 0308 	orr.w	r3, r3, #8
 8004c40:	81a3      	strh	r3, [r4, #12]
 8004c42:	6923      	ldr	r3, [r4, #16]
 8004c44:	b94b      	cbnz	r3, 8004c5a <__swsetup_r+0x7a>
 8004c46:	89a3      	ldrh	r3, [r4, #12]
 8004c48:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004c4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c50:	d003      	beq.n	8004c5a <__swsetup_r+0x7a>
 8004c52:	4621      	mov	r1, r4
 8004c54:	4628      	mov	r0, r5
 8004c56:	f000 f8b2 	bl	8004dbe <__smakebuf_r>
 8004c5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c5e:	f013 0201 	ands.w	r2, r3, #1
 8004c62:	d00a      	beq.n	8004c7a <__swsetup_r+0x9a>
 8004c64:	2200      	movs	r2, #0
 8004c66:	60a2      	str	r2, [r4, #8]
 8004c68:	6962      	ldr	r2, [r4, #20]
 8004c6a:	4252      	negs	r2, r2
 8004c6c:	61a2      	str	r2, [r4, #24]
 8004c6e:	6922      	ldr	r2, [r4, #16]
 8004c70:	b942      	cbnz	r2, 8004c84 <__swsetup_r+0xa4>
 8004c72:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004c76:	d1c5      	bne.n	8004c04 <__swsetup_r+0x24>
 8004c78:	bd38      	pop	{r3, r4, r5, pc}
 8004c7a:	0799      	lsls	r1, r3, #30
 8004c7c:	bf58      	it	pl
 8004c7e:	6962      	ldrpl	r2, [r4, #20]
 8004c80:	60a2      	str	r2, [r4, #8]
 8004c82:	e7f4      	b.n	8004c6e <__swsetup_r+0x8e>
 8004c84:	2000      	movs	r0, #0
 8004c86:	e7f7      	b.n	8004c78 <__swsetup_r+0x98>
 8004c88:	20000018 	.word	0x20000018

08004c8c <memmove>:
 8004c8c:	4288      	cmp	r0, r1
 8004c8e:	b510      	push	{r4, lr}
 8004c90:	eb01 0402 	add.w	r4, r1, r2
 8004c94:	d902      	bls.n	8004c9c <memmove+0x10>
 8004c96:	4284      	cmp	r4, r0
 8004c98:	4623      	mov	r3, r4
 8004c9a:	d807      	bhi.n	8004cac <memmove+0x20>
 8004c9c:	1e43      	subs	r3, r0, #1
 8004c9e:	42a1      	cmp	r1, r4
 8004ca0:	d008      	beq.n	8004cb4 <memmove+0x28>
 8004ca2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ca6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004caa:	e7f8      	b.n	8004c9e <memmove+0x12>
 8004cac:	4601      	mov	r1, r0
 8004cae:	4402      	add	r2, r0
 8004cb0:	428a      	cmp	r2, r1
 8004cb2:	d100      	bne.n	8004cb6 <memmove+0x2a>
 8004cb4:	bd10      	pop	{r4, pc}
 8004cb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004cba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004cbe:	e7f7      	b.n	8004cb0 <memmove+0x24>

08004cc0 <_sbrk_r>:
 8004cc0:	b538      	push	{r3, r4, r5, lr}
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	4d05      	ldr	r5, [pc, #20]	@ (8004cdc <_sbrk_r+0x1c>)
 8004cc6:	4604      	mov	r4, r0
 8004cc8:	4608      	mov	r0, r1
 8004cca:	602b      	str	r3, [r5, #0]
 8004ccc:	f7fb fea4 	bl	8000a18 <_sbrk>
 8004cd0:	1c43      	adds	r3, r0, #1
 8004cd2:	d102      	bne.n	8004cda <_sbrk_r+0x1a>
 8004cd4:	682b      	ldr	r3, [r5, #0]
 8004cd6:	b103      	cbz	r3, 8004cda <_sbrk_r+0x1a>
 8004cd8:	6023      	str	r3, [r4, #0]
 8004cda:	bd38      	pop	{r3, r4, r5, pc}
 8004cdc:	2000035c 	.word	0x2000035c

08004ce0 <memchr>:
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	b510      	push	{r4, lr}
 8004ce4:	b2c9      	uxtb	r1, r1
 8004ce6:	4402      	add	r2, r0
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	4618      	mov	r0, r3
 8004cec:	d101      	bne.n	8004cf2 <memchr+0x12>
 8004cee:	2000      	movs	r0, #0
 8004cf0:	e003      	b.n	8004cfa <memchr+0x1a>
 8004cf2:	7804      	ldrb	r4, [r0, #0]
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	428c      	cmp	r4, r1
 8004cf8:	d1f6      	bne.n	8004ce8 <memchr+0x8>
 8004cfa:	bd10      	pop	{r4, pc}

08004cfc <memcpy>:
 8004cfc:	440a      	add	r2, r1
 8004cfe:	4291      	cmp	r1, r2
 8004d00:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d04:	d100      	bne.n	8004d08 <memcpy+0xc>
 8004d06:	4770      	bx	lr
 8004d08:	b510      	push	{r4, lr}
 8004d0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d0e:	4291      	cmp	r1, r2
 8004d10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d14:	d1f9      	bne.n	8004d0a <memcpy+0xe>
 8004d16:	bd10      	pop	{r4, pc}

08004d18 <_realloc_r>:
 8004d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d1c:	4680      	mov	r8, r0
 8004d1e:	4615      	mov	r5, r2
 8004d20:	460c      	mov	r4, r1
 8004d22:	b921      	cbnz	r1, 8004d2e <_realloc_r+0x16>
 8004d24:	4611      	mov	r1, r2
 8004d26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d2a:	f7ff b9bd 	b.w	80040a8 <_malloc_r>
 8004d2e:	b92a      	cbnz	r2, 8004d3c <_realloc_r+0x24>
 8004d30:	f7ff f950 	bl	8003fd4 <_free_r>
 8004d34:	2400      	movs	r4, #0
 8004d36:	4620      	mov	r0, r4
 8004d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d3c:	f000 f89e 	bl	8004e7c <_malloc_usable_size_r>
 8004d40:	4285      	cmp	r5, r0
 8004d42:	4606      	mov	r6, r0
 8004d44:	d802      	bhi.n	8004d4c <_realloc_r+0x34>
 8004d46:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004d4a:	d8f4      	bhi.n	8004d36 <_realloc_r+0x1e>
 8004d4c:	4629      	mov	r1, r5
 8004d4e:	4640      	mov	r0, r8
 8004d50:	f7ff f9aa 	bl	80040a8 <_malloc_r>
 8004d54:	4607      	mov	r7, r0
 8004d56:	2800      	cmp	r0, #0
 8004d58:	d0ec      	beq.n	8004d34 <_realloc_r+0x1c>
 8004d5a:	42b5      	cmp	r5, r6
 8004d5c:	462a      	mov	r2, r5
 8004d5e:	4621      	mov	r1, r4
 8004d60:	bf28      	it	cs
 8004d62:	4632      	movcs	r2, r6
 8004d64:	f7ff ffca 	bl	8004cfc <memcpy>
 8004d68:	4621      	mov	r1, r4
 8004d6a:	4640      	mov	r0, r8
 8004d6c:	f7ff f932 	bl	8003fd4 <_free_r>
 8004d70:	463c      	mov	r4, r7
 8004d72:	e7e0      	b.n	8004d36 <_realloc_r+0x1e>

08004d74 <__swhatbuf_r>:
 8004d74:	b570      	push	{r4, r5, r6, lr}
 8004d76:	460c      	mov	r4, r1
 8004d78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d7c:	4615      	mov	r5, r2
 8004d7e:	2900      	cmp	r1, #0
 8004d80:	461e      	mov	r6, r3
 8004d82:	b096      	sub	sp, #88	@ 0x58
 8004d84:	da0c      	bge.n	8004da0 <__swhatbuf_r+0x2c>
 8004d86:	89a3      	ldrh	r3, [r4, #12]
 8004d88:	2100      	movs	r1, #0
 8004d8a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004d8e:	bf14      	ite	ne
 8004d90:	2340      	movne	r3, #64	@ 0x40
 8004d92:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004d96:	2000      	movs	r0, #0
 8004d98:	6031      	str	r1, [r6, #0]
 8004d9a:	602b      	str	r3, [r5, #0]
 8004d9c:	b016      	add	sp, #88	@ 0x58
 8004d9e:	bd70      	pop	{r4, r5, r6, pc}
 8004da0:	466a      	mov	r2, sp
 8004da2:	f000 f849 	bl	8004e38 <_fstat_r>
 8004da6:	2800      	cmp	r0, #0
 8004da8:	dbed      	blt.n	8004d86 <__swhatbuf_r+0x12>
 8004daa:	9901      	ldr	r1, [sp, #4]
 8004dac:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004db0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004db4:	4259      	negs	r1, r3
 8004db6:	4159      	adcs	r1, r3
 8004db8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004dbc:	e7eb      	b.n	8004d96 <__swhatbuf_r+0x22>

08004dbe <__smakebuf_r>:
 8004dbe:	898b      	ldrh	r3, [r1, #12]
 8004dc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004dc2:	079d      	lsls	r5, r3, #30
 8004dc4:	4606      	mov	r6, r0
 8004dc6:	460c      	mov	r4, r1
 8004dc8:	d507      	bpl.n	8004dda <__smakebuf_r+0x1c>
 8004dca:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004dce:	6023      	str	r3, [r4, #0]
 8004dd0:	6123      	str	r3, [r4, #16]
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	6163      	str	r3, [r4, #20]
 8004dd6:	b003      	add	sp, #12
 8004dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dda:	466a      	mov	r2, sp
 8004ddc:	ab01      	add	r3, sp, #4
 8004dde:	f7ff ffc9 	bl	8004d74 <__swhatbuf_r>
 8004de2:	9f00      	ldr	r7, [sp, #0]
 8004de4:	4605      	mov	r5, r0
 8004de6:	4639      	mov	r1, r7
 8004de8:	4630      	mov	r0, r6
 8004dea:	f7ff f95d 	bl	80040a8 <_malloc_r>
 8004dee:	b948      	cbnz	r0, 8004e04 <__smakebuf_r+0x46>
 8004df0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004df4:	059a      	lsls	r2, r3, #22
 8004df6:	d4ee      	bmi.n	8004dd6 <__smakebuf_r+0x18>
 8004df8:	f023 0303 	bic.w	r3, r3, #3
 8004dfc:	f043 0302 	orr.w	r3, r3, #2
 8004e00:	81a3      	strh	r3, [r4, #12]
 8004e02:	e7e2      	b.n	8004dca <__smakebuf_r+0xc>
 8004e04:	89a3      	ldrh	r3, [r4, #12]
 8004e06:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004e0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e0e:	81a3      	strh	r3, [r4, #12]
 8004e10:	9b01      	ldr	r3, [sp, #4]
 8004e12:	6020      	str	r0, [r4, #0]
 8004e14:	b15b      	cbz	r3, 8004e2e <__smakebuf_r+0x70>
 8004e16:	4630      	mov	r0, r6
 8004e18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e1c:	f000 f81e 	bl	8004e5c <_isatty_r>
 8004e20:	b128      	cbz	r0, 8004e2e <__smakebuf_r+0x70>
 8004e22:	89a3      	ldrh	r3, [r4, #12]
 8004e24:	f023 0303 	bic.w	r3, r3, #3
 8004e28:	f043 0301 	orr.w	r3, r3, #1
 8004e2c:	81a3      	strh	r3, [r4, #12]
 8004e2e:	89a3      	ldrh	r3, [r4, #12]
 8004e30:	431d      	orrs	r5, r3
 8004e32:	81a5      	strh	r5, [r4, #12]
 8004e34:	e7cf      	b.n	8004dd6 <__smakebuf_r+0x18>
	...

08004e38 <_fstat_r>:
 8004e38:	b538      	push	{r3, r4, r5, lr}
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	4d06      	ldr	r5, [pc, #24]	@ (8004e58 <_fstat_r+0x20>)
 8004e3e:	4604      	mov	r4, r0
 8004e40:	4608      	mov	r0, r1
 8004e42:	4611      	mov	r1, r2
 8004e44:	602b      	str	r3, [r5, #0]
 8004e46:	f7fb fdc1 	bl	80009cc <_fstat>
 8004e4a:	1c43      	adds	r3, r0, #1
 8004e4c:	d102      	bne.n	8004e54 <_fstat_r+0x1c>
 8004e4e:	682b      	ldr	r3, [r5, #0]
 8004e50:	b103      	cbz	r3, 8004e54 <_fstat_r+0x1c>
 8004e52:	6023      	str	r3, [r4, #0]
 8004e54:	bd38      	pop	{r3, r4, r5, pc}
 8004e56:	bf00      	nop
 8004e58:	2000035c 	.word	0x2000035c

08004e5c <_isatty_r>:
 8004e5c:	b538      	push	{r3, r4, r5, lr}
 8004e5e:	2300      	movs	r3, #0
 8004e60:	4d05      	ldr	r5, [pc, #20]	@ (8004e78 <_isatty_r+0x1c>)
 8004e62:	4604      	mov	r4, r0
 8004e64:	4608      	mov	r0, r1
 8004e66:	602b      	str	r3, [r5, #0]
 8004e68:	f7fb fdbf 	bl	80009ea <_isatty>
 8004e6c:	1c43      	adds	r3, r0, #1
 8004e6e:	d102      	bne.n	8004e76 <_isatty_r+0x1a>
 8004e70:	682b      	ldr	r3, [r5, #0]
 8004e72:	b103      	cbz	r3, 8004e76 <_isatty_r+0x1a>
 8004e74:	6023      	str	r3, [r4, #0]
 8004e76:	bd38      	pop	{r3, r4, r5, pc}
 8004e78:	2000035c 	.word	0x2000035c

08004e7c <_malloc_usable_size_r>:
 8004e7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e80:	1f18      	subs	r0, r3, #4
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	bfbc      	itt	lt
 8004e86:	580b      	ldrlt	r3, [r1, r0]
 8004e88:	18c0      	addlt	r0, r0, r3
 8004e8a:	4770      	bx	lr

08004e8c <_init>:
 8004e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e8e:	bf00      	nop
 8004e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e92:	bc08      	pop	{r3}
 8004e94:	469e      	mov	lr, r3
 8004e96:	4770      	bx	lr

08004e98 <_fini>:
 8004e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e9a:	bf00      	nop
 8004e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e9e:	bc08      	pop	{r3}
 8004ea0:	469e      	mov	lr, r3
 8004ea2:	4770      	bx	lr
