
autolauncher_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008850  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f54  08008960  08008960  00009960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098b4  080098b4  0000b098  2**0
                  CONTENTS
  4 .ARM          00000008  080098b4  080098b4  0000a8b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080098bc  080098bc  0000b098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098bc  080098bc  0000a8bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098c0  080098c0  0000a8c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  080098c4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  20000098  0800995c  0000b098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a0  0800995c  0000b3a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012dea  00000000  00000000  0000b0c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ecd  00000000  00000000  0001deab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001250  00000000  00000000  00020d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e5e  00000000  00000000  00021fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a6f2  00000000  00000000  00022e26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017920  00000000  00000000  0003d518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000947e1  00000000  00000000  00054e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e9619  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005780  00000000  00000000  000e965c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000eeddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000098 	.word	0x20000098
 800012c:	00000000 	.word	0x00000000
 8000130:	08008948 	.word	0x08008948

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000009c 	.word	0x2000009c
 800014c:	08008948 	.word	0x08008948

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_dmul>:
 8000160:	b570      	push	{r4, r5, r6, lr}
 8000162:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000166:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800016a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016e:	bf1d      	ittte	ne
 8000170:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000174:	ea94 0f0c 	teqne	r4, ip
 8000178:	ea95 0f0c 	teqne	r5, ip
 800017c:	f000 f8de 	bleq	800033c <__aeabi_dmul+0x1dc>
 8000180:	442c      	add	r4, r5
 8000182:	ea81 0603 	eor.w	r6, r1, r3
 8000186:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800018a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000192:	bf18      	it	ne
 8000194:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000198:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800019c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80001a0:	d038      	beq.n	8000214 <__aeabi_dmul+0xb4>
 80001a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a6:	f04f 0500 	mov.w	r5, #0
 80001aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ae:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b6:	f04f 0600 	mov.w	r6, #0
 80001ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001be:	f09c 0f00 	teq	ip, #0
 80001c2:	bf18      	it	ne
 80001c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001cc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001d0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001d4:	d204      	bcs.n	80001e0 <__aeabi_dmul+0x80>
 80001d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001da:	416d      	adcs	r5, r5
 80001dc:	eb46 0606 	adc.w	r6, r6, r6
 80001e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80001f8:	bf88      	it	hi
 80001fa:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80001fe:	d81e      	bhi.n	800023e <__aeabi_dmul+0xde>
 8000200:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000204:	bf08      	it	eq
 8000206:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800020a:	f150 0000 	adcs.w	r0, r0, #0
 800020e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000212:	bd70      	pop	{r4, r5, r6, pc}
 8000214:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000218:	ea46 0101 	orr.w	r1, r6, r1
 800021c:	ea40 0002 	orr.w	r0, r0, r2
 8000220:	ea81 0103 	eor.w	r1, r1, r3
 8000224:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000228:	bfc2      	ittt	gt
 800022a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000232:	bd70      	popgt	{r4, r5, r6, pc}
 8000234:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000238:	f04f 0e00 	mov.w	lr, #0
 800023c:	3c01      	subs	r4, #1
 800023e:	f300 80ab 	bgt.w	8000398 <__aeabi_dmul+0x238>
 8000242:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000246:	bfde      	ittt	le
 8000248:	2000      	movle	r0, #0
 800024a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800024e:	bd70      	pople	{r4, r5, r6, pc}
 8000250:	f1c4 0400 	rsb	r4, r4, #0
 8000254:	3c20      	subs	r4, #32
 8000256:	da35      	bge.n	80002c4 <__aeabi_dmul+0x164>
 8000258:	340c      	adds	r4, #12
 800025a:	dc1b      	bgt.n	8000294 <__aeabi_dmul+0x134>
 800025c:	f104 0414 	add.w	r4, r4, #20
 8000260:	f1c4 0520 	rsb	r5, r4, #32
 8000264:	fa00 f305 	lsl.w	r3, r0, r5
 8000268:	fa20 f004 	lsr.w	r0, r0, r4
 800026c:	fa01 f205 	lsl.w	r2, r1, r5
 8000270:	ea40 0002 	orr.w	r0, r0, r2
 8000274:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000278:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800027c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000280:	fa21 f604 	lsr.w	r6, r1, r4
 8000284:	eb42 0106 	adc.w	r1, r2, r6
 8000288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800028c:	bf08      	it	eq
 800028e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f1c4 040c 	rsb	r4, r4, #12
 8000298:	f1c4 0520 	rsb	r5, r4, #32
 800029c:	fa00 f304 	lsl.w	r3, r0, r4
 80002a0:	fa20 f005 	lsr.w	r0, r0, r5
 80002a4:	fa01 f204 	lsl.w	r2, r1, r4
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002bc:	bf08      	it	eq
 80002be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f1c4 0520 	rsb	r5, r4, #32
 80002c8:	fa00 f205 	lsl.w	r2, r0, r5
 80002cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002d0:	fa20 f304 	lsr.w	r3, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea43 0302 	orr.w	r3, r3, r2
 80002dc:	fa21 f004 	lsr.w	r0, r1, r4
 80002e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	fa21 f204 	lsr.w	r2, r1, r4
 80002e8:	ea20 0002 	bic.w	r0, r0, r2
 80002ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f094 0f00 	teq	r4, #0
 8000300:	d10f      	bne.n	8000322 <__aeabi_dmul+0x1c2>
 8000302:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000306:	0040      	lsls	r0, r0, #1
 8000308:	eb41 0101 	adc.w	r1, r1, r1
 800030c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000310:	bf08      	it	eq
 8000312:	3c01      	subeq	r4, #1
 8000314:	d0f7      	beq.n	8000306 <__aeabi_dmul+0x1a6>
 8000316:	ea41 0106 	orr.w	r1, r1, r6
 800031a:	f095 0f00 	teq	r5, #0
 800031e:	bf18      	it	ne
 8000320:	4770      	bxne	lr
 8000322:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000326:	0052      	lsls	r2, r2, #1
 8000328:	eb43 0303 	adc.w	r3, r3, r3
 800032c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000330:	bf08      	it	eq
 8000332:	3d01      	subeq	r5, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1c6>
 8000336:	ea43 0306 	orr.w	r3, r3, r6
 800033a:	4770      	bx	lr
 800033c:	ea94 0f0c 	teq	r4, ip
 8000340:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000344:	bf18      	it	ne
 8000346:	ea95 0f0c 	teqne	r5, ip
 800034a:	d00c      	beq.n	8000366 <__aeabi_dmul+0x206>
 800034c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000350:	bf18      	it	ne
 8000352:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000356:	d1d1      	bne.n	80002fc <__aeabi_dmul+0x19c>
 8000358:	ea81 0103 	eor.w	r1, r1, r3
 800035c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000360:	f04f 0000 	mov.w	r0, #0
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800036a:	bf06      	itte	eq
 800036c:	4610      	moveq	r0, r2
 800036e:	4619      	moveq	r1, r3
 8000370:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000374:	d019      	beq.n	80003aa <__aeabi_dmul+0x24a>
 8000376:	ea94 0f0c 	teq	r4, ip
 800037a:	d102      	bne.n	8000382 <__aeabi_dmul+0x222>
 800037c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000380:	d113      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000382:	ea95 0f0c 	teq	r5, ip
 8000386:	d105      	bne.n	8000394 <__aeabi_dmul+0x234>
 8000388:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800038c:	bf1c      	itt	ne
 800038e:	4610      	movne	r0, r2
 8000390:	4619      	movne	r1, r3
 8000392:	d10a      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000394:	ea81 0103 	eor.w	r1, r1, r3
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
 80003aa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003ae:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003b2:	bd70      	pop	{r4, r5, r6, pc}

080003b4 <__aeabi_fmul>:
 80003b4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80003b8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003bc:	bf1e      	ittt	ne
 80003be:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003c2:	ea92 0f0c 	teqne	r2, ip
 80003c6:	ea93 0f0c 	teqne	r3, ip
 80003ca:	d06f      	beq.n	80004ac <__aeabi_fmul+0xf8>
 80003cc:	441a      	add	r2, r3
 80003ce:	ea80 0c01 	eor.w	ip, r0, r1
 80003d2:	0240      	lsls	r0, r0, #9
 80003d4:	bf18      	it	ne
 80003d6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003da:	d01e      	beq.n	800041a <__aeabi_fmul+0x66>
 80003dc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003e0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003e4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003e8:	fba0 3101 	umull	r3, r1, r0, r1
 80003ec:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003f0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003f4:	bf3e      	ittt	cc
 80003f6:	0049      	lslcc	r1, r1, #1
 80003f8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003fc:	005b      	lslcc	r3, r3, #1
 80003fe:	ea40 0001 	orr.w	r0, r0, r1
 8000402:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000406:	2afd      	cmp	r2, #253	@ 0xfd
 8000408:	d81d      	bhi.n	8000446 <__aeabi_fmul+0x92>
 800040a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800040e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000412:	bf08      	it	eq
 8000414:	f020 0001 	biceq.w	r0, r0, #1
 8000418:	4770      	bx	lr
 800041a:	f090 0f00 	teq	r0, #0
 800041e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000422:	bf08      	it	eq
 8000424:	0249      	lsleq	r1, r1, #9
 8000426:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800042a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800042e:	3a7f      	subs	r2, #127	@ 0x7f
 8000430:	bfc2      	ittt	gt
 8000432:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000436:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800043a:	4770      	bxgt	lr
 800043c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000440:	f04f 0300 	mov.w	r3, #0
 8000444:	3a01      	subs	r2, #1
 8000446:	dc5d      	bgt.n	8000504 <__aeabi_fmul+0x150>
 8000448:	f112 0f19 	cmn.w	r2, #25
 800044c:	bfdc      	itt	le
 800044e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000452:	4770      	bxle	lr
 8000454:	f1c2 0200 	rsb	r2, r2, #0
 8000458:	0041      	lsls	r1, r0, #1
 800045a:	fa21 f102 	lsr.w	r1, r1, r2
 800045e:	f1c2 0220 	rsb	r2, r2, #32
 8000462:	fa00 fc02 	lsl.w	ip, r0, r2
 8000466:	ea5f 0031 	movs.w	r0, r1, rrx
 800046a:	f140 0000 	adc.w	r0, r0, #0
 800046e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000472:	bf08      	it	eq
 8000474:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000478:	4770      	bx	lr
 800047a:	f092 0f00 	teq	r2, #0
 800047e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000482:	bf02      	ittt	eq
 8000484:	0040      	lsleq	r0, r0, #1
 8000486:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800048a:	3a01      	subeq	r2, #1
 800048c:	d0f9      	beq.n	8000482 <__aeabi_fmul+0xce>
 800048e:	ea40 000c 	orr.w	r0, r0, ip
 8000492:	f093 0f00 	teq	r3, #0
 8000496:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800049a:	bf02      	ittt	eq
 800049c:	0049      	lsleq	r1, r1, #1
 800049e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80004a2:	3b01      	subeq	r3, #1
 80004a4:	d0f9      	beq.n	800049a <__aeabi_fmul+0xe6>
 80004a6:	ea41 010c 	orr.w	r1, r1, ip
 80004aa:	e78f      	b.n	80003cc <__aeabi_fmul+0x18>
 80004ac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80004b0:	ea92 0f0c 	teq	r2, ip
 80004b4:	bf18      	it	ne
 80004b6:	ea93 0f0c 	teqne	r3, ip
 80004ba:	d00a      	beq.n	80004d2 <__aeabi_fmul+0x11e>
 80004bc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80004c0:	bf18      	it	ne
 80004c2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80004c6:	d1d8      	bne.n	800047a <__aeabi_fmul+0xc6>
 80004c8:	ea80 0001 	eor.w	r0, r0, r1
 80004cc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004d0:	4770      	bx	lr
 80004d2:	f090 0f00 	teq	r0, #0
 80004d6:	bf17      	itett	ne
 80004d8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004dc:	4608      	moveq	r0, r1
 80004de:	f091 0f00 	teqne	r1, #0
 80004e2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004e6:	d014      	beq.n	8000512 <__aeabi_fmul+0x15e>
 80004e8:	ea92 0f0c 	teq	r2, ip
 80004ec:	d101      	bne.n	80004f2 <__aeabi_fmul+0x13e>
 80004ee:	0242      	lsls	r2, r0, #9
 80004f0:	d10f      	bne.n	8000512 <__aeabi_fmul+0x15e>
 80004f2:	ea93 0f0c 	teq	r3, ip
 80004f6:	d103      	bne.n	8000500 <__aeabi_fmul+0x14c>
 80004f8:	024b      	lsls	r3, r1, #9
 80004fa:	bf18      	it	ne
 80004fc:	4608      	movne	r0, r1
 80004fe:	d108      	bne.n	8000512 <__aeabi_fmul+0x15e>
 8000500:	ea80 0001 	eor.w	r0, r0, r1
 8000504:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000508:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800050c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000510:	4770      	bx	lr
 8000512:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000516:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 800051a:	4770      	bx	lr

0800051c <__aeabi_drsub>:
 800051c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e002      	b.n	8000528 <__adddf3>
 8000522:	bf00      	nop

08000524 <__aeabi_dsub>:
 8000524:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000528 <__adddf3>:
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800052e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000532:	ea94 0f05 	teq	r4, r5
 8000536:	bf08      	it	eq
 8000538:	ea90 0f02 	teqeq	r0, r2
 800053c:	bf1f      	itttt	ne
 800053e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000542:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000546:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800054a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800054e:	f000 80e2 	beq.w	8000716 <__adddf3+0x1ee>
 8000552:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000556:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800055a:	bfb8      	it	lt
 800055c:	426d      	neglt	r5, r5
 800055e:	dd0c      	ble.n	800057a <__adddf3+0x52>
 8000560:	442c      	add	r4, r5
 8000562:	ea80 0202 	eor.w	r2, r0, r2
 8000566:	ea81 0303 	eor.w	r3, r1, r3
 800056a:	ea82 0000 	eor.w	r0, r2, r0
 800056e:	ea83 0101 	eor.w	r1, r3, r1
 8000572:	ea80 0202 	eor.w	r2, r0, r2
 8000576:	ea81 0303 	eor.w	r3, r1, r3
 800057a:	2d36      	cmp	r5, #54	@ 0x36
 800057c:	bf88      	it	hi
 800057e:	bd30      	pophi	{r4, r5, pc}
 8000580:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000584:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000588:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800058c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000590:	d002      	beq.n	8000598 <__adddf3+0x70>
 8000592:	4240      	negs	r0, r0
 8000594:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000598:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800059c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80005a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80005a4:	d002      	beq.n	80005ac <__adddf3+0x84>
 80005a6:	4252      	negs	r2, r2
 80005a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005ac:	ea94 0f05 	teq	r4, r5
 80005b0:	f000 80a7 	beq.w	8000702 <__adddf3+0x1da>
 80005b4:	f1a4 0401 	sub.w	r4, r4, #1
 80005b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80005bc:	db0d      	blt.n	80005da <__adddf3+0xb2>
 80005be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005c2:	fa22 f205 	lsr.w	r2, r2, r5
 80005c6:	1880      	adds	r0, r0, r2
 80005c8:	f141 0100 	adc.w	r1, r1, #0
 80005cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80005d0:	1880      	adds	r0, r0, r2
 80005d2:	fa43 f305 	asr.w	r3, r3, r5
 80005d6:	4159      	adcs	r1, r3
 80005d8:	e00e      	b.n	80005f8 <__adddf3+0xd0>
 80005da:	f1a5 0520 	sub.w	r5, r5, #32
 80005de:	f10e 0e20 	add.w	lr, lr, #32
 80005e2:	2a01      	cmp	r2, #1
 80005e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e8:	bf28      	it	cs
 80005ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005ee:	fa43 f305 	asr.w	r3, r3, r5
 80005f2:	18c0      	adds	r0, r0, r3
 80005f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	d507      	bpl.n	800060e <__adddf3+0xe6>
 80005fe:	f04f 0e00 	mov.w	lr, #0
 8000602:	f1dc 0c00 	rsbs	ip, ip, #0
 8000606:	eb7e 0000 	sbcs.w	r0, lr, r0
 800060a:	eb6e 0101 	sbc.w	r1, lr, r1
 800060e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000612:	d31b      	bcc.n	800064c <__adddf3+0x124>
 8000614:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000618:	d30c      	bcc.n	8000634 <__adddf3+0x10c>
 800061a:	0849      	lsrs	r1, r1, #1
 800061c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000620:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000624:	f104 0401 	add.w	r4, r4, #1
 8000628:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800062c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000630:	f080 809a 	bcs.w	8000768 <__adddf3+0x240>
 8000634:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000638:	bf08      	it	eq
 800063a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800063e:	f150 0000 	adcs.w	r0, r0, #0
 8000642:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000646:	ea41 0105 	orr.w	r1, r1, r5
 800064a:	bd30      	pop	{r4, r5, pc}
 800064c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000650:	4140      	adcs	r0, r0
 8000652:	eb41 0101 	adc.w	r1, r1, r1
 8000656:	3c01      	subs	r4, #1
 8000658:	bf28      	it	cs
 800065a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800065e:	d2e9      	bcs.n	8000634 <__adddf3+0x10c>
 8000660:	f091 0f00 	teq	r1, #0
 8000664:	bf04      	itt	eq
 8000666:	4601      	moveq	r1, r0
 8000668:	2000      	moveq	r0, #0
 800066a:	fab1 f381 	clz	r3, r1
 800066e:	bf08      	it	eq
 8000670:	3320      	addeq	r3, #32
 8000672:	f1a3 030b 	sub.w	r3, r3, #11
 8000676:	f1b3 0220 	subs.w	r2, r3, #32
 800067a:	da0c      	bge.n	8000696 <__adddf3+0x16e>
 800067c:	320c      	adds	r2, #12
 800067e:	dd08      	ble.n	8000692 <__adddf3+0x16a>
 8000680:	f102 0c14 	add.w	ip, r2, #20
 8000684:	f1c2 020c 	rsb	r2, r2, #12
 8000688:	fa01 f00c 	lsl.w	r0, r1, ip
 800068c:	fa21 f102 	lsr.w	r1, r1, r2
 8000690:	e00c      	b.n	80006ac <__adddf3+0x184>
 8000692:	f102 0214 	add.w	r2, r2, #20
 8000696:	bfd8      	it	le
 8000698:	f1c2 0c20 	rsble	ip, r2, #32
 800069c:	fa01 f102 	lsl.w	r1, r1, r2
 80006a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80006a4:	bfdc      	itt	le
 80006a6:	ea41 010c 	orrle.w	r1, r1, ip
 80006aa:	4090      	lslle	r0, r2
 80006ac:	1ae4      	subs	r4, r4, r3
 80006ae:	bfa2      	ittt	ge
 80006b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006b4:	4329      	orrge	r1, r5
 80006b6:	bd30      	popge	{r4, r5, pc}
 80006b8:	ea6f 0404 	mvn.w	r4, r4
 80006bc:	3c1f      	subs	r4, #31
 80006be:	da1c      	bge.n	80006fa <__adddf3+0x1d2>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc0e      	bgt.n	80006e2 <__adddf3+0x1ba>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0220 	rsb	r2, r4, #32
 80006cc:	fa20 f004 	lsr.w	r0, r0, r4
 80006d0:	fa01 f302 	lsl.w	r3, r1, r2
 80006d4:	ea40 0003 	orr.w	r0, r0, r3
 80006d8:	fa21 f304 	lsr.w	r3, r1, r4
 80006dc:	ea45 0103 	orr.w	r1, r5, r3
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	f1c4 040c 	rsb	r4, r4, #12
 80006e6:	f1c4 0220 	rsb	r2, r4, #32
 80006ea:	fa20 f002 	lsr.w	r0, r0, r2
 80006ee:	fa01 f304 	lsl.w	r3, r1, r4
 80006f2:	ea40 0003 	orr.w	r0, r0, r3
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	fa21 f004 	lsr.w	r0, r1, r4
 80006fe:	4629      	mov	r1, r5
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	f094 0f00 	teq	r4, #0
 8000706:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800070a:	bf06      	itte	eq
 800070c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000710:	3401      	addeq	r4, #1
 8000712:	3d01      	subne	r5, #1
 8000714:	e74e      	b.n	80005b4 <__adddf3+0x8c>
 8000716:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800071a:	bf18      	it	ne
 800071c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000720:	d029      	beq.n	8000776 <__adddf3+0x24e>
 8000722:	ea94 0f05 	teq	r4, r5
 8000726:	bf08      	it	eq
 8000728:	ea90 0f02 	teqeq	r0, r2
 800072c:	d005      	beq.n	800073a <__adddf3+0x212>
 800072e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000732:	bf04      	itt	eq
 8000734:	4619      	moveq	r1, r3
 8000736:	4610      	moveq	r0, r2
 8000738:	bd30      	pop	{r4, r5, pc}
 800073a:	ea91 0f03 	teq	r1, r3
 800073e:	bf1e      	ittt	ne
 8000740:	2100      	movne	r1, #0
 8000742:	2000      	movne	r0, #0
 8000744:	bd30      	popne	{r4, r5, pc}
 8000746:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800074a:	d105      	bne.n	8000758 <__adddf3+0x230>
 800074c:	0040      	lsls	r0, r0, #1
 800074e:	4149      	adcs	r1, r1
 8000750:	bf28      	it	cs
 8000752:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd30      	pop	{r4, r5, pc}
 8000758:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800075c:	bf3c      	itt	cc
 800075e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000762:	bd30      	popcc	{r4, r5, pc}
 8000764:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000768:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800076c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000770:	f04f 0000 	mov.w	r0, #0
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800077a:	bf1a      	itte	ne
 800077c:	4619      	movne	r1, r3
 800077e:	4610      	movne	r0, r2
 8000780:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000784:	bf1c      	itt	ne
 8000786:	460b      	movne	r3, r1
 8000788:	4602      	movne	r2, r0
 800078a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800078e:	bf06      	itte	eq
 8000790:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000794:	ea91 0f03 	teqeq	r1, r3
 8000798:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800079c:	bd30      	pop	{r4, r5, pc}
 800079e:	bf00      	nop

080007a0 <__aeabi_ui2d>:
 80007a0:	f090 0f00 	teq	r0, #0
 80007a4:	bf04      	itt	eq
 80007a6:	2100      	moveq	r1, #0
 80007a8:	4770      	bxeq	lr
 80007aa:	b530      	push	{r4, r5, lr}
 80007ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007b4:	f04f 0500 	mov.w	r5, #0
 80007b8:	f04f 0100 	mov.w	r1, #0
 80007bc:	e750      	b.n	8000660 <__adddf3+0x138>
 80007be:	bf00      	nop

080007c0 <__aeabi_i2d>:
 80007c0:	f090 0f00 	teq	r0, #0
 80007c4:	bf04      	itt	eq
 80007c6:	2100      	moveq	r1, #0
 80007c8:	4770      	bxeq	lr
 80007ca:	b530      	push	{r4, r5, lr}
 80007cc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007d0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007d4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	f04f 0100 	mov.w	r1, #0
 80007e0:	e73e      	b.n	8000660 <__adddf3+0x138>
 80007e2:	bf00      	nop

080007e4 <__aeabi_f2d>:
 80007e4:	0042      	lsls	r2, r0, #1
 80007e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80007ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007f2:	bf1f      	itttt	ne
 80007f4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007f8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007fc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000800:	4770      	bxne	lr
 8000802:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000806:	bf08      	it	eq
 8000808:	4770      	bxeq	lr
 800080a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800080e:	bf04      	itt	eq
 8000810:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000814:	4770      	bxeq	lr
 8000816:	b530      	push	{r4, r5, lr}
 8000818:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800081c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000820:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	e71c      	b.n	8000660 <__adddf3+0x138>
 8000826:	bf00      	nop

08000828 <__aeabi_ul2d>:
 8000828:	ea50 0201 	orrs.w	r2, r0, r1
 800082c:	bf08      	it	eq
 800082e:	4770      	bxeq	lr
 8000830:	b530      	push	{r4, r5, lr}
 8000832:	f04f 0500 	mov.w	r5, #0
 8000836:	e00a      	b.n	800084e <__aeabi_l2d+0x16>

08000838 <__aeabi_l2d>:
 8000838:	ea50 0201 	orrs.w	r2, r0, r1
 800083c:	bf08      	it	eq
 800083e:	4770      	bxeq	lr
 8000840:	b530      	push	{r4, r5, lr}
 8000842:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000846:	d502      	bpl.n	800084e <__aeabi_l2d+0x16>
 8000848:	4240      	negs	r0, r0
 800084a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800084e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000852:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000856:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800085a:	f43f aed8 	beq.w	800060e <__adddf3+0xe6>
 800085e:	f04f 0203 	mov.w	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800086e:	bf18      	it	ne
 8000870:	3203      	addne	r2, #3
 8000872:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000876:	f1c2 0320 	rsb	r3, r2, #32
 800087a:	fa00 fc03 	lsl.w	ip, r0, r3
 800087e:	fa20 f002 	lsr.w	r0, r0, r2
 8000882:	fa01 fe03 	lsl.w	lr, r1, r3
 8000886:	ea40 000e 	orr.w	r0, r0, lr
 800088a:	fa21 f102 	lsr.w	r1, r1, r2
 800088e:	4414      	add	r4, r2
 8000890:	e6bd      	b.n	800060e <__adddf3+0xe6>
 8000892:	bf00      	nop

08000894 <__aeabi_d2uiz>:
 8000894:	004a      	lsls	r2, r1, #1
 8000896:	d211      	bcs.n	80008bc <__aeabi_d2uiz+0x28>
 8000898:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800089c:	d211      	bcs.n	80008c2 <__aeabi_d2uiz+0x2e>
 800089e:	d50d      	bpl.n	80008bc <__aeabi_d2uiz+0x28>
 80008a0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008a8:	d40e      	bmi.n	80008c8 <__aeabi_d2uiz+0x34>
 80008aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80008b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008b6:	fa23 f002 	lsr.w	r0, r3, r2
 80008ba:	4770      	bx	lr
 80008bc:	f04f 0000 	mov.w	r0, #0
 80008c0:	4770      	bx	lr
 80008c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008c6:	d102      	bne.n	80008ce <__aeabi_d2uiz+0x3a>
 80008c8:	f04f 30ff 	mov.w	r0, #4294967295
 80008cc:	4770      	bx	lr
 80008ce:	f04f 0000 	mov.w	r0, #0
 80008d2:	4770      	bx	lr

080008d4 <__aeabi_d2f>:
 80008d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008d8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008dc:	bf24      	itt	cs
 80008de:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80008e2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80008e6:	d90d      	bls.n	8000904 <__aeabi_d2f+0x30>
 80008e8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80008ec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008f0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008f4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80008f8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008fc:	bf08      	it	eq
 80008fe:	f020 0001 	biceq.w	r0, r0, #1
 8000902:	4770      	bx	lr
 8000904:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000908:	d121      	bne.n	800094e <__aeabi_d2f+0x7a>
 800090a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800090e:	bfbc      	itt	lt
 8000910:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000914:	4770      	bxlt	lr
 8000916:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800091a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800091e:	f1c2 0218 	rsb	r2, r2, #24
 8000922:	f1c2 0c20 	rsb	ip, r2, #32
 8000926:	fa10 f30c 	lsls.w	r3, r0, ip
 800092a:	fa20 f002 	lsr.w	r0, r0, r2
 800092e:	bf18      	it	ne
 8000930:	f040 0001 	orrne.w	r0, r0, #1
 8000934:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000938:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800093c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000940:	ea40 000c 	orr.w	r0, r0, ip
 8000944:	fa23 f302 	lsr.w	r3, r3, r2
 8000948:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800094c:	e7cc      	b.n	80008e8 <__aeabi_d2f+0x14>
 800094e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000952:	d107      	bne.n	8000964 <__aeabi_d2f+0x90>
 8000954:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000958:	bf1e      	ittt	ne
 800095a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800095e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000962:	4770      	bxne	lr
 8000964:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000968:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800096c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop

08000974 <__aeabi_frsub>:
 8000974:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000978:	e002      	b.n	8000980 <__addsf3>
 800097a:	bf00      	nop

0800097c <__aeabi_fsub>:
 800097c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000980 <__addsf3>:
 8000980:	0042      	lsls	r2, r0, #1
 8000982:	bf1f      	itttt	ne
 8000984:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000988:	ea92 0f03 	teqne	r2, r3
 800098c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000990:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000994:	d06a      	beq.n	8000a6c <__addsf3+0xec>
 8000996:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800099a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800099e:	bfc1      	itttt	gt
 80009a0:	18d2      	addgt	r2, r2, r3
 80009a2:	4041      	eorgt	r1, r0
 80009a4:	4048      	eorgt	r0, r1
 80009a6:	4041      	eorgt	r1, r0
 80009a8:	bfb8      	it	lt
 80009aa:	425b      	neglt	r3, r3
 80009ac:	2b19      	cmp	r3, #25
 80009ae:	bf88      	it	hi
 80009b0:	4770      	bxhi	lr
 80009b2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80009b6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009ba:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80009be:	bf18      	it	ne
 80009c0:	4240      	negne	r0, r0
 80009c2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009c6:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80009ca:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80009ce:	bf18      	it	ne
 80009d0:	4249      	negne	r1, r1
 80009d2:	ea92 0f03 	teq	r2, r3
 80009d6:	d03f      	beq.n	8000a58 <__addsf3+0xd8>
 80009d8:	f1a2 0201 	sub.w	r2, r2, #1
 80009dc:	fa41 fc03 	asr.w	ip, r1, r3
 80009e0:	eb10 000c 	adds.w	r0, r0, ip
 80009e4:	f1c3 0320 	rsb	r3, r3, #32
 80009e8:	fa01 f103 	lsl.w	r1, r1, r3
 80009ec:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80009f0:	d502      	bpl.n	80009f8 <__addsf3+0x78>
 80009f2:	4249      	negs	r1, r1
 80009f4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009f8:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80009fc:	d313      	bcc.n	8000a26 <__addsf3+0xa6>
 80009fe:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a02:	d306      	bcc.n	8000a12 <__addsf3+0x92>
 8000a04:	0840      	lsrs	r0, r0, #1
 8000a06:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a0a:	f102 0201 	add.w	r2, r2, #1
 8000a0e:	2afe      	cmp	r2, #254	@ 0xfe
 8000a10:	d251      	bcs.n	8000ab6 <__addsf3+0x136>
 8000a12:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000a16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a1a:	bf08      	it	eq
 8000a1c:	f020 0001 	biceq.w	r0, r0, #1
 8000a20:	ea40 0003 	orr.w	r0, r0, r3
 8000a24:	4770      	bx	lr
 8000a26:	0049      	lsls	r1, r1, #1
 8000a28:	eb40 0000 	adc.w	r0, r0, r0
 8000a2c:	3a01      	subs	r2, #1
 8000a2e:	bf28      	it	cs
 8000a30:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a34:	d2ed      	bcs.n	8000a12 <__addsf3+0x92>
 8000a36:	fab0 fc80 	clz	ip, r0
 8000a3a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a3e:	ebb2 020c 	subs.w	r2, r2, ip
 8000a42:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a46:	bfaa      	itet	ge
 8000a48:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a4c:	4252      	neglt	r2, r2
 8000a4e:	4318      	orrge	r0, r3
 8000a50:	bfbc      	itt	lt
 8000a52:	40d0      	lsrlt	r0, r2
 8000a54:	4318      	orrlt	r0, r3
 8000a56:	4770      	bx	lr
 8000a58:	f092 0f00 	teq	r2, #0
 8000a5c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000a60:	bf06      	itte	eq
 8000a62:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000a66:	3201      	addeq	r2, #1
 8000a68:	3b01      	subne	r3, #1
 8000a6a:	e7b5      	b.n	80009d8 <__addsf3+0x58>
 8000a6c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a70:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a74:	bf18      	it	ne
 8000a76:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a7a:	d021      	beq.n	8000ac0 <__addsf3+0x140>
 8000a7c:	ea92 0f03 	teq	r2, r3
 8000a80:	d004      	beq.n	8000a8c <__addsf3+0x10c>
 8000a82:	f092 0f00 	teq	r2, #0
 8000a86:	bf08      	it	eq
 8000a88:	4608      	moveq	r0, r1
 8000a8a:	4770      	bx	lr
 8000a8c:	ea90 0f01 	teq	r0, r1
 8000a90:	bf1c      	itt	ne
 8000a92:	2000      	movne	r0, #0
 8000a94:	4770      	bxne	lr
 8000a96:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000a9a:	d104      	bne.n	8000aa6 <__addsf3+0x126>
 8000a9c:	0040      	lsls	r0, r0, #1
 8000a9e:	bf28      	it	cs
 8000aa0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000aa4:	4770      	bx	lr
 8000aa6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000aaa:	bf3c      	itt	cc
 8000aac:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ab0:	4770      	bxcc	lr
 8000ab2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ab6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000aba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000abe:	4770      	bx	lr
 8000ac0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ac4:	bf16      	itet	ne
 8000ac6:	4608      	movne	r0, r1
 8000ac8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000acc:	4601      	movne	r1, r0
 8000ace:	0242      	lsls	r2, r0, #9
 8000ad0:	bf06      	itte	eq
 8000ad2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000ad6:	ea90 0f01 	teqeq	r0, r1
 8000ada:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_ui2f>:
 8000ae0:	f04f 0300 	mov.w	r3, #0
 8000ae4:	e004      	b.n	8000af0 <__aeabi_i2f+0x8>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_i2f>:
 8000ae8:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000aec:	bf48      	it	mi
 8000aee:	4240      	negmi	r0, r0
 8000af0:	ea5f 0c00 	movs.w	ip, r0
 8000af4:	bf08      	it	eq
 8000af6:	4770      	bxeq	lr
 8000af8:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000afc:	4601      	mov	r1, r0
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	e01c      	b.n	8000b3e <__aeabi_l2f+0x2a>

08000b04 <__aeabi_ul2f>:
 8000b04:	ea50 0201 	orrs.w	r2, r0, r1
 8000b08:	bf08      	it	eq
 8000b0a:	4770      	bxeq	lr
 8000b0c:	f04f 0300 	mov.w	r3, #0
 8000b10:	e00a      	b.n	8000b28 <__aeabi_l2f+0x14>
 8000b12:	bf00      	nop

08000b14 <__aeabi_l2f>:
 8000b14:	ea50 0201 	orrs.w	r2, r0, r1
 8000b18:	bf08      	it	eq
 8000b1a:	4770      	bxeq	lr
 8000b1c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000b20:	d502      	bpl.n	8000b28 <__aeabi_l2f+0x14>
 8000b22:	4240      	negs	r0, r0
 8000b24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b28:	ea5f 0c01 	movs.w	ip, r1
 8000b2c:	bf02      	ittt	eq
 8000b2e:	4684      	moveq	ip, r0
 8000b30:	4601      	moveq	r1, r0
 8000b32:	2000      	moveq	r0, #0
 8000b34:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000b38:	bf08      	it	eq
 8000b3a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000b3e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000b42:	fabc f28c 	clz	r2, ip
 8000b46:	3a08      	subs	r2, #8
 8000b48:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b4c:	db10      	blt.n	8000b70 <__aeabi_l2f+0x5c>
 8000b4e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b52:	4463      	add	r3, ip
 8000b54:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b58:	f1c2 0220 	rsb	r2, r2, #32
 8000b5c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000b60:	fa20 f202 	lsr.w	r2, r0, r2
 8000b64:	eb43 0002 	adc.w	r0, r3, r2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f102 0220 	add.w	r2, r2, #32
 8000b74:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b78:	f1c2 0220 	rsb	r2, r2, #32
 8000b7c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b80:	fa21 f202 	lsr.w	r2, r1, r2
 8000b84:	eb43 0002 	adc.w	r0, r3, r2
 8000b88:	bf08      	it	eq
 8000b8a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b8e:	4770      	bx	lr

08000b90 <__aeabi_f2uiz>:
 8000b90:	0042      	lsls	r2, r0, #1
 8000b92:	d20e      	bcs.n	8000bb2 <__aeabi_f2uiz+0x22>
 8000b94:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000b98:	d30b      	bcc.n	8000bb2 <__aeabi_f2uiz+0x22>
 8000b9a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000b9e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ba2:	d409      	bmi.n	8000bb8 <__aeabi_f2uiz+0x28>
 8000ba4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ba8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bac:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0000 	mov.w	r0, #0
 8000bb6:	4770      	bx	lr
 8000bb8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000bbc:	d101      	bne.n	8000bc2 <__aeabi_f2uiz+0x32>
 8000bbe:	0242      	lsls	r2, r0, #9
 8000bc0:	d102      	bne.n	8000bc8 <__aeabi_f2uiz+0x38>
 8000bc2:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000be0:	4b18      	ldr	r3, [pc, #96]	@ (8000c44 <MX_ADC1_Init+0x74>)
 8000be2:	4a19      	ldr	r2, [pc, #100]	@ (8000c48 <MX_ADC1_Init+0x78>)
 8000be4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000be6:	4b17      	ldr	r3, [pc, #92]	@ (8000c44 <MX_ADC1_Init+0x74>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bec:	4b15      	ldr	r3, [pc, #84]	@ (8000c44 <MX_ADC1_Init+0x74>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bf2:	4b14      	ldr	r3, [pc, #80]	@ (8000c44 <MX_ADC1_Init+0x74>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bf8:	4b12      	ldr	r3, [pc, #72]	@ (8000c44 <MX_ADC1_Init+0x74>)
 8000bfa:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000bfe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c00:	4b10      	ldr	r3, [pc, #64]	@ (8000c44 <MX_ADC1_Init+0x74>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000c06:	4b0f      	ldr	r3, [pc, #60]	@ (8000c44 <MX_ADC1_Init+0x74>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c0c:	480d      	ldr	r0, [pc, #52]	@ (8000c44 <MX_ADC1_Init+0x74>)
 8000c0e:	f002 fa2b 	bl	8003068 <HAL_ADC_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000c18:	f001 fe76 	bl	8002908 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000c1c:	230a      	movs	r3, #10
 8000c1e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c20:	2301      	movs	r3, #1
 8000c22:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c24:	2300      	movs	r3, #0
 8000c26:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4805      	ldr	r0, [pc, #20]	@ (8000c44 <MX_ADC1_Init+0x74>)
 8000c2e:	f002 fcdf 	bl	80035f0 <HAL_ADC_ConfigChannel>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000c38:	f001 fe66 	bl	8002908 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c3c:	bf00      	nop
 8000c3e:	3710      	adds	r7, #16
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	200000b4 	.word	0x200000b4
 8000c48:	40012400 	.word	0x40012400

08000c4c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000c5c:	4b18      	ldr	r3, [pc, #96]	@ (8000cc0 <MX_ADC2_Init+0x74>)
 8000c5e:	4a19      	ldr	r2, [pc, #100]	@ (8000cc4 <MX_ADC2_Init+0x78>)
 8000c60:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c62:	4b17      	ldr	r3, [pc, #92]	@ (8000cc0 <MX_ADC2_Init+0x74>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000c68:	4b15      	ldr	r3, [pc, #84]	@ (8000cc0 <MX_ADC2_Init+0x74>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000c6e:	4b14      	ldr	r3, [pc, #80]	@ (8000cc0 <MX_ADC2_Init+0x74>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c74:	4b12      	ldr	r3, [pc, #72]	@ (8000cc0 <MX_ADC2_Init+0x74>)
 8000c76:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000c7a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c7c:	4b10      	ldr	r3, [pc, #64]	@ (8000cc0 <MX_ADC2_Init+0x74>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000c82:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc0 <MX_ADC2_Init+0x74>)
 8000c84:	2201      	movs	r2, #1
 8000c86:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000c88:	480d      	ldr	r0, [pc, #52]	@ (8000cc0 <MX_ADC2_Init+0x74>)
 8000c8a:	f002 f9ed 	bl	8003068 <HAL_ADC_Init>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000c94:	f001 fe38 	bl	8002908 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000c98:	230b      	movs	r3, #11
 8000c9a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ca4:	1d3b      	adds	r3, r7, #4
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4805      	ldr	r0, [pc, #20]	@ (8000cc0 <MX_ADC2_Init+0x74>)
 8000caa:	f002 fca1 	bl	80035f0 <HAL_ADC_ConfigChannel>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000cb4:	f001 fe28 	bl	8002908 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000cb8:	bf00      	nop
 8000cba:	3710      	adds	r7, #16
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	200000e4 	.word	0x200000e4
 8000cc4:	40012800 	.word	0x40012800

08000cc8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08a      	sub	sp, #40	@ 0x28
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	f107 0318 	add.w	r3, r7, #24
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a28      	ldr	r2, [pc, #160]	@ (8000d84 <HAL_ADC_MspInit+0xbc>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d122      	bne.n	8000d2e <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ce8:	4b27      	ldr	r3, [pc, #156]	@ (8000d88 <HAL_ADC_MspInit+0xc0>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	4a26      	ldr	r2, [pc, #152]	@ (8000d88 <HAL_ADC_MspInit+0xc0>)
 8000cee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cf2:	6193      	str	r3, [r2, #24]
 8000cf4:	4b24      	ldr	r3, [pc, #144]	@ (8000d88 <HAL_ADC_MspInit+0xc0>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000cfc:	617b      	str	r3, [r7, #20]
 8000cfe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d00:	4b21      	ldr	r3, [pc, #132]	@ (8000d88 <HAL_ADC_MspInit+0xc0>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	4a20      	ldr	r2, [pc, #128]	@ (8000d88 <HAL_ADC_MspInit+0xc0>)
 8000d06:	f043 0310 	orr.w	r3, r3, #16
 8000d0a:	6193      	str	r3, [r2, #24]
 8000d0c:	4b1e      	ldr	r3, [pc, #120]	@ (8000d88 <HAL_ADC_MspInit+0xc0>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	f003 0310 	and.w	r3, r3, #16
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d20:	f107 0318 	add.w	r3, r7, #24
 8000d24:	4619      	mov	r1, r3
 8000d26:	4819      	ldr	r0, [pc, #100]	@ (8000d8c <HAL_ADC_MspInit+0xc4>)
 8000d28:	f002 ffb6 	bl	8003c98 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000d2c:	e026      	b.n	8000d7c <HAL_ADC_MspInit+0xb4>
  else if(adcHandle->Instance==ADC2)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a17      	ldr	r2, [pc, #92]	@ (8000d90 <HAL_ADC_MspInit+0xc8>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d121      	bne.n	8000d7c <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000d38:	4b13      	ldr	r3, [pc, #76]	@ (8000d88 <HAL_ADC_MspInit+0xc0>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	4a12      	ldr	r2, [pc, #72]	@ (8000d88 <HAL_ADC_MspInit+0xc0>)
 8000d3e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d42:	6193      	str	r3, [r2, #24]
 8000d44:	4b10      	ldr	r3, [pc, #64]	@ (8000d88 <HAL_ADC_MspInit+0xc0>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d50:	4b0d      	ldr	r3, [pc, #52]	@ (8000d88 <HAL_ADC_MspInit+0xc0>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	4a0c      	ldr	r2, [pc, #48]	@ (8000d88 <HAL_ADC_MspInit+0xc0>)
 8000d56:	f043 0310 	orr.w	r3, r3, #16
 8000d5a:	6193      	str	r3, [r2, #24]
 8000d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d88 <HAL_ADC_MspInit+0xc0>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	f003 0310 	and.w	r3, r3, #16
 8000d64:	60bb      	str	r3, [r7, #8]
 8000d66:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d70:	f107 0318 	add.w	r3, r7, #24
 8000d74:	4619      	mov	r1, r3
 8000d76:	4805      	ldr	r0, [pc, #20]	@ (8000d8c <HAL_ADC_MspInit+0xc4>)
 8000d78:	f002 ff8e 	bl	8003c98 <HAL_GPIO_Init>
}
 8000d7c:	bf00      	nop
 8000d7e:	3728      	adds	r7, #40	@ 0x28
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40012400 	.word	0x40012400
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	40011000 	.word	0x40011000
 8000d90:	40012800 	.word	0x40012800

08000d94 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b088      	sub	sp, #32
 8000d98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9a:	f107 0310 	add.w	r3, r7, #16
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da8:	4b42      	ldr	r3, [pc, #264]	@ (8000eb4 <MX_GPIO_Init+0x120>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	4a41      	ldr	r2, [pc, #260]	@ (8000eb4 <MX_GPIO_Init+0x120>)
 8000dae:	f043 0310 	orr.w	r3, r3, #16
 8000db2:	6193      	str	r3, [r2, #24]
 8000db4:	4b3f      	ldr	r3, [pc, #252]	@ (8000eb4 <MX_GPIO_Init+0x120>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	f003 0310 	and.w	r3, r3, #16
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dc0:	4b3c      	ldr	r3, [pc, #240]	@ (8000eb4 <MX_GPIO_Init+0x120>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	4a3b      	ldr	r2, [pc, #236]	@ (8000eb4 <MX_GPIO_Init+0x120>)
 8000dc6:	f043 0320 	orr.w	r3, r3, #32
 8000dca:	6193      	str	r3, [r2, #24]
 8000dcc:	4b39      	ldr	r3, [pc, #228]	@ (8000eb4 <MX_GPIO_Init+0x120>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	f003 0320 	and.w	r3, r3, #32
 8000dd4:	60bb      	str	r3, [r7, #8]
 8000dd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd8:	4b36      	ldr	r3, [pc, #216]	@ (8000eb4 <MX_GPIO_Init+0x120>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	4a35      	ldr	r2, [pc, #212]	@ (8000eb4 <MX_GPIO_Init+0x120>)
 8000dde:	f043 0304 	orr.w	r3, r3, #4
 8000de2:	6193      	str	r3, [r2, #24]
 8000de4:	4b33      	ldr	r3, [pc, #204]	@ (8000eb4 <MX_GPIO_Init+0x120>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	f003 0304 	and.w	r3, r3, #4
 8000dec:	607b      	str	r3, [r7, #4]
 8000dee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df0:	4b30      	ldr	r3, [pc, #192]	@ (8000eb4 <MX_GPIO_Init+0x120>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	4a2f      	ldr	r2, [pc, #188]	@ (8000eb4 <MX_GPIO_Init+0x120>)
 8000df6:	f043 0308 	orr.w	r3, r3, #8
 8000dfa:	6193      	str	r3, [r2, #24]
 8000dfc:	4b2d      	ldr	r3, [pc, #180]	@ (8000eb4 <MX_GPIO_Init+0x120>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	f003 0308 	and.w	r3, r3, #8
 8000e04:	603b      	str	r3, [r7, #0]
 8000e06:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SSR_3_Pin|SSR_2_Pin|SSR_1_Pin|ENABLE_M1_Pin
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f64f 71dc 	movw	r1, #65500	@ 0xffdc
 8000e0e:	482a      	ldr	r0, [pc, #168]	@ (8000eb8 <MX_GPIO_Init+0x124>)
 8000e10:	f003 f8c6 	bl	8003fa0 <HAL_GPIO_WritePin>
                          |ENABLE_M2_Pin|DIR_Pin|SSR_6_Pin|SSR_5_Pin
                          |RELAY_RESET_3_Pin|RELAY_RESET_2_Pin|RELAY_K7_Pin|RELAY_K1_Pin
                          |RELAY_K2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENABLE_M3_Pin|ENABLE_M4_Pin|MUX_SELECT_Pin|ENABLE_M5_Pin
 8000e14:	2200      	movs	r2, #0
 8000e16:	f649 11f7 	movw	r1, #39415	@ 0x99f7
 8000e1a:	4828      	ldr	r0, [pc, #160]	@ (8000ebc <MX_GPIO_Init+0x128>)
 8000e1c:	f003 f8c0 	bl	8003fa0 <HAL_GPIO_WritePin>
                          |ENABLE_M6_Pin|ENABLE_M7_Pin|ENABLE_M8_Pin|RELAY_K12_CAL_RES_Pin
                          |RELAY_K11_CAL_CONT_Pin|RELAY_K9_K10_GND_COND_Pin|RELAY_K8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|SSR_8_Pin|SSR_7_Pin|RELAY_K4_Pin
 8000e20:	2200      	movs	r2, #0
 8000e22:	f24c 313a 	movw	r1, #49978	@ 0xc33a
 8000e26:	4826      	ldr	r0, [pc, #152]	@ (8000ec0 <MX_GPIO_Init+0x12c>)
 8000e28:	f003 f8ba 	bl	8003fa0 <HAL_GPIO_WritePin>
                          |RELAY_K5_Pin|RELAY_K6_Pin|RELAY_RESET_1_Pin|SSR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_K3_GPIO_Port, RELAY_K3_Pin, GPIO_PIN_RESET);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2104      	movs	r1, #4
 8000e30:	4824      	ldr	r0, [pc, #144]	@ (8000ec4 <MX_GPIO_Init+0x130>)
 8000e32:	f003 f8b5 	bl	8003fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = SSR_3_Pin|SSR_2_Pin|SSR_1_Pin|ENABLE_M1_Pin
 8000e36:	f64f 73dc 	movw	r3, #65500	@ 0xffdc
 8000e3a:	613b      	str	r3, [r7, #16]
                          |ENABLE_M2_Pin|DIR_Pin|SSR_6_Pin|SSR_5_Pin
                          |RELAY_RESET_3_Pin|RELAY_RESET_2_Pin|RELAY_K7_Pin|RELAY_K1_Pin
                          |RELAY_K2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2302      	movs	r3, #2
 8000e46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e48:	f107 0310 	add.w	r3, r7, #16
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	481a      	ldr	r0, [pc, #104]	@ (8000eb8 <MX_GPIO_Init+0x124>)
 8000e50:	f002 ff22 	bl	8003c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ENABLE_M3_Pin|ENABLE_M4_Pin|MUX_SELECT_Pin|ENABLE_M5_Pin
 8000e54:	f649 13f7 	movw	r3, #39415	@ 0x99f7
 8000e58:	613b      	str	r3, [r7, #16]
                          |ENABLE_M6_Pin|ENABLE_M7_Pin|ENABLE_M8_Pin|RELAY_K12_CAL_RES_Pin
                          |RELAY_K11_CAL_CONT_Pin|RELAY_K9_K10_GND_COND_Pin|RELAY_K8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e62:	2302      	movs	r3, #2
 8000e64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e66:	f107 0310 	add.w	r3, r7, #16
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4813      	ldr	r0, [pc, #76]	@ (8000ebc <MX_GPIO_Init+0x128>)
 8000e6e:	f002 ff13 	bl	8003c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_Pin|SSR_8_Pin|SSR_7_Pin|RELAY_K4_Pin
 8000e72:	f24c 333a 	movw	r3, #49978	@ 0xc33a
 8000e76:	613b      	str	r3, [r7, #16]
                          |RELAY_K5_Pin|RELAY_K6_Pin|RELAY_RESET_1_Pin|SSR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2302      	movs	r3, #2
 8000e82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e84:	f107 0310 	add.w	r3, r7, #16
 8000e88:	4619      	mov	r1, r3
 8000e8a:	480d      	ldr	r0, [pc, #52]	@ (8000ec0 <MX_GPIO_Init+0x12c>)
 8000e8c:	f002 ff04 	bl	8003c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RELAY_K3_Pin;
 8000e90:	2304      	movs	r3, #4
 8000e92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e94:	2301      	movs	r3, #1
 8000e96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RELAY_K3_GPIO_Port, &GPIO_InitStruct);
 8000ea0:	f107 0310 	add.w	r3, r7, #16
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4807      	ldr	r0, [pc, #28]	@ (8000ec4 <MX_GPIO_Init+0x130>)
 8000ea8:	f002 fef6 	bl	8003c98 <HAL_GPIO_Init>

}
 8000eac:	bf00      	nop
 8000eae:	3720      	adds	r7, #32
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	40011000 	.word	0x40011000
 8000ebc:	40010800 	.word	0x40010800
 8000ec0:	40010c00 	.word	0x40010c00
 8000ec4:	40011400 	.word	0x40011400

08000ec8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ecc:	4b12      	ldr	r3, [pc, #72]	@ (8000f18 <MX_I2C1_Init+0x50>)
 8000ece:	4a13      	ldr	r2, [pc, #76]	@ (8000f1c <MX_I2C1_Init+0x54>)
 8000ed0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ed2:	4b11      	ldr	r3, [pc, #68]	@ (8000f18 <MX_I2C1_Init+0x50>)
 8000ed4:	4a12      	ldr	r2, [pc, #72]	@ (8000f20 <MX_I2C1_Init+0x58>)
 8000ed6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f18 <MX_I2C1_Init+0x50>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ede:	4b0e      	ldr	r3, [pc, #56]	@ (8000f18 <MX_I2C1_Init+0x50>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f18 <MX_I2C1_Init+0x50>)
 8000ee6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000eea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000eec:	4b0a      	ldr	r3, [pc, #40]	@ (8000f18 <MX_I2C1_Init+0x50>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ef2:	4b09      	ldr	r3, [pc, #36]	@ (8000f18 <MX_I2C1_Init+0x50>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ef8:	4b07      	ldr	r3, [pc, #28]	@ (8000f18 <MX_I2C1_Init+0x50>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000efe:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <MX_I2C1_Init+0x50>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f04:	4804      	ldr	r0, [pc, #16]	@ (8000f18 <MX_I2C1_Init+0x50>)
 8000f06:	f003 f863 	bl	8003fd0 <HAL_I2C_Init>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f10:	f001 fcfa 	bl	8002908 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000114 	.word	0x20000114
 8000f1c:	40005400 	.word	0x40005400
 8000f20:	000186a0 	.word	0x000186a0

08000f24 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b088      	sub	sp, #32
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	f107 0310 	add.w	r3, r7, #16
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a15      	ldr	r2, [pc, #84]	@ (8000f94 <HAL_I2C_MspInit+0x70>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d123      	bne.n	8000f8c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f44:	4b14      	ldr	r3, [pc, #80]	@ (8000f98 <HAL_I2C_MspInit+0x74>)
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	4a13      	ldr	r2, [pc, #76]	@ (8000f98 <HAL_I2C_MspInit+0x74>)
 8000f4a:	f043 0308 	orr.w	r3, r3, #8
 8000f4e:	6193      	str	r3, [r2, #24]
 8000f50:	4b11      	ldr	r3, [pc, #68]	@ (8000f98 <HAL_I2C_MspInit+0x74>)
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	f003 0308 	and.w	r3, r3, #8
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f5c:	23c0      	movs	r3, #192	@ 0xc0
 8000f5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f60:	2312      	movs	r3, #18
 8000f62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f64:	2303      	movs	r3, #3
 8000f66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f68:	f107 0310 	add.w	r3, r7, #16
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	480b      	ldr	r0, [pc, #44]	@ (8000f9c <HAL_I2C_MspInit+0x78>)
 8000f70:	f002 fe92 	bl	8003c98 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f74:	4b08      	ldr	r3, [pc, #32]	@ (8000f98 <HAL_I2C_MspInit+0x74>)
 8000f76:	69db      	ldr	r3, [r3, #28]
 8000f78:	4a07      	ldr	r2, [pc, #28]	@ (8000f98 <HAL_I2C_MspInit+0x74>)
 8000f7a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f7e:	61d3      	str	r3, [r2, #28]
 8000f80:	4b05      	ldr	r3, [pc, #20]	@ (8000f98 <HAL_I2C_MspInit+0x74>)
 8000f82:	69db      	ldr	r3, [r3, #28]
 8000f84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000f8c:	bf00      	nop
 8000f8e:	3720      	adds	r7, #32
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40005400 	.word	0x40005400
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	40010c00 	.word	0x40010c00

08000fa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa4:	f001 ffda 	bl	8002f5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa8:	f000 f844 	bl	8001034 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fac:	f7ff fef2 	bl	8000d94 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000fb0:	f001 fd84 	bl	8002abc <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000fb4:	f001 fe48 	bl	8002c48 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000fb8:	f7ff fe0a 	bl	8000bd0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000fbc:	f7ff fe46 	bl	8000c4c <MX_ADC2_Init>
  MX_I2C1_Init();
 8000fc0:	f7ff ff82 	bl	8000ec8 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000fc4:	f001 fe6a 	bl	8002c9c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // Retarget IO to UART
  RetargetInit(&huart1);
 8000fc8:	4816      	ldr	r0, [pc, #88]	@ (8001024 <main+0x84>)
 8000fca:	f001 ff47 	bl	8002e5c <RetargetInit>
  // Initialize stepper motors
  motor_init();
 8000fce:	f001 fba7 	bl	8002720 <motor_init>
  // initialize multiplexer
  multiplexer_set(MUX_STM32);
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	f000 ff66 	bl	8001ea4 <multiplexer_set>
  // Initialize relays
  relay_init();
 8000fd8:	f001 f9a0 	bl	800231c <relay_init>
  // enable receive interrupt
  uartrx_interrupt_init();
 8000fdc:	f001 f81a 	bl	8002014 <uartrx_interrupt_init>
  // Initialize autolauncher parameters i.e. read eeprom
  parameter_init();
 8000fe0:	f000 ff94 	bl	8001f0c <parameter_init>
  // display main menu at startup
  menu_main();
 8000fe4:	f000 fdc8 	bl	8001b78 <menu_main>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // menu control loop
	  if(active == rxStatus){ // set to active with UART RX interrupt
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8001028 <main+0x88>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d115      	bne.n	800101c <main+0x7c>
		  rxStatus = idle;
 8000ff0:	4b0d      	ldr	r3, [pc, #52]	@ (8001028 <main+0x88>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	701a      	strb	r2, [r3, #0]
		  if( mainMenu == activeMenu){
 8000ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800102c <main+0x8c>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d105      	bne.n	800100a <main+0x6a>
			  main_process_input(rxChar); // go to main switch case menu
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	@ (8001030 <main+0x90>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	4618      	mov	r0, r3
 8001004:	f000 f866 	bl	80010d4 <main_process_input>
 8001008:	e008      	b.n	800101c <main+0x7c>
		  } else if ( configMenu == activeMenu){
 800100a:	4b08      	ldr	r3, [pc, #32]	@ (800102c <main+0x8c>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d104      	bne.n	800101c <main+0x7c>
			  config_process_input(rxChar);
 8001012:	4b07      	ldr	r3, [pc, #28]	@ (8001030 <main+0x90>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	4618      	mov	r0, r3
 8001018:	f000 faa2 	bl	8001560 <config_process_input>
		  }
	  }
	  // monitor voltage and send alarm if it's below a threshold
	  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	  HAL_Delay(100); // needed to debug, remove
 800101c:	2064      	movs	r0, #100	@ 0x64
 800101e:	f001 ffff 	bl	8003020 <HAL_Delay>
	  if(active == rxStatus){ // set to active with UART RX interrupt
 8001022:	e7e1      	b.n	8000fe8 <main+0x48>
 8001024:	200001bc 	.word	0x200001bc
 8001028:	2000016a 	.word	0x2000016a
 800102c:	2000016b 	.word	0x2000016b
 8001030:	2000016d 	.word	0x2000016d

08001034 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b094      	sub	sp, #80	@ 0x50
 8001038:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800103e:	2228      	movs	r2, #40	@ 0x28
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f006 fd34 	bl	8007ab0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001058:	1d3b      	adds	r3, r7, #4
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001064:	2302      	movs	r3, #2
 8001066:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001068:	2301      	movs	r3, #1
 800106a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800106c:	2310      	movs	r3, #16
 800106e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001070:	2300      	movs	r3, #0
 8001072:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001074:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001078:	4618      	mov	r0, r3
 800107a:	f003 ffdd 	bl	8005038 <HAL_RCC_OscConfig>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001084:	f001 fc40 	bl	8002908 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001088:	230f      	movs	r3, #15
 800108a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800108c:	2300      	movs	r3, #0
 800108e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001090:	2300      	movs	r3, #0
 8001092:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001094:	2300      	movs	r3, #0
 8001096:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001098:	2300      	movs	r3, #0
 800109a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	2100      	movs	r1, #0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f004 fa4a 	bl	800553c <HAL_RCC_ClockConfig>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80010ae:	f001 fc2b 	bl	8002908 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010b2:	2302      	movs	r3, #2
 80010b4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010ba:	1d3b      	adds	r3, r7, #4
 80010bc:	4618      	mov	r0, r3
 80010be:	f004 fbcb 	bl	8005858 <HAL_RCCEx_PeriphCLKConfig>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80010c8:	f001 fc1e 	bl	8002908 <Error_Handler>
  }
}
 80010cc:	bf00      	nop
 80010ce:	3750      	adds	r7, #80	@ 0x50
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <main_process_input>:




/* Process char received while in Main menu */
void main_process_input(char option){
 80010d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
	printf("\r\n> Executing OPTION (%c) --> ", option);
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	4619      	mov	r1, r3
 80010e2:	48cb      	ldr	r0, [pc, #812]	@ (8001410 <main_process_input+0x33c>)
 80010e4:	f006 fac8 	bl	8007678 <iprintf>

	switch (option){
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	3b30      	subs	r3, #48	@ 0x30
 80010ec:	2b4e      	cmp	r3, #78	@ 0x4e
 80010ee:	f200 8221 	bhi.w	8001534 <main_process_input+0x460>
 80010f2:	a201      	add	r2, pc, #4	@ (adr r2, 80010f8 <main_process_input+0x24>)
 80010f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f8:	08001235 	.word	0x08001235
 80010fc:	08001249 	.word	0x08001249
 8001100:	08001257 	.word	0x08001257
 8001104:	08001265 	.word	0x08001265
 8001108:	08001273 	.word	0x08001273
 800110c:	08001281 	.word	0x08001281
 8001110:	0800128f 	.word	0x0800128f
 8001114:	0800129d 	.word	0x0800129d
 8001118:	080012bb 	.word	0x080012bb
 800111c:	08001535 	.word	0x08001535
 8001120:	08001535 	.word	0x08001535
 8001124:	08001535 	.word	0x08001535
 8001128:	08001535 	.word	0x08001535
 800112c:	08001535 	.word	0x08001535
 8001130:	08001535 	.word	0x08001535
 8001134:	08001535 	.word	0x08001535
 8001138:	08001535 	.word	0x08001535
 800113c:	08001369 	.word	0x08001369
 8001140:	08001377 	.word	0x08001377
 8001144:	08001385 	.word	0x08001385
 8001148:	08001393 	.word	0x08001393
 800114c:	080013a1 	.word	0x080013a1
 8001150:	080013af 	.word	0x080013af
 8001154:	080014a1 	.word	0x080014a1
 8001158:	080013bd 	.word	0x080013bd
 800115c:	080013db 	.word	0x080013db
 8001160:	08001535 	.word	0x08001535
 8001164:	080013f9 	.word	0x080013f9
 8001168:	08001495 	.word	0x08001495
 800116c:	080014ad 	.word	0x080014ad
 8001170:	08001535 	.word	0x08001535
 8001174:	08001535 	.word	0x08001535
 8001178:	080014cb 	.word	0x080014cb
 800117c:	08001535 	.word	0x08001535
 8001180:	08001405 	.word	0x08001405
 8001184:	0800132d 	.word	0x0800132d
 8001188:	0800134b 	.word	0x0800134b
 800118c:	080012d9 	.word	0x080012d9
 8001190:	080012e7 	.word	0x080012e7
 8001194:	080012f5 	.word	0x080012f5
 8001198:	08001303 	.word	0x08001303
 800119c:	08001311 	.word	0x08001311
 80011a0:	0800131f 	.word	0x0800131f
 80011a4:	08001535 	.word	0x08001535
 80011a8:	08001535 	.word	0x08001535
 80011ac:	08001535 	.word	0x08001535
 80011b0:	08001535 	.word	0x08001535
 80011b4:	08001535 	.word	0x08001535
 80011b8:	08001535 	.word	0x08001535
 80011bc:	08001535 	.word	0x08001535
 80011c0:	08001535 	.word	0x08001535
 80011c4:	08001535 	.word	0x08001535
 80011c8:	08001535 	.word	0x08001535
 80011cc:	08001535 	.word	0x08001535
 80011d0:	08001535 	.word	0x08001535
 80011d4:	08001535 	.word	0x08001535
 80011d8:	08001535 	.word	0x08001535
 80011dc:	08001535 	.word	0x08001535
 80011e0:	08001535 	.word	0x08001535
 80011e4:	08001535 	.word	0x08001535
 80011e8:	08001535 	.word	0x08001535
 80011ec:	08001535 	.word	0x08001535
 80011f0:	08001535 	.word	0x08001535
 80011f4:	08001535 	.word	0x08001535
 80011f8:	08001535 	.word	0x08001535
 80011fc:	08001535 	.word	0x08001535
 8001200:	08001535 	.word	0x08001535
 8001204:	080014bf 	.word	0x080014bf
 8001208:	08001535 	.word	0x08001535
 800120c:	08001535 	.word	0x08001535
 8001210:	08001535 	.word	0x08001535
 8001214:	08001535 	.word	0x08001535
 8001218:	08001535 	.word	0x08001535
 800121c:	08001535 	.word	0x08001535
 8001220:	08001535 	.word	0x08001535
 8001224:	08001535 	.word	0x08001535
 8001228:	08001535 	.word	0x08001535
 800122c:	08001535 	.word	0x08001535
 8001230:	080014b3 	.word	0x080014b3
		// Connect XBT pins
    case '0':
        //engage calibration resistor
    	printf("unground_xbt(), calibration_resistor(), calibrate_on()\r\n");
 8001234:	4877      	ldr	r0, [pc, #476]	@ (8001414 <main_process_input+0x340>)
 8001236:	f006 fa87 	bl	8007748 <puts>
        unground_xbt();
 800123a:	f000 ff5b 	bl	80020f4 <unground_xbt>
        calibration_resistor();
 800123e:	f000 ff71 	bl	8002124 <calibration_resistor>
        calibrate_on();
 8001242:	f000 ff87 	bl	8002154 <calibrate_on>
        break;
 8001246:	e179      	b.n	800153c <main_process_input+0x468>
    case '1':
    	printf("connect_xbt_pin(1)\r\n");
 8001248:	4873      	ldr	r0, [pc, #460]	@ (8001418 <main_process_input+0x344>)
 800124a:	f006 fa7d 	bl	8007748 <puts>
        connect_xbt_pin(1);
 800124e:	2001      	movs	r0, #1
 8001250:	f000 ffc4 	bl	80021dc <connect_xbt_pin>
        break;
 8001254:	e172      	b.n	800153c <main_process_input+0x468>
    case '2':
        connect_xbt_pin(2);
 8001256:	2002      	movs	r0, #2
 8001258:	f000 ffc0 	bl	80021dc <connect_xbt_pin>
        printf("connect_xbt_pin(2)\r\n");
 800125c:	486f      	ldr	r0, [pc, #444]	@ (800141c <main_process_input+0x348>)
 800125e:	f006 fa73 	bl	8007748 <puts>
        break;
 8001262:	e16b      	b.n	800153c <main_process_input+0x468>
    case '3':
        connect_xbt_pin(3);
 8001264:	2003      	movs	r0, #3
 8001266:	f000 ffb9 	bl	80021dc <connect_xbt_pin>
        printf("connect_xbt_pin(3)\r\n");
 800126a:	486d      	ldr	r0, [pc, #436]	@ (8001420 <main_process_input+0x34c>)
 800126c:	f006 fa6c 	bl	8007748 <puts>
        break;
 8001270:	e164      	b.n	800153c <main_process_input+0x468>
    case '4':
        connect_xbt_pin(4);
 8001272:	2004      	movs	r0, #4
 8001274:	f000 ffb2 	bl	80021dc <connect_xbt_pin>
        printf("connect_xbt_pin(4)\r\n");
 8001278:	486a      	ldr	r0, [pc, #424]	@ (8001424 <main_process_input+0x350>)
 800127a:	f006 fa65 	bl	8007748 <puts>
        break;
 800127e:	e15d      	b.n	800153c <main_process_input+0x468>
    case '5':
        connect_xbt_pin(5);
 8001280:	2005      	movs	r0, #5
 8001282:	f000 ffab 	bl	80021dc <connect_xbt_pin>
        printf("connect_xbt_pin(5)\r\n");
 8001286:	4868      	ldr	r0, [pc, #416]	@ (8001428 <main_process_input+0x354>)
 8001288:	f006 fa5e 	bl	8007748 <puts>
        break;
 800128c:	e156      	b.n	800153c <main_process_input+0x468>
    case '6':
        connect_xbt_pin(6);
 800128e:	2006      	movs	r0, #6
 8001290:	f000 ffa4 	bl	80021dc <connect_xbt_pin>
        printf("connect_xbt_pin(6)\r\n");
 8001294:	4865      	ldr	r0, [pc, #404]	@ (800142c <main_process_input+0x358>)
 8001296:	f006 fa57 	bl	8007748 <puts>
        break;
 800129a:	e14f      	b.n	800153c <main_process_input+0x468>
    case '7':
        if (launcher.tubeCount == '8'){
 800129c:	4b64      	ldr	r3, [pc, #400]	@ (8001430 <main_process_input+0x35c>)
 800129e:	785b      	ldrb	r3, [r3, #1]
 80012a0:	2b38      	cmp	r3, #56	@ 0x38
 80012a2:	d106      	bne.n	80012b2 <main_process_input+0x1de>
            connect_xbt_pin(7);
 80012a4:	2007      	movs	r0, #7
 80012a6:	f000 ff99 	bl	80021dc <connect_xbt_pin>
            printf("connect_xbt_pin(7)\r\n");
 80012aa:	4862      	ldr	r0, [pc, #392]	@ (8001434 <main_process_input+0x360>)
 80012ac:	f006 fa4c 	bl	8007748 <puts>
        } else {
        	printf("\r\n* ERROR: tube 7 not available *\r\n");
        }
        break;
 80012b0:	e144      	b.n	800153c <main_process_input+0x468>
        	printf("\r\n* ERROR: tube 7 not available *\r\n");
 80012b2:	4861      	ldr	r0, [pc, #388]	@ (8001438 <main_process_input+0x364>)
 80012b4:	f006 fa48 	bl	8007748 <puts>
        break;
 80012b8:	e140      	b.n	800153c <main_process_input+0x468>
    case '8':
        if (launcher.tubeCount == '8'){
 80012ba:	4b5d      	ldr	r3, [pc, #372]	@ (8001430 <main_process_input+0x35c>)
 80012bc:	785b      	ldrb	r3, [r3, #1]
 80012be:	2b38      	cmp	r3, #56	@ 0x38
 80012c0:	d106      	bne.n	80012d0 <main_process_input+0x1fc>
        	connect_xbt_pin(8);
 80012c2:	2008      	movs	r0, #8
 80012c4:	f000 ff8a 	bl	80021dc <connect_xbt_pin>
        	printf("connect_xbt_pin(8)\r\n");
 80012c8:	485c      	ldr	r0, [pc, #368]	@ (800143c <main_process_input+0x368>)
 80012ca:	f006 fa3d 	bl	8007748 <puts>
        } else {
        	printf("\r\n* ERROR: tube 8 not available *\r\n");
        }
        break;
 80012ce:	e135      	b.n	800153c <main_process_input+0x468>
        	printf("\r\n* ERROR: tube 8 not available *\r\n");
 80012d0:	485b      	ldr	r0, [pc, #364]	@ (8001440 <main_process_input+0x36c>)
 80012d2:	f006 fa39 	bl	8007748 <puts>
        break;
 80012d6:	e131      	b.n	800153c <main_process_input+0x468>
        //EXTEND PINS
    case 'U':
    	printf("extend_pin(1)\r\n");
 80012d8:	485a      	ldr	r0, [pc, #360]	@ (8001444 <main_process_input+0x370>)
 80012da:	f006 fa35 	bl	8007748 <puts>
    	extend_pin(1);
 80012de:	2001      	movs	r0, #1
 80012e0:	f001 f85b 	bl	800239a <extend_pin>
        break;
 80012e4:	e12a      	b.n	800153c <main_process_input+0x468>
    case 'V':
        printf("extend_pin(2)\r\n");
 80012e6:	4858      	ldr	r0, [pc, #352]	@ (8001448 <main_process_input+0x374>)
 80012e8:	f006 fa2e 	bl	8007748 <puts>
        extend_pin(2);
 80012ec:	2002      	movs	r0, #2
 80012ee:	f001 f854 	bl	800239a <extend_pin>
        break;
 80012f2:	e123      	b.n	800153c <main_process_input+0x468>
    case 'W':
        printf("extend_pin(3)\r\n");
 80012f4:	4855      	ldr	r0, [pc, #340]	@ (800144c <main_process_input+0x378>)
 80012f6:	f006 fa27 	bl	8007748 <puts>
        extend_pin(3);
 80012fa:	2003      	movs	r0, #3
 80012fc:	f001 f84d 	bl	800239a <extend_pin>
        break;
 8001300:	e11c      	b.n	800153c <main_process_input+0x468>
    case 'X':
        printf("extend_pin(4)\r\n");
 8001302:	4853      	ldr	r0, [pc, #332]	@ (8001450 <main_process_input+0x37c>)
 8001304:	f006 fa20 	bl	8007748 <puts>
        extend_pin(4);
 8001308:	2004      	movs	r0, #4
 800130a:	f001 f846 	bl	800239a <extend_pin>
        break;
 800130e:	e115      	b.n	800153c <main_process_input+0x468>
    case 'Y':
        printf("extend_pin(5)\r\n");
 8001310:	4850      	ldr	r0, [pc, #320]	@ (8001454 <main_process_input+0x380>)
 8001312:	f006 fa19 	bl	8007748 <puts>
        extend_pin(5);
 8001316:	2005      	movs	r0, #5
 8001318:	f001 f83f 	bl	800239a <extend_pin>
        break;
 800131c:	e10e      	b.n	800153c <main_process_input+0x468>
    case 'Z':
        printf("extend_pin(6)\r\n");
 800131e:	484e      	ldr	r0, [pc, #312]	@ (8001458 <main_process_input+0x384>)
 8001320:	f006 fa12 	bl	8007748 <puts>
        extend_pin(6);
 8001324:	2006      	movs	r0, #6
 8001326:	f001 f838 	bl	800239a <extend_pin>
        break;
 800132a:	e107      	b.n	800153c <main_process_input+0x468>
    case 'S':
        if (launcher.tubeCount == '8'){
 800132c:	4b40      	ldr	r3, [pc, #256]	@ (8001430 <main_process_input+0x35c>)
 800132e:	785b      	ldrb	r3, [r3, #1]
 8001330:	2b38      	cmp	r3, #56	@ 0x38
 8001332:	d106      	bne.n	8001342 <main_process_input+0x26e>
        	printf("extend_pin(7)\r\n");
 8001334:	4849      	ldr	r0, [pc, #292]	@ (800145c <main_process_input+0x388>)
 8001336:	f006 fa07 	bl	8007748 <puts>
        	extend_pin(7);
 800133a:	2007      	movs	r0, #7
 800133c:	f001 f82d 	bl	800239a <extend_pin>
        } else {
        	printf("\r\n* ERROR: tube 7 not available *\r\n");
        }
        break;
 8001340:	e0fc      	b.n	800153c <main_process_input+0x468>
        	printf("\r\n* ERROR: tube 7 not available *\r\n");
 8001342:	483d      	ldr	r0, [pc, #244]	@ (8001438 <main_process_input+0x364>)
 8001344:	f006 fa00 	bl	8007748 <puts>
        break;
 8001348:	e0f8      	b.n	800153c <main_process_input+0x468>
    case 'T':
        if (launcher.tubeCount == '8'){
 800134a:	4b39      	ldr	r3, [pc, #228]	@ (8001430 <main_process_input+0x35c>)
 800134c:	785b      	ldrb	r3, [r3, #1]
 800134e:	2b38      	cmp	r3, #56	@ 0x38
 8001350:	d106      	bne.n	8001360 <main_process_input+0x28c>
        	printf("extend_pin(8)\r\n");
 8001352:	4843      	ldr	r0, [pc, #268]	@ (8001460 <main_process_input+0x38c>)
 8001354:	f006 f9f8 	bl	8007748 <puts>
        	extend_pin(8);
 8001358:	2008      	movs	r0, #8
 800135a:	f001 f81e 	bl	800239a <extend_pin>
        } else {
        	printf("\r\n* ERROR: tube 8 not available *\r\n");
        }
        break;
 800135e:	e0ed      	b.n	800153c <main_process_input+0x468>
        	printf("\r\n* ERROR: tube 8 not available *\r\n");
 8001360:	4837      	ldr	r0, [pc, #220]	@ (8001440 <main_process_input+0x36c>)
 8001362:	f006 f9f1 	bl	8007748 <puts>
        break;
 8001366:	e0e9      	b.n	800153c <main_process_input+0x468>
        //RETRACT PINS
    case 'A':
    	printf("retract_pin(1)\r\n");
 8001368:	483e      	ldr	r0, [pc, #248]	@ (8001464 <main_process_input+0x390>)
 800136a:	f006 f9ed 	bl	8007748 <puts>
    	retract_pin(1);
 800136e:	2001      	movs	r0, #1
 8001370:	f001 f821 	bl	80023b6 <retract_pin>
        break;
 8001374:	e0e2      	b.n	800153c <main_process_input+0x468>
    case 'B':
        printf("retract_pin(2)\r\n");
 8001376:	483c      	ldr	r0, [pc, #240]	@ (8001468 <main_process_input+0x394>)
 8001378:	f006 f9e6 	bl	8007748 <puts>
        retract_pin(2);
 800137c:	2002      	movs	r0, #2
 800137e:	f001 f81a 	bl	80023b6 <retract_pin>
        break;
 8001382:	e0db      	b.n	800153c <main_process_input+0x468>
    case 'C':
        printf("retract_pin(3)\r\n");
 8001384:	4839      	ldr	r0, [pc, #228]	@ (800146c <main_process_input+0x398>)
 8001386:	f006 f9df 	bl	8007748 <puts>
        retract_pin(3);
 800138a:	2003      	movs	r0, #3
 800138c:	f001 f813 	bl	80023b6 <retract_pin>
        break;
 8001390:	e0d4      	b.n	800153c <main_process_input+0x468>
    case 'D':
        printf("retract_pin(4)\r\n");
 8001392:	4837      	ldr	r0, [pc, #220]	@ (8001470 <main_process_input+0x39c>)
 8001394:	f006 f9d8 	bl	8007748 <puts>
        retract_pin(4);
 8001398:	2004      	movs	r0, #4
 800139a:	f001 f80c 	bl	80023b6 <retract_pin>
        break;
 800139e:	e0cd      	b.n	800153c <main_process_input+0x468>
    case 'E':
        printf("retract_pin(5)\r\n");
 80013a0:	4834      	ldr	r0, [pc, #208]	@ (8001474 <main_process_input+0x3a0>)
 80013a2:	f006 f9d1 	bl	8007748 <puts>
        retract_pin(5);
 80013a6:	2005      	movs	r0, #5
 80013a8:	f001 f805 	bl	80023b6 <retract_pin>
        break;
 80013ac:	e0c6      	b.n	800153c <main_process_input+0x468>
    case 'F':
        printf("retract_pin(6)\r\n");
 80013ae:	4832      	ldr	r0, [pc, #200]	@ (8001478 <main_process_input+0x3a4>)
 80013b0:	f006 f9ca 	bl	8007748 <puts>
        retract_pin(6);
 80013b4:	2006      	movs	r0, #6
 80013b6:	f000 fffe 	bl	80023b6 <retract_pin>
        break;
 80013ba:	e0bf      	b.n	800153c <main_process_input+0x468>
    case 'H':
        if (launcher.tubeCount == '8'){
 80013bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001430 <main_process_input+0x35c>)
 80013be:	785b      	ldrb	r3, [r3, #1]
 80013c0:	2b38      	cmp	r3, #56	@ 0x38
 80013c2:	d106      	bne.n	80013d2 <main_process_input+0x2fe>
        	printf("retract_pin(7)\r\n");
 80013c4:	482d      	ldr	r0, [pc, #180]	@ (800147c <main_process_input+0x3a8>)
 80013c6:	f006 f9bf 	bl	8007748 <puts>
        	retract_pin(7);
 80013ca:	2007      	movs	r0, #7
 80013cc:	f000 fff3 	bl	80023b6 <retract_pin>
        } else {
        	printf("* ERROR: tube 7 not available *\r\n");
        }
        break;
 80013d0:	e0b4      	b.n	800153c <main_process_input+0x468>
        	printf("* ERROR: tube 7 not available *\r\n");
 80013d2:	482b      	ldr	r0, [pc, #172]	@ (8001480 <main_process_input+0x3ac>)
 80013d4:	f006 f9b8 	bl	8007748 <puts>
        break;
 80013d8:	e0b0      	b.n	800153c <main_process_input+0x468>
    case 'I':
        if (launcher.tubeCount == '8'){
 80013da:	4b15      	ldr	r3, [pc, #84]	@ (8001430 <main_process_input+0x35c>)
 80013dc:	785b      	ldrb	r3, [r3, #1]
 80013de:	2b38      	cmp	r3, #56	@ 0x38
 80013e0:	d106      	bne.n	80013f0 <main_process_input+0x31c>
        	printf("retract_pin(8)\r\n");
 80013e2:	4828      	ldr	r0, [pc, #160]	@ (8001484 <main_process_input+0x3b0>)
 80013e4:	f006 f9b0 	bl	8007748 <puts>
        	retract_pin(8);
 80013e8:	2008      	movs	r0, #8
 80013ea:	f000 ffe4 	bl	80023b6 <retract_pin>
        } else {
        	printf("* ERROR: tube 8 not available *\r\n");
        }
        break;
 80013ee:	e0a5      	b.n	800153c <main_process_input+0x468>
        	printf("* ERROR: tube 8 not available *\r\n");
 80013f0:	4825      	ldr	r0, [pc, #148]	@ (8001488 <main_process_input+0x3b4>)
 80013f2:	f006 f9a9 	bl	8007748 <puts>
        break;
 80013f6:	e0a1      	b.n	800153c <main_process_input+0x468>
    case 'K':
    	printf("calibrate_on()\r\n");
 80013f8:	4824      	ldr	r0, [pc, #144]	@ (800148c <main_process_input+0x3b8>)
 80013fa:	f006 f9a5 	bl	8007748 <puts>
        calibrate_on();
 80013fe:	f000 fea9 	bl	8002154 <calibrate_on>
        break;
 8001402:	e09b      	b.n	800153c <main_process_input+0x468>
    case 'R':
    	printf("reset_relay()\r\n");
 8001404:	4822      	ldr	r0, [pc, #136]	@ (8001490 <main_process_input+0x3bc>)
 8001406:	f006 f99f 	bl	8007748 <puts>
        reset_relay();
 800140a:	f000 febb 	bl	8002184 <reset_relay>
        break;
 800140e:	e095      	b.n	800153c <main_process_input+0x468>
 8001410:	08008960 	.word	0x08008960
 8001414:	08008980 	.word	0x08008980
 8001418:	080089b8 	.word	0x080089b8
 800141c:	080089cc 	.word	0x080089cc
 8001420:	080089e0 	.word	0x080089e0
 8001424:	080089f4 	.word	0x080089f4
 8001428:	08008a08 	.word	0x08008a08
 800142c:	08008a1c 	.word	0x08008a1c
 8001430:	20000000 	.word	0x20000000
 8001434:	08008a30 	.word	0x08008a30
 8001438:	08008a44 	.word	0x08008a44
 800143c:	08008a68 	.word	0x08008a68
 8001440:	08008a7c 	.word	0x08008a7c
 8001444:	08008aa0 	.word	0x08008aa0
 8001448:	08008ab0 	.word	0x08008ab0
 800144c:	08008ac0 	.word	0x08008ac0
 8001450:	08008ad0 	.word	0x08008ad0
 8001454:	08008ae0 	.word	0x08008ae0
 8001458:	08008af0 	.word	0x08008af0
 800145c:	08008b00 	.word	0x08008b00
 8001460:	08008b10 	.word	0x08008b10
 8001464:	08008b20 	.word	0x08008b20
 8001468:	08008b30 	.word	0x08008b30
 800146c:	08008b40 	.word	0x08008b40
 8001470:	08008b50 	.word	0x08008b50
 8001474:	08008b60 	.word	0x08008b60
 8001478:	08008b70 	.word	0x08008b70
 800147c:	08008b80 	.word	0x08008b80
 8001480:	08008b90 	.word	0x08008b90
 8001484:	08008bb4 	.word	0x08008bb4
 8001488:	08008bc4 	.word	0x08008bc4
 800148c:	08008be8 	.word	0x08008be8
 8001490:	08008bf8 	.word	0x08008bf8
    case 'L':
    	printf("calibration_resistor()\r\n");
 8001494:	482b      	ldr	r0, [pc, #172]	@ (8001544 <main_process_input+0x470>)
 8001496:	f006 f957 	bl	8007748 <puts>
        calibration_resistor();
 800149a:	f000 fe43 	bl	8002124 <calibration_resistor>
        break;
 800149e:	e04d      	b.n	800153c <main_process_input+0x468>
    case 'G':
    	printf("unground_xbt()\r\n");
 80014a0:	4829      	ldr	r0, [pc, #164]	@ (8001548 <main_process_input+0x474>)
 80014a2:	f006 f951 	bl	8007748 <puts>
        unground_xbt();
 80014a6:	f000 fe25 	bl	80020f4 <unground_xbt>
        break;
 80014aa:	e047      	b.n	800153c <main_process_input+0x468>
    case 'M':
        menu_main();
 80014ac:	f000 fb64 	bl	8001b78 <menu_main>
        break;
 80014b0:	e044      	b.n	800153c <main_process_input+0x468>
    case '~':
        menu_config();
 80014b2:	f000 fbfd 	bl	8001cb0 <menu_config>
        activeMenu = configMenu; // set configuration menu flag
 80014b6:	4b25      	ldr	r3, [pc, #148]	@ (800154c <main_process_input+0x478>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	701a      	strb	r2, [r3, #0]
        break;
 80014bc:	e03e      	b.n	800153c <main_process_input+0x468>
    case 's':
        print_serial_number();
 80014be:	f000 fcc7 	bl	8001e50 <print_serial_number>
        printf("\r\n");
 80014c2:	4823      	ldr	r0, [pc, #140]	@ (8001550 <main_process_input+0x47c>)
 80014c4:	f006 f940 	bl	8007748 <puts>
        break;
 80014c8:	e038      	b.n	800153c <main_process_input+0x468>
    case 'P':
    	// read input voltage on autolauncher
    	analog_t vin = voltage_read(VOLTAGE_READ_SAMPLES);
 80014ca:	f107 0308 	add.w	r3, r7, #8
 80014ce:	2114      	movs	r1, #20
 80014d0:	4618      	mov	r0, r3
 80014d2:	f000 fdad 	bl	8002030 <voltage_read>
    	printf("[AD# %i] Vin= %i.%i V\r\n", vin.adcReading,(uint8_t)vin.realValue, (uint8_t)(vin.realValue * 10 - ((uint8_t)vin.realValue * 10)) );
 80014d6:	893b      	ldrh	r3, [r7, #8]
 80014d8:	461c      	mov	r4, r3
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff fb57 	bl	8000b90 <__aeabi_f2uiz>
 80014e2:	4603      	mov	r3, r0
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	461d      	mov	r5, r3
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	491a      	ldr	r1, [pc, #104]	@ (8001554 <main_process_input+0x480>)
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7fe ff61 	bl	80003b4 <__aeabi_fmul>
 80014f2:	4603      	mov	r3, r0
 80014f4:	461e      	mov	r6, r3
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fb49 	bl	8000b90 <__aeabi_f2uiz>
 80014fe:	4603      	mov	r3, r0
 8001500:	b2db      	uxtb	r3, r3
 8001502:	461a      	mov	r2, r3
 8001504:	4613      	mov	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff faeb 	bl	8000ae8 <__aeabi_i2f>
 8001512:	4603      	mov	r3, r0
 8001514:	4619      	mov	r1, r3
 8001516:	4630      	mov	r0, r6
 8001518:	f7ff fa30 	bl	800097c <__aeabi_fsub>
 800151c:	4603      	mov	r3, r0
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff fb36 	bl	8000b90 <__aeabi_f2uiz>
 8001524:	4603      	mov	r3, r0
 8001526:	b2db      	uxtb	r3, r3
 8001528:	462a      	mov	r2, r5
 800152a:	4621      	mov	r1, r4
 800152c:	480a      	ldr	r0, [pc, #40]	@ (8001558 <main_process_input+0x484>)
 800152e:	f006 f8a3 	bl	8007678 <iprintf>
    	break;
 8001532:	e003      	b.n	800153c <main_process_input+0x468>
    default:
        printf("\r\n** Unrecognized command!!** \r\n");
 8001534:	4809      	ldr	r0, [pc, #36]	@ (800155c <main_process_input+0x488>)
 8001536:	f006 f907 	bl	8007748 <puts>
        break;
 800153a:	bf00      	nop
	}
}
 800153c:	bf00      	nop
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001544:	08008c08 	.word	0x08008c08
 8001548:	08008c20 	.word	0x08008c20
 800154c:	2000016b 	.word	0x2000016b
 8001550:	08008c30 	.word	0x08008c30
 8001554:	41200000 	.word	0x41200000
 8001558:	08008c34 	.word	0x08008c34
 800155c:	08008c4c 	.word	0x08008c4c

08001560 <config_process_input>:

/* Process char received while in configuration menu */
void config_process_input(char option){
 8001560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001562:	b0d7      	sub	sp, #348	@ 0x15c
 8001564:	af02      	add	r7, sp, #8
 8001566:	4602      	mov	r2, r0
 8001568:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800156c:	f2a3 1349 	subw	r3, r3, #329	@ 0x149
 8001570:	701a      	strb	r2, [r3, #0]
    switch (option) {
 8001572:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001576:	f2a3 1349 	subw	r3, r3, #329	@ 0x149
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	3b31      	subs	r3, #49	@ 0x31
 800157e:	2b23      	cmp	r3, #35	@ 0x23
 8001580:	f200 82d8 	bhi.w	8001b34 <config_process_input+0x5d4>
 8001584:	a201      	add	r2, pc, #4	@ (adr r2, 800158c <config_process_input+0x2c>)
 8001586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800158a:	bf00      	nop
 800158c:	08001635 	.word	0x08001635
 8001590:	08001b35 	.word	0x08001b35
 8001594:	08001b35 	.word	0x08001b35
 8001598:	08001b35 	.word	0x08001b35
 800159c:	08001b35 	.word	0x08001b35
 80015a0:	08001b35 	.word	0x08001b35
 80015a4:	08001b35 	.word	0x08001b35
 80015a8:	08001b35 	.word	0x08001b35
 80015ac:	08001b35 	.word	0x08001b35
 80015b0:	08001b35 	.word	0x08001b35
 80015b4:	08001b35 	.word	0x08001b35
 80015b8:	08001b35 	.word	0x08001b35
 80015bc:	08001b35 	.word	0x08001b35
 80015c0:	08001b35 	.word	0x08001b35
 80015c4:	08001b35 	.word	0x08001b35
 80015c8:	08001b35 	.word	0x08001b35
 80015cc:	08001b35 	.word	0x08001b35
 80015d0:	08001b35 	.word	0x08001b35
 80015d4:	08001829 	.word	0x08001829
 80015d8:	08001b35 	.word	0x08001b35
 80015dc:	08001b35 	.word	0x08001b35
 80015e0:	08001b35 	.word	0x08001b35
 80015e4:	0800181b 	.word	0x0800181b
 80015e8:	08001b35 	.word	0x08001b35
 80015ec:	08001b35 	.word	0x08001b35
 80015f0:	0800180b 	.word	0x0800180b
 80015f4:	08001b35 	.word	0x08001b35
 80015f8:	08001b35 	.word	0x08001b35
 80015fc:	0800162f 	.word	0x0800162f
 8001600:	08001813 	.word	0x08001813
 8001604:	08001b35 	.word	0x08001b35
 8001608:	08001b35 	.word	0x08001b35
 800160c:	0800161d 	.word	0x0800161d
 8001610:	08001b35 	.word	0x08001b35
 8001614:	08001b35 	.word	0x08001b35
 8001618:	08001a73 	.word	0x08001a73
        case 'Q':
            printf("\n\rLeaving Auto launcher configuration menu\n\r");
 800161c:	48b9      	ldr	r0, [pc, #740]	@ (8001904 <config_process_input+0x3a4>)
 800161e:	f006 f82b 	bl	8007678 <iprintf>
            activeMenu = mainMenu; // set active menu flag to main menu
 8001622:	4bb9      	ldr	r3, [pc, #740]	@ (8001908 <config_process_input+0x3a8>)
 8001624:	2200      	movs	r2, #0
 8001626:	701a      	strb	r2, [r3, #0]
            menu_main();
 8001628:	f000 faa6 	bl	8001b78 <menu_main>
            break;
 800162c:	e286      	b.n	8001b3c <config_process_input+0x5dc>
        case 'M':
            menu_config();
 800162e:	f000 fb3f 	bl	8001cb0 <menu_config>
            break;
 8001632:	e283      	b.n	8001b3c <config_process_input+0x5dc>
        case '1':
        	// get the autolauncher tube count
        	char tubes[1];
        	char tubePrompt[] = "\r\nEnter AL tube count [6] or [8]: ";
 8001634:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001638:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800163c:	4ab3      	ldr	r2, [pc, #716]	@ (800190c <config_process_input+0x3ac>)
 800163e:	461c      	mov	r4, r3
 8001640:	4615      	mov	r5, r2
 8001642:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001644:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001646:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001648:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800164a:	682b      	ldr	r3, [r5, #0]
 800164c:	461a      	mov	r2, r3
 800164e:	8022      	strh	r2, [r4, #0]
 8001650:	3402      	adds	r4, #2
 8001652:	0c1b      	lsrs	r3, r3, #16
 8001654:	7023      	strb	r3, [r4, #0]
        	char tubeError[] = "\r\nERROR: Enter 6 or 8 !\r\n";
 8001656:	4bae      	ldr	r3, [pc, #696]	@ (8001910 <config_process_input+0x3b0>)
 8001658:	f507 7498 	add.w	r4, r7, #304	@ 0x130
 800165c:	461d      	mov	r5, r3
 800165e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001660:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001662:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001666:	c403      	stmia	r4!, {r0, r1}
 8001668:	8022      	strh	r2, [r4, #0]
        	char tubeCheck[] = {'6','8'};
 800166a:	f643 0336 	movw	r3, #14390	@ 0x3836
 800166e:	f8a7 312c 	strh.w	r3, [r7, #300]	@ 0x12c
        	get_user_input(tubePrompt, tubeError, 1, tubeCheck, tubes);
 8001672:	f507 7296 	add.w	r2, r7, #300	@ 0x12c
 8001676:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 800167a:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 800167e:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 8001682:	9300      	str	r3, [sp, #0]
 8001684:	4613      	mov	r3, r2
 8001686:	2201      	movs	r2, #1
 8001688:	f000 fb74 	bl	8001d74 <get_user_input>
//            			printf("\r\nError, Enter 6 or 8 !\r\n");
//            			print_inline("\r\nEnter AL tube count [6] or [8]: ");
//            		}
//            	}
//            }
            launcher.tubeCount = tubes[0];
 800168c:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8001690:	4ba0      	ldr	r3, [pc, #640]	@ (8001914 <config_process_input+0x3b4>)
 8001692:	705a      	strb	r2, [r3, #1]
            // get the autolauncher type, R regular or X extended, only for 8 tube AL
            if(launcher.tubeCount == '8'){
 8001694:	4b9f      	ldr	r3, [pc, #636]	@ (8001914 <config_process_input+0x3b4>)
 8001696:	785b      	ldrb	r3, [r3, #1]
 8001698:	2b38      	cmp	r3, #56	@ 0x38
 800169a:	d12f      	bne.n	80016fc <config_process_input+0x19c>
            	char type[1];
            	char typePrompt[] = "Enter launcher type, [X] extended or [R] regular: ";
 800169c:	4b9e      	ldr	r3, [pc, #632]	@ (8001918 <config_process_input+0x3b8>)
 800169e:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 80016a2:	461d      	mov	r5, r3
 80016a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016b0:	682b      	ldr	r3, [r5, #0]
 80016b2:	461a      	mov	r2, r3
 80016b4:	8022      	strh	r2, [r4, #0]
 80016b6:	3402      	adds	r4, #2
 80016b8:	0c1b      	lsrs	r3, r3, #16
 80016ba:	7023      	strb	r3, [r4, #0]
            	char typeError[] = "\r\nERROR: Enter X or R !\r\n";
 80016bc:	4b97      	ldr	r3, [pc, #604]	@ (800191c <config_process_input+0x3bc>)
 80016be:	f107 04a8 	add.w	r4, r7, #168	@ 0xa8
 80016c2:	461d      	mov	r5, r3
 80016c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016cc:	c403      	stmia	r4!, {r0, r1}
 80016ce:	8022      	strh	r2, [r4, #0]
            	char typeCheck[] = {'R','X'};
 80016d0:	f645 0352 	movw	r3, #22610	@ 0x5852
 80016d4:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
            	get_user_input(typePrompt, typeError, 1, typeCheck, type);
 80016d8:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 80016dc:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 80016e0:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 80016e4:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	4613      	mov	r3, r2
 80016ec:	2201      	movs	r2, #1
 80016ee:	f000 fb41 	bl	8001d74 <get_user_input>
            	launcher.type = type[0];
 80016f2:	f897 20c4 	ldrb.w	r2, [r7, #196]	@ 0xc4
 80016f6:	4b87      	ldr	r3, [pc, #540]	@ (8001914 <config_process_input+0x3b4>)
 80016f8:	709a      	strb	r2, [r3, #2]
 80016fa:	e002      	b.n	8001702 <config_process_input+0x1a2>
//                			print_inline("Enter launcher type, [X] extended or [R] regular: ");
//                		}
//                	}
//                }
            } else {
            	launcher.type = '?'; // if not 8 tubes, reset type to unknown
 80016fc:	4b85      	ldr	r3, [pc, #532]	@ (8001914 <config_process_input+0x3b4>)
 80016fe:	223f      	movs	r2, #63	@ 0x3f
 8001700:	709a      	strb	r2, [r3, #2]
            }
            //launcher.serialNumber = 55;
        	char serial[2];
        	char serialPrompt[] = "Enter a two-digit autolauncher serial number [00-99]: ";
 8001702:	4b87      	ldr	r3, [pc, #540]	@ (8001920 <config_process_input+0x3c0>)
 8001704:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 8001708:	461d      	mov	r5, r3
 800170a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800170c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800170e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001710:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001712:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001714:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001716:	e895 0003 	ldmia.w	r5, {r0, r1}
 800171a:	6020      	str	r0, [r4, #0]
 800171c:	3404      	adds	r4, #4
 800171e:	8021      	strh	r1, [r4, #0]
 8001720:	3402      	adds	r4, #2
 8001722:	0c0b      	lsrs	r3, r1, #16
 8001724:	7023      	strb	r3, [r4, #0]
        	char serialError[] = "\r\nEnter only numbers!\r\n";
 8001726:	4b7f      	ldr	r3, [pc, #508]	@ (8001924 <config_process_input+0x3c4>)
 8001728:	f507 7488 	add.w	r4, r7, #272	@ 0x110
 800172c:	461d      	mov	r5, r3
 800172e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001730:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001732:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001736:	e884 0003 	stmia.w	r4, {r0, r1}
        	char serialCheck[] = {'0','1','2','3','4','5','6','7','8','9'};
 800173a:	4a7b      	ldr	r2, [pc, #492]	@ (8001928 <config_process_input+0x3c8>)
 800173c:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001740:	ca07      	ldmia	r2, {r0, r1, r2}
 8001742:	c303      	stmia	r3!, {r0, r1}
 8001744:	801a      	strh	r2, [r3, #0]
        	get_user_input(serialPrompt, serialError, 2, serialCheck, serial);
 8001746:	f507 7282 	add.w	r2, r7, #260	@ 0x104
 800174a:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800174e:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 8001752:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	4613      	mov	r3, r2
 800175a:	2202      	movs	r2, #2
 800175c:	f000 fb0a 	bl	8001d74 <get_user_input>
        	launcher.serialNumber = (uint8_t)(serial[0] - '0') * 10 + (serial[1] - '0'); // convert to number, subtract '0' (48 dec)
 8001760:	f897 3128 	ldrb.w	r3, [r7, #296]	@ 0x128
 8001764:	461a      	mov	r2, r3
 8001766:	0092      	lsls	r2, r2, #2
 8001768:	4413      	add	r3, r2
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	b2da      	uxtb	r2, r3
 800176e:	f897 3129 	ldrb.w	r3, [r7, #297]	@ 0x129
 8001772:	4413      	add	r3, r2
 8001774:	b2db      	uxtb	r3, r3
 8001776:	3b10      	subs	r3, #16
 8001778:	b2da      	uxtb	r2, r3
 800177a:	4b66      	ldr	r3, [pc, #408]	@ (8001914 <config_process_input+0x3b4>)
 800177c:	701a      	strb	r2, [r3, #0]
//    			}
//    		}
//    		launcher.serialNumber = atoi(serial[0]) * 10 + atoi(serial[1]);
//    		printf("%s\r\n", launcher.serialNumber);
    		// set the AL configured flag and print configuration
            eeprom.configured = '|';
 800177e:	4b6b      	ldr	r3, [pc, #428]	@ (800192c <config_process_input+0x3cc>)
 8001780:	227c      	movs	r2, #124	@ 0x7c
 8001782:	715a      	strb	r2, [r3, #5]
            printf("\r\nTubes: %c | Type: %c | Serial: %i\r\n", launcher.tubeCount, launcher.type, launcher.serialNumber);
 8001784:	4b63      	ldr	r3, [pc, #396]	@ (8001914 <config_process_input+0x3b4>)
 8001786:	785b      	ldrb	r3, [r3, #1]
 8001788:	4619      	mov	r1, r3
 800178a:	4b62      	ldr	r3, [pc, #392]	@ (8001914 <config_process_input+0x3b4>)
 800178c:	789b      	ldrb	r3, [r3, #2]
 800178e:	461a      	mov	r2, r3
 8001790:	4b60      	ldr	r3, [pc, #384]	@ (8001914 <config_process_input+0x3b4>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	4866      	ldr	r0, [pc, #408]	@ (8001930 <config_process_input+0x3d0>)
 8001796:	f005 ff6f 	bl	8007678 <iprintf>

            // store parameters in eeprom
            eeprom_write(AL_TUBECOUNT, launcher.tubeCount);
 800179a:	4b5e      	ldr	r3, [pc, #376]	@ (8001914 <config_process_input+0x3b4>)
 800179c:	785b      	ldrb	r3, [r3, #1]
 800179e:	4619      	mov	r1, r3
 80017a0:	2000      	movs	r0, #0
 80017a2:	f000 fe95 	bl	80024d0 <eeprom_write>
            eeprom_write(AL_TYPE, launcher.type);
 80017a6:	4b5b      	ldr	r3, [pc, #364]	@ (8001914 <config_process_input+0x3b4>)
 80017a8:	789b      	ldrb	r3, [r3, #2]
 80017aa:	4619      	mov	r1, r3
 80017ac:	2001      	movs	r0, #1
 80017ae:	f000 fe8f 	bl	80024d0 <eeprom_write>
            eeprom_write(AL_SN, launcher.serialNumber);
 80017b2:	4b58      	ldr	r3, [pc, #352]	@ (8001914 <config_process_input+0x3b4>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	4619      	mov	r1, r3
 80017b8:	2002      	movs	r0, #2
 80017ba:	f000 fe89 	bl	80024d0 <eeprom_write>
            //eeprom_write(AL_SN1, launcher.serialNumber[0]);
            //eeprom_write(AL_SN2, launcher.serialNumber[1]);
            eeprom_write(AL_CONFIGED, eeprom.configured);
 80017be:	4b5b      	ldr	r3, [pc, #364]	@ (800192c <config_process_input+0x3cc>)
 80017c0:	795b      	ldrb	r3, [r3, #5]
 80017c2:	4619      	mov	r1, r3
 80017c4:	2003      	movs	r0, #3
 80017c6:	f000 fe83 	bl	80024d0 <eeprom_write>

            printf("Settings saved!");
 80017ca:	485a      	ldr	r0, [pc, #360]	@ (8001934 <config_process_input+0x3d4>)
 80017cc:	f005 ff54 	bl	8007678 <iprintf>
            printf("\r\nNew autolauncher configuration: Tubes: %c | Type: %c | Serial: %i | configed: %c\r\n", eeprom_read(AL_TUBECOUNT), eeprom_read(AL_TYPE), eeprom_read(AL_SN), eeprom_read(AL_CONFIGED));
 80017d0:	2000      	movs	r0, #0
 80017d2:	f000 feaf 	bl	8002534 <eeprom_read>
 80017d6:	4603      	mov	r3, r0
 80017d8:	461c      	mov	r4, r3
 80017da:	2001      	movs	r0, #1
 80017dc:	f000 feaa 	bl	8002534 <eeprom_read>
 80017e0:	4603      	mov	r3, r0
 80017e2:	461d      	mov	r5, r3
 80017e4:	2002      	movs	r0, #2
 80017e6:	f000 fea5 	bl	8002534 <eeprom_read>
 80017ea:	4603      	mov	r3, r0
 80017ec:	461e      	mov	r6, r3
 80017ee:	2003      	movs	r0, #3
 80017f0:	f000 fea0 	bl	8002534 <eeprom_read>
 80017f4:	4603      	mov	r3, r0
 80017f6:	9300      	str	r3, [sp, #0]
 80017f8:	4633      	mov	r3, r6
 80017fa:	462a      	mov	r2, r5
 80017fc:	4621      	mov	r1, r4
 80017fe:	484e      	ldr	r0, [pc, #312]	@ (8001938 <config_process_input+0x3d8>)
 8001800:	f005 ff3a 	bl	8007678 <iprintf>

            menu_config();
 8001804:	f000 fa54 	bl	8001cb0 <menu_config>
            break;
 8001808:	e198      	b.n	8001b3c <config_process_input+0x5dc>
        case 'J':
            //extend_all_pins();
        	printf("extend_all_pins()\r\n");
 800180a:	484c      	ldr	r0, [pc, #304]	@ (800193c <config_process_input+0x3dc>)
 800180c:	f005 ff9c 	bl	8007748 <puts>
            break;
 8001810:	e194      	b.n	8001b3c <config_process_input+0x5dc>
        case 'N':
            //retract_all_pins();
        	printf("retract_all_pins()\r\n");
 8001812:	484b      	ldr	r0, [pc, #300]	@ (8001940 <config_process_input+0x3e0>)
 8001814:	f005 ff98 	bl	8007748 <puts>
            break;
 8001818:	e190      	b.n	8001b3c <config_process_input+0x5dc>
        case 'G':
            printf("\n\rSend the \"@\" symbol repeatedly to exit grease pins mode\r\n");
 800181a:	484a      	ldr	r0, [pc, #296]	@ (8001944 <config_process_input+0x3e4>)
 800181c:	f005 ff94 	bl	8007748 <puts>
            //grease_pins();
            printf("grease_pins();");
 8001820:	4849      	ldr	r0, [pc, #292]	@ (8001948 <config_process_input+0x3e8>)
 8001822:	f005 ff29 	bl	8007678 <iprintf>
            break;
 8001826:	e189      	b.n	8001b3c <config_process_input+0x5dc>
        case 'C':
        	uint8_t memStart, memEnd;
        	eeprom_print_map(); // print memory map
 8001828:	f000 fef2 	bl	8002610 <eeprom_print_map>
        	// get the memory range to clear - start
        	uint8_t validMemory = 0; // valid memory value flag
 800182c:	2300      	movs	r3, #0
 800182e:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
			char mem[3]; // buffer to store digits
			char mStartPrompt[] = "\r\nEnter 3 digit START memory address [000-127]: ";
 8001832:	4b46      	ldr	r3, [pc, #280]	@ (800194c <config_process_input+0x3ec>)
 8001834:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 8001838:	461d      	mov	r5, r3
 800183a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800183c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800183e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001840:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001842:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001844:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001846:	682b      	ldr	r3, [r5, #0]
 8001848:	7023      	strb	r3, [r4, #0]
			char mEndPrompt[] = "\r\nEnter 3 digit END memory address [000-127]: ";
 800184a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800184e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001852:	4a3f      	ldr	r2, [pc, #252]	@ (8001950 <config_process_input+0x3f0>)
 8001854:	461c      	mov	r4, r3
 8001856:	4615      	mov	r5, r2
 8001858:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800185a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800185c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800185e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001860:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001864:	c407      	stmia	r4!, {r0, r1, r2}
 8001866:	8023      	strh	r3, [r4, #0]
 8001868:	3402      	adds	r4, #2
 800186a:	0c1b      	lsrs	r3, r3, #16
 800186c:	7023      	strb	r3, [r4, #0]
			char memError[] = "\r\n* ERROR: enter valid numbers *\r\n";
 800186e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001872:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001876:	4a37      	ldr	r2, [pc, #220]	@ (8001954 <config_process_input+0x3f4>)
 8001878:	461c      	mov	r4, r3
 800187a:	4615      	mov	r5, r2
 800187c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800187e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001880:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001882:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001884:	682b      	ldr	r3, [r5, #0]
 8001886:	461a      	mov	r2, r3
 8001888:	8022      	strh	r2, [r4, #0]
 800188a:	3402      	adds	r4, #2
 800188c:	0c1b      	lsrs	r3, r3, #16
 800188e:	7023      	strb	r3, [r4, #0]
			char memCheck[] = {'0','1','2','3','4','5','6','7','8','9'};
 8001890:	4a25      	ldr	r2, [pc, #148]	@ (8001928 <config_process_input+0x3c8>)
 8001892:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001896:	ca07      	ldmia	r2, {r0, r1, r2}
 8001898:	c303      	stmia	r3!, {r0, r1}
 800189a:	801a      	strh	r2, [r3, #0]
			// get start address
        	do{
				get_user_input(mStartPrompt, memError, 3, memCheck, mem);
 800189c:	f107 02f4 	add.w	r2, r7, #244	@ 0xf4
 80018a0:	f107 0108 	add.w	r1, r7, #8
 80018a4:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 80018a8:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	4613      	mov	r3, r2
 80018b0:	2203      	movs	r2, #3
 80018b2:	f000 fa5f 	bl	8001d74 <get_user_input>
				memStart = (uint8_t)(mem[0] - '0') * 100 + (mem[1] - '0') * 10 + (mem[2] - '0'); // convert to number, subtract '0' (48 dec)
 80018b6:	f897 3100 	ldrb.w	r3, [r7, #256]	@ 0x100
 80018ba:	461a      	mov	r2, r3
 80018bc:	0092      	lsls	r2, r2, #2
 80018be:	4413      	add	r3, r2
 80018c0:	461a      	mov	r2, r3
 80018c2:	0091      	lsls	r1, r2, #2
 80018c4:	461a      	mov	r2, r3
 80018c6:	460b      	mov	r3, r1
 80018c8:	4413      	add	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	f897 3101 	ldrb.w	r3, [r7, #257]	@ 0x101
 80018d2:	3b30      	subs	r3, #48	@ 0x30
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	4619      	mov	r1, r3
 80018d8:	0089      	lsls	r1, r1, #2
 80018da:	440b      	add	r3, r1
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	4413      	add	r3, r2
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	f897 3102 	ldrb.w	r3, [r7, #258]	@ 0x102
 80018e8:	4413      	add	r3, r2
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	3310      	adds	r3, #16
 80018ee:	f887 314e 	strb.w	r3, [r7, #334]	@ 0x14e
				if((memStart >= 0) && (memStart <= 127)){
 80018f2:	f997 314e 	ldrsb.w	r3, [r7, #334]	@ 0x14e
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	db2e      	blt.n	8001958 <config_process_input+0x3f8>
					validMemory = 1;
 80018fa:	2301      	movs	r3, #1
 80018fc:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
 8001900:	e02d      	b.n	800195e <config_process_input+0x3fe>
 8001902:	bf00      	nop
 8001904:	08008c6c 	.word	0x08008c6c
 8001908:	2000016b 	.word	0x2000016b
 800190c:	08008e38 	.word	0x08008e38
 8001910:	08008e5c 	.word	0x08008e5c
 8001914:	20000000 	.word	0x20000000
 8001918:	08008e78 	.word	0x08008e78
 800191c:	08008eac 	.word	0x08008eac
 8001920:	08008ec8 	.word	0x08008ec8
 8001924:	08008f00 	.word	0x08008f00
 8001928:	08008f18 	.word	0x08008f18
 800192c:	20000004 	.word	0x20000004
 8001930:	08008c9c 	.word	0x08008c9c
 8001934:	08008cc4 	.word	0x08008cc4
 8001938:	08008cd4 	.word	0x08008cd4
 800193c:	08008d2c 	.word	0x08008d2c
 8001940:	08008d40 	.word	0x08008d40
 8001944:	08008d54 	.word	0x08008d54
 8001948:	08008d90 	.word	0x08008d90
 800194c:	08008f24 	.word	0x08008f24
 8001950:	08008f58 	.word	0x08008f58
 8001954:	08008f88 	.word	0x08008f88
				} else {
					printf("Memory out of range!\r\n");
 8001958:	487b      	ldr	r0, [pc, #492]	@ (8001b48 <config_process_input+0x5e8>)
 800195a:	f005 fef5 	bl	8007748 <puts>
				}
        	} while ( validMemory == 0 );
 800195e:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 8001962:	2b00      	cmp	r3, #0
 8001964:	d09a      	beq.n	800189c <config_process_input+0x33c>
        	// get end address
        	validMemory = 0;
 8001966:	2300      	movs	r3, #0
 8001968:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
        	do{
				mem[0] = '\0', mem[1] = '\0' , mem[2] = '\0';
 800196c:	2300      	movs	r3, #0
 800196e:	f887 3100 	strb.w	r3, [r7, #256]	@ 0x100
 8001972:	2300      	movs	r3, #0
 8001974:	f887 3101 	strb.w	r3, [r7, #257]	@ 0x101
 8001978:	2300      	movs	r3, #0
 800197a:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102

				get_user_input(mEndPrompt, memError, 3, memCheck, mem);
 800197e:	f107 02f4 	add.w	r2, r7, #244	@ 0xf4
 8001982:	f107 0108 	add.w	r1, r7, #8
 8001986:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 800198a:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	4613      	mov	r3, r2
 8001992:	2203      	movs	r2, #3
 8001994:	f000 f9ee 	bl	8001d74 <get_user_input>
				memEnd = (uint8_t)(mem[0] - '0') * 100 + (mem[1] - '0') * 10 + (mem[2] - '0'); // convert to number, subtract '0' (48 dec)
 8001998:	f897 3100 	ldrb.w	r3, [r7, #256]	@ 0x100
 800199c:	461a      	mov	r2, r3
 800199e:	0092      	lsls	r2, r2, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	461a      	mov	r2, r3
 80019a4:	0091      	lsls	r1, r2, #2
 80019a6:	461a      	mov	r2, r3
 80019a8:	460b      	mov	r3, r1
 80019aa:	4413      	add	r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	f897 3101 	ldrb.w	r3, [r7, #257]	@ 0x101
 80019b4:	3b30      	subs	r3, #48	@ 0x30
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	4619      	mov	r1, r3
 80019ba:	0089      	lsls	r1, r1, #2
 80019bc:	440b      	add	r3, r1
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	4413      	add	r3, r2
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	f897 3102 	ldrb.w	r3, [r7, #258]	@ 0x102
 80019ca:	4413      	add	r3, r2
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	3310      	adds	r3, #16
 80019d0:	f887 314d 	strb.w	r3, [r7, #333]	@ 0x14d
				if((memEnd >= 0) && (memEnd <= 127)){
 80019d4:	f997 314d 	ldrsb.w	r3, [r7, #333]	@ 0x14d
 80019d8:	2b00      	cmp	r3, #0
 80019da:	db03      	blt.n	80019e4 <config_process_input+0x484>
					validMemory = 1;
 80019dc:	2301      	movs	r3, #1
 80019de:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
 80019e2:	e002      	b.n	80019ea <config_process_input+0x48a>
				} else {
					printf("Memory out of range!\r\n");
 80019e4:	4858      	ldr	r0, [pc, #352]	@ (8001b48 <config_process_input+0x5e8>)
 80019e6:	f005 feaf 	bl	8007748 <puts>
				}
        	} while ( validMemory == 0 );
 80019ea:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d0bc      	beq.n	800196c <config_process_input+0x40c>
        	printf("%i blocks cleared\r\n", eeprom_clear(memStart, memEnd));
 80019f2:	f897 214d 	ldrb.w	r2, [r7, #333]	@ 0x14d
 80019f6:	f897 314e 	ldrb.w	r3, [r7, #334]	@ 0x14e
 80019fa:	4611      	mov	r1, r2
 80019fc:	4618      	mov	r0, r3
 80019fe:	f000 fdd5 	bl	80025ac <eeprom_clear>
 8001a02:	4603      	mov	r3, r0
 8001a04:	4619      	mov	r1, r3
 8001a06:	4851      	ldr	r0, [pc, #324]	@ (8001b4c <config_process_input+0x5ec>)
 8001a08:	f005 fe36 	bl	8007678 <iprintf>
        	// update variables with new stored values
    		launcher.tubeCount = eeprom_read(AL_TUBECOUNT);
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	f000 fd91 	bl	8002534 <eeprom_read>
 8001a12:	4603      	mov	r3, r0
 8001a14:	461a      	mov	r2, r3
 8001a16:	4b4e      	ldr	r3, [pc, #312]	@ (8001b50 <config_process_input+0x5f0>)
 8001a18:	705a      	strb	r2, [r3, #1]
    		launcher.type = eeprom_read(AL_TYPE);
 8001a1a:	2001      	movs	r0, #1
 8001a1c:	f000 fd8a 	bl	8002534 <eeprom_read>
 8001a20:	4603      	mov	r3, r0
 8001a22:	461a      	mov	r2, r3
 8001a24:	4b4a      	ldr	r3, [pc, #296]	@ (8001b50 <config_process_input+0x5f0>)
 8001a26:	709a      	strb	r2, [r3, #2]
    		launcher.serialNumber = eeprom_read(AL_SN);
 8001a28:	2002      	movs	r0, #2
 8001a2a:	f000 fd83 	bl	8002534 <eeprom_read>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	461a      	mov	r2, r3
 8001a32:	4b47      	ldr	r3, [pc, #284]	@ (8001b50 <config_process_input+0x5f0>)
 8001a34:	701a      	strb	r2, [r3, #0]
    		eeprom.configured = eeprom_read(AL_CONFIGED);
 8001a36:	2003      	movs	r0, #3
 8001a38:	f000 fd7c 	bl	8002534 <eeprom_read>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	461a      	mov	r2, r3
 8001a40:	4b44      	ldr	r3, [pc, #272]	@ (8001b54 <config_process_input+0x5f4>)
 8001a42:	715a      	strb	r2, [r3, #5]
    		motor.runTime = eeprom_read_uint32(M_RUNTIME);
 8001a44:	2008      	movs	r0, #8
 8001a46:	f000 fe3d 	bl	80026c4 <eeprom_read_uint32>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	4a42      	ldr	r2, [pc, #264]	@ (8001b58 <config_process_input+0x5f8>)
 8001a4e:	6013      	str	r3, [r2, #0]
    		printf("\r\nTubes: %c | Type: %c | Serial: %i | Runtime: %i\r\n", launcher.tubeCount, launcher.type, launcher.serialNumber, (int)motor.runTime);
 8001a50:	4b3f      	ldr	r3, [pc, #252]	@ (8001b50 <config_process_input+0x5f0>)
 8001a52:	785b      	ldrb	r3, [r3, #1]
 8001a54:	4619      	mov	r1, r3
 8001a56:	4b3e      	ldr	r3, [pc, #248]	@ (8001b50 <config_process_input+0x5f0>)
 8001a58:	789b      	ldrb	r3, [r3, #2]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	4b3c      	ldr	r3, [pc, #240]	@ (8001b50 <config_process_input+0x5f0>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	4b3d      	ldr	r3, [pc, #244]	@ (8001b58 <config_process_input+0x5f8>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	4603      	mov	r3, r0
 8001a6a:	483c      	ldr	r0, [pc, #240]	@ (8001b5c <config_process_input+0x5fc>)
 8001a6c:	f005 fe04 	bl	8007678 <iprintf>
//					}
//				}
//			}
			//printf("%i blocks cleared\r\n", eeprom_clear(mstart, mend));

        	break;
 8001a70:	e064      	b.n	8001b3c <config_process_input+0x5dc>
        case 'T':
        	char mot[5];
        	char motorPrompt[] = "Enter motor runtime (5-digit number) in milliseconds [02000-15000]: ";
 8001a72:	4a3b      	ldr	r2, [pc, #236]	@ (8001b60 <config_process_input+0x600>)
 8001a74:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001a78:	4611      	mov	r1, r2
 8001a7a:	2245      	movs	r2, #69	@ 0x45
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f006 f892 	bl	8007ba6 <memcpy>
        	char motorError[] = "\r\nEnter only numbers!\r\n";
 8001a82:	4b38      	ldr	r3, [pc, #224]	@ (8001b64 <config_process_input+0x604>)
 8001a84:	f107 04d4 	add.w	r4, r7, #212	@ 0xd4
 8001a88:	461d      	mov	r5, r3
 8001a8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a8e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a92:	e884 0003 	stmia.w	r4, {r0, r1}
        	char motorCheck[] = {'0','1','2','3','4','5','6','7','8','9'};
 8001a96:	4a34      	ldr	r2, [pc, #208]	@ (8001b68 <config_process_input+0x608>)
 8001a98:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8001a9c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a9e:	c303      	stmia	r3!, {r0, r1}
 8001aa0:	801a      	strh	r2, [r3, #0]
        	get_user_input(motorPrompt, motorError, 5, motorCheck, mot);
 8001aa2:	f107 02c8 	add.w	r2, r7, #200	@ 0xc8
 8001aa6:	f107 01d4 	add.w	r1, r7, #212	@ 0xd4
 8001aaa:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 8001aae:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001ab2:	9300      	str	r3, [sp, #0]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	2205      	movs	r2, #5
 8001ab8:	f000 f95c 	bl	8001d74 <get_user_input>
        	motor.runTime = (uint32_t)(mot[0] - '0') * 10000 + (mot[1] - '0') * 1000 + (mot[2] - '0') * 100 + (mot[3] - '0') * 10 + (mot[4] - '0');
 8001abc:	f897 30ec 	ldrb.w	r3, [r7, #236]	@ 0xec
 8001ac0:	3b30      	subs	r3, #48	@ 0x30
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001ac8:	fb02 f303 	mul.w	r3, r2, r3
 8001acc:	f897 20ed 	ldrb.w	r2, [r7, #237]	@ 0xed
 8001ad0:	3a30      	subs	r2, #48	@ 0x30
 8001ad2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001ad6:	fb01 f202 	mul.w	r2, r1, r2
 8001ada:	1899      	adds	r1, r3, r2
 8001adc:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 8001ae0:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	4618      	mov	r0, r3
 8001aee:	f897 30ee 	ldrb.w	r3, [r7, #238]	@ 0xee
 8001af2:	3b30      	subs	r3, #48	@ 0x30
 8001af4:	2264      	movs	r2, #100	@ 0x64
 8001af6:	fb02 f303 	mul.w	r3, r2, r3
 8001afa:	4403      	add	r3, r0
 8001afc:	440b      	add	r3, r1
 8001afe:	f897 20f0 	ldrb.w	r2, [r7, #240]	@ 0xf0
 8001b02:	4413      	add	r3, r2
 8001b04:	3b30      	subs	r3, #48	@ 0x30
 8001b06:	4a14      	ldr	r2, [pc, #80]	@ (8001b58 <config_process_input+0x5f8>)
 8001b08:	6013      	str	r3, [r2, #0]
//						}
//    				}
//    			}
//    		}
//    		motor.runTime = (uint32_t)((mtime[0]-'0')*10000 + (mtime[0]-'0')*1000 + (mtime[0]-'0')*100 + (mtime[0]-'0')*10 + (mtime[0]-'0'));
    		printf("Motor ON time: %i ms\r\n", motor.runTime);
 8001b0a:	4b13      	ldr	r3, [pc, #76]	@ (8001b58 <config_process_input+0x5f8>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4816      	ldr	r0, [pc, #88]	@ (8001b6c <config_process_input+0x60c>)
 8001b12:	f005 fdb1 	bl	8007678 <iprintf>
    		eeprom_write_uint32(M_RUNTIME, motor.runTime);
 8001b16:	4b10      	ldr	r3, [pc, #64]	@ (8001b58 <config_process_input+0x5f8>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	2008      	movs	r0, #8
 8001b1e:	f000 fda1 	bl	8002664 <eeprom_write_uint32>
    		printf("Setting saved!\r\nRuntime: %i\r\n\r\n", eeprom_read_uint32(M_RUNTIME));
 8001b22:	2008      	movs	r0, #8
 8001b24:	f000 fdce 	bl	80026c4 <eeprom_read_uint32>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4810      	ldr	r0, [pc, #64]	@ (8001b70 <config_process_input+0x610>)
 8001b2e:	f005 fda3 	bl	8007678 <iprintf>


        	break;
 8001b32:	e003      	b.n	8001b3c <config_process_input+0x5dc>
        default:
        	printf("\r\n** Unrecognized command!!** \r\n");
 8001b34:	480f      	ldr	r0, [pc, #60]	@ (8001b74 <config_process_input+0x614>)
 8001b36:	f005 fe07 	bl	8007748 <puts>
            break;
 8001b3a:	bf00      	nop
    }
}
 8001b3c:	bf00      	nop
 8001b3e:	f507 77aa 	add.w	r7, r7, #340	@ 0x154
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b46:	bf00      	nop
 8001b48:	08008da0 	.word	0x08008da0
 8001b4c:	08008db8 	.word	0x08008db8
 8001b50:	20000000 	.word	0x20000000
 8001b54:	20000004 	.word	0x20000004
 8001b58:	2000000c 	.word	0x2000000c
 8001b5c:	08008dcc 	.word	0x08008dcc
 8001b60:	08008fac 	.word	0x08008fac
 8001b64:	08008f00 	.word	0x08008f00
 8001b68:	08008f18 	.word	0x08008f18
 8001b6c:	08008e00 	.word	0x08008e00
 8001b70:	08008e18 	.word	0x08008e18
 8001b74:	08008c4c 	.word	0x08008c4c

08001b78 <menu_main>:


void menu_main(void) {
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
    printf("\r\n\n\r");
 8001b7c:	4832      	ldr	r0, [pc, #200]	@ (8001c48 <menu_main+0xd0>)
 8001b7e:	f005 fd7b 	bl	8007678 <iprintf>
    printf("=========================================\n\r");
 8001b82:	4832      	ldr	r0, [pc, #200]	@ (8001c4c <menu_main+0xd4>)
 8001b84:	f005 fd78 	bl	8007678 <iprintf>
    printf("|  AOML auto launcher board version 3.0 |\n\r");
 8001b88:	4831      	ldr	r0, [pc, #196]	@ (8001c50 <menu_main+0xd8>)
 8001b8a:	f005 fd75 	bl	8007678 <iprintf>
    printf("|  Firmware version 2024.mm.dd.hhmm     |\n\r");
 8001b8e:	4831      	ldr	r0, [pc, #196]	@ (8001c54 <menu_main+0xdc>)
 8001b90:	f005 fd72 	bl	8007678 <iprintf>
    printf("=========================================\n\r");
 8001b94:	482d      	ldr	r0, [pc, #180]	@ (8001c4c <menu_main+0xd4>)
 8001b96:	f005 fd6f 	bl	8007678 <iprintf>
    printf("|    Model #ALV3.0      S/N ");
 8001b9a:	482f      	ldr	r0, [pc, #188]	@ (8001c58 <menu_main+0xe0>)
 8001b9c:	f005 fd6c 	bl	8007678 <iprintf>
    print_serial_number();
 8001ba0:	f000 f956 	bl	8001e50 <print_serial_number>
    printf("       |\n\r");
 8001ba4:	482d      	ldr	r0, [pc, #180]	@ (8001c5c <menu_main+0xe4>)
 8001ba6:	f005 fd67 	bl	8007678 <iprintf>
    printf("=========================================\n\r");
 8001baa:	4828      	ldr	r0, [pc, #160]	@ (8001c4c <menu_main+0xd4>)
 8001bac:	f005 fd64 	bl	8007678 <iprintf>
    printf("|               COMMANDS                |\n\r");
 8001bb0:	482b      	ldr	r0, [pc, #172]	@ (8001c60 <menu_main+0xe8>)
 8001bb2:	f005 fd61 	bl	8007678 <iprintf>
    if (eeprom.configured != '|') {
 8001bb6:	4b2b      	ldr	r3, [pc, #172]	@ (8001c64 <menu_main+0xec>)
 8001bb8:	795b      	ldrb	r3, [r3, #5]
 8001bba:	2b7c      	cmp	r3, #124	@ 0x7c
 8001bbc:	d002      	beq.n	8001bc4 <menu_main+0x4c>
        printf("| ERROR, NO SERIAL NUMBER ASSIGNED  |\n\r");
 8001bbe:	482a      	ldr	r0, [pc, #168]	@ (8001c68 <menu_main+0xf0>)
 8001bc0:	f005 fd5a 	bl	8007678 <iprintf>
    }
    printf("=========================================\n\r");
 8001bc4:	4821      	ldr	r0, [pc, #132]	@ (8001c4c <menu_main+0xd4>)
 8001bc6:	f005 fd57 	bl	8007678 <iprintf>
    printf("| Connect  cal Sim BT  0                |\n\r");
 8001bca:	4828      	ldr	r0, [pc, #160]	@ (8001c6c <menu_main+0xf4>)
 8001bcc:	f005 fd54 	bl	8007678 <iprintf>
    if (launcher.tubeCount == '6') {
 8001bd0:	4b27      	ldr	r3, [pc, #156]	@ (8001c70 <menu_main+0xf8>)
 8001bd2:	785b      	ldrb	r3, [r3, #1]
 8001bd4:	2b36      	cmp	r3, #54	@ 0x36
 8001bd6:	d109      	bne.n	8001bec <menu_main+0x74>
        printf("| Connect  XBT 1-6     1,2,3,4,5,6      |\n\r");
 8001bd8:	4826      	ldr	r0, [pc, #152]	@ (8001c74 <menu_main+0xfc>)
 8001bda:	f005 fd4d 	bl	8007678 <iprintf>
        printf("| Extend   Pin 1-6     U,V,W,X,Y,Z      |\n\r");
 8001bde:	4826      	ldr	r0, [pc, #152]	@ (8001c78 <menu_main+0x100>)
 8001be0:	f005 fd4a 	bl	8007678 <iprintf>
        printf("| Retract  Pin 1-6     A,B,C,D,E,F      |\n\r");
 8001be4:	4825      	ldr	r0, [pc, #148]	@ (8001c7c <menu_main+0x104>)
 8001be6:	f005 fd47 	bl	8007678 <iprintf>
 8001bea:	e010      	b.n	8001c0e <menu_main+0x96>
    } else if (launcher.tubeCount == '8') {
 8001bec:	4b20      	ldr	r3, [pc, #128]	@ (8001c70 <menu_main+0xf8>)
 8001bee:	785b      	ldrb	r3, [r3, #1]
 8001bf0:	2b38      	cmp	r3, #56	@ 0x38
 8001bf2:	d109      	bne.n	8001c08 <menu_main+0x90>

        printf("| Connect  XBT 1-8     1,2,3,4,5,6,7,8  |\n\r");
 8001bf4:	4822      	ldr	r0, [pc, #136]	@ (8001c80 <menu_main+0x108>)
 8001bf6:	f005 fd3f 	bl	8007678 <iprintf>
        printf("| Extend   Pin 1-8     U,V,W,X,Y,Z,S,T  |\n\r");
 8001bfa:	4822      	ldr	r0, [pc, #136]	@ (8001c84 <menu_main+0x10c>)
 8001bfc:	f005 fd3c 	bl	8007678 <iprintf>
        printf("| Retract  Pin 1-8     A,B,C,D,E,F,H,I  |\n\r");
 8001c00:	4821      	ldr	r0, [pc, #132]	@ (8001c88 <menu_main+0x110>)
 8001c02:	f005 fd39 	bl	8007678 <iprintf>
 8001c06:	e002      	b.n	8001c0e <menu_main+0x96>
    } else {
    	printf("| ERROR, NO TUBE COUNT!!     	        |\n\r");
 8001c08:	4820      	ldr	r0, [pc, #128]	@ (8001c8c <menu_main+0x114>)
 8001c0a:	f005 fd35 	bl	8007678 <iprintf>
    }
    printf("| Unground XBT         G                |\n\r");
 8001c0e:	4820      	ldr	r0, [pc, #128]	@ (8001c90 <menu_main+0x118>)
 8001c10:	f005 fd32 	bl	8007678 <iprintf>
    printf("| Calibrate On         K                |\n\r");
 8001c14:	481f      	ldr	r0, [pc, #124]	@ (8001c94 <menu_main+0x11c>)
 8001c16:	f005 fd2f 	bl	8007678 <iprintf>
    printf("| Cal Resistor         L                |\n\r");
 8001c1a:	481f      	ldr	r0, [pc, #124]	@ (8001c98 <menu_main+0x120>)
 8001c1c:	f005 fd2c 	bl	8007678 <iprintf>
    printf("| Reset Relays         R                |\n\r");
 8001c20:	481e      	ldr	r0, [pc, #120]	@ (8001c9c <menu_main+0x124>)
 8001c22:	f005 fd29 	bl	8007678 <iprintf>
    printf("| Print Serial Number  s                |\n\r");
 8001c26:	481e      	ldr	r0, [pc, #120]	@ (8001ca0 <menu_main+0x128>)
 8001c28:	f005 fd26 	bl	8007678 <iprintf>
    printf("| This Menu            M                |\n\r");
 8001c2c:	481d      	ldr	r0, [pc, #116]	@ (8001ca4 <menu_main+0x12c>)
 8001c2e:	f005 fd23 	bl	8007678 <iprintf>
    printf("| Read Voltage         P                |\n\r");
 8001c32:	481d      	ldr	r0, [pc, #116]	@ (8001ca8 <menu_main+0x130>)
 8001c34:	f005 fd20 	bl	8007678 <iprintf>
    printf("=========================================\n\r");
 8001c38:	4804      	ldr	r0, [pc, #16]	@ (8001c4c <menu_main+0xd4>)
 8001c3a:	f005 fd1d 	bl	8007678 <iprintf>
    printf("\r\n");
 8001c3e:	481b      	ldr	r0, [pc, #108]	@ (8001cac <menu_main+0x134>)
 8001c40:	f005 fd82 	bl	8007748 <puts>
}//end status_message
 8001c44:	bf00      	nop
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	08008ff4 	.word	0x08008ff4
 8001c4c:	08008ffc 	.word	0x08008ffc
 8001c50:	08009028 	.word	0x08009028
 8001c54:	08009054 	.word	0x08009054
 8001c58:	08009080 	.word	0x08009080
 8001c5c:	080090a0 	.word	0x080090a0
 8001c60:	080090ac 	.word	0x080090ac
 8001c64:	20000004 	.word	0x20000004
 8001c68:	080090d8 	.word	0x080090d8
 8001c6c:	08009100 	.word	0x08009100
 8001c70:	20000000 	.word	0x20000000
 8001c74:	0800912c 	.word	0x0800912c
 8001c78:	08009158 	.word	0x08009158
 8001c7c:	08009184 	.word	0x08009184
 8001c80:	080091b0 	.word	0x080091b0
 8001c84:	080091dc 	.word	0x080091dc
 8001c88:	08009208 	.word	0x08009208
 8001c8c:	08009234 	.word	0x08009234
 8001c90:	08009260 	.word	0x08009260
 8001c94:	0800928c 	.word	0x0800928c
 8001c98:	080092b8 	.word	0x080092b8
 8001c9c:	080092e4 	.word	0x080092e4
 8001ca0:	08009310 	.word	0x08009310
 8001ca4:	0800933c 	.word	0x0800933c
 8001ca8:	08009368 	.word	0x08009368
 8001cac:	08008c30 	.word	0x08008c30

08001cb0 <menu_config>:


void menu_config(void) {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
    printf("\n\r");
 8001cb4:	481f      	ldr	r0, [pc, #124]	@ (8001d34 <menu_config+0x84>)
 8001cb6:	f005 fcdf 	bl	8007678 <iprintf>
    printf("=========================================\n\r");
 8001cba:	481f      	ldr	r0, [pc, #124]	@ (8001d38 <menu_config+0x88>)
 8001cbc:	f005 fcdc 	bl	8007678 <iprintf>
    printf("|  AOML auto launcher config menu       |\n\r");
 8001cc0:	481e      	ldr	r0, [pc, #120]	@ (8001d3c <menu_config+0x8c>)
 8001cc2:	f005 fcd9 	bl	8007678 <iprintf>
    printf("=========================================\n\r");
 8001cc6:	481c      	ldr	r0, [pc, #112]	@ (8001d38 <menu_config+0x88>)
 8001cc8:	f005 fcd6 	bl	8007678 <iprintf>
    printf("|    Model #ALV3.0      S/N ");
 8001ccc:	481c      	ldr	r0, [pc, #112]	@ (8001d40 <menu_config+0x90>)
 8001cce:	f005 fcd3 	bl	8007678 <iprintf>
    print_serial_number();
 8001cd2:	f000 f8bd 	bl	8001e50 <print_serial_number>
    printf("       |\n\r");
 8001cd6:	481b      	ldr	r0, [pc, #108]	@ (8001d44 <menu_config+0x94>)
 8001cd8:	f005 fcce 	bl	8007678 <iprintf>
    printf("=========================================\n\r");
 8001cdc:	4816      	ldr	r0, [pc, #88]	@ (8001d38 <menu_config+0x88>)
 8001cde:	f005 fccb 	bl	8007678 <iprintf>
    printf("|               COMMANDS                |\n\r");
 8001ce2:	4819      	ldr	r0, [pc, #100]	@ (8001d48 <menu_config+0x98>)
 8001ce4:	f005 fcc8 	bl	8007678 <iprintf>
    printf("=========================================\n\r");
 8001ce8:	4813      	ldr	r0, [pc, #76]	@ (8001d38 <menu_config+0x88>)
 8001cea:	f005 fcc5 	bl	8007678 <iprintf>
    printf("| Set tubes & S/N      1                |\n\r");
 8001cee:	4817      	ldr	r0, [pc, #92]	@ (8001d4c <menu_config+0x9c>)
 8001cf0:	f005 fcc2 	bl	8007678 <iprintf>
    printf("| This Menu            M                |\n\r");
 8001cf4:	4816      	ldr	r0, [pc, #88]	@ (8001d50 <menu_config+0xa0>)
 8001cf6:	f005 fcbf 	bl	8007678 <iprintf>
    printf("| Extend all pins      J                |\n\r");
 8001cfa:	4816      	ldr	r0, [pc, #88]	@ (8001d54 <menu_config+0xa4>)
 8001cfc:	f005 fcbc 	bl	8007678 <iprintf>
    printf("| Retract all pins     N                |\n\r");
 8001d00:	4815      	ldr	r0, [pc, #84]	@ (8001d58 <menu_config+0xa8>)
 8001d02:	f005 fcb9 	bl	8007678 <iprintf>
    printf("| Grease pins  mode    G                |\n\r");
 8001d06:	4815      	ldr	r0, [pc, #84]	@ (8001d5c <menu_config+0xac>)
 8001d08:	f005 fcb6 	bl	8007678 <iprintf>
    printf("| Clear memory range   C                |\n\r");
 8001d0c:	4814      	ldr	r0, [pc, #80]	@ (8001d60 <menu_config+0xb0>)
 8001d0e:	f005 fcb3 	bl	8007678 <iprintf>
    printf("| Read motor stats     S                |\n\r");
 8001d12:	4814      	ldr	r0, [pc, #80]	@ (8001d64 <menu_config+0xb4>)
 8001d14:	f005 fcb0 	bl	8007678 <iprintf>
    printf("| Set motor runtime    T                |\n\r");
 8001d18:	4813      	ldr	r0, [pc, #76]	@ (8001d68 <menu_config+0xb8>)
 8001d1a:	f005 fcad 	bl	8007678 <iprintf>
    printf("| Quit config menu     Q                |\n\r");
 8001d1e:	4813      	ldr	r0, [pc, #76]	@ (8001d6c <menu_config+0xbc>)
 8001d20:	f005 fcaa 	bl	8007678 <iprintf>
    printf("=========================================\n\r");
 8001d24:	4804      	ldr	r0, [pc, #16]	@ (8001d38 <menu_config+0x88>)
 8001d26:	f005 fca7 	bl	8007678 <iprintf>
    printf("\r\n");
 8001d2a:	4811      	ldr	r0, [pc, #68]	@ (8001d70 <menu_config+0xc0>)
 8001d2c:	f005 fd0c 	bl	8007748 <puts>
}//end status_message
 8001d30:	bf00      	nop
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	08009394 	.word	0x08009394
 8001d38:	08008ffc 	.word	0x08008ffc
 8001d3c:	08009398 	.word	0x08009398
 8001d40:	08009080 	.word	0x08009080
 8001d44:	080090a0 	.word	0x080090a0
 8001d48:	080090ac 	.word	0x080090ac
 8001d4c:	080093c4 	.word	0x080093c4
 8001d50:	0800933c 	.word	0x0800933c
 8001d54:	080093f0 	.word	0x080093f0
 8001d58:	0800941c 	.word	0x0800941c
 8001d5c:	08009448 	.word	0x08009448
 8001d60:	08009474 	.word	0x08009474
 8001d64:	080094a0 	.word	0x080094a0
 8001d68:	080094cc 	.word	0x080094cc
 8001d6c:	080094f8 	.word	0x080094f8
 8001d70:	08008c30 	.word	0x08008c30

08001d74 <get_user_input>:


/*********************** AUXILIAR FUNCTIONS ***********************/

void get_user_input(char promptMsg[], char errorMsg[], uint8_t count, char checkList[], char * output){
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	603b      	str	r3, [r7, #0]
 8001d80:	4613      	mov	r3, r2
 8001d82:	71fb      	strb	r3, [r7, #7]
	//const uint8_t checkListSize = 10;
	print_inline(promptMsg);
 8001d84:	68f8      	ldr	r0, [r7, #12]
 8001d86:	f000 f89f 	bl	8001ec8 <print_inline>
    for(uint8_t i = 0; i < count; i++){
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	75fb      	strb	r3, [r7, #23]
 8001d8e:	e03d      	b.n	8001e0c <get_user_input+0x98>
		while(1){
			HAL_Delay(5); // needed to debug, remove
 8001d90:	2005      	movs	r0, #5
 8001d92:	f001 f945 	bl	8003020 <HAL_Delay>
			if(rxStatus == active){
 8001d96:	4b23      	ldr	r3, [pc, #140]	@ (8001e24 <get_user_input+0xb0>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d1f8      	bne.n	8001d90 <get_user_input+0x1c>
				rxStatus = idle;
 8001d9e:	4b21      	ldr	r3, [pc, #132]	@ (8001e24 <get_user_input+0xb0>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	701a      	strb	r2, [r3, #0]
				print_char(rxChar);
 8001da4:	4b20      	ldr	r3, [pc, #128]	@ (8001e28 <get_user_input+0xb4>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f000 f841 	bl	8001e30 <print_char>
				uint8_t checkFlag = 0;
 8001dae:	2300      	movs	r3, #0
 8001db0:	75bb      	strb	r3, [r7, #22]
				// check that belongs to the checkList
				for(uint8_t j = 0; j < MAX_CHECKLIST_SIZE; j++){
 8001db2:	2300      	movs	r3, #0
 8001db4:	757b      	strb	r3, [r7, #21]
 8001db6:	e013      	b.n	8001de0 <get_user_input+0x6c>
					// if there is a match, set flag, store value and break
					if(rxChar == checkList[j]){
 8001db8:	7d7b      	ldrb	r3, [r7, #21]
 8001dba:	683a      	ldr	r2, [r7, #0]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	781a      	ldrb	r2, [r3, #0]
 8001dc0:	4b19      	ldr	r3, [pc, #100]	@ (8001e28 <get_user_input+0xb4>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d108      	bne.n	8001dda <get_user_input+0x66>
						checkFlag = 1;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	75bb      	strb	r3, [r7, #22]
						output[i] = rxChar;// store the value
 8001dcc:	7dfb      	ldrb	r3, [r7, #23]
 8001dce:	6a3a      	ldr	r2, [r7, #32]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	4a15      	ldr	r2, [pc, #84]	@ (8001e28 <get_user_input+0xb4>)
 8001dd4:	7812      	ldrb	r2, [r2, #0]
 8001dd6:	701a      	strb	r2, [r3, #0]
						break;
 8001dd8:	e005      	b.n	8001de6 <get_user_input+0x72>
				for(uint8_t j = 0; j < MAX_CHECKLIST_SIZE; j++){
 8001dda:	7d7b      	ldrb	r3, [r7, #21]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	757b      	strb	r3, [r7, #21]
 8001de0:	7d7b      	ldrb	r3, [r7, #21]
 8001de2:	2b09      	cmp	r3, #9
 8001de4:	d9e8      	bls.n	8001db8 <get_user_input+0x44>
					}
				} // if no match, flag is 0
				if(checkFlag == 0){
 8001de6:	7dbb      	ldrb	r3, [r7, #22]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d107      	bne.n	8001dfc <get_user_input+0x88>
					printf(errorMsg);
 8001dec:	68b8      	ldr	r0, [r7, #8]
 8001dee:	f005 fc43 	bl	8007678 <iprintf>
					print_inline(promptMsg);
 8001df2:	68f8      	ldr	r0, [r7, #12]
 8001df4:	f000 f868 	bl	8001ec8 <print_inline>
					i = 0; // reinitialize counter to start over
 8001df8:	2300      	movs	r3, #0
 8001dfa:	75fb      	strb	r3, [r7, #23]
				}
				// break while loop if value is good
				if(checkFlag == 1) break;
 8001dfc:	7dbb      	ldrb	r3, [r7, #22]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d000      	beq.n	8001e04 <get_user_input+0x90>
			HAL_Delay(5); // needed to debug, remove
 8001e02:	e7c5      	b.n	8001d90 <get_user_input+0x1c>
				if(checkFlag == 1) break;
 8001e04:	bf00      	nop
    for(uint8_t i = 0; i < count; i++){
 8001e06:	7dfb      	ldrb	r3, [r7, #23]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	75fb      	strb	r3, [r7, #23]
 8001e0c:	7dfa      	ldrb	r2, [r7, #23]
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d3bd      	bcc.n	8001d90 <get_user_input+0x1c>
			}
		}
    }
    printf("\r\n");
 8001e14:	4805      	ldr	r0, [pc, #20]	@ (8001e2c <get_user_input+0xb8>)
 8001e16:	f005 fc97 	bl	8007748 <puts>
}
 8001e1a:	bf00      	nop
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	2000016a 	.word	0x2000016a
 8001e28:	2000016d 	.word	0x2000016d
 8001e2c:	08008c30 	.word	0x08008c30

08001e30 <print_char>:

/* Print a single character for echo in line */
void print_char(uint8_t * ch){
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, 100);
 8001e38:	1d39      	adds	r1, r7, #4
 8001e3a:	2364      	movs	r3, #100	@ 0x64
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	4803      	ldr	r0, [pc, #12]	@ (8001e4c <print_char+0x1c>)
 8001e40:	f004 fca6 	bl	8006790 <HAL_UART_Transmit>
}
 8001e44:	bf00      	nop
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	200001bc 	.word	0x200001bc

08001e50 <print_serial_number>:

void print_serial_number(void){
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
	//printf( "AL%c%s", launcher.type[0], launcher.serialNumber);
    if(eeprom.configured == '|'){
 8001e54:	4b0e      	ldr	r3, [pc, #56]	@ (8001e90 <print_serial_number+0x40>)
 8001e56:	795b      	ldrb	r3, [r3, #5]
 8001e58:	2b7c      	cmp	r3, #124	@ 0x7c
 8001e5a:	d114      	bne.n	8001e86 <print_serial_number+0x36>
    	if(launcher.tubeCount == '6'){
 8001e5c:	4b0d      	ldr	r3, [pc, #52]	@ (8001e94 <print_serial_number+0x44>)
 8001e5e:	785b      	ldrb	r3, [r3, #1]
 8001e60:	2b36      	cmp	r3, #54	@ 0x36
 8001e62:	d106      	bne.n	8001e72 <print_serial_number+0x22>
    		printf( "AL%i ", launcher.serialNumber);
 8001e64:	4b0b      	ldr	r3, [pc, #44]	@ (8001e94 <print_serial_number+0x44>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	4619      	mov	r1, r3
 8001e6a:	480b      	ldr	r0, [pc, #44]	@ (8001e98 <print_serial_number+0x48>)
 8001e6c:	f005 fc04 	bl	8007678 <iprintf>
    		printf( "AL%c%i", launcher.type, launcher.serialNumber);
    	}
    } else {
    	printf( "AL???");
    }
}
 8001e70:	e00c      	b.n	8001e8c <print_serial_number+0x3c>
    		printf( "AL%c%i", launcher.type, launcher.serialNumber);
 8001e72:	4b08      	ldr	r3, [pc, #32]	@ (8001e94 <print_serial_number+0x44>)
 8001e74:	789b      	ldrb	r3, [r3, #2]
 8001e76:	4619      	mov	r1, r3
 8001e78:	4b06      	ldr	r3, [pc, #24]	@ (8001e94 <print_serial_number+0x44>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	4807      	ldr	r0, [pc, #28]	@ (8001e9c <print_serial_number+0x4c>)
 8001e80:	f005 fbfa 	bl	8007678 <iprintf>
}
 8001e84:	e002      	b.n	8001e8c <print_serial_number+0x3c>
    	printf( "AL???");
 8001e86:	4806      	ldr	r0, [pc, #24]	@ (8001ea0 <print_serial_number+0x50>)
 8001e88:	f005 fbf6 	bl	8007678 <iprintf>
}
 8001e8c:	bf00      	nop
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	20000004 	.word	0x20000004
 8001e94:	20000000 	.word	0x20000000
 8001e98:	08009524 	.word	0x08009524
 8001e9c:	0800952c 	.word	0x0800952c
 8001ea0:	08009534 	.word	0x08009534

08001ea4 <multiplexer_set>:
}


/* Select the source of RS232
 * Parameters: select {MUX_GPS, MUX_STM32} */
void multiplexer_set(mux_t select){
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(MUX_SELECT_GPIO_Port, MUX_SELECT_Pin, select); // SET = UART-tx / RESET = Din from GPS
 8001eae:	79fb      	ldrb	r3, [r7, #7]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	2104      	movs	r1, #4
 8001eb4:	4803      	ldr	r0, [pc, #12]	@ (8001ec4 <multiplexer_set+0x20>)
 8001eb6:	f002 f873 	bl	8003fa0 <HAL_GPIO_WritePin>
}
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40010800 	.word	0x40010800

08001ec8 <print_inline>:

/* Print line without a '\n' newline at the end
 * Use for data entry prompts or partial text inline */
void print_inline(char * text){
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
	char temp = ' ';
 8001ed0:	2320      	movs	r3, #32
 8001ed2:	73bb      	strb	r3, [r7, #14]
	for(uint8_t i = 0; i<=255 && temp!= '\0' ; i++){
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	73fb      	strb	r3, [r7, #15]
 8001ed8:	e00e      	b.n	8001ef8 <print_inline+0x30>
		temp = text[i];
 8001eda:	7bfb      	ldrb	r3, [r7, #15]
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	4413      	add	r3, r2
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	73bb      	strb	r3, [r7, #14]
		HAL_UART_Transmit(&huart1, (uint8_t *) &temp, 1, 100);
 8001ee4:	f107 010e 	add.w	r1, r7, #14
 8001ee8:	2364      	movs	r3, #100	@ 0x64
 8001eea:	2201      	movs	r2, #1
 8001eec:	4806      	ldr	r0, [pc, #24]	@ (8001f08 <print_inline+0x40>)
 8001eee:	f004 fc4f 	bl	8006790 <HAL_UART_Transmit>
	for(uint8_t i = 0; i<=255 && temp!= '\0' ; i++){
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	73fb      	strb	r3, [r7, #15]
 8001ef8:	7bbb      	ldrb	r3, [r7, #14]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1ed      	bne.n	8001eda <print_inline+0x12>
	}
}
 8001efe:	bf00      	nop
 8001f00:	bf00      	nop
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	200001bc 	.word	0x200001bc

08001f0c <parameter_init>:
//	(void) HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, HAL_MAX_DELAY);
//	return ch;
//}

/* Initialize autolauncher parameters */
void parameter_init(void){
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af02      	add	r7, sp, #8
	// get parameters from eeprom or assign default values
	eeprom.configured = eeprom_read(AL_CONFIGED);
 8001f12:	2003      	movs	r0, #3
 8001f14:	f000 fb0e 	bl	8002534 <eeprom_read>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	4b25      	ldr	r3, [pc, #148]	@ (8001fb4 <parameter_init+0xa8>)
 8001f1e:	715a      	strb	r2, [r3, #5]
	if(eeprom.configured == '|'){
 8001f20:	4b24      	ldr	r3, [pc, #144]	@ (8001fb4 <parameter_init+0xa8>)
 8001f22:	795b      	ldrb	r3, [r3, #5]
 8001f24:	2b7c      	cmp	r3, #124	@ 0x7c
 8001f26:	d13d      	bne.n	8001fa4 <parameter_init+0x98>
		printf("\r\n... Configuration found in memory ... \r\n");
 8001f28:	4823      	ldr	r0, [pc, #140]	@ (8001fb8 <parameter_init+0xac>)
 8001f2a:	f005 fc0d 	bl	8007748 <puts>
		launcher.tubeCount = eeprom_read(AL_TUBECOUNT);
 8001f2e:	2000      	movs	r0, #0
 8001f30:	f000 fb00 	bl	8002534 <eeprom_read>
 8001f34:	4603      	mov	r3, r0
 8001f36:	461a      	mov	r2, r3
 8001f38:	4b20      	ldr	r3, [pc, #128]	@ (8001fbc <parameter_init+0xb0>)
 8001f3a:	705a      	strb	r2, [r3, #1]
		launcher.type = eeprom_read(AL_TYPE);
 8001f3c:	2001      	movs	r0, #1
 8001f3e:	f000 faf9 	bl	8002534 <eeprom_read>
 8001f42:	4603      	mov	r3, r0
 8001f44:	461a      	mov	r2, r3
 8001f46:	4b1d      	ldr	r3, [pc, #116]	@ (8001fbc <parameter_init+0xb0>)
 8001f48:	709a      	strb	r2, [r3, #2]
		launcher.serialNumber = eeprom_read(AL_SN);
 8001f4a:	2002      	movs	r0, #2
 8001f4c:	f000 faf2 	bl	8002534 <eeprom_read>
 8001f50:	4603      	mov	r3, r0
 8001f52:	461a      	mov	r2, r3
 8001f54:	4b19      	ldr	r3, [pc, #100]	@ (8001fbc <parameter_init+0xb0>)
 8001f56:	701a      	strb	r2, [r3, #0]
		// read motor runtime and assign a default value if out of range
		uint32_t rt = eeprom_read_uint32(M_RUNTIME);
 8001f58:	2008      	movs	r0, #8
 8001f5a:	f000 fbb3 	bl	80026c4 <eeprom_read_uint32>
 8001f5e:	6078      	str	r0, [r7, #4]
		if(rt > MOTOR_RUNTIME_MIN && rt < MOTOR_RUNTIME_MAX)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001f66:	d908      	bls.n	8001f7a <parameter_init+0x6e>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d803      	bhi.n	8001f7a <parameter_init+0x6e>
			motor.runTime = rt;
 8001f72:	4a13      	ldr	r2, [pc, #76]	@ (8001fc0 <parameter_init+0xb4>)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6013      	str	r3, [r2, #0]
 8001f78:	e003      	b.n	8001f82 <parameter_init+0x76>
		else
			motor.runTime = MOTOR_RUNTIME;
 8001f7a:	4b11      	ldr	r3, [pc, #68]	@ (8001fc0 <parameter_init+0xb4>)
 8001f7c:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8001f80:	601a      	str	r2, [r3, #0]
		//launcher.serialNumber[1] = eeprom_read(AL_SN2);
		printf("\r\nTubes: %c | Type: %c | Serial: %i | Runtime: %i\r\n", launcher.tubeCount, launcher.type, launcher.serialNumber, (int)motor.runTime);
 8001f82:	4b0e      	ldr	r3, [pc, #56]	@ (8001fbc <parameter_init+0xb0>)
 8001f84:	785b      	ldrb	r3, [r3, #1]
 8001f86:	4619      	mov	r1, r3
 8001f88:	4b0c      	ldr	r3, [pc, #48]	@ (8001fbc <parameter_init+0xb0>)
 8001f8a:	789b      	ldrb	r3, [r3, #2]
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001fbc <parameter_init+0xb0>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	4b0a      	ldr	r3, [pc, #40]	@ (8001fc0 <parameter_init+0xb4>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	9300      	str	r3, [sp, #0]
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	4809      	ldr	r0, [pc, #36]	@ (8001fc4 <parameter_init+0xb8>)
 8001f9e:	f005 fb6b 	bl	8007678 <iprintf>
	// test, remove
//	uint32_t before = eeprom_read_uint32(M_RUNTIME);
//	eeprom_write_uint32(M_RUNTIME, 10500);
//	uint32_t after = eeprom_read_uint32(M_RUNTIME);
//	printf("Runtime: before(%i), after(%i)\r\n", before,after);
}
 8001fa2:	e002      	b.n	8001faa <parameter_init+0x9e>
		printf("\r\n... Configuration NOT found in memory ... \r\n");
 8001fa4:	4808      	ldr	r0, [pc, #32]	@ (8001fc8 <parameter_init+0xbc>)
 8001fa6:	f005 fbcf 	bl	8007748 <puts>
}
 8001faa:	bf00      	nop
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000004 	.word	0x20000004
 8001fb8:	0800953c 	.word	0x0800953c
 8001fbc:	20000000 	.word	0x20000000
 8001fc0:	2000000c 	.word	0x2000000c
 8001fc4:	08008dcc 	.word	0x08008dcc
 8001fc8:	08009568 	.word	0x08009568

08001fcc <HAL_UART_RxCpltCallback>:

/* UART Receive complete interrupt callback, set rxStatus flag for new char received
 * re-enable uart rx interrupt */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
	// check that uart1 triggered the interrupt callback
	if(huart->Instance == USART1){
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a09      	ldr	r2, [pc, #36]	@ (8002000 <HAL_UART_RxCpltCallback+0x34>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d10b      	bne.n	8001ff6 <HAL_UART_RxCpltCallback+0x2a>
		rxChar = rxBuffer[0]; // store the only element in buffer to a char for easier variable handling
 8001fde:	4b09      	ldr	r3, [pc, #36]	@ (8002004 <HAL_UART_RxCpltCallback+0x38>)
 8001fe0:	781a      	ldrb	r2, [r3, #0]
 8001fe2:	4b09      	ldr	r3, [pc, #36]	@ (8002008 <HAL_UART_RxCpltCallback+0x3c>)
 8001fe4:	701a      	strb	r2, [r3, #0]
		rxStatus = active; // set flag to enter main menu char processing
 8001fe6:	4b09      	ldr	r3, [pc, #36]	@ (800200c <HAL_UART_RxCpltCallback+0x40>)
 8001fe8:	2201      	movs	r2, #1
 8001fea:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, (uint8_t *) rxBuffer, 1); // reactivate rx interrupt
 8001fec:	2201      	movs	r2, #1
 8001fee:	4905      	ldr	r1, [pc, #20]	@ (8002004 <HAL_UART_RxCpltCallback+0x38>)
 8001ff0:	4807      	ldr	r0, [pc, #28]	@ (8002010 <HAL_UART_RxCpltCallback+0x44>)
 8001ff2:	f004 fcef 	bl	80069d4 <HAL_UART_Receive_IT>
	}
}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40013800 	.word	0x40013800
 8002004:	2000016c 	.word	0x2000016c
 8002008:	2000016d 	.word	0x2000016d
 800200c:	2000016a 	.word	0x2000016a
 8002010:	200001bc 	.word	0x200001bc

08002014 <uartrx_interrupt_init>:

/* wrapper for 1st uart_rx call
 * The interrupt is enabled for rx after this function is called, and then disabled until called again */
void uartrx_interrupt_init(void){
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, (uint8_t *) rxBuffer, 1); // enable UART receive interrupt, store received char in rxChar buffer
 8002018:	2201      	movs	r2, #1
 800201a:	4903      	ldr	r1, [pc, #12]	@ (8002028 <uartrx_interrupt_init+0x14>)
 800201c:	4803      	ldr	r0, [pc, #12]	@ (800202c <uartrx_interrupt_init+0x18>)
 800201e:	f004 fcd9 	bl	80069d4 <HAL_UART_Receive_IT>
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	2000016c 	.word	0x2000016c
 800202c:	200001bc 	.word	0x200001bc

08002030 <voltage_read>:


analog_t voltage_read(uint8_t samples){
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	460b      	mov	r3, r1
 800203a:	70fb      	strb	r3, [r7, #3]
	analog_t voltage = {0, 0.0};
 800203c:	2300      	movs	r3, #0
 800203e:	81bb      	strh	r3, [r7, #12]
 8002040:	f04f 0300 	mov.w	r3, #0
 8002044:	613b      	str	r3, [r7, #16]
	// take an average of samples
	for(uint8_t i = 0; i<samples; i++){
 8002046:	2300      	movs	r3, #0
 8002048:	75fb      	strb	r3, [r7, #23]
 800204a:	e018      	b.n	800207e <voltage_read+0x4e>
		HAL_ADC_Start(&hadc1);
 800204c:	4828      	ldr	r0, [pc, #160]	@ (80020f0 <voltage_read+0xc0>)
 800204e:	f001 f8e3 	bl	8003218 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 10);
 8002052:	210a      	movs	r1, #10
 8002054:	4826      	ldr	r0, [pc, #152]	@ (80020f0 <voltage_read+0xc0>)
 8002056:	f001 f9b9 	bl	80033cc <HAL_ADC_PollForConversion>
		voltage.adcReading += HAL_ADC_GetValue(&hadc1);
 800205a:	4825      	ldr	r0, [pc, #148]	@ (80020f0 <voltage_read+0xc0>)
 800205c:	f001 fabc 	bl	80035d8 <HAL_ADC_GetValue>
 8002060:	4603      	mov	r3, r0
 8002062:	89ba      	ldrh	r2, [r7, #12]
 8002064:	b29b      	uxth	r3, r3
 8002066:	4413      	add	r3, r2
 8002068:	b29b      	uxth	r3, r3
 800206a:	81bb      	strh	r3, [r7, #12]
		HAL_ADC_Stop(&hadc1);
 800206c:	4820      	ldr	r0, [pc, #128]	@ (80020f0 <voltage_read+0xc0>)
 800206e:	f001 f981 	bl	8003374 <HAL_ADC_Stop>
		HAL_Delay(1);
 8002072:	2001      	movs	r0, #1
 8002074:	f000 ffd4 	bl	8003020 <HAL_Delay>
	for(uint8_t i = 0; i<samples; i++){
 8002078:	7dfb      	ldrb	r3, [r7, #23]
 800207a:	3301      	adds	r3, #1
 800207c:	75fb      	strb	r3, [r7, #23]
 800207e:	7dfa      	ldrb	r2, [r7, #23]
 8002080:	78fb      	ldrb	r3, [r7, #3]
 8002082:	429a      	cmp	r2, r3
 8002084:	d3e2      	bcc.n	800204c <voltage_read+0x1c>
	}
	voltage.adcReading = voltage.adcReading/samples;
 8002086:	89bb      	ldrh	r3, [r7, #12]
 8002088:	461a      	mov	r2, r3
 800208a:	78fb      	ldrb	r3, [r7, #3]
 800208c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002090:	b29b      	uxth	r3, r3
 8002092:	81bb      	strh	r3, [r7, #12]
	voltage.realValue = voltage.adcReading * 0.0083 + 0.3963; // 15.23 store coef. in eeprom
 8002094:	89bb      	ldrh	r3, [r7, #12]
 8002096:	4618      	mov	r0, r3
 8002098:	f7fe fb92 	bl	80007c0 <__aeabi_i2d>
 800209c:	a310      	add	r3, pc, #64	@ (adr r3, 80020e0 <voltage_read+0xb0>)
 800209e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a2:	f7fe f85d 	bl	8000160 <__aeabi_dmul>
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	4610      	mov	r0, r2
 80020ac:	4619      	mov	r1, r3
 80020ae:	a30e      	add	r3, pc, #56	@ (adr r3, 80020e8 <voltage_read+0xb8>)
 80020b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b4:	f7fe fa38 	bl	8000528 <__adddf3>
 80020b8:	4602      	mov	r2, r0
 80020ba:	460b      	mov	r3, r1
 80020bc:	4610      	mov	r0, r2
 80020be:	4619      	mov	r1, r3
 80020c0:	f7fe fc08 	bl	80008d4 <__aeabi_d2f>
 80020c4:	4603      	mov	r3, r0
 80020c6:	613b      	str	r3, [r7, #16]

	// get 1 decimal
	//uint8_t dec = (uint8_t)(vin * 10 - ((uint8_t)vin * 10)); // 152 - 150 = 2
	//printf("[AD# %d] Vin= %i.%i V\r\n", (uint8_t)adcReading,(uint8_t)vin, (uint8_t)(vin * 10 - ((uint8_t)vin * 10)) );
	return voltage;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	461a      	mov	r2, r3
 80020cc:	f107 030c 	add.w	r3, r7, #12
 80020d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80020d4:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	2474538f 	.word	0x2474538f
 80020e4:	3f80ff97 	.word	0x3f80ff97
 80020e8:	acd9e83e 	.word	0xacd9e83e
 80020ec:	3fd95cfa 	.word	0x3fd95cfa
 80020f0:	200000b4 	.word	0x200000b4

080020f4 <unground_xbt>:

/* Disconnect the XBT ABC pins from ground
 * 3 relays can be used as ground when SET, or ground when RESET based on jumpers JP6-7-8
 * If 1-2 pads are soldered, SET relays to unground, RESET relays to ground
 * Note: reset signal 3 is tied to other relays: CAL cont & CAL res */
void unground_xbt(void){
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
	if(relayLock == reFree){
 80020f8:	4b08      	ldr	r3, [pc, #32]	@ (800211c <unground_xbt+0x28>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d10b      	bne.n	8002118 <unground_xbt+0x24>
		relayLock = reLocked;
 8002100:	4b06      	ldr	r3, [pc, #24]	@ (800211c <unground_xbt+0x28>)
 8002102:	2201      	movs	r2, #1
 8002104:	701a      	strb	r2, [r3, #0]
		drive_relay(RELAY_RESET_3_GPIO_Port, RELAY_RESET_3_Pin, 10); // RESET relay k9, k10, k11, k12
 8002106:	220a      	movs	r2, #10
 8002108:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800210c:	4804      	ldr	r0, [pc, #16]	@ (8002120 <unground_xbt+0x2c>)
 800210e:	f000 f925 	bl	800235c <drive_relay>
		relayLock = reFree;
 8002112:	4b02      	ldr	r3, [pc, #8]	@ (800211c <unground_xbt+0x28>)
 8002114:	2200      	movs	r2, #0
 8002116:	701a      	strb	r2, [r3, #0]
	}
}
 8002118:	bf00      	nop
 800211a:	bd80      	pop	{r7, pc}
 800211c:	20000169 	.word	0x20000169
 8002120:	40011000 	.word	0x40011000

08002124 <calibration_resistor>:

void calibration_resistor(void){
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
	if(relayLock == reFree){
 8002128:	4b08      	ldr	r3, [pc, #32]	@ (800214c <calibration_resistor+0x28>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d10b      	bne.n	8002148 <calibration_resistor+0x24>
		relayLock = reLocked;
 8002130:	4b06      	ldr	r3, [pc, #24]	@ (800214c <calibration_resistor+0x28>)
 8002132:	2201      	movs	r2, #1
 8002134:	701a      	strb	r2, [r3, #0]
		drive_relay(RELAY_K12_CAL_RES_GPIO_Port, RELAY_K12_CAL_RES_Pin, 10); // SET relay k12
 8002136:	220a      	movs	r2, #10
 8002138:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800213c:	4804      	ldr	r0, [pc, #16]	@ (8002150 <calibration_resistor+0x2c>)
 800213e:	f000 f90d 	bl	800235c <drive_relay>
		relayLock = reFree;
 8002142:	4b02      	ldr	r3, [pc, #8]	@ (800214c <calibration_resistor+0x28>)
 8002144:	2200      	movs	r2, #0
 8002146:	701a      	strb	r2, [r3, #0]
	}
}
 8002148:	bf00      	nop
 800214a:	bd80      	pop	{r7, pc}
 800214c:	20000169 	.word	0x20000169
 8002150:	40010800 	.word	0x40010800

08002154 <calibrate_on>:

void calibrate_on(void){
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
	if(relayLock == reFree){
 8002158:	4b08      	ldr	r3, [pc, #32]	@ (800217c <calibrate_on+0x28>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d10b      	bne.n	8002178 <calibrate_on+0x24>
		relayLock = reLocked;
 8002160:	4b06      	ldr	r3, [pc, #24]	@ (800217c <calibrate_on+0x28>)
 8002162:	2201      	movs	r2, #1
 8002164:	701a      	strb	r2, [r3, #0]
		drive_relay(RELAY_K11_CAL_CONT_GPIO_Port, RELAY_K11_CAL_CONT_Pin, 10); // SET relay k11
 8002166:	220a      	movs	r2, #10
 8002168:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800216c:	4804      	ldr	r0, [pc, #16]	@ (8002180 <calibrate_on+0x2c>)
 800216e:	f000 f8f5 	bl	800235c <drive_relay>
		relayLock = reFree;
 8002172:	4b02      	ldr	r3, [pc, #8]	@ (800217c <calibrate_on+0x28>)
 8002174:	2200      	movs	r2, #0
 8002176:	701a      	strb	r2, [r3, #0]
	}
}
 8002178:	bf00      	nop
 800217a:	bd80      	pop	{r7, pc}
 800217c:	20000169 	.word	0x20000169
 8002180:	40010800 	.word	0x40010800

08002184 <reset_relay>:

void reset_relay(void){
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
	if(relayLock == reFree){
 8002188:	4b11      	ldr	r3, [pc, #68]	@ (80021d0 <reset_relay+0x4c>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d11d      	bne.n	80021cc <reset_relay+0x48>
		relayLock = reLocked;
 8002190:	4b0f      	ldr	r3, [pc, #60]	@ (80021d0 <reset_relay+0x4c>)
 8002192:	2201      	movs	r2, #1
 8002194:	701a      	strb	r2, [r3, #0]
		drive_relay(RELAY_RESET_1_GPIO_Port, RELAY_RESET_1_Pin, 10); // RESET relay k1, k2, k3, k4, SSR1, SSR2, SSR3, SSR4
 8002196:	220a      	movs	r2, #10
 8002198:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800219c:	480d      	ldr	r0, [pc, #52]	@ (80021d4 <reset_relay+0x50>)
 800219e:	f000 f8dd 	bl	800235c <drive_relay>
		HAL_Delay(10);
 80021a2:	200a      	movs	r0, #10
 80021a4:	f000 ff3c 	bl	8003020 <HAL_Delay>
		drive_relay(RELAY_RESET_2_GPIO_Port, RELAY_RESET_2_Pin, 10); // RESET relay k5, k6, k7, k8, SSR5, SSR6, SSR7, SSR8
 80021a8:	220a      	movs	r2, #10
 80021aa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80021ae:	480a      	ldr	r0, [pc, #40]	@ (80021d8 <reset_relay+0x54>)
 80021b0:	f000 f8d4 	bl	800235c <drive_relay>
		HAL_Delay(10);
 80021b4:	200a      	movs	r0, #10
 80021b6:	f000 ff33 	bl	8003020 <HAL_Delay>
		drive_relay(RELAY_RESET_3_GPIO_Port, RELAY_RESET_3_Pin, 10); // RESET relay k9, k10, k11, k12 - This grounds ABC
 80021ba:	220a      	movs	r2, #10
 80021bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80021c0:	4805      	ldr	r0, [pc, #20]	@ (80021d8 <reset_relay+0x54>)
 80021c2:	f000 f8cb 	bl	800235c <drive_relay>
		relayLock = reFree;
 80021c6:	4b02      	ldr	r3, [pc, #8]	@ (80021d0 <reset_relay+0x4c>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	701a      	strb	r2, [r3, #0]
	}
}
 80021cc:	bf00      	nop
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	20000169 	.word	0x20000169
 80021d4:	40010c00 	.word	0x40010c00
 80021d8:	40011000 	.word	0x40011000

080021dc <connect_xbt_pin>:

void connect_xbt_pin(uint8_t xbtNum){
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	71fb      	strb	r3, [r7, #7]

	if(relayLock == reFree){
 80021e6:	4b47      	ldr	r3, [pc, #284]	@ (8002304 <connect_xbt_pin+0x128>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f040 8085 	bne.w	80022fa <connect_xbt_pin+0x11e>
		relayLock = reLocked;
 80021f0:	4b44      	ldr	r3, [pc, #272]	@ (8002304 <connect_xbt_pin+0x128>)
 80021f2:	2201      	movs	r2, #1
 80021f4:	701a      	strb	r2, [r3, #0]

		switch (xbtNum){
 80021f6:	79fb      	ldrb	r3, [r7, #7]
 80021f8:	3b01      	subs	r3, #1
 80021fa:	2b07      	cmp	r3, #7
 80021fc:	d874      	bhi.n	80022e8 <connect_xbt_pin+0x10c>
 80021fe:	a201      	add	r2, pc, #4	@ (adr r2, 8002204 <connect_xbt_pin+0x28>)
 8002200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002204:	08002225 	.word	0x08002225
 8002208:	0800223f 	.word	0x0800223f
 800220c:	08002259 	.word	0x08002259
 8002210:	08002271 	.word	0x08002271
 8002214:	08002289 	.word	0x08002289
 8002218:	0800229f 	.word	0x0800229f
 800221c:	080022b5 	.word	0x080022b5
 8002220:	080022cf 	.word	0x080022cf
		case 1:
			drive_relay(RELAY_K1_GPIO_Port, RELAY_K1_Pin, 10); // SET relay k1
 8002224:	220a      	movs	r2, #10
 8002226:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800222a:	4837      	ldr	r0, [pc, #220]	@ (8002308 <connect_xbt_pin+0x12c>)
 800222c:	f000 f896 	bl	800235c <drive_relay>
			drive_relay(SSR_1_GPIO_Port, SSR_1_Pin, 1); // SET SSR1
 8002230:	2201      	movs	r2, #1
 8002232:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002236:	4834      	ldr	r0, [pc, #208]	@ (8002308 <connect_xbt_pin+0x12c>)
 8002238:	f000 f890 	bl	800235c <drive_relay>
			break;
 800223c:	e05a      	b.n	80022f4 <connect_xbt_pin+0x118>
		case 2:
			drive_relay(RELAY_K2_GPIO_Port, RELAY_K2_Pin, 10); // SET relay k2
 800223e:	220a      	movs	r2, #10
 8002240:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002244:	4830      	ldr	r0, [pc, #192]	@ (8002308 <connect_xbt_pin+0x12c>)
 8002246:	f000 f889 	bl	800235c <drive_relay>
			drive_relay(SSR_2_GPIO_Port, SSR_2_Pin, 1); // SET SSR2
 800224a:	2201      	movs	r2, #1
 800224c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002250:	482d      	ldr	r0, [pc, #180]	@ (8002308 <connect_xbt_pin+0x12c>)
 8002252:	f000 f883 	bl	800235c <drive_relay>
			break;
 8002256:	e04d      	b.n	80022f4 <connect_xbt_pin+0x118>
		case 3:
			drive_relay(RELAY_K3_GPIO_Port, RELAY_K3_Pin, 10); // SET relay k3
 8002258:	220a      	movs	r2, #10
 800225a:	2104      	movs	r1, #4
 800225c:	482b      	ldr	r0, [pc, #172]	@ (800230c <connect_xbt_pin+0x130>)
 800225e:	f000 f87d 	bl	800235c <drive_relay>
			drive_relay(SSR_3_GPIO_Port, SSR_3_Pin, 1); // SET SSR3
 8002262:	2201      	movs	r2, #1
 8002264:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002268:	4827      	ldr	r0, [pc, #156]	@ (8002308 <connect_xbt_pin+0x12c>)
 800226a:	f000 f877 	bl	800235c <drive_relay>
			break;
 800226e:	e041      	b.n	80022f4 <connect_xbt_pin+0x118>
		case 4:
			drive_relay(RELAY_K4_GPIO_Port, RELAY_K4_Pin, 10); // SET relay k4
 8002270:	220a      	movs	r2, #10
 8002272:	2108      	movs	r1, #8
 8002274:	4826      	ldr	r0, [pc, #152]	@ (8002310 <connect_xbt_pin+0x134>)
 8002276:	f000 f871 	bl	800235c <drive_relay>
			drive_relay(SSR_4_GPIO_Port, SSR_4_Pin, 1); // SET SSR4
 800227a:	2201      	movs	r2, #1
 800227c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002280:	4823      	ldr	r0, [pc, #140]	@ (8002310 <connect_xbt_pin+0x134>)
 8002282:	f000 f86b 	bl	800235c <drive_relay>
			break;
 8002286:	e035      	b.n	80022f4 <connect_xbt_pin+0x118>
		case 5:
			drive_relay(RELAY_K5_GPIO_Port, RELAY_K5_Pin, 10); // SET relay k5
 8002288:	220a      	movs	r2, #10
 800228a:	2110      	movs	r1, #16
 800228c:	4820      	ldr	r0, [pc, #128]	@ (8002310 <connect_xbt_pin+0x134>)
 800228e:	f000 f865 	bl	800235c <drive_relay>
			drive_relay(SSR_5_GPIO_Port, SSR_5_Pin, 1); // SET SSR5
 8002292:	2201      	movs	r2, #1
 8002294:	2180      	movs	r1, #128	@ 0x80
 8002296:	481c      	ldr	r0, [pc, #112]	@ (8002308 <connect_xbt_pin+0x12c>)
 8002298:	f000 f860 	bl	800235c <drive_relay>
			break;
 800229c:	e02a      	b.n	80022f4 <connect_xbt_pin+0x118>
		case 6:
			drive_relay(RELAY_K6_GPIO_Port, RELAY_K6_Pin, 10); // SET relay k6
 800229e:	220a      	movs	r2, #10
 80022a0:	2120      	movs	r1, #32
 80022a2:	481b      	ldr	r0, [pc, #108]	@ (8002310 <connect_xbt_pin+0x134>)
 80022a4:	f000 f85a 	bl	800235c <drive_relay>
			drive_relay(SSR_6_GPIO_Port, SSR_6_Pin, 1); // SET SSR6
 80022a8:	2201      	movs	r2, #1
 80022aa:	2140      	movs	r1, #64	@ 0x40
 80022ac:	4816      	ldr	r0, [pc, #88]	@ (8002308 <connect_xbt_pin+0x12c>)
 80022ae:	f000 f855 	bl	800235c <drive_relay>
			break;
 80022b2:	e01f      	b.n	80022f4 <connect_xbt_pin+0x118>
		case 7:
			drive_relay(RELAY_K7_GPIO_Port, RELAY_K7_Pin, 10); // SET relay k7
 80022b4:	220a      	movs	r2, #10
 80022b6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80022ba:	4813      	ldr	r0, [pc, #76]	@ (8002308 <connect_xbt_pin+0x12c>)
 80022bc:	f000 f84e 	bl	800235c <drive_relay>
			drive_relay(SSR_7_GPIO_Port, SSR_7_Pin, 1); // SET SSR7
 80022c0:	2201      	movs	r2, #1
 80022c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80022c6:	4812      	ldr	r0, [pc, #72]	@ (8002310 <connect_xbt_pin+0x134>)
 80022c8:	f000 f848 	bl	800235c <drive_relay>
			break;
 80022cc:	e012      	b.n	80022f4 <connect_xbt_pin+0x118>
		case 8:
			drive_relay(RELAY_K8_GPIO_Port, RELAY_K8_Pin, 10); // SET relay k8
 80022ce:	220a      	movs	r2, #10
 80022d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80022d4:	480f      	ldr	r0, [pc, #60]	@ (8002314 <connect_xbt_pin+0x138>)
 80022d6:	f000 f841 	bl	800235c <drive_relay>
			drive_relay(SSR_8_GPIO_Port, SSR_8_Pin, 1); // SET SSR8
 80022da:	2201      	movs	r2, #1
 80022dc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80022e0:	480b      	ldr	r0, [pc, #44]	@ (8002310 <connect_xbt_pin+0x134>)
 80022e2:	f000 f83b 	bl	800235c <drive_relay>
			break;
 80022e6:	e005      	b.n	80022f4 <connect_xbt_pin+0x118>
		default:
			printf("\r\n* ERROR: XBT %i relay not found *\r\n", xbtNum);
 80022e8:	79fb      	ldrb	r3, [r7, #7]
 80022ea:	4619      	mov	r1, r3
 80022ec:	480a      	ldr	r0, [pc, #40]	@ (8002318 <connect_xbt_pin+0x13c>)
 80022ee:	f005 f9c3 	bl	8007678 <iprintf>
			break;
 80022f2:	bf00      	nop
		}
		relayLock = reFree;
 80022f4:	4b03      	ldr	r3, [pc, #12]	@ (8002304 <connect_xbt_pin+0x128>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	701a      	strb	r2, [r3, #0]
	}
}
 80022fa:	bf00      	nop
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20000169 	.word	0x20000169
 8002308:	40011000 	.word	0x40011000
 800230c:	40011400 	.word	0x40011400
 8002310:	40010c00 	.word	0x40010c00
 8002314:	40010800 	.word	0x40010800
 8002318:	08009598 	.word	0x08009598

0800231c <relay_init>:

void relay_init(void){
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
	drive_relay(RELAY_RESET_1_GPIO_Port, RELAY_RESET_1_Pin, 10);  // RESET relay k1, k2, k3, k4, SSR1, SSR2, SSR3, SSR4
 8002320:	220a      	movs	r2, #10
 8002322:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002326:	480b      	ldr	r0, [pc, #44]	@ (8002354 <relay_init+0x38>)
 8002328:	f000 f818 	bl	800235c <drive_relay>
	HAL_Delay(10);
 800232c:	200a      	movs	r0, #10
 800232e:	f000 fe77 	bl	8003020 <HAL_Delay>
	drive_relay(RELAY_RESET_2_GPIO_Port, RELAY_RESET_2_Pin, 10); // RESET relay k5, k6, k7, k8, SSR5, SSR6, SSR7, SSR8
 8002332:	220a      	movs	r2, #10
 8002334:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002338:	4807      	ldr	r0, [pc, #28]	@ (8002358 <relay_init+0x3c>)
 800233a:	f000 f80f 	bl	800235c <drive_relay>
	HAL_Delay(10);
 800233e:	200a      	movs	r0, #10
 8002340:	f000 fe6e 	bl	8003020 <HAL_Delay>
	drive_relay(RELAY_RESET_3_GPIO_Port, RELAY_RESET_3_Pin, 10); // RESET relay k9, k10, k11, k12 (GND, calibration and continuity circuit)
 8002344:	220a      	movs	r2, #10
 8002346:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800234a:	4803      	ldr	r0, [pc, #12]	@ (8002358 <relay_init+0x3c>)
 800234c:	f000 f806 	bl	800235c <drive_relay>
}
 8002350:	bf00      	nop
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40010c00 	.word	0x40010c00
 8002358:	40011000 	.word	0x40011000

0800235c <drive_relay>:


void drive_relay(GPIO_TypeDef * relayPort, uint16_t relayPin, uint8_t onTime){
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	460b      	mov	r3, r1
 8002366:	807b      	strh	r3, [r7, #2]
 8002368:	4613      	mov	r3, r2
 800236a:	707b      	strb	r3, [r7, #1]
	// SET relay k
	HAL_GPIO_WritePin(relayPort, relayPin, SET); // set
 800236c:	887b      	ldrh	r3, [r7, #2]
 800236e:	2201      	movs	r2, #1
 8002370:	4619      	mov	r1, r3
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f001 fe14 	bl	8003fa0 <HAL_GPIO_WritePin>
	HAL_Delay(onTime); // time coil is driven in ms
 8002378:	787b      	ldrb	r3, [r7, #1]
 800237a:	4618      	mov	r0, r3
 800237c:	f000 fe50 	bl	8003020 <HAL_Delay>
	HAL_GPIO_WritePin(relayPort, relayPin, RESET); // release
 8002380:	887b      	ldrh	r3, [r7, #2]
 8002382:	2200      	movs	r2, #0
 8002384:	4619      	mov	r1, r3
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f001 fe0a 	bl	8003fa0 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 800238c:	2002      	movs	r0, #2
 800238e:	f000 fe47 	bl	8003020 <HAL_Delay>
}
 8002392:	bf00      	nop
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <extend_pin>:
/*********************** MOTOR CONTROL FUNCTIONS ***********************/

// ALV2 had a sequence with 4 delays of 8 ms, repeated in 300 steps = 4 * 8 ms * 300 = 7200 ms

/* Extend pin wrapper */
void extend_pin(uint8_t xbtNum){
 800239a:	b580      	push	{r7, lr}
 800239c:	b082      	sub	sp, #8
 800239e:	af00      	add	r7, sp, #0
 80023a0:	4603      	mov	r3, r0
 80023a2:	71fb      	strb	r3, [r7, #7]
	if (MOTOR_WIRING == 0){ // select spin direction based on wiring
		motor_select(xbtNum, CW);
 80023a4:	79fb      	ldrb	r3, [r7, #7]
 80023a6:	2101      	movs	r1, #1
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 f813 	bl	80023d4 <motor_select>
	} else {
		motor_select(xbtNum, CCW);
	}
}
 80023ae:	bf00      	nop
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <retract_pin>:

/* Retract pin wrapper */
void retract_pin(uint8_t xbtNum){
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b082      	sub	sp, #8
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	4603      	mov	r3, r0
 80023be:	71fb      	strb	r3, [r7, #7]
	if (MOTOR_WIRING == 0){ // select spin direction based on wiring
		motor_select(xbtNum, CCW);
 80023c0:	79fb      	ldrb	r3, [r7, #7]
 80023c2:	2100      	movs	r1, #0
 80023c4:	4618      	mov	r0, r3
 80023c6:	f000 f805 	bl	80023d4 <motor_select>
	} else {
		motor_select(xbtNum, CW);
	}
}
 80023ca:	bf00      	nop
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
	...

080023d4 <motor_select>:

/* Motor driver selector
 * direction to retract/extend may be different based on wiring
 * Parameters: XBT number, direction {CW,CCW} */
void motor_select(uint8_t xbtNum, motorDir_t dir){
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	460a      	mov	r2, r1
 80023de:	71fb      	strb	r3, [r7, #7]
 80023e0:	4613      	mov	r3, r2
 80023e2:	71bb      	strb	r3, [r7, #6]
	if(motorLock == mFree){
 80023e4:	4b35      	ldr	r3, [pc, #212]	@ (80024bc <motor_select+0xe8>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d162      	bne.n	80024b2 <motor_select+0xde>
		motorLock = mLocked;
 80023ec:	4b33      	ldr	r3, [pc, #204]	@ (80024bc <motor_select+0xe8>)
 80023ee:	2201      	movs	r2, #1
 80023f0:	701a      	strb	r2, [r3, #0]
		switch (xbtNum){
 80023f2:	79fb      	ldrb	r3, [r7, #7]
 80023f4:	3b01      	subs	r3, #1
 80023f6:	2b07      	cmp	r3, #7
 80023f8:	d852      	bhi.n	80024a0 <motor_select+0xcc>
 80023fa:	a201      	add	r2, pc, #4	@ (adr r2, 8002400 <motor_select+0x2c>)
 80023fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002400:	08002421 	.word	0x08002421
 8002404:	08002431 	.word	0x08002431
 8002408:	08002441 	.word	0x08002441
 800240c:	08002451 	.word	0x08002451
 8002410:	08002461 	.word	0x08002461
 8002414:	08002471 	.word	0x08002471
 8002418:	08002481 	.word	0x08002481
 800241c:	08002491 	.word	0x08002491
		case 1:
			drive_motor(ENABLE_M1_GPIO_Port, ENABLE_M1_Pin, dir, motor.runTime);
 8002420:	4b27      	ldr	r3, [pc, #156]	@ (80024c0 <motor_select+0xec>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	79ba      	ldrb	r2, [r7, #6]
 8002426:	2104      	movs	r1, #4
 8002428:	4826      	ldr	r0, [pc, #152]	@ (80024c4 <motor_select+0xf0>)
 800242a:	f000 f9a9 	bl	8002780 <drive_motor>
			break;
 800242e:	e03d      	b.n	80024ac <motor_select+0xd8>
		case 2:
			drive_motor(ENABLE_M2_GPIO_Port, ENABLE_M2_Pin, dir, motor.runTime);
 8002430:	4b23      	ldr	r3, [pc, #140]	@ (80024c0 <motor_select+0xec>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	79ba      	ldrb	r2, [r7, #6]
 8002436:	2108      	movs	r1, #8
 8002438:	4822      	ldr	r0, [pc, #136]	@ (80024c4 <motor_select+0xf0>)
 800243a:	f000 f9a1 	bl	8002780 <drive_motor>
			break;
 800243e:	e035      	b.n	80024ac <motor_select+0xd8>
		case 3:
			drive_motor(ENABLE_M3_GPIO_Port, ENABLE_M3_Pin, dir, motor.runTime);
 8002440:	4b1f      	ldr	r3, [pc, #124]	@ (80024c0 <motor_select+0xec>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	79ba      	ldrb	r2, [r7, #6]
 8002446:	2101      	movs	r1, #1
 8002448:	481f      	ldr	r0, [pc, #124]	@ (80024c8 <motor_select+0xf4>)
 800244a:	f000 f999 	bl	8002780 <drive_motor>
			break;
 800244e:	e02d      	b.n	80024ac <motor_select+0xd8>
		case 4:
			drive_motor(ENABLE_M4_GPIO_Port, ENABLE_M4_Pin, dir, motor.runTime);
 8002450:	4b1b      	ldr	r3, [pc, #108]	@ (80024c0 <motor_select+0xec>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	79ba      	ldrb	r2, [r7, #6]
 8002456:	2102      	movs	r1, #2
 8002458:	481b      	ldr	r0, [pc, #108]	@ (80024c8 <motor_select+0xf4>)
 800245a:	f000 f991 	bl	8002780 <drive_motor>
			break;
 800245e:	e025      	b.n	80024ac <motor_select+0xd8>
		case 5:
			drive_motor(ENABLE_M5_GPIO_Port, ENABLE_M5_Pin, dir, motor.runTime);
 8002460:	4b17      	ldr	r3, [pc, #92]	@ (80024c0 <motor_select+0xec>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	79ba      	ldrb	r2, [r7, #6]
 8002466:	2110      	movs	r1, #16
 8002468:	4817      	ldr	r0, [pc, #92]	@ (80024c8 <motor_select+0xf4>)
 800246a:	f000 f989 	bl	8002780 <drive_motor>
			break;
 800246e:	e01d      	b.n	80024ac <motor_select+0xd8>
		case 6:
			drive_motor(ENABLE_M6_GPIO_Port, ENABLE_M6_Pin, dir, motor.runTime);
 8002470:	4b13      	ldr	r3, [pc, #76]	@ (80024c0 <motor_select+0xec>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	79ba      	ldrb	r2, [r7, #6]
 8002476:	2120      	movs	r1, #32
 8002478:	4813      	ldr	r0, [pc, #76]	@ (80024c8 <motor_select+0xf4>)
 800247a:	f000 f981 	bl	8002780 <drive_motor>
			break;
 800247e:	e015      	b.n	80024ac <motor_select+0xd8>
		case 7:
			drive_motor(ENABLE_M7_GPIO_Port, ENABLE_M7_Pin, dir, motor.runTime);
 8002480:	4b0f      	ldr	r3, [pc, #60]	@ (80024c0 <motor_select+0xec>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	79ba      	ldrb	r2, [r7, #6]
 8002486:	2140      	movs	r1, #64	@ 0x40
 8002488:	480f      	ldr	r0, [pc, #60]	@ (80024c8 <motor_select+0xf4>)
 800248a:	f000 f979 	bl	8002780 <drive_motor>
			break;
 800248e:	e00d      	b.n	80024ac <motor_select+0xd8>
		case 8:
			drive_motor(ENABLE_M8_GPIO_Port, ENABLE_M8_Pin, dir, motor.runTime);
 8002490:	4b0b      	ldr	r3, [pc, #44]	@ (80024c0 <motor_select+0xec>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	79ba      	ldrb	r2, [r7, #6]
 8002496:	2180      	movs	r1, #128	@ 0x80
 8002498:	480b      	ldr	r0, [pc, #44]	@ (80024c8 <motor_select+0xf4>)
 800249a:	f000 f971 	bl	8002780 <drive_motor>
			break;
 800249e:	e005      	b.n	80024ac <motor_select+0xd8>
		default:
			printf("\r\n* ERROR: XBT %i motor not found *\r\n", xbtNum);
 80024a0:	79fb      	ldrb	r3, [r7, #7]
 80024a2:	4619      	mov	r1, r3
 80024a4:	4809      	ldr	r0, [pc, #36]	@ (80024cc <motor_select+0xf8>)
 80024a6:	f005 f8e7 	bl	8007678 <iprintf>
			break;
 80024aa:	bf00      	nop
		}
		motorLock = mFree;
 80024ac:	4b03      	ldr	r3, [pc, #12]	@ (80024bc <motor_select+0xe8>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	701a      	strb	r2, [r3, #0]
	}
}
 80024b2:	bf00      	nop
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	20000168 	.word	0x20000168
 80024c0:	2000000c 	.word	0x2000000c
 80024c4:	40011000 	.word	0x40011000
 80024c8:	40010800 	.word	0x40010800
 80024cc:	080095c0 	.word	0x080095c0

080024d0 <eeprom_write>:
/*********************** EEPROM FUNCTIONS ***********************/
/* Model: Microchip AT24XX01
 * Max freq 1 MHz, 1 Kbit memory (1024 bit), 128 x 8-bit block, 5 ms page write,
 * 8-Byte write pages, fixed device address 1010-xxxRW, 128 bytes memory range {00-7F} */

void eeprom_write(uint8_t memoryAddress, uint8_t dataByte){
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af02      	add	r7, sp, #8
 80024d6:	4603      	mov	r3, r0
 80024d8:	460a      	mov	r2, r1
 80024da:	71fb      	strb	r3, [r7, #7]
 80024dc:	4613      	mov	r3, r2
 80024de:	71bb      	strb	r3, [r7, #6]
	uint8_t txBuff[2] = {memoryAddress, dataByte};
 80024e0:	79fb      	ldrb	r3, [r7, #7]
 80024e2:	733b      	strb	r3, [r7, #12]
 80024e4:	79bb      	ldrb	r3, [r7, #6]
 80024e6:	737b      	strb	r3, [r7, #13]
	if(memoryAddress <= eeprom.MAX_MEM_ADDRESS ){
 80024e8:	79fb      	ldrb	r3, [r7, #7]
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002528 <eeprom_write+0x58>)
 80024ee:	885b      	ldrh	r3, [r3, #2]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d80d      	bhi.n	8002510 <eeprom_write+0x40>
		HAL_I2C_Master_Transmit(&hi2c1, EEPROM_BUS_ADDRESS , txBuff, 2, HAL_MAX_DELAY); // send word address, value
 80024f4:	f107 020c 	add.w	r2, r7, #12
 80024f8:	f04f 33ff 	mov.w	r3, #4294967295
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	2302      	movs	r3, #2
 8002500:	21a0      	movs	r1, #160	@ 0xa0
 8002502:	480a      	ldr	r0, [pc, #40]	@ (800252c <eeprom_write+0x5c>)
 8002504:	f001 fea8 	bl	8004258 <HAL_I2C_Master_Transmit>
		HAL_Delay(10); // wait for data to be written
 8002508:	200a      	movs	r0, #10
 800250a:	f000 fd89 	bl	8003020 <HAL_Delay>
	} else {
		printf("* ERROR: memory address %x out of range [0-%i] *\r\n", memoryAddress, eeprom.MAX_MEM_ADDRESS);
	}
}
 800250e:	e006      	b.n	800251e <eeprom_write+0x4e>
		printf("* ERROR: memory address %x out of range [0-%i] *\r\n", memoryAddress, eeprom.MAX_MEM_ADDRESS);
 8002510:	79fb      	ldrb	r3, [r7, #7]
 8002512:	4a05      	ldr	r2, [pc, #20]	@ (8002528 <eeprom_write+0x58>)
 8002514:	8852      	ldrh	r2, [r2, #2]
 8002516:	4619      	mov	r1, r3
 8002518:	4805      	ldr	r0, [pc, #20]	@ (8002530 <eeprom_write+0x60>)
 800251a:	f005 f8ad 	bl	8007678 <iprintf>
}
 800251e:	bf00      	nop
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	20000004 	.word	0x20000004
 800252c:	20000114 	.word	0x20000114
 8002530:	080095e8 	.word	0x080095e8

08002534 <eeprom_read>:

uint8_t eeprom_read(uint8_t memoryAddress){
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af02      	add	r7, sp, #8
 800253a:	4603      	mov	r3, r0
 800253c:	71fb      	strb	r3, [r7, #7]
	uint8_t addressBuffer[1] = {memoryAddress};
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	733b      	strb	r3, [r7, #12]
	uint8_t rxBuff[1] = {0};
 8002542:	2300      	movs	r3, #0
 8002544:	723b      	strb	r3, [r7, #8]
	if(memoryAddress <= eeprom.MAX_MEM_ADDRESS ){
 8002546:	79fb      	ldrb	r3, [r7, #7]
 8002548:	b29a      	uxth	r2, r3
 800254a:	4b15      	ldr	r3, [pc, #84]	@ (80025a0 <eeprom_read+0x6c>)
 800254c:	885b      	ldrh	r3, [r3, #2]
 800254e:	429a      	cmp	r2, r3
 8002550:	d81a      	bhi.n	8002588 <eeprom_read+0x54>
		HAL_I2C_Master_Transmit(&hi2c1, EEPROM_BUS_ADDRESS , addressBuffer, 1, HAL_MAX_DELAY); // dummy write to set pointer to desired memory address
 8002552:	f107 020c 	add.w	r2, r7, #12
 8002556:	f04f 33ff 	mov.w	r3, #4294967295
 800255a:	9300      	str	r3, [sp, #0]
 800255c:	2301      	movs	r3, #1
 800255e:	21a0      	movs	r1, #160	@ 0xa0
 8002560:	4810      	ldr	r0, [pc, #64]	@ (80025a4 <eeprom_read+0x70>)
 8002562:	f001 fe79 	bl	8004258 <HAL_I2C_Master_Transmit>
		HAL_Delay(10);
 8002566:	200a      	movs	r0, #10
 8002568:	f000 fd5a 	bl	8003020 <HAL_Delay>
		HAL_I2C_Master_Receive(&hi2c1, EEPROM_BUS_ADDRESS, rxBuff, 1, HAL_MAX_DELAY); // send command to read 1 byte at current memory address pointer
 800256c:	f107 0208 	add.w	r2, r7, #8
 8002570:	f04f 33ff 	mov.w	r3, #4294967295
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	2301      	movs	r3, #1
 8002578:	21a0      	movs	r1, #160	@ 0xa0
 800257a:	480a      	ldr	r0, [pc, #40]	@ (80025a4 <eeprom_read+0x70>)
 800257c:	f001 ff6a 	bl	8004454 <HAL_I2C_Master_Receive>
		HAL_Delay(10);
 8002580:	200a      	movs	r0, #10
 8002582:	f000 fd4d 	bl	8003020 <HAL_Delay>
 8002586:	e006      	b.n	8002596 <eeprom_read+0x62>
	} else {
		printf("* ERROR: memory address %x out of range [0-%i] *\r\n", memoryAddress, eeprom.MAX_MEM_ADDRESS);
 8002588:	79fb      	ldrb	r3, [r7, #7]
 800258a:	4a05      	ldr	r2, [pc, #20]	@ (80025a0 <eeprom_read+0x6c>)
 800258c:	8852      	ldrh	r2, [r2, #2]
 800258e:	4619      	mov	r1, r3
 8002590:	4805      	ldr	r0, [pc, #20]	@ (80025a8 <eeprom_read+0x74>)
 8002592:	f005 f871 	bl	8007678 <iprintf>
	}
	return ((uint8_t) rxBuff[0]);
 8002596:	7a3b      	ldrb	r3, [r7, #8]
}
 8002598:	4618      	mov	r0, r3
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	20000004 	.word	0x20000004
 80025a4:	20000114 	.word	0x20000114
 80025a8:	080095e8 	.word	0x080095e8

080025ac <eeprom_clear>:

/* Clear memory within a given range of addresses
 * Parameters: start address and end address (inclusive) [0-127]
 * Returns number of blocks cleared */
uint8_t eeprom_clear(uint8_t memoryStart, uint8_t memoryEnd){
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	4603      	mov	r3, r0
 80025b4:	460a      	mov	r2, r1
 80025b6:	71fb      	strb	r3, [r7, #7]
 80025b8:	4613      	mov	r3, r2
 80025ba:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	if( (memoryStart >= 0) && (memoryEnd <= eeprom.MAX_MEM_ADDRESS) ){
 80025bc:	79bb      	ldrb	r3, [r7, #6]
 80025be:	b29a      	uxth	r2, r3
 80025c0:	4b11      	ldr	r3, [pc, #68]	@ (8002608 <eeprom_clear+0x5c>)
 80025c2:	885b      	ldrh	r3, [r3, #2]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d80f      	bhi.n	80025e8 <eeprom_clear+0x3c>
		for(i = memoryStart ; i <= memoryEnd ; i++){
 80025c8:	79fb      	ldrb	r3, [r7, #7]
 80025ca:	73fb      	strb	r3, [r7, #15]
 80025cc:	e007      	b.n	80025de <eeprom_clear+0x32>
			eeprom_write(i, 0xFF);
 80025ce:	7bfb      	ldrb	r3, [r7, #15]
 80025d0:	21ff      	movs	r1, #255	@ 0xff
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7ff ff7c 	bl	80024d0 <eeprom_write>
		for(i = memoryStart ; i <= memoryEnd ; i++){
 80025d8:	7bfb      	ldrb	r3, [r7, #15]
 80025da:	3301      	adds	r3, #1
 80025dc:	73fb      	strb	r3, [r7, #15]
 80025de:	7bfa      	ldrb	r2, [r7, #15]
 80025e0:	79bb      	ldrb	r3, [r7, #6]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d9f3      	bls.n	80025ce <eeprom_clear+0x22>
 80025e6:	e005      	b.n	80025f4 <eeprom_clear+0x48>
		}
	} else {
		printf("* ERROR: memory out of range [0-%i] *\r\n", eeprom.MAX_MEM_ADDRESS);
 80025e8:	4b07      	ldr	r3, [pc, #28]	@ (8002608 <eeprom_clear+0x5c>)
 80025ea:	885b      	ldrh	r3, [r3, #2]
 80025ec:	4619      	mov	r1, r3
 80025ee:	4807      	ldr	r0, [pc, #28]	@ (800260c <eeprom_clear+0x60>)
 80025f0:	f005 f842 	bl	8007678 <iprintf>
	}
	return (i-memoryStart+1);
 80025f4:	7bfa      	ldrb	r2, [r7, #15]
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	3301      	adds	r3, #1
 80025fe:	b2db      	uxtb	r3, r3
}
 8002600:	4618      	mov	r0, r3
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	20000004 	.word	0x20000004
 800260c:	0800961c 	.word	0x0800961c

08002610 <eeprom_print_map>:

/* print memory map on eeprom
 * {AL_TUBECOUNT, AL_TYPE, AL_SN1, AL_SN2, AL_CONFIGED, M_RUNTIME } */
void eeprom_print_map(void){
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af04      	add	r7, sp, #16
	printf("\r\n");
 8002616:	480f      	ldr	r0, [pc, #60]	@ (8002654 <eeprom_print_map+0x44>)
 8002618:	f005 f896 	bl	8007748 <puts>
	printf("|=======================================|\r\n");
 800261c:	480e      	ldr	r0, [pc, #56]	@ (8002658 <eeprom_print_map+0x48>)
 800261e:	f005 f893 	bl	8007748 <puts>
	printf("|              MEMORY MAP               |\r\n");
 8002622:	480e      	ldr	r0, [pc, #56]	@ (800265c <eeprom_print_map+0x4c>)
 8002624:	f005 f890 	bl	8007748 <puts>
	printf("|=======================================|\r\n");
 8002628:	480b      	ldr	r0, [pc, #44]	@ (8002658 <eeprom_print_map+0x48>)
 800262a:	f005 f88d 	bl	8007748 <puts>
	printf("|[%03i]	 AL_TUBECOUNT                   |\r\n"
 800262e:	230b      	movs	r3, #11
 8002630:	9302      	str	r3, [sp, #8]
 8002632:	2308      	movs	r3, #8
 8002634:	9301      	str	r3, [sp, #4]
 8002636:	2303      	movs	r3, #3
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	2302      	movs	r3, #2
 800263c:	2201      	movs	r2, #1
 800263e:	2100      	movs	r1, #0
 8002640:	4807      	ldr	r0, [pc, #28]	@ (8002660 <eeprom_print_map+0x50>)
 8002642:	f005 f819 	bl	8007678 <iprintf>
		   "|[%03i] 	 AL_TYPE                        |\r\n"
		   "|[%03i] 	 AL_SN                          |\r\n"
		   "|[%03i] 	 AL_CONFIGED                    |\r\n"
		   "|[%03i-%03i]  M_RUNTIME                      |\r\n", AL_TUBECOUNT, AL_TYPE, AL_SN, AL_CONFIGED, M_RUNTIME,M_RUNTIME+3);
	printf("|=======================================|\r\n");
 8002646:	4804      	ldr	r0, [pc, #16]	@ (8002658 <eeprom_print_map+0x48>)
 8002648:	f005 f87e 	bl	8007748 <puts>
}
 800264c:	bf00      	nop
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	08008c30 	.word	0x08008c30
 8002658:	08009644 	.word	0x08009644
 800265c:	08009670 	.word	0x08009670
 8002660:	0800969c 	.word	0x0800969c

08002664 <eeprom_write_uint32>:

/* Writes a 32-bit number to memory [0-65535]
 * or any 4-byte value (float) */
void eeprom_write_uint32(uint8_t memoryStart, uint32_t data){
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	4603      	mov	r3, r0
 800266c:	6039      	str	r1, [r7, #0]
 800266e:	71fb      	strb	r3, [r7, #7]
	//[byte0][byte1][byte2][byte3] = 32 bit data
	uint8_t dataByte[4] = {(data>>0), (data>>8), (data>>16), (data>>24)}; // break up each byte of the 32 bit number
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	b2db      	uxtb	r3, r3
 8002674:	723b      	strb	r3, [r7, #8]
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	0a1b      	lsrs	r3, r3, #8
 800267a:	b2db      	uxtb	r3, r3
 800267c:	727b      	strb	r3, [r7, #9]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	0c1b      	lsrs	r3, r3, #16
 8002682:	b2db      	uxtb	r3, r3
 8002684:	72bb      	strb	r3, [r7, #10]
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	0e1b      	lsrs	r3, r3, #24
 800268a:	b2db      	uxtb	r3, r3
 800268c:	72fb      	strb	r3, [r7, #11]
	for(uint8_t i = 0; i < 4; i++){
 800268e:	2300      	movs	r3, #0
 8002690:	73fb      	strb	r3, [r7, #15]
 8002692:	e00f      	b.n	80026b4 <eeprom_write_uint32+0x50>
		eeprom_write(memoryStart+i, dataByte[i]);
 8002694:	79fa      	ldrb	r2, [r7, #7]
 8002696:	7bfb      	ldrb	r3, [r7, #15]
 8002698:	4413      	add	r3, r2
 800269a:	b2da      	uxtb	r2, r3
 800269c:	7bfb      	ldrb	r3, [r7, #15]
 800269e:	3310      	adds	r3, #16
 80026a0:	443b      	add	r3, r7
 80026a2:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80026a6:	4619      	mov	r1, r3
 80026a8:	4610      	mov	r0, r2
 80026aa:	f7ff ff11 	bl	80024d0 <eeprom_write>
	for(uint8_t i = 0; i < 4; i++){
 80026ae:	7bfb      	ldrb	r3, [r7, #15]
 80026b0:	3301      	adds	r3, #1
 80026b2:	73fb      	strb	r3, [r7, #15]
 80026b4:	7bfb      	ldrb	r3, [r7, #15]
 80026b6:	2b03      	cmp	r3, #3
 80026b8:	d9ec      	bls.n	8002694 <eeprom_write_uint32+0x30>
	}

}
 80026ba:	bf00      	nop
 80026bc:	bf00      	nop
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <eeprom_read_uint32>:

/* Reads a 32-bit number from memory [0-65535]*/
uint32_t eeprom_read_uint32(uint8_t memoryStart){
 80026c4:	b590      	push	{r4, r7, lr}
 80026c6:	b087      	sub	sp, #28
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	71fb      	strb	r3, [r7, #7]
	//[byte0][byte1][byte2][byte3] = 32 bit data
	uint8_t dataByte[4];
	uint32_t number;
	for(uint8_t i = 0; i < 4; i++){
 80026ce:	2300      	movs	r3, #0
 80026d0:	75fb      	strb	r3, [r7, #23]
 80026d2:	e011      	b.n	80026f8 <eeprom_read_uint32+0x34>
		dataByte[i] = eeprom_read(memoryStart+i);
 80026d4:	79fa      	ldrb	r2, [r7, #7]
 80026d6:	7dfb      	ldrb	r3, [r7, #23]
 80026d8:	4413      	add	r3, r2
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	7dfc      	ldrb	r4, [r7, #23]
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff ff28 	bl	8002534 <eeprom_read>
 80026e4:	4603      	mov	r3, r0
 80026e6:	461a      	mov	r2, r3
 80026e8:	f104 0318 	add.w	r3, r4, #24
 80026ec:	443b      	add	r3, r7
 80026ee:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t i = 0; i < 4; i++){
 80026f2:	7dfb      	ldrb	r3, [r7, #23]
 80026f4:	3301      	adds	r3, #1
 80026f6:	75fb      	strb	r3, [r7, #23]
 80026f8:	7dfb      	ldrb	r3, [r7, #23]
 80026fa:	2b03      	cmp	r3, #3
 80026fc:	d9ea      	bls.n	80026d4 <eeprom_read_uint32+0x10>
	}
	number = (dataByte[3]<<24) + (dataByte[2]<<16) + (dataByte[1]<<8) + dataByte[0]; // put back the 32 bit number [byte0]+[byte1]+[byte2]+[byte3]
 80026fe:	7bfb      	ldrb	r3, [r7, #15]
 8002700:	061a      	lsls	r2, r3, #24
 8002702:	7bbb      	ldrb	r3, [r7, #14]
 8002704:	041b      	lsls	r3, r3, #16
 8002706:	441a      	add	r2, r3
 8002708:	7b7b      	ldrb	r3, [r7, #13]
 800270a:	021b      	lsls	r3, r3, #8
 800270c:	4413      	add	r3, r2
 800270e:	7b3a      	ldrb	r2, [r7, #12]
 8002710:	4413      	add	r3, r2
 8002712:	613b      	str	r3, [r7, #16]

	return number;
 8002714:	693b      	ldr	r3, [r7, #16]
}
 8002716:	4618      	mov	r0, r3
 8002718:	371c      	adds	r7, #28
 800271a:	46bd      	mov	sp, r7
 800271c:	bd90      	pop	{r4, r7, pc}
	...

08002720 <motor_init>:
		return 1;
	}
}


void motor_init(void){
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(ENABLE_M1_GPIO_Port, ENABLE_M1_Pin, RESET); // start disabled
 8002724:	2200      	movs	r2, #0
 8002726:	2104      	movs	r1, #4
 8002728:	4813      	ldr	r0, [pc, #76]	@ (8002778 <motor_init+0x58>)
 800272a:	f001 fc39 	bl	8003fa0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M2_GPIO_Port, ENABLE_M2_Pin, RESET); // start disabled
 800272e:	2200      	movs	r2, #0
 8002730:	2108      	movs	r1, #8
 8002732:	4811      	ldr	r0, [pc, #68]	@ (8002778 <motor_init+0x58>)
 8002734:	f001 fc34 	bl	8003fa0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M3_GPIO_Port, ENABLE_M3_Pin, RESET); // start disabled
 8002738:	2200      	movs	r2, #0
 800273a:	2101      	movs	r1, #1
 800273c:	480f      	ldr	r0, [pc, #60]	@ (800277c <motor_init+0x5c>)
 800273e:	f001 fc2f 	bl	8003fa0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M4_GPIO_Port, ENABLE_M4_Pin, RESET); // start disabled
 8002742:	2200      	movs	r2, #0
 8002744:	2102      	movs	r1, #2
 8002746:	480d      	ldr	r0, [pc, #52]	@ (800277c <motor_init+0x5c>)
 8002748:	f001 fc2a 	bl	8003fa0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M5_GPIO_Port, ENABLE_M5_Pin, RESET); // start disabled
 800274c:	2200      	movs	r2, #0
 800274e:	2110      	movs	r1, #16
 8002750:	480a      	ldr	r0, [pc, #40]	@ (800277c <motor_init+0x5c>)
 8002752:	f001 fc25 	bl	8003fa0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M6_GPIO_Port, ENABLE_M6_Pin, RESET); // start disabled
 8002756:	2200      	movs	r2, #0
 8002758:	2120      	movs	r1, #32
 800275a:	4808      	ldr	r0, [pc, #32]	@ (800277c <motor_init+0x5c>)
 800275c:	f001 fc20 	bl	8003fa0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M7_GPIO_Port, ENABLE_M7_Pin, RESET); // start disabled
 8002760:	2200      	movs	r2, #0
 8002762:	2140      	movs	r1, #64	@ 0x40
 8002764:	4805      	ldr	r0, [pc, #20]	@ (800277c <motor_init+0x5c>)
 8002766:	f001 fc1b 	bl	8003fa0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M8_GPIO_Port, ENABLE_M8_Pin, RESET); // start disabled
 800276a:	2200      	movs	r2, #0
 800276c:	2180      	movs	r1, #128	@ 0x80
 800276e:	4803      	ldr	r0, [pc, #12]	@ (800277c <motor_init+0x5c>)
 8002770:	f001 fc16 	bl	8003fa0 <HAL_GPIO_WritePin>
}
 8002774:	bf00      	nop
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40011000 	.word	0x40011000
 800277c:	40010800 	.word	0x40010800

08002780 <drive_motor>:

void drive_motor(GPIO_TypeDef * motorPort, uint16_t motorPin, motorDir_t motorDirection, uint32_t runtime ){
 8002780:	b580      	push	{r7, lr}
 8002782:	b096      	sub	sp, #88	@ 0x58
 8002784:	af02      	add	r7, sp, #8
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	607b      	str	r3, [r7, #4]
 800278a:	460b      	mov	r3, r1
 800278c:	817b      	strh	r3, [r7, #10]
 800278e:	4613      	mov	r3, r2
 8002790:	727b      	strb	r3, [r7, #9]
	uint32_t t0, adcReading = 0;
 8002792:	2300      	movs	r3, #0
 8002794:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint16_t motor_i = 0;
 8002796:	2300      	movs	r3, #0
 8002798:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
	char adcmsg[50];

	HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_3 ); // Start STEP signal >> counter toggle to toggle every 20/1000 sec = 50hz
 800279c:	2108      	movs	r1, #8
 800279e:	4854      	ldr	r0, [pc, #336]	@ (80028f0 <drive_motor+0x170>)
 80027a0:	f003 fa6e 	bl	8005c80 <HAL_TIM_OC_Start>
	// motor
	HAL_GPIO_WritePin(motorPort, motorPin, RESET); // make sure to disable driver
 80027a4:	897b      	ldrh	r3, [r7, #10]
 80027a6:	2200      	movs	r2, #0
 80027a8:	4619      	mov	r1, r3
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	f001 fbf8 	bl	8003fa0 <HAL_GPIO_WritePin>
	HAL_Delay(10); // wait for the motor to stop
 80027b0:	200a      	movs	r0, #10
 80027b2:	f000 fc35 	bl	8003020 <HAL_Delay>
	HAL_GPIO_WritePin(DIR_GPIO_Port,DIR_Pin, motorDirection); // set motor direction
 80027b6:	7a7b      	ldrb	r3, [r7, #9]
 80027b8:	461a      	mov	r2, r3
 80027ba:	2110      	movs	r1, #16
 80027bc:	484d      	ldr	r0, [pc, #308]	@ (80028f4 <drive_motor+0x174>)
 80027be:	f001 fbef 	bl	8003fa0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motorPort, motorPin, SET); // enable driver to run motor
 80027c2:	897b      	ldrh	r3, [r7, #10]
 80027c4:	2201      	movs	r2, #1
 80027c6:	4619      	mov	r1, r3
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f001 fbe9 	bl	8003fa0 <HAL_GPIO_WritePin>
	// read current
	// should launch a timer here and stop it after X seconds
	t0 = HAL_GetTick();
 80027ce:	f000 fc1d 	bl	800300c <HAL_GetTick>
 80027d2:	6478      	str	r0, [r7, #68]	@ 0x44

	for (uint8_t ci = 1; ci < 20; ci++){
 80027d4:	2301      	movs	r3, #1
 80027d6:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 80027da:	e06d      	b.n	80028b8 <drive_motor+0x138>
		adcReading = 0;
 80027dc:	2300      	movs	r3, #0
 80027de:	64fb      	str	r3, [r7, #76]	@ 0x4c
		for(uint8_t cj = 0; cj<100; cj++){
 80027e0:	2300      	movs	r3, #0
 80027e2:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 80027e6:	e018      	b.n	800281a <drive_motor+0x9a>
			HAL_ADC_Start(&hadc2);
 80027e8:	4843      	ldr	r0, [pc, #268]	@ (80028f8 <drive_motor+0x178>)
 80027ea:	f000 fd15 	bl	8003218 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc2, 100);
 80027ee:	2164      	movs	r1, #100	@ 0x64
 80027f0:	4841      	ldr	r0, [pc, #260]	@ (80028f8 <drive_motor+0x178>)
 80027f2:	f000 fdeb 	bl	80033cc <HAL_ADC_PollForConversion>
			adcReading += HAL_ADC_GetValue(&hadc2);
 80027f6:	4840      	ldr	r0, [pc, #256]	@ (80028f8 <drive_motor+0x178>)
 80027f8:	f000 feee 	bl	80035d8 <HAL_ADC_GetValue>
 80027fc:	4602      	mov	r2, r0
 80027fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002800:	4413      	add	r3, r2
 8002802:	64fb      	str	r3, [r7, #76]	@ 0x4c
			HAL_ADC_Stop(&hadc2);
 8002804:	483c      	ldr	r0, [pc, #240]	@ (80028f8 <drive_motor+0x178>)
 8002806:	f000 fdb5 	bl	8003374 <HAL_ADC_Stop>
			HAL_Delay(1);
 800280a:	2001      	movs	r0, #1
 800280c:	f000 fc08 	bl	8003020 <HAL_Delay>
		for(uint8_t cj = 0; cj<100; cj++){
 8002810:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8002814:	3301      	adds	r3, #1
 8002816:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 800281a:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800281e:	2b63      	cmp	r3, #99	@ 0x63
 8002820:	d9e2      	bls.n	80027e8 <drive_motor+0x68>
		}
		adcReading = adcReading/100;
 8002822:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002824:	4a35      	ldr	r2, [pc, #212]	@ (80028fc <drive_motor+0x17c>)
 8002826:	fba2 2303 	umull	r2, r3, r2, r3
 800282a:	095b      	lsrs	r3, r3, #5
 800282c:	64fb      	str	r3, [r7, #76]	@ 0x4c
		motor_i = (uint16_t) (adcReading * 0.163 + 7.3581); // mA - opAmp G = 50, Rsense = 0.10 ohm
 800282e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002830:	f7fd ffb6 	bl	80007a0 <__aeabi_ui2d>
 8002834:	a32a      	add	r3, pc, #168	@ (adr r3, 80028e0 <drive_motor+0x160>)
 8002836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800283a:	f7fd fc91 	bl	8000160 <__aeabi_dmul>
 800283e:	4602      	mov	r2, r0
 8002840:	460b      	mov	r3, r1
 8002842:	4610      	mov	r0, r2
 8002844:	4619      	mov	r1, r3
 8002846:	a328      	add	r3, pc, #160	@ (adr r3, 80028e8 <drive_motor+0x168>)
 8002848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800284c:	f7fd fe6c 	bl	8000528 <__adddf3>
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
 8002854:	4610      	mov	r0, r2
 8002856:	4619      	mov	r1, r3
 8002858:	f7fe f81c 	bl	8000894 <__aeabi_d2uiz>
 800285c:	4603      	mov	r3, r0
 800285e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

		sprintf(adcmsg, "[AD# %d] Im_%d = %d mA\r\n", (int)adcReading, ci ,(int) motor_i);
 8002862:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002864:	f897 104b 	ldrb.w	r1, [r7, #75]	@ 0x4b
 8002868:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800286c:	f107 0010 	add.w	r0, r7, #16
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	460b      	mov	r3, r1
 8002874:	4922      	ldr	r1, [pc, #136]	@ (8002900 <drive_motor+0x180>)
 8002876:	f005 f823 	bl	80078c0 <siprintf>
		HAL_UART_Transmit(&huart1, adcmsg, strlen(adcmsg), HAL_MAX_DELAY);
 800287a:	f107 0310 	add.w	r3, r7, #16
 800287e:	4618      	mov	r0, r3
 8002880:	f7fd fc66 	bl	8000150 <strlen>
 8002884:	4603      	mov	r3, r0
 8002886:	b29a      	uxth	r2, r3
 8002888:	f107 0110 	add.w	r1, r7, #16
 800288c:	f04f 33ff 	mov.w	r3, #4294967295
 8002890:	481c      	ldr	r0, [pc, #112]	@ (8002904 <drive_motor+0x184>)
 8002892:	f003 ff7d 	bl	8006790 <HAL_UART_Transmit>
		HAL_Delay(1000);
 8002896:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800289a:	f000 fbc1 	bl	8003020 <HAL_Delay>
		if((HAL_GetTick() - t0) > runtime) break;
 800289e:	f000 fbb5 	bl	800300c <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d309      	bcc.n	80028c2 <drive_motor+0x142>
	for (uint8_t ci = 1; ci < 20; ci++){
 80028ae:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80028b2:	3301      	adds	r3, #1
 80028b4:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 80028b8:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80028bc:	2b13      	cmp	r3, #19
 80028be:	d98d      	bls.n	80027dc <drive_motor+0x5c>
 80028c0:	e000      	b.n	80028c4 <drive_motor+0x144>
		if((HAL_GetTick() - t0) > runtime) break;
 80028c2:	bf00      	nop
	}
	HAL_GPIO_WritePin(motorPort, motorPin, RESET); // disable driver
 80028c4:	897b      	ldrh	r3, [r7, #10]
 80028c6:	2200      	movs	r2, #0
 80028c8:	4619      	mov	r1, r3
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f001 fb68 	bl	8003fa0 <HAL_GPIO_WritePin>
	HAL_TIM_OC_Stop(&htim3, TIM_CHANNEL_3 );
 80028d0:	2108      	movs	r1, #8
 80028d2:	4807      	ldr	r0, [pc, #28]	@ (80028f0 <drive_motor+0x170>)
 80028d4:	f003 fa76 	bl	8005dc4 <HAL_TIM_OC_Stop>

}
 80028d8:	bf00      	nop
 80028da:	3750      	adds	r7, #80	@ 0x50
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	1a9fbe77 	.word	0x1a9fbe77
 80028e4:	3fc4dd2f 	.word	0x3fc4dd2f
 80028e8:	c432ca58 	.word	0xc432ca58
 80028ec:	401d6eb1 	.word	0x401d6eb1
 80028f0:	20000174 	.word	0x20000174
 80028f4:	40011000 	.word	0x40011000
 80028f8:	200000e4 	.word	0x200000e4
 80028fc:	51eb851f 	.word	0x51eb851f
 8002900:	08009824 	.word	0x08009824
 8002904:	200001bc 	.word	0x200001bc

08002908 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800290c:	b672      	cpsid	i
}
 800290e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002910:	bf00      	nop
 8002912:	e7fd      	b.n	8002910 <Error_Handler+0x8>

08002914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800291a:	4b15      	ldr	r3, [pc, #84]	@ (8002970 <HAL_MspInit+0x5c>)
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	4a14      	ldr	r2, [pc, #80]	@ (8002970 <HAL_MspInit+0x5c>)
 8002920:	f043 0301 	orr.w	r3, r3, #1
 8002924:	6193      	str	r3, [r2, #24]
 8002926:	4b12      	ldr	r3, [pc, #72]	@ (8002970 <HAL_MspInit+0x5c>)
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	60bb      	str	r3, [r7, #8]
 8002930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002932:	4b0f      	ldr	r3, [pc, #60]	@ (8002970 <HAL_MspInit+0x5c>)
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	4a0e      	ldr	r2, [pc, #56]	@ (8002970 <HAL_MspInit+0x5c>)
 8002938:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800293c:	61d3      	str	r3, [r2, #28]
 800293e:	4b0c      	ldr	r3, [pc, #48]	@ (8002970 <HAL_MspInit+0x5c>)
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002946:	607b      	str	r3, [r7, #4]
 8002948:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800294a:	4b0a      	ldr	r3, [pc, #40]	@ (8002974 <HAL_MspInit+0x60>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	4a04      	ldr	r2, [pc, #16]	@ (8002974 <HAL_MspInit+0x60>)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002966:	bf00      	nop
 8002968:	3714      	adds	r7, #20
 800296a:	46bd      	mov	sp, r7
 800296c:	bc80      	pop	{r7}
 800296e:	4770      	bx	lr
 8002970:	40021000 	.word	0x40021000
 8002974:	40010000 	.word	0x40010000

08002978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800297c:	bf00      	nop
 800297e:	e7fd      	b.n	800297c <NMI_Handler+0x4>

08002980 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002984:	bf00      	nop
 8002986:	e7fd      	b.n	8002984 <HardFault_Handler+0x4>

08002988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800298c:	bf00      	nop
 800298e:	e7fd      	b.n	800298c <MemManage_Handler+0x4>

08002990 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002994:	bf00      	nop
 8002996:	e7fd      	b.n	8002994 <BusFault_Handler+0x4>

08002998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800299c:	bf00      	nop
 800299e:	e7fd      	b.n	800299c <UsageFault_Handler+0x4>

080029a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029a4:	bf00      	nop
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr

080029ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029b0:	bf00      	nop
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bc80      	pop	{r7}
 80029b6:	4770      	bx	lr

080029b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029bc:	bf00      	nop
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr

080029c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029c8:	f000 fb0e 	bl	8002fe8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029cc:	bf00      	nop
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80029d4:	4802      	ldr	r0, [pc, #8]	@ (80029e0 <USART1_IRQHandler+0x10>)
 80029d6:	f004 f823 	bl	8006a20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80029da:	bf00      	nop
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	200001bc 	.word	0x200001bc

080029e4 <_close>:
  }
  return len;
}

int _close(int file)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80029ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bc80      	pop	{r7}
 80029f8:	4770      	bx	lr

080029fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b083      	sub	sp, #12
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a0a:	605a      	str	r2, [r3, #4]
  return 0;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bc80      	pop	{r7}
 8002a16:	4770      	bx	lr

08002a18 <_isatty>:

int _isatty(int file)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a20:	2301      	movs	r3, #1
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr

08002a2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3714      	adds	r7, #20
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr

08002a44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a4c:	4a14      	ldr	r2, [pc, #80]	@ (8002aa0 <_sbrk+0x5c>)
 8002a4e:	4b15      	ldr	r3, [pc, #84]	@ (8002aa4 <_sbrk+0x60>)
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a58:	4b13      	ldr	r3, [pc, #76]	@ (8002aa8 <_sbrk+0x64>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d102      	bne.n	8002a66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a60:	4b11      	ldr	r3, [pc, #68]	@ (8002aa8 <_sbrk+0x64>)
 8002a62:	4a12      	ldr	r2, [pc, #72]	@ (8002aac <_sbrk+0x68>)
 8002a64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a66:	4b10      	ldr	r3, [pc, #64]	@ (8002aa8 <_sbrk+0x64>)
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d207      	bcs.n	8002a84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a74:	f005 f86a 	bl	8007b4c <__errno>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	220c      	movs	r2, #12
 8002a7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a82:	e009      	b.n	8002a98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a84:	4b08      	ldr	r3, [pc, #32]	@ (8002aa8 <_sbrk+0x64>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a8a:	4b07      	ldr	r3, [pc, #28]	@ (8002aa8 <_sbrk+0x64>)
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4413      	add	r3, r2
 8002a92:	4a05      	ldr	r2, [pc, #20]	@ (8002aa8 <_sbrk+0x64>)
 8002a94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a96:	68fb      	ldr	r3, [r7, #12]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3718      	adds	r7, #24
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	20005000 	.word	0x20005000
 8002aa4:	00000400 	.word	0x00000400
 8002aa8:	20000170 	.word	0x20000170
 8002aac:	200003a0 	.word	0x200003a0

08002ab0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ab4:	bf00      	nop
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bc80      	pop	{r7}
 8002aba:	4770      	bx	lr

08002abc <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b08e      	sub	sp, #56	@ 0x38
 8002ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ac2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	605a      	str	r2, [r3, #4]
 8002acc:	609a      	str	r2, [r3, #8]
 8002ace:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ad0:	f107 0320 	add.w	r3, r7, #32
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ada:	1d3b      	adds	r3, r7, #4
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	605a      	str	r2, [r3, #4]
 8002ae2:	609a      	str	r2, [r3, #8]
 8002ae4:	60da      	str	r2, [r3, #12]
 8002ae6:	611a      	str	r2, [r3, #16]
 8002ae8:	615a      	str	r2, [r3, #20]
 8002aea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002aec:	4b2c      	ldr	r3, [pc, #176]	@ (8002ba0 <MX_TIM3_Init+0xe4>)
 8002aee:	4a2d      	ldr	r2, [pc, #180]	@ (8002ba4 <MX_TIM3_Init+0xe8>)
 8002af0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 8002af2:	4b2b      	ldr	r3, [pc, #172]	@ (8002ba0 <MX_TIM3_Init+0xe4>)
 8002af4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002af8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002afa:	4b29      	ldr	r3, [pc, #164]	@ (8002ba0 <MX_TIM3_Init+0xe4>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 15-1;
 8002b00:	4b27      	ldr	r3, [pc, #156]	@ (8002ba0 <MX_TIM3_Init+0xe4>)
 8002b02:	220e      	movs	r2, #14
 8002b04:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b06:	4b26      	ldr	r3, [pc, #152]	@ (8002ba0 <MX_TIM3_Init+0xe4>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b0c:	4b24      	ldr	r3, [pc, #144]	@ (8002ba0 <MX_TIM3_Init+0xe4>)
 8002b0e:	2280      	movs	r2, #128	@ 0x80
 8002b10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002b12:	4823      	ldr	r0, [pc, #140]	@ (8002ba0 <MX_TIM3_Init+0xe4>)
 8002b14:	f003 f80c 	bl	8005b30 <HAL_TIM_Base_Init>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002b1e:	f7ff fef3 	bl	8002908 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b26:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002b28:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	481c      	ldr	r0, [pc, #112]	@ (8002ba0 <MX_TIM3_Init+0xe4>)
 8002b30:	f003 fa08 	bl	8005f44 <HAL_TIM_ConfigClockSource>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002b3a:	f7ff fee5 	bl	8002908 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8002b3e:	4818      	ldr	r0, [pc, #96]	@ (8002ba0 <MX_TIM3_Init+0xe4>)
 8002b40:	f003 f845 	bl	8005bce <HAL_TIM_OC_Init>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002b4a:	f7ff fedd 	bl	8002908 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b52:	2300      	movs	r3, #0
 8002b54:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b56:	f107 0320 	add.w	r3, r7, #32
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	4810      	ldr	r0, [pc, #64]	@ (8002ba0 <MX_TIM3_Init+0xe4>)
 8002b5e:	f003 fd69 	bl	8006634 <HAL_TIMEx_MasterConfigSynchronization>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002b68:	f7ff fece 	bl	8002908 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8002b6c:	2330      	movs	r3, #48	@ 0x30
 8002b6e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002b70:	2300      	movs	r3, #0
 8002b72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b74:	2300      	movs	r3, #0
 8002b76:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002b7c:	1d3b      	adds	r3, r7, #4
 8002b7e:	2208      	movs	r2, #8
 8002b80:	4619      	mov	r1, r3
 8002b82:	4807      	ldr	r0, [pc, #28]	@ (8002ba0 <MX_TIM3_Init+0xe4>)
 8002b84:	f003 f982 	bl	8005e8c <HAL_TIM_OC_ConfigChannel>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002b8e:	f7ff febb 	bl	8002908 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002b92:	4803      	ldr	r0, [pc, #12]	@ (8002ba0 <MX_TIM3_Init+0xe4>)
 8002b94:	f000 f826 	bl	8002be4 <HAL_TIM_MspPostInit>

}
 8002b98:	bf00      	nop
 8002b9a:	3738      	adds	r7, #56	@ 0x38
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	20000174 	.word	0x20000174
 8002ba4:	40000400 	.word	0x40000400

08002ba8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a09      	ldr	r2, [pc, #36]	@ (8002bdc <HAL_TIM_Base_MspInit+0x34>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d10b      	bne.n	8002bd2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002bba:	4b09      	ldr	r3, [pc, #36]	@ (8002be0 <HAL_TIM_Base_MspInit+0x38>)
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	4a08      	ldr	r2, [pc, #32]	@ (8002be0 <HAL_TIM_Base_MspInit+0x38>)
 8002bc0:	f043 0302 	orr.w	r3, r3, #2
 8002bc4:	61d3      	str	r3, [r2, #28]
 8002bc6:	4b06      	ldr	r3, [pc, #24]	@ (8002be0 <HAL_TIM_Base_MspInit+0x38>)
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002bd2:	bf00      	nop
 8002bd4:	3714      	adds	r7, #20
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bc80      	pop	{r7}
 8002bda:	4770      	bx	lr
 8002bdc:	40000400 	.word	0x40000400
 8002be0:	40021000 	.word	0x40021000

08002be4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b088      	sub	sp, #32
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bec:	f107 0310 	add.w	r3, r7, #16
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	605a      	str	r2, [r3, #4]
 8002bf6:	609a      	str	r2, [r3, #8]
 8002bf8:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a0f      	ldr	r2, [pc, #60]	@ (8002c3c <HAL_TIM_MspPostInit+0x58>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d117      	bne.n	8002c34 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c04:	4b0e      	ldr	r3, [pc, #56]	@ (8002c40 <HAL_TIM_MspPostInit+0x5c>)
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	4a0d      	ldr	r2, [pc, #52]	@ (8002c40 <HAL_TIM_MspPostInit+0x5c>)
 8002c0a:	f043 0308 	orr.w	r3, r3, #8
 8002c0e:	6193      	str	r3, [r2, #24]
 8002c10:	4b0b      	ldr	r3, [pc, #44]	@ (8002c40 <HAL_TIM_MspPostInit+0x5c>)
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	f003 0308 	and.w	r3, r3, #8
 8002c18:	60fb      	str	r3, [r7, #12]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c20:	2302      	movs	r3, #2
 8002c22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c24:	2302      	movs	r3, #2
 8002c26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c28:	f107 0310 	add.w	r3, r7, #16
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4805      	ldr	r0, [pc, #20]	@ (8002c44 <HAL_TIM_MspPostInit+0x60>)
 8002c30:	f001 f832 	bl	8003c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002c34:	bf00      	nop
 8002c36:	3720      	adds	r7, #32
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40000400 	.word	0x40000400
 8002c40:	40021000 	.word	0x40021000
 8002c44:	40010c00 	.word	0x40010c00

08002c48 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c4c:	4b11      	ldr	r3, [pc, #68]	@ (8002c94 <MX_USART1_UART_Init+0x4c>)
 8002c4e:	4a12      	ldr	r2, [pc, #72]	@ (8002c98 <MX_USART1_UART_Init+0x50>)
 8002c50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002c52:	4b10      	ldr	r3, [pc, #64]	@ (8002c94 <MX_USART1_UART_Init+0x4c>)
 8002c54:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002c58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c94 <MX_USART1_UART_Init+0x4c>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c60:	4b0c      	ldr	r3, [pc, #48]	@ (8002c94 <MX_USART1_UART_Init+0x4c>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c66:	4b0b      	ldr	r3, [pc, #44]	@ (8002c94 <MX_USART1_UART_Init+0x4c>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c6c:	4b09      	ldr	r3, [pc, #36]	@ (8002c94 <MX_USART1_UART_Init+0x4c>)
 8002c6e:	220c      	movs	r2, #12
 8002c70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c72:	4b08      	ldr	r3, [pc, #32]	@ (8002c94 <MX_USART1_UART_Init+0x4c>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c78:	4b06      	ldr	r3, [pc, #24]	@ (8002c94 <MX_USART1_UART_Init+0x4c>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c7e:	4805      	ldr	r0, [pc, #20]	@ (8002c94 <MX_USART1_UART_Init+0x4c>)
 8002c80:	f003 fd36 	bl	80066f0 <HAL_UART_Init>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002c8a:	f7ff fe3d 	bl	8002908 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c8e:	bf00      	nop
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	200001bc 	.word	0x200001bc
 8002c98:	40013800 	.word	0x40013800

08002c9c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002ca0:	4b11      	ldr	r3, [pc, #68]	@ (8002ce8 <MX_USART3_UART_Init+0x4c>)
 8002ca2:	4a12      	ldr	r2, [pc, #72]	@ (8002cec <MX_USART3_UART_Init+0x50>)
 8002ca4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002ca6:	4b10      	ldr	r3, [pc, #64]	@ (8002ce8 <MX_USART3_UART_Init+0x4c>)
 8002ca8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002cac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002cae:	4b0e      	ldr	r3, [pc, #56]	@ (8002ce8 <MX_USART3_UART_Init+0x4c>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ce8 <MX_USART3_UART_Init+0x4c>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002cba:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce8 <MX_USART3_UART_Init+0x4c>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002cc0:	4b09      	ldr	r3, [pc, #36]	@ (8002ce8 <MX_USART3_UART_Init+0x4c>)
 8002cc2:	220c      	movs	r2, #12
 8002cc4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cc6:	4b08      	ldr	r3, [pc, #32]	@ (8002ce8 <MX_USART3_UART_Init+0x4c>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ccc:	4b06      	ldr	r3, [pc, #24]	@ (8002ce8 <MX_USART3_UART_Init+0x4c>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002cd2:	4805      	ldr	r0, [pc, #20]	@ (8002ce8 <MX_USART3_UART_Init+0x4c>)
 8002cd4:	f003 fd0c 	bl	80066f0 <HAL_UART_Init>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002cde:	f7ff fe13 	bl	8002908 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002ce2:	bf00      	nop
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	20000204 	.word	0x20000204
 8002cec:	40004800 	.word	0x40004800

08002cf0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b08a      	sub	sp, #40	@ 0x28
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf8:	f107 0318 	add.w	r3, r7, #24
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	605a      	str	r2, [r3, #4]
 8002d02:	609a      	str	r2, [r3, #8]
 8002d04:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a3c      	ldr	r2, [pc, #240]	@ (8002dfc <HAL_UART_MspInit+0x10c>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d13a      	bne.n	8002d86 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d10:	4b3b      	ldr	r3, [pc, #236]	@ (8002e00 <HAL_UART_MspInit+0x110>)
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	4a3a      	ldr	r2, [pc, #232]	@ (8002e00 <HAL_UART_MspInit+0x110>)
 8002d16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d1a:	6193      	str	r3, [r2, #24]
 8002d1c:	4b38      	ldr	r3, [pc, #224]	@ (8002e00 <HAL_UART_MspInit+0x110>)
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d24:	617b      	str	r3, [r7, #20]
 8002d26:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d28:	4b35      	ldr	r3, [pc, #212]	@ (8002e00 <HAL_UART_MspInit+0x110>)
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	4a34      	ldr	r2, [pc, #208]	@ (8002e00 <HAL_UART_MspInit+0x110>)
 8002d2e:	f043 0304 	orr.w	r3, r3, #4
 8002d32:	6193      	str	r3, [r2, #24]
 8002d34:	4b32      	ldr	r3, [pc, #200]	@ (8002e00 <HAL_UART_MspInit+0x110>)
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	613b      	str	r3, [r7, #16]
 8002d3e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d46:	2302      	movs	r3, #2
 8002d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d4e:	f107 0318 	add.w	r3, r7, #24
 8002d52:	4619      	mov	r1, r3
 8002d54:	482b      	ldr	r0, [pc, #172]	@ (8002e04 <HAL_UART_MspInit+0x114>)
 8002d56:	f000 ff9f 	bl	8003c98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d60:	2300      	movs	r3, #0
 8002d62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d64:	2300      	movs	r3, #0
 8002d66:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d68:	f107 0318 	add.w	r3, r7, #24
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4825      	ldr	r0, [pc, #148]	@ (8002e04 <HAL_UART_MspInit+0x114>)
 8002d70:	f000 ff92 	bl	8003c98 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002d74:	2200      	movs	r2, #0
 8002d76:	2100      	movs	r1, #0
 8002d78:	2025      	movs	r0, #37	@ 0x25
 8002d7a:	f000 fea4 	bl	8003ac6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d7e:	2025      	movs	r0, #37	@ 0x25
 8002d80:	f000 febd 	bl	8003afe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002d84:	e036      	b.n	8002df4 <HAL_UART_MspInit+0x104>
  else if(uartHandle->Instance==USART3)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a1f      	ldr	r2, [pc, #124]	@ (8002e08 <HAL_UART_MspInit+0x118>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d131      	bne.n	8002df4 <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d90:	4b1b      	ldr	r3, [pc, #108]	@ (8002e00 <HAL_UART_MspInit+0x110>)
 8002d92:	69db      	ldr	r3, [r3, #28]
 8002d94:	4a1a      	ldr	r2, [pc, #104]	@ (8002e00 <HAL_UART_MspInit+0x110>)
 8002d96:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d9a:	61d3      	str	r3, [r2, #28]
 8002d9c:	4b18      	ldr	r3, [pc, #96]	@ (8002e00 <HAL_UART_MspInit+0x110>)
 8002d9e:	69db      	ldr	r3, [r3, #28]
 8002da0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002da8:	4b15      	ldr	r3, [pc, #84]	@ (8002e00 <HAL_UART_MspInit+0x110>)
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	4a14      	ldr	r2, [pc, #80]	@ (8002e00 <HAL_UART_MspInit+0x110>)
 8002dae:	f043 0308 	orr.w	r3, r3, #8
 8002db2:	6193      	str	r3, [r2, #24]
 8002db4:	4b12      	ldr	r3, [pc, #72]	@ (8002e00 <HAL_UART_MspInit+0x110>)
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	f003 0308 	and.w	r3, r3, #8
 8002dbc:	60bb      	str	r3, [r7, #8]
 8002dbe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002dc0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002dc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dce:	f107 0318 	add.w	r3, r7, #24
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	480d      	ldr	r0, [pc, #52]	@ (8002e0c <HAL_UART_MspInit+0x11c>)
 8002dd6:	f000 ff5f 	bl	8003c98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002dda:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002dde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002de0:	2300      	movs	r3, #0
 8002de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de4:	2300      	movs	r3, #0
 8002de6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002de8:	f107 0318 	add.w	r3, r7, #24
 8002dec:	4619      	mov	r1, r3
 8002dee:	4807      	ldr	r0, [pc, #28]	@ (8002e0c <HAL_UART_MspInit+0x11c>)
 8002df0:	f000 ff52 	bl	8003c98 <HAL_GPIO_Init>
}
 8002df4:	bf00      	nop
 8002df6:	3728      	adds	r7, #40	@ 0x28
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40013800 	.word	0x40013800
 8002e00:	40021000 	.word	0x40021000
 8002e04:	40010800 	.word	0x40010800
 8002e08:	40004800 	.word	0x40004800
 8002e0c:	40010c00 	.word	0x40010c00

08002e10 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002e10:	f7ff fe4e 	bl	8002ab0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e14:	480b      	ldr	r0, [pc, #44]	@ (8002e44 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002e16:	490c      	ldr	r1, [pc, #48]	@ (8002e48 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002e18:	4a0c      	ldr	r2, [pc, #48]	@ (8002e4c <LoopFillZerobss+0x16>)
  movs r3, #0
 8002e1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e1c:	e002      	b.n	8002e24 <LoopCopyDataInit>

08002e1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e22:	3304      	adds	r3, #4

08002e24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e28:	d3f9      	bcc.n	8002e1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e2a:	4a09      	ldr	r2, [pc, #36]	@ (8002e50 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002e2c:	4c09      	ldr	r4, [pc, #36]	@ (8002e54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e30:	e001      	b.n	8002e36 <LoopFillZerobss>

08002e32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e34:	3204      	adds	r2, #4

08002e36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e38:	d3fb      	bcc.n	8002e32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e3a:	f004 fe8d 	bl	8007b58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e3e:	f7fe f8af 	bl	8000fa0 <main>
  bx lr
 8002e42:	4770      	bx	lr
  ldr r0, =_sdata
 8002e44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e48:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8002e4c:	080098c4 	.word	0x080098c4
  ldr r2, =_sbss
 8002e50:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8002e54:	200003a0 	.word	0x200003a0

08002e58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e58:	e7fe      	b.n	8002e58 <ADC1_2_IRQHandler>
	...

08002e5c <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8002e64:	4a11      	ldr	r2, [pc, #68]	@ (8002eac <RetargetInit+0x50>)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8002e6a:	4b11      	ldr	r3, [pc, #68]	@ (8002eb0 <RetargetInit+0x54>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6898      	ldr	r0, [r3, #8]
 8002e70:	2300      	movs	r3, #0
 8002e72:	2202      	movs	r2, #2
 8002e74:	2100      	movs	r1, #0
 8002e76:	f004 fc6f 	bl	8007758 <setvbuf>
  setvbuf(stdin, NULL, _IONBF, 0);
 8002e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8002eb0 <RetargetInit+0x54>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6858      	ldr	r0, [r3, #4]
 8002e80:	2300      	movs	r3, #0
 8002e82:	2202      	movs	r2, #2
 8002e84:	2100      	movs	r1, #0
 8002e86:	f004 fc67 	bl	8007758 <setvbuf>
  __HAL_UART_CLEAR_OREFLAG(gHuart);
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60fb      	str	r3, [r7, #12]
 8002e8e:	4b07      	ldr	r3, [pc, #28]	@ (8002eac <RetargetInit+0x50>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	60fb      	str	r3, [r7, #12]
 8002e98:	4b04      	ldr	r3, [pc, #16]	@ (8002eac <RetargetInit+0x50>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	60fb      	str	r3, [r7, #12]
 8002ea2:	68fb      	ldr	r3, [r7, #12]

}
 8002ea4:	bf00      	nop
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	2000024c 	.word	0x2000024c
 8002eb0:	20000048 	.word	0x20000048

08002eb4 <_write>:


int _write(int fd, char* ptr, int len) {
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d002      	beq.n	8002ecc <_write+0x18>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d111      	bne.n	8002ef0 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8002ecc:	4b0e      	ldr	r3, [pc, #56]	@ (8002f08 <_write+0x54>)
 8002ece:	6818      	ldr	r0, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ed8:	68b9      	ldr	r1, [r7, #8]
 8002eda:	f003 fc59 	bl	8006790 <HAL_UART_Transmit>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002ee2:	7dfb      	ldrb	r3, [r7, #23]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d101      	bne.n	8002eec <_write+0x38>
      return len;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	e008      	b.n	8002efe <_write+0x4a>
    else
      return EIO;
 8002eec:	2305      	movs	r3, #5
 8002eee:	e006      	b.n	8002efe <_write+0x4a>
  }
  errno = EBADF;
 8002ef0:	f004 fe2c 	bl	8007b4c <__errno>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2209      	movs	r2, #9
 8002ef8:	601a      	str	r2, [r3, #0]
  return -1;
 8002efa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3718      	adds	r7, #24
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	2000024c 	.word	0x2000024c

08002f0c <_read>:


int _read(int fd, char* ptr, int len) {
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d110      	bne.n	8002f40 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8002f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002f58 <_read+0x4c>)
 8002f20:	6818      	ldr	r0, [r3, #0]
 8002f22:	f04f 33ff 	mov.w	r3, #4294967295
 8002f26:	2201      	movs	r2, #1
 8002f28:	68b9      	ldr	r1, [r7, #8]
 8002f2a:	f003 fcbc 	bl	80068a6 <HAL_UART_Receive>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002f32:	7dfb      	ldrb	r3, [r7, #23]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <_read+0x30>
      return 1;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e008      	b.n	8002f4e <_read+0x42>
    else
      return EIO;
 8002f3c:	2305      	movs	r3, #5
 8002f3e:	e006      	b.n	8002f4e <_read+0x42>
  }
  errno = EBADF;
 8002f40:	f004 fe04 	bl	8007b4c <__errno>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2209      	movs	r2, #9
 8002f48:	601a      	str	r2, [r3, #0]
  return -1;
 8002f4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3718      	adds	r7, #24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	2000024c 	.word	0x2000024c

08002f5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f60:	4b08      	ldr	r3, [pc, #32]	@ (8002f84 <HAL_Init+0x28>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a07      	ldr	r2, [pc, #28]	@ (8002f84 <HAL_Init+0x28>)
 8002f66:	f043 0310 	orr.w	r3, r3, #16
 8002f6a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f6c:	2003      	movs	r0, #3
 8002f6e:	f000 fd9f 	bl	8003ab0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f72:	200f      	movs	r0, #15
 8002f74:	f000 f808 	bl	8002f88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f78:	f7ff fccc 	bl	8002914 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	40022000 	.word	0x40022000

08002f88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f90:	4b12      	ldr	r3, [pc, #72]	@ (8002fdc <HAL_InitTick+0x54>)
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	4b12      	ldr	r3, [pc, #72]	@ (8002fe0 <HAL_InitTick+0x58>)
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	4619      	mov	r1, r3
 8002f9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 fdb7 	bl	8003b1a <HAL_SYSTICK_Config>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e00e      	b.n	8002fd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2b0f      	cmp	r3, #15
 8002fba:	d80a      	bhi.n	8002fd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fc4:	f000 fd7f 	bl	8003ac6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fc8:	4a06      	ldr	r2, [pc, #24]	@ (8002fe4 <HAL_InitTick+0x5c>)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	e000      	b.n	8002fd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	20000030 	.word	0x20000030
 8002fe0:	20000038 	.word	0x20000038
 8002fe4:	20000034 	.word	0x20000034

08002fe8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fec:	4b05      	ldr	r3, [pc, #20]	@ (8003004 <HAL_IncTick+0x1c>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	4b05      	ldr	r3, [pc, #20]	@ (8003008 <HAL_IncTick+0x20>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	4a03      	ldr	r2, [pc, #12]	@ (8003008 <HAL_IncTick+0x20>)
 8002ffa:	6013      	str	r3, [r2, #0]
}
 8002ffc:	bf00      	nop
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bc80      	pop	{r7}
 8003002:	4770      	bx	lr
 8003004:	20000038 	.word	0x20000038
 8003008:	20000250 	.word	0x20000250

0800300c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
  return uwTick;
 8003010:	4b02      	ldr	r3, [pc, #8]	@ (800301c <HAL_GetTick+0x10>)
 8003012:	681b      	ldr	r3, [r3, #0]
}
 8003014:	4618      	mov	r0, r3
 8003016:	46bd      	mov	sp, r7
 8003018:	bc80      	pop	{r7}
 800301a:	4770      	bx	lr
 800301c:	20000250 	.word	0x20000250

08003020 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003028:	f7ff fff0 	bl	800300c <HAL_GetTick>
 800302c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003038:	d005      	beq.n	8003046 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800303a:	4b0a      	ldr	r3, [pc, #40]	@ (8003064 <HAL_Delay+0x44>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	461a      	mov	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	4413      	add	r3, r2
 8003044:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003046:	bf00      	nop
 8003048:	f7ff ffe0 	bl	800300c <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	429a      	cmp	r2, r3
 8003056:	d8f7      	bhi.n	8003048 <HAL_Delay+0x28>
  {
  }
}
 8003058:	bf00      	nop
 800305a:	bf00      	nop
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	20000038 	.word	0x20000038

08003068 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003070:	2300      	movs	r3, #0
 8003072:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003074:	2300      	movs	r3, #0
 8003076:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003078:	2300      	movs	r3, #0
 800307a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800307c:	2300      	movs	r3, #0
 800307e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e0be      	b.n	8003208 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003094:	2b00      	cmp	r3, #0
 8003096:	d109      	bne.n	80030ac <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f7fd fe0e 	bl	8000cc8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 fbf1 	bl	8003894 <ADC_ConversionStop_Disable>
 80030b2:	4603      	mov	r3, r0
 80030b4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ba:	f003 0310 	and.w	r3, r3, #16
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f040 8099 	bne.w	80031f6 <HAL_ADC_Init+0x18e>
 80030c4:	7dfb      	ldrb	r3, [r7, #23]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f040 8095 	bne.w	80031f6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030d0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80030d4:	f023 0302 	bic.w	r3, r3, #2
 80030d8:	f043 0202 	orr.w	r2, r3, #2
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80030e8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	7b1b      	ldrb	r3, [r3, #12]
 80030ee:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80030f0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80030f2:	68ba      	ldr	r2, [r7, #8]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003100:	d003      	beq.n	800310a <HAL_ADC_Init+0xa2>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d102      	bne.n	8003110 <HAL_ADC_Init+0xa8>
 800310a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800310e:	e000      	b.n	8003112 <HAL_ADC_Init+0xaa>
 8003110:	2300      	movs	r3, #0
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	4313      	orrs	r3, r2
 8003116:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	7d1b      	ldrb	r3, [r3, #20]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d119      	bne.n	8003154 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	7b1b      	ldrb	r3, [r3, #12]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d109      	bne.n	800313c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	3b01      	subs	r3, #1
 800312e:	035a      	lsls	r2, r3, #13
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	4313      	orrs	r3, r2
 8003134:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003138:	613b      	str	r3, [r7, #16]
 800313a:	e00b      	b.n	8003154 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003140:	f043 0220 	orr.w	r2, r3, #32
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800314c:	f043 0201 	orr.w	r2, r3, #1
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	430a      	orrs	r2, r1
 8003166:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689a      	ldr	r2, [r3, #8]
 800316e:	4b28      	ldr	r3, [pc, #160]	@ (8003210 <HAL_ADC_Init+0x1a8>)
 8003170:	4013      	ands	r3, r2
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	6812      	ldr	r2, [r2, #0]
 8003176:	68b9      	ldr	r1, [r7, #8]
 8003178:	430b      	orrs	r3, r1
 800317a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003184:	d003      	beq.n	800318e <HAL_ADC_Init+0x126>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d104      	bne.n	8003198 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	3b01      	subs	r3, #1
 8003194:	051b      	lsls	r3, r3, #20
 8003196:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800319e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689a      	ldr	r2, [r3, #8]
 80031b2:	4b18      	ldr	r3, [pc, #96]	@ (8003214 <HAL_ADC_Init+0x1ac>)
 80031b4:	4013      	ands	r3, r2
 80031b6:	68ba      	ldr	r2, [r7, #8]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d10b      	bne.n	80031d4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031c6:	f023 0303 	bic.w	r3, r3, #3
 80031ca:	f043 0201 	orr.w	r2, r3, #1
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80031d2:	e018      	b.n	8003206 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031d8:	f023 0312 	bic.w	r3, r3, #18
 80031dc:	f043 0210 	orr.w	r2, r3, #16
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e8:	f043 0201 	orr.w	r2, r3, #1
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80031f4:	e007      	b.n	8003206 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031fa:	f043 0210 	orr.w	r2, r3, #16
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003206:	7dfb      	ldrb	r3, [r7, #23]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3718      	adds	r7, #24
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	ffe1f7fd 	.word	0xffe1f7fd
 8003214:	ff1f0efe 	.word	0xff1f0efe

08003218 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003220:	2300      	movs	r3, #0
 8003222:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800322a:	2b01      	cmp	r3, #1
 800322c:	d101      	bne.n	8003232 <HAL_ADC_Start+0x1a>
 800322e:	2302      	movs	r3, #2
 8003230:	e098      	b.n	8003364 <HAL_ADC_Start+0x14c>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 fad0 	bl	80037e0 <ADC_Enable>
 8003240:	4603      	mov	r3, r0
 8003242:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003244:	7bfb      	ldrb	r3, [r7, #15]
 8003246:	2b00      	cmp	r3, #0
 8003248:	f040 8087 	bne.w	800335a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003250:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003254:	f023 0301 	bic.w	r3, r3, #1
 8003258:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a41      	ldr	r2, [pc, #260]	@ (800336c <HAL_ADC_Start+0x154>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d105      	bne.n	8003276 <HAL_ADC_Start+0x5e>
 800326a:	4b41      	ldr	r3, [pc, #260]	@ (8003370 <HAL_ADC_Start+0x158>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d115      	bne.n	80032a2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800327a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800328c:	2b00      	cmp	r3, #0
 800328e:	d026      	beq.n	80032de <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003294:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003298:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80032a0:	e01d      	b.n	80032de <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a2f      	ldr	r2, [pc, #188]	@ (8003370 <HAL_ADC_Start+0x158>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d004      	beq.n	80032c2 <HAL_ADC_Start+0xaa>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a2b      	ldr	r2, [pc, #172]	@ (800336c <HAL_ADC_Start+0x154>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d10d      	bne.n	80032de <HAL_ADC_Start+0xc6>
 80032c2:	4b2b      	ldr	r3, [pc, #172]	@ (8003370 <HAL_ADC_Start+0x158>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d007      	beq.n	80032de <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80032d6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d006      	beq.n	80032f8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ee:	f023 0206 	bic.w	r2, r3, #6
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80032f6:	e002      	b.n	80032fe <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f06f 0202 	mvn.w	r2, #2
 800330e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800331a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800331e:	d113      	bne.n	8003348 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003324:	4a11      	ldr	r2, [pc, #68]	@ (800336c <HAL_ADC_Start+0x154>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d105      	bne.n	8003336 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800332a:	4b11      	ldr	r3, [pc, #68]	@ (8003370 <HAL_ADC_Start+0x158>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003332:	2b00      	cmp	r3, #0
 8003334:	d108      	bne.n	8003348 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8003344:	609a      	str	r2, [r3, #8]
 8003346:	e00c      	b.n	8003362 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689a      	ldr	r2, [r3, #8]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003356:	609a      	str	r2, [r3, #8]
 8003358:	e003      	b.n	8003362 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003362:	7bfb      	ldrb	r3, [r7, #15]
}
 8003364:	4618      	mov	r0, r3
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	40012800 	.word	0x40012800
 8003370:	40012400 	.word	0x40012400

08003374 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800337c:	2300      	movs	r3, #0
 800337e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003386:	2b01      	cmp	r3, #1
 8003388:	d101      	bne.n	800338e <HAL_ADC_Stop+0x1a>
 800338a:	2302      	movs	r3, #2
 800338c:	e01a      	b.n	80033c4 <HAL_ADC_Stop+0x50>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 fa7c 	bl	8003894 <ADC_ConversionStop_Disable>
 800339c:	4603      	mov	r3, r0
 800339e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80033a0:	7bfb      	ldrb	r3, [r7, #15]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d109      	bne.n	80033ba <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033aa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80033ae:	f023 0301 	bic.w	r3, r3, #1
 80033b2:	f043 0201 	orr.w	r2, r3, #1
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80033c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80033cc:	b590      	push	{r4, r7, lr}
 80033ce:	b087      	sub	sp, #28
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80033da:	2300      	movs	r3, #0
 80033dc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80033de:	2300      	movs	r3, #0
 80033e0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80033e2:	f7ff fe13 	bl	800300c <HAL_GetTick>
 80033e6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00b      	beq.n	800340e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033fa:	f043 0220 	orr.w	r2, r3, #32
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e0d3      	b.n	80035b6 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003418:	2b00      	cmp	r3, #0
 800341a:	d131      	bne.n	8003480 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003422:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003426:	2b00      	cmp	r3, #0
 8003428:	d12a      	bne.n	8003480 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800342a:	e021      	b.n	8003470 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003432:	d01d      	beq.n	8003470 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d007      	beq.n	800344a <HAL_ADC_PollForConversion+0x7e>
 800343a:	f7ff fde7 	bl	800300c <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	429a      	cmp	r2, r3
 8003448:	d212      	bcs.n	8003470 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d10b      	bne.n	8003470 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800345c:	f043 0204 	orr.w	r2, r3, #4
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e0a2      	b.n	80035b6 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d0d6      	beq.n	800342c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800347e:	e070      	b.n	8003562 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003480:	4b4f      	ldr	r3, [pc, #316]	@ (80035c0 <HAL_ADC_PollForConversion+0x1f4>)
 8003482:	681c      	ldr	r4, [r3, #0]
 8003484:	2002      	movs	r0, #2
 8003486:	f002 fa9d 	bl	80059c4 <HAL_RCCEx_GetPeriphCLKFreq>
 800348a:	4603      	mov	r3, r0
 800348c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6919      	ldr	r1, [r3, #16]
 8003496:	4b4b      	ldr	r3, [pc, #300]	@ (80035c4 <HAL_ADC_PollForConversion+0x1f8>)
 8003498:	400b      	ands	r3, r1
 800349a:	2b00      	cmp	r3, #0
 800349c:	d118      	bne.n	80034d0 <HAL_ADC_PollForConversion+0x104>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68d9      	ldr	r1, [r3, #12]
 80034a4:	4b48      	ldr	r3, [pc, #288]	@ (80035c8 <HAL_ADC_PollForConversion+0x1fc>)
 80034a6:	400b      	ands	r3, r1
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d111      	bne.n	80034d0 <HAL_ADC_PollForConversion+0x104>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6919      	ldr	r1, [r3, #16]
 80034b2:	4b46      	ldr	r3, [pc, #280]	@ (80035cc <HAL_ADC_PollForConversion+0x200>)
 80034b4:	400b      	ands	r3, r1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d108      	bne.n	80034cc <HAL_ADC_PollForConversion+0x100>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68d9      	ldr	r1, [r3, #12]
 80034c0:	4b43      	ldr	r3, [pc, #268]	@ (80035d0 <HAL_ADC_PollForConversion+0x204>)
 80034c2:	400b      	ands	r3, r1
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d101      	bne.n	80034cc <HAL_ADC_PollForConversion+0x100>
 80034c8:	2314      	movs	r3, #20
 80034ca:	e020      	b.n	800350e <HAL_ADC_PollForConversion+0x142>
 80034cc:	2329      	movs	r3, #41	@ 0x29
 80034ce:	e01e      	b.n	800350e <HAL_ADC_PollForConversion+0x142>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6919      	ldr	r1, [r3, #16]
 80034d6:	4b3d      	ldr	r3, [pc, #244]	@ (80035cc <HAL_ADC_PollForConversion+0x200>)
 80034d8:	400b      	ands	r3, r1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d106      	bne.n	80034ec <HAL_ADC_PollForConversion+0x120>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68d9      	ldr	r1, [r3, #12]
 80034e4:	4b3a      	ldr	r3, [pc, #232]	@ (80035d0 <HAL_ADC_PollForConversion+0x204>)
 80034e6:	400b      	ands	r3, r1
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00d      	beq.n	8003508 <HAL_ADC_PollForConversion+0x13c>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6919      	ldr	r1, [r3, #16]
 80034f2:	4b38      	ldr	r3, [pc, #224]	@ (80035d4 <HAL_ADC_PollForConversion+0x208>)
 80034f4:	400b      	ands	r3, r1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d108      	bne.n	800350c <HAL_ADC_PollForConversion+0x140>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68d9      	ldr	r1, [r3, #12]
 8003500:	4b34      	ldr	r3, [pc, #208]	@ (80035d4 <HAL_ADC_PollForConversion+0x208>)
 8003502:	400b      	ands	r3, r1
 8003504:	2b00      	cmp	r3, #0
 8003506:	d101      	bne.n	800350c <HAL_ADC_PollForConversion+0x140>
 8003508:	2354      	movs	r3, #84	@ 0x54
 800350a:	e000      	b.n	800350e <HAL_ADC_PollForConversion+0x142>
 800350c:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800350e:	fb02 f303 	mul.w	r3, r2, r3
 8003512:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003514:	e021      	b.n	800355a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351c:	d01a      	beq.n	8003554 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d007      	beq.n	8003534 <HAL_ADC_PollForConversion+0x168>
 8003524:	f7ff fd72 	bl	800300c <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	429a      	cmp	r2, r3
 8003532:	d20f      	bcs.n	8003554 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	429a      	cmp	r2, r3
 800353a:	d90b      	bls.n	8003554 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003540:	f043 0204 	orr.w	r2, r3, #4
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e030      	b.n	80035b6 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	3301      	adds	r3, #1
 8003558:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	429a      	cmp	r2, r3
 8003560:	d8d9      	bhi.n	8003516 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f06f 0212 	mvn.w	r2, #18
 800356a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003570:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003582:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003586:	d115      	bne.n	80035b4 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800358c:	2b00      	cmp	r3, #0
 800358e:	d111      	bne.n	80035b4 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003594:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d105      	bne.n	80035b4 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ac:	f043 0201 	orr.w	r2, r3, #1
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	371c      	adds	r7, #28
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd90      	pop	{r4, r7, pc}
 80035be:	bf00      	nop
 80035c0:	20000030 	.word	0x20000030
 80035c4:	24924924 	.word	0x24924924
 80035c8:	00924924 	.word	0x00924924
 80035cc:	12492492 	.word	0x12492492
 80035d0:	00492492 	.word	0x00492492
 80035d4:	00249249 	.word	0x00249249

080035d8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bc80      	pop	{r7}
 80035ee:	4770      	bx	lr

080035f0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035fa:	2300      	movs	r3, #0
 80035fc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80035fe:	2300      	movs	r3, #0
 8003600:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003608:	2b01      	cmp	r3, #1
 800360a:	d101      	bne.n	8003610 <HAL_ADC_ConfigChannel+0x20>
 800360c:	2302      	movs	r3, #2
 800360e:	e0dc      	b.n	80037ca <HAL_ADC_ConfigChannel+0x1da>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	2b06      	cmp	r3, #6
 800361e:	d81c      	bhi.n	800365a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685a      	ldr	r2, [r3, #4]
 800362a:	4613      	mov	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4413      	add	r3, r2
 8003630:	3b05      	subs	r3, #5
 8003632:	221f      	movs	r2, #31
 8003634:	fa02 f303 	lsl.w	r3, r2, r3
 8003638:	43db      	mvns	r3, r3
 800363a:	4019      	ands	r1, r3
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	6818      	ldr	r0, [r3, #0]
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685a      	ldr	r2, [r3, #4]
 8003644:	4613      	mov	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4413      	add	r3, r2
 800364a:	3b05      	subs	r3, #5
 800364c:	fa00 f203 	lsl.w	r2, r0, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	635a      	str	r2, [r3, #52]	@ 0x34
 8003658:	e03c      	b.n	80036d4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	2b0c      	cmp	r3, #12
 8003660:	d81c      	bhi.n	800369c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	4613      	mov	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	4413      	add	r3, r2
 8003672:	3b23      	subs	r3, #35	@ 0x23
 8003674:	221f      	movs	r2, #31
 8003676:	fa02 f303 	lsl.w	r3, r2, r3
 800367a:	43db      	mvns	r3, r3
 800367c:	4019      	ands	r1, r3
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	6818      	ldr	r0, [r3, #0]
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	4613      	mov	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4413      	add	r3, r2
 800368c:	3b23      	subs	r3, #35	@ 0x23
 800368e:	fa00 f203 	lsl.w	r2, r0, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	430a      	orrs	r2, r1
 8003698:	631a      	str	r2, [r3, #48]	@ 0x30
 800369a:	e01b      	b.n	80036d4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	4613      	mov	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	4413      	add	r3, r2
 80036ac:	3b41      	subs	r3, #65	@ 0x41
 80036ae:	221f      	movs	r2, #31
 80036b0:	fa02 f303 	lsl.w	r3, r2, r3
 80036b4:	43db      	mvns	r3, r3
 80036b6:	4019      	ands	r1, r3
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	6818      	ldr	r0, [r3, #0]
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	4613      	mov	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4413      	add	r3, r2
 80036c6:	3b41      	subs	r3, #65	@ 0x41
 80036c8:	fa00 f203 	lsl.w	r2, r0, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	430a      	orrs	r2, r1
 80036d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2b09      	cmp	r3, #9
 80036da:	d91c      	bls.n	8003716 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68d9      	ldr	r1, [r3, #12]
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	4613      	mov	r3, r2
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	4413      	add	r3, r2
 80036ec:	3b1e      	subs	r3, #30
 80036ee:	2207      	movs	r2, #7
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	43db      	mvns	r3, r3
 80036f6:	4019      	ands	r1, r3
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	6898      	ldr	r0, [r3, #8]
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	4613      	mov	r3, r2
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	4413      	add	r3, r2
 8003706:	3b1e      	subs	r3, #30
 8003708:	fa00 f203 	lsl.w	r2, r0, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	430a      	orrs	r2, r1
 8003712:	60da      	str	r2, [r3, #12]
 8003714:	e019      	b.n	800374a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	6919      	ldr	r1, [r3, #16]
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	4613      	mov	r3, r2
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	4413      	add	r3, r2
 8003726:	2207      	movs	r2, #7
 8003728:	fa02 f303 	lsl.w	r3, r2, r3
 800372c:	43db      	mvns	r3, r3
 800372e:	4019      	ands	r1, r3
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	6898      	ldr	r0, [r3, #8]
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	4613      	mov	r3, r2
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	4413      	add	r3, r2
 800373e:	fa00 f203 	lsl.w	r2, r0, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	430a      	orrs	r2, r1
 8003748:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2b10      	cmp	r3, #16
 8003750:	d003      	beq.n	800375a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003756:	2b11      	cmp	r3, #17
 8003758:	d132      	bne.n	80037c0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a1d      	ldr	r2, [pc, #116]	@ (80037d4 <HAL_ADC_ConfigChannel+0x1e4>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d125      	bne.n	80037b0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d126      	bne.n	80037c0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003780:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2b10      	cmp	r3, #16
 8003788:	d11a      	bne.n	80037c0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800378a:	4b13      	ldr	r3, [pc, #76]	@ (80037d8 <HAL_ADC_ConfigChannel+0x1e8>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a13      	ldr	r2, [pc, #76]	@ (80037dc <HAL_ADC_ConfigChannel+0x1ec>)
 8003790:	fba2 2303 	umull	r2, r3, r2, r3
 8003794:	0c9a      	lsrs	r2, r3, #18
 8003796:	4613      	mov	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	4413      	add	r3, r2
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80037a0:	e002      	b.n	80037a8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	3b01      	subs	r3, #1
 80037a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1f9      	bne.n	80037a2 <HAL_ADC_ConfigChannel+0x1b2>
 80037ae:	e007      	b.n	80037c0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b4:	f043 0220 	orr.w	r2, r3, #32
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80037c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3714      	adds	r7, #20
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bc80      	pop	{r7}
 80037d2:	4770      	bx	lr
 80037d4:	40012400 	.word	0x40012400
 80037d8:	20000030 	.word	0x20000030
 80037dc:	431bde83 	.word	0x431bde83

080037e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037e8:	2300      	movs	r3, #0
 80037ea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80037ec:	2300      	movs	r3, #0
 80037ee:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d040      	beq.n	8003880 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f042 0201 	orr.w	r2, r2, #1
 800380c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800380e:	4b1f      	ldr	r3, [pc, #124]	@ (800388c <ADC_Enable+0xac>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a1f      	ldr	r2, [pc, #124]	@ (8003890 <ADC_Enable+0xb0>)
 8003814:	fba2 2303 	umull	r2, r3, r2, r3
 8003818:	0c9b      	lsrs	r3, r3, #18
 800381a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800381c:	e002      	b.n	8003824 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	3b01      	subs	r3, #1
 8003822:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1f9      	bne.n	800381e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800382a:	f7ff fbef 	bl	800300c <HAL_GetTick>
 800382e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003830:	e01f      	b.n	8003872 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003832:	f7ff fbeb 	bl	800300c <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d918      	bls.n	8003872 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	2b01      	cmp	r3, #1
 800384c:	d011      	beq.n	8003872 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003852:	f043 0210 	orr.w	r2, r3, #16
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800385e:	f043 0201 	orr.w	r2, r3, #1
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e007      	b.n	8003882 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f003 0301 	and.w	r3, r3, #1
 800387c:	2b01      	cmp	r3, #1
 800387e:	d1d8      	bne.n	8003832 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	20000030 	.word	0x20000030
 8003890:	431bde83 	.word	0x431bde83

08003894 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800389c:	2300      	movs	r3, #0
 800389e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d12e      	bne.n	800390c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0201 	bic.w	r2, r2, #1
 80038bc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80038be:	f7ff fba5 	bl	800300c <HAL_GetTick>
 80038c2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80038c4:	e01b      	b.n	80038fe <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80038c6:	f7ff fba1 	bl	800300c <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d914      	bls.n	80038fe <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d10d      	bne.n	80038fe <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038e6:	f043 0210 	orr.w	r2, r3, #16
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f2:	f043 0201 	orr.w	r2, r3, #1
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e007      	b.n	800390e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	2b01      	cmp	r3, #1
 800390a:	d0dc      	beq.n	80038c6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
	...

08003918 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f003 0307 	and.w	r3, r3, #7
 8003926:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003928:	4b0c      	ldr	r3, [pc, #48]	@ (800395c <__NVIC_SetPriorityGrouping+0x44>)
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800392e:	68ba      	ldr	r2, [r7, #8]
 8003930:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003934:	4013      	ands	r3, r2
 8003936:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003940:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003944:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003948:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800394a:	4a04      	ldr	r2, [pc, #16]	@ (800395c <__NVIC_SetPriorityGrouping+0x44>)
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	60d3      	str	r3, [r2, #12]
}
 8003950:	bf00      	nop
 8003952:	3714      	adds	r7, #20
 8003954:	46bd      	mov	sp, r7
 8003956:	bc80      	pop	{r7}
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	e000ed00 	.word	0xe000ed00

08003960 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003964:	4b04      	ldr	r3, [pc, #16]	@ (8003978 <__NVIC_GetPriorityGrouping+0x18>)
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	0a1b      	lsrs	r3, r3, #8
 800396a:	f003 0307 	and.w	r3, r3, #7
}
 800396e:	4618      	mov	r0, r3
 8003970:	46bd      	mov	sp, r7
 8003972:	bc80      	pop	{r7}
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	e000ed00 	.word	0xe000ed00

0800397c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	4603      	mov	r3, r0
 8003984:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800398a:	2b00      	cmp	r3, #0
 800398c:	db0b      	blt.n	80039a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800398e:	79fb      	ldrb	r3, [r7, #7]
 8003990:	f003 021f 	and.w	r2, r3, #31
 8003994:	4906      	ldr	r1, [pc, #24]	@ (80039b0 <__NVIC_EnableIRQ+0x34>)
 8003996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800399a:	095b      	lsrs	r3, r3, #5
 800399c:	2001      	movs	r0, #1
 800399e:	fa00 f202 	lsl.w	r2, r0, r2
 80039a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80039a6:	bf00      	nop
 80039a8:	370c      	adds	r7, #12
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bc80      	pop	{r7}
 80039ae:	4770      	bx	lr
 80039b0:	e000e100 	.word	0xe000e100

080039b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	4603      	mov	r3, r0
 80039bc:	6039      	str	r1, [r7, #0]
 80039be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	db0a      	blt.n	80039de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	b2da      	uxtb	r2, r3
 80039cc:	490c      	ldr	r1, [pc, #48]	@ (8003a00 <__NVIC_SetPriority+0x4c>)
 80039ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d2:	0112      	lsls	r2, r2, #4
 80039d4:	b2d2      	uxtb	r2, r2
 80039d6:	440b      	add	r3, r1
 80039d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039dc:	e00a      	b.n	80039f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	b2da      	uxtb	r2, r3
 80039e2:	4908      	ldr	r1, [pc, #32]	@ (8003a04 <__NVIC_SetPriority+0x50>)
 80039e4:	79fb      	ldrb	r3, [r7, #7]
 80039e6:	f003 030f 	and.w	r3, r3, #15
 80039ea:	3b04      	subs	r3, #4
 80039ec:	0112      	lsls	r2, r2, #4
 80039ee:	b2d2      	uxtb	r2, r2
 80039f0:	440b      	add	r3, r1
 80039f2:	761a      	strb	r2, [r3, #24]
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bc80      	pop	{r7}
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	e000e100 	.word	0xe000e100
 8003a04:	e000ed00 	.word	0xe000ed00

08003a08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b089      	sub	sp, #36	@ 0x24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f003 0307 	and.w	r3, r3, #7
 8003a1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	f1c3 0307 	rsb	r3, r3, #7
 8003a22:	2b04      	cmp	r3, #4
 8003a24:	bf28      	it	cs
 8003a26:	2304      	movcs	r3, #4
 8003a28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	3304      	adds	r3, #4
 8003a2e:	2b06      	cmp	r3, #6
 8003a30:	d902      	bls.n	8003a38 <NVIC_EncodePriority+0x30>
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	3b03      	subs	r3, #3
 8003a36:	e000      	b.n	8003a3a <NVIC_EncodePriority+0x32>
 8003a38:	2300      	movs	r3, #0
 8003a3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	fa02 f303 	lsl.w	r3, r2, r3
 8003a46:	43da      	mvns	r2, r3
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	401a      	ands	r2, r3
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a50:	f04f 31ff 	mov.w	r1, #4294967295
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	fa01 f303 	lsl.w	r3, r1, r3
 8003a5a:	43d9      	mvns	r1, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a60:	4313      	orrs	r3, r2
         );
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3724      	adds	r7, #36	@ 0x24
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bc80      	pop	{r7}
 8003a6a:	4770      	bx	lr

08003a6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	3b01      	subs	r3, #1
 8003a78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a7c:	d301      	bcc.n	8003a82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e00f      	b.n	8003aa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a82:	4a0a      	ldr	r2, [pc, #40]	@ (8003aac <SysTick_Config+0x40>)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	3b01      	subs	r3, #1
 8003a88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a8a:	210f      	movs	r1, #15
 8003a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a90:	f7ff ff90 	bl	80039b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a94:	4b05      	ldr	r3, [pc, #20]	@ (8003aac <SysTick_Config+0x40>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a9a:	4b04      	ldr	r3, [pc, #16]	@ (8003aac <SysTick_Config+0x40>)
 8003a9c:	2207      	movs	r2, #7
 8003a9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	e000e010 	.word	0xe000e010

08003ab0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f7ff ff2d 	bl	8003918 <__NVIC_SetPriorityGrouping>
}
 8003abe:	bf00      	nop
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b086      	sub	sp, #24
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	4603      	mov	r3, r0
 8003ace:	60b9      	str	r1, [r7, #8]
 8003ad0:	607a      	str	r2, [r7, #4]
 8003ad2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ad8:	f7ff ff42 	bl	8003960 <__NVIC_GetPriorityGrouping>
 8003adc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	68b9      	ldr	r1, [r7, #8]
 8003ae2:	6978      	ldr	r0, [r7, #20]
 8003ae4:	f7ff ff90 	bl	8003a08 <NVIC_EncodePriority>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aee:	4611      	mov	r1, r2
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7ff ff5f 	bl	80039b4 <__NVIC_SetPriority>
}
 8003af6:	bf00      	nop
 8003af8:	3718      	adds	r7, #24
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b082      	sub	sp, #8
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	4603      	mov	r3, r0
 8003b06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7ff ff35 	bl	800397c <__NVIC_EnableIRQ>
}
 8003b12:	bf00      	nop
 8003b14:	3708      	adds	r7, #8
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b082      	sub	sp, #8
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7ff ffa2 	bl	8003a6c <SysTick_Config>
 8003b28:	4603      	mov	r3, r0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b085      	sub	sp, #20
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d008      	beq.n	8003b5c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2204      	movs	r2, #4
 8003b4e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e020      	b.n	8003b9e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f022 020e 	bic.w	r2, r2, #14
 8003b6a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 0201 	bic.w	r2, r2, #1
 8003b7a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b84:	2101      	movs	r1, #1
 8003b86:	fa01 f202 	lsl.w	r2, r1, r2
 8003b8a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3714      	adds	r7, #20
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bc80      	pop	{r7}
 8003ba6:	4770      	bx	lr

08003ba8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d005      	beq.n	8003bcc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2204      	movs	r2, #4
 8003bc4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	73fb      	strb	r3, [r7, #15]
 8003bca:	e051      	b.n	8003c70 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 020e 	bic.w	r2, r2, #14
 8003bda:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0201 	bic.w	r2, r2, #1
 8003bea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a22      	ldr	r2, [pc, #136]	@ (8003c7c <HAL_DMA_Abort_IT+0xd4>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d029      	beq.n	8003c4a <HAL_DMA_Abort_IT+0xa2>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a21      	ldr	r2, [pc, #132]	@ (8003c80 <HAL_DMA_Abort_IT+0xd8>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d022      	beq.n	8003c46 <HAL_DMA_Abort_IT+0x9e>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a1f      	ldr	r2, [pc, #124]	@ (8003c84 <HAL_DMA_Abort_IT+0xdc>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d01a      	beq.n	8003c40 <HAL_DMA_Abort_IT+0x98>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a1e      	ldr	r2, [pc, #120]	@ (8003c88 <HAL_DMA_Abort_IT+0xe0>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d012      	beq.n	8003c3a <HAL_DMA_Abort_IT+0x92>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a1c      	ldr	r2, [pc, #112]	@ (8003c8c <HAL_DMA_Abort_IT+0xe4>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d00a      	beq.n	8003c34 <HAL_DMA_Abort_IT+0x8c>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a1b      	ldr	r2, [pc, #108]	@ (8003c90 <HAL_DMA_Abort_IT+0xe8>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d102      	bne.n	8003c2e <HAL_DMA_Abort_IT+0x86>
 8003c28:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003c2c:	e00e      	b.n	8003c4c <HAL_DMA_Abort_IT+0xa4>
 8003c2e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003c32:	e00b      	b.n	8003c4c <HAL_DMA_Abort_IT+0xa4>
 8003c34:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003c38:	e008      	b.n	8003c4c <HAL_DMA_Abort_IT+0xa4>
 8003c3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c3e:	e005      	b.n	8003c4c <HAL_DMA_Abort_IT+0xa4>
 8003c40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003c44:	e002      	b.n	8003c4c <HAL_DMA_Abort_IT+0xa4>
 8003c46:	2310      	movs	r3, #16
 8003c48:	e000      	b.n	8003c4c <HAL_DMA_Abort_IT+0xa4>
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	4a11      	ldr	r2, [pc, #68]	@ (8003c94 <HAL_DMA_Abort_IT+0xec>)
 8003c4e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d003      	beq.n	8003c70 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	4798      	blx	r3
    } 
  }
  return status;
 8003c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3710      	adds	r7, #16
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	40020008 	.word	0x40020008
 8003c80:	4002001c 	.word	0x4002001c
 8003c84:	40020030 	.word	0x40020030
 8003c88:	40020044 	.word	0x40020044
 8003c8c:	40020058 	.word	0x40020058
 8003c90:	4002006c 	.word	0x4002006c
 8003c94:	40020000 	.word	0x40020000

08003c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b08b      	sub	sp, #44	@ 0x2c
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003caa:	e169      	b.n	8003f80 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003cac:	2201      	movs	r2, #1
 8003cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	69fa      	ldr	r2, [r7, #28]
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	f040 8158 	bne.w	8003f7a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	4a9a      	ldr	r2, [pc, #616]	@ (8003f38 <HAL_GPIO_Init+0x2a0>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d05e      	beq.n	8003d92 <HAL_GPIO_Init+0xfa>
 8003cd4:	4a98      	ldr	r2, [pc, #608]	@ (8003f38 <HAL_GPIO_Init+0x2a0>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d875      	bhi.n	8003dc6 <HAL_GPIO_Init+0x12e>
 8003cda:	4a98      	ldr	r2, [pc, #608]	@ (8003f3c <HAL_GPIO_Init+0x2a4>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d058      	beq.n	8003d92 <HAL_GPIO_Init+0xfa>
 8003ce0:	4a96      	ldr	r2, [pc, #600]	@ (8003f3c <HAL_GPIO_Init+0x2a4>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d86f      	bhi.n	8003dc6 <HAL_GPIO_Init+0x12e>
 8003ce6:	4a96      	ldr	r2, [pc, #600]	@ (8003f40 <HAL_GPIO_Init+0x2a8>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d052      	beq.n	8003d92 <HAL_GPIO_Init+0xfa>
 8003cec:	4a94      	ldr	r2, [pc, #592]	@ (8003f40 <HAL_GPIO_Init+0x2a8>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d869      	bhi.n	8003dc6 <HAL_GPIO_Init+0x12e>
 8003cf2:	4a94      	ldr	r2, [pc, #592]	@ (8003f44 <HAL_GPIO_Init+0x2ac>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d04c      	beq.n	8003d92 <HAL_GPIO_Init+0xfa>
 8003cf8:	4a92      	ldr	r2, [pc, #584]	@ (8003f44 <HAL_GPIO_Init+0x2ac>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d863      	bhi.n	8003dc6 <HAL_GPIO_Init+0x12e>
 8003cfe:	4a92      	ldr	r2, [pc, #584]	@ (8003f48 <HAL_GPIO_Init+0x2b0>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d046      	beq.n	8003d92 <HAL_GPIO_Init+0xfa>
 8003d04:	4a90      	ldr	r2, [pc, #576]	@ (8003f48 <HAL_GPIO_Init+0x2b0>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d85d      	bhi.n	8003dc6 <HAL_GPIO_Init+0x12e>
 8003d0a:	2b12      	cmp	r3, #18
 8003d0c:	d82a      	bhi.n	8003d64 <HAL_GPIO_Init+0xcc>
 8003d0e:	2b12      	cmp	r3, #18
 8003d10:	d859      	bhi.n	8003dc6 <HAL_GPIO_Init+0x12e>
 8003d12:	a201      	add	r2, pc, #4	@ (adr r2, 8003d18 <HAL_GPIO_Init+0x80>)
 8003d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d18:	08003d93 	.word	0x08003d93
 8003d1c:	08003d6d 	.word	0x08003d6d
 8003d20:	08003d7f 	.word	0x08003d7f
 8003d24:	08003dc1 	.word	0x08003dc1
 8003d28:	08003dc7 	.word	0x08003dc7
 8003d2c:	08003dc7 	.word	0x08003dc7
 8003d30:	08003dc7 	.word	0x08003dc7
 8003d34:	08003dc7 	.word	0x08003dc7
 8003d38:	08003dc7 	.word	0x08003dc7
 8003d3c:	08003dc7 	.word	0x08003dc7
 8003d40:	08003dc7 	.word	0x08003dc7
 8003d44:	08003dc7 	.word	0x08003dc7
 8003d48:	08003dc7 	.word	0x08003dc7
 8003d4c:	08003dc7 	.word	0x08003dc7
 8003d50:	08003dc7 	.word	0x08003dc7
 8003d54:	08003dc7 	.word	0x08003dc7
 8003d58:	08003dc7 	.word	0x08003dc7
 8003d5c:	08003d75 	.word	0x08003d75
 8003d60:	08003d89 	.word	0x08003d89
 8003d64:	4a79      	ldr	r2, [pc, #484]	@ (8003f4c <HAL_GPIO_Init+0x2b4>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d013      	beq.n	8003d92 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003d6a:	e02c      	b.n	8003dc6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	623b      	str	r3, [r7, #32]
          break;
 8003d72:	e029      	b.n	8003dc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	3304      	adds	r3, #4
 8003d7a:	623b      	str	r3, [r7, #32]
          break;
 8003d7c:	e024      	b.n	8003dc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	3308      	adds	r3, #8
 8003d84:	623b      	str	r3, [r7, #32]
          break;
 8003d86:	e01f      	b.n	8003dc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	330c      	adds	r3, #12
 8003d8e:	623b      	str	r3, [r7, #32]
          break;
 8003d90:	e01a      	b.n	8003dc8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d102      	bne.n	8003da0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003d9a:	2304      	movs	r3, #4
 8003d9c:	623b      	str	r3, [r7, #32]
          break;
 8003d9e:	e013      	b.n	8003dc8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d105      	bne.n	8003db4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003da8:	2308      	movs	r3, #8
 8003daa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	69fa      	ldr	r2, [r7, #28]
 8003db0:	611a      	str	r2, [r3, #16]
          break;
 8003db2:	e009      	b.n	8003dc8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003db4:	2308      	movs	r3, #8
 8003db6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	69fa      	ldr	r2, [r7, #28]
 8003dbc:	615a      	str	r2, [r3, #20]
          break;
 8003dbe:	e003      	b.n	8003dc8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	623b      	str	r3, [r7, #32]
          break;
 8003dc4:	e000      	b.n	8003dc8 <HAL_GPIO_Init+0x130>
          break;
 8003dc6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	2bff      	cmp	r3, #255	@ 0xff
 8003dcc:	d801      	bhi.n	8003dd2 <HAL_GPIO_Init+0x13a>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	e001      	b.n	8003dd6 <HAL_GPIO_Init+0x13e>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	3304      	adds	r3, #4
 8003dd6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	2bff      	cmp	r3, #255	@ 0xff
 8003ddc:	d802      	bhi.n	8003de4 <HAL_GPIO_Init+0x14c>
 8003dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	e002      	b.n	8003dea <HAL_GPIO_Init+0x152>
 8003de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de6:	3b08      	subs	r3, #8
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	210f      	movs	r1, #15
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	fa01 f303 	lsl.w	r3, r1, r3
 8003df8:	43db      	mvns	r3, r3
 8003dfa:	401a      	ands	r2, r3
 8003dfc:	6a39      	ldr	r1, [r7, #32]
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	fa01 f303 	lsl.w	r3, r1, r3
 8003e04:	431a      	orrs	r2, r3
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f000 80b1 	beq.w	8003f7a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003e18:	4b4d      	ldr	r3, [pc, #308]	@ (8003f50 <HAL_GPIO_Init+0x2b8>)
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	4a4c      	ldr	r2, [pc, #304]	@ (8003f50 <HAL_GPIO_Init+0x2b8>)
 8003e1e:	f043 0301 	orr.w	r3, r3, #1
 8003e22:	6193      	str	r3, [r2, #24]
 8003e24:	4b4a      	ldr	r3, [pc, #296]	@ (8003f50 <HAL_GPIO_Init+0x2b8>)
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	f003 0301 	and.w	r3, r3, #1
 8003e2c:	60bb      	str	r3, [r7, #8]
 8003e2e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003e30:	4a48      	ldr	r2, [pc, #288]	@ (8003f54 <HAL_GPIO_Init+0x2bc>)
 8003e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e34:	089b      	lsrs	r3, r3, #2
 8003e36:	3302      	adds	r3, #2
 8003e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e3c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e40:	f003 0303 	and.w	r3, r3, #3
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	220f      	movs	r2, #15
 8003e48:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4c:	43db      	mvns	r3, r3
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	4013      	ands	r3, r2
 8003e52:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a40      	ldr	r2, [pc, #256]	@ (8003f58 <HAL_GPIO_Init+0x2c0>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d013      	beq.n	8003e84 <HAL_GPIO_Init+0x1ec>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a3f      	ldr	r2, [pc, #252]	@ (8003f5c <HAL_GPIO_Init+0x2c4>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d00d      	beq.n	8003e80 <HAL_GPIO_Init+0x1e8>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a3e      	ldr	r2, [pc, #248]	@ (8003f60 <HAL_GPIO_Init+0x2c8>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d007      	beq.n	8003e7c <HAL_GPIO_Init+0x1e4>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a3d      	ldr	r2, [pc, #244]	@ (8003f64 <HAL_GPIO_Init+0x2cc>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d101      	bne.n	8003e78 <HAL_GPIO_Init+0x1e0>
 8003e74:	2303      	movs	r3, #3
 8003e76:	e006      	b.n	8003e86 <HAL_GPIO_Init+0x1ee>
 8003e78:	2304      	movs	r3, #4
 8003e7a:	e004      	b.n	8003e86 <HAL_GPIO_Init+0x1ee>
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	e002      	b.n	8003e86 <HAL_GPIO_Init+0x1ee>
 8003e80:	2301      	movs	r3, #1
 8003e82:	e000      	b.n	8003e86 <HAL_GPIO_Init+0x1ee>
 8003e84:	2300      	movs	r3, #0
 8003e86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e88:	f002 0203 	and.w	r2, r2, #3
 8003e8c:	0092      	lsls	r2, r2, #2
 8003e8e:	4093      	lsls	r3, r2
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003e96:	492f      	ldr	r1, [pc, #188]	@ (8003f54 <HAL_GPIO_Init+0x2bc>)
 8003e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9a:	089b      	lsrs	r3, r3, #2
 8003e9c:	3302      	adds	r3, #2
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d006      	beq.n	8003ebe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003eb0:	4b2d      	ldr	r3, [pc, #180]	@ (8003f68 <HAL_GPIO_Init+0x2d0>)
 8003eb2:	689a      	ldr	r2, [r3, #8]
 8003eb4:	492c      	ldr	r1, [pc, #176]	@ (8003f68 <HAL_GPIO_Init+0x2d0>)
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	608b      	str	r3, [r1, #8]
 8003ebc:	e006      	b.n	8003ecc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003ebe:	4b2a      	ldr	r3, [pc, #168]	@ (8003f68 <HAL_GPIO_Init+0x2d0>)
 8003ec0:	689a      	ldr	r2, [r3, #8]
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	43db      	mvns	r3, r3
 8003ec6:	4928      	ldr	r1, [pc, #160]	@ (8003f68 <HAL_GPIO_Init+0x2d0>)
 8003ec8:	4013      	ands	r3, r2
 8003eca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d006      	beq.n	8003ee6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003ed8:	4b23      	ldr	r3, [pc, #140]	@ (8003f68 <HAL_GPIO_Init+0x2d0>)
 8003eda:	68da      	ldr	r2, [r3, #12]
 8003edc:	4922      	ldr	r1, [pc, #136]	@ (8003f68 <HAL_GPIO_Init+0x2d0>)
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	60cb      	str	r3, [r1, #12]
 8003ee4:	e006      	b.n	8003ef4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003ee6:	4b20      	ldr	r3, [pc, #128]	@ (8003f68 <HAL_GPIO_Init+0x2d0>)
 8003ee8:	68da      	ldr	r2, [r3, #12]
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	43db      	mvns	r3, r3
 8003eee:	491e      	ldr	r1, [pc, #120]	@ (8003f68 <HAL_GPIO_Init+0x2d0>)
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d006      	beq.n	8003f0e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003f00:	4b19      	ldr	r3, [pc, #100]	@ (8003f68 <HAL_GPIO_Init+0x2d0>)
 8003f02:	685a      	ldr	r2, [r3, #4]
 8003f04:	4918      	ldr	r1, [pc, #96]	@ (8003f68 <HAL_GPIO_Init+0x2d0>)
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	604b      	str	r3, [r1, #4]
 8003f0c:	e006      	b.n	8003f1c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003f0e:	4b16      	ldr	r3, [pc, #88]	@ (8003f68 <HAL_GPIO_Init+0x2d0>)
 8003f10:	685a      	ldr	r2, [r3, #4]
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	43db      	mvns	r3, r3
 8003f16:	4914      	ldr	r1, [pc, #80]	@ (8003f68 <HAL_GPIO_Init+0x2d0>)
 8003f18:	4013      	ands	r3, r2
 8003f1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d021      	beq.n	8003f6c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003f28:	4b0f      	ldr	r3, [pc, #60]	@ (8003f68 <HAL_GPIO_Init+0x2d0>)
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	490e      	ldr	r1, [pc, #56]	@ (8003f68 <HAL_GPIO_Init+0x2d0>)
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	600b      	str	r3, [r1, #0]
 8003f34:	e021      	b.n	8003f7a <HAL_GPIO_Init+0x2e2>
 8003f36:	bf00      	nop
 8003f38:	10320000 	.word	0x10320000
 8003f3c:	10310000 	.word	0x10310000
 8003f40:	10220000 	.word	0x10220000
 8003f44:	10210000 	.word	0x10210000
 8003f48:	10120000 	.word	0x10120000
 8003f4c:	10110000 	.word	0x10110000
 8003f50:	40021000 	.word	0x40021000
 8003f54:	40010000 	.word	0x40010000
 8003f58:	40010800 	.word	0x40010800
 8003f5c:	40010c00 	.word	0x40010c00
 8003f60:	40011000 	.word	0x40011000
 8003f64:	40011400 	.word	0x40011400
 8003f68:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8003f9c <HAL_GPIO_Init+0x304>)
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	43db      	mvns	r3, r3
 8003f74:	4909      	ldr	r1, [pc, #36]	@ (8003f9c <HAL_GPIO_Init+0x304>)
 8003f76:	4013      	ands	r3, r2
 8003f78:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f86:	fa22 f303 	lsr.w	r3, r2, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f47f ae8e 	bne.w	8003cac <HAL_GPIO_Init+0x14>
  }
}
 8003f90:	bf00      	nop
 8003f92:	bf00      	nop
 8003f94:	372c      	adds	r7, #44	@ 0x2c
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bc80      	pop	{r7}
 8003f9a:	4770      	bx	lr
 8003f9c:	40010400 	.word	0x40010400

08003fa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	460b      	mov	r3, r1
 8003faa:	807b      	strh	r3, [r7, #2]
 8003fac:	4613      	mov	r3, r2
 8003fae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003fb0:	787b      	ldrb	r3, [r7, #1]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fb6:	887a      	ldrh	r2, [r7, #2]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003fbc:	e003      	b.n	8003fc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003fbe:	887b      	ldrh	r3, [r7, #2]
 8003fc0:	041a      	lsls	r2, r3, #16
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	611a      	str	r2, [r3, #16]
}
 8003fc6:	bf00      	nop
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bc80      	pop	{r7}
 8003fce:	4770      	bx	lr

08003fd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e12b      	b.n	800423a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d106      	bne.n	8003ffc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f7fc ff94 	bl	8000f24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2224      	movs	r2, #36	@ 0x24
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f022 0201 	bic.w	r2, r2, #1
 8004012:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004022:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004032:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004034:	f001 fbca 	bl	80057cc <HAL_RCC_GetPCLK1Freq>
 8004038:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	4a81      	ldr	r2, [pc, #516]	@ (8004244 <HAL_I2C_Init+0x274>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d807      	bhi.n	8004054 <HAL_I2C_Init+0x84>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	4a80      	ldr	r2, [pc, #512]	@ (8004248 <HAL_I2C_Init+0x278>)
 8004048:	4293      	cmp	r3, r2
 800404a:	bf94      	ite	ls
 800404c:	2301      	movls	r3, #1
 800404e:	2300      	movhi	r3, #0
 8004050:	b2db      	uxtb	r3, r3
 8004052:	e006      	b.n	8004062 <HAL_I2C_Init+0x92>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4a7d      	ldr	r2, [pc, #500]	@ (800424c <HAL_I2C_Init+0x27c>)
 8004058:	4293      	cmp	r3, r2
 800405a:	bf94      	ite	ls
 800405c:	2301      	movls	r3, #1
 800405e:	2300      	movhi	r3, #0
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d001      	beq.n	800406a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e0e7      	b.n	800423a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	4a78      	ldr	r2, [pc, #480]	@ (8004250 <HAL_I2C_Init+0x280>)
 800406e:	fba2 2303 	umull	r2, r3, r2, r3
 8004072:	0c9b      	lsrs	r3, r3, #18
 8004074:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68ba      	ldr	r2, [r7, #8]
 8004086:	430a      	orrs	r2, r1
 8004088:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	4a6a      	ldr	r2, [pc, #424]	@ (8004244 <HAL_I2C_Init+0x274>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d802      	bhi.n	80040a4 <HAL_I2C_Init+0xd4>
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	3301      	adds	r3, #1
 80040a2:	e009      	b.n	80040b8 <HAL_I2C_Init+0xe8>
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80040aa:	fb02 f303 	mul.w	r3, r2, r3
 80040ae:	4a69      	ldr	r2, [pc, #420]	@ (8004254 <HAL_I2C_Init+0x284>)
 80040b0:	fba2 2303 	umull	r2, r3, r2, r3
 80040b4:	099b      	lsrs	r3, r3, #6
 80040b6:	3301      	adds	r3, #1
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	6812      	ldr	r2, [r2, #0]
 80040bc:	430b      	orrs	r3, r1
 80040be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80040ca:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	495c      	ldr	r1, [pc, #368]	@ (8004244 <HAL_I2C_Init+0x274>)
 80040d4:	428b      	cmp	r3, r1
 80040d6:	d819      	bhi.n	800410c <HAL_I2C_Init+0x13c>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	1e59      	subs	r1, r3, #1
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	005b      	lsls	r3, r3, #1
 80040e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80040e6:	1c59      	adds	r1, r3, #1
 80040e8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80040ec:	400b      	ands	r3, r1
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00a      	beq.n	8004108 <HAL_I2C_Init+0x138>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	1e59      	subs	r1, r3, #1
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	005b      	lsls	r3, r3, #1
 80040fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8004100:	3301      	adds	r3, #1
 8004102:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004106:	e051      	b.n	80041ac <HAL_I2C_Init+0x1dc>
 8004108:	2304      	movs	r3, #4
 800410a:	e04f      	b.n	80041ac <HAL_I2C_Init+0x1dc>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d111      	bne.n	8004138 <HAL_I2C_Init+0x168>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	1e58      	subs	r0, r3, #1
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6859      	ldr	r1, [r3, #4]
 800411c:	460b      	mov	r3, r1
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	440b      	add	r3, r1
 8004122:	fbb0 f3f3 	udiv	r3, r0, r3
 8004126:	3301      	adds	r3, #1
 8004128:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800412c:	2b00      	cmp	r3, #0
 800412e:	bf0c      	ite	eq
 8004130:	2301      	moveq	r3, #1
 8004132:	2300      	movne	r3, #0
 8004134:	b2db      	uxtb	r3, r3
 8004136:	e012      	b.n	800415e <HAL_I2C_Init+0x18e>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	1e58      	subs	r0, r3, #1
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6859      	ldr	r1, [r3, #4]
 8004140:	460b      	mov	r3, r1
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	440b      	add	r3, r1
 8004146:	0099      	lsls	r1, r3, #2
 8004148:	440b      	add	r3, r1
 800414a:	fbb0 f3f3 	udiv	r3, r0, r3
 800414e:	3301      	adds	r3, #1
 8004150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004154:	2b00      	cmp	r3, #0
 8004156:	bf0c      	ite	eq
 8004158:	2301      	moveq	r3, #1
 800415a:	2300      	movne	r3, #0
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <HAL_I2C_Init+0x196>
 8004162:	2301      	movs	r3, #1
 8004164:	e022      	b.n	80041ac <HAL_I2C_Init+0x1dc>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d10e      	bne.n	800418c <HAL_I2C_Init+0x1bc>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	1e58      	subs	r0, r3, #1
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6859      	ldr	r1, [r3, #4]
 8004176:	460b      	mov	r3, r1
 8004178:	005b      	lsls	r3, r3, #1
 800417a:	440b      	add	r3, r1
 800417c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004180:	3301      	adds	r3, #1
 8004182:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004186:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800418a:	e00f      	b.n	80041ac <HAL_I2C_Init+0x1dc>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	1e58      	subs	r0, r3, #1
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6859      	ldr	r1, [r3, #4]
 8004194:	460b      	mov	r3, r1
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	440b      	add	r3, r1
 800419a:	0099      	lsls	r1, r3, #2
 800419c:	440b      	add	r3, r1
 800419e:	fbb0 f3f3 	udiv	r3, r0, r3
 80041a2:	3301      	adds	r3, #1
 80041a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80041ac:	6879      	ldr	r1, [r7, #4]
 80041ae:	6809      	ldr	r1, [r1, #0]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	69da      	ldr	r2, [r3, #28]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	431a      	orrs	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	430a      	orrs	r2, r1
 80041ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80041da:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	6911      	ldr	r1, [r2, #16]
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	68d2      	ldr	r2, [r2, #12]
 80041e6:	4311      	orrs	r1, r2
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	6812      	ldr	r2, [r2, #0]
 80041ec:	430b      	orrs	r3, r1
 80041ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	695a      	ldr	r2, [r3, #20]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	431a      	orrs	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	430a      	orrs	r2, r1
 800420a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f042 0201 	orr.w	r2, r2, #1
 800421a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2220      	movs	r2, #32
 8004226:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	000186a0 	.word	0x000186a0
 8004248:	001e847f 	.word	0x001e847f
 800424c:	003d08ff 	.word	0x003d08ff
 8004250:	431bde83 	.word	0x431bde83
 8004254:	10624dd3 	.word	0x10624dd3

08004258 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b088      	sub	sp, #32
 800425c:	af02      	add	r7, sp, #8
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	607a      	str	r2, [r7, #4]
 8004262:	461a      	mov	r2, r3
 8004264:	460b      	mov	r3, r1
 8004266:	817b      	strh	r3, [r7, #10]
 8004268:	4613      	mov	r3, r2
 800426a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800426c:	f7fe fece 	bl	800300c <HAL_GetTick>
 8004270:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b20      	cmp	r3, #32
 800427c:	f040 80e0 	bne.w	8004440 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	2319      	movs	r3, #25
 8004286:	2201      	movs	r2, #1
 8004288:	4970      	ldr	r1, [pc, #448]	@ (800444c <HAL_I2C_Master_Transmit+0x1f4>)
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f000 fc9e 	bl	8004bcc <I2C_WaitOnFlagUntilTimeout>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004296:	2302      	movs	r3, #2
 8004298:	e0d3      	b.n	8004442 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d101      	bne.n	80042a8 <HAL_I2C_Master_Transmit+0x50>
 80042a4:	2302      	movs	r3, #2
 80042a6:	e0cc      	b.n	8004442 <HAL_I2C_Master_Transmit+0x1ea>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d007      	beq.n	80042ce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f042 0201 	orr.w	r2, r2, #1
 80042cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2221      	movs	r2, #33	@ 0x21
 80042e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2210      	movs	r2, #16
 80042ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	893a      	ldrh	r2, [r7, #8]
 80042fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004304:	b29a      	uxth	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	4a50      	ldr	r2, [pc, #320]	@ (8004450 <HAL_I2C_Master_Transmit+0x1f8>)
 800430e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004310:	8979      	ldrh	r1, [r7, #10]
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	6a3a      	ldr	r2, [r7, #32]
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f000 fb08 	bl	800492c <I2C_MasterRequestWrite>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e08d      	b.n	8004442 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004326:	2300      	movs	r3, #0
 8004328:	613b      	str	r3, [r7, #16]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	695b      	ldr	r3, [r3, #20]
 8004330:	613b      	str	r3, [r7, #16]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	613b      	str	r3, [r7, #16]
 800433a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800433c:	e066      	b.n	800440c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	6a39      	ldr	r1, [r7, #32]
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f000 fd5c 	bl	8004e00 <I2C_WaitOnTXEFlagUntilTimeout>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00d      	beq.n	800436a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004352:	2b04      	cmp	r3, #4
 8004354:	d107      	bne.n	8004366 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004364:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e06b      	b.n	8004442 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800436e:	781a      	ldrb	r2, [r3, #0]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437a:	1c5a      	adds	r2, r3, #1
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004384:	b29b      	uxth	r3, r3
 8004386:	3b01      	subs	r3, #1
 8004388:	b29a      	uxth	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004392:	3b01      	subs	r3, #1
 8004394:	b29a      	uxth	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	f003 0304 	and.w	r3, r3, #4
 80043a4:	2b04      	cmp	r3, #4
 80043a6:	d11b      	bne.n	80043e0 <HAL_I2C_Master_Transmit+0x188>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d017      	beq.n	80043e0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b4:	781a      	ldrb	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c0:	1c5a      	adds	r2, r3, #1
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	3b01      	subs	r3, #1
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043d8:	3b01      	subs	r3, #1
 80043da:	b29a      	uxth	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	6a39      	ldr	r1, [r7, #32]
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f000 fd53 	bl	8004e90 <I2C_WaitOnBTFFlagUntilTimeout>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00d      	beq.n	800440c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f4:	2b04      	cmp	r3, #4
 80043f6:	d107      	bne.n	8004408 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004406:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e01a      	b.n	8004442 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004410:	2b00      	cmp	r3, #0
 8004412:	d194      	bne.n	800433e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004422:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2220      	movs	r2, #32
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800443c:	2300      	movs	r3, #0
 800443e:	e000      	b.n	8004442 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004440:	2302      	movs	r3, #2
  }
}
 8004442:	4618      	mov	r0, r3
 8004444:	3718      	adds	r7, #24
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	00100002 	.word	0x00100002
 8004450:	ffff0000 	.word	0xffff0000

08004454 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b08c      	sub	sp, #48	@ 0x30
 8004458:	af02      	add	r7, sp, #8
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	607a      	str	r2, [r7, #4]
 800445e:	461a      	mov	r2, r3
 8004460:	460b      	mov	r3, r1
 8004462:	817b      	strh	r3, [r7, #10]
 8004464:	4613      	mov	r3, r2
 8004466:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004468:	2300      	movs	r3, #0
 800446a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800446c:	f7fe fdce 	bl	800300c <HAL_GetTick>
 8004470:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b20      	cmp	r3, #32
 800447c:	f040 824b 	bne.w	8004916 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004482:	9300      	str	r3, [sp, #0]
 8004484:	2319      	movs	r3, #25
 8004486:	2201      	movs	r2, #1
 8004488:	497f      	ldr	r1, [pc, #508]	@ (8004688 <HAL_I2C_Master_Receive+0x234>)
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	f000 fb9e 	bl	8004bcc <I2C_WaitOnFlagUntilTimeout>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d001      	beq.n	800449a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8004496:	2302      	movs	r3, #2
 8004498:	e23e      	b.n	8004918 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d101      	bne.n	80044a8 <HAL_I2C_Master_Receive+0x54>
 80044a4:	2302      	movs	r3, #2
 80044a6:	e237      	b.n	8004918 <HAL_I2C_Master_Receive+0x4c4>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d007      	beq.n	80044ce <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f042 0201 	orr.w	r2, r2, #1
 80044cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2222      	movs	r2, #34	@ 0x22
 80044e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2210      	movs	r2, #16
 80044ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	893a      	ldrh	r2, [r7, #8]
 80044fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004504:	b29a      	uxth	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	4a5f      	ldr	r2, [pc, #380]	@ (800468c <HAL_I2C_Master_Receive+0x238>)
 800450e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004510:	8979      	ldrh	r1, [r7, #10]
 8004512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004514:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f000 fa8a 	bl	8004a30 <I2C_MasterRequestRead>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e1f8      	b.n	8004918 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800452a:	2b00      	cmp	r3, #0
 800452c:	d113      	bne.n	8004556 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800452e:	2300      	movs	r3, #0
 8004530:	61fb      	str	r3, [r7, #28]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	695b      	ldr	r3, [r3, #20]
 8004538:	61fb      	str	r3, [r7, #28]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	61fb      	str	r3, [r7, #28]
 8004542:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004552:	601a      	str	r2, [r3, #0]
 8004554:	e1cc      	b.n	80048f0 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800455a:	2b01      	cmp	r3, #1
 800455c:	d11e      	bne.n	800459c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800456c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800456e:	b672      	cpsid	i
}
 8004570:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004572:	2300      	movs	r3, #0
 8004574:	61bb      	str	r3, [r7, #24]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	695b      	ldr	r3, [r3, #20]
 800457c:	61bb      	str	r3, [r7, #24]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	61bb      	str	r3, [r7, #24]
 8004586:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004596:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004598:	b662      	cpsie	i
}
 800459a:	e035      	b.n	8004608 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d11e      	bne.n	80045e2 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045b2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80045b4:	b672      	cpsid	i
}
 80045b6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045b8:	2300      	movs	r3, #0
 80045ba:	617b      	str	r3, [r7, #20]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	617b      	str	r3, [r7, #20]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	617b      	str	r3, [r7, #20]
 80045cc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80045de:	b662      	cpsie	i
}
 80045e0:	e012      	b.n	8004608 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80045f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045f2:	2300      	movs	r3, #0
 80045f4:	613b      	str	r3, [r7, #16]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	613b      	str	r3, [r7, #16]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	613b      	str	r3, [r7, #16]
 8004606:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004608:	e172      	b.n	80048f0 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800460e:	2b03      	cmp	r3, #3
 8004610:	f200 811f 	bhi.w	8004852 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004618:	2b01      	cmp	r3, #1
 800461a:	d123      	bne.n	8004664 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800461c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800461e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f000 fc7d 	bl	8004f20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d001      	beq.n	8004630 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e173      	b.n	8004918 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	691a      	ldr	r2, [r3, #16]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800463a:	b2d2      	uxtb	r2, r2
 800463c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004642:	1c5a      	adds	r2, r3, #1
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800464c:	3b01      	subs	r3, #1
 800464e:	b29a      	uxth	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004658:	b29b      	uxth	r3, r3
 800465a:	3b01      	subs	r3, #1
 800465c:	b29a      	uxth	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004662:	e145      	b.n	80048f0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004668:	2b02      	cmp	r3, #2
 800466a:	d152      	bne.n	8004712 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800466c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800466e:	9300      	str	r3, [sp, #0]
 8004670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004672:	2200      	movs	r2, #0
 8004674:	4906      	ldr	r1, [pc, #24]	@ (8004690 <HAL_I2C_Master_Receive+0x23c>)
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f000 faa8 	bl	8004bcc <I2C_WaitOnFlagUntilTimeout>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d008      	beq.n	8004694 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e148      	b.n	8004918 <HAL_I2C_Master_Receive+0x4c4>
 8004686:	bf00      	nop
 8004688:	00100002 	.word	0x00100002
 800468c:	ffff0000 	.word	0xffff0000
 8004690:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004694:	b672      	cpsid	i
}
 8004696:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	691a      	ldr	r2, [r3, #16]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b2:	b2d2      	uxtb	r2, r2
 80046b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ba:	1c5a      	adds	r2, r3, #1
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046c4:	3b01      	subs	r3, #1
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	3b01      	subs	r3, #1
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80046da:	b662      	cpsie	i
}
 80046dc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	691a      	ldr	r2, [r3, #16]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e8:	b2d2      	uxtb	r2, r2
 80046ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f0:	1c5a      	adds	r2, r3, #1
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046fa:	3b01      	subs	r3, #1
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004706:	b29b      	uxth	r3, r3
 8004708:	3b01      	subs	r3, #1
 800470a:	b29a      	uxth	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004710:	e0ee      	b.n	80048f0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004714:	9300      	str	r3, [sp, #0]
 8004716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004718:	2200      	movs	r2, #0
 800471a:	4981      	ldr	r1, [pc, #516]	@ (8004920 <HAL_I2C_Master_Receive+0x4cc>)
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f000 fa55 	bl	8004bcc <I2C_WaitOnFlagUntilTimeout>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d001      	beq.n	800472c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e0f5      	b.n	8004918 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800473a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800473c:	b672      	cpsid	i
}
 800473e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	691a      	ldr	r2, [r3, #16]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800474a:	b2d2      	uxtb	r2, r2
 800474c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004752:	1c5a      	adds	r2, r3, #1
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800475c:	3b01      	subs	r3, #1
 800475e:	b29a      	uxth	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004768:	b29b      	uxth	r3, r3
 800476a:	3b01      	subs	r3, #1
 800476c:	b29a      	uxth	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004772:	4b6c      	ldr	r3, [pc, #432]	@ (8004924 <HAL_I2C_Master_Receive+0x4d0>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	08db      	lsrs	r3, r3, #3
 8004778:	4a6b      	ldr	r2, [pc, #428]	@ (8004928 <HAL_I2C_Master_Receive+0x4d4>)
 800477a:	fba2 2303 	umull	r2, r3, r2, r3
 800477e:	0a1a      	lsrs	r2, r3, #8
 8004780:	4613      	mov	r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4413      	add	r3, r2
 8004786:	00da      	lsls	r2, r3, #3
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800478c:	6a3b      	ldr	r3, [r7, #32]
 800478e:	3b01      	subs	r3, #1
 8004790:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004792:	6a3b      	ldr	r3, [r7, #32]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d118      	bne.n	80047ca <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2220      	movs	r2, #32
 80047a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b2:	f043 0220 	orr.w	r2, r3, #32
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80047ba:	b662      	cpsie	i
}
 80047bc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e0a6      	b.n	8004918 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	695b      	ldr	r3, [r3, #20]
 80047d0:	f003 0304 	and.w	r3, r3, #4
 80047d4:	2b04      	cmp	r3, #4
 80047d6:	d1d9      	bne.n	800478c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	691a      	ldr	r2, [r3, #16]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f2:	b2d2      	uxtb	r2, r2
 80047f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047fa:	1c5a      	adds	r2, r3, #1
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004804:	3b01      	subs	r3, #1
 8004806:	b29a      	uxth	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004810:	b29b      	uxth	r3, r3
 8004812:	3b01      	subs	r3, #1
 8004814:	b29a      	uxth	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800481a:	b662      	cpsie	i
}
 800481c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	691a      	ldr	r2, [r3, #16]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004828:	b2d2      	uxtb	r2, r2
 800482a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004830:	1c5a      	adds	r2, r3, #1
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800483a:	3b01      	subs	r3, #1
 800483c:	b29a      	uxth	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004846:	b29b      	uxth	r3, r3
 8004848:	3b01      	subs	r3, #1
 800484a:	b29a      	uxth	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004850:	e04e      	b.n	80048f0 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004852:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004854:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004856:	68f8      	ldr	r0, [r7, #12]
 8004858:	f000 fb62 	bl	8004f20 <I2C_WaitOnRXNEFlagUntilTimeout>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e058      	b.n	8004918 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	691a      	ldr	r2, [r3, #16]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004870:	b2d2      	uxtb	r2, r2
 8004872:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004878:	1c5a      	adds	r2, r3, #1
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004882:	3b01      	subs	r3, #1
 8004884:	b29a      	uxth	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800488e:	b29b      	uxth	r3, r3
 8004890:	3b01      	subs	r3, #1
 8004892:	b29a      	uxth	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	f003 0304 	and.w	r3, r3, #4
 80048a2:	2b04      	cmp	r3, #4
 80048a4:	d124      	bne.n	80048f0 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048aa:	2b03      	cmp	r3, #3
 80048ac:	d107      	bne.n	80048be <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048bc:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	691a      	ldr	r2, [r3, #16]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c8:	b2d2      	uxtb	r2, r2
 80048ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d0:	1c5a      	adds	r2, r3, #1
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048da:	3b01      	subs	r3, #1
 80048dc:	b29a      	uxth	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	3b01      	subs	r3, #1
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f47f ae88 	bne.w	800460a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2220      	movs	r2, #32
 80048fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004912:	2300      	movs	r3, #0
 8004914:	e000      	b.n	8004918 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8004916:	2302      	movs	r3, #2
  }
}
 8004918:	4618      	mov	r0, r3
 800491a:	3728      	adds	r7, #40	@ 0x28
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	00010004 	.word	0x00010004
 8004924:	20000030 	.word	0x20000030
 8004928:	14f8b589 	.word	0x14f8b589

0800492c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b088      	sub	sp, #32
 8004930:	af02      	add	r7, sp, #8
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	607a      	str	r2, [r7, #4]
 8004936:	603b      	str	r3, [r7, #0]
 8004938:	460b      	mov	r3, r1
 800493a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004940:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	2b08      	cmp	r3, #8
 8004946:	d006      	beq.n	8004956 <I2C_MasterRequestWrite+0x2a>
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d003      	beq.n	8004956 <I2C_MasterRequestWrite+0x2a>
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004954:	d108      	bne.n	8004968 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004964:	601a      	str	r2, [r3, #0]
 8004966:	e00b      	b.n	8004980 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800496c:	2b12      	cmp	r3, #18
 800496e:	d107      	bne.n	8004980 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800497e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	9300      	str	r3, [sp, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800498c:	68f8      	ldr	r0, [r7, #12]
 800498e:	f000 f91d 	bl	8004bcc <I2C_WaitOnFlagUntilTimeout>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00d      	beq.n	80049b4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049a6:	d103      	bne.n	80049b0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e035      	b.n	8004a20 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80049bc:	d108      	bne.n	80049d0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049be:	897b      	ldrh	r3, [r7, #10]
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	461a      	mov	r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80049cc:	611a      	str	r2, [r3, #16]
 80049ce:	e01b      	b.n	8004a08 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80049d0:	897b      	ldrh	r3, [r7, #10]
 80049d2:	11db      	asrs	r3, r3, #7
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	f003 0306 	and.w	r3, r3, #6
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	f063 030f 	orn	r3, r3, #15
 80049e0:	b2da      	uxtb	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	490e      	ldr	r1, [pc, #56]	@ (8004a28 <I2C_MasterRequestWrite+0xfc>)
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f000 f966 	bl	8004cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e010      	b.n	8004a20 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80049fe:	897b      	ldrh	r3, [r7, #10]
 8004a00:	b2da      	uxtb	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	4907      	ldr	r1, [pc, #28]	@ (8004a2c <I2C_MasterRequestWrite+0x100>)
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	f000 f956 	bl	8004cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d001      	beq.n	8004a1e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e000      	b.n	8004a20 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3718      	adds	r7, #24
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	00010008 	.word	0x00010008
 8004a2c:	00010002 	.word	0x00010002

08004a30 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b088      	sub	sp, #32
 8004a34:	af02      	add	r7, sp, #8
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	607a      	str	r2, [r7, #4]
 8004a3a:	603b      	str	r3, [r7, #0]
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a44:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004a54:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	2b08      	cmp	r3, #8
 8004a5a:	d006      	beq.n	8004a6a <I2C_MasterRequestRead+0x3a>
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d003      	beq.n	8004a6a <I2C_MasterRequestRead+0x3a>
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004a68:	d108      	bne.n	8004a7c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a78:	601a      	str	r2, [r3, #0]
 8004a7a:	e00b      	b.n	8004a94 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a80:	2b11      	cmp	r3, #17
 8004a82:	d107      	bne.n	8004a94 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a92:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	9300      	str	r3, [sp, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004aa0:	68f8      	ldr	r0, [r7, #12]
 8004aa2:	f000 f893 	bl	8004bcc <I2C_WaitOnFlagUntilTimeout>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00d      	beq.n	8004ac8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ab6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004aba:	d103      	bne.n	8004ac4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ac2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e079      	b.n	8004bbc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ad0:	d108      	bne.n	8004ae4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004ad2:	897b      	ldrh	r3, [r7, #10]
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	f043 0301 	orr.w	r3, r3, #1
 8004ada:	b2da      	uxtb	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	611a      	str	r2, [r3, #16]
 8004ae2:	e05f      	b.n	8004ba4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004ae4:	897b      	ldrh	r3, [r7, #10]
 8004ae6:	11db      	asrs	r3, r3, #7
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	f003 0306 	and.w	r3, r3, #6
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	f063 030f 	orn	r3, r3, #15
 8004af4:	b2da      	uxtb	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	4930      	ldr	r1, [pc, #192]	@ (8004bc4 <I2C_MasterRequestRead+0x194>)
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f000 f8dc 	bl	8004cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d001      	beq.n	8004b12 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e054      	b.n	8004bbc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004b12:	897b      	ldrh	r3, [r7, #10]
 8004b14:	b2da      	uxtb	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	4929      	ldr	r1, [pc, #164]	@ (8004bc8 <I2C_MasterRequestRead+0x198>)
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f000 f8cc 	bl	8004cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d001      	beq.n	8004b32 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e044      	b.n	8004bbc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b32:	2300      	movs	r3, #0
 8004b34:	613b      	str	r3, [r7, #16]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	695b      	ldr	r3, [r3, #20]
 8004b3c:	613b      	str	r3, [r7, #16]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	613b      	str	r3, [r7, #16]
 8004b46:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b56:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	9300      	str	r3, [sp, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	f000 f831 	bl	8004bcc <I2C_WaitOnFlagUntilTimeout>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00d      	beq.n	8004b8c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b7e:	d103      	bne.n	8004b88 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b86:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e017      	b.n	8004bbc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004b8c:	897b      	ldrh	r3, [r7, #10]
 8004b8e:	11db      	asrs	r3, r3, #7
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	f003 0306 	and.w	r3, r3, #6
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	f063 030e 	orn	r3, r3, #14
 8004b9c:	b2da      	uxtb	r2, r3
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	4907      	ldr	r1, [pc, #28]	@ (8004bc8 <I2C_MasterRequestRead+0x198>)
 8004baa:	68f8      	ldr	r0, [r7, #12]
 8004bac:	f000 f888 	bl	8004cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d001      	beq.n	8004bba <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e000      	b.n	8004bbc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3718      	adds	r7, #24
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	00010008 	.word	0x00010008
 8004bc8:	00010002 	.word	0x00010002

08004bcc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	603b      	str	r3, [r7, #0]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bdc:	e048      	b.n	8004c70 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be4:	d044      	beq.n	8004c70 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004be6:	f7fe fa11 	bl	800300c <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d302      	bcc.n	8004bfc <I2C_WaitOnFlagUntilTimeout+0x30>
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d139      	bne.n	8004c70 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	0c1b      	lsrs	r3, r3, #16
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d10d      	bne.n	8004c22 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	43da      	mvns	r2, r3
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	4013      	ands	r3, r2
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	bf0c      	ite	eq
 8004c18:	2301      	moveq	r3, #1
 8004c1a:	2300      	movne	r3, #0
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	461a      	mov	r2, r3
 8004c20:	e00c      	b.n	8004c3c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	43da      	mvns	r2, r3
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	bf0c      	ite	eq
 8004c34:	2301      	moveq	r3, #1
 8004c36:	2300      	movne	r3, #0
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	79fb      	ldrb	r3, [r7, #7]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d116      	bne.n	8004c70 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c5c:	f043 0220 	orr.w	r2, r3, #32
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e023      	b.n	8004cb8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	0c1b      	lsrs	r3, r3, #16
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d10d      	bne.n	8004c96 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	695b      	ldr	r3, [r3, #20]
 8004c80:	43da      	mvns	r2, r3
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	4013      	ands	r3, r2
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	bf0c      	ite	eq
 8004c8c:	2301      	moveq	r3, #1
 8004c8e:	2300      	movne	r3, #0
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	461a      	mov	r2, r3
 8004c94:	e00c      	b.n	8004cb0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	43da      	mvns	r2, r3
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	bf0c      	ite	eq
 8004ca8:	2301      	moveq	r3, #1
 8004caa:	2300      	movne	r3, #0
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	461a      	mov	r2, r3
 8004cb0:	79fb      	ldrb	r3, [r7, #7]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d093      	beq.n	8004bde <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3710      	adds	r7, #16
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
 8004ccc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004cce:	e071      	b.n	8004db4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cde:	d123      	bne.n	8004d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cee:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004cf8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2220      	movs	r2, #32
 8004d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d14:	f043 0204 	orr.w	r2, r3, #4
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e067      	b.n	8004df8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d2e:	d041      	beq.n	8004db4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d30:	f7fe f96c 	bl	800300c <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d302      	bcc.n	8004d46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d136      	bne.n	8004db4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	0c1b      	lsrs	r3, r3, #16
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d10c      	bne.n	8004d6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	695b      	ldr	r3, [r3, #20]
 8004d56:	43da      	mvns	r2, r3
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	bf14      	ite	ne
 8004d62:	2301      	movne	r3, #1
 8004d64:	2300      	moveq	r3, #0
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	e00b      	b.n	8004d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	43da      	mvns	r2, r3
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	4013      	ands	r3, r2
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	bf14      	ite	ne
 8004d7c:	2301      	movne	r3, #1
 8004d7e:	2300      	moveq	r3, #0
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d016      	beq.n	8004db4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2220      	movs	r2, #32
 8004d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da0:	f043 0220 	orr.w	r2, r3, #32
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e021      	b.n	8004df8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	0c1b      	lsrs	r3, r3, #16
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d10c      	bne.n	8004dd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	695b      	ldr	r3, [r3, #20]
 8004dc4:	43da      	mvns	r2, r3
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	4013      	ands	r3, r2
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	bf14      	ite	ne
 8004dd0:	2301      	movne	r3, #1
 8004dd2:	2300      	moveq	r3, #0
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	e00b      	b.n	8004df0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	43da      	mvns	r2, r3
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	4013      	ands	r3, r2
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	bf14      	ite	ne
 8004dea:	2301      	movne	r3, #1
 8004dec:	2300      	moveq	r3, #0
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f47f af6d 	bne.w	8004cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e0c:	e034      	b.n	8004e78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f000 f8e3 	bl	8004fda <I2C_IsAcknowledgeFailed>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d001      	beq.n	8004e1e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e034      	b.n	8004e88 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e24:	d028      	beq.n	8004e78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e26:	f7fe f8f1 	bl	800300c <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	68ba      	ldr	r2, [r7, #8]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d302      	bcc.n	8004e3c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d11d      	bne.n	8004e78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e46:	2b80      	cmp	r3, #128	@ 0x80
 8004e48:	d016      	beq.n	8004e78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2220      	movs	r2, #32
 8004e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e64:	f043 0220 	orr.w	r2, r3, #32
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e007      	b.n	8004e88 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e82:	2b80      	cmp	r3, #128	@ 0x80
 8004e84:	d1c3      	bne.n	8004e0e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3710      	adds	r7, #16
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e9c:	e034      	b.n	8004f08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f000 f89b 	bl	8004fda <I2C_IsAcknowledgeFailed>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d001      	beq.n	8004eae <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e034      	b.n	8004f18 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb4:	d028      	beq.n	8004f08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eb6:	f7fe f8a9 	bl	800300c <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	68ba      	ldr	r2, [r7, #8]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d302      	bcc.n	8004ecc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d11d      	bne.n	8004f08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	f003 0304 	and.w	r3, r3, #4
 8004ed6:	2b04      	cmp	r3, #4
 8004ed8:	d016      	beq.n	8004f08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2220      	movs	r2, #32
 8004ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef4:	f043 0220 	orr.w	r2, r3, #32
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e007      	b.n	8004f18 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	f003 0304 	and.w	r3, r3, #4
 8004f12:	2b04      	cmp	r3, #4
 8004f14:	d1c3      	bne.n	8004e9e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3710      	adds	r7, #16
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f2c:	e049      	b.n	8004fc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	695b      	ldr	r3, [r3, #20]
 8004f34:	f003 0310 	and.w	r3, r3, #16
 8004f38:	2b10      	cmp	r3, #16
 8004f3a:	d119      	bne.n	8004f70 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f06f 0210 	mvn.w	r2, #16
 8004f44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2220      	movs	r2, #32
 8004f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e030      	b.n	8004fd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f70:	f7fe f84c 	bl	800300c <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d302      	bcc.n	8004f86 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d11d      	bne.n	8004fc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	695b      	ldr	r3, [r3, #20]
 8004f8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f90:	2b40      	cmp	r3, #64	@ 0x40
 8004f92:	d016      	beq.n	8004fc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2200      	movs	r2, #0
 8004f98:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2220      	movs	r2, #32
 8004f9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fae:	f043 0220 	orr.w	r2, r3, #32
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e007      	b.n	8004fd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	695b      	ldr	r3, [r3, #20]
 8004fc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fcc:	2b40      	cmp	r3, #64	@ 0x40
 8004fce:	d1ae      	bne.n	8004f2e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b083      	sub	sp, #12
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	695b      	ldr	r3, [r3, #20]
 8004fe8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ff0:	d11b      	bne.n	800502a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004ffa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2220      	movs	r2, #32
 8005006:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005016:	f043 0204 	orr.w	r2, r3, #4
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e000      	b.n	800502c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	bc80      	pop	{r7}
 8005034:	4770      	bx	lr
	...

08005038 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e272      	b.n	8005530 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b00      	cmp	r3, #0
 8005054:	f000 8087 	beq.w	8005166 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005058:	4b92      	ldr	r3, [pc, #584]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	f003 030c 	and.w	r3, r3, #12
 8005060:	2b04      	cmp	r3, #4
 8005062:	d00c      	beq.n	800507e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005064:	4b8f      	ldr	r3, [pc, #572]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f003 030c 	and.w	r3, r3, #12
 800506c:	2b08      	cmp	r3, #8
 800506e:	d112      	bne.n	8005096 <HAL_RCC_OscConfig+0x5e>
 8005070:	4b8c      	ldr	r3, [pc, #560]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005078:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800507c:	d10b      	bne.n	8005096 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800507e:	4b89      	ldr	r3, [pc, #548]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d06c      	beq.n	8005164 <HAL_RCC_OscConfig+0x12c>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d168      	bne.n	8005164 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e24c      	b.n	8005530 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800509e:	d106      	bne.n	80050ae <HAL_RCC_OscConfig+0x76>
 80050a0:	4b80      	ldr	r3, [pc, #512]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a7f      	ldr	r2, [pc, #508]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 80050a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050aa:	6013      	str	r3, [r2, #0]
 80050ac:	e02e      	b.n	800510c <HAL_RCC_OscConfig+0xd4>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d10c      	bne.n	80050d0 <HAL_RCC_OscConfig+0x98>
 80050b6:	4b7b      	ldr	r3, [pc, #492]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a7a      	ldr	r2, [pc, #488]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 80050bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050c0:	6013      	str	r3, [r2, #0]
 80050c2:	4b78      	ldr	r3, [pc, #480]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a77      	ldr	r2, [pc, #476]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 80050c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050cc:	6013      	str	r3, [r2, #0]
 80050ce:	e01d      	b.n	800510c <HAL_RCC_OscConfig+0xd4>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050d8:	d10c      	bne.n	80050f4 <HAL_RCC_OscConfig+0xbc>
 80050da:	4b72      	ldr	r3, [pc, #456]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a71      	ldr	r2, [pc, #452]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 80050e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050e4:	6013      	str	r3, [r2, #0]
 80050e6:	4b6f      	ldr	r3, [pc, #444]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a6e      	ldr	r2, [pc, #440]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 80050ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050f0:	6013      	str	r3, [r2, #0]
 80050f2:	e00b      	b.n	800510c <HAL_RCC_OscConfig+0xd4>
 80050f4:	4b6b      	ldr	r3, [pc, #428]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a6a      	ldr	r2, [pc, #424]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 80050fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050fe:	6013      	str	r3, [r2, #0]
 8005100:	4b68      	ldr	r3, [pc, #416]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a67      	ldr	r2, [pc, #412]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 8005106:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800510a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d013      	beq.n	800513c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005114:	f7fd ff7a 	bl	800300c <HAL_GetTick>
 8005118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800511a:	e008      	b.n	800512e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800511c:	f7fd ff76 	bl	800300c <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	2b64      	cmp	r3, #100	@ 0x64
 8005128:	d901      	bls.n	800512e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e200      	b.n	8005530 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800512e:	4b5d      	ldr	r3, [pc, #372]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d0f0      	beq.n	800511c <HAL_RCC_OscConfig+0xe4>
 800513a:	e014      	b.n	8005166 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800513c:	f7fd ff66 	bl	800300c <HAL_GetTick>
 8005140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005142:	e008      	b.n	8005156 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005144:	f7fd ff62 	bl	800300c <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	2b64      	cmp	r3, #100	@ 0x64
 8005150:	d901      	bls.n	8005156 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e1ec      	b.n	8005530 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005156:	4b53      	ldr	r3, [pc, #332]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1f0      	bne.n	8005144 <HAL_RCC_OscConfig+0x10c>
 8005162:	e000      	b.n	8005166 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005164:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b00      	cmp	r3, #0
 8005170:	d063      	beq.n	800523a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005172:	4b4c      	ldr	r3, [pc, #304]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	f003 030c 	and.w	r3, r3, #12
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00b      	beq.n	8005196 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800517e:	4b49      	ldr	r3, [pc, #292]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f003 030c 	and.w	r3, r3, #12
 8005186:	2b08      	cmp	r3, #8
 8005188:	d11c      	bne.n	80051c4 <HAL_RCC_OscConfig+0x18c>
 800518a:	4b46      	ldr	r3, [pc, #280]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d116      	bne.n	80051c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005196:	4b43      	ldr	r3, [pc, #268]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d005      	beq.n	80051ae <HAL_RCC_OscConfig+0x176>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d001      	beq.n	80051ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e1c0      	b.n	8005530 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051ae:	4b3d      	ldr	r3, [pc, #244]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	00db      	lsls	r3, r3, #3
 80051bc:	4939      	ldr	r1, [pc, #228]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051c2:	e03a      	b.n	800523a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d020      	beq.n	800520e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051cc:	4b36      	ldr	r3, [pc, #216]	@ (80052a8 <HAL_RCC_OscConfig+0x270>)
 80051ce:	2201      	movs	r2, #1
 80051d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051d2:	f7fd ff1b 	bl	800300c <HAL_GetTick>
 80051d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051d8:	e008      	b.n	80051ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051da:	f7fd ff17 	bl	800300c <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d901      	bls.n	80051ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e1a1      	b.n	8005530 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051ec:	4b2d      	ldr	r3, [pc, #180]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0302 	and.w	r3, r3, #2
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d0f0      	beq.n	80051da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051f8:	4b2a      	ldr	r3, [pc, #168]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	695b      	ldr	r3, [r3, #20]
 8005204:	00db      	lsls	r3, r3, #3
 8005206:	4927      	ldr	r1, [pc, #156]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 8005208:	4313      	orrs	r3, r2
 800520a:	600b      	str	r3, [r1, #0]
 800520c:	e015      	b.n	800523a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800520e:	4b26      	ldr	r3, [pc, #152]	@ (80052a8 <HAL_RCC_OscConfig+0x270>)
 8005210:	2200      	movs	r2, #0
 8005212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005214:	f7fd fefa 	bl	800300c <HAL_GetTick>
 8005218:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800521a:	e008      	b.n	800522e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800521c:	f7fd fef6 	bl	800300c <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	2b02      	cmp	r3, #2
 8005228:	d901      	bls.n	800522e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e180      	b.n	8005530 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800522e:	4b1d      	ldr	r3, [pc, #116]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0302 	and.w	r3, r3, #2
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1f0      	bne.n	800521c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0308 	and.w	r3, r3, #8
 8005242:	2b00      	cmp	r3, #0
 8005244:	d03a      	beq.n	80052bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d019      	beq.n	8005282 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800524e:	4b17      	ldr	r3, [pc, #92]	@ (80052ac <HAL_RCC_OscConfig+0x274>)
 8005250:	2201      	movs	r2, #1
 8005252:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005254:	f7fd feda 	bl	800300c <HAL_GetTick>
 8005258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800525a:	e008      	b.n	800526e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800525c:	f7fd fed6 	bl	800300c <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	2b02      	cmp	r3, #2
 8005268:	d901      	bls.n	800526e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e160      	b.n	8005530 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800526e:	4b0d      	ldr	r3, [pc, #52]	@ (80052a4 <HAL_RCC_OscConfig+0x26c>)
 8005270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005272:	f003 0302 	and.w	r3, r3, #2
 8005276:	2b00      	cmp	r3, #0
 8005278:	d0f0      	beq.n	800525c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800527a:	2001      	movs	r0, #1
 800527c:	f000 face 	bl	800581c <RCC_Delay>
 8005280:	e01c      	b.n	80052bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005282:	4b0a      	ldr	r3, [pc, #40]	@ (80052ac <HAL_RCC_OscConfig+0x274>)
 8005284:	2200      	movs	r2, #0
 8005286:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005288:	f7fd fec0 	bl	800300c <HAL_GetTick>
 800528c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800528e:	e00f      	b.n	80052b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005290:	f7fd febc 	bl	800300c <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	2b02      	cmp	r3, #2
 800529c:	d908      	bls.n	80052b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e146      	b.n	8005530 <HAL_RCC_OscConfig+0x4f8>
 80052a2:	bf00      	nop
 80052a4:	40021000 	.word	0x40021000
 80052a8:	42420000 	.word	0x42420000
 80052ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052b0:	4b92      	ldr	r3, [pc, #584]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 80052b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b4:	f003 0302 	and.w	r3, r3, #2
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1e9      	bne.n	8005290 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0304 	and.w	r3, r3, #4
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f000 80a6 	beq.w	8005416 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052ca:	2300      	movs	r3, #0
 80052cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052ce:	4b8b      	ldr	r3, [pc, #556]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 80052d0:	69db      	ldr	r3, [r3, #28]
 80052d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d10d      	bne.n	80052f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052da:	4b88      	ldr	r3, [pc, #544]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 80052dc:	69db      	ldr	r3, [r3, #28]
 80052de:	4a87      	ldr	r2, [pc, #540]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 80052e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052e4:	61d3      	str	r3, [r2, #28]
 80052e6:	4b85      	ldr	r3, [pc, #532]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 80052e8:	69db      	ldr	r3, [r3, #28]
 80052ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052ee:	60bb      	str	r3, [r7, #8]
 80052f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052f2:	2301      	movs	r3, #1
 80052f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052f6:	4b82      	ldr	r3, [pc, #520]	@ (8005500 <HAL_RCC_OscConfig+0x4c8>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d118      	bne.n	8005334 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005302:	4b7f      	ldr	r3, [pc, #508]	@ (8005500 <HAL_RCC_OscConfig+0x4c8>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a7e      	ldr	r2, [pc, #504]	@ (8005500 <HAL_RCC_OscConfig+0x4c8>)
 8005308:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800530c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800530e:	f7fd fe7d 	bl	800300c <HAL_GetTick>
 8005312:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005314:	e008      	b.n	8005328 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005316:	f7fd fe79 	bl	800300c <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	2b64      	cmp	r3, #100	@ 0x64
 8005322:	d901      	bls.n	8005328 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e103      	b.n	8005530 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005328:	4b75      	ldr	r3, [pc, #468]	@ (8005500 <HAL_RCC_OscConfig+0x4c8>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005330:	2b00      	cmp	r3, #0
 8005332:	d0f0      	beq.n	8005316 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d106      	bne.n	800534a <HAL_RCC_OscConfig+0x312>
 800533c:	4b6f      	ldr	r3, [pc, #444]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	4a6e      	ldr	r2, [pc, #440]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 8005342:	f043 0301 	orr.w	r3, r3, #1
 8005346:	6213      	str	r3, [r2, #32]
 8005348:	e02d      	b.n	80053a6 <HAL_RCC_OscConfig+0x36e>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d10c      	bne.n	800536c <HAL_RCC_OscConfig+0x334>
 8005352:	4b6a      	ldr	r3, [pc, #424]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	4a69      	ldr	r2, [pc, #420]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 8005358:	f023 0301 	bic.w	r3, r3, #1
 800535c:	6213      	str	r3, [r2, #32]
 800535e:	4b67      	ldr	r3, [pc, #412]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 8005360:	6a1b      	ldr	r3, [r3, #32]
 8005362:	4a66      	ldr	r2, [pc, #408]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 8005364:	f023 0304 	bic.w	r3, r3, #4
 8005368:	6213      	str	r3, [r2, #32]
 800536a:	e01c      	b.n	80053a6 <HAL_RCC_OscConfig+0x36e>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	2b05      	cmp	r3, #5
 8005372:	d10c      	bne.n	800538e <HAL_RCC_OscConfig+0x356>
 8005374:	4b61      	ldr	r3, [pc, #388]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 8005376:	6a1b      	ldr	r3, [r3, #32]
 8005378:	4a60      	ldr	r2, [pc, #384]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 800537a:	f043 0304 	orr.w	r3, r3, #4
 800537e:	6213      	str	r3, [r2, #32]
 8005380:	4b5e      	ldr	r3, [pc, #376]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 8005382:	6a1b      	ldr	r3, [r3, #32]
 8005384:	4a5d      	ldr	r2, [pc, #372]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 8005386:	f043 0301 	orr.w	r3, r3, #1
 800538a:	6213      	str	r3, [r2, #32]
 800538c:	e00b      	b.n	80053a6 <HAL_RCC_OscConfig+0x36e>
 800538e:	4b5b      	ldr	r3, [pc, #364]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	4a5a      	ldr	r2, [pc, #360]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 8005394:	f023 0301 	bic.w	r3, r3, #1
 8005398:	6213      	str	r3, [r2, #32]
 800539a:	4b58      	ldr	r3, [pc, #352]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	4a57      	ldr	r2, [pc, #348]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 80053a0:	f023 0304 	bic.w	r3, r3, #4
 80053a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d015      	beq.n	80053da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053ae:	f7fd fe2d 	bl	800300c <HAL_GetTick>
 80053b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053b4:	e00a      	b.n	80053cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053b6:	f7fd fe29 	bl	800300c <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d901      	bls.n	80053cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	e0b1      	b.n	8005530 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053cc:	4b4b      	ldr	r3, [pc, #300]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 80053ce:	6a1b      	ldr	r3, [r3, #32]
 80053d0:	f003 0302 	and.w	r3, r3, #2
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d0ee      	beq.n	80053b6 <HAL_RCC_OscConfig+0x37e>
 80053d8:	e014      	b.n	8005404 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053da:	f7fd fe17 	bl	800300c <HAL_GetTick>
 80053de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053e0:	e00a      	b.n	80053f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053e2:	f7fd fe13 	bl	800300c <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d901      	bls.n	80053f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80053f4:	2303      	movs	r3, #3
 80053f6:	e09b      	b.n	8005530 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053f8:	4b40      	ldr	r3, [pc, #256]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 80053fa:	6a1b      	ldr	r3, [r3, #32]
 80053fc:	f003 0302 	and.w	r3, r3, #2
 8005400:	2b00      	cmp	r3, #0
 8005402:	d1ee      	bne.n	80053e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005404:	7dfb      	ldrb	r3, [r7, #23]
 8005406:	2b01      	cmp	r3, #1
 8005408:	d105      	bne.n	8005416 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800540a:	4b3c      	ldr	r3, [pc, #240]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 800540c:	69db      	ldr	r3, [r3, #28]
 800540e:	4a3b      	ldr	r2, [pc, #236]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 8005410:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005414:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	69db      	ldr	r3, [r3, #28]
 800541a:	2b00      	cmp	r3, #0
 800541c:	f000 8087 	beq.w	800552e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005420:	4b36      	ldr	r3, [pc, #216]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f003 030c 	and.w	r3, r3, #12
 8005428:	2b08      	cmp	r3, #8
 800542a:	d061      	beq.n	80054f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	69db      	ldr	r3, [r3, #28]
 8005430:	2b02      	cmp	r3, #2
 8005432:	d146      	bne.n	80054c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005434:	4b33      	ldr	r3, [pc, #204]	@ (8005504 <HAL_RCC_OscConfig+0x4cc>)
 8005436:	2200      	movs	r2, #0
 8005438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800543a:	f7fd fde7 	bl	800300c <HAL_GetTick>
 800543e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005440:	e008      	b.n	8005454 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005442:	f7fd fde3 	bl	800300c <HAL_GetTick>
 8005446:	4602      	mov	r2, r0
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	2b02      	cmp	r3, #2
 800544e:	d901      	bls.n	8005454 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e06d      	b.n	8005530 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005454:	4b29      	ldr	r3, [pc, #164]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d1f0      	bne.n	8005442 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a1b      	ldr	r3, [r3, #32]
 8005464:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005468:	d108      	bne.n	800547c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800546a:	4b24      	ldr	r3, [pc, #144]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	4921      	ldr	r1, [pc, #132]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 8005478:	4313      	orrs	r3, r2
 800547a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800547c:	4b1f      	ldr	r3, [pc, #124]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a19      	ldr	r1, [r3, #32]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800548c:	430b      	orrs	r3, r1
 800548e:	491b      	ldr	r1, [pc, #108]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 8005490:	4313      	orrs	r3, r2
 8005492:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005494:	4b1b      	ldr	r3, [pc, #108]	@ (8005504 <HAL_RCC_OscConfig+0x4cc>)
 8005496:	2201      	movs	r2, #1
 8005498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800549a:	f7fd fdb7 	bl	800300c <HAL_GetTick>
 800549e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80054a0:	e008      	b.n	80054b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054a2:	f7fd fdb3 	bl	800300c <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	d901      	bls.n	80054b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e03d      	b.n	8005530 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80054b4:	4b11      	ldr	r3, [pc, #68]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d0f0      	beq.n	80054a2 <HAL_RCC_OscConfig+0x46a>
 80054c0:	e035      	b.n	800552e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054c2:	4b10      	ldr	r3, [pc, #64]	@ (8005504 <HAL_RCC_OscConfig+0x4cc>)
 80054c4:	2200      	movs	r2, #0
 80054c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c8:	f7fd fda0 	bl	800300c <HAL_GetTick>
 80054cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054ce:	e008      	b.n	80054e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054d0:	f7fd fd9c 	bl	800300c <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d901      	bls.n	80054e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e026      	b.n	8005530 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054e2:	4b06      	ldr	r3, [pc, #24]	@ (80054fc <HAL_RCC_OscConfig+0x4c4>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1f0      	bne.n	80054d0 <HAL_RCC_OscConfig+0x498>
 80054ee:	e01e      	b.n	800552e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	69db      	ldr	r3, [r3, #28]
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d107      	bne.n	8005508 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e019      	b.n	8005530 <HAL_RCC_OscConfig+0x4f8>
 80054fc:	40021000 	.word	0x40021000
 8005500:	40007000 	.word	0x40007000
 8005504:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005508:	4b0b      	ldr	r3, [pc, #44]	@ (8005538 <HAL_RCC_OscConfig+0x500>)
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a1b      	ldr	r3, [r3, #32]
 8005518:	429a      	cmp	r2, r3
 800551a:	d106      	bne.n	800552a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005526:	429a      	cmp	r2, r3
 8005528:	d001      	beq.n	800552e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e000      	b.n	8005530 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3718      	adds	r7, #24
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	40021000 	.word	0x40021000

0800553c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d101      	bne.n	8005550 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e0d0      	b.n	80056f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005550:	4b6a      	ldr	r3, [pc, #424]	@ (80056fc <HAL_RCC_ClockConfig+0x1c0>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0307 	and.w	r3, r3, #7
 8005558:	683a      	ldr	r2, [r7, #0]
 800555a:	429a      	cmp	r2, r3
 800555c:	d910      	bls.n	8005580 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800555e:	4b67      	ldr	r3, [pc, #412]	@ (80056fc <HAL_RCC_ClockConfig+0x1c0>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f023 0207 	bic.w	r2, r3, #7
 8005566:	4965      	ldr	r1, [pc, #404]	@ (80056fc <HAL_RCC_ClockConfig+0x1c0>)
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	4313      	orrs	r3, r2
 800556c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800556e:	4b63      	ldr	r3, [pc, #396]	@ (80056fc <HAL_RCC_ClockConfig+0x1c0>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0307 	and.w	r3, r3, #7
 8005576:	683a      	ldr	r2, [r7, #0]
 8005578:	429a      	cmp	r2, r3
 800557a:	d001      	beq.n	8005580 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e0b8      	b.n	80056f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0302 	and.w	r3, r3, #2
 8005588:	2b00      	cmp	r3, #0
 800558a:	d020      	beq.n	80055ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0304 	and.w	r3, r3, #4
 8005594:	2b00      	cmp	r3, #0
 8005596:	d005      	beq.n	80055a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005598:	4b59      	ldr	r3, [pc, #356]	@ (8005700 <HAL_RCC_ClockConfig+0x1c4>)
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	4a58      	ldr	r2, [pc, #352]	@ (8005700 <HAL_RCC_ClockConfig+0x1c4>)
 800559e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80055a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0308 	and.w	r3, r3, #8
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d005      	beq.n	80055bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055b0:	4b53      	ldr	r3, [pc, #332]	@ (8005700 <HAL_RCC_ClockConfig+0x1c4>)
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	4a52      	ldr	r2, [pc, #328]	@ (8005700 <HAL_RCC_ClockConfig+0x1c4>)
 80055b6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80055ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055bc:	4b50      	ldr	r3, [pc, #320]	@ (8005700 <HAL_RCC_ClockConfig+0x1c4>)
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	494d      	ldr	r1, [pc, #308]	@ (8005700 <HAL_RCC_ClockConfig+0x1c4>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0301 	and.w	r3, r3, #1
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d040      	beq.n	800565c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d107      	bne.n	80055f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055e2:	4b47      	ldr	r3, [pc, #284]	@ (8005700 <HAL_RCC_ClockConfig+0x1c4>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d115      	bne.n	800561a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e07f      	b.n	80056f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d107      	bne.n	800560a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055fa:	4b41      	ldr	r3, [pc, #260]	@ (8005700 <HAL_RCC_ClockConfig+0x1c4>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d109      	bne.n	800561a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e073      	b.n	80056f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800560a:	4b3d      	ldr	r3, [pc, #244]	@ (8005700 <HAL_RCC_ClockConfig+0x1c4>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0302 	and.w	r3, r3, #2
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e06b      	b.n	80056f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800561a:	4b39      	ldr	r3, [pc, #228]	@ (8005700 <HAL_RCC_ClockConfig+0x1c4>)
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f023 0203 	bic.w	r2, r3, #3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	4936      	ldr	r1, [pc, #216]	@ (8005700 <HAL_RCC_ClockConfig+0x1c4>)
 8005628:	4313      	orrs	r3, r2
 800562a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800562c:	f7fd fcee 	bl	800300c <HAL_GetTick>
 8005630:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005632:	e00a      	b.n	800564a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005634:	f7fd fcea 	bl	800300c <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005642:	4293      	cmp	r3, r2
 8005644:	d901      	bls.n	800564a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	e053      	b.n	80056f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800564a:	4b2d      	ldr	r3, [pc, #180]	@ (8005700 <HAL_RCC_ClockConfig+0x1c4>)
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	f003 020c 	and.w	r2, r3, #12
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	429a      	cmp	r2, r3
 800565a:	d1eb      	bne.n	8005634 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800565c:	4b27      	ldr	r3, [pc, #156]	@ (80056fc <HAL_RCC_ClockConfig+0x1c0>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0307 	and.w	r3, r3, #7
 8005664:	683a      	ldr	r2, [r7, #0]
 8005666:	429a      	cmp	r2, r3
 8005668:	d210      	bcs.n	800568c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800566a:	4b24      	ldr	r3, [pc, #144]	@ (80056fc <HAL_RCC_ClockConfig+0x1c0>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f023 0207 	bic.w	r2, r3, #7
 8005672:	4922      	ldr	r1, [pc, #136]	@ (80056fc <HAL_RCC_ClockConfig+0x1c0>)
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	4313      	orrs	r3, r2
 8005678:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800567a:	4b20      	ldr	r3, [pc, #128]	@ (80056fc <HAL_RCC_ClockConfig+0x1c0>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 0307 	and.w	r3, r3, #7
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	429a      	cmp	r2, r3
 8005686:	d001      	beq.n	800568c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e032      	b.n	80056f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0304 	and.w	r3, r3, #4
 8005694:	2b00      	cmp	r3, #0
 8005696:	d008      	beq.n	80056aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005698:	4b19      	ldr	r3, [pc, #100]	@ (8005700 <HAL_RCC_ClockConfig+0x1c4>)
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	4916      	ldr	r1, [pc, #88]	@ (8005700 <HAL_RCC_ClockConfig+0x1c4>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0308 	and.w	r3, r3, #8
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d009      	beq.n	80056ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80056b6:	4b12      	ldr	r3, [pc, #72]	@ (8005700 <HAL_RCC_ClockConfig+0x1c4>)
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	00db      	lsls	r3, r3, #3
 80056c4:	490e      	ldr	r1, [pc, #56]	@ (8005700 <HAL_RCC_ClockConfig+0x1c4>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80056ca:	f000 f821 	bl	8005710 <HAL_RCC_GetSysClockFreq>
 80056ce:	4602      	mov	r2, r0
 80056d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005700 <HAL_RCC_ClockConfig+0x1c4>)
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	091b      	lsrs	r3, r3, #4
 80056d6:	f003 030f 	and.w	r3, r3, #15
 80056da:	490a      	ldr	r1, [pc, #40]	@ (8005704 <HAL_RCC_ClockConfig+0x1c8>)
 80056dc:	5ccb      	ldrb	r3, [r1, r3]
 80056de:	fa22 f303 	lsr.w	r3, r2, r3
 80056e2:	4a09      	ldr	r2, [pc, #36]	@ (8005708 <HAL_RCC_ClockConfig+0x1cc>)
 80056e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80056e6:	4b09      	ldr	r3, [pc, #36]	@ (800570c <HAL_RCC_ClockConfig+0x1d0>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7fd fc4c 	bl	8002f88 <HAL_InitTick>

  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3710      	adds	r7, #16
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	40022000 	.word	0x40022000
 8005700:	40021000 	.word	0x40021000
 8005704:	08009840 	.word	0x08009840
 8005708:	20000030 	.word	0x20000030
 800570c:	20000034 	.word	0x20000034

08005710 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005710:	b480      	push	{r7}
 8005712:	b087      	sub	sp, #28
 8005714:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005716:	2300      	movs	r3, #0
 8005718:	60fb      	str	r3, [r7, #12]
 800571a:	2300      	movs	r3, #0
 800571c:	60bb      	str	r3, [r7, #8]
 800571e:	2300      	movs	r3, #0
 8005720:	617b      	str	r3, [r7, #20]
 8005722:	2300      	movs	r3, #0
 8005724:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005726:	2300      	movs	r3, #0
 8005728:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800572a:	4b1e      	ldr	r3, [pc, #120]	@ (80057a4 <HAL_RCC_GetSysClockFreq+0x94>)
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f003 030c 	and.w	r3, r3, #12
 8005736:	2b04      	cmp	r3, #4
 8005738:	d002      	beq.n	8005740 <HAL_RCC_GetSysClockFreq+0x30>
 800573a:	2b08      	cmp	r3, #8
 800573c:	d003      	beq.n	8005746 <HAL_RCC_GetSysClockFreq+0x36>
 800573e:	e027      	b.n	8005790 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005740:	4b19      	ldr	r3, [pc, #100]	@ (80057a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005742:	613b      	str	r3, [r7, #16]
      break;
 8005744:	e027      	b.n	8005796 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	0c9b      	lsrs	r3, r3, #18
 800574a:	f003 030f 	and.w	r3, r3, #15
 800574e:	4a17      	ldr	r2, [pc, #92]	@ (80057ac <HAL_RCC_GetSysClockFreq+0x9c>)
 8005750:	5cd3      	ldrb	r3, [r2, r3]
 8005752:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d010      	beq.n	8005780 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800575e:	4b11      	ldr	r3, [pc, #68]	@ (80057a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	0c5b      	lsrs	r3, r3, #17
 8005764:	f003 0301 	and.w	r3, r3, #1
 8005768:	4a11      	ldr	r2, [pc, #68]	@ (80057b0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800576a:	5cd3      	ldrb	r3, [r2, r3]
 800576c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a0d      	ldr	r2, [pc, #52]	@ (80057a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005772:	fb03 f202 	mul.w	r2, r3, r2
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	fbb2 f3f3 	udiv	r3, r2, r3
 800577c:	617b      	str	r3, [r7, #20]
 800577e:	e004      	b.n	800578a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a0c      	ldr	r2, [pc, #48]	@ (80057b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005784:	fb02 f303 	mul.w	r3, r2, r3
 8005788:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	613b      	str	r3, [r7, #16]
      break;
 800578e:	e002      	b.n	8005796 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005790:	4b05      	ldr	r3, [pc, #20]	@ (80057a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005792:	613b      	str	r3, [r7, #16]
      break;
 8005794:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005796:	693b      	ldr	r3, [r7, #16]
}
 8005798:	4618      	mov	r0, r3
 800579a:	371c      	adds	r7, #28
 800579c:	46bd      	mov	sp, r7
 800579e:	bc80      	pop	{r7}
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	40021000 	.word	0x40021000
 80057a8:	007a1200 	.word	0x007a1200
 80057ac:	08009858 	.word	0x08009858
 80057b0:	08009868 	.word	0x08009868
 80057b4:	003d0900 	.word	0x003d0900

080057b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057b8:	b480      	push	{r7}
 80057ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057bc:	4b02      	ldr	r3, [pc, #8]	@ (80057c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80057be:	681b      	ldr	r3, [r3, #0]
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bc80      	pop	{r7}
 80057c6:	4770      	bx	lr
 80057c8:	20000030 	.word	0x20000030

080057cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80057d0:	f7ff fff2 	bl	80057b8 <HAL_RCC_GetHCLKFreq>
 80057d4:	4602      	mov	r2, r0
 80057d6:	4b05      	ldr	r3, [pc, #20]	@ (80057ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	0a1b      	lsrs	r3, r3, #8
 80057dc:	f003 0307 	and.w	r3, r3, #7
 80057e0:	4903      	ldr	r1, [pc, #12]	@ (80057f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057e2:	5ccb      	ldrb	r3, [r1, r3]
 80057e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	40021000 	.word	0x40021000
 80057f0:	08009850 	.word	0x08009850

080057f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80057f8:	f7ff ffde 	bl	80057b8 <HAL_RCC_GetHCLKFreq>
 80057fc:	4602      	mov	r2, r0
 80057fe:	4b05      	ldr	r3, [pc, #20]	@ (8005814 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	0adb      	lsrs	r3, r3, #11
 8005804:	f003 0307 	and.w	r3, r3, #7
 8005808:	4903      	ldr	r1, [pc, #12]	@ (8005818 <HAL_RCC_GetPCLK2Freq+0x24>)
 800580a:	5ccb      	ldrb	r3, [r1, r3]
 800580c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005810:	4618      	mov	r0, r3
 8005812:	bd80      	pop	{r7, pc}
 8005814:	40021000 	.word	0x40021000
 8005818:	08009850 	.word	0x08009850

0800581c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005824:	4b0a      	ldr	r3, [pc, #40]	@ (8005850 <RCC_Delay+0x34>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a0a      	ldr	r2, [pc, #40]	@ (8005854 <RCC_Delay+0x38>)
 800582a:	fba2 2303 	umull	r2, r3, r2, r3
 800582e:	0a5b      	lsrs	r3, r3, #9
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	fb02 f303 	mul.w	r3, r2, r3
 8005836:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005838:	bf00      	nop
  }
  while (Delay --);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	1e5a      	subs	r2, r3, #1
 800583e:	60fa      	str	r2, [r7, #12]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d1f9      	bne.n	8005838 <RCC_Delay+0x1c>
}
 8005844:	bf00      	nop
 8005846:	bf00      	nop
 8005848:	3714      	adds	r7, #20
 800584a:	46bd      	mov	sp, r7
 800584c:	bc80      	pop	{r7}
 800584e:	4770      	bx	lr
 8005850:	20000030 	.word	0x20000030
 8005854:	10624dd3 	.word	0x10624dd3

08005858 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b086      	sub	sp, #24
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005860:	2300      	movs	r3, #0
 8005862:	613b      	str	r3, [r7, #16]
 8005864:	2300      	movs	r3, #0
 8005866:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0301 	and.w	r3, r3, #1
 8005870:	2b00      	cmp	r3, #0
 8005872:	d07d      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005874:	2300      	movs	r3, #0
 8005876:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005878:	4b4f      	ldr	r3, [pc, #316]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800587a:	69db      	ldr	r3, [r3, #28]
 800587c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d10d      	bne.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005884:	4b4c      	ldr	r3, [pc, #304]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005886:	69db      	ldr	r3, [r3, #28]
 8005888:	4a4b      	ldr	r2, [pc, #300]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800588a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800588e:	61d3      	str	r3, [r2, #28]
 8005890:	4b49      	ldr	r3, [pc, #292]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005892:	69db      	ldr	r3, [r3, #28]
 8005894:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005898:	60bb      	str	r3, [r7, #8]
 800589a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800589c:	2301      	movs	r3, #1
 800589e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058a0:	4b46      	ldr	r3, [pc, #280]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d118      	bne.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058ac:	4b43      	ldr	r3, [pc, #268]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a42      	ldr	r2, [pc, #264]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058b8:	f7fd fba8 	bl	800300c <HAL_GetTick>
 80058bc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058be:	e008      	b.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058c0:	f7fd fba4 	bl	800300c <HAL_GetTick>
 80058c4:	4602      	mov	r2, r0
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	2b64      	cmp	r3, #100	@ 0x64
 80058cc:	d901      	bls.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e06d      	b.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058d2:	4b3a      	ldr	r3, [pc, #232]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d0f0      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80058de:	4b36      	ldr	r3, [pc, #216]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058e0:	6a1b      	ldr	r3, [r3, #32]
 80058e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058e6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d02e      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d027      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058fc:	4b2e      	ldr	r3, [pc, #184]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058fe:	6a1b      	ldr	r3, [r3, #32]
 8005900:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005904:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005906:	4b2e      	ldr	r3, [pc, #184]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005908:	2201      	movs	r2, #1
 800590a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800590c:	4b2c      	ldr	r3, [pc, #176]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800590e:	2200      	movs	r2, #0
 8005910:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005912:	4a29      	ldr	r2, [pc, #164]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	2b00      	cmp	r3, #0
 8005920:	d014      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005922:	f7fd fb73 	bl	800300c <HAL_GetTick>
 8005926:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005928:	e00a      	b.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800592a:	f7fd fb6f 	bl	800300c <HAL_GetTick>
 800592e:	4602      	mov	r2, r0
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005938:	4293      	cmp	r3, r2
 800593a:	d901      	bls.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e036      	b.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005940:	4b1d      	ldr	r3, [pc, #116]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005942:	6a1b      	ldr	r3, [r3, #32]
 8005944:	f003 0302 	and.w	r3, r3, #2
 8005948:	2b00      	cmp	r3, #0
 800594a:	d0ee      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800594c:	4b1a      	ldr	r3, [pc, #104]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800594e:	6a1b      	ldr	r3, [r3, #32]
 8005950:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	4917      	ldr	r1, [pc, #92]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800595a:	4313      	orrs	r3, r2
 800595c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800595e:	7dfb      	ldrb	r3, [r7, #23]
 8005960:	2b01      	cmp	r3, #1
 8005962:	d105      	bne.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005964:	4b14      	ldr	r3, [pc, #80]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005966:	69db      	ldr	r3, [r3, #28]
 8005968:	4a13      	ldr	r2, [pc, #76]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800596a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800596e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0302 	and.w	r3, r3, #2
 8005978:	2b00      	cmp	r3, #0
 800597a:	d008      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800597c:	4b0e      	ldr	r3, [pc, #56]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	490b      	ldr	r1, [pc, #44]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800598a:	4313      	orrs	r3, r2
 800598c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0310 	and.w	r3, r3, #16
 8005996:	2b00      	cmp	r3, #0
 8005998:	d008      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800599a:	4b07      	ldr	r3, [pc, #28]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	4904      	ldr	r1, [pc, #16]	@ (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3718      	adds	r7, #24
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	40021000 	.word	0x40021000
 80059bc:	40007000 	.word	0x40007000
 80059c0:	42420440 	.word	0x42420440

080059c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b088      	sub	sp, #32
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80059cc:	2300      	movs	r3, #0
 80059ce:	617b      	str	r3, [r7, #20]
 80059d0:	2300      	movs	r3, #0
 80059d2:	61fb      	str	r3, [r7, #28]
 80059d4:	2300      	movs	r3, #0
 80059d6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80059d8:	2300      	movs	r3, #0
 80059da:	60fb      	str	r3, [r7, #12]
 80059dc:	2300      	movs	r3, #0
 80059de:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b10      	cmp	r3, #16
 80059e4:	d00a      	beq.n	80059fc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2b10      	cmp	r3, #16
 80059ea:	f200 808a 	bhi.w	8005b02 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d045      	beq.n	8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d075      	beq.n	8005ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80059fa:	e082      	b.n	8005b02 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80059fc:	4b46      	ldr	r3, [pc, #280]	@ (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005a02:	4b45      	ldr	r3, [pc, #276]	@ (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d07b      	beq.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	0c9b      	lsrs	r3, r3, #18
 8005a12:	f003 030f 	and.w	r3, r3, #15
 8005a16:	4a41      	ldr	r2, [pc, #260]	@ (8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8005a18:	5cd3      	ldrb	r3, [r2, r3]
 8005a1a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d015      	beq.n	8005a52 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005a26:	4b3c      	ldr	r3, [pc, #240]	@ (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	0c5b      	lsrs	r3, r3, #17
 8005a2c:	f003 0301 	and.w	r3, r3, #1
 8005a30:	4a3b      	ldr	r2, [pc, #236]	@ (8005b20 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8005a32:	5cd3      	ldrb	r3, [r2, r3]
 8005a34:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00d      	beq.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005a40:	4a38      	ldr	r2, [pc, #224]	@ (8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	fb02 f303 	mul.w	r3, r2, r3
 8005a4e:	61fb      	str	r3, [r7, #28]
 8005a50:	e004      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	4a34      	ldr	r2, [pc, #208]	@ (8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005a56:	fb02 f303 	mul.w	r3, r2, r3
 8005a5a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005a5c:	4b2e      	ldr	r3, [pc, #184]	@ (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a68:	d102      	bne.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	61bb      	str	r3, [r7, #24]
      break;
 8005a6e:	e04a      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	005b      	lsls	r3, r3, #1
 8005a74:	4a2d      	ldr	r2, [pc, #180]	@ (8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005a76:	fba2 2303 	umull	r2, r3, r2, r3
 8005a7a:	085b      	lsrs	r3, r3, #1
 8005a7c:	61bb      	str	r3, [r7, #24]
      break;
 8005a7e:	e042      	b.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8005a80:	4b25      	ldr	r3, [pc, #148]	@ (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005a82:	6a1b      	ldr	r3, [r3, #32]
 8005a84:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a90:	d108      	bne.n	8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f003 0302 	and.w	r3, r3, #2
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d003      	beq.n	8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8005a9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005aa0:	61bb      	str	r3, [r7, #24]
 8005aa2:	e01f      	b.n	8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005aaa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005aae:	d109      	bne.n	8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005ab0:	4b19      	ldr	r3, [pc, #100]	@ (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab4:	f003 0302 	and.w	r3, r3, #2
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d003      	beq.n	8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8005abc:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8005ac0:	61bb      	str	r3, [r7, #24]
 8005ac2:	e00f      	b.n	8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005aca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ace:	d11c      	bne.n	8005b0a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005ad0:	4b11      	ldr	r3, [pc, #68]	@ (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d016      	beq.n	8005b0a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8005adc:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8005ae0:	61bb      	str	r3, [r7, #24]
      break;
 8005ae2:	e012      	b.n	8005b0a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005ae4:	e011      	b.n	8005b0a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005ae6:	f7ff fe85 	bl	80057f4 <HAL_RCC_GetPCLK2Freq>
 8005aea:	4602      	mov	r2, r0
 8005aec:	4b0a      	ldr	r3, [pc, #40]	@ (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	0b9b      	lsrs	r3, r3, #14
 8005af2:	f003 0303 	and.w	r3, r3, #3
 8005af6:	3301      	adds	r3, #1
 8005af8:	005b      	lsls	r3, r3, #1
 8005afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005afe:	61bb      	str	r3, [r7, #24]
      break;
 8005b00:	e004      	b.n	8005b0c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005b02:	bf00      	nop
 8005b04:	e002      	b.n	8005b0c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005b06:	bf00      	nop
 8005b08:	e000      	b.n	8005b0c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005b0a:	bf00      	nop
    }
  }
  return (frequency);
 8005b0c:	69bb      	ldr	r3, [r7, #24]
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3720      	adds	r7, #32
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	40021000 	.word	0x40021000
 8005b1c:	0800986c 	.word	0x0800986c
 8005b20:	0800987c 	.word	0x0800987c
 8005b24:	007a1200 	.word	0x007a1200
 8005b28:	003d0900 	.word	0x003d0900
 8005b2c:	aaaaaaab 	.word	0xaaaaaaab

08005b30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d101      	bne.n	8005b42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e041      	b.n	8005bc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d106      	bne.n	8005b5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f7fd f826 	bl	8002ba8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2202      	movs	r2, #2
 8005b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	3304      	adds	r3, #4
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	4610      	mov	r0, r2
 8005b70:	f000 fab0 	bl	80060d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3708      	adds	r7, #8
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b082      	sub	sp, #8
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d101      	bne.n	8005be0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e041      	b.n	8005c64 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d106      	bne.n	8005bfa <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 f839 	bl	8005c6c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2202      	movs	r2, #2
 8005bfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	3304      	adds	r3, #4
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	4610      	mov	r0, r2
 8005c0e:	f000 fa61 	bl	80060d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2201      	movs	r2, #1
 8005c26:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2201      	movs	r2, #1
 8005c36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3708      	adds	r7, #8
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bc80      	pop	{r7}
 8005c7c:	4770      	bx	lr
	...

08005c80 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d109      	bne.n	8005ca4 <HAL_TIM_OC_Start+0x24>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	bf14      	ite	ne
 8005c9c:	2301      	movne	r3, #1
 8005c9e:	2300      	moveq	r3, #0
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	e022      	b.n	8005cea <HAL_TIM_OC_Start+0x6a>
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	2b04      	cmp	r3, #4
 8005ca8:	d109      	bne.n	8005cbe <HAL_TIM_OC_Start+0x3e>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	bf14      	ite	ne
 8005cb6:	2301      	movne	r3, #1
 8005cb8:	2300      	moveq	r3, #0
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	e015      	b.n	8005cea <HAL_TIM_OC_Start+0x6a>
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	2b08      	cmp	r3, #8
 8005cc2:	d109      	bne.n	8005cd8 <HAL_TIM_OC_Start+0x58>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	bf14      	ite	ne
 8005cd0:	2301      	movne	r3, #1
 8005cd2:	2300      	moveq	r3, #0
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	e008      	b.n	8005cea <HAL_TIM_OC_Start+0x6a>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	bf14      	ite	ne
 8005ce4:	2301      	movne	r3, #1
 8005ce6:	2300      	moveq	r3, #0
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d001      	beq.n	8005cf2 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e05e      	b.n	8005db0 <HAL_TIM_OC_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d104      	bne.n	8005d02 <HAL_TIM_OC_Start+0x82>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2202      	movs	r2, #2
 8005cfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d00:	e013      	b.n	8005d2a <HAL_TIM_OC_Start+0xaa>
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	2b04      	cmp	r3, #4
 8005d06:	d104      	bne.n	8005d12 <HAL_TIM_OC_Start+0x92>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d10:	e00b      	b.n	8005d2a <HAL_TIM_OC_Start+0xaa>
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	2b08      	cmp	r3, #8
 8005d16:	d104      	bne.n	8005d22 <HAL_TIM_OC_Start+0xa2>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2202      	movs	r2, #2
 8005d1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d20:	e003      	b.n	8005d2a <HAL_TIM_OC_Start+0xaa>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2202      	movs	r2, #2
 8005d26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	6839      	ldr	r1, [r7, #0]
 8005d32:	4618      	mov	r0, r3
 8005d34:	f000 fc5a 	bl	80065ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a1e      	ldr	r2, [pc, #120]	@ (8005db8 <HAL_TIM_OC_Start+0x138>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d107      	bne.n	8005d52 <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d50:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a18      	ldr	r2, [pc, #96]	@ (8005db8 <HAL_TIM_OC_Start+0x138>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d00e      	beq.n	8005d7a <HAL_TIM_OC_Start+0xfa>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d64:	d009      	beq.n	8005d7a <HAL_TIM_OC_Start+0xfa>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a14      	ldr	r2, [pc, #80]	@ (8005dbc <HAL_TIM_OC_Start+0x13c>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d004      	beq.n	8005d7a <HAL_TIM_OC_Start+0xfa>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a12      	ldr	r2, [pc, #72]	@ (8005dc0 <HAL_TIM_OC_Start+0x140>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d111      	bne.n	8005d9e <HAL_TIM_OC_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f003 0307 	and.w	r3, r3, #7
 8005d84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2b06      	cmp	r3, #6
 8005d8a:	d010      	beq.n	8005dae <HAL_TIM_OC_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f042 0201 	orr.w	r2, r2, #1
 8005d9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d9c:	e007      	b.n	8005dae <HAL_TIM_OC_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f042 0201 	orr.w	r2, r2, #1
 8005dac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3710      	adds	r7, #16
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	40012c00 	.word	0x40012c00
 8005dbc:	40000400 	.word	0x40000400
 8005dc0:	40000800 	.word	0x40000800

08005dc4 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	6839      	ldr	r1, [r7, #0]
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f000 fc08 	bl	80065ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a29      	ldr	r2, [pc, #164]	@ (8005e88 <HAL_TIM_OC_Stop+0xc4>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d117      	bne.n	8005e16 <HAL_TIM_OC_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	6a1a      	ldr	r2, [r3, #32]
 8005dec:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005df0:	4013      	ands	r3, r2
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d10f      	bne.n	8005e16 <HAL_TIM_OC_Stop+0x52>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	6a1a      	ldr	r2, [r3, #32]
 8005dfc:	f240 4344 	movw	r3, #1092	@ 0x444
 8005e00:	4013      	ands	r3, r2
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d107      	bne.n	8005e16 <HAL_TIM_OC_Stop+0x52>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005e14:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	6a1a      	ldr	r2, [r3, #32]
 8005e1c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005e20:	4013      	ands	r3, r2
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d10f      	bne.n	8005e46 <HAL_TIM_OC_Stop+0x82>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	6a1a      	ldr	r2, [r3, #32]
 8005e2c:	f240 4344 	movw	r3, #1092	@ 0x444
 8005e30:	4013      	ands	r3, r2
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d107      	bne.n	8005e46 <HAL_TIM_OC_Stop+0x82>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f022 0201 	bic.w	r2, r2, #1
 8005e44:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d104      	bne.n	8005e56 <HAL_TIM_OC_Stop+0x92>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e54:	e013      	b.n	8005e7e <HAL_TIM_OC_Stop+0xba>
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	2b04      	cmp	r3, #4
 8005e5a:	d104      	bne.n	8005e66 <HAL_TIM_OC_Stop+0xa2>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e64:	e00b      	b.n	8005e7e <HAL_TIM_OC_Stop+0xba>
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	2b08      	cmp	r3, #8
 8005e6a:	d104      	bne.n	8005e76 <HAL_TIM_OC_Stop+0xb2>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e74:	e003      	b.n	8005e7e <HAL_TIM_OC_Stop+0xba>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3708      	adds	r7, #8
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	40012c00 	.word	0x40012c00

08005e8c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b086      	sub	sp, #24
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d101      	bne.n	8005eaa <HAL_TIM_OC_ConfigChannel+0x1e>
 8005ea6:	2302      	movs	r3, #2
 8005ea8:	e048      	b.n	8005f3c <HAL_TIM_OC_ConfigChannel+0xb0>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2b0c      	cmp	r3, #12
 8005eb6:	d839      	bhi.n	8005f2c <HAL_TIM_OC_ConfigChannel+0xa0>
 8005eb8:	a201      	add	r2, pc, #4	@ (adr r2, 8005ec0 <HAL_TIM_OC_ConfigChannel+0x34>)
 8005eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ebe:	bf00      	nop
 8005ec0:	08005ef5 	.word	0x08005ef5
 8005ec4:	08005f2d 	.word	0x08005f2d
 8005ec8:	08005f2d 	.word	0x08005f2d
 8005ecc:	08005f2d 	.word	0x08005f2d
 8005ed0:	08005f03 	.word	0x08005f03
 8005ed4:	08005f2d 	.word	0x08005f2d
 8005ed8:	08005f2d 	.word	0x08005f2d
 8005edc:	08005f2d 	.word	0x08005f2d
 8005ee0:	08005f11 	.word	0x08005f11
 8005ee4:	08005f2d 	.word	0x08005f2d
 8005ee8:	08005f2d 	.word	0x08005f2d
 8005eec:	08005f2d 	.word	0x08005f2d
 8005ef0:	08005f1f 	.word	0x08005f1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68b9      	ldr	r1, [r7, #8]
 8005efa:	4618      	mov	r0, r3
 8005efc:	f000 f958 	bl	80061b0 <TIM_OC1_SetConfig>
      break;
 8005f00:	e017      	b.n	8005f32 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68b9      	ldr	r1, [r7, #8]
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f000 f9b7 	bl	800627c <TIM_OC2_SetConfig>
      break;
 8005f0e:	e010      	b.n	8005f32 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68b9      	ldr	r1, [r7, #8]
 8005f16:	4618      	mov	r0, r3
 8005f18:	f000 fa1a 	bl	8006350 <TIM_OC3_SetConfig>
      break;
 8005f1c:	e009      	b.n	8005f32 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68b9      	ldr	r1, [r7, #8]
 8005f24:	4618      	mov	r0, r3
 8005f26:	f000 fa7d 	bl	8006424 <TIM_OC4_SetConfig>
      break;
 8005f2a:	e002      	b.n	8005f32 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	75fb      	strb	r3, [r7, #23]
      break;
 8005f30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3718      	adds	r7, #24
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d101      	bne.n	8005f60 <HAL_TIM_ConfigClockSource+0x1c>
 8005f5c:	2302      	movs	r3, #2
 8005f5e:	e0b4      	b.n	80060ca <HAL_TIM_ConfigClockSource+0x186>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2202      	movs	r2, #2
 8005f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005f7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68ba      	ldr	r2, [r7, #8]
 8005f8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f98:	d03e      	beq.n	8006018 <HAL_TIM_ConfigClockSource+0xd4>
 8005f9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f9e:	f200 8087 	bhi.w	80060b0 <HAL_TIM_ConfigClockSource+0x16c>
 8005fa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fa6:	f000 8086 	beq.w	80060b6 <HAL_TIM_ConfigClockSource+0x172>
 8005faa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fae:	d87f      	bhi.n	80060b0 <HAL_TIM_ConfigClockSource+0x16c>
 8005fb0:	2b70      	cmp	r3, #112	@ 0x70
 8005fb2:	d01a      	beq.n	8005fea <HAL_TIM_ConfigClockSource+0xa6>
 8005fb4:	2b70      	cmp	r3, #112	@ 0x70
 8005fb6:	d87b      	bhi.n	80060b0 <HAL_TIM_ConfigClockSource+0x16c>
 8005fb8:	2b60      	cmp	r3, #96	@ 0x60
 8005fba:	d050      	beq.n	800605e <HAL_TIM_ConfigClockSource+0x11a>
 8005fbc:	2b60      	cmp	r3, #96	@ 0x60
 8005fbe:	d877      	bhi.n	80060b0 <HAL_TIM_ConfigClockSource+0x16c>
 8005fc0:	2b50      	cmp	r3, #80	@ 0x50
 8005fc2:	d03c      	beq.n	800603e <HAL_TIM_ConfigClockSource+0xfa>
 8005fc4:	2b50      	cmp	r3, #80	@ 0x50
 8005fc6:	d873      	bhi.n	80060b0 <HAL_TIM_ConfigClockSource+0x16c>
 8005fc8:	2b40      	cmp	r3, #64	@ 0x40
 8005fca:	d058      	beq.n	800607e <HAL_TIM_ConfigClockSource+0x13a>
 8005fcc:	2b40      	cmp	r3, #64	@ 0x40
 8005fce:	d86f      	bhi.n	80060b0 <HAL_TIM_ConfigClockSource+0x16c>
 8005fd0:	2b30      	cmp	r3, #48	@ 0x30
 8005fd2:	d064      	beq.n	800609e <HAL_TIM_ConfigClockSource+0x15a>
 8005fd4:	2b30      	cmp	r3, #48	@ 0x30
 8005fd6:	d86b      	bhi.n	80060b0 <HAL_TIM_ConfigClockSource+0x16c>
 8005fd8:	2b20      	cmp	r3, #32
 8005fda:	d060      	beq.n	800609e <HAL_TIM_ConfigClockSource+0x15a>
 8005fdc:	2b20      	cmp	r3, #32
 8005fde:	d867      	bhi.n	80060b0 <HAL_TIM_ConfigClockSource+0x16c>
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d05c      	beq.n	800609e <HAL_TIM_ConfigClockSource+0x15a>
 8005fe4:	2b10      	cmp	r3, #16
 8005fe6:	d05a      	beq.n	800609e <HAL_TIM_ConfigClockSource+0x15a>
 8005fe8:	e062      	b.n	80060b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ffa:	f000 fad8 	bl	80065ae <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800600c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68ba      	ldr	r2, [r7, #8]
 8006014:	609a      	str	r2, [r3, #8]
      break;
 8006016:	e04f      	b.n	80060b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006028:	f000 fac1 	bl	80065ae <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	689a      	ldr	r2, [r3, #8]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800603a:	609a      	str	r2, [r3, #8]
      break;
 800603c:	e03c      	b.n	80060b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800604a:	461a      	mov	r2, r3
 800604c:	f000 fa38 	bl	80064c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2150      	movs	r1, #80	@ 0x50
 8006056:	4618      	mov	r0, r3
 8006058:	f000 fa8f 	bl	800657a <TIM_ITRx_SetConfig>
      break;
 800605c:	e02c      	b.n	80060b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800606a:	461a      	mov	r2, r3
 800606c:	f000 fa56 	bl	800651c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2160      	movs	r1, #96	@ 0x60
 8006076:	4618      	mov	r0, r3
 8006078:	f000 fa7f 	bl	800657a <TIM_ITRx_SetConfig>
      break;
 800607c:	e01c      	b.n	80060b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800608a:	461a      	mov	r2, r3
 800608c:	f000 fa18 	bl	80064c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2140      	movs	r1, #64	@ 0x40
 8006096:	4618      	mov	r0, r3
 8006098:	f000 fa6f 	bl	800657a <TIM_ITRx_SetConfig>
      break;
 800609c:	e00c      	b.n	80060b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4619      	mov	r1, r3
 80060a8:	4610      	mov	r0, r2
 80060aa:	f000 fa66 	bl	800657a <TIM_ITRx_SetConfig>
      break;
 80060ae:	e003      	b.n	80060b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	73fb      	strb	r3, [r7, #15]
      break;
 80060b4:	e000      	b.n	80060b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80060b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80060c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3710      	adds	r7, #16
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
	...

080060d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a2f      	ldr	r2, [pc, #188]	@ (80061a4 <TIM_Base_SetConfig+0xd0>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d00b      	beq.n	8006104 <TIM_Base_SetConfig+0x30>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060f2:	d007      	beq.n	8006104 <TIM_Base_SetConfig+0x30>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a2c      	ldr	r2, [pc, #176]	@ (80061a8 <TIM_Base_SetConfig+0xd4>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d003      	beq.n	8006104 <TIM_Base_SetConfig+0x30>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a2b      	ldr	r2, [pc, #172]	@ (80061ac <TIM_Base_SetConfig+0xd8>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d108      	bne.n	8006116 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800610a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	4313      	orrs	r3, r2
 8006114:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a22      	ldr	r2, [pc, #136]	@ (80061a4 <TIM_Base_SetConfig+0xd0>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d00b      	beq.n	8006136 <TIM_Base_SetConfig+0x62>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006124:	d007      	beq.n	8006136 <TIM_Base_SetConfig+0x62>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a1f      	ldr	r2, [pc, #124]	@ (80061a8 <TIM_Base_SetConfig+0xd4>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d003      	beq.n	8006136 <TIM_Base_SetConfig+0x62>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a1e      	ldr	r2, [pc, #120]	@ (80061ac <TIM_Base_SetConfig+0xd8>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d108      	bne.n	8006148 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800613c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	4313      	orrs	r3, r2
 8006146:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	695b      	ldr	r3, [r3, #20]
 8006152:	4313      	orrs	r3, r2
 8006154:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	689a      	ldr	r2, [r3, #8]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a0d      	ldr	r2, [pc, #52]	@ (80061a4 <TIM_Base_SetConfig+0xd0>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d103      	bne.n	800617c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	691a      	ldr	r2, [r3, #16]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	f003 0301 	and.w	r3, r3, #1
 800618a:	2b00      	cmp	r3, #0
 800618c:	d005      	beq.n	800619a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	f023 0201 	bic.w	r2, r3, #1
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	611a      	str	r2, [r3, #16]
  }
}
 800619a:	bf00      	nop
 800619c:	3714      	adds	r7, #20
 800619e:	46bd      	mov	sp, r7
 80061a0:	bc80      	pop	{r7}
 80061a2:	4770      	bx	lr
 80061a4:	40012c00 	.word	0x40012c00
 80061a8:	40000400 	.word	0x40000400
 80061ac:	40000800 	.word	0x40000800

080061b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b087      	sub	sp, #28
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6a1b      	ldr	r3, [r3, #32]
 80061c4:	f023 0201 	bic.w	r2, r3, #1
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	699b      	ldr	r3, [r3, #24]
 80061d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f023 0303 	bic.w	r3, r3, #3
 80061e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	f023 0302 	bic.w	r3, r3, #2
 80061f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	697a      	ldr	r2, [r7, #20]
 8006200:	4313      	orrs	r3, r2
 8006202:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a1c      	ldr	r2, [pc, #112]	@ (8006278 <TIM_OC1_SetConfig+0xc8>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d10c      	bne.n	8006226 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	f023 0308 	bic.w	r3, r3, #8
 8006212:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	4313      	orrs	r3, r2
 800621c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	f023 0304 	bic.w	r3, r3, #4
 8006224:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a13      	ldr	r2, [pc, #76]	@ (8006278 <TIM_OC1_SetConfig+0xc8>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d111      	bne.n	8006252 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006234:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800623c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	695b      	ldr	r3, [r3, #20]
 8006242:	693a      	ldr	r2, [r7, #16]
 8006244:	4313      	orrs	r3, r2
 8006246:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	699b      	ldr	r3, [r3, #24]
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	4313      	orrs	r3, r2
 8006250:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	693a      	ldr	r2, [r7, #16]
 8006256:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	685a      	ldr	r2, [r3, #4]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	697a      	ldr	r2, [r7, #20]
 800626a:	621a      	str	r2, [r3, #32]
}
 800626c:	bf00      	nop
 800626e:	371c      	adds	r7, #28
 8006270:	46bd      	mov	sp, r7
 8006272:	bc80      	pop	{r7}
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	40012c00 	.word	0x40012c00

0800627c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800627c:	b480      	push	{r7}
 800627e:	b087      	sub	sp, #28
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a1b      	ldr	r3, [r3, #32]
 800628a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a1b      	ldr	r3, [r3, #32]
 8006290:	f023 0210 	bic.w	r2, r3, #16
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	699b      	ldr	r3, [r3, #24]
 80062a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	021b      	lsls	r3, r3, #8
 80062ba:	68fa      	ldr	r2, [r7, #12]
 80062bc:	4313      	orrs	r3, r2
 80062be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	f023 0320 	bic.w	r3, r3, #32
 80062c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	011b      	lsls	r3, r3, #4
 80062ce:	697a      	ldr	r2, [r7, #20]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a1d      	ldr	r2, [pc, #116]	@ (800634c <TIM_OC2_SetConfig+0xd0>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d10d      	bne.n	80062f8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	011b      	lsls	r3, r3, #4
 80062ea:	697a      	ldr	r2, [r7, #20]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a14      	ldr	r2, [pc, #80]	@ (800634c <TIM_OC2_SetConfig+0xd0>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d113      	bne.n	8006328 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006306:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800630e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	695b      	ldr	r3, [r3, #20]
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	693a      	ldr	r2, [r7, #16]
 8006318:	4313      	orrs	r3, r2
 800631a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	699b      	ldr	r3, [r3, #24]
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	693a      	ldr	r2, [r7, #16]
 8006324:	4313      	orrs	r3, r2
 8006326:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	693a      	ldr	r2, [r7, #16]
 800632c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	685a      	ldr	r2, [r3, #4]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	697a      	ldr	r2, [r7, #20]
 8006340:	621a      	str	r2, [r3, #32]
}
 8006342:	bf00      	nop
 8006344:	371c      	adds	r7, #28
 8006346:	46bd      	mov	sp, r7
 8006348:	bc80      	pop	{r7}
 800634a:	4770      	bx	lr
 800634c:	40012c00 	.word	0x40012c00

08006350 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006350:	b480      	push	{r7}
 8006352:	b087      	sub	sp, #28
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a1b      	ldr	r3, [r3, #32]
 800635e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a1b      	ldr	r3, [r3, #32]
 8006364:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	69db      	ldr	r3, [r3, #28]
 8006376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800637e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f023 0303 	bic.w	r3, r3, #3
 8006386:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	4313      	orrs	r3, r2
 8006390:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006398:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	021b      	lsls	r3, r3, #8
 80063a0:	697a      	ldr	r2, [r7, #20]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a1d      	ldr	r2, [pc, #116]	@ (8006420 <TIM_OC3_SetConfig+0xd0>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d10d      	bne.n	80063ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80063b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	021b      	lsls	r3, r3, #8
 80063bc:	697a      	ldr	r2, [r7, #20]
 80063be:	4313      	orrs	r3, r2
 80063c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80063c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a14      	ldr	r2, [pc, #80]	@ (8006420 <TIM_OC3_SetConfig+0xd0>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d113      	bne.n	80063fa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80063d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80063e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	011b      	lsls	r3, r3, #4
 80063e8:	693a      	ldr	r2, [r7, #16]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	011b      	lsls	r3, r3, #4
 80063f4:	693a      	ldr	r2, [r7, #16]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	693a      	ldr	r2, [r7, #16]
 80063fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	685a      	ldr	r2, [r3, #4]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	697a      	ldr	r2, [r7, #20]
 8006412:	621a      	str	r2, [r3, #32]
}
 8006414:	bf00      	nop
 8006416:	371c      	adds	r7, #28
 8006418:	46bd      	mov	sp, r7
 800641a:	bc80      	pop	{r7}
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	40012c00 	.word	0x40012c00

08006424 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006424:	b480      	push	{r7}
 8006426:	b087      	sub	sp, #28
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a1b      	ldr	r3, [r3, #32]
 8006432:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6a1b      	ldr	r3, [r3, #32]
 8006438:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	69db      	ldr	r3, [r3, #28]
 800644a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800645a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	021b      	lsls	r3, r3, #8
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	4313      	orrs	r3, r2
 8006466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800646e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	031b      	lsls	r3, r3, #12
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	4313      	orrs	r3, r2
 800647a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a0f      	ldr	r2, [pc, #60]	@ (80064bc <TIM_OC4_SetConfig+0x98>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d109      	bne.n	8006498 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800648a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	695b      	ldr	r3, [r3, #20]
 8006490:	019b      	lsls	r3, r3, #6
 8006492:	697a      	ldr	r2, [r7, #20]
 8006494:	4313      	orrs	r3, r2
 8006496:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	697a      	ldr	r2, [r7, #20]
 800649c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	685a      	ldr	r2, [r3, #4]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	621a      	str	r2, [r3, #32]
}
 80064b2:	bf00      	nop
 80064b4:	371c      	adds	r7, #28
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bc80      	pop	{r7}
 80064ba:	4770      	bx	lr
 80064bc:	40012c00 	.word	0x40012c00

080064c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b087      	sub	sp, #28
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6a1b      	ldr	r3, [r3, #32]
 80064d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6a1b      	ldr	r3, [r3, #32]
 80064d6:	f023 0201 	bic.w	r2, r3, #1
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	699b      	ldr	r3, [r3, #24]
 80064e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80064ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	011b      	lsls	r3, r3, #4
 80064f0:	693a      	ldr	r2, [r7, #16]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	f023 030a 	bic.w	r3, r3, #10
 80064fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064fe:	697a      	ldr	r2, [r7, #20]
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	4313      	orrs	r3, r2
 8006504:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	693a      	ldr	r2, [r7, #16]
 800650a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	697a      	ldr	r2, [r7, #20]
 8006510:	621a      	str	r2, [r3, #32]
}
 8006512:	bf00      	nop
 8006514:	371c      	adds	r7, #28
 8006516:	46bd      	mov	sp, r7
 8006518:	bc80      	pop	{r7}
 800651a:	4770      	bx	lr

0800651c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800651c:	b480      	push	{r7}
 800651e:	b087      	sub	sp, #28
 8006520:	af00      	add	r7, sp, #0
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6a1b      	ldr	r3, [r3, #32]
 800652c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6a1b      	ldr	r3, [r3, #32]
 8006532:	f023 0210 	bic.w	r2, r3, #16
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	699b      	ldr	r3, [r3, #24]
 800653e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006546:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	031b      	lsls	r3, r3, #12
 800654c:	693a      	ldr	r2, [r7, #16]
 800654e:	4313      	orrs	r3, r2
 8006550:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006558:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	011b      	lsls	r3, r3, #4
 800655e:	697a      	ldr	r2, [r7, #20]
 8006560:	4313      	orrs	r3, r2
 8006562:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	693a      	ldr	r2, [r7, #16]
 8006568:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	697a      	ldr	r2, [r7, #20]
 800656e:	621a      	str	r2, [r3, #32]
}
 8006570:	bf00      	nop
 8006572:	371c      	adds	r7, #28
 8006574:	46bd      	mov	sp, r7
 8006576:	bc80      	pop	{r7}
 8006578:	4770      	bx	lr

0800657a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800657a:	b480      	push	{r7}
 800657c:	b085      	sub	sp, #20
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
 8006582:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006590:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006592:	683a      	ldr	r2, [r7, #0]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	4313      	orrs	r3, r2
 8006598:	f043 0307 	orr.w	r3, r3, #7
 800659c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	609a      	str	r2, [r3, #8]
}
 80065a4:	bf00      	nop
 80065a6:	3714      	adds	r7, #20
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bc80      	pop	{r7}
 80065ac:	4770      	bx	lr

080065ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065ae:	b480      	push	{r7}
 80065b0:	b087      	sub	sp, #28
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	60f8      	str	r0, [r7, #12]
 80065b6:	60b9      	str	r1, [r7, #8]
 80065b8:	607a      	str	r2, [r7, #4]
 80065ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80065c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	021a      	lsls	r2, r3, #8
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	431a      	orrs	r2, r3
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	697a      	ldr	r2, [r7, #20]
 80065d8:	4313      	orrs	r3, r2
 80065da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	697a      	ldr	r2, [r7, #20]
 80065e0:	609a      	str	r2, [r3, #8]
}
 80065e2:	bf00      	nop
 80065e4:	371c      	adds	r7, #28
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bc80      	pop	{r7}
 80065ea:	4770      	bx	lr

080065ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b087      	sub	sp, #28
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	f003 031f 	and.w	r3, r3, #31
 80065fe:	2201      	movs	r2, #1
 8006600:	fa02 f303 	lsl.w	r3, r2, r3
 8006604:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6a1a      	ldr	r2, [r3, #32]
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	43db      	mvns	r3, r3
 800660e:	401a      	ands	r2, r3
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6a1a      	ldr	r2, [r3, #32]
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	f003 031f 	and.w	r3, r3, #31
 800661e:	6879      	ldr	r1, [r7, #4]
 8006620:	fa01 f303 	lsl.w	r3, r1, r3
 8006624:	431a      	orrs	r2, r3
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	621a      	str	r2, [r3, #32]
}
 800662a:	bf00      	nop
 800662c:	371c      	adds	r7, #28
 800662e:	46bd      	mov	sp, r7
 8006630:	bc80      	pop	{r7}
 8006632:	4770      	bx	lr

08006634 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006634:	b480      	push	{r7}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006644:	2b01      	cmp	r3, #1
 8006646:	d101      	bne.n	800664c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006648:	2302      	movs	r3, #2
 800664a:	e046      	b.n	80066da <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2202      	movs	r2, #2
 8006658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006672:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	4313      	orrs	r3, r2
 800667c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a16      	ldr	r2, [pc, #88]	@ (80066e4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d00e      	beq.n	80066ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006698:	d009      	beq.n	80066ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a12      	ldr	r2, [pc, #72]	@ (80066e8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d004      	beq.n	80066ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a10      	ldr	r2, [pc, #64]	@ (80066ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d10c      	bne.n	80066c8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	68ba      	ldr	r2, [r7, #8]
 80066bc:	4313      	orrs	r3, r2
 80066be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68ba      	ldr	r2, [r7, #8]
 80066c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3714      	adds	r7, #20
 80066de:	46bd      	mov	sp, r7
 80066e0:	bc80      	pop	{r7}
 80066e2:	4770      	bx	lr
 80066e4:	40012c00 	.word	0x40012c00
 80066e8:	40000400 	.word	0x40000400
 80066ec:	40000800 	.word	0x40000800

080066f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d101      	bne.n	8006702 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e042      	b.n	8006788 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006708:	b2db      	uxtb	r3, r3
 800670a:	2b00      	cmp	r3, #0
 800670c:	d106      	bne.n	800671c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2200      	movs	r2, #0
 8006712:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f7fc faea 	bl	8002cf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2224      	movs	r2, #36	@ 0x24
 8006720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68da      	ldr	r2, [r3, #12]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006732:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 fe4f 	bl	80073d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	691a      	ldr	r2, [r3, #16]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006748:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	695a      	ldr	r2, [r3, #20]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006758:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68da      	ldr	r2, [r3, #12]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006768:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2220      	movs	r2, #32
 8006774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2220      	movs	r2, #32
 800677c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3708      	adds	r7, #8
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b08a      	sub	sp, #40	@ 0x28
 8006794:	af02      	add	r7, sp, #8
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	603b      	str	r3, [r7, #0]
 800679c:	4613      	mov	r3, r2
 800679e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80067a0:	2300      	movs	r3, #0
 80067a2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	2b20      	cmp	r3, #32
 80067ae:	d175      	bne.n	800689c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d002      	beq.n	80067bc <HAL_UART_Transmit+0x2c>
 80067b6:	88fb      	ldrh	r3, [r7, #6]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d101      	bne.n	80067c0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	e06e      	b.n	800689e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2200      	movs	r2, #0
 80067c4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2221      	movs	r2, #33	@ 0x21
 80067ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80067ce:	f7fc fc1d 	bl	800300c <HAL_GetTick>
 80067d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	88fa      	ldrh	r2, [r7, #6]
 80067d8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	88fa      	ldrh	r2, [r7, #6]
 80067de:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067e8:	d108      	bne.n	80067fc <HAL_UART_Transmit+0x6c>
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d104      	bne.n	80067fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80067f2:	2300      	movs	r3, #0
 80067f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	61bb      	str	r3, [r7, #24]
 80067fa:	e003      	b.n	8006804 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006800:	2300      	movs	r3, #0
 8006802:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006804:	e02e      	b.n	8006864 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	9300      	str	r3, [sp, #0]
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	2200      	movs	r2, #0
 800680e:	2180      	movs	r1, #128	@ 0x80
 8006810:	68f8      	ldr	r0, [r7, #12]
 8006812:	f000 fbb4 	bl	8006f7e <UART_WaitOnFlagUntilTimeout>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d005      	beq.n	8006828 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2220      	movs	r2, #32
 8006820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006824:	2303      	movs	r3, #3
 8006826:	e03a      	b.n	800689e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006828:	69fb      	ldr	r3, [r7, #28]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d10b      	bne.n	8006846 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800682e:	69bb      	ldr	r3, [r7, #24]
 8006830:	881b      	ldrh	r3, [r3, #0]
 8006832:	461a      	mov	r2, r3
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800683c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	3302      	adds	r3, #2
 8006842:	61bb      	str	r3, [r7, #24]
 8006844:	e007      	b.n	8006856 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006846:	69fb      	ldr	r3, [r7, #28]
 8006848:	781a      	ldrb	r2, [r3, #0]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	3301      	adds	r3, #1
 8006854:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800685a:	b29b      	uxth	r3, r3
 800685c:	3b01      	subs	r3, #1
 800685e:	b29a      	uxth	r2, r3
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006868:	b29b      	uxth	r3, r3
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1cb      	bne.n	8006806 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	9300      	str	r3, [sp, #0]
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	2200      	movs	r2, #0
 8006876:	2140      	movs	r1, #64	@ 0x40
 8006878:	68f8      	ldr	r0, [r7, #12]
 800687a:	f000 fb80 	bl	8006f7e <UART_WaitOnFlagUntilTimeout>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d005      	beq.n	8006890 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2220      	movs	r2, #32
 8006888:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800688c:	2303      	movs	r3, #3
 800688e:	e006      	b.n	800689e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2220      	movs	r2, #32
 8006894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006898:	2300      	movs	r3, #0
 800689a:	e000      	b.n	800689e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800689c:	2302      	movs	r3, #2
  }
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3720      	adds	r7, #32
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b08a      	sub	sp, #40	@ 0x28
 80068aa:	af02      	add	r7, sp, #8
 80068ac:	60f8      	str	r0, [r7, #12]
 80068ae:	60b9      	str	r1, [r7, #8]
 80068b0:	603b      	str	r3, [r7, #0]
 80068b2:	4613      	mov	r3, r2
 80068b4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80068b6:	2300      	movs	r3, #0
 80068b8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	2b20      	cmp	r3, #32
 80068c4:	f040 8081 	bne.w	80069ca <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d002      	beq.n	80068d4 <HAL_UART_Receive+0x2e>
 80068ce:	88fb      	ldrh	r3, [r7, #6]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d101      	bne.n	80068d8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e079      	b.n	80069cc <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2200      	movs	r2, #0
 80068dc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2222      	movs	r2, #34	@ 0x22
 80068e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2200      	movs	r2, #0
 80068ea:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068ec:	f7fc fb8e 	bl	800300c <HAL_GetTick>
 80068f0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	88fa      	ldrh	r2, [r7, #6]
 80068f6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	88fa      	ldrh	r2, [r7, #6]
 80068fc:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006906:	d108      	bne.n	800691a <HAL_UART_Receive+0x74>
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d104      	bne.n	800691a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8006910:	2300      	movs	r3, #0
 8006912:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	61bb      	str	r3, [r7, #24]
 8006918:	e003      	b.n	8006922 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800691e:	2300      	movs	r3, #0
 8006920:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006922:	e047      	b.n	80069b4 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	9300      	str	r3, [sp, #0]
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	2200      	movs	r2, #0
 800692c:	2120      	movs	r1, #32
 800692e:	68f8      	ldr	r0, [r7, #12]
 8006930:	f000 fb25 	bl	8006f7e <UART_WaitOnFlagUntilTimeout>
 8006934:	4603      	mov	r3, r0
 8006936:	2b00      	cmp	r3, #0
 8006938:	d005      	beq.n	8006946 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2220      	movs	r2, #32
 800693e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8006942:	2303      	movs	r3, #3
 8006944:	e042      	b.n	80069cc <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d10c      	bne.n	8006966 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	b29b      	uxth	r3, r3
 8006954:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006958:	b29a      	uxth	r2, r3
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	3302      	adds	r3, #2
 8006962:	61bb      	str	r3, [r7, #24]
 8006964:	e01f      	b.n	80069a6 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800696e:	d007      	beq.n	8006980 <HAL_UART_Receive+0xda>
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d10a      	bne.n	800698e <HAL_UART_Receive+0xe8>
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d106      	bne.n	800698e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	b2da      	uxtb	r2, r3
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	701a      	strb	r2, [r3, #0]
 800698c:	e008      	b.n	80069a0 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	b2db      	uxtb	r3, r3
 8006996:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800699a:	b2da      	uxtb	r2, r3
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	3301      	adds	r3, #1
 80069a4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	3b01      	subs	r3, #1
 80069ae:	b29a      	uxth	r2, r3
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1b2      	bne.n	8006924 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2220      	movs	r2, #32
 80069c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80069c6:	2300      	movs	r3, #0
 80069c8:	e000      	b.n	80069cc <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80069ca:	2302      	movs	r3, #2
  }
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3720      	adds	r7, #32
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	60b9      	str	r1, [r7, #8]
 80069de:	4613      	mov	r3, r2
 80069e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	2b20      	cmp	r3, #32
 80069ec:	d112      	bne.n	8006a14 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d002      	beq.n	80069fa <HAL_UART_Receive_IT+0x26>
 80069f4:	88fb      	ldrh	r3, [r7, #6]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d101      	bne.n	80069fe <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e00b      	b.n	8006a16 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2200      	movs	r2, #0
 8006a02:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006a04:	88fb      	ldrh	r3, [r7, #6]
 8006a06:	461a      	mov	r2, r3
 8006a08:	68b9      	ldr	r1, [r7, #8]
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f000 fb10 	bl	8007030 <UART_Start_Receive_IT>
 8006a10:	4603      	mov	r3, r0
 8006a12:	e000      	b.n	8006a16 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006a14:	2302      	movs	r3, #2
  }
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3710      	adds	r7, #16
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
	...

08006a20 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b0ba      	sub	sp, #232	@ 0xe8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	695b      	ldr	r3, [r3, #20]
 8006a42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006a46:	2300      	movs	r3, #0
 8006a48:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a56:	f003 030f 	and.w	r3, r3, #15
 8006a5a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006a5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d10f      	bne.n	8006a86 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a6a:	f003 0320 	and.w	r3, r3, #32
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d009      	beq.n	8006a86 <HAL_UART_IRQHandler+0x66>
 8006a72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a76:	f003 0320 	and.w	r3, r3, #32
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d003      	beq.n	8006a86 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 fbec 	bl	800725c <UART_Receive_IT>
      return;
 8006a84:	e25b      	b.n	8006f3e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006a86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	f000 80de 	beq.w	8006c4c <HAL_UART_IRQHandler+0x22c>
 8006a90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a94:	f003 0301 	and.w	r3, r3, #1
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d106      	bne.n	8006aaa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006aa0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	f000 80d1 	beq.w	8006c4c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006aae:	f003 0301 	and.w	r3, r3, #1
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d00b      	beq.n	8006ace <HAL_UART_IRQHandler+0xae>
 8006ab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006aba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d005      	beq.n	8006ace <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ac6:	f043 0201 	orr.w	r2, r3, #1
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ad2:	f003 0304 	and.w	r3, r3, #4
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d00b      	beq.n	8006af2 <HAL_UART_IRQHandler+0xd2>
 8006ada:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ade:	f003 0301 	and.w	r3, r3, #1
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d005      	beq.n	8006af2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aea:	f043 0202 	orr.w	r2, r3, #2
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006af6:	f003 0302 	and.w	r3, r3, #2
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d00b      	beq.n	8006b16 <HAL_UART_IRQHandler+0xf6>
 8006afe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b02:	f003 0301 	and.w	r3, r3, #1
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d005      	beq.n	8006b16 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b0e:	f043 0204 	orr.w	r2, r3, #4
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b1a:	f003 0308 	and.w	r3, r3, #8
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d011      	beq.n	8006b46 <HAL_UART_IRQHandler+0x126>
 8006b22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b26:	f003 0320 	and.w	r3, r3, #32
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d105      	bne.n	8006b3a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006b2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b32:	f003 0301 	and.w	r3, r3, #1
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d005      	beq.n	8006b46 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b3e:	f043 0208 	orr.w	r2, r3, #8
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	f000 81f2 	beq.w	8006f34 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b54:	f003 0320 	and.w	r3, r3, #32
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d008      	beq.n	8006b6e <HAL_UART_IRQHandler+0x14e>
 8006b5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b60:	f003 0320 	and.w	r3, r3, #32
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d002      	beq.n	8006b6e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 fb77 	bl	800725c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	695b      	ldr	r3, [r3, #20]
 8006b74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	bf14      	ite	ne
 8006b7c:	2301      	movne	r3, #1
 8006b7e:	2300      	moveq	r3, #0
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b8a:	f003 0308 	and.w	r3, r3, #8
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d103      	bne.n	8006b9a <HAL_UART_IRQHandler+0x17a>
 8006b92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d04f      	beq.n	8006c3a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 fa81 	bl	80070a2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	695b      	ldr	r3, [r3, #20]
 8006ba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d041      	beq.n	8006c32 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	3314      	adds	r3, #20
 8006bb4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006bbc:	e853 3f00 	ldrex	r3, [r3]
 8006bc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006bc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006bc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bcc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	3314      	adds	r3, #20
 8006bd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006bda:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006bde:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006be6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006bea:	e841 2300 	strex	r3, r2, [r1]
 8006bee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006bf2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d1d9      	bne.n	8006bae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d013      	beq.n	8006c2a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c06:	4a7e      	ldr	r2, [pc, #504]	@ (8006e00 <HAL_UART_IRQHandler+0x3e0>)
 8006c08:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f7fc ffca 	bl	8003ba8 <HAL_DMA_Abort_IT>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d016      	beq.n	8006c48 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006c24:	4610      	mov	r0, r2
 8006c26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c28:	e00e      	b.n	8006c48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 f993 	bl	8006f56 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c30:	e00a      	b.n	8006c48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 f98f 	bl	8006f56 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c38:	e006      	b.n	8006c48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 f98b 	bl	8006f56 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006c46:	e175      	b.n	8006f34 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c48:	bf00      	nop
    return;
 8006c4a:	e173      	b.n	8006f34 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	f040 814f 	bne.w	8006ef4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c5a:	f003 0310 	and.w	r3, r3, #16
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	f000 8148 	beq.w	8006ef4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c68:	f003 0310 	and.w	r3, r3, #16
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	f000 8141 	beq.w	8006ef4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c72:	2300      	movs	r3, #0
 8006c74:	60bb      	str	r3, [r7, #8]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	60bb      	str	r3, [r7, #8]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	60bb      	str	r3, [r7, #8]
 8006c86:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	695b      	ldr	r3, [r3, #20]
 8006c8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	f000 80b6 	beq.w	8006e04 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ca4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	f000 8145 	beq.w	8006f38 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006cb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	f080 813e 	bcs.w	8006f38 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006cc2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cc8:	699b      	ldr	r3, [r3, #24]
 8006cca:	2b20      	cmp	r3, #32
 8006ccc:	f000 8088 	beq.w	8006de0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	330c      	adds	r3, #12
 8006cd6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cda:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006cde:	e853 3f00 	ldrex	r3, [r3]
 8006ce2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006ce6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006cea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006cee:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	330c      	adds	r3, #12
 8006cf8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006cfc:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006d00:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d04:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006d08:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006d0c:	e841 2300 	strex	r3, r2, [r1]
 8006d10:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006d14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d1d9      	bne.n	8006cd0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	3314      	adds	r3, #20
 8006d22:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d26:	e853 3f00 	ldrex	r3, [r3]
 8006d2a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006d2c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006d2e:	f023 0301 	bic.w	r3, r3, #1
 8006d32:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	3314      	adds	r3, #20
 8006d3c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006d40:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006d44:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d46:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006d48:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006d4c:	e841 2300 	strex	r3, r2, [r1]
 8006d50:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006d52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d1e1      	bne.n	8006d1c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	3314      	adds	r3, #20
 8006d5e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d60:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006d62:	e853 3f00 	ldrex	r3, [r3]
 8006d66:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006d68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	3314      	adds	r3, #20
 8006d78:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006d7c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006d7e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d80:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006d82:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006d84:	e841 2300 	strex	r3, r2, [r1]
 8006d88:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006d8a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d1e3      	bne.n	8006d58 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2220      	movs	r2, #32
 8006d94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	330c      	adds	r3, #12
 8006da4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006da8:	e853 3f00 	ldrex	r3, [r3]
 8006dac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006dae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006db0:	f023 0310 	bic.w	r3, r3, #16
 8006db4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	330c      	adds	r3, #12
 8006dbe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006dc2:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006dc4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006dc8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006dca:	e841 2300 	strex	r3, r2, [r1]
 8006dce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006dd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1e3      	bne.n	8006d9e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f7fc fea9 	bl	8003b32 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2202      	movs	r2, #2
 8006de4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	1ad3      	subs	r3, r2, r3
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	4619      	mov	r1, r3
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 f8b6 	bl	8006f68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006dfc:	e09c      	b.n	8006f38 <HAL_UART_IRQHandler+0x518>
 8006dfe:	bf00      	nop
 8006e00:	08007167 	.word	0x08007167
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	1ad3      	subs	r3, r2, r3
 8006e10:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	f000 808e 	beq.w	8006f3c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006e20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	f000 8089 	beq.w	8006f3c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	330c      	adds	r3, #12
 8006e30:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e34:	e853 3f00 	ldrex	r3, [r3]
 8006e38:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006e3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e40:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	330c      	adds	r3, #12
 8006e4a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006e4e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006e50:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e52:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e54:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e56:	e841 2300 	strex	r3, r2, [r1]
 8006e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1e3      	bne.n	8006e2a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	3314      	adds	r3, #20
 8006e68:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e6c:	e853 3f00 	ldrex	r3, [r3]
 8006e70:	623b      	str	r3, [r7, #32]
   return(result);
 8006e72:	6a3b      	ldr	r3, [r7, #32]
 8006e74:	f023 0301 	bic.w	r3, r3, #1
 8006e78:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	3314      	adds	r3, #20
 8006e82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006e86:	633a      	str	r2, [r7, #48]	@ 0x30
 8006e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e8e:	e841 2300 	strex	r3, r2, [r1]
 8006e92:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d1e3      	bne.n	8006e62 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2220      	movs	r2, #32
 8006e9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	330c      	adds	r3, #12
 8006eae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	e853 3f00 	ldrex	r3, [r3]
 8006eb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f023 0310 	bic.w	r3, r3, #16
 8006ebe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	330c      	adds	r3, #12
 8006ec8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006ecc:	61fa      	str	r2, [r7, #28]
 8006ece:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed0:	69b9      	ldr	r1, [r7, #24]
 8006ed2:	69fa      	ldr	r2, [r7, #28]
 8006ed4:	e841 2300 	strex	r3, r2, [r1]
 8006ed8:	617b      	str	r3, [r7, #20]
   return(result);
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d1e3      	bne.n	8006ea8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2202      	movs	r2, #2
 8006ee4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ee6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006eea:	4619      	mov	r1, r3
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 f83b 	bl	8006f68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ef2:	e023      	b.n	8006f3c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006ef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ef8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d009      	beq.n	8006f14 <HAL_UART_IRQHandler+0x4f4>
 8006f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d003      	beq.n	8006f14 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 f93e 	bl	800718e <UART_Transmit_IT>
    return;
 8006f12:	e014      	b.n	8006f3e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006f14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d00e      	beq.n	8006f3e <HAL_UART_IRQHandler+0x51e>
 8006f20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d008      	beq.n	8006f3e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 f97d 	bl	800722c <UART_EndTransmit_IT>
    return;
 8006f32:	e004      	b.n	8006f3e <HAL_UART_IRQHandler+0x51e>
    return;
 8006f34:	bf00      	nop
 8006f36:	e002      	b.n	8006f3e <HAL_UART_IRQHandler+0x51e>
      return;
 8006f38:	bf00      	nop
 8006f3a:	e000      	b.n	8006f3e <HAL_UART_IRQHandler+0x51e>
      return;
 8006f3c:	bf00      	nop
  }
}
 8006f3e:	37e8      	adds	r7, #232	@ 0xe8
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006f4c:	bf00      	nop
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bc80      	pop	{r7}
 8006f54:	4770      	bx	lr

08006f56 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f56:	b480      	push	{r7}
 8006f58:	b083      	sub	sp, #12
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006f5e:	bf00      	nop
 8006f60:	370c      	adds	r7, #12
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bc80      	pop	{r7}
 8006f66:	4770      	bx	lr

08006f68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	460b      	mov	r3, r1
 8006f72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f74:	bf00      	nop
 8006f76:	370c      	adds	r7, #12
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bc80      	pop	{r7}
 8006f7c:	4770      	bx	lr

08006f7e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b086      	sub	sp, #24
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	60f8      	str	r0, [r7, #12]
 8006f86:	60b9      	str	r1, [r7, #8]
 8006f88:	603b      	str	r3, [r7, #0]
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f8e:	e03b      	b.n	8007008 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f90:	6a3b      	ldr	r3, [r7, #32]
 8006f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f96:	d037      	beq.n	8007008 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f98:	f7fc f838 	bl	800300c <HAL_GetTick>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	1ad3      	subs	r3, r2, r3
 8006fa2:	6a3a      	ldr	r2, [r7, #32]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d302      	bcc.n	8006fae <UART_WaitOnFlagUntilTimeout+0x30>
 8006fa8:	6a3b      	ldr	r3, [r7, #32]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d101      	bne.n	8006fb2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	e03a      	b.n	8007028 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	f003 0304 	and.w	r3, r3, #4
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d023      	beq.n	8007008 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	2b80      	cmp	r3, #128	@ 0x80
 8006fc4:	d020      	beq.n	8007008 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	2b40      	cmp	r3, #64	@ 0x40
 8006fca:	d01d      	beq.n	8007008 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f003 0308 	and.w	r3, r3, #8
 8006fd6:	2b08      	cmp	r3, #8
 8006fd8:	d116      	bne.n	8007008 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006fda:	2300      	movs	r3, #0
 8006fdc:	617b      	str	r3, [r7, #20]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	617b      	str	r3, [r7, #20]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	617b      	str	r3, [r7, #20]
 8006fee:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f000 f856 	bl	80070a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2208      	movs	r2, #8
 8006ffa:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2200      	movs	r2, #0
 8007000:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	e00f      	b.n	8007028 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	4013      	ands	r3, r2
 8007012:	68ba      	ldr	r2, [r7, #8]
 8007014:	429a      	cmp	r2, r3
 8007016:	bf0c      	ite	eq
 8007018:	2301      	moveq	r3, #1
 800701a:	2300      	movne	r3, #0
 800701c:	b2db      	uxtb	r3, r3
 800701e:	461a      	mov	r2, r3
 8007020:	79fb      	ldrb	r3, [r7, #7]
 8007022:	429a      	cmp	r2, r3
 8007024:	d0b4      	beq.n	8006f90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007026:	2300      	movs	r3, #0
}
 8007028:	4618      	mov	r0, r3
 800702a:	3718      	adds	r7, #24
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	4613      	mov	r3, r2
 800703c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	68ba      	ldr	r2, [r7, #8]
 8007042:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	88fa      	ldrh	r2, [r7, #6]
 8007048:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	88fa      	ldrh	r2, [r7, #6]
 800704e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2200      	movs	r2, #0
 8007054:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2222      	movs	r2, #34	@ 0x22
 800705a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d007      	beq.n	8007076 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	68da      	ldr	r2, [r3, #12]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007074:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	695a      	ldr	r2, [r3, #20]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f042 0201 	orr.w	r2, r2, #1
 8007084:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	68da      	ldr	r2, [r3, #12]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f042 0220 	orr.w	r2, r2, #32
 8007094:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007096:	2300      	movs	r3, #0
}
 8007098:	4618      	mov	r0, r3
 800709a:	3714      	adds	r7, #20
 800709c:	46bd      	mov	sp, r7
 800709e:	bc80      	pop	{r7}
 80070a0:	4770      	bx	lr

080070a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070a2:	b480      	push	{r7}
 80070a4:	b095      	sub	sp, #84	@ 0x54
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	330c      	adds	r3, #12
 80070b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070b4:	e853 3f00 	ldrex	r3, [r3]
 80070b8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80070ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	330c      	adds	r3, #12
 80070c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80070ca:	643a      	str	r2, [r7, #64]	@ 0x40
 80070cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80070d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80070d2:	e841 2300 	strex	r3, r2, [r1]
 80070d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80070d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d1e5      	bne.n	80070aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	3314      	adds	r3, #20
 80070e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e6:	6a3b      	ldr	r3, [r7, #32]
 80070e8:	e853 3f00 	ldrex	r3, [r3]
 80070ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	f023 0301 	bic.w	r3, r3, #1
 80070f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	3314      	adds	r3, #20
 80070fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007100:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007102:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007104:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007106:	e841 2300 	strex	r3, r2, [r1]
 800710a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800710c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800710e:	2b00      	cmp	r3, #0
 8007110:	d1e5      	bne.n	80070de <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007116:	2b01      	cmp	r3, #1
 8007118:	d119      	bne.n	800714e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	330c      	adds	r3, #12
 8007120:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	e853 3f00 	ldrex	r3, [r3]
 8007128:	60bb      	str	r3, [r7, #8]
   return(result);
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	f023 0310 	bic.w	r3, r3, #16
 8007130:	647b      	str	r3, [r7, #68]	@ 0x44
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	330c      	adds	r3, #12
 8007138:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800713a:	61ba      	str	r2, [r7, #24]
 800713c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800713e:	6979      	ldr	r1, [r7, #20]
 8007140:	69ba      	ldr	r2, [r7, #24]
 8007142:	e841 2300 	strex	r3, r2, [r1]
 8007146:	613b      	str	r3, [r7, #16]
   return(result);
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d1e5      	bne.n	800711a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2220      	movs	r2, #32
 8007152:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800715c:	bf00      	nop
 800715e:	3754      	adds	r7, #84	@ 0x54
 8007160:	46bd      	mov	sp, r7
 8007162:	bc80      	pop	{r7}
 8007164:	4770      	bx	lr

08007166 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007166:	b580      	push	{r7, lr}
 8007168:	b084      	sub	sp, #16
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007172:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2200      	movs	r2, #0
 8007178:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2200      	movs	r2, #0
 800717e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007180:	68f8      	ldr	r0, [r7, #12]
 8007182:	f7ff fee8 	bl	8006f56 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007186:	bf00      	nop
 8007188:	3710      	adds	r7, #16
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}

0800718e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800718e:	b480      	push	{r7}
 8007190:	b085      	sub	sp, #20
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800719c:	b2db      	uxtb	r3, r3
 800719e:	2b21      	cmp	r3, #33	@ 0x21
 80071a0:	d13e      	bne.n	8007220 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071aa:	d114      	bne.n	80071d6 <UART_Transmit_IT+0x48>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	691b      	ldr	r3, [r3, #16]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d110      	bne.n	80071d6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6a1b      	ldr	r3, [r3, #32]
 80071b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	881b      	ldrh	r3, [r3, #0]
 80071be:	461a      	mov	r2, r3
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a1b      	ldr	r3, [r3, #32]
 80071ce:	1c9a      	adds	r2, r3, #2
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	621a      	str	r2, [r3, #32]
 80071d4:	e008      	b.n	80071e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a1b      	ldr	r3, [r3, #32]
 80071da:	1c59      	adds	r1, r3, #1
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	6211      	str	r1, [r2, #32]
 80071e0:	781a      	ldrb	r2, [r3, #0]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	3b01      	subs	r3, #1
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	4619      	mov	r1, r3
 80071f6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d10f      	bne.n	800721c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	68da      	ldr	r2, [r3, #12]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800720a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	68da      	ldr	r2, [r3, #12]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800721a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800721c:	2300      	movs	r3, #0
 800721e:	e000      	b.n	8007222 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007220:	2302      	movs	r3, #2
  }
}
 8007222:	4618      	mov	r0, r3
 8007224:	3714      	adds	r7, #20
 8007226:	46bd      	mov	sp, r7
 8007228:	bc80      	pop	{r7}
 800722a:	4770      	bx	lr

0800722c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	68da      	ldr	r2, [r3, #12]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007242:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2220      	movs	r2, #32
 8007248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f7ff fe79 	bl	8006f44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	3708      	adds	r7, #8
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b08c      	sub	sp, #48	@ 0x30
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800726a:	b2db      	uxtb	r3, r3
 800726c:	2b22      	cmp	r3, #34	@ 0x22
 800726e:	f040 80ae 	bne.w	80073ce <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800727a:	d117      	bne.n	80072ac <UART_Receive_IT+0x50>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d113      	bne.n	80072ac <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007284:	2300      	movs	r3, #0
 8007286:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800728c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	b29b      	uxth	r3, r3
 8007296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800729a:	b29a      	uxth	r2, r3
 800729c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800729e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072a4:	1c9a      	adds	r2, r3, #2
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	629a      	str	r2, [r3, #40]	@ 0x28
 80072aa:	e026      	b.n	80072fa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80072b2:	2300      	movs	r3, #0
 80072b4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072be:	d007      	beq.n	80072d0 <UART_Receive_IT+0x74>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d10a      	bne.n	80072de <UART_Receive_IT+0x82>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d106      	bne.n	80072de <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	b2da      	uxtb	r2, r3
 80072d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072da:	701a      	strb	r2, [r3, #0]
 80072dc:	e008      	b.n	80072f0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072ea:	b2da      	uxtb	r2, r3
 80072ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ee:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072f4:	1c5a      	adds	r2, r3, #1
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80072fe:	b29b      	uxth	r3, r3
 8007300:	3b01      	subs	r3, #1
 8007302:	b29b      	uxth	r3, r3
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	4619      	mov	r1, r3
 8007308:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800730a:	2b00      	cmp	r3, #0
 800730c:	d15d      	bne.n	80073ca <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	68da      	ldr	r2, [r3, #12]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f022 0220 	bic.w	r2, r2, #32
 800731c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	68da      	ldr	r2, [r3, #12]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800732c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	695a      	ldr	r2, [r3, #20]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f022 0201 	bic.w	r2, r2, #1
 800733c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2220      	movs	r2, #32
 8007342:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007350:	2b01      	cmp	r3, #1
 8007352:	d135      	bne.n	80073c0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	330c      	adds	r3, #12
 8007360:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	e853 3f00 	ldrex	r3, [r3]
 8007368:	613b      	str	r3, [r7, #16]
   return(result);
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	f023 0310 	bic.w	r3, r3, #16
 8007370:	627b      	str	r3, [r7, #36]	@ 0x24
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	330c      	adds	r3, #12
 8007378:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800737a:	623a      	str	r2, [r7, #32]
 800737c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737e:	69f9      	ldr	r1, [r7, #28]
 8007380:	6a3a      	ldr	r2, [r7, #32]
 8007382:	e841 2300 	strex	r3, r2, [r1]
 8007386:	61bb      	str	r3, [r7, #24]
   return(result);
 8007388:	69bb      	ldr	r3, [r7, #24]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d1e5      	bne.n	800735a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 0310 	and.w	r3, r3, #16
 8007398:	2b10      	cmp	r3, #16
 800739a:	d10a      	bne.n	80073b2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800739c:	2300      	movs	r3, #0
 800739e:	60fb      	str	r3, [r7, #12]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	60fb      	str	r3, [r7, #12]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	60fb      	str	r3, [r7, #12]
 80073b0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80073b6:	4619      	mov	r1, r3
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f7ff fdd5 	bl	8006f68 <HAL_UARTEx_RxEventCallback>
 80073be:	e002      	b.n	80073c6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f7fa fe03 	bl	8001fcc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80073c6:	2300      	movs	r3, #0
 80073c8:	e002      	b.n	80073d0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80073ca:	2300      	movs	r3, #0
 80073cc:	e000      	b.n	80073d0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80073ce:	2302      	movs	r3, #2
  }
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3730      	adds	r7, #48	@ 0x30
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	68da      	ldr	r2, [r3, #12]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	430a      	orrs	r2, r1
 80073f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	689a      	ldr	r2, [r3, #8]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	431a      	orrs	r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	695b      	ldr	r3, [r3, #20]
 8007404:	4313      	orrs	r3, r2
 8007406:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8007412:	f023 030c 	bic.w	r3, r3, #12
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	6812      	ldr	r2, [r2, #0]
 800741a:	68b9      	ldr	r1, [r7, #8]
 800741c:	430b      	orrs	r3, r1
 800741e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	695b      	ldr	r3, [r3, #20]
 8007426:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	699a      	ldr	r2, [r3, #24]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	430a      	orrs	r2, r1
 8007434:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a2c      	ldr	r2, [pc, #176]	@ (80074ec <UART_SetConfig+0x114>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d103      	bne.n	8007448 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007440:	f7fe f9d8 	bl	80057f4 <HAL_RCC_GetPCLK2Freq>
 8007444:	60f8      	str	r0, [r7, #12]
 8007446:	e002      	b.n	800744e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007448:	f7fe f9c0 	bl	80057cc <HAL_RCC_GetPCLK1Freq>
 800744c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800744e:	68fa      	ldr	r2, [r7, #12]
 8007450:	4613      	mov	r3, r2
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	4413      	add	r3, r2
 8007456:	009a      	lsls	r2, r3, #2
 8007458:	441a      	add	r2, r3
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	fbb2 f3f3 	udiv	r3, r2, r3
 8007464:	4a22      	ldr	r2, [pc, #136]	@ (80074f0 <UART_SetConfig+0x118>)
 8007466:	fba2 2303 	umull	r2, r3, r2, r3
 800746a:	095b      	lsrs	r3, r3, #5
 800746c:	0119      	lsls	r1, r3, #4
 800746e:	68fa      	ldr	r2, [r7, #12]
 8007470:	4613      	mov	r3, r2
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	4413      	add	r3, r2
 8007476:	009a      	lsls	r2, r3, #2
 8007478:	441a      	add	r2, r3
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	009b      	lsls	r3, r3, #2
 8007480:	fbb2 f2f3 	udiv	r2, r2, r3
 8007484:	4b1a      	ldr	r3, [pc, #104]	@ (80074f0 <UART_SetConfig+0x118>)
 8007486:	fba3 0302 	umull	r0, r3, r3, r2
 800748a:	095b      	lsrs	r3, r3, #5
 800748c:	2064      	movs	r0, #100	@ 0x64
 800748e:	fb00 f303 	mul.w	r3, r0, r3
 8007492:	1ad3      	subs	r3, r2, r3
 8007494:	011b      	lsls	r3, r3, #4
 8007496:	3332      	adds	r3, #50	@ 0x32
 8007498:	4a15      	ldr	r2, [pc, #84]	@ (80074f0 <UART_SetConfig+0x118>)
 800749a:	fba2 2303 	umull	r2, r3, r2, r3
 800749e:	095b      	lsrs	r3, r3, #5
 80074a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80074a4:	4419      	add	r1, r3
 80074a6:	68fa      	ldr	r2, [r7, #12]
 80074a8:	4613      	mov	r3, r2
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	4413      	add	r3, r2
 80074ae:	009a      	lsls	r2, r3, #2
 80074b0:	441a      	add	r2, r3
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80074bc:	4b0c      	ldr	r3, [pc, #48]	@ (80074f0 <UART_SetConfig+0x118>)
 80074be:	fba3 0302 	umull	r0, r3, r3, r2
 80074c2:	095b      	lsrs	r3, r3, #5
 80074c4:	2064      	movs	r0, #100	@ 0x64
 80074c6:	fb00 f303 	mul.w	r3, r0, r3
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	011b      	lsls	r3, r3, #4
 80074ce:	3332      	adds	r3, #50	@ 0x32
 80074d0:	4a07      	ldr	r2, [pc, #28]	@ (80074f0 <UART_SetConfig+0x118>)
 80074d2:	fba2 2303 	umull	r2, r3, r2, r3
 80074d6:	095b      	lsrs	r3, r3, #5
 80074d8:	f003 020f 	and.w	r2, r3, #15
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	440a      	add	r2, r1
 80074e2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80074e4:	bf00      	nop
 80074e6:	3710      	adds	r7, #16
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}
 80074ec:	40013800 	.word	0x40013800
 80074f0:	51eb851f 	.word	0x51eb851f

080074f4 <std>:
 80074f4:	2300      	movs	r3, #0
 80074f6:	b510      	push	{r4, lr}
 80074f8:	4604      	mov	r4, r0
 80074fa:	e9c0 3300 	strd	r3, r3, [r0]
 80074fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007502:	6083      	str	r3, [r0, #8]
 8007504:	8181      	strh	r1, [r0, #12]
 8007506:	6643      	str	r3, [r0, #100]	@ 0x64
 8007508:	81c2      	strh	r2, [r0, #14]
 800750a:	6183      	str	r3, [r0, #24]
 800750c:	4619      	mov	r1, r3
 800750e:	2208      	movs	r2, #8
 8007510:	305c      	adds	r0, #92	@ 0x5c
 8007512:	f000 facd 	bl	8007ab0 <memset>
 8007516:	4b0d      	ldr	r3, [pc, #52]	@ (800754c <std+0x58>)
 8007518:	6224      	str	r4, [r4, #32]
 800751a:	6263      	str	r3, [r4, #36]	@ 0x24
 800751c:	4b0c      	ldr	r3, [pc, #48]	@ (8007550 <std+0x5c>)
 800751e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007520:	4b0c      	ldr	r3, [pc, #48]	@ (8007554 <std+0x60>)
 8007522:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007524:	4b0c      	ldr	r3, [pc, #48]	@ (8007558 <std+0x64>)
 8007526:	6323      	str	r3, [r4, #48]	@ 0x30
 8007528:	4b0c      	ldr	r3, [pc, #48]	@ (800755c <std+0x68>)
 800752a:	429c      	cmp	r4, r3
 800752c:	d006      	beq.n	800753c <std+0x48>
 800752e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007532:	4294      	cmp	r4, r2
 8007534:	d002      	beq.n	800753c <std+0x48>
 8007536:	33d0      	adds	r3, #208	@ 0xd0
 8007538:	429c      	cmp	r4, r3
 800753a:	d105      	bne.n	8007548 <std+0x54>
 800753c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007544:	f000 bb2c 	b.w	8007ba0 <__retarget_lock_init_recursive>
 8007548:	bd10      	pop	{r4, pc}
 800754a:	bf00      	nop
 800754c:	08007901 	.word	0x08007901
 8007550:	08007923 	.word	0x08007923
 8007554:	0800795b 	.word	0x0800795b
 8007558:	0800797f 	.word	0x0800797f
 800755c:	20000254 	.word	0x20000254

08007560 <stdio_exit_handler>:
 8007560:	4a02      	ldr	r2, [pc, #8]	@ (800756c <stdio_exit_handler+0xc>)
 8007562:	4903      	ldr	r1, [pc, #12]	@ (8007570 <stdio_exit_handler+0x10>)
 8007564:	4803      	ldr	r0, [pc, #12]	@ (8007574 <stdio_exit_handler+0x14>)
 8007566:	f000 b869 	b.w	800763c <_fwalk_sglue>
 800756a:	bf00      	nop
 800756c:	2000003c 	.word	0x2000003c
 8007570:	08008715 	.word	0x08008715
 8007574:	2000004c 	.word	0x2000004c

08007578 <cleanup_stdio>:
 8007578:	6841      	ldr	r1, [r0, #4]
 800757a:	4b0c      	ldr	r3, [pc, #48]	@ (80075ac <cleanup_stdio+0x34>)
 800757c:	b510      	push	{r4, lr}
 800757e:	4299      	cmp	r1, r3
 8007580:	4604      	mov	r4, r0
 8007582:	d001      	beq.n	8007588 <cleanup_stdio+0x10>
 8007584:	f001 f8c6 	bl	8008714 <_fflush_r>
 8007588:	68a1      	ldr	r1, [r4, #8]
 800758a:	4b09      	ldr	r3, [pc, #36]	@ (80075b0 <cleanup_stdio+0x38>)
 800758c:	4299      	cmp	r1, r3
 800758e:	d002      	beq.n	8007596 <cleanup_stdio+0x1e>
 8007590:	4620      	mov	r0, r4
 8007592:	f001 f8bf 	bl	8008714 <_fflush_r>
 8007596:	68e1      	ldr	r1, [r4, #12]
 8007598:	4b06      	ldr	r3, [pc, #24]	@ (80075b4 <cleanup_stdio+0x3c>)
 800759a:	4299      	cmp	r1, r3
 800759c:	d004      	beq.n	80075a8 <cleanup_stdio+0x30>
 800759e:	4620      	mov	r0, r4
 80075a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075a4:	f001 b8b6 	b.w	8008714 <_fflush_r>
 80075a8:	bd10      	pop	{r4, pc}
 80075aa:	bf00      	nop
 80075ac:	20000254 	.word	0x20000254
 80075b0:	200002bc 	.word	0x200002bc
 80075b4:	20000324 	.word	0x20000324

080075b8 <global_stdio_init.part.0>:
 80075b8:	b510      	push	{r4, lr}
 80075ba:	4b0b      	ldr	r3, [pc, #44]	@ (80075e8 <global_stdio_init.part.0+0x30>)
 80075bc:	4c0b      	ldr	r4, [pc, #44]	@ (80075ec <global_stdio_init.part.0+0x34>)
 80075be:	4a0c      	ldr	r2, [pc, #48]	@ (80075f0 <global_stdio_init.part.0+0x38>)
 80075c0:	4620      	mov	r0, r4
 80075c2:	601a      	str	r2, [r3, #0]
 80075c4:	2104      	movs	r1, #4
 80075c6:	2200      	movs	r2, #0
 80075c8:	f7ff ff94 	bl	80074f4 <std>
 80075cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80075d0:	2201      	movs	r2, #1
 80075d2:	2109      	movs	r1, #9
 80075d4:	f7ff ff8e 	bl	80074f4 <std>
 80075d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80075dc:	2202      	movs	r2, #2
 80075de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075e2:	2112      	movs	r1, #18
 80075e4:	f7ff bf86 	b.w	80074f4 <std>
 80075e8:	2000038c 	.word	0x2000038c
 80075ec:	20000254 	.word	0x20000254
 80075f0:	08007561 	.word	0x08007561

080075f4 <__sfp_lock_acquire>:
 80075f4:	4801      	ldr	r0, [pc, #4]	@ (80075fc <__sfp_lock_acquire+0x8>)
 80075f6:	f000 bad4 	b.w	8007ba2 <__retarget_lock_acquire_recursive>
 80075fa:	bf00      	nop
 80075fc:	20000395 	.word	0x20000395

08007600 <__sfp_lock_release>:
 8007600:	4801      	ldr	r0, [pc, #4]	@ (8007608 <__sfp_lock_release+0x8>)
 8007602:	f000 bacf 	b.w	8007ba4 <__retarget_lock_release_recursive>
 8007606:	bf00      	nop
 8007608:	20000395 	.word	0x20000395

0800760c <__sinit>:
 800760c:	b510      	push	{r4, lr}
 800760e:	4604      	mov	r4, r0
 8007610:	f7ff fff0 	bl	80075f4 <__sfp_lock_acquire>
 8007614:	6a23      	ldr	r3, [r4, #32]
 8007616:	b11b      	cbz	r3, 8007620 <__sinit+0x14>
 8007618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800761c:	f7ff bff0 	b.w	8007600 <__sfp_lock_release>
 8007620:	4b04      	ldr	r3, [pc, #16]	@ (8007634 <__sinit+0x28>)
 8007622:	6223      	str	r3, [r4, #32]
 8007624:	4b04      	ldr	r3, [pc, #16]	@ (8007638 <__sinit+0x2c>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d1f5      	bne.n	8007618 <__sinit+0xc>
 800762c:	f7ff ffc4 	bl	80075b8 <global_stdio_init.part.0>
 8007630:	e7f2      	b.n	8007618 <__sinit+0xc>
 8007632:	bf00      	nop
 8007634:	08007579 	.word	0x08007579
 8007638:	2000038c 	.word	0x2000038c

0800763c <_fwalk_sglue>:
 800763c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007640:	4607      	mov	r7, r0
 8007642:	4688      	mov	r8, r1
 8007644:	4614      	mov	r4, r2
 8007646:	2600      	movs	r6, #0
 8007648:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800764c:	f1b9 0901 	subs.w	r9, r9, #1
 8007650:	d505      	bpl.n	800765e <_fwalk_sglue+0x22>
 8007652:	6824      	ldr	r4, [r4, #0]
 8007654:	2c00      	cmp	r4, #0
 8007656:	d1f7      	bne.n	8007648 <_fwalk_sglue+0xc>
 8007658:	4630      	mov	r0, r6
 800765a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800765e:	89ab      	ldrh	r3, [r5, #12]
 8007660:	2b01      	cmp	r3, #1
 8007662:	d907      	bls.n	8007674 <_fwalk_sglue+0x38>
 8007664:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007668:	3301      	adds	r3, #1
 800766a:	d003      	beq.n	8007674 <_fwalk_sglue+0x38>
 800766c:	4629      	mov	r1, r5
 800766e:	4638      	mov	r0, r7
 8007670:	47c0      	blx	r8
 8007672:	4306      	orrs	r6, r0
 8007674:	3568      	adds	r5, #104	@ 0x68
 8007676:	e7e9      	b.n	800764c <_fwalk_sglue+0x10>

08007678 <iprintf>:
 8007678:	b40f      	push	{r0, r1, r2, r3}
 800767a:	b507      	push	{r0, r1, r2, lr}
 800767c:	4906      	ldr	r1, [pc, #24]	@ (8007698 <iprintf+0x20>)
 800767e:	ab04      	add	r3, sp, #16
 8007680:	6808      	ldr	r0, [r1, #0]
 8007682:	f853 2b04 	ldr.w	r2, [r3], #4
 8007686:	6881      	ldr	r1, [r0, #8]
 8007688:	9301      	str	r3, [sp, #4]
 800768a:	f000 fd19 	bl	80080c0 <_vfiprintf_r>
 800768e:	b003      	add	sp, #12
 8007690:	f85d eb04 	ldr.w	lr, [sp], #4
 8007694:	b004      	add	sp, #16
 8007696:	4770      	bx	lr
 8007698:	20000048 	.word	0x20000048

0800769c <_puts_r>:
 800769c:	6a03      	ldr	r3, [r0, #32]
 800769e:	b570      	push	{r4, r5, r6, lr}
 80076a0:	4605      	mov	r5, r0
 80076a2:	460e      	mov	r6, r1
 80076a4:	6884      	ldr	r4, [r0, #8]
 80076a6:	b90b      	cbnz	r3, 80076ac <_puts_r+0x10>
 80076a8:	f7ff ffb0 	bl	800760c <__sinit>
 80076ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80076ae:	07db      	lsls	r3, r3, #31
 80076b0:	d405      	bmi.n	80076be <_puts_r+0x22>
 80076b2:	89a3      	ldrh	r3, [r4, #12]
 80076b4:	0598      	lsls	r0, r3, #22
 80076b6:	d402      	bmi.n	80076be <_puts_r+0x22>
 80076b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076ba:	f000 fa72 	bl	8007ba2 <__retarget_lock_acquire_recursive>
 80076be:	89a3      	ldrh	r3, [r4, #12]
 80076c0:	0719      	lsls	r1, r3, #28
 80076c2:	d502      	bpl.n	80076ca <_puts_r+0x2e>
 80076c4:	6923      	ldr	r3, [r4, #16]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d135      	bne.n	8007736 <_puts_r+0x9a>
 80076ca:	4621      	mov	r1, r4
 80076cc:	4628      	mov	r0, r5
 80076ce:	f000 f999 	bl	8007a04 <__swsetup_r>
 80076d2:	b380      	cbz	r0, 8007736 <_puts_r+0x9a>
 80076d4:	f04f 35ff 	mov.w	r5, #4294967295
 80076d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80076da:	07da      	lsls	r2, r3, #31
 80076dc:	d405      	bmi.n	80076ea <_puts_r+0x4e>
 80076de:	89a3      	ldrh	r3, [r4, #12]
 80076e0:	059b      	lsls	r3, r3, #22
 80076e2:	d402      	bmi.n	80076ea <_puts_r+0x4e>
 80076e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076e6:	f000 fa5d 	bl	8007ba4 <__retarget_lock_release_recursive>
 80076ea:	4628      	mov	r0, r5
 80076ec:	bd70      	pop	{r4, r5, r6, pc}
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	da04      	bge.n	80076fc <_puts_r+0x60>
 80076f2:	69a2      	ldr	r2, [r4, #24]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	dc17      	bgt.n	8007728 <_puts_r+0x8c>
 80076f8:	290a      	cmp	r1, #10
 80076fa:	d015      	beq.n	8007728 <_puts_r+0x8c>
 80076fc:	6823      	ldr	r3, [r4, #0]
 80076fe:	1c5a      	adds	r2, r3, #1
 8007700:	6022      	str	r2, [r4, #0]
 8007702:	7019      	strb	r1, [r3, #0]
 8007704:	68a3      	ldr	r3, [r4, #8]
 8007706:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800770a:	3b01      	subs	r3, #1
 800770c:	60a3      	str	r3, [r4, #8]
 800770e:	2900      	cmp	r1, #0
 8007710:	d1ed      	bne.n	80076ee <_puts_r+0x52>
 8007712:	2b00      	cmp	r3, #0
 8007714:	da11      	bge.n	800773a <_puts_r+0x9e>
 8007716:	4622      	mov	r2, r4
 8007718:	210a      	movs	r1, #10
 800771a:	4628      	mov	r0, r5
 800771c:	f000 f933 	bl	8007986 <__swbuf_r>
 8007720:	3001      	adds	r0, #1
 8007722:	d0d7      	beq.n	80076d4 <_puts_r+0x38>
 8007724:	250a      	movs	r5, #10
 8007726:	e7d7      	b.n	80076d8 <_puts_r+0x3c>
 8007728:	4622      	mov	r2, r4
 800772a:	4628      	mov	r0, r5
 800772c:	f000 f92b 	bl	8007986 <__swbuf_r>
 8007730:	3001      	adds	r0, #1
 8007732:	d1e7      	bne.n	8007704 <_puts_r+0x68>
 8007734:	e7ce      	b.n	80076d4 <_puts_r+0x38>
 8007736:	3e01      	subs	r6, #1
 8007738:	e7e4      	b.n	8007704 <_puts_r+0x68>
 800773a:	6823      	ldr	r3, [r4, #0]
 800773c:	1c5a      	adds	r2, r3, #1
 800773e:	6022      	str	r2, [r4, #0]
 8007740:	220a      	movs	r2, #10
 8007742:	701a      	strb	r2, [r3, #0]
 8007744:	e7ee      	b.n	8007724 <_puts_r+0x88>
	...

08007748 <puts>:
 8007748:	4b02      	ldr	r3, [pc, #8]	@ (8007754 <puts+0xc>)
 800774a:	4601      	mov	r1, r0
 800774c:	6818      	ldr	r0, [r3, #0]
 800774e:	f7ff bfa5 	b.w	800769c <_puts_r>
 8007752:	bf00      	nop
 8007754:	20000048 	.word	0x20000048

08007758 <setvbuf>:
 8007758:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800775c:	461d      	mov	r5, r3
 800775e:	4b57      	ldr	r3, [pc, #348]	@ (80078bc <setvbuf+0x164>)
 8007760:	4604      	mov	r4, r0
 8007762:	681f      	ldr	r7, [r3, #0]
 8007764:	460e      	mov	r6, r1
 8007766:	4690      	mov	r8, r2
 8007768:	b127      	cbz	r7, 8007774 <setvbuf+0x1c>
 800776a:	6a3b      	ldr	r3, [r7, #32]
 800776c:	b913      	cbnz	r3, 8007774 <setvbuf+0x1c>
 800776e:	4638      	mov	r0, r7
 8007770:	f7ff ff4c 	bl	800760c <__sinit>
 8007774:	f1b8 0f02 	cmp.w	r8, #2
 8007778:	d006      	beq.n	8007788 <setvbuf+0x30>
 800777a:	f1b8 0f01 	cmp.w	r8, #1
 800777e:	f200 809a 	bhi.w	80078b6 <setvbuf+0x15e>
 8007782:	2d00      	cmp	r5, #0
 8007784:	f2c0 8097 	blt.w	80078b6 <setvbuf+0x15e>
 8007788:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800778a:	07d9      	lsls	r1, r3, #31
 800778c:	d405      	bmi.n	800779a <setvbuf+0x42>
 800778e:	89a3      	ldrh	r3, [r4, #12]
 8007790:	059a      	lsls	r2, r3, #22
 8007792:	d402      	bmi.n	800779a <setvbuf+0x42>
 8007794:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007796:	f000 fa04 	bl	8007ba2 <__retarget_lock_acquire_recursive>
 800779a:	4621      	mov	r1, r4
 800779c:	4638      	mov	r0, r7
 800779e:	f000 ffb9 	bl	8008714 <_fflush_r>
 80077a2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80077a4:	b141      	cbz	r1, 80077b8 <setvbuf+0x60>
 80077a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80077aa:	4299      	cmp	r1, r3
 80077ac:	d002      	beq.n	80077b4 <setvbuf+0x5c>
 80077ae:	4638      	mov	r0, r7
 80077b0:	f000 fa08 	bl	8007bc4 <_free_r>
 80077b4:	2300      	movs	r3, #0
 80077b6:	6363      	str	r3, [r4, #52]	@ 0x34
 80077b8:	2300      	movs	r3, #0
 80077ba:	61a3      	str	r3, [r4, #24]
 80077bc:	6063      	str	r3, [r4, #4]
 80077be:	89a3      	ldrh	r3, [r4, #12]
 80077c0:	061b      	lsls	r3, r3, #24
 80077c2:	d503      	bpl.n	80077cc <setvbuf+0x74>
 80077c4:	4638      	mov	r0, r7
 80077c6:	6921      	ldr	r1, [r4, #16]
 80077c8:	f000 f9fc 	bl	8007bc4 <_free_r>
 80077cc:	89a3      	ldrh	r3, [r4, #12]
 80077ce:	f1b8 0f02 	cmp.w	r8, #2
 80077d2:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 80077d6:	f023 0303 	bic.w	r3, r3, #3
 80077da:	81a3      	strh	r3, [r4, #12]
 80077dc:	d061      	beq.n	80078a2 <setvbuf+0x14a>
 80077de:	ab01      	add	r3, sp, #4
 80077e0:	466a      	mov	r2, sp
 80077e2:	4621      	mov	r1, r4
 80077e4:	4638      	mov	r0, r7
 80077e6:	f000 ffbd 	bl	8008764 <__swhatbuf_r>
 80077ea:	89a3      	ldrh	r3, [r4, #12]
 80077ec:	4318      	orrs	r0, r3
 80077ee:	81a0      	strh	r0, [r4, #12]
 80077f0:	bb2d      	cbnz	r5, 800783e <setvbuf+0xe6>
 80077f2:	9d00      	ldr	r5, [sp, #0]
 80077f4:	4628      	mov	r0, r5
 80077f6:	f000 fa2d 	bl	8007c54 <malloc>
 80077fa:	4606      	mov	r6, r0
 80077fc:	2800      	cmp	r0, #0
 80077fe:	d152      	bne.n	80078a6 <setvbuf+0x14e>
 8007800:	f8dd 9000 	ldr.w	r9, [sp]
 8007804:	45a9      	cmp	r9, r5
 8007806:	d140      	bne.n	800788a <setvbuf+0x132>
 8007808:	f04f 35ff 	mov.w	r5, #4294967295
 800780c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007810:	f043 0202 	orr.w	r2, r3, #2
 8007814:	81a2      	strh	r2, [r4, #12]
 8007816:	2200      	movs	r2, #0
 8007818:	60a2      	str	r2, [r4, #8]
 800781a:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800781e:	6022      	str	r2, [r4, #0]
 8007820:	6122      	str	r2, [r4, #16]
 8007822:	2201      	movs	r2, #1
 8007824:	6162      	str	r2, [r4, #20]
 8007826:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007828:	07d6      	lsls	r6, r2, #31
 800782a:	d404      	bmi.n	8007836 <setvbuf+0xde>
 800782c:	0598      	lsls	r0, r3, #22
 800782e:	d402      	bmi.n	8007836 <setvbuf+0xde>
 8007830:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007832:	f000 f9b7 	bl	8007ba4 <__retarget_lock_release_recursive>
 8007836:	4628      	mov	r0, r5
 8007838:	b003      	add	sp, #12
 800783a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800783e:	2e00      	cmp	r6, #0
 8007840:	d0d8      	beq.n	80077f4 <setvbuf+0x9c>
 8007842:	6a3b      	ldr	r3, [r7, #32]
 8007844:	b913      	cbnz	r3, 800784c <setvbuf+0xf4>
 8007846:	4638      	mov	r0, r7
 8007848:	f7ff fee0 	bl	800760c <__sinit>
 800784c:	f1b8 0f01 	cmp.w	r8, #1
 8007850:	bf08      	it	eq
 8007852:	89a3      	ldrheq	r3, [r4, #12]
 8007854:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8007858:	bf04      	itt	eq
 800785a:	f043 0301 	orreq.w	r3, r3, #1
 800785e:	81a3      	strheq	r3, [r4, #12]
 8007860:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007864:	6026      	str	r6, [r4, #0]
 8007866:	f013 0208 	ands.w	r2, r3, #8
 800786a:	d01e      	beq.n	80078aa <setvbuf+0x152>
 800786c:	07d9      	lsls	r1, r3, #31
 800786e:	bf41      	itttt	mi
 8007870:	2200      	movmi	r2, #0
 8007872:	426d      	negmi	r5, r5
 8007874:	60a2      	strmi	r2, [r4, #8]
 8007876:	61a5      	strmi	r5, [r4, #24]
 8007878:	bf58      	it	pl
 800787a:	60a5      	strpl	r5, [r4, #8]
 800787c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800787e:	07d2      	lsls	r2, r2, #31
 8007880:	d401      	bmi.n	8007886 <setvbuf+0x12e>
 8007882:	059b      	lsls	r3, r3, #22
 8007884:	d513      	bpl.n	80078ae <setvbuf+0x156>
 8007886:	2500      	movs	r5, #0
 8007888:	e7d5      	b.n	8007836 <setvbuf+0xde>
 800788a:	4648      	mov	r0, r9
 800788c:	f000 f9e2 	bl	8007c54 <malloc>
 8007890:	4606      	mov	r6, r0
 8007892:	2800      	cmp	r0, #0
 8007894:	d0b8      	beq.n	8007808 <setvbuf+0xb0>
 8007896:	89a3      	ldrh	r3, [r4, #12]
 8007898:	464d      	mov	r5, r9
 800789a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800789e:	81a3      	strh	r3, [r4, #12]
 80078a0:	e7cf      	b.n	8007842 <setvbuf+0xea>
 80078a2:	2500      	movs	r5, #0
 80078a4:	e7b2      	b.n	800780c <setvbuf+0xb4>
 80078a6:	46a9      	mov	r9, r5
 80078a8:	e7f5      	b.n	8007896 <setvbuf+0x13e>
 80078aa:	60a2      	str	r2, [r4, #8]
 80078ac:	e7e6      	b.n	800787c <setvbuf+0x124>
 80078ae:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078b0:	f000 f978 	bl	8007ba4 <__retarget_lock_release_recursive>
 80078b4:	e7e7      	b.n	8007886 <setvbuf+0x12e>
 80078b6:	f04f 35ff 	mov.w	r5, #4294967295
 80078ba:	e7bc      	b.n	8007836 <setvbuf+0xde>
 80078bc:	20000048 	.word	0x20000048

080078c0 <siprintf>:
 80078c0:	b40e      	push	{r1, r2, r3}
 80078c2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80078c6:	b500      	push	{lr}
 80078c8:	b09c      	sub	sp, #112	@ 0x70
 80078ca:	ab1d      	add	r3, sp, #116	@ 0x74
 80078cc:	9002      	str	r0, [sp, #8]
 80078ce:	9006      	str	r0, [sp, #24]
 80078d0:	9107      	str	r1, [sp, #28]
 80078d2:	9104      	str	r1, [sp, #16]
 80078d4:	4808      	ldr	r0, [pc, #32]	@ (80078f8 <siprintf+0x38>)
 80078d6:	4909      	ldr	r1, [pc, #36]	@ (80078fc <siprintf+0x3c>)
 80078d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80078dc:	9105      	str	r1, [sp, #20]
 80078de:	6800      	ldr	r0, [r0, #0]
 80078e0:	a902      	add	r1, sp, #8
 80078e2:	9301      	str	r3, [sp, #4]
 80078e4:	f000 fac8 	bl	8007e78 <_svfiprintf_r>
 80078e8:	2200      	movs	r2, #0
 80078ea:	9b02      	ldr	r3, [sp, #8]
 80078ec:	701a      	strb	r2, [r3, #0]
 80078ee:	b01c      	add	sp, #112	@ 0x70
 80078f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80078f4:	b003      	add	sp, #12
 80078f6:	4770      	bx	lr
 80078f8:	20000048 	.word	0x20000048
 80078fc:	ffff0208 	.word	0xffff0208

08007900 <__sread>:
 8007900:	b510      	push	{r4, lr}
 8007902:	460c      	mov	r4, r1
 8007904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007908:	f000 f8fc 	bl	8007b04 <_read_r>
 800790c:	2800      	cmp	r0, #0
 800790e:	bfab      	itete	ge
 8007910:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007912:	89a3      	ldrhlt	r3, [r4, #12]
 8007914:	181b      	addge	r3, r3, r0
 8007916:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800791a:	bfac      	ite	ge
 800791c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800791e:	81a3      	strhlt	r3, [r4, #12]
 8007920:	bd10      	pop	{r4, pc}

08007922 <__swrite>:
 8007922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007926:	461f      	mov	r7, r3
 8007928:	898b      	ldrh	r3, [r1, #12]
 800792a:	4605      	mov	r5, r0
 800792c:	05db      	lsls	r3, r3, #23
 800792e:	460c      	mov	r4, r1
 8007930:	4616      	mov	r6, r2
 8007932:	d505      	bpl.n	8007940 <__swrite+0x1e>
 8007934:	2302      	movs	r3, #2
 8007936:	2200      	movs	r2, #0
 8007938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800793c:	f000 f8d0 	bl	8007ae0 <_lseek_r>
 8007940:	89a3      	ldrh	r3, [r4, #12]
 8007942:	4632      	mov	r2, r6
 8007944:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007948:	81a3      	strh	r3, [r4, #12]
 800794a:	4628      	mov	r0, r5
 800794c:	463b      	mov	r3, r7
 800794e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007952:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007956:	f000 b8e7 	b.w	8007b28 <_write_r>

0800795a <__sseek>:
 800795a:	b510      	push	{r4, lr}
 800795c:	460c      	mov	r4, r1
 800795e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007962:	f000 f8bd 	bl	8007ae0 <_lseek_r>
 8007966:	1c43      	adds	r3, r0, #1
 8007968:	89a3      	ldrh	r3, [r4, #12]
 800796a:	bf15      	itete	ne
 800796c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800796e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007972:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007976:	81a3      	strheq	r3, [r4, #12]
 8007978:	bf18      	it	ne
 800797a:	81a3      	strhne	r3, [r4, #12]
 800797c:	bd10      	pop	{r4, pc}

0800797e <__sclose>:
 800797e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007982:	f000 b89d 	b.w	8007ac0 <_close_r>

08007986 <__swbuf_r>:
 8007986:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007988:	460e      	mov	r6, r1
 800798a:	4614      	mov	r4, r2
 800798c:	4605      	mov	r5, r0
 800798e:	b118      	cbz	r0, 8007998 <__swbuf_r+0x12>
 8007990:	6a03      	ldr	r3, [r0, #32]
 8007992:	b90b      	cbnz	r3, 8007998 <__swbuf_r+0x12>
 8007994:	f7ff fe3a 	bl	800760c <__sinit>
 8007998:	69a3      	ldr	r3, [r4, #24]
 800799a:	60a3      	str	r3, [r4, #8]
 800799c:	89a3      	ldrh	r3, [r4, #12]
 800799e:	071a      	lsls	r2, r3, #28
 80079a0:	d501      	bpl.n	80079a6 <__swbuf_r+0x20>
 80079a2:	6923      	ldr	r3, [r4, #16]
 80079a4:	b943      	cbnz	r3, 80079b8 <__swbuf_r+0x32>
 80079a6:	4621      	mov	r1, r4
 80079a8:	4628      	mov	r0, r5
 80079aa:	f000 f82b 	bl	8007a04 <__swsetup_r>
 80079ae:	b118      	cbz	r0, 80079b8 <__swbuf_r+0x32>
 80079b0:	f04f 37ff 	mov.w	r7, #4294967295
 80079b4:	4638      	mov	r0, r7
 80079b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079b8:	6823      	ldr	r3, [r4, #0]
 80079ba:	6922      	ldr	r2, [r4, #16]
 80079bc:	b2f6      	uxtb	r6, r6
 80079be:	1a98      	subs	r0, r3, r2
 80079c0:	6963      	ldr	r3, [r4, #20]
 80079c2:	4637      	mov	r7, r6
 80079c4:	4283      	cmp	r3, r0
 80079c6:	dc05      	bgt.n	80079d4 <__swbuf_r+0x4e>
 80079c8:	4621      	mov	r1, r4
 80079ca:	4628      	mov	r0, r5
 80079cc:	f000 fea2 	bl	8008714 <_fflush_r>
 80079d0:	2800      	cmp	r0, #0
 80079d2:	d1ed      	bne.n	80079b0 <__swbuf_r+0x2a>
 80079d4:	68a3      	ldr	r3, [r4, #8]
 80079d6:	3b01      	subs	r3, #1
 80079d8:	60a3      	str	r3, [r4, #8]
 80079da:	6823      	ldr	r3, [r4, #0]
 80079dc:	1c5a      	adds	r2, r3, #1
 80079de:	6022      	str	r2, [r4, #0]
 80079e0:	701e      	strb	r6, [r3, #0]
 80079e2:	6962      	ldr	r2, [r4, #20]
 80079e4:	1c43      	adds	r3, r0, #1
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d004      	beq.n	80079f4 <__swbuf_r+0x6e>
 80079ea:	89a3      	ldrh	r3, [r4, #12]
 80079ec:	07db      	lsls	r3, r3, #31
 80079ee:	d5e1      	bpl.n	80079b4 <__swbuf_r+0x2e>
 80079f0:	2e0a      	cmp	r6, #10
 80079f2:	d1df      	bne.n	80079b4 <__swbuf_r+0x2e>
 80079f4:	4621      	mov	r1, r4
 80079f6:	4628      	mov	r0, r5
 80079f8:	f000 fe8c 	bl	8008714 <_fflush_r>
 80079fc:	2800      	cmp	r0, #0
 80079fe:	d0d9      	beq.n	80079b4 <__swbuf_r+0x2e>
 8007a00:	e7d6      	b.n	80079b0 <__swbuf_r+0x2a>
	...

08007a04 <__swsetup_r>:
 8007a04:	b538      	push	{r3, r4, r5, lr}
 8007a06:	4b29      	ldr	r3, [pc, #164]	@ (8007aac <__swsetup_r+0xa8>)
 8007a08:	4605      	mov	r5, r0
 8007a0a:	6818      	ldr	r0, [r3, #0]
 8007a0c:	460c      	mov	r4, r1
 8007a0e:	b118      	cbz	r0, 8007a18 <__swsetup_r+0x14>
 8007a10:	6a03      	ldr	r3, [r0, #32]
 8007a12:	b90b      	cbnz	r3, 8007a18 <__swsetup_r+0x14>
 8007a14:	f7ff fdfa 	bl	800760c <__sinit>
 8007a18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a1c:	0719      	lsls	r1, r3, #28
 8007a1e:	d422      	bmi.n	8007a66 <__swsetup_r+0x62>
 8007a20:	06da      	lsls	r2, r3, #27
 8007a22:	d407      	bmi.n	8007a34 <__swsetup_r+0x30>
 8007a24:	2209      	movs	r2, #9
 8007a26:	602a      	str	r2, [r5, #0]
 8007a28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a30:	81a3      	strh	r3, [r4, #12]
 8007a32:	e033      	b.n	8007a9c <__swsetup_r+0x98>
 8007a34:	0758      	lsls	r0, r3, #29
 8007a36:	d512      	bpl.n	8007a5e <__swsetup_r+0x5a>
 8007a38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007a3a:	b141      	cbz	r1, 8007a4e <__swsetup_r+0x4a>
 8007a3c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007a40:	4299      	cmp	r1, r3
 8007a42:	d002      	beq.n	8007a4a <__swsetup_r+0x46>
 8007a44:	4628      	mov	r0, r5
 8007a46:	f000 f8bd 	bl	8007bc4 <_free_r>
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	6363      	str	r3, [r4, #52]	@ 0x34
 8007a4e:	89a3      	ldrh	r3, [r4, #12]
 8007a50:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007a54:	81a3      	strh	r3, [r4, #12]
 8007a56:	2300      	movs	r3, #0
 8007a58:	6063      	str	r3, [r4, #4]
 8007a5a:	6923      	ldr	r3, [r4, #16]
 8007a5c:	6023      	str	r3, [r4, #0]
 8007a5e:	89a3      	ldrh	r3, [r4, #12]
 8007a60:	f043 0308 	orr.w	r3, r3, #8
 8007a64:	81a3      	strh	r3, [r4, #12]
 8007a66:	6923      	ldr	r3, [r4, #16]
 8007a68:	b94b      	cbnz	r3, 8007a7e <__swsetup_r+0x7a>
 8007a6a:	89a3      	ldrh	r3, [r4, #12]
 8007a6c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007a70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a74:	d003      	beq.n	8007a7e <__swsetup_r+0x7a>
 8007a76:	4621      	mov	r1, r4
 8007a78:	4628      	mov	r0, r5
 8007a7a:	f000 fe98 	bl	80087ae <__smakebuf_r>
 8007a7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a82:	f013 0201 	ands.w	r2, r3, #1
 8007a86:	d00a      	beq.n	8007a9e <__swsetup_r+0x9a>
 8007a88:	2200      	movs	r2, #0
 8007a8a:	60a2      	str	r2, [r4, #8]
 8007a8c:	6962      	ldr	r2, [r4, #20]
 8007a8e:	4252      	negs	r2, r2
 8007a90:	61a2      	str	r2, [r4, #24]
 8007a92:	6922      	ldr	r2, [r4, #16]
 8007a94:	b942      	cbnz	r2, 8007aa8 <__swsetup_r+0xa4>
 8007a96:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007a9a:	d1c5      	bne.n	8007a28 <__swsetup_r+0x24>
 8007a9c:	bd38      	pop	{r3, r4, r5, pc}
 8007a9e:	0799      	lsls	r1, r3, #30
 8007aa0:	bf58      	it	pl
 8007aa2:	6962      	ldrpl	r2, [r4, #20]
 8007aa4:	60a2      	str	r2, [r4, #8]
 8007aa6:	e7f4      	b.n	8007a92 <__swsetup_r+0x8e>
 8007aa8:	2000      	movs	r0, #0
 8007aaa:	e7f7      	b.n	8007a9c <__swsetup_r+0x98>
 8007aac:	20000048 	.word	0x20000048

08007ab0 <memset>:
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	4402      	add	r2, r0
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d100      	bne.n	8007aba <memset+0xa>
 8007ab8:	4770      	bx	lr
 8007aba:	f803 1b01 	strb.w	r1, [r3], #1
 8007abe:	e7f9      	b.n	8007ab4 <memset+0x4>

08007ac0 <_close_r>:
 8007ac0:	b538      	push	{r3, r4, r5, lr}
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	4d05      	ldr	r5, [pc, #20]	@ (8007adc <_close_r+0x1c>)
 8007ac6:	4604      	mov	r4, r0
 8007ac8:	4608      	mov	r0, r1
 8007aca:	602b      	str	r3, [r5, #0]
 8007acc:	f7fa ff8a 	bl	80029e4 <_close>
 8007ad0:	1c43      	adds	r3, r0, #1
 8007ad2:	d102      	bne.n	8007ada <_close_r+0x1a>
 8007ad4:	682b      	ldr	r3, [r5, #0]
 8007ad6:	b103      	cbz	r3, 8007ada <_close_r+0x1a>
 8007ad8:	6023      	str	r3, [r4, #0]
 8007ada:	bd38      	pop	{r3, r4, r5, pc}
 8007adc:	20000390 	.word	0x20000390

08007ae0 <_lseek_r>:
 8007ae0:	b538      	push	{r3, r4, r5, lr}
 8007ae2:	4604      	mov	r4, r0
 8007ae4:	4608      	mov	r0, r1
 8007ae6:	4611      	mov	r1, r2
 8007ae8:	2200      	movs	r2, #0
 8007aea:	4d05      	ldr	r5, [pc, #20]	@ (8007b00 <_lseek_r+0x20>)
 8007aec:	602a      	str	r2, [r5, #0]
 8007aee:	461a      	mov	r2, r3
 8007af0:	f7fa ff9c 	bl	8002a2c <_lseek>
 8007af4:	1c43      	adds	r3, r0, #1
 8007af6:	d102      	bne.n	8007afe <_lseek_r+0x1e>
 8007af8:	682b      	ldr	r3, [r5, #0]
 8007afa:	b103      	cbz	r3, 8007afe <_lseek_r+0x1e>
 8007afc:	6023      	str	r3, [r4, #0]
 8007afe:	bd38      	pop	{r3, r4, r5, pc}
 8007b00:	20000390 	.word	0x20000390

08007b04 <_read_r>:
 8007b04:	b538      	push	{r3, r4, r5, lr}
 8007b06:	4604      	mov	r4, r0
 8007b08:	4608      	mov	r0, r1
 8007b0a:	4611      	mov	r1, r2
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	4d05      	ldr	r5, [pc, #20]	@ (8007b24 <_read_r+0x20>)
 8007b10:	602a      	str	r2, [r5, #0]
 8007b12:	461a      	mov	r2, r3
 8007b14:	f7fb f9fa 	bl	8002f0c <_read>
 8007b18:	1c43      	adds	r3, r0, #1
 8007b1a:	d102      	bne.n	8007b22 <_read_r+0x1e>
 8007b1c:	682b      	ldr	r3, [r5, #0]
 8007b1e:	b103      	cbz	r3, 8007b22 <_read_r+0x1e>
 8007b20:	6023      	str	r3, [r4, #0]
 8007b22:	bd38      	pop	{r3, r4, r5, pc}
 8007b24:	20000390 	.word	0x20000390

08007b28 <_write_r>:
 8007b28:	b538      	push	{r3, r4, r5, lr}
 8007b2a:	4604      	mov	r4, r0
 8007b2c:	4608      	mov	r0, r1
 8007b2e:	4611      	mov	r1, r2
 8007b30:	2200      	movs	r2, #0
 8007b32:	4d05      	ldr	r5, [pc, #20]	@ (8007b48 <_write_r+0x20>)
 8007b34:	602a      	str	r2, [r5, #0]
 8007b36:	461a      	mov	r2, r3
 8007b38:	f7fb f9bc 	bl	8002eb4 <_write>
 8007b3c:	1c43      	adds	r3, r0, #1
 8007b3e:	d102      	bne.n	8007b46 <_write_r+0x1e>
 8007b40:	682b      	ldr	r3, [r5, #0]
 8007b42:	b103      	cbz	r3, 8007b46 <_write_r+0x1e>
 8007b44:	6023      	str	r3, [r4, #0]
 8007b46:	bd38      	pop	{r3, r4, r5, pc}
 8007b48:	20000390 	.word	0x20000390

08007b4c <__errno>:
 8007b4c:	4b01      	ldr	r3, [pc, #4]	@ (8007b54 <__errno+0x8>)
 8007b4e:	6818      	ldr	r0, [r3, #0]
 8007b50:	4770      	bx	lr
 8007b52:	bf00      	nop
 8007b54:	20000048 	.word	0x20000048

08007b58 <__libc_init_array>:
 8007b58:	b570      	push	{r4, r5, r6, lr}
 8007b5a:	2600      	movs	r6, #0
 8007b5c:	4d0c      	ldr	r5, [pc, #48]	@ (8007b90 <__libc_init_array+0x38>)
 8007b5e:	4c0d      	ldr	r4, [pc, #52]	@ (8007b94 <__libc_init_array+0x3c>)
 8007b60:	1b64      	subs	r4, r4, r5
 8007b62:	10a4      	asrs	r4, r4, #2
 8007b64:	42a6      	cmp	r6, r4
 8007b66:	d109      	bne.n	8007b7c <__libc_init_array+0x24>
 8007b68:	f000 feee 	bl	8008948 <_init>
 8007b6c:	2600      	movs	r6, #0
 8007b6e:	4d0a      	ldr	r5, [pc, #40]	@ (8007b98 <__libc_init_array+0x40>)
 8007b70:	4c0a      	ldr	r4, [pc, #40]	@ (8007b9c <__libc_init_array+0x44>)
 8007b72:	1b64      	subs	r4, r4, r5
 8007b74:	10a4      	asrs	r4, r4, #2
 8007b76:	42a6      	cmp	r6, r4
 8007b78:	d105      	bne.n	8007b86 <__libc_init_array+0x2e>
 8007b7a:	bd70      	pop	{r4, r5, r6, pc}
 8007b7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b80:	4798      	blx	r3
 8007b82:	3601      	adds	r6, #1
 8007b84:	e7ee      	b.n	8007b64 <__libc_init_array+0xc>
 8007b86:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b8a:	4798      	blx	r3
 8007b8c:	3601      	adds	r6, #1
 8007b8e:	e7f2      	b.n	8007b76 <__libc_init_array+0x1e>
 8007b90:	080098bc 	.word	0x080098bc
 8007b94:	080098bc 	.word	0x080098bc
 8007b98:	080098bc 	.word	0x080098bc
 8007b9c:	080098c0 	.word	0x080098c0

08007ba0 <__retarget_lock_init_recursive>:
 8007ba0:	4770      	bx	lr

08007ba2 <__retarget_lock_acquire_recursive>:
 8007ba2:	4770      	bx	lr

08007ba4 <__retarget_lock_release_recursive>:
 8007ba4:	4770      	bx	lr

08007ba6 <memcpy>:
 8007ba6:	440a      	add	r2, r1
 8007ba8:	4291      	cmp	r1, r2
 8007baa:	f100 33ff 	add.w	r3, r0, #4294967295
 8007bae:	d100      	bne.n	8007bb2 <memcpy+0xc>
 8007bb0:	4770      	bx	lr
 8007bb2:	b510      	push	{r4, lr}
 8007bb4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bb8:	4291      	cmp	r1, r2
 8007bba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007bbe:	d1f9      	bne.n	8007bb4 <memcpy+0xe>
 8007bc0:	bd10      	pop	{r4, pc}
	...

08007bc4 <_free_r>:
 8007bc4:	b538      	push	{r3, r4, r5, lr}
 8007bc6:	4605      	mov	r5, r0
 8007bc8:	2900      	cmp	r1, #0
 8007bca:	d040      	beq.n	8007c4e <_free_r+0x8a>
 8007bcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bd0:	1f0c      	subs	r4, r1, #4
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	bfb8      	it	lt
 8007bd6:	18e4      	addlt	r4, r4, r3
 8007bd8:	f000 f8e6 	bl	8007da8 <__malloc_lock>
 8007bdc:	4a1c      	ldr	r2, [pc, #112]	@ (8007c50 <_free_r+0x8c>)
 8007bde:	6813      	ldr	r3, [r2, #0]
 8007be0:	b933      	cbnz	r3, 8007bf0 <_free_r+0x2c>
 8007be2:	6063      	str	r3, [r4, #4]
 8007be4:	6014      	str	r4, [r2, #0]
 8007be6:	4628      	mov	r0, r5
 8007be8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bec:	f000 b8e2 	b.w	8007db4 <__malloc_unlock>
 8007bf0:	42a3      	cmp	r3, r4
 8007bf2:	d908      	bls.n	8007c06 <_free_r+0x42>
 8007bf4:	6820      	ldr	r0, [r4, #0]
 8007bf6:	1821      	adds	r1, r4, r0
 8007bf8:	428b      	cmp	r3, r1
 8007bfa:	bf01      	itttt	eq
 8007bfc:	6819      	ldreq	r1, [r3, #0]
 8007bfe:	685b      	ldreq	r3, [r3, #4]
 8007c00:	1809      	addeq	r1, r1, r0
 8007c02:	6021      	streq	r1, [r4, #0]
 8007c04:	e7ed      	b.n	8007be2 <_free_r+0x1e>
 8007c06:	461a      	mov	r2, r3
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	b10b      	cbz	r3, 8007c10 <_free_r+0x4c>
 8007c0c:	42a3      	cmp	r3, r4
 8007c0e:	d9fa      	bls.n	8007c06 <_free_r+0x42>
 8007c10:	6811      	ldr	r1, [r2, #0]
 8007c12:	1850      	adds	r0, r2, r1
 8007c14:	42a0      	cmp	r0, r4
 8007c16:	d10b      	bne.n	8007c30 <_free_r+0x6c>
 8007c18:	6820      	ldr	r0, [r4, #0]
 8007c1a:	4401      	add	r1, r0
 8007c1c:	1850      	adds	r0, r2, r1
 8007c1e:	4283      	cmp	r3, r0
 8007c20:	6011      	str	r1, [r2, #0]
 8007c22:	d1e0      	bne.n	8007be6 <_free_r+0x22>
 8007c24:	6818      	ldr	r0, [r3, #0]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	4408      	add	r0, r1
 8007c2a:	6010      	str	r0, [r2, #0]
 8007c2c:	6053      	str	r3, [r2, #4]
 8007c2e:	e7da      	b.n	8007be6 <_free_r+0x22>
 8007c30:	d902      	bls.n	8007c38 <_free_r+0x74>
 8007c32:	230c      	movs	r3, #12
 8007c34:	602b      	str	r3, [r5, #0]
 8007c36:	e7d6      	b.n	8007be6 <_free_r+0x22>
 8007c38:	6820      	ldr	r0, [r4, #0]
 8007c3a:	1821      	adds	r1, r4, r0
 8007c3c:	428b      	cmp	r3, r1
 8007c3e:	bf01      	itttt	eq
 8007c40:	6819      	ldreq	r1, [r3, #0]
 8007c42:	685b      	ldreq	r3, [r3, #4]
 8007c44:	1809      	addeq	r1, r1, r0
 8007c46:	6021      	streq	r1, [r4, #0]
 8007c48:	6063      	str	r3, [r4, #4]
 8007c4a:	6054      	str	r4, [r2, #4]
 8007c4c:	e7cb      	b.n	8007be6 <_free_r+0x22>
 8007c4e:	bd38      	pop	{r3, r4, r5, pc}
 8007c50:	2000039c 	.word	0x2000039c

08007c54 <malloc>:
 8007c54:	4b02      	ldr	r3, [pc, #8]	@ (8007c60 <malloc+0xc>)
 8007c56:	4601      	mov	r1, r0
 8007c58:	6818      	ldr	r0, [r3, #0]
 8007c5a:	f000 b825 	b.w	8007ca8 <_malloc_r>
 8007c5e:	bf00      	nop
 8007c60:	20000048 	.word	0x20000048

08007c64 <sbrk_aligned>:
 8007c64:	b570      	push	{r4, r5, r6, lr}
 8007c66:	4e0f      	ldr	r6, [pc, #60]	@ (8007ca4 <sbrk_aligned+0x40>)
 8007c68:	460c      	mov	r4, r1
 8007c6a:	6831      	ldr	r1, [r6, #0]
 8007c6c:	4605      	mov	r5, r0
 8007c6e:	b911      	cbnz	r1, 8007c76 <sbrk_aligned+0x12>
 8007c70:	f000 fe16 	bl	80088a0 <_sbrk_r>
 8007c74:	6030      	str	r0, [r6, #0]
 8007c76:	4621      	mov	r1, r4
 8007c78:	4628      	mov	r0, r5
 8007c7a:	f000 fe11 	bl	80088a0 <_sbrk_r>
 8007c7e:	1c43      	adds	r3, r0, #1
 8007c80:	d103      	bne.n	8007c8a <sbrk_aligned+0x26>
 8007c82:	f04f 34ff 	mov.w	r4, #4294967295
 8007c86:	4620      	mov	r0, r4
 8007c88:	bd70      	pop	{r4, r5, r6, pc}
 8007c8a:	1cc4      	adds	r4, r0, #3
 8007c8c:	f024 0403 	bic.w	r4, r4, #3
 8007c90:	42a0      	cmp	r0, r4
 8007c92:	d0f8      	beq.n	8007c86 <sbrk_aligned+0x22>
 8007c94:	1a21      	subs	r1, r4, r0
 8007c96:	4628      	mov	r0, r5
 8007c98:	f000 fe02 	bl	80088a0 <_sbrk_r>
 8007c9c:	3001      	adds	r0, #1
 8007c9e:	d1f2      	bne.n	8007c86 <sbrk_aligned+0x22>
 8007ca0:	e7ef      	b.n	8007c82 <sbrk_aligned+0x1e>
 8007ca2:	bf00      	nop
 8007ca4:	20000398 	.word	0x20000398

08007ca8 <_malloc_r>:
 8007ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cac:	1ccd      	adds	r5, r1, #3
 8007cae:	f025 0503 	bic.w	r5, r5, #3
 8007cb2:	3508      	adds	r5, #8
 8007cb4:	2d0c      	cmp	r5, #12
 8007cb6:	bf38      	it	cc
 8007cb8:	250c      	movcc	r5, #12
 8007cba:	2d00      	cmp	r5, #0
 8007cbc:	4606      	mov	r6, r0
 8007cbe:	db01      	blt.n	8007cc4 <_malloc_r+0x1c>
 8007cc0:	42a9      	cmp	r1, r5
 8007cc2:	d904      	bls.n	8007cce <_malloc_r+0x26>
 8007cc4:	230c      	movs	r3, #12
 8007cc6:	6033      	str	r3, [r6, #0]
 8007cc8:	2000      	movs	r0, #0
 8007cca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007da4 <_malloc_r+0xfc>
 8007cd2:	f000 f869 	bl	8007da8 <__malloc_lock>
 8007cd6:	f8d8 3000 	ldr.w	r3, [r8]
 8007cda:	461c      	mov	r4, r3
 8007cdc:	bb44      	cbnz	r4, 8007d30 <_malloc_r+0x88>
 8007cde:	4629      	mov	r1, r5
 8007ce0:	4630      	mov	r0, r6
 8007ce2:	f7ff ffbf 	bl	8007c64 <sbrk_aligned>
 8007ce6:	1c43      	adds	r3, r0, #1
 8007ce8:	4604      	mov	r4, r0
 8007cea:	d158      	bne.n	8007d9e <_malloc_r+0xf6>
 8007cec:	f8d8 4000 	ldr.w	r4, [r8]
 8007cf0:	4627      	mov	r7, r4
 8007cf2:	2f00      	cmp	r7, #0
 8007cf4:	d143      	bne.n	8007d7e <_malloc_r+0xd6>
 8007cf6:	2c00      	cmp	r4, #0
 8007cf8:	d04b      	beq.n	8007d92 <_malloc_r+0xea>
 8007cfa:	6823      	ldr	r3, [r4, #0]
 8007cfc:	4639      	mov	r1, r7
 8007cfe:	4630      	mov	r0, r6
 8007d00:	eb04 0903 	add.w	r9, r4, r3
 8007d04:	f000 fdcc 	bl	80088a0 <_sbrk_r>
 8007d08:	4581      	cmp	r9, r0
 8007d0a:	d142      	bne.n	8007d92 <_malloc_r+0xea>
 8007d0c:	6821      	ldr	r1, [r4, #0]
 8007d0e:	4630      	mov	r0, r6
 8007d10:	1a6d      	subs	r5, r5, r1
 8007d12:	4629      	mov	r1, r5
 8007d14:	f7ff ffa6 	bl	8007c64 <sbrk_aligned>
 8007d18:	3001      	adds	r0, #1
 8007d1a:	d03a      	beq.n	8007d92 <_malloc_r+0xea>
 8007d1c:	6823      	ldr	r3, [r4, #0]
 8007d1e:	442b      	add	r3, r5
 8007d20:	6023      	str	r3, [r4, #0]
 8007d22:	f8d8 3000 	ldr.w	r3, [r8]
 8007d26:	685a      	ldr	r2, [r3, #4]
 8007d28:	bb62      	cbnz	r2, 8007d84 <_malloc_r+0xdc>
 8007d2a:	f8c8 7000 	str.w	r7, [r8]
 8007d2e:	e00f      	b.n	8007d50 <_malloc_r+0xa8>
 8007d30:	6822      	ldr	r2, [r4, #0]
 8007d32:	1b52      	subs	r2, r2, r5
 8007d34:	d420      	bmi.n	8007d78 <_malloc_r+0xd0>
 8007d36:	2a0b      	cmp	r2, #11
 8007d38:	d917      	bls.n	8007d6a <_malloc_r+0xc2>
 8007d3a:	1961      	adds	r1, r4, r5
 8007d3c:	42a3      	cmp	r3, r4
 8007d3e:	6025      	str	r5, [r4, #0]
 8007d40:	bf18      	it	ne
 8007d42:	6059      	strne	r1, [r3, #4]
 8007d44:	6863      	ldr	r3, [r4, #4]
 8007d46:	bf08      	it	eq
 8007d48:	f8c8 1000 	streq.w	r1, [r8]
 8007d4c:	5162      	str	r2, [r4, r5]
 8007d4e:	604b      	str	r3, [r1, #4]
 8007d50:	4630      	mov	r0, r6
 8007d52:	f000 f82f 	bl	8007db4 <__malloc_unlock>
 8007d56:	f104 000b 	add.w	r0, r4, #11
 8007d5a:	1d23      	adds	r3, r4, #4
 8007d5c:	f020 0007 	bic.w	r0, r0, #7
 8007d60:	1ac2      	subs	r2, r0, r3
 8007d62:	bf1c      	itt	ne
 8007d64:	1a1b      	subne	r3, r3, r0
 8007d66:	50a3      	strne	r3, [r4, r2]
 8007d68:	e7af      	b.n	8007cca <_malloc_r+0x22>
 8007d6a:	6862      	ldr	r2, [r4, #4]
 8007d6c:	42a3      	cmp	r3, r4
 8007d6e:	bf0c      	ite	eq
 8007d70:	f8c8 2000 	streq.w	r2, [r8]
 8007d74:	605a      	strne	r2, [r3, #4]
 8007d76:	e7eb      	b.n	8007d50 <_malloc_r+0xa8>
 8007d78:	4623      	mov	r3, r4
 8007d7a:	6864      	ldr	r4, [r4, #4]
 8007d7c:	e7ae      	b.n	8007cdc <_malloc_r+0x34>
 8007d7e:	463c      	mov	r4, r7
 8007d80:	687f      	ldr	r7, [r7, #4]
 8007d82:	e7b6      	b.n	8007cf2 <_malloc_r+0x4a>
 8007d84:	461a      	mov	r2, r3
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	42a3      	cmp	r3, r4
 8007d8a:	d1fb      	bne.n	8007d84 <_malloc_r+0xdc>
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	6053      	str	r3, [r2, #4]
 8007d90:	e7de      	b.n	8007d50 <_malloc_r+0xa8>
 8007d92:	230c      	movs	r3, #12
 8007d94:	4630      	mov	r0, r6
 8007d96:	6033      	str	r3, [r6, #0]
 8007d98:	f000 f80c 	bl	8007db4 <__malloc_unlock>
 8007d9c:	e794      	b.n	8007cc8 <_malloc_r+0x20>
 8007d9e:	6005      	str	r5, [r0, #0]
 8007da0:	e7d6      	b.n	8007d50 <_malloc_r+0xa8>
 8007da2:	bf00      	nop
 8007da4:	2000039c 	.word	0x2000039c

08007da8 <__malloc_lock>:
 8007da8:	4801      	ldr	r0, [pc, #4]	@ (8007db0 <__malloc_lock+0x8>)
 8007daa:	f7ff befa 	b.w	8007ba2 <__retarget_lock_acquire_recursive>
 8007dae:	bf00      	nop
 8007db0:	20000394 	.word	0x20000394

08007db4 <__malloc_unlock>:
 8007db4:	4801      	ldr	r0, [pc, #4]	@ (8007dbc <__malloc_unlock+0x8>)
 8007db6:	f7ff bef5 	b.w	8007ba4 <__retarget_lock_release_recursive>
 8007dba:	bf00      	nop
 8007dbc:	20000394 	.word	0x20000394

08007dc0 <__ssputs_r>:
 8007dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dc4:	461f      	mov	r7, r3
 8007dc6:	688e      	ldr	r6, [r1, #8]
 8007dc8:	4682      	mov	sl, r0
 8007dca:	42be      	cmp	r6, r7
 8007dcc:	460c      	mov	r4, r1
 8007dce:	4690      	mov	r8, r2
 8007dd0:	680b      	ldr	r3, [r1, #0]
 8007dd2:	d82d      	bhi.n	8007e30 <__ssputs_r+0x70>
 8007dd4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007dd8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007ddc:	d026      	beq.n	8007e2c <__ssputs_r+0x6c>
 8007dde:	6965      	ldr	r5, [r4, #20]
 8007de0:	6909      	ldr	r1, [r1, #16]
 8007de2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007de6:	eba3 0901 	sub.w	r9, r3, r1
 8007dea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007dee:	1c7b      	adds	r3, r7, #1
 8007df0:	444b      	add	r3, r9
 8007df2:	106d      	asrs	r5, r5, #1
 8007df4:	429d      	cmp	r5, r3
 8007df6:	bf38      	it	cc
 8007df8:	461d      	movcc	r5, r3
 8007dfa:	0553      	lsls	r3, r2, #21
 8007dfc:	d527      	bpl.n	8007e4e <__ssputs_r+0x8e>
 8007dfe:	4629      	mov	r1, r5
 8007e00:	f7ff ff52 	bl	8007ca8 <_malloc_r>
 8007e04:	4606      	mov	r6, r0
 8007e06:	b360      	cbz	r0, 8007e62 <__ssputs_r+0xa2>
 8007e08:	464a      	mov	r2, r9
 8007e0a:	6921      	ldr	r1, [r4, #16]
 8007e0c:	f7ff fecb 	bl	8007ba6 <memcpy>
 8007e10:	89a3      	ldrh	r3, [r4, #12]
 8007e12:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007e16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e1a:	81a3      	strh	r3, [r4, #12]
 8007e1c:	6126      	str	r6, [r4, #16]
 8007e1e:	444e      	add	r6, r9
 8007e20:	6026      	str	r6, [r4, #0]
 8007e22:	463e      	mov	r6, r7
 8007e24:	6165      	str	r5, [r4, #20]
 8007e26:	eba5 0509 	sub.w	r5, r5, r9
 8007e2a:	60a5      	str	r5, [r4, #8]
 8007e2c:	42be      	cmp	r6, r7
 8007e2e:	d900      	bls.n	8007e32 <__ssputs_r+0x72>
 8007e30:	463e      	mov	r6, r7
 8007e32:	4632      	mov	r2, r6
 8007e34:	4641      	mov	r1, r8
 8007e36:	6820      	ldr	r0, [r4, #0]
 8007e38:	f000 fcf5 	bl	8008826 <memmove>
 8007e3c:	2000      	movs	r0, #0
 8007e3e:	68a3      	ldr	r3, [r4, #8]
 8007e40:	1b9b      	subs	r3, r3, r6
 8007e42:	60a3      	str	r3, [r4, #8]
 8007e44:	6823      	ldr	r3, [r4, #0]
 8007e46:	4433      	add	r3, r6
 8007e48:	6023      	str	r3, [r4, #0]
 8007e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e4e:	462a      	mov	r2, r5
 8007e50:	f000 fd44 	bl	80088dc <_realloc_r>
 8007e54:	4606      	mov	r6, r0
 8007e56:	2800      	cmp	r0, #0
 8007e58:	d1e0      	bne.n	8007e1c <__ssputs_r+0x5c>
 8007e5a:	4650      	mov	r0, sl
 8007e5c:	6921      	ldr	r1, [r4, #16]
 8007e5e:	f7ff feb1 	bl	8007bc4 <_free_r>
 8007e62:	230c      	movs	r3, #12
 8007e64:	f8ca 3000 	str.w	r3, [sl]
 8007e68:	89a3      	ldrh	r3, [r4, #12]
 8007e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8007e6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e72:	81a3      	strh	r3, [r4, #12]
 8007e74:	e7e9      	b.n	8007e4a <__ssputs_r+0x8a>
	...

08007e78 <_svfiprintf_r>:
 8007e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e7c:	4698      	mov	r8, r3
 8007e7e:	898b      	ldrh	r3, [r1, #12]
 8007e80:	4607      	mov	r7, r0
 8007e82:	061b      	lsls	r3, r3, #24
 8007e84:	460d      	mov	r5, r1
 8007e86:	4614      	mov	r4, r2
 8007e88:	b09d      	sub	sp, #116	@ 0x74
 8007e8a:	d510      	bpl.n	8007eae <_svfiprintf_r+0x36>
 8007e8c:	690b      	ldr	r3, [r1, #16]
 8007e8e:	b973      	cbnz	r3, 8007eae <_svfiprintf_r+0x36>
 8007e90:	2140      	movs	r1, #64	@ 0x40
 8007e92:	f7ff ff09 	bl	8007ca8 <_malloc_r>
 8007e96:	6028      	str	r0, [r5, #0]
 8007e98:	6128      	str	r0, [r5, #16]
 8007e9a:	b930      	cbnz	r0, 8007eaa <_svfiprintf_r+0x32>
 8007e9c:	230c      	movs	r3, #12
 8007e9e:	603b      	str	r3, [r7, #0]
 8007ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ea4:	b01d      	add	sp, #116	@ 0x74
 8007ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eaa:	2340      	movs	r3, #64	@ 0x40
 8007eac:	616b      	str	r3, [r5, #20]
 8007eae:	2300      	movs	r3, #0
 8007eb0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007eb2:	2320      	movs	r3, #32
 8007eb4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007eb8:	2330      	movs	r3, #48	@ 0x30
 8007eba:	f04f 0901 	mov.w	r9, #1
 8007ebe:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ec2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800805c <_svfiprintf_r+0x1e4>
 8007ec6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007eca:	4623      	mov	r3, r4
 8007ecc:	469a      	mov	sl, r3
 8007ece:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ed2:	b10a      	cbz	r2, 8007ed8 <_svfiprintf_r+0x60>
 8007ed4:	2a25      	cmp	r2, #37	@ 0x25
 8007ed6:	d1f9      	bne.n	8007ecc <_svfiprintf_r+0x54>
 8007ed8:	ebba 0b04 	subs.w	fp, sl, r4
 8007edc:	d00b      	beq.n	8007ef6 <_svfiprintf_r+0x7e>
 8007ede:	465b      	mov	r3, fp
 8007ee0:	4622      	mov	r2, r4
 8007ee2:	4629      	mov	r1, r5
 8007ee4:	4638      	mov	r0, r7
 8007ee6:	f7ff ff6b 	bl	8007dc0 <__ssputs_r>
 8007eea:	3001      	adds	r0, #1
 8007eec:	f000 80a7 	beq.w	800803e <_svfiprintf_r+0x1c6>
 8007ef0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ef2:	445a      	add	r2, fp
 8007ef4:	9209      	str	r2, [sp, #36]	@ 0x24
 8007ef6:	f89a 3000 	ldrb.w	r3, [sl]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	f000 809f 	beq.w	800803e <_svfiprintf_r+0x1c6>
 8007f00:	2300      	movs	r3, #0
 8007f02:	f04f 32ff 	mov.w	r2, #4294967295
 8007f06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f0a:	f10a 0a01 	add.w	sl, sl, #1
 8007f0e:	9304      	str	r3, [sp, #16]
 8007f10:	9307      	str	r3, [sp, #28]
 8007f12:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007f16:	931a      	str	r3, [sp, #104]	@ 0x68
 8007f18:	4654      	mov	r4, sl
 8007f1a:	2205      	movs	r2, #5
 8007f1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f20:	484e      	ldr	r0, [pc, #312]	@ (800805c <_svfiprintf_r+0x1e4>)
 8007f22:	f000 fccd 	bl	80088c0 <memchr>
 8007f26:	9a04      	ldr	r2, [sp, #16]
 8007f28:	b9d8      	cbnz	r0, 8007f62 <_svfiprintf_r+0xea>
 8007f2a:	06d0      	lsls	r0, r2, #27
 8007f2c:	bf44      	itt	mi
 8007f2e:	2320      	movmi	r3, #32
 8007f30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f34:	0711      	lsls	r1, r2, #28
 8007f36:	bf44      	itt	mi
 8007f38:	232b      	movmi	r3, #43	@ 0x2b
 8007f3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f3e:	f89a 3000 	ldrb.w	r3, [sl]
 8007f42:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f44:	d015      	beq.n	8007f72 <_svfiprintf_r+0xfa>
 8007f46:	4654      	mov	r4, sl
 8007f48:	2000      	movs	r0, #0
 8007f4a:	f04f 0c0a 	mov.w	ip, #10
 8007f4e:	9a07      	ldr	r2, [sp, #28]
 8007f50:	4621      	mov	r1, r4
 8007f52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f56:	3b30      	subs	r3, #48	@ 0x30
 8007f58:	2b09      	cmp	r3, #9
 8007f5a:	d94b      	bls.n	8007ff4 <_svfiprintf_r+0x17c>
 8007f5c:	b1b0      	cbz	r0, 8007f8c <_svfiprintf_r+0x114>
 8007f5e:	9207      	str	r2, [sp, #28]
 8007f60:	e014      	b.n	8007f8c <_svfiprintf_r+0x114>
 8007f62:	eba0 0308 	sub.w	r3, r0, r8
 8007f66:	fa09 f303 	lsl.w	r3, r9, r3
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	46a2      	mov	sl, r4
 8007f6e:	9304      	str	r3, [sp, #16]
 8007f70:	e7d2      	b.n	8007f18 <_svfiprintf_r+0xa0>
 8007f72:	9b03      	ldr	r3, [sp, #12]
 8007f74:	1d19      	adds	r1, r3, #4
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	9103      	str	r1, [sp, #12]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	bfbb      	ittet	lt
 8007f7e:	425b      	neglt	r3, r3
 8007f80:	f042 0202 	orrlt.w	r2, r2, #2
 8007f84:	9307      	strge	r3, [sp, #28]
 8007f86:	9307      	strlt	r3, [sp, #28]
 8007f88:	bfb8      	it	lt
 8007f8a:	9204      	strlt	r2, [sp, #16]
 8007f8c:	7823      	ldrb	r3, [r4, #0]
 8007f8e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f90:	d10a      	bne.n	8007fa8 <_svfiprintf_r+0x130>
 8007f92:	7863      	ldrb	r3, [r4, #1]
 8007f94:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f96:	d132      	bne.n	8007ffe <_svfiprintf_r+0x186>
 8007f98:	9b03      	ldr	r3, [sp, #12]
 8007f9a:	3402      	adds	r4, #2
 8007f9c:	1d1a      	adds	r2, r3, #4
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	9203      	str	r2, [sp, #12]
 8007fa2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007fa6:	9305      	str	r3, [sp, #20]
 8007fa8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008060 <_svfiprintf_r+0x1e8>
 8007fac:	2203      	movs	r2, #3
 8007fae:	4650      	mov	r0, sl
 8007fb0:	7821      	ldrb	r1, [r4, #0]
 8007fb2:	f000 fc85 	bl	80088c0 <memchr>
 8007fb6:	b138      	cbz	r0, 8007fc8 <_svfiprintf_r+0x150>
 8007fb8:	2240      	movs	r2, #64	@ 0x40
 8007fba:	9b04      	ldr	r3, [sp, #16]
 8007fbc:	eba0 000a 	sub.w	r0, r0, sl
 8007fc0:	4082      	lsls	r2, r0
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	3401      	adds	r4, #1
 8007fc6:	9304      	str	r3, [sp, #16]
 8007fc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fcc:	2206      	movs	r2, #6
 8007fce:	4825      	ldr	r0, [pc, #148]	@ (8008064 <_svfiprintf_r+0x1ec>)
 8007fd0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007fd4:	f000 fc74 	bl	80088c0 <memchr>
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	d036      	beq.n	800804a <_svfiprintf_r+0x1d2>
 8007fdc:	4b22      	ldr	r3, [pc, #136]	@ (8008068 <_svfiprintf_r+0x1f0>)
 8007fde:	bb1b      	cbnz	r3, 8008028 <_svfiprintf_r+0x1b0>
 8007fe0:	9b03      	ldr	r3, [sp, #12]
 8007fe2:	3307      	adds	r3, #7
 8007fe4:	f023 0307 	bic.w	r3, r3, #7
 8007fe8:	3308      	adds	r3, #8
 8007fea:	9303      	str	r3, [sp, #12]
 8007fec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fee:	4433      	add	r3, r6
 8007ff0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ff2:	e76a      	b.n	8007eca <_svfiprintf_r+0x52>
 8007ff4:	460c      	mov	r4, r1
 8007ff6:	2001      	movs	r0, #1
 8007ff8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ffc:	e7a8      	b.n	8007f50 <_svfiprintf_r+0xd8>
 8007ffe:	2300      	movs	r3, #0
 8008000:	f04f 0c0a 	mov.w	ip, #10
 8008004:	4619      	mov	r1, r3
 8008006:	3401      	adds	r4, #1
 8008008:	9305      	str	r3, [sp, #20]
 800800a:	4620      	mov	r0, r4
 800800c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008010:	3a30      	subs	r2, #48	@ 0x30
 8008012:	2a09      	cmp	r2, #9
 8008014:	d903      	bls.n	800801e <_svfiprintf_r+0x1a6>
 8008016:	2b00      	cmp	r3, #0
 8008018:	d0c6      	beq.n	8007fa8 <_svfiprintf_r+0x130>
 800801a:	9105      	str	r1, [sp, #20]
 800801c:	e7c4      	b.n	8007fa8 <_svfiprintf_r+0x130>
 800801e:	4604      	mov	r4, r0
 8008020:	2301      	movs	r3, #1
 8008022:	fb0c 2101 	mla	r1, ip, r1, r2
 8008026:	e7f0      	b.n	800800a <_svfiprintf_r+0x192>
 8008028:	ab03      	add	r3, sp, #12
 800802a:	9300      	str	r3, [sp, #0]
 800802c:	462a      	mov	r2, r5
 800802e:	4638      	mov	r0, r7
 8008030:	4b0e      	ldr	r3, [pc, #56]	@ (800806c <_svfiprintf_r+0x1f4>)
 8008032:	a904      	add	r1, sp, #16
 8008034:	f3af 8000 	nop.w
 8008038:	1c42      	adds	r2, r0, #1
 800803a:	4606      	mov	r6, r0
 800803c:	d1d6      	bne.n	8007fec <_svfiprintf_r+0x174>
 800803e:	89ab      	ldrh	r3, [r5, #12]
 8008040:	065b      	lsls	r3, r3, #25
 8008042:	f53f af2d 	bmi.w	8007ea0 <_svfiprintf_r+0x28>
 8008046:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008048:	e72c      	b.n	8007ea4 <_svfiprintf_r+0x2c>
 800804a:	ab03      	add	r3, sp, #12
 800804c:	9300      	str	r3, [sp, #0]
 800804e:	462a      	mov	r2, r5
 8008050:	4638      	mov	r0, r7
 8008052:	4b06      	ldr	r3, [pc, #24]	@ (800806c <_svfiprintf_r+0x1f4>)
 8008054:	a904      	add	r1, sp, #16
 8008056:	f000 f9bd 	bl	80083d4 <_printf_i>
 800805a:	e7ed      	b.n	8008038 <_svfiprintf_r+0x1c0>
 800805c:	0800987e 	.word	0x0800987e
 8008060:	08009884 	.word	0x08009884
 8008064:	08009888 	.word	0x08009888
 8008068:	00000000 	.word	0x00000000
 800806c:	08007dc1 	.word	0x08007dc1

08008070 <__sfputc_r>:
 8008070:	6893      	ldr	r3, [r2, #8]
 8008072:	b410      	push	{r4}
 8008074:	3b01      	subs	r3, #1
 8008076:	2b00      	cmp	r3, #0
 8008078:	6093      	str	r3, [r2, #8]
 800807a:	da07      	bge.n	800808c <__sfputc_r+0x1c>
 800807c:	6994      	ldr	r4, [r2, #24]
 800807e:	42a3      	cmp	r3, r4
 8008080:	db01      	blt.n	8008086 <__sfputc_r+0x16>
 8008082:	290a      	cmp	r1, #10
 8008084:	d102      	bne.n	800808c <__sfputc_r+0x1c>
 8008086:	bc10      	pop	{r4}
 8008088:	f7ff bc7d 	b.w	8007986 <__swbuf_r>
 800808c:	6813      	ldr	r3, [r2, #0]
 800808e:	1c58      	adds	r0, r3, #1
 8008090:	6010      	str	r0, [r2, #0]
 8008092:	7019      	strb	r1, [r3, #0]
 8008094:	4608      	mov	r0, r1
 8008096:	bc10      	pop	{r4}
 8008098:	4770      	bx	lr

0800809a <__sfputs_r>:
 800809a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800809c:	4606      	mov	r6, r0
 800809e:	460f      	mov	r7, r1
 80080a0:	4614      	mov	r4, r2
 80080a2:	18d5      	adds	r5, r2, r3
 80080a4:	42ac      	cmp	r4, r5
 80080a6:	d101      	bne.n	80080ac <__sfputs_r+0x12>
 80080a8:	2000      	movs	r0, #0
 80080aa:	e007      	b.n	80080bc <__sfputs_r+0x22>
 80080ac:	463a      	mov	r2, r7
 80080ae:	4630      	mov	r0, r6
 80080b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080b4:	f7ff ffdc 	bl	8008070 <__sfputc_r>
 80080b8:	1c43      	adds	r3, r0, #1
 80080ba:	d1f3      	bne.n	80080a4 <__sfputs_r+0xa>
 80080bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080080c0 <_vfiprintf_r>:
 80080c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080c4:	460d      	mov	r5, r1
 80080c6:	4614      	mov	r4, r2
 80080c8:	4698      	mov	r8, r3
 80080ca:	4606      	mov	r6, r0
 80080cc:	b09d      	sub	sp, #116	@ 0x74
 80080ce:	b118      	cbz	r0, 80080d8 <_vfiprintf_r+0x18>
 80080d0:	6a03      	ldr	r3, [r0, #32]
 80080d2:	b90b      	cbnz	r3, 80080d8 <_vfiprintf_r+0x18>
 80080d4:	f7ff fa9a 	bl	800760c <__sinit>
 80080d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80080da:	07d9      	lsls	r1, r3, #31
 80080dc:	d405      	bmi.n	80080ea <_vfiprintf_r+0x2a>
 80080de:	89ab      	ldrh	r3, [r5, #12]
 80080e0:	059a      	lsls	r2, r3, #22
 80080e2:	d402      	bmi.n	80080ea <_vfiprintf_r+0x2a>
 80080e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80080e6:	f7ff fd5c 	bl	8007ba2 <__retarget_lock_acquire_recursive>
 80080ea:	89ab      	ldrh	r3, [r5, #12]
 80080ec:	071b      	lsls	r3, r3, #28
 80080ee:	d501      	bpl.n	80080f4 <_vfiprintf_r+0x34>
 80080f0:	692b      	ldr	r3, [r5, #16]
 80080f2:	b99b      	cbnz	r3, 800811c <_vfiprintf_r+0x5c>
 80080f4:	4629      	mov	r1, r5
 80080f6:	4630      	mov	r0, r6
 80080f8:	f7ff fc84 	bl	8007a04 <__swsetup_r>
 80080fc:	b170      	cbz	r0, 800811c <_vfiprintf_r+0x5c>
 80080fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008100:	07dc      	lsls	r4, r3, #31
 8008102:	d504      	bpl.n	800810e <_vfiprintf_r+0x4e>
 8008104:	f04f 30ff 	mov.w	r0, #4294967295
 8008108:	b01d      	add	sp, #116	@ 0x74
 800810a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800810e:	89ab      	ldrh	r3, [r5, #12]
 8008110:	0598      	lsls	r0, r3, #22
 8008112:	d4f7      	bmi.n	8008104 <_vfiprintf_r+0x44>
 8008114:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008116:	f7ff fd45 	bl	8007ba4 <__retarget_lock_release_recursive>
 800811a:	e7f3      	b.n	8008104 <_vfiprintf_r+0x44>
 800811c:	2300      	movs	r3, #0
 800811e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008120:	2320      	movs	r3, #32
 8008122:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008126:	2330      	movs	r3, #48	@ 0x30
 8008128:	f04f 0901 	mov.w	r9, #1
 800812c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008130:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80082dc <_vfiprintf_r+0x21c>
 8008134:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008138:	4623      	mov	r3, r4
 800813a:	469a      	mov	sl, r3
 800813c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008140:	b10a      	cbz	r2, 8008146 <_vfiprintf_r+0x86>
 8008142:	2a25      	cmp	r2, #37	@ 0x25
 8008144:	d1f9      	bne.n	800813a <_vfiprintf_r+0x7a>
 8008146:	ebba 0b04 	subs.w	fp, sl, r4
 800814a:	d00b      	beq.n	8008164 <_vfiprintf_r+0xa4>
 800814c:	465b      	mov	r3, fp
 800814e:	4622      	mov	r2, r4
 8008150:	4629      	mov	r1, r5
 8008152:	4630      	mov	r0, r6
 8008154:	f7ff ffa1 	bl	800809a <__sfputs_r>
 8008158:	3001      	adds	r0, #1
 800815a:	f000 80a7 	beq.w	80082ac <_vfiprintf_r+0x1ec>
 800815e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008160:	445a      	add	r2, fp
 8008162:	9209      	str	r2, [sp, #36]	@ 0x24
 8008164:	f89a 3000 	ldrb.w	r3, [sl]
 8008168:	2b00      	cmp	r3, #0
 800816a:	f000 809f 	beq.w	80082ac <_vfiprintf_r+0x1ec>
 800816e:	2300      	movs	r3, #0
 8008170:	f04f 32ff 	mov.w	r2, #4294967295
 8008174:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008178:	f10a 0a01 	add.w	sl, sl, #1
 800817c:	9304      	str	r3, [sp, #16]
 800817e:	9307      	str	r3, [sp, #28]
 8008180:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008184:	931a      	str	r3, [sp, #104]	@ 0x68
 8008186:	4654      	mov	r4, sl
 8008188:	2205      	movs	r2, #5
 800818a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800818e:	4853      	ldr	r0, [pc, #332]	@ (80082dc <_vfiprintf_r+0x21c>)
 8008190:	f000 fb96 	bl	80088c0 <memchr>
 8008194:	9a04      	ldr	r2, [sp, #16]
 8008196:	b9d8      	cbnz	r0, 80081d0 <_vfiprintf_r+0x110>
 8008198:	06d1      	lsls	r1, r2, #27
 800819a:	bf44      	itt	mi
 800819c:	2320      	movmi	r3, #32
 800819e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081a2:	0713      	lsls	r3, r2, #28
 80081a4:	bf44      	itt	mi
 80081a6:	232b      	movmi	r3, #43	@ 0x2b
 80081a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081ac:	f89a 3000 	ldrb.w	r3, [sl]
 80081b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80081b2:	d015      	beq.n	80081e0 <_vfiprintf_r+0x120>
 80081b4:	4654      	mov	r4, sl
 80081b6:	2000      	movs	r0, #0
 80081b8:	f04f 0c0a 	mov.w	ip, #10
 80081bc:	9a07      	ldr	r2, [sp, #28]
 80081be:	4621      	mov	r1, r4
 80081c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081c4:	3b30      	subs	r3, #48	@ 0x30
 80081c6:	2b09      	cmp	r3, #9
 80081c8:	d94b      	bls.n	8008262 <_vfiprintf_r+0x1a2>
 80081ca:	b1b0      	cbz	r0, 80081fa <_vfiprintf_r+0x13a>
 80081cc:	9207      	str	r2, [sp, #28]
 80081ce:	e014      	b.n	80081fa <_vfiprintf_r+0x13a>
 80081d0:	eba0 0308 	sub.w	r3, r0, r8
 80081d4:	fa09 f303 	lsl.w	r3, r9, r3
 80081d8:	4313      	orrs	r3, r2
 80081da:	46a2      	mov	sl, r4
 80081dc:	9304      	str	r3, [sp, #16]
 80081de:	e7d2      	b.n	8008186 <_vfiprintf_r+0xc6>
 80081e0:	9b03      	ldr	r3, [sp, #12]
 80081e2:	1d19      	adds	r1, r3, #4
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	9103      	str	r1, [sp, #12]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	bfbb      	ittet	lt
 80081ec:	425b      	neglt	r3, r3
 80081ee:	f042 0202 	orrlt.w	r2, r2, #2
 80081f2:	9307      	strge	r3, [sp, #28]
 80081f4:	9307      	strlt	r3, [sp, #28]
 80081f6:	bfb8      	it	lt
 80081f8:	9204      	strlt	r2, [sp, #16]
 80081fa:	7823      	ldrb	r3, [r4, #0]
 80081fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80081fe:	d10a      	bne.n	8008216 <_vfiprintf_r+0x156>
 8008200:	7863      	ldrb	r3, [r4, #1]
 8008202:	2b2a      	cmp	r3, #42	@ 0x2a
 8008204:	d132      	bne.n	800826c <_vfiprintf_r+0x1ac>
 8008206:	9b03      	ldr	r3, [sp, #12]
 8008208:	3402      	adds	r4, #2
 800820a:	1d1a      	adds	r2, r3, #4
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	9203      	str	r2, [sp, #12]
 8008210:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008214:	9305      	str	r3, [sp, #20]
 8008216:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80082e0 <_vfiprintf_r+0x220>
 800821a:	2203      	movs	r2, #3
 800821c:	4650      	mov	r0, sl
 800821e:	7821      	ldrb	r1, [r4, #0]
 8008220:	f000 fb4e 	bl	80088c0 <memchr>
 8008224:	b138      	cbz	r0, 8008236 <_vfiprintf_r+0x176>
 8008226:	2240      	movs	r2, #64	@ 0x40
 8008228:	9b04      	ldr	r3, [sp, #16]
 800822a:	eba0 000a 	sub.w	r0, r0, sl
 800822e:	4082      	lsls	r2, r0
 8008230:	4313      	orrs	r3, r2
 8008232:	3401      	adds	r4, #1
 8008234:	9304      	str	r3, [sp, #16]
 8008236:	f814 1b01 	ldrb.w	r1, [r4], #1
 800823a:	2206      	movs	r2, #6
 800823c:	4829      	ldr	r0, [pc, #164]	@ (80082e4 <_vfiprintf_r+0x224>)
 800823e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008242:	f000 fb3d 	bl	80088c0 <memchr>
 8008246:	2800      	cmp	r0, #0
 8008248:	d03f      	beq.n	80082ca <_vfiprintf_r+0x20a>
 800824a:	4b27      	ldr	r3, [pc, #156]	@ (80082e8 <_vfiprintf_r+0x228>)
 800824c:	bb1b      	cbnz	r3, 8008296 <_vfiprintf_r+0x1d6>
 800824e:	9b03      	ldr	r3, [sp, #12]
 8008250:	3307      	adds	r3, #7
 8008252:	f023 0307 	bic.w	r3, r3, #7
 8008256:	3308      	adds	r3, #8
 8008258:	9303      	str	r3, [sp, #12]
 800825a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800825c:	443b      	add	r3, r7
 800825e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008260:	e76a      	b.n	8008138 <_vfiprintf_r+0x78>
 8008262:	460c      	mov	r4, r1
 8008264:	2001      	movs	r0, #1
 8008266:	fb0c 3202 	mla	r2, ip, r2, r3
 800826a:	e7a8      	b.n	80081be <_vfiprintf_r+0xfe>
 800826c:	2300      	movs	r3, #0
 800826e:	f04f 0c0a 	mov.w	ip, #10
 8008272:	4619      	mov	r1, r3
 8008274:	3401      	adds	r4, #1
 8008276:	9305      	str	r3, [sp, #20]
 8008278:	4620      	mov	r0, r4
 800827a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800827e:	3a30      	subs	r2, #48	@ 0x30
 8008280:	2a09      	cmp	r2, #9
 8008282:	d903      	bls.n	800828c <_vfiprintf_r+0x1cc>
 8008284:	2b00      	cmp	r3, #0
 8008286:	d0c6      	beq.n	8008216 <_vfiprintf_r+0x156>
 8008288:	9105      	str	r1, [sp, #20]
 800828a:	e7c4      	b.n	8008216 <_vfiprintf_r+0x156>
 800828c:	4604      	mov	r4, r0
 800828e:	2301      	movs	r3, #1
 8008290:	fb0c 2101 	mla	r1, ip, r1, r2
 8008294:	e7f0      	b.n	8008278 <_vfiprintf_r+0x1b8>
 8008296:	ab03      	add	r3, sp, #12
 8008298:	9300      	str	r3, [sp, #0]
 800829a:	462a      	mov	r2, r5
 800829c:	4630      	mov	r0, r6
 800829e:	4b13      	ldr	r3, [pc, #76]	@ (80082ec <_vfiprintf_r+0x22c>)
 80082a0:	a904      	add	r1, sp, #16
 80082a2:	f3af 8000 	nop.w
 80082a6:	4607      	mov	r7, r0
 80082a8:	1c78      	adds	r0, r7, #1
 80082aa:	d1d6      	bne.n	800825a <_vfiprintf_r+0x19a>
 80082ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80082ae:	07d9      	lsls	r1, r3, #31
 80082b0:	d405      	bmi.n	80082be <_vfiprintf_r+0x1fe>
 80082b2:	89ab      	ldrh	r3, [r5, #12]
 80082b4:	059a      	lsls	r2, r3, #22
 80082b6:	d402      	bmi.n	80082be <_vfiprintf_r+0x1fe>
 80082b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80082ba:	f7ff fc73 	bl	8007ba4 <__retarget_lock_release_recursive>
 80082be:	89ab      	ldrh	r3, [r5, #12]
 80082c0:	065b      	lsls	r3, r3, #25
 80082c2:	f53f af1f 	bmi.w	8008104 <_vfiprintf_r+0x44>
 80082c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80082c8:	e71e      	b.n	8008108 <_vfiprintf_r+0x48>
 80082ca:	ab03      	add	r3, sp, #12
 80082cc:	9300      	str	r3, [sp, #0]
 80082ce:	462a      	mov	r2, r5
 80082d0:	4630      	mov	r0, r6
 80082d2:	4b06      	ldr	r3, [pc, #24]	@ (80082ec <_vfiprintf_r+0x22c>)
 80082d4:	a904      	add	r1, sp, #16
 80082d6:	f000 f87d 	bl	80083d4 <_printf_i>
 80082da:	e7e4      	b.n	80082a6 <_vfiprintf_r+0x1e6>
 80082dc:	0800987e 	.word	0x0800987e
 80082e0:	08009884 	.word	0x08009884
 80082e4:	08009888 	.word	0x08009888
 80082e8:	00000000 	.word	0x00000000
 80082ec:	0800809b 	.word	0x0800809b

080082f0 <_printf_common>:
 80082f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082f4:	4616      	mov	r6, r2
 80082f6:	4698      	mov	r8, r3
 80082f8:	688a      	ldr	r2, [r1, #8]
 80082fa:	690b      	ldr	r3, [r1, #16]
 80082fc:	4607      	mov	r7, r0
 80082fe:	4293      	cmp	r3, r2
 8008300:	bfb8      	it	lt
 8008302:	4613      	movlt	r3, r2
 8008304:	6033      	str	r3, [r6, #0]
 8008306:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800830a:	460c      	mov	r4, r1
 800830c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008310:	b10a      	cbz	r2, 8008316 <_printf_common+0x26>
 8008312:	3301      	adds	r3, #1
 8008314:	6033      	str	r3, [r6, #0]
 8008316:	6823      	ldr	r3, [r4, #0]
 8008318:	0699      	lsls	r1, r3, #26
 800831a:	bf42      	ittt	mi
 800831c:	6833      	ldrmi	r3, [r6, #0]
 800831e:	3302      	addmi	r3, #2
 8008320:	6033      	strmi	r3, [r6, #0]
 8008322:	6825      	ldr	r5, [r4, #0]
 8008324:	f015 0506 	ands.w	r5, r5, #6
 8008328:	d106      	bne.n	8008338 <_printf_common+0x48>
 800832a:	f104 0a19 	add.w	sl, r4, #25
 800832e:	68e3      	ldr	r3, [r4, #12]
 8008330:	6832      	ldr	r2, [r6, #0]
 8008332:	1a9b      	subs	r3, r3, r2
 8008334:	42ab      	cmp	r3, r5
 8008336:	dc2b      	bgt.n	8008390 <_printf_common+0xa0>
 8008338:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800833c:	6822      	ldr	r2, [r4, #0]
 800833e:	3b00      	subs	r3, #0
 8008340:	bf18      	it	ne
 8008342:	2301      	movne	r3, #1
 8008344:	0692      	lsls	r2, r2, #26
 8008346:	d430      	bmi.n	80083aa <_printf_common+0xba>
 8008348:	4641      	mov	r1, r8
 800834a:	4638      	mov	r0, r7
 800834c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008350:	47c8      	blx	r9
 8008352:	3001      	adds	r0, #1
 8008354:	d023      	beq.n	800839e <_printf_common+0xae>
 8008356:	6823      	ldr	r3, [r4, #0]
 8008358:	6922      	ldr	r2, [r4, #16]
 800835a:	f003 0306 	and.w	r3, r3, #6
 800835e:	2b04      	cmp	r3, #4
 8008360:	bf14      	ite	ne
 8008362:	2500      	movne	r5, #0
 8008364:	6833      	ldreq	r3, [r6, #0]
 8008366:	f04f 0600 	mov.w	r6, #0
 800836a:	bf08      	it	eq
 800836c:	68e5      	ldreq	r5, [r4, #12]
 800836e:	f104 041a 	add.w	r4, r4, #26
 8008372:	bf08      	it	eq
 8008374:	1aed      	subeq	r5, r5, r3
 8008376:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800837a:	bf08      	it	eq
 800837c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008380:	4293      	cmp	r3, r2
 8008382:	bfc4      	itt	gt
 8008384:	1a9b      	subgt	r3, r3, r2
 8008386:	18ed      	addgt	r5, r5, r3
 8008388:	42b5      	cmp	r5, r6
 800838a:	d11a      	bne.n	80083c2 <_printf_common+0xd2>
 800838c:	2000      	movs	r0, #0
 800838e:	e008      	b.n	80083a2 <_printf_common+0xb2>
 8008390:	2301      	movs	r3, #1
 8008392:	4652      	mov	r2, sl
 8008394:	4641      	mov	r1, r8
 8008396:	4638      	mov	r0, r7
 8008398:	47c8      	blx	r9
 800839a:	3001      	adds	r0, #1
 800839c:	d103      	bne.n	80083a6 <_printf_common+0xb6>
 800839e:	f04f 30ff 	mov.w	r0, #4294967295
 80083a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083a6:	3501      	adds	r5, #1
 80083a8:	e7c1      	b.n	800832e <_printf_common+0x3e>
 80083aa:	2030      	movs	r0, #48	@ 0x30
 80083ac:	18e1      	adds	r1, r4, r3
 80083ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80083b2:	1c5a      	adds	r2, r3, #1
 80083b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80083b8:	4422      	add	r2, r4
 80083ba:	3302      	adds	r3, #2
 80083bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80083c0:	e7c2      	b.n	8008348 <_printf_common+0x58>
 80083c2:	2301      	movs	r3, #1
 80083c4:	4622      	mov	r2, r4
 80083c6:	4641      	mov	r1, r8
 80083c8:	4638      	mov	r0, r7
 80083ca:	47c8      	blx	r9
 80083cc:	3001      	adds	r0, #1
 80083ce:	d0e6      	beq.n	800839e <_printf_common+0xae>
 80083d0:	3601      	adds	r6, #1
 80083d2:	e7d9      	b.n	8008388 <_printf_common+0x98>

080083d4 <_printf_i>:
 80083d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083d8:	7e0f      	ldrb	r7, [r1, #24]
 80083da:	4691      	mov	r9, r2
 80083dc:	2f78      	cmp	r7, #120	@ 0x78
 80083de:	4680      	mov	r8, r0
 80083e0:	460c      	mov	r4, r1
 80083e2:	469a      	mov	sl, r3
 80083e4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80083e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80083ea:	d807      	bhi.n	80083fc <_printf_i+0x28>
 80083ec:	2f62      	cmp	r7, #98	@ 0x62
 80083ee:	d80a      	bhi.n	8008406 <_printf_i+0x32>
 80083f0:	2f00      	cmp	r7, #0
 80083f2:	f000 80d3 	beq.w	800859c <_printf_i+0x1c8>
 80083f6:	2f58      	cmp	r7, #88	@ 0x58
 80083f8:	f000 80ba 	beq.w	8008570 <_printf_i+0x19c>
 80083fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008400:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008404:	e03a      	b.n	800847c <_printf_i+0xa8>
 8008406:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800840a:	2b15      	cmp	r3, #21
 800840c:	d8f6      	bhi.n	80083fc <_printf_i+0x28>
 800840e:	a101      	add	r1, pc, #4	@ (adr r1, 8008414 <_printf_i+0x40>)
 8008410:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008414:	0800846d 	.word	0x0800846d
 8008418:	08008481 	.word	0x08008481
 800841c:	080083fd 	.word	0x080083fd
 8008420:	080083fd 	.word	0x080083fd
 8008424:	080083fd 	.word	0x080083fd
 8008428:	080083fd 	.word	0x080083fd
 800842c:	08008481 	.word	0x08008481
 8008430:	080083fd 	.word	0x080083fd
 8008434:	080083fd 	.word	0x080083fd
 8008438:	080083fd 	.word	0x080083fd
 800843c:	080083fd 	.word	0x080083fd
 8008440:	08008583 	.word	0x08008583
 8008444:	080084ab 	.word	0x080084ab
 8008448:	0800853d 	.word	0x0800853d
 800844c:	080083fd 	.word	0x080083fd
 8008450:	080083fd 	.word	0x080083fd
 8008454:	080085a5 	.word	0x080085a5
 8008458:	080083fd 	.word	0x080083fd
 800845c:	080084ab 	.word	0x080084ab
 8008460:	080083fd 	.word	0x080083fd
 8008464:	080083fd 	.word	0x080083fd
 8008468:	08008545 	.word	0x08008545
 800846c:	6833      	ldr	r3, [r6, #0]
 800846e:	1d1a      	adds	r2, r3, #4
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	6032      	str	r2, [r6, #0]
 8008474:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008478:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800847c:	2301      	movs	r3, #1
 800847e:	e09e      	b.n	80085be <_printf_i+0x1ea>
 8008480:	6833      	ldr	r3, [r6, #0]
 8008482:	6820      	ldr	r0, [r4, #0]
 8008484:	1d19      	adds	r1, r3, #4
 8008486:	6031      	str	r1, [r6, #0]
 8008488:	0606      	lsls	r6, r0, #24
 800848a:	d501      	bpl.n	8008490 <_printf_i+0xbc>
 800848c:	681d      	ldr	r5, [r3, #0]
 800848e:	e003      	b.n	8008498 <_printf_i+0xc4>
 8008490:	0645      	lsls	r5, r0, #25
 8008492:	d5fb      	bpl.n	800848c <_printf_i+0xb8>
 8008494:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008498:	2d00      	cmp	r5, #0
 800849a:	da03      	bge.n	80084a4 <_printf_i+0xd0>
 800849c:	232d      	movs	r3, #45	@ 0x2d
 800849e:	426d      	negs	r5, r5
 80084a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084a4:	230a      	movs	r3, #10
 80084a6:	4859      	ldr	r0, [pc, #356]	@ (800860c <_printf_i+0x238>)
 80084a8:	e011      	b.n	80084ce <_printf_i+0xfa>
 80084aa:	6821      	ldr	r1, [r4, #0]
 80084ac:	6833      	ldr	r3, [r6, #0]
 80084ae:	0608      	lsls	r0, r1, #24
 80084b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80084b4:	d402      	bmi.n	80084bc <_printf_i+0xe8>
 80084b6:	0649      	lsls	r1, r1, #25
 80084b8:	bf48      	it	mi
 80084ba:	b2ad      	uxthmi	r5, r5
 80084bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80084be:	6033      	str	r3, [r6, #0]
 80084c0:	bf14      	ite	ne
 80084c2:	230a      	movne	r3, #10
 80084c4:	2308      	moveq	r3, #8
 80084c6:	4851      	ldr	r0, [pc, #324]	@ (800860c <_printf_i+0x238>)
 80084c8:	2100      	movs	r1, #0
 80084ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80084ce:	6866      	ldr	r6, [r4, #4]
 80084d0:	2e00      	cmp	r6, #0
 80084d2:	bfa8      	it	ge
 80084d4:	6821      	ldrge	r1, [r4, #0]
 80084d6:	60a6      	str	r6, [r4, #8]
 80084d8:	bfa4      	itt	ge
 80084da:	f021 0104 	bicge.w	r1, r1, #4
 80084de:	6021      	strge	r1, [r4, #0]
 80084e0:	b90d      	cbnz	r5, 80084e6 <_printf_i+0x112>
 80084e2:	2e00      	cmp	r6, #0
 80084e4:	d04b      	beq.n	800857e <_printf_i+0x1aa>
 80084e6:	4616      	mov	r6, r2
 80084e8:	fbb5 f1f3 	udiv	r1, r5, r3
 80084ec:	fb03 5711 	mls	r7, r3, r1, r5
 80084f0:	5dc7      	ldrb	r7, [r0, r7]
 80084f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80084f6:	462f      	mov	r7, r5
 80084f8:	42bb      	cmp	r3, r7
 80084fa:	460d      	mov	r5, r1
 80084fc:	d9f4      	bls.n	80084e8 <_printf_i+0x114>
 80084fe:	2b08      	cmp	r3, #8
 8008500:	d10b      	bne.n	800851a <_printf_i+0x146>
 8008502:	6823      	ldr	r3, [r4, #0]
 8008504:	07df      	lsls	r7, r3, #31
 8008506:	d508      	bpl.n	800851a <_printf_i+0x146>
 8008508:	6923      	ldr	r3, [r4, #16]
 800850a:	6861      	ldr	r1, [r4, #4]
 800850c:	4299      	cmp	r1, r3
 800850e:	bfde      	ittt	le
 8008510:	2330      	movle	r3, #48	@ 0x30
 8008512:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008516:	f106 36ff 	addle.w	r6, r6, #4294967295
 800851a:	1b92      	subs	r2, r2, r6
 800851c:	6122      	str	r2, [r4, #16]
 800851e:	464b      	mov	r3, r9
 8008520:	4621      	mov	r1, r4
 8008522:	4640      	mov	r0, r8
 8008524:	f8cd a000 	str.w	sl, [sp]
 8008528:	aa03      	add	r2, sp, #12
 800852a:	f7ff fee1 	bl	80082f0 <_printf_common>
 800852e:	3001      	adds	r0, #1
 8008530:	d14a      	bne.n	80085c8 <_printf_i+0x1f4>
 8008532:	f04f 30ff 	mov.w	r0, #4294967295
 8008536:	b004      	add	sp, #16
 8008538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800853c:	6823      	ldr	r3, [r4, #0]
 800853e:	f043 0320 	orr.w	r3, r3, #32
 8008542:	6023      	str	r3, [r4, #0]
 8008544:	2778      	movs	r7, #120	@ 0x78
 8008546:	4832      	ldr	r0, [pc, #200]	@ (8008610 <_printf_i+0x23c>)
 8008548:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800854c:	6823      	ldr	r3, [r4, #0]
 800854e:	6831      	ldr	r1, [r6, #0]
 8008550:	061f      	lsls	r7, r3, #24
 8008552:	f851 5b04 	ldr.w	r5, [r1], #4
 8008556:	d402      	bmi.n	800855e <_printf_i+0x18a>
 8008558:	065f      	lsls	r7, r3, #25
 800855a:	bf48      	it	mi
 800855c:	b2ad      	uxthmi	r5, r5
 800855e:	6031      	str	r1, [r6, #0]
 8008560:	07d9      	lsls	r1, r3, #31
 8008562:	bf44      	itt	mi
 8008564:	f043 0320 	orrmi.w	r3, r3, #32
 8008568:	6023      	strmi	r3, [r4, #0]
 800856a:	b11d      	cbz	r5, 8008574 <_printf_i+0x1a0>
 800856c:	2310      	movs	r3, #16
 800856e:	e7ab      	b.n	80084c8 <_printf_i+0xf4>
 8008570:	4826      	ldr	r0, [pc, #152]	@ (800860c <_printf_i+0x238>)
 8008572:	e7e9      	b.n	8008548 <_printf_i+0x174>
 8008574:	6823      	ldr	r3, [r4, #0]
 8008576:	f023 0320 	bic.w	r3, r3, #32
 800857a:	6023      	str	r3, [r4, #0]
 800857c:	e7f6      	b.n	800856c <_printf_i+0x198>
 800857e:	4616      	mov	r6, r2
 8008580:	e7bd      	b.n	80084fe <_printf_i+0x12a>
 8008582:	6833      	ldr	r3, [r6, #0]
 8008584:	6825      	ldr	r5, [r4, #0]
 8008586:	1d18      	adds	r0, r3, #4
 8008588:	6961      	ldr	r1, [r4, #20]
 800858a:	6030      	str	r0, [r6, #0]
 800858c:	062e      	lsls	r6, r5, #24
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	d501      	bpl.n	8008596 <_printf_i+0x1c2>
 8008592:	6019      	str	r1, [r3, #0]
 8008594:	e002      	b.n	800859c <_printf_i+0x1c8>
 8008596:	0668      	lsls	r0, r5, #25
 8008598:	d5fb      	bpl.n	8008592 <_printf_i+0x1be>
 800859a:	8019      	strh	r1, [r3, #0]
 800859c:	2300      	movs	r3, #0
 800859e:	4616      	mov	r6, r2
 80085a0:	6123      	str	r3, [r4, #16]
 80085a2:	e7bc      	b.n	800851e <_printf_i+0x14a>
 80085a4:	6833      	ldr	r3, [r6, #0]
 80085a6:	2100      	movs	r1, #0
 80085a8:	1d1a      	adds	r2, r3, #4
 80085aa:	6032      	str	r2, [r6, #0]
 80085ac:	681e      	ldr	r6, [r3, #0]
 80085ae:	6862      	ldr	r2, [r4, #4]
 80085b0:	4630      	mov	r0, r6
 80085b2:	f000 f985 	bl	80088c0 <memchr>
 80085b6:	b108      	cbz	r0, 80085bc <_printf_i+0x1e8>
 80085b8:	1b80      	subs	r0, r0, r6
 80085ba:	6060      	str	r0, [r4, #4]
 80085bc:	6863      	ldr	r3, [r4, #4]
 80085be:	6123      	str	r3, [r4, #16]
 80085c0:	2300      	movs	r3, #0
 80085c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085c6:	e7aa      	b.n	800851e <_printf_i+0x14a>
 80085c8:	4632      	mov	r2, r6
 80085ca:	4649      	mov	r1, r9
 80085cc:	4640      	mov	r0, r8
 80085ce:	6923      	ldr	r3, [r4, #16]
 80085d0:	47d0      	blx	sl
 80085d2:	3001      	adds	r0, #1
 80085d4:	d0ad      	beq.n	8008532 <_printf_i+0x15e>
 80085d6:	6823      	ldr	r3, [r4, #0]
 80085d8:	079b      	lsls	r3, r3, #30
 80085da:	d413      	bmi.n	8008604 <_printf_i+0x230>
 80085dc:	68e0      	ldr	r0, [r4, #12]
 80085de:	9b03      	ldr	r3, [sp, #12]
 80085e0:	4298      	cmp	r0, r3
 80085e2:	bfb8      	it	lt
 80085e4:	4618      	movlt	r0, r3
 80085e6:	e7a6      	b.n	8008536 <_printf_i+0x162>
 80085e8:	2301      	movs	r3, #1
 80085ea:	4632      	mov	r2, r6
 80085ec:	4649      	mov	r1, r9
 80085ee:	4640      	mov	r0, r8
 80085f0:	47d0      	blx	sl
 80085f2:	3001      	adds	r0, #1
 80085f4:	d09d      	beq.n	8008532 <_printf_i+0x15e>
 80085f6:	3501      	adds	r5, #1
 80085f8:	68e3      	ldr	r3, [r4, #12]
 80085fa:	9903      	ldr	r1, [sp, #12]
 80085fc:	1a5b      	subs	r3, r3, r1
 80085fe:	42ab      	cmp	r3, r5
 8008600:	dcf2      	bgt.n	80085e8 <_printf_i+0x214>
 8008602:	e7eb      	b.n	80085dc <_printf_i+0x208>
 8008604:	2500      	movs	r5, #0
 8008606:	f104 0619 	add.w	r6, r4, #25
 800860a:	e7f5      	b.n	80085f8 <_printf_i+0x224>
 800860c:	0800988f 	.word	0x0800988f
 8008610:	080098a0 	.word	0x080098a0

08008614 <__sflush_r>:
 8008614:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800861a:	0716      	lsls	r6, r2, #28
 800861c:	4605      	mov	r5, r0
 800861e:	460c      	mov	r4, r1
 8008620:	d454      	bmi.n	80086cc <__sflush_r+0xb8>
 8008622:	684b      	ldr	r3, [r1, #4]
 8008624:	2b00      	cmp	r3, #0
 8008626:	dc02      	bgt.n	800862e <__sflush_r+0x1a>
 8008628:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800862a:	2b00      	cmp	r3, #0
 800862c:	dd48      	ble.n	80086c0 <__sflush_r+0xac>
 800862e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008630:	2e00      	cmp	r6, #0
 8008632:	d045      	beq.n	80086c0 <__sflush_r+0xac>
 8008634:	2300      	movs	r3, #0
 8008636:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800863a:	682f      	ldr	r7, [r5, #0]
 800863c:	6a21      	ldr	r1, [r4, #32]
 800863e:	602b      	str	r3, [r5, #0]
 8008640:	d030      	beq.n	80086a4 <__sflush_r+0x90>
 8008642:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008644:	89a3      	ldrh	r3, [r4, #12]
 8008646:	0759      	lsls	r1, r3, #29
 8008648:	d505      	bpl.n	8008656 <__sflush_r+0x42>
 800864a:	6863      	ldr	r3, [r4, #4]
 800864c:	1ad2      	subs	r2, r2, r3
 800864e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008650:	b10b      	cbz	r3, 8008656 <__sflush_r+0x42>
 8008652:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008654:	1ad2      	subs	r2, r2, r3
 8008656:	2300      	movs	r3, #0
 8008658:	4628      	mov	r0, r5
 800865a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800865c:	6a21      	ldr	r1, [r4, #32]
 800865e:	47b0      	blx	r6
 8008660:	1c43      	adds	r3, r0, #1
 8008662:	89a3      	ldrh	r3, [r4, #12]
 8008664:	d106      	bne.n	8008674 <__sflush_r+0x60>
 8008666:	6829      	ldr	r1, [r5, #0]
 8008668:	291d      	cmp	r1, #29
 800866a:	d82b      	bhi.n	80086c4 <__sflush_r+0xb0>
 800866c:	4a28      	ldr	r2, [pc, #160]	@ (8008710 <__sflush_r+0xfc>)
 800866e:	410a      	asrs	r2, r1
 8008670:	07d6      	lsls	r6, r2, #31
 8008672:	d427      	bmi.n	80086c4 <__sflush_r+0xb0>
 8008674:	2200      	movs	r2, #0
 8008676:	6062      	str	r2, [r4, #4]
 8008678:	6922      	ldr	r2, [r4, #16]
 800867a:	04d9      	lsls	r1, r3, #19
 800867c:	6022      	str	r2, [r4, #0]
 800867e:	d504      	bpl.n	800868a <__sflush_r+0x76>
 8008680:	1c42      	adds	r2, r0, #1
 8008682:	d101      	bne.n	8008688 <__sflush_r+0x74>
 8008684:	682b      	ldr	r3, [r5, #0]
 8008686:	b903      	cbnz	r3, 800868a <__sflush_r+0x76>
 8008688:	6560      	str	r0, [r4, #84]	@ 0x54
 800868a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800868c:	602f      	str	r7, [r5, #0]
 800868e:	b1b9      	cbz	r1, 80086c0 <__sflush_r+0xac>
 8008690:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008694:	4299      	cmp	r1, r3
 8008696:	d002      	beq.n	800869e <__sflush_r+0x8a>
 8008698:	4628      	mov	r0, r5
 800869a:	f7ff fa93 	bl	8007bc4 <_free_r>
 800869e:	2300      	movs	r3, #0
 80086a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80086a2:	e00d      	b.n	80086c0 <__sflush_r+0xac>
 80086a4:	2301      	movs	r3, #1
 80086a6:	4628      	mov	r0, r5
 80086a8:	47b0      	blx	r6
 80086aa:	4602      	mov	r2, r0
 80086ac:	1c50      	adds	r0, r2, #1
 80086ae:	d1c9      	bne.n	8008644 <__sflush_r+0x30>
 80086b0:	682b      	ldr	r3, [r5, #0]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d0c6      	beq.n	8008644 <__sflush_r+0x30>
 80086b6:	2b1d      	cmp	r3, #29
 80086b8:	d001      	beq.n	80086be <__sflush_r+0xaa>
 80086ba:	2b16      	cmp	r3, #22
 80086bc:	d11d      	bne.n	80086fa <__sflush_r+0xe6>
 80086be:	602f      	str	r7, [r5, #0]
 80086c0:	2000      	movs	r0, #0
 80086c2:	e021      	b.n	8008708 <__sflush_r+0xf4>
 80086c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086c8:	b21b      	sxth	r3, r3
 80086ca:	e01a      	b.n	8008702 <__sflush_r+0xee>
 80086cc:	690f      	ldr	r7, [r1, #16]
 80086ce:	2f00      	cmp	r7, #0
 80086d0:	d0f6      	beq.n	80086c0 <__sflush_r+0xac>
 80086d2:	0793      	lsls	r3, r2, #30
 80086d4:	bf18      	it	ne
 80086d6:	2300      	movne	r3, #0
 80086d8:	680e      	ldr	r6, [r1, #0]
 80086da:	bf08      	it	eq
 80086dc:	694b      	ldreq	r3, [r1, #20]
 80086de:	1bf6      	subs	r6, r6, r7
 80086e0:	600f      	str	r7, [r1, #0]
 80086e2:	608b      	str	r3, [r1, #8]
 80086e4:	2e00      	cmp	r6, #0
 80086e6:	ddeb      	ble.n	80086c0 <__sflush_r+0xac>
 80086e8:	4633      	mov	r3, r6
 80086ea:	463a      	mov	r2, r7
 80086ec:	4628      	mov	r0, r5
 80086ee:	6a21      	ldr	r1, [r4, #32]
 80086f0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80086f4:	47e0      	blx	ip
 80086f6:	2800      	cmp	r0, #0
 80086f8:	dc07      	bgt.n	800870a <__sflush_r+0xf6>
 80086fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008702:	f04f 30ff 	mov.w	r0, #4294967295
 8008706:	81a3      	strh	r3, [r4, #12]
 8008708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800870a:	4407      	add	r7, r0
 800870c:	1a36      	subs	r6, r6, r0
 800870e:	e7e9      	b.n	80086e4 <__sflush_r+0xd0>
 8008710:	dfbffffe 	.word	0xdfbffffe

08008714 <_fflush_r>:
 8008714:	b538      	push	{r3, r4, r5, lr}
 8008716:	690b      	ldr	r3, [r1, #16]
 8008718:	4605      	mov	r5, r0
 800871a:	460c      	mov	r4, r1
 800871c:	b913      	cbnz	r3, 8008724 <_fflush_r+0x10>
 800871e:	2500      	movs	r5, #0
 8008720:	4628      	mov	r0, r5
 8008722:	bd38      	pop	{r3, r4, r5, pc}
 8008724:	b118      	cbz	r0, 800872e <_fflush_r+0x1a>
 8008726:	6a03      	ldr	r3, [r0, #32]
 8008728:	b90b      	cbnz	r3, 800872e <_fflush_r+0x1a>
 800872a:	f7fe ff6f 	bl	800760c <__sinit>
 800872e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d0f3      	beq.n	800871e <_fflush_r+0xa>
 8008736:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008738:	07d0      	lsls	r0, r2, #31
 800873a:	d404      	bmi.n	8008746 <_fflush_r+0x32>
 800873c:	0599      	lsls	r1, r3, #22
 800873e:	d402      	bmi.n	8008746 <_fflush_r+0x32>
 8008740:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008742:	f7ff fa2e 	bl	8007ba2 <__retarget_lock_acquire_recursive>
 8008746:	4628      	mov	r0, r5
 8008748:	4621      	mov	r1, r4
 800874a:	f7ff ff63 	bl	8008614 <__sflush_r>
 800874e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008750:	4605      	mov	r5, r0
 8008752:	07da      	lsls	r2, r3, #31
 8008754:	d4e4      	bmi.n	8008720 <_fflush_r+0xc>
 8008756:	89a3      	ldrh	r3, [r4, #12]
 8008758:	059b      	lsls	r3, r3, #22
 800875a:	d4e1      	bmi.n	8008720 <_fflush_r+0xc>
 800875c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800875e:	f7ff fa21 	bl	8007ba4 <__retarget_lock_release_recursive>
 8008762:	e7dd      	b.n	8008720 <_fflush_r+0xc>

08008764 <__swhatbuf_r>:
 8008764:	b570      	push	{r4, r5, r6, lr}
 8008766:	460c      	mov	r4, r1
 8008768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800876c:	4615      	mov	r5, r2
 800876e:	2900      	cmp	r1, #0
 8008770:	461e      	mov	r6, r3
 8008772:	b096      	sub	sp, #88	@ 0x58
 8008774:	da0c      	bge.n	8008790 <__swhatbuf_r+0x2c>
 8008776:	89a3      	ldrh	r3, [r4, #12]
 8008778:	2100      	movs	r1, #0
 800877a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800877e:	bf14      	ite	ne
 8008780:	2340      	movne	r3, #64	@ 0x40
 8008782:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008786:	2000      	movs	r0, #0
 8008788:	6031      	str	r1, [r6, #0]
 800878a:	602b      	str	r3, [r5, #0]
 800878c:	b016      	add	sp, #88	@ 0x58
 800878e:	bd70      	pop	{r4, r5, r6, pc}
 8008790:	466a      	mov	r2, sp
 8008792:	f000 f863 	bl	800885c <_fstat_r>
 8008796:	2800      	cmp	r0, #0
 8008798:	dbed      	blt.n	8008776 <__swhatbuf_r+0x12>
 800879a:	9901      	ldr	r1, [sp, #4]
 800879c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80087a0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80087a4:	4259      	negs	r1, r3
 80087a6:	4159      	adcs	r1, r3
 80087a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80087ac:	e7eb      	b.n	8008786 <__swhatbuf_r+0x22>

080087ae <__smakebuf_r>:
 80087ae:	898b      	ldrh	r3, [r1, #12]
 80087b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087b2:	079d      	lsls	r5, r3, #30
 80087b4:	4606      	mov	r6, r0
 80087b6:	460c      	mov	r4, r1
 80087b8:	d507      	bpl.n	80087ca <__smakebuf_r+0x1c>
 80087ba:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80087be:	6023      	str	r3, [r4, #0]
 80087c0:	6123      	str	r3, [r4, #16]
 80087c2:	2301      	movs	r3, #1
 80087c4:	6163      	str	r3, [r4, #20]
 80087c6:	b003      	add	sp, #12
 80087c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087ca:	466a      	mov	r2, sp
 80087cc:	ab01      	add	r3, sp, #4
 80087ce:	f7ff ffc9 	bl	8008764 <__swhatbuf_r>
 80087d2:	9f00      	ldr	r7, [sp, #0]
 80087d4:	4605      	mov	r5, r0
 80087d6:	4639      	mov	r1, r7
 80087d8:	4630      	mov	r0, r6
 80087da:	f7ff fa65 	bl	8007ca8 <_malloc_r>
 80087de:	b948      	cbnz	r0, 80087f4 <__smakebuf_r+0x46>
 80087e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087e4:	059a      	lsls	r2, r3, #22
 80087e6:	d4ee      	bmi.n	80087c6 <__smakebuf_r+0x18>
 80087e8:	f023 0303 	bic.w	r3, r3, #3
 80087ec:	f043 0302 	orr.w	r3, r3, #2
 80087f0:	81a3      	strh	r3, [r4, #12]
 80087f2:	e7e2      	b.n	80087ba <__smakebuf_r+0xc>
 80087f4:	89a3      	ldrh	r3, [r4, #12]
 80087f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80087fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087fe:	81a3      	strh	r3, [r4, #12]
 8008800:	9b01      	ldr	r3, [sp, #4]
 8008802:	6020      	str	r0, [r4, #0]
 8008804:	b15b      	cbz	r3, 800881e <__smakebuf_r+0x70>
 8008806:	4630      	mov	r0, r6
 8008808:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800880c:	f000 f838 	bl	8008880 <_isatty_r>
 8008810:	b128      	cbz	r0, 800881e <__smakebuf_r+0x70>
 8008812:	89a3      	ldrh	r3, [r4, #12]
 8008814:	f023 0303 	bic.w	r3, r3, #3
 8008818:	f043 0301 	orr.w	r3, r3, #1
 800881c:	81a3      	strh	r3, [r4, #12]
 800881e:	89a3      	ldrh	r3, [r4, #12]
 8008820:	431d      	orrs	r5, r3
 8008822:	81a5      	strh	r5, [r4, #12]
 8008824:	e7cf      	b.n	80087c6 <__smakebuf_r+0x18>

08008826 <memmove>:
 8008826:	4288      	cmp	r0, r1
 8008828:	b510      	push	{r4, lr}
 800882a:	eb01 0402 	add.w	r4, r1, r2
 800882e:	d902      	bls.n	8008836 <memmove+0x10>
 8008830:	4284      	cmp	r4, r0
 8008832:	4623      	mov	r3, r4
 8008834:	d807      	bhi.n	8008846 <memmove+0x20>
 8008836:	1e43      	subs	r3, r0, #1
 8008838:	42a1      	cmp	r1, r4
 800883a:	d008      	beq.n	800884e <memmove+0x28>
 800883c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008840:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008844:	e7f8      	b.n	8008838 <memmove+0x12>
 8008846:	4601      	mov	r1, r0
 8008848:	4402      	add	r2, r0
 800884a:	428a      	cmp	r2, r1
 800884c:	d100      	bne.n	8008850 <memmove+0x2a>
 800884e:	bd10      	pop	{r4, pc}
 8008850:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008854:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008858:	e7f7      	b.n	800884a <memmove+0x24>
	...

0800885c <_fstat_r>:
 800885c:	b538      	push	{r3, r4, r5, lr}
 800885e:	2300      	movs	r3, #0
 8008860:	4d06      	ldr	r5, [pc, #24]	@ (800887c <_fstat_r+0x20>)
 8008862:	4604      	mov	r4, r0
 8008864:	4608      	mov	r0, r1
 8008866:	4611      	mov	r1, r2
 8008868:	602b      	str	r3, [r5, #0]
 800886a:	f7fa f8c6 	bl	80029fa <_fstat>
 800886e:	1c43      	adds	r3, r0, #1
 8008870:	d102      	bne.n	8008878 <_fstat_r+0x1c>
 8008872:	682b      	ldr	r3, [r5, #0]
 8008874:	b103      	cbz	r3, 8008878 <_fstat_r+0x1c>
 8008876:	6023      	str	r3, [r4, #0]
 8008878:	bd38      	pop	{r3, r4, r5, pc}
 800887a:	bf00      	nop
 800887c:	20000390 	.word	0x20000390

08008880 <_isatty_r>:
 8008880:	b538      	push	{r3, r4, r5, lr}
 8008882:	2300      	movs	r3, #0
 8008884:	4d05      	ldr	r5, [pc, #20]	@ (800889c <_isatty_r+0x1c>)
 8008886:	4604      	mov	r4, r0
 8008888:	4608      	mov	r0, r1
 800888a:	602b      	str	r3, [r5, #0]
 800888c:	f7fa f8c4 	bl	8002a18 <_isatty>
 8008890:	1c43      	adds	r3, r0, #1
 8008892:	d102      	bne.n	800889a <_isatty_r+0x1a>
 8008894:	682b      	ldr	r3, [r5, #0]
 8008896:	b103      	cbz	r3, 800889a <_isatty_r+0x1a>
 8008898:	6023      	str	r3, [r4, #0]
 800889a:	bd38      	pop	{r3, r4, r5, pc}
 800889c:	20000390 	.word	0x20000390

080088a0 <_sbrk_r>:
 80088a0:	b538      	push	{r3, r4, r5, lr}
 80088a2:	2300      	movs	r3, #0
 80088a4:	4d05      	ldr	r5, [pc, #20]	@ (80088bc <_sbrk_r+0x1c>)
 80088a6:	4604      	mov	r4, r0
 80088a8:	4608      	mov	r0, r1
 80088aa:	602b      	str	r3, [r5, #0]
 80088ac:	f7fa f8ca 	bl	8002a44 <_sbrk>
 80088b0:	1c43      	adds	r3, r0, #1
 80088b2:	d102      	bne.n	80088ba <_sbrk_r+0x1a>
 80088b4:	682b      	ldr	r3, [r5, #0]
 80088b6:	b103      	cbz	r3, 80088ba <_sbrk_r+0x1a>
 80088b8:	6023      	str	r3, [r4, #0]
 80088ba:	bd38      	pop	{r3, r4, r5, pc}
 80088bc:	20000390 	.word	0x20000390

080088c0 <memchr>:
 80088c0:	4603      	mov	r3, r0
 80088c2:	b510      	push	{r4, lr}
 80088c4:	b2c9      	uxtb	r1, r1
 80088c6:	4402      	add	r2, r0
 80088c8:	4293      	cmp	r3, r2
 80088ca:	4618      	mov	r0, r3
 80088cc:	d101      	bne.n	80088d2 <memchr+0x12>
 80088ce:	2000      	movs	r0, #0
 80088d0:	e003      	b.n	80088da <memchr+0x1a>
 80088d2:	7804      	ldrb	r4, [r0, #0]
 80088d4:	3301      	adds	r3, #1
 80088d6:	428c      	cmp	r4, r1
 80088d8:	d1f6      	bne.n	80088c8 <memchr+0x8>
 80088da:	bd10      	pop	{r4, pc}

080088dc <_realloc_r>:
 80088dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088e0:	4680      	mov	r8, r0
 80088e2:	4615      	mov	r5, r2
 80088e4:	460c      	mov	r4, r1
 80088e6:	b921      	cbnz	r1, 80088f2 <_realloc_r+0x16>
 80088e8:	4611      	mov	r1, r2
 80088ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088ee:	f7ff b9db 	b.w	8007ca8 <_malloc_r>
 80088f2:	b92a      	cbnz	r2, 8008900 <_realloc_r+0x24>
 80088f4:	f7ff f966 	bl	8007bc4 <_free_r>
 80088f8:	2400      	movs	r4, #0
 80088fa:	4620      	mov	r0, r4
 80088fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008900:	f000 f81a 	bl	8008938 <_malloc_usable_size_r>
 8008904:	4285      	cmp	r5, r0
 8008906:	4606      	mov	r6, r0
 8008908:	d802      	bhi.n	8008910 <_realloc_r+0x34>
 800890a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800890e:	d8f4      	bhi.n	80088fa <_realloc_r+0x1e>
 8008910:	4629      	mov	r1, r5
 8008912:	4640      	mov	r0, r8
 8008914:	f7ff f9c8 	bl	8007ca8 <_malloc_r>
 8008918:	4607      	mov	r7, r0
 800891a:	2800      	cmp	r0, #0
 800891c:	d0ec      	beq.n	80088f8 <_realloc_r+0x1c>
 800891e:	42b5      	cmp	r5, r6
 8008920:	462a      	mov	r2, r5
 8008922:	4621      	mov	r1, r4
 8008924:	bf28      	it	cs
 8008926:	4632      	movcs	r2, r6
 8008928:	f7ff f93d 	bl	8007ba6 <memcpy>
 800892c:	4621      	mov	r1, r4
 800892e:	4640      	mov	r0, r8
 8008930:	f7ff f948 	bl	8007bc4 <_free_r>
 8008934:	463c      	mov	r4, r7
 8008936:	e7e0      	b.n	80088fa <_realloc_r+0x1e>

08008938 <_malloc_usable_size_r>:
 8008938:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800893c:	1f18      	subs	r0, r3, #4
 800893e:	2b00      	cmp	r3, #0
 8008940:	bfbc      	itt	lt
 8008942:	580b      	ldrlt	r3, [r1, r0]
 8008944:	18c0      	addlt	r0, r0, r3
 8008946:	4770      	bx	lr

08008948 <_init>:
 8008948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800894a:	bf00      	nop
 800894c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800894e:	bc08      	pop	{r3}
 8008950:	469e      	mov	lr, r3
 8008952:	4770      	bx	lr

08008954 <_fini>:
 8008954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008956:	bf00      	nop
 8008958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800895a:	bc08      	pop	{r3}
 800895c:	469e      	mov	lr, r3
 800895e:	4770      	bx	lr
