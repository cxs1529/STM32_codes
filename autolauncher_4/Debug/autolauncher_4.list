
autolauncher_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d20  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001900  08009e30  08009e30  0000ae30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b730  0800b730  0000d0a0  2**0
                  CONTENTS
  4 .ARM          00000000  0800b730  0800b730  0000d0a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b730  0800b730  0000d0a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b730  0800b730  0000c730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b734  0800b734  0000c734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  0800b738  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  200000a0  0800b7d8  0000d0a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000408  0800b7d8  0000d408  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d0a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001436b  00000000  00000000  0000d0c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003247  00000000  00000000  00021434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001388  00000000  00000000  00024680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f51  00000000  00000000  00025a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab31  00000000  00000000  00026959  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000190cf  00000000  00000000  0004148a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094fa7  00000000  00000000  0005a559  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ef500  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005af4  00000000  00000000  000ef544  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000f5038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000a0 	.word	0x200000a0
 800012c:	00000000 	.word	0x00000000
 8000130:	08009e18 	.word	0x08009e18

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000a4 	.word	0x200000a4
 800014c:	08009e18 	.word	0x08009e18

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001a2:	2afd      	cmp	r2, #253	@ 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	@ 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	@ 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__aeabi_d2f>:
 8000a54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a5c:	bf24      	itt	cs
 8000a5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a66:	d90d      	bls.n	8000a84 <__aeabi_d2f+0x30>
 8000a68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a7c:	bf08      	it	eq
 8000a7e:	f020 0001 	biceq.w	r0, r0, #1
 8000a82:	4770      	bx	lr
 8000a84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a88:	d121      	bne.n	8000ace <__aeabi_d2f+0x7a>
 8000a8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a8e:	bfbc      	itt	lt
 8000a90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a94:	4770      	bxlt	lr
 8000a96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a9e:	f1c2 0218 	rsb	r2, r2, #24
 8000aa2:	f1c2 0c20 	rsb	ip, r2, #32
 8000aa6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aaa:	fa20 f002 	lsr.w	r0, r0, r2
 8000aae:	bf18      	it	ne
 8000ab0:	f040 0001 	orrne.w	r0, r0, #1
 8000ab4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000abc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac0:	ea40 000c 	orr.w	r0, r0, ip
 8000ac4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000acc:	e7cc      	b.n	8000a68 <__aeabi_d2f+0x14>
 8000ace:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ad2:	d107      	bne.n	8000ae4 <__aeabi_d2f+0x90>
 8000ad4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad8:	bf1e      	ittt	ne
 8000ada:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ade:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ae2:	4770      	bxne	lr
 8000ae4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ae8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000aec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop

08000af4 <__aeabi_frsub>:
 8000af4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000af8:	e002      	b.n	8000b00 <__addsf3>
 8000afa:	bf00      	nop

08000afc <__aeabi_fsub>:
 8000afc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b00 <__addsf3>:
 8000b00:	0042      	lsls	r2, r0, #1
 8000b02:	bf1f      	itttt	ne
 8000b04:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b08:	ea92 0f03 	teqne	r2, r3
 8000b0c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b10:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b14:	d06a      	beq.n	8000bec <__addsf3+0xec>
 8000b16:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b1a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b1e:	bfc1      	itttt	gt
 8000b20:	18d2      	addgt	r2, r2, r3
 8000b22:	4041      	eorgt	r1, r0
 8000b24:	4048      	eorgt	r0, r1
 8000b26:	4041      	eorgt	r1, r0
 8000b28:	bfb8      	it	lt
 8000b2a:	425b      	neglt	r3, r3
 8000b2c:	2b19      	cmp	r3, #25
 8000b2e:	bf88      	it	hi
 8000b30:	4770      	bxhi	lr
 8000b32:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b36:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b3a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b3e:	bf18      	it	ne
 8000b40:	4240      	negne	r0, r0
 8000b42:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b46:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b4a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b4e:	bf18      	it	ne
 8000b50:	4249      	negne	r1, r1
 8000b52:	ea92 0f03 	teq	r2, r3
 8000b56:	d03f      	beq.n	8000bd8 <__addsf3+0xd8>
 8000b58:	f1a2 0201 	sub.w	r2, r2, #1
 8000b5c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b60:	eb10 000c 	adds.w	r0, r0, ip
 8000b64:	f1c3 0320 	rsb	r3, r3, #32
 8000b68:	fa01 f103 	lsl.w	r1, r1, r3
 8000b6c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b70:	d502      	bpl.n	8000b78 <__addsf3+0x78>
 8000b72:	4249      	negs	r1, r1
 8000b74:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b78:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b7c:	d313      	bcc.n	8000ba6 <__addsf3+0xa6>
 8000b7e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b82:	d306      	bcc.n	8000b92 <__addsf3+0x92>
 8000b84:	0840      	lsrs	r0, r0, #1
 8000b86:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b8a:	f102 0201 	add.w	r2, r2, #1
 8000b8e:	2afe      	cmp	r2, #254	@ 0xfe
 8000b90:	d251      	bcs.n	8000c36 <__addsf3+0x136>
 8000b92:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b96:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b9a:	bf08      	it	eq
 8000b9c:	f020 0001 	biceq.w	r0, r0, #1
 8000ba0:	ea40 0003 	orr.w	r0, r0, r3
 8000ba4:	4770      	bx	lr
 8000ba6:	0049      	lsls	r1, r1, #1
 8000ba8:	eb40 0000 	adc.w	r0, r0, r0
 8000bac:	3a01      	subs	r2, #1
 8000bae:	bf28      	it	cs
 8000bb0:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bb4:	d2ed      	bcs.n	8000b92 <__addsf3+0x92>
 8000bb6:	fab0 fc80 	clz	ip, r0
 8000bba:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bbe:	ebb2 020c 	subs.w	r2, r2, ip
 8000bc2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bc6:	bfaa      	itet	ge
 8000bc8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bcc:	4252      	neglt	r2, r2
 8000bce:	4318      	orrge	r0, r3
 8000bd0:	bfbc      	itt	lt
 8000bd2:	40d0      	lsrlt	r0, r2
 8000bd4:	4318      	orrlt	r0, r3
 8000bd6:	4770      	bx	lr
 8000bd8:	f092 0f00 	teq	r2, #0
 8000bdc:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000be0:	bf06      	itte	eq
 8000be2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000be6:	3201      	addeq	r2, #1
 8000be8:	3b01      	subne	r3, #1
 8000bea:	e7b5      	b.n	8000b58 <__addsf3+0x58>
 8000bec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bf0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bf4:	bf18      	it	ne
 8000bf6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bfa:	d021      	beq.n	8000c40 <__addsf3+0x140>
 8000bfc:	ea92 0f03 	teq	r2, r3
 8000c00:	d004      	beq.n	8000c0c <__addsf3+0x10c>
 8000c02:	f092 0f00 	teq	r2, #0
 8000c06:	bf08      	it	eq
 8000c08:	4608      	moveq	r0, r1
 8000c0a:	4770      	bx	lr
 8000c0c:	ea90 0f01 	teq	r0, r1
 8000c10:	bf1c      	itt	ne
 8000c12:	2000      	movne	r0, #0
 8000c14:	4770      	bxne	lr
 8000c16:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c1a:	d104      	bne.n	8000c26 <__addsf3+0x126>
 8000c1c:	0040      	lsls	r0, r0, #1
 8000c1e:	bf28      	it	cs
 8000c20:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c24:	4770      	bx	lr
 8000c26:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c2a:	bf3c      	itt	cc
 8000c2c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c30:	4770      	bxcc	lr
 8000c32:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c36:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c3a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c3e:	4770      	bx	lr
 8000c40:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c44:	bf16      	itet	ne
 8000c46:	4608      	movne	r0, r1
 8000c48:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c4c:	4601      	movne	r1, r0
 8000c4e:	0242      	lsls	r2, r0, #9
 8000c50:	bf06      	itte	eq
 8000c52:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c56:	ea90 0f01 	teqeq	r0, r1
 8000c5a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c5e:	4770      	bx	lr

08000c60 <__aeabi_ui2f>:
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e004      	b.n	8000c70 <__aeabi_i2f+0x8>
 8000c66:	bf00      	nop

08000c68 <__aeabi_i2f>:
 8000c68:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c6c:	bf48      	it	mi
 8000c6e:	4240      	negmi	r0, r0
 8000c70:	ea5f 0c00 	movs.w	ip, r0
 8000c74:	bf08      	it	eq
 8000c76:	4770      	bxeq	lr
 8000c78:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c7c:	4601      	mov	r1, r0
 8000c7e:	f04f 0000 	mov.w	r0, #0
 8000c82:	e01c      	b.n	8000cbe <__aeabi_l2f+0x2a>

08000c84 <__aeabi_ul2f>:
 8000c84:	ea50 0201 	orrs.w	r2, r0, r1
 8000c88:	bf08      	it	eq
 8000c8a:	4770      	bxeq	lr
 8000c8c:	f04f 0300 	mov.w	r3, #0
 8000c90:	e00a      	b.n	8000ca8 <__aeabi_l2f+0x14>
 8000c92:	bf00      	nop

08000c94 <__aeabi_l2f>:
 8000c94:	ea50 0201 	orrs.w	r2, r0, r1
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000ca0:	d502      	bpl.n	8000ca8 <__aeabi_l2f+0x14>
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	ea5f 0c01 	movs.w	ip, r1
 8000cac:	bf02      	ittt	eq
 8000cae:	4684      	moveq	ip, r0
 8000cb0:	4601      	moveq	r1, r0
 8000cb2:	2000      	moveq	r0, #0
 8000cb4:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cb8:	bf08      	it	eq
 8000cba:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cbe:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cc2:	fabc f28c 	clz	r2, ip
 8000cc6:	3a08      	subs	r2, #8
 8000cc8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ccc:	db10      	blt.n	8000cf0 <__aeabi_l2f+0x5c>
 8000cce:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cd2:	4463      	add	r3, ip
 8000cd4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd8:	f1c2 0220 	rsb	r2, r2, #32
 8000cdc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ce0:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce4:	eb43 0002 	adc.w	r0, r3, r2
 8000ce8:	bf08      	it	eq
 8000cea:	f020 0001 	biceq.w	r0, r0, #1
 8000cee:	4770      	bx	lr
 8000cf0:	f102 0220 	add.w	r2, r2, #32
 8000cf4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf8:	f1c2 0220 	rsb	r2, r2, #32
 8000cfc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d00:	fa21 f202 	lsr.w	r2, r1, r2
 8000d04:	eb43 0002 	adc.w	r0, r3, r2
 8000d08:	bf08      	it	eq
 8000d0a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_f2iz>:
 8000d10:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d14:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000d18:	d30f      	bcc.n	8000d3a <__aeabi_f2iz+0x2a>
 8000d1a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000d1e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d22:	d90d      	bls.n	8000d40 <__aeabi_f2iz+0x30>
 8000d24:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d28:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000d2c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d30:	fa23 f002 	lsr.w	r0, r3, r2
 8000d34:	bf18      	it	ne
 8000d36:	4240      	negne	r0, r0
 8000d38:	4770      	bx	lr
 8000d3a:	f04f 0000 	mov.w	r0, #0
 8000d3e:	4770      	bx	lr
 8000d40:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000d44:	d101      	bne.n	8000d4a <__aeabi_f2iz+0x3a>
 8000d46:	0242      	lsls	r2, r0, #9
 8000d48:	d105      	bne.n	8000d56 <__aeabi_f2iz+0x46>
 8000d4a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000d4e:	bf08      	it	eq
 8000d50:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000d54:	4770      	bx	lr
 8000d56:	f04f 0000 	mov.w	r0, #0
 8000d5a:	4770      	bx	lr

08000d5c <__aeabi_f2uiz>:
 8000d5c:	0042      	lsls	r2, r0, #1
 8000d5e:	d20e      	bcs.n	8000d7e <__aeabi_f2uiz+0x22>
 8000d60:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000d64:	d30b      	bcc.n	8000d7e <__aeabi_f2uiz+0x22>
 8000d66:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000d6a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d6e:	d409      	bmi.n	8000d84 <__aeabi_f2uiz+0x28>
 8000d70:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d74:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000d78:	fa23 f002 	lsr.w	r0, r3, r2
 8000d7c:	4770      	bx	lr
 8000d7e:	f04f 0000 	mov.w	r0, #0
 8000d82:	4770      	bx	lr
 8000d84:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000d88:	d101      	bne.n	8000d8e <__aeabi_f2uiz+0x32>
 8000d8a:	0242      	lsls	r2, r0, #9
 8000d8c:	d102      	bne.n	8000d94 <__aeabi_f2uiz+0x38>
 8000d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8000d92:	4770      	bx	lr
 8000d94:	f04f 0000 	mov.w	r0, #0
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000dac:	4b27      	ldr	r3, [pc, #156]	@ (8000e4c <MX_ADC1_Init+0xb0>)
 8000dae:	4a28      	ldr	r2, [pc, #160]	@ (8000e50 <MX_ADC1_Init+0xb4>)
 8000db0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000db2:	4b26      	ldr	r3, [pc, #152]	@ (8000e4c <MX_ADC1_Init+0xb0>)
 8000db4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000db8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dba:	4b24      	ldr	r3, [pc, #144]	@ (8000e4c <MX_ADC1_Init+0xb0>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dc0:	4b22      	ldr	r3, [pc, #136]	@ (8000e4c <MX_ADC1_Init+0xb0>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dc6:	4b21      	ldr	r3, [pc, #132]	@ (8000e4c <MX_ADC1_Init+0xb0>)
 8000dc8:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000dcc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dce:	4b1f      	ldr	r3, [pc, #124]	@ (8000e4c <MX_ADC1_Init+0xb0>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8000dd4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e4c <MX_ADC1_Init+0xb0>)
 8000dd6:	2203      	movs	r2, #3
 8000dd8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dda:	481c      	ldr	r0, [pc, #112]	@ (8000e4c <MX_ADC1_Init+0xb0>)
 8000ddc:	f002 ffea 	bl	8003db4 <HAL_ADC_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000de6:	f002 fb86 	bl	80034f6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000dea:	230a      	movs	r3, #10
 8000dec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dee:	2301      	movs	r3, #1
 8000df0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000df2:	2307      	movs	r3, #7
 8000df4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4814      	ldr	r0, [pc, #80]	@ (8000e4c <MX_ADC1_Init+0xb0>)
 8000dfc:	f003 f9ee 	bl	80041dc <HAL_ADC_ConfigChannel>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000e06:	f002 fb76 	bl	80034f6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000e0a:	230b      	movs	r3, #11
 8000e0c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e12:	1d3b      	adds	r3, r7, #4
 8000e14:	4619      	mov	r1, r3
 8000e16:	480d      	ldr	r0, [pc, #52]	@ (8000e4c <MX_ADC1_Init+0xb0>)
 8000e18:	f003 f9e0 	bl	80041dc <HAL_ADC_ConfigChannel>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000e22:	f002 fb68 	bl	80034f6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000e26:	2310      	movs	r3, #16
 8000e28:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e2e:	1d3b      	adds	r3, r7, #4
 8000e30:	4619      	mov	r1, r3
 8000e32:	4806      	ldr	r0, [pc, #24]	@ (8000e4c <MX_ADC1_Init+0xb0>)
 8000e34:	f003 f9d2 	bl	80041dc <HAL_ADC_ConfigChannel>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000e3e:	f002 fb5a 	bl	80034f6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e42:	bf00      	nop
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	200000bc 	.word	0x200000bc
 8000e50:	40012400 	.word	0x40012400

08000e54 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b088      	sub	sp, #32
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5c:	f107 0310 	add.w	r3, r7, #16
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a28      	ldr	r2, [pc, #160]	@ (8000f10 <HAL_ADC_MspInit+0xbc>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d149      	bne.n	8000f08 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e74:	4b27      	ldr	r3, [pc, #156]	@ (8000f14 <HAL_ADC_MspInit+0xc0>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	4a26      	ldr	r2, [pc, #152]	@ (8000f14 <HAL_ADC_MspInit+0xc0>)
 8000e7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e7e:	6193      	str	r3, [r2, #24]
 8000e80:	4b24      	ldr	r3, [pc, #144]	@ (8000f14 <HAL_ADC_MspInit+0xc0>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e8c:	4b21      	ldr	r3, [pc, #132]	@ (8000f14 <HAL_ADC_MspInit+0xc0>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	4a20      	ldr	r2, [pc, #128]	@ (8000f14 <HAL_ADC_MspInit+0xc0>)
 8000e92:	f043 0310 	orr.w	r3, r3, #16
 8000e96:	6193      	str	r3, [r2, #24]
 8000e98:	4b1e      	ldr	r3, [pc, #120]	@ (8000f14 <HAL_ADC_MspInit+0xc0>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	f003 0310 	and.w	r3, r3, #16
 8000ea0:	60bb      	str	r3, [r7, #8]
 8000ea2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = ADC_VOLT_Pin|ADC_AMP_Pin;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eac:	f107 0310 	add.w	r3, r7, #16
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4819      	ldr	r0, [pc, #100]	@ (8000f18 <HAL_ADC_MspInit+0xc4>)
 8000eb4:	f003 ffea 	bl	8004e8c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000eb8:	4b18      	ldr	r3, [pc, #96]	@ (8000f1c <HAL_ADC_MspInit+0xc8>)
 8000eba:	4a19      	ldr	r2, [pc, #100]	@ (8000f20 <HAL_ADC_MspInit+0xcc>)
 8000ebc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ebe:	4b17      	ldr	r3, [pc, #92]	@ (8000f1c <HAL_ADC_MspInit+0xc8>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ec4:	4b15      	ldr	r3, [pc, #84]	@ (8000f1c <HAL_ADC_MspInit+0xc8>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000eca:	4b14      	ldr	r3, [pc, #80]	@ (8000f1c <HAL_ADC_MspInit+0xc8>)
 8000ecc:	2280      	movs	r2, #128	@ 0x80
 8000ece:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ed0:	4b12      	ldr	r3, [pc, #72]	@ (8000f1c <HAL_ADC_MspInit+0xc8>)
 8000ed2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ed6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ed8:	4b10      	ldr	r3, [pc, #64]	@ (8000f1c <HAL_ADC_MspInit+0xc8>)
 8000eda:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ede:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ee0:	4b0e      	ldr	r3, [pc, #56]	@ (8000f1c <HAL_ADC_MspInit+0xc8>)
 8000ee2:	2220      	movs	r2, #32
 8000ee4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8000f1c <HAL_ADC_MspInit+0xc8>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000eec:	480b      	ldr	r0, [pc, #44]	@ (8000f1c <HAL_ADC_MspInit+0xc8>)
 8000eee:	f003 fd2b 	bl	8004948 <HAL_DMA_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000ef8:	f002 fafd 	bl	80034f6 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a07      	ldr	r2, [pc, #28]	@ (8000f1c <HAL_ADC_MspInit+0xc8>)
 8000f00:	621a      	str	r2, [r3, #32]
 8000f02:	4a06      	ldr	r2, [pc, #24]	@ (8000f1c <HAL_ADC_MspInit+0xc8>)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f08:	bf00      	nop
 8000f0a:	3720      	adds	r7, #32
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40012400 	.word	0x40012400
 8000f14:	40021000 	.word	0x40021000
 8000f18:	40011000 	.word	0x40011000
 8000f1c:	200000ec 	.word	0x200000ec
 8000f20:	40020008 	.word	0x40020008

08000f24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f5c <MX_DMA_Init+0x38>)
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	4a0b      	ldr	r2, [pc, #44]	@ (8000f5c <MX_DMA_Init+0x38>)
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	6153      	str	r3, [r2, #20]
 8000f36:	4b09      	ldr	r3, [pc, #36]	@ (8000f5c <MX_DMA_Init+0x38>)
 8000f38:	695b      	ldr	r3, [r3, #20]
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2100      	movs	r1, #0
 8000f46:	200b      	movs	r0, #11
 8000f48:	f003 fcc7 	bl	80048da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f4c:	200b      	movs	r0, #11
 8000f4e:	f003 fce0 	bl	8004912 <HAL_NVIC_EnableIRQ>

}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40021000 	.word	0x40021000

08000f60 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b088      	sub	sp, #32
 8000f64:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f66:	f107 0310 	add.w	r3, r7, #16
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f74:	4b42      	ldr	r3, [pc, #264]	@ (8001080 <MX_GPIO_Init+0x120>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	4a41      	ldr	r2, [pc, #260]	@ (8001080 <MX_GPIO_Init+0x120>)
 8000f7a:	f043 0310 	orr.w	r3, r3, #16
 8000f7e:	6193      	str	r3, [r2, #24]
 8000f80:	4b3f      	ldr	r3, [pc, #252]	@ (8001080 <MX_GPIO_Init+0x120>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	f003 0310 	and.w	r3, r3, #16
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8c:	4b3c      	ldr	r3, [pc, #240]	@ (8001080 <MX_GPIO_Init+0x120>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	4a3b      	ldr	r2, [pc, #236]	@ (8001080 <MX_GPIO_Init+0x120>)
 8000f92:	f043 0304 	orr.w	r3, r3, #4
 8000f96:	6193      	str	r3, [r2, #24]
 8000f98:	4b39      	ldr	r3, [pc, #228]	@ (8001080 <MX_GPIO_Init+0x120>)
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	f003 0304 	and.w	r3, r3, #4
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa4:	4b36      	ldr	r3, [pc, #216]	@ (8001080 <MX_GPIO_Init+0x120>)
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	4a35      	ldr	r2, [pc, #212]	@ (8001080 <MX_GPIO_Init+0x120>)
 8000faa:	f043 0308 	orr.w	r3, r3, #8
 8000fae:	6193      	str	r3, [r2, #24]
 8000fb0:	4b33      	ldr	r3, [pc, #204]	@ (8001080 <MX_GPIO_Init+0x120>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	f003 0308 	and.w	r3, r3, #8
 8000fb8:	607b      	str	r3, [r7, #4]
 8000fba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fbc:	4b30      	ldr	r3, [pc, #192]	@ (8001080 <MX_GPIO_Init+0x120>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	4a2f      	ldr	r2, [pc, #188]	@ (8001080 <MX_GPIO_Init+0x120>)
 8000fc2:	f043 0320 	orr.w	r3, r3, #32
 8000fc6:	6193      	str	r3, [r2, #24]
 8000fc8:	4b2d      	ldr	r3, [pc, #180]	@ (8001080 <MX_GPIO_Init+0x120>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	f003 0320 	and.w	r3, r3, #32
 8000fd0:	603b      	str	r3, [r7, #0]
 8000fd2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SSR_3_Pin|SSR_2_Pin|SSR_1_Pin|ENABLE_M1_Pin
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f64f 71dc 	movw	r1, #65500	@ 0xffdc
 8000fda:	482a      	ldr	r0, [pc, #168]	@ (8001084 <MX_GPIO_Init+0x124>)
 8000fdc:	f004 f8da 	bl	8005194 <HAL_GPIO_WritePin>
                          |ENABLE_M2_Pin|DIR_Pin|SSR_6_Pin|SSR_5_Pin
                          |RELAY_RESET_3_Pin|RELAY_RESET_2_Pin|RELAY_K7_Pin|RELAY_K1_Pin
                          |RELAY_K2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENABLE_M3_Pin|ENABLE_M4_Pin|MUX_SELECT_Pin|ENABLE_M5_Pin
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f649 11f7 	movw	r1, #39415	@ 0x99f7
 8000fe6:	4828      	ldr	r0, [pc, #160]	@ (8001088 <MX_GPIO_Init+0x128>)
 8000fe8:	f004 f8d4 	bl	8005194 <HAL_GPIO_WritePin>
                          |ENABLE_M6_Pin|ENABLE_M7_Pin|ENABLE_M8_Pin|RELAY_K12_CAL_RES_Pin
                          |RELAY_K11_CAL_CONT_Pin|RELAY_K9_K10_GND_COND_Pin|RELAY_K8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|SSR_8_Pin|SSR_7_Pin|RELAY_K4_Pin
 8000fec:	2200      	movs	r2, #0
 8000fee:	f24c 313a 	movw	r1, #49978	@ 0xc33a
 8000ff2:	4826      	ldr	r0, [pc, #152]	@ (800108c <MX_GPIO_Init+0x12c>)
 8000ff4:	f004 f8ce 	bl	8005194 <HAL_GPIO_WritePin>
                          |RELAY_K5_Pin|RELAY_K6_Pin|RELAY_RESET_1_Pin|SSR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_K3_GPIO_Port, RELAY_K3_Pin, GPIO_PIN_RESET);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2104      	movs	r1, #4
 8000ffc:	4824      	ldr	r0, [pc, #144]	@ (8001090 <MX_GPIO_Init+0x130>)
 8000ffe:	f004 f8c9 	bl	8005194 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = SSR_3_Pin|SSR_2_Pin|SSR_1_Pin|ENABLE_M1_Pin
 8001002:	f64f 73dc 	movw	r3, #65500	@ 0xffdc
 8001006:	613b      	str	r3, [r7, #16]
                          |ENABLE_M2_Pin|DIR_Pin|SSR_6_Pin|SSR_5_Pin
                          |RELAY_RESET_3_Pin|RELAY_RESET_2_Pin|RELAY_K7_Pin|RELAY_K1_Pin
                          |RELAY_K2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001008:	2301      	movs	r3, #1
 800100a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001010:	2302      	movs	r3, #2
 8001012:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001014:	f107 0310 	add.w	r3, r7, #16
 8001018:	4619      	mov	r1, r3
 800101a:	481a      	ldr	r0, [pc, #104]	@ (8001084 <MX_GPIO_Init+0x124>)
 800101c:	f003 ff36 	bl	8004e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ENABLE_M3_Pin|ENABLE_M4_Pin|MUX_SELECT_Pin|ENABLE_M5_Pin
 8001020:	f649 13f7 	movw	r3, #39415	@ 0x99f7
 8001024:	613b      	str	r3, [r7, #16]
                          |ENABLE_M6_Pin|ENABLE_M7_Pin|ENABLE_M8_Pin|RELAY_K12_CAL_RES_Pin
                          |RELAY_K11_CAL_CONT_Pin|RELAY_K9_K10_GND_COND_Pin|RELAY_K8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001026:	2301      	movs	r3, #1
 8001028:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	2302      	movs	r3, #2
 8001030:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001032:	f107 0310 	add.w	r3, r7, #16
 8001036:	4619      	mov	r1, r3
 8001038:	4813      	ldr	r0, [pc, #76]	@ (8001088 <MX_GPIO_Init+0x128>)
 800103a:	f003 ff27 	bl	8004e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_Pin|SSR_8_Pin|SSR_7_Pin|RELAY_K4_Pin
 800103e:	f24c 333a 	movw	r3, #49978	@ 0xc33a
 8001042:	613b      	str	r3, [r7, #16]
                          |RELAY_K5_Pin|RELAY_K6_Pin|RELAY_RESET_1_Pin|SSR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001044:	2301      	movs	r3, #1
 8001046:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104c:	2302      	movs	r3, #2
 800104e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001050:	f107 0310 	add.w	r3, r7, #16
 8001054:	4619      	mov	r1, r3
 8001056:	480d      	ldr	r0, [pc, #52]	@ (800108c <MX_GPIO_Init+0x12c>)
 8001058:	f003 ff18 	bl	8004e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RELAY_K3_Pin;
 800105c:	2304      	movs	r3, #4
 800105e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001060:	2301      	movs	r3, #1
 8001062:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	2302      	movs	r3, #2
 800106a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RELAY_K3_GPIO_Port, &GPIO_InitStruct);
 800106c:	f107 0310 	add.w	r3, r7, #16
 8001070:	4619      	mov	r1, r3
 8001072:	4807      	ldr	r0, [pc, #28]	@ (8001090 <MX_GPIO_Init+0x130>)
 8001074:	f003 ff0a 	bl	8004e8c <HAL_GPIO_Init>

}
 8001078:	bf00      	nop
 800107a:	3720      	adds	r7, #32
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40021000 	.word	0x40021000
 8001084:	40011000 	.word	0x40011000
 8001088:	40010800 	.word	0x40010800
 800108c:	40010c00 	.word	0x40010c00
 8001090:	40011400 	.word	0x40011400

08001094 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001098:	4b12      	ldr	r3, [pc, #72]	@ (80010e4 <MX_I2C1_Init+0x50>)
 800109a:	4a13      	ldr	r2, [pc, #76]	@ (80010e8 <MX_I2C1_Init+0x54>)
 800109c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800109e:	4b11      	ldr	r3, [pc, #68]	@ (80010e4 <MX_I2C1_Init+0x50>)
 80010a0:	4a12      	ldr	r2, [pc, #72]	@ (80010ec <MX_I2C1_Init+0x58>)
 80010a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010a4:	4b0f      	ldr	r3, [pc, #60]	@ (80010e4 <MX_I2C1_Init+0x50>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010aa:	4b0e      	ldr	r3, [pc, #56]	@ (80010e4 <MX_I2C1_Init+0x50>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010b0:	4b0c      	ldr	r3, [pc, #48]	@ (80010e4 <MX_I2C1_Init+0x50>)
 80010b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010b8:	4b0a      	ldr	r3, [pc, #40]	@ (80010e4 <MX_I2C1_Init+0x50>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010be:	4b09      	ldr	r3, [pc, #36]	@ (80010e4 <MX_I2C1_Init+0x50>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010c4:	4b07      	ldr	r3, [pc, #28]	@ (80010e4 <MX_I2C1_Init+0x50>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ca:	4b06      	ldr	r3, [pc, #24]	@ (80010e4 <MX_I2C1_Init+0x50>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010d0:	4804      	ldr	r0, [pc, #16]	@ (80010e4 <MX_I2C1_Init+0x50>)
 80010d2:	f004 f877 	bl	80051c4 <HAL_I2C_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010dc:	f002 fa0b 	bl	80034f6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000130 	.word	0x20000130
 80010e8:	40005400 	.word	0x40005400
 80010ec:	000186a0 	.word	0x000186a0

080010f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b088      	sub	sp, #32
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	f107 0310 	add.w	r3, r7, #16
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a15      	ldr	r2, [pc, #84]	@ (8001160 <HAL_I2C_MspInit+0x70>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d123      	bne.n	8001158 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001110:	4b14      	ldr	r3, [pc, #80]	@ (8001164 <HAL_I2C_MspInit+0x74>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	4a13      	ldr	r2, [pc, #76]	@ (8001164 <HAL_I2C_MspInit+0x74>)
 8001116:	f043 0308 	orr.w	r3, r3, #8
 800111a:	6193      	str	r3, [r2, #24]
 800111c:	4b11      	ldr	r3, [pc, #68]	@ (8001164 <HAL_I2C_MspInit+0x74>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	f003 0308 	and.w	r3, r3, #8
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001128:	23c0      	movs	r3, #192	@ 0xc0
 800112a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800112c:	2312      	movs	r3, #18
 800112e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001130:	2303      	movs	r3, #3
 8001132:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001134:	f107 0310 	add.w	r3, r7, #16
 8001138:	4619      	mov	r1, r3
 800113a:	480b      	ldr	r0, [pc, #44]	@ (8001168 <HAL_I2C_MspInit+0x78>)
 800113c:	f003 fea6 	bl	8004e8c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001140:	4b08      	ldr	r3, [pc, #32]	@ (8001164 <HAL_I2C_MspInit+0x74>)
 8001142:	69db      	ldr	r3, [r3, #28]
 8001144:	4a07      	ldr	r2, [pc, #28]	@ (8001164 <HAL_I2C_MspInit+0x74>)
 8001146:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800114a:	61d3      	str	r3, [r2, #28]
 800114c:	4b05      	ldr	r3, [pc, #20]	@ (8001164 <HAL_I2C_MspInit+0x74>)
 800114e:	69db      	ldr	r3, [r3, #28]
 8001150:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001158:	bf00      	nop
 800115a:	3720      	adds	r7, #32
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40005400 	.word	0x40005400
 8001164:	40021000 	.word	0x40021000
 8001168:	40010c00 	.word	0x40010c00

0800116c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001170:	f002 fd9a 	bl	8003ca8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001174:	f000 f84c 	bl	8001210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001178:	f7ff fef2 	bl	8000f60 <MX_GPIO_Init>
  MX_DMA_Init();
 800117c:	f7ff fed2 	bl	8000f24 <MX_DMA_Init>
  MX_TIM3_Init();
 8001180:	f002 fab0 	bl	80036e4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001184:	f002 fc06 	bl	8003994 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001188:	f7ff fe08 	bl	8000d9c <MX_ADC1_Init>
  MX_I2C1_Init();
 800118c:	f7ff ff82 	bl	8001094 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8001190:	f002 fc2a 	bl	80039e8 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 8001194:	f002 fb1e 	bl	80037d4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  // Retarget IO stream to UART
  RetargetInit(&huart1);
 8001198:	4818      	ldr	r0, [pc, #96]	@ (80011fc <main+0x90>)
 800119a:	f002 fd05 	bl	8003ba8 <RetargetInit>
  // Initialize stepper motors
  motor_init();
 800119e:	f001 fdff 	bl	8002da0 <motor_init>
  // initialize multiplexer
  multiplexer_set(MUX_STM32);
 80011a2:	2001      	movs	r0, #1
 80011a4:	f001 fa74 	bl	8002690 <multiplexer_set>
  // Initialize relays
  relay_init();
 80011a8:	f001 fc42 	bl	8002a30 <relay_init>
  // enable receive interrupt
  uartrx_interrupt_init();
 80011ac:	f001 fb1e 	bl	80027ec <uartrx_interrupt_init>
  // Initialize autolauncher parameters i.e. read eeprom
  parameter_init();
 80011b0:	f001 faa2 	bl	80026f8 <parameter_init>
  // display main menu at startup
  menu_main_print();
 80011b4:	f000 f87c 	bl	80012b0 <menu_main_print>
  printf("\r\n> ");
 80011b8:	4811      	ldr	r0, [pc, #68]	@ (8001200 <main+0x94>)
 80011ba:	f007 fe8d 	bl	8008ed8 <iprintf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // menu control loop
	  if(active == rxStatus){ // set to active with UART RX interrupt
 80011be:	4b11      	ldr	r3, [pc, #68]	@ (8001204 <main+0x98>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d115      	bne.n	80011f2 <main+0x86>
		  rxStatus = idle;
 80011c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001204 <main+0x98>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	701a      	strb	r2, [r3, #0]
		  if( mainMenu == activeMenu){
 80011cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001208 <main+0x9c>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d105      	bne.n	80011e0 <main+0x74>
			  menu_main_process_input(rxChar); // go to main switch case menu
 80011d4:	4b0d      	ldr	r3, [pc, #52]	@ (800120c <main+0xa0>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	4618      	mov	r0, r3
 80011da:	f000 f905 	bl	80013e8 <menu_main_process_input>
 80011de:	e008      	b.n	80011f2 <main+0x86>
		  } else if ( configMenu == activeMenu){
 80011e0:	4b09      	ldr	r3, [pc, #36]	@ (8001208 <main+0x9c>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d104      	bne.n	80011f2 <main+0x86>
			  menu_config_process_input(rxChar);
 80011e8:	4b08      	ldr	r3, [pc, #32]	@ (800120c <main+0xa0>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f000 fbf9 	bl	80019e4 <menu_config_process_input>
		  }
	  }
	  // monitor voltage and send alarm if it's below a threshold
	  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	  HAL_Delay(1); // needed to debug, remove
 80011f2:	2001      	movs	r0, #1
 80011f4:	f002 fdba 	bl	8003d6c <HAL_Delay>
	  if(active == rxStatus){ // set to active with UART RX interrupt
 80011f8:	e7e1      	b.n	80011be <main+0x52>
 80011fa:	bf00      	nop
 80011fc:	20000224 	.word	0x20000224
 8001200:	08009e30 	.word	0x08009e30
 8001204:	20000186 	.word	0x20000186
 8001208:	20000187 	.word	0x20000187
 800120c:	20000189 	.word	0x20000189

08001210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b094      	sub	sp, #80	@ 0x50
 8001214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001216:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800121a:	2228      	movs	r2, #40	@ 0x28
 800121c:	2100      	movs	r1, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f008 f856 	bl	80092d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001240:	2302      	movs	r3, #2
 8001242:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001244:	2301      	movs	r3, #1
 8001246:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001248:	2310      	movs	r3, #16
 800124a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800124c:	2300      	movs	r3, #0
 800124e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001250:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001254:	4618      	mov	r0, r3
 8001256:	f004 ffe9 	bl	800622c <HAL_RCC_OscConfig>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001260:	f002 f949 	bl	80034f6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001264:	230f      	movs	r3, #15
 8001266:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001268:	2300      	movs	r3, #0
 800126a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800126c:	2300      	movs	r3, #0
 800126e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001270:	2300      	movs	r3, #0
 8001272:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001274:	2300      	movs	r3, #0
 8001276:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	2100      	movs	r1, #0
 800127e:	4618      	mov	r0, r3
 8001280:	f005 fa56 	bl	8006730 <HAL_RCC_ClockConfig>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800128a:	f002 f934 	bl	80034f6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800128e:	2302      	movs	r3, #2
 8001290:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	4618      	mov	r0, r3
 800129a:	f005 fbd7 	bl	8006a4c <HAL_RCCEx_PeriphCLKConfig>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80012a4:	f002 f927 	bl	80034f6 <Error_Handler>
  }
}
 80012a8:	bf00      	nop
 80012aa:	3750      	adds	r7, #80	@ 0x50
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <menu_main_print>:
}

/********************************************** MENU FUNCTIONS **********************************************/

/* Print Main Menu options */
void menu_main_print(void) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
    printf("\r\n\n\r");
 80012b4:	4832      	ldr	r0, [pc, #200]	@ (8001380 <menu_main_print+0xd0>)
 80012b6:	f007 fe0f 	bl	8008ed8 <iprintf>
    printf("|========================================|\n\r");
 80012ba:	4832      	ldr	r0, [pc, #200]	@ (8001384 <menu_main_print+0xd4>)
 80012bc:	f007 fe0c 	bl	8008ed8 <iprintf>
    printf("|   AOML Autolauncher board version 3.0  |\n\r");
 80012c0:	4831      	ldr	r0, [pc, #196]	@ (8001388 <menu_main_print+0xd8>)
 80012c2:	f007 fe09 	bl	8008ed8 <iprintf>
    printf("|        Firmware version 2024.12.dd     |\n\r");
 80012c6:	4831      	ldr	r0, [pc, #196]	@ (800138c <menu_main_print+0xdc>)
 80012c8:	f007 fe06 	bl	8008ed8 <iprintf>
    printf("|========================================|\n\r");
 80012cc:	482d      	ldr	r0, [pc, #180]	@ (8001384 <menu_main_print+0xd4>)
 80012ce:	f007 fe03 	bl	8008ed8 <iprintf>
    printf("|     Model #ALV3.0      S/N ");
 80012d2:	482f      	ldr	r0, [pc, #188]	@ (8001390 <menu_main_print+0xe0>)
 80012d4:	f007 fe00 	bl	8008ed8 <iprintf>
    print_serial_number();
 80012d8:	f001 f978 	bl	80025cc <print_serial_number>
    printf("       |\n\r");
 80012dc:	482d      	ldr	r0, [pc, #180]	@ (8001394 <menu_main_print+0xe4>)
 80012de:	f007 fdfb 	bl	8008ed8 <iprintf>
    printf("|========================================|\n\r");
 80012e2:	4828      	ldr	r0, [pc, #160]	@ (8001384 <menu_main_print+0xd4>)
 80012e4:	f007 fdf8 	bl	8008ed8 <iprintf>
    printf("|               COMMANDS                 |\r\n");
 80012e8:	482b      	ldr	r0, [pc, #172]	@ (8001398 <menu_main_print+0xe8>)
 80012ea:	f007 fe5d 	bl	8008fa8 <puts>
//    if (launcher.configured != 'Y') {
//        printf("| ERROR, NO SERIAL NUMBER ASSIGNED 	 |\n\r");
//    }
    printf("|========================================|\n\r");
 80012ee:	4825      	ldr	r0, [pc, #148]	@ (8001384 <menu_main_print+0xd4>)
 80012f0:	f007 fdf2 	bl	8008ed8 <iprintf>
    printf("| Connect  Cal Sim BT  	0                |\n\r");
 80012f4:	4829      	ldr	r0, [pc, #164]	@ (800139c <menu_main_print+0xec>)
 80012f6:	f007 fdef 	bl	8008ed8 <iprintf>
    if (launcher.tubeCount == '6') {
 80012fa:	4b29      	ldr	r3, [pc, #164]	@ (80013a0 <menu_main_print+0xf0>)
 80012fc:	785b      	ldrb	r3, [r3, #1]
 80012fe:	2b36      	cmp	r3, #54	@ 0x36
 8001300:	d109      	bne.n	8001316 <menu_main_print+0x66>
        printf("| Connect  XBT 1-6     1,2,3,4,5,6       |\n\r");
 8001302:	4828      	ldr	r0, [pc, #160]	@ (80013a4 <menu_main_print+0xf4>)
 8001304:	f007 fde8 	bl	8008ed8 <iprintf>
        printf("| Extend   Pin 1-6     U,V,W,X,Y,Z       |\n\r");
 8001308:	4827      	ldr	r0, [pc, #156]	@ (80013a8 <menu_main_print+0xf8>)
 800130a:	f007 fde5 	bl	8008ed8 <iprintf>
        printf("| Retract  Pin 1-6     A,B,C,D,E,F       |\n\r");
 800130e:	4827      	ldr	r0, [pc, #156]	@ (80013ac <menu_main_print+0xfc>)
 8001310:	f007 fde2 	bl	8008ed8 <iprintf>
 8001314:	e010      	b.n	8001338 <menu_main_print+0x88>
    } else if (launcher.tubeCount == '8') {
 8001316:	4b22      	ldr	r3, [pc, #136]	@ (80013a0 <menu_main_print+0xf0>)
 8001318:	785b      	ldrb	r3, [r3, #1]
 800131a:	2b38      	cmp	r3, #56	@ 0x38
 800131c:	d109      	bne.n	8001332 <menu_main_print+0x82>
        printf("| Connect  XBT 1-8      1,2,3,4,5,6,7,8  |\n\r");
 800131e:	4824      	ldr	r0, [pc, #144]	@ (80013b0 <menu_main_print+0x100>)
 8001320:	f007 fdda 	bl	8008ed8 <iprintf>
        printf("| Extend   Pin 1-8      U,V,W,X,Y,Z,S,T  |\n\r");
 8001324:	4823      	ldr	r0, [pc, #140]	@ (80013b4 <menu_main_print+0x104>)
 8001326:	f007 fdd7 	bl	8008ed8 <iprintf>
        printf("| Retract  Pin 1-8      A,B,C,D,E,F,H,I  |\n\r");
 800132a:	4823      	ldr	r0, [pc, #140]	@ (80013b8 <menu_main_print+0x108>)
 800132c:	f007 fdd4 	bl	8008ed8 <iprintf>
 8001330:	e002      	b.n	8001338 <menu_main_print+0x88>
    } else {
    	printf("| ERROR, NO TUBE COUNT!!                |\n\r");
 8001332:	4822      	ldr	r0, [pc, #136]	@ (80013bc <menu_main_print+0x10c>)
 8001334:	f007 fdd0 	bl	8008ed8 <iprintf>
    }
    printf("| Unground XBT         	G                |\n\r");
 8001338:	4821      	ldr	r0, [pc, #132]	@ (80013c0 <menu_main_print+0x110>)
 800133a:	f007 fdcd 	bl	8008ed8 <iprintf>
    printf("| Calibrate ON         	K                |\n\r");
 800133e:	4821      	ldr	r0, [pc, #132]	@ (80013c4 <menu_main_print+0x114>)
 8001340:	f007 fdca 	bl	8008ed8 <iprintf>
    printf("| Calibration resistor	L                |\n\r");
 8001344:	4820      	ldr	r0, [pc, #128]	@ (80013c8 <menu_main_print+0x118>)
 8001346:	f007 fdc7 	bl	8008ed8 <iprintf>
    printf("| Reset all relays    	R                |\n\r");
 800134a:	4820      	ldr	r0, [pc, #128]	@ (80013cc <menu_main_print+0x11c>)
 800134c:	f007 fdc4 	bl	8008ed8 <iprintf>
    printf("| Print serial number  	s                |\n\r");
 8001350:	481f      	ldr	r0, [pc, #124]	@ (80013d0 <menu_main_print+0x120>)
 8001352:	f007 fdc1 	bl	8008ed8 <iprintf>
    printf("| This menu            	M                |\n\r");
 8001356:	481f      	ldr	r0, [pc, #124]	@ (80013d4 <menu_main_print+0x124>)
 8001358:	f007 fdbe 	bl	8008ed8 <iprintf>
    printf("| Read voltage & temp   P                |\n\r");
 800135c:	481e      	ldr	r0, [pc, #120]	@ (80013d8 <menu_main_print+0x128>)
 800135e:	f007 fdbb 	bl	8008ed8 <iprintf>
    printf("| Set Tx to GPS         N                |\n\r");
 8001362:	481e      	ldr	r0, [pc, #120]	@ (80013dc <menu_main_print+0x12c>)
 8001364:	f007 fdb8 	bl	8008ed8 <iprintf>
    printf("| Set Tx to STM32       O                |\n\r");
 8001368:	481d      	ldr	r0, [pc, #116]	@ (80013e0 <menu_main_print+0x130>)
 800136a:	f007 fdb5 	bl	8008ed8 <iprintf>
    printf("|========================================|\n\r");
 800136e:	4805      	ldr	r0, [pc, #20]	@ (8001384 <menu_main_print+0xd4>)
 8001370:	f007 fdb2 	bl	8008ed8 <iprintf>
    printf("\r\n");
 8001374:	481b      	ldr	r0, [pc, #108]	@ (80013e4 <menu_main_print+0x134>)
 8001376:	f007 fe17 	bl	8008fa8 <puts>
}//end status_message
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	08009e50 	.word	0x08009e50
 8001384:	08009e58 	.word	0x08009e58
 8001388:	08009e88 	.word	0x08009e88
 800138c:	08009eb8 	.word	0x08009eb8
 8001390:	08009ee8 	.word	0x08009ee8
 8001394:	08009f08 	.word	0x08009f08
 8001398:	08009f14 	.word	0x08009f14
 800139c:	08009f40 	.word	0x08009f40
 80013a0:	20000000 	.word	0x20000000
 80013a4:	08009f70 	.word	0x08009f70
 80013a8:	08009fa0 	.word	0x08009fa0
 80013ac:	08009fd0 	.word	0x08009fd0
 80013b0:	0800a000 	.word	0x0800a000
 80013b4:	0800a030 	.word	0x0800a030
 80013b8:	0800a060 	.word	0x0800a060
 80013bc:	0800a090 	.word	0x0800a090
 80013c0:	0800a0bc 	.word	0x0800a0bc
 80013c4:	0800a0ec 	.word	0x0800a0ec
 80013c8:	0800a11c 	.word	0x0800a11c
 80013cc:	0800a148 	.word	0x0800a148
 80013d0:	0800a174 	.word	0x0800a174
 80013d4:	0800a1a4 	.word	0x0800a1a4
 80013d8:	0800a1d4 	.word	0x0800a1d4
 80013dc:	0800a204 	.word	0x0800a204
 80013e0:	0800a234 	.word	0x0800a234
 80013e4:	0800a264 	.word	0x0800a264

080013e8 <menu_main_process_input>:


/* Process char received while in Main menu */
void menu_main_process_input(char option){
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	71fb      	strb	r3, [r7, #7]
	printf("\r\n> Executing OPTION (%c) --> ", option);
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	4619      	mov	r1, r3
 80013f6:	48cb      	ldr	r0, [pc, #812]	@ (8001724 <menu_main_process_input+0x33c>)
 80013f8:	f007 fd6e 	bl	8008ed8 <iprintf>

	switch (option){
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	3b30      	subs	r3, #48	@ 0x30
 8001400:	2b4e      	cmp	r3, #78	@ 0x4e
 8001402:	f200 8211 	bhi.w	8001828 <menu_main_process_input+0x440>
 8001406:	a201      	add	r2, pc, #4	@ (adr r2, 800140c <menu_main_process_input+0x24>)
 8001408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800140c:	08001549 	.word	0x08001549
 8001410:	0800155d 	.word	0x0800155d
 8001414:	0800156b 	.word	0x0800156b
 8001418:	08001579 	.word	0x08001579
 800141c:	08001587 	.word	0x08001587
 8001420:	08001595 	.word	0x08001595
 8001424:	080015a3 	.word	0x080015a3
 8001428:	080015b1 	.word	0x080015b1
 800142c:	080015cf 	.word	0x080015cf
 8001430:	08001829 	.word	0x08001829
 8001434:	08001829 	.word	0x08001829
 8001438:	08001829 	.word	0x08001829
 800143c:	08001829 	.word	0x08001829
 8001440:	08001829 	.word	0x08001829
 8001444:	08001829 	.word	0x08001829
 8001448:	08001829 	.word	0x08001829
 800144c:	08001829 	.word	0x08001829
 8001450:	0800167d 	.word	0x0800167d
 8001454:	0800168b 	.word	0x0800168b
 8001458:	08001699 	.word	0x08001699
 800145c:	080016a7 	.word	0x080016a7
 8001460:	080016b5 	.word	0x080016b5
 8001464:	080016c3 	.word	0x080016c3
 8001468:	080017b5 	.word	0x080017b5
 800146c:	080016d1 	.word	0x080016d1
 8001470:	080016ef 	.word	0x080016ef
 8001474:	08001829 	.word	0x08001829
 8001478:	0800170d 	.word	0x0800170d
 800147c:	080017a9 	.word	0x080017a9
 8001480:	080017c1 	.word	0x080017c1
 8001484:	080017fd 	.word	0x080017fd
 8001488:	08001811 	.word	0x08001811
 800148c:	080017f1 	.word	0x080017f1
 8001490:	08001829 	.word	0x08001829
 8001494:	08001719 	.word	0x08001719
 8001498:	08001641 	.word	0x08001641
 800149c:	0800165f 	.word	0x0800165f
 80014a0:	080015ed 	.word	0x080015ed
 80014a4:	080015fb 	.word	0x080015fb
 80014a8:	08001609 	.word	0x08001609
 80014ac:	08001617 	.word	0x08001617
 80014b0:	08001625 	.word	0x08001625
 80014b4:	08001633 	.word	0x08001633
 80014b8:	08001829 	.word	0x08001829
 80014bc:	08001829 	.word	0x08001829
 80014c0:	08001829 	.word	0x08001829
 80014c4:	08001829 	.word	0x08001829
 80014c8:	08001829 	.word	0x08001829
 80014cc:	08001829 	.word	0x08001829
 80014d0:	08001829 	.word	0x08001829
 80014d4:	08001829 	.word	0x08001829
 80014d8:	08001829 	.word	0x08001829
 80014dc:	08001829 	.word	0x08001829
 80014e0:	08001829 	.word	0x08001829
 80014e4:	08001829 	.word	0x08001829
 80014e8:	08001829 	.word	0x08001829
 80014ec:	08001829 	.word	0x08001829
 80014f0:	08001829 	.word	0x08001829
 80014f4:	08001829 	.word	0x08001829
 80014f8:	08001829 	.word	0x08001829
 80014fc:	08001829 	.word	0x08001829
 8001500:	08001829 	.word	0x08001829
 8001504:	08001829 	.word	0x08001829
 8001508:	08001829 	.word	0x08001829
 800150c:	08001829 	.word	0x08001829
 8001510:	08001829 	.word	0x08001829
 8001514:	08001829 	.word	0x08001829
 8001518:	080017d9 	.word	0x080017d9
 800151c:	08001829 	.word	0x08001829
 8001520:	08001829 	.word	0x08001829
 8001524:	08001829 	.word	0x08001829
 8001528:	08001829 	.word	0x08001829
 800152c:	08001829 	.word	0x08001829
 8001530:	08001829 	.word	0x08001829
 8001534:	08001829 	.word	0x08001829
 8001538:	08001829 	.word	0x08001829
 800153c:	08001829 	.word	0x08001829
 8001540:	08001829 	.word	0x08001829
 8001544:	080017c7 	.word	0x080017c7
		// Connect XBT pins
    case '0':
        //engage calibration resistor
    	printf("unground_xbt(), calibration_resistor(), calibrate_on()\r\n");
 8001548:	4877      	ldr	r0, [pc, #476]	@ (8001728 <menu_main_process_input+0x340>)
 800154a:	f007 fd2d 	bl	8008fa8 <puts>
        unground_xbt();
 800154e:	f001 f95b 	bl	8002808 <unground_xbt>
        calibration_resistor();
 8001552:	f001 f971 	bl	8002838 <calibration_resistor>
        calibrate_on();
 8001556:	f001 f987 	bl	8002868 <calibrate_on>
        break;
 800155a:	e169      	b.n	8001830 <menu_main_process_input+0x448>
    case '1':
    	printf("connect_xbt_pin(1)\r\n");
 800155c:	4873      	ldr	r0, [pc, #460]	@ (800172c <menu_main_process_input+0x344>)
 800155e:	f007 fd23 	bl	8008fa8 <puts>
        connect_xbt_pin(1);
 8001562:	2001      	movs	r0, #1
 8001564:	f001 f9c4 	bl	80028f0 <connect_xbt_pin>
        break;
 8001568:	e162      	b.n	8001830 <menu_main_process_input+0x448>
    case '2':
        connect_xbt_pin(2);
 800156a:	2002      	movs	r0, #2
 800156c:	f001 f9c0 	bl	80028f0 <connect_xbt_pin>
        printf("connect_xbt_pin(2)\r\n");
 8001570:	486f      	ldr	r0, [pc, #444]	@ (8001730 <menu_main_process_input+0x348>)
 8001572:	f007 fd19 	bl	8008fa8 <puts>
        break;
 8001576:	e15b      	b.n	8001830 <menu_main_process_input+0x448>
    case '3':
        connect_xbt_pin(3);
 8001578:	2003      	movs	r0, #3
 800157a:	f001 f9b9 	bl	80028f0 <connect_xbt_pin>
        printf("connect_xbt_pin(3)\r\n");
 800157e:	486d      	ldr	r0, [pc, #436]	@ (8001734 <menu_main_process_input+0x34c>)
 8001580:	f007 fd12 	bl	8008fa8 <puts>
        break;
 8001584:	e154      	b.n	8001830 <menu_main_process_input+0x448>
    case '4':
        connect_xbt_pin(4);
 8001586:	2004      	movs	r0, #4
 8001588:	f001 f9b2 	bl	80028f0 <connect_xbt_pin>
        printf("connect_xbt_pin(4)\r\n");
 800158c:	486a      	ldr	r0, [pc, #424]	@ (8001738 <menu_main_process_input+0x350>)
 800158e:	f007 fd0b 	bl	8008fa8 <puts>
        break;
 8001592:	e14d      	b.n	8001830 <menu_main_process_input+0x448>
    case '5':
        connect_xbt_pin(5);
 8001594:	2005      	movs	r0, #5
 8001596:	f001 f9ab 	bl	80028f0 <connect_xbt_pin>
        printf("connect_xbt_pin(5)\r\n");
 800159a:	4868      	ldr	r0, [pc, #416]	@ (800173c <menu_main_process_input+0x354>)
 800159c:	f007 fd04 	bl	8008fa8 <puts>
        break;
 80015a0:	e146      	b.n	8001830 <menu_main_process_input+0x448>
    case '6':
        connect_xbt_pin(6);
 80015a2:	2006      	movs	r0, #6
 80015a4:	f001 f9a4 	bl	80028f0 <connect_xbt_pin>
        printf("connect_xbt_pin(6)\r\n");
 80015a8:	4865      	ldr	r0, [pc, #404]	@ (8001740 <menu_main_process_input+0x358>)
 80015aa:	f007 fcfd 	bl	8008fa8 <puts>
        break;
 80015ae:	e13f      	b.n	8001830 <menu_main_process_input+0x448>
    case '7':
        if (launcher.tubeCount == '8'){
 80015b0:	4b64      	ldr	r3, [pc, #400]	@ (8001744 <menu_main_process_input+0x35c>)
 80015b2:	785b      	ldrb	r3, [r3, #1]
 80015b4:	2b38      	cmp	r3, #56	@ 0x38
 80015b6:	d106      	bne.n	80015c6 <menu_main_process_input+0x1de>
            connect_xbt_pin(7);
 80015b8:	2007      	movs	r0, #7
 80015ba:	f001 f999 	bl	80028f0 <connect_xbt_pin>
            printf("connect_xbt_pin(7)\r\n");
 80015be:	4862      	ldr	r0, [pc, #392]	@ (8001748 <menu_main_process_input+0x360>)
 80015c0:	f007 fcf2 	bl	8008fa8 <puts>
        } else {
        	printf("\r\n* ERROR: tube 7 not available *\r\n");
        }
        break;
 80015c4:	e134      	b.n	8001830 <menu_main_process_input+0x448>
        	printf("\r\n* ERROR: tube 7 not available *\r\n");
 80015c6:	4861      	ldr	r0, [pc, #388]	@ (800174c <menu_main_process_input+0x364>)
 80015c8:	f007 fcee 	bl	8008fa8 <puts>
        break;
 80015cc:	e130      	b.n	8001830 <menu_main_process_input+0x448>
    case '8':
        if (launcher.tubeCount == '8'){
 80015ce:	4b5d      	ldr	r3, [pc, #372]	@ (8001744 <menu_main_process_input+0x35c>)
 80015d0:	785b      	ldrb	r3, [r3, #1]
 80015d2:	2b38      	cmp	r3, #56	@ 0x38
 80015d4:	d106      	bne.n	80015e4 <menu_main_process_input+0x1fc>
        	connect_xbt_pin(8);
 80015d6:	2008      	movs	r0, #8
 80015d8:	f001 f98a 	bl	80028f0 <connect_xbt_pin>
        	printf("connect_xbt_pin(8)\r\n");
 80015dc:	485c      	ldr	r0, [pc, #368]	@ (8001750 <menu_main_process_input+0x368>)
 80015de:	f007 fce3 	bl	8008fa8 <puts>
        } else {
        	printf("\r\n* ERROR: tube 8 not available *\r\n");
        }
        break;
 80015e2:	e125      	b.n	8001830 <menu_main_process_input+0x448>
        	printf("\r\n* ERROR: tube 8 not available *\r\n");
 80015e4:	485b      	ldr	r0, [pc, #364]	@ (8001754 <menu_main_process_input+0x36c>)
 80015e6:	f007 fcdf 	bl	8008fa8 <puts>
        break;
 80015ea:	e121      	b.n	8001830 <menu_main_process_input+0x448>
        //EXTEND PINS
    case 'U':
    	printf("extend_pin(1)\r\n");
 80015ec:	485a      	ldr	r0, [pc, #360]	@ (8001758 <menu_main_process_input+0x370>)
 80015ee:	f007 fcdb 	bl	8008fa8 <puts>
    	extend_pin(1);
 80015f2:	2001      	movs	r0, #1
 80015f4:	f001 faa0 	bl	8002b38 <extend_pin>
        break;
 80015f8:	e11a      	b.n	8001830 <menu_main_process_input+0x448>
    case 'V':
        printf("extend_pin(2)\r\n");
 80015fa:	4858      	ldr	r0, [pc, #352]	@ (800175c <menu_main_process_input+0x374>)
 80015fc:	f007 fcd4 	bl	8008fa8 <puts>
        extend_pin(2);
 8001600:	2002      	movs	r0, #2
 8001602:	f001 fa99 	bl	8002b38 <extend_pin>
        break;
 8001606:	e113      	b.n	8001830 <menu_main_process_input+0x448>
    case 'W':
        printf("extend_pin(3)\r\n");
 8001608:	4855      	ldr	r0, [pc, #340]	@ (8001760 <menu_main_process_input+0x378>)
 800160a:	f007 fccd 	bl	8008fa8 <puts>
        extend_pin(3);
 800160e:	2003      	movs	r0, #3
 8001610:	f001 fa92 	bl	8002b38 <extend_pin>
        break;
 8001614:	e10c      	b.n	8001830 <menu_main_process_input+0x448>
    case 'X':
        printf("extend_pin(4)\r\n");
 8001616:	4853      	ldr	r0, [pc, #332]	@ (8001764 <menu_main_process_input+0x37c>)
 8001618:	f007 fcc6 	bl	8008fa8 <puts>
        extend_pin(4);
 800161c:	2004      	movs	r0, #4
 800161e:	f001 fa8b 	bl	8002b38 <extend_pin>
        break;
 8001622:	e105      	b.n	8001830 <menu_main_process_input+0x448>
    case 'Y':
        printf("extend_pin(5)\r\n");
 8001624:	4850      	ldr	r0, [pc, #320]	@ (8001768 <menu_main_process_input+0x380>)
 8001626:	f007 fcbf 	bl	8008fa8 <puts>
        extend_pin(5);
 800162a:	2005      	movs	r0, #5
 800162c:	f001 fa84 	bl	8002b38 <extend_pin>
        break;
 8001630:	e0fe      	b.n	8001830 <menu_main_process_input+0x448>
    case 'Z':
        printf("extend_pin(6)\r\n");
 8001632:	484e      	ldr	r0, [pc, #312]	@ (800176c <menu_main_process_input+0x384>)
 8001634:	f007 fcb8 	bl	8008fa8 <puts>
        extend_pin(6);
 8001638:	2006      	movs	r0, #6
 800163a:	f001 fa7d 	bl	8002b38 <extend_pin>
        break;
 800163e:	e0f7      	b.n	8001830 <menu_main_process_input+0x448>
    case 'S':
        if (launcher.tubeCount == '8'){
 8001640:	4b40      	ldr	r3, [pc, #256]	@ (8001744 <menu_main_process_input+0x35c>)
 8001642:	785b      	ldrb	r3, [r3, #1]
 8001644:	2b38      	cmp	r3, #56	@ 0x38
 8001646:	d106      	bne.n	8001656 <menu_main_process_input+0x26e>
        	printf("extend_pin(7)\r\n");
 8001648:	4849      	ldr	r0, [pc, #292]	@ (8001770 <menu_main_process_input+0x388>)
 800164a:	f007 fcad 	bl	8008fa8 <puts>
        	extend_pin(7);
 800164e:	2007      	movs	r0, #7
 8001650:	f001 fa72 	bl	8002b38 <extend_pin>
        } else {
        	printf("\r\n* ERROR: tube 7 not available *\r\n");
        }
        break;
 8001654:	e0ec      	b.n	8001830 <menu_main_process_input+0x448>
        	printf("\r\n* ERROR: tube 7 not available *\r\n");
 8001656:	483d      	ldr	r0, [pc, #244]	@ (800174c <menu_main_process_input+0x364>)
 8001658:	f007 fca6 	bl	8008fa8 <puts>
        break;
 800165c:	e0e8      	b.n	8001830 <menu_main_process_input+0x448>
    case 'T':
        if (launcher.tubeCount == '8'){
 800165e:	4b39      	ldr	r3, [pc, #228]	@ (8001744 <menu_main_process_input+0x35c>)
 8001660:	785b      	ldrb	r3, [r3, #1]
 8001662:	2b38      	cmp	r3, #56	@ 0x38
 8001664:	d106      	bne.n	8001674 <menu_main_process_input+0x28c>
        	printf("extend_pin(8)\r\n");
 8001666:	4843      	ldr	r0, [pc, #268]	@ (8001774 <menu_main_process_input+0x38c>)
 8001668:	f007 fc9e 	bl	8008fa8 <puts>
        	extend_pin(8);
 800166c:	2008      	movs	r0, #8
 800166e:	f001 fa63 	bl	8002b38 <extend_pin>
        } else {
        	printf("\r\n* ERROR: tube 8 not available *\r\n");
        }
        break;
 8001672:	e0dd      	b.n	8001830 <menu_main_process_input+0x448>
        	printf("\r\n* ERROR: tube 8 not available *\r\n");
 8001674:	4837      	ldr	r0, [pc, #220]	@ (8001754 <menu_main_process_input+0x36c>)
 8001676:	f007 fc97 	bl	8008fa8 <puts>
        break;
 800167a:	e0d9      	b.n	8001830 <menu_main_process_input+0x448>
        //RETRACT PINS
    case 'A':
    	printf("retract_pin(1)\r\n");
 800167c:	483e      	ldr	r0, [pc, #248]	@ (8001778 <menu_main_process_input+0x390>)
 800167e:	f007 fc93 	bl	8008fa8 <puts>
    	retract_pin(1);
 8001682:	2001      	movs	r0, #1
 8001684:	f001 fa72 	bl	8002b6c <retract_pin>
        break;
 8001688:	e0d2      	b.n	8001830 <menu_main_process_input+0x448>
    case 'B':
        printf("retract_pin(2)\r\n");
 800168a:	483c      	ldr	r0, [pc, #240]	@ (800177c <menu_main_process_input+0x394>)
 800168c:	f007 fc8c 	bl	8008fa8 <puts>
        retract_pin(2);
 8001690:	2002      	movs	r0, #2
 8001692:	f001 fa6b 	bl	8002b6c <retract_pin>
        break;
 8001696:	e0cb      	b.n	8001830 <menu_main_process_input+0x448>
    case 'C':
        printf("retract_pin(3)\r\n");
 8001698:	4839      	ldr	r0, [pc, #228]	@ (8001780 <menu_main_process_input+0x398>)
 800169a:	f007 fc85 	bl	8008fa8 <puts>
        retract_pin(3);
 800169e:	2003      	movs	r0, #3
 80016a0:	f001 fa64 	bl	8002b6c <retract_pin>
        break;
 80016a4:	e0c4      	b.n	8001830 <menu_main_process_input+0x448>
    case 'D':
        printf("retract_pin(4)\r\n");
 80016a6:	4837      	ldr	r0, [pc, #220]	@ (8001784 <menu_main_process_input+0x39c>)
 80016a8:	f007 fc7e 	bl	8008fa8 <puts>
        retract_pin(4);
 80016ac:	2004      	movs	r0, #4
 80016ae:	f001 fa5d 	bl	8002b6c <retract_pin>
        break;
 80016b2:	e0bd      	b.n	8001830 <menu_main_process_input+0x448>
    case 'E':
        printf("retract_pin(5)\r\n");
 80016b4:	4834      	ldr	r0, [pc, #208]	@ (8001788 <menu_main_process_input+0x3a0>)
 80016b6:	f007 fc77 	bl	8008fa8 <puts>
        retract_pin(5);
 80016ba:	2005      	movs	r0, #5
 80016bc:	f001 fa56 	bl	8002b6c <retract_pin>
        break;
 80016c0:	e0b6      	b.n	8001830 <menu_main_process_input+0x448>
    case 'F':
        printf("retract_pin(6)\r\n");
 80016c2:	4832      	ldr	r0, [pc, #200]	@ (800178c <menu_main_process_input+0x3a4>)
 80016c4:	f007 fc70 	bl	8008fa8 <puts>
        retract_pin(6);
 80016c8:	2006      	movs	r0, #6
 80016ca:	f001 fa4f 	bl	8002b6c <retract_pin>
        break;
 80016ce:	e0af      	b.n	8001830 <menu_main_process_input+0x448>
    case 'H':
        if (launcher.tubeCount == '8'){
 80016d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001744 <menu_main_process_input+0x35c>)
 80016d2:	785b      	ldrb	r3, [r3, #1]
 80016d4:	2b38      	cmp	r3, #56	@ 0x38
 80016d6:	d106      	bne.n	80016e6 <menu_main_process_input+0x2fe>
        	printf("retract_pin(7)\r\n");
 80016d8:	482d      	ldr	r0, [pc, #180]	@ (8001790 <menu_main_process_input+0x3a8>)
 80016da:	f007 fc65 	bl	8008fa8 <puts>
        	retract_pin(7);
 80016de:	2007      	movs	r0, #7
 80016e0:	f001 fa44 	bl	8002b6c <retract_pin>
        } else {
        	printf("* ERROR: tube 7 not available *\r\n");
        }
        break;
 80016e4:	e0a4      	b.n	8001830 <menu_main_process_input+0x448>
        	printf("* ERROR: tube 7 not available *\r\n");
 80016e6:	482b      	ldr	r0, [pc, #172]	@ (8001794 <menu_main_process_input+0x3ac>)
 80016e8:	f007 fc5e 	bl	8008fa8 <puts>
        break;
 80016ec:	e0a0      	b.n	8001830 <menu_main_process_input+0x448>
    case 'I':
        if (launcher.tubeCount == '8'){
 80016ee:	4b15      	ldr	r3, [pc, #84]	@ (8001744 <menu_main_process_input+0x35c>)
 80016f0:	785b      	ldrb	r3, [r3, #1]
 80016f2:	2b38      	cmp	r3, #56	@ 0x38
 80016f4:	d106      	bne.n	8001704 <menu_main_process_input+0x31c>
        	printf("retract_pin(8)\r\n");
 80016f6:	4828      	ldr	r0, [pc, #160]	@ (8001798 <menu_main_process_input+0x3b0>)
 80016f8:	f007 fc56 	bl	8008fa8 <puts>
        	retract_pin(8);
 80016fc:	2008      	movs	r0, #8
 80016fe:	f001 fa35 	bl	8002b6c <retract_pin>
        } else {
        	printf("* ERROR: tube 8 not available *\r\n");
        }
        break;
 8001702:	e095      	b.n	8001830 <menu_main_process_input+0x448>
        	printf("* ERROR: tube 8 not available *\r\n");
 8001704:	4825      	ldr	r0, [pc, #148]	@ (800179c <menu_main_process_input+0x3b4>)
 8001706:	f007 fc4f 	bl	8008fa8 <puts>
        break;
 800170a:	e091      	b.n	8001830 <menu_main_process_input+0x448>
    case 'K':
    	printf("calibrate_on()\r\n");
 800170c:	4824      	ldr	r0, [pc, #144]	@ (80017a0 <menu_main_process_input+0x3b8>)
 800170e:	f007 fc4b 	bl	8008fa8 <puts>
        calibrate_on();
 8001712:	f001 f8a9 	bl	8002868 <calibrate_on>
        break;
 8001716:	e08b      	b.n	8001830 <menu_main_process_input+0x448>
    case 'R':
    	printf("reset_relay(), ground XBT\r\n");
 8001718:	4822      	ldr	r0, [pc, #136]	@ (80017a4 <menu_main_process_input+0x3bc>)
 800171a:	f007 fc45 	bl	8008fa8 <puts>
        reset_relay();
 800171e:	f001 f8bb 	bl	8002898 <reset_relay>
        break;
 8001722:	e085      	b.n	8001830 <menu_main_process_input+0x448>
 8001724:	0800a268 	.word	0x0800a268
 8001728:	0800a288 	.word	0x0800a288
 800172c:	0800a2c0 	.word	0x0800a2c0
 8001730:	0800a2d4 	.word	0x0800a2d4
 8001734:	0800a2e8 	.word	0x0800a2e8
 8001738:	0800a2fc 	.word	0x0800a2fc
 800173c:	0800a310 	.word	0x0800a310
 8001740:	0800a324 	.word	0x0800a324
 8001744:	20000000 	.word	0x20000000
 8001748:	0800a338 	.word	0x0800a338
 800174c:	0800a34c 	.word	0x0800a34c
 8001750:	0800a370 	.word	0x0800a370
 8001754:	0800a384 	.word	0x0800a384
 8001758:	0800a3a8 	.word	0x0800a3a8
 800175c:	0800a3b8 	.word	0x0800a3b8
 8001760:	0800a3c8 	.word	0x0800a3c8
 8001764:	0800a3d8 	.word	0x0800a3d8
 8001768:	0800a3e8 	.word	0x0800a3e8
 800176c:	0800a3f8 	.word	0x0800a3f8
 8001770:	0800a408 	.word	0x0800a408
 8001774:	0800a418 	.word	0x0800a418
 8001778:	0800a428 	.word	0x0800a428
 800177c:	0800a438 	.word	0x0800a438
 8001780:	0800a448 	.word	0x0800a448
 8001784:	0800a458 	.word	0x0800a458
 8001788:	0800a468 	.word	0x0800a468
 800178c:	0800a478 	.word	0x0800a478
 8001790:	0800a488 	.word	0x0800a488
 8001794:	0800a498 	.word	0x0800a498
 8001798:	0800a4bc 	.word	0x0800a4bc
 800179c:	0800a4cc 	.word	0x0800a4cc
 80017a0:	0800a4f0 	.word	0x0800a4f0
 80017a4:	0800a500 	.word	0x0800a500
    case 'L':
    	printf("calibration_resistor()\r\n");
 80017a8:	4825      	ldr	r0, [pc, #148]	@ (8001840 <menu_main_process_input+0x458>)
 80017aa:	f007 fbfd 	bl	8008fa8 <puts>
        calibration_resistor();
 80017ae:	f001 f843 	bl	8002838 <calibration_resistor>
        break;
 80017b2:	e03d      	b.n	8001830 <menu_main_process_input+0x448>
    case 'G':
    	printf("unground_xbt()\r\n");
 80017b4:	4823      	ldr	r0, [pc, #140]	@ (8001844 <menu_main_process_input+0x45c>)
 80017b6:	f007 fbf7 	bl	8008fa8 <puts>
        unground_xbt();
 80017ba:	f001 f825 	bl	8002808 <unground_xbt>
        break;
 80017be:	e037      	b.n	8001830 <menu_main_process_input+0x448>
    case 'M':
        menu_main_print();
 80017c0:	f7ff fd76 	bl	80012b0 <menu_main_print>
        break;
 80017c4:	e034      	b.n	8001830 <menu_main_process_input+0x448>
    case '~':
    	printf("menu_config_print()\r\n");
 80017c6:	4820      	ldr	r0, [pc, #128]	@ (8001848 <menu_main_process_input+0x460>)
 80017c8:	f007 fbee 	bl	8008fa8 <puts>
        menu_config_print();
 80017cc:	f000 f888 	bl	80018e0 <menu_config_print>
        activeMenu = configMenu; // set configuration menu flag
 80017d0:	4b1e      	ldr	r3, [pc, #120]	@ (800184c <menu_main_process_input+0x464>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	701a      	strb	r2, [r3, #0]
        break;
 80017d6:	e02b      	b.n	8001830 <menu_main_process_input+0x448>
    case 's':
    	printf("print_serial_number()\r\n");
 80017d8:	481d      	ldr	r0, [pc, #116]	@ (8001850 <menu_main_process_input+0x468>)
 80017da:	f007 fbe5 	bl	8008fa8 <puts>
    	printf("AL Serial Number: ");
 80017de:	481d      	ldr	r0, [pc, #116]	@ (8001854 <menu_main_process_input+0x46c>)
 80017e0:	f007 fb7a 	bl	8008ed8 <iprintf>
        print_serial_number();
 80017e4:	f000 fef2 	bl	80025cc <print_serial_number>
        printf("\r\n");
 80017e8:	481b      	ldr	r0, [pc, #108]	@ (8001858 <menu_main_process_input+0x470>)
 80017ea:	f007 fbdd 	bl	8008fa8 <puts>
        break;
 80017ee:	e01f      	b.n	8001830 <menu_main_process_input+0x448>
    case 'P':
    	printf("menu_print_volt_temp()\r\n");
 80017f0:	481a      	ldr	r0, [pc, #104]	@ (800185c <menu_main_process_input+0x474>)
 80017f2:	f007 fbd9 	bl	8008fa8 <puts>
    	menu_print_volt_temp();
 80017f6:	f000 f83f 	bl	8001878 <menu_print_volt_temp>
//		printf("\r\nVOLTAGE[AD# %i]: %i.%i V | TEMPERATURE[AD# %i]: %i.%i C\r\n",
//					 (int)adcReading.voltage.rawValue, (int)adcReading.voltage.realValue, get_decimal(adcReading.voltage.realValue, 1),
//					 (int)adcReading.temperature.rawValue, (int)adcReading.temperature.realValue, get_decimal(adcReading.temperature.realValue, 1));
    	//analog_t vin = voltage_read(VOLTAGE_READ_SAMPLES);
    	//printf("[AD# %i] Vin= %i.%i V\r\n", vin.adcReading,(uint8_t)vin.realValue, (uint8_t)(vin.realValue * 10 - ((uint8_t)vin.realValue * 10)) );
    	break;
 80017fa:	e019      	b.n	8001830 <menu_main_process_input+0x448>
    case 'N':
    	printf("multiplexer_set(MUX_GPS)\r\n");
 80017fc:	4818      	ldr	r0, [pc, #96]	@ (8001860 <menu_main_process_input+0x478>)
 80017fe:	f007 fbd3 	bl	8008fa8 <puts>
    	printf("\r\n** Data TX from local GPS --> press 'O' to set Tx to STM32 **\r\n\r\n");
 8001802:	4818      	ldr	r0, [pc, #96]	@ (8001864 <menu_main_process_input+0x47c>)
 8001804:	f007 fbd0 	bl	8008fa8 <puts>
    	multiplexer_set(MUX_GPS);
 8001808:	2000      	movs	r0, #0
 800180a:	f000 ff41 	bl	8002690 <multiplexer_set>
    	break;
 800180e:	e00f      	b.n	8001830 <menu_main_process_input+0x448>
    case 'O':
    	printf("multiplexer_set(MUX_STM32)\r\n");
 8001810:	4815      	ldr	r0, [pc, #84]	@ (8001868 <menu_main_process_input+0x480>)
 8001812:	f007 fbc9 	bl	8008fa8 <puts>
    	printf("\r\n** Data TX from STM32 **\r\n");
 8001816:	4815      	ldr	r0, [pc, #84]	@ (800186c <menu_main_process_input+0x484>)
 8001818:	f007 fbc6 	bl	8008fa8 <puts>
    	multiplexer_set(MUX_STM32);
 800181c:	2001      	movs	r0, #1
 800181e:	f000 ff37 	bl	8002690 <multiplexer_set>
    	menu_main_print();
 8001822:	f7ff fd45 	bl	80012b0 <menu_main_print>
    	break;
 8001826:	e003      	b.n	8001830 <menu_main_process_input+0x448>
    default:
        printf("\r\n** Unrecognized command!!** \r\n");
 8001828:	4811      	ldr	r0, [pc, #68]	@ (8001870 <menu_main_process_input+0x488>)
 800182a:	f007 fbbd 	bl	8008fa8 <puts>
        break;
 800182e:	bf00      	nop
	}
	printf("\r\n> ");
 8001830:	4810      	ldr	r0, [pc, #64]	@ (8001874 <menu_main_process_input+0x48c>)
 8001832:	f007 fb51 	bl	8008ed8 <iprintf>
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	0800a51c 	.word	0x0800a51c
 8001844:	0800a534 	.word	0x0800a534
 8001848:	0800a544 	.word	0x0800a544
 800184c:	20000187 	.word	0x20000187
 8001850:	0800a55c 	.word	0x0800a55c
 8001854:	0800a574 	.word	0x0800a574
 8001858:	0800a264 	.word	0x0800a264
 800185c:	0800a588 	.word	0x0800a588
 8001860:	0800a5a0 	.word	0x0800a5a0
 8001864:	0800a5bc 	.word	0x0800a5bc
 8001868:	0800a600 	.word	0x0800a600
 800186c:	0800a61c 	.word	0x0800a61c
 8001870:	0800a638 	.word	0x0800a638
 8001874:	08009e30 	.word	0x08009e30

08001878 <menu_print_volt_temp>:

/* Prints Input voltage and STM32 internal temperature */
void menu_print_volt_temp(void){
 8001878:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800187c:	b08b      	sub	sp, #44	@ 0x2c
 800187e:	af04      	add	r7, sp, #16
	adcScan_t adcReading = adc_get_values();
 8001880:	463b      	mov	r3, r7
 8001882:	4618      	mov	r0, r3
 8001884:	f001 fba0 	bl	8002fc8 <adc_get_values>
	printf("\r\n<> Voltage [AD# %i]: %i.%i V | STM32 Temperature [AD# %i]: %i.%i C\r\n",
				 (int)adcReading.voltage.rawValue, (int)adcReading.voltage.realValue, get_decimal(adcReading.voltage.realValue, 1),
 8001888:	883b      	ldrh	r3, [r7, #0]
	printf("\r\n<> Voltage [AD# %i]: %i.%i V | STM32 Temperature [AD# %i]: %i.%i C\r\n",
 800188a:	4698      	mov	r8, r3
				 (int)adcReading.voltage.rawValue, (int)adcReading.voltage.realValue, get_decimal(adcReading.voltage.realValue, 1),
 800188c:	687b      	ldr	r3, [r7, #4]
	printf("\r\n<> Voltage [AD# %i]: %i.%i V | STM32 Temperature [AD# %i]: %i.%i C\r\n",
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff fa3e 	bl	8000d10 <__aeabi_f2iz>
 8001894:	4605      	mov	r5, r0
				 (int)adcReading.voltage.rawValue, (int)adcReading.voltage.realValue, get_decimal(adcReading.voltage.realValue, 1),
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2101      	movs	r1, #1
 800189a:	4618      	mov	r0, r3
 800189c:	f000 febe 	bl	800261c <get_decimal>
 80018a0:	4603      	mov	r3, r0
	printf("\r\n<> Voltage [AD# %i]: %i.%i V | STM32 Temperature [AD# %i]: %i.%i C\r\n",
 80018a2:	4699      	mov	r9, r3
				 (int)adcReading.temperature.rawValue, (int)adcReading.temperature.realValue, get_decimal(adcReading.temperature.realValue, 1));
 80018a4:	8a3b      	ldrh	r3, [r7, #16]
	printf("\r\n<> Voltage [AD# %i]: %i.%i V | STM32 Temperature [AD# %i]: %i.%i C\r\n",
 80018a6:	461e      	mov	r6, r3
				 (int)adcReading.temperature.rawValue, (int)adcReading.temperature.realValue, get_decimal(adcReading.temperature.realValue, 1));
 80018a8:	697b      	ldr	r3, [r7, #20]
	printf("\r\n<> Voltage [AD# %i]: %i.%i V | STM32 Temperature [AD# %i]: %i.%i C\r\n",
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff fa30 	bl	8000d10 <__aeabi_f2iz>
 80018b0:	4604      	mov	r4, r0
				 (int)adcReading.temperature.rawValue, (int)adcReading.temperature.realValue, get_decimal(adcReading.temperature.realValue, 1));
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	2101      	movs	r1, #1
 80018b6:	4618      	mov	r0, r3
 80018b8:	f000 feb0 	bl	800261c <get_decimal>
 80018bc:	4603      	mov	r3, r0
	printf("\r\n<> Voltage [AD# %i]: %i.%i V | STM32 Temperature [AD# %i]: %i.%i C\r\n",
 80018be:	9302      	str	r3, [sp, #8]
 80018c0:	9401      	str	r4, [sp, #4]
 80018c2:	9600      	str	r6, [sp, #0]
 80018c4:	464b      	mov	r3, r9
 80018c6:	462a      	mov	r2, r5
 80018c8:	4641      	mov	r1, r8
 80018ca:	4804      	ldr	r0, [pc, #16]	@ (80018dc <menu_print_volt_temp+0x64>)
 80018cc:	f007 fb04 	bl	8008ed8 <iprintf>
}
 80018d0:	bf00      	nop
 80018d2:	371c      	adds	r7, #28
 80018d4:	46bd      	mov	sp, r7
 80018d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80018da:	bf00      	nop
 80018dc:	0800a658 	.word	0x0800a658

080018e0 <menu_config_print>:



/* Print secret configuration menu options
 * Access this menu with '~' */
void menu_config_print(void) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
    printf("\n\r");
 80018e4:	4828      	ldr	r0, [pc, #160]	@ (8001988 <menu_config_print+0xa8>)
 80018e6:	f007 faf7 	bl	8008ed8 <iprintf>
    printf("=========================================\n\r");
 80018ea:	4828      	ldr	r0, [pc, #160]	@ (800198c <menu_config_print+0xac>)
 80018ec:	f007 faf4 	bl	8008ed8 <iprintf>
    printf("| AOML Autolauncher configuration menu	|\n\r");
 80018f0:	4827      	ldr	r0, [pc, #156]	@ (8001990 <menu_config_print+0xb0>)
 80018f2:	f007 faf1 	bl	8008ed8 <iprintf>
    printf("=========================================\n\r");
 80018f6:	4825      	ldr	r0, [pc, #148]	@ (800198c <menu_config_print+0xac>)
 80018f8:	f007 faee 	bl	8008ed8 <iprintf>
    printf("|    Model #ALV3.0      S/N ");
 80018fc:	4825      	ldr	r0, [pc, #148]	@ (8001994 <menu_config_print+0xb4>)
 80018fe:	f007 faeb 	bl	8008ed8 <iprintf>
    print_serial_number();
 8001902:	f000 fe63 	bl	80025cc <print_serial_number>
    printf("       |\n\r");
 8001906:	4824      	ldr	r0, [pc, #144]	@ (8001998 <menu_config_print+0xb8>)
 8001908:	f007 fae6 	bl	8008ed8 <iprintf>
    printf("|=======================================|\n\r");
 800190c:	4823      	ldr	r0, [pc, #140]	@ (800199c <menu_config_print+0xbc>)
 800190e:	f007 fae3 	bl	8008ed8 <iprintf>
    printf("|               COMMANDS                |\n\r");
 8001912:	4823      	ldr	r0, [pc, #140]	@ (80019a0 <menu_config_print+0xc0>)
 8001914:	f007 fae0 	bl	8008ed8 <iprintf>
    printf("|=======================================|\n\r");
 8001918:	4820      	ldr	r0, [pc, #128]	@ (800199c <menu_config_print+0xbc>)
 800191a:	f007 fadd 	bl	8008ed8 <iprintf>
    printf("| <M> This Menu                         |\n\r");
 800191e:	4821      	ldr	r0, [pc, #132]	@ (80019a4 <menu_config_print+0xc4>)
 8001920:	f007 fada 	bl	8008ed8 <iprintf>
    printf("| <A> Set AL tubes, type & S/N          |\n\r");
 8001924:	4820      	ldr	r0, [pc, #128]	@ (80019a8 <menu_config_print+0xc8>)
 8001926:	f007 fad7 	bl	8008ed8 <iprintf>
    printf("| <S> Extend all pins                   |\n\r");
 800192a:	4820      	ldr	r0, [pc, #128]	@ (80019ac <menu_config_print+0xcc>)
 800192c:	f007 fad4 	bl	8008ed8 <iprintf>
    printf("| <D> Retract all pins                  |\n\r");
 8001930:	481f      	ldr	r0, [pc, #124]	@ (80019b0 <menu_config_print+0xd0>)
 8001932:	f007 fad1 	bl	8008ed8 <iprintf>
    printf("| <F> Grease pins mode                  |\n\r");
 8001936:	481f      	ldr	r0, [pc, #124]	@ (80019b4 <menu_config_print+0xd4>)
 8001938:	f007 face 	bl	8008ed8 <iprintf>
    printf("| <G> Clear memory range                |\n\r");
 800193c:	481e      	ldr	r0, [pc, #120]	@ (80019b8 <menu_config_print+0xd8>)
 800193e:	f007 facb 	bl	8008ed8 <iprintf>
    printf("| <H> Read motor statistics             |\n\r");
 8001942:	481e      	ldr	r0, [pc, #120]	@ (80019bc <menu_config_print+0xdc>)
 8001944:	f007 fac8 	bl	8008ed8 <iprintf>
    printf("| <J> Set motor runtime                 |\n\r");
 8001948:	481d      	ldr	r0, [pc, #116]	@ (80019c0 <menu_config_print+0xe0>)
 800194a:	f007 fac5 	bl	8008ed8 <iprintf>
    printf("| <K> Set ADC sampling period           |\n\r");
 800194e:	481d      	ldr	r0, [pc, #116]	@ (80019c4 <menu_config_print+0xe4>)
 8001950:	f007 fac2 	bl	8008ed8 <iprintf>
    printf("| <L> Set motor wiring mode             |\n\r");
 8001954:	481c      	ldr	r0, [pc, #112]	@ (80019c8 <menu_config_print+0xe8>)
 8001956:	f007 fabf 	bl	8008ed8 <iprintf>
    printf("| <W> Set motor PWM frequency           |\n\r");
 800195a:	481c      	ldr	r0, [pc, #112]	@ (80019cc <menu_config_print+0xec>)
 800195c:	f007 fabc 	bl	8008ed8 <iprintf>
    printf("| <E> Reset motor statistics            |\n\r");
 8001960:	481b      	ldr	r0, [pc, #108]	@ (80019d0 <menu_config_print+0xf0>)
 8001962:	f007 fab9 	bl	8008ed8 <iprintf>
    printf("| <R> Read motor configuration          |\n\r");
 8001966:	481b      	ldr	r0, [pc, #108]	@ (80019d4 <menu_config_print+0xf4>)
 8001968:	f007 fab6 	bl	8008ed8 <iprintf>
    printf("| <Z> Help                              |\n\r");
 800196c:	481a      	ldr	r0, [pc, #104]	@ (80019d8 <menu_config_print+0xf8>)
 800196e:	f007 fab3 	bl	8008ed8 <iprintf>
    printf("| <Q> QUIT to main menu                 |\n\r");
 8001972:	481a      	ldr	r0, [pc, #104]	@ (80019dc <menu_config_print+0xfc>)
 8001974:	f007 fab0 	bl	8008ed8 <iprintf>
    printf("|=======================================|\n\r");
 8001978:	4808      	ldr	r0, [pc, #32]	@ (800199c <menu_config_print+0xbc>)
 800197a:	f007 faad 	bl	8008ed8 <iprintf>
    printf("\r\n");
 800197e:	4818      	ldr	r0, [pc, #96]	@ (80019e0 <menu_config_print+0x100>)
 8001980:	f007 fb12 	bl	8008fa8 <puts>
}//end status_message
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}
 8001988:	0800a6a0 	.word	0x0800a6a0
 800198c:	0800a6a4 	.word	0x0800a6a4
 8001990:	0800a6d0 	.word	0x0800a6d0
 8001994:	0800a6fc 	.word	0x0800a6fc
 8001998:	08009f08 	.word	0x08009f08
 800199c:	0800a71c 	.word	0x0800a71c
 80019a0:	0800a748 	.word	0x0800a748
 80019a4:	0800a774 	.word	0x0800a774
 80019a8:	0800a7a0 	.word	0x0800a7a0
 80019ac:	0800a7cc 	.word	0x0800a7cc
 80019b0:	0800a7f8 	.word	0x0800a7f8
 80019b4:	0800a824 	.word	0x0800a824
 80019b8:	0800a850 	.word	0x0800a850
 80019bc:	0800a87c 	.word	0x0800a87c
 80019c0:	0800a8a8 	.word	0x0800a8a8
 80019c4:	0800a8d4 	.word	0x0800a8d4
 80019c8:	0800a900 	.word	0x0800a900
 80019cc:	0800a92c 	.word	0x0800a92c
 80019d0:	0800a958 	.word	0x0800a958
 80019d4:	0800a984 	.word	0x0800a984
 80019d8:	0800a9b0 	.word	0x0800a9b0
 80019dc:	0800a9dc 	.word	0x0800a9dc
 80019e0:	0800a264 	.word	0x0800a264

080019e4 <menu_config_process_input>:


/* Process char received while in configuration menu */
void menu_config_process_input(char option){
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	71fb      	strb	r3, [r7, #7]
	printf("\r\n> Executing OPTION (%c) --> ", option);
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	4619      	mov	r1, r3
 80019f2:	4851      	ldr	r0, [pc, #324]	@ (8001b38 <menu_config_process_input+0x154>)
 80019f4:	f007 fa70 	bl	8008ed8 <iprintf>

    switch (option) {
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	3b41      	subs	r3, #65	@ 0x41
 80019fc:	2b19      	cmp	r3, #25
 80019fe:	f200 808d 	bhi.w	8001b1c <menu_config_process_input+0x138>
 8001a02:	a201      	add	r2, pc, #4	@ (adr r2, 8001a08 <menu_config_process_input+0x24>)
 8001a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a08:	08001a89 	.word	0x08001a89
 8001a0c:	08001b1d 	.word	0x08001b1d
 8001a10:	08001b1d 	.word	0x08001b1d
 8001a14:	08001ab7 	.word	0x08001ab7
 8001a18:	08001b0d 	.word	0x08001b0d
 8001a1c:	08001adb 	.word	0x08001adb
 8001a20:	08001ae9 	.word	0x08001ae9
 8001a24:	08001aef 	.word	0x08001aef
 8001a28:	08001b1d 	.word	0x08001b1d
 8001a2c:	08001af5 	.word	0x08001af5
 8001a30:	08001afb 	.word	0x08001afb
 8001a34:	08001b01 	.word	0x08001b01
 8001a38:	08001a83 	.word	0x08001a83
 8001a3c:	08001b1d 	.word	0x08001b1d
 8001a40:	08001b1d 	.word	0x08001b1d
 8001a44:	08001b1d 	.word	0x08001b1d
 8001a48:	08001a71 	.word	0x08001a71
 8001a4c:	08001b13 	.word	0x08001b13
 8001a50:	08001a93 	.word	0x08001a93
 8001a54:	08001b1d 	.word	0x08001b1d
 8001a58:	08001b1d 	.word	0x08001b1d
 8001a5c:	08001b1d 	.word	0x08001b1d
 8001a60:	08001b07 	.word	0x08001b07
 8001a64:	08001b1d 	.word	0x08001b1d
 8001a68:	08001b1d 	.word	0x08001b1d
 8001a6c:	08001b19 	.word	0x08001b19
        case 'Q':
            printf("\n\rLeaving Auto launcher configuration menu\n\r");
 8001a70:	4832      	ldr	r0, [pc, #200]	@ (8001b3c <menu_config_process_input+0x158>)
 8001a72:	f007 fa31 	bl	8008ed8 <iprintf>
            activeMenu = mainMenu; // set active menu flag to main menu
 8001a76:	4b32      	ldr	r3, [pc, #200]	@ (8001b40 <menu_config_process_input+0x15c>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	701a      	strb	r2, [r3, #0]
            menu_main_print();
 8001a7c:	f7ff fc18 	bl	80012b0 <menu_main_print>
            break;
 8001a80:	e053      	b.n	8001b2a <menu_config_process_input+0x146>
        case 'M':
            menu_config_print();
 8001a82:	f7ff ff2d 	bl	80018e0 <menu_config_print>
            break;
 8001a86:	e050      	b.n	8001b2a <menu_config_process_input+0x146>
        case 'A':
        	// get the autolauncher tube count
        	menu_config_tubes_type_serial();
 8001a88:	f000 f86a 	bl	8001b60 <menu_config_tubes_type_serial>
            // print config menu again
            menu_config_print();
 8001a8c:	f7ff ff28 	bl	80018e0 <menu_config_print>
            break;
 8001a90:	e04b      	b.n	8001b2a <menu_config_process_input+0x146>
        case 'S':
        	printf("extend_all_pins()\r\n");
 8001a92:	482c      	ldr	r0, [pc, #176]	@ (8001b44 <menu_config_process_input+0x160>)
 8001a94:	f007 fa88 	bl	8008fa8 <puts>
        	if(launcher.tubeCount == '6')
 8001a98:	4b2b      	ldr	r3, [pc, #172]	@ (8001b48 <menu_config_process_input+0x164>)
 8001a9a:	785b      	ldrb	r3, [r3, #1]
 8001a9c:	2b36      	cmp	r3, #54	@ 0x36
 8001a9e:	d102      	bne.n	8001aa6 <menu_config_process_input+0xc2>
        		extend_all_pins(6);
 8001aa0:	2006      	movs	r0, #6
 8001aa2:	f001 f805 	bl	8002ab0 <extend_all_pins>
        	if(launcher.tubeCount == '8')
 8001aa6:	4b28      	ldr	r3, [pc, #160]	@ (8001b48 <menu_config_process_input+0x164>)
 8001aa8:	785b      	ldrb	r3, [r3, #1]
 8001aaa:	2b38      	cmp	r3, #56	@ 0x38
 8001aac:	d13a      	bne.n	8001b24 <menu_config_process_input+0x140>
        		extend_all_pins(8);
 8001aae:	2008      	movs	r0, #8
 8001ab0:	f000 fffe 	bl	8002ab0 <extend_all_pins>
            break;
 8001ab4:	e036      	b.n	8001b24 <menu_config_process_input+0x140>
        case 'D':
        	printf("retract_all_pins()\r\n");
 8001ab6:	4825      	ldr	r0, [pc, #148]	@ (8001b4c <menu_config_process_input+0x168>)
 8001ab8:	f007 fa76 	bl	8008fa8 <puts>
        	if(launcher.tubeCount == '6')
 8001abc:	4b22      	ldr	r3, [pc, #136]	@ (8001b48 <menu_config_process_input+0x164>)
 8001abe:	785b      	ldrb	r3, [r3, #1]
 8001ac0:	2b36      	cmp	r3, #54	@ 0x36
 8001ac2:	d102      	bne.n	8001aca <menu_config_process_input+0xe6>
        		retract_all_pins(6);
 8001ac4:	2006      	movs	r0, #6
 8001ac6:	f001 f815 	bl	8002af4 <retract_all_pins>
        	if(launcher.tubeCount == '8')
 8001aca:	4b1f      	ldr	r3, [pc, #124]	@ (8001b48 <menu_config_process_input+0x164>)
 8001acc:	785b      	ldrb	r3, [r3, #1]
 8001ace:	2b38      	cmp	r3, #56	@ 0x38
 8001ad0:	d12a      	bne.n	8001b28 <menu_config_process_input+0x144>
        		retract_all_pins(8);
 8001ad2:	2008      	movs	r0, #8
 8001ad4:	f001 f80e 	bl	8002af4 <retract_all_pins>
            break;
 8001ad8:	e026      	b.n	8001b28 <menu_config_process_input+0x144>
        case 'F':
            printf("\n\rSend the \"@\" symbol repeatedly to exit grease pins mode\r\n");
 8001ada:	481d      	ldr	r0, [pc, #116]	@ (8001b50 <menu_config_process_input+0x16c>)
 8001adc:	f007 fa64 	bl	8008fa8 <puts>
            printf("grease_pins();");
 8001ae0:	481c      	ldr	r0, [pc, #112]	@ (8001b54 <menu_config_process_input+0x170>)
 8001ae2:	f007 f9f9 	bl	8008ed8 <iprintf>
            //grease_pins();
            break;
 8001ae6:	e020      	b.n	8001b2a <menu_config_process_input+0x146>
        case 'G':
        	menu_clear_memory();
 8001ae8:	f000 f95c 	bl	8001da4 <menu_clear_memory>
//        	eeprom_read_nbytes(M_SAMPLEPERIOD2B, sizeof(mtMemory.samplePeriod), &mtMemory.samplePeriod);
////        	mtMemory = *(motor_t*) eeprom_read(DATA_MOTOR);
////        	alMemory = *(launcher_t*) eeprom_read(DATA_LAUNCHER);
//    		printf("\r\n<AL> Tubes: %c | Type: %c | Serial: %i <M> Runtime: %i | Sample Period: %i\r\n", alMemory.tubeCount, alMemory.type, alMemory.serialNumber, mtMemory.runTime, mtMemory.samplePeriod);

        	break;
 8001aec:	e01d      	b.n	8001b2a <menu_config_process_input+0x146>
        case 'H':
        	motor_read_stats();
 8001aee:	f000 fa8d 	bl	800200c <motor_read_stats>
        	break;
 8001af2:	e01a      	b.n	8001b2a <menu_config_process_input+0x146>
        case 'J':
        	// motor runtime
        	motor_set_runtime();
 8001af4:	f000 fb2c 	bl	8002150 <motor_set_runtime>
    		break;
 8001af8:	e017      	b.n	8001b2a <menu_config_process_input+0x146>
        case 'K':
        	motor_set_sampling_period();
 8001afa:	f000 fbbf 	bl	800227c <motor_set_sampling_period>
        	break;
 8001afe:	e014      	b.n	8001b2a <menu_config_process_input+0x146>
        case 'L':
        	motor_set_wiring();
 8001b00:	f000 fc50 	bl	80023a4 <motor_set_wiring>
        	break;
 8001b04:	e011      	b.n	8001b2a <menu_config_process_input+0x146>
        case 'W':
        	motor_set_pwm_freq();
 8001b06:	f000 fc53 	bl	80023b0 <motor_set_pwm_freq>
        	break;
 8001b0a:	e00e      	b.n	8001b2a <menu_config_process_input+0x146>
        case 'E':
        	motor_reset_stats();
 8001b0c:	f000 fc56 	bl	80023bc <motor_reset_stats>
        	break;
 8001b10:	e00b      	b.n	8001b2a <menu_config_process_input+0x146>
        case 'R':
        	motor_read_parameters();
 8001b12:	f000 fc59 	bl	80023c8 <motor_read_parameters>
        	break;
 8001b16:	e008      	b.n	8001b2a <menu_config_process_input+0x146>
        case 'Z':
        	menu_help_print();
 8001b18:	f000 fce2 	bl	80024e0 <menu_help_print>
        default:
        	printf("\r\n** Unrecognized command!!** \r\n");
 8001b1c:	480e      	ldr	r0, [pc, #56]	@ (8001b58 <menu_config_process_input+0x174>)
 8001b1e:	f007 fa43 	bl	8008fa8 <puts>
            break;
 8001b22:	e002      	b.n	8001b2a <menu_config_process_input+0x146>
            break;
 8001b24:	bf00      	nop
 8001b26:	e000      	b.n	8001b2a <menu_config_process_input+0x146>
            break;
 8001b28:	bf00      	nop
    }
    printf("\r\n> ");
 8001b2a:	480c      	ldr	r0, [pc, #48]	@ (8001b5c <menu_config_process_input+0x178>)
 8001b2c:	f007 f9d4 	bl	8008ed8 <iprintf>

}
 8001b30:	bf00      	nop
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	0800a268 	.word	0x0800a268
 8001b3c:	0800aa08 	.word	0x0800aa08
 8001b40:	20000187 	.word	0x20000187
 8001b44:	0800aa38 	.word	0x0800aa38
 8001b48:	20000000 	.word	0x20000000
 8001b4c:	0800aa4c 	.word	0x0800aa4c
 8001b50:	0800aa60 	.word	0x0800aa60
 8001b54:	0800aa9c 	.word	0x0800aa9c
 8001b58:	0800a638 	.word	0x0800a638
 8001b5c:	08009e30 	.word	0x08009e30

08001b60 <menu_config_tubes_type_serial>:




void menu_config_tubes_type_serial(void){
 8001b60:	b5b0      	push	{r4, r5, r7, lr}
 8001b62:	b0c2      	sub	sp, #264	@ 0x108
 8001b64:	af02      	add	r7, sp, #8
	printf("Current tube count: %c\r\n", launcher.tubeCount);
 8001b66:	4b7f      	ldr	r3, [pc, #508]	@ (8001d64 <menu_config_tubes_type_serial+0x204>)
 8001b68:	785b      	ldrb	r3, [r3, #1]
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	487e      	ldr	r0, [pc, #504]	@ (8001d68 <menu_config_tubes_type_serial+0x208>)
 8001b6e:	f007 f9b3 	bl	8008ed8 <iprintf>
	char tubes[1];
	char tubePrompt[] = "\r\nEnter AL tube count [6] or [8]: ";
 8001b72:	4b7e      	ldr	r3, [pc, #504]	@ (8001d6c <menu_config_tubes_type_serial+0x20c>)
 8001b74:	f107 04d8 	add.w	r4, r7, #216	@ 0xd8
 8001b78:	461d      	mov	r5, r3
 8001b7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b82:	682b      	ldr	r3, [r5, #0]
 8001b84:	461a      	mov	r2, r3
 8001b86:	8022      	strh	r2, [r4, #0]
 8001b88:	3402      	adds	r4, #2
 8001b8a:	0c1b      	lsrs	r3, r3, #16
 8001b8c:	7023      	strb	r3, [r4, #0]
	char tubeError[] = "\r\nERROR: Enter 6 or 8 !\r\n";
 8001b8e:	4b78      	ldr	r3, [pc, #480]	@ (8001d70 <menu_config_tubes_type_serial+0x210>)
 8001b90:	f107 04bc 	add.w	r4, r7, #188	@ 0xbc
 8001b94:	461d      	mov	r5, r3
 8001b96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b9a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b9e:	c403      	stmia	r4!, {r0, r1}
 8001ba0:	8022      	strh	r2, [r4, #0]
	char tubeCheck[] = {'6','8'};
 8001ba2:	f643 0336 	movw	r3, #14390	@ 0x3836
 8001ba6:	f8a7 30b8 	strh.w	r3, [r7, #184]	@ 0xb8
	get_user_input(tubePrompt, tubeError, 1, tubeCheck, tubes);
 8001baa:	f107 02b8 	add.w	r2, r7, #184	@ 0xb8
 8001bae:	f107 01bc 	add.w	r1, r7, #188	@ 0xbc
 8001bb2:	f107 00d8 	add.w	r0, r7, #216	@ 0xd8
 8001bb6:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001bba:	9300      	str	r3, [sp, #0]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f000 fc94 	bl	80024ec <get_user_input>

    launcher.tubeCount = tubes[0];
 8001bc4:	f897 20fc 	ldrb.w	r2, [r7, #252]	@ 0xfc
 8001bc8:	4b66      	ldr	r3, [pc, #408]	@ (8001d64 <menu_config_tubes_type_serial+0x204>)
 8001bca:	705a      	strb	r2, [r3, #1]
    // get the autolauncher type, R regular or X extended, only for 8 tube AL
    if(launcher.tubeCount == '8'){
 8001bcc:	4b65      	ldr	r3, [pc, #404]	@ (8001d64 <menu_config_tubes_type_serial+0x204>)
 8001bce:	785b      	ldrb	r3, [r3, #1]
 8001bd0:	2b38      	cmp	r3, #56	@ 0x38
 8001bd2:	d130      	bne.n	8001c36 <menu_config_tubes_type_serial+0xd6>
    	char type[1];
    	char typePrompt[] = "Enter launcher type, [X] extended or [R] regular: ";
 8001bd4:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8001bd8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001bdc:	4a65      	ldr	r2, [pc, #404]	@ (8001d74 <menu_config_tubes_type_serial+0x214>)
 8001bde:	461c      	mov	r4, r3
 8001be0:	4615      	mov	r5, r2
 8001be2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001be4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001be6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001be8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bee:	682b      	ldr	r3, [r5, #0]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	8022      	strh	r2, [r4, #0]
 8001bf4:	3402      	adds	r4, #2
 8001bf6:	0c1b      	lsrs	r3, r3, #16
 8001bf8:	7023      	strb	r3, [r4, #0]
    	char typeError[] = "\r\nERROR: Enter X or R !\r\n";
 8001bfa:	4b5f      	ldr	r3, [pc, #380]	@ (8001d78 <menu_config_tubes_type_serial+0x218>)
 8001bfc:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8001c00:	461d      	mov	r5, r3
 8001c02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c06:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c0a:	c403      	stmia	r4!, {r0, r1}
 8001c0c:	8022      	strh	r2, [r4, #0]
    	char typeCheck[] = {'R','X'};
 8001c0e:	f645 0352 	movw	r3, #22610	@ 0x5852
 8001c12:	86bb      	strh	r3, [r7, #52]	@ 0x34
    	get_user_input(typePrompt, typeError, 1, typeCheck, type);
 8001c14:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8001c18:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8001c1c:	4638      	mov	r0, r7
 8001c1e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	4613      	mov	r3, r2
 8001c26:	2201      	movs	r2, #1
 8001c28:	f000 fc60 	bl	80024ec <get_user_input>
    	launcher.type = type[0];
 8001c2c:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8001c30:	4b4c      	ldr	r3, [pc, #304]	@ (8001d64 <menu_config_tubes_type_serial+0x204>)
 8001c32:	709a      	strb	r2, [r3, #2]
 8001c34:	e002      	b.n	8001c3c <menu_config_tubes_type_serial+0xdc>

    } else {
    	launcher.type = '0'; // if not 8 tubes, reset type to unknown
 8001c36:	4b4b      	ldr	r3, [pc, #300]	@ (8001d64 <menu_config_tubes_type_serial+0x204>)
 8001c38:	2230      	movs	r2, #48	@ 0x30
 8001c3a:	709a      	strb	r2, [r3, #2]
    }
    //launcher.serialNumber = 55;
    printf("Current serial number: %c\r\n", launcher.serialNumber);
 8001c3c:	4b49      	ldr	r3, [pc, #292]	@ (8001d64 <menu_config_tubes_type_serial+0x204>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	4619      	mov	r1, r3
 8001c42:	484e      	ldr	r0, [pc, #312]	@ (8001d7c <menu_config_tubes_type_serial+0x21c>)
 8001c44:	f007 f948 	bl	8008ed8 <iprintf>
	char serial[2];
	char serialPrompt[] = "Enter a two-digit Autolauncher serial number [00-99]: ";
 8001c48:	4b4d      	ldr	r3, [pc, #308]	@ (8001d80 <menu_config_tubes_type_serial+0x220>)
 8001c4a:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 8001c4e:	461d      	mov	r5, r3
 8001c50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c5c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c60:	6020      	str	r0, [r4, #0]
 8001c62:	3404      	adds	r4, #4
 8001c64:	8021      	strh	r1, [r4, #0]
 8001c66:	3402      	adds	r4, #2
 8001c68:	0c0b      	lsrs	r3, r1, #16
 8001c6a:	7023      	strb	r3, [r4, #0]
	char serialError[] = "\r\nEnter only numbers!\r\n";
 8001c6c:	4b45      	ldr	r3, [pc, #276]	@ (8001d84 <menu_config_tubes_type_serial+0x224>)
 8001c6e:	f107 0464 	add.w	r4, r7, #100	@ 0x64
 8001c72:	461d      	mov	r5, r3
 8001c74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c78:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c7c:	e884 0003 	stmia.w	r4, {r0, r1}
	char serialCheck[] = {'0','1','2','3','4','5','6','7','8','9'};
 8001c80:	4a41      	ldr	r2, [pc, #260]	@ (8001d88 <menu_config_tubes_type_serial+0x228>)
 8001c82:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001c86:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c88:	c303      	stmia	r3!, {r0, r1}
 8001c8a:	801a      	strh	r2, [r3, #0]
	get_user_input(serialPrompt, serialError, 2, serialCheck, serial);
 8001c8c:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8001c90:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 8001c94:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 8001c98:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001c9c:	9300      	str	r3, [sp, #0]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	2202      	movs	r2, #2
 8001ca2:	f000 fc23 	bl	80024ec <get_user_input>
	launcher.serialNumber = (uint8_t) ( (serial[0] - '0') * 10 + (serial[1] - '0') ); // convert to number, subtract '0' (48 dec)
 8001ca6:	f897 30b4 	ldrb.w	r3, [r7, #180]	@ 0xb4
 8001caa:	3b30      	subs	r3, #48	@ 0x30
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	461a      	mov	r2, r3
 8001cb0:	0092      	lsls	r2, r2, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	f897 30b5 	ldrb.w	r3, [r7, #181]	@ 0xb5
 8001cbc:	4413      	add	r3, r2
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	3b30      	subs	r3, #48	@ 0x30
 8001cc2:	b2da      	uxtb	r2, r3
 8001cc4:	4b27      	ldr	r3, [pc, #156]	@ (8001d64 <menu_config_tubes_type_serial+0x204>)
 8001cc6:	701a      	strb	r2, [r3, #0]
    launcher.configured = 'Y';
 8001cc8:	4b26      	ldr	r3, [pc, #152]	@ (8001d64 <menu_config_tubes_type_serial+0x204>)
 8001cca:	2259      	movs	r2, #89	@ 0x59
 8001ccc:	711a      	strb	r2, [r3, #4]
    printf("\r\nTubes: %c | Type: %c | Serial: %i\r\n", launcher.tubeCount, launcher.type, launcher.serialNumber);
 8001cce:	4b25      	ldr	r3, [pc, #148]	@ (8001d64 <menu_config_tubes_type_serial+0x204>)
 8001cd0:	785b      	ldrb	r3, [r3, #1]
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4b23      	ldr	r3, [pc, #140]	@ (8001d64 <menu_config_tubes_type_serial+0x204>)
 8001cd6:	789b      	ldrb	r3, [r3, #2]
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4b22      	ldr	r3, [pc, #136]	@ (8001d64 <menu_config_tubes_type_serial+0x204>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	482b      	ldr	r0, [pc, #172]	@ (8001d8c <menu_config_tubes_type_serial+0x22c>)
 8001ce0:	f007 f8fa 	bl	8008ed8 <iprintf>

    // store parameters in eeprom
    eeprom_write_nbytes(AL_TUBECOUNT1B, sizeof(launcher.tubeCount), &launcher.tubeCount);
 8001ce4:	4a2a      	ldr	r2, [pc, #168]	@ (8001d90 <menu_config_tubes_type_serial+0x230>)
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	2000      	movs	r0, #0
 8001cea:	f001 fbb1 	bl	8003450 <eeprom_write_nbytes>
//            eeprom_write(AL_TUBECOUNT1B, launcher.tubeCount);
    eeprom_write_nbytes(AL_TYPE1B, sizeof(launcher.type), &launcher.type);
 8001cee:	4a29      	ldr	r2, [pc, #164]	@ (8001d94 <menu_config_tubes_type_serial+0x234>)
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	2001      	movs	r0, #1
 8001cf4:	f001 fbac 	bl	8003450 <eeprom_write_nbytes>
//            eeprom_write(AL_TYPE1B, launcher.type);
    eeprom_write_nbytes(AL_SN1B, sizeof(launcher.serialNumber), &launcher.serialNumber);
 8001cf8:	4a1a      	ldr	r2, [pc, #104]	@ (8001d64 <menu_config_tubes_type_serial+0x204>)
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	2002      	movs	r0, #2
 8001cfe:	f001 fba7 	bl	8003450 <eeprom_write_nbytes>
//            eeprom_write(AL_SN1B, launcher.serialNumber);
    eeprom_write_nbytes(AL_CONFIGED1B, sizeof(launcher.configured), &launcher.configured);
 8001d02:	4a25      	ldr	r2, [pc, #148]	@ (8001d98 <menu_config_tubes_type_serial+0x238>)
 8001d04:	2101      	movs	r1, #1
 8001d06:	2003      	movs	r0, #3
 8001d08:	f001 fba2 	bl	8003450 <eeprom_write_nbytes>
//            eeprom_write(AL_CONFIGED1B, eeprom.configured);
    printf("Settings saved!");
 8001d0c:	4823      	ldr	r0, [pc, #140]	@ (8001d9c <menu_config_tubes_type_serial+0x23c>)
 8001d0e:	f007 f8e3 	bl	8008ed8 <iprintf>
//            printf("\r\nNew autolauncher configuration: Tubes: %c | Type: %c | Serial: %i | configed: %c\r\n", eeprom_read(AL_TUBECOUNT1B), eeprom_read(AL_TYPE1B), eeprom_read(AL_SN1B), eeprom_read(AL_CONFIGED1B));

    // test eeprom memory
    eeprom_read_nbytes(AL_TUBECOUNT1B, sizeof(launcher.tubeCount), &launcher.tubeCount);
 8001d12:	4a1f      	ldr	r2, [pc, #124]	@ (8001d90 <menu_config_tubes_type_serial+0x230>)
 8001d14:	2101      	movs	r1, #1
 8001d16:	2000      	movs	r0, #0
 8001d18:	f001 fbc3 	bl	80034a2 <eeprom_read_nbytes>
    eeprom_read_nbytes(AL_TYPE1B, sizeof(launcher.type), &launcher.type);
 8001d1c:	4a1d      	ldr	r2, [pc, #116]	@ (8001d94 <menu_config_tubes_type_serial+0x234>)
 8001d1e:	2101      	movs	r1, #1
 8001d20:	2001      	movs	r0, #1
 8001d22:	f001 fbbe 	bl	80034a2 <eeprom_read_nbytes>
    eeprom_read_nbytes(AL_SN1B, sizeof(launcher.serialNumber), &launcher.serialNumber);
 8001d26:	4a0f      	ldr	r2, [pc, #60]	@ (8001d64 <menu_config_tubes_type_serial+0x204>)
 8001d28:	2101      	movs	r1, #1
 8001d2a:	2002      	movs	r0, #2
 8001d2c:	f001 fbb9 	bl	80034a2 <eeprom_read_nbytes>
    eeprom_read_nbytes(AL_CONFIGED1B, sizeof(launcher.configured), &launcher.configured);
 8001d30:	4a19      	ldr	r2, [pc, #100]	@ (8001d98 <menu_config_tubes_type_serial+0x238>)
 8001d32:	2101      	movs	r1, #1
 8001d34:	2003      	movs	r0, #3
 8001d36:	f001 fbb4 	bl	80034a2 <eeprom_read_nbytes>

    printf("\r\nStored autolauncher configuration: Tubes: %c | Type: %c | Serial: %i | Configured: %c\r\n",
    		launcher.tubeCount, launcher.type, launcher.serialNumber, launcher.configured);
 8001d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d64 <menu_config_tubes_type_serial+0x204>)
 8001d3c:	785b      	ldrb	r3, [r3, #1]
    printf("\r\nStored autolauncher configuration: Tubes: %c | Type: %c | Serial: %i | Configured: %c\r\n",
 8001d3e:	4619      	mov	r1, r3
    		launcher.tubeCount, launcher.type, launcher.serialNumber, launcher.configured);
 8001d40:	4b08      	ldr	r3, [pc, #32]	@ (8001d64 <menu_config_tubes_type_serial+0x204>)
 8001d42:	789b      	ldrb	r3, [r3, #2]
    printf("\r\nStored autolauncher configuration: Tubes: %c | Type: %c | Serial: %i | Configured: %c\r\n",
 8001d44:	461a      	mov	r2, r3
    		launcher.tubeCount, launcher.type, launcher.serialNumber, launcher.configured);
 8001d46:	4b07      	ldr	r3, [pc, #28]	@ (8001d64 <menu_config_tubes_type_serial+0x204>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
    printf("\r\nStored autolauncher configuration: Tubes: %c | Type: %c | Serial: %i | Configured: %c\r\n",
 8001d4a:	4618      	mov	r0, r3
    		launcher.tubeCount, launcher.type, launcher.serialNumber, launcher.configured);
 8001d4c:	4b05      	ldr	r3, [pc, #20]	@ (8001d64 <menu_config_tubes_type_serial+0x204>)
 8001d4e:	791b      	ldrb	r3, [r3, #4]
    printf("\r\nStored autolauncher configuration: Tubes: %c | Type: %c | Serial: %i | Configured: %c\r\n",
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	4603      	mov	r3, r0
 8001d54:	4812      	ldr	r0, [pc, #72]	@ (8001da0 <menu_config_tubes_type_serial+0x240>)
 8001d56:	f007 f8bf 	bl	8008ed8 <iprintf>
}
 8001d5a:	bf00      	nop
 8001d5c:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bdb0      	pop	{r4, r5, r7, pc}
 8001d64:	20000000 	.word	0x20000000
 8001d68:	0800aaac 	.word	0x0800aaac
 8001d6c:	0800ab78 	.word	0x0800ab78
 8001d70:	0800ab9c 	.word	0x0800ab9c
 8001d74:	0800abb8 	.word	0x0800abb8
 8001d78:	0800abec 	.word	0x0800abec
 8001d7c:	0800aac8 	.word	0x0800aac8
 8001d80:	0800ac08 	.word	0x0800ac08
 8001d84:	0800ac40 	.word	0x0800ac40
 8001d88:	0800ac58 	.word	0x0800ac58
 8001d8c:	0800aae4 	.word	0x0800aae4
 8001d90:	20000001 	.word	0x20000001
 8001d94:	20000002 	.word	0x20000002
 8001d98:	20000004 	.word	0x20000004
 8001d9c:	0800ab0c 	.word	0x0800ab0c
 8001da0:	0800ab1c 	.word	0x0800ab1c

08001da4 <menu_clear_memory>:

void menu_clear_memory(void){
 8001da4:	b5b0      	push	{r4, r5, r7, lr}
 8001da6:	b0aa      	sub	sp, #168	@ 0xa8
 8001da8:	af02      	add	r7, sp, #8
	uint8_t memStart, memEnd;
	uint8_t validMemory = 0; // valid memory value flag
 8001daa:	2300      	movs	r3, #0
 8001dac:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
	// print memory map
	eeprom_print_memory_map();
 8001db0:	f001 fa8e 	bl	80032d0 <eeprom_print_memory_map>
	// get the memory range to clear - start
	char mem[3]; // buffer to store digits
	char mStartPrompt[] = "\r\nEnter 3 digit START memory address [000-127]: ";
 8001db4:	4b84      	ldr	r3, [pc, #528]	@ (8001fc8 <menu_clear_memory+0x224>)
 8001db6:	f107 0464 	add.w	r4, r7, #100	@ 0x64
 8001dba:	461d      	mov	r5, r3
 8001dbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dc8:	682b      	ldr	r3, [r5, #0]
 8001dca:	7023      	strb	r3, [r4, #0]
	char mEndPrompt[] = "\r\nEnter 3 digit END memory address [000-127]: ";
 8001dcc:	4b7f      	ldr	r3, [pc, #508]	@ (8001fcc <menu_clear_memory+0x228>)
 8001dce:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8001dd2:	461d      	mov	r5, r3
 8001dd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ddc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001de0:	c407      	stmia	r4!, {r0, r1, r2}
 8001de2:	8023      	strh	r3, [r4, #0]
 8001de4:	3402      	adds	r4, #2
 8001de6:	0c1b      	lsrs	r3, r3, #16
 8001de8:	7023      	strb	r3, [r4, #0]
	char memError[] = "\r\n* ERROR: enter valid numbers *\r\n";
 8001dea:	4b79      	ldr	r3, [pc, #484]	@ (8001fd0 <menu_clear_memory+0x22c>)
 8001dec:	f107 0410 	add.w	r4, r7, #16
 8001df0:	461d      	mov	r5, r3
 8001df2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001df4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001df6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001df8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dfa:	682b      	ldr	r3, [r5, #0]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	8022      	strh	r2, [r4, #0]
 8001e00:	3402      	adds	r4, #2
 8001e02:	0c1b      	lsrs	r3, r3, #16
 8001e04:	7023      	strb	r3, [r4, #0]
	char memCheck[] = {'0','1','2','3','4','5','6','7','8','9'};
 8001e06:	4a73      	ldr	r2, [pc, #460]	@ (8001fd4 <menu_clear_memory+0x230>)
 8001e08:	1d3b      	adds	r3, r7, #4
 8001e0a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e0c:	c303      	stmia	r3!, {r0, r1}
 8001e0e:	801a      	strh	r2, [r3, #0]
	// get start address
	do{
		get_user_input(mStartPrompt, memError, 3, memCheck, mem);
 8001e10:	1d3a      	adds	r2, r7, #4
 8001e12:	f107 0110 	add.w	r1, r7, #16
 8001e16:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 8001e1a:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	4613      	mov	r3, r2
 8001e22:	2203      	movs	r2, #3
 8001e24:	f000 fb62 	bl	80024ec <get_user_input>
		memStart = (uint8_t) ( (mem[0] - '0') * 100 + (mem[1] - '0') * 10 + (mem[2] - '0') ); // convert to number, subtract '0' (48 dec)
 8001e28:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 8001e2c:	3b30      	subs	r3, #48	@ 0x30
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	461a      	mov	r2, r3
 8001e32:	0092      	lsls	r2, r2, #2
 8001e34:	4413      	add	r3, r2
 8001e36:	461a      	mov	r2, r3
 8001e38:	0091      	lsls	r1, r2, #2
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	4413      	add	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
 8001e48:	3b30      	subs	r3, #48	@ 0x30
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	0089      	lsls	r1, r1, #2
 8001e50:	440b      	add	r3, r1
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	4413      	add	r3, r2
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	f897 309a 	ldrb.w	r3, [r7, #154]	@ 0x9a
 8001e5e:	4413      	add	r3, r2
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	3b30      	subs	r3, #48	@ 0x30
 8001e64:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
		if((memStart >= 0) && (memStart <= 127)){
 8001e68:	f997 309e 	ldrsb.w	r3, [r7, #158]	@ 0x9e
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	db03      	blt.n	8001e78 <menu_clear_memory+0xd4>
			validMemory = 1;
 8001e70:	2301      	movs	r3, #1
 8001e72:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 8001e76:	e002      	b.n	8001e7e <menu_clear_memory+0xda>
		} else {
			printf("Memory out of range!\r\n");
 8001e78:	4857      	ldr	r0, [pc, #348]	@ (8001fd8 <menu_clear_memory+0x234>)
 8001e7a:	f007 f895 	bl	8008fa8 <puts>
		}
	} while ( validMemory == 0 );
 8001e7e:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d0c4      	beq.n	8001e10 <menu_clear_memory+0x6c>
	// get end address
	validMemory = 0;
 8001e86:	2300      	movs	r3, #0
 8001e88:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
	do{
		mem[0] = '\0', mem[1] = '\0' , mem[2] = '\0';
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	f887 3098 	strb.w	r3, [r7, #152]	@ 0x98
 8001e92:	2300      	movs	r3, #0
 8001e94:	f887 3099 	strb.w	r3, [r7, #153]	@ 0x99
 8001e98:	2300      	movs	r3, #0
 8001e9a:	f887 309a 	strb.w	r3, [r7, #154]	@ 0x9a

		get_user_input(mEndPrompt, memError, 3, memCheck, mem);
 8001e9e:	1d3a      	adds	r2, r7, #4
 8001ea0:	f107 0110 	add.w	r1, r7, #16
 8001ea4:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8001ea8:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8001eac:	9300      	str	r3, [sp, #0]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	2203      	movs	r2, #3
 8001eb2:	f000 fb1b 	bl	80024ec <get_user_input>
		memEnd = (uint8_t)( (mem[0] - '0') * 100 + (mem[1] - '0') * 10 + (mem[2] - '0') ); // convert to number, subtract '0' (48 dec)
 8001eb6:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 8001eba:	3b30      	subs	r3, #48	@ 0x30
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	0092      	lsls	r2, r2, #2
 8001ec2:	4413      	add	r3, r2
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	0091      	lsls	r1, r2, #2
 8001ec8:	461a      	mov	r2, r3
 8001eca:	460b      	mov	r3, r1
 8001ecc:	4413      	add	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
 8001ed6:	3b30      	subs	r3, #48	@ 0x30
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	4619      	mov	r1, r3
 8001edc:	0089      	lsls	r1, r1, #2
 8001ede:	440b      	add	r3, r1
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	4413      	add	r3, r2
 8001ee6:	b2da      	uxtb	r2, r3
 8001ee8:	f897 309a 	ldrb.w	r3, [r7, #154]	@ 0x9a
 8001eec:	4413      	add	r3, r2
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	3b30      	subs	r3, #48	@ 0x30
 8001ef2:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d
		if((memEnd >= 0) && (memEnd <= 127)){
 8001ef6:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	db03      	blt.n	8001f06 <menu_clear_memory+0x162>
			validMemory = 1;
 8001efe:	2301      	movs	r3, #1
 8001f00:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 8001f04:	e002      	b.n	8001f0c <menu_clear_memory+0x168>
		} else {
			printf("Memory out of range!\r\n");
 8001f06:	4834      	ldr	r0, [pc, #208]	@ (8001fd8 <menu_clear_memory+0x234>)
 8001f08:	f007 f84e 	bl	8008fa8 <puts>
		}
	} while ( validMemory == 0 );
 8001f0c:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d0bb      	beq.n	8001e8c <menu_clear_memory+0xe8>
	printf("> %i blocks cleared!\r\n", eeprom_clear(memStart, memEnd));
 8001f14:	f897 209d 	ldrb.w	r2, [r7, #157]	@ 0x9d
 8001f18:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8001f1c:	4611      	mov	r1, r2
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f001 f9a6 	bl	8003270 <eeprom_clear>
 8001f24:	4603      	mov	r3, r0
 8001f26:	4619      	mov	r1, r3
 8001f28:	482c      	ldr	r0, [pc, #176]	@ (8001fdc <menu_clear_memory+0x238>)
 8001f2a:	f006 ffd5 	bl	8008ed8 <iprintf>
//    		launcher.type = eeprom_read(AL_TYPE1B);
//    		launcher.serialNumber = eeprom_read(AL_SN1B);
//    		launcher.configured = eeprom_read(AL_CONFIGED1B);
//    		motor.runTime = eeprom_read_uint32(M_RUNTIME4B);
	// read launcher config
	eeprom_read_nbytes(AL_TUBECOUNT1B, sizeof(launcher.tubeCount), &launcher.tubeCount);
 8001f2e:	4a2c      	ldr	r2, [pc, #176]	@ (8001fe0 <menu_clear_memory+0x23c>)
 8001f30:	2101      	movs	r1, #1
 8001f32:	2000      	movs	r0, #0
 8001f34:	f001 fab5 	bl	80034a2 <eeprom_read_nbytes>
	eeprom_read_nbytes(AL_TYPE1B, sizeof(launcher.type), &launcher.type);
 8001f38:	4a2a      	ldr	r2, [pc, #168]	@ (8001fe4 <menu_clear_memory+0x240>)
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	2001      	movs	r0, #1
 8001f3e:	f001 fab0 	bl	80034a2 <eeprom_read_nbytes>
	eeprom_read_nbytes(AL_SN1B, sizeof(launcher.serialNumber), &launcher.serialNumber);
 8001f42:	4a29      	ldr	r2, [pc, #164]	@ (8001fe8 <menu_clear_memory+0x244>)
 8001f44:	2101      	movs	r1, #1
 8001f46:	2002      	movs	r0, #2
 8001f48:	f001 faab 	bl	80034a2 <eeprom_read_nbytes>
	eeprom_read_nbytes(AL_CONFIGED1B, sizeof(launcher.configured), &launcher.configured);
 8001f4c:	4a27      	ldr	r2, [pc, #156]	@ (8001fec <menu_clear_memory+0x248>)
 8001f4e:	2101      	movs	r1, #1
 8001f50:	2003      	movs	r0, #3
 8001f52:	f001 faa6 	bl	80034a2 <eeprom_read_nbytes>
	// read motor config
	eeprom_read_nbytes(M_RUNTIME2B, sizeof(motor.runTime), &motor.runTime);
 8001f56:	4a26      	ldr	r2, [pc, #152]	@ (8001ff0 <menu_clear_memory+0x24c>)
 8001f58:	2102      	movs	r1, #2
 8001f5a:	2008      	movs	r0, #8
 8001f5c:	f001 faa1 	bl	80034a2 <eeprom_read_nbytes>
	eeprom_read_nbytes(M_PWM_FREQ2B, sizeof(motor.pwmFreq), &motor.pwmFreq);
 8001f60:	4a24      	ldr	r2, [pc, #144]	@ (8001ff4 <menu_clear_memory+0x250>)
 8001f62:	2102      	movs	r1, #2
 8001f64:	200a      	movs	r0, #10
 8001f66:	f001 fa9c 	bl	80034a2 <eeprom_read_nbytes>
	eeprom_read_nbytes(M_SAMPLEPERIOD2B, sizeof(motor.samplePeriod), &motor.samplePeriod);
 8001f6a:	4a23      	ldr	r2, [pc, #140]	@ (8001ff8 <menu_clear_memory+0x254>)
 8001f6c:	2102      	movs	r1, #2
 8001f6e:	200c      	movs	r0, #12
 8001f70:	f001 fa97 	bl	80034a2 <eeprom_read_nbytes>
	eeprom_read_nbytes(M_WIRING1B, sizeof(motor.wiring), &motor.wiring);
 8001f74:	4a21      	ldr	r2, [pc, #132]	@ (8001ffc <menu_clear_memory+0x258>)
 8001f76:	2101      	movs	r1, #1
 8001f78:	200e      	movs	r0, #14
 8001f7a:	f001 fa92 	bl	80034a2 <eeprom_read_nbytes>
//        	mtMemory = *(motor_t*) eeprom_read(DATA_MOTOR);
//        	alMemory = *(launcher_t*) eeprom_read(DATA_LAUNCHER);

	printf("\r\n<EEPROM>\r\n");
 8001f7e:	4820      	ldr	r0, [pc, #128]	@ (8002000 <menu_clear_memory+0x25c>)
 8001f80:	f007 f812 	bl	8008fa8 <puts>
	printf("<AL> Tubes: %c | Type: %c | Serial: %i\r\n", launcher.tubeCount, launcher.type, launcher.serialNumber);
 8001f84:	4b18      	ldr	r3, [pc, #96]	@ (8001fe8 <menu_clear_memory+0x244>)
 8001f86:	785b      	ldrb	r3, [r3, #1]
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4b17      	ldr	r3, [pc, #92]	@ (8001fe8 <menu_clear_memory+0x244>)
 8001f8c:	789b      	ldrb	r3, [r3, #2]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	4b15      	ldr	r3, [pc, #84]	@ (8001fe8 <menu_clear_memory+0x244>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	481b      	ldr	r0, [pc, #108]	@ (8002004 <menu_clear_memory+0x260>)
 8001f96:	f006 ff9f 	bl	8008ed8 <iprintf>
	printf("<MOTOR> Runtime: %i ms | PWM Frequency: %i Hz | Sample Period: %i ms | Wiring: %i\r\n",
			(int)motor.runTime, (int)motor.pwmFreq, (int)motor.samplePeriod, (int)motor.wiring);
 8001f9a:	4b15      	ldr	r3, [pc, #84]	@ (8001ff0 <menu_clear_memory+0x24c>)
 8001f9c:	881b      	ldrh	r3, [r3, #0]
	printf("<MOTOR> Runtime: %i ms | PWM Frequency: %i Hz | Sample Period: %i ms | Wiring: %i\r\n",
 8001f9e:	4619      	mov	r1, r3
			(int)motor.runTime, (int)motor.pwmFreq, (int)motor.samplePeriod, (int)motor.wiring);
 8001fa0:	4b13      	ldr	r3, [pc, #76]	@ (8001ff0 <menu_clear_memory+0x24c>)
 8001fa2:	889b      	ldrh	r3, [r3, #4]
	printf("<MOTOR> Runtime: %i ms | PWM Frequency: %i Hz | Sample Period: %i ms | Wiring: %i\r\n",
 8001fa4:	461a      	mov	r2, r3
			(int)motor.runTime, (int)motor.pwmFreq, (int)motor.samplePeriod, (int)motor.wiring);
 8001fa6:	4b12      	ldr	r3, [pc, #72]	@ (8001ff0 <menu_clear_memory+0x24c>)
 8001fa8:	885b      	ldrh	r3, [r3, #2]
	printf("<MOTOR> Runtime: %i ms | PWM Frequency: %i Hz | Sample Period: %i ms | Wiring: %i\r\n",
 8001faa:	4618      	mov	r0, r3
			(int)motor.runTime, (int)motor.pwmFreq, (int)motor.samplePeriod, (int)motor.wiring);
 8001fac:	4b10      	ldr	r3, [pc, #64]	@ (8001ff0 <menu_clear_memory+0x24c>)
 8001fae:	799b      	ldrb	r3, [r3, #6]
	printf("<MOTOR> Runtime: %i ms | PWM Frequency: %i Hz | Sample Period: %i ms | Wiring: %i\r\n",
 8001fb0:	9300      	str	r3, [sp, #0]
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	4814      	ldr	r0, [pc, #80]	@ (8002008 <menu_clear_memory+0x264>)
 8001fb6:	f006 ff8f 	bl	8008ed8 <iprintf>
	motor_read_stats();
 8001fba:	f000 f827 	bl	800200c <motor_read_stats>

}
 8001fbe:	bf00      	nop
 8001fc0:	37a0      	adds	r7, #160	@ 0xa0
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bdb0      	pop	{r4, r5, r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	0800ad20 	.word	0x0800ad20
 8001fcc:	0800ad54 	.word	0x0800ad54
 8001fd0:	0800ad84 	.word	0x0800ad84
 8001fd4:	0800ac58 	.word	0x0800ac58
 8001fd8:	0800ac64 	.word	0x0800ac64
 8001fdc:	0800ac7c 	.word	0x0800ac7c
 8001fe0:	20000001 	.word	0x20000001
 8001fe4:	20000002 	.word	0x20000002
 8001fe8:	20000000 	.word	0x20000000
 8001fec:	20000004 	.word	0x20000004
 8001ff0:	20000010 	.word	0x20000010
 8001ff4:	20000014 	.word	0x20000014
 8001ff8:	20000012 	.word	0x20000012
 8001ffc:	20000016 	.word	0x20000016
 8002000:	0800ac94 	.word	0x0800ac94
 8002004:	0800aca0 	.word	0x0800aca0
 8002008:	0800accc 	.word	0x0800accc

0800200c <motor_read_stats>:



/* Read motor use and Imax stored in eeprom memory */
void motor_read_stats(void){
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
	// use count
	eeprom_read_nbytes(M_1COUNT2B, sizeof(motor.count[0]), &motor.count[0]);
 8002012:	4a3b      	ldr	r2, [pc, #236]	@ (8002100 <motor_read_stats+0xf4>)
 8002014:	2102      	movs	r1, #2
 8002016:	2010      	movs	r0, #16
 8002018:	f001 fa43 	bl	80034a2 <eeprom_read_nbytes>
	eeprom_read_nbytes(M_2COUNT2B, sizeof(motor.count[1]), &motor.count[1]);
 800201c:	4a39      	ldr	r2, [pc, #228]	@ (8002104 <motor_read_stats+0xf8>)
 800201e:	2102      	movs	r1, #2
 8002020:	2012      	movs	r0, #18
 8002022:	f001 fa3e 	bl	80034a2 <eeprom_read_nbytes>
	eeprom_read_nbytes(M_3COUNT2B, sizeof(motor.count[2]), &motor.count[2]);
 8002026:	4a38      	ldr	r2, [pc, #224]	@ (8002108 <motor_read_stats+0xfc>)
 8002028:	2102      	movs	r1, #2
 800202a:	2014      	movs	r0, #20
 800202c:	f001 fa39 	bl	80034a2 <eeprom_read_nbytes>
	eeprom_read_nbytes(M_4COUNT2B, sizeof(motor.count[3]), &motor.count[3]);
 8002030:	4a36      	ldr	r2, [pc, #216]	@ (800210c <motor_read_stats+0x100>)
 8002032:	2102      	movs	r1, #2
 8002034:	2016      	movs	r0, #22
 8002036:	f001 fa34 	bl	80034a2 <eeprom_read_nbytes>
	eeprom_read_nbytes(M_5COUNT2B, sizeof(motor.count[4]), &motor.count[4]);
 800203a:	4a35      	ldr	r2, [pc, #212]	@ (8002110 <motor_read_stats+0x104>)
 800203c:	2102      	movs	r1, #2
 800203e:	2018      	movs	r0, #24
 8002040:	f001 fa2f 	bl	80034a2 <eeprom_read_nbytes>
	eeprom_read_nbytes(M_6COUNT2B, sizeof(motor.count[5]), &motor.count[5]);
 8002044:	4a33      	ldr	r2, [pc, #204]	@ (8002114 <motor_read_stats+0x108>)
 8002046:	2102      	movs	r1, #2
 8002048:	201a      	movs	r0, #26
 800204a:	f001 fa2a 	bl	80034a2 <eeprom_read_nbytes>
	eeprom_read_nbytes(M_7COUNT2B, sizeof(motor.count[6]), &motor.count[6]);
 800204e:	4a32      	ldr	r2, [pc, #200]	@ (8002118 <motor_read_stats+0x10c>)
 8002050:	2102      	movs	r1, #2
 8002052:	201c      	movs	r0, #28
 8002054:	f001 fa25 	bl	80034a2 <eeprom_read_nbytes>
	eeprom_read_nbytes(M_8COUNT2B, sizeof(motor.count[7]), &motor.count[7]);
 8002058:	4a30      	ldr	r2, [pc, #192]	@ (800211c <motor_read_stats+0x110>)
 800205a:	2102      	movs	r1, #2
 800205c:	201e      	movs	r0, #30
 800205e:	f001 fa20 	bl	80034a2 <eeprom_read_nbytes>
	// max current logged
	eeprom_read_nbytes(M_1MXAMP2B, sizeof(motor.imax[0]), &motor.imax[0]);
 8002062:	4a2f      	ldr	r2, [pc, #188]	@ (8002120 <motor_read_stats+0x114>)
 8002064:	2102      	movs	r1, #2
 8002066:	2020      	movs	r0, #32
 8002068:	f001 fa1b 	bl	80034a2 <eeprom_read_nbytes>
	eeprom_read_nbytes(M_2MXAMP2B, sizeof(motor.imax[1]), &motor.imax[1]);
 800206c:	4a2d      	ldr	r2, [pc, #180]	@ (8002124 <motor_read_stats+0x118>)
 800206e:	2102      	movs	r1, #2
 8002070:	2022      	movs	r0, #34	@ 0x22
 8002072:	f001 fa16 	bl	80034a2 <eeprom_read_nbytes>
	eeprom_read_nbytes(M_3MXAMP2B, sizeof(motor.imax[2]), &motor.imax[2]);
 8002076:	4a2c      	ldr	r2, [pc, #176]	@ (8002128 <motor_read_stats+0x11c>)
 8002078:	2102      	movs	r1, #2
 800207a:	2024      	movs	r0, #36	@ 0x24
 800207c:	f001 fa11 	bl	80034a2 <eeprom_read_nbytes>
	eeprom_read_nbytes(M_4MXAMP2B, sizeof(motor.imax[3]), &motor.imax[3]);
 8002080:	4a2a      	ldr	r2, [pc, #168]	@ (800212c <motor_read_stats+0x120>)
 8002082:	2102      	movs	r1, #2
 8002084:	2026      	movs	r0, #38	@ 0x26
 8002086:	f001 fa0c 	bl	80034a2 <eeprom_read_nbytes>
	eeprom_read_nbytes(M_5MXAMP2B, sizeof(motor.imax[4]), &motor.imax[4]);
 800208a:	4a29      	ldr	r2, [pc, #164]	@ (8002130 <motor_read_stats+0x124>)
 800208c:	2102      	movs	r1, #2
 800208e:	2028      	movs	r0, #40	@ 0x28
 8002090:	f001 fa07 	bl	80034a2 <eeprom_read_nbytes>
	eeprom_read_nbytes(M_6MXAMP2B, sizeof(motor.imax[5]), &motor.imax[5]);
 8002094:	4a27      	ldr	r2, [pc, #156]	@ (8002134 <motor_read_stats+0x128>)
 8002096:	2102      	movs	r1, #2
 8002098:	202a      	movs	r0, #42	@ 0x2a
 800209a:	f001 fa02 	bl	80034a2 <eeprom_read_nbytes>
	eeprom_read_nbytes(M_7MXAMP2B, sizeof(motor.imax[6]), &motor.imax[6]);
 800209e:	4a26      	ldr	r2, [pc, #152]	@ (8002138 <motor_read_stats+0x12c>)
 80020a0:	2102      	movs	r1, #2
 80020a2:	202c      	movs	r0, #44	@ 0x2c
 80020a4:	f001 f9fd 	bl	80034a2 <eeprom_read_nbytes>
	eeprom_read_nbytes(M_8MXAMP2B, sizeof(motor.imax[7]), &motor.imax[7]);
 80020a8:	4a24      	ldr	r2, [pc, #144]	@ (800213c <motor_read_stats+0x130>)
 80020aa:	2102      	movs	r1, #2
 80020ac:	202e      	movs	r0, #46	@ 0x2e
 80020ae:	f001 f9f8 	bl	80034a2 <eeprom_read_nbytes>
	// print stats
	printf("\r\n|         STEPPER MOTOR STATS           |\r\n");
 80020b2:	4823      	ldr	r0, [pc, #140]	@ (8002140 <motor_read_stats+0x134>)
 80020b4:	f006 ff78 	bl	8008fa8 <puts>
	printf("|=======================================|\r\n");
 80020b8:	4822      	ldr	r0, [pc, #136]	@ (8002144 <motor_read_stats+0x138>)
 80020ba:	f006 ff75 	bl	8008fa8 <puts>
	for(uint8_t i = 0; i < 8; i++){
 80020be:	2300      	movs	r3, #0
 80020c0:	71fb      	strb	r3, [r7, #7]
 80020c2:	e013      	b.n	80020ec <motor_read_stats+0xe0>
		printf("| [M%i] IMAX= %03i mA, USE_COUNT= %05i |\r\n", i+1 ,(int)motor.imax[i], (int)motor.count[i]);
 80020c4:	79fb      	ldrb	r3, [r7, #7]
 80020c6:	1c59      	adds	r1, r3, #1
 80020c8:	79fb      	ldrb	r3, [r7, #7]
 80020ca:	4a1f      	ldr	r2, [pc, #124]	@ (8002148 <motor_read_stats+0x13c>)
 80020cc:	3304      	adds	r3, #4
 80020ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020d2:	4618      	mov	r0, r3
 80020d4:	79fb      	ldrb	r3, [r7, #7]
 80020d6:	4a1c      	ldr	r2, [pc, #112]	@ (8002148 <motor_read_stats+0x13c>)
 80020d8:	330c      	adds	r3, #12
 80020da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020de:	4602      	mov	r2, r0
 80020e0:	481a      	ldr	r0, [pc, #104]	@ (800214c <motor_read_stats+0x140>)
 80020e2:	f006 fef9 	bl	8008ed8 <iprintf>
	for(uint8_t i = 0; i < 8; i++){
 80020e6:	79fb      	ldrb	r3, [r7, #7]
 80020e8:	3301      	adds	r3, #1
 80020ea:	71fb      	strb	r3, [r7, #7]
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	2b07      	cmp	r3, #7
 80020f0:	d9e8      	bls.n	80020c4 <motor_read_stats+0xb8>
	}
	printf("|=======================================|\r\n");
 80020f2:	4814      	ldr	r0, [pc, #80]	@ (8002144 <motor_read_stats+0x138>)
 80020f4:	f006 ff58 	bl	8008fa8 <puts>
}
 80020f8:	bf00      	nop
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	20000028 	.word	0x20000028
 8002104:	2000002a 	.word	0x2000002a
 8002108:	2000002c 	.word	0x2000002c
 800210c:	2000002e 	.word	0x2000002e
 8002110:	20000030 	.word	0x20000030
 8002114:	20000032 	.word	0x20000032
 8002118:	20000034 	.word	0x20000034
 800211c:	20000036 	.word	0x20000036
 8002120:	20000018 	.word	0x20000018
 8002124:	2000001a 	.word	0x2000001a
 8002128:	2000001c 	.word	0x2000001c
 800212c:	2000001e 	.word	0x2000001e
 8002130:	20000020 	.word	0x20000020
 8002134:	20000022 	.word	0x20000022
 8002138:	20000024 	.word	0x20000024
 800213c:	20000026 	.word	0x20000026
 8002140:	0800ada8 	.word	0x0800ada8
 8002144:	0800add8 	.word	0x0800add8
 8002148:	20000010 	.word	0x20000010
 800214c:	0800ae04 	.word	0x0800ae04

08002150 <motor_set_runtime>:



void motor_set_runtime(void){
 8002150:	b5b0      	push	{r4, r5, r7, lr}
 8002152:	b0a2      	sub	sp, #136	@ 0x88
 8002154:	af02      	add	r7, sp, #8
	printf("Current runtime: %i\r\n", motor.runTime);
 8002156:	4b41      	ldr	r3, [pc, #260]	@ (800225c <motor_set_runtime+0x10c>)
 8002158:	881b      	ldrh	r3, [r3, #0]
 800215a:	4619      	mov	r1, r3
 800215c:	4840      	ldr	r0, [pc, #256]	@ (8002260 <motor_set_runtime+0x110>)
 800215e:	f006 febb 	bl	8008ed8 <iprintf>
	char runtime[5];
	char runtimePrompt[] = "Enter motor runtime (5-digit number) in milliseconds [02000-15000]: ";
 8002162:	4a40      	ldr	r2, [pc, #256]	@ (8002264 <motor_set_runtime+0x114>)
 8002164:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002168:	4611      	mov	r1, r2
 800216a:	2245      	movs	r2, #69	@ 0x45
 800216c:	4618      	mov	r0, r3
 800216e:	f007 f92a 	bl	80093c6 <memcpy>
	char runtimeError[] = "\r\nEnter only numbers!\r\n";
 8002172:	4b3d      	ldr	r3, [pc, #244]	@ (8002268 <motor_set_runtime+0x118>)
 8002174:	f107 0410 	add.w	r4, r7, #16
 8002178:	461d      	mov	r5, r3
 800217a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800217c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800217e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002182:	e884 0003 	stmia.w	r4, {r0, r1}
	char runtimeCheck[] = {'0','1','2','3','4','5','6','7','8','9'};
 8002186:	4a39      	ldr	r2, [pc, #228]	@ (800226c <motor_set_runtime+0x11c>)
 8002188:	1d3b      	adds	r3, r7, #4
 800218a:	ca07      	ldmia	r2, {r0, r1, r2}
 800218c:	c303      	stmia	r3!, {r0, r1}
 800218e:	801a      	strh	r2, [r3, #0]
	uint8_t rtFlag;
	do{
		rtFlag = 0;
 8002190:	2300      	movs	r3, #0
 8002192:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		get_user_input(runtimePrompt, runtimeError, 5, runtimeCheck, runtime);
 8002196:	1d3a      	adds	r2, r7, #4
 8002198:	f107 0110 	add.w	r1, r7, #16
 800219c:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80021a0:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	4613      	mov	r3, r2
 80021a8:	2205      	movs	r2, #5
 80021aa:	f000 f99f 	bl	80024ec <get_user_input>
		uint32_t rt = ( (runtime[0] - '0') * 10000 + (runtime[1] - '0') * 1000 + (runtime[2] - '0') * 100 + (runtime[3] - '0') * 10 + (runtime[4] - '0') );
 80021ae:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 80021b2:	3b30      	subs	r3, #48	@ 0x30
 80021b4:	f242 7210 	movw	r2, #10000	@ 0x2710
 80021b8:	fb03 f202 	mul.w	r2, r3, r2
 80021bc:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 80021c0:	3b30      	subs	r3, #48	@ 0x30
 80021c2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80021c6:	fb01 f303 	mul.w	r3, r1, r3
 80021ca:	441a      	add	r2, r3
 80021cc:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80021d0:	3b30      	subs	r3, #48	@ 0x30
 80021d2:	2164      	movs	r1, #100	@ 0x64
 80021d4:	fb01 f303 	mul.w	r3, r1, r3
 80021d8:	18d1      	adds	r1, r2, r3
 80021da:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80021de:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80021e2:	4613      	mov	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4413      	add	r3, r2
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	18ca      	adds	r2, r1, r3
 80021ec:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80021f0:	3b30      	subs	r3, #48	@ 0x30
 80021f2:	4413      	add	r3, r2
 80021f4:	67bb      	str	r3, [r7, #120]	@ 0x78
		if((rt >= MOTOR_RUNTIME_MIN) && (rt <= MOTOR_RUNTIME_MAX)){
 80021f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80021f8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80021fc:	d309      	bcc.n	8002212 <motor_set_runtime+0xc2>
 80021fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002200:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8002204:	4293      	cmp	r3, r2
 8002206:	d804      	bhi.n	8002212 <motor_set_runtime+0xc2>
			motor.runTime = (uint16_t) rt;
 8002208:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800220a:	b29a      	uxth	r2, r3
 800220c:	4b13      	ldr	r3, [pc, #76]	@ (800225c <motor_set_runtime+0x10c>)
 800220e:	801a      	strh	r2, [r3, #0]
 8002210:	e005      	b.n	800221e <motor_set_runtime+0xce>
		} else {
			printf("\r\nValue out of range!\r\n");
 8002212:	4817      	ldr	r0, [pc, #92]	@ (8002270 <motor_set_runtime+0x120>)
 8002214:	f006 fec8 	bl	8008fa8 <puts>
			rtFlag = 1;
 8002218:	2301      	movs	r3, #1
 800221a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		}

	} while(rtFlag);
 800221e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1b4      	bne.n	8002190 <motor_set_runtime+0x40>
	// Print all inputs
	printf("Motor Runtime: %i ms\r\n", (int)motor.runTime);
 8002226:	4b0d      	ldr	r3, [pc, #52]	@ (800225c <motor_set_runtime+0x10c>)
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	4619      	mov	r1, r3
 800222c:	4811      	ldr	r0, [pc, #68]	@ (8002274 <motor_set_runtime+0x124>)
 800222e:	f006 fe53 	bl	8008ed8 <iprintf>
	// store in eeprom
	eeprom_write_nbytes(M_RUNTIME2B, sizeof(motor.runTime), &motor.runTime);
 8002232:	4a0a      	ldr	r2, [pc, #40]	@ (800225c <motor_set_runtime+0x10c>)
 8002234:	2102      	movs	r1, #2
 8002236:	2008      	movs	r0, #8
 8002238:	f001 f90a 	bl	8003450 <eeprom_write_nbytes>
//    		eeprom_write_uint32(M_RUNTIME4B, motor.runTime);
	// test memory
	eeprom_read_nbytes(M_RUNTIME2B, sizeof(motor.runTime), &motor.runTime);
 800223c:	4a07      	ldr	r2, [pc, #28]	@ (800225c <motor_set_runtime+0x10c>)
 800223e:	2102      	movs	r1, #2
 8002240:	2008      	movs	r0, #8
 8002242:	f001 f92e 	bl	80034a2 <eeprom_read_nbytes>
//    		mtMemory = *(motor_t*) eeprom_read(DATA_MOTOR);
	printf("Setting saved! Runtime: %i\r\n\r\n", (int)motor.runTime);
 8002246:	4b05      	ldr	r3, [pc, #20]	@ (800225c <motor_set_runtime+0x10c>)
 8002248:	881b      	ldrh	r3, [r3, #0]
 800224a:	4619      	mov	r1, r3
 800224c:	480a      	ldr	r0, [pc, #40]	@ (8002278 <motor_set_runtime+0x128>)
 800224e:	f006 fe43 	bl	8008ed8 <iprintf>

}
 8002252:	bf00      	nop
 8002254:	3780      	adds	r7, #128	@ 0x80
 8002256:	46bd      	mov	sp, r7
 8002258:	bdb0      	pop	{r4, r5, r7, pc}
 800225a:	bf00      	nop
 800225c:	20000010 	.word	0x20000010
 8002260:	0800ae30 	.word	0x0800ae30
 8002264:	0800ae98 	.word	0x0800ae98
 8002268:	0800ac40 	.word	0x0800ac40
 800226c:	0800ac58 	.word	0x0800ac58
 8002270:	0800ae48 	.word	0x0800ae48
 8002274:	0800ae60 	.word	0x0800ae60
 8002278:	0800ae78 	.word	0x0800ae78

0800227c <motor_set_sampling_period>:

void motor_set_sampling_period(void){
 800227c:	b5b0      	push	{r4, r5, r7, lr}
 800227e:	b0a0      	sub	sp, #128	@ 0x80
 8002280:	af02      	add	r7, sp, #8
	printf("Current ADC sampling period: %i\r\n", motor.samplePeriod);
 8002282:	4b3f      	ldr	r3, [pc, #252]	@ (8002380 <motor_set_sampling_period+0x104>)
 8002284:	885b      	ldrh	r3, [r3, #2]
 8002286:	4619      	mov	r1, r3
 8002288:	483e      	ldr	r0, [pc, #248]	@ (8002384 <motor_set_sampling_period+0x108>)
 800228a:	f006 fe25 	bl	8008ed8 <iprintf>
	char sPeriod[4];
	char sPeriodPrompt[] = "Enter ADC sampling time (4-digit number) in milliseconds [0100-2000]: ";
 800228e:	4a3e      	ldr	r2, [pc, #248]	@ (8002388 <motor_set_sampling_period+0x10c>)
 8002290:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002294:	4611      	mov	r1, r2
 8002296:	2247      	movs	r2, #71	@ 0x47
 8002298:	4618      	mov	r0, r3
 800229a:	f007 f894 	bl	80093c6 <memcpy>
	char sPeriodError[] = "\r\nEnter only numbers!\r\n";
 800229e:	4b3b      	ldr	r3, [pc, #236]	@ (800238c <motor_set_sampling_period+0x110>)
 80022a0:	f107 040c 	add.w	r4, r7, #12
 80022a4:	461d      	mov	r5, r3
 80022a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022aa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80022ae:	e884 0003 	stmia.w	r4, {r0, r1}
	char sPeriodCheck[] = {'0','1','2','3','4','5','6','7','8','9'};
 80022b2:	4a37      	ldr	r2, [pc, #220]	@ (8002390 <motor_set_sampling_period+0x114>)
 80022b4:	463b      	mov	r3, r7
 80022b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80022b8:	c303      	stmia	r3!, {r0, r1}
 80022ba:	801a      	strh	r2, [r3, #0]
	uint8_t spFlag;
	do{
		spFlag = 0;
 80022bc:	2300      	movs	r3, #0
 80022be:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		get_user_input(sPeriodPrompt, sPeriodError, 4, sPeriodCheck, sPeriod);
 80022c2:	463a      	mov	r2, r7
 80022c4:	f107 010c 	add.w	r1, r7, #12
 80022c8:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80022cc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80022d0:	9300      	str	r3, [sp, #0]
 80022d2:	4613      	mov	r3, r2
 80022d4:	2204      	movs	r2, #4
 80022d6:	f000 f909 	bl	80024ec <get_user_input>
		uint32_t sp = ( (sPeriod[0] - '0') * 1000 + (sPeriod[1] - '0') * 100 + (sPeriod[2] - '0') * 10 + (sPeriod[3] - '0') );
 80022da:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 80022de:	3b30      	subs	r3, #48	@ 0x30
 80022e0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80022e4:	fb03 f202 	mul.w	r2, r3, r2
 80022e8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80022ec:	3b30      	subs	r3, #48	@ 0x30
 80022ee:	2164      	movs	r1, #100	@ 0x64
 80022f0:	fb01 f303 	mul.w	r3, r1, r3
 80022f4:	18d1      	adds	r1, r2, r3
 80022f6:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80022fa:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80022fe:	4613      	mov	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	4413      	add	r3, r2
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	18ca      	adds	r2, r1, r3
 8002308:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800230c:	3b30      	subs	r3, #48	@ 0x30
 800230e:	4413      	add	r3, r2
 8002310:	673b      	str	r3, [r7, #112]	@ 0x70
		if(( sp >= MOTOR_SAMPLE_PERIOD_MIN) && (sp <= MOTOR_SAMPLE_PERIOD_MAX) && sp < motor.runTime){
 8002312:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002314:	2b63      	cmp	r3, #99	@ 0x63
 8002316:	d90e      	bls.n	8002336 <motor_set_sampling_period+0xba>
 8002318:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800231a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800231e:	d80a      	bhi.n	8002336 <motor_set_sampling_period+0xba>
 8002320:	4b17      	ldr	r3, [pc, #92]	@ (8002380 <motor_set_sampling_period+0x104>)
 8002322:	881b      	ldrh	r3, [r3, #0]
 8002324:	461a      	mov	r2, r3
 8002326:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002328:	4293      	cmp	r3, r2
 800232a:	d204      	bcs.n	8002336 <motor_set_sampling_period+0xba>
			motor.samplePeriod = (uint16_t) sp;
 800232c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800232e:	b29a      	uxth	r2, r3
 8002330:	4b13      	ldr	r3, [pc, #76]	@ (8002380 <motor_set_sampling_period+0x104>)
 8002332:	805a      	strh	r2, [r3, #2]
 8002334:	e005      	b.n	8002342 <motor_set_sampling_period+0xc6>
		} else {
			printf("\r\nValue out of range or greater than runtime!\r\n");
 8002336:	4817      	ldr	r0, [pc, #92]	@ (8002394 <motor_set_sampling_period+0x118>)
 8002338:	f006 fe36 	bl	8008fa8 <puts>
			spFlag = 1;
 800233c:	2301      	movs	r3, #1
 800233e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		}
	} while(spFlag);
 8002342:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1b8      	bne.n	80022bc <motor_set_sampling_period+0x40>
	// Print all inputs
	printf("Motor ADC Sample Period: %i\r\n", (int)motor.samplePeriod);
 800234a:	4b0d      	ldr	r3, [pc, #52]	@ (8002380 <motor_set_sampling_period+0x104>)
 800234c:	885b      	ldrh	r3, [r3, #2]
 800234e:	4619      	mov	r1, r3
 8002350:	4811      	ldr	r0, [pc, #68]	@ (8002398 <motor_set_sampling_period+0x11c>)
 8002352:	f006 fdc1 	bl	8008ed8 <iprintf>
	// store in eeprom

	eeprom_write_nbytes(M_SAMPLEPERIOD2B, sizeof(motor.samplePeriod), &motor.samplePeriod);
 8002356:	4a11      	ldr	r2, [pc, #68]	@ (800239c <motor_set_sampling_period+0x120>)
 8002358:	2102      	movs	r1, #2
 800235a:	200c      	movs	r0, #12
 800235c:	f001 f878 	bl	8003450 <eeprom_write_nbytes>
//    		eeprom_write_uint32(M_RUNTIME4B, motor.runTime);
	// test memory
	eeprom_read_nbytes(M_SAMPLEPERIOD2B, sizeof(motor.samplePeriod), &motor.samplePeriod);
 8002360:	4a0e      	ldr	r2, [pc, #56]	@ (800239c <motor_set_sampling_period+0x120>)
 8002362:	2102      	movs	r1, #2
 8002364:	200c      	movs	r0, #12
 8002366:	f001 f89c 	bl	80034a2 <eeprom_read_nbytes>
//    		mtMemory = *(motor_t*) eeprom_read(DATA_MOTOR);
	printf("Setting saved! Sample Period: %i\r\n\r\n", (int)motor.samplePeriod);
 800236a:	4b05      	ldr	r3, [pc, #20]	@ (8002380 <motor_set_sampling_period+0x104>)
 800236c:	885b      	ldrh	r3, [r3, #2]
 800236e:	4619      	mov	r1, r3
 8002370:	480b      	ldr	r0, [pc, #44]	@ (80023a0 <motor_set_sampling_period+0x124>)
 8002372:	f006 fdb1 	bl	8008ed8 <iprintf>
	// update timer registers


}
 8002376:	bf00      	nop
 8002378:	3778      	adds	r7, #120	@ 0x78
 800237a:	46bd      	mov	sp, r7
 800237c:	bdb0      	pop	{r4, r5, r7, pc}
 800237e:	bf00      	nop
 8002380:	20000010 	.word	0x20000010
 8002384:	0800aee0 	.word	0x0800aee0
 8002388:	0800af7c 	.word	0x0800af7c
 800238c:	0800ac40 	.word	0x0800ac40
 8002390:	0800ac58 	.word	0x0800ac58
 8002394:	0800af04 	.word	0x0800af04
 8002398:	0800af34 	.word	0x0800af34
 800239c:	20000012 	.word	0x20000012
 80023a0:	0800af54 	.word	0x0800af54

080023a4 <motor_set_wiring>:




void motor_set_wiring(void){
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0

}
 80023a8:	bf00      	nop
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bc80      	pop	{r7}
 80023ae:	4770      	bx	lr

080023b0 <motor_set_pwm_freq>:

void motor_set_pwm_freq(void){
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0

}
 80023b4:	bf00      	nop
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr

080023bc <motor_reset_stats>:

void motor_reset_stats(void){
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0

}
 80023c0:	bf00      	nop
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bc80      	pop	{r7}
 80023c6:	4770      	bx	lr

080023c8 <motor_read_parameters>:

void motor_read_parameters(void){
 80023c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ca:	b093      	sub	sp, #76	@ 0x4c
 80023cc:	af06      	add	r7, sp, #24
	// read motor parameters from eeprom
	motor_t tempMotor;
	eeprom_read_nbytes(M_RUNTIME2B, sizeof(tempMotor.runTime), &tempMotor.runTime);
 80023ce:	1d3b      	adds	r3, r7, #4
 80023d0:	461a      	mov	r2, r3
 80023d2:	2102      	movs	r1, #2
 80023d4:	2008      	movs	r0, #8
 80023d6:	f001 f864 	bl	80034a2 <eeprom_read_nbytes>
	eeprom_read_nbytes(M_SAMPLEPERIOD2B, sizeof(tempMotor.samplePeriod), &tempMotor.samplePeriod);
 80023da:	1d3b      	adds	r3, r7, #4
 80023dc:	3302      	adds	r3, #2
 80023de:	461a      	mov	r2, r3
 80023e0:	2102      	movs	r1, #2
 80023e2:	200c      	movs	r0, #12
 80023e4:	f001 f85d 	bl	80034a2 <eeprom_read_nbytes>
	eeprom_read_nbytes(M_PWM_FREQ2B, sizeof(tempMotor.pwmFreq), &tempMotor.pwmFreq);
 80023e8:	1d3b      	adds	r3, r7, #4
 80023ea:	3304      	adds	r3, #4
 80023ec:	461a      	mov	r2, r3
 80023ee:	2102      	movs	r1, #2
 80023f0:	200a      	movs	r0, #10
 80023f2:	f001 f856 	bl	80034a2 <eeprom_read_nbytes>
	eeprom_read_nbytes(M_WIRING1B, sizeof(tempMotor.wiring), &tempMotor.wiring);
 80023f6:	1d3b      	adds	r3, r7, #4
 80023f8:	3306      	adds	r3, #6
 80023fa:	461a      	mov	r2, r3
 80023fc:	2101      	movs	r1, #1
 80023fe:	200e      	movs	r0, #14
 8002400:	f001 f84f 	bl	80034a2 <eeprom_read_nbytes>

	// check values are within range or use defaults {flag = 'N'}
	char rtFlag = 'Y', spFlag = 'Y', pfFlag = 'Y', wFlag = 'Y'; // using default values?
 8002404:	2359      	movs	r3, #89	@ 0x59
 8002406:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800240a:	2359      	movs	r3, #89	@ 0x59
 800240c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8002410:	2359      	movs	r3, #89	@ 0x59
 8002412:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8002416:	2359      	movs	r3, #89	@ 0x59
 8002418:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	if(tempMotor.runTime >= MOTOR_RUNTIME_MIN && tempMotor.runTime <= MOTOR_RUNTIME_MAX){
 800241c:	88bb      	ldrh	r3, [r7, #4]
 800241e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002422:	d30a      	bcc.n	800243a <motor_read_parameters+0x72>
 8002424:	88bb      	ldrh	r3, [r7, #4]
 8002426:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800242a:	4293      	cmp	r3, r2
 800242c:	d805      	bhi.n	800243a <motor_read_parameters+0x72>
		motor.runTime = tempMotor.runTime;
 800242e:	88ba      	ldrh	r2, [r7, #4]
 8002430:	4b29      	ldr	r3, [pc, #164]	@ (80024d8 <motor_read_parameters+0x110>)
 8002432:	801a      	strh	r2, [r3, #0]
		rtFlag = 'N';
 8002434:	234e      	movs	r3, #78	@ 0x4e
 8002436:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	}
	if(tempMotor.samplePeriod >= MOTOR_SAMPLE_PERIOD_MIN && tempMotor.samplePeriod <= MOTOR_SAMPLE_PERIOD_MAX && tempMotor.samplePeriod <= motor.runTime){
 800243a:	88fb      	ldrh	r3, [r7, #6]
 800243c:	2b63      	cmp	r3, #99	@ 0x63
 800243e:	d90e      	bls.n	800245e <motor_read_parameters+0x96>
 8002440:	88fb      	ldrh	r3, [r7, #6]
 8002442:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002446:	d80a      	bhi.n	800245e <motor_read_parameters+0x96>
 8002448:	88fa      	ldrh	r2, [r7, #6]
 800244a:	4b23      	ldr	r3, [pc, #140]	@ (80024d8 <motor_read_parameters+0x110>)
 800244c:	881b      	ldrh	r3, [r3, #0]
 800244e:	429a      	cmp	r2, r3
 8002450:	d805      	bhi.n	800245e <motor_read_parameters+0x96>
		motor.samplePeriod = tempMotor.samplePeriod;
 8002452:	88fa      	ldrh	r2, [r7, #6]
 8002454:	4b20      	ldr	r3, [pc, #128]	@ (80024d8 <motor_read_parameters+0x110>)
 8002456:	805a      	strh	r2, [r3, #2]
		spFlag = 'N';
 8002458:	234e      	movs	r3, #78	@ 0x4e
 800245a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	}
	if(tempMotor.pwmFreq >= MOTOR_PWM_FREQ_MIN && tempMotor.pwmFreq <= MOTOR_PWM_FREQ_MAX){
 800245e:	893b      	ldrh	r3, [r7, #8]
 8002460:	2b09      	cmp	r3, #9
 8002462:	d909      	bls.n	8002478 <motor_read_parameters+0xb0>
 8002464:	893b      	ldrh	r3, [r7, #8]
 8002466:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800246a:	d805      	bhi.n	8002478 <motor_read_parameters+0xb0>
		motor.pwmFreq = tempMotor.pwmFreq;
 800246c:	893a      	ldrh	r2, [r7, #8]
 800246e:	4b1a      	ldr	r3, [pc, #104]	@ (80024d8 <motor_read_parameters+0x110>)
 8002470:	809a      	strh	r2, [r3, #4]
		pfFlag = 'N';
 8002472:	234e      	movs	r3, #78	@ 0x4e
 8002474:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	}
	if(tempMotor.wiring == 0 || tempMotor.wiring == 1){
 8002478:	7abb      	ldrb	r3, [r7, #10]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d002      	beq.n	8002484 <motor_read_parameters+0xbc>
 800247e:	7abb      	ldrb	r3, [r7, #10]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d105      	bne.n	8002490 <motor_read_parameters+0xc8>
		motor.wiring = tempMotor.wiring;
 8002484:	7aba      	ldrb	r2, [r7, #10]
 8002486:	4b14      	ldr	r3, [pc, #80]	@ (80024d8 <motor_read_parameters+0x110>)
 8002488:	719a      	strb	r2, [r3, #6]
		wFlag = 'N';
 800248a:	234e      	movs	r3, #78	@ 0x4e
 800248c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	}
	printf("\r\nDEFAULT VALUE?: {Y/N}\r\n<MOTOR> Runtime: %i ms {%c} | PWM Frequency: %i Hz {%c} | Sample Period: %i ms {%c} | Wiring: %i {%c} \r\n",
			 (int)motor.runTime, rtFlag, (int)motor.pwmFreq, spFlag, (int)motor.samplePeriod, pfFlag,  (int)motor.wiring, wFlag);
 8002490:	4b11      	ldr	r3, [pc, #68]	@ (80024d8 <motor_read_parameters+0x110>)
 8002492:	881b      	ldrh	r3, [r3, #0]
	printf("\r\nDEFAULT VALUE?: {Y/N}\r\n<MOTOR> Runtime: %i ms {%c} | PWM Frequency: %i Hz {%c} | Sample Period: %i ms {%c} | Wiring: %i {%c} \r\n",
 8002494:	461e      	mov	r6, r3
 8002496:	f897 002f 	ldrb.w	r0, [r7, #47]	@ 0x2f
			 (int)motor.runTime, rtFlag, (int)motor.pwmFreq, spFlag, (int)motor.samplePeriod, pfFlag,  (int)motor.wiring, wFlag);
 800249a:	4b0f      	ldr	r3, [pc, #60]	@ (80024d8 <motor_read_parameters+0x110>)
 800249c:	889b      	ldrh	r3, [r3, #4]
	printf("\r\nDEFAULT VALUE?: {Y/N}\r\n<MOTOR> Runtime: %i ms {%c} | PWM Frequency: %i Hz {%c} | Sample Period: %i ms {%c} | Wiring: %i {%c} \r\n",
 800249e:	469c      	mov	ip, r3
 80024a0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
			 (int)motor.runTime, rtFlag, (int)motor.pwmFreq, spFlag, (int)motor.samplePeriod, pfFlag,  (int)motor.wiring, wFlag);
 80024a4:	4a0c      	ldr	r2, [pc, #48]	@ (80024d8 <motor_read_parameters+0x110>)
 80024a6:	8852      	ldrh	r2, [r2, #2]
	printf("\r\nDEFAULT VALUE?: {Y/N}\r\n<MOTOR> Runtime: %i ms {%c} | PWM Frequency: %i Hz {%c} | Sample Period: %i ms {%c} | Wiring: %i {%c} \r\n",
 80024a8:	4614      	mov	r4, r2
 80024aa:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
			 (int)motor.runTime, rtFlag, (int)motor.pwmFreq, spFlag, (int)motor.samplePeriod, pfFlag,  (int)motor.wiring, wFlag);
 80024ae:	490a      	ldr	r1, [pc, #40]	@ (80024d8 <motor_read_parameters+0x110>)
 80024b0:	7989      	ldrb	r1, [r1, #6]
	printf("\r\nDEFAULT VALUE?: {Y/N}\r\n<MOTOR> Runtime: %i ms {%c} | PWM Frequency: %i Hz {%c} | Sample Period: %i ms {%c} | Wiring: %i {%c} \r\n",
 80024b2:	460d      	mov	r5, r1
 80024b4:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 80024b8:	9104      	str	r1, [sp, #16]
 80024ba:	9503      	str	r5, [sp, #12]
 80024bc:	9202      	str	r2, [sp, #8]
 80024be:	9401      	str	r4, [sp, #4]
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	4663      	mov	r3, ip
 80024c4:	4602      	mov	r2, r0
 80024c6:	4631      	mov	r1, r6
 80024c8:	4804      	ldr	r0, [pc, #16]	@ (80024dc <motor_read_parameters+0x114>)
 80024ca:	f006 fd05 	bl	8008ed8 <iprintf>
}
 80024ce:	bf00      	nop
 80024d0:	3734      	adds	r7, #52	@ 0x34
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024d6:	bf00      	nop
 80024d8:	20000010 	.word	0x20000010
 80024dc:	0800afc4 	.word	0x0800afc4

080024e0 <menu_help_print>:

void menu_help_print(void){
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0

}
 80024e4:	bf00      	nop
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr

080024ec <get_user_input>:


/********************************************** AUXILIAR FUNCTIONS **********************************************/

void get_user_input(char promptMsg[], char errorMsg[], uint8_t count, char checkList[], char * output){
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	603b      	str	r3, [r7, #0]
 80024f8:	4613      	mov	r3, r2
 80024fa:	71fb      	strb	r3, [r7, #7]
	//const uint8_t checkListSize = 10;
	print_inline(promptMsg);
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f000 f8d9 	bl	80026b4 <print_inline>
    for(uint8_t i = 0; i < count; i++){
 8002502:	2300      	movs	r3, #0
 8002504:	75fb      	strb	r3, [r7, #23]
 8002506:	e03d      	b.n	8002584 <get_user_input+0x98>
		while(1){
			HAL_Delay(1); // needed to debug, remove
 8002508:	2001      	movs	r0, #1
 800250a:	f001 fc2f 	bl	8003d6c <HAL_Delay>
			if(rxStatus == active){
 800250e:	4b23      	ldr	r3, [pc, #140]	@ (800259c <get_user_input+0xb0>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d1f8      	bne.n	8002508 <get_user_input+0x1c>
				rxStatus = idle;
 8002516:	4b21      	ldr	r3, [pc, #132]	@ (800259c <get_user_input+0xb0>)
 8002518:	2200      	movs	r2, #0
 800251a:	701a      	strb	r2, [r3, #0]
				print_char(rxChar);
 800251c:	4b20      	ldr	r3, [pc, #128]	@ (80025a0 <get_user_input+0xb4>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	4618      	mov	r0, r3
 8002522:	f000 f841 	bl	80025a8 <print_char>
				uint8_t checkFlag = 0;
 8002526:	2300      	movs	r3, #0
 8002528:	75bb      	strb	r3, [r7, #22]
				// check that belongs to the checkList
				for(uint8_t j = 0; j < MAX_CHECKLIST_SIZE; j++){
 800252a:	2300      	movs	r3, #0
 800252c:	757b      	strb	r3, [r7, #21]
 800252e:	e013      	b.n	8002558 <get_user_input+0x6c>
					// if there is a match, set flag, store value and break
					if(rxChar == checkList[j]){
 8002530:	7d7b      	ldrb	r3, [r7, #21]
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	4413      	add	r3, r2
 8002536:	781a      	ldrb	r2, [r3, #0]
 8002538:	4b19      	ldr	r3, [pc, #100]	@ (80025a0 <get_user_input+0xb4>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	429a      	cmp	r2, r3
 800253e:	d108      	bne.n	8002552 <get_user_input+0x66>
						checkFlag = 1;
 8002540:	2301      	movs	r3, #1
 8002542:	75bb      	strb	r3, [r7, #22]
						output[i] = rxChar;// store the value
 8002544:	7dfb      	ldrb	r3, [r7, #23]
 8002546:	6a3a      	ldr	r2, [r7, #32]
 8002548:	4413      	add	r3, r2
 800254a:	4a15      	ldr	r2, [pc, #84]	@ (80025a0 <get_user_input+0xb4>)
 800254c:	7812      	ldrb	r2, [r2, #0]
 800254e:	701a      	strb	r2, [r3, #0]
						break;
 8002550:	e005      	b.n	800255e <get_user_input+0x72>
				for(uint8_t j = 0; j < MAX_CHECKLIST_SIZE; j++){
 8002552:	7d7b      	ldrb	r3, [r7, #21]
 8002554:	3301      	adds	r3, #1
 8002556:	757b      	strb	r3, [r7, #21]
 8002558:	7d7b      	ldrb	r3, [r7, #21]
 800255a:	2b09      	cmp	r3, #9
 800255c:	d9e8      	bls.n	8002530 <get_user_input+0x44>
					}
				} // if no match, flag is 0
				if(checkFlag == 0){
 800255e:	7dbb      	ldrb	r3, [r7, #22]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d107      	bne.n	8002574 <get_user_input+0x88>
					printf(errorMsg);
 8002564:	68b8      	ldr	r0, [r7, #8]
 8002566:	f006 fcb7 	bl	8008ed8 <iprintf>
					print_inline(promptMsg);
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	f000 f8a2 	bl	80026b4 <print_inline>
					i = 0; // reinitialize counter to start over
 8002570:	2300      	movs	r3, #0
 8002572:	75fb      	strb	r3, [r7, #23]
				}
				// break while loop if value is good
				if(checkFlag == 1) break;
 8002574:	7dbb      	ldrb	r3, [r7, #22]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d000      	beq.n	800257c <get_user_input+0x90>
			HAL_Delay(1); // needed to debug, remove
 800257a:	e7c5      	b.n	8002508 <get_user_input+0x1c>
				if(checkFlag == 1) break;
 800257c:	bf00      	nop
    for(uint8_t i = 0; i < count; i++){
 800257e:	7dfb      	ldrb	r3, [r7, #23]
 8002580:	3301      	adds	r3, #1
 8002582:	75fb      	strb	r3, [r7, #23]
 8002584:	7dfa      	ldrb	r2, [r7, #23]
 8002586:	79fb      	ldrb	r3, [r7, #7]
 8002588:	429a      	cmp	r2, r3
 800258a:	d3bd      	bcc.n	8002508 <get_user_input+0x1c>
			}
		}
    }
    printf("\r\n");
 800258c:	4805      	ldr	r0, [pc, #20]	@ (80025a4 <get_user_input+0xb8>)
 800258e:	f006 fd0b 	bl	8008fa8 <puts>
}
 8002592:	bf00      	nop
 8002594:	3718      	adds	r7, #24
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	20000186 	.word	0x20000186
 80025a0:	20000189 	.word	0x20000189
 80025a4:	0800a264 	.word	0x0800a264

080025a8 <print_char>:

/* Print a single character for echo in line */
void print_char(uint8_t ch){
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, 10);
 80025b2:	1df9      	adds	r1, r7, #7
 80025b4:	230a      	movs	r3, #10
 80025b6:	2201      	movs	r2, #1
 80025b8:	4803      	ldr	r0, [pc, #12]	@ (80025c8 <print_char+0x20>)
 80025ba:	f005 fd19 	bl	8007ff0 <HAL_UART_Transmit>
}
 80025be:	bf00      	nop
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	20000224 	.word	0x20000224

080025cc <print_serial_number>:

/* Print serial number based on AL configuration saved */
void print_serial_number(void){
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
	//printf( "AL%c%s", launcher.type[0], launcher.serialNumber);
    if(launcher.configured == 'Y'){
 80025d0:	4b0e      	ldr	r3, [pc, #56]	@ (800260c <print_serial_number+0x40>)
 80025d2:	791b      	ldrb	r3, [r3, #4]
 80025d4:	2b59      	cmp	r3, #89	@ 0x59
 80025d6:	d114      	bne.n	8002602 <print_serial_number+0x36>
    	if(launcher.tubeCount == '6'){
 80025d8:	4b0c      	ldr	r3, [pc, #48]	@ (800260c <print_serial_number+0x40>)
 80025da:	785b      	ldrb	r3, [r3, #1]
 80025dc:	2b36      	cmp	r3, #54	@ 0x36
 80025de:	d106      	bne.n	80025ee <print_serial_number+0x22>
    		printf( "AL%i ", launcher.serialNumber);
 80025e0:	4b0a      	ldr	r3, [pc, #40]	@ (800260c <print_serial_number+0x40>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	4619      	mov	r1, r3
 80025e6:	480a      	ldr	r0, [pc, #40]	@ (8002610 <print_serial_number+0x44>)
 80025e8:	f006 fc76 	bl	8008ed8 <iprintf>
    		printf( "AL%c%i", launcher.type, launcher.serialNumber);
    	}
    } else {
    	printf( "AL000");
    }
}
 80025ec:	e00c      	b.n	8002608 <print_serial_number+0x3c>
    		printf( "AL%c%i", launcher.type, launcher.serialNumber);
 80025ee:	4b07      	ldr	r3, [pc, #28]	@ (800260c <print_serial_number+0x40>)
 80025f0:	789b      	ldrb	r3, [r3, #2]
 80025f2:	4619      	mov	r1, r3
 80025f4:	4b05      	ldr	r3, [pc, #20]	@ (800260c <print_serial_number+0x40>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	461a      	mov	r2, r3
 80025fa:	4806      	ldr	r0, [pc, #24]	@ (8002614 <print_serial_number+0x48>)
 80025fc:	f006 fc6c 	bl	8008ed8 <iprintf>
}
 8002600:	e002      	b.n	8002608 <print_serial_number+0x3c>
    	printf( "AL000");
 8002602:	4805      	ldr	r0, [pc, #20]	@ (8002618 <print_serial_number+0x4c>)
 8002604:	f006 fc68 	bl	8008ed8 <iprintf>
}
 8002608:	bf00      	nop
 800260a:	bd80      	pop	{r7, pc}
 800260c:	20000000 	.word	0x20000000
 8002610:	0800b048 	.word	0x0800b048
 8002614:	0800b050 	.word	0x0800b050
 8002618:	0800b058 	.word	0x0800b058

0800261c <get_decimal>:
	return isNum;
}

/* Returns the decimal digits of a float as an integer
 * Parameters: float number to retreive decimals, number of decimal digits */
uint8_t get_decimal(float value, uint8_t digits){
 800261c:	b590      	push	{r4, r7, lr}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	460b      	mov	r3, r1
 8002626:	70fb      	strb	r3, [r7, #3]
	uint8_t dec;
	uint32_t exp = 1;
 8002628:	2301      	movs	r3, #1
 800262a:	60fb      	str	r3, [r7, #12]

	for(uint8_t i = 0; i < digits ; i++){
 800262c:	2300      	movs	r3, #0
 800262e:	72fb      	strb	r3, [r7, #11]
 8002630:	e008      	b.n	8002644 <get_decimal+0x28>
		exp = exp * 10;
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	4613      	mov	r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	4413      	add	r3, r2
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < digits ; i++){
 800263e:	7afb      	ldrb	r3, [r7, #11]
 8002640:	3301      	adds	r3, #1
 8002642:	72fb      	strb	r3, [r7, #11]
 8002644:	7afa      	ldrb	r2, [r7, #11]
 8002646:	78fb      	ldrb	r3, [r7, #3]
 8002648:	429a      	cmp	r2, r3
 800264a:	d3f2      	bcc.n	8002632 <get_decimal+0x16>
	}
	dec = (value - (int)value) * exp;
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f7fe fb5f 	bl	8000d10 <__aeabi_f2iz>
 8002652:	4603      	mov	r3, r0
 8002654:	4618      	mov	r0, r3
 8002656:	f7fe fb07 	bl	8000c68 <__aeabi_i2f>
 800265a:	4603      	mov	r3, r0
 800265c:	4619      	mov	r1, r3
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7fe fa4c 	bl	8000afc <__aeabi_fsub>
 8002664:	4603      	mov	r3, r0
 8002666:	461c      	mov	r4, r3
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f7fe faf9 	bl	8000c60 <__aeabi_ui2f>
 800266e:	4603      	mov	r3, r0
 8002670:	4619      	mov	r1, r3
 8002672:	4620      	mov	r0, r4
 8002674:	f7fd fd6c 	bl	8000150 <__aeabi_fmul>
 8002678:	4603      	mov	r3, r0
 800267a:	4618      	mov	r0, r3
 800267c:	f7fe fb6e 	bl	8000d5c <__aeabi_f2uiz>
 8002680:	4603      	mov	r3, r0
 8002682:	72bb      	strb	r3, [r7, #10]
	return dec;
 8002684:	7abb      	ldrb	r3, [r7, #10]
}
 8002686:	4618      	mov	r0, r3
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	bd90      	pop	{r4, r7, pc}
	...

08002690 <multiplexer_set>:

/* Select the source of RS232
 * Parameters: select {MUX_GPS, MUX_STM32} */
void multiplexer_set(mux_t select){
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(MUX_SELECT_GPIO_Port, MUX_SELECT_Pin, select); // SET = UART-tx / RESET = Din from GPS
 800269a:	79fb      	ldrb	r3, [r7, #7]
 800269c:	461a      	mov	r2, r3
 800269e:	2104      	movs	r1, #4
 80026a0:	4803      	ldr	r0, [pc, #12]	@ (80026b0 <multiplexer_set+0x20>)
 80026a2:	f002 fd77 	bl	8005194 <HAL_GPIO_WritePin>
}
 80026a6:	bf00      	nop
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40010800 	.word	0x40010800

080026b4 <print_inline>:

/* Print line without a '\n' newline at the end
 * Use for data entry prompts or partial text inline */
void print_inline(char * text){
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
	char temp = ' ';
 80026bc:	2320      	movs	r3, #32
 80026be:	73bb      	strb	r3, [r7, #14]
	for(uint8_t i = 0; i<=255 && temp!= '\0' ; i++){
 80026c0:	2300      	movs	r3, #0
 80026c2:	73fb      	strb	r3, [r7, #15]
 80026c4:	e00e      	b.n	80026e4 <print_inline+0x30>
		temp = text[i];
 80026c6:	7bfb      	ldrb	r3, [r7, #15]
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	4413      	add	r3, r2
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	73bb      	strb	r3, [r7, #14]
		HAL_UART_Transmit(&huart1, (uint8_t *) &temp, 1, 100);
 80026d0:	f107 010e 	add.w	r1, r7, #14
 80026d4:	2364      	movs	r3, #100	@ 0x64
 80026d6:	2201      	movs	r2, #1
 80026d8:	4806      	ldr	r0, [pc, #24]	@ (80026f4 <print_inline+0x40>)
 80026da:	f005 fc89 	bl	8007ff0 <HAL_UART_Transmit>
	for(uint8_t i = 0; i<=255 && temp!= '\0' ; i++){
 80026de:	7bfb      	ldrb	r3, [r7, #15]
 80026e0:	3301      	adds	r3, #1
 80026e2:	73fb      	strb	r3, [r7, #15]
 80026e4:	7bbb      	ldrb	r3, [r7, #14]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1ed      	bne.n	80026c6 <print_inline+0x12>
	}
}
 80026ea:	bf00      	nop
 80026ec:	bf00      	nop
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	20000224 	.word	0x20000224

080026f8 <parameter_init>:



/* Initialize autolauncher parameters */
void parameter_init(void){
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
	// get parameters from eeprom or assign default values
//	launcher.configured = eeprom_read(AL_CONFIGED1B);
	eeprom_read_nbytes(AL_CONFIGED1B, sizeof(launcher.configured), &launcher.configured);
 80026fc:	4a17      	ldr	r2, [pc, #92]	@ (800275c <parameter_init+0x64>)
 80026fe:	2101      	movs	r1, #1
 8002700:	2003      	movs	r0, #3
 8002702:	f000 fece 	bl	80034a2 <eeprom_read_nbytes>
//	launcher_t al = *(launcher_t*) eeprom_read(DATA_LAUNCHER);
//	motor_t mt = *(motor_t*) eeprom_read(DATA_MOTOR);

	if(launcher.configured == 'Y'){
 8002706:	4b16      	ldr	r3, [pc, #88]	@ (8002760 <parameter_init+0x68>)
 8002708:	791b      	ldrb	r3, [r3, #4]
 800270a:	2b59      	cmp	r3, #89	@ 0x59
 800270c:	d11d      	bne.n	800274a <parameter_init+0x52>
		printf("\r\n** AL configuration found in memory **\r\n");
 800270e:	4815      	ldr	r0, [pc, #84]	@ (8002764 <parameter_init+0x6c>)
 8002710:	f006 fc4a 	bl	8008fa8 <puts>
		eeprom_read_nbytes(AL_TUBECOUNT1B, sizeof(launcher.tubeCount), &launcher.tubeCount);
 8002714:	4a14      	ldr	r2, [pc, #80]	@ (8002768 <parameter_init+0x70>)
 8002716:	2101      	movs	r1, #1
 8002718:	2000      	movs	r0, #0
 800271a:	f000 fec2 	bl	80034a2 <eeprom_read_nbytes>
		eeprom_read_nbytes(AL_TYPE1B, sizeof(launcher.type), &launcher.type);
 800271e:	4a13      	ldr	r2, [pc, #76]	@ (800276c <parameter_init+0x74>)
 8002720:	2101      	movs	r1, #1
 8002722:	2001      	movs	r0, #1
 8002724:	f000 febd 	bl	80034a2 <eeprom_read_nbytes>
		eeprom_read_nbytes(AL_SN1B, sizeof(launcher.serialNumber), &launcher.serialNumber);
 8002728:	4a0d      	ldr	r2, [pc, #52]	@ (8002760 <parameter_init+0x68>)
 800272a:	2101      	movs	r1, #1
 800272c:	2002      	movs	r0, #2
 800272e:	f000 feb8 	bl	80034a2 <eeprom_read_nbytes>
//		launcher.type = eeprom_read(AL_TYPE1B);
//		launcher.serialNumber = eeprom_read(AL_SN1B);
		// read motor runtime and assign a default value if out of range
//		uint32_t rt = eeprom_read_uint32(M_RUNTIME4B);

		printf("\r\n<AL> Tubes: %c | Type: %c | Serial: %03i <AL>\r\n", launcher.tubeCount, launcher.type, launcher.serialNumber);
 8002732:	4b0b      	ldr	r3, [pc, #44]	@ (8002760 <parameter_init+0x68>)
 8002734:	785b      	ldrb	r3, [r3, #1]
 8002736:	4619      	mov	r1, r3
 8002738:	4b09      	ldr	r3, [pc, #36]	@ (8002760 <parameter_init+0x68>)
 800273a:	789b      	ldrb	r3, [r3, #2]
 800273c:	461a      	mov	r2, r3
 800273e:	4b08      	ldr	r3, [pc, #32]	@ (8002760 <parameter_init+0x68>)
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	480b      	ldr	r0, [pc, #44]	@ (8002770 <parameter_init+0x78>)
 8002744:	f006 fbc8 	bl	8008ed8 <iprintf>
 8002748:	e002      	b.n	8002750 <parameter_init+0x58>
	} else {
		printf("\r\n** AL Configuration NOT found in memory **\r\n");
 800274a:	480a      	ldr	r0, [pc, #40]	@ (8002774 <parameter_init+0x7c>)
 800274c:	f006 fc2c 	bl	8008fa8 <puts>
//		wFlag = 'N';
//	}
//	printf("\r\nDEFAULT VALUE?: {Y/N}\r\n<MOTOR> Runtime: %i ms {%c} | PWM Frequency: %i {%c} | Sample Period: %i ms {%c} | Wiring: %i {%c} \r\n",
//			rtFlag, (int)motor.runTime, spFlag, (int)motor.pwmFreq, pfFlag, (int)motor.samplePeriod, wFlag, (int)motor.wiring);
	// read motor parameters from eeprom
	motor_read_parameters();
 8002750:	f7ff fe3a 	bl	80023c8 <motor_read_parameters>
	// Read motor stats
	motor_read_stats();
 8002754:	f7ff fc5a 	bl	800200c <motor_read_stats>
//	// print stats
//	printf("\r\n|             STEPPER MOTOR STATS             |\r\n");
//	for(uint8_t i = 0; i < 8; i++){
//		printf("| [M%i] IMAX= %03i mA, USE_COUNT= %05i |\r\n", i+1 ,(int)motor.imax[i], (int)motor.count[i]);
//	}
}
 8002758:	bf00      	nop
 800275a:	bd80      	pop	{r7, pc}
 800275c:	20000004 	.word	0x20000004
 8002760:	20000000 	.word	0x20000000
 8002764:	0800b060 	.word	0x0800b060
 8002768:	20000001 	.word	0x20000001
 800276c:	20000002 	.word	0x20000002
 8002770:	0800b08c 	.word	0x0800b08c
 8002774:	0800b0c0 	.word	0x0800b0c0

08002778 <HAL_UART_RxCpltCallback>:

/* UART Receive complete interrupt callback, set rxStatus flag for new char received
 * re-enable uart rx interrupt */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
	// check that uart1 triggered the interrupt callback
	if(huart->Instance == USART1){
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a09      	ldr	r2, [pc, #36]	@ (80027ac <HAL_UART_RxCpltCallback+0x34>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d10b      	bne.n	80027a2 <HAL_UART_RxCpltCallback+0x2a>
		rxChar = rxBuffer[0]; // store the only element in buffer to a char for easier variable handling
 800278a:	4b09      	ldr	r3, [pc, #36]	@ (80027b0 <HAL_UART_RxCpltCallback+0x38>)
 800278c:	781a      	ldrb	r2, [r3, #0]
 800278e:	4b09      	ldr	r3, [pc, #36]	@ (80027b4 <HAL_UART_RxCpltCallback+0x3c>)
 8002790:	701a      	strb	r2, [r3, #0]
		rxStatus = active; // set flag to enter main menu char processing
 8002792:	4b09      	ldr	r3, [pc, #36]	@ (80027b8 <HAL_UART_RxCpltCallback+0x40>)
 8002794:	2201      	movs	r2, #1
 8002796:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, (uint8_t *) rxBuffer, 1); // reactivate rx interrupt
 8002798:	2201      	movs	r2, #1
 800279a:	4905      	ldr	r1, [pc, #20]	@ (80027b0 <HAL_UART_RxCpltCallback+0x38>)
 800279c:	4807      	ldr	r0, [pc, #28]	@ (80027bc <HAL_UART_RxCpltCallback+0x44>)
 800279e:	f005 fd49 	bl	8008234 <HAL_UART_Receive_IT>
	}
}
 80027a2:	bf00      	nop
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40013800 	.word	0x40013800
 80027b0:	20000188 	.word	0x20000188
 80027b4:	20000189 	.word	0x20000189
 80027b8:	20000186 	.word	0x20000186
 80027bc:	20000224 	.word	0x20000224

080027c0 <HAL_ADC_ConvCpltCallback>:
//	}
//}

/* When the ADC conversion in DMA mode is complete (all samples in adc scan)
 * Then the IRQ calls this function */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
	//HAL_ADC_Stop_DMA(&hadc1);
	if(hadc->Instance == ADC1){
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a05      	ldr	r2, [pc, #20]	@ (80027e4 <HAL_ADC_ConvCpltCallback+0x24>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d102      	bne.n	80027d8 <HAL_ADC_ConvCpltCallback+0x18>
		adcComplete = 1;
 80027d2:	4b05      	ldr	r3, [pc, #20]	@ (80027e8 <HAL_ADC_ConvCpltCallback+0x28>)
 80027d4:	2201      	movs	r2, #1
 80027d6:	701a      	strb	r2, [r3, #0]
		//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);

	}
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	bc80      	pop	{r7}
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	40012400 	.word	0x40012400
 80027e8:	2000018a 	.word	0x2000018a

080027ec <uartrx_interrupt_init>:



/* Wrapper for 1st uart_rx call
 * The interrupt is enabled for rx after this function is called, and then disabled until called again */
void uartrx_interrupt_init(void){
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, (uint8_t *) rxBuffer, 1); // enable UART receive interrupt, store received char in rxChar buffer
 80027f0:	2201      	movs	r2, #1
 80027f2:	4903      	ldr	r1, [pc, #12]	@ (8002800 <uartrx_interrupt_init+0x14>)
 80027f4:	4803      	ldr	r0, [pc, #12]	@ (8002804 <uartrx_interrupt_init+0x18>)
 80027f6:	f005 fd1d 	bl	8008234 <HAL_UART_Receive_IT>
}
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	20000188 	.word	0x20000188
 8002804:	20000224 	.word	0x20000224

08002808 <unground_xbt>:

/* Disconnect the XBT ABC pins from ground
 * 3 relays can be used as ground when SET, or ground when RESET based on jumpers JP6-7-8
 * If 1-2 pads are soldered, SET relays to unground, RESET relays to ground
 * Note: reset signal 3 is tied to other relays: CAL cont & CAL res */
void unground_xbt(void){
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
	if(relayLock == reFree){
 800280c:	4b08      	ldr	r3, [pc, #32]	@ (8002830 <unground_xbt+0x28>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10b      	bne.n	800282c <unground_xbt+0x24>
		relayLock = reLocked;
 8002814:	4b06      	ldr	r3, [pc, #24]	@ (8002830 <unground_xbt+0x28>)
 8002816:	2201      	movs	r2, #1
 8002818:	701a      	strb	r2, [r3, #0]
		drive_relay(RELAY_RESET_3_GPIO_Port, RELAY_RESET_3_Pin, 10); // RESET relay k9, k10, k11, k12
 800281a:	220a      	movs	r2, #10
 800281c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002820:	4804      	ldr	r0, [pc, #16]	@ (8002834 <unground_xbt+0x2c>)
 8002822:	f000 f925 	bl	8002a70 <drive_relay>
		relayLock = reFree;
 8002826:	4b02      	ldr	r3, [pc, #8]	@ (8002830 <unground_xbt+0x28>)
 8002828:	2200      	movs	r2, #0
 800282a:	701a      	strb	r2, [r3, #0]
	}
}
 800282c:	bf00      	nop
 800282e:	bd80      	pop	{r7, pc}
 8002830:	20000185 	.word	0x20000185
 8002834:	40011000 	.word	0x40011000

08002838 <calibration_resistor>:

void calibration_resistor(void){
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
	if(relayLock == reFree){
 800283c:	4b08      	ldr	r3, [pc, #32]	@ (8002860 <calibration_resistor+0x28>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d10b      	bne.n	800285c <calibration_resistor+0x24>
		relayLock = reLocked;
 8002844:	4b06      	ldr	r3, [pc, #24]	@ (8002860 <calibration_resistor+0x28>)
 8002846:	2201      	movs	r2, #1
 8002848:	701a      	strb	r2, [r3, #0]
		drive_relay(RELAY_K12_CAL_RES_GPIO_Port, RELAY_K12_CAL_RES_Pin, RELAY_ON_TIME); // SET relay k12
 800284a:	220a      	movs	r2, #10
 800284c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002850:	4804      	ldr	r0, [pc, #16]	@ (8002864 <calibration_resistor+0x2c>)
 8002852:	f000 f90d 	bl	8002a70 <drive_relay>
		relayLock = reFree;
 8002856:	4b02      	ldr	r3, [pc, #8]	@ (8002860 <calibration_resistor+0x28>)
 8002858:	2200      	movs	r2, #0
 800285a:	701a      	strb	r2, [r3, #0]
	}
}
 800285c:	bf00      	nop
 800285e:	bd80      	pop	{r7, pc}
 8002860:	20000185 	.word	0x20000185
 8002864:	40010800 	.word	0x40010800

08002868 <calibrate_on>:

void calibrate_on(void){
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
	if(relayLock == reFree){
 800286c:	4b08      	ldr	r3, [pc, #32]	@ (8002890 <calibrate_on+0x28>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d10b      	bne.n	800288c <calibrate_on+0x24>
		relayLock = reLocked;
 8002874:	4b06      	ldr	r3, [pc, #24]	@ (8002890 <calibrate_on+0x28>)
 8002876:	2201      	movs	r2, #1
 8002878:	701a      	strb	r2, [r3, #0]
		drive_relay(RELAY_K11_CAL_CONT_GPIO_Port, RELAY_K11_CAL_CONT_Pin, RELAY_ON_TIME); // SET relay k11
 800287a:	220a      	movs	r2, #10
 800287c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002880:	4804      	ldr	r0, [pc, #16]	@ (8002894 <calibrate_on+0x2c>)
 8002882:	f000 f8f5 	bl	8002a70 <drive_relay>
		relayLock = reFree;
 8002886:	4b02      	ldr	r3, [pc, #8]	@ (8002890 <calibrate_on+0x28>)
 8002888:	2200      	movs	r2, #0
 800288a:	701a      	strb	r2, [r3, #0]
	}
}
 800288c:	bf00      	nop
 800288e:	bd80      	pop	{r7, pc}
 8002890:	20000185 	.word	0x20000185
 8002894:	40010800 	.word	0x40010800

08002898 <reset_relay>:

void reset_relay(void){
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
	if(relayLock == reFree){
 800289c:	4b11      	ldr	r3, [pc, #68]	@ (80028e4 <reset_relay+0x4c>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d11d      	bne.n	80028e0 <reset_relay+0x48>
		relayLock = reLocked;
 80028a4:	4b0f      	ldr	r3, [pc, #60]	@ (80028e4 <reset_relay+0x4c>)
 80028a6:	2201      	movs	r2, #1
 80028a8:	701a      	strb	r2, [r3, #0]
		drive_relay(RELAY_RESET_1_GPIO_Port, RELAY_RESET_1_Pin, RELAY_ON_TIME); // RESET relay k1, k2, k3, k4, SSR1, SSR2, SSR3, SSR4
 80028aa:	220a      	movs	r2, #10
 80028ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80028b0:	480d      	ldr	r0, [pc, #52]	@ (80028e8 <reset_relay+0x50>)
 80028b2:	f000 f8dd 	bl	8002a70 <drive_relay>
		HAL_Delay(RELAY_INTERVAL_TIME);
 80028b6:	200a      	movs	r0, #10
 80028b8:	f001 fa58 	bl	8003d6c <HAL_Delay>
		drive_relay(RELAY_RESET_2_GPIO_Port, RELAY_RESET_2_Pin, RELAY_ON_TIME); // RESET relay k5, k6, k7, k8, SSR5, SSR6, SSR7, SSR8
 80028bc:	220a      	movs	r2, #10
 80028be:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80028c2:	480a      	ldr	r0, [pc, #40]	@ (80028ec <reset_relay+0x54>)
 80028c4:	f000 f8d4 	bl	8002a70 <drive_relay>
		HAL_Delay(RELAY_INTERVAL_TIME);
 80028c8:	200a      	movs	r0, #10
 80028ca:	f001 fa4f 	bl	8003d6c <HAL_Delay>
		drive_relay(RELAY_RESET_3_GPIO_Port, RELAY_RESET_3_Pin, RELAY_ON_TIME); // RESET relay k9, k10, k11, k12 - This grounds ABC
 80028ce:	220a      	movs	r2, #10
 80028d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80028d4:	4805      	ldr	r0, [pc, #20]	@ (80028ec <reset_relay+0x54>)
 80028d6:	f000 f8cb 	bl	8002a70 <drive_relay>
		relayLock = reFree;
 80028da:	4b02      	ldr	r3, [pc, #8]	@ (80028e4 <reset_relay+0x4c>)
 80028dc:	2200      	movs	r2, #0
 80028de:	701a      	strb	r2, [r3, #0]
	}
}
 80028e0:	bf00      	nop
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	20000185 	.word	0x20000185
 80028e8:	40010c00 	.word	0x40010c00
 80028ec:	40011000 	.word	0x40011000

080028f0 <connect_xbt_pin>:

void connect_xbt_pin(uint8_t xbtNum){
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	4603      	mov	r3, r0
 80028f8:	71fb      	strb	r3, [r7, #7]

	if(relayLock == reFree){
 80028fa:	4b47      	ldr	r3, [pc, #284]	@ (8002a18 <connect_xbt_pin+0x128>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f040 8085 	bne.w	8002a0e <connect_xbt_pin+0x11e>
		relayLock = reLocked;
 8002904:	4b44      	ldr	r3, [pc, #272]	@ (8002a18 <connect_xbt_pin+0x128>)
 8002906:	2201      	movs	r2, #1
 8002908:	701a      	strb	r2, [r3, #0]

		switch (xbtNum){
 800290a:	79fb      	ldrb	r3, [r7, #7]
 800290c:	3b01      	subs	r3, #1
 800290e:	2b07      	cmp	r3, #7
 8002910:	d874      	bhi.n	80029fc <connect_xbt_pin+0x10c>
 8002912:	a201      	add	r2, pc, #4	@ (adr r2, 8002918 <connect_xbt_pin+0x28>)
 8002914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002918:	08002939 	.word	0x08002939
 800291c:	08002953 	.word	0x08002953
 8002920:	0800296d 	.word	0x0800296d
 8002924:	08002985 	.word	0x08002985
 8002928:	0800299d 	.word	0x0800299d
 800292c:	080029b3 	.word	0x080029b3
 8002930:	080029c9 	.word	0x080029c9
 8002934:	080029e3 	.word	0x080029e3
		case 1:
			drive_relay(RELAY_K1_GPIO_Port, RELAY_K1_Pin, RELAY_ON_TIME); // SET relay k1
 8002938:	220a      	movs	r2, #10
 800293a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800293e:	4837      	ldr	r0, [pc, #220]	@ (8002a1c <connect_xbt_pin+0x12c>)
 8002940:	f000 f896 	bl	8002a70 <drive_relay>
			drive_relay(SSR_1_GPIO_Port, SSR_1_Pin, 1); // SET SSR1
 8002944:	2201      	movs	r2, #1
 8002946:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800294a:	4834      	ldr	r0, [pc, #208]	@ (8002a1c <connect_xbt_pin+0x12c>)
 800294c:	f000 f890 	bl	8002a70 <drive_relay>
			break;
 8002950:	e05a      	b.n	8002a08 <connect_xbt_pin+0x118>
		case 2:
			drive_relay(RELAY_K2_GPIO_Port, RELAY_K2_Pin, RELAY_ON_TIME); // SET relay k2
 8002952:	220a      	movs	r2, #10
 8002954:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002958:	4830      	ldr	r0, [pc, #192]	@ (8002a1c <connect_xbt_pin+0x12c>)
 800295a:	f000 f889 	bl	8002a70 <drive_relay>
			drive_relay(SSR_2_GPIO_Port, SSR_2_Pin, 1); // SET SSR2
 800295e:	2201      	movs	r2, #1
 8002960:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002964:	482d      	ldr	r0, [pc, #180]	@ (8002a1c <connect_xbt_pin+0x12c>)
 8002966:	f000 f883 	bl	8002a70 <drive_relay>
			break;
 800296a:	e04d      	b.n	8002a08 <connect_xbt_pin+0x118>
		case 3:
			drive_relay(RELAY_K3_GPIO_Port, RELAY_K3_Pin, RELAY_ON_TIME); // SET relay k3
 800296c:	220a      	movs	r2, #10
 800296e:	2104      	movs	r1, #4
 8002970:	482b      	ldr	r0, [pc, #172]	@ (8002a20 <connect_xbt_pin+0x130>)
 8002972:	f000 f87d 	bl	8002a70 <drive_relay>
			drive_relay(SSR_3_GPIO_Port, SSR_3_Pin, 1); // SET SSR3
 8002976:	2201      	movs	r2, #1
 8002978:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800297c:	4827      	ldr	r0, [pc, #156]	@ (8002a1c <connect_xbt_pin+0x12c>)
 800297e:	f000 f877 	bl	8002a70 <drive_relay>
			break;
 8002982:	e041      	b.n	8002a08 <connect_xbt_pin+0x118>
		case 4:
			drive_relay(RELAY_K4_GPIO_Port, RELAY_K4_Pin, RELAY_ON_TIME); // SET relay k4
 8002984:	220a      	movs	r2, #10
 8002986:	2108      	movs	r1, #8
 8002988:	4826      	ldr	r0, [pc, #152]	@ (8002a24 <connect_xbt_pin+0x134>)
 800298a:	f000 f871 	bl	8002a70 <drive_relay>
			drive_relay(SSR_4_GPIO_Port, SSR_4_Pin, 1); // SET SSR4
 800298e:	2201      	movs	r2, #1
 8002990:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002994:	4823      	ldr	r0, [pc, #140]	@ (8002a24 <connect_xbt_pin+0x134>)
 8002996:	f000 f86b 	bl	8002a70 <drive_relay>
			break;
 800299a:	e035      	b.n	8002a08 <connect_xbt_pin+0x118>
		case 5:
			drive_relay(RELAY_K5_GPIO_Port, RELAY_K5_Pin, RELAY_ON_TIME); // SET relay k5
 800299c:	220a      	movs	r2, #10
 800299e:	2110      	movs	r1, #16
 80029a0:	4820      	ldr	r0, [pc, #128]	@ (8002a24 <connect_xbt_pin+0x134>)
 80029a2:	f000 f865 	bl	8002a70 <drive_relay>
			drive_relay(SSR_5_GPIO_Port, SSR_5_Pin, 1); // SET SSR5
 80029a6:	2201      	movs	r2, #1
 80029a8:	2180      	movs	r1, #128	@ 0x80
 80029aa:	481c      	ldr	r0, [pc, #112]	@ (8002a1c <connect_xbt_pin+0x12c>)
 80029ac:	f000 f860 	bl	8002a70 <drive_relay>
			break;
 80029b0:	e02a      	b.n	8002a08 <connect_xbt_pin+0x118>
		case 6:
			drive_relay(RELAY_K6_GPIO_Port, RELAY_K6_Pin, RELAY_ON_TIME); // SET relay k6
 80029b2:	220a      	movs	r2, #10
 80029b4:	2120      	movs	r1, #32
 80029b6:	481b      	ldr	r0, [pc, #108]	@ (8002a24 <connect_xbt_pin+0x134>)
 80029b8:	f000 f85a 	bl	8002a70 <drive_relay>
			drive_relay(SSR_6_GPIO_Port, SSR_6_Pin, 1); // SET SSR6
 80029bc:	2201      	movs	r2, #1
 80029be:	2140      	movs	r1, #64	@ 0x40
 80029c0:	4816      	ldr	r0, [pc, #88]	@ (8002a1c <connect_xbt_pin+0x12c>)
 80029c2:	f000 f855 	bl	8002a70 <drive_relay>
			break;
 80029c6:	e01f      	b.n	8002a08 <connect_xbt_pin+0x118>
		case 7:
			drive_relay(RELAY_K7_GPIO_Port, RELAY_K7_Pin, RELAY_ON_TIME); // SET relay k7
 80029c8:	220a      	movs	r2, #10
 80029ca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80029ce:	4813      	ldr	r0, [pc, #76]	@ (8002a1c <connect_xbt_pin+0x12c>)
 80029d0:	f000 f84e 	bl	8002a70 <drive_relay>
			drive_relay(SSR_7_GPIO_Port, SSR_7_Pin, 1); // SET SSR7
 80029d4:	2201      	movs	r2, #1
 80029d6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80029da:	4812      	ldr	r0, [pc, #72]	@ (8002a24 <connect_xbt_pin+0x134>)
 80029dc:	f000 f848 	bl	8002a70 <drive_relay>
			break;
 80029e0:	e012      	b.n	8002a08 <connect_xbt_pin+0x118>
		case 8:
			drive_relay(RELAY_K8_GPIO_Port, RELAY_K8_Pin, RELAY_ON_TIME); // SET relay k8
 80029e2:	220a      	movs	r2, #10
 80029e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80029e8:	480f      	ldr	r0, [pc, #60]	@ (8002a28 <connect_xbt_pin+0x138>)
 80029ea:	f000 f841 	bl	8002a70 <drive_relay>
			drive_relay(SSR_8_GPIO_Port, SSR_8_Pin, 1); // SET SSR8
 80029ee:	2201      	movs	r2, #1
 80029f0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80029f4:	480b      	ldr	r0, [pc, #44]	@ (8002a24 <connect_xbt_pin+0x134>)
 80029f6:	f000 f83b 	bl	8002a70 <drive_relay>
			break;
 80029fa:	e005      	b.n	8002a08 <connect_xbt_pin+0x118>
		default:
			printf("\r\n* ERROR: XBT %i relay not found *\r\n", xbtNum);
 80029fc:	79fb      	ldrb	r3, [r7, #7]
 80029fe:	4619      	mov	r1, r3
 8002a00:	480a      	ldr	r0, [pc, #40]	@ (8002a2c <connect_xbt_pin+0x13c>)
 8002a02:	f006 fa69 	bl	8008ed8 <iprintf>
			break;
 8002a06:	bf00      	nop
		}
		relayLock = reFree;
 8002a08:	4b03      	ldr	r3, [pc, #12]	@ (8002a18 <connect_xbt_pin+0x128>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	701a      	strb	r2, [r3, #0]
	}
}
 8002a0e:	bf00      	nop
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	20000185 	.word	0x20000185
 8002a1c:	40011000 	.word	0x40011000
 8002a20:	40011400 	.word	0x40011400
 8002a24:	40010c00 	.word	0x40010c00
 8002a28:	40010800 	.word	0x40010800
 8002a2c:	0800b0f0 	.word	0x0800b0f0

08002a30 <relay_init>:

void relay_init(void){
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
	drive_relay(RELAY_RESET_1_GPIO_Port, RELAY_RESET_1_Pin, RELAY_ON_TIME);  // RESET relay k1, k2, k3, k4, SSR1, SSR2, SSR3, SSR4
 8002a34:	220a      	movs	r2, #10
 8002a36:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a3a:	480b      	ldr	r0, [pc, #44]	@ (8002a68 <relay_init+0x38>)
 8002a3c:	f000 f818 	bl	8002a70 <drive_relay>
	HAL_Delay(RELAY_INTERVAL_TIME);
 8002a40:	200a      	movs	r0, #10
 8002a42:	f001 f993 	bl	8003d6c <HAL_Delay>
	drive_relay(RELAY_RESET_2_GPIO_Port, RELAY_RESET_2_Pin, RELAY_ON_TIME); // RESET relay k5, k6, k7, k8, SSR5, SSR6, SSR7, SSR8
 8002a46:	220a      	movs	r2, #10
 8002a48:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002a4c:	4807      	ldr	r0, [pc, #28]	@ (8002a6c <relay_init+0x3c>)
 8002a4e:	f000 f80f 	bl	8002a70 <drive_relay>
	HAL_Delay(RELAY_INTERVAL_TIME);
 8002a52:	200a      	movs	r0, #10
 8002a54:	f001 f98a 	bl	8003d6c <HAL_Delay>
	drive_relay(RELAY_RESET_3_GPIO_Port, RELAY_RESET_3_Pin, RELAY_ON_TIME); // RESET relay k9, k10, k11, k12 (GND, calibration and continuity circuit)
 8002a58:	220a      	movs	r2, #10
 8002a5a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a5e:	4803      	ldr	r0, [pc, #12]	@ (8002a6c <relay_init+0x3c>)
 8002a60:	f000 f806 	bl	8002a70 <drive_relay>
}
 8002a64:	bf00      	nop
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40010c00 	.word	0x40010c00
 8002a6c:	40011000 	.word	0x40011000

08002a70 <drive_relay>:


void drive_relay(GPIO_TypeDef * relayPort, uint16_t relayPin, uint8_t onTime){
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	460b      	mov	r3, r1
 8002a7a:	807b      	strh	r3, [r7, #2]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	707b      	strb	r3, [r7, #1]
	// SET relay k
	HAL_GPIO_WritePin(relayPort, relayPin, SET); // set
 8002a80:	887b      	ldrh	r3, [r7, #2]
 8002a82:	2201      	movs	r2, #1
 8002a84:	4619      	mov	r1, r3
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f002 fb84 	bl	8005194 <HAL_GPIO_WritePin>
	HAL_Delay(onTime); // time coil is driven in ms
 8002a8c:	787b      	ldrb	r3, [r7, #1]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f001 f96c 	bl	8003d6c <HAL_Delay>
	HAL_GPIO_WritePin(relayPort, relayPin, RESET); // release
 8002a94:	887b      	ldrh	r3, [r7, #2]
 8002a96:	2200      	movs	r2, #0
 8002a98:	4619      	mov	r1, r3
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f002 fb7a 	bl	8005194 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8002aa0:	2002      	movs	r0, #2
 8002aa2:	f001 f963 	bl	8003d6c <HAL_Delay>
}
 8002aa6:	bf00      	nop
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
	...

08002ab0 <extend_all_pins>:

// ALV2 (previous firmware) had a sequence with 4 delays of 8 ms, repeated in 300 steps = 4 * 8 ms * 300 = 7200 ms

/* Extend all pins up to countLimit or eeprom.tubes, whichever is smaller
 * Parameter: countLimit, extend all pins up to this number */
void extend_all_pins(uint8_t countLimit){
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	71fb      	strb	r3, [r7, #7]
	if(countLimit > 0){
 8002aba:	79fb      	ldrb	r3, [r7, #7]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d012      	beq.n	8002ae6 <extend_all_pins+0x36>
		for(uint8_t i = 1; (i <= countLimit) && (i <= launcher.tubeCount); i++){
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	73fb      	strb	r3, [r7, #15]
 8002ac4:	e006      	b.n	8002ad4 <extend_all_pins+0x24>
			extend_pin(i);
 8002ac6:	7bfb      	ldrb	r3, [r7, #15]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f000 f835 	bl	8002b38 <extend_pin>
		for(uint8_t i = 1; (i <= countLimit) && (i <= launcher.tubeCount); i++){
 8002ace:	7bfb      	ldrb	r3, [r7, #15]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	73fb      	strb	r3, [r7, #15]
 8002ad4:	7bfa      	ldrb	r2, [r7, #15]
 8002ad6:	79fb      	ldrb	r3, [r7, #7]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d804      	bhi.n	8002ae6 <extend_all_pins+0x36>
 8002adc:	4b04      	ldr	r3, [pc, #16]	@ (8002af0 <extend_all_pins+0x40>)
 8002ade:	785b      	ldrb	r3, [r3, #1]
 8002ae0:	7bfa      	ldrb	r2, [r7, #15]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d9ef      	bls.n	8002ac6 <extend_all_pins+0x16>
		}
	}
}
 8002ae6:	bf00      	nop
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	20000000 	.word	0x20000000

08002af4 <retract_all_pins>:

/* Retract all pins up to countLimit or eeprom.tubes, whichever is smaller
 * Parameter: countLimit, retract all pins up to this number */
void retract_all_pins(uint8_t countLimit){
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	4603      	mov	r3, r0
 8002afc:	71fb      	strb	r3, [r7, #7]
	if(countLimit > 0){
 8002afe:	79fb      	ldrb	r3, [r7, #7]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d012      	beq.n	8002b2a <retract_all_pins+0x36>
		for(uint8_t i = 1; (i <= countLimit) && (i <= launcher.tubeCount); i++){
 8002b04:	2301      	movs	r3, #1
 8002b06:	73fb      	strb	r3, [r7, #15]
 8002b08:	e006      	b.n	8002b18 <retract_all_pins+0x24>
			retract_pin(i);
 8002b0a:	7bfb      	ldrb	r3, [r7, #15]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f000 f82d 	bl	8002b6c <retract_pin>
		for(uint8_t i = 1; (i <= countLimit) && (i <= launcher.tubeCount); i++){
 8002b12:	7bfb      	ldrb	r3, [r7, #15]
 8002b14:	3301      	adds	r3, #1
 8002b16:	73fb      	strb	r3, [r7, #15]
 8002b18:	7bfa      	ldrb	r2, [r7, #15]
 8002b1a:	79fb      	ldrb	r3, [r7, #7]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d804      	bhi.n	8002b2a <retract_all_pins+0x36>
 8002b20:	4b04      	ldr	r3, [pc, #16]	@ (8002b34 <retract_all_pins+0x40>)
 8002b22:	785b      	ldrb	r3, [r3, #1]
 8002b24:	7bfa      	ldrb	r2, [r7, #15]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d9ef      	bls.n	8002b0a <retract_all_pins+0x16>
		}
	}
}
 8002b2a:	bf00      	nop
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	20000000 	.word	0x20000000

08002b38 <extend_pin>:


/* Extend pin wrapper
 * Parameter: xbtNum [1-8] */
void extend_pin(uint8_t xbtNum){
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	4603      	mov	r3, r0
 8002b40:	71fb      	strb	r3, [r7, #7]
	if (motor.wiring == 0){ // select spin direction based on wiring
 8002b42:	4b09      	ldr	r3, [pc, #36]	@ (8002b68 <extend_pin+0x30>)
 8002b44:	799b      	ldrb	r3, [r3, #6]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d105      	bne.n	8002b56 <extend_pin+0x1e>
		motor_select(xbtNum, CW);
 8002b4a:	79fb      	ldrb	r3, [r7, #7]
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f000 f826 	bl	8002ba0 <motor_select>
	} else {
		motor_select(xbtNum, CCW);
	}
}
 8002b54:	e004      	b.n	8002b60 <extend_pin+0x28>
		motor_select(xbtNum, CCW);
 8002b56:	79fb      	ldrb	r3, [r7, #7]
 8002b58:	2100      	movs	r1, #0
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f000 f820 	bl	8002ba0 <motor_select>
}
 8002b60:	bf00      	nop
 8002b62:	3708      	adds	r7, #8
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	20000010 	.word	0x20000010

08002b6c <retract_pin>:

/* Retract pin wrapper
 * Parameter: xbtNum [1-8] */
void retract_pin(uint8_t xbtNum){
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	4603      	mov	r3, r0
 8002b74:	71fb      	strb	r3, [r7, #7]
	if (motor.wiring == 0){ // select spin direction based on wiring
 8002b76:	4b09      	ldr	r3, [pc, #36]	@ (8002b9c <retract_pin+0x30>)
 8002b78:	799b      	ldrb	r3, [r3, #6]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d105      	bne.n	8002b8a <retract_pin+0x1e>
		motor_select(xbtNum, CCW);
 8002b7e:	79fb      	ldrb	r3, [r7, #7]
 8002b80:	2100      	movs	r1, #0
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 f80c 	bl	8002ba0 <motor_select>
	} else {
		motor_select(xbtNum, CW);
	}
}
 8002b88:	e004      	b.n	8002b94 <retract_pin+0x28>
		motor_select(xbtNum, CW);
 8002b8a:	79fb      	ldrb	r3, [r7, #7]
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f000 f806 	bl	8002ba0 <motor_select>
}
 8002b94:	bf00      	nop
 8002b96:	3708      	adds	r7, #8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	20000010 	.word	0x20000010

08002ba0 <motor_select>:

/* Motor driver selector
 * direction to retract/extend may be different based on wiring
 * Parameters: XBT number, direction {CW,CCW} */
void motor_select(uint8_t xbtNum, motorDir_t dir){
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	460a      	mov	r2, r1
 8002baa:	71fb      	strb	r3, [r7, #7]
 8002bac:	4613      	mov	r3, r2
 8002bae:	71bb      	strb	r3, [r7, #6]
	uint16_t rtime = motor.runTime;
 8002bb0:	4b4b      	ldr	r3, [pc, #300]	@ (8002ce0 <motor_select+0x140>)
 8002bb2:	881b      	ldrh	r3, [r3, #0]
 8002bb4:	81fb      	strh	r3, [r7, #14]
	uint16_t imax = 0;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	81bb      	strh	r3, [r7, #12]

	if((motor.runTime < MOTOR_RUNTIME_MIN) || (motor.runTime > MOTOR_RUNTIME_MAX)){
 8002bba:	4b49      	ldr	r3, [pc, #292]	@ (8002ce0 <motor_select+0x140>)
 8002bbc:	881b      	ldrh	r3, [r3, #0]
 8002bbe:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002bc2:	d305      	bcc.n	8002bd0 <motor_select+0x30>
 8002bc4:	4b46      	ldr	r3, [pc, #280]	@ (8002ce0 <motor_select+0x140>)
 8002bc6:	881b      	ldrh	r3, [r3, #0]
 8002bc8:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d902      	bls.n	8002bd6 <motor_select+0x36>
		rtime = MOTOR_RUNTIME_DEFAULT; // run with default runtime
 8002bd0:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002bd4:	81fb      	strh	r3, [r7, #14]
	}

	if(motorLock == mFree){
 8002bd6:	4b43      	ldr	r3, [pc, #268]	@ (8002ce4 <motor_select+0x144>)
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d17b      	bne.n	8002cd6 <motor_select+0x136>
		motorLock = mLocked;
 8002bde:	4b41      	ldr	r3, [pc, #260]	@ (8002ce4 <motor_select+0x144>)
 8002be0:	2201      	movs	r2, #1
 8002be2:	701a      	strb	r2, [r3, #0]
		switch (xbtNum){
 8002be4:	79fb      	ldrb	r3, [r7, #7]
 8002be6:	3b01      	subs	r3, #1
 8002be8:	2b07      	cmp	r3, #7
 8002bea:	d85b      	bhi.n	8002ca4 <motor_select+0x104>
 8002bec:	a201      	add	r2, pc, #4	@ (adr r2, 8002bf4 <motor_select+0x54>)
 8002bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf2:	bf00      	nop
 8002bf4:	08002c15 	.word	0x08002c15
 8002bf8:	08002c27 	.word	0x08002c27
 8002bfc:	08002c39 	.word	0x08002c39
 8002c00:	08002c4b 	.word	0x08002c4b
 8002c04:	08002c5d 	.word	0x08002c5d
 8002c08:	08002c6f 	.word	0x08002c6f
 8002c0c:	08002c81 	.word	0x08002c81
 8002c10:	08002c93 	.word	0x08002c93
		case 1:
			imax = motor_drive(ENABLE_M1_GPIO_Port, ENABLE_M1_Pin, dir, rtime);
 8002c14:	89fb      	ldrh	r3, [r7, #14]
 8002c16:	79ba      	ldrb	r2, [r7, #6]
 8002c18:	2104      	movs	r1, #4
 8002c1a:	4833      	ldr	r0, [pc, #204]	@ (8002ce8 <motor_select+0x148>)
 8002c1c:	f000 f8f6 	bl	8002e0c <motor_drive>
 8002c20:	4603      	mov	r3, r0
 8002c22:	81bb      	strh	r3, [r7, #12]
			break;
 8002c24:	e044      	b.n	8002cb0 <motor_select+0x110>
		case 2:
			imax = motor_drive(ENABLE_M2_GPIO_Port, ENABLE_M2_Pin, dir, rtime);
 8002c26:	89fb      	ldrh	r3, [r7, #14]
 8002c28:	79ba      	ldrb	r2, [r7, #6]
 8002c2a:	2108      	movs	r1, #8
 8002c2c:	482e      	ldr	r0, [pc, #184]	@ (8002ce8 <motor_select+0x148>)
 8002c2e:	f000 f8ed 	bl	8002e0c <motor_drive>
 8002c32:	4603      	mov	r3, r0
 8002c34:	81bb      	strh	r3, [r7, #12]
			break;
 8002c36:	e03b      	b.n	8002cb0 <motor_select+0x110>
		case 3:
			imax = motor_drive(ENABLE_M3_GPIO_Port, ENABLE_M3_Pin, dir, rtime);
 8002c38:	89fb      	ldrh	r3, [r7, #14]
 8002c3a:	79ba      	ldrb	r2, [r7, #6]
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	482b      	ldr	r0, [pc, #172]	@ (8002cec <motor_select+0x14c>)
 8002c40:	f000 f8e4 	bl	8002e0c <motor_drive>
 8002c44:	4603      	mov	r3, r0
 8002c46:	81bb      	strh	r3, [r7, #12]
			break;
 8002c48:	e032      	b.n	8002cb0 <motor_select+0x110>
		case 4:
			imax = motor_drive(ENABLE_M4_GPIO_Port, ENABLE_M4_Pin, dir, rtime);
 8002c4a:	89fb      	ldrh	r3, [r7, #14]
 8002c4c:	79ba      	ldrb	r2, [r7, #6]
 8002c4e:	2102      	movs	r1, #2
 8002c50:	4826      	ldr	r0, [pc, #152]	@ (8002cec <motor_select+0x14c>)
 8002c52:	f000 f8db 	bl	8002e0c <motor_drive>
 8002c56:	4603      	mov	r3, r0
 8002c58:	81bb      	strh	r3, [r7, #12]
			break;
 8002c5a:	e029      	b.n	8002cb0 <motor_select+0x110>
		case 5:
			imax = motor_drive(ENABLE_M5_GPIO_Port, ENABLE_M5_Pin, dir, rtime);
 8002c5c:	89fb      	ldrh	r3, [r7, #14]
 8002c5e:	79ba      	ldrb	r2, [r7, #6]
 8002c60:	2110      	movs	r1, #16
 8002c62:	4822      	ldr	r0, [pc, #136]	@ (8002cec <motor_select+0x14c>)
 8002c64:	f000 f8d2 	bl	8002e0c <motor_drive>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	81bb      	strh	r3, [r7, #12]
			break;
 8002c6c:	e020      	b.n	8002cb0 <motor_select+0x110>
		case 6:
			imax = motor_drive(ENABLE_M6_GPIO_Port, ENABLE_M6_Pin, dir, rtime);
 8002c6e:	89fb      	ldrh	r3, [r7, #14]
 8002c70:	79ba      	ldrb	r2, [r7, #6]
 8002c72:	2120      	movs	r1, #32
 8002c74:	481d      	ldr	r0, [pc, #116]	@ (8002cec <motor_select+0x14c>)
 8002c76:	f000 f8c9 	bl	8002e0c <motor_drive>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	81bb      	strh	r3, [r7, #12]
			break;
 8002c7e:	e017      	b.n	8002cb0 <motor_select+0x110>
		case 7:
			imax = motor_drive(ENABLE_M7_GPIO_Port, ENABLE_M7_Pin, dir, rtime);
 8002c80:	89fb      	ldrh	r3, [r7, #14]
 8002c82:	79ba      	ldrb	r2, [r7, #6]
 8002c84:	2140      	movs	r1, #64	@ 0x40
 8002c86:	4819      	ldr	r0, [pc, #100]	@ (8002cec <motor_select+0x14c>)
 8002c88:	f000 f8c0 	bl	8002e0c <motor_drive>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	81bb      	strh	r3, [r7, #12]
			break;
 8002c90:	e00e      	b.n	8002cb0 <motor_select+0x110>
		case 8:
			imax = motor_drive(ENABLE_M8_GPIO_Port, ENABLE_M8_Pin, dir, rtime);
 8002c92:	89fb      	ldrh	r3, [r7, #14]
 8002c94:	79ba      	ldrb	r2, [r7, #6]
 8002c96:	2180      	movs	r1, #128	@ 0x80
 8002c98:	4814      	ldr	r0, [pc, #80]	@ (8002cec <motor_select+0x14c>)
 8002c9a:	f000 f8b7 	bl	8002e0c <motor_drive>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	81bb      	strh	r3, [r7, #12]
			break;
 8002ca2:	e005      	b.n	8002cb0 <motor_select+0x110>
		default:
			printf("\r\n* ERROR: XBT %i motor not found *\r\n", xbtNum);
 8002ca4:	79fb      	ldrb	r3, [r7, #7]
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4811      	ldr	r0, [pc, #68]	@ (8002cf0 <motor_select+0x150>)
 8002caa:	f006 f915 	bl	8008ed8 <iprintf>
			break;
 8002cae:	bf00      	nop
		}
		// release motor lock
		motorLock = mFree;
 8002cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ce4 <motor_select+0x144>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	701a      	strb	r2, [r3, #0]
		// update motor stats
		if(xbtNum >= 1 && xbtNum <= 8 ){
 8002cb6:	79fb      	ldrb	r3, [r7, #7]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00c      	beq.n	8002cd6 <motor_select+0x136>
 8002cbc:	79fb      	ldrb	r3, [r7, #7]
 8002cbe:	2b08      	cmp	r3, #8
 8002cc0:	d809      	bhi.n	8002cd6 <motor_select+0x136>
			// store use count
			motor_count_update(xbtNum);
 8002cc2:	79fb      	ldrb	r3, [r7, #7]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f000 f815 	bl	8002cf4 <motor_count_update>
			// store Imax if new max is found
			motor_imax_update(xbtNum, imax);
 8002cca:	89ba      	ldrh	r2, [r7, #12]
 8002ccc:	79fb      	ldrb	r3, [r7, #7]
 8002cce:	4611      	mov	r1, r2
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f000 f837 	bl	8002d44 <motor_imax_update>
		}
	}
}
 8002cd6:	bf00      	nop
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	20000010 	.word	0x20000010
 8002ce4:	20000184 	.word	0x20000184
 8002ce8:	40011000 	.word	0x40011000
 8002cec:	40010800 	.word	0x40010800
 8002cf0:	0800b118 	.word	0x0800b118

08002cf4 <motor_count_update>:

/* Update the stepper motor use count
 * Parameter: xbt tube used
 * Warning: The EEPROM memory locations for motor.count[i] must be cleared to 0,
 * otherwise values present from factory will be 0xFFFF (65535) */
void motor_count_update(uint8_t xbtNum){
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	71fb      	strb	r3, [r7, #7]
	motor.count[xbtNum-1]++;
 8002cfe:	79fb      	ldrb	r3, [r7, #7]
 8002d00:	3b01      	subs	r3, #1
 8002d02:	490f      	ldr	r1, [pc, #60]	@ (8002d40 <motor_count_update+0x4c>)
 8002d04:	f103 020c 	add.w	r2, r3, #12
 8002d08:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002d0c:	3201      	adds	r2, #1
 8002d0e:	b291      	uxth	r1, r2
 8002d10:	4a0b      	ldr	r2, [pc, #44]	@ (8002d40 <motor_count_update+0x4c>)
 8002d12:	330c      	adds	r3, #12
 8002d14:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	eeprom_write_nbytes(M_1COUNT2B + (xbtNum-1)*2, sizeof(motor.count[xbtNum-1]), &motor.count[xbtNum-1]);
 8002d18:	79fb      	ldrb	r3, [r7, #7]
 8002d1a:	3307      	adds	r3, #7
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	b2d8      	uxtb	r0, r3
 8002d22:	79fb      	ldrb	r3, [r7, #7]
 8002d24:	3b01      	subs	r3, #1
 8002d26:	330c      	adds	r3, #12
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	4a05      	ldr	r2, [pc, #20]	@ (8002d40 <motor_count_update+0x4c>)
 8002d2c:	4413      	add	r3, r2
 8002d2e:	461a      	mov	r2, r3
 8002d30:	2102      	movs	r1, #2
 8002d32:	f000 fb8d 	bl	8003450 <eeprom_write_nbytes>
}
 8002d36:	bf00      	nop
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	20000010 	.word	0x20000010

08002d44 <motor_imax_update>:

/* Update the maximum logged current for each stepper, if applicable
 * Warning: The EEPROM memory locations for motor.imax[i] must be cleared to 0,
 * otherwise values present from factory will be 0xFFFF (65535) >> any imax */
void motor_imax_update(uint8_t xbtNum, uint16_t imax){
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	460a      	mov	r2, r1
 8002d4e:	71fb      	strb	r3, [r7, #7]
 8002d50:	4613      	mov	r3, r2
 8002d52:	80bb      	strh	r3, [r7, #4]
	if( motor.imax[xbtNum-1] < imax){
 8002d54:	79fb      	ldrb	r3, [r7, #7]
 8002d56:	3b01      	subs	r3, #1
 8002d58:	4a10      	ldr	r2, [pc, #64]	@ (8002d9c <motor_imax_update+0x58>)
 8002d5a:	3304      	adds	r3, #4
 8002d5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d60:	88ba      	ldrh	r2, [r7, #4]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d915      	bls.n	8002d92 <motor_imax_update+0x4e>
		motor.imax[xbtNum-1] = imax;
 8002d66:	79fb      	ldrb	r3, [r7, #7]
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	490c      	ldr	r1, [pc, #48]	@ (8002d9c <motor_imax_update+0x58>)
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	88ba      	ldrh	r2, [r7, #4]
 8002d70:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		eeprom_write_nbytes(M_1MXAMP2B + (xbtNum-1)*2, sizeof(motor.imax[xbtNum-1]), &motor.imax[xbtNum-1]);
 8002d74:	79fb      	ldrb	r3, [r7, #7]
 8002d76:	330f      	adds	r3, #15
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	b2d8      	uxtb	r0, r3
 8002d7e:	79fb      	ldrb	r3, [r7, #7]
 8002d80:	3b01      	subs	r3, #1
 8002d82:	3304      	adds	r3, #4
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	4a05      	ldr	r2, [pc, #20]	@ (8002d9c <motor_imax_update+0x58>)
 8002d88:	4413      	add	r3, r2
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	2102      	movs	r1, #2
 8002d8e:	f000 fb5f 	bl	8003450 <eeprom_write_nbytes>
	}
}
 8002d92:	bf00      	nop
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	20000010 	.word	0x20000010

08002da0 <motor_init>:


void motor_init(void){
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(ENABLE_M1_GPIO_Port, ENABLE_M1_Pin, RESET); // start disabled
 8002da4:	2200      	movs	r2, #0
 8002da6:	2104      	movs	r1, #4
 8002da8:	4815      	ldr	r0, [pc, #84]	@ (8002e00 <motor_init+0x60>)
 8002daa:	f002 f9f3 	bl	8005194 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M2_GPIO_Port, ENABLE_M2_Pin, RESET); // start disabled
 8002dae:	2200      	movs	r2, #0
 8002db0:	2108      	movs	r1, #8
 8002db2:	4813      	ldr	r0, [pc, #76]	@ (8002e00 <motor_init+0x60>)
 8002db4:	f002 f9ee 	bl	8005194 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M3_GPIO_Port, ENABLE_M3_Pin, RESET); // start disabled
 8002db8:	2200      	movs	r2, #0
 8002dba:	2101      	movs	r1, #1
 8002dbc:	4811      	ldr	r0, [pc, #68]	@ (8002e04 <motor_init+0x64>)
 8002dbe:	f002 f9e9 	bl	8005194 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M4_GPIO_Port, ENABLE_M4_Pin, RESET); // start disabled
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	2102      	movs	r1, #2
 8002dc6:	480f      	ldr	r0, [pc, #60]	@ (8002e04 <motor_init+0x64>)
 8002dc8:	f002 f9e4 	bl	8005194 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M5_GPIO_Port, ENABLE_M5_Pin, RESET); // start disabled
 8002dcc:	2200      	movs	r2, #0
 8002dce:	2110      	movs	r1, #16
 8002dd0:	480c      	ldr	r0, [pc, #48]	@ (8002e04 <motor_init+0x64>)
 8002dd2:	f002 f9df 	bl	8005194 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M6_GPIO_Port, ENABLE_M6_Pin, RESET); // start disabled
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	2120      	movs	r1, #32
 8002dda:	480a      	ldr	r0, [pc, #40]	@ (8002e04 <motor_init+0x64>)
 8002ddc:	f002 f9da 	bl	8005194 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M7_GPIO_Port, ENABLE_M7_Pin, RESET); // start disabled
 8002de0:	2200      	movs	r2, #0
 8002de2:	2140      	movs	r1, #64	@ 0x40
 8002de4:	4807      	ldr	r0, [pc, #28]	@ (8002e04 <motor_init+0x64>)
 8002de6:	f002 f9d5 	bl	8005194 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M8_GPIO_Port, ENABLE_M8_Pin, RESET); // start disabled
 8002dea:	2200      	movs	r2, #0
 8002dec:	2180      	movs	r1, #128	@ 0x80
 8002dee:	4805      	ldr	r0, [pc, #20]	@ (8002e04 <motor_init+0x64>)
 8002df0:	f002 f9d0 	bl	8005194 <HAL_GPIO_WritePin>
	  // calibrate ADC
	  HAL_ADCEx_Calibration_Start(&hadc1);
 8002df4:	4804      	ldr	r0, [pc, #16]	@ (8002e08 <motor_init+0x68>)
 8002df6:	f001 fbeb 	bl	80045d0 <HAL_ADCEx_Calibration_Start>
}
 8002dfa:	bf00      	nop
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	40011000 	.word	0x40011000
 8002e04:	40010800 	.word	0x40010800
 8002e08:	200000bc 	.word	0x200000bc

08002e0c <motor_drive>:


uint16_t motor_drive(GPIO_TypeDef * motorPort, uint16_t motorPin, motorDir_t motorDirection, uint32_t runTime ){
 8002e0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002e10:	b09b      	sub	sp, #108	@ 0x6c
 8002e12:	af08      	add	r7, sp, #32
 8002e14:	61f8      	str	r0, [r7, #28]
 8002e16:	617b      	str	r3, [r7, #20]
 8002e18:	460b      	mov	r3, r1
 8002e1a:	837b      	strh	r3, [r7, #26]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	767b      	strb	r3, [r7, #25]
	uint16_t imax = 0;
 8002e20:	2300      	movs	r3, #0
 8002e22:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	uint32_t timeStart, timeNow;
	uint16_t adcSampleCount = 0;
 8002e26:	2300      	movs	r3, #0
 8002e28:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
	adcScan_t adcReading;

	// Initialize PWM
	HAL_GPIO_WritePin(motorPort, motorPin, RESET); // make sure driver pin is disabled
 8002e2c:	8b7b      	ldrh	r3, [r7, #26]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	4619      	mov	r1, r3
 8002e32:	69f8      	ldr	r0, [r7, #28]
 8002e34:	f002 f9ae 	bl	8005194 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // initialize PWM pulses for DRV8826
 8002e38:	2108      	movs	r1, #8
 8002e3a:	4859      	ldr	r0, [pc, #356]	@ (8002fa0 <motor_drive+0x194>)
 8002e3c:	f004 f81a 	bl	8006e74 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(DIR_GPIO_Port,DIR_Pin, motorDirection); // set motor direction
 8002e40:	7e7b      	ldrb	r3, [r7, #25]
 8002e42:	461a      	mov	r2, r3
 8002e44:	2110      	movs	r1, #16
 8002e46:	4857      	ldr	r0, [pc, #348]	@ (8002fa4 <motor_drive+0x198>)
 8002e48:	f002 f9a4 	bl	8005194 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motorPort, motorPin, SET); // enable driver to run motor
 8002e4c:	8b7b      	ldrh	r3, [r7, #26]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	4619      	mov	r1, r3
 8002e52:	69f8      	ldr	r0, [r7, #28]
 8002e54:	f002 f99e 	bl	8005194 <HAL_GPIO_WritePin>

	timeStart = HAL_GetTick(); // initial timer count using SysTick timer (32 bit variable uwTick incremented every 1 ms, MAX = 50 days)
 8002e58:	f000 ff7e 	bl	8003d58 <HAL_GetTick>
 8002e5c:	6438      	str	r0, [r7, #64]	@ 0x40

	// get 1 current, voltage, temp reading every 500 ms using TIM2 interrupts
	HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_4); // trigger adc conversions in DMA mode every x ms
 8002e5e:	210c      	movs	r1, #12
 8002e60:	4851      	ldr	r0, [pc, #324]	@ (8002fa8 <motor_drive+0x19c>)
 8002e62:	f004 f90d 	bl	8007080 <HAL_TIM_PWM_Start_IT>
	printf("\r\n");
 8002e66:	4851      	ldr	r0, [pc, #324]	@ (8002fac <motor_drive+0x1a0>)
 8002e68:	f006 f89e 	bl	8008fa8 <puts>

	while(1){
		// track motor runtime and break loop after desired time elapsed
		timeNow = HAL_GetTick();
 8002e6c:	f000 ff74 	bl	8003d58 <HAL_GetTick>
 8002e70:	63f8      	str	r0, [r7, #60]	@ 0x3c
		if(timeNow >= timeStart){
 8002e72:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002e74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d306      	bcc.n	8002e88 <motor_drive+0x7c>
			if((timeNow - timeStart) >= runTime) break;
 8002e7a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002e7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d807      	bhi.n	8002e96 <motor_drive+0x8a>
 8002e86:	e075      	b.n	8002f74 <motor_drive+0x168>
		} else { // if timeNow < timeStart, this only happens when uwTick ~ 2^32 (50 days) and there was an overflow
			if( (HAL_MAX_DELAY - timeStart + timeNow) >= runTime) break;
 8002e88:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002e8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d96d      	bls.n	8002f72 <motor_drive+0x166>
		}
		// check if user sent stop signal
		if(active == rxStatus){ // set to active with UART RX interrupt
 8002e96:	4b46      	ldr	r3, [pc, #280]	@ (8002fb0 <motor_drive+0x1a4>)
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d10a      	bne.n	8002eb4 <motor_drive+0xa8>
			rxStatus = idle;
 8002e9e:	4b44      	ldr	r3, [pc, #272]	@ (8002fb0 <motor_drive+0x1a4>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	701a      	strb	r2, [r3, #0]
			if(rxChar == '@'){
 8002ea4:	4b43      	ldr	r3, [pc, #268]	@ (8002fb4 <motor_drive+0x1a8>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	2b40      	cmp	r3, #64	@ 0x40
 8002eaa:	d103      	bne.n	8002eb4 <motor_drive+0xa8>
				printf("\r\n ** Motor Stopped by user! **\r\n");
 8002eac:	4842      	ldr	r0, [pc, #264]	@ (8002fb8 <motor_drive+0x1ac>)
 8002eae:	f006 f87b 	bl	8008fa8 <puts>
				break;
 8002eb2:	e05f      	b.n	8002f74 <motor_drive+0x168>
			}
		}
		if(adcTimerTrigger == 1){
 8002eb4:	4b41      	ldr	r3, [pc, #260]	@ (8002fbc <motor_drive+0x1b0>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d1d7      	bne.n	8002e6c <motor_drive+0x60>
			adcTimerTrigger = 0;
 8002ebc:	4b3f      	ldr	r3, [pc, #252]	@ (8002fbc <motor_drive+0x1b0>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	701a      	strb	r2, [r3, #0]
			adcReading = adc_get_values();
 8002ec2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 f87e 	bl	8002fc8 <adc_get_values>
			// print
			printf("<%02i> Current [AD# %i]: %i.%i mA | Voltage [AD# %i]: %i.%i V | Temperature [AD# %i]: %i.%i C\r\n", (int)adcSampleCount,
 8002ecc:	f8b7 4044 	ldrh.w	r4, [r7, #68]	@ 0x44
					 	 (int)adcReading.current.rawValue, (int)adcReading.current.realValue, get_decimal(adcReading.current.realValue, 1),
 8002ed0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
			printf("<%02i> Current [AD# %i]: %i.%i mA | Voltage [AD# %i]: %i.%i V | Temperature [AD# %i]: %i.%i C\r\n", (int)adcSampleCount,
 8002ed2:	4699      	mov	r9, r3
					 	 (int)adcReading.current.rawValue, (int)adcReading.current.realValue, get_decimal(adcReading.current.realValue, 1),
 8002ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
			printf("<%02i> Current [AD# %i]: %i.%i mA | Voltage [AD# %i]: %i.%i V | Temperature [AD# %i]: %i.%i C\r\n", (int)adcSampleCount,
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7fd ff1a 	bl	8000d10 <__aeabi_f2iz>
 8002edc:	4680      	mov	r8, r0
					 	 (int)adcReading.current.rawValue, (int)adcReading.current.realValue, get_decimal(adcReading.current.realValue, 1),
 8002ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ee0:	2101      	movs	r1, #1
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7ff fb9a 	bl	800261c <get_decimal>
 8002ee8:	4603      	mov	r3, r0
			printf("<%02i> Current [AD# %i]: %i.%i mA | Voltage [AD# %i]: %i.%i V | Temperature [AD# %i]: %i.%i C\r\n", (int)adcSampleCount,
 8002eea:	613b      	str	r3, [r7, #16]
						 (int)adcReading.voltage.rawValue, (int)adcReading.voltage.realValue, get_decimal(adcReading.voltage.realValue, 1),
 8002eec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
			printf("<%02i> Current [AD# %i]: %i.%i mA | Voltage [AD# %i]: %i.%i V | Temperature [AD# %i]: %i.%i C\r\n", (int)adcSampleCount,
 8002eee:	60fb      	str	r3, [r7, #12]
						 (int)adcReading.voltage.rawValue, (int)adcReading.voltage.realValue, get_decimal(adcReading.voltage.realValue, 1),
 8002ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
			printf("<%02i> Current [AD# %i]: %i.%i mA | Voltage [AD# %i]: %i.%i V | Temperature [AD# %i]: %i.%i C\r\n", (int)adcSampleCount,
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7fd ff0c 	bl	8000d10 <__aeabi_f2iz>
 8002ef8:	4605      	mov	r5, r0
						 (int)adcReading.voltage.rawValue, (int)adcReading.voltage.realValue, get_decimal(adcReading.voltage.realValue, 1),
 8002efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002efc:	2101      	movs	r1, #1
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7ff fb8c 	bl	800261c <get_decimal>
 8002f04:	4603      	mov	r3, r0
			printf("<%02i> Current [AD# %i]: %i.%i mA | Voltage [AD# %i]: %i.%i V | Temperature [AD# %i]: %i.%i C\r\n", (int)adcSampleCount,
 8002f06:	60bb      	str	r3, [r7, #8]
						 (int)adcReading.temperature.rawValue, (int)adcReading.temperature.realValue, get_decimal(adcReading.temperature.realValue, 1));
 8002f08:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
			printf("<%02i> Current [AD# %i]: %i.%i mA | Voltage [AD# %i]: %i.%i V | Temperature [AD# %i]: %i.%i C\r\n", (int)adcSampleCount,
 8002f0a:	607b      	str	r3, [r7, #4]
						 (int)adcReading.temperature.rawValue, (int)adcReading.temperature.realValue, get_decimal(adcReading.temperature.realValue, 1));
 8002f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
			printf("<%02i> Current [AD# %i]: %i.%i mA | Voltage [AD# %i]: %i.%i V | Temperature [AD# %i]: %i.%i C\r\n", (int)adcSampleCount,
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7fd fefe 	bl	8000d10 <__aeabi_f2iz>
 8002f14:	4606      	mov	r6, r0
						 (int)adcReading.temperature.rawValue, (int)adcReading.temperature.realValue, get_decimal(adcReading.temperature.realValue, 1));
 8002f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f18:	2101      	movs	r1, #1
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7ff fb7e 	bl	800261c <get_decimal>
 8002f20:	4603      	mov	r3, r0
			printf("<%02i> Current [AD# %i]: %i.%i mA | Voltage [AD# %i]: %i.%i V | Temperature [AD# %i]: %i.%i C\r\n", (int)adcSampleCount,
 8002f22:	9306      	str	r3, [sp, #24]
 8002f24:	9605      	str	r6, [sp, #20]
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	9204      	str	r2, [sp, #16]
 8002f2a:	68ba      	ldr	r2, [r7, #8]
 8002f2c:	9203      	str	r2, [sp, #12]
 8002f2e:	9502      	str	r5, [sp, #8]
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	9201      	str	r2, [sp, #4]
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	4643      	mov	r3, r8
 8002f3a:	464a      	mov	r2, r9
 8002f3c:	4621      	mov	r1, r4
 8002f3e:	4820      	ldr	r0, [pc, #128]	@ (8002fc0 <motor_drive+0x1b4>)
 8002f40:	f005 ffca 	bl	8008ed8 <iprintf>
			adcSampleCount++;
 8002f44:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8002f48:	3301      	adds	r3, #1
 8002f4a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
			// update imax
			if(imax < (uint16_t)adcReading.current.realValue){ // if previous imax is less than new one, replace it
 8002f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7fd ff03 	bl	8000d5c <__aeabi_f2uiz>
 8002f56:	4603      	mov	r3, r0
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d284      	bcs.n	8002e6c <motor_drive+0x60>
				imax = (uint16_t)adcReading.current.realValue;
 8002f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7fd fef9 	bl	8000d5c <__aeabi_f2uiz>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		timeNow = HAL_GetTick();
 8002f70:	e77c      	b.n	8002e6c <motor_drive+0x60>
			if( (HAL_MAX_DELAY - timeStart + timeNow) >= runTime) break;
 8002f72:	bf00      	nop
			}
		}
	}
	// stop PWM and ADC sample timers
	HAL_GPIO_WritePin(motorPort, motorPin, RESET); // disable motor driver
 8002f74:	8b7b      	ldrh	r3, [r7, #26]
 8002f76:	2200      	movs	r2, #0
 8002f78:	4619      	mov	r1, r3
 8002f7a:	69f8      	ldr	r0, [r7, #28]
 8002f7c:	f002 f90a 	bl	8005194 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3); // stop PWM signal to step the motor
 8002f80:	2108      	movs	r1, #8
 8002f82:	4807      	ldr	r0, [pc, #28]	@ (8002fa0 <motor_drive+0x194>)
 8002f84:	f004 f818 	bl	8006fb8 <HAL_TIM_PWM_Stop>
	//HAL_ADC_Stop_DMA(&hadc1); // stop ADC conversion if there was one triggered before exiting the while(1)
	HAL_TIM_PWM_Stop_IT(&htim4, TIM_CHANNEL_4); // stop timer triggering adc conversions
 8002f88:	210c      	movs	r1, #12
 8002f8a:	4807      	ldr	r0, [pc, #28]	@ (8002fa8 <motor_drive+0x19c>)
 8002f8c:	f004 f968 	bl	8007260 <HAL_TIM_PWM_Stop_IT>

	return imax;
 8002f90:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	374c      	adds	r7, #76	@ 0x4c
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002f9e:	bf00      	nop
 8002fa0:	20000194 	.word	0x20000194
 8002fa4:	40011000 	.word	0x40011000
 8002fa8:	200001dc 	.word	0x200001dc
 8002fac:	0800a264 	.word	0x0800a264
 8002fb0:	20000186 	.word	0x20000186
 8002fb4:	20000189 	.word	0x20000189
 8002fb8:	0800b140 	.word	0x0800b140
 8002fbc:	2000018b 	.word	0x2000018b
 8002fc0:	0800b164 	.word	0x0800b164
 8002fc4:	00000000 	.word	0x00000000

08002fc8 <adc_get_values>:


/*************************************** ADC CONTROL FUNCTIONS ***************************************/

adcScan_t adc_get_values(void){
 8002fc8:	b5b0      	push	{r4, r5, r7, lr}
 8002fca:	b08e      	sub	sp, #56	@ 0x38
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
	//	const float AVG_SLOPE_avg = 4.3, AVG_SLOPE_min = 4.0, AVG_SLOPE_max = 4.6; // average slope [mV/C]
	//	const float V25_avg = 1430, V25_min = 1340, V25_max = 1520 ; // Voltage at 25 degrees [mV]
//	const float AVG_SLOPE_avg = 4.3, V25_avg = 1430;
//	const float VOLT_SLOPE = 0.0083, VOLT_OFFSET = 0.3963;
//	const float AMP_SLOPE = 0.163, AMP_OFFSET = 7.3581;
	uint16_t adcBuffer[ADC_BUFFER] = {'\0'}; // store 3 ADC measurements in DMA mode: [Vin0,Im0,TempInt0,Vin1,Im1,...]
 8002fd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	809a      	strh	r2, [r3, #4]
	uint32_t vAccum = 0, iAccum = 0, tAccum = 0;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fde:	2300      	movs	r3, #0
 8002fe0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	adcScan_t adc = {.current = {0,0}, .voltage = {0,0}, .temperature = {0,0} };
 8002fe6:	f107 030c 	add.w	r3, r7, #12
 8002fea:	2200      	movs	r2, #0
 8002fec:	601a      	str	r2, [r3, #0]
 8002fee:	605a      	str	r2, [r3, #4]
 8002ff0:	609a      	str	r2, [r3, #8]
 8002ff2:	60da      	str	r2, [r3, #12]
 8002ff4:	611a      	str	r2, [r3, #16]
 8002ff6:	615a      	str	r2, [r3, #20]

	// Sample ADC scan and fill the DMA buffer (3 channels: AIN10, AIN11, TEMPINT)
	for(uint16_t j = 0; j < ADC_SAMPLES; j++){
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8002ffc:	e018      	b.n	8003030 <adc_get_values+0x68>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcBuffer, ADC_BUFFER);
 8002ffe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003002:	2203      	movs	r2, #3
 8003004:	4619      	mov	r1, r3
 8003006:	4860      	ldr	r0, [pc, #384]	@ (8003188 <adc_get_values+0x1c0>)
 8003008:	f000 ffac 	bl	8003f64 <HAL_ADC_Start_DMA>
		vAccum += adcBuffer[0];
 800300c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800300e:	461a      	mov	r2, r3
 8003010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003012:	4413      	add	r3, r2
 8003014:	637b      	str	r3, [r7, #52]	@ 0x34
		iAccum += adcBuffer[1];
 8003016:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003018:	461a      	mov	r2, r3
 800301a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800301c:	4413      	add	r3, r2
 800301e:	633b      	str	r3, [r7, #48]	@ 0x30
		tAccum += adcBuffer[2];
 8003020:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003022:	461a      	mov	r2, r3
 8003024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003026:	4413      	add	r3, r2
 8003028:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for(uint16_t j = 0; j < ADC_SAMPLES; j++){
 800302a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800302c:	3301      	adds	r3, #1
 800302e:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8003030:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003032:	2b63      	cmp	r3, #99	@ 0x63
 8003034:	d9e3      	bls.n	8002ffe <adc_get_values+0x36>
//		HAL_Delay(1);
	}

	HAL_ADC_Stop_DMA(&hadc1); // stop ADC conversions
 8003036:	4854      	ldr	r0, [pc, #336]	@ (8003188 <adc_get_values+0x1c0>)
 8003038:	f001 f872 	bl	8004120 <HAL_ADC_Stop_DMA>
//		iAccum += adcBuffer[i+1];
//		tAccum += adcBuffer[i+2];
//	}
	// calculate averages and real values
	// voltage
	adc.voltage.rawValue = (uint16_t) ( vAccum / ADC_SAMPLES ); // ADC counts, divide by 3 num of buffer slots since each scan has 3 readings
 800303c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800303e:	4a53      	ldr	r2, [pc, #332]	@ (800318c <adc_get_values+0x1c4>)
 8003040:	fba2 2303 	umull	r2, r3, r2, r3
 8003044:	095b      	lsrs	r3, r3, #5
 8003046:	b29b      	uxth	r3, r3
 8003048:	81bb      	strh	r3, [r7, #12]
	adc.voltage.realValue = (float) adc.voltage.rawValue * ADC_V_SLOPE + ADC_V_OFFSET; // calibration coeff should be taken from eeprom
 800304a:	89bb      	ldrh	r3, [r7, #12]
 800304c:	4618      	mov	r0, r3
 800304e:	f7fd fe07 	bl	8000c60 <__aeabi_ui2f>
 8003052:	4603      	mov	r3, r0
 8003054:	4618      	mov	r0, r3
 8003056:	f7fd fa93 	bl	8000580 <__aeabi_f2d>
 800305a:	a33d      	add	r3, pc, #244	@ (adr r3, 8003150 <adc_get_values+0x188>)
 800305c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003060:	f7fd fae6 	bl	8000630 <__aeabi_dmul>
 8003064:	4602      	mov	r2, r0
 8003066:	460b      	mov	r3, r1
 8003068:	4610      	mov	r0, r2
 800306a:	4619      	mov	r1, r3
 800306c:	a33a      	add	r3, pc, #232	@ (adr r3, 8003158 <adc_get_values+0x190>)
 800306e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003072:	f7fd f927 	bl	80002c4 <__adddf3>
 8003076:	4602      	mov	r2, r0
 8003078:	460b      	mov	r3, r1
 800307a:	4610      	mov	r0, r2
 800307c:	4619      	mov	r1, r3
 800307e:	f7fd fce9 	bl	8000a54 <__aeabi_d2f>
 8003082:	4603      	mov	r3, r0
 8003084:	613b      	str	r3, [r7, #16]
	// current
	adc.current.rawValue = (uint16_t) ( iAccum / ADC_SAMPLES ); // ADC counts
 8003086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003088:	4a40      	ldr	r2, [pc, #256]	@ (800318c <adc_get_values+0x1c4>)
 800308a:	fba2 2303 	umull	r2, r3, r2, r3
 800308e:	095b      	lsrs	r3, r3, #5
 8003090:	b29b      	uxth	r3, r3
 8003092:	82bb      	strh	r3, [r7, #20]
	adc.current.realValue =  (float) adc.current.rawValue * ADC_I_SLOPE + ADC_I_OFFSET; // mA - opAmp G = 50, Rsense = 0.10 ohm
 8003094:	8abb      	ldrh	r3, [r7, #20]
 8003096:	4618      	mov	r0, r3
 8003098:	f7fd fde2 	bl	8000c60 <__aeabi_ui2f>
 800309c:	4603      	mov	r3, r0
 800309e:	4618      	mov	r0, r3
 80030a0:	f7fd fa6e 	bl	8000580 <__aeabi_f2d>
 80030a4:	a32e      	add	r3, pc, #184	@ (adr r3, 8003160 <adc_get_values+0x198>)
 80030a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030aa:	f7fd fac1 	bl	8000630 <__aeabi_dmul>
 80030ae:	4602      	mov	r2, r0
 80030b0:	460b      	mov	r3, r1
 80030b2:	4610      	mov	r0, r2
 80030b4:	4619      	mov	r1, r3
 80030b6:	a32c      	add	r3, pc, #176	@ (adr r3, 8003168 <adc_get_values+0x1a0>)
 80030b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030bc:	f7fd f902 	bl	80002c4 <__adddf3>
 80030c0:	4602      	mov	r2, r0
 80030c2:	460b      	mov	r3, r1
 80030c4:	4610      	mov	r0, r2
 80030c6:	4619      	mov	r1, r3
 80030c8:	f7fd fcc4 	bl	8000a54 <__aeabi_d2f>
 80030cc:	4603      	mov	r3, r0
 80030ce:	61bb      	str	r3, [r7, #24]
	// internal temperature
	adc.temperature.rawValue = (uint16_t) ( tAccum / ADC_SAMPLES ); // ADC counts
 80030d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030d2:	4a2e      	ldr	r2, [pc, #184]	@ (800318c <adc_get_values+0x1c4>)
 80030d4:	fba2 2303 	umull	r2, r3, r2, r3
 80030d8:	095b      	lsrs	r3, r3, #5
 80030da:	b29b      	uxth	r3, r3
 80030dc:	83bb      	strh	r3, [r7, #28]
	adc.temperature.realValue = ( (ADC_T_V25_OFFSET - (adc.temperature.rawValue * (3300.0/4096.0) ) )  / ADC_T_SLOPE) + 25.0 ;
 80030de:	8bbb      	ldrh	r3, [r7, #28]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7fd fa3b 	bl	800055c <__aeabi_i2d>
 80030e6:	a322      	add	r3, pc, #136	@ (adr r3, 8003170 <adc_get_values+0x1a8>)
 80030e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ec:	f7fd faa0 	bl	8000630 <__aeabi_dmul>
 80030f0:	4602      	mov	r2, r0
 80030f2:	460b      	mov	r3, r1
 80030f4:	a120      	add	r1, pc, #128	@ (adr r1, 8003178 <adc_get_values+0x1b0>)
 80030f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80030fa:	f7fd f8e1 	bl	80002c0 <__aeabi_dsub>
 80030fe:	4602      	mov	r2, r0
 8003100:	460b      	mov	r3, r1
 8003102:	4610      	mov	r0, r2
 8003104:	4619      	mov	r1, r3
 8003106:	a31e      	add	r3, pc, #120	@ (adr r3, 8003180 <adc_get_values+0x1b8>)
 8003108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800310c:	f7fd fbba 	bl	8000884 <__aeabi_ddiv>
 8003110:	4602      	mov	r2, r0
 8003112:	460b      	mov	r3, r1
 8003114:	4610      	mov	r0, r2
 8003116:	4619      	mov	r1, r3
 8003118:	f04f 0200 	mov.w	r2, #0
 800311c:	4b1c      	ldr	r3, [pc, #112]	@ (8003190 <adc_get_values+0x1c8>)
 800311e:	f7fd f8d1 	bl	80002c4 <__adddf3>
 8003122:	4602      	mov	r2, r0
 8003124:	460b      	mov	r3, r1
 8003126:	4610      	mov	r0, r2
 8003128:	4619      	mov	r1, r3
 800312a:	f7fd fc93 	bl	8000a54 <__aeabi_d2f>
 800312e:	4603      	mov	r3, r0
 8003130:	623b      	str	r3, [r7, #32]

	return adc;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	461d      	mov	r5, r3
 8003136:	f107 040c 	add.w	r4, r7, #12
 800313a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800313c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800313e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003142:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	3738      	adds	r7, #56	@ 0x38
 800314a:	46bd      	mov	sp, r7
 800314c:	bdb0      	pop	{r4, r5, r7, pc}
 800314e:	bf00      	nop
 8003150:	2474538f 	.word	0x2474538f
 8003154:	3f80ff97 	.word	0x3f80ff97
 8003158:	acd9e83e 	.word	0xacd9e83e
 800315c:	3fd95cfa 	.word	0x3fd95cfa
 8003160:	1a9fbe77 	.word	0x1a9fbe77
 8003164:	3fc4dd2f 	.word	0x3fc4dd2f
 8003168:	c432ca58 	.word	0xc432ca58
 800316c:	401d6eb1 	.word	0x401d6eb1
 8003170:	00000000 	.word	0x00000000
 8003174:	3fe9c800 	.word	0x3fe9c800
 8003178:	00000000 	.word	0x00000000
 800317c:	40965800 	.word	0x40965800
 8003180:	33333333 	.word	0x33333333
 8003184:	40113333 	.word	0x40113333
 8003188:	200000bc 	.word	0x200000bc
 800318c:	51eb851f 	.word	0x51eb851f
 8003190:	40390000 	.word	0x40390000

08003194 <eeprom_write>:
 * Max freq 1 MHz, 1 Kbit memory (1024 bit), 128 x 8-bit block, 5 ms page write,
 * 8-Byte write pages, fixed device address 1010-xxxRW, 128 bytes memory range {00-7F} */

/* Write 1 byte in epprom
 * Parameters: memory address [0-127], 1 byte of data */
void eeprom_write(uint8_t memoryAddress, uint8_t dataByte){
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af02      	add	r7, sp, #8
 800319a:	4603      	mov	r3, r0
 800319c:	460a      	mov	r2, r1
 800319e:	71fb      	strb	r3, [r7, #7]
 80031a0:	4613      	mov	r3, r2
 80031a2:	71bb      	strb	r3, [r7, #6]
	uint8_t txBuff[2] = {memoryAddress, dataByte};
 80031a4:	79fb      	ldrb	r3, [r7, #7]
 80031a6:	733b      	strb	r3, [r7, #12]
 80031a8:	79bb      	ldrb	r3, [r7, #6]
 80031aa:	737b      	strb	r3, [r7, #13]
	if(memoryAddress <= eeprom.MAX_MEM_ADDRESS ){
 80031ac:	79fb      	ldrb	r3, [r7, #7]
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	4b0e      	ldr	r3, [pc, #56]	@ (80031ec <eeprom_write+0x58>)
 80031b2:	885b      	ldrh	r3, [r3, #2]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d80d      	bhi.n	80031d4 <eeprom_write+0x40>
		HAL_I2C_Master_Transmit(&hi2c1, EEPROM_BUS_ADDRESS , txBuff, 2, HAL_MAX_DELAY); // send word address, value
 80031b8:	f107 020c 	add.w	r2, r7, #12
 80031bc:	f04f 33ff 	mov.w	r3, #4294967295
 80031c0:	9300      	str	r3, [sp, #0]
 80031c2:	2302      	movs	r3, #2
 80031c4:	21a0      	movs	r1, #160	@ 0xa0
 80031c6:	480a      	ldr	r0, [pc, #40]	@ (80031f0 <eeprom_write+0x5c>)
 80031c8:	f002 f940 	bl	800544c <HAL_I2C_Master_Transmit>
		HAL_Delay(10); // wait for data to be written
 80031cc:	200a      	movs	r0, #10
 80031ce:	f000 fdcd 	bl	8003d6c <HAL_Delay>
	} else {
		printf("* ERROR: memory address %x out of range [0-%i] *\r\n", memoryAddress, eeprom.MAX_MEM_ADDRESS);
	}
}
 80031d2:	e006      	b.n	80031e2 <eeprom_write+0x4e>
		printf("* ERROR: memory address %x out of range [0-%i] *\r\n", memoryAddress, eeprom.MAX_MEM_ADDRESS);
 80031d4:	79fb      	ldrb	r3, [r7, #7]
 80031d6:	4a05      	ldr	r2, [pc, #20]	@ (80031ec <eeprom_write+0x58>)
 80031d8:	8852      	ldrh	r2, [r2, #2]
 80031da:	4619      	mov	r1, r3
 80031dc:	4805      	ldr	r0, [pc, #20]	@ (80031f4 <eeprom_write+0x60>)
 80031de:	f005 fe7b 	bl	8008ed8 <iprintf>
}
 80031e2:	bf00      	nop
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	20000008 	.word	0x20000008
 80031f0:	20000130 	.word	0x20000130
 80031f4:	0800b1c4 	.word	0x0800b1c4

080031f8 <eeprom_read>:

/* Read 1 byte from epprom
 * Parameters: memory address [0-127]
 * Returns 1 byte of data */
uint8_t eeprom_read(uint8_t memoryAddress){
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af02      	add	r7, sp, #8
 80031fe:	4603      	mov	r3, r0
 8003200:	71fb      	strb	r3, [r7, #7]
	uint8_t addressBuffer[1] = {memoryAddress};
 8003202:	79fb      	ldrb	r3, [r7, #7]
 8003204:	733b      	strb	r3, [r7, #12]
	uint8_t rxBuff[1] = {0};
 8003206:	2300      	movs	r3, #0
 8003208:	723b      	strb	r3, [r7, #8]
	if(memoryAddress <= eeprom.MAX_MEM_ADDRESS ){
 800320a:	79fb      	ldrb	r3, [r7, #7]
 800320c:	b29a      	uxth	r2, r3
 800320e:	4b15      	ldr	r3, [pc, #84]	@ (8003264 <eeprom_read+0x6c>)
 8003210:	885b      	ldrh	r3, [r3, #2]
 8003212:	429a      	cmp	r2, r3
 8003214:	d81a      	bhi.n	800324c <eeprom_read+0x54>
		HAL_I2C_Master_Transmit(&hi2c1, EEPROM_BUS_ADDRESS , addressBuffer, 1, HAL_MAX_DELAY); // dummy write to set pointer to desired memory address
 8003216:	f107 020c 	add.w	r2, r7, #12
 800321a:	f04f 33ff 	mov.w	r3, #4294967295
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	2301      	movs	r3, #1
 8003222:	21a0      	movs	r1, #160	@ 0xa0
 8003224:	4810      	ldr	r0, [pc, #64]	@ (8003268 <eeprom_read+0x70>)
 8003226:	f002 f911 	bl	800544c <HAL_I2C_Master_Transmit>
		HAL_Delay(10);
 800322a:	200a      	movs	r0, #10
 800322c:	f000 fd9e 	bl	8003d6c <HAL_Delay>
		HAL_I2C_Master_Receive(&hi2c1, EEPROM_BUS_ADDRESS, rxBuff, 1, HAL_MAX_DELAY); // send command to read 1 byte at current memory address pointer
 8003230:	f107 0208 	add.w	r2, r7, #8
 8003234:	f04f 33ff 	mov.w	r3, #4294967295
 8003238:	9300      	str	r3, [sp, #0]
 800323a:	2301      	movs	r3, #1
 800323c:	21a0      	movs	r1, #160	@ 0xa0
 800323e:	480a      	ldr	r0, [pc, #40]	@ (8003268 <eeprom_read+0x70>)
 8003240:	f002 fa02 	bl	8005648 <HAL_I2C_Master_Receive>
		HAL_Delay(10);
 8003244:	200a      	movs	r0, #10
 8003246:	f000 fd91 	bl	8003d6c <HAL_Delay>
 800324a:	e006      	b.n	800325a <eeprom_read+0x62>
	} else {
		printf("* ERROR: memory address %x out of range [0-%i] *\r\n", memoryAddress, eeprom.MAX_MEM_ADDRESS);
 800324c:	79fb      	ldrb	r3, [r7, #7]
 800324e:	4a05      	ldr	r2, [pc, #20]	@ (8003264 <eeprom_read+0x6c>)
 8003250:	8852      	ldrh	r2, [r2, #2]
 8003252:	4619      	mov	r1, r3
 8003254:	4805      	ldr	r0, [pc, #20]	@ (800326c <eeprom_read+0x74>)
 8003256:	f005 fe3f 	bl	8008ed8 <iprintf>
	}
	return ((uint8_t) rxBuff[0]);
 800325a:	7a3b      	ldrb	r3, [r7, #8]
}
 800325c:	4618      	mov	r0, r3
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	20000008 	.word	0x20000008
 8003268:	20000130 	.word	0x20000130
 800326c:	0800b1c4 	.word	0x0800b1c4

08003270 <eeprom_clear>:

/* Clear memory within a given range of addresses
 * Parameters: start address and end address (inclusive) [0-127]
 * Returns number of blocks cleared */
uint8_t eeprom_clear(uint8_t memoryStart, uint8_t memoryEnd){
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	4603      	mov	r3, r0
 8003278:	460a      	mov	r2, r1
 800327a:	71fb      	strb	r3, [r7, #7]
 800327c:	4613      	mov	r3, r2
 800327e:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	if( (memoryStart >= 0) && (memoryEnd <= eeprom.MAX_MEM_ADDRESS) ){
 8003280:	79bb      	ldrb	r3, [r7, #6]
 8003282:	b29a      	uxth	r2, r3
 8003284:	4b10      	ldr	r3, [pc, #64]	@ (80032c8 <eeprom_clear+0x58>)
 8003286:	885b      	ldrh	r3, [r3, #2]
 8003288:	429a      	cmp	r2, r3
 800328a:	d80f      	bhi.n	80032ac <eeprom_clear+0x3c>
		for(i = memoryStart ; i <= memoryEnd ; i++){
 800328c:	79fb      	ldrb	r3, [r7, #7]
 800328e:	73fb      	strb	r3, [r7, #15]
 8003290:	e007      	b.n	80032a2 <eeprom_clear+0x32>
			eeprom_write(i, 0); // write 0 to corresponding byte
 8003292:	7bfb      	ldrb	r3, [r7, #15]
 8003294:	2100      	movs	r1, #0
 8003296:	4618      	mov	r0, r3
 8003298:	f7ff ff7c 	bl	8003194 <eeprom_write>
		for(i = memoryStart ; i <= memoryEnd ; i++){
 800329c:	7bfb      	ldrb	r3, [r7, #15]
 800329e:	3301      	adds	r3, #1
 80032a0:	73fb      	strb	r3, [r7, #15]
 80032a2:	7bfa      	ldrb	r2, [r7, #15]
 80032a4:	79bb      	ldrb	r3, [r7, #6]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d9f3      	bls.n	8003292 <eeprom_clear+0x22>
 80032aa:	e005      	b.n	80032b8 <eeprom_clear+0x48>
		}
	} else {
		printf("* ERROR: memory out of range [0-%i] *\r\n", eeprom.MAX_MEM_ADDRESS);
 80032ac:	4b06      	ldr	r3, [pc, #24]	@ (80032c8 <eeprom_clear+0x58>)
 80032ae:	885b      	ldrh	r3, [r3, #2]
 80032b0:	4619      	mov	r1, r3
 80032b2:	4806      	ldr	r0, [pc, #24]	@ (80032cc <eeprom_clear+0x5c>)
 80032b4:	f005 fe10 	bl	8008ed8 <iprintf>
	}
	return (i-memoryStart);
 80032b8:	7bfa      	ldrb	r2, [r7, #15]
 80032ba:	79fb      	ldrb	r3, [r7, #7]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	b2db      	uxtb	r3, r3
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	20000008 	.word	0x20000008
 80032cc:	0800b1f8 	.word	0x0800b1f8

080032d0 <eeprom_print_memory_map>:

/* print memory map on eeprom
 * {AL_TUBECOUNT, AL_TYPE, AL_SN1, AL_SN2, AL_CONFIGED, M_RUNTIME } */
void eeprom_print_memory_map(void){
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
	printf("\r\n");
 80032d4:	4844      	ldr	r0, [pc, #272]	@ (80033e8 <eeprom_print_memory_map+0x118>)
 80032d6:	f005 fe67 	bl	8008fa8 <puts>
	printf("|========================================|\r\n");
 80032da:	4844      	ldr	r0, [pc, #272]	@ (80033ec <eeprom_print_memory_map+0x11c>)
 80032dc:	f005 fe64 	bl	8008fa8 <puts>
	printf("|              MEMORY MAP                |\r\n");
 80032e0:	4843      	ldr	r0, [pc, #268]	@ (80033f0 <eeprom_print_memory_map+0x120>)
 80032e2:	f005 fe61 	bl	8008fa8 <puts>
	printf("|========================================|\r\n");
 80032e6:	4841      	ldr	r0, [pc, #260]	@ (80033ec <eeprom_print_memory_map+0x11c>)
 80032e8:	f005 fe5e 	bl	8008fa8 <puts>
	// autolauncher aprameters
	printf("| [%03i]        AL_TUBECOUNT               |\r\n", AL_TUBECOUNT1B);
 80032ec:	2100      	movs	r1, #0
 80032ee:	4841      	ldr	r0, [pc, #260]	@ (80033f4 <eeprom_print_memory_map+0x124>)
 80032f0:	f005 fdf2 	bl	8008ed8 <iprintf>
	printf("| [%03i]        AL_TYPE                    |\r\n", AL_TYPE1B);
 80032f4:	2101      	movs	r1, #1
 80032f6:	4840      	ldr	r0, [pc, #256]	@ (80033f8 <eeprom_print_memory_map+0x128>)
 80032f8:	f005 fdee 	bl	8008ed8 <iprintf>
	printf("| [%03i]        AL_SN                      |\r\n", AL_SN1B);
 80032fc:	2102      	movs	r1, #2
 80032fe:	483f      	ldr	r0, [pc, #252]	@ (80033fc <eeprom_print_memory_map+0x12c>)
 8003300:	f005 fdea 	bl	8008ed8 <iprintf>
	printf("| [%03i]        AL_CONFIGED                |\r\n", AL_CONFIGED1B);
 8003304:	2103      	movs	r1, #3
 8003306:	483e      	ldr	r0, [pc, #248]	@ (8003400 <eeprom_print_memory_map+0x130>)
 8003308:	f005 fde6 	bl	8008ed8 <iprintf>
	printf("|========================================|\r\n");
 800330c:	4837      	ldr	r0, [pc, #220]	@ (80033ec <eeprom_print_memory_map+0x11c>)
 800330e:	f005 fe4b 	bl	8008fa8 <puts>
	// motor parameters
	printf("| [%03i-%03i]    M_RUNTIME             |\r\n", M_RUNTIME2B,M_RUNTIME2B+1);
 8003312:	2209      	movs	r2, #9
 8003314:	2108      	movs	r1, #8
 8003316:	483b      	ldr	r0, [pc, #236]	@ (8003404 <eeprom_print_memory_map+0x134>)
 8003318:	f005 fdde 	bl	8008ed8 <iprintf>
	printf("| [%03i-%03i]    M_PWM_FREQ            |\r\n", M_PWM_FREQ2B, M_PWM_FREQ2B+1);
 800331c:	220b      	movs	r2, #11
 800331e:	210a      	movs	r1, #10
 8003320:	4839      	ldr	r0, [pc, #228]	@ (8003408 <eeprom_print_memory_map+0x138>)
 8003322:	f005 fdd9 	bl	8008ed8 <iprintf>
	printf("| [%03i-%03i]    M_SAMPLEPERIOD        |\r\n", M_SAMPLEPERIOD2B, M_SAMPLEPERIOD2B+1);
 8003326:	220d      	movs	r2, #13
 8003328:	210c      	movs	r1, #12
 800332a:	4838      	ldr	r0, [pc, #224]	@ (800340c <eeprom_print_memory_map+0x13c>)
 800332c:	f005 fdd4 	bl	8008ed8 <iprintf>
	printf("|========================================|\r\n");
 8003330:	482e      	ldr	r0, [pc, #184]	@ (80033ec <eeprom_print_memory_map+0x11c>)
 8003332:	f005 fe39 	bl	8008fa8 <puts>
	// use count
	printf("| [%03i-%03i]    M_1COUNT                |\r\n", M_1COUNT2B, M_1COUNT2B+1);
 8003336:	2211      	movs	r2, #17
 8003338:	2110      	movs	r1, #16
 800333a:	4835      	ldr	r0, [pc, #212]	@ (8003410 <eeprom_print_memory_map+0x140>)
 800333c:	f005 fdcc 	bl	8008ed8 <iprintf>
	printf("| [%03i-%03i]    M_2COUNT                |\r\n", M_2COUNT2B, M_2COUNT2B+1);
 8003340:	2213      	movs	r2, #19
 8003342:	2112      	movs	r1, #18
 8003344:	4833      	ldr	r0, [pc, #204]	@ (8003414 <eeprom_print_memory_map+0x144>)
 8003346:	f005 fdc7 	bl	8008ed8 <iprintf>
	printf("| [%03i-%03i]    M_3COUNT                |\r\n", M_3COUNT2B, M_3COUNT2B+1);
 800334a:	2215      	movs	r2, #21
 800334c:	2114      	movs	r1, #20
 800334e:	4832      	ldr	r0, [pc, #200]	@ (8003418 <eeprom_print_memory_map+0x148>)
 8003350:	f005 fdc2 	bl	8008ed8 <iprintf>
	printf("| [%03i-%03i]    M_4COUNT                |\r\n", M_4COUNT2B, M_4COUNT2B+1);
 8003354:	2217      	movs	r2, #23
 8003356:	2116      	movs	r1, #22
 8003358:	4830      	ldr	r0, [pc, #192]	@ (800341c <eeprom_print_memory_map+0x14c>)
 800335a:	f005 fdbd 	bl	8008ed8 <iprintf>
	printf("| [%03i-%03i]    M_5COUNT                |\r\n", M_5COUNT2B, M_5COUNT2B+1);
 800335e:	2219      	movs	r2, #25
 8003360:	2118      	movs	r1, #24
 8003362:	482f      	ldr	r0, [pc, #188]	@ (8003420 <eeprom_print_memory_map+0x150>)
 8003364:	f005 fdb8 	bl	8008ed8 <iprintf>
	printf("| [%03i-%03i]    M_6COUNT                |\r\n", M_6COUNT2B, M_6COUNT2B+1);
 8003368:	221b      	movs	r2, #27
 800336a:	211a      	movs	r1, #26
 800336c:	482d      	ldr	r0, [pc, #180]	@ (8003424 <eeprom_print_memory_map+0x154>)
 800336e:	f005 fdb3 	bl	8008ed8 <iprintf>
	printf("| [%03i-%03i]    M_7COUNT                |\r\n", M_7COUNT2B, M_7COUNT2B+1);
 8003372:	221d      	movs	r2, #29
 8003374:	211c      	movs	r1, #28
 8003376:	482c      	ldr	r0, [pc, #176]	@ (8003428 <eeprom_print_memory_map+0x158>)
 8003378:	f005 fdae 	bl	8008ed8 <iprintf>
	printf("| [%03i-%03i]    M_8COUNT                |\r\n", M_8COUNT2B, M_8COUNT2B+1);
 800337c:	221f      	movs	r2, #31
 800337e:	211e      	movs	r1, #30
 8003380:	482a      	ldr	r0, [pc, #168]	@ (800342c <eeprom_print_memory_map+0x15c>)
 8003382:	f005 fda9 	bl	8008ed8 <iprintf>
	printf("|========================================|\r\n");
 8003386:	4819      	ldr	r0, [pc, #100]	@ (80033ec <eeprom_print_memory_map+0x11c>)
 8003388:	f005 fe0e 	bl	8008fa8 <puts>
	// Max current
	printf("| [%03i-%03i]    M_1MXAMP                |\r\n", M_1MXAMP2B, M_1MXAMP2B+1);
 800338c:	2221      	movs	r2, #33	@ 0x21
 800338e:	2120      	movs	r1, #32
 8003390:	4827      	ldr	r0, [pc, #156]	@ (8003430 <eeprom_print_memory_map+0x160>)
 8003392:	f005 fda1 	bl	8008ed8 <iprintf>
	printf("| [%03i-%03i]    M_2MXAMP                |\r\n", M_2MXAMP2B, M_2MXAMP2B+1);
 8003396:	2223      	movs	r2, #35	@ 0x23
 8003398:	2122      	movs	r1, #34	@ 0x22
 800339a:	4826      	ldr	r0, [pc, #152]	@ (8003434 <eeprom_print_memory_map+0x164>)
 800339c:	f005 fd9c 	bl	8008ed8 <iprintf>
	printf("| [%03i-%03i]    M_3MXAMP                |\r\n", M_3MXAMP2B, M_3MXAMP2B+1);
 80033a0:	2225      	movs	r2, #37	@ 0x25
 80033a2:	2124      	movs	r1, #36	@ 0x24
 80033a4:	4824      	ldr	r0, [pc, #144]	@ (8003438 <eeprom_print_memory_map+0x168>)
 80033a6:	f005 fd97 	bl	8008ed8 <iprintf>
	printf("| [%03i-%03i]    M_4MXAMP                |\r\n", M_4MXAMP2B, M_4MXAMP2B+1);
 80033aa:	2227      	movs	r2, #39	@ 0x27
 80033ac:	2126      	movs	r1, #38	@ 0x26
 80033ae:	4823      	ldr	r0, [pc, #140]	@ (800343c <eeprom_print_memory_map+0x16c>)
 80033b0:	f005 fd92 	bl	8008ed8 <iprintf>
	printf("| [%03i-%03i]    M_5MXAMP                |\r\n", M_5MXAMP2B, M_5MXAMP2B+1);
 80033b4:	2229      	movs	r2, #41	@ 0x29
 80033b6:	2128      	movs	r1, #40	@ 0x28
 80033b8:	4821      	ldr	r0, [pc, #132]	@ (8003440 <eeprom_print_memory_map+0x170>)
 80033ba:	f005 fd8d 	bl	8008ed8 <iprintf>
	printf("| [%03i-%03i]    M_6MXAMP                |\r\n", M_6MXAMP2B, M_6MXAMP2B+1);
 80033be:	222b      	movs	r2, #43	@ 0x2b
 80033c0:	212a      	movs	r1, #42	@ 0x2a
 80033c2:	4820      	ldr	r0, [pc, #128]	@ (8003444 <eeprom_print_memory_map+0x174>)
 80033c4:	f005 fd88 	bl	8008ed8 <iprintf>
	printf("| [%03i-%03i]    M_7MXAMP                |\r\n", M_7MXAMP2B, M_7MXAMP2B+1);
 80033c8:	222d      	movs	r2, #45	@ 0x2d
 80033ca:	212c      	movs	r1, #44	@ 0x2c
 80033cc:	481e      	ldr	r0, [pc, #120]	@ (8003448 <eeprom_print_memory_map+0x178>)
 80033ce:	f005 fd83 	bl	8008ed8 <iprintf>
	printf("| [%03i-%03i]    M_8MXAMP                |\r\n", M_8MXAMP2B, M_8MXAMP2B+1);
 80033d2:	222f      	movs	r2, #47	@ 0x2f
 80033d4:	212e      	movs	r1, #46	@ 0x2e
 80033d6:	481d      	ldr	r0, [pc, #116]	@ (800344c <eeprom_print_memory_map+0x17c>)
 80033d8:	f005 fd7e 	bl	8008ed8 <iprintf>
	printf("|========================================|\r\n");
 80033dc:	4803      	ldr	r0, [pc, #12]	@ (80033ec <eeprom_print_memory_map+0x11c>)
 80033de:	f005 fde3 	bl	8008fa8 <puts>
}
 80033e2:	bf00      	nop
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	0800a264 	.word	0x0800a264
 80033ec:	0800b220 	.word	0x0800b220
 80033f0:	0800b24c 	.word	0x0800b24c
 80033f4:	0800b278 	.word	0x0800b278
 80033f8:	0800b2a8 	.word	0x0800b2a8
 80033fc:	0800b2d8 	.word	0x0800b2d8
 8003400:	0800b308 	.word	0x0800b308
 8003404:	0800b338 	.word	0x0800b338
 8003408:	0800b364 	.word	0x0800b364
 800340c:	0800b390 	.word	0x0800b390
 8003410:	0800b3bc 	.word	0x0800b3bc
 8003414:	0800b3ec 	.word	0x0800b3ec
 8003418:	0800b41c 	.word	0x0800b41c
 800341c:	0800b44c 	.word	0x0800b44c
 8003420:	0800b47c 	.word	0x0800b47c
 8003424:	0800b4ac 	.word	0x0800b4ac
 8003428:	0800b4dc 	.word	0x0800b4dc
 800342c:	0800b50c 	.word	0x0800b50c
 8003430:	0800b53c 	.word	0x0800b53c
 8003434:	0800b56c 	.word	0x0800b56c
 8003438:	0800b59c 	.word	0x0800b59c
 800343c:	0800b5cc 	.word	0x0800b5cc
 8003440:	0800b5fc 	.word	0x0800b5fc
 8003444:	0800b62c 	.word	0x0800b62c
 8003448:	0800b65c 	.word	0x0800b65c
 800344c:	0800b68c 	.word	0x0800b68c

08003450 <eeprom_write_nbytes>:
//}


/* Write N bytes to eeprom
 * Parameters: starting address on eeprom, number of bytes to write, pointer to data of any type */
void eeprom_write_nbytes(uint8_t baseAddress, uint8_t bytes, void * pData){
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	4603      	mov	r3, r0
 8003458:	603a      	str	r2, [r7, #0]
 800345a:	71fb      	strb	r3, [r7, #7]
 800345c:	460b      	mov	r3, r1
 800345e:	71bb      	strb	r3, [r7, #6]
    uint8_t *ptr = 0;
 8003460:	2300      	movs	r3, #0
 8003462:	60bb      	str	r3, [r7, #8]
    //uint8_t data = 0;
 	for( uint8_t i = 0; i < bytes && i < 4; i++){
 8003464:	2300      	movs	r3, #0
 8003466:	73fb      	strb	r3, [r7, #15]
 8003468:	e010      	b.n	800348c <eeprom_write_nbytes+0x3c>
		//uint8_t address = baseAddress+i;
 		ptr = pData+i; // cast to 1 byte before adding 1 to address
 800346a:	7bfb      	ldrb	r3, [r7, #15]
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	4413      	add	r3, r2
 8003470:	60bb      	str	r3, [r7, #8]
		//data = *ptr;
		eeprom_write(baseAddress+i, *ptr);
 8003472:	79fa      	ldrb	r2, [r7, #7]
 8003474:	7bfb      	ldrb	r3, [r7, #15]
 8003476:	4413      	add	r3, r2
 8003478:	b2da      	uxtb	r2, r3
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	4619      	mov	r1, r3
 8003480:	4610      	mov	r0, r2
 8003482:	f7ff fe87 	bl	8003194 <eeprom_write>
 	for( uint8_t i = 0; i < bytes && i < 4; i++){
 8003486:	7bfb      	ldrb	r3, [r7, #15]
 8003488:	3301      	adds	r3, #1
 800348a:	73fb      	strb	r3, [r7, #15]
 800348c:	7bfa      	ldrb	r2, [r7, #15]
 800348e:	79bb      	ldrb	r3, [r7, #6]
 8003490:	429a      	cmp	r2, r3
 8003492:	d202      	bcs.n	800349a <eeprom_write_nbytes+0x4a>
 8003494:	7bfb      	ldrb	r3, [r7, #15]
 8003496:	2b03      	cmp	r3, #3
 8003498:	d9e7      	bls.n	800346a <eeprom_write_nbytes+0x1a>
	}
}
 800349a:	bf00      	nop
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <eeprom_read_nbytes>:

/* Read N bytes from eeprom
 * Parameters: starting address on eeprom, number of bytes to read, pointer to store data of any type */
void eeprom_read_nbytes(uint8_t baseAddress, uint8_t bytes, void * pData){
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b084      	sub	sp, #16
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	4603      	mov	r3, r0
 80034aa:	603a      	str	r2, [r7, #0]
 80034ac:	71fb      	strb	r3, [r7, #7]
 80034ae:	460b      	mov	r3, r1
 80034b0:	71bb      	strb	r3, [r7, #6]
	uint8_t *ptr = 0;
 80034b2:	2300      	movs	r3, #0
 80034b4:	60bb      	str	r3, [r7, #8]
 	for( uint8_t i = 0; i < bytes && i < 4; i++){
 80034b6:	2300      	movs	r3, #0
 80034b8:	73fb      	strb	r3, [r7, #15]
 80034ba:	e011      	b.n	80034e0 <eeprom_read_nbytes+0x3e>
		//uint8_t address = baseAddress+i;
 		ptr = pData+i;
 80034bc:	7bfb      	ldrb	r3, [r7, #15]
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	4413      	add	r3, r2
 80034c2:	60bb      	str	r3, [r7, #8]
		//data = *ptr;
		*ptr = eeprom_read(baseAddress+i);
 80034c4:	79fa      	ldrb	r2, [r7, #7]
 80034c6:	7bfb      	ldrb	r3, [r7, #15]
 80034c8:	4413      	add	r3, r2
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff fe93 	bl	80031f8 <eeprom_read>
 80034d2:	4603      	mov	r3, r0
 80034d4:	461a      	mov	r2, r3
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	701a      	strb	r2, [r3, #0]
 	for( uint8_t i = 0; i < bytes && i < 4; i++){
 80034da:	7bfb      	ldrb	r3, [r7, #15]
 80034dc:	3301      	adds	r3, #1
 80034de:	73fb      	strb	r3, [r7, #15]
 80034e0:	7bfa      	ldrb	r2, [r7, #15]
 80034e2:	79bb      	ldrb	r3, [r7, #6]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d202      	bcs.n	80034ee <eeprom_read_nbytes+0x4c>
 80034e8:	7bfb      	ldrb	r3, [r7, #15]
 80034ea:	2b03      	cmp	r3, #3
 80034ec:	d9e6      	bls.n	80034bc <eeprom_read_nbytes+0x1a>
	}
}
 80034ee:	bf00      	nop
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80034f6:	b480      	push	{r7}
 80034f8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80034fa:	b672      	cpsid	i
}
 80034fc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80034fe:	bf00      	nop
 8003500:	e7fd      	b.n	80034fe <Error_Handler+0x8>
	...

08003504 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800350a:	4b15      	ldr	r3, [pc, #84]	@ (8003560 <HAL_MspInit+0x5c>)
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	4a14      	ldr	r2, [pc, #80]	@ (8003560 <HAL_MspInit+0x5c>)
 8003510:	f043 0301 	orr.w	r3, r3, #1
 8003514:	6193      	str	r3, [r2, #24]
 8003516:	4b12      	ldr	r3, [pc, #72]	@ (8003560 <HAL_MspInit+0x5c>)
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	60bb      	str	r3, [r7, #8]
 8003520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003522:	4b0f      	ldr	r3, [pc, #60]	@ (8003560 <HAL_MspInit+0x5c>)
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	4a0e      	ldr	r2, [pc, #56]	@ (8003560 <HAL_MspInit+0x5c>)
 8003528:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800352c:	61d3      	str	r3, [r2, #28]
 800352e:	4b0c      	ldr	r3, [pc, #48]	@ (8003560 <HAL_MspInit+0x5c>)
 8003530:	69db      	ldr	r3, [r3, #28]
 8003532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003536:	607b      	str	r3, [r7, #4]
 8003538:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800353a:	4b0a      	ldr	r3, [pc, #40]	@ (8003564 <HAL_MspInit+0x60>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	60fb      	str	r3, [r7, #12]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003546:	60fb      	str	r3, [r7, #12]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800354e:	60fb      	str	r3, [r7, #12]
 8003550:	4a04      	ldr	r2, [pc, #16]	@ (8003564 <HAL_MspInit+0x60>)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003556:	bf00      	nop
 8003558:	3714      	adds	r7, #20
 800355a:	46bd      	mov	sp, r7
 800355c:	bc80      	pop	{r7}
 800355e:	4770      	bx	lr
 8003560:	40021000 	.word	0x40021000
 8003564:	40010000 	.word	0x40010000

08003568 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800356c:	bf00      	nop
 800356e:	e7fd      	b.n	800356c <NMI_Handler+0x4>

08003570 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003574:	bf00      	nop
 8003576:	e7fd      	b.n	8003574 <HardFault_Handler+0x4>

08003578 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800357c:	bf00      	nop
 800357e:	e7fd      	b.n	800357c <MemManage_Handler+0x4>

08003580 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003584:	bf00      	nop
 8003586:	e7fd      	b.n	8003584 <BusFault_Handler+0x4>

08003588 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800358c:	bf00      	nop
 800358e:	e7fd      	b.n	800358c <UsageFault_Handler+0x4>

08003590 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003594:	bf00      	nop
 8003596:	46bd      	mov	sp, r7
 8003598:	bc80      	pop	{r7}
 800359a:	4770      	bx	lr

0800359c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035a0:	bf00      	nop
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bc80      	pop	{r7}
 80035a6:	4770      	bx	lr

080035a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035ac:	bf00      	nop
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bc80      	pop	{r7}
 80035b2:	4770      	bx	lr

080035b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035b8:	f000 fbbc 	bl	8003d34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035bc:	bf00      	nop
 80035be:	bd80      	pop	{r7, pc}

080035c0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80035c4:	4803      	ldr	r0, [pc, #12]	@ (80035d4 <DMA1_Channel1_IRQHandler+0x14>)
 80035c6:	f001 fb2d 	bl	8004c24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  adcDMAFull = 1;
 80035ca:	4b03      	ldr	r3, [pc, #12]	@ (80035d8 <DMA1_Channel1_IRQHandler+0x18>)
 80035cc:	2201      	movs	r2, #1
 80035ce:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80035d0:	bf00      	nop
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	200000ec 	.word	0x200000ec
 80035d8:	2000018c 	.word	0x2000018c

080035dc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80035e0:	4803      	ldr	r0, [pc, #12]	@ (80035f0 <TIM4_IRQHandler+0x14>)
 80035e2:	f003 feef 	bl	80073c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  adcTimerTrigger = 1;
 80035e6:	4b03      	ldr	r3, [pc, #12]	@ (80035f4 <TIM4_IRQHandler+0x18>)
 80035e8:	2201      	movs	r2, #1
 80035ea:	701a      	strb	r2, [r3, #0]
  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
  /* USER CODE END TIM4_IRQn 1 */
}
 80035ec:	bf00      	nop
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	200001dc 	.word	0x200001dc
 80035f4:	2000018b 	.word	0x2000018b

080035f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80035fc:	4802      	ldr	r0, [pc, #8]	@ (8003608 <USART1_IRQHandler+0x10>)
 80035fe:	f004 fe3f 	bl	8008280 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003602:	bf00      	nop
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	20000224 	.word	0x20000224

0800360c <_close>:
  }
  return len;
}

int _close(int file)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003614:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003618:	4618      	mov	r0, r3
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	bc80      	pop	{r7}
 8003620:	4770      	bx	lr

08003622 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003622:	b480      	push	{r7}
 8003624:	b083      	sub	sp, #12
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
 800362a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003632:	605a      	str	r2, [r3, #4]
  return 0;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	bc80      	pop	{r7}
 800363e:	4770      	bx	lr

08003640 <_isatty>:

int _isatty(int file)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003648:	2301      	movs	r3, #1
}
 800364a:	4618      	mov	r0, r3
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	bc80      	pop	{r7}
 8003652:	4770      	bx	lr

08003654 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3714      	adds	r7, #20
 8003666:	46bd      	mov	sp, r7
 8003668:	bc80      	pop	{r7}
 800366a:	4770      	bx	lr

0800366c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003674:	4a14      	ldr	r2, [pc, #80]	@ (80036c8 <_sbrk+0x5c>)
 8003676:	4b15      	ldr	r3, [pc, #84]	@ (80036cc <_sbrk+0x60>)
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003680:	4b13      	ldr	r3, [pc, #76]	@ (80036d0 <_sbrk+0x64>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d102      	bne.n	800368e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003688:	4b11      	ldr	r3, [pc, #68]	@ (80036d0 <_sbrk+0x64>)
 800368a:	4a12      	ldr	r2, [pc, #72]	@ (80036d4 <_sbrk+0x68>)
 800368c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800368e:	4b10      	ldr	r3, [pc, #64]	@ (80036d0 <_sbrk+0x64>)
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4413      	add	r3, r2
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	429a      	cmp	r2, r3
 800369a:	d207      	bcs.n	80036ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800369c:	f005 fe66 	bl	800936c <__errno>
 80036a0:	4603      	mov	r3, r0
 80036a2:	220c      	movs	r2, #12
 80036a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036a6:	f04f 33ff 	mov.w	r3, #4294967295
 80036aa:	e009      	b.n	80036c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036ac:	4b08      	ldr	r3, [pc, #32]	@ (80036d0 <_sbrk+0x64>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036b2:	4b07      	ldr	r3, [pc, #28]	@ (80036d0 <_sbrk+0x64>)
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4413      	add	r3, r2
 80036ba:	4a05      	ldr	r2, [pc, #20]	@ (80036d0 <_sbrk+0x64>)
 80036bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036be:	68fb      	ldr	r3, [r7, #12]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3718      	adds	r7, #24
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	20005000 	.word	0x20005000
 80036cc:	00000400 	.word	0x00000400
 80036d0:	20000190 	.word	0x20000190
 80036d4:	20000408 	.word	0x20000408

080036d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80036d8:	b480      	push	{r7}
 80036da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036dc:	bf00      	nop
 80036de:	46bd      	mov	sp, r7
 80036e0:	bc80      	pop	{r7}
 80036e2:	4770      	bx	lr

080036e4 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b08e      	sub	sp, #56	@ 0x38
 80036e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80036ee:	2200      	movs	r2, #0
 80036f0:	601a      	str	r2, [r3, #0]
 80036f2:	605a      	str	r2, [r3, #4]
 80036f4:	609a      	str	r2, [r3, #8]
 80036f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036f8:	f107 0320 	add.w	r3, r7, #32
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]
 8003700:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003702:	1d3b      	adds	r3, r7, #4
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]
 8003708:	605a      	str	r2, [r3, #4]
 800370a:	609a      	str	r2, [r3, #8]
 800370c:	60da      	str	r2, [r3, #12]
 800370e:	611a      	str	r2, [r3, #16]
 8003710:	615a      	str	r2, [r3, #20]
 8003712:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003714:	4b2d      	ldr	r3, [pc, #180]	@ (80037cc <MX_TIM3_Init+0xe8>)
 8003716:	4a2e      	ldr	r2, [pc, #184]	@ (80037d0 <MX_TIM3_Init+0xec>)
 8003718:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 800371a:	4b2c      	ldr	r3, [pc, #176]	@ (80037cc <MX_TIM3_Init+0xe8>)
 800371c:	2207      	movs	r2, #7
 800371e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003720:	4b2a      	ldr	r3, [pc, #168]	@ (80037cc <MX_TIM3_Init+0xe8>)
 8003722:	2200      	movs	r2, #0
 8003724:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000-1;
 8003726:	4b29      	ldr	r3, [pc, #164]	@ (80037cc <MX_TIM3_Init+0xe8>)
 8003728:	f241 3287 	movw	r2, #4999	@ 0x1387
 800372c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800372e:	4b27      	ldr	r3, [pc, #156]	@ (80037cc <MX_TIM3_Init+0xe8>)
 8003730:	2200      	movs	r2, #0
 8003732:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003734:	4b25      	ldr	r3, [pc, #148]	@ (80037cc <MX_TIM3_Init+0xe8>)
 8003736:	2280      	movs	r2, #128	@ 0x80
 8003738:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800373a:	4824      	ldr	r0, [pc, #144]	@ (80037cc <MX_TIM3_Init+0xe8>)
 800373c:	f003 faf2 	bl	8006d24 <HAL_TIM_Base_Init>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d001      	beq.n	800374a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003746:	f7ff fed6 	bl	80034f6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800374a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800374e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003750:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003754:	4619      	mov	r1, r3
 8003756:	481d      	ldr	r0, [pc, #116]	@ (80037cc <MX_TIM3_Init+0xe8>)
 8003758:	f003 ffe6 	bl	8007728 <HAL_TIM_ConfigClockSource>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003762:	f7ff fec8 	bl	80034f6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003766:	4819      	ldr	r0, [pc, #100]	@ (80037cc <MX_TIM3_Init+0xe8>)
 8003768:	f003 fb2b 	bl	8006dc2 <HAL_TIM_PWM_Init>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003772:	f7ff fec0 	bl	80034f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003776:	2300      	movs	r3, #0
 8003778:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800377a:	2300      	movs	r3, #0
 800377c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800377e:	f107 0320 	add.w	r3, r7, #32
 8003782:	4619      	mov	r1, r3
 8003784:	4811      	ldr	r0, [pc, #68]	@ (80037cc <MX_TIM3_Init+0xe8>)
 8003786:	f004 fb73 	bl	8007e70 <HAL_TIMEx_MasterConfigSynchronization>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d001      	beq.n	8003794 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003790:	f7ff feb1 	bl	80034f6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003794:	2360      	movs	r3, #96	@ 0x60
 8003796:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 4500-1;
 8003798:	f241 1393 	movw	r3, #4499	@ 0x1193
 800379c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800379e:	2300      	movs	r3, #0
 80037a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037a2:	2300      	movs	r3, #0
 80037a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80037a6:	1d3b      	adds	r3, r7, #4
 80037a8:	2208      	movs	r2, #8
 80037aa:	4619      	mov	r1, r3
 80037ac:	4807      	ldr	r0, [pc, #28]	@ (80037cc <MX_TIM3_Init+0xe8>)
 80037ae:	f003 fef9 	bl	80075a4 <HAL_TIM_PWM_ConfigChannel>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80037b8:	f7ff fe9d 	bl	80034f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80037bc:	4803      	ldr	r0, [pc, #12]	@ (80037cc <MX_TIM3_Init+0xe8>)
 80037be:	f000 f8b7 	bl	8003930 <HAL_TIM_MspPostInit>

}
 80037c2:	bf00      	nop
 80037c4:	3738      	adds	r7, #56	@ 0x38
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	20000194 	.word	0x20000194
 80037d0:	40000400 	.word	0x40000400

080037d4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b08e      	sub	sp, #56	@ 0x38
 80037d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80037de:	2200      	movs	r2, #0
 80037e0:	601a      	str	r2, [r3, #0]
 80037e2:	605a      	str	r2, [r3, #4]
 80037e4:	609a      	str	r2, [r3, #8]
 80037e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037e8:	f107 0320 	add.w	r3, r7, #32
 80037ec:	2200      	movs	r2, #0
 80037ee:	601a      	str	r2, [r3, #0]
 80037f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80037f2:	1d3b      	adds	r3, r7, #4
 80037f4:	2200      	movs	r2, #0
 80037f6:	601a      	str	r2, [r3, #0]
 80037f8:	605a      	str	r2, [r3, #4]
 80037fa:	609a      	str	r2, [r3, #8]
 80037fc:	60da      	str	r2, [r3, #12]
 80037fe:	611a      	str	r2, [r3, #16]
 8003800:	615a      	str	r2, [r3, #20]
 8003802:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003804:	4b2b      	ldr	r3, [pc, #172]	@ (80038b4 <MX_TIM4_Init+0xe0>)
 8003806:	4a2c      	ldr	r2, [pc, #176]	@ (80038b8 <MX_TIM4_Init+0xe4>)
 8003808:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8000-1;
 800380a:	4b2a      	ldr	r3, [pc, #168]	@ (80038b4 <MX_TIM4_Init+0xe0>)
 800380c:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8003810:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003812:	4b28      	ldr	r3, [pc, #160]	@ (80038b4 <MX_TIM4_Init+0xe0>)
 8003814:	2200      	movs	r2, #0
 8003816:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 500-1;
 8003818:	4b26      	ldr	r3, [pc, #152]	@ (80038b4 <MX_TIM4_Init+0xe0>)
 800381a:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800381e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003820:	4b24      	ldr	r3, [pc, #144]	@ (80038b4 <MX_TIM4_Init+0xe0>)
 8003822:	2200      	movs	r2, #0
 8003824:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003826:	4b23      	ldr	r3, [pc, #140]	@ (80038b4 <MX_TIM4_Init+0xe0>)
 8003828:	2200      	movs	r2, #0
 800382a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800382c:	4821      	ldr	r0, [pc, #132]	@ (80038b4 <MX_TIM4_Init+0xe0>)
 800382e:	f003 fa79 	bl	8006d24 <HAL_TIM_Base_Init>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8003838:	f7ff fe5d 	bl	80034f6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800383c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003840:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003842:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003846:	4619      	mov	r1, r3
 8003848:	481a      	ldr	r0, [pc, #104]	@ (80038b4 <MX_TIM4_Init+0xe0>)
 800384a:	f003 ff6d 	bl	8007728 <HAL_TIM_ConfigClockSource>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8003854:	f7ff fe4f 	bl	80034f6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003858:	4816      	ldr	r0, [pc, #88]	@ (80038b4 <MX_TIM4_Init+0xe0>)
 800385a:	f003 fab2 	bl	8006dc2 <HAL_TIM_PWM_Init>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d001      	beq.n	8003868 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8003864:	f7ff fe47 	bl	80034f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003868:	2320      	movs	r3, #32
 800386a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800386c:	2300      	movs	r3, #0
 800386e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003870:	f107 0320 	add.w	r3, r7, #32
 8003874:	4619      	mov	r1, r3
 8003876:	480f      	ldr	r0, [pc, #60]	@ (80038b4 <MX_TIM4_Init+0xe0>)
 8003878:	f004 fafa 	bl	8007e70 <HAL_TIMEx_MasterConfigSynchronization>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8003882:	f7ff fe38 	bl	80034f6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003886:	2360      	movs	r3, #96	@ 0x60
 8003888:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 250-1;
 800388a:	23f9      	movs	r3, #249	@ 0xf9
 800388c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800388e:	2300      	movs	r3, #0
 8003890:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003892:	2300      	movs	r3, #0
 8003894:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003896:	1d3b      	adds	r3, r7, #4
 8003898:	220c      	movs	r2, #12
 800389a:	4619      	mov	r1, r3
 800389c:	4805      	ldr	r0, [pc, #20]	@ (80038b4 <MX_TIM4_Init+0xe0>)
 800389e:	f003 fe81 	bl	80075a4 <HAL_TIM_PWM_ConfigChannel>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80038a8:	f7ff fe25 	bl	80034f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80038ac:	bf00      	nop
 80038ae:	3738      	adds	r7, #56	@ 0x38
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	200001dc 	.word	0x200001dc
 80038b8:	40000800 	.word	0x40000800

080038bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a16      	ldr	r2, [pc, #88]	@ (8003924 <HAL_TIM_Base_MspInit+0x68>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d10c      	bne.n	80038e8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80038ce:	4b16      	ldr	r3, [pc, #88]	@ (8003928 <HAL_TIM_Base_MspInit+0x6c>)
 80038d0:	69db      	ldr	r3, [r3, #28]
 80038d2:	4a15      	ldr	r2, [pc, #84]	@ (8003928 <HAL_TIM_Base_MspInit+0x6c>)
 80038d4:	f043 0302 	orr.w	r3, r3, #2
 80038d8:	61d3      	str	r3, [r2, #28]
 80038da:	4b13      	ldr	r3, [pc, #76]	@ (8003928 <HAL_TIM_Base_MspInit+0x6c>)
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	60fb      	str	r3, [r7, #12]
 80038e4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80038e6:	e018      	b.n	800391a <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM4)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a0f      	ldr	r2, [pc, #60]	@ (800392c <HAL_TIM_Base_MspInit+0x70>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d113      	bne.n	800391a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80038f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003928 <HAL_TIM_Base_MspInit+0x6c>)
 80038f4:	69db      	ldr	r3, [r3, #28]
 80038f6:	4a0c      	ldr	r2, [pc, #48]	@ (8003928 <HAL_TIM_Base_MspInit+0x6c>)
 80038f8:	f043 0304 	orr.w	r3, r3, #4
 80038fc:	61d3      	str	r3, [r2, #28]
 80038fe:	4b0a      	ldr	r3, [pc, #40]	@ (8003928 <HAL_TIM_Base_MspInit+0x6c>)
 8003900:	69db      	ldr	r3, [r3, #28]
 8003902:	f003 0304 	and.w	r3, r3, #4
 8003906:	60bb      	str	r3, [r7, #8]
 8003908:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800390a:	2200      	movs	r2, #0
 800390c:	2100      	movs	r1, #0
 800390e:	201e      	movs	r0, #30
 8003910:	f000 ffe3 	bl	80048da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003914:	201e      	movs	r0, #30
 8003916:	f000 fffc 	bl	8004912 <HAL_NVIC_EnableIRQ>
}
 800391a:	bf00      	nop
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	40000400 	.word	0x40000400
 8003928:	40021000 	.word	0x40021000
 800392c:	40000800 	.word	0x40000800

08003930 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b088      	sub	sp, #32
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003938:	f107 0310 	add.w	r3, r7, #16
 800393c:	2200      	movs	r2, #0
 800393e:	601a      	str	r2, [r3, #0]
 8003940:	605a      	str	r2, [r3, #4]
 8003942:	609a      	str	r2, [r3, #8]
 8003944:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a0f      	ldr	r2, [pc, #60]	@ (8003988 <HAL_TIM_MspPostInit+0x58>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d117      	bne.n	8003980 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003950:	4b0e      	ldr	r3, [pc, #56]	@ (800398c <HAL_TIM_MspPostInit+0x5c>)
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	4a0d      	ldr	r2, [pc, #52]	@ (800398c <HAL_TIM_MspPostInit+0x5c>)
 8003956:	f043 0308 	orr.w	r3, r3, #8
 800395a:	6193      	str	r3, [r2, #24]
 800395c:	4b0b      	ldr	r3, [pc, #44]	@ (800398c <HAL_TIM_MspPostInit+0x5c>)
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	f003 0308 	and.w	r3, r3, #8
 8003964:	60fb      	str	r3, [r7, #12]
 8003966:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_PWM_Pin;
 8003968:	2301      	movs	r3, #1
 800396a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800396c:	2302      	movs	r3, #2
 800396e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003970:	2302      	movs	r3, #2
 8003972:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOTOR_PWM_GPIO_Port, &GPIO_InitStruct);
 8003974:	f107 0310 	add.w	r3, r7, #16
 8003978:	4619      	mov	r1, r3
 800397a:	4805      	ldr	r0, [pc, #20]	@ (8003990 <HAL_TIM_MspPostInit+0x60>)
 800397c:	f001 fa86 	bl	8004e8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003980:	bf00      	nop
 8003982:	3720      	adds	r7, #32
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40000400 	.word	0x40000400
 800398c:	40021000 	.word	0x40021000
 8003990:	40010c00 	.word	0x40010c00

08003994 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003998:	4b11      	ldr	r3, [pc, #68]	@ (80039e0 <MX_USART1_UART_Init+0x4c>)
 800399a:	4a12      	ldr	r2, [pc, #72]	@ (80039e4 <MX_USART1_UART_Init+0x50>)
 800399c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800399e:	4b10      	ldr	r3, [pc, #64]	@ (80039e0 <MX_USART1_UART_Init+0x4c>)
 80039a0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80039a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80039a6:	4b0e      	ldr	r3, [pc, #56]	@ (80039e0 <MX_USART1_UART_Init+0x4c>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80039ac:	4b0c      	ldr	r3, [pc, #48]	@ (80039e0 <MX_USART1_UART_Init+0x4c>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80039b2:	4b0b      	ldr	r3, [pc, #44]	@ (80039e0 <MX_USART1_UART_Init+0x4c>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80039b8:	4b09      	ldr	r3, [pc, #36]	@ (80039e0 <MX_USART1_UART_Init+0x4c>)
 80039ba:	220c      	movs	r2, #12
 80039bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039be:	4b08      	ldr	r3, [pc, #32]	@ (80039e0 <MX_USART1_UART_Init+0x4c>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80039c4:	4b06      	ldr	r3, [pc, #24]	@ (80039e0 <MX_USART1_UART_Init+0x4c>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80039ca:	4805      	ldr	r0, [pc, #20]	@ (80039e0 <MX_USART1_UART_Init+0x4c>)
 80039cc:	f004 fac0 	bl	8007f50 <HAL_UART_Init>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80039d6:	f7ff fd8e 	bl	80034f6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80039da:	bf00      	nop
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	20000224 	.word	0x20000224
 80039e4:	40013800 	.word	0x40013800

080039e8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80039ec:	4b11      	ldr	r3, [pc, #68]	@ (8003a34 <MX_USART3_UART_Init+0x4c>)
 80039ee:	4a12      	ldr	r2, [pc, #72]	@ (8003a38 <MX_USART3_UART_Init+0x50>)
 80039f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80039f2:	4b10      	ldr	r3, [pc, #64]	@ (8003a34 <MX_USART3_UART_Init+0x4c>)
 80039f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80039f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80039fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003a34 <MX_USART3_UART_Init+0x4c>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003a00:	4b0c      	ldr	r3, [pc, #48]	@ (8003a34 <MX_USART3_UART_Init+0x4c>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003a06:	4b0b      	ldr	r3, [pc, #44]	@ (8003a34 <MX_USART3_UART_Init+0x4c>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003a0c:	4b09      	ldr	r3, [pc, #36]	@ (8003a34 <MX_USART3_UART_Init+0x4c>)
 8003a0e:	220c      	movs	r2, #12
 8003a10:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a12:	4b08      	ldr	r3, [pc, #32]	@ (8003a34 <MX_USART3_UART_Init+0x4c>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a18:	4b06      	ldr	r3, [pc, #24]	@ (8003a34 <MX_USART3_UART_Init+0x4c>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003a1e:	4805      	ldr	r0, [pc, #20]	@ (8003a34 <MX_USART3_UART_Init+0x4c>)
 8003a20:	f004 fa96 	bl	8007f50 <HAL_UART_Init>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003a2a:	f7ff fd64 	bl	80034f6 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003a2e:	bf00      	nop
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	2000026c 	.word	0x2000026c
 8003a38:	40004800 	.word	0x40004800

08003a3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b08a      	sub	sp, #40	@ 0x28
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a44:	f107 0318 	add.w	r3, r7, #24
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	605a      	str	r2, [r3, #4]
 8003a4e:	609a      	str	r2, [r3, #8]
 8003a50:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a3c      	ldr	r2, [pc, #240]	@ (8003b48 <HAL_UART_MspInit+0x10c>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d13a      	bne.n	8003ad2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a5c:	4b3b      	ldr	r3, [pc, #236]	@ (8003b4c <HAL_UART_MspInit+0x110>)
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	4a3a      	ldr	r2, [pc, #232]	@ (8003b4c <HAL_UART_MspInit+0x110>)
 8003a62:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a66:	6193      	str	r3, [r2, #24]
 8003a68:	4b38      	ldr	r3, [pc, #224]	@ (8003b4c <HAL_UART_MspInit+0x110>)
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a70:	617b      	str	r3, [r7, #20]
 8003a72:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a74:	4b35      	ldr	r3, [pc, #212]	@ (8003b4c <HAL_UART_MspInit+0x110>)
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	4a34      	ldr	r2, [pc, #208]	@ (8003b4c <HAL_UART_MspInit+0x110>)
 8003a7a:	f043 0304 	orr.w	r3, r3, #4
 8003a7e:	6193      	str	r3, [r2, #24]
 8003a80:	4b32      	ldr	r3, [pc, #200]	@ (8003b4c <HAL_UART_MspInit+0x110>)
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	f003 0304 	and.w	r3, r3, #4
 8003a88:	613b      	str	r3, [r7, #16]
 8003a8a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003a8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003a90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a92:	2302      	movs	r3, #2
 8003a94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a96:	2303      	movs	r3, #3
 8003a98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a9a:	f107 0318 	add.w	r3, r7, #24
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	482b      	ldr	r0, [pc, #172]	@ (8003b50 <HAL_UART_MspInit+0x114>)
 8003aa2:	f001 f9f3 	bl	8004e8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003aa6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003aaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003aac:	2300      	movs	r3, #0
 8003aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ab4:	f107 0318 	add.w	r3, r7, #24
 8003ab8:	4619      	mov	r1, r3
 8003aba:	4825      	ldr	r0, [pc, #148]	@ (8003b50 <HAL_UART_MspInit+0x114>)
 8003abc:	f001 f9e6 	bl	8004e8c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	2101      	movs	r1, #1
 8003ac4:	2025      	movs	r0, #37	@ 0x25
 8003ac6:	f000 ff08 	bl	80048da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003aca:	2025      	movs	r0, #37	@ 0x25
 8003acc:	f000 ff21 	bl	8004912 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003ad0:	e036      	b.n	8003b40 <HAL_UART_MspInit+0x104>
  else if(uartHandle->Instance==USART3)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a1f      	ldr	r2, [pc, #124]	@ (8003b54 <HAL_UART_MspInit+0x118>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d131      	bne.n	8003b40 <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003adc:	4b1b      	ldr	r3, [pc, #108]	@ (8003b4c <HAL_UART_MspInit+0x110>)
 8003ade:	69db      	ldr	r3, [r3, #28]
 8003ae0:	4a1a      	ldr	r2, [pc, #104]	@ (8003b4c <HAL_UART_MspInit+0x110>)
 8003ae2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ae6:	61d3      	str	r3, [r2, #28]
 8003ae8:	4b18      	ldr	r3, [pc, #96]	@ (8003b4c <HAL_UART_MspInit+0x110>)
 8003aea:	69db      	ldr	r3, [r3, #28]
 8003aec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003af0:	60fb      	str	r3, [r7, #12]
 8003af2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003af4:	4b15      	ldr	r3, [pc, #84]	@ (8003b4c <HAL_UART_MspInit+0x110>)
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	4a14      	ldr	r2, [pc, #80]	@ (8003b4c <HAL_UART_MspInit+0x110>)
 8003afa:	f043 0308 	orr.w	r3, r3, #8
 8003afe:	6193      	str	r3, [r2, #24]
 8003b00:	4b12      	ldr	r3, [pc, #72]	@ (8003b4c <HAL_UART_MspInit+0x110>)
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	f003 0308 	and.w	r3, r3, #8
 8003b08:	60bb      	str	r3, [r7, #8]
 8003b0a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003b0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b12:	2302      	movs	r3, #2
 8003b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b16:	2303      	movs	r3, #3
 8003b18:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b1a:	f107 0318 	add.w	r3, r7, #24
 8003b1e:	4619      	mov	r1, r3
 8003b20:	480d      	ldr	r0, [pc, #52]	@ (8003b58 <HAL_UART_MspInit+0x11c>)
 8003b22:	f001 f9b3 	bl	8004e8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003b26:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003b2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b30:	2300      	movs	r3, #0
 8003b32:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b34:	f107 0318 	add.w	r3, r7, #24
 8003b38:	4619      	mov	r1, r3
 8003b3a:	4807      	ldr	r0, [pc, #28]	@ (8003b58 <HAL_UART_MspInit+0x11c>)
 8003b3c:	f001 f9a6 	bl	8004e8c <HAL_GPIO_Init>
}
 8003b40:	bf00      	nop
 8003b42:	3728      	adds	r7, #40	@ 0x28
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	40013800 	.word	0x40013800
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	40010800 	.word	0x40010800
 8003b54:	40004800 	.word	0x40004800
 8003b58:	40010c00 	.word	0x40010c00

08003b5c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003b5c:	f7ff fdbc 	bl	80036d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b60:	480b      	ldr	r0, [pc, #44]	@ (8003b90 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003b62:	490c      	ldr	r1, [pc, #48]	@ (8003b94 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003b64:	4a0c      	ldr	r2, [pc, #48]	@ (8003b98 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003b66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b68:	e002      	b.n	8003b70 <LoopCopyDataInit>

08003b6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b6e:	3304      	adds	r3, #4

08003b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b74:	d3f9      	bcc.n	8003b6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b76:	4a09      	ldr	r2, [pc, #36]	@ (8003b9c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003b78:	4c09      	ldr	r4, [pc, #36]	@ (8003ba0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003b7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b7c:	e001      	b.n	8003b82 <LoopFillZerobss>

08003b7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b80:	3204      	adds	r2, #4

08003b82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b84:	d3fb      	bcc.n	8003b7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003b86:	f005 fbf7 	bl	8009378 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003b8a:	f7fd faef 	bl	800116c <main>
  bx lr
 8003b8e:	4770      	bx	lr
  ldr r0, =_sdata
 8003b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b94:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8003b98:	0800b738 	.word	0x0800b738
  ldr r2, =_sbss
 8003b9c:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8003ba0:	20000408 	.word	0x20000408

08003ba4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003ba4:	e7fe      	b.n	8003ba4 <ADC1_2_IRQHandler>
	...

08003ba8 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8003bb0:	4a11      	ldr	r2, [pc, #68]	@ (8003bf8 <RetargetInit+0x50>)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8003bb6:	4b11      	ldr	r3, [pc, #68]	@ (8003bfc <RetargetInit+0x54>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6898      	ldr	r0, [r3, #8]
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	f005 f9f9 	bl	8008fb8 <setvbuf>
  setvbuf(stdin, NULL, _IONBF, 0);
 8003bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8003bfc <RetargetInit+0x54>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	6858      	ldr	r0, [r3, #4]
 8003bcc:	2300      	movs	r3, #0
 8003bce:	2202      	movs	r2, #2
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	f005 f9f1 	bl	8008fb8 <setvbuf>
  __HAL_UART_CLEAR_OREFLAG(gHuart);
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	60fb      	str	r3, [r7, #12]
 8003bda:	4b07      	ldr	r3, [pc, #28]	@ (8003bf8 <RetargetInit+0x50>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	60fb      	str	r3, [r7, #12]
 8003be4:	4b04      	ldr	r3, [pc, #16]	@ (8003bf8 <RetargetInit+0x50>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	60fb      	str	r3, [r7, #12]
 8003bee:	68fb      	ldr	r3, [r7, #12]

}
 8003bf0:	bf00      	nop
 8003bf2:	3710      	adds	r7, #16
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	200002b4 	.word	0x200002b4
 8003bfc:	20000050 	.word	0x20000050

08003c00 <_write>:


int _write(int fd, char* ptr, int len) {
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b086      	sub	sp, #24
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d002      	beq.n	8003c18 <_write+0x18>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d111      	bne.n	8003c3c <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8003c18:	4b0e      	ldr	r3, [pc, #56]	@ (8003c54 <_write+0x54>)
 8003c1a:	6818      	ldr	r0, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	f04f 33ff 	mov.w	r3, #4294967295
 8003c24:	68b9      	ldr	r1, [r7, #8]
 8003c26:	f004 f9e3 	bl	8007ff0 <HAL_UART_Transmit>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8003c2e:	7dfb      	ldrb	r3, [r7, #23]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d101      	bne.n	8003c38 <_write+0x38>
      return len;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	e008      	b.n	8003c4a <_write+0x4a>
    else
      return EIO;
 8003c38:	2305      	movs	r3, #5
 8003c3a:	e006      	b.n	8003c4a <_write+0x4a>
  }
  errno = EBADF;
 8003c3c:	f005 fb96 	bl	800936c <__errno>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2209      	movs	r2, #9
 8003c44:	601a      	str	r2, [r3, #0]
  return -1;
 8003c46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3718      	adds	r7, #24
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	200002b4 	.word	0x200002b4

08003c58 <_read>:


int _read(int fd, char* ptr, int len) {
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d110      	bne.n	8003c8c <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8003c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8003ca4 <_read+0x4c>)
 8003c6c:	6818      	ldr	r0, [r3, #0]
 8003c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c72:	2201      	movs	r2, #1
 8003c74:	68b9      	ldr	r1, [r7, #8]
 8003c76:	f004 fa46 	bl	8008106 <HAL_UART_Receive>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8003c7e:	7dfb      	ldrb	r3, [r7, #23]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d101      	bne.n	8003c88 <_read+0x30>
      return 1;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e008      	b.n	8003c9a <_read+0x42>
    else
      return EIO;
 8003c88:	2305      	movs	r3, #5
 8003c8a:	e006      	b.n	8003c9a <_read+0x42>
  }
  errno = EBADF;
 8003c8c:	f005 fb6e 	bl	800936c <__errno>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2209      	movs	r2, #9
 8003c94:	601a      	str	r2, [r3, #0]
  return -1;
 8003c96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3718      	adds	r7, #24
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	200002b4 	.word	0x200002b4

08003ca8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003cac:	4b08      	ldr	r3, [pc, #32]	@ (8003cd0 <HAL_Init+0x28>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a07      	ldr	r2, [pc, #28]	@ (8003cd0 <HAL_Init+0x28>)
 8003cb2:	f043 0310 	orr.w	r3, r3, #16
 8003cb6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cb8:	2003      	movs	r0, #3
 8003cba:	f000 fe03 	bl	80048c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003cbe:	2000      	movs	r0, #0
 8003cc0:	f000 f808 	bl	8003cd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003cc4:	f7ff fc1e 	bl	8003504 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	40022000 	.word	0x40022000

08003cd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003cdc:	4b12      	ldr	r3, [pc, #72]	@ (8003d28 <HAL_InitTick+0x54>)
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	4b12      	ldr	r3, [pc, #72]	@ (8003d2c <HAL_InitTick+0x58>)
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003cea:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f000 fe1b 	bl	800492e <HAL_SYSTICK_Config>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e00e      	b.n	8003d20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2b0f      	cmp	r3, #15
 8003d06:	d80a      	bhi.n	8003d1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d08:	2200      	movs	r2, #0
 8003d0a:	6879      	ldr	r1, [r7, #4]
 8003d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d10:	f000 fde3 	bl	80048da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d14:	4a06      	ldr	r2, [pc, #24]	@ (8003d30 <HAL_InitTick+0x5c>)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	e000      	b.n	8003d20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3708      	adds	r7, #8
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	20000038 	.word	0x20000038
 8003d2c:	20000040 	.word	0x20000040
 8003d30:	2000003c 	.word	0x2000003c

08003d34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d38:	4b05      	ldr	r3, [pc, #20]	@ (8003d50 <HAL_IncTick+0x1c>)
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	4b05      	ldr	r3, [pc, #20]	@ (8003d54 <HAL_IncTick+0x20>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4413      	add	r3, r2
 8003d44:	4a03      	ldr	r2, [pc, #12]	@ (8003d54 <HAL_IncTick+0x20>)
 8003d46:	6013      	str	r3, [r2, #0]
}
 8003d48:	bf00      	nop
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bc80      	pop	{r7}
 8003d4e:	4770      	bx	lr
 8003d50:	20000040 	.word	0x20000040
 8003d54:	200002b8 	.word	0x200002b8

08003d58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8003d5c:	4b02      	ldr	r3, [pc, #8]	@ (8003d68 <HAL_GetTick+0x10>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bc80      	pop	{r7}
 8003d66:	4770      	bx	lr
 8003d68:	200002b8 	.word	0x200002b8

08003d6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d74:	f7ff fff0 	bl	8003d58 <HAL_GetTick>
 8003d78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d84:	d005      	beq.n	8003d92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d86:	4b0a      	ldr	r3, [pc, #40]	@ (8003db0 <HAL_Delay+0x44>)
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	4413      	add	r3, r2
 8003d90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d92:	bf00      	nop
 8003d94:	f7ff ffe0 	bl	8003d58 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d8f7      	bhi.n	8003d94 <HAL_Delay+0x28>
  {
  }
}
 8003da4:	bf00      	nop
 8003da6:	bf00      	nop
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	20000040 	.word	0x20000040

08003db4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b086      	sub	sp, #24
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e0be      	b.n	8003f54 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d109      	bne.n	8003df8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7fd f82e 	bl	8000e54 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 fb41 	bl	8004480 <ADC_ConversionStop_Disable>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e06:	f003 0310 	and.w	r3, r3, #16
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f040 8099 	bne.w	8003f42 <HAL_ADC_Init+0x18e>
 8003e10:	7dfb      	ldrb	r3, [r7, #23]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f040 8095 	bne.w	8003f42 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e1c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003e20:	f023 0302 	bic.w	r3, r3, #2
 8003e24:	f043 0202 	orr.w	r2, r3, #2
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003e34:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	7b1b      	ldrb	r3, [r3, #12]
 8003e3a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003e3c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003e3e:	68ba      	ldr	r2, [r7, #8]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e4c:	d003      	beq.n	8003e56 <HAL_ADC_Init+0xa2>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d102      	bne.n	8003e5c <HAL_ADC_Init+0xa8>
 8003e56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e5a:	e000      	b.n	8003e5e <HAL_ADC_Init+0xaa>
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	7d1b      	ldrb	r3, [r3, #20]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d119      	bne.n	8003ea0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	7b1b      	ldrb	r3, [r3, #12]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d109      	bne.n	8003e88 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	035a      	lsls	r2, r3, #13
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003e84:	613b      	str	r3, [r7, #16]
 8003e86:	e00b      	b.n	8003ea0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e8c:	f043 0220 	orr.w	r2, r3, #32
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e98:	f043 0201 	orr.w	r2, r3, #1
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	689a      	ldr	r2, [r3, #8]
 8003eba:	4b28      	ldr	r3, [pc, #160]	@ (8003f5c <HAL_ADC_Init+0x1a8>)
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	6812      	ldr	r2, [r2, #0]
 8003ec2:	68b9      	ldr	r1, [r7, #8]
 8003ec4:	430b      	orrs	r3, r1
 8003ec6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ed0:	d003      	beq.n	8003eda <HAL_ADC_Init+0x126>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d104      	bne.n	8003ee4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	051b      	lsls	r3, r3, #20
 8003ee2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eea:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689a      	ldr	r2, [r3, #8]
 8003efe:	4b18      	ldr	r3, [pc, #96]	@ (8003f60 <HAL_ADC_Init+0x1ac>)
 8003f00:	4013      	ands	r3, r2
 8003f02:	68ba      	ldr	r2, [r7, #8]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d10b      	bne.n	8003f20 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f12:	f023 0303 	bic.w	r3, r3, #3
 8003f16:	f043 0201 	orr.w	r2, r3, #1
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003f1e:	e018      	b.n	8003f52 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f24:	f023 0312 	bic.w	r3, r3, #18
 8003f28:	f043 0210 	orr.w	r2, r3, #16
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f34:	f043 0201 	orr.w	r2, r3, #1
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003f40:	e007      	b.n	8003f52 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f46:	f043 0210 	orr.w	r2, r3, #16
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003f52:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3718      	adds	r7, #24
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	ffe1f7fd 	.word	0xffe1f7fd
 8003f60:	ff1f0efe 	.word	0xff1f0efe

08003f64 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f70:	2300      	movs	r3, #0
 8003f72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a64      	ldr	r2, [pc, #400]	@ (800410c <HAL_ADC_Start_DMA+0x1a8>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d004      	beq.n	8003f88 <HAL_ADC_Start_DMA+0x24>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a63      	ldr	r2, [pc, #396]	@ (8004110 <HAL_ADC_Start_DMA+0x1ac>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d106      	bne.n	8003f96 <HAL_ADC_Start_DMA+0x32>
 8003f88:	4b60      	ldr	r3, [pc, #384]	@ (800410c <HAL_ADC_Start_DMA+0x1a8>)
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f040 80b3 	bne.w	80040fc <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d101      	bne.n	8003fa4 <HAL_ADC_Start_DMA+0x40>
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	e0ae      	b.n	8004102 <HAL_ADC_Start_DMA+0x19e>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f000 fa0d 	bl	80043cc <ADC_Enable>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003fb6:	7dfb      	ldrb	r3, [r7, #23]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f040 809a 	bne.w	80040f2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003fc6:	f023 0301 	bic.w	r3, r3, #1
 8003fca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a4e      	ldr	r2, [pc, #312]	@ (8004110 <HAL_ADC_Start_DMA+0x1ac>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d105      	bne.n	8003fe8 <HAL_ADC_Start_DMA+0x84>
 8003fdc:	4b4b      	ldr	r3, [pc, #300]	@ (800410c <HAL_ADC_Start_DMA+0x1a8>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d115      	bne.n	8004014 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fec:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d026      	beq.n	8004050 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004006:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800400a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004012:	e01d      	b.n	8004050 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004018:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a39      	ldr	r2, [pc, #228]	@ (800410c <HAL_ADC_Start_DMA+0x1a8>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d004      	beq.n	8004034 <HAL_ADC_Start_DMA+0xd0>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a38      	ldr	r2, [pc, #224]	@ (8004110 <HAL_ADC_Start_DMA+0x1ac>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d10d      	bne.n	8004050 <HAL_ADC_Start_DMA+0xec>
 8004034:	4b35      	ldr	r3, [pc, #212]	@ (800410c <HAL_ADC_Start_DMA+0x1a8>)
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800403c:	2b00      	cmp	r3, #0
 800403e:	d007      	beq.n	8004050 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004044:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004048:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004054:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d006      	beq.n	800406a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004060:	f023 0206 	bic.w	r2, r3, #6
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004068:	e002      	b.n	8004070 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6a1b      	ldr	r3, [r3, #32]
 800407c:	4a25      	ldr	r2, [pc, #148]	@ (8004114 <HAL_ADC_Start_DMA+0x1b0>)
 800407e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6a1b      	ldr	r3, [r3, #32]
 8004084:	4a24      	ldr	r2, [pc, #144]	@ (8004118 <HAL_ADC_Start_DMA+0x1b4>)
 8004086:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6a1b      	ldr	r3, [r3, #32]
 800408c:	4a23      	ldr	r2, [pc, #140]	@ (800411c <HAL_ADC_Start_DMA+0x1b8>)
 800408e:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f06f 0202 	mvn.w	r2, #2
 8004098:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	689a      	ldr	r2, [r3, #8]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040a8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6a18      	ldr	r0, [r3, #32]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	334c      	adds	r3, #76	@ 0x4c
 80040b4:	4619      	mov	r1, r3
 80040b6:	68ba      	ldr	r2, [r7, #8]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f000 fc9f 	bl	80049fc <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80040c8:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80040cc:	d108      	bne.n	80040e0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	689a      	ldr	r2, [r3, #8]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80040dc:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80040de:	e00f      	b.n	8004100 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	689a      	ldr	r2, [r3, #8]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80040ee:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80040f0:	e006      	b.n	8004100 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 80040fa:	e001      	b.n	8004100 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004100:	7dfb      	ldrb	r3, [r7, #23]
}
 8004102:	4618      	mov	r0, r3
 8004104:	3718      	adds	r7, #24
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	40012400 	.word	0x40012400
 8004110:	40012800 	.word	0x40012800
 8004114:	08004503 	.word	0x08004503
 8004118:	0800457f 	.word	0x0800457f
 800411c:	0800459b 	.word	0x0800459b

08004120 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004128:	2300      	movs	r3, #0
 800412a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004132:	2b01      	cmp	r3, #1
 8004134:	d101      	bne.n	800413a <HAL_ADC_Stop_DMA+0x1a>
 8004136:	2302      	movs	r3, #2
 8004138:	e03a      	b.n	80041b0 <HAL_ADC_Stop_DMA+0x90>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 f99c 	bl	8004480 <ADC_ConversionStop_Disable>
 8004148:	4603      	mov	r3, r0
 800414a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800414c:	7bfb      	ldrb	r3, [r7, #15]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d129      	bne.n	80041a6 <HAL_ADC_Stop_DMA+0x86>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004160:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d11a      	bne.n	80041a6 <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	4618      	mov	r0, r3
 8004176:	f000 fca1 	bl	8004abc <HAL_DMA_Abort>
 800417a:	4603      	mov	r3, r0
 800417c:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 800417e:	7bfb      	ldrb	r3, [r7, #15]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d10a      	bne.n	800419a <HAL_ADC_Stop_DMA+0x7a>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004188:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800418c:	f023 0301 	bic.w	r3, r3, #1
 8004190:	f043 0201 	orr.w	r2, r3, #1
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	629a      	str	r2, [r3, #40]	@ 0x28
 8004198:	e005      	b.n	80041a6 <HAL_ADC_Stop_DMA+0x86>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800419e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Return function status */
  return tmp_hal_status;
 80041ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bc80      	pop	{r7}
 80041c8:	4770      	bx	lr

080041ca <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80041ca:	b480      	push	{r7}
 80041cc:	b083      	sub	sp, #12
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80041d2:	bf00      	nop
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bc80      	pop	{r7}
 80041da:	4770      	bx	lr

080041dc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041e6:	2300      	movs	r3, #0
 80041e8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80041ea:	2300      	movs	r3, #0
 80041ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d101      	bne.n	80041fc <HAL_ADC_ConfigChannel+0x20>
 80041f8:	2302      	movs	r3, #2
 80041fa:	e0dc      	b.n	80043b6 <HAL_ADC_ConfigChannel+0x1da>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	2b06      	cmp	r3, #6
 800420a:	d81c      	bhi.n	8004246 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685a      	ldr	r2, [r3, #4]
 8004216:	4613      	mov	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	4413      	add	r3, r2
 800421c:	3b05      	subs	r3, #5
 800421e:	221f      	movs	r2, #31
 8004220:	fa02 f303 	lsl.w	r3, r2, r3
 8004224:	43db      	mvns	r3, r3
 8004226:	4019      	ands	r1, r3
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	6818      	ldr	r0, [r3, #0]
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	685a      	ldr	r2, [r3, #4]
 8004230:	4613      	mov	r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4413      	add	r3, r2
 8004236:	3b05      	subs	r3, #5
 8004238:	fa00 f203 	lsl.w	r2, r0, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	430a      	orrs	r2, r1
 8004242:	635a      	str	r2, [r3, #52]	@ 0x34
 8004244:	e03c      	b.n	80042c0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2b0c      	cmp	r3, #12
 800424c:	d81c      	bhi.n	8004288 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685a      	ldr	r2, [r3, #4]
 8004258:	4613      	mov	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	4413      	add	r3, r2
 800425e:	3b23      	subs	r3, #35	@ 0x23
 8004260:	221f      	movs	r2, #31
 8004262:	fa02 f303 	lsl.w	r3, r2, r3
 8004266:	43db      	mvns	r3, r3
 8004268:	4019      	ands	r1, r3
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	6818      	ldr	r0, [r3, #0]
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	685a      	ldr	r2, [r3, #4]
 8004272:	4613      	mov	r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	4413      	add	r3, r2
 8004278:	3b23      	subs	r3, #35	@ 0x23
 800427a:	fa00 f203 	lsl.w	r2, r0, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	430a      	orrs	r2, r1
 8004284:	631a      	str	r2, [r3, #48]	@ 0x30
 8004286:	e01b      	b.n	80042c0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	4613      	mov	r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	4413      	add	r3, r2
 8004298:	3b41      	subs	r3, #65	@ 0x41
 800429a:	221f      	movs	r2, #31
 800429c:	fa02 f303 	lsl.w	r3, r2, r3
 80042a0:	43db      	mvns	r3, r3
 80042a2:	4019      	ands	r1, r3
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	6818      	ldr	r0, [r3, #0]
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	685a      	ldr	r2, [r3, #4]
 80042ac:	4613      	mov	r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	4413      	add	r3, r2
 80042b2:	3b41      	subs	r3, #65	@ 0x41
 80042b4:	fa00 f203 	lsl.w	r2, r0, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	430a      	orrs	r2, r1
 80042be:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2b09      	cmp	r3, #9
 80042c6:	d91c      	bls.n	8004302 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68d9      	ldr	r1, [r3, #12]
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	4613      	mov	r3, r2
 80042d4:	005b      	lsls	r3, r3, #1
 80042d6:	4413      	add	r3, r2
 80042d8:	3b1e      	subs	r3, #30
 80042da:	2207      	movs	r2, #7
 80042dc:	fa02 f303 	lsl.w	r3, r2, r3
 80042e0:	43db      	mvns	r3, r3
 80042e2:	4019      	ands	r1, r3
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	6898      	ldr	r0, [r3, #8]
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	4613      	mov	r3, r2
 80042ee:	005b      	lsls	r3, r3, #1
 80042f0:	4413      	add	r3, r2
 80042f2:	3b1e      	subs	r3, #30
 80042f4:	fa00 f203 	lsl.w	r2, r0, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	430a      	orrs	r2, r1
 80042fe:	60da      	str	r2, [r3, #12]
 8004300:	e019      	b.n	8004336 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	6919      	ldr	r1, [r3, #16]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	4613      	mov	r3, r2
 800430e:	005b      	lsls	r3, r3, #1
 8004310:	4413      	add	r3, r2
 8004312:	2207      	movs	r2, #7
 8004314:	fa02 f303 	lsl.w	r3, r2, r3
 8004318:	43db      	mvns	r3, r3
 800431a:	4019      	ands	r1, r3
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	6898      	ldr	r0, [r3, #8]
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	4613      	mov	r3, r2
 8004326:	005b      	lsls	r3, r3, #1
 8004328:	4413      	add	r3, r2
 800432a:	fa00 f203 	lsl.w	r2, r0, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	430a      	orrs	r2, r1
 8004334:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2b10      	cmp	r3, #16
 800433c:	d003      	beq.n	8004346 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004342:	2b11      	cmp	r3, #17
 8004344:	d132      	bne.n	80043ac <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a1d      	ldr	r2, [pc, #116]	@ (80043c0 <HAL_ADC_ConfigChannel+0x1e4>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d125      	bne.n	800439c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d126      	bne.n	80043ac <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	689a      	ldr	r2, [r3, #8]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800436c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2b10      	cmp	r3, #16
 8004374:	d11a      	bne.n	80043ac <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004376:	4b13      	ldr	r3, [pc, #76]	@ (80043c4 <HAL_ADC_ConfigChannel+0x1e8>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a13      	ldr	r2, [pc, #76]	@ (80043c8 <HAL_ADC_ConfigChannel+0x1ec>)
 800437c:	fba2 2303 	umull	r2, r3, r2, r3
 8004380:	0c9a      	lsrs	r2, r3, #18
 8004382:	4613      	mov	r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	4413      	add	r3, r2
 8004388:	005b      	lsls	r3, r3, #1
 800438a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800438c:	e002      	b.n	8004394 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	3b01      	subs	r3, #1
 8004392:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1f9      	bne.n	800438e <HAL_ADC_ConfigChannel+0x1b2>
 800439a:	e007      	b.n	80043ac <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a0:	f043 0220 	orr.w	r2, r3, #32
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80043b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3714      	adds	r7, #20
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bc80      	pop	{r7}
 80043be:	4770      	bx	lr
 80043c0:	40012400 	.word	0x40012400
 80043c4:	20000038 	.word	0x20000038
 80043c8:	431bde83 	.word	0x431bde83

080043cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043d4:	2300      	movs	r3, #0
 80043d6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80043d8:	2300      	movs	r3, #0
 80043da:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d040      	beq.n	800446c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	689a      	ldr	r2, [r3, #8]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f042 0201 	orr.w	r2, r2, #1
 80043f8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80043fa:	4b1f      	ldr	r3, [pc, #124]	@ (8004478 <ADC_Enable+0xac>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a1f      	ldr	r2, [pc, #124]	@ (800447c <ADC_Enable+0xb0>)
 8004400:	fba2 2303 	umull	r2, r3, r2, r3
 8004404:	0c9b      	lsrs	r3, r3, #18
 8004406:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004408:	e002      	b.n	8004410 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	3b01      	subs	r3, #1
 800440e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1f9      	bne.n	800440a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004416:	f7ff fc9f 	bl	8003d58 <HAL_GetTick>
 800441a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800441c:	e01f      	b.n	800445e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800441e:	f7ff fc9b 	bl	8003d58 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	2b02      	cmp	r3, #2
 800442a:	d918      	bls.n	800445e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b01      	cmp	r3, #1
 8004438:	d011      	beq.n	800445e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800443e:	f043 0210 	orr.w	r2, r3, #16
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800444a:	f043 0201 	orr.w	r2, r3, #1
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e007      	b.n	800446e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f003 0301 	and.w	r3, r3, #1
 8004468:	2b01      	cmp	r3, #1
 800446a:	d1d8      	bne.n	800441e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3710      	adds	r7, #16
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	20000038 	.word	0x20000038
 800447c:	431bde83 	.word	0x431bde83

08004480 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004488:	2300      	movs	r3, #0
 800448a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b01      	cmp	r3, #1
 8004498:	d12e      	bne.n	80044f8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	689a      	ldr	r2, [r3, #8]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 0201 	bic.w	r2, r2, #1
 80044a8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80044aa:	f7ff fc55 	bl	8003d58 <HAL_GetTick>
 80044ae:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80044b0:	e01b      	b.n	80044ea <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80044b2:	f7ff fc51 	bl	8003d58 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d914      	bls.n	80044ea <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d10d      	bne.n	80044ea <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d2:	f043 0210 	orr.w	r2, r3, #16
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044de:	f043 0201 	orr.w	r2, r3, #1
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e007      	b.n	80044fa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f003 0301 	and.w	r3, r3, #1
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d0dc      	beq.n	80044b2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b084      	sub	sp, #16
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800450e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004514:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004518:	2b00      	cmp	r3, #0
 800451a:	d127      	bne.n	800456c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004520:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8004532:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8004536:	d115      	bne.n	8004564 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800453c:	2b00      	cmp	r3, #0
 800453e:	d111      	bne.n	8004564 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004544:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004550:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d105      	bne.n	8004564 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800455c:	f043 0201 	orr.w	r2, r3, #1
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f7fe f92b 	bl	80027c0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800456a:	e004      	b.n	8004576 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	4798      	blx	r3
}
 8004576:	bf00      	nop
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b084      	sub	sp, #16
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800458a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f7ff fe13 	bl	80041b8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004592:	bf00      	nop
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800459a:	b580      	push	{r7, lr}
 800459c:	b084      	sub	sp, #16
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ac:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045b8:	f043 0204 	orr.w	r2, r3, #4
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80045c0:	68f8      	ldr	r0, [r7, #12]
 80045c2:	f7ff fe02 	bl	80041ca <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80045c6:	bf00      	nop
 80045c8:	3710      	adds	r7, #16
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
	...

080045d0 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80045d0:	b590      	push	{r4, r7, lr}
 80045d2:	b087      	sub	sp, #28
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045d8:	2300      	movs	r3, #0
 80045da:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80045dc:	2300      	movs	r3, #0
 80045de:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d101      	bne.n	80045ee <HAL_ADCEx_Calibration_Start+0x1e>
 80045ea:	2302      	movs	r3, #2
 80045ec:	e097      	b.n	800471e <HAL_ADCEx_Calibration_Start+0x14e>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2201      	movs	r2, #1
 80045f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f7ff ff42 	bl	8004480 <ADC_ConversionStop_Disable>
 80045fc:	4603      	mov	r3, r0
 80045fe:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f7ff fee3 	bl	80043cc <ADC_Enable>
 8004606:	4603      	mov	r3, r0
 8004608:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 800460a:	7dfb      	ldrb	r3, [r7, #23]
 800460c:	2b00      	cmp	r3, #0
 800460e:	f040 8081 	bne.w	8004714 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004616:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800461a:	f023 0302 	bic.w	r3, r3, #2
 800461e:	f043 0202 	orr.w	r2, r3, #2
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8004626:	4b40      	ldr	r3, [pc, #256]	@ (8004728 <HAL_ADCEx_Calibration_Start+0x158>)
 8004628:	681c      	ldr	r4, [r3, #0]
 800462a:	2002      	movs	r0, #2
 800462c:	f002 fac4 	bl	8006bb8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004630:	4603      	mov	r3, r0
 8004632:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8004636:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8004638:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800463a:	e002      	b.n	8004642 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	3b01      	subs	r3, #1
 8004640:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1f9      	bne.n	800463c <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	689a      	ldr	r2, [r3, #8]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f042 0208 	orr.w	r2, r2, #8
 8004656:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8004658:	f7ff fb7e 	bl	8003d58 <HAL_GetTick>
 800465c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800465e:	e01b      	b.n	8004698 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004660:	f7ff fb7a 	bl	8003d58 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b0a      	cmp	r3, #10
 800466c:	d914      	bls.n	8004698 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f003 0308 	and.w	r3, r3, #8
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00d      	beq.n	8004698 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004680:	f023 0312 	bic.w	r3, r3, #18
 8004684:	f043 0210 	orr.w	r2, r3, #16
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e042      	b.n	800471e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f003 0308 	and.w	r3, r3, #8
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1dc      	bne.n	8004660 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689a      	ldr	r2, [r3, #8]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f042 0204 	orr.w	r2, r2, #4
 80046b4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80046b6:	f7ff fb4f 	bl	8003d58 <HAL_GetTick>
 80046ba:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80046bc:	e01b      	b.n	80046f6 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80046be:	f7ff fb4b 	bl	8003d58 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	2b0a      	cmp	r3, #10
 80046ca:	d914      	bls.n	80046f6 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f003 0304 	and.w	r3, r3, #4
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00d      	beq.n	80046f6 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046de:	f023 0312 	bic.w	r3, r3, #18
 80046e2:	f043 0210 	orr.w	r2, r3, #16
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e013      	b.n	800471e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f003 0304 	and.w	r3, r3, #4
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1dc      	bne.n	80046be <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004708:	f023 0303 	bic.w	r3, r3, #3
 800470c:	f043 0201 	orr.w	r2, r3, #1
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800471c:	7dfb      	ldrb	r3, [r7, #23]
}
 800471e:	4618      	mov	r0, r3
 8004720:	371c      	adds	r7, #28
 8004722:	46bd      	mov	sp, r7
 8004724:	bd90      	pop	{r4, r7, pc}
 8004726:	bf00      	nop
 8004728:	20000038 	.word	0x20000038

0800472c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f003 0307 	and.w	r3, r3, #7
 800473a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800473c:	4b0c      	ldr	r3, [pc, #48]	@ (8004770 <__NVIC_SetPriorityGrouping+0x44>)
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004748:	4013      	ands	r3, r2
 800474a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004754:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004758:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800475c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800475e:	4a04      	ldr	r2, [pc, #16]	@ (8004770 <__NVIC_SetPriorityGrouping+0x44>)
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	60d3      	str	r3, [r2, #12]
}
 8004764:	bf00      	nop
 8004766:	3714      	adds	r7, #20
 8004768:	46bd      	mov	sp, r7
 800476a:	bc80      	pop	{r7}
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	e000ed00 	.word	0xe000ed00

08004774 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004774:	b480      	push	{r7}
 8004776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004778:	4b04      	ldr	r3, [pc, #16]	@ (800478c <__NVIC_GetPriorityGrouping+0x18>)
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	0a1b      	lsrs	r3, r3, #8
 800477e:	f003 0307 	and.w	r3, r3, #7
}
 8004782:	4618      	mov	r0, r3
 8004784:	46bd      	mov	sp, r7
 8004786:	bc80      	pop	{r7}
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	e000ed00 	.word	0xe000ed00

08004790 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	4603      	mov	r3, r0
 8004798:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800479a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	db0b      	blt.n	80047ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047a2:	79fb      	ldrb	r3, [r7, #7]
 80047a4:	f003 021f 	and.w	r2, r3, #31
 80047a8:	4906      	ldr	r1, [pc, #24]	@ (80047c4 <__NVIC_EnableIRQ+0x34>)
 80047aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ae:	095b      	lsrs	r3, r3, #5
 80047b0:	2001      	movs	r0, #1
 80047b2:	fa00 f202 	lsl.w	r2, r0, r2
 80047b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80047ba:	bf00      	nop
 80047bc:	370c      	adds	r7, #12
 80047be:	46bd      	mov	sp, r7
 80047c0:	bc80      	pop	{r7}
 80047c2:	4770      	bx	lr
 80047c4:	e000e100 	.word	0xe000e100

080047c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	4603      	mov	r3, r0
 80047d0:	6039      	str	r1, [r7, #0]
 80047d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	db0a      	blt.n	80047f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	b2da      	uxtb	r2, r3
 80047e0:	490c      	ldr	r1, [pc, #48]	@ (8004814 <__NVIC_SetPriority+0x4c>)
 80047e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047e6:	0112      	lsls	r2, r2, #4
 80047e8:	b2d2      	uxtb	r2, r2
 80047ea:	440b      	add	r3, r1
 80047ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047f0:	e00a      	b.n	8004808 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	b2da      	uxtb	r2, r3
 80047f6:	4908      	ldr	r1, [pc, #32]	@ (8004818 <__NVIC_SetPriority+0x50>)
 80047f8:	79fb      	ldrb	r3, [r7, #7]
 80047fa:	f003 030f 	and.w	r3, r3, #15
 80047fe:	3b04      	subs	r3, #4
 8004800:	0112      	lsls	r2, r2, #4
 8004802:	b2d2      	uxtb	r2, r2
 8004804:	440b      	add	r3, r1
 8004806:	761a      	strb	r2, [r3, #24]
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	bc80      	pop	{r7}
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	e000e100 	.word	0xe000e100
 8004818:	e000ed00 	.word	0xe000ed00

0800481c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800481c:	b480      	push	{r7}
 800481e:	b089      	sub	sp, #36	@ 0x24
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f003 0307 	and.w	r3, r3, #7
 800482e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	f1c3 0307 	rsb	r3, r3, #7
 8004836:	2b04      	cmp	r3, #4
 8004838:	bf28      	it	cs
 800483a:	2304      	movcs	r3, #4
 800483c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	3304      	adds	r3, #4
 8004842:	2b06      	cmp	r3, #6
 8004844:	d902      	bls.n	800484c <NVIC_EncodePriority+0x30>
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	3b03      	subs	r3, #3
 800484a:	e000      	b.n	800484e <NVIC_EncodePriority+0x32>
 800484c:	2300      	movs	r3, #0
 800484e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004850:	f04f 32ff 	mov.w	r2, #4294967295
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	fa02 f303 	lsl.w	r3, r2, r3
 800485a:	43da      	mvns	r2, r3
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	401a      	ands	r2, r3
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004864:	f04f 31ff 	mov.w	r1, #4294967295
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	fa01 f303 	lsl.w	r3, r1, r3
 800486e:	43d9      	mvns	r1, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004874:	4313      	orrs	r3, r2
         );
}
 8004876:	4618      	mov	r0, r3
 8004878:	3724      	adds	r7, #36	@ 0x24
 800487a:	46bd      	mov	sp, r7
 800487c:	bc80      	pop	{r7}
 800487e:	4770      	bx	lr

08004880 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	3b01      	subs	r3, #1
 800488c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004890:	d301      	bcc.n	8004896 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004892:	2301      	movs	r3, #1
 8004894:	e00f      	b.n	80048b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004896:	4a0a      	ldr	r2, [pc, #40]	@ (80048c0 <SysTick_Config+0x40>)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	3b01      	subs	r3, #1
 800489c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800489e:	210f      	movs	r1, #15
 80048a0:	f04f 30ff 	mov.w	r0, #4294967295
 80048a4:	f7ff ff90 	bl	80047c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048a8:	4b05      	ldr	r3, [pc, #20]	@ (80048c0 <SysTick_Config+0x40>)
 80048aa:	2200      	movs	r2, #0
 80048ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048ae:	4b04      	ldr	r3, [pc, #16]	@ (80048c0 <SysTick_Config+0x40>)
 80048b0:	2207      	movs	r2, #7
 80048b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3708      	adds	r7, #8
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	e000e010 	.word	0xe000e010

080048c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f7ff ff2d 	bl	800472c <__NVIC_SetPriorityGrouping>
}
 80048d2:	bf00      	nop
 80048d4:	3708      	adds	r7, #8
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}

080048da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80048da:	b580      	push	{r7, lr}
 80048dc:	b086      	sub	sp, #24
 80048de:	af00      	add	r7, sp, #0
 80048e0:	4603      	mov	r3, r0
 80048e2:	60b9      	str	r1, [r7, #8]
 80048e4:	607a      	str	r2, [r7, #4]
 80048e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80048e8:	2300      	movs	r3, #0
 80048ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80048ec:	f7ff ff42 	bl	8004774 <__NVIC_GetPriorityGrouping>
 80048f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	68b9      	ldr	r1, [r7, #8]
 80048f6:	6978      	ldr	r0, [r7, #20]
 80048f8:	f7ff ff90 	bl	800481c <NVIC_EncodePriority>
 80048fc:	4602      	mov	r2, r0
 80048fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004902:	4611      	mov	r1, r2
 8004904:	4618      	mov	r0, r3
 8004906:	f7ff ff5f 	bl	80047c8 <__NVIC_SetPriority>
}
 800490a:	bf00      	nop
 800490c:	3718      	adds	r7, #24
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b082      	sub	sp, #8
 8004916:	af00      	add	r7, sp, #0
 8004918:	4603      	mov	r3, r0
 800491a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800491c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004920:	4618      	mov	r0, r3
 8004922:	f7ff ff35 	bl	8004790 <__NVIC_EnableIRQ>
}
 8004926:	bf00      	nop
 8004928:	3708      	adds	r7, #8
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800492e:	b580      	push	{r7, lr}
 8004930:	b082      	sub	sp, #8
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f7ff ffa2 	bl	8004880 <SysTick_Config>
 800493c:	4603      	mov	r3, r0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3708      	adds	r7, #8
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
	...

08004948 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004950:	2300      	movs	r3, #0
 8004952:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d101      	bne.n	800495e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e043      	b.n	80049e6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	461a      	mov	r2, r3
 8004964:	4b22      	ldr	r3, [pc, #136]	@ (80049f0 <HAL_DMA_Init+0xa8>)
 8004966:	4413      	add	r3, r2
 8004968:	4a22      	ldr	r2, [pc, #136]	@ (80049f4 <HAL_DMA_Init+0xac>)
 800496a:	fba2 2303 	umull	r2, r3, r2, r3
 800496e:	091b      	lsrs	r3, r3, #4
 8004970:	009a      	lsls	r2, r3, #2
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a1f      	ldr	r2, [pc, #124]	@ (80049f8 <HAL_DMA_Init+0xb0>)
 800497a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2202      	movs	r2, #2
 8004980:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004992:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004996:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80049a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	69db      	ldr	r3, [r3, #28]
 80049be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3714      	adds	r7, #20
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bc80      	pop	{r7}
 80049ee:	4770      	bx	lr
 80049f0:	bffdfff8 	.word	0xbffdfff8
 80049f4:	cccccccd 	.word	0xcccccccd
 80049f8:	40020000 	.word	0x40020000

080049fc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
 8004a08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d101      	bne.n	8004a1c <HAL_DMA_Start_IT+0x20>
 8004a18:	2302      	movs	r3, #2
 8004a1a:	e04b      	b.n	8004ab4 <HAL_DMA_Start_IT+0xb8>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d13a      	bne.n	8004aa6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2202      	movs	r2, #2
 8004a34:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f022 0201 	bic.w	r2, r2, #1
 8004a4c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	68b9      	ldr	r1, [r7, #8]
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f000 f9eb 	bl	8004e30 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d008      	beq.n	8004a74 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f042 020e 	orr.w	r2, r2, #14
 8004a70:	601a      	str	r2, [r3, #0]
 8004a72:	e00f      	b.n	8004a94 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f022 0204 	bic.w	r2, r2, #4
 8004a82:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f042 020a 	orr.w	r2, r2, #10
 8004a92:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f042 0201 	orr.w	r2, r2, #1
 8004aa2:	601a      	str	r2, [r3, #0]
 8004aa4:	e005      	b.n	8004ab2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004aae:	2302      	movs	r3, #2
 8004ab0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004ab2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3718      	adds	r7, #24
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d008      	beq.n	8004ae6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2204      	movs	r2, #4
 8004ad8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e020      	b.n	8004b28 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f022 020e 	bic.w	r2, r2, #14
 8004af4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f022 0201 	bic.w	r2, r2, #1
 8004b04:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b0e:	2101      	movs	r1, #1
 8004b10:	fa01 f202 	lsl.w	r2, r1, r2
 8004b14:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3714      	adds	r7, #20
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bc80      	pop	{r7}
 8004b30:	4770      	bx	lr
	...

08004b34 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d005      	beq.n	8004b58 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2204      	movs	r2, #4
 8004b50:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	73fb      	strb	r3, [r7, #15]
 8004b56:	e051      	b.n	8004bfc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f022 020e 	bic.w	r2, r2, #14
 8004b66:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f022 0201 	bic.w	r2, r2, #1
 8004b76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a22      	ldr	r2, [pc, #136]	@ (8004c08 <HAL_DMA_Abort_IT+0xd4>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d029      	beq.n	8004bd6 <HAL_DMA_Abort_IT+0xa2>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a21      	ldr	r2, [pc, #132]	@ (8004c0c <HAL_DMA_Abort_IT+0xd8>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d022      	beq.n	8004bd2 <HAL_DMA_Abort_IT+0x9e>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a1f      	ldr	r2, [pc, #124]	@ (8004c10 <HAL_DMA_Abort_IT+0xdc>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d01a      	beq.n	8004bcc <HAL_DMA_Abort_IT+0x98>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a1e      	ldr	r2, [pc, #120]	@ (8004c14 <HAL_DMA_Abort_IT+0xe0>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d012      	beq.n	8004bc6 <HAL_DMA_Abort_IT+0x92>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a1c      	ldr	r2, [pc, #112]	@ (8004c18 <HAL_DMA_Abort_IT+0xe4>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d00a      	beq.n	8004bc0 <HAL_DMA_Abort_IT+0x8c>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a1b      	ldr	r2, [pc, #108]	@ (8004c1c <HAL_DMA_Abort_IT+0xe8>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d102      	bne.n	8004bba <HAL_DMA_Abort_IT+0x86>
 8004bb4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004bb8:	e00e      	b.n	8004bd8 <HAL_DMA_Abort_IT+0xa4>
 8004bba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004bbe:	e00b      	b.n	8004bd8 <HAL_DMA_Abort_IT+0xa4>
 8004bc0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004bc4:	e008      	b.n	8004bd8 <HAL_DMA_Abort_IT+0xa4>
 8004bc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004bca:	e005      	b.n	8004bd8 <HAL_DMA_Abort_IT+0xa4>
 8004bcc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004bd0:	e002      	b.n	8004bd8 <HAL_DMA_Abort_IT+0xa4>
 8004bd2:	2310      	movs	r3, #16
 8004bd4:	e000      	b.n	8004bd8 <HAL_DMA_Abort_IT+0xa4>
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	4a11      	ldr	r2, [pc, #68]	@ (8004c20 <HAL_DMA_Abort_IT+0xec>)
 8004bda:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d003      	beq.n	8004bfc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	4798      	blx	r3
    } 
  }
  return status;
 8004bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	40020008 	.word	0x40020008
 8004c0c:	4002001c 	.word	0x4002001c
 8004c10:	40020030 	.word	0x40020030
 8004c14:	40020044 	.word	0x40020044
 8004c18:	40020058 	.word	0x40020058
 8004c1c:	4002006c 	.word	0x4002006c
 8004c20:	40020000 	.word	0x40020000

08004c24 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c40:	2204      	movs	r2, #4
 8004c42:	409a      	lsls	r2, r3
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	4013      	ands	r3, r2
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d04f      	beq.n	8004cec <HAL_DMA_IRQHandler+0xc8>
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	f003 0304 	and.w	r3, r3, #4
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d04a      	beq.n	8004cec <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0320 	and.w	r3, r3, #32
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d107      	bne.n	8004c74 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f022 0204 	bic.w	r2, r2, #4
 8004c72:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a66      	ldr	r2, [pc, #408]	@ (8004e14 <HAL_DMA_IRQHandler+0x1f0>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d029      	beq.n	8004cd2 <HAL_DMA_IRQHandler+0xae>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a65      	ldr	r2, [pc, #404]	@ (8004e18 <HAL_DMA_IRQHandler+0x1f4>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d022      	beq.n	8004cce <HAL_DMA_IRQHandler+0xaa>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a63      	ldr	r2, [pc, #396]	@ (8004e1c <HAL_DMA_IRQHandler+0x1f8>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d01a      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0xa4>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a62      	ldr	r2, [pc, #392]	@ (8004e20 <HAL_DMA_IRQHandler+0x1fc>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d012      	beq.n	8004cc2 <HAL_DMA_IRQHandler+0x9e>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a60      	ldr	r2, [pc, #384]	@ (8004e24 <HAL_DMA_IRQHandler+0x200>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d00a      	beq.n	8004cbc <HAL_DMA_IRQHandler+0x98>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a5f      	ldr	r2, [pc, #380]	@ (8004e28 <HAL_DMA_IRQHandler+0x204>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d102      	bne.n	8004cb6 <HAL_DMA_IRQHandler+0x92>
 8004cb0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004cb4:	e00e      	b.n	8004cd4 <HAL_DMA_IRQHandler+0xb0>
 8004cb6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004cba:	e00b      	b.n	8004cd4 <HAL_DMA_IRQHandler+0xb0>
 8004cbc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004cc0:	e008      	b.n	8004cd4 <HAL_DMA_IRQHandler+0xb0>
 8004cc2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004cc6:	e005      	b.n	8004cd4 <HAL_DMA_IRQHandler+0xb0>
 8004cc8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ccc:	e002      	b.n	8004cd4 <HAL_DMA_IRQHandler+0xb0>
 8004cce:	2340      	movs	r3, #64	@ 0x40
 8004cd0:	e000      	b.n	8004cd4 <HAL_DMA_IRQHandler+0xb0>
 8004cd2:	2304      	movs	r3, #4
 8004cd4:	4a55      	ldr	r2, [pc, #340]	@ (8004e2c <HAL_DMA_IRQHandler+0x208>)
 8004cd6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f000 8094 	beq.w	8004e0a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004cea:	e08e      	b.n	8004e0a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf0:	2202      	movs	r2, #2
 8004cf2:	409a      	lsls	r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d056      	beq.n	8004daa <HAL_DMA_IRQHandler+0x186>
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d051      	beq.n	8004daa <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0320 	and.w	r3, r3, #32
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d10b      	bne.n	8004d2c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f022 020a 	bic.w	r2, r2, #10
 8004d22:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a38      	ldr	r2, [pc, #224]	@ (8004e14 <HAL_DMA_IRQHandler+0x1f0>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d029      	beq.n	8004d8a <HAL_DMA_IRQHandler+0x166>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a37      	ldr	r2, [pc, #220]	@ (8004e18 <HAL_DMA_IRQHandler+0x1f4>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d022      	beq.n	8004d86 <HAL_DMA_IRQHandler+0x162>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a35      	ldr	r2, [pc, #212]	@ (8004e1c <HAL_DMA_IRQHandler+0x1f8>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d01a      	beq.n	8004d80 <HAL_DMA_IRQHandler+0x15c>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a34      	ldr	r2, [pc, #208]	@ (8004e20 <HAL_DMA_IRQHandler+0x1fc>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d012      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x156>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a32      	ldr	r2, [pc, #200]	@ (8004e24 <HAL_DMA_IRQHandler+0x200>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d00a      	beq.n	8004d74 <HAL_DMA_IRQHandler+0x150>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a31      	ldr	r2, [pc, #196]	@ (8004e28 <HAL_DMA_IRQHandler+0x204>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d102      	bne.n	8004d6e <HAL_DMA_IRQHandler+0x14a>
 8004d68:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004d6c:	e00e      	b.n	8004d8c <HAL_DMA_IRQHandler+0x168>
 8004d6e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d72:	e00b      	b.n	8004d8c <HAL_DMA_IRQHandler+0x168>
 8004d74:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004d78:	e008      	b.n	8004d8c <HAL_DMA_IRQHandler+0x168>
 8004d7a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004d7e:	e005      	b.n	8004d8c <HAL_DMA_IRQHandler+0x168>
 8004d80:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004d84:	e002      	b.n	8004d8c <HAL_DMA_IRQHandler+0x168>
 8004d86:	2320      	movs	r3, #32
 8004d88:	e000      	b.n	8004d8c <HAL_DMA_IRQHandler+0x168>
 8004d8a:	2302      	movs	r3, #2
 8004d8c:	4a27      	ldr	r2, [pc, #156]	@ (8004e2c <HAL_DMA_IRQHandler+0x208>)
 8004d8e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d034      	beq.n	8004e0a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004da8:	e02f      	b.n	8004e0a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dae:	2208      	movs	r2, #8
 8004db0:	409a      	lsls	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	4013      	ands	r3, r2
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d028      	beq.n	8004e0c <HAL_DMA_IRQHandler+0x1e8>
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	f003 0308 	and.w	r3, r3, #8
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d023      	beq.n	8004e0c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f022 020e 	bic.w	r2, r2, #14
 8004dd2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ddc:	2101      	movs	r1, #1
 8004dde:	fa01 f202 	lsl.w	r2, r1, r2
 8004de2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d004      	beq.n	8004e0c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	4798      	blx	r3
    }
  }
  return;
 8004e0a:	bf00      	nop
 8004e0c:	bf00      	nop
}
 8004e0e:	3710      	adds	r7, #16
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	40020008 	.word	0x40020008
 8004e18:	4002001c 	.word	0x4002001c
 8004e1c:	40020030 	.word	0x40020030
 8004e20:	40020044 	.word	0x40020044
 8004e24:	40020058 	.word	0x40020058
 8004e28:	4002006c 	.word	0x4002006c
 8004e2c:	40020000 	.word	0x40020000

08004e30 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b085      	sub	sp, #20
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]
 8004e3c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e46:	2101      	movs	r1, #1
 8004e48:	fa01 f202 	lsl.w	r2, r1, r2
 8004e4c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	683a      	ldr	r2, [r7, #0]
 8004e54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	2b10      	cmp	r3, #16
 8004e5c:	d108      	bne.n	8004e70 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68ba      	ldr	r2, [r7, #8]
 8004e6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004e6e:	e007      	b.n	8004e80 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68ba      	ldr	r2, [r7, #8]
 8004e76:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	60da      	str	r2, [r3, #12]
}
 8004e80:	bf00      	nop
 8004e82:	3714      	adds	r7, #20
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bc80      	pop	{r7}
 8004e88:	4770      	bx	lr
	...

08004e8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b08b      	sub	sp, #44	@ 0x2c
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004e96:	2300      	movs	r3, #0
 8004e98:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e9e:	e169      	b.n	8005174 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	69fa      	ldr	r2, [r7, #28]
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004eb4:	69ba      	ldr	r2, [r7, #24]
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	f040 8158 	bne.w	800516e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	4a9a      	ldr	r2, [pc, #616]	@ (800512c <HAL_GPIO_Init+0x2a0>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d05e      	beq.n	8004f86 <HAL_GPIO_Init+0xfa>
 8004ec8:	4a98      	ldr	r2, [pc, #608]	@ (800512c <HAL_GPIO_Init+0x2a0>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d875      	bhi.n	8004fba <HAL_GPIO_Init+0x12e>
 8004ece:	4a98      	ldr	r2, [pc, #608]	@ (8005130 <HAL_GPIO_Init+0x2a4>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d058      	beq.n	8004f86 <HAL_GPIO_Init+0xfa>
 8004ed4:	4a96      	ldr	r2, [pc, #600]	@ (8005130 <HAL_GPIO_Init+0x2a4>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d86f      	bhi.n	8004fba <HAL_GPIO_Init+0x12e>
 8004eda:	4a96      	ldr	r2, [pc, #600]	@ (8005134 <HAL_GPIO_Init+0x2a8>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d052      	beq.n	8004f86 <HAL_GPIO_Init+0xfa>
 8004ee0:	4a94      	ldr	r2, [pc, #592]	@ (8005134 <HAL_GPIO_Init+0x2a8>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d869      	bhi.n	8004fba <HAL_GPIO_Init+0x12e>
 8004ee6:	4a94      	ldr	r2, [pc, #592]	@ (8005138 <HAL_GPIO_Init+0x2ac>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d04c      	beq.n	8004f86 <HAL_GPIO_Init+0xfa>
 8004eec:	4a92      	ldr	r2, [pc, #584]	@ (8005138 <HAL_GPIO_Init+0x2ac>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d863      	bhi.n	8004fba <HAL_GPIO_Init+0x12e>
 8004ef2:	4a92      	ldr	r2, [pc, #584]	@ (800513c <HAL_GPIO_Init+0x2b0>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d046      	beq.n	8004f86 <HAL_GPIO_Init+0xfa>
 8004ef8:	4a90      	ldr	r2, [pc, #576]	@ (800513c <HAL_GPIO_Init+0x2b0>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d85d      	bhi.n	8004fba <HAL_GPIO_Init+0x12e>
 8004efe:	2b12      	cmp	r3, #18
 8004f00:	d82a      	bhi.n	8004f58 <HAL_GPIO_Init+0xcc>
 8004f02:	2b12      	cmp	r3, #18
 8004f04:	d859      	bhi.n	8004fba <HAL_GPIO_Init+0x12e>
 8004f06:	a201      	add	r2, pc, #4	@ (adr r2, 8004f0c <HAL_GPIO_Init+0x80>)
 8004f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f0c:	08004f87 	.word	0x08004f87
 8004f10:	08004f61 	.word	0x08004f61
 8004f14:	08004f73 	.word	0x08004f73
 8004f18:	08004fb5 	.word	0x08004fb5
 8004f1c:	08004fbb 	.word	0x08004fbb
 8004f20:	08004fbb 	.word	0x08004fbb
 8004f24:	08004fbb 	.word	0x08004fbb
 8004f28:	08004fbb 	.word	0x08004fbb
 8004f2c:	08004fbb 	.word	0x08004fbb
 8004f30:	08004fbb 	.word	0x08004fbb
 8004f34:	08004fbb 	.word	0x08004fbb
 8004f38:	08004fbb 	.word	0x08004fbb
 8004f3c:	08004fbb 	.word	0x08004fbb
 8004f40:	08004fbb 	.word	0x08004fbb
 8004f44:	08004fbb 	.word	0x08004fbb
 8004f48:	08004fbb 	.word	0x08004fbb
 8004f4c:	08004fbb 	.word	0x08004fbb
 8004f50:	08004f69 	.word	0x08004f69
 8004f54:	08004f7d 	.word	0x08004f7d
 8004f58:	4a79      	ldr	r2, [pc, #484]	@ (8005140 <HAL_GPIO_Init+0x2b4>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d013      	beq.n	8004f86 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004f5e:	e02c      	b.n	8004fba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	623b      	str	r3, [r7, #32]
          break;
 8004f66:	e029      	b.n	8004fbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	3304      	adds	r3, #4
 8004f6e:	623b      	str	r3, [r7, #32]
          break;
 8004f70:	e024      	b.n	8004fbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	3308      	adds	r3, #8
 8004f78:	623b      	str	r3, [r7, #32]
          break;
 8004f7a:	e01f      	b.n	8004fbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	330c      	adds	r3, #12
 8004f82:	623b      	str	r3, [r7, #32]
          break;
 8004f84:	e01a      	b.n	8004fbc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d102      	bne.n	8004f94 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004f8e:	2304      	movs	r3, #4
 8004f90:	623b      	str	r3, [r7, #32]
          break;
 8004f92:	e013      	b.n	8004fbc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d105      	bne.n	8004fa8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004f9c:	2308      	movs	r3, #8
 8004f9e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	69fa      	ldr	r2, [r7, #28]
 8004fa4:	611a      	str	r2, [r3, #16]
          break;
 8004fa6:	e009      	b.n	8004fbc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004fa8:	2308      	movs	r3, #8
 8004faa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	69fa      	ldr	r2, [r7, #28]
 8004fb0:	615a      	str	r2, [r3, #20]
          break;
 8004fb2:	e003      	b.n	8004fbc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	623b      	str	r3, [r7, #32]
          break;
 8004fb8:	e000      	b.n	8004fbc <HAL_GPIO_Init+0x130>
          break;
 8004fba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	2bff      	cmp	r3, #255	@ 0xff
 8004fc0:	d801      	bhi.n	8004fc6 <HAL_GPIO_Init+0x13a>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	e001      	b.n	8004fca <HAL_GPIO_Init+0x13e>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	3304      	adds	r3, #4
 8004fca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	2bff      	cmp	r3, #255	@ 0xff
 8004fd0:	d802      	bhi.n	8004fd8 <HAL_GPIO_Init+0x14c>
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	e002      	b.n	8004fde <HAL_GPIO_Init+0x152>
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fda:	3b08      	subs	r3, #8
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	210f      	movs	r1, #15
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8004fec:	43db      	mvns	r3, r3
 8004fee:	401a      	ands	r2, r3
 8004ff0:	6a39      	ldr	r1, [r7, #32]
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff8:	431a      	orrs	r2, r3
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005006:	2b00      	cmp	r3, #0
 8005008:	f000 80b1 	beq.w	800516e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800500c:	4b4d      	ldr	r3, [pc, #308]	@ (8005144 <HAL_GPIO_Init+0x2b8>)
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	4a4c      	ldr	r2, [pc, #304]	@ (8005144 <HAL_GPIO_Init+0x2b8>)
 8005012:	f043 0301 	orr.w	r3, r3, #1
 8005016:	6193      	str	r3, [r2, #24]
 8005018:	4b4a      	ldr	r3, [pc, #296]	@ (8005144 <HAL_GPIO_Init+0x2b8>)
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	f003 0301 	and.w	r3, r3, #1
 8005020:	60bb      	str	r3, [r7, #8]
 8005022:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005024:	4a48      	ldr	r2, [pc, #288]	@ (8005148 <HAL_GPIO_Init+0x2bc>)
 8005026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005028:	089b      	lsrs	r3, r3, #2
 800502a:	3302      	adds	r3, #2
 800502c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005030:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005034:	f003 0303 	and.w	r3, r3, #3
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	220f      	movs	r2, #15
 800503c:	fa02 f303 	lsl.w	r3, r2, r3
 8005040:	43db      	mvns	r3, r3
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	4013      	ands	r3, r2
 8005046:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a40      	ldr	r2, [pc, #256]	@ (800514c <HAL_GPIO_Init+0x2c0>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d013      	beq.n	8005078 <HAL_GPIO_Init+0x1ec>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a3f      	ldr	r2, [pc, #252]	@ (8005150 <HAL_GPIO_Init+0x2c4>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d00d      	beq.n	8005074 <HAL_GPIO_Init+0x1e8>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a3e      	ldr	r2, [pc, #248]	@ (8005154 <HAL_GPIO_Init+0x2c8>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d007      	beq.n	8005070 <HAL_GPIO_Init+0x1e4>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a3d      	ldr	r2, [pc, #244]	@ (8005158 <HAL_GPIO_Init+0x2cc>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d101      	bne.n	800506c <HAL_GPIO_Init+0x1e0>
 8005068:	2303      	movs	r3, #3
 800506a:	e006      	b.n	800507a <HAL_GPIO_Init+0x1ee>
 800506c:	2304      	movs	r3, #4
 800506e:	e004      	b.n	800507a <HAL_GPIO_Init+0x1ee>
 8005070:	2302      	movs	r3, #2
 8005072:	e002      	b.n	800507a <HAL_GPIO_Init+0x1ee>
 8005074:	2301      	movs	r3, #1
 8005076:	e000      	b.n	800507a <HAL_GPIO_Init+0x1ee>
 8005078:	2300      	movs	r3, #0
 800507a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800507c:	f002 0203 	and.w	r2, r2, #3
 8005080:	0092      	lsls	r2, r2, #2
 8005082:	4093      	lsls	r3, r2
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	4313      	orrs	r3, r2
 8005088:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800508a:	492f      	ldr	r1, [pc, #188]	@ (8005148 <HAL_GPIO_Init+0x2bc>)
 800508c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800508e:	089b      	lsrs	r3, r3, #2
 8005090:	3302      	adds	r3, #2
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d006      	beq.n	80050b2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80050a4:	4b2d      	ldr	r3, [pc, #180]	@ (800515c <HAL_GPIO_Init+0x2d0>)
 80050a6:	689a      	ldr	r2, [r3, #8]
 80050a8:	492c      	ldr	r1, [pc, #176]	@ (800515c <HAL_GPIO_Init+0x2d0>)
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	608b      	str	r3, [r1, #8]
 80050b0:	e006      	b.n	80050c0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80050b2:	4b2a      	ldr	r3, [pc, #168]	@ (800515c <HAL_GPIO_Init+0x2d0>)
 80050b4:	689a      	ldr	r2, [r3, #8]
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	43db      	mvns	r3, r3
 80050ba:	4928      	ldr	r1, [pc, #160]	@ (800515c <HAL_GPIO_Init+0x2d0>)
 80050bc:	4013      	ands	r3, r2
 80050be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d006      	beq.n	80050da <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80050cc:	4b23      	ldr	r3, [pc, #140]	@ (800515c <HAL_GPIO_Init+0x2d0>)
 80050ce:	68da      	ldr	r2, [r3, #12]
 80050d0:	4922      	ldr	r1, [pc, #136]	@ (800515c <HAL_GPIO_Init+0x2d0>)
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	60cb      	str	r3, [r1, #12]
 80050d8:	e006      	b.n	80050e8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80050da:	4b20      	ldr	r3, [pc, #128]	@ (800515c <HAL_GPIO_Init+0x2d0>)
 80050dc:	68da      	ldr	r2, [r3, #12]
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	43db      	mvns	r3, r3
 80050e2:	491e      	ldr	r1, [pc, #120]	@ (800515c <HAL_GPIO_Init+0x2d0>)
 80050e4:	4013      	ands	r3, r2
 80050e6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d006      	beq.n	8005102 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80050f4:	4b19      	ldr	r3, [pc, #100]	@ (800515c <HAL_GPIO_Init+0x2d0>)
 80050f6:	685a      	ldr	r2, [r3, #4]
 80050f8:	4918      	ldr	r1, [pc, #96]	@ (800515c <HAL_GPIO_Init+0x2d0>)
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	604b      	str	r3, [r1, #4]
 8005100:	e006      	b.n	8005110 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005102:	4b16      	ldr	r3, [pc, #88]	@ (800515c <HAL_GPIO_Init+0x2d0>)
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	43db      	mvns	r3, r3
 800510a:	4914      	ldr	r1, [pc, #80]	@ (800515c <HAL_GPIO_Init+0x2d0>)
 800510c:	4013      	ands	r3, r2
 800510e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d021      	beq.n	8005160 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800511c:	4b0f      	ldr	r3, [pc, #60]	@ (800515c <HAL_GPIO_Init+0x2d0>)
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	490e      	ldr	r1, [pc, #56]	@ (800515c <HAL_GPIO_Init+0x2d0>)
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	4313      	orrs	r3, r2
 8005126:	600b      	str	r3, [r1, #0]
 8005128:	e021      	b.n	800516e <HAL_GPIO_Init+0x2e2>
 800512a:	bf00      	nop
 800512c:	10320000 	.word	0x10320000
 8005130:	10310000 	.word	0x10310000
 8005134:	10220000 	.word	0x10220000
 8005138:	10210000 	.word	0x10210000
 800513c:	10120000 	.word	0x10120000
 8005140:	10110000 	.word	0x10110000
 8005144:	40021000 	.word	0x40021000
 8005148:	40010000 	.word	0x40010000
 800514c:	40010800 	.word	0x40010800
 8005150:	40010c00 	.word	0x40010c00
 8005154:	40011000 	.word	0x40011000
 8005158:	40011400 	.word	0x40011400
 800515c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005160:	4b0b      	ldr	r3, [pc, #44]	@ (8005190 <HAL_GPIO_Init+0x304>)
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	43db      	mvns	r3, r3
 8005168:	4909      	ldr	r1, [pc, #36]	@ (8005190 <HAL_GPIO_Init+0x304>)
 800516a:	4013      	ands	r3, r2
 800516c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800516e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005170:	3301      	adds	r3, #1
 8005172:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517a:	fa22 f303 	lsr.w	r3, r2, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	f47f ae8e 	bne.w	8004ea0 <HAL_GPIO_Init+0x14>
  }
}
 8005184:	bf00      	nop
 8005186:	bf00      	nop
 8005188:	372c      	adds	r7, #44	@ 0x2c
 800518a:	46bd      	mov	sp, r7
 800518c:	bc80      	pop	{r7}
 800518e:	4770      	bx	lr
 8005190:	40010400 	.word	0x40010400

08005194 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	460b      	mov	r3, r1
 800519e:	807b      	strh	r3, [r7, #2]
 80051a0:	4613      	mov	r3, r2
 80051a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80051a4:	787b      	ldrb	r3, [r7, #1]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d003      	beq.n	80051b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80051aa:	887a      	ldrh	r2, [r7, #2]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80051b0:	e003      	b.n	80051ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80051b2:	887b      	ldrh	r3, [r7, #2]
 80051b4:	041a      	lsls	r2, r3, #16
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	611a      	str	r2, [r3, #16]
}
 80051ba:	bf00      	nop
 80051bc:	370c      	adds	r7, #12
 80051be:	46bd      	mov	sp, r7
 80051c0:	bc80      	pop	{r7}
 80051c2:	4770      	bx	lr

080051c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d101      	bne.n	80051d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e12b      	b.n	800542e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d106      	bne.n	80051f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f7fb ff80 	bl	80010f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2224      	movs	r2, #36	@ 0x24
 80051f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f022 0201 	bic.w	r2, r2, #1
 8005206:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005216:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005226:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005228:	f001 fbca 	bl	80069c0 <HAL_RCC_GetPCLK1Freq>
 800522c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	4a81      	ldr	r2, [pc, #516]	@ (8005438 <HAL_I2C_Init+0x274>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d807      	bhi.n	8005248 <HAL_I2C_Init+0x84>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	4a80      	ldr	r2, [pc, #512]	@ (800543c <HAL_I2C_Init+0x278>)
 800523c:	4293      	cmp	r3, r2
 800523e:	bf94      	ite	ls
 8005240:	2301      	movls	r3, #1
 8005242:	2300      	movhi	r3, #0
 8005244:	b2db      	uxtb	r3, r3
 8005246:	e006      	b.n	8005256 <HAL_I2C_Init+0x92>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	4a7d      	ldr	r2, [pc, #500]	@ (8005440 <HAL_I2C_Init+0x27c>)
 800524c:	4293      	cmp	r3, r2
 800524e:	bf94      	ite	ls
 8005250:	2301      	movls	r3, #1
 8005252:	2300      	movhi	r3, #0
 8005254:	b2db      	uxtb	r3, r3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d001      	beq.n	800525e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e0e7      	b.n	800542e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	4a78      	ldr	r2, [pc, #480]	@ (8005444 <HAL_I2C_Init+0x280>)
 8005262:	fba2 2303 	umull	r2, r3, r2, r3
 8005266:	0c9b      	lsrs	r3, r3, #18
 8005268:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68ba      	ldr	r2, [r7, #8]
 800527a:	430a      	orrs	r2, r1
 800527c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	6a1b      	ldr	r3, [r3, #32]
 8005284:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	4a6a      	ldr	r2, [pc, #424]	@ (8005438 <HAL_I2C_Init+0x274>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d802      	bhi.n	8005298 <HAL_I2C_Init+0xd4>
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	3301      	adds	r3, #1
 8005296:	e009      	b.n	80052ac <HAL_I2C_Init+0xe8>
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800529e:	fb02 f303 	mul.w	r3, r2, r3
 80052a2:	4a69      	ldr	r2, [pc, #420]	@ (8005448 <HAL_I2C_Init+0x284>)
 80052a4:	fba2 2303 	umull	r2, r3, r2, r3
 80052a8:	099b      	lsrs	r3, r3, #6
 80052aa:	3301      	adds	r3, #1
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	6812      	ldr	r2, [r2, #0]
 80052b0:	430b      	orrs	r3, r1
 80052b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	69db      	ldr	r3, [r3, #28]
 80052ba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80052be:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	495c      	ldr	r1, [pc, #368]	@ (8005438 <HAL_I2C_Init+0x274>)
 80052c8:	428b      	cmp	r3, r1
 80052ca:	d819      	bhi.n	8005300 <HAL_I2C_Init+0x13c>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	1e59      	subs	r1, r3, #1
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	005b      	lsls	r3, r3, #1
 80052d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80052da:	1c59      	adds	r1, r3, #1
 80052dc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80052e0:	400b      	ands	r3, r1
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00a      	beq.n	80052fc <HAL_I2C_Init+0x138>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	1e59      	subs	r1, r3, #1
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	005b      	lsls	r3, r3, #1
 80052f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80052f4:	3301      	adds	r3, #1
 80052f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052fa:	e051      	b.n	80053a0 <HAL_I2C_Init+0x1dc>
 80052fc:	2304      	movs	r3, #4
 80052fe:	e04f      	b.n	80053a0 <HAL_I2C_Init+0x1dc>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d111      	bne.n	800532c <HAL_I2C_Init+0x168>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	1e58      	subs	r0, r3, #1
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6859      	ldr	r1, [r3, #4]
 8005310:	460b      	mov	r3, r1
 8005312:	005b      	lsls	r3, r3, #1
 8005314:	440b      	add	r3, r1
 8005316:	fbb0 f3f3 	udiv	r3, r0, r3
 800531a:	3301      	adds	r3, #1
 800531c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005320:	2b00      	cmp	r3, #0
 8005322:	bf0c      	ite	eq
 8005324:	2301      	moveq	r3, #1
 8005326:	2300      	movne	r3, #0
 8005328:	b2db      	uxtb	r3, r3
 800532a:	e012      	b.n	8005352 <HAL_I2C_Init+0x18e>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	1e58      	subs	r0, r3, #1
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6859      	ldr	r1, [r3, #4]
 8005334:	460b      	mov	r3, r1
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	440b      	add	r3, r1
 800533a:	0099      	lsls	r1, r3, #2
 800533c:	440b      	add	r3, r1
 800533e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005342:	3301      	adds	r3, #1
 8005344:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005348:	2b00      	cmp	r3, #0
 800534a:	bf0c      	ite	eq
 800534c:	2301      	moveq	r3, #1
 800534e:	2300      	movne	r3, #0
 8005350:	b2db      	uxtb	r3, r3
 8005352:	2b00      	cmp	r3, #0
 8005354:	d001      	beq.n	800535a <HAL_I2C_Init+0x196>
 8005356:	2301      	movs	r3, #1
 8005358:	e022      	b.n	80053a0 <HAL_I2C_Init+0x1dc>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d10e      	bne.n	8005380 <HAL_I2C_Init+0x1bc>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	1e58      	subs	r0, r3, #1
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6859      	ldr	r1, [r3, #4]
 800536a:	460b      	mov	r3, r1
 800536c:	005b      	lsls	r3, r3, #1
 800536e:	440b      	add	r3, r1
 8005370:	fbb0 f3f3 	udiv	r3, r0, r3
 8005374:	3301      	adds	r3, #1
 8005376:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800537a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800537e:	e00f      	b.n	80053a0 <HAL_I2C_Init+0x1dc>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	1e58      	subs	r0, r3, #1
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6859      	ldr	r1, [r3, #4]
 8005388:	460b      	mov	r3, r1
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	440b      	add	r3, r1
 800538e:	0099      	lsls	r1, r3, #2
 8005390:	440b      	add	r3, r1
 8005392:	fbb0 f3f3 	udiv	r3, r0, r3
 8005396:	3301      	adds	r3, #1
 8005398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800539c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80053a0:	6879      	ldr	r1, [r7, #4]
 80053a2:	6809      	ldr	r1, [r1, #0]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	69da      	ldr	r2, [r3, #28]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a1b      	ldr	r3, [r3, #32]
 80053ba:	431a      	orrs	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	430a      	orrs	r2, r1
 80053c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80053ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	6911      	ldr	r1, [r2, #16]
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	68d2      	ldr	r2, [r2, #12]
 80053da:	4311      	orrs	r1, r2
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	6812      	ldr	r2, [r2, #0]
 80053e0:	430b      	orrs	r3, r1
 80053e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	695a      	ldr	r2, [r3, #20]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	431a      	orrs	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	430a      	orrs	r2, r1
 80053fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f042 0201 	orr.w	r2, r2, #1
 800540e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2220      	movs	r2, #32
 800541a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	000186a0 	.word	0x000186a0
 800543c:	001e847f 	.word	0x001e847f
 8005440:	003d08ff 	.word	0x003d08ff
 8005444:	431bde83 	.word	0x431bde83
 8005448:	10624dd3 	.word	0x10624dd3

0800544c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b088      	sub	sp, #32
 8005450:	af02      	add	r7, sp, #8
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	607a      	str	r2, [r7, #4]
 8005456:	461a      	mov	r2, r3
 8005458:	460b      	mov	r3, r1
 800545a:	817b      	strh	r3, [r7, #10]
 800545c:	4613      	mov	r3, r2
 800545e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005460:	f7fe fc7a 	bl	8003d58 <HAL_GetTick>
 8005464:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800546c:	b2db      	uxtb	r3, r3
 800546e:	2b20      	cmp	r3, #32
 8005470:	f040 80e0 	bne.w	8005634 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	9300      	str	r3, [sp, #0]
 8005478:	2319      	movs	r3, #25
 800547a:	2201      	movs	r2, #1
 800547c:	4970      	ldr	r1, [pc, #448]	@ (8005640 <HAL_I2C_Master_Transmit+0x1f4>)
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	f000 fc9e 	bl	8005dc0 <I2C_WaitOnFlagUntilTimeout>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d001      	beq.n	800548e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800548a:	2302      	movs	r3, #2
 800548c:	e0d3      	b.n	8005636 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005494:	2b01      	cmp	r3, #1
 8005496:	d101      	bne.n	800549c <HAL_I2C_Master_Transmit+0x50>
 8005498:	2302      	movs	r3, #2
 800549a:	e0cc      	b.n	8005636 <HAL_I2C_Master_Transmit+0x1ea>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0301 	and.w	r3, r3, #1
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d007      	beq.n	80054c2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f042 0201 	orr.w	r2, r2, #1
 80054c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2221      	movs	r2, #33	@ 0x21
 80054d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2210      	movs	r2, #16
 80054de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	893a      	ldrh	r2, [r7, #8]
 80054f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054f8:	b29a      	uxth	r2, r3
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	4a50      	ldr	r2, [pc, #320]	@ (8005644 <HAL_I2C_Master_Transmit+0x1f8>)
 8005502:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005504:	8979      	ldrh	r1, [r7, #10]
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	6a3a      	ldr	r2, [r7, #32]
 800550a:	68f8      	ldr	r0, [r7, #12]
 800550c:	f000 fb08 	bl	8005b20 <I2C_MasterRequestWrite>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d001      	beq.n	800551a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e08d      	b.n	8005636 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800551a:	2300      	movs	r3, #0
 800551c:	613b      	str	r3, [r7, #16]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	695b      	ldr	r3, [r3, #20]
 8005524:	613b      	str	r3, [r7, #16]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	613b      	str	r3, [r7, #16]
 800552e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005530:	e066      	b.n	8005600 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005532:	697a      	ldr	r2, [r7, #20]
 8005534:	6a39      	ldr	r1, [r7, #32]
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f000 fd5c 	bl	8005ff4 <I2C_WaitOnTXEFlagUntilTimeout>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00d      	beq.n	800555e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005546:	2b04      	cmp	r3, #4
 8005548:	d107      	bne.n	800555a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005558:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e06b      	b.n	8005636 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005562:	781a      	ldrb	r2, [r3, #0]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800556e:	1c5a      	adds	r2, r3, #1
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005578:	b29b      	uxth	r3, r3
 800557a:	3b01      	subs	r3, #1
 800557c:	b29a      	uxth	r2, r3
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005586:	3b01      	subs	r3, #1
 8005588:	b29a      	uxth	r2, r3
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	695b      	ldr	r3, [r3, #20]
 8005594:	f003 0304 	and.w	r3, r3, #4
 8005598:	2b04      	cmp	r3, #4
 800559a:	d11b      	bne.n	80055d4 <HAL_I2C_Master_Transmit+0x188>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d017      	beq.n	80055d4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055a8:	781a      	ldrb	r2, [r3, #0]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b4:	1c5a      	adds	r2, r3, #1
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055be:	b29b      	uxth	r3, r3
 80055c0:	3b01      	subs	r3, #1
 80055c2:	b29a      	uxth	r2, r3
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055cc:	3b01      	subs	r3, #1
 80055ce:	b29a      	uxth	r2, r3
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055d4:	697a      	ldr	r2, [r7, #20]
 80055d6:	6a39      	ldr	r1, [r7, #32]
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	f000 fd53 	bl	8006084 <I2C_WaitOnBTFFlagUntilTimeout>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d00d      	beq.n	8005600 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e8:	2b04      	cmp	r3, #4
 80055ea:	d107      	bne.n	80055fc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055fa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e01a      	b.n	8005636 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005604:	2b00      	cmp	r3, #0
 8005606:	d194      	bne.n	8005532 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005616:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2220      	movs	r2, #32
 800561c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2200      	movs	r2, #0
 8005624:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005630:	2300      	movs	r3, #0
 8005632:	e000      	b.n	8005636 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005634:	2302      	movs	r3, #2
  }
}
 8005636:	4618      	mov	r0, r3
 8005638:	3718      	adds	r7, #24
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	00100002 	.word	0x00100002
 8005644:	ffff0000 	.word	0xffff0000

08005648 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b08c      	sub	sp, #48	@ 0x30
 800564c:	af02      	add	r7, sp, #8
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	607a      	str	r2, [r7, #4]
 8005652:	461a      	mov	r2, r3
 8005654:	460b      	mov	r3, r1
 8005656:	817b      	strh	r3, [r7, #10]
 8005658:	4613      	mov	r3, r2
 800565a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800565c:	2300      	movs	r3, #0
 800565e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005660:	f7fe fb7a 	bl	8003d58 <HAL_GetTick>
 8005664:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b20      	cmp	r3, #32
 8005670:	f040 824b 	bne.w	8005b0a <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005676:	9300      	str	r3, [sp, #0]
 8005678:	2319      	movs	r3, #25
 800567a:	2201      	movs	r2, #1
 800567c:	497f      	ldr	r1, [pc, #508]	@ (800587c <HAL_I2C_Master_Receive+0x234>)
 800567e:	68f8      	ldr	r0, [r7, #12]
 8005680:	f000 fb9e 	bl	8005dc0 <I2C_WaitOnFlagUntilTimeout>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d001      	beq.n	800568e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800568a:	2302      	movs	r3, #2
 800568c:	e23e      	b.n	8005b0c <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005694:	2b01      	cmp	r3, #1
 8005696:	d101      	bne.n	800569c <HAL_I2C_Master_Receive+0x54>
 8005698:	2302      	movs	r3, #2
 800569a:	e237      	b.n	8005b0c <HAL_I2C_Master_Receive+0x4c4>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0301 	and.w	r3, r3, #1
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d007      	beq.n	80056c2 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f042 0201 	orr.w	r2, r2, #1
 80056c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2222      	movs	r2, #34	@ 0x22
 80056d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2210      	movs	r2, #16
 80056de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	893a      	ldrh	r2, [r7, #8]
 80056f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	4a5f      	ldr	r2, [pc, #380]	@ (8005880 <HAL_I2C_Master_Receive+0x238>)
 8005702:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005704:	8979      	ldrh	r1, [r7, #10]
 8005706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005708:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f000 fa8a 	bl	8005c24 <I2C_MasterRequestRead>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d001      	beq.n	800571a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e1f8      	b.n	8005b0c <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800571e:	2b00      	cmp	r3, #0
 8005720:	d113      	bne.n	800574a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005722:	2300      	movs	r3, #0
 8005724:	61fb      	str	r3, [r7, #28]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	695b      	ldr	r3, [r3, #20]
 800572c:	61fb      	str	r3, [r7, #28]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	61fb      	str	r3, [r7, #28]
 8005736:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005746:	601a      	str	r2, [r3, #0]
 8005748:	e1cc      	b.n	8005ae4 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800574e:	2b01      	cmp	r3, #1
 8005750:	d11e      	bne.n	8005790 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005760:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005762:	b672      	cpsid	i
}
 8005764:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005766:	2300      	movs	r3, #0
 8005768:	61bb      	str	r3, [r7, #24]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	695b      	ldr	r3, [r3, #20]
 8005770:	61bb      	str	r3, [r7, #24]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	699b      	ldr	r3, [r3, #24]
 8005778:	61bb      	str	r3, [r7, #24]
 800577a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800578a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800578c:	b662      	cpsie	i
}
 800578e:	e035      	b.n	80057fc <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005794:	2b02      	cmp	r3, #2
 8005796:	d11e      	bne.n	80057d6 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057a6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80057a8:	b672      	cpsid	i
}
 80057aa:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057ac:	2300      	movs	r3, #0
 80057ae:	617b      	str	r3, [r7, #20]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	695b      	ldr	r3, [r3, #20]
 80057b6:	617b      	str	r3, [r7, #20]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	617b      	str	r3, [r7, #20]
 80057c0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80057d2:	b662      	cpsie	i
}
 80057d4:	e012      	b.n	80057fc <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80057e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057e6:	2300      	movs	r3, #0
 80057e8:	613b      	str	r3, [r7, #16]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	695b      	ldr	r3, [r3, #20]
 80057f0:	613b      	str	r3, [r7, #16]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	699b      	ldr	r3, [r3, #24]
 80057f8:	613b      	str	r3, [r7, #16]
 80057fa:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80057fc:	e172      	b.n	8005ae4 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005802:	2b03      	cmp	r3, #3
 8005804:	f200 811f 	bhi.w	8005a46 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800580c:	2b01      	cmp	r3, #1
 800580e:	d123      	bne.n	8005858 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005810:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005812:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f000 fc7d 	bl	8006114 <I2C_WaitOnRXNEFlagUntilTimeout>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d001      	beq.n	8005824 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e173      	b.n	8005b0c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	691a      	ldr	r2, [r3, #16]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800582e:	b2d2      	uxtb	r2, r2
 8005830:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005836:	1c5a      	adds	r2, r3, #1
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005840:	3b01      	subs	r3, #1
 8005842:	b29a      	uxth	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800584c:	b29b      	uxth	r3, r3
 800584e:	3b01      	subs	r3, #1
 8005850:	b29a      	uxth	r2, r3
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005856:	e145      	b.n	8005ae4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800585c:	2b02      	cmp	r3, #2
 800585e:	d152      	bne.n	8005906 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005862:	9300      	str	r3, [sp, #0]
 8005864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005866:	2200      	movs	r2, #0
 8005868:	4906      	ldr	r1, [pc, #24]	@ (8005884 <HAL_I2C_Master_Receive+0x23c>)
 800586a:	68f8      	ldr	r0, [r7, #12]
 800586c:	f000 faa8 	bl	8005dc0 <I2C_WaitOnFlagUntilTimeout>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d008      	beq.n	8005888 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e148      	b.n	8005b0c <HAL_I2C_Master_Receive+0x4c4>
 800587a:	bf00      	nop
 800587c:	00100002 	.word	0x00100002
 8005880:	ffff0000 	.word	0xffff0000
 8005884:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005888:	b672      	cpsid	i
}
 800588a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800589a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	691a      	ldr	r2, [r3, #16]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058a6:	b2d2      	uxtb	r2, r2
 80058a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ae:	1c5a      	adds	r2, r3, #1
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058b8:	3b01      	subs	r3, #1
 80058ba:	b29a      	uxth	r2, r3
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	3b01      	subs	r3, #1
 80058c8:	b29a      	uxth	r2, r3
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80058ce:	b662      	cpsie	i
}
 80058d0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	691a      	ldr	r2, [r3, #16]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058dc:	b2d2      	uxtb	r2, r2
 80058de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e4:	1c5a      	adds	r2, r3, #1
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058ee:	3b01      	subs	r3, #1
 80058f0:	b29a      	uxth	r2, r3
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	3b01      	subs	r3, #1
 80058fe:	b29a      	uxth	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005904:	e0ee      	b.n	8005ae4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005908:	9300      	str	r3, [sp, #0]
 800590a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800590c:	2200      	movs	r2, #0
 800590e:	4981      	ldr	r1, [pc, #516]	@ (8005b14 <HAL_I2C_Master_Receive+0x4cc>)
 8005910:	68f8      	ldr	r0, [r7, #12]
 8005912:	f000 fa55 	bl	8005dc0 <I2C_WaitOnFlagUntilTimeout>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d001      	beq.n	8005920 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e0f5      	b.n	8005b0c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800592e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005930:	b672      	cpsid	i
}
 8005932:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	691a      	ldr	r2, [r3, #16]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800593e:	b2d2      	uxtb	r2, r2
 8005940:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005946:	1c5a      	adds	r2, r3, #1
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005950:	3b01      	subs	r3, #1
 8005952:	b29a      	uxth	r2, r3
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800595c:	b29b      	uxth	r3, r3
 800595e:	3b01      	subs	r3, #1
 8005960:	b29a      	uxth	r2, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005966:	4b6c      	ldr	r3, [pc, #432]	@ (8005b18 <HAL_I2C_Master_Receive+0x4d0>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	08db      	lsrs	r3, r3, #3
 800596c:	4a6b      	ldr	r2, [pc, #428]	@ (8005b1c <HAL_I2C_Master_Receive+0x4d4>)
 800596e:	fba2 2303 	umull	r2, r3, r2, r3
 8005972:	0a1a      	lsrs	r2, r3, #8
 8005974:	4613      	mov	r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4413      	add	r3, r2
 800597a:	00da      	lsls	r2, r3, #3
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005980:	6a3b      	ldr	r3, [r7, #32]
 8005982:	3b01      	subs	r3, #1
 8005984:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005986:	6a3b      	ldr	r3, [r7, #32]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d118      	bne.n	80059be <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2220      	movs	r2, #32
 8005996:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a6:	f043 0220 	orr.w	r2, r3, #32
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80059ae:	b662      	cpsie	i
}
 80059b0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e0a6      	b.n	8005b0c <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	695b      	ldr	r3, [r3, #20]
 80059c4:	f003 0304 	and.w	r3, r3, #4
 80059c8:	2b04      	cmp	r3, #4
 80059ca:	d1d9      	bne.n	8005980 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	691a      	ldr	r2, [r3, #16]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e6:	b2d2      	uxtb	r2, r2
 80059e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ee:	1c5a      	adds	r2, r3, #1
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059f8:	3b01      	subs	r3, #1
 80059fa:	b29a      	uxth	r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	3b01      	subs	r3, #1
 8005a08:	b29a      	uxth	r2, r3
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005a0e:	b662      	cpsie	i
}
 8005a10:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	691a      	ldr	r2, [r3, #16]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a1c:	b2d2      	uxtb	r2, r2
 8005a1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a24:	1c5a      	adds	r2, r3, #1
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	3b01      	subs	r3, #1
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005a44:	e04e      	b.n	8005ae4 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a48:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005a4a:	68f8      	ldr	r0, [r7, #12]
 8005a4c:	f000 fb62 	bl	8006114 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d001      	beq.n	8005a5a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e058      	b.n	8005b0c <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	691a      	ldr	r2, [r3, #16]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a64:	b2d2      	uxtb	r2, r2
 8005a66:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a6c:	1c5a      	adds	r2, r3, #1
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a76:	3b01      	subs	r3, #1
 8005a78:	b29a      	uxth	r2, r3
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	3b01      	subs	r3, #1
 8005a86:	b29a      	uxth	r2, r3
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	f003 0304 	and.w	r3, r3, #4
 8005a96:	2b04      	cmp	r3, #4
 8005a98:	d124      	bne.n	8005ae4 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a9e:	2b03      	cmp	r3, #3
 8005aa0:	d107      	bne.n	8005ab2 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ab0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	691a      	ldr	r2, [r3, #16]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005abc:	b2d2      	uxtb	r2, r2
 8005abe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac4:	1c5a      	adds	r2, r3, #1
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	3b01      	subs	r3, #1
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	f47f ae88 	bne.w	80057fe <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2220      	movs	r2, #32
 8005af2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005b06:	2300      	movs	r3, #0
 8005b08:	e000      	b.n	8005b0c <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8005b0a:	2302      	movs	r3, #2
  }
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3728      	adds	r7, #40	@ 0x28
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	00010004 	.word	0x00010004
 8005b18:	20000038 	.word	0x20000038
 8005b1c:	14f8b589 	.word	0x14f8b589

08005b20 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b088      	sub	sp, #32
 8005b24:	af02      	add	r7, sp, #8
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	607a      	str	r2, [r7, #4]
 8005b2a:	603b      	str	r3, [r7, #0]
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b34:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	2b08      	cmp	r3, #8
 8005b3a:	d006      	beq.n	8005b4a <I2C_MasterRequestWrite+0x2a>
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d003      	beq.n	8005b4a <I2C_MasterRequestWrite+0x2a>
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005b48:	d108      	bne.n	8005b5c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b58:	601a      	str	r2, [r3, #0]
 8005b5a:	e00b      	b.n	8005b74 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b60:	2b12      	cmp	r3, #18
 8005b62:	d107      	bne.n	8005b74 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b72:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	9300      	str	r3, [sp, #0]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f000 f91d 	bl	8005dc0 <I2C_WaitOnFlagUntilTimeout>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d00d      	beq.n	8005ba8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b9a:	d103      	bne.n	8005ba4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ba2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e035      	b.n	8005c14 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005bb0:	d108      	bne.n	8005bc4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005bb2:	897b      	ldrh	r3, [r7, #10]
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005bc0:	611a      	str	r2, [r3, #16]
 8005bc2:	e01b      	b.n	8005bfc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005bc4:	897b      	ldrh	r3, [r7, #10]
 8005bc6:	11db      	asrs	r3, r3, #7
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	f003 0306 	and.w	r3, r3, #6
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	f063 030f 	orn	r3, r3, #15
 8005bd4:	b2da      	uxtb	r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	490e      	ldr	r1, [pc, #56]	@ (8005c1c <I2C_MasterRequestWrite+0xfc>)
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	f000 f966 	bl	8005eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d001      	beq.n	8005bf2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e010      	b.n	8005c14 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005bf2:	897b      	ldrh	r3, [r7, #10]
 8005bf4:	b2da      	uxtb	r2, r3
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	4907      	ldr	r1, [pc, #28]	@ (8005c20 <I2C_MasterRequestWrite+0x100>)
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	f000 f956 	bl	8005eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d001      	beq.n	8005c12 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e000      	b.n	8005c14 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3718      	adds	r7, #24
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	00010008 	.word	0x00010008
 8005c20:	00010002 	.word	0x00010002

08005c24 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b088      	sub	sp, #32
 8005c28:	af02      	add	r7, sp, #8
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	607a      	str	r2, [r7, #4]
 8005c2e:	603b      	str	r3, [r7, #0]
 8005c30:	460b      	mov	r3, r1
 8005c32:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c38:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005c48:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	2b08      	cmp	r3, #8
 8005c4e:	d006      	beq.n	8005c5e <I2C_MasterRequestRead+0x3a>
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d003      	beq.n	8005c5e <I2C_MasterRequestRead+0x3a>
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005c5c:	d108      	bne.n	8005c70 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c6c:	601a      	str	r2, [r3, #0]
 8005c6e:	e00b      	b.n	8005c88 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c74:	2b11      	cmp	r3, #17
 8005c76:	d107      	bne.n	8005c88 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c86:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	9300      	str	r3, [sp, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005c94:	68f8      	ldr	r0, [r7, #12]
 8005c96:	f000 f893 	bl	8005dc0 <I2C_WaitOnFlagUntilTimeout>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d00d      	beq.n	8005cbc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005caa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cae:	d103      	bne.n	8005cb8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cb6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e079      	b.n	8005db0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005cc4:	d108      	bne.n	8005cd8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005cc6:	897b      	ldrh	r3, [r7, #10]
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	f043 0301 	orr.w	r3, r3, #1
 8005cce:	b2da      	uxtb	r2, r3
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	611a      	str	r2, [r3, #16]
 8005cd6:	e05f      	b.n	8005d98 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005cd8:	897b      	ldrh	r3, [r7, #10]
 8005cda:	11db      	asrs	r3, r3, #7
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	f003 0306 	and.w	r3, r3, #6
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	f063 030f 	orn	r3, r3, #15
 8005ce8:	b2da      	uxtb	r2, r3
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	4930      	ldr	r1, [pc, #192]	@ (8005db8 <I2C_MasterRequestRead+0x194>)
 8005cf6:	68f8      	ldr	r0, [r7, #12]
 8005cf8:	f000 f8dc 	bl	8005eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d001      	beq.n	8005d06 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e054      	b.n	8005db0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005d06:	897b      	ldrh	r3, [r7, #10]
 8005d08:	b2da      	uxtb	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	4929      	ldr	r1, [pc, #164]	@ (8005dbc <I2C_MasterRequestRead+0x198>)
 8005d16:	68f8      	ldr	r0, [r7, #12]
 8005d18:	f000 f8cc 	bl	8005eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d001      	beq.n	8005d26 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e044      	b.n	8005db0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d26:	2300      	movs	r3, #0
 8005d28:	613b      	str	r3, [r7, #16]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	695b      	ldr	r3, [r3, #20]
 8005d30:	613b      	str	r3, [r7, #16]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	699b      	ldr	r3, [r3, #24]
 8005d38:	613b      	str	r3, [r7, #16]
 8005d3a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d4a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	9300      	str	r3, [sp, #0]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	f000 f831 	bl	8005dc0 <I2C_WaitOnFlagUntilTimeout>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00d      	beq.n	8005d80 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d72:	d103      	bne.n	8005d7c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d7a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e017      	b.n	8005db0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005d80:	897b      	ldrh	r3, [r7, #10]
 8005d82:	11db      	asrs	r3, r3, #7
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	f003 0306 	and.w	r3, r3, #6
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	f063 030e 	orn	r3, r3, #14
 8005d90:	b2da      	uxtb	r2, r3
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	4907      	ldr	r1, [pc, #28]	@ (8005dbc <I2C_MasterRequestRead+0x198>)
 8005d9e:	68f8      	ldr	r0, [r7, #12]
 8005da0:	f000 f888 	bl	8005eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d001      	beq.n	8005dae <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e000      	b.n	8005db0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3718      	adds	r7, #24
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	00010008 	.word	0x00010008
 8005dbc:	00010002 	.word	0x00010002

08005dc0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	603b      	str	r3, [r7, #0]
 8005dcc:	4613      	mov	r3, r2
 8005dce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005dd0:	e048      	b.n	8005e64 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd8:	d044      	beq.n	8005e64 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dda:	f7fd ffbd 	bl	8003d58 <HAL_GetTick>
 8005dde:	4602      	mov	r2, r0
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	683a      	ldr	r2, [r7, #0]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d302      	bcc.n	8005df0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d139      	bne.n	8005e64 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	0c1b      	lsrs	r3, r3, #16
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d10d      	bne.n	8005e16 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	695b      	ldr	r3, [r3, #20]
 8005e00:	43da      	mvns	r2, r3
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	4013      	ands	r3, r2
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	bf0c      	ite	eq
 8005e0c:	2301      	moveq	r3, #1
 8005e0e:	2300      	movne	r3, #0
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	461a      	mov	r2, r3
 8005e14:	e00c      	b.n	8005e30 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	43da      	mvns	r2, r3
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	4013      	ands	r3, r2
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	bf0c      	ite	eq
 8005e28:	2301      	moveq	r3, #1
 8005e2a:	2300      	movne	r3, #0
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	461a      	mov	r2, r3
 8005e30:	79fb      	ldrb	r3, [r7, #7]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d116      	bne.n	8005e64 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2220      	movs	r2, #32
 8005e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e50:	f043 0220 	orr.w	r2, r3, #32
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e023      	b.n	8005eac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	0c1b      	lsrs	r3, r3, #16
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d10d      	bne.n	8005e8a <I2C_WaitOnFlagUntilTimeout+0xca>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	695b      	ldr	r3, [r3, #20]
 8005e74:	43da      	mvns	r2, r3
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	4013      	ands	r3, r2
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	bf0c      	ite	eq
 8005e80:	2301      	moveq	r3, #1
 8005e82:	2300      	movne	r3, #0
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	461a      	mov	r2, r3
 8005e88:	e00c      	b.n	8005ea4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	43da      	mvns	r2, r3
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	4013      	ands	r3, r2
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	bf0c      	ite	eq
 8005e9c:	2301      	moveq	r3, #1
 8005e9e:	2300      	movne	r3, #0
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	79fb      	ldrb	r3, [r7, #7]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d093      	beq.n	8005dd2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3710      	adds	r7, #16
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	607a      	str	r2, [r7, #4]
 8005ec0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ec2:	e071      	b.n	8005fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	695b      	ldr	r3, [r3, #20]
 8005eca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ece:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ed2:	d123      	bne.n	8005f1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ee2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005eec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2220      	movs	r2, #32
 8005ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f08:	f043 0204 	orr.w	r2, r3, #4
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e067      	b.n	8005fec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f22:	d041      	beq.n	8005fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f24:	f7fd ff18 	bl	8003d58 <HAL_GetTick>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d302      	bcc.n	8005f3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d136      	bne.n	8005fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	0c1b      	lsrs	r3, r3, #16
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d10c      	bne.n	8005f5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	695b      	ldr	r3, [r3, #20]
 8005f4a:	43da      	mvns	r2, r3
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	4013      	ands	r3, r2
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	bf14      	ite	ne
 8005f56:	2301      	movne	r3, #1
 8005f58:	2300      	moveq	r3, #0
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	e00b      	b.n	8005f76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	699b      	ldr	r3, [r3, #24]
 8005f64:	43da      	mvns	r2, r3
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	4013      	ands	r3, r2
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	bf14      	ite	ne
 8005f70:	2301      	movne	r3, #1
 8005f72:	2300      	moveq	r3, #0
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d016      	beq.n	8005fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2220      	movs	r2, #32
 8005f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f94:	f043 0220 	orr.w	r2, r3, #32
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e021      	b.n	8005fec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	0c1b      	lsrs	r3, r3, #16
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d10c      	bne.n	8005fcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	695b      	ldr	r3, [r3, #20]
 8005fb8:	43da      	mvns	r2, r3
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	bf14      	ite	ne
 8005fc4:	2301      	movne	r3, #1
 8005fc6:	2300      	moveq	r3, #0
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	e00b      	b.n	8005fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	43da      	mvns	r2, r3
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	bf14      	ite	ne
 8005fde:	2301      	movne	r3, #1
 8005fe0:	2300      	moveq	r3, #0
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f47f af6d 	bne.w	8005ec4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005fea:	2300      	movs	r3, #0
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3710      	adds	r7, #16
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006000:	e034      	b.n	800606c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006002:	68f8      	ldr	r0, [r7, #12]
 8006004:	f000 f8e3 	bl	80061ce <I2C_IsAcknowledgeFailed>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d001      	beq.n	8006012 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	e034      	b.n	800607c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006018:	d028      	beq.n	800606c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800601a:	f7fd fe9d 	bl	8003d58 <HAL_GetTick>
 800601e:	4602      	mov	r2, r0
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	68ba      	ldr	r2, [r7, #8]
 8006026:	429a      	cmp	r2, r3
 8006028:	d302      	bcc.n	8006030 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d11d      	bne.n	800606c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	695b      	ldr	r3, [r3, #20]
 8006036:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800603a:	2b80      	cmp	r3, #128	@ 0x80
 800603c:	d016      	beq.n	800606c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2200      	movs	r2, #0
 8006042:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2220      	movs	r2, #32
 8006048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2200      	movs	r2, #0
 8006050:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006058:	f043 0220 	orr.w	r2, r3, #32
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e007      	b.n	800607c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	695b      	ldr	r3, [r3, #20]
 8006072:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006076:	2b80      	cmp	r3, #128	@ 0x80
 8006078:	d1c3      	bne.n	8006002 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3710      	adds	r7, #16
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006090:	e034      	b.n	80060fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	f000 f89b 	bl	80061ce <I2C_IsAcknowledgeFailed>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d001      	beq.n	80060a2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e034      	b.n	800610c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a8:	d028      	beq.n	80060fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060aa:	f7fd fe55 	bl	8003d58 <HAL_GetTick>
 80060ae:	4602      	mov	r2, r0
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	68ba      	ldr	r2, [r7, #8]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d302      	bcc.n	80060c0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d11d      	bne.n	80060fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	695b      	ldr	r3, [r3, #20]
 80060c6:	f003 0304 	and.w	r3, r3, #4
 80060ca:	2b04      	cmp	r3, #4
 80060cc:	d016      	beq.n	80060fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2200      	movs	r2, #0
 80060d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2220      	movs	r2, #32
 80060d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060e8:	f043 0220 	orr.w	r2, r3, #32
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e007      	b.n	800610c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	695b      	ldr	r3, [r3, #20]
 8006102:	f003 0304 	and.w	r3, r3, #4
 8006106:	2b04      	cmp	r3, #4
 8006108:	d1c3      	bne.n	8006092 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800610a:	2300      	movs	r3, #0
}
 800610c:	4618      	mov	r0, r3
 800610e:	3710      	adds	r7, #16
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006120:	e049      	b.n	80061b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	695b      	ldr	r3, [r3, #20]
 8006128:	f003 0310 	and.w	r3, r3, #16
 800612c:	2b10      	cmp	r3, #16
 800612e:	d119      	bne.n	8006164 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f06f 0210 	mvn.w	r2, #16
 8006138:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2200      	movs	r2, #0
 800613e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2220      	movs	r2, #32
 8006144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2200      	movs	r2, #0
 800614c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2200      	movs	r2, #0
 800615c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	e030      	b.n	80061c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006164:	f7fd fdf8 	bl	8003d58 <HAL_GetTick>
 8006168:	4602      	mov	r2, r0
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	68ba      	ldr	r2, [r7, #8]
 8006170:	429a      	cmp	r2, r3
 8006172:	d302      	bcc.n	800617a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d11d      	bne.n	80061b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	695b      	ldr	r3, [r3, #20]
 8006180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006184:	2b40      	cmp	r3, #64	@ 0x40
 8006186:	d016      	beq.n	80061b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2220      	movs	r2, #32
 8006192:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2200      	movs	r2, #0
 800619a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061a2:	f043 0220 	orr.w	r2, r3, #32
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e007      	b.n	80061c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	695b      	ldr	r3, [r3, #20]
 80061bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061c0:	2b40      	cmp	r3, #64	@ 0x40
 80061c2:	d1ae      	bne.n	8006122 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3710      	adds	r7, #16
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80061ce:	b480      	push	{r7}
 80061d0:	b083      	sub	sp, #12
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	695b      	ldr	r3, [r3, #20]
 80061dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061e4:	d11b      	bne.n	800621e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80061ee:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2220      	movs	r2, #32
 80061fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800620a:	f043 0204 	orr.w	r2, r3, #4
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e000      	b.n	8006220 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800621e:	2300      	movs	r3, #0
}
 8006220:	4618      	mov	r0, r3
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	bc80      	pop	{r7}
 8006228:	4770      	bx	lr
	...

0800622c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b086      	sub	sp, #24
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d101      	bne.n	800623e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e272      	b.n	8006724 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0301 	and.w	r3, r3, #1
 8006246:	2b00      	cmp	r3, #0
 8006248:	f000 8087 	beq.w	800635a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800624c:	4b92      	ldr	r3, [pc, #584]	@ (8006498 <HAL_RCC_OscConfig+0x26c>)
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	f003 030c 	and.w	r3, r3, #12
 8006254:	2b04      	cmp	r3, #4
 8006256:	d00c      	beq.n	8006272 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006258:	4b8f      	ldr	r3, [pc, #572]	@ (8006498 <HAL_RCC_OscConfig+0x26c>)
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	f003 030c 	and.w	r3, r3, #12
 8006260:	2b08      	cmp	r3, #8
 8006262:	d112      	bne.n	800628a <HAL_RCC_OscConfig+0x5e>
 8006264:	4b8c      	ldr	r3, [pc, #560]	@ (8006498 <HAL_RCC_OscConfig+0x26c>)
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800626c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006270:	d10b      	bne.n	800628a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006272:	4b89      	ldr	r3, [pc, #548]	@ (8006498 <HAL_RCC_OscConfig+0x26c>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800627a:	2b00      	cmp	r3, #0
 800627c:	d06c      	beq.n	8006358 <HAL_RCC_OscConfig+0x12c>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d168      	bne.n	8006358 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e24c      	b.n	8006724 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006292:	d106      	bne.n	80062a2 <HAL_RCC_OscConfig+0x76>
 8006294:	4b80      	ldr	r3, [pc, #512]	@ (8006498 <HAL_RCC_OscConfig+0x26c>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a7f      	ldr	r2, [pc, #508]	@ (8006498 <HAL_RCC_OscConfig+0x26c>)
 800629a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800629e:	6013      	str	r3, [r2, #0]
 80062a0:	e02e      	b.n	8006300 <HAL_RCC_OscConfig+0xd4>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d10c      	bne.n	80062c4 <HAL_RCC_OscConfig+0x98>
 80062aa:	4b7b      	ldr	r3, [pc, #492]	@ (8006498 <HAL_RCC_OscConfig+0x26c>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a7a      	ldr	r2, [pc, #488]	@ (8006498 <HAL_RCC_OscConfig+0x26c>)
 80062b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062b4:	6013      	str	r3, [r2, #0]
 80062b6:	4b78      	ldr	r3, [pc, #480]	@ (8006498 <HAL_RCC_OscConfig+0x26c>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a77      	ldr	r2, [pc, #476]	@ (8006498 <HAL_RCC_OscConfig+0x26c>)
 80062bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80062c0:	6013      	str	r3, [r2, #0]
 80062c2:	e01d      	b.n	8006300 <HAL_RCC_OscConfig+0xd4>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80062cc:	d10c      	bne.n	80062e8 <HAL_RCC_OscConfig+0xbc>
 80062ce:	4b72      	ldr	r3, [pc, #456]	@ (8006498 <HAL_RCC_OscConfig+0x26c>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a71      	ldr	r2, [pc, #452]	@ (8006498 <HAL_RCC_OscConfig+0x26c>)
 80062d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80062d8:	6013      	str	r3, [r2, #0]
 80062da:	4b6f      	ldr	r3, [pc, #444]	@ (8006498 <HAL_RCC_OscConfig+0x26c>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a6e      	ldr	r2, [pc, #440]	@ (8006498 <HAL_RCC_OscConfig+0x26c>)
 80062e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062e4:	6013      	str	r3, [r2, #0]
 80062e6:	e00b      	b.n	8006300 <HAL_RCC_OscConfig+0xd4>
 80062e8:	4b6b      	ldr	r3, [pc, #428]	@ (8006498 <HAL_RCC_OscConfig+0x26c>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a6a      	ldr	r2, [pc, #424]	@ (8006498 <HAL_RCC_OscConfig+0x26c>)
 80062ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062f2:	6013      	str	r3, [r2, #0]
 80062f4:	4b68      	ldr	r3, [pc, #416]	@ (8006498 <HAL_RCC_OscConfig+0x26c>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a67      	ldr	r2, [pc, #412]	@ (8006498 <HAL_RCC_OscConfig+0x26c>)
 80062fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80062fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d013      	beq.n	8006330 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006308:	f7fd fd26 	bl	8003d58 <HAL_GetTick>
 800630c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800630e:	e008      	b.n	8006322 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006310:	f7fd fd22 	bl	8003d58 <HAL_GetTick>
 8006314:	4602      	mov	r2, r0
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	2b64      	cmp	r3, #100	@ 0x64
 800631c:	d901      	bls.n	8006322 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800631e:	2303      	movs	r3, #3
 8006320:	e200      	b.n	8006724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006322:	4b5d      	ldr	r3, [pc, #372]	@ (8006498 <HAL_RCC_OscConfig+0x26c>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800632a:	2b00      	cmp	r3, #0
 800632c:	d0f0      	beq.n	8006310 <HAL_RCC_OscConfig+0xe4>
 800632e:	e014      	b.n	800635a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006330:	f7fd fd12 	bl	8003d58 <HAL_GetTick>
 8006334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006336:	e008      	b.n	800634a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006338:	f7fd fd0e 	bl	8003d58 <HAL_GetTick>
 800633c:	4602      	mov	r2, r0
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	2b64      	cmp	r3, #100	@ 0x64
 8006344:	d901      	bls.n	800634a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	e1ec      	b.n	8006724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800634a:	4b53      	ldr	r3, [pc, #332]	@ (8006498 <HAL_RCC_OscConfig+0x26c>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1f0      	bne.n	8006338 <HAL_RCC_OscConfig+0x10c>
 8006356:	e000      	b.n	800635a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006358:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 0302 	and.w	r3, r3, #2
 8006362:	2b00      	cmp	r3, #0
 8006364:	d063      	beq.n	800642e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006366:	4b4c      	ldr	r3, [pc, #304]	@ (8006498 <HAL_RCC_OscConfig+0x26c>)
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	f003 030c 	and.w	r3, r3, #12
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00b      	beq.n	800638a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006372:	4b49      	ldr	r3, [pc, #292]	@ (8006498 <HAL_RCC_OscConfig+0x26c>)
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	f003 030c 	and.w	r3, r3, #12
 800637a:	2b08      	cmp	r3, #8
 800637c:	d11c      	bne.n	80063b8 <HAL_RCC_OscConfig+0x18c>
 800637e:	4b46      	ldr	r3, [pc, #280]	@ (8006498 <HAL_RCC_OscConfig+0x26c>)
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d116      	bne.n	80063b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800638a:	4b43      	ldr	r3, [pc, #268]	@ (8006498 <HAL_RCC_OscConfig+0x26c>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0302 	and.w	r3, r3, #2
 8006392:	2b00      	cmp	r3, #0
 8006394:	d005      	beq.n	80063a2 <HAL_RCC_OscConfig+0x176>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	2b01      	cmp	r3, #1
 800639c:	d001      	beq.n	80063a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e1c0      	b.n	8006724 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063a2:	4b3d      	ldr	r3, [pc, #244]	@ (8006498 <HAL_RCC_OscConfig+0x26c>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	00db      	lsls	r3, r3, #3
 80063b0:	4939      	ldr	r1, [pc, #228]	@ (8006498 <HAL_RCC_OscConfig+0x26c>)
 80063b2:	4313      	orrs	r3, r2
 80063b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063b6:	e03a      	b.n	800642e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d020      	beq.n	8006402 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063c0:	4b36      	ldr	r3, [pc, #216]	@ (800649c <HAL_RCC_OscConfig+0x270>)
 80063c2:	2201      	movs	r2, #1
 80063c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063c6:	f7fd fcc7 	bl	8003d58 <HAL_GetTick>
 80063ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063cc:	e008      	b.n	80063e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063ce:	f7fd fcc3 	bl	8003d58 <HAL_GetTick>
 80063d2:	4602      	mov	r2, r0
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	1ad3      	subs	r3, r2, r3
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d901      	bls.n	80063e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80063dc:	2303      	movs	r3, #3
 80063de:	e1a1      	b.n	8006724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063e0:	4b2d      	ldr	r3, [pc, #180]	@ (8006498 <HAL_RCC_OscConfig+0x26c>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 0302 	and.w	r3, r3, #2
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d0f0      	beq.n	80063ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063ec:	4b2a      	ldr	r3, [pc, #168]	@ (8006498 <HAL_RCC_OscConfig+0x26c>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	695b      	ldr	r3, [r3, #20]
 80063f8:	00db      	lsls	r3, r3, #3
 80063fa:	4927      	ldr	r1, [pc, #156]	@ (8006498 <HAL_RCC_OscConfig+0x26c>)
 80063fc:	4313      	orrs	r3, r2
 80063fe:	600b      	str	r3, [r1, #0]
 8006400:	e015      	b.n	800642e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006402:	4b26      	ldr	r3, [pc, #152]	@ (800649c <HAL_RCC_OscConfig+0x270>)
 8006404:	2200      	movs	r2, #0
 8006406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006408:	f7fd fca6 	bl	8003d58 <HAL_GetTick>
 800640c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800640e:	e008      	b.n	8006422 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006410:	f7fd fca2 	bl	8003d58 <HAL_GetTick>
 8006414:	4602      	mov	r2, r0
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	2b02      	cmp	r3, #2
 800641c:	d901      	bls.n	8006422 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800641e:	2303      	movs	r3, #3
 8006420:	e180      	b.n	8006724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006422:	4b1d      	ldr	r3, [pc, #116]	@ (8006498 <HAL_RCC_OscConfig+0x26c>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 0302 	and.w	r3, r3, #2
 800642a:	2b00      	cmp	r3, #0
 800642c:	d1f0      	bne.n	8006410 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0308 	and.w	r3, r3, #8
 8006436:	2b00      	cmp	r3, #0
 8006438:	d03a      	beq.n	80064b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	699b      	ldr	r3, [r3, #24]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d019      	beq.n	8006476 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006442:	4b17      	ldr	r3, [pc, #92]	@ (80064a0 <HAL_RCC_OscConfig+0x274>)
 8006444:	2201      	movs	r2, #1
 8006446:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006448:	f7fd fc86 	bl	8003d58 <HAL_GetTick>
 800644c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800644e:	e008      	b.n	8006462 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006450:	f7fd fc82 	bl	8003d58 <HAL_GetTick>
 8006454:	4602      	mov	r2, r0
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	2b02      	cmp	r3, #2
 800645c:	d901      	bls.n	8006462 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800645e:	2303      	movs	r3, #3
 8006460:	e160      	b.n	8006724 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006462:	4b0d      	ldr	r3, [pc, #52]	@ (8006498 <HAL_RCC_OscConfig+0x26c>)
 8006464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006466:	f003 0302 	and.w	r3, r3, #2
 800646a:	2b00      	cmp	r3, #0
 800646c:	d0f0      	beq.n	8006450 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800646e:	2001      	movs	r0, #1
 8006470:	f000 face 	bl	8006a10 <RCC_Delay>
 8006474:	e01c      	b.n	80064b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006476:	4b0a      	ldr	r3, [pc, #40]	@ (80064a0 <HAL_RCC_OscConfig+0x274>)
 8006478:	2200      	movs	r2, #0
 800647a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800647c:	f7fd fc6c 	bl	8003d58 <HAL_GetTick>
 8006480:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006482:	e00f      	b.n	80064a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006484:	f7fd fc68 	bl	8003d58 <HAL_GetTick>
 8006488:	4602      	mov	r2, r0
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	2b02      	cmp	r3, #2
 8006490:	d908      	bls.n	80064a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	e146      	b.n	8006724 <HAL_RCC_OscConfig+0x4f8>
 8006496:	bf00      	nop
 8006498:	40021000 	.word	0x40021000
 800649c:	42420000 	.word	0x42420000
 80064a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064a4:	4b92      	ldr	r3, [pc, #584]	@ (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 80064a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a8:	f003 0302 	and.w	r3, r3, #2
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d1e9      	bne.n	8006484 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 0304 	and.w	r3, r3, #4
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	f000 80a6 	beq.w	800660a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064be:	2300      	movs	r3, #0
 80064c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064c2:	4b8b      	ldr	r3, [pc, #556]	@ (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 80064c4:	69db      	ldr	r3, [r3, #28]
 80064c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d10d      	bne.n	80064ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064ce:	4b88      	ldr	r3, [pc, #544]	@ (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 80064d0:	69db      	ldr	r3, [r3, #28]
 80064d2:	4a87      	ldr	r2, [pc, #540]	@ (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 80064d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064d8:	61d3      	str	r3, [r2, #28]
 80064da:	4b85      	ldr	r3, [pc, #532]	@ (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 80064dc:	69db      	ldr	r3, [r3, #28]
 80064de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064e2:	60bb      	str	r3, [r7, #8]
 80064e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064e6:	2301      	movs	r3, #1
 80064e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064ea:	4b82      	ldr	r3, [pc, #520]	@ (80066f4 <HAL_RCC_OscConfig+0x4c8>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d118      	bne.n	8006528 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80064f6:	4b7f      	ldr	r3, [pc, #508]	@ (80066f4 <HAL_RCC_OscConfig+0x4c8>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a7e      	ldr	r2, [pc, #504]	@ (80066f4 <HAL_RCC_OscConfig+0x4c8>)
 80064fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006500:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006502:	f7fd fc29 	bl	8003d58 <HAL_GetTick>
 8006506:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006508:	e008      	b.n	800651c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800650a:	f7fd fc25 	bl	8003d58 <HAL_GetTick>
 800650e:	4602      	mov	r2, r0
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	2b64      	cmp	r3, #100	@ 0x64
 8006516:	d901      	bls.n	800651c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006518:	2303      	movs	r3, #3
 800651a:	e103      	b.n	8006724 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800651c:	4b75      	ldr	r3, [pc, #468]	@ (80066f4 <HAL_RCC_OscConfig+0x4c8>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006524:	2b00      	cmp	r3, #0
 8006526:	d0f0      	beq.n	800650a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	2b01      	cmp	r3, #1
 800652e:	d106      	bne.n	800653e <HAL_RCC_OscConfig+0x312>
 8006530:	4b6f      	ldr	r3, [pc, #444]	@ (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 8006532:	6a1b      	ldr	r3, [r3, #32]
 8006534:	4a6e      	ldr	r2, [pc, #440]	@ (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 8006536:	f043 0301 	orr.w	r3, r3, #1
 800653a:	6213      	str	r3, [r2, #32]
 800653c:	e02d      	b.n	800659a <HAL_RCC_OscConfig+0x36e>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d10c      	bne.n	8006560 <HAL_RCC_OscConfig+0x334>
 8006546:	4b6a      	ldr	r3, [pc, #424]	@ (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	4a69      	ldr	r2, [pc, #420]	@ (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 800654c:	f023 0301 	bic.w	r3, r3, #1
 8006550:	6213      	str	r3, [r2, #32]
 8006552:	4b67      	ldr	r3, [pc, #412]	@ (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 8006554:	6a1b      	ldr	r3, [r3, #32]
 8006556:	4a66      	ldr	r2, [pc, #408]	@ (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 8006558:	f023 0304 	bic.w	r3, r3, #4
 800655c:	6213      	str	r3, [r2, #32]
 800655e:	e01c      	b.n	800659a <HAL_RCC_OscConfig+0x36e>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	2b05      	cmp	r3, #5
 8006566:	d10c      	bne.n	8006582 <HAL_RCC_OscConfig+0x356>
 8006568:	4b61      	ldr	r3, [pc, #388]	@ (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 800656a:	6a1b      	ldr	r3, [r3, #32]
 800656c:	4a60      	ldr	r2, [pc, #384]	@ (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 800656e:	f043 0304 	orr.w	r3, r3, #4
 8006572:	6213      	str	r3, [r2, #32]
 8006574:	4b5e      	ldr	r3, [pc, #376]	@ (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 8006576:	6a1b      	ldr	r3, [r3, #32]
 8006578:	4a5d      	ldr	r2, [pc, #372]	@ (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 800657a:	f043 0301 	orr.w	r3, r3, #1
 800657e:	6213      	str	r3, [r2, #32]
 8006580:	e00b      	b.n	800659a <HAL_RCC_OscConfig+0x36e>
 8006582:	4b5b      	ldr	r3, [pc, #364]	@ (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 8006584:	6a1b      	ldr	r3, [r3, #32]
 8006586:	4a5a      	ldr	r2, [pc, #360]	@ (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 8006588:	f023 0301 	bic.w	r3, r3, #1
 800658c:	6213      	str	r3, [r2, #32]
 800658e:	4b58      	ldr	r3, [pc, #352]	@ (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 8006590:	6a1b      	ldr	r3, [r3, #32]
 8006592:	4a57      	ldr	r2, [pc, #348]	@ (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 8006594:	f023 0304 	bic.w	r3, r3, #4
 8006598:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d015      	beq.n	80065ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065a2:	f7fd fbd9 	bl	8003d58 <HAL_GetTick>
 80065a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065a8:	e00a      	b.n	80065c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065aa:	f7fd fbd5 	bl	8003d58 <HAL_GetTick>
 80065ae:	4602      	mov	r2, r0
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	1ad3      	subs	r3, r2, r3
 80065b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d901      	bls.n	80065c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80065bc:	2303      	movs	r3, #3
 80065be:	e0b1      	b.n	8006724 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065c0:	4b4b      	ldr	r3, [pc, #300]	@ (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 80065c2:	6a1b      	ldr	r3, [r3, #32]
 80065c4:	f003 0302 	and.w	r3, r3, #2
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d0ee      	beq.n	80065aa <HAL_RCC_OscConfig+0x37e>
 80065cc:	e014      	b.n	80065f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065ce:	f7fd fbc3 	bl	8003d58 <HAL_GetTick>
 80065d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065d4:	e00a      	b.n	80065ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065d6:	f7fd fbbf 	bl	8003d58 <HAL_GetTick>
 80065da:	4602      	mov	r2, r0
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	1ad3      	subs	r3, r2, r3
 80065e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d901      	bls.n	80065ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80065e8:	2303      	movs	r3, #3
 80065ea:	e09b      	b.n	8006724 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065ec:	4b40      	ldr	r3, [pc, #256]	@ (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 80065ee:	6a1b      	ldr	r3, [r3, #32]
 80065f0:	f003 0302 	and.w	r3, r3, #2
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d1ee      	bne.n	80065d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80065f8:	7dfb      	ldrb	r3, [r7, #23]
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d105      	bne.n	800660a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065fe:	4b3c      	ldr	r3, [pc, #240]	@ (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 8006600:	69db      	ldr	r3, [r3, #28]
 8006602:	4a3b      	ldr	r2, [pc, #236]	@ (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 8006604:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006608:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	69db      	ldr	r3, [r3, #28]
 800660e:	2b00      	cmp	r3, #0
 8006610:	f000 8087 	beq.w	8006722 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006614:	4b36      	ldr	r3, [pc, #216]	@ (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	f003 030c 	and.w	r3, r3, #12
 800661c:	2b08      	cmp	r3, #8
 800661e:	d061      	beq.n	80066e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	69db      	ldr	r3, [r3, #28]
 8006624:	2b02      	cmp	r3, #2
 8006626:	d146      	bne.n	80066b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006628:	4b33      	ldr	r3, [pc, #204]	@ (80066f8 <HAL_RCC_OscConfig+0x4cc>)
 800662a:	2200      	movs	r2, #0
 800662c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800662e:	f7fd fb93 	bl	8003d58 <HAL_GetTick>
 8006632:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006634:	e008      	b.n	8006648 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006636:	f7fd fb8f 	bl	8003d58 <HAL_GetTick>
 800663a:	4602      	mov	r2, r0
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	1ad3      	subs	r3, r2, r3
 8006640:	2b02      	cmp	r3, #2
 8006642:	d901      	bls.n	8006648 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006644:	2303      	movs	r3, #3
 8006646:	e06d      	b.n	8006724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006648:	4b29      	ldr	r3, [pc, #164]	@ (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006650:	2b00      	cmp	r3, #0
 8006652:	d1f0      	bne.n	8006636 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6a1b      	ldr	r3, [r3, #32]
 8006658:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800665c:	d108      	bne.n	8006670 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800665e:	4b24      	ldr	r3, [pc, #144]	@ (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	4921      	ldr	r1, [pc, #132]	@ (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 800666c:	4313      	orrs	r3, r2
 800666e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006670:	4b1f      	ldr	r3, [pc, #124]	@ (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6a19      	ldr	r1, [r3, #32]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006680:	430b      	orrs	r3, r1
 8006682:	491b      	ldr	r1, [pc, #108]	@ (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 8006684:	4313      	orrs	r3, r2
 8006686:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006688:	4b1b      	ldr	r3, [pc, #108]	@ (80066f8 <HAL_RCC_OscConfig+0x4cc>)
 800668a:	2201      	movs	r2, #1
 800668c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800668e:	f7fd fb63 	bl	8003d58 <HAL_GetTick>
 8006692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006694:	e008      	b.n	80066a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006696:	f7fd fb5f 	bl	8003d58 <HAL_GetTick>
 800669a:	4602      	mov	r2, r0
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d901      	bls.n	80066a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80066a4:	2303      	movs	r3, #3
 80066a6:	e03d      	b.n	8006724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80066a8:	4b11      	ldr	r3, [pc, #68]	@ (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d0f0      	beq.n	8006696 <HAL_RCC_OscConfig+0x46a>
 80066b4:	e035      	b.n	8006722 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066b6:	4b10      	ldr	r3, [pc, #64]	@ (80066f8 <HAL_RCC_OscConfig+0x4cc>)
 80066b8:	2200      	movs	r2, #0
 80066ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066bc:	f7fd fb4c 	bl	8003d58 <HAL_GetTick>
 80066c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80066c2:	e008      	b.n	80066d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066c4:	f7fd fb48 	bl	8003d58 <HAL_GetTick>
 80066c8:	4602      	mov	r2, r0
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	2b02      	cmp	r3, #2
 80066d0:	d901      	bls.n	80066d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80066d2:	2303      	movs	r3, #3
 80066d4:	e026      	b.n	8006724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80066d6:	4b06      	ldr	r3, [pc, #24]	@ (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1f0      	bne.n	80066c4 <HAL_RCC_OscConfig+0x498>
 80066e2:	e01e      	b.n	8006722 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	69db      	ldr	r3, [r3, #28]
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d107      	bne.n	80066fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	e019      	b.n	8006724 <HAL_RCC_OscConfig+0x4f8>
 80066f0:	40021000 	.word	0x40021000
 80066f4:	40007000 	.word	0x40007000
 80066f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80066fc:	4b0b      	ldr	r3, [pc, #44]	@ (800672c <HAL_RCC_OscConfig+0x500>)
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6a1b      	ldr	r3, [r3, #32]
 800670c:	429a      	cmp	r2, r3
 800670e:	d106      	bne.n	800671e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800671a:	429a      	cmp	r2, r3
 800671c:	d001      	beq.n	8006722 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e000      	b.n	8006724 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006722:	2300      	movs	r3, #0
}
 8006724:	4618      	mov	r0, r3
 8006726:	3718      	adds	r7, #24
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}
 800672c:	40021000 	.word	0x40021000

08006730 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d101      	bne.n	8006744 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	e0d0      	b.n	80068e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006744:	4b6a      	ldr	r3, [pc, #424]	@ (80068f0 <HAL_RCC_ClockConfig+0x1c0>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 0307 	and.w	r3, r3, #7
 800674c:	683a      	ldr	r2, [r7, #0]
 800674e:	429a      	cmp	r2, r3
 8006750:	d910      	bls.n	8006774 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006752:	4b67      	ldr	r3, [pc, #412]	@ (80068f0 <HAL_RCC_ClockConfig+0x1c0>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f023 0207 	bic.w	r2, r3, #7
 800675a:	4965      	ldr	r1, [pc, #404]	@ (80068f0 <HAL_RCC_ClockConfig+0x1c0>)
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	4313      	orrs	r3, r2
 8006760:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006762:	4b63      	ldr	r3, [pc, #396]	@ (80068f0 <HAL_RCC_ClockConfig+0x1c0>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 0307 	and.w	r3, r3, #7
 800676a:	683a      	ldr	r2, [r7, #0]
 800676c:	429a      	cmp	r2, r3
 800676e:	d001      	beq.n	8006774 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e0b8      	b.n	80068e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 0302 	and.w	r3, r3, #2
 800677c:	2b00      	cmp	r3, #0
 800677e:	d020      	beq.n	80067c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 0304 	and.w	r3, r3, #4
 8006788:	2b00      	cmp	r3, #0
 800678a:	d005      	beq.n	8006798 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800678c:	4b59      	ldr	r3, [pc, #356]	@ (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	4a58      	ldr	r2, [pc, #352]	@ (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 8006792:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006796:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 0308 	and.w	r3, r3, #8
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d005      	beq.n	80067b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80067a4:	4b53      	ldr	r3, [pc, #332]	@ (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	4a52      	ldr	r2, [pc, #328]	@ (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 80067aa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80067ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067b0:	4b50      	ldr	r3, [pc, #320]	@ (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	494d      	ldr	r1, [pc, #308]	@ (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 80067be:	4313      	orrs	r3, r2
 80067c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 0301 	and.w	r3, r3, #1
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d040      	beq.n	8006850 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d107      	bne.n	80067e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067d6:	4b47      	ldr	r3, [pc, #284]	@ (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d115      	bne.n	800680e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e07f      	b.n	80068e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	d107      	bne.n	80067fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067ee:	4b41      	ldr	r3, [pc, #260]	@ (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d109      	bne.n	800680e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e073      	b.n	80068e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067fe:	4b3d      	ldr	r3, [pc, #244]	@ (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 0302 	and.w	r3, r3, #2
 8006806:	2b00      	cmp	r3, #0
 8006808:	d101      	bne.n	800680e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e06b      	b.n	80068e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800680e:	4b39      	ldr	r3, [pc, #228]	@ (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	f023 0203 	bic.w	r2, r3, #3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	4936      	ldr	r1, [pc, #216]	@ (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 800681c:	4313      	orrs	r3, r2
 800681e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006820:	f7fd fa9a 	bl	8003d58 <HAL_GetTick>
 8006824:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006826:	e00a      	b.n	800683e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006828:	f7fd fa96 	bl	8003d58 <HAL_GetTick>
 800682c:	4602      	mov	r2, r0
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	1ad3      	subs	r3, r2, r3
 8006832:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006836:	4293      	cmp	r3, r2
 8006838:	d901      	bls.n	800683e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	e053      	b.n	80068e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800683e:	4b2d      	ldr	r3, [pc, #180]	@ (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	f003 020c 	and.w	r2, r3, #12
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	429a      	cmp	r2, r3
 800684e:	d1eb      	bne.n	8006828 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006850:	4b27      	ldr	r3, [pc, #156]	@ (80068f0 <HAL_RCC_ClockConfig+0x1c0>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 0307 	and.w	r3, r3, #7
 8006858:	683a      	ldr	r2, [r7, #0]
 800685a:	429a      	cmp	r2, r3
 800685c:	d210      	bcs.n	8006880 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800685e:	4b24      	ldr	r3, [pc, #144]	@ (80068f0 <HAL_RCC_ClockConfig+0x1c0>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f023 0207 	bic.w	r2, r3, #7
 8006866:	4922      	ldr	r1, [pc, #136]	@ (80068f0 <HAL_RCC_ClockConfig+0x1c0>)
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	4313      	orrs	r3, r2
 800686c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800686e:	4b20      	ldr	r3, [pc, #128]	@ (80068f0 <HAL_RCC_ClockConfig+0x1c0>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 0307 	and.w	r3, r3, #7
 8006876:	683a      	ldr	r2, [r7, #0]
 8006878:	429a      	cmp	r2, r3
 800687a:	d001      	beq.n	8006880 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	e032      	b.n	80068e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 0304 	and.w	r3, r3, #4
 8006888:	2b00      	cmp	r3, #0
 800688a:	d008      	beq.n	800689e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800688c:	4b19      	ldr	r3, [pc, #100]	@ (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	4916      	ldr	r1, [pc, #88]	@ (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 800689a:	4313      	orrs	r3, r2
 800689c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 0308 	and.w	r3, r3, #8
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d009      	beq.n	80068be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80068aa:	4b12      	ldr	r3, [pc, #72]	@ (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	00db      	lsls	r3, r3, #3
 80068b8:	490e      	ldr	r1, [pc, #56]	@ (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 80068ba:	4313      	orrs	r3, r2
 80068bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80068be:	f000 f821 	bl	8006904 <HAL_RCC_GetSysClockFreq>
 80068c2:	4602      	mov	r2, r0
 80068c4:	4b0b      	ldr	r3, [pc, #44]	@ (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	091b      	lsrs	r3, r3, #4
 80068ca:	f003 030f 	and.w	r3, r3, #15
 80068ce:	490a      	ldr	r1, [pc, #40]	@ (80068f8 <HAL_RCC_ClockConfig+0x1c8>)
 80068d0:	5ccb      	ldrb	r3, [r1, r3]
 80068d2:	fa22 f303 	lsr.w	r3, r2, r3
 80068d6:	4a09      	ldr	r2, [pc, #36]	@ (80068fc <HAL_RCC_ClockConfig+0x1cc>)
 80068d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80068da:	4b09      	ldr	r3, [pc, #36]	@ (8006900 <HAL_RCC_ClockConfig+0x1d0>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4618      	mov	r0, r3
 80068e0:	f7fd f9f8 	bl	8003cd4 <HAL_InitTick>

  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	40022000 	.word	0x40022000
 80068f4:	40021000 	.word	0x40021000
 80068f8:	0800b6bc 	.word	0x0800b6bc
 80068fc:	20000038 	.word	0x20000038
 8006900:	2000003c 	.word	0x2000003c

08006904 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006904:	b480      	push	{r7}
 8006906:	b087      	sub	sp, #28
 8006908:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800690a:	2300      	movs	r3, #0
 800690c:	60fb      	str	r3, [r7, #12]
 800690e:	2300      	movs	r3, #0
 8006910:	60bb      	str	r3, [r7, #8]
 8006912:	2300      	movs	r3, #0
 8006914:	617b      	str	r3, [r7, #20]
 8006916:	2300      	movs	r3, #0
 8006918:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800691a:	2300      	movs	r3, #0
 800691c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800691e:	4b1e      	ldr	r3, [pc, #120]	@ (8006998 <HAL_RCC_GetSysClockFreq+0x94>)
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f003 030c 	and.w	r3, r3, #12
 800692a:	2b04      	cmp	r3, #4
 800692c:	d002      	beq.n	8006934 <HAL_RCC_GetSysClockFreq+0x30>
 800692e:	2b08      	cmp	r3, #8
 8006930:	d003      	beq.n	800693a <HAL_RCC_GetSysClockFreq+0x36>
 8006932:	e027      	b.n	8006984 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006934:	4b19      	ldr	r3, [pc, #100]	@ (800699c <HAL_RCC_GetSysClockFreq+0x98>)
 8006936:	613b      	str	r3, [r7, #16]
      break;
 8006938:	e027      	b.n	800698a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	0c9b      	lsrs	r3, r3, #18
 800693e:	f003 030f 	and.w	r3, r3, #15
 8006942:	4a17      	ldr	r2, [pc, #92]	@ (80069a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006944:	5cd3      	ldrb	r3, [r2, r3]
 8006946:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800694e:	2b00      	cmp	r3, #0
 8006950:	d010      	beq.n	8006974 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006952:	4b11      	ldr	r3, [pc, #68]	@ (8006998 <HAL_RCC_GetSysClockFreq+0x94>)
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	0c5b      	lsrs	r3, r3, #17
 8006958:	f003 0301 	and.w	r3, r3, #1
 800695c:	4a11      	ldr	r2, [pc, #68]	@ (80069a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800695e:	5cd3      	ldrb	r3, [r2, r3]
 8006960:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a0d      	ldr	r2, [pc, #52]	@ (800699c <HAL_RCC_GetSysClockFreq+0x98>)
 8006966:	fb03 f202 	mul.w	r2, r3, r2
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006970:	617b      	str	r3, [r7, #20]
 8006972:	e004      	b.n	800697e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a0c      	ldr	r2, [pc, #48]	@ (80069a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006978:	fb02 f303 	mul.w	r3, r2, r3
 800697c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	613b      	str	r3, [r7, #16]
      break;
 8006982:	e002      	b.n	800698a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006984:	4b05      	ldr	r3, [pc, #20]	@ (800699c <HAL_RCC_GetSysClockFreq+0x98>)
 8006986:	613b      	str	r3, [r7, #16]
      break;
 8006988:	bf00      	nop
    }
  }
  return sysclockfreq;
 800698a:	693b      	ldr	r3, [r7, #16]
}
 800698c:	4618      	mov	r0, r3
 800698e:	371c      	adds	r7, #28
 8006990:	46bd      	mov	sp, r7
 8006992:	bc80      	pop	{r7}
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop
 8006998:	40021000 	.word	0x40021000
 800699c:	007a1200 	.word	0x007a1200
 80069a0:	0800b6d4 	.word	0x0800b6d4
 80069a4:	0800b6e4 	.word	0x0800b6e4
 80069a8:	003d0900 	.word	0x003d0900

080069ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069ac:	b480      	push	{r7}
 80069ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80069b0:	4b02      	ldr	r3, [pc, #8]	@ (80069bc <HAL_RCC_GetHCLKFreq+0x10>)
 80069b2:	681b      	ldr	r3, [r3, #0]
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bc80      	pop	{r7}
 80069ba:	4770      	bx	lr
 80069bc:	20000038 	.word	0x20000038

080069c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80069c4:	f7ff fff2 	bl	80069ac <HAL_RCC_GetHCLKFreq>
 80069c8:	4602      	mov	r2, r0
 80069ca:	4b05      	ldr	r3, [pc, #20]	@ (80069e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	0a1b      	lsrs	r3, r3, #8
 80069d0:	f003 0307 	and.w	r3, r3, #7
 80069d4:	4903      	ldr	r1, [pc, #12]	@ (80069e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80069d6:	5ccb      	ldrb	r3, [r1, r3]
 80069d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069dc:	4618      	mov	r0, r3
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	40021000 	.word	0x40021000
 80069e4:	0800b6cc 	.word	0x0800b6cc

080069e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80069ec:	f7ff ffde 	bl	80069ac <HAL_RCC_GetHCLKFreq>
 80069f0:	4602      	mov	r2, r0
 80069f2:	4b05      	ldr	r3, [pc, #20]	@ (8006a08 <HAL_RCC_GetPCLK2Freq+0x20>)
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	0adb      	lsrs	r3, r3, #11
 80069f8:	f003 0307 	and.w	r3, r3, #7
 80069fc:	4903      	ldr	r1, [pc, #12]	@ (8006a0c <HAL_RCC_GetPCLK2Freq+0x24>)
 80069fe:	5ccb      	ldrb	r3, [r1, r3]
 8006a00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	40021000 	.word	0x40021000
 8006a0c:	0800b6cc 	.word	0x0800b6cc

08006a10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b085      	sub	sp, #20
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006a18:	4b0a      	ldr	r3, [pc, #40]	@ (8006a44 <RCC_Delay+0x34>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a0a      	ldr	r2, [pc, #40]	@ (8006a48 <RCC_Delay+0x38>)
 8006a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a22:	0a5b      	lsrs	r3, r3, #9
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	fb02 f303 	mul.w	r3, r2, r3
 8006a2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006a2c:	bf00      	nop
  }
  while (Delay --);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	1e5a      	subs	r2, r3, #1
 8006a32:	60fa      	str	r2, [r7, #12]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d1f9      	bne.n	8006a2c <RCC_Delay+0x1c>
}
 8006a38:	bf00      	nop
 8006a3a:	bf00      	nop
 8006a3c:	3714      	adds	r7, #20
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bc80      	pop	{r7}
 8006a42:	4770      	bx	lr
 8006a44:	20000038 	.word	0x20000038
 8006a48:	10624dd3 	.word	0x10624dd3

08006a4c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b086      	sub	sp, #24
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006a54:	2300      	movs	r3, #0
 8006a56:	613b      	str	r3, [r7, #16]
 8006a58:	2300      	movs	r3, #0
 8006a5a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 0301 	and.w	r3, r3, #1
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d07d      	beq.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a6c:	4b4f      	ldr	r3, [pc, #316]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a6e:	69db      	ldr	r3, [r3, #28]
 8006a70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d10d      	bne.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a78:	4b4c      	ldr	r3, [pc, #304]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a7a:	69db      	ldr	r3, [r3, #28]
 8006a7c:	4a4b      	ldr	r2, [pc, #300]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a82:	61d3      	str	r3, [r2, #28]
 8006a84:	4b49      	ldr	r3, [pc, #292]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a86:	69db      	ldr	r3, [r3, #28]
 8006a88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a8c:	60bb      	str	r3, [r7, #8]
 8006a8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a90:	2301      	movs	r3, #1
 8006a92:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a94:	4b46      	ldr	r3, [pc, #280]	@ (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d118      	bne.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006aa0:	4b43      	ldr	r3, [pc, #268]	@ (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a42      	ldr	r2, [pc, #264]	@ (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006aa6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006aaa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006aac:	f7fd f954 	bl	8003d58 <HAL_GetTick>
 8006ab0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ab2:	e008      	b.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ab4:	f7fd f950 	bl	8003d58 <HAL_GetTick>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	1ad3      	subs	r3, r2, r3
 8006abe:	2b64      	cmp	r3, #100	@ 0x64
 8006ac0:	d901      	bls.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006ac2:	2303      	movs	r3, #3
 8006ac4:	e06d      	b.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ac6:	4b3a      	ldr	r3, [pc, #232]	@ (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d0f0      	beq.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006ad2:	4b36      	ldr	r3, [pc, #216]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ad4:	6a1b      	ldr	r3, [r3, #32]
 8006ad6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ada:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d02e      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006aea:	68fa      	ldr	r2, [r7, #12]
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d027      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006af0:	4b2e      	ldr	r3, [pc, #184]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006af2:	6a1b      	ldr	r3, [r3, #32]
 8006af4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006af8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006afa:	4b2e      	ldr	r3, [pc, #184]	@ (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006afc:	2201      	movs	r2, #1
 8006afe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006b00:	4b2c      	ldr	r3, [pc, #176]	@ (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006b02:	2200      	movs	r2, #0
 8006b04:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006b06:	4a29      	ldr	r2, [pc, #164]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f003 0301 	and.w	r3, r3, #1
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d014      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b16:	f7fd f91f 	bl	8003d58 <HAL_GetTick>
 8006b1a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b1c:	e00a      	b.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b1e:	f7fd f91b 	bl	8003d58 <HAL_GetTick>
 8006b22:	4602      	mov	r2, r0
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	1ad3      	subs	r3, r2, r3
 8006b28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d901      	bls.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006b30:	2303      	movs	r3, #3
 8006b32:	e036      	b.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b34:	4b1d      	ldr	r3, [pc, #116]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b36:	6a1b      	ldr	r3, [r3, #32]
 8006b38:	f003 0302 	and.w	r3, r3, #2
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d0ee      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b40:	4b1a      	ldr	r3, [pc, #104]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b42:	6a1b      	ldr	r3, [r3, #32]
 8006b44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	4917      	ldr	r1, [pc, #92]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006b52:	7dfb      	ldrb	r3, [r7, #23]
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d105      	bne.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b58:	4b14      	ldr	r3, [pc, #80]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b5a:	69db      	ldr	r3, [r3, #28]
 8006b5c:	4a13      	ldr	r2, [pc, #76]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b62:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 0302 	and.w	r3, r3, #2
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d008      	beq.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006b70:	4b0e      	ldr	r3, [pc, #56]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	490b      	ldr	r1, [pc, #44]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 0310 	and.w	r3, r3, #16
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d008      	beq.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b8e:	4b07      	ldr	r3, [pc, #28]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	4904      	ldr	r1, [pc, #16]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3718      	adds	r7, #24
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	40021000 	.word	0x40021000
 8006bb0:	40007000 	.word	0x40007000
 8006bb4:	42420440 	.word	0x42420440

08006bb8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b088      	sub	sp, #32
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	617b      	str	r3, [r7, #20]
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	61fb      	str	r3, [r7, #28]
 8006bc8:	2300      	movs	r3, #0
 8006bca:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	60fb      	str	r3, [r7, #12]
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2b10      	cmp	r3, #16
 8006bd8:	d00a      	beq.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2b10      	cmp	r3, #16
 8006bde:	f200 808a 	bhi.w	8006cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d045      	beq.n	8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2b02      	cmp	r3, #2
 8006bec:	d075      	beq.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8006bee:	e082      	b.n	8006cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8006bf0:	4b46      	ldr	r3, [pc, #280]	@ (8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006bf6:	4b45      	ldr	r3, [pc, #276]	@ (8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d07b      	beq.n	8006cfa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	0c9b      	lsrs	r3, r3, #18
 8006c06:	f003 030f 	and.w	r3, r3, #15
 8006c0a:	4a41      	ldr	r2, [pc, #260]	@ (8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8006c0c:	5cd3      	ldrb	r3, [r2, r3]
 8006c0e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d015      	beq.n	8006c46 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006c1a:	4b3c      	ldr	r3, [pc, #240]	@ (8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	0c5b      	lsrs	r3, r3, #17
 8006c20:	f003 0301 	and.w	r3, r3, #1
 8006c24:	4a3b      	ldr	r2, [pc, #236]	@ (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8006c26:	5cd3      	ldrb	r3, [r2, r3]
 8006c28:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d00d      	beq.n	8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006c34:	4a38      	ldr	r2, [pc, #224]	@ (8006d18 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	fb02 f303 	mul.w	r3, r2, r3
 8006c42:	61fb      	str	r3, [r7, #28]
 8006c44:	e004      	b.n	8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	4a34      	ldr	r2, [pc, #208]	@ (8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8006c4a:	fb02 f303 	mul.w	r3, r2, r3
 8006c4e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006c50:	4b2e      	ldr	r3, [pc, #184]	@ (8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c58:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006c5c:	d102      	bne.n	8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	61bb      	str	r3, [r7, #24]
      break;
 8006c62:	e04a      	b.n	8006cfa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	005b      	lsls	r3, r3, #1
 8006c68:	4a2d      	ldr	r2, [pc, #180]	@ (8006d20 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c6e:	085b      	lsrs	r3, r3, #1
 8006c70:	61bb      	str	r3, [r7, #24]
      break;
 8006c72:	e042      	b.n	8006cfa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8006c74:	4b25      	ldr	r3, [pc, #148]	@ (8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006c76:	6a1b      	ldr	r3, [r3, #32]
 8006c78:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c84:	d108      	bne.n	8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f003 0302 	and.w	r3, r3, #2
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d003      	beq.n	8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8006c90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c94:	61bb      	str	r3, [r7, #24]
 8006c96:	e01f      	b.n	8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ca2:	d109      	bne.n	8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8006ca4:	4b19      	ldr	r3, [pc, #100]	@ (8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ca8:	f003 0302 	and.w	r3, r3, #2
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d003      	beq.n	8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8006cb0:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8006cb4:	61bb      	str	r3, [r7, #24]
 8006cb6:	e00f      	b.n	8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006cbe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006cc2:	d11c      	bne.n	8006cfe <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8006cc4:	4b11      	ldr	r3, [pc, #68]	@ (8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d016      	beq.n	8006cfe <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8006cd0:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8006cd4:	61bb      	str	r3, [r7, #24]
      break;
 8006cd6:	e012      	b.n	8006cfe <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8006cd8:	e011      	b.n	8006cfe <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006cda:	f7ff fe85 	bl	80069e8 <HAL_RCC_GetPCLK2Freq>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	0b9b      	lsrs	r3, r3, #14
 8006ce6:	f003 0303 	and.w	r3, r3, #3
 8006cea:	3301      	adds	r3, #1
 8006cec:	005b      	lsls	r3, r3, #1
 8006cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cf2:	61bb      	str	r3, [r7, #24]
      break;
 8006cf4:	e004      	b.n	8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8006cf6:	bf00      	nop
 8006cf8:	e002      	b.n	8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8006cfa:	bf00      	nop
 8006cfc:	e000      	b.n	8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8006cfe:	bf00      	nop
    }
  }
  return (frequency);
 8006d00:	69bb      	ldr	r3, [r7, #24]
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3720      	adds	r7, #32
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	40021000 	.word	0x40021000
 8006d10:	0800b6e8 	.word	0x0800b6e8
 8006d14:	0800b6f8 	.word	0x0800b6f8
 8006d18:	007a1200 	.word	0x007a1200
 8006d1c:	003d0900 	.word	0x003d0900
 8006d20:	aaaaaaab 	.word	0xaaaaaaab

08006d24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d101      	bne.n	8006d36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e041      	b.n	8006dba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d106      	bne.n	8006d50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f7fc fdb6 	bl	80038bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2202      	movs	r2, #2
 8006d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	3304      	adds	r3, #4
 8006d60:	4619      	mov	r1, r3
 8006d62:	4610      	mov	r0, r2
 8006d64:	f000 fdd4 	bl	8007910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3708      	adds	r7, #8
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b082      	sub	sp, #8
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d101      	bne.n	8006dd4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e041      	b.n	8006e58 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d106      	bne.n	8006dee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 f839 	bl	8006e60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2202      	movs	r2, #2
 8006df2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	3304      	adds	r3, #4
 8006dfe:	4619      	mov	r1, r3
 8006e00:	4610      	mov	r0, r2
 8006e02:	f000 fd85 	bl	8007910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2201      	movs	r2, #1
 8006e12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2201      	movs	r2, #1
 8006e22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2201      	movs	r2, #1
 8006e32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2201      	movs	r2, #1
 8006e42:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2201      	movs	r2, #1
 8006e4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2201      	movs	r2, #1
 8006e52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006e56:	2300      	movs	r3, #0
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3708      	adds	r7, #8
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006e68:	bf00      	nop
 8006e6a:	370c      	adds	r7, #12
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bc80      	pop	{r7}
 8006e70:	4770      	bx	lr
	...

08006e74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d109      	bne.n	8006e98 <HAL_TIM_PWM_Start+0x24>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	bf14      	ite	ne
 8006e90:	2301      	movne	r3, #1
 8006e92:	2300      	moveq	r3, #0
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	e022      	b.n	8006ede <HAL_TIM_PWM_Start+0x6a>
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	2b04      	cmp	r3, #4
 8006e9c:	d109      	bne.n	8006eb2 <HAL_TIM_PWM_Start+0x3e>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	bf14      	ite	ne
 8006eaa:	2301      	movne	r3, #1
 8006eac:	2300      	moveq	r3, #0
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	e015      	b.n	8006ede <HAL_TIM_PWM_Start+0x6a>
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	2b08      	cmp	r3, #8
 8006eb6:	d109      	bne.n	8006ecc <HAL_TIM_PWM_Start+0x58>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	bf14      	ite	ne
 8006ec4:	2301      	movne	r3, #1
 8006ec6:	2300      	moveq	r3, #0
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	e008      	b.n	8006ede <HAL_TIM_PWM_Start+0x6a>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	bf14      	ite	ne
 8006ed8:	2301      	movne	r3, #1
 8006eda:	2300      	moveq	r3, #0
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d001      	beq.n	8006ee6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e05e      	b.n	8006fa4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d104      	bne.n	8006ef6 <HAL_TIM_PWM_Start+0x82>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2202      	movs	r2, #2
 8006ef0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ef4:	e013      	b.n	8006f1e <HAL_TIM_PWM_Start+0xaa>
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	2b04      	cmp	r3, #4
 8006efa:	d104      	bne.n	8006f06 <HAL_TIM_PWM_Start+0x92>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2202      	movs	r2, #2
 8006f00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f04:	e00b      	b.n	8006f1e <HAL_TIM_PWM_Start+0xaa>
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	2b08      	cmp	r3, #8
 8006f0a:	d104      	bne.n	8006f16 <HAL_TIM_PWM_Start+0xa2>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2202      	movs	r2, #2
 8006f10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f14:	e003      	b.n	8006f1e <HAL_TIM_PWM_Start+0xaa>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2202      	movs	r2, #2
 8006f1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	2201      	movs	r2, #1
 8006f24:	6839      	ldr	r1, [r7, #0]
 8006f26:	4618      	mov	r0, r3
 8006f28:	f000 ff7e 	bl	8007e28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a1e      	ldr	r2, [pc, #120]	@ (8006fac <HAL_TIM_PWM_Start+0x138>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d107      	bne.n	8006f46 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006f44:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a18      	ldr	r2, [pc, #96]	@ (8006fac <HAL_TIM_PWM_Start+0x138>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d00e      	beq.n	8006f6e <HAL_TIM_PWM_Start+0xfa>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f58:	d009      	beq.n	8006f6e <HAL_TIM_PWM_Start+0xfa>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a14      	ldr	r2, [pc, #80]	@ (8006fb0 <HAL_TIM_PWM_Start+0x13c>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d004      	beq.n	8006f6e <HAL_TIM_PWM_Start+0xfa>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a12      	ldr	r2, [pc, #72]	@ (8006fb4 <HAL_TIM_PWM_Start+0x140>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d111      	bne.n	8006f92 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	f003 0307 	and.w	r3, r3, #7
 8006f78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2b06      	cmp	r3, #6
 8006f7e:	d010      	beq.n	8006fa2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f042 0201 	orr.w	r2, r2, #1
 8006f8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f90:	e007      	b.n	8006fa2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f042 0201 	orr.w	r2, r2, #1
 8006fa0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006fa2:	2300      	movs	r3, #0
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3710      	adds	r7, #16
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}
 8006fac:	40012c00 	.word	0x40012c00
 8006fb0:	40000400 	.word	0x40000400
 8006fb4:	40000800 	.word	0x40000800

08006fb8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	6839      	ldr	r1, [r7, #0]
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f000 ff2c 	bl	8007e28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a29      	ldr	r2, [pc, #164]	@ (800707c <HAL_TIM_PWM_Stop+0xc4>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d117      	bne.n	800700a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	6a1a      	ldr	r2, [r3, #32]
 8006fe0:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d10f      	bne.n	800700a <HAL_TIM_PWM_Stop+0x52>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	6a1a      	ldr	r2, [r3, #32]
 8006ff0:	f240 4344 	movw	r3, #1092	@ 0x444
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d107      	bne.n	800700a <HAL_TIM_PWM_Stop+0x52>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007008:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	6a1a      	ldr	r2, [r3, #32]
 8007010:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007014:	4013      	ands	r3, r2
 8007016:	2b00      	cmp	r3, #0
 8007018:	d10f      	bne.n	800703a <HAL_TIM_PWM_Stop+0x82>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	6a1a      	ldr	r2, [r3, #32]
 8007020:	f240 4344 	movw	r3, #1092	@ 0x444
 8007024:	4013      	ands	r3, r2
 8007026:	2b00      	cmp	r3, #0
 8007028:	d107      	bne.n	800703a <HAL_TIM_PWM_Stop+0x82>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f022 0201 	bic.w	r2, r2, #1
 8007038:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d104      	bne.n	800704a <HAL_TIM_PWM_Stop+0x92>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007048:	e013      	b.n	8007072 <HAL_TIM_PWM_Stop+0xba>
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	2b04      	cmp	r3, #4
 800704e:	d104      	bne.n	800705a <HAL_TIM_PWM_Stop+0xa2>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007058:	e00b      	b.n	8007072 <HAL_TIM_PWM_Stop+0xba>
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	2b08      	cmp	r3, #8
 800705e:	d104      	bne.n	800706a <HAL_TIM_PWM_Stop+0xb2>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007068:	e003      	b.n	8007072 <HAL_TIM_PWM_Stop+0xba>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2201      	movs	r2, #1
 800706e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8007072:	2300      	movs	r3, #0
}
 8007074:	4618      	mov	r0, r3
 8007076:	3708      	adds	r7, #8
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	40012c00 	.word	0x40012c00

08007080 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800708a:	2300      	movs	r3, #0
 800708c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d109      	bne.n	80070a8 <HAL_TIM_PWM_Start_IT+0x28>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800709a:	b2db      	uxtb	r3, r3
 800709c:	2b01      	cmp	r3, #1
 800709e:	bf14      	ite	ne
 80070a0:	2301      	movne	r3, #1
 80070a2:	2300      	moveq	r3, #0
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	e022      	b.n	80070ee <HAL_TIM_PWM_Start_IT+0x6e>
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	2b04      	cmp	r3, #4
 80070ac:	d109      	bne.n	80070c2 <HAL_TIM_PWM_Start_IT+0x42>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	bf14      	ite	ne
 80070ba:	2301      	movne	r3, #1
 80070bc:	2300      	moveq	r3, #0
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	e015      	b.n	80070ee <HAL_TIM_PWM_Start_IT+0x6e>
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	2b08      	cmp	r3, #8
 80070c6:	d109      	bne.n	80070dc <HAL_TIM_PWM_Start_IT+0x5c>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	bf14      	ite	ne
 80070d4:	2301      	movne	r3, #1
 80070d6:	2300      	moveq	r3, #0
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	e008      	b.n	80070ee <HAL_TIM_PWM_Start_IT+0x6e>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	bf14      	ite	ne
 80070e8:	2301      	movne	r3, #1
 80070ea:	2300      	moveq	r3, #0
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d001      	beq.n	80070f6 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	e0a9      	b.n	800724a <HAL_TIM_PWM_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d104      	bne.n	8007106 <HAL_TIM_PWM_Start_IT+0x86>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2202      	movs	r2, #2
 8007100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007104:	e013      	b.n	800712e <HAL_TIM_PWM_Start_IT+0xae>
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	2b04      	cmp	r3, #4
 800710a:	d104      	bne.n	8007116 <HAL_TIM_PWM_Start_IT+0x96>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2202      	movs	r2, #2
 8007110:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007114:	e00b      	b.n	800712e <HAL_TIM_PWM_Start_IT+0xae>
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	2b08      	cmp	r3, #8
 800711a:	d104      	bne.n	8007126 <HAL_TIM_PWM_Start_IT+0xa6>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2202      	movs	r2, #2
 8007120:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007124:	e003      	b.n	800712e <HAL_TIM_PWM_Start_IT+0xae>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2202      	movs	r2, #2
 800712a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	2b0c      	cmp	r3, #12
 8007132:	d841      	bhi.n	80071b8 <HAL_TIM_PWM_Start_IT+0x138>
 8007134:	a201      	add	r2, pc, #4	@ (adr r2, 800713c <HAL_TIM_PWM_Start_IT+0xbc>)
 8007136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800713a:	bf00      	nop
 800713c:	08007171 	.word	0x08007171
 8007140:	080071b9 	.word	0x080071b9
 8007144:	080071b9 	.word	0x080071b9
 8007148:	080071b9 	.word	0x080071b9
 800714c:	08007183 	.word	0x08007183
 8007150:	080071b9 	.word	0x080071b9
 8007154:	080071b9 	.word	0x080071b9
 8007158:	080071b9 	.word	0x080071b9
 800715c:	08007195 	.word	0x08007195
 8007160:	080071b9 	.word	0x080071b9
 8007164:	080071b9 	.word	0x080071b9
 8007168:	080071b9 	.word	0x080071b9
 800716c:	080071a7 	.word	0x080071a7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68da      	ldr	r2, [r3, #12]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f042 0202 	orr.w	r2, r2, #2
 800717e:	60da      	str	r2, [r3, #12]
      break;
 8007180:	e01d      	b.n	80071be <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68da      	ldr	r2, [r3, #12]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f042 0204 	orr.w	r2, r2, #4
 8007190:	60da      	str	r2, [r3, #12]
      break;
 8007192:	e014      	b.n	80071be <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	68da      	ldr	r2, [r3, #12]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f042 0208 	orr.w	r2, r2, #8
 80071a2:	60da      	str	r2, [r3, #12]
      break;
 80071a4:	e00b      	b.n	80071be <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	68da      	ldr	r2, [r3, #12]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f042 0210 	orr.w	r2, r2, #16
 80071b4:	60da      	str	r2, [r3, #12]
      break;
 80071b6:	e002      	b.n	80071be <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	73fb      	strb	r3, [r7, #15]
      break;
 80071bc:	bf00      	nop
  }

  if (status == HAL_OK)
 80071be:	7bfb      	ldrb	r3, [r7, #15]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d141      	bne.n	8007248 <HAL_TIM_PWM_Start_IT+0x1c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	2201      	movs	r2, #1
 80071ca:	6839      	ldr	r1, [r7, #0]
 80071cc:	4618      	mov	r0, r3
 80071ce:	f000 fe2b 	bl	8007e28 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a1f      	ldr	r2, [pc, #124]	@ (8007254 <HAL_TIM_PWM_Start_IT+0x1d4>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d107      	bne.n	80071ec <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80071ea:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a18      	ldr	r2, [pc, #96]	@ (8007254 <HAL_TIM_PWM_Start_IT+0x1d4>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d00e      	beq.n	8007214 <HAL_TIM_PWM_Start_IT+0x194>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071fe:	d009      	beq.n	8007214 <HAL_TIM_PWM_Start_IT+0x194>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a14      	ldr	r2, [pc, #80]	@ (8007258 <HAL_TIM_PWM_Start_IT+0x1d8>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d004      	beq.n	8007214 <HAL_TIM_PWM_Start_IT+0x194>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a13      	ldr	r2, [pc, #76]	@ (800725c <HAL_TIM_PWM_Start_IT+0x1dc>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d111      	bne.n	8007238 <HAL_TIM_PWM_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	f003 0307 	and.w	r3, r3, #7
 800721e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	2b06      	cmp	r3, #6
 8007224:	d010      	beq.n	8007248 <HAL_TIM_PWM_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f042 0201 	orr.w	r2, r2, #1
 8007234:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007236:	e007      	b.n	8007248 <HAL_TIM_PWM_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f042 0201 	orr.w	r2, r2, #1
 8007246:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007248:	7bfb      	ldrb	r3, [r7, #15]
}
 800724a:	4618      	mov	r0, r3
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	40012c00 	.word	0x40012c00
 8007258:	40000400 	.word	0x40000400
 800725c:	40000800 	.word	0x40000800

08007260 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800726a:	2300      	movs	r3, #0
 800726c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	2b0c      	cmp	r3, #12
 8007272:	d841      	bhi.n	80072f8 <HAL_TIM_PWM_Stop_IT+0x98>
 8007274:	a201      	add	r2, pc, #4	@ (adr r2, 800727c <HAL_TIM_PWM_Stop_IT+0x1c>)
 8007276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800727a:	bf00      	nop
 800727c:	080072b1 	.word	0x080072b1
 8007280:	080072f9 	.word	0x080072f9
 8007284:	080072f9 	.word	0x080072f9
 8007288:	080072f9 	.word	0x080072f9
 800728c:	080072c3 	.word	0x080072c3
 8007290:	080072f9 	.word	0x080072f9
 8007294:	080072f9 	.word	0x080072f9
 8007298:	080072f9 	.word	0x080072f9
 800729c:	080072d5 	.word	0x080072d5
 80072a0:	080072f9 	.word	0x080072f9
 80072a4:	080072f9 	.word	0x080072f9
 80072a8:	080072f9 	.word	0x080072f9
 80072ac:	080072e7 	.word	0x080072e7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	68da      	ldr	r2, [r3, #12]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f022 0202 	bic.w	r2, r2, #2
 80072be:	60da      	str	r2, [r3, #12]
      break;
 80072c0:	e01d      	b.n	80072fe <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	68da      	ldr	r2, [r3, #12]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f022 0204 	bic.w	r2, r2, #4
 80072d0:	60da      	str	r2, [r3, #12]
      break;
 80072d2:	e014      	b.n	80072fe <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	68da      	ldr	r2, [r3, #12]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f022 0208 	bic.w	r2, r2, #8
 80072e2:	60da      	str	r2, [r3, #12]
      break;
 80072e4:	e00b      	b.n	80072fe <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	68da      	ldr	r2, [r3, #12]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f022 0210 	bic.w	r2, r2, #16
 80072f4:	60da      	str	r2, [r3, #12]
      break;
 80072f6:	e002      	b.n	80072fe <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	73fb      	strb	r3, [r7, #15]
      break;
 80072fc:	bf00      	nop
  }

  if (status == HAL_OK)
 80072fe:	7bfb      	ldrb	r3, [r7, #15]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d157      	bne.n	80073b4 <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2200      	movs	r2, #0
 800730a:	6839      	ldr	r1, [r7, #0]
 800730c:	4618      	mov	r0, r3
 800730e:	f000 fd8b 	bl	8007e28 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a2a      	ldr	r2, [pc, #168]	@ (80073c0 <HAL_TIM_PWM_Stop_IT+0x160>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d117      	bne.n	800734c <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	6a1a      	ldr	r2, [r3, #32]
 8007322:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007326:	4013      	ands	r3, r2
 8007328:	2b00      	cmp	r3, #0
 800732a:	d10f      	bne.n	800734c <HAL_TIM_PWM_Stop_IT+0xec>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	6a1a      	ldr	r2, [r3, #32]
 8007332:	f240 4344 	movw	r3, #1092	@ 0x444
 8007336:	4013      	ands	r3, r2
 8007338:	2b00      	cmp	r3, #0
 800733a:	d107      	bne.n	800734c <HAL_TIM_PWM_Stop_IT+0xec>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800734a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	6a1a      	ldr	r2, [r3, #32]
 8007352:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007356:	4013      	ands	r3, r2
 8007358:	2b00      	cmp	r3, #0
 800735a:	d10f      	bne.n	800737c <HAL_TIM_PWM_Stop_IT+0x11c>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	6a1a      	ldr	r2, [r3, #32]
 8007362:	f240 4344 	movw	r3, #1092	@ 0x444
 8007366:	4013      	ands	r3, r2
 8007368:	2b00      	cmp	r3, #0
 800736a:	d107      	bne.n	800737c <HAL_TIM_PWM_Stop_IT+0x11c>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f022 0201 	bic.w	r2, r2, #1
 800737a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d104      	bne.n	800738c <HAL_TIM_PWM_Stop_IT+0x12c>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2201      	movs	r2, #1
 8007386:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800738a:	e013      	b.n	80073b4 <HAL_TIM_PWM_Stop_IT+0x154>
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	2b04      	cmp	r3, #4
 8007390:	d104      	bne.n	800739c <HAL_TIM_PWM_Stop_IT+0x13c>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2201      	movs	r2, #1
 8007396:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800739a:	e00b      	b.n	80073b4 <HAL_TIM_PWM_Stop_IT+0x154>
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	2b08      	cmp	r3, #8
 80073a0:	d104      	bne.n	80073ac <HAL_TIM_PWM_Stop_IT+0x14c>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2201      	movs	r2, #1
 80073a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80073aa:	e003      	b.n	80073b4 <HAL_TIM_PWM_Stop_IT+0x154>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 80073b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3710      	adds	r7, #16
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	40012c00 	.word	0x40012c00

080073c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	691b      	ldr	r3, [r3, #16]
 80073da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	f003 0302 	and.w	r3, r3, #2
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d020      	beq.n	8007428 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f003 0302 	and.w	r3, r3, #2
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d01b      	beq.n	8007428 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f06f 0202 	mvn.w	r2, #2
 80073f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2201      	movs	r2, #1
 80073fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	699b      	ldr	r3, [r3, #24]
 8007406:	f003 0303 	and.w	r3, r3, #3
 800740a:	2b00      	cmp	r3, #0
 800740c:	d003      	beq.n	8007416 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 fa63 	bl	80078da <HAL_TIM_IC_CaptureCallback>
 8007414:	e005      	b.n	8007422 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 fa56 	bl	80078c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 fa65 	bl	80078ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2200      	movs	r2, #0
 8007426:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	f003 0304 	and.w	r3, r3, #4
 800742e:	2b00      	cmp	r3, #0
 8007430:	d020      	beq.n	8007474 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f003 0304 	and.w	r3, r3, #4
 8007438:	2b00      	cmp	r3, #0
 800743a:	d01b      	beq.n	8007474 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f06f 0204 	mvn.w	r2, #4
 8007444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2202      	movs	r2, #2
 800744a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	699b      	ldr	r3, [r3, #24]
 8007452:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007456:	2b00      	cmp	r3, #0
 8007458:	d003      	beq.n	8007462 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 fa3d 	bl	80078da <HAL_TIM_IC_CaptureCallback>
 8007460:	e005      	b.n	800746e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 fa30 	bl	80078c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 fa3f 	bl	80078ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	f003 0308 	and.w	r3, r3, #8
 800747a:	2b00      	cmp	r3, #0
 800747c:	d020      	beq.n	80074c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f003 0308 	and.w	r3, r3, #8
 8007484:	2b00      	cmp	r3, #0
 8007486:	d01b      	beq.n	80074c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f06f 0208 	mvn.w	r2, #8
 8007490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2204      	movs	r2, #4
 8007496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	69db      	ldr	r3, [r3, #28]
 800749e:	f003 0303 	and.w	r3, r3, #3
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d003      	beq.n	80074ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 fa17 	bl	80078da <HAL_TIM_IC_CaptureCallback>
 80074ac:	e005      	b.n	80074ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 fa0a 	bl	80078c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 fa19 	bl	80078ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	f003 0310 	and.w	r3, r3, #16
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d020      	beq.n	800750c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f003 0310 	and.w	r3, r3, #16
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d01b      	beq.n	800750c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f06f 0210 	mvn.w	r2, #16
 80074dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2208      	movs	r2, #8
 80074e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	69db      	ldr	r3, [r3, #28]
 80074ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d003      	beq.n	80074fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 f9f1 	bl	80078da <HAL_TIM_IC_CaptureCallback>
 80074f8:	e005      	b.n	8007506 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 f9e4 	bl	80078c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 f9f3 	bl	80078ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	f003 0301 	and.w	r3, r3, #1
 8007512:	2b00      	cmp	r3, #0
 8007514:	d00c      	beq.n	8007530 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f003 0301 	and.w	r3, r3, #1
 800751c:	2b00      	cmp	r3, #0
 800751e:	d007      	beq.n	8007530 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f06f 0201 	mvn.w	r2, #1
 8007528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 f9c3 	bl	80078b6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007536:	2b00      	cmp	r3, #0
 8007538:	d00c      	beq.n	8007554 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007540:	2b00      	cmp	r3, #0
 8007542:	d007      	beq.n	8007554 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800754c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 fcf5 	bl	8007f3e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00c      	beq.n	8007578 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007564:	2b00      	cmp	r3, #0
 8007566:	d007      	beq.n	8007578 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 f9c3 	bl	80078fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	f003 0320 	and.w	r3, r3, #32
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00c      	beq.n	800759c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f003 0320 	and.w	r3, r3, #32
 8007588:	2b00      	cmp	r3, #0
 800758a:	d007      	beq.n	800759c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f06f 0220 	mvn.w	r2, #32
 8007594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 fcc8 	bl	8007f2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800759c:	bf00      	nop
 800759e:	3710      	adds	r7, #16
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b086      	sub	sp, #24
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075b0:	2300      	movs	r3, #0
 80075b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d101      	bne.n	80075c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80075be:	2302      	movs	r3, #2
 80075c0:	e0ae      	b.n	8007720 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2201      	movs	r2, #1
 80075c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2b0c      	cmp	r3, #12
 80075ce:	f200 809f 	bhi.w	8007710 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80075d2:	a201      	add	r2, pc, #4	@ (adr r2, 80075d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80075d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d8:	0800760d 	.word	0x0800760d
 80075dc:	08007711 	.word	0x08007711
 80075e0:	08007711 	.word	0x08007711
 80075e4:	08007711 	.word	0x08007711
 80075e8:	0800764d 	.word	0x0800764d
 80075ec:	08007711 	.word	0x08007711
 80075f0:	08007711 	.word	0x08007711
 80075f4:	08007711 	.word	0x08007711
 80075f8:	0800768f 	.word	0x0800768f
 80075fc:	08007711 	.word	0x08007711
 8007600:	08007711 	.word	0x08007711
 8007604:	08007711 	.word	0x08007711
 8007608:	080076cf 	.word	0x080076cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	68b9      	ldr	r1, [r7, #8]
 8007612:	4618      	mov	r0, r3
 8007614:	f000 f9ea 	bl	80079ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	699a      	ldr	r2, [r3, #24]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f042 0208 	orr.w	r2, r2, #8
 8007626:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	699a      	ldr	r2, [r3, #24]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f022 0204 	bic.w	r2, r2, #4
 8007636:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	6999      	ldr	r1, [r3, #24]
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	691a      	ldr	r2, [r3, #16]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	430a      	orrs	r2, r1
 8007648:	619a      	str	r2, [r3, #24]
      break;
 800764a:	e064      	b.n	8007716 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68b9      	ldr	r1, [r7, #8]
 8007652:	4618      	mov	r0, r3
 8007654:	f000 fa30 	bl	8007ab8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	699a      	ldr	r2, [r3, #24]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007666:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	699a      	ldr	r2, [r3, #24]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007676:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	6999      	ldr	r1, [r3, #24]
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	691b      	ldr	r3, [r3, #16]
 8007682:	021a      	lsls	r2, r3, #8
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	430a      	orrs	r2, r1
 800768a:	619a      	str	r2, [r3, #24]
      break;
 800768c:	e043      	b.n	8007716 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	68b9      	ldr	r1, [r7, #8]
 8007694:	4618      	mov	r0, r3
 8007696:	f000 fa79 	bl	8007b8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	69da      	ldr	r2, [r3, #28]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f042 0208 	orr.w	r2, r2, #8
 80076a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	69da      	ldr	r2, [r3, #28]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f022 0204 	bic.w	r2, r2, #4
 80076b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	69d9      	ldr	r1, [r3, #28]
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	691a      	ldr	r2, [r3, #16]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	430a      	orrs	r2, r1
 80076ca:	61da      	str	r2, [r3, #28]
      break;
 80076cc:	e023      	b.n	8007716 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	68b9      	ldr	r1, [r7, #8]
 80076d4:	4618      	mov	r0, r3
 80076d6:	f000 fac3 	bl	8007c60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	69da      	ldr	r2, [r3, #28]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80076e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	69da      	ldr	r2, [r3, #28]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80076f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	69d9      	ldr	r1, [r3, #28]
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	691b      	ldr	r3, [r3, #16]
 8007704:	021a      	lsls	r2, r3, #8
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	430a      	orrs	r2, r1
 800770c:	61da      	str	r2, [r3, #28]
      break;
 800770e:	e002      	b.n	8007716 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	75fb      	strb	r3, [r7, #23]
      break;
 8007714:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2200      	movs	r2, #0
 800771a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800771e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007720:	4618      	mov	r0, r3
 8007722:	3718      	adds	r7, #24
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007732:	2300      	movs	r3, #0
 8007734:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800773c:	2b01      	cmp	r3, #1
 800773e:	d101      	bne.n	8007744 <HAL_TIM_ConfigClockSource+0x1c>
 8007740:	2302      	movs	r3, #2
 8007742:	e0b4      	b.n	80078ae <HAL_TIM_ConfigClockSource+0x186>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2202      	movs	r2, #2
 8007750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007762:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800776a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	68ba      	ldr	r2, [r7, #8]
 8007772:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800777c:	d03e      	beq.n	80077fc <HAL_TIM_ConfigClockSource+0xd4>
 800777e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007782:	f200 8087 	bhi.w	8007894 <HAL_TIM_ConfigClockSource+0x16c>
 8007786:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800778a:	f000 8086 	beq.w	800789a <HAL_TIM_ConfigClockSource+0x172>
 800778e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007792:	d87f      	bhi.n	8007894 <HAL_TIM_ConfigClockSource+0x16c>
 8007794:	2b70      	cmp	r3, #112	@ 0x70
 8007796:	d01a      	beq.n	80077ce <HAL_TIM_ConfigClockSource+0xa6>
 8007798:	2b70      	cmp	r3, #112	@ 0x70
 800779a:	d87b      	bhi.n	8007894 <HAL_TIM_ConfigClockSource+0x16c>
 800779c:	2b60      	cmp	r3, #96	@ 0x60
 800779e:	d050      	beq.n	8007842 <HAL_TIM_ConfigClockSource+0x11a>
 80077a0:	2b60      	cmp	r3, #96	@ 0x60
 80077a2:	d877      	bhi.n	8007894 <HAL_TIM_ConfigClockSource+0x16c>
 80077a4:	2b50      	cmp	r3, #80	@ 0x50
 80077a6:	d03c      	beq.n	8007822 <HAL_TIM_ConfigClockSource+0xfa>
 80077a8:	2b50      	cmp	r3, #80	@ 0x50
 80077aa:	d873      	bhi.n	8007894 <HAL_TIM_ConfigClockSource+0x16c>
 80077ac:	2b40      	cmp	r3, #64	@ 0x40
 80077ae:	d058      	beq.n	8007862 <HAL_TIM_ConfigClockSource+0x13a>
 80077b0:	2b40      	cmp	r3, #64	@ 0x40
 80077b2:	d86f      	bhi.n	8007894 <HAL_TIM_ConfigClockSource+0x16c>
 80077b4:	2b30      	cmp	r3, #48	@ 0x30
 80077b6:	d064      	beq.n	8007882 <HAL_TIM_ConfigClockSource+0x15a>
 80077b8:	2b30      	cmp	r3, #48	@ 0x30
 80077ba:	d86b      	bhi.n	8007894 <HAL_TIM_ConfigClockSource+0x16c>
 80077bc:	2b20      	cmp	r3, #32
 80077be:	d060      	beq.n	8007882 <HAL_TIM_ConfigClockSource+0x15a>
 80077c0:	2b20      	cmp	r3, #32
 80077c2:	d867      	bhi.n	8007894 <HAL_TIM_ConfigClockSource+0x16c>
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d05c      	beq.n	8007882 <HAL_TIM_ConfigClockSource+0x15a>
 80077c8:	2b10      	cmp	r3, #16
 80077ca:	d05a      	beq.n	8007882 <HAL_TIM_ConfigClockSource+0x15a>
 80077cc:	e062      	b.n	8007894 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80077de:	f000 fb04 	bl	8007dea <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80077f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	68ba      	ldr	r2, [r7, #8]
 80077f8:	609a      	str	r2, [r3, #8]
      break;
 80077fa:	e04f      	b.n	800789c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800780c:	f000 faed 	bl	8007dea <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	689a      	ldr	r2, [r3, #8]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800781e:	609a      	str	r2, [r3, #8]
      break;
 8007820:	e03c      	b.n	800789c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800782e:	461a      	mov	r2, r3
 8007830:	f000 fa64 	bl	8007cfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	2150      	movs	r1, #80	@ 0x50
 800783a:	4618      	mov	r0, r3
 800783c:	f000 fabb 	bl	8007db6 <TIM_ITRx_SetConfig>
      break;
 8007840:	e02c      	b.n	800789c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800784e:	461a      	mov	r2, r3
 8007850:	f000 fa82 	bl	8007d58 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	2160      	movs	r1, #96	@ 0x60
 800785a:	4618      	mov	r0, r3
 800785c:	f000 faab 	bl	8007db6 <TIM_ITRx_SetConfig>
      break;
 8007860:	e01c      	b.n	800789c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800786e:	461a      	mov	r2, r3
 8007870:	f000 fa44 	bl	8007cfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2140      	movs	r1, #64	@ 0x40
 800787a:	4618      	mov	r0, r3
 800787c:	f000 fa9b 	bl	8007db6 <TIM_ITRx_SetConfig>
      break;
 8007880:	e00c      	b.n	800789c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4619      	mov	r1, r3
 800788c:	4610      	mov	r0, r2
 800788e:	f000 fa92 	bl	8007db6 <TIM_ITRx_SetConfig>
      break;
 8007892:	e003      	b.n	800789c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	73fb      	strb	r3, [r7, #15]
      break;
 8007898:	e000      	b.n	800789c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800789a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2201      	movs	r2, #1
 80078a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80078ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3710      	adds	r7, #16
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}

080078b6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078b6:	b480      	push	{r7}
 80078b8:	b083      	sub	sp, #12
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80078be:	bf00      	nop
 80078c0:	370c      	adds	r7, #12
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bc80      	pop	{r7}
 80078c6:	4770      	bx	lr

080078c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b083      	sub	sp, #12
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80078d0:	bf00      	nop
 80078d2:	370c      	adds	r7, #12
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bc80      	pop	{r7}
 80078d8:	4770      	bx	lr

080078da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80078da:	b480      	push	{r7}
 80078dc:	b083      	sub	sp, #12
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80078e2:	bf00      	nop
 80078e4:	370c      	adds	r7, #12
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bc80      	pop	{r7}
 80078ea:	4770      	bx	lr

080078ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80078f4:	bf00      	nop
 80078f6:	370c      	adds	r7, #12
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bc80      	pop	{r7}
 80078fc:	4770      	bx	lr

080078fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80078fe:	b480      	push	{r7}
 8007900:	b083      	sub	sp, #12
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007906:	bf00      	nop
 8007908:	370c      	adds	r7, #12
 800790a:	46bd      	mov	sp, r7
 800790c:	bc80      	pop	{r7}
 800790e:	4770      	bx	lr

08007910 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007910:	b480      	push	{r7}
 8007912:	b085      	sub	sp, #20
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	4a2f      	ldr	r2, [pc, #188]	@ (80079e0 <TIM_Base_SetConfig+0xd0>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d00b      	beq.n	8007940 <TIM_Base_SetConfig+0x30>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800792e:	d007      	beq.n	8007940 <TIM_Base_SetConfig+0x30>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	4a2c      	ldr	r2, [pc, #176]	@ (80079e4 <TIM_Base_SetConfig+0xd4>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d003      	beq.n	8007940 <TIM_Base_SetConfig+0x30>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	4a2b      	ldr	r2, [pc, #172]	@ (80079e8 <TIM_Base_SetConfig+0xd8>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d108      	bne.n	8007952 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007946:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	68fa      	ldr	r2, [r7, #12]
 800794e:	4313      	orrs	r3, r2
 8007950:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a22      	ldr	r2, [pc, #136]	@ (80079e0 <TIM_Base_SetConfig+0xd0>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d00b      	beq.n	8007972 <TIM_Base_SetConfig+0x62>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007960:	d007      	beq.n	8007972 <TIM_Base_SetConfig+0x62>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4a1f      	ldr	r2, [pc, #124]	@ (80079e4 <TIM_Base_SetConfig+0xd4>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d003      	beq.n	8007972 <TIM_Base_SetConfig+0x62>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4a1e      	ldr	r2, [pc, #120]	@ (80079e8 <TIM_Base_SetConfig+0xd8>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d108      	bne.n	8007984 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007978:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	68fa      	ldr	r2, [r7, #12]
 8007980:	4313      	orrs	r3, r2
 8007982:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	695b      	ldr	r3, [r3, #20]
 800798e:	4313      	orrs	r3, r2
 8007990:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	68fa      	ldr	r2, [r7, #12]
 8007996:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	689a      	ldr	r2, [r3, #8]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	4a0d      	ldr	r2, [pc, #52]	@ (80079e0 <TIM_Base_SetConfig+0xd0>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d103      	bne.n	80079b8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	691a      	ldr	r2, [r3, #16]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	f003 0301 	and.w	r3, r3, #1
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d005      	beq.n	80079d6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	691b      	ldr	r3, [r3, #16]
 80079ce:	f023 0201 	bic.w	r2, r3, #1
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	611a      	str	r2, [r3, #16]
  }
}
 80079d6:	bf00      	nop
 80079d8:	3714      	adds	r7, #20
 80079da:	46bd      	mov	sp, r7
 80079dc:	bc80      	pop	{r7}
 80079de:	4770      	bx	lr
 80079e0:	40012c00 	.word	0x40012c00
 80079e4:	40000400 	.word	0x40000400
 80079e8:	40000800 	.word	0x40000800

080079ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b087      	sub	sp, #28
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6a1b      	ldr	r3, [r3, #32]
 80079fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6a1b      	ldr	r3, [r3, #32]
 8007a00:	f023 0201 	bic.w	r2, r3, #1
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	699b      	ldr	r3, [r3, #24]
 8007a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f023 0303 	bic.w	r3, r3, #3
 8007a22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	68fa      	ldr	r2, [r7, #12]
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	f023 0302 	bic.w	r3, r3, #2
 8007a34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	697a      	ldr	r2, [r7, #20]
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	4a1c      	ldr	r2, [pc, #112]	@ (8007ab4 <TIM_OC1_SetConfig+0xc8>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d10c      	bne.n	8007a62 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	f023 0308 	bic.w	r3, r3, #8
 8007a4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	697a      	ldr	r2, [r7, #20]
 8007a56:	4313      	orrs	r3, r2
 8007a58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	f023 0304 	bic.w	r3, r3, #4
 8007a60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	4a13      	ldr	r2, [pc, #76]	@ (8007ab4 <TIM_OC1_SetConfig+0xc8>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d111      	bne.n	8007a8e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007a78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	695b      	ldr	r3, [r3, #20]
 8007a7e:	693a      	ldr	r2, [r7, #16]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	699b      	ldr	r3, [r3, #24]
 8007a88:	693a      	ldr	r2, [r7, #16]
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	693a      	ldr	r2, [r7, #16]
 8007a92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	68fa      	ldr	r2, [r7, #12]
 8007a98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	685a      	ldr	r2, [r3, #4]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	697a      	ldr	r2, [r7, #20]
 8007aa6:	621a      	str	r2, [r3, #32]
}
 8007aa8:	bf00      	nop
 8007aaa:	371c      	adds	r7, #28
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bc80      	pop	{r7}
 8007ab0:	4770      	bx	lr
 8007ab2:	bf00      	nop
 8007ab4:	40012c00 	.word	0x40012c00

08007ab8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b087      	sub	sp, #28
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6a1b      	ldr	r3, [r3, #32]
 8007ac6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6a1b      	ldr	r3, [r3, #32]
 8007acc:	f023 0210 	bic.w	r2, r3, #16
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	699b      	ldr	r3, [r3, #24]
 8007ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007aee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	021b      	lsls	r3, r3, #8
 8007af6:	68fa      	ldr	r2, [r7, #12]
 8007af8:	4313      	orrs	r3, r2
 8007afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	f023 0320 	bic.w	r3, r3, #32
 8007b02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	011b      	lsls	r3, r3, #4
 8007b0a:	697a      	ldr	r2, [r7, #20]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4a1d      	ldr	r2, [pc, #116]	@ (8007b88 <TIM_OC2_SetConfig+0xd0>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d10d      	bne.n	8007b34 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	68db      	ldr	r3, [r3, #12]
 8007b24:	011b      	lsls	r3, r3, #4
 8007b26:	697a      	ldr	r2, [r7, #20]
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b32:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	4a14      	ldr	r2, [pc, #80]	@ (8007b88 <TIM_OC2_SetConfig+0xd0>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d113      	bne.n	8007b64 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007b42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007b4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	695b      	ldr	r3, [r3, #20]
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	693a      	ldr	r2, [r7, #16]
 8007b54:	4313      	orrs	r3, r2
 8007b56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	699b      	ldr	r3, [r3, #24]
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	693a      	ldr	r2, [r7, #16]
 8007b60:	4313      	orrs	r3, r2
 8007b62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	693a      	ldr	r2, [r7, #16]
 8007b68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	68fa      	ldr	r2, [r7, #12]
 8007b6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	685a      	ldr	r2, [r3, #4]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	697a      	ldr	r2, [r7, #20]
 8007b7c:	621a      	str	r2, [r3, #32]
}
 8007b7e:	bf00      	nop
 8007b80:	371c      	adds	r7, #28
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bc80      	pop	{r7}
 8007b86:	4770      	bx	lr
 8007b88:	40012c00 	.word	0x40012c00

08007b8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b087      	sub	sp, #28
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6a1b      	ldr	r3, [r3, #32]
 8007b9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6a1b      	ldr	r3, [r3, #32]
 8007ba0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	69db      	ldr	r3, [r3, #28]
 8007bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f023 0303 	bic.w	r3, r3, #3
 8007bc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	68fa      	ldr	r2, [r7, #12]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007bd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	021b      	lsls	r3, r3, #8
 8007bdc:	697a      	ldr	r2, [r7, #20]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	4a1d      	ldr	r2, [pc, #116]	@ (8007c5c <TIM_OC3_SetConfig+0xd0>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d10d      	bne.n	8007c06 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007bf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	68db      	ldr	r3, [r3, #12]
 8007bf6:	021b      	lsls	r3, r3, #8
 8007bf8:	697a      	ldr	r2, [r7, #20]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007c04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4a14      	ldr	r2, [pc, #80]	@ (8007c5c <TIM_OC3_SetConfig+0xd0>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d113      	bne.n	8007c36 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007c14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007c1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	695b      	ldr	r3, [r3, #20]
 8007c22:	011b      	lsls	r3, r3, #4
 8007c24:	693a      	ldr	r2, [r7, #16]
 8007c26:	4313      	orrs	r3, r2
 8007c28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	699b      	ldr	r3, [r3, #24]
 8007c2e:	011b      	lsls	r3, r3, #4
 8007c30:	693a      	ldr	r2, [r7, #16]
 8007c32:	4313      	orrs	r3, r2
 8007c34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	693a      	ldr	r2, [r7, #16]
 8007c3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	685a      	ldr	r2, [r3, #4]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	697a      	ldr	r2, [r7, #20]
 8007c4e:	621a      	str	r2, [r3, #32]
}
 8007c50:	bf00      	nop
 8007c52:	371c      	adds	r7, #28
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bc80      	pop	{r7}
 8007c58:	4770      	bx	lr
 8007c5a:	bf00      	nop
 8007c5c:	40012c00 	.word	0x40012c00

08007c60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b087      	sub	sp, #28
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6a1b      	ldr	r3, [r3, #32]
 8007c6e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a1b      	ldr	r3, [r3, #32]
 8007c74:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	69db      	ldr	r3, [r3, #28]
 8007c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	021b      	lsls	r3, r3, #8
 8007c9e:	68fa      	ldr	r2, [r7, #12]
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007caa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	031b      	lsls	r3, r3, #12
 8007cb2:	693a      	ldr	r2, [r7, #16]
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	4a0f      	ldr	r2, [pc, #60]	@ (8007cf8 <TIM_OC4_SetConfig+0x98>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d109      	bne.n	8007cd4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007cc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	695b      	ldr	r3, [r3, #20]
 8007ccc:	019b      	lsls	r3, r3, #6
 8007cce:	697a      	ldr	r2, [r7, #20]
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	697a      	ldr	r2, [r7, #20]
 8007cd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	68fa      	ldr	r2, [r7, #12]
 8007cde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	685a      	ldr	r2, [r3, #4]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	693a      	ldr	r2, [r7, #16]
 8007cec:	621a      	str	r2, [r3, #32]
}
 8007cee:	bf00      	nop
 8007cf0:	371c      	adds	r7, #28
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bc80      	pop	{r7}
 8007cf6:	4770      	bx	lr
 8007cf8:	40012c00 	.word	0x40012c00

08007cfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b087      	sub	sp, #28
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6a1b      	ldr	r3, [r3, #32]
 8007d0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	6a1b      	ldr	r3, [r3, #32]
 8007d12:	f023 0201 	bic.w	r2, r3, #1
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	699b      	ldr	r3, [r3, #24]
 8007d1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007d26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	011b      	lsls	r3, r3, #4
 8007d2c:	693a      	ldr	r2, [r7, #16]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	f023 030a 	bic.w	r3, r3, #10
 8007d38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d3a:	697a      	ldr	r2, [r7, #20]
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	693a      	ldr	r2, [r7, #16]
 8007d46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	697a      	ldr	r2, [r7, #20]
 8007d4c:	621a      	str	r2, [r3, #32]
}
 8007d4e:	bf00      	nop
 8007d50:	371c      	adds	r7, #28
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bc80      	pop	{r7}
 8007d56:	4770      	bx	lr

08007d58 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b087      	sub	sp, #28
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	60f8      	str	r0, [r7, #12]
 8007d60:	60b9      	str	r1, [r7, #8]
 8007d62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	6a1b      	ldr	r3, [r3, #32]
 8007d68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	6a1b      	ldr	r3, [r3, #32]
 8007d6e:	f023 0210 	bic.w	r2, r3, #16
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	699b      	ldr	r3, [r3, #24]
 8007d7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007d82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	031b      	lsls	r3, r3, #12
 8007d88:	693a      	ldr	r2, [r7, #16]
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007d94:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	011b      	lsls	r3, r3, #4
 8007d9a:	697a      	ldr	r2, [r7, #20]
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	693a      	ldr	r2, [r7, #16]
 8007da4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	697a      	ldr	r2, [r7, #20]
 8007daa:	621a      	str	r2, [r3, #32]
}
 8007dac:	bf00      	nop
 8007dae:	371c      	adds	r7, #28
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bc80      	pop	{r7}
 8007db4:	4770      	bx	lr

08007db6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007db6:	b480      	push	{r7}
 8007db8:	b085      	sub	sp, #20
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
 8007dbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dcc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007dce:	683a      	ldr	r2, [r7, #0]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	f043 0307 	orr.w	r3, r3, #7
 8007dd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	68fa      	ldr	r2, [r7, #12]
 8007dde:	609a      	str	r2, [r3, #8]
}
 8007de0:	bf00      	nop
 8007de2:	3714      	adds	r7, #20
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bc80      	pop	{r7}
 8007de8:	4770      	bx	lr

08007dea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007dea:	b480      	push	{r7}
 8007dec:	b087      	sub	sp, #28
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	60f8      	str	r0, [r7, #12]
 8007df2:	60b9      	str	r1, [r7, #8]
 8007df4:	607a      	str	r2, [r7, #4]
 8007df6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007e04:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	021a      	lsls	r2, r3, #8
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	431a      	orrs	r2, r3
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	4313      	orrs	r3, r2
 8007e12:	697a      	ldr	r2, [r7, #20]
 8007e14:	4313      	orrs	r3, r2
 8007e16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	697a      	ldr	r2, [r7, #20]
 8007e1c:	609a      	str	r2, [r3, #8]
}
 8007e1e:	bf00      	nop
 8007e20:	371c      	adds	r7, #28
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bc80      	pop	{r7}
 8007e26:	4770      	bx	lr

08007e28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b087      	sub	sp, #28
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	60f8      	str	r0, [r7, #12]
 8007e30:	60b9      	str	r1, [r7, #8]
 8007e32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	f003 031f 	and.w	r3, r3, #31
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6a1a      	ldr	r2, [r3, #32]
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	43db      	mvns	r3, r3
 8007e4a:	401a      	ands	r2, r3
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	6a1a      	ldr	r2, [r3, #32]
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	f003 031f 	and.w	r3, r3, #31
 8007e5a:	6879      	ldr	r1, [r7, #4]
 8007e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8007e60:	431a      	orrs	r2, r3
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	621a      	str	r2, [r3, #32]
}
 8007e66:	bf00      	nop
 8007e68:	371c      	adds	r7, #28
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bc80      	pop	{r7}
 8007e6e:	4770      	bx	lr

08007e70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b085      	sub	sp, #20
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d101      	bne.n	8007e88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e84:	2302      	movs	r3, #2
 8007e86:	e046      	b.n	8007f16 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2202      	movs	r2, #2
 8007e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007eae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	68fa      	ldr	r2, [r7, #12]
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	68fa      	ldr	r2, [r7, #12]
 8007ec0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a16      	ldr	r2, [pc, #88]	@ (8007f20 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d00e      	beq.n	8007eea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ed4:	d009      	beq.n	8007eea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a12      	ldr	r2, [pc, #72]	@ (8007f24 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d004      	beq.n	8007eea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a10      	ldr	r2, [pc, #64]	@ (8007f28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d10c      	bne.n	8007f04 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ef0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	68ba      	ldr	r2, [r7, #8]
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	68ba      	ldr	r2, [r7, #8]
 8007f02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007f14:	2300      	movs	r3, #0
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3714      	adds	r7, #20
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bc80      	pop	{r7}
 8007f1e:	4770      	bx	lr
 8007f20:	40012c00 	.word	0x40012c00
 8007f24:	40000400 	.word	0x40000400
 8007f28:	40000800 	.word	0x40000800

08007f2c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b083      	sub	sp, #12
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f34:	bf00      	nop
 8007f36:	370c      	adds	r7, #12
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bc80      	pop	{r7}
 8007f3c:	4770      	bx	lr

08007f3e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f3e:	b480      	push	{r7}
 8007f40:	b083      	sub	sp, #12
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f46:	bf00      	nop
 8007f48:	370c      	adds	r7, #12
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bc80      	pop	{r7}
 8007f4e:	4770      	bx	lr

08007f50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b082      	sub	sp, #8
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d101      	bne.n	8007f62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e042      	b.n	8007fe8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d106      	bne.n	8007f7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f7fb fd60 	bl	8003a3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2224      	movs	r2, #36	@ 0x24
 8007f80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	68da      	ldr	r2, [r3, #12]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007f92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 fe4f 	bl	8008c38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	691a      	ldr	r2, [r3, #16]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007fa8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	695a      	ldr	r2, [r3, #20]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007fb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	68da      	ldr	r2, [r3, #12]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007fc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2220      	movs	r2, #32
 8007fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2220      	movs	r2, #32
 8007fdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007fe6:	2300      	movs	r3, #0
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3708      	adds	r7, #8
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b08a      	sub	sp, #40	@ 0x28
 8007ff4:	af02      	add	r7, sp, #8
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	60b9      	str	r1, [r7, #8]
 8007ffa:	603b      	str	r3, [r7, #0]
 8007ffc:	4613      	mov	r3, r2
 8007ffe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008000:	2300      	movs	r3, #0
 8008002:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800800a:	b2db      	uxtb	r3, r3
 800800c:	2b20      	cmp	r3, #32
 800800e:	d175      	bne.n	80080fc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d002      	beq.n	800801c <HAL_UART_Transmit+0x2c>
 8008016:	88fb      	ldrh	r3, [r7, #6]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d101      	bne.n	8008020 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800801c:	2301      	movs	r3, #1
 800801e:	e06e      	b.n	80080fe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2200      	movs	r2, #0
 8008024:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2221      	movs	r2, #33	@ 0x21
 800802a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800802e:	f7fb fe93 	bl	8003d58 <HAL_GetTick>
 8008032:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	88fa      	ldrh	r2, [r7, #6]
 8008038:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	88fa      	ldrh	r2, [r7, #6]
 800803e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008048:	d108      	bne.n	800805c <HAL_UART_Transmit+0x6c>
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	691b      	ldr	r3, [r3, #16]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d104      	bne.n	800805c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008052:	2300      	movs	r3, #0
 8008054:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	61bb      	str	r3, [r7, #24]
 800805a:	e003      	b.n	8008064 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008060:	2300      	movs	r3, #0
 8008062:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008064:	e02e      	b.n	80080c4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	9300      	str	r3, [sp, #0]
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	2200      	movs	r2, #0
 800806e:	2180      	movs	r1, #128	@ 0x80
 8008070:	68f8      	ldr	r0, [r7, #12]
 8008072:	f000 fbb4 	bl	80087de <UART_WaitOnFlagUntilTimeout>
 8008076:	4603      	mov	r3, r0
 8008078:	2b00      	cmp	r3, #0
 800807a:	d005      	beq.n	8008088 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2220      	movs	r2, #32
 8008080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008084:	2303      	movs	r3, #3
 8008086:	e03a      	b.n	80080fe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008088:	69fb      	ldr	r3, [r7, #28]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d10b      	bne.n	80080a6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800808e:	69bb      	ldr	r3, [r7, #24]
 8008090:	881b      	ldrh	r3, [r3, #0]
 8008092:	461a      	mov	r2, r3
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800809c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800809e:	69bb      	ldr	r3, [r7, #24]
 80080a0:	3302      	adds	r3, #2
 80080a2:	61bb      	str	r3, [r7, #24]
 80080a4:	e007      	b.n	80080b6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80080a6:	69fb      	ldr	r3, [r7, #28]
 80080a8:	781a      	ldrb	r2, [r3, #0]
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	3301      	adds	r3, #1
 80080b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	3b01      	subs	r3, #1
 80080be:	b29a      	uxth	r2, r3
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d1cb      	bne.n	8008066 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	9300      	str	r3, [sp, #0]
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	2200      	movs	r2, #0
 80080d6:	2140      	movs	r1, #64	@ 0x40
 80080d8:	68f8      	ldr	r0, [r7, #12]
 80080da:	f000 fb80 	bl	80087de <UART_WaitOnFlagUntilTimeout>
 80080de:	4603      	mov	r3, r0
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d005      	beq.n	80080f0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2220      	movs	r2, #32
 80080e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80080ec:	2303      	movs	r3, #3
 80080ee:	e006      	b.n	80080fe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2220      	movs	r2, #32
 80080f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80080f8:	2300      	movs	r3, #0
 80080fa:	e000      	b.n	80080fe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80080fc:	2302      	movs	r3, #2
  }
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3720      	adds	r7, #32
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}

08008106 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008106:	b580      	push	{r7, lr}
 8008108:	b08a      	sub	sp, #40	@ 0x28
 800810a:	af02      	add	r7, sp, #8
 800810c:	60f8      	str	r0, [r7, #12]
 800810e:	60b9      	str	r1, [r7, #8]
 8008110:	603b      	str	r3, [r7, #0]
 8008112:	4613      	mov	r3, r2
 8008114:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008116:	2300      	movs	r3, #0
 8008118:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008120:	b2db      	uxtb	r3, r3
 8008122:	2b20      	cmp	r3, #32
 8008124:	f040 8081 	bne.w	800822a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d002      	beq.n	8008134 <HAL_UART_Receive+0x2e>
 800812e:	88fb      	ldrh	r3, [r7, #6]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d101      	bne.n	8008138 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008134:	2301      	movs	r3, #1
 8008136:	e079      	b.n	800822c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2200      	movs	r2, #0
 800813c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2222      	movs	r2, #34	@ 0x22
 8008142:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2200      	movs	r2, #0
 800814a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800814c:	f7fb fe04 	bl	8003d58 <HAL_GetTick>
 8008150:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	88fa      	ldrh	r2, [r7, #6]
 8008156:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	88fa      	ldrh	r2, [r7, #6]
 800815c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	689b      	ldr	r3, [r3, #8]
 8008162:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008166:	d108      	bne.n	800817a <HAL_UART_Receive+0x74>
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	691b      	ldr	r3, [r3, #16]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d104      	bne.n	800817a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8008170:	2300      	movs	r3, #0
 8008172:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	61bb      	str	r3, [r7, #24]
 8008178:	e003      	b.n	8008182 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800817e:	2300      	movs	r3, #0
 8008180:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008182:	e047      	b.n	8008214 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	9300      	str	r3, [sp, #0]
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	2200      	movs	r2, #0
 800818c:	2120      	movs	r1, #32
 800818e:	68f8      	ldr	r0, [r7, #12]
 8008190:	f000 fb25 	bl	80087de <UART_WaitOnFlagUntilTimeout>
 8008194:	4603      	mov	r3, r0
 8008196:	2b00      	cmp	r3, #0
 8008198:	d005      	beq.n	80081a6 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2220      	movs	r2, #32
 800819e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80081a2:	2303      	movs	r3, #3
 80081a4:	e042      	b.n	800822c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80081a6:	69fb      	ldr	r3, [r7, #28]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d10c      	bne.n	80081c6 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081b8:	b29a      	uxth	r2, r3
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80081be:	69bb      	ldr	r3, [r7, #24]
 80081c0:	3302      	adds	r3, #2
 80081c2:	61bb      	str	r3, [r7, #24]
 80081c4:	e01f      	b.n	8008206 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081ce:	d007      	beq.n	80081e0 <HAL_UART_Receive+0xda>
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d10a      	bne.n	80081ee <HAL_UART_Receive+0xe8>
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	691b      	ldr	r3, [r3, #16]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d106      	bne.n	80081ee <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	b2da      	uxtb	r2, r3
 80081e8:	69fb      	ldr	r3, [r7, #28]
 80081ea:	701a      	strb	r2, [r3, #0]
 80081ec:	e008      	b.n	8008200 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081fa:	b2da      	uxtb	r2, r3
 80081fc:	69fb      	ldr	r3, [r7, #28]
 80081fe:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8008200:	69fb      	ldr	r3, [r7, #28]
 8008202:	3301      	adds	r3, #1
 8008204:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800820a:	b29b      	uxth	r3, r3
 800820c:	3b01      	subs	r3, #1
 800820e:	b29a      	uxth	r2, r3
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008218:	b29b      	uxth	r3, r3
 800821a:	2b00      	cmp	r3, #0
 800821c:	d1b2      	bne.n	8008184 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2220      	movs	r2, #32
 8008222:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8008226:	2300      	movs	r3, #0
 8008228:	e000      	b.n	800822c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800822a:	2302      	movs	r3, #2
  }
}
 800822c:	4618      	mov	r0, r3
 800822e:	3720      	adds	r7, #32
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	60f8      	str	r0, [r7, #12]
 800823c:	60b9      	str	r1, [r7, #8]
 800823e:	4613      	mov	r3, r2
 8008240:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008248:	b2db      	uxtb	r3, r3
 800824a:	2b20      	cmp	r3, #32
 800824c:	d112      	bne.n	8008274 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d002      	beq.n	800825a <HAL_UART_Receive_IT+0x26>
 8008254:	88fb      	ldrh	r3, [r7, #6]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d101      	bne.n	800825e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	e00b      	b.n	8008276 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2200      	movs	r2, #0
 8008262:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008264:	88fb      	ldrh	r3, [r7, #6]
 8008266:	461a      	mov	r2, r3
 8008268:	68b9      	ldr	r1, [r7, #8]
 800826a:	68f8      	ldr	r0, [r7, #12]
 800826c:	f000 fb10 	bl	8008890 <UART_Start_Receive_IT>
 8008270:	4603      	mov	r3, r0
 8008272:	e000      	b.n	8008276 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008274:	2302      	movs	r3, #2
  }
}
 8008276:	4618      	mov	r0, r3
 8008278:	3710      	adds	r7, #16
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
	...

08008280 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b0ba      	sub	sp, #232	@ 0xe8
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	68db      	ldr	r3, [r3, #12]
 8008298:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	695b      	ldr	r3, [r3, #20]
 80082a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80082a6:	2300      	movs	r3, #0
 80082a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80082ac:	2300      	movs	r3, #0
 80082ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80082b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082b6:	f003 030f 	and.w	r3, r3, #15
 80082ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80082be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d10f      	bne.n	80082e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80082c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082ca:	f003 0320 	and.w	r3, r3, #32
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d009      	beq.n	80082e6 <HAL_UART_IRQHandler+0x66>
 80082d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082d6:	f003 0320 	and.w	r3, r3, #32
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d003      	beq.n	80082e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 fbec 	bl	8008abc <UART_Receive_IT>
      return;
 80082e4:	e25b      	b.n	800879e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80082e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	f000 80de 	beq.w	80084ac <HAL_UART_IRQHandler+0x22c>
 80082f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082f4:	f003 0301 	and.w	r3, r3, #1
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d106      	bne.n	800830a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80082fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008300:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008304:	2b00      	cmp	r3, #0
 8008306:	f000 80d1 	beq.w	80084ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800830a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800830e:	f003 0301 	and.w	r3, r3, #1
 8008312:	2b00      	cmp	r3, #0
 8008314:	d00b      	beq.n	800832e <HAL_UART_IRQHandler+0xae>
 8008316:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800831a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800831e:	2b00      	cmp	r3, #0
 8008320:	d005      	beq.n	800832e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008326:	f043 0201 	orr.w	r2, r3, #1
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800832e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008332:	f003 0304 	and.w	r3, r3, #4
 8008336:	2b00      	cmp	r3, #0
 8008338:	d00b      	beq.n	8008352 <HAL_UART_IRQHandler+0xd2>
 800833a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800833e:	f003 0301 	and.w	r3, r3, #1
 8008342:	2b00      	cmp	r3, #0
 8008344:	d005      	beq.n	8008352 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800834a:	f043 0202 	orr.w	r2, r3, #2
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008356:	f003 0302 	and.w	r3, r3, #2
 800835a:	2b00      	cmp	r3, #0
 800835c:	d00b      	beq.n	8008376 <HAL_UART_IRQHandler+0xf6>
 800835e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008362:	f003 0301 	and.w	r3, r3, #1
 8008366:	2b00      	cmp	r3, #0
 8008368:	d005      	beq.n	8008376 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800836e:	f043 0204 	orr.w	r2, r3, #4
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800837a:	f003 0308 	and.w	r3, r3, #8
 800837e:	2b00      	cmp	r3, #0
 8008380:	d011      	beq.n	80083a6 <HAL_UART_IRQHandler+0x126>
 8008382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008386:	f003 0320 	and.w	r3, r3, #32
 800838a:	2b00      	cmp	r3, #0
 800838c:	d105      	bne.n	800839a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800838e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008392:	f003 0301 	and.w	r3, r3, #1
 8008396:	2b00      	cmp	r3, #0
 8008398:	d005      	beq.n	80083a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800839e:	f043 0208 	orr.w	r2, r3, #8
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	f000 81f2 	beq.w	8008794 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80083b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083b4:	f003 0320 	and.w	r3, r3, #32
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d008      	beq.n	80083ce <HAL_UART_IRQHandler+0x14e>
 80083bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083c0:	f003 0320 	and.w	r3, r3, #32
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d002      	beq.n	80083ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f000 fb77 	bl	8008abc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	695b      	ldr	r3, [r3, #20]
 80083d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083d8:	2b00      	cmp	r3, #0
 80083da:	bf14      	ite	ne
 80083dc:	2301      	movne	r3, #1
 80083de:	2300      	moveq	r3, #0
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083ea:	f003 0308 	and.w	r3, r3, #8
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d103      	bne.n	80083fa <HAL_UART_IRQHandler+0x17a>
 80083f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d04f      	beq.n	800849a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 fa81 	bl	8008902 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	695b      	ldr	r3, [r3, #20]
 8008406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800840a:	2b00      	cmp	r3, #0
 800840c:	d041      	beq.n	8008492 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	3314      	adds	r3, #20
 8008414:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008418:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800841c:	e853 3f00 	ldrex	r3, [r3]
 8008420:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008424:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008428:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800842c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	3314      	adds	r3, #20
 8008436:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800843a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800843e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008442:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008446:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800844a:	e841 2300 	strex	r3, r2, [r1]
 800844e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008452:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008456:	2b00      	cmp	r3, #0
 8008458:	d1d9      	bne.n	800840e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800845e:	2b00      	cmp	r3, #0
 8008460:	d013      	beq.n	800848a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008466:	4a7e      	ldr	r2, [pc, #504]	@ (8008660 <HAL_UART_IRQHandler+0x3e0>)
 8008468:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800846e:	4618      	mov	r0, r3
 8008470:	f7fc fb60 	bl	8004b34 <HAL_DMA_Abort_IT>
 8008474:	4603      	mov	r3, r0
 8008476:	2b00      	cmp	r3, #0
 8008478:	d016      	beq.n	80084a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800847e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008484:	4610      	mov	r0, r2
 8008486:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008488:	e00e      	b.n	80084a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 f993 	bl	80087b6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008490:	e00a      	b.n	80084a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f000 f98f 	bl	80087b6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008498:	e006      	b.n	80084a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 f98b 	bl	80087b6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80084a6:	e175      	b.n	8008794 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084a8:	bf00      	nop
    return;
 80084aa:	e173      	b.n	8008794 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	f040 814f 	bne.w	8008754 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80084b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084ba:	f003 0310 	and.w	r3, r3, #16
 80084be:	2b00      	cmp	r3, #0
 80084c0:	f000 8148 	beq.w	8008754 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80084c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084c8:	f003 0310 	and.w	r3, r3, #16
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f000 8141 	beq.w	8008754 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80084d2:	2300      	movs	r3, #0
 80084d4:	60bb      	str	r3, [r7, #8]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	60bb      	str	r3, [r7, #8]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	60bb      	str	r3, [r7, #8]
 80084e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	695b      	ldr	r3, [r3, #20]
 80084ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	f000 80b6 	beq.w	8008664 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008504:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008508:	2b00      	cmp	r3, #0
 800850a:	f000 8145 	beq.w	8008798 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008512:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008516:	429a      	cmp	r2, r3
 8008518:	f080 813e 	bcs.w	8008798 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008522:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008528:	699b      	ldr	r3, [r3, #24]
 800852a:	2b20      	cmp	r3, #32
 800852c:	f000 8088 	beq.w	8008640 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	330c      	adds	r3, #12
 8008536:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800853a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800853e:	e853 3f00 	ldrex	r3, [r3]
 8008542:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008546:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800854a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800854e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	330c      	adds	r3, #12
 8008558:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800855c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008560:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008564:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008568:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800856c:	e841 2300 	strex	r3, r2, [r1]
 8008570:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008574:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008578:	2b00      	cmp	r3, #0
 800857a:	d1d9      	bne.n	8008530 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	3314      	adds	r3, #20
 8008582:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008584:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008586:	e853 3f00 	ldrex	r3, [r3]
 800858a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800858c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800858e:	f023 0301 	bic.w	r3, r3, #1
 8008592:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	3314      	adds	r3, #20
 800859c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80085a0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80085a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80085a8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80085ac:	e841 2300 	strex	r3, r2, [r1]
 80085b0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80085b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d1e1      	bne.n	800857c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	3314      	adds	r3, #20
 80085be:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80085c2:	e853 3f00 	ldrex	r3, [r3]
 80085c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80085c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80085ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	3314      	adds	r3, #20
 80085d8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80085dc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80085de:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80085e2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80085e4:	e841 2300 	strex	r3, r2, [r1]
 80085e8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80085ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d1e3      	bne.n	80085b8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2220      	movs	r2, #32
 80085f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	330c      	adds	r3, #12
 8008604:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008606:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008608:	e853 3f00 	ldrex	r3, [r3]
 800860c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800860e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008610:	f023 0310 	bic.w	r3, r3, #16
 8008614:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	330c      	adds	r3, #12
 800861e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008622:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008624:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008626:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008628:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800862a:	e841 2300 	strex	r3, r2, [r1]
 800862e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008630:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008632:	2b00      	cmp	r3, #0
 8008634:	d1e3      	bne.n	80085fe <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800863a:	4618      	mov	r0, r3
 800863c:	f7fc fa3e 	bl	8004abc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2202      	movs	r2, #2
 8008644:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800864e:	b29b      	uxth	r3, r3
 8008650:	1ad3      	subs	r3, r2, r3
 8008652:	b29b      	uxth	r3, r3
 8008654:	4619      	mov	r1, r3
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 f8b6 	bl	80087c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800865c:	e09c      	b.n	8008798 <HAL_UART_IRQHandler+0x518>
 800865e:	bf00      	nop
 8008660:	080089c7 	.word	0x080089c7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800866c:	b29b      	uxth	r3, r3
 800866e:	1ad3      	subs	r3, r2, r3
 8008670:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008678:	b29b      	uxth	r3, r3
 800867a:	2b00      	cmp	r3, #0
 800867c:	f000 808e 	beq.w	800879c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008680:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008684:	2b00      	cmp	r3, #0
 8008686:	f000 8089 	beq.w	800879c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	330c      	adds	r3, #12
 8008690:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008694:	e853 3f00 	ldrex	r3, [r3]
 8008698:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800869a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800869c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80086a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	330c      	adds	r3, #12
 80086aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80086ae:	647a      	str	r2, [r7, #68]	@ 0x44
 80086b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80086b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80086b6:	e841 2300 	strex	r3, r2, [r1]
 80086ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80086bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d1e3      	bne.n	800868a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	3314      	adds	r3, #20
 80086c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086cc:	e853 3f00 	ldrex	r3, [r3]
 80086d0:	623b      	str	r3, [r7, #32]
   return(result);
 80086d2:	6a3b      	ldr	r3, [r7, #32]
 80086d4:	f023 0301 	bic.w	r3, r3, #1
 80086d8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	3314      	adds	r3, #20
 80086e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80086e6:	633a      	str	r2, [r7, #48]	@ 0x30
 80086e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80086ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086ee:	e841 2300 	strex	r3, r2, [r1]
 80086f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80086f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d1e3      	bne.n	80086c2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2220      	movs	r2, #32
 80086fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	330c      	adds	r3, #12
 800870e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	e853 3f00 	ldrex	r3, [r3]
 8008716:	60fb      	str	r3, [r7, #12]
   return(result);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f023 0310 	bic.w	r3, r3, #16
 800871e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	330c      	adds	r3, #12
 8008728:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800872c:	61fa      	str	r2, [r7, #28]
 800872e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008730:	69b9      	ldr	r1, [r7, #24]
 8008732:	69fa      	ldr	r2, [r7, #28]
 8008734:	e841 2300 	strex	r3, r2, [r1]
 8008738:	617b      	str	r3, [r7, #20]
   return(result);
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d1e3      	bne.n	8008708 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2202      	movs	r2, #2
 8008744:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008746:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800874a:	4619      	mov	r1, r3
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 f83b 	bl	80087c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008752:	e023      	b.n	800879c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008758:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800875c:	2b00      	cmp	r3, #0
 800875e:	d009      	beq.n	8008774 <HAL_UART_IRQHandler+0x4f4>
 8008760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008764:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008768:	2b00      	cmp	r3, #0
 800876a:	d003      	beq.n	8008774 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 f93e 	bl	80089ee <UART_Transmit_IT>
    return;
 8008772:	e014      	b.n	800879e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800877c:	2b00      	cmp	r3, #0
 800877e:	d00e      	beq.n	800879e <HAL_UART_IRQHandler+0x51e>
 8008780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008784:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008788:	2b00      	cmp	r3, #0
 800878a:	d008      	beq.n	800879e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 f97d 	bl	8008a8c <UART_EndTransmit_IT>
    return;
 8008792:	e004      	b.n	800879e <HAL_UART_IRQHandler+0x51e>
    return;
 8008794:	bf00      	nop
 8008796:	e002      	b.n	800879e <HAL_UART_IRQHandler+0x51e>
      return;
 8008798:	bf00      	nop
 800879a:	e000      	b.n	800879e <HAL_UART_IRQHandler+0x51e>
      return;
 800879c:	bf00      	nop
  }
}
 800879e:	37e8      	adds	r7, #232	@ 0xe8
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b083      	sub	sp, #12
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80087ac:	bf00      	nop
 80087ae:	370c      	adds	r7, #12
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bc80      	pop	{r7}
 80087b4:	4770      	bx	lr

080087b6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80087b6:	b480      	push	{r7}
 80087b8:	b083      	sub	sp, #12
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80087be:	bf00      	nop
 80087c0:	370c      	adds	r7, #12
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bc80      	pop	{r7}
 80087c6:	4770      	bx	lr

080087c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b083      	sub	sp, #12
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	460b      	mov	r3, r1
 80087d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80087d4:	bf00      	nop
 80087d6:	370c      	adds	r7, #12
 80087d8:	46bd      	mov	sp, r7
 80087da:	bc80      	pop	{r7}
 80087dc:	4770      	bx	lr

080087de <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80087de:	b580      	push	{r7, lr}
 80087e0:	b086      	sub	sp, #24
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	60f8      	str	r0, [r7, #12]
 80087e6:	60b9      	str	r1, [r7, #8]
 80087e8:	603b      	str	r3, [r7, #0]
 80087ea:	4613      	mov	r3, r2
 80087ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087ee:	e03b      	b.n	8008868 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087f0:	6a3b      	ldr	r3, [r7, #32]
 80087f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087f6:	d037      	beq.n	8008868 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087f8:	f7fb faae 	bl	8003d58 <HAL_GetTick>
 80087fc:	4602      	mov	r2, r0
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	1ad3      	subs	r3, r2, r3
 8008802:	6a3a      	ldr	r2, [r7, #32]
 8008804:	429a      	cmp	r2, r3
 8008806:	d302      	bcc.n	800880e <UART_WaitOnFlagUntilTimeout+0x30>
 8008808:	6a3b      	ldr	r3, [r7, #32]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d101      	bne.n	8008812 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800880e:	2303      	movs	r3, #3
 8008810:	e03a      	b.n	8008888 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	68db      	ldr	r3, [r3, #12]
 8008818:	f003 0304 	and.w	r3, r3, #4
 800881c:	2b00      	cmp	r3, #0
 800881e:	d023      	beq.n	8008868 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	2b80      	cmp	r3, #128	@ 0x80
 8008824:	d020      	beq.n	8008868 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	2b40      	cmp	r3, #64	@ 0x40
 800882a:	d01d      	beq.n	8008868 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f003 0308 	and.w	r3, r3, #8
 8008836:	2b08      	cmp	r3, #8
 8008838:	d116      	bne.n	8008868 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800883a:	2300      	movs	r3, #0
 800883c:	617b      	str	r3, [r7, #20]
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	617b      	str	r3, [r7, #20]
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	617b      	str	r3, [r7, #20]
 800884e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008850:	68f8      	ldr	r0, [r7, #12]
 8008852:	f000 f856 	bl	8008902 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2208      	movs	r2, #8
 800885a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2200      	movs	r2, #0
 8008860:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008864:	2301      	movs	r3, #1
 8008866:	e00f      	b.n	8008888 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	4013      	ands	r3, r2
 8008872:	68ba      	ldr	r2, [r7, #8]
 8008874:	429a      	cmp	r2, r3
 8008876:	bf0c      	ite	eq
 8008878:	2301      	moveq	r3, #1
 800887a:	2300      	movne	r3, #0
 800887c:	b2db      	uxtb	r3, r3
 800887e:	461a      	mov	r2, r3
 8008880:	79fb      	ldrb	r3, [r7, #7]
 8008882:	429a      	cmp	r2, r3
 8008884:	d0b4      	beq.n	80087f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008886:	2300      	movs	r3, #0
}
 8008888:	4618      	mov	r0, r3
 800888a:	3718      	adds	r7, #24
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008890:	b480      	push	{r7}
 8008892:	b085      	sub	sp, #20
 8008894:	af00      	add	r7, sp, #0
 8008896:	60f8      	str	r0, [r7, #12]
 8008898:	60b9      	str	r1, [r7, #8]
 800889a:	4613      	mov	r3, r2
 800889c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	68ba      	ldr	r2, [r7, #8]
 80088a2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	88fa      	ldrh	r2, [r7, #6]
 80088a8:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	88fa      	ldrh	r2, [r7, #6]
 80088ae:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2200      	movs	r2, #0
 80088b4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2222      	movs	r2, #34	@ 0x22
 80088ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	691b      	ldr	r3, [r3, #16]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d007      	beq.n	80088d6 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	68da      	ldr	r2, [r3, #12]
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80088d4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	695a      	ldr	r2, [r3, #20]
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f042 0201 	orr.w	r2, r2, #1
 80088e4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	68da      	ldr	r2, [r3, #12]
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f042 0220 	orr.w	r2, r2, #32
 80088f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80088f6:	2300      	movs	r3, #0
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3714      	adds	r7, #20
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bc80      	pop	{r7}
 8008900:	4770      	bx	lr

08008902 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008902:	b480      	push	{r7}
 8008904:	b095      	sub	sp, #84	@ 0x54
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	330c      	adds	r3, #12
 8008910:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008914:	e853 3f00 	ldrex	r3, [r3]
 8008918:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800891a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800891c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008920:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	330c      	adds	r3, #12
 8008928:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800892a:	643a      	str	r2, [r7, #64]	@ 0x40
 800892c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800892e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008930:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008932:	e841 2300 	strex	r3, r2, [r1]
 8008936:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800893a:	2b00      	cmp	r3, #0
 800893c:	d1e5      	bne.n	800890a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	3314      	adds	r3, #20
 8008944:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008946:	6a3b      	ldr	r3, [r7, #32]
 8008948:	e853 3f00 	ldrex	r3, [r3]
 800894c:	61fb      	str	r3, [r7, #28]
   return(result);
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	f023 0301 	bic.w	r3, r3, #1
 8008954:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	3314      	adds	r3, #20
 800895c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800895e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008960:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008962:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008964:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008966:	e841 2300 	strex	r3, r2, [r1]
 800896a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800896c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800896e:	2b00      	cmp	r3, #0
 8008970:	d1e5      	bne.n	800893e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008976:	2b01      	cmp	r3, #1
 8008978:	d119      	bne.n	80089ae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	330c      	adds	r3, #12
 8008980:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	e853 3f00 	ldrex	r3, [r3]
 8008988:	60bb      	str	r3, [r7, #8]
   return(result);
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	f023 0310 	bic.w	r3, r3, #16
 8008990:	647b      	str	r3, [r7, #68]	@ 0x44
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	330c      	adds	r3, #12
 8008998:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800899a:	61ba      	str	r2, [r7, #24]
 800899c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800899e:	6979      	ldr	r1, [r7, #20]
 80089a0:	69ba      	ldr	r2, [r7, #24]
 80089a2:	e841 2300 	strex	r3, r2, [r1]
 80089a6:	613b      	str	r3, [r7, #16]
   return(result);
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d1e5      	bne.n	800897a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2220      	movs	r2, #32
 80089b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2200      	movs	r2, #0
 80089ba:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80089bc:	bf00      	nop
 80089be:	3754      	adds	r7, #84	@ 0x54
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bc80      	pop	{r7}
 80089c4:	4770      	bx	lr

080089c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80089c6:	b580      	push	{r7, lr}
 80089c8:	b084      	sub	sp, #16
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2200      	movs	r2, #0
 80089d8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2200      	movs	r2, #0
 80089de:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80089e0:	68f8      	ldr	r0, [r7, #12]
 80089e2:	f7ff fee8 	bl	80087b6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089e6:	bf00      	nop
 80089e8:	3710      	adds	r7, #16
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80089ee:	b480      	push	{r7}
 80089f0:	b085      	sub	sp, #20
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	2b21      	cmp	r3, #33	@ 0x21
 8008a00:	d13e      	bne.n	8008a80 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	689b      	ldr	r3, [r3, #8]
 8008a06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a0a:	d114      	bne.n	8008a36 <UART_Transmit_IT+0x48>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	691b      	ldr	r3, [r3, #16]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d110      	bne.n	8008a36 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6a1b      	ldr	r3, [r3, #32]
 8008a18:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	881b      	ldrh	r3, [r3, #0]
 8008a1e:	461a      	mov	r2, r3
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a28:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6a1b      	ldr	r3, [r3, #32]
 8008a2e:	1c9a      	adds	r2, r3, #2
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	621a      	str	r2, [r3, #32]
 8008a34:	e008      	b.n	8008a48 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6a1b      	ldr	r3, [r3, #32]
 8008a3a:	1c59      	adds	r1, r3, #1
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	6211      	str	r1, [r2, #32]
 8008a40:	781a      	ldrb	r2, [r3, #0]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	3b01      	subs	r3, #1
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	4619      	mov	r1, r3
 8008a56:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d10f      	bne.n	8008a7c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	68da      	ldr	r2, [r3, #12]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008a6a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	68da      	ldr	r2, [r3, #12]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008a7a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	e000      	b.n	8008a82 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008a80:	2302      	movs	r3, #2
  }
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3714      	adds	r7, #20
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bc80      	pop	{r7}
 8008a8a:	4770      	bx	lr

08008a8c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b082      	sub	sp, #8
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	68da      	ldr	r2, [r3, #12]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008aa2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2220      	movs	r2, #32
 8008aa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f7ff fe79 	bl	80087a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008ab2:	2300      	movs	r3, #0
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3708      	adds	r7, #8
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b08c      	sub	sp, #48	@ 0x30
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	2b22      	cmp	r3, #34	@ 0x22
 8008ace:	f040 80ae 	bne.w	8008c2e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ada:	d117      	bne.n	8008b0c <UART_Receive_IT+0x50>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	691b      	ldr	r3, [r3, #16]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d113      	bne.n	8008b0c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aec:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008afa:	b29a      	uxth	r2, r3
 8008afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008afe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b04:	1c9a      	adds	r2, r3, #2
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	629a      	str	r2, [r3, #40]	@ 0x28
 8008b0a:	e026      	b.n	8008b5a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008b12:	2300      	movs	r3, #0
 8008b14:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b1e:	d007      	beq.n	8008b30 <UART_Receive_IT+0x74>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	689b      	ldr	r3, [r3, #8]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d10a      	bne.n	8008b3e <UART_Receive_IT+0x82>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	691b      	ldr	r3, [r3, #16]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d106      	bne.n	8008b3e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	b2da      	uxtb	r2, r3
 8008b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b3a:	701a      	strb	r2, [r3, #0]
 8008b3c:	e008      	b.n	8008b50 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b4a:	b2da      	uxtb	r2, r3
 8008b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b4e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b54:	1c5a      	adds	r2, r3, #1
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	3b01      	subs	r3, #1
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	4619      	mov	r1, r3
 8008b68:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d15d      	bne.n	8008c2a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	68da      	ldr	r2, [r3, #12]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f022 0220 	bic.w	r2, r2, #32
 8008b7c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	68da      	ldr	r2, [r3, #12]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008b8c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	695a      	ldr	r2, [r3, #20]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f022 0201 	bic.w	r2, r2, #1
 8008b9c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2220      	movs	r2, #32
 8008ba2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d135      	bne.n	8008c20 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	330c      	adds	r3, #12
 8008bc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	e853 3f00 	ldrex	r3, [r3]
 8008bc8:	613b      	str	r3, [r7, #16]
   return(result);
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	f023 0310 	bic.w	r3, r3, #16
 8008bd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	330c      	adds	r3, #12
 8008bd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008bda:	623a      	str	r2, [r7, #32]
 8008bdc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bde:	69f9      	ldr	r1, [r7, #28]
 8008be0:	6a3a      	ldr	r2, [r7, #32]
 8008be2:	e841 2300 	strex	r3, r2, [r1]
 8008be6:	61bb      	str	r3, [r7, #24]
   return(result);
 8008be8:	69bb      	ldr	r3, [r7, #24]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d1e5      	bne.n	8008bba <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f003 0310 	and.w	r3, r3, #16
 8008bf8:	2b10      	cmp	r3, #16
 8008bfa:	d10a      	bne.n	8008c12 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	60fb      	str	r3, [r7, #12]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	60fb      	str	r3, [r7, #12]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	60fb      	str	r3, [r7, #12]
 8008c10:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008c16:	4619      	mov	r1, r3
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f7ff fdd5 	bl	80087c8 <HAL_UARTEx_RxEventCallback>
 8008c1e:	e002      	b.n	8008c26 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f7f9 fda9 	bl	8002778 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008c26:	2300      	movs	r3, #0
 8008c28:	e002      	b.n	8008c30 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	e000      	b.n	8008c30 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008c2e:	2302      	movs	r3, #2
  }
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3730      	adds	r7, #48	@ 0x30
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b084      	sub	sp, #16
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	691b      	ldr	r3, [r3, #16]
 8008c46:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	68da      	ldr	r2, [r3, #12]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	430a      	orrs	r2, r1
 8008c54:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	689a      	ldr	r2, [r3, #8]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	691b      	ldr	r3, [r3, #16]
 8008c5e:	431a      	orrs	r2, r3
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	695b      	ldr	r3, [r3, #20]
 8008c64:	4313      	orrs	r3, r2
 8008c66:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	68db      	ldr	r3, [r3, #12]
 8008c6e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8008c72:	f023 030c 	bic.w	r3, r3, #12
 8008c76:	687a      	ldr	r2, [r7, #4]
 8008c78:	6812      	ldr	r2, [r2, #0]
 8008c7a:	68b9      	ldr	r1, [r7, #8]
 8008c7c:	430b      	orrs	r3, r1
 8008c7e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	695b      	ldr	r3, [r3, #20]
 8008c86:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	699a      	ldr	r2, [r3, #24]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	430a      	orrs	r2, r1
 8008c94:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4a2c      	ldr	r2, [pc, #176]	@ (8008d4c <UART_SetConfig+0x114>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d103      	bne.n	8008ca8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008ca0:	f7fd fea2 	bl	80069e8 <HAL_RCC_GetPCLK2Freq>
 8008ca4:	60f8      	str	r0, [r7, #12]
 8008ca6:	e002      	b.n	8008cae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008ca8:	f7fd fe8a 	bl	80069c0 <HAL_RCC_GetPCLK1Freq>
 8008cac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008cae:	68fa      	ldr	r2, [r7, #12]
 8008cb0:	4613      	mov	r3, r2
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	4413      	add	r3, r2
 8008cb6:	009a      	lsls	r2, r3, #2
 8008cb8:	441a      	add	r2, r3
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	009b      	lsls	r3, r3, #2
 8008cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cc4:	4a22      	ldr	r2, [pc, #136]	@ (8008d50 <UART_SetConfig+0x118>)
 8008cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8008cca:	095b      	lsrs	r3, r3, #5
 8008ccc:	0119      	lsls	r1, r3, #4
 8008cce:	68fa      	ldr	r2, [r7, #12]
 8008cd0:	4613      	mov	r3, r2
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	4413      	add	r3, r2
 8008cd6:	009a      	lsls	r2, r3, #2
 8008cd8:	441a      	add	r2, r3
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	fbb2 f2f3 	udiv	r2, r2, r3
 8008ce4:	4b1a      	ldr	r3, [pc, #104]	@ (8008d50 <UART_SetConfig+0x118>)
 8008ce6:	fba3 0302 	umull	r0, r3, r3, r2
 8008cea:	095b      	lsrs	r3, r3, #5
 8008cec:	2064      	movs	r0, #100	@ 0x64
 8008cee:	fb00 f303 	mul.w	r3, r0, r3
 8008cf2:	1ad3      	subs	r3, r2, r3
 8008cf4:	011b      	lsls	r3, r3, #4
 8008cf6:	3332      	adds	r3, #50	@ 0x32
 8008cf8:	4a15      	ldr	r2, [pc, #84]	@ (8008d50 <UART_SetConfig+0x118>)
 8008cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8008cfe:	095b      	lsrs	r3, r3, #5
 8008d00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008d04:	4419      	add	r1, r3
 8008d06:	68fa      	ldr	r2, [r7, #12]
 8008d08:	4613      	mov	r3, r2
 8008d0a:	009b      	lsls	r3, r3, #2
 8008d0c:	4413      	add	r3, r2
 8008d0e:	009a      	lsls	r2, r3, #2
 8008d10:	441a      	add	r2, r3
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	fbb2 f2f3 	udiv	r2, r2, r3
 8008d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8008d50 <UART_SetConfig+0x118>)
 8008d1e:	fba3 0302 	umull	r0, r3, r3, r2
 8008d22:	095b      	lsrs	r3, r3, #5
 8008d24:	2064      	movs	r0, #100	@ 0x64
 8008d26:	fb00 f303 	mul.w	r3, r0, r3
 8008d2a:	1ad3      	subs	r3, r2, r3
 8008d2c:	011b      	lsls	r3, r3, #4
 8008d2e:	3332      	adds	r3, #50	@ 0x32
 8008d30:	4a07      	ldr	r2, [pc, #28]	@ (8008d50 <UART_SetConfig+0x118>)
 8008d32:	fba2 2303 	umull	r2, r3, r2, r3
 8008d36:	095b      	lsrs	r3, r3, #5
 8008d38:	f003 020f 	and.w	r2, r3, #15
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	440a      	add	r2, r1
 8008d42:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008d44:	bf00      	nop
 8008d46:	3710      	adds	r7, #16
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}
 8008d4c:	40013800 	.word	0x40013800
 8008d50:	51eb851f 	.word	0x51eb851f

08008d54 <std>:
 8008d54:	2300      	movs	r3, #0
 8008d56:	b510      	push	{r4, lr}
 8008d58:	4604      	mov	r4, r0
 8008d5a:	e9c0 3300 	strd	r3, r3, [r0]
 8008d5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d62:	6083      	str	r3, [r0, #8]
 8008d64:	8181      	strh	r1, [r0, #12]
 8008d66:	6643      	str	r3, [r0, #100]	@ 0x64
 8008d68:	81c2      	strh	r2, [r0, #14]
 8008d6a:	6183      	str	r3, [r0, #24]
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	2208      	movs	r2, #8
 8008d70:	305c      	adds	r0, #92	@ 0x5c
 8008d72:	f000 faad 	bl	80092d0 <memset>
 8008d76:	4b0d      	ldr	r3, [pc, #52]	@ (8008dac <std+0x58>)
 8008d78:	6224      	str	r4, [r4, #32]
 8008d7a:	6263      	str	r3, [r4, #36]	@ 0x24
 8008d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8008db0 <std+0x5c>)
 8008d7e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008d80:	4b0c      	ldr	r3, [pc, #48]	@ (8008db4 <std+0x60>)
 8008d82:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008d84:	4b0c      	ldr	r3, [pc, #48]	@ (8008db8 <std+0x64>)
 8008d86:	6323      	str	r3, [r4, #48]	@ 0x30
 8008d88:	4b0c      	ldr	r3, [pc, #48]	@ (8008dbc <std+0x68>)
 8008d8a:	429c      	cmp	r4, r3
 8008d8c:	d006      	beq.n	8008d9c <std+0x48>
 8008d8e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008d92:	4294      	cmp	r4, r2
 8008d94:	d002      	beq.n	8008d9c <std+0x48>
 8008d96:	33d0      	adds	r3, #208	@ 0xd0
 8008d98:	429c      	cmp	r4, r3
 8008d9a:	d105      	bne.n	8008da8 <std+0x54>
 8008d9c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008da4:	f000 bb0c 	b.w	80093c0 <__retarget_lock_init_recursive>
 8008da8:	bd10      	pop	{r4, pc}
 8008daa:	bf00      	nop
 8008dac:	08009121 	.word	0x08009121
 8008db0:	08009143 	.word	0x08009143
 8008db4:	0800917b 	.word	0x0800917b
 8008db8:	0800919f 	.word	0x0800919f
 8008dbc:	200002bc 	.word	0x200002bc

08008dc0 <stdio_exit_handler>:
 8008dc0:	4a02      	ldr	r2, [pc, #8]	@ (8008dcc <stdio_exit_handler+0xc>)
 8008dc2:	4903      	ldr	r1, [pc, #12]	@ (8008dd0 <stdio_exit_handler+0x10>)
 8008dc4:	4803      	ldr	r0, [pc, #12]	@ (8008dd4 <stdio_exit_handler+0x14>)
 8008dc6:	f000 b869 	b.w	8008e9c <_fwalk_sglue>
 8008dca:	bf00      	nop
 8008dcc:	20000044 	.word	0x20000044
 8008dd0:	08009c85 	.word	0x08009c85
 8008dd4:	20000054 	.word	0x20000054

08008dd8 <cleanup_stdio>:
 8008dd8:	6841      	ldr	r1, [r0, #4]
 8008dda:	4b0c      	ldr	r3, [pc, #48]	@ (8008e0c <cleanup_stdio+0x34>)
 8008ddc:	b510      	push	{r4, lr}
 8008dde:	4299      	cmp	r1, r3
 8008de0:	4604      	mov	r4, r0
 8008de2:	d001      	beq.n	8008de8 <cleanup_stdio+0x10>
 8008de4:	f000 ff4e 	bl	8009c84 <_fflush_r>
 8008de8:	68a1      	ldr	r1, [r4, #8]
 8008dea:	4b09      	ldr	r3, [pc, #36]	@ (8008e10 <cleanup_stdio+0x38>)
 8008dec:	4299      	cmp	r1, r3
 8008dee:	d002      	beq.n	8008df6 <cleanup_stdio+0x1e>
 8008df0:	4620      	mov	r0, r4
 8008df2:	f000 ff47 	bl	8009c84 <_fflush_r>
 8008df6:	68e1      	ldr	r1, [r4, #12]
 8008df8:	4b06      	ldr	r3, [pc, #24]	@ (8008e14 <cleanup_stdio+0x3c>)
 8008dfa:	4299      	cmp	r1, r3
 8008dfc:	d004      	beq.n	8008e08 <cleanup_stdio+0x30>
 8008dfe:	4620      	mov	r0, r4
 8008e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e04:	f000 bf3e 	b.w	8009c84 <_fflush_r>
 8008e08:	bd10      	pop	{r4, pc}
 8008e0a:	bf00      	nop
 8008e0c:	200002bc 	.word	0x200002bc
 8008e10:	20000324 	.word	0x20000324
 8008e14:	2000038c 	.word	0x2000038c

08008e18 <global_stdio_init.part.0>:
 8008e18:	b510      	push	{r4, lr}
 8008e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8008e48 <global_stdio_init.part.0+0x30>)
 8008e1c:	4c0b      	ldr	r4, [pc, #44]	@ (8008e4c <global_stdio_init.part.0+0x34>)
 8008e1e:	4a0c      	ldr	r2, [pc, #48]	@ (8008e50 <global_stdio_init.part.0+0x38>)
 8008e20:	4620      	mov	r0, r4
 8008e22:	601a      	str	r2, [r3, #0]
 8008e24:	2104      	movs	r1, #4
 8008e26:	2200      	movs	r2, #0
 8008e28:	f7ff ff94 	bl	8008d54 <std>
 8008e2c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008e30:	2201      	movs	r2, #1
 8008e32:	2109      	movs	r1, #9
 8008e34:	f7ff ff8e 	bl	8008d54 <std>
 8008e38:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008e3c:	2202      	movs	r2, #2
 8008e3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e42:	2112      	movs	r1, #18
 8008e44:	f7ff bf86 	b.w	8008d54 <std>
 8008e48:	200003f4 	.word	0x200003f4
 8008e4c:	200002bc 	.word	0x200002bc
 8008e50:	08008dc1 	.word	0x08008dc1

08008e54 <__sfp_lock_acquire>:
 8008e54:	4801      	ldr	r0, [pc, #4]	@ (8008e5c <__sfp_lock_acquire+0x8>)
 8008e56:	f000 bab4 	b.w	80093c2 <__retarget_lock_acquire_recursive>
 8008e5a:	bf00      	nop
 8008e5c:	200003fd 	.word	0x200003fd

08008e60 <__sfp_lock_release>:
 8008e60:	4801      	ldr	r0, [pc, #4]	@ (8008e68 <__sfp_lock_release+0x8>)
 8008e62:	f000 baaf 	b.w	80093c4 <__retarget_lock_release_recursive>
 8008e66:	bf00      	nop
 8008e68:	200003fd 	.word	0x200003fd

08008e6c <__sinit>:
 8008e6c:	b510      	push	{r4, lr}
 8008e6e:	4604      	mov	r4, r0
 8008e70:	f7ff fff0 	bl	8008e54 <__sfp_lock_acquire>
 8008e74:	6a23      	ldr	r3, [r4, #32]
 8008e76:	b11b      	cbz	r3, 8008e80 <__sinit+0x14>
 8008e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e7c:	f7ff bff0 	b.w	8008e60 <__sfp_lock_release>
 8008e80:	4b04      	ldr	r3, [pc, #16]	@ (8008e94 <__sinit+0x28>)
 8008e82:	6223      	str	r3, [r4, #32]
 8008e84:	4b04      	ldr	r3, [pc, #16]	@ (8008e98 <__sinit+0x2c>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d1f5      	bne.n	8008e78 <__sinit+0xc>
 8008e8c:	f7ff ffc4 	bl	8008e18 <global_stdio_init.part.0>
 8008e90:	e7f2      	b.n	8008e78 <__sinit+0xc>
 8008e92:	bf00      	nop
 8008e94:	08008dd9 	.word	0x08008dd9
 8008e98:	200003f4 	.word	0x200003f4

08008e9c <_fwalk_sglue>:
 8008e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ea0:	4607      	mov	r7, r0
 8008ea2:	4688      	mov	r8, r1
 8008ea4:	4614      	mov	r4, r2
 8008ea6:	2600      	movs	r6, #0
 8008ea8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008eac:	f1b9 0901 	subs.w	r9, r9, #1
 8008eb0:	d505      	bpl.n	8008ebe <_fwalk_sglue+0x22>
 8008eb2:	6824      	ldr	r4, [r4, #0]
 8008eb4:	2c00      	cmp	r4, #0
 8008eb6:	d1f7      	bne.n	8008ea8 <_fwalk_sglue+0xc>
 8008eb8:	4630      	mov	r0, r6
 8008eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ebe:	89ab      	ldrh	r3, [r5, #12]
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d907      	bls.n	8008ed4 <_fwalk_sglue+0x38>
 8008ec4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008ec8:	3301      	adds	r3, #1
 8008eca:	d003      	beq.n	8008ed4 <_fwalk_sglue+0x38>
 8008ecc:	4629      	mov	r1, r5
 8008ece:	4638      	mov	r0, r7
 8008ed0:	47c0      	blx	r8
 8008ed2:	4306      	orrs	r6, r0
 8008ed4:	3568      	adds	r5, #104	@ 0x68
 8008ed6:	e7e9      	b.n	8008eac <_fwalk_sglue+0x10>

08008ed8 <iprintf>:
 8008ed8:	b40f      	push	{r0, r1, r2, r3}
 8008eda:	b507      	push	{r0, r1, r2, lr}
 8008edc:	4906      	ldr	r1, [pc, #24]	@ (8008ef8 <iprintf+0x20>)
 8008ede:	ab04      	add	r3, sp, #16
 8008ee0:	6808      	ldr	r0, [r1, #0]
 8008ee2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ee6:	6881      	ldr	r1, [r0, #8]
 8008ee8:	9301      	str	r3, [sp, #4]
 8008eea:	f000 fba1 	bl	8009630 <_vfiprintf_r>
 8008eee:	b003      	add	sp, #12
 8008ef0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ef4:	b004      	add	sp, #16
 8008ef6:	4770      	bx	lr
 8008ef8:	20000050 	.word	0x20000050

08008efc <_puts_r>:
 8008efc:	6a03      	ldr	r3, [r0, #32]
 8008efe:	b570      	push	{r4, r5, r6, lr}
 8008f00:	4605      	mov	r5, r0
 8008f02:	460e      	mov	r6, r1
 8008f04:	6884      	ldr	r4, [r0, #8]
 8008f06:	b90b      	cbnz	r3, 8008f0c <_puts_r+0x10>
 8008f08:	f7ff ffb0 	bl	8008e6c <__sinit>
 8008f0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008f0e:	07db      	lsls	r3, r3, #31
 8008f10:	d405      	bmi.n	8008f1e <_puts_r+0x22>
 8008f12:	89a3      	ldrh	r3, [r4, #12]
 8008f14:	0598      	lsls	r0, r3, #22
 8008f16:	d402      	bmi.n	8008f1e <_puts_r+0x22>
 8008f18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f1a:	f000 fa52 	bl	80093c2 <__retarget_lock_acquire_recursive>
 8008f1e:	89a3      	ldrh	r3, [r4, #12]
 8008f20:	0719      	lsls	r1, r3, #28
 8008f22:	d502      	bpl.n	8008f2a <_puts_r+0x2e>
 8008f24:	6923      	ldr	r3, [r4, #16]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d135      	bne.n	8008f96 <_puts_r+0x9a>
 8008f2a:	4621      	mov	r1, r4
 8008f2c:	4628      	mov	r0, r5
 8008f2e:	f000 f979 	bl	8009224 <__swsetup_r>
 8008f32:	b380      	cbz	r0, 8008f96 <_puts_r+0x9a>
 8008f34:	f04f 35ff 	mov.w	r5, #4294967295
 8008f38:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008f3a:	07da      	lsls	r2, r3, #31
 8008f3c:	d405      	bmi.n	8008f4a <_puts_r+0x4e>
 8008f3e:	89a3      	ldrh	r3, [r4, #12]
 8008f40:	059b      	lsls	r3, r3, #22
 8008f42:	d402      	bmi.n	8008f4a <_puts_r+0x4e>
 8008f44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f46:	f000 fa3d 	bl	80093c4 <__retarget_lock_release_recursive>
 8008f4a:	4628      	mov	r0, r5
 8008f4c:	bd70      	pop	{r4, r5, r6, pc}
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	da04      	bge.n	8008f5c <_puts_r+0x60>
 8008f52:	69a2      	ldr	r2, [r4, #24]
 8008f54:	429a      	cmp	r2, r3
 8008f56:	dc17      	bgt.n	8008f88 <_puts_r+0x8c>
 8008f58:	290a      	cmp	r1, #10
 8008f5a:	d015      	beq.n	8008f88 <_puts_r+0x8c>
 8008f5c:	6823      	ldr	r3, [r4, #0]
 8008f5e:	1c5a      	adds	r2, r3, #1
 8008f60:	6022      	str	r2, [r4, #0]
 8008f62:	7019      	strb	r1, [r3, #0]
 8008f64:	68a3      	ldr	r3, [r4, #8]
 8008f66:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008f6a:	3b01      	subs	r3, #1
 8008f6c:	60a3      	str	r3, [r4, #8]
 8008f6e:	2900      	cmp	r1, #0
 8008f70:	d1ed      	bne.n	8008f4e <_puts_r+0x52>
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	da11      	bge.n	8008f9a <_puts_r+0x9e>
 8008f76:	4622      	mov	r2, r4
 8008f78:	210a      	movs	r1, #10
 8008f7a:	4628      	mov	r0, r5
 8008f7c:	f000 f913 	bl	80091a6 <__swbuf_r>
 8008f80:	3001      	adds	r0, #1
 8008f82:	d0d7      	beq.n	8008f34 <_puts_r+0x38>
 8008f84:	250a      	movs	r5, #10
 8008f86:	e7d7      	b.n	8008f38 <_puts_r+0x3c>
 8008f88:	4622      	mov	r2, r4
 8008f8a:	4628      	mov	r0, r5
 8008f8c:	f000 f90b 	bl	80091a6 <__swbuf_r>
 8008f90:	3001      	adds	r0, #1
 8008f92:	d1e7      	bne.n	8008f64 <_puts_r+0x68>
 8008f94:	e7ce      	b.n	8008f34 <_puts_r+0x38>
 8008f96:	3e01      	subs	r6, #1
 8008f98:	e7e4      	b.n	8008f64 <_puts_r+0x68>
 8008f9a:	6823      	ldr	r3, [r4, #0]
 8008f9c:	1c5a      	adds	r2, r3, #1
 8008f9e:	6022      	str	r2, [r4, #0]
 8008fa0:	220a      	movs	r2, #10
 8008fa2:	701a      	strb	r2, [r3, #0]
 8008fa4:	e7ee      	b.n	8008f84 <_puts_r+0x88>
	...

08008fa8 <puts>:
 8008fa8:	4b02      	ldr	r3, [pc, #8]	@ (8008fb4 <puts+0xc>)
 8008faa:	4601      	mov	r1, r0
 8008fac:	6818      	ldr	r0, [r3, #0]
 8008fae:	f7ff bfa5 	b.w	8008efc <_puts_r>
 8008fb2:	bf00      	nop
 8008fb4:	20000050 	.word	0x20000050

08008fb8 <setvbuf>:
 8008fb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008fbc:	461d      	mov	r5, r3
 8008fbe:	4b57      	ldr	r3, [pc, #348]	@ (800911c <setvbuf+0x164>)
 8008fc0:	4604      	mov	r4, r0
 8008fc2:	681f      	ldr	r7, [r3, #0]
 8008fc4:	460e      	mov	r6, r1
 8008fc6:	4690      	mov	r8, r2
 8008fc8:	b127      	cbz	r7, 8008fd4 <setvbuf+0x1c>
 8008fca:	6a3b      	ldr	r3, [r7, #32]
 8008fcc:	b913      	cbnz	r3, 8008fd4 <setvbuf+0x1c>
 8008fce:	4638      	mov	r0, r7
 8008fd0:	f7ff ff4c 	bl	8008e6c <__sinit>
 8008fd4:	f1b8 0f02 	cmp.w	r8, #2
 8008fd8:	d006      	beq.n	8008fe8 <setvbuf+0x30>
 8008fda:	f1b8 0f01 	cmp.w	r8, #1
 8008fde:	f200 809a 	bhi.w	8009116 <setvbuf+0x15e>
 8008fe2:	2d00      	cmp	r5, #0
 8008fe4:	f2c0 8097 	blt.w	8009116 <setvbuf+0x15e>
 8008fe8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008fea:	07d9      	lsls	r1, r3, #31
 8008fec:	d405      	bmi.n	8008ffa <setvbuf+0x42>
 8008fee:	89a3      	ldrh	r3, [r4, #12]
 8008ff0:	059a      	lsls	r2, r3, #22
 8008ff2:	d402      	bmi.n	8008ffa <setvbuf+0x42>
 8008ff4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ff6:	f000 f9e4 	bl	80093c2 <__retarget_lock_acquire_recursive>
 8008ffa:	4621      	mov	r1, r4
 8008ffc:	4638      	mov	r0, r7
 8008ffe:	f000 fe41 	bl	8009c84 <_fflush_r>
 8009002:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009004:	b141      	cbz	r1, 8009018 <setvbuf+0x60>
 8009006:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800900a:	4299      	cmp	r1, r3
 800900c:	d002      	beq.n	8009014 <setvbuf+0x5c>
 800900e:	4638      	mov	r0, r7
 8009010:	f000 f9e8 	bl	80093e4 <_free_r>
 8009014:	2300      	movs	r3, #0
 8009016:	6363      	str	r3, [r4, #52]	@ 0x34
 8009018:	2300      	movs	r3, #0
 800901a:	61a3      	str	r3, [r4, #24]
 800901c:	6063      	str	r3, [r4, #4]
 800901e:	89a3      	ldrh	r3, [r4, #12]
 8009020:	061b      	lsls	r3, r3, #24
 8009022:	d503      	bpl.n	800902c <setvbuf+0x74>
 8009024:	4638      	mov	r0, r7
 8009026:	6921      	ldr	r1, [r4, #16]
 8009028:	f000 f9dc 	bl	80093e4 <_free_r>
 800902c:	89a3      	ldrh	r3, [r4, #12]
 800902e:	f1b8 0f02 	cmp.w	r8, #2
 8009032:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8009036:	f023 0303 	bic.w	r3, r3, #3
 800903a:	81a3      	strh	r3, [r4, #12]
 800903c:	d061      	beq.n	8009102 <setvbuf+0x14a>
 800903e:	ab01      	add	r3, sp, #4
 8009040:	466a      	mov	r2, sp
 8009042:	4621      	mov	r1, r4
 8009044:	4638      	mov	r0, r7
 8009046:	f000 fe45 	bl	8009cd4 <__swhatbuf_r>
 800904a:	89a3      	ldrh	r3, [r4, #12]
 800904c:	4318      	orrs	r0, r3
 800904e:	81a0      	strh	r0, [r4, #12]
 8009050:	bb2d      	cbnz	r5, 800909e <setvbuf+0xe6>
 8009052:	9d00      	ldr	r5, [sp, #0]
 8009054:	4628      	mov	r0, r5
 8009056:	f000 fa0d 	bl	8009474 <malloc>
 800905a:	4606      	mov	r6, r0
 800905c:	2800      	cmp	r0, #0
 800905e:	d152      	bne.n	8009106 <setvbuf+0x14e>
 8009060:	f8dd 9000 	ldr.w	r9, [sp]
 8009064:	45a9      	cmp	r9, r5
 8009066:	d140      	bne.n	80090ea <setvbuf+0x132>
 8009068:	f04f 35ff 	mov.w	r5, #4294967295
 800906c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009070:	f043 0202 	orr.w	r2, r3, #2
 8009074:	81a2      	strh	r2, [r4, #12]
 8009076:	2200      	movs	r2, #0
 8009078:	60a2      	str	r2, [r4, #8]
 800907a:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800907e:	6022      	str	r2, [r4, #0]
 8009080:	6122      	str	r2, [r4, #16]
 8009082:	2201      	movs	r2, #1
 8009084:	6162      	str	r2, [r4, #20]
 8009086:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009088:	07d6      	lsls	r6, r2, #31
 800908a:	d404      	bmi.n	8009096 <setvbuf+0xde>
 800908c:	0598      	lsls	r0, r3, #22
 800908e:	d402      	bmi.n	8009096 <setvbuf+0xde>
 8009090:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009092:	f000 f997 	bl	80093c4 <__retarget_lock_release_recursive>
 8009096:	4628      	mov	r0, r5
 8009098:	b003      	add	sp, #12
 800909a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800909e:	2e00      	cmp	r6, #0
 80090a0:	d0d8      	beq.n	8009054 <setvbuf+0x9c>
 80090a2:	6a3b      	ldr	r3, [r7, #32]
 80090a4:	b913      	cbnz	r3, 80090ac <setvbuf+0xf4>
 80090a6:	4638      	mov	r0, r7
 80090a8:	f7ff fee0 	bl	8008e6c <__sinit>
 80090ac:	f1b8 0f01 	cmp.w	r8, #1
 80090b0:	bf08      	it	eq
 80090b2:	89a3      	ldrheq	r3, [r4, #12]
 80090b4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80090b8:	bf04      	itt	eq
 80090ba:	f043 0301 	orreq.w	r3, r3, #1
 80090be:	81a3      	strheq	r3, [r4, #12]
 80090c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090c4:	6026      	str	r6, [r4, #0]
 80090c6:	f013 0208 	ands.w	r2, r3, #8
 80090ca:	d01e      	beq.n	800910a <setvbuf+0x152>
 80090cc:	07d9      	lsls	r1, r3, #31
 80090ce:	bf41      	itttt	mi
 80090d0:	2200      	movmi	r2, #0
 80090d2:	426d      	negmi	r5, r5
 80090d4:	60a2      	strmi	r2, [r4, #8]
 80090d6:	61a5      	strmi	r5, [r4, #24]
 80090d8:	bf58      	it	pl
 80090da:	60a5      	strpl	r5, [r4, #8]
 80090dc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80090de:	07d2      	lsls	r2, r2, #31
 80090e0:	d401      	bmi.n	80090e6 <setvbuf+0x12e>
 80090e2:	059b      	lsls	r3, r3, #22
 80090e4:	d513      	bpl.n	800910e <setvbuf+0x156>
 80090e6:	2500      	movs	r5, #0
 80090e8:	e7d5      	b.n	8009096 <setvbuf+0xde>
 80090ea:	4648      	mov	r0, r9
 80090ec:	f000 f9c2 	bl	8009474 <malloc>
 80090f0:	4606      	mov	r6, r0
 80090f2:	2800      	cmp	r0, #0
 80090f4:	d0b8      	beq.n	8009068 <setvbuf+0xb0>
 80090f6:	89a3      	ldrh	r3, [r4, #12]
 80090f8:	464d      	mov	r5, r9
 80090fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090fe:	81a3      	strh	r3, [r4, #12]
 8009100:	e7cf      	b.n	80090a2 <setvbuf+0xea>
 8009102:	2500      	movs	r5, #0
 8009104:	e7b2      	b.n	800906c <setvbuf+0xb4>
 8009106:	46a9      	mov	r9, r5
 8009108:	e7f5      	b.n	80090f6 <setvbuf+0x13e>
 800910a:	60a2      	str	r2, [r4, #8]
 800910c:	e7e6      	b.n	80090dc <setvbuf+0x124>
 800910e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009110:	f000 f958 	bl	80093c4 <__retarget_lock_release_recursive>
 8009114:	e7e7      	b.n	80090e6 <setvbuf+0x12e>
 8009116:	f04f 35ff 	mov.w	r5, #4294967295
 800911a:	e7bc      	b.n	8009096 <setvbuf+0xde>
 800911c:	20000050 	.word	0x20000050

08009120 <__sread>:
 8009120:	b510      	push	{r4, lr}
 8009122:	460c      	mov	r4, r1
 8009124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009128:	f000 f8fc 	bl	8009324 <_read_r>
 800912c:	2800      	cmp	r0, #0
 800912e:	bfab      	itete	ge
 8009130:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009132:	89a3      	ldrhlt	r3, [r4, #12]
 8009134:	181b      	addge	r3, r3, r0
 8009136:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800913a:	bfac      	ite	ge
 800913c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800913e:	81a3      	strhlt	r3, [r4, #12]
 8009140:	bd10      	pop	{r4, pc}

08009142 <__swrite>:
 8009142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009146:	461f      	mov	r7, r3
 8009148:	898b      	ldrh	r3, [r1, #12]
 800914a:	4605      	mov	r5, r0
 800914c:	05db      	lsls	r3, r3, #23
 800914e:	460c      	mov	r4, r1
 8009150:	4616      	mov	r6, r2
 8009152:	d505      	bpl.n	8009160 <__swrite+0x1e>
 8009154:	2302      	movs	r3, #2
 8009156:	2200      	movs	r2, #0
 8009158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800915c:	f000 f8d0 	bl	8009300 <_lseek_r>
 8009160:	89a3      	ldrh	r3, [r4, #12]
 8009162:	4632      	mov	r2, r6
 8009164:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009168:	81a3      	strh	r3, [r4, #12]
 800916a:	4628      	mov	r0, r5
 800916c:	463b      	mov	r3, r7
 800916e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009172:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009176:	f000 b8e7 	b.w	8009348 <_write_r>

0800917a <__sseek>:
 800917a:	b510      	push	{r4, lr}
 800917c:	460c      	mov	r4, r1
 800917e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009182:	f000 f8bd 	bl	8009300 <_lseek_r>
 8009186:	1c43      	adds	r3, r0, #1
 8009188:	89a3      	ldrh	r3, [r4, #12]
 800918a:	bf15      	itete	ne
 800918c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800918e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009192:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009196:	81a3      	strheq	r3, [r4, #12]
 8009198:	bf18      	it	ne
 800919a:	81a3      	strhne	r3, [r4, #12]
 800919c:	bd10      	pop	{r4, pc}

0800919e <__sclose>:
 800919e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091a2:	f000 b89d 	b.w	80092e0 <_close_r>

080091a6 <__swbuf_r>:
 80091a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091a8:	460e      	mov	r6, r1
 80091aa:	4614      	mov	r4, r2
 80091ac:	4605      	mov	r5, r0
 80091ae:	b118      	cbz	r0, 80091b8 <__swbuf_r+0x12>
 80091b0:	6a03      	ldr	r3, [r0, #32]
 80091b2:	b90b      	cbnz	r3, 80091b8 <__swbuf_r+0x12>
 80091b4:	f7ff fe5a 	bl	8008e6c <__sinit>
 80091b8:	69a3      	ldr	r3, [r4, #24]
 80091ba:	60a3      	str	r3, [r4, #8]
 80091bc:	89a3      	ldrh	r3, [r4, #12]
 80091be:	071a      	lsls	r2, r3, #28
 80091c0:	d501      	bpl.n	80091c6 <__swbuf_r+0x20>
 80091c2:	6923      	ldr	r3, [r4, #16]
 80091c4:	b943      	cbnz	r3, 80091d8 <__swbuf_r+0x32>
 80091c6:	4621      	mov	r1, r4
 80091c8:	4628      	mov	r0, r5
 80091ca:	f000 f82b 	bl	8009224 <__swsetup_r>
 80091ce:	b118      	cbz	r0, 80091d8 <__swbuf_r+0x32>
 80091d0:	f04f 37ff 	mov.w	r7, #4294967295
 80091d4:	4638      	mov	r0, r7
 80091d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091d8:	6823      	ldr	r3, [r4, #0]
 80091da:	6922      	ldr	r2, [r4, #16]
 80091dc:	b2f6      	uxtb	r6, r6
 80091de:	1a98      	subs	r0, r3, r2
 80091e0:	6963      	ldr	r3, [r4, #20]
 80091e2:	4637      	mov	r7, r6
 80091e4:	4283      	cmp	r3, r0
 80091e6:	dc05      	bgt.n	80091f4 <__swbuf_r+0x4e>
 80091e8:	4621      	mov	r1, r4
 80091ea:	4628      	mov	r0, r5
 80091ec:	f000 fd4a 	bl	8009c84 <_fflush_r>
 80091f0:	2800      	cmp	r0, #0
 80091f2:	d1ed      	bne.n	80091d0 <__swbuf_r+0x2a>
 80091f4:	68a3      	ldr	r3, [r4, #8]
 80091f6:	3b01      	subs	r3, #1
 80091f8:	60a3      	str	r3, [r4, #8]
 80091fa:	6823      	ldr	r3, [r4, #0]
 80091fc:	1c5a      	adds	r2, r3, #1
 80091fe:	6022      	str	r2, [r4, #0]
 8009200:	701e      	strb	r6, [r3, #0]
 8009202:	6962      	ldr	r2, [r4, #20]
 8009204:	1c43      	adds	r3, r0, #1
 8009206:	429a      	cmp	r2, r3
 8009208:	d004      	beq.n	8009214 <__swbuf_r+0x6e>
 800920a:	89a3      	ldrh	r3, [r4, #12]
 800920c:	07db      	lsls	r3, r3, #31
 800920e:	d5e1      	bpl.n	80091d4 <__swbuf_r+0x2e>
 8009210:	2e0a      	cmp	r6, #10
 8009212:	d1df      	bne.n	80091d4 <__swbuf_r+0x2e>
 8009214:	4621      	mov	r1, r4
 8009216:	4628      	mov	r0, r5
 8009218:	f000 fd34 	bl	8009c84 <_fflush_r>
 800921c:	2800      	cmp	r0, #0
 800921e:	d0d9      	beq.n	80091d4 <__swbuf_r+0x2e>
 8009220:	e7d6      	b.n	80091d0 <__swbuf_r+0x2a>
	...

08009224 <__swsetup_r>:
 8009224:	b538      	push	{r3, r4, r5, lr}
 8009226:	4b29      	ldr	r3, [pc, #164]	@ (80092cc <__swsetup_r+0xa8>)
 8009228:	4605      	mov	r5, r0
 800922a:	6818      	ldr	r0, [r3, #0]
 800922c:	460c      	mov	r4, r1
 800922e:	b118      	cbz	r0, 8009238 <__swsetup_r+0x14>
 8009230:	6a03      	ldr	r3, [r0, #32]
 8009232:	b90b      	cbnz	r3, 8009238 <__swsetup_r+0x14>
 8009234:	f7ff fe1a 	bl	8008e6c <__sinit>
 8009238:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800923c:	0719      	lsls	r1, r3, #28
 800923e:	d422      	bmi.n	8009286 <__swsetup_r+0x62>
 8009240:	06da      	lsls	r2, r3, #27
 8009242:	d407      	bmi.n	8009254 <__swsetup_r+0x30>
 8009244:	2209      	movs	r2, #9
 8009246:	602a      	str	r2, [r5, #0]
 8009248:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800924c:	f04f 30ff 	mov.w	r0, #4294967295
 8009250:	81a3      	strh	r3, [r4, #12]
 8009252:	e033      	b.n	80092bc <__swsetup_r+0x98>
 8009254:	0758      	lsls	r0, r3, #29
 8009256:	d512      	bpl.n	800927e <__swsetup_r+0x5a>
 8009258:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800925a:	b141      	cbz	r1, 800926e <__swsetup_r+0x4a>
 800925c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009260:	4299      	cmp	r1, r3
 8009262:	d002      	beq.n	800926a <__swsetup_r+0x46>
 8009264:	4628      	mov	r0, r5
 8009266:	f000 f8bd 	bl	80093e4 <_free_r>
 800926a:	2300      	movs	r3, #0
 800926c:	6363      	str	r3, [r4, #52]	@ 0x34
 800926e:	89a3      	ldrh	r3, [r4, #12]
 8009270:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009274:	81a3      	strh	r3, [r4, #12]
 8009276:	2300      	movs	r3, #0
 8009278:	6063      	str	r3, [r4, #4]
 800927a:	6923      	ldr	r3, [r4, #16]
 800927c:	6023      	str	r3, [r4, #0]
 800927e:	89a3      	ldrh	r3, [r4, #12]
 8009280:	f043 0308 	orr.w	r3, r3, #8
 8009284:	81a3      	strh	r3, [r4, #12]
 8009286:	6923      	ldr	r3, [r4, #16]
 8009288:	b94b      	cbnz	r3, 800929e <__swsetup_r+0x7a>
 800928a:	89a3      	ldrh	r3, [r4, #12]
 800928c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009290:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009294:	d003      	beq.n	800929e <__swsetup_r+0x7a>
 8009296:	4621      	mov	r1, r4
 8009298:	4628      	mov	r0, r5
 800929a:	f000 fd40 	bl	8009d1e <__smakebuf_r>
 800929e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092a2:	f013 0201 	ands.w	r2, r3, #1
 80092a6:	d00a      	beq.n	80092be <__swsetup_r+0x9a>
 80092a8:	2200      	movs	r2, #0
 80092aa:	60a2      	str	r2, [r4, #8]
 80092ac:	6962      	ldr	r2, [r4, #20]
 80092ae:	4252      	negs	r2, r2
 80092b0:	61a2      	str	r2, [r4, #24]
 80092b2:	6922      	ldr	r2, [r4, #16]
 80092b4:	b942      	cbnz	r2, 80092c8 <__swsetup_r+0xa4>
 80092b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80092ba:	d1c5      	bne.n	8009248 <__swsetup_r+0x24>
 80092bc:	bd38      	pop	{r3, r4, r5, pc}
 80092be:	0799      	lsls	r1, r3, #30
 80092c0:	bf58      	it	pl
 80092c2:	6962      	ldrpl	r2, [r4, #20]
 80092c4:	60a2      	str	r2, [r4, #8]
 80092c6:	e7f4      	b.n	80092b2 <__swsetup_r+0x8e>
 80092c8:	2000      	movs	r0, #0
 80092ca:	e7f7      	b.n	80092bc <__swsetup_r+0x98>
 80092cc:	20000050 	.word	0x20000050

080092d0 <memset>:
 80092d0:	4603      	mov	r3, r0
 80092d2:	4402      	add	r2, r0
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d100      	bne.n	80092da <memset+0xa>
 80092d8:	4770      	bx	lr
 80092da:	f803 1b01 	strb.w	r1, [r3], #1
 80092de:	e7f9      	b.n	80092d4 <memset+0x4>

080092e0 <_close_r>:
 80092e0:	b538      	push	{r3, r4, r5, lr}
 80092e2:	2300      	movs	r3, #0
 80092e4:	4d05      	ldr	r5, [pc, #20]	@ (80092fc <_close_r+0x1c>)
 80092e6:	4604      	mov	r4, r0
 80092e8:	4608      	mov	r0, r1
 80092ea:	602b      	str	r3, [r5, #0]
 80092ec:	f7fa f98e 	bl	800360c <_close>
 80092f0:	1c43      	adds	r3, r0, #1
 80092f2:	d102      	bne.n	80092fa <_close_r+0x1a>
 80092f4:	682b      	ldr	r3, [r5, #0]
 80092f6:	b103      	cbz	r3, 80092fa <_close_r+0x1a>
 80092f8:	6023      	str	r3, [r4, #0]
 80092fa:	bd38      	pop	{r3, r4, r5, pc}
 80092fc:	200003f8 	.word	0x200003f8

08009300 <_lseek_r>:
 8009300:	b538      	push	{r3, r4, r5, lr}
 8009302:	4604      	mov	r4, r0
 8009304:	4608      	mov	r0, r1
 8009306:	4611      	mov	r1, r2
 8009308:	2200      	movs	r2, #0
 800930a:	4d05      	ldr	r5, [pc, #20]	@ (8009320 <_lseek_r+0x20>)
 800930c:	602a      	str	r2, [r5, #0]
 800930e:	461a      	mov	r2, r3
 8009310:	f7fa f9a0 	bl	8003654 <_lseek>
 8009314:	1c43      	adds	r3, r0, #1
 8009316:	d102      	bne.n	800931e <_lseek_r+0x1e>
 8009318:	682b      	ldr	r3, [r5, #0]
 800931a:	b103      	cbz	r3, 800931e <_lseek_r+0x1e>
 800931c:	6023      	str	r3, [r4, #0]
 800931e:	bd38      	pop	{r3, r4, r5, pc}
 8009320:	200003f8 	.word	0x200003f8

08009324 <_read_r>:
 8009324:	b538      	push	{r3, r4, r5, lr}
 8009326:	4604      	mov	r4, r0
 8009328:	4608      	mov	r0, r1
 800932a:	4611      	mov	r1, r2
 800932c:	2200      	movs	r2, #0
 800932e:	4d05      	ldr	r5, [pc, #20]	@ (8009344 <_read_r+0x20>)
 8009330:	602a      	str	r2, [r5, #0]
 8009332:	461a      	mov	r2, r3
 8009334:	f7fa fc90 	bl	8003c58 <_read>
 8009338:	1c43      	adds	r3, r0, #1
 800933a:	d102      	bne.n	8009342 <_read_r+0x1e>
 800933c:	682b      	ldr	r3, [r5, #0]
 800933e:	b103      	cbz	r3, 8009342 <_read_r+0x1e>
 8009340:	6023      	str	r3, [r4, #0]
 8009342:	bd38      	pop	{r3, r4, r5, pc}
 8009344:	200003f8 	.word	0x200003f8

08009348 <_write_r>:
 8009348:	b538      	push	{r3, r4, r5, lr}
 800934a:	4604      	mov	r4, r0
 800934c:	4608      	mov	r0, r1
 800934e:	4611      	mov	r1, r2
 8009350:	2200      	movs	r2, #0
 8009352:	4d05      	ldr	r5, [pc, #20]	@ (8009368 <_write_r+0x20>)
 8009354:	602a      	str	r2, [r5, #0]
 8009356:	461a      	mov	r2, r3
 8009358:	f7fa fc52 	bl	8003c00 <_write>
 800935c:	1c43      	adds	r3, r0, #1
 800935e:	d102      	bne.n	8009366 <_write_r+0x1e>
 8009360:	682b      	ldr	r3, [r5, #0]
 8009362:	b103      	cbz	r3, 8009366 <_write_r+0x1e>
 8009364:	6023      	str	r3, [r4, #0]
 8009366:	bd38      	pop	{r3, r4, r5, pc}
 8009368:	200003f8 	.word	0x200003f8

0800936c <__errno>:
 800936c:	4b01      	ldr	r3, [pc, #4]	@ (8009374 <__errno+0x8>)
 800936e:	6818      	ldr	r0, [r3, #0]
 8009370:	4770      	bx	lr
 8009372:	bf00      	nop
 8009374:	20000050 	.word	0x20000050

08009378 <__libc_init_array>:
 8009378:	b570      	push	{r4, r5, r6, lr}
 800937a:	2600      	movs	r6, #0
 800937c:	4d0c      	ldr	r5, [pc, #48]	@ (80093b0 <__libc_init_array+0x38>)
 800937e:	4c0d      	ldr	r4, [pc, #52]	@ (80093b4 <__libc_init_array+0x3c>)
 8009380:	1b64      	subs	r4, r4, r5
 8009382:	10a4      	asrs	r4, r4, #2
 8009384:	42a6      	cmp	r6, r4
 8009386:	d109      	bne.n	800939c <__libc_init_array+0x24>
 8009388:	f000 fd46 	bl	8009e18 <_init>
 800938c:	2600      	movs	r6, #0
 800938e:	4d0a      	ldr	r5, [pc, #40]	@ (80093b8 <__libc_init_array+0x40>)
 8009390:	4c0a      	ldr	r4, [pc, #40]	@ (80093bc <__libc_init_array+0x44>)
 8009392:	1b64      	subs	r4, r4, r5
 8009394:	10a4      	asrs	r4, r4, #2
 8009396:	42a6      	cmp	r6, r4
 8009398:	d105      	bne.n	80093a6 <__libc_init_array+0x2e>
 800939a:	bd70      	pop	{r4, r5, r6, pc}
 800939c:	f855 3b04 	ldr.w	r3, [r5], #4
 80093a0:	4798      	blx	r3
 80093a2:	3601      	adds	r6, #1
 80093a4:	e7ee      	b.n	8009384 <__libc_init_array+0xc>
 80093a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80093aa:	4798      	blx	r3
 80093ac:	3601      	adds	r6, #1
 80093ae:	e7f2      	b.n	8009396 <__libc_init_array+0x1e>
 80093b0:	0800b730 	.word	0x0800b730
 80093b4:	0800b730 	.word	0x0800b730
 80093b8:	0800b730 	.word	0x0800b730
 80093bc:	0800b734 	.word	0x0800b734

080093c0 <__retarget_lock_init_recursive>:
 80093c0:	4770      	bx	lr

080093c2 <__retarget_lock_acquire_recursive>:
 80093c2:	4770      	bx	lr

080093c4 <__retarget_lock_release_recursive>:
 80093c4:	4770      	bx	lr

080093c6 <memcpy>:
 80093c6:	440a      	add	r2, r1
 80093c8:	4291      	cmp	r1, r2
 80093ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80093ce:	d100      	bne.n	80093d2 <memcpy+0xc>
 80093d0:	4770      	bx	lr
 80093d2:	b510      	push	{r4, lr}
 80093d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093d8:	4291      	cmp	r1, r2
 80093da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093de:	d1f9      	bne.n	80093d4 <memcpy+0xe>
 80093e0:	bd10      	pop	{r4, pc}
	...

080093e4 <_free_r>:
 80093e4:	b538      	push	{r3, r4, r5, lr}
 80093e6:	4605      	mov	r5, r0
 80093e8:	2900      	cmp	r1, #0
 80093ea:	d040      	beq.n	800946e <_free_r+0x8a>
 80093ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093f0:	1f0c      	subs	r4, r1, #4
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	bfb8      	it	lt
 80093f6:	18e4      	addlt	r4, r4, r3
 80093f8:	f000 f8e6 	bl	80095c8 <__malloc_lock>
 80093fc:	4a1c      	ldr	r2, [pc, #112]	@ (8009470 <_free_r+0x8c>)
 80093fe:	6813      	ldr	r3, [r2, #0]
 8009400:	b933      	cbnz	r3, 8009410 <_free_r+0x2c>
 8009402:	6063      	str	r3, [r4, #4]
 8009404:	6014      	str	r4, [r2, #0]
 8009406:	4628      	mov	r0, r5
 8009408:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800940c:	f000 b8e2 	b.w	80095d4 <__malloc_unlock>
 8009410:	42a3      	cmp	r3, r4
 8009412:	d908      	bls.n	8009426 <_free_r+0x42>
 8009414:	6820      	ldr	r0, [r4, #0]
 8009416:	1821      	adds	r1, r4, r0
 8009418:	428b      	cmp	r3, r1
 800941a:	bf01      	itttt	eq
 800941c:	6819      	ldreq	r1, [r3, #0]
 800941e:	685b      	ldreq	r3, [r3, #4]
 8009420:	1809      	addeq	r1, r1, r0
 8009422:	6021      	streq	r1, [r4, #0]
 8009424:	e7ed      	b.n	8009402 <_free_r+0x1e>
 8009426:	461a      	mov	r2, r3
 8009428:	685b      	ldr	r3, [r3, #4]
 800942a:	b10b      	cbz	r3, 8009430 <_free_r+0x4c>
 800942c:	42a3      	cmp	r3, r4
 800942e:	d9fa      	bls.n	8009426 <_free_r+0x42>
 8009430:	6811      	ldr	r1, [r2, #0]
 8009432:	1850      	adds	r0, r2, r1
 8009434:	42a0      	cmp	r0, r4
 8009436:	d10b      	bne.n	8009450 <_free_r+0x6c>
 8009438:	6820      	ldr	r0, [r4, #0]
 800943a:	4401      	add	r1, r0
 800943c:	1850      	adds	r0, r2, r1
 800943e:	4283      	cmp	r3, r0
 8009440:	6011      	str	r1, [r2, #0]
 8009442:	d1e0      	bne.n	8009406 <_free_r+0x22>
 8009444:	6818      	ldr	r0, [r3, #0]
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	4408      	add	r0, r1
 800944a:	6010      	str	r0, [r2, #0]
 800944c:	6053      	str	r3, [r2, #4]
 800944e:	e7da      	b.n	8009406 <_free_r+0x22>
 8009450:	d902      	bls.n	8009458 <_free_r+0x74>
 8009452:	230c      	movs	r3, #12
 8009454:	602b      	str	r3, [r5, #0]
 8009456:	e7d6      	b.n	8009406 <_free_r+0x22>
 8009458:	6820      	ldr	r0, [r4, #0]
 800945a:	1821      	adds	r1, r4, r0
 800945c:	428b      	cmp	r3, r1
 800945e:	bf01      	itttt	eq
 8009460:	6819      	ldreq	r1, [r3, #0]
 8009462:	685b      	ldreq	r3, [r3, #4]
 8009464:	1809      	addeq	r1, r1, r0
 8009466:	6021      	streq	r1, [r4, #0]
 8009468:	6063      	str	r3, [r4, #4]
 800946a:	6054      	str	r4, [r2, #4]
 800946c:	e7cb      	b.n	8009406 <_free_r+0x22>
 800946e:	bd38      	pop	{r3, r4, r5, pc}
 8009470:	20000404 	.word	0x20000404

08009474 <malloc>:
 8009474:	4b02      	ldr	r3, [pc, #8]	@ (8009480 <malloc+0xc>)
 8009476:	4601      	mov	r1, r0
 8009478:	6818      	ldr	r0, [r3, #0]
 800947a:	f000 b825 	b.w	80094c8 <_malloc_r>
 800947e:	bf00      	nop
 8009480:	20000050 	.word	0x20000050

08009484 <sbrk_aligned>:
 8009484:	b570      	push	{r4, r5, r6, lr}
 8009486:	4e0f      	ldr	r6, [pc, #60]	@ (80094c4 <sbrk_aligned+0x40>)
 8009488:	460c      	mov	r4, r1
 800948a:	6831      	ldr	r1, [r6, #0]
 800948c:	4605      	mov	r5, r0
 800948e:	b911      	cbnz	r1, 8009496 <sbrk_aligned+0x12>
 8009490:	f000 fca4 	bl	8009ddc <_sbrk_r>
 8009494:	6030      	str	r0, [r6, #0]
 8009496:	4621      	mov	r1, r4
 8009498:	4628      	mov	r0, r5
 800949a:	f000 fc9f 	bl	8009ddc <_sbrk_r>
 800949e:	1c43      	adds	r3, r0, #1
 80094a0:	d103      	bne.n	80094aa <sbrk_aligned+0x26>
 80094a2:	f04f 34ff 	mov.w	r4, #4294967295
 80094a6:	4620      	mov	r0, r4
 80094a8:	bd70      	pop	{r4, r5, r6, pc}
 80094aa:	1cc4      	adds	r4, r0, #3
 80094ac:	f024 0403 	bic.w	r4, r4, #3
 80094b0:	42a0      	cmp	r0, r4
 80094b2:	d0f8      	beq.n	80094a6 <sbrk_aligned+0x22>
 80094b4:	1a21      	subs	r1, r4, r0
 80094b6:	4628      	mov	r0, r5
 80094b8:	f000 fc90 	bl	8009ddc <_sbrk_r>
 80094bc:	3001      	adds	r0, #1
 80094be:	d1f2      	bne.n	80094a6 <sbrk_aligned+0x22>
 80094c0:	e7ef      	b.n	80094a2 <sbrk_aligned+0x1e>
 80094c2:	bf00      	nop
 80094c4:	20000400 	.word	0x20000400

080094c8 <_malloc_r>:
 80094c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094cc:	1ccd      	adds	r5, r1, #3
 80094ce:	f025 0503 	bic.w	r5, r5, #3
 80094d2:	3508      	adds	r5, #8
 80094d4:	2d0c      	cmp	r5, #12
 80094d6:	bf38      	it	cc
 80094d8:	250c      	movcc	r5, #12
 80094da:	2d00      	cmp	r5, #0
 80094dc:	4606      	mov	r6, r0
 80094de:	db01      	blt.n	80094e4 <_malloc_r+0x1c>
 80094e0:	42a9      	cmp	r1, r5
 80094e2:	d904      	bls.n	80094ee <_malloc_r+0x26>
 80094e4:	230c      	movs	r3, #12
 80094e6:	6033      	str	r3, [r6, #0]
 80094e8:	2000      	movs	r0, #0
 80094ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80095c4 <_malloc_r+0xfc>
 80094f2:	f000 f869 	bl	80095c8 <__malloc_lock>
 80094f6:	f8d8 3000 	ldr.w	r3, [r8]
 80094fa:	461c      	mov	r4, r3
 80094fc:	bb44      	cbnz	r4, 8009550 <_malloc_r+0x88>
 80094fe:	4629      	mov	r1, r5
 8009500:	4630      	mov	r0, r6
 8009502:	f7ff ffbf 	bl	8009484 <sbrk_aligned>
 8009506:	1c43      	adds	r3, r0, #1
 8009508:	4604      	mov	r4, r0
 800950a:	d158      	bne.n	80095be <_malloc_r+0xf6>
 800950c:	f8d8 4000 	ldr.w	r4, [r8]
 8009510:	4627      	mov	r7, r4
 8009512:	2f00      	cmp	r7, #0
 8009514:	d143      	bne.n	800959e <_malloc_r+0xd6>
 8009516:	2c00      	cmp	r4, #0
 8009518:	d04b      	beq.n	80095b2 <_malloc_r+0xea>
 800951a:	6823      	ldr	r3, [r4, #0]
 800951c:	4639      	mov	r1, r7
 800951e:	4630      	mov	r0, r6
 8009520:	eb04 0903 	add.w	r9, r4, r3
 8009524:	f000 fc5a 	bl	8009ddc <_sbrk_r>
 8009528:	4581      	cmp	r9, r0
 800952a:	d142      	bne.n	80095b2 <_malloc_r+0xea>
 800952c:	6821      	ldr	r1, [r4, #0]
 800952e:	4630      	mov	r0, r6
 8009530:	1a6d      	subs	r5, r5, r1
 8009532:	4629      	mov	r1, r5
 8009534:	f7ff ffa6 	bl	8009484 <sbrk_aligned>
 8009538:	3001      	adds	r0, #1
 800953a:	d03a      	beq.n	80095b2 <_malloc_r+0xea>
 800953c:	6823      	ldr	r3, [r4, #0]
 800953e:	442b      	add	r3, r5
 8009540:	6023      	str	r3, [r4, #0]
 8009542:	f8d8 3000 	ldr.w	r3, [r8]
 8009546:	685a      	ldr	r2, [r3, #4]
 8009548:	bb62      	cbnz	r2, 80095a4 <_malloc_r+0xdc>
 800954a:	f8c8 7000 	str.w	r7, [r8]
 800954e:	e00f      	b.n	8009570 <_malloc_r+0xa8>
 8009550:	6822      	ldr	r2, [r4, #0]
 8009552:	1b52      	subs	r2, r2, r5
 8009554:	d420      	bmi.n	8009598 <_malloc_r+0xd0>
 8009556:	2a0b      	cmp	r2, #11
 8009558:	d917      	bls.n	800958a <_malloc_r+0xc2>
 800955a:	1961      	adds	r1, r4, r5
 800955c:	42a3      	cmp	r3, r4
 800955e:	6025      	str	r5, [r4, #0]
 8009560:	bf18      	it	ne
 8009562:	6059      	strne	r1, [r3, #4]
 8009564:	6863      	ldr	r3, [r4, #4]
 8009566:	bf08      	it	eq
 8009568:	f8c8 1000 	streq.w	r1, [r8]
 800956c:	5162      	str	r2, [r4, r5]
 800956e:	604b      	str	r3, [r1, #4]
 8009570:	4630      	mov	r0, r6
 8009572:	f000 f82f 	bl	80095d4 <__malloc_unlock>
 8009576:	f104 000b 	add.w	r0, r4, #11
 800957a:	1d23      	adds	r3, r4, #4
 800957c:	f020 0007 	bic.w	r0, r0, #7
 8009580:	1ac2      	subs	r2, r0, r3
 8009582:	bf1c      	itt	ne
 8009584:	1a1b      	subne	r3, r3, r0
 8009586:	50a3      	strne	r3, [r4, r2]
 8009588:	e7af      	b.n	80094ea <_malloc_r+0x22>
 800958a:	6862      	ldr	r2, [r4, #4]
 800958c:	42a3      	cmp	r3, r4
 800958e:	bf0c      	ite	eq
 8009590:	f8c8 2000 	streq.w	r2, [r8]
 8009594:	605a      	strne	r2, [r3, #4]
 8009596:	e7eb      	b.n	8009570 <_malloc_r+0xa8>
 8009598:	4623      	mov	r3, r4
 800959a:	6864      	ldr	r4, [r4, #4]
 800959c:	e7ae      	b.n	80094fc <_malloc_r+0x34>
 800959e:	463c      	mov	r4, r7
 80095a0:	687f      	ldr	r7, [r7, #4]
 80095a2:	e7b6      	b.n	8009512 <_malloc_r+0x4a>
 80095a4:	461a      	mov	r2, r3
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	42a3      	cmp	r3, r4
 80095aa:	d1fb      	bne.n	80095a4 <_malloc_r+0xdc>
 80095ac:	2300      	movs	r3, #0
 80095ae:	6053      	str	r3, [r2, #4]
 80095b0:	e7de      	b.n	8009570 <_malloc_r+0xa8>
 80095b2:	230c      	movs	r3, #12
 80095b4:	4630      	mov	r0, r6
 80095b6:	6033      	str	r3, [r6, #0]
 80095b8:	f000 f80c 	bl	80095d4 <__malloc_unlock>
 80095bc:	e794      	b.n	80094e8 <_malloc_r+0x20>
 80095be:	6005      	str	r5, [r0, #0]
 80095c0:	e7d6      	b.n	8009570 <_malloc_r+0xa8>
 80095c2:	bf00      	nop
 80095c4:	20000404 	.word	0x20000404

080095c8 <__malloc_lock>:
 80095c8:	4801      	ldr	r0, [pc, #4]	@ (80095d0 <__malloc_lock+0x8>)
 80095ca:	f7ff befa 	b.w	80093c2 <__retarget_lock_acquire_recursive>
 80095ce:	bf00      	nop
 80095d0:	200003fc 	.word	0x200003fc

080095d4 <__malloc_unlock>:
 80095d4:	4801      	ldr	r0, [pc, #4]	@ (80095dc <__malloc_unlock+0x8>)
 80095d6:	f7ff bef5 	b.w	80093c4 <__retarget_lock_release_recursive>
 80095da:	bf00      	nop
 80095dc:	200003fc 	.word	0x200003fc

080095e0 <__sfputc_r>:
 80095e0:	6893      	ldr	r3, [r2, #8]
 80095e2:	b410      	push	{r4}
 80095e4:	3b01      	subs	r3, #1
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	6093      	str	r3, [r2, #8]
 80095ea:	da07      	bge.n	80095fc <__sfputc_r+0x1c>
 80095ec:	6994      	ldr	r4, [r2, #24]
 80095ee:	42a3      	cmp	r3, r4
 80095f0:	db01      	blt.n	80095f6 <__sfputc_r+0x16>
 80095f2:	290a      	cmp	r1, #10
 80095f4:	d102      	bne.n	80095fc <__sfputc_r+0x1c>
 80095f6:	bc10      	pop	{r4}
 80095f8:	f7ff bdd5 	b.w	80091a6 <__swbuf_r>
 80095fc:	6813      	ldr	r3, [r2, #0]
 80095fe:	1c58      	adds	r0, r3, #1
 8009600:	6010      	str	r0, [r2, #0]
 8009602:	7019      	strb	r1, [r3, #0]
 8009604:	4608      	mov	r0, r1
 8009606:	bc10      	pop	{r4}
 8009608:	4770      	bx	lr

0800960a <__sfputs_r>:
 800960a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800960c:	4606      	mov	r6, r0
 800960e:	460f      	mov	r7, r1
 8009610:	4614      	mov	r4, r2
 8009612:	18d5      	adds	r5, r2, r3
 8009614:	42ac      	cmp	r4, r5
 8009616:	d101      	bne.n	800961c <__sfputs_r+0x12>
 8009618:	2000      	movs	r0, #0
 800961a:	e007      	b.n	800962c <__sfputs_r+0x22>
 800961c:	463a      	mov	r2, r7
 800961e:	4630      	mov	r0, r6
 8009620:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009624:	f7ff ffdc 	bl	80095e0 <__sfputc_r>
 8009628:	1c43      	adds	r3, r0, #1
 800962a:	d1f3      	bne.n	8009614 <__sfputs_r+0xa>
 800962c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009630 <_vfiprintf_r>:
 8009630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009634:	460d      	mov	r5, r1
 8009636:	4614      	mov	r4, r2
 8009638:	4698      	mov	r8, r3
 800963a:	4606      	mov	r6, r0
 800963c:	b09d      	sub	sp, #116	@ 0x74
 800963e:	b118      	cbz	r0, 8009648 <_vfiprintf_r+0x18>
 8009640:	6a03      	ldr	r3, [r0, #32]
 8009642:	b90b      	cbnz	r3, 8009648 <_vfiprintf_r+0x18>
 8009644:	f7ff fc12 	bl	8008e6c <__sinit>
 8009648:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800964a:	07d9      	lsls	r1, r3, #31
 800964c:	d405      	bmi.n	800965a <_vfiprintf_r+0x2a>
 800964e:	89ab      	ldrh	r3, [r5, #12]
 8009650:	059a      	lsls	r2, r3, #22
 8009652:	d402      	bmi.n	800965a <_vfiprintf_r+0x2a>
 8009654:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009656:	f7ff feb4 	bl	80093c2 <__retarget_lock_acquire_recursive>
 800965a:	89ab      	ldrh	r3, [r5, #12]
 800965c:	071b      	lsls	r3, r3, #28
 800965e:	d501      	bpl.n	8009664 <_vfiprintf_r+0x34>
 8009660:	692b      	ldr	r3, [r5, #16]
 8009662:	b99b      	cbnz	r3, 800968c <_vfiprintf_r+0x5c>
 8009664:	4629      	mov	r1, r5
 8009666:	4630      	mov	r0, r6
 8009668:	f7ff fddc 	bl	8009224 <__swsetup_r>
 800966c:	b170      	cbz	r0, 800968c <_vfiprintf_r+0x5c>
 800966e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009670:	07dc      	lsls	r4, r3, #31
 8009672:	d504      	bpl.n	800967e <_vfiprintf_r+0x4e>
 8009674:	f04f 30ff 	mov.w	r0, #4294967295
 8009678:	b01d      	add	sp, #116	@ 0x74
 800967a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800967e:	89ab      	ldrh	r3, [r5, #12]
 8009680:	0598      	lsls	r0, r3, #22
 8009682:	d4f7      	bmi.n	8009674 <_vfiprintf_r+0x44>
 8009684:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009686:	f7ff fe9d 	bl	80093c4 <__retarget_lock_release_recursive>
 800968a:	e7f3      	b.n	8009674 <_vfiprintf_r+0x44>
 800968c:	2300      	movs	r3, #0
 800968e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009690:	2320      	movs	r3, #32
 8009692:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009696:	2330      	movs	r3, #48	@ 0x30
 8009698:	f04f 0901 	mov.w	r9, #1
 800969c:	f8cd 800c 	str.w	r8, [sp, #12]
 80096a0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800984c <_vfiprintf_r+0x21c>
 80096a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80096a8:	4623      	mov	r3, r4
 80096aa:	469a      	mov	sl, r3
 80096ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096b0:	b10a      	cbz	r2, 80096b6 <_vfiprintf_r+0x86>
 80096b2:	2a25      	cmp	r2, #37	@ 0x25
 80096b4:	d1f9      	bne.n	80096aa <_vfiprintf_r+0x7a>
 80096b6:	ebba 0b04 	subs.w	fp, sl, r4
 80096ba:	d00b      	beq.n	80096d4 <_vfiprintf_r+0xa4>
 80096bc:	465b      	mov	r3, fp
 80096be:	4622      	mov	r2, r4
 80096c0:	4629      	mov	r1, r5
 80096c2:	4630      	mov	r0, r6
 80096c4:	f7ff ffa1 	bl	800960a <__sfputs_r>
 80096c8:	3001      	adds	r0, #1
 80096ca:	f000 80a7 	beq.w	800981c <_vfiprintf_r+0x1ec>
 80096ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80096d0:	445a      	add	r2, fp
 80096d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80096d4:	f89a 3000 	ldrb.w	r3, [sl]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	f000 809f 	beq.w	800981c <_vfiprintf_r+0x1ec>
 80096de:	2300      	movs	r3, #0
 80096e0:	f04f 32ff 	mov.w	r2, #4294967295
 80096e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096e8:	f10a 0a01 	add.w	sl, sl, #1
 80096ec:	9304      	str	r3, [sp, #16]
 80096ee:	9307      	str	r3, [sp, #28]
 80096f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80096f4:	931a      	str	r3, [sp, #104]	@ 0x68
 80096f6:	4654      	mov	r4, sl
 80096f8:	2205      	movs	r2, #5
 80096fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096fe:	4853      	ldr	r0, [pc, #332]	@ (800984c <_vfiprintf_r+0x21c>)
 8009700:	f000 fb7c 	bl	8009dfc <memchr>
 8009704:	9a04      	ldr	r2, [sp, #16]
 8009706:	b9d8      	cbnz	r0, 8009740 <_vfiprintf_r+0x110>
 8009708:	06d1      	lsls	r1, r2, #27
 800970a:	bf44      	itt	mi
 800970c:	2320      	movmi	r3, #32
 800970e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009712:	0713      	lsls	r3, r2, #28
 8009714:	bf44      	itt	mi
 8009716:	232b      	movmi	r3, #43	@ 0x2b
 8009718:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800971c:	f89a 3000 	ldrb.w	r3, [sl]
 8009720:	2b2a      	cmp	r3, #42	@ 0x2a
 8009722:	d015      	beq.n	8009750 <_vfiprintf_r+0x120>
 8009724:	4654      	mov	r4, sl
 8009726:	2000      	movs	r0, #0
 8009728:	f04f 0c0a 	mov.w	ip, #10
 800972c:	9a07      	ldr	r2, [sp, #28]
 800972e:	4621      	mov	r1, r4
 8009730:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009734:	3b30      	subs	r3, #48	@ 0x30
 8009736:	2b09      	cmp	r3, #9
 8009738:	d94b      	bls.n	80097d2 <_vfiprintf_r+0x1a2>
 800973a:	b1b0      	cbz	r0, 800976a <_vfiprintf_r+0x13a>
 800973c:	9207      	str	r2, [sp, #28]
 800973e:	e014      	b.n	800976a <_vfiprintf_r+0x13a>
 8009740:	eba0 0308 	sub.w	r3, r0, r8
 8009744:	fa09 f303 	lsl.w	r3, r9, r3
 8009748:	4313      	orrs	r3, r2
 800974a:	46a2      	mov	sl, r4
 800974c:	9304      	str	r3, [sp, #16]
 800974e:	e7d2      	b.n	80096f6 <_vfiprintf_r+0xc6>
 8009750:	9b03      	ldr	r3, [sp, #12]
 8009752:	1d19      	adds	r1, r3, #4
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	9103      	str	r1, [sp, #12]
 8009758:	2b00      	cmp	r3, #0
 800975a:	bfbb      	ittet	lt
 800975c:	425b      	neglt	r3, r3
 800975e:	f042 0202 	orrlt.w	r2, r2, #2
 8009762:	9307      	strge	r3, [sp, #28]
 8009764:	9307      	strlt	r3, [sp, #28]
 8009766:	bfb8      	it	lt
 8009768:	9204      	strlt	r2, [sp, #16]
 800976a:	7823      	ldrb	r3, [r4, #0]
 800976c:	2b2e      	cmp	r3, #46	@ 0x2e
 800976e:	d10a      	bne.n	8009786 <_vfiprintf_r+0x156>
 8009770:	7863      	ldrb	r3, [r4, #1]
 8009772:	2b2a      	cmp	r3, #42	@ 0x2a
 8009774:	d132      	bne.n	80097dc <_vfiprintf_r+0x1ac>
 8009776:	9b03      	ldr	r3, [sp, #12]
 8009778:	3402      	adds	r4, #2
 800977a:	1d1a      	adds	r2, r3, #4
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	9203      	str	r2, [sp, #12]
 8009780:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009784:	9305      	str	r3, [sp, #20]
 8009786:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009850 <_vfiprintf_r+0x220>
 800978a:	2203      	movs	r2, #3
 800978c:	4650      	mov	r0, sl
 800978e:	7821      	ldrb	r1, [r4, #0]
 8009790:	f000 fb34 	bl	8009dfc <memchr>
 8009794:	b138      	cbz	r0, 80097a6 <_vfiprintf_r+0x176>
 8009796:	2240      	movs	r2, #64	@ 0x40
 8009798:	9b04      	ldr	r3, [sp, #16]
 800979a:	eba0 000a 	sub.w	r0, r0, sl
 800979e:	4082      	lsls	r2, r0
 80097a0:	4313      	orrs	r3, r2
 80097a2:	3401      	adds	r4, #1
 80097a4:	9304      	str	r3, [sp, #16]
 80097a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097aa:	2206      	movs	r2, #6
 80097ac:	4829      	ldr	r0, [pc, #164]	@ (8009854 <_vfiprintf_r+0x224>)
 80097ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80097b2:	f000 fb23 	bl	8009dfc <memchr>
 80097b6:	2800      	cmp	r0, #0
 80097b8:	d03f      	beq.n	800983a <_vfiprintf_r+0x20a>
 80097ba:	4b27      	ldr	r3, [pc, #156]	@ (8009858 <_vfiprintf_r+0x228>)
 80097bc:	bb1b      	cbnz	r3, 8009806 <_vfiprintf_r+0x1d6>
 80097be:	9b03      	ldr	r3, [sp, #12]
 80097c0:	3307      	adds	r3, #7
 80097c2:	f023 0307 	bic.w	r3, r3, #7
 80097c6:	3308      	adds	r3, #8
 80097c8:	9303      	str	r3, [sp, #12]
 80097ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097cc:	443b      	add	r3, r7
 80097ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80097d0:	e76a      	b.n	80096a8 <_vfiprintf_r+0x78>
 80097d2:	460c      	mov	r4, r1
 80097d4:	2001      	movs	r0, #1
 80097d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80097da:	e7a8      	b.n	800972e <_vfiprintf_r+0xfe>
 80097dc:	2300      	movs	r3, #0
 80097de:	f04f 0c0a 	mov.w	ip, #10
 80097e2:	4619      	mov	r1, r3
 80097e4:	3401      	adds	r4, #1
 80097e6:	9305      	str	r3, [sp, #20]
 80097e8:	4620      	mov	r0, r4
 80097ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097ee:	3a30      	subs	r2, #48	@ 0x30
 80097f0:	2a09      	cmp	r2, #9
 80097f2:	d903      	bls.n	80097fc <_vfiprintf_r+0x1cc>
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d0c6      	beq.n	8009786 <_vfiprintf_r+0x156>
 80097f8:	9105      	str	r1, [sp, #20]
 80097fa:	e7c4      	b.n	8009786 <_vfiprintf_r+0x156>
 80097fc:	4604      	mov	r4, r0
 80097fe:	2301      	movs	r3, #1
 8009800:	fb0c 2101 	mla	r1, ip, r1, r2
 8009804:	e7f0      	b.n	80097e8 <_vfiprintf_r+0x1b8>
 8009806:	ab03      	add	r3, sp, #12
 8009808:	9300      	str	r3, [sp, #0]
 800980a:	462a      	mov	r2, r5
 800980c:	4630      	mov	r0, r6
 800980e:	4b13      	ldr	r3, [pc, #76]	@ (800985c <_vfiprintf_r+0x22c>)
 8009810:	a904      	add	r1, sp, #16
 8009812:	f3af 8000 	nop.w
 8009816:	4607      	mov	r7, r0
 8009818:	1c78      	adds	r0, r7, #1
 800981a:	d1d6      	bne.n	80097ca <_vfiprintf_r+0x19a>
 800981c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800981e:	07d9      	lsls	r1, r3, #31
 8009820:	d405      	bmi.n	800982e <_vfiprintf_r+0x1fe>
 8009822:	89ab      	ldrh	r3, [r5, #12]
 8009824:	059a      	lsls	r2, r3, #22
 8009826:	d402      	bmi.n	800982e <_vfiprintf_r+0x1fe>
 8009828:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800982a:	f7ff fdcb 	bl	80093c4 <__retarget_lock_release_recursive>
 800982e:	89ab      	ldrh	r3, [r5, #12]
 8009830:	065b      	lsls	r3, r3, #25
 8009832:	f53f af1f 	bmi.w	8009674 <_vfiprintf_r+0x44>
 8009836:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009838:	e71e      	b.n	8009678 <_vfiprintf_r+0x48>
 800983a:	ab03      	add	r3, sp, #12
 800983c:	9300      	str	r3, [sp, #0]
 800983e:	462a      	mov	r2, r5
 8009840:	4630      	mov	r0, r6
 8009842:	4b06      	ldr	r3, [pc, #24]	@ (800985c <_vfiprintf_r+0x22c>)
 8009844:	a904      	add	r1, sp, #16
 8009846:	f000 f87d 	bl	8009944 <_printf_i>
 800984a:	e7e4      	b.n	8009816 <_vfiprintf_r+0x1e6>
 800984c:	0800b6fa 	.word	0x0800b6fa
 8009850:	0800b700 	.word	0x0800b700
 8009854:	0800b704 	.word	0x0800b704
 8009858:	00000000 	.word	0x00000000
 800985c:	0800960b 	.word	0x0800960b

08009860 <_printf_common>:
 8009860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009864:	4616      	mov	r6, r2
 8009866:	4698      	mov	r8, r3
 8009868:	688a      	ldr	r2, [r1, #8]
 800986a:	690b      	ldr	r3, [r1, #16]
 800986c:	4607      	mov	r7, r0
 800986e:	4293      	cmp	r3, r2
 8009870:	bfb8      	it	lt
 8009872:	4613      	movlt	r3, r2
 8009874:	6033      	str	r3, [r6, #0]
 8009876:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800987a:	460c      	mov	r4, r1
 800987c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009880:	b10a      	cbz	r2, 8009886 <_printf_common+0x26>
 8009882:	3301      	adds	r3, #1
 8009884:	6033      	str	r3, [r6, #0]
 8009886:	6823      	ldr	r3, [r4, #0]
 8009888:	0699      	lsls	r1, r3, #26
 800988a:	bf42      	ittt	mi
 800988c:	6833      	ldrmi	r3, [r6, #0]
 800988e:	3302      	addmi	r3, #2
 8009890:	6033      	strmi	r3, [r6, #0]
 8009892:	6825      	ldr	r5, [r4, #0]
 8009894:	f015 0506 	ands.w	r5, r5, #6
 8009898:	d106      	bne.n	80098a8 <_printf_common+0x48>
 800989a:	f104 0a19 	add.w	sl, r4, #25
 800989e:	68e3      	ldr	r3, [r4, #12]
 80098a0:	6832      	ldr	r2, [r6, #0]
 80098a2:	1a9b      	subs	r3, r3, r2
 80098a4:	42ab      	cmp	r3, r5
 80098a6:	dc2b      	bgt.n	8009900 <_printf_common+0xa0>
 80098a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80098ac:	6822      	ldr	r2, [r4, #0]
 80098ae:	3b00      	subs	r3, #0
 80098b0:	bf18      	it	ne
 80098b2:	2301      	movne	r3, #1
 80098b4:	0692      	lsls	r2, r2, #26
 80098b6:	d430      	bmi.n	800991a <_printf_common+0xba>
 80098b8:	4641      	mov	r1, r8
 80098ba:	4638      	mov	r0, r7
 80098bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80098c0:	47c8      	blx	r9
 80098c2:	3001      	adds	r0, #1
 80098c4:	d023      	beq.n	800990e <_printf_common+0xae>
 80098c6:	6823      	ldr	r3, [r4, #0]
 80098c8:	6922      	ldr	r2, [r4, #16]
 80098ca:	f003 0306 	and.w	r3, r3, #6
 80098ce:	2b04      	cmp	r3, #4
 80098d0:	bf14      	ite	ne
 80098d2:	2500      	movne	r5, #0
 80098d4:	6833      	ldreq	r3, [r6, #0]
 80098d6:	f04f 0600 	mov.w	r6, #0
 80098da:	bf08      	it	eq
 80098dc:	68e5      	ldreq	r5, [r4, #12]
 80098de:	f104 041a 	add.w	r4, r4, #26
 80098e2:	bf08      	it	eq
 80098e4:	1aed      	subeq	r5, r5, r3
 80098e6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80098ea:	bf08      	it	eq
 80098ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80098f0:	4293      	cmp	r3, r2
 80098f2:	bfc4      	itt	gt
 80098f4:	1a9b      	subgt	r3, r3, r2
 80098f6:	18ed      	addgt	r5, r5, r3
 80098f8:	42b5      	cmp	r5, r6
 80098fa:	d11a      	bne.n	8009932 <_printf_common+0xd2>
 80098fc:	2000      	movs	r0, #0
 80098fe:	e008      	b.n	8009912 <_printf_common+0xb2>
 8009900:	2301      	movs	r3, #1
 8009902:	4652      	mov	r2, sl
 8009904:	4641      	mov	r1, r8
 8009906:	4638      	mov	r0, r7
 8009908:	47c8      	blx	r9
 800990a:	3001      	adds	r0, #1
 800990c:	d103      	bne.n	8009916 <_printf_common+0xb6>
 800990e:	f04f 30ff 	mov.w	r0, #4294967295
 8009912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009916:	3501      	adds	r5, #1
 8009918:	e7c1      	b.n	800989e <_printf_common+0x3e>
 800991a:	2030      	movs	r0, #48	@ 0x30
 800991c:	18e1      	adds	r1, r4, r3
 800991e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009922:	1c5a      	adds	r2, r3, #1
 8009924:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009928:	4422      	add	r2, r4
 800992a:	3302      	adds	r3, #2
 800992c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009930:	e7c2      	b.n	80098b8 <_printf_common+0x58>
 8009932:	2301      	movs	r3, #1
 8009934:	4622      	mov	r2, r4
 8009936:	4641      	mov	r1, r8
 8009938:	4638      	mov	r0, r7
 800993a:	47c8      	blx	r9
 800993c:	3001      	adds	r0, #1
 800993e:	d0e6      	beq.n	800990e <_printf_common+0xae>
 8009940:	3601      	adds	r6, #1
 8009942:	e7d9      	b.n	80098f8 <_printf_common+0x98>

08009944 <_printf_i>:
 8009944:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009948:	7e0f      	ldrb	r7, [r1, #24]
 800994a:	4691      	mov	r9, r2
 800994c:	2f78      	cmp	r7, #120	@ 0x78
 800994e:	4680      	mov	r8, r0
 8009950:	460c      	mov	r4, r1
 8009952:	469a      	mov	sl, r3
 8009954:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009956:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800995a:	d807      	bhi.n	800996c <_printf_i+0x28>
 800995c:	2f62      	cmp	r7, #98	@ 0x62
 800995e:	d80a      	bhi.n	8009976 <_printf_i+0x32>
 8009960:	2f00      	cmp	r7, #0
 8009962:	f000 80d3 	beq.w	8009b0c <_printf_i+0x1c8>
 8009966:	2f58      	cmp	r7, #88	@ 0x58
 8009968:	f000 80ba 	beq.w	8009ae0 <_printf_i+0x19c>
 800996c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009970:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009974:	e03a      	b.n	80099ec <_printf_i+0xa8>
 8009976:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800997a:	2b15      	cmp	r3, #21
 800997c:	d8f6      	bhi.n	800996c <_printf_i+0x28>
 800997e:	a101      	add	r1, pc, #4	@ (adr r1, 8009984 <_printf_i+0x40>)
 8009980:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009984:	080099dd 	.word	0x080099dd
 8009988:	080099f1 	.word	0x080099f1
 800998c:	0800996d 	.word	0x0800996d
 8009990:	0800996d 	.word	0x0800996d
 8009994:	0800996d 	.word	0x0800996d
 8009998:	0800996d 	.word	0x0800996d
 800999c:	080099f1 	.word	0x080099f1
 80099a0:	0800996d 	.word	0x0800996d
 80099a4:	0800996d 	.word	0x0800996d
 80099a8:	0800996d 	.word	0x0800996d
 80099ac:	0800996d 	.word	0x0800996d
 80099b0:	08009af3 	.word	0x08009af3
 80099b4:	08009a1b 	.word	0x08009a1b
 80099b8:	08009aad 	.word	0x08009aad
 80099bc:	0800996d 	.word	0x0800996d
 80099c0:	0800996d 	.word	0x0800996d
 80099c4:	08009b15 	.word	0x08009b15
 80099c8:	0800996d 	.word	0x0800996d
 80099cc:	08009a1b 	.word	0x08009a1b
 80099d0:	0800996d 	.word	0x0800996d
 80099d4:	0800996d 	.word	0x0800996d
 80099d8:	08009ab5 	.word	0x08009ab5
 80099dc:	6833      	ldr	r3, [r6, #0]
 80099de:	1d1a      	adds	r2, r3, #4
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	6032      	str	r2, [r6, #0]
 80099e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80099e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80099ec:	2301      	movs	r3, #1
 80099ee:	e09e      	b.n	8009b2e <_printf_i+0x1ea>
 80099f0:	6833      	ldr	r3, [r6, #0]
 80099f2:	6820      	ldr	r0, [r4, #0]
 80099f4:	1d19      	adds	r1, r3, #4
 80099f6:	6031      	str	r1, [r6, #0]
 80099f8:	0606      	lsls	r6, r0, #24
 80099fa:	d501      	bpl.n	8009a00 <_printf_i+0xbc>
 80099fc:	681d      	ldr	r5, [r3, #0]
 80099fe:	e003      	b.n	8009a08 <_printf_i+0xc4>
 8009a00:	0645      	lsls	r5, r0, #25
 8009a02:	d5fb      	bpl.n	80099fc <_printf_i+0xb8>
 8009a04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009a08:	2d00      	cmp	r5, #0
 8009a0a:	da03      	bge.n	8009a14 <_printf_i+0xd0>
 8009a0c:	232d      	movs	r3, #45	@ 0x2d
 8009a0e:	426d      	negs	r5, r5
 8009a10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a14:	230a      	movs	r3, #10
 8009a16:	4859      	ldr	r0, [pc, #356]	@ (8009b7c <_printf_i+0x238>)
 8009a18:	e011      	b.n	8009a3e <_printf_i+0xfa>
 8009a1a:	6821      	ldr	r1, [r4, #0]
 8009a1c:	6833      	ldr	r3, [r6, #0]
 8009a1e:	0608      	lsls	r0, r1, #24
 8009a20:	f853 5b04 	ldr.w	r5, [r3], #4
 8009a24:	d402      	bmi.n	8009a2c <_printf_i+0xe8>
 8009a26:	0649      	lsls	r1, r1, #25
 8009a28:	bf48      	it	mi
 8009a2a:	b2ad      	uxthmi	r5, r5
 8009a2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8009a2e:	6033      	str	r3, [r6, #0]
 8009a30:	bf14      	ite	ne
 8009a32:	230a      	movne	r3, #10
 8009a34:	2308      	moveq	r3, #8
 8009a36:	4851      	ldr	r0, [pc, #324]	@ (8009b7c <_printf_i+0x238>)
 8009a38:	2100      	movs	r1, #0
 8009a3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009a3e:	6866      	ldr	r6, [r4, #4]
 8009a40:	2e00      	cmp	r6, #0
 8009a42:	bfa8      	it	ge
 8009a44:	6821      	ldrge	r1, [r4, #0]
 8009a46:	60a6      	str	r6, [r4, #8]
 8009a48:	bfa4      	itt	ge
 8009a4a:	f021 0104 	bicge.w	r1, r1, #4
 8009a4e:	6021      	strge	r1, [r4, #0]
 8009a50:	b90d      	cbnz	r5, 8009a56 <_printf_i+0x112>
 8009a52:	2e00      	cmp	r6, #0
 8009a54:	d04b      	beq.n	8009aee <_printf_i+0x1aa>
 8009a56:	4616      	mov	r6, r2
 8009a58:	fbb5 f1f3 	udiv	r1, r5, r3
 8009a5c:	fb03 5711 	mls	r7, r3, r1, r5
 8009a60:	5dc7      	ldrb	r7, [r0, r7]
 8009a62:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009a66:	462f      	mov	r7, r5
 8009a68:	42bb      	cmp	r3, r7
 8009a6a:	460d      	mov	r5, r1
 8009a6c:	d9f4      	bls.n	8009a58 <_printf_i+0x114>
 8009a6e:	2b08      	cmp	r3, #8
 8009a70:	d10b      	bne.n	8009a8a <_printf_i+0x146>
 8009a72:	6823      	ldr	r3, [r4, #0]
 8009a74:	07df      	lsls	r7, r3, #31
 8009a76:	d508      	bpl.n	8009a8a <_printf_i+0x146>
 8009a78:	6923      	ldr	r3, [r4, #16]
 8009a7a:	6861      	ldr	r1, [r4, #4]
 8009a7c:	4299      	cmp	r1, r3
 8009a7e:	bfde      	ittt	le
 8009a80:	2330      	movle	r3, #48	@ 0x30
 8009a82:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009a86:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009a8a:	1b92      	subs	r2, r2, r6
 8009a8c:	6122      	str	r2, [r4, #16]
 8009a8e:	464b      	mov	r3, r9
 8009a90:	4621      	mov	r1, r4
 8009a92:	4640      	mov	r0, r8
 8009a94:	f8cd a000 	str.w	sl, [sp]
 8009a98:	aa03      	add	r2, sp, #12
 8009a9a:	f7ff fee1 	bl	8009860 <_printf_common>
 8009a9e:	3001      	adds	r0, #1
 8009aa0:	d14a      	bne.n	8009b38 <_printf_i+0x1f4>
 8009aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8009aa6:	b004      	add	sp, #16
 8009aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009aac:	6823      	ldr	r3, [r4, #0]
 8009aae:	f043 0320 	orr.w	r3, r3, #32
 8009ab2:	6023      	str	r3, [r4, #0]
 8009ab4:	2778      	movs	r7, #120	@ 0x78
 8009ab6:	4832      	ldr	r0, [pc, #200]	@ (8009b80 <_printf_i+0x23c>)
 8009ab8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009abc:	6823      	ldr	r3, [r4, #0]
 8009abe:	6831      	ldr	r1, [r6, #0]
 8009ac0:	061f      	lsls	r7, r3, #24
 8009ac2:	f851 5b04 	ldr.w	r5, [r1], #4
 8009ac6:	d402      	bmi.n	8009ace <_printf_i+0x18a>
 8009ac8:	065f      	lsls	r7, r3, #25
 8009aca:	bf48      	it	mi
 8009acc:	b2ad      	uxthmi	r5, r5
 8009ace:	6031      	str	r1, [r6, #0]
 8009ad0:	07d9      	lsls	r1, r3, #31
 8009ad2:	bf44      	itt	mi
 8009ad4:	f043 0320 	orrmi.w	r3, r3, #32
 8009ad8:	6023      	strmi	r3, [r4, #0]
 8009ada:	b11d      	cbz	r5, 8009ae4 <_printf_i+0x1a0>
 8009adc:	2310      	movs	r3, #16
 8009ade:	e7ab      	b.n	8009a38 <_printf_i+0xf4>
 8009ae0:	4826      	ldr	r0, [pc, #152]	@ (8009b7c <_printf_i+0x238>)
 8009ae2:	e7e9      	b.n	8009ab8 <_printf_i+0x174>
 8009ae4:	6823      	ldr	r3, [r4, #0]
 8009ae6:	f023 0320 	bic.w	r3, r3, #32
 8009aea:	6023      	str	r3, [r4, #0]
 8009aec:	e7f6      	b.n	8009adc <_printf_i+0x198>
 8009aee:	4616      	mov	r6, r2
 8009af0:	e7bd      	b.n	8009a6e <_printf_i+0x12a>
 8009af2:	6833      	ldr	r3, [r6, #0]
 8009af4:	6825      	ldr	r5, [r4, #0]
 8009af6:	1d18      	adds	r0, r3, #4
 8009af8:	6961      	ldr	r1, [r4, #20]
 8009afa:	6030      	str	r0, [r6, #0]
 8009afc:	062e      	lsls	r6, r5, #24
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	d501      	bpl.n	8009b06 <_printf_i+0x1c2>
 8009b02:	6019      	str	r1, [r3, #0]
 8009b04:	e002      	b.n	8009b0c <_printf_i+0x1c8>
 8009b06:	0668      	lsls	r0, r5, #25
 8009b08:	d5fb      	bpl.n	8009b02 <_printf_i+0x1be>
 8009b0a:	8019      	strh	r1, [r3, #0]
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	4616      	mov	r6, r2
 8009b10:	6123      	str	r3, [r4, #16]
 8009b12:	e7bc      	b.n	8009a8e <_printf_i+0x14a>
 8009b14:	6833      	ldr	r3, [r6, #0]
 8009b16:	2100      	movs	r1, #0
 8009b18:	1d1a      	adds	r2, r3, #4
 8009b1a:	6032      	str	r2, [r6, #0]
 8009b1c:	681e      	ldr	r6, [r3, #0]
 8009b1e:	6862      	ldr	r2, [r4, #4]
 8009b20:	4630      	mov	r0, r6
 8009b22:	f000 f96b 	bl	8009dfc <memchr>
 8009b26:	b108      	cbz	r0, 8009b2c <_printf_i+0x1e8>
 8009b28:	1b80      	subs	r0, r0, r6
 8009b2a:	6060      	str	r0, [r4, #4]
 8009b2c:	6863      	ldr	r3, [r4, #4]
 8009b2e:	6123      	str	r3, [r4, #16]
 8009b30:	2300      	movs	r3, #0
 8009b32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b36:	e7aa      	b.n	8009a8e <_printf_i+0x14a>
 8009b38:	4632      	mov	r2, r6
 8009b3a:	4649      	mov	r1, r9
 8009b3c:	4640      	mov	r0, r8
 8009b3e:	6923      	ldr	r3, [r4, #16]
 8009b40:	47d0      	blx	sl
 8009b42:	3001      	adds	r0, #1
 8009b44:	d0ad      	beq.n	8009aa2 <_printf_i+0x15e>
 8009b46:	6823      	ldr	r3, [r4, #0]
 8009b48:	079b      	lsls	r3, r3, #30
 8009b4a:	d413      	bmi.n	8009b74 <_printf_i+0x230>
 8009b4c:	68e0      	ldr	r0, [r4, #12]
 8009b4e:	9b03      	ldr	r3, [sp, #12]
 8009b50:	4298      	cmp	r0, r3
 8009b52:	bfb8      	it	lt
 8009b54:	4618      	movlt	r0, r3
 8009b56:	e7a6      	b.n	8009aa6 <_printf_i+0x162>
 8009b58:	2301      	movs	r3, #1
 8009b5a:	4632      	mov	r2, r6
 8009b5c:	4649      	mov	r1, r9
 8009b5e:	4640      	mov	r0, r8
 8009b60:	47d0      	blx	sl
 8009b62:	3001      	adds	r0, #1
 8009b64:	d09d      	beq.n	8009aa2 <_printf_i+0x15e>
 8009b66:	3501      	adds	r5, #1
 8009b68:	68e3      	ldr	r3, [r4, #12]
 8009b6a:	9903      	ldr	r1, [sp, #12]
 8009b6c:	1a5b      	subs	r3, r3, r1
 8009b6e:	42ab      	cmp	r3, r5
 8009b70:	dcf2      	bgt.n	8009b58 <_printf_i+0x214>
 8009b72:	e7eb      	b.n	8009b4c <_printf_i+0x208>
 8009b74:	2500      	movs	r5, #0
 8009b76:	f104 0619 	add.w	r6, r4, #25
 8009b7a:	e7f5      	b.n	8009b68 <_printf_i+0x224>
 8009b7c:	0800b70b 	.word	0x0800b70b
 8009b80:	0800b71c 	.word	0x0800b71c

08009b84 <__sflush_r>:
 8009b84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b8a:	0716      	lsls	r6, r2, #28
 8009b8c:	4605      	mov	r5, r0
 8009b8e:	460c      	mov	r4, r1
 8009b90:	d454      	bmi.n	8009c3c <__sflush_r+0xb8>
 8009b92:	684b      	ldr	r3, [r1, #4]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	dc02      	bgt.n	8009b9e <__sflush_r+0x1a>
 8009b98:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	dd48      	ble.n	8009c30 <__sflush_r+0xac>
 8009b9e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009ba0:	2e00      	cmp	r6, #0
 8009ba2:	d045      	beq.n	8009c30 <__sflush_r+0xac>
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009baa:	682f      	ldr	r7, [r5, #0]
 8009bac:	6a21      	ldr	r1, [r4, #32]
 8009bae:	602b      	str	r3, [r5, #0]
 8009bb0:	d030      	beq.n	8009c14 <__sflush_r+0x90>
 8009bb2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009bb4:	89a3      	ldrh	r3, [r4, #12]
 8009bb6:	0759      	lsls	r1, r3, #29
 8009bb8:	d505      	bpl.n	8009bc6 <__sflush_r+0x42>
 8009bba:	6863      	ldr	r3, [r4, #4]
 8009bbc:	1ad2      	subs	r2, r2, r3
 8009bbe:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009bc0:	b10b      	cbz	r3, 8009bc6 <__sflush_r+0x42>
 8009bc2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009bc4:	1ad2      	subs	r2, r2, r3
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	4628      	mov	r0, r5
 8009bca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009bcc:	6a21      	ldr	r1, [r4, #32]
 8009bce:	47b0      	blx	r6
 8009bd0:	1c43      	adds	r3, r0, #1
 8009bd2:	89a3      	ldrh	r3, [r4, #12]
 8009bd4:	d106      	bne.n	8009be4 <__sflush_r+0x60>
 8009bd6:	6829      	ldr	r1, [r5, #0]
 8009bd8:	291d      	cmp	r1, #29
 8009bda:	d82b      	bhi.n	8009c34 <__sflush_r+0xb0>
 8009bdc:	4a28      	ldr	r2, [pc, #160]	@ (8009c80 <__sflush_r+0xfc>)
 8009bde:	410a      	asrs	r2, r1
 8009be0:	07d6      	lsls	r6, r2, #31
 8009be2:	d427      	bmi.n	8009c34 <__sflush_r+0xb0>
 8009be4:	2200      	movs	r2, #0
 8009be6:	6062      	str	r2, [r4, #4]
 8009be8:	6922      	ldr	r2, [r4, #16]
 8009bea:	04d9      	lsls	r1, r3, #19
 8009bec:	6022      	str	r2, [r4, #0]
 8009bee:	d504      	bpl.n	8009bfa <__sflush_r+0x76>
 8009bf0:	1c42      	adds	r2, r0, #1
 8009bf2:	d101      	bne.n	8009bf8 <__sflush_r+0x74>
 8009bf4:	682b      	ldr	r3, [r5, #0]
 8009bf6:	b903      	cbnz	r3, 8009bfa <__sflush_r+0x76>
 8009bf8:	6560      	str	r0, [r4, #84]	@ 0x54
 8009bfa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009bfc:	602f      	str	r7, [r5, #0]
 8009bfe:	b1b9      	cbz	r1, 8009c30 <__sflush_r+0xac>
 8009c00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009c04:	4299      	cmp	r1, r3
 8009c06:	d002      	beq.n	8009c0e <__sflush_r+0x8a>
 8009c08:	4628      	mov	r0, r5
 8009c0a:	f7ff fbeb 	bl	80093e4 <_free_r>
 8009c0e:	2300      	movs	r3, #0
 8009c10:	6363      	str	r3, [r4, #52]	@ 0x34
 8009c12:	e00d      	b.n	8009c30 <__sflush_r+0xac>
 8009c14:	2301      	movs	r3, #1
 8009c16:	4628      	mov	r0, r5
 8009c18:	47b0      	blx	r6
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	1c50      	adds	r0, r2, #1
 8009c1e:	d1c9      	bne.n	8009bb4 <__sflush_r+0x30>
 8009c20:	682b      	ldr	r3, [r5, #0]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d0c6      	beq.n	8009bb4 <__sflush_r+0x30>
 8009c26:	2b1d      	cmp	r3, #29
 8009c28:	d001      	beq.n	8009c2e <__sflush_r+0xaa>
 8009c2a:	2b16      	cmp	r3, #22
 8009c2c:	d11d      	bne.n	8009c6a <__sflush_r+0xe6>
 8009c2e:	602f      	str	r7, [r5, #0]
 8009c30:	2000      	movs	r0, #0
 8009c32:	e021      	b.n	8009c78 <__sflush_r+0xf4>
 8009c34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c38:	b21b      	sxth	r3, r3
 8009c3a:	e01a      	b.n	8009c72 <__sflush_r+0xee>
 8009c3c:	690f      	ldr	r7, [r1, #16]
 8009c3e:	2f00      	cmp	r7, #0
 8009c40:	d0f6      	beq.n	8009c30 <__sflush_r+0xac>
 8009c42:	0793      	lsls	r3, r2, #30
 8009c44:	bf18      	it	ne
 8009c46:	2300      	movne	r3, #0
 8009c48:	680e      	ldr	r6, [r1, #0]
 8009c4a:	bf08      	it	eq
 8009c4c:	694b      	ldreq	r3, [r1, #20]
 8009c4e:	1bf6      	subs	r6, r6, r7
 8009c50:	600f      	str	r7, [r1, #0]
 8009c52:	608b      	str	r3, [r1, #8]
 8009c54:	2e00      	cmp	r6, #0
 8009c56:	ddeb      	ble.n	8009c30 <__sflush_r+0xac>
 8009c58:	4633      	mov	r3, r6
 8009c5a:	463a      	mov	r2, r7
 8009c5c:	4628      	mov	r0, r5
 8009c5e:	6a21      	ldr	r1, [r4, #32]
 8009c60:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009c64:	47e0      	blx	ip
 8009c66:	2800      	cmp	r0, #0
 8009c68:	dc07      	bgt.n	8009c7a <__sflush_r+0xf6>
 8009c6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c72:	f04f 30ff 	mov.w	r0, #4294967295
 8009c76:	81a3      	strh	r3, [r4, #12]
 8009c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c7a:	4407      	add	r7, r0
 8009c7c:	1a36      	subs	r6, r6, r0
 8009c7e:	e7e9      	b.n	8009c54 <__sflush_r+0xd0>
 8009c80:	dfbffffe 	.word	0xdfbffffe

08009c84 <_fflush_r>:
 8009c84:	b538      	push	{r3, r4, r5, lr}
 8009c86:	690b      	ldr	r3, [r1, #16]
 8009c88:	4605      	mov	r5, r0
 8009c8a:	460c      	mov	r4, r1
 8009c8c:	b913      	cbnz	r3, 8009c94 <_fflush_r+0x10>
 8009c8e:	2500      	movs	r5, #0
 8009c90:	4628      	mov	r0, r5
 8009c92:	bd38      	pop	{r3, r4, r5, pc}
 8009c94:	b118      	cbz	r0, 8009c9e <_fflush_r+0x1a>
 8009c96:	6a03      	ldr	r3, [r0, #32]
 8009c98:	b90b      	cbnz	r3, 8009c9e <_fflush_r+0x1a>
 8009c9a:	f7ff f8e7 	bl	8008e6c <__sinit>
 8009c9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d0f3      	beq.n	8009c8e <_fflush_r+0xa>
 8009ca6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009ca8:	07d0      	lsls	r0, r2, #31
 8009caa:	d404      	bmi.n	8009cb6 <_fflush_r+0x32>
 8009cac:	0599      	lsls	r1, r3, #22
 8009cae:	d402      	bmi.n	8009cb6 <_fflush_r+0x32>
 8009cb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009cb2:	f7ff fb86 	bl	80093c2 <__retarget_lock_acquire_recursive>
 8009cb6:	4628      	mov	r0, r5
 8009cb8:	4621      	mov	r1, r4
 8009cba:	f7ff ff63 	bl	8009b84 <__sflush_r>
 8009cbe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009cc0:	4605      	mov	r5, r0
 8009cc2:	07da      	lsls	r2, r3, #31
 8009cc4:	d4e4      	bmi.n	8009c90 <_fflush_r+0xc>
 8009cc6:	89a3      	ldrh	r3, [r4, #12]
 8009cc8:	059b      	lsls	r3, r3, #22
 8009cca:	d4e1      	bmi.n	8009c90 <_fflush_r+0xc>
 8009ccc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009cce:	f7ff fb79 	bl	80093c4 <__retarget_lock_release_recursive>
 8009cd2:	e7dd      	b.n	8009c90 <_fflush_r+0xc>

08009cd4 <__swhatbuf_r>:
 8009cd4:	b570      	push	{r4, r5, r6, lr}
 8009cd6:	460c      	mov	r4, r1
 8009cd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cdc:	4615      	mov	r5, r2
 8009cde:	2900      	cmp	r1, #0
 8009ce0:	461e      	mov	r6, r3
 8009ce2:	b096      	sub	sp, #88	@ 0x58
 8009ce4:	da0c      	bge.n	8009d00 <__swhatbuf_r+0x2c>
 8009ce6:	89a3      	ldrh	r3, [r4, #12]
 8009ce8:	2100      	movs	r1, #0
 8009cea:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009cee:	bf14      	ite	ne
 8009cf0:	2340      	movne	r3, #64	@ 0x40
 8009cf2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009cf6:	2000      	movs	r0, #0
 8009cf8:	6031      	str	r1, [r6, #0]
 8009cfa:	602b      	str	r3, [r5, #0]
 8009cfc:	b016      	add	sp, #88	@ 0x58
 8009cfe:	bd70      	pop	{r4, r5, r6, pc}
 8009d00:	466a      	mov	r2, sp
 8009d02:	f000 f849 	bl	8009d98 <_fstat_r>
 8009d06:	2800      	cmp	r0, #0
 8009d08:	dbed      	blt.n	8009ce6 <__swhatbuf_r+0x12>
 8009d0a:	9901      	ldr	r1, [sp, #4]
 8009d0c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009d10:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009d14:	4259      	negs	r1, r3
 8009d16:	4159      	adcs	r1, r3
 8009d18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d1c:	e7eb      	b.n	8009cf6 <__swhatbuf_r+0x22>

08009d1e <__smakebuf_r>:
 8009d1e:	898b      	ldrh	r3, [r1, #12]
 8009d20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d22:	079d      	lsls	r5, r3, #30
 8009d24:	4606      	mov	r6, r0
 8009d26:	460c      	mov	r4, r1
 8009d28:	d507      	bpl.n	8009d3a <__smakebuf_r+0x1c>
 8009d2a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009d2e:	6023      	str	r3, [r4, #0]
 8009d30:	6123      	str	r3, [r4, #16]
 8009d32:	2301      	movs	r3, #1
 8009d34:	6163      	str	r3, [r4, #20]
 8009d36:	b003      	add	sp, #12
 8009d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d3a:	466a      	mov	r2, sp
 8009d3c:	ab01      	add	r3, sp, #4
 8009d3e:	f7ff ffc9 	bl	8009cd4 <__swhatbuf_r>
 8009d42:	9f00      	ldr	r7, [sp, #0]
 8009d44:	4605      	mov	r5, r0
 8009d46:	4639      	mov	r1, r7
 8009d48:	4630      	mov	r0, r6
 8009d4a:	f7ff fbbd 	bl	80094c8 <_malloc_r>
 8009d4e:	b948      	cbnz	r0, 8009d64 <__smakebuf_r+0x46>
 8009d50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d54:	059a      	lsls	r2, r3, #22
 8009d56:	d4ee      	bmi.n	8009d36 <__smakebuf_r+0x18>
 8009d58:	f023 0303 	bic.w	r3, r3, #3
 8009d5c:	f043 0302 	orr.w	r3, r3, #2
 8009d60:	81a3      	strh	r3, [r4, #12]
 8009d62:	e7e2      	b.n	8009d2a <__smakebuf_r+0xc>
 8009d64:	89a3      	ldrh	r3, [r4, #12]
 8009d66:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009d6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d6e:	81a3      	strh	r3, [r4, #12]
 8009d70:	9b01      	ldr	r3, [sp, #4]
 8009d72:	6020      	str	r0, [r4, #0]
 8009d74:	b15b      	cbz	r3, 8009d8e <__smakebuf_r+0x70>
 8009d76:	4630      	mov	r0, r6
 8009d78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d7c:	f000 f81e 	bl	8009dbc <_isatty_r>
 8009d80:	b128      	cbz	r0, 8009d8e <__smakebuf_r+0x70>
 8009d82:	89a3      	ldrh	r3, [r4, #12]
 8009d84:	f023 0303 	bic.w	r3, r3, #3
 8009d88:	f043 0301 	orr.w	r3, r3, #1
 8009d8c:	81a3      	strh	r3, [r4, #12]
 8009d8e:	89a3      	ldrh	r3, [r4, #12]
 8009d90:	431d      	orrs	r5, r3
 8009d92:	81a5      	strh	r5, [r4, #12]
 8009d94:	e7cf      	b.n	8009d36 <__smakebuf_r+0x18>
	...

08009d98 <_fstat_r>:
 8009d98:	b538      	push	{r3, r4, r5, lr}
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	4d06      	ldr	r5, [pc, #24]	@ (8009db8 <_fstat_r+0x20>)
 8009d9e:	4604      	mov	r4, r0
 8009da0:	4608      	mov	r0, r1
 8009da2:	4611      	mov	r1, r2
 8009da4:	602b      	str	r3, [r5, #0]
 8009da6:	f7f9 fc3c 	bl	8003622 <_fstat>
 8009daa:	1c43      	adds	r3, r0, #1
 8009dac:	d102      	bne.n	8009db4 <_fstat_r+0x1c>
 8009dae:	682b      	ldr	r3, [r5, #0]
 8009db0:	b103      	cbz	r3, 8009db4 <_fstat_r+0x1c>
 8009db2:	6023      	str	r3, [r4, #0]
 8009db4:	bd38      	pop	{r3, r4, r5, pc}
 8009db6:	bf00      	nop
 8009db8:	200003f8 	.word	0x200003f8

08009dbc <_isatty_r>:
 8009dbc:	b538      	push	{r3, r4, r5, lr}
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	4d05      	ldr	r5, [pc, #20]	@ (8009dd8 <_isatty_r+0x1c>)
 8009dc2:	4604      	mov	r4, r0
 8009dc4:	4608      	mov	r0, r1
 8009dc6:	602b      	str	r3, [r5, #0]
 8009dc8:	f7f9 fc3a 	bl	8003640 <_isatty>
 8009dcc:	1c43      	adds	r3, r0, #1
 8009dce:	d102      	bne.n	8009dd6 <_isatty_r+0x1a>
 8009dd0:	682b      	ldr	r3, [r5, #0]
 8009dd2:	b103      	cbz	r3, 8009dd6 <_isatty_r+0x1a>
 8009dd4:	6023      	str	r3, [r4, #0]
 8009dd6:	bd38      	pop	{r3, r4, r5, pc}
 8009dd8:	200003f8 	.word	0x200003f8

08009ddc <_sbrk_r>:
 8009ddc:	b538      	push	{r3, r4, r5, lr}
 8009dde:	2300      	movs	r3, #0
 8009de0:	4d05      	ldr	r5, [pc, #20]	@ (8009df8 <_sbrk_r+0x1c>)
 8009de2:	4604      	mov	r4, r0
 8009de4:	4608      	mov	r0, r1
 8009de6:	602b      	str	r3, [r5, #0]
 8009de8:	f7f9 fc40 	bl	800366c <_sbrk>
 8009dec:	1c43      	adds	r3, r0, #1
 8009dee:	d102      	bne.n	8009df6 <_sbrk_r+0x1a>
 8009df0:	682b      	ldr	r3, [r5, #0]
 8009df2:	b103      	cbz	r3, 8009df6 <_sbrk_r+0x1a>
 8009df4:	6023      	str	r3, [r4, #0]
 8009df6:	bd38      	pop	{r3, r4, r5, pc}
 8009df8:	200003f8 	.word	0x200003f8

08009dfc <memchr>:
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	b510      	push	{r4, lr}
 8009e00:	b2c9      	uxtb	r1, r1
 8009e02:	4402      	add	r2, r0
 8009e04:	4293      	cmp	r3, r2
 8009e06:	4618      	mov	r0, r3
 8009e08:	d101      	bne.n	8009e0e <memchr+0x12>
 8009e0a:	2000      	movs	r0, #0
 8009e0c:	e003      	b.n	8009e16 <memchr+0x1a>
 8009e0e:	7804      	ldrb	r4, [r0, #0]
 8009e10:	3301      	adds	r3, #1
 8009e12:	428c      	cmp	r4, r1
 8009e14:	d1f6      	bne.n	8009e04 <memchr+0x8>
 8009e16:	bd10      	pop	{r4, pc}

08009e18 <_init>:
 8009e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e1a:	bf00      	nop
 8009e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e1e:	bc08      	pop	{r3}
 8009e20:	469e      	mov	lr, r3
 8009e22:	4770      	bx	lr

08009e24 <_fini>:
 8009e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e26:	bf00      	nop
 8009e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e2a:	bc08      	pop	{r3}
 8009e2c:	469e      	mov	lr, r3
 8009e2e:	4770      	bx	lr
