
autolauncher_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051e4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009d4  080052f0  080052f0  000062f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cc4  08005cc4  00007078  2**0
                  CONTENTS
  4 .ARM          00000000  08005cc4  08005cc4  00007078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005cc4  08005cc4  00007078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cc4  08005cc4  00006cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005cc8  08005cc8  00006cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005ccc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  20000078  08005d44  00007078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000037c  08005d44  0000737c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000120c0  00000000  00000000  000070a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d54  00000000  00000000  00019161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001188  00000000  00000000  0001beb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dbc  00000000  00000000  0001d040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a1ae  00000000  00000000  0001ddfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001681b  00000000  00000000  00037faa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009441f  00000000  00000000  0004e7c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e2be4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005104  00000000  00000000  000e2c28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000e7d2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	080052d8 	.word	0x080052d8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	080052d8 	.word	0x080052d8

0800014c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800015c:	4b18      	ldr	r3, [pc, #96]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800015e:	4a19      	ldr	r2, [pc, #100]	@ (80001c4 <MX_ADC1_Init+0x78>)
 8000160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000162:	4b17      	ldr	r3, [pc, #92]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000164:	2200      	movs	r2, #0
 8000166:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000168:	4b15      	ldr	r3, [pc, #84]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800016a:	2200      	movs	r2, #0
 800016c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800016e:	4b14      	ldr	r3, [pc, #80]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000170:	2200      	movs	r2, #0
 8000172:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000174:	4b12      	ldr	r3, [pc, #72]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000176:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800017a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800017c:	4b10      	ldr	r3, [pc, #64]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800017e:	2200      	movs	r2, #0
 8000180:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000182:	4b0f      	ldr	r3, [pc, #60]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000184:	2201      	movs	r2, #1
 8000186:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000188:	480d      	ldr	r0, [pc, #52]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800018a:	f001 fa25 	bl	80015d8 <HAL_ADC_Init>
 800018e:	4603      	mov	r3, r0
 8000190:	2b00      	cmp	r3, #0
 8000192:	d001      	beq.n	8000198 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000194:	f000 fed2 	bl	8000f3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000198:	230a      	movs	r3, #10
 800019a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800019c:	2301      	movs	r3, #1
 800019e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001a0:	2300      	movs	r3, #0
 80001a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	4619      	mov	r1, r3
 80001a8:	4805      	ldr	r0, [pc, #20]	@ (80001c0 <MX_ADC1_Init+0x74>)
 80001aa:	f001 faed 	bl	8001788 <HAL_ADC_ConfigChannel>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d001      	beq.n	80001b8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80001b4:	f000 fec2 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80001b8:	bf00      	nop
 80001ba:	3710      	adds	r7, #16
 80001bc:	46bd      	mov	sp, r7
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	20000094 	.word	0x20000094
 80001c4:	40012400 	.word	0x40012400

080001c8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80001ce:	1d3b      	adds	r3, r7, #4
 80001d0:	2200      	movs	r2, #0
 80001d2:	601a      	str	r2, [r3, #0]
 80001d4:	605a      	str	r2, [r3, #4]
 80001d6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80001d8:	4b18      	ldr	r3, [pc, #96]	@ (800023c <MX_ADC2_Init+0x74>)
 80001da:	4a19      	ldr	r2, [pc, #100]	@ (8000240 <MX_ADC2_Init+0x78>)
 80001dc:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80001de:	4b17      	ldr	r3, [pc, #92]	@ (800023c <MX_ADC2_Init+0x74>)
 80001e0:	2200      	movs	r2, #0
 80001e2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80001e4:	4b15      	ldr	r3, [pc, #84]	@ (800023c <MX_ADC2_Init+0x74>)
 80001e6:	2200      	movs	r2, #0
 80001e8:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80001ea:	4b14      	ldr	r3, [pc, #80]	@ (800023c <MX_ADC2_Init+0x74>)
 80001ec:	2200      	movs	r2, #0
 80001ee:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80001f0:	4b12      	ldr	r3, [pc, #72]	@ (800023c <MX_ADC2_Init+0x74>)
 80001f2:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80001f6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80001f8:	4b10      	ldr	r3, [pc, #64]	@ (800023c <MX_ADC2_Init+0x74>)
 80001fa:	2200      	movs	r2, #0
 80001fc:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80001fe:	4b0f      	ldr	r3, [pc, #60]	@ (800023c <MX_ADC2_Init+0x74>)
 8000200:	2201      	movs	r2, #1
 8000202:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000204:	480d      	ldr	r0, [pc, #52]	@ (800023c <MX_ADC2_Init+0x74>)
 8000206:	f001 f9e7 	bl	80015d8 <HAL_ADC_Init>
 800020a:	4603      	mov	r3, r0
 800020c:	2b00      	cmp	r3, #0
 800020e:	d001      	beq.n	8000214 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000210:	f000 fe94 	bl	8000f3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000214:	230b      	movs	r3, #11
 8000216:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000218:	2301      	movs	r3, #1
 800021a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800021c:	2300      	movs	r3, #0
 800021e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000220:	1d3b      	adds	r3, r7, #4
 8000222:	4619      	mov	r1, r3
 8000224:	4805      	ldr	r0, [pc, #20]	@ (800023c <MX_ADC2_Init+0x74>)
 8000226:	f001 faaf 	bl	8001788 <HAL_ADC_ConfigChannel>
 800022a:	4603      	mov	r3, r0
 800022c:	2b00      	cmp	r3, #0
 800022e:	d001      	beq.n	8000234 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000230:	f000 fe84 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000234:	bf00      	nop
 8000236:	3710      	adds	r7, #16
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}
 800023c:	200000c4 	.word	0x200000c4
 8000240:	40012800 	.word	0x40012800

08000244 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b08a      	sub	sp, #40	@ 0x28
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800024c:	f107 0318 	add.w	r3, r7, #24
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]
 8000254:	605a      	str	r2, [r3, #4]
 8000256:	609a      	str	r2, [r3, #8]
 8000258:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	4a28      	ldr	r2, [pc, #160]	@ (8000300 <HAL_ADC_MspInit+0xbc>)
 8000260:	4293      	cmp	r3, r2
 8000262:	d122      	bne.n	80002aa <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000264:	4b27      	ldr	r3, [pc, #156]	@ (8000304 <HAL_ADC_MspInit+0xc0>)
 8000266:	699b      	ldr	r3, [r3, #24]
 8000268:	4a26      	ldr	r2, [pc, #152]	@ (8000304 <HAL_ADC_MspInit+0xc0>)
 800026a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800026e:	6193      	str	r3, [r2, #24]
 8000270:	4b24      	ldr	r3, [pc, #144]	@ (8000304 <HAL_ADC_MspInit+0xc0>)
 8000272:	699b      	ldr	r3, [r3, #24]
 8000274:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000278:	617b      	str	r3, [r7, #20]
 800027a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800027c:	4b21      	ldr	r3, [pc, #132]	@ (8000304 <HAL_ADC_MspInit+0xc0>)
 800027e:	699b      	ldr	r3, [r3, #24]
 8000280:	4a20      	ldr	r2, [pc, #128]	@ (8000304 <HAL_ADC_MspInit+0xc0>)
 8000282:	f043 0310 	orr.w	r3, r3, #16
 8000286:	6193      	str	r3, [r2, #24]
 8000288:	4b1e      	ldr	r3, [pc, #120]	@ (8000304 <HAL_ADC_MspInit+0xc0>)
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	f003 0310 	and.w	r3, r3, #16
 8000290:	613b      	str	r3, [r7, #16]
 8000292:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000294:	2301      	movs	r3, #1
 8000296:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000298:	2303      	movs	r3, #3
 800029a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800029c:	f107 0318 	add.w	r3, r7, #24
 80002a0:	4619      	mov	r1, r3
 80002a2:	4819      	ldr	r0, [pc, #100]	@ (8000308 <HAL_ADC_MspInit+0xc4>)
 80002a4:	f001 fd6a 	bl	8001d7c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80002a8:	e026      	b.n	80002f8 <HAL_ADC_MspInit+0xb4>
  else if(adcHandle->Instance==ADC2)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	4a17      	ldr	r2, [pc, #92]	@ (800030c <HAL_ADC_MspInit+0xc8>)
 80002b0:	4293      	cmp	r3, r2
 80002b2:	d121      	bne.n	80002f8 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80002b4:	4b13      	ldr	r3, [pc, #76]	@ (8000304 <HAL_ADC_MspInit+0xc0>)
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	4a12      	ldr	r2, [pc, #72]	@ (8000304 <HAL_ADC_MspInit+0xc0>)
 80002ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002be:	6193      	str	r3, [r2, #24]
 80002c0:	4b10      	ldr	r3, [pc, #64]	@ (8000304 <HAL_ADC_MspInit+0xc0>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80002c8:	60fb      	str	r3, [r7, #12]
 80002ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80002cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000304 <HAL_ADC_MspInit+0xc0>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	4a0c      	ldr	r2, [pc, #48]	@ (8000304 <HAL_ADC_MspInit+0xc0>)
 80002d2:	f043 0310 	orr.w	r3, r3, #16
 80002d6:	6193      	str	r3, [r2, #24]
 80002d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000304 <HAL_ADC_MspInit+0xc0>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	f003 0310 	and.w	r3, r3, #16
 80002e0:	60bb      	str	r3, [r7, #8]
 80002e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80002e4:	2302      	movs	r3, #2
 80002e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002e8:	2303      	movs	r3, #3
 80002ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002ec:	f107 0318 	add.w	r3, r7, #24
 80002f0:	4619      	mov	r1, r3
 80002f2:	4805      	ldr	r0, [pc, #20]	@ (8000308 <HAL_ADC_MspInit+0xc4>)
 80002f4:	f001 fd42 	bl	8001d7c <HAL_GPIO_Init>
}
 80002f8:	bf00      	nop
 80002fa:	3728      	adds	r7, #40	@ 0x28
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	40012400 	.word	0x40012400
 8000304:	40021000 	.word	0x40021000
 8000308:	40011000 	.word	0x40011000
 800030c:	40012800 	.word	0x40012800

08000310 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b088      	sub	sp, #32
 8000314:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000316:	f107 0310 	add.w	r3, r7, #16
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	605a      	str	r2, [r3, #4]
 8000320:	609a      	str	r2, [r3, #8]
 8000322:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000324:	4b42      	ldr	r3, [pc, #264]	@ (8000430 <MX_GPIO_Init+0x120>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	4a41      	ldr	r2, [pc, #260]	@ (8000430 <MX_GPIO_Init+0x120>)
 800032a:	f043 0310 	orr.w	r3, r3, #16
 800032e:	6193      	str	r3, [r2, #24]
 8000330:	4b3f      	ldr	r3, [pc, #252]	@ (8000430 <MX_GPIO_Init+0x120>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	f003 0310 	and.w	r3, r3, #16
 8000338:	60fb      	str	r3, [r7, #12]
 800033a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800033c:	4b3c      	ldr	r3, [pc, #240]	@ (8000430 <MX_GPIO_Init+0x120>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	4a3b      	ldr	r2, [pc, #236]	@ (8000430 <MX_GPIO_Init+0x120>)
 8000342:	f043 0320 	orr.w	r3, r3, #32
 8000346:	6193      	str	r3, [r2, #24]
 8000348:	4b39      	ldr	r3, [pc, #228]	@ (8000430 <MX_GPIO_Init+0x120>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	f003 0320 	and.w	r3, r3, #32
 8000350:	60bb      	str	r3, [r7, #8]
 8000352:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000354:	4b36      	ldr	r3, [pc, #216]	@ (8000430 <MX_GPIO_Init+0x120>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	4a35      	ldr	r2, [pc, #212]	@ (8000430 <MX_GPIO_Init+0x120>)
 800035a:	f043 0304 	orr.w	r3, r3, #4
 800035e:	6193      	str	r3, [r2, #24]
 8000360:	4b33      	ldr	r3, [pc, #204]	@ (8000430 <MX_GPIO_Init+0x120>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	f003 0304 	and.w	r3, r3, #4
 8000368:	607b      	str	r3, [r7, #4]
 800036a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800036c:	4b30      	ldr	r3, [pc, #192]	@ (8000430 <MX_GPIO_Init+0x120>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	4a2f      	ldr	r2, [pc, #188]	@ (8000430 <MX_GPIO_Init+0x120>)
 8000372:	f043 0308 	orr.w	r3, r3, #8
 8000376:	6193      	str	r3, [r2, #24]
 8000378:	4b2d      	ldr	r3, [pc, #180]	@ (8000430 <MX_GPIO_Init+0x120>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	f003 0308 	and.w	r3, r3, #8
 8000380:	603b      	str	r3, [r7, #0]
 8000382:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SSR_3_Pin|SSR_2_Pin|SSR_1_Pin|ENABLE_M1_Pin
 8000384:	2200      	movs	r2, #0
 8000386:	f64f 71dc 	movw	r1, #65500	@ 0xffdc
 800038a:	482a      	ldr	r0, [pc, #168]	@ (8000434 <MX_GPIO_Init+0x124>)
 800038c:	f001 fe7a 	bl	8002084 <HAL_GPIO_WritePin>
                          |ENABLE_M2_Pin|DIR_Pin|SSR_6_Pin|SSR_5_Pin
                          |RELAY_RESET_3_Pin|RELAY_RESET_2_Pin|RELAY_K7_Pin|RELAY_K1_Pin
                          |RELAY_K2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENABLE_M3_Pin|ENABLE_M4_Pin|MUX_SELECT_Pin|ENABLE_M5_Pin
 8000390:	2200      	movs	r2, #0
 8000392:	f649 11f7 	movw	r1, #39415	@ 0x99f7
 8000396:	4828      	ldr	r0, [pc, #160]	@ (8000438 <MX_GPIO_Init+0x128>)
 8000398:	f001 fe74 	bl	8002084 <HAL_GPIO_WritePin>
                          |ENABLE_M6_Pin|ENABLE_M7_Pin|ENABLE_M8_Pin|RELAY_K12_CAL_RES_Pin
                          |RELAY_K11_CAL_CONT_Pin|RELAY_K9_K10_GND_COND_Pin|RELAY_K8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|SSR_8_Pin|SSR_7_Pin|RELAY_K4_Pin
 800039c:	2200      	movs	r2, #0
 800039e:	f24c 313a 	movw	r1, #49978	@ 0xc33a
 80003a2:	4826      	ldr	r0, [pc, #152]	@ (800043c <MX_GPIO_Init+0x12c>)
 80003a4:	f001 fe6e 	bl	8002084 <HAL_GPIO_WritePin>
                          |RELAY_K5_Pin|RELAY_K6_Pin|RELAY_RESET_1_Pin|SSR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_K3_GPIO_Port, RELAY_K3_Pin, GPIO_PIN_RESET);
 80003a8:	2200      	movs	r2, #0
 80003aa:	2104      	movs	r1, #4
 80003ac:	4824      	ldr	r0, [pc, #144]	@ (8000440 <MX_GPIO_Init+0x130>)
 80003ae:	f001 fe69 	bl	8002084 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = SSR_3_Pin|SSR_2_Pin|SSR_1_Pin|ENABLE_M1_Pin
 80003b2:	f64f 73dc 	movw	r3, #65500	@ 0xffdc
 80003b6:	613b      	str	r3, [r7, #16]
                          |ENABLE_M2_Pin|DIR_Pin|SSR_6_Pin|SSR_5_Pin
                          |RELAY_RESET_3_Pin|RELAY_RESET_2_Pin|RELAY_K7_Pin|RELAY_K1_Pin
                          |RELAY_K2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b8:	2301      	movs	r3, #1
 80003ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003bc:	2300      	movs	r3, #0
 80003be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c0:	2302      	movs	r3, #2
 80003c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003c4:	f107 0310 	add.w	r3, r7, #16
 80003c8:	4619      	mov	r1, r3
 80003ca:	481a      	ldr	r0, [pc, #104]	@ (8000434 <MX_GPIO_Init+0x124>)
 80003cc:	f001 fcd6 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ENABLE_M3_Pin|ENABLE_M4_Pin|MUX_SELECT_Pin|ENABLE_M5_Pin
 80003d0:	f649 13f7 	movw	r3, #39415	@ 0x99f7
 80003d4:	613b      	str	r3, [r7, #16]
                          |ENABLE_M6_Pin|ENABLE_M7_Pin|ENABLE_M8_Pin|RELAY_K12_CAL_RES_Pin
                          |RELAY_K11_CAL_CONT_Pin|RELAY_K9_K10_GND_COND_Pin|RELAY_K8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d6:	2301      	movs	r3, #1
 80003d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003da:	2300      	movs	r3, #0
 80003dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003de:	2302      	movs	r3, #2
 80003e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003e2:	f107 0310 	add.w	r3, r7, #16
 80003e6:	4619      	mov	r1, r3
 80003e8:	4813      	ldr	r0, [pc, #76]	@ (8000438 <MX_GPIO_Init+0x128>)
 80003ea:	f001 fcc7 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_Pin|SSR_8_Pin|SSR_7_Pin|RELAY_K4_Pin
 80003ee:	f24c 333a 	movw	r3, #49978	@ 0xc33a
 80003f2:	613b      	str	r3, [r7, #16]
                          |RELAY_K5_Pin|RELAY_K6_Pin|RELAY_RESET_1_Pin|SSR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f4:	2301      	movs	r3, #1
 80003f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f8:	2300      	movs	r3, #0
 80003fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003fc:	2302      	movs	r3, #2
 80003fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000400:	f107 0310 	add.w	r3, r7, #16
 8000404:	4619      	mov	r1, r3
 8000406:	480d      	ldr	r0, [pc, #52]	@ (800043c <MX_GPIO_Init+0x12c>)
 8000408:	f001 fcb8 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RELAY_K3_Pin;
 800040c:	2304      	movs	r3, #4
 800040e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000410:	2301      	movs	r3, #1
 8000412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000414:	2300      	movs	r3, #0
 8000416:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000418:	2302      	movs	r3, #2
 800041a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RELAY_K3_GPIO_Port, &GPIO_InitStruct);
 800041c:	f107 0310 	add.w	r3, r7, #16
 8000420:	4619      	mov	r1, r3
 8000422:	4807      	ldr	r0, [pc, #28]	@ (8000440 <MX_GPIO_Init+0x130>)
 8000424:	f001 fcaa 	bl	8001d7c <HAL_GPIO_Init>

}
 8000428:	bf00      	nop
 800042a:	3720      	adds	r7, #32
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	40021000 	.word	0x40021000
 8000434:	40011000 	.word	0x40011000
 8000438:	40010800 	.word	0x40010800
 800043c:	40010c00 	.word	0x40010c00
 8000440:	40011400 	.word	0x40011400

08000444 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000448:	4b12      	ldr	r3, [pc, #72]	@ (8000494 <MX_I2C1_Init+0x50>)
 800044a:	4a13      	ldr	r2, [pc, #76]	@ (8000498 <MX_I2C1_Init+0x54>)
 800044c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800044e:	4b11      	ldr	r3, [pc, #68]	@ (8000494 <MX_I2C1_Init+0x50>)
 8000450:	4a12      	ldr	r2, [pc, #72]	@ (800049c <MX_I2C1_Init+0x58>)
 8000452:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000454:	4b0f      	ldr	r3, [pc, #60]	@ (8000494 <MX_I2C1_Init+0x50>)
 8000456:	2200      	movs	r2, #0
 8000458:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800045a:	4b0e      	ldr	r3, [pc, #56]	@ (8000494 <MX_I2C1_Init+0x50>)
 800045c:	2200      	movs	r2, #0
 800045e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000460:	4b0c      	ldr	r3, [pc, #48]	@ (8000494 <MX_I2C1_Init+0x50>)
 8000462:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000466:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000468:	4b0a      	ldr	r3, [pc, #40]	@ (8000494 <MX_I2C1_Init+0x50>)
 800046a:	2200      	movs	r2, #0
 800046c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800046e:	4b09      	ldr	r3, [pc, #36]	@ (8000494 <MX_I2C1_Init+0x50>)
 8000470:	2200      	movs	r2, #0
 8000472:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000474:	4b07      	ldr	r3, [pc, #28]	@ (8000494 <MX_I2C1_Init+0x50>)
 8000476:	2200      	movs	r2, #0
 8000478:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800047a:	4b06      	ldr	r3, [pc, #24]	@ (8000494 <MX_I2C1_Init+0x50>)
 800047c:	2200      	movs	r2, #0
 800047e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000480:	4804      	ldr	r0, [pc, #16]	@ (8000494 <MX_I2C1_Init+0x50>)
 8000482:	f001 fe17 	bl	80020b4 <HAL_I2C_Init>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800048c:	f000 fd56 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000490:	bf00      	nop
 8000492:	bd80      	pop	{r7, pc}
 8000494:	200000f4 	.word	0x200000f4
 8000498:	40005400 	.word	0x40005400
 800049c:	000186a0 	.word	0x000186a0

080004a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b088      	sub	sp, #32
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a8:	f107 0310 	add.w	r3, r7, #16
 80004ac:	2200      	movs	r2, #0
 80004ae:	601a      	str	r2, [r3, #0]
 80004b0:	605a      	str	r2, [r3, #4]
 80004b2:	609a      	str	r2, [r3, #8]
 80004b4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	4a15      	ldr	r2, [pc, #84]	@ (8000510 <HAL_I2C_MspInit+0x70>)
 80004bc:	4293      	cmp	r3, r2
 80004be:	d123      	bne.n	8000508 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c0:	4b14      	ldr	r3, [pc, #80]	@ (8000514 <HAL_I2C_MspInit+0x74>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	4a13      	ldr	r2, [pc, #76]	@ (8000514 <HAL_I2C_MspInit+0x74>)
 80004c6:	f043 0308 	orr.w	r3, r3, #8
 80004ca:	6193      	str	r3, [r2, #24]
 80004cc:	4b11      	ldr	r3, [pc, #68]	@ (8000514 <HAL_I2C_MspInit+0x74>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	f003 0308 	and.w	r3, r3, #8
 80004d4:	60fb      	str	r3, [r7, #12]
 80004d6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80004d8:	23c0      	movs	r3, #192	@ 0xc0
 80004da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004dc:	2312      	movs	r3, #18
 80004de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004e0:	2303      	movs	r3, #3
 80004e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004e4:	f107 0310 	add.w	r3, r7, #16
 80004e8:	4619      	mov	r1, r3
 80004ea:	480b      	ldr	r0, [pc, #44]	@ (8000518 <HAL_I2C_MspInit+0x78>)
 80004ec:	f001 fc46 	bl	8001d7c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80004f0:	4b08      	ldr	r3, [pc, #32]	@ (8000514 <HAL_I2C_MspInit+0x74>)
 80004f2:	69db      	ldr	r3, [r3, #28]
 80004f4:	4a07      	ldr	r2, [pc, #28]	@ (8000514 <HAL_I2C_MspInit+0x74>)
 80004f6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80004fa:	61d3      	str	r3, [r2, #28]
 80004fc:	4b05      	ldr	r3, [pc, #20]	@ (8000514 <HAL_I2C_MspInit+0x74>)
 80004fe:	69db      	ldr	r3, [r3, #28]
 8000500:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000504:	60bb      	str	r3, [r7, #8]
 8000506:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000508:	bf00      	nop
 800050a:	3720      	adds	r7, #32
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	40005400 	.word	0x40005400
 8000514:	40021000 	.word	0x40021000
 8000518:	40010c00 	.word	0x40010c00

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f000 ffd4 	bl	80014cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f846 	bl	80005b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f7ff fef2 	bl	8000310 <MX_GPIO_Init>
  MX_TIM3_Init();
 800052c:	f000 fdfe 	bl	800112c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000530:	f000 fec2 	bl	80012b8 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000534:	f7ff fe0a 	bl	800014c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000538:	f7ff fe46 	bl	80001c8 <MX_ADC2_Init>
  MX_I2C1_Init();
 800053c:	f7ff ff82 	bl	8000444 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000540:	f000 fee4 	bl	800130c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  // Initialize autolauncher parameters i.e. read eeprom
  parameter_init();
 8000544:	f000 f8b2 	bl	80006ac <parameter_init>

  // Initialize stepper motors
  motor_init();
 8000548:	f000 fcc8 	bl	8000edc <motor_init>

  // initialize multiplexer
  multiplexer_set(MUX_STM32);
 800054c:	2001      	movs	r0, #1
 800054e:	f000 f881 	bl	8000654 <multiplexer_set>

  // Initialize relays
  relay_init();
 8000552:	f000 fc89 	bl	8000e68 <relay_init>

  // menu init
  //menu_init();

  // enable receive interrupt
  HAL_UART_Receive_IT(&huart1, rxBuffer, 1); // enable UART receive interrupt, store received char in rxChar buffer
 8000556:	2201      	movs	r2, #1
 8000558:	4911      	ldr	r1, [pc, #68]	@ (80005a0 <main+0x84>)
 800055a:	4812      	ldr	r0, [pc, #72]	@ (80005a4 <main+0x88>)
 800055c:	f003 f945 	bl	80037ea <HAL_UART_Receive_IT>

  // display main menu at startup
  status_message();
 8000560:	f000 fb78 	bl	8000c54 <status_message>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(active == rxStatus){ // set to active with UART RX interrupt
 8000564:	4b10      	ldr	r3, [pc, #64]	@ (80005a8 <main+0x8c>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b01      	cmp	r3, #1
 800056a:	d115      	bne.n	8000598 <main+0x7c>
		  if( mainMenu == activeMenu){
 800056c:	4b0f      	ldr	r3, [pc, #60]	@ (80005ac <main+0x90>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d105      	bne.n	8000580 <main+0x64>
			  main_process_input(rxChar); // go to main switch case menu
 8000574:	4b0e      	ldr	r3, [pc, #56]	@ (80005b0 <main+0x94>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	4618      	mov	r0, r3
 800057a:	f000 f8c5 	bl	8000708 <main_process_input>
 800057e:	e008      	b.n	8000592 <main+0x76>
		  } else if ( configMenu == activeMenu){
 8000580:	4b0a      	ldr	r3, [pc, #40]	@ (80005ac <main+0x90>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b01      	cmp	r3, #1
 8000586:	d104      	bne.n	8000592 <main+0x76>
			  config_process_input(rxChar);
 8000588:	4b09      	ldr	r3, [pc, #36]	@ (80005b0 <main+0x94>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	4618      	mov	r0, r3
 800058e:	f000 fa3d 	bl	8000a0c <config_process_input>
		  }

		  rxStatus = idle;
 8000592:	4b05      	ldr	r3, [pc, #20]	@ (80005a8 <main+0x8c>)
 8000594:	2200      	movs	r2, #0
 8000596:	701a      	strb	r2, [r3, #0]
	  }
	  // monitor voltage and send alarm if it's below a threshold
	  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	  HAL_Delay(100);
 8000598:	2064      	movs	r0, #100	@ 0x64
 800059a:	f000 fff9 	bl	8001590 <HAL_Delay>
	  if(active == rxStatus){ // set to active with UART RX interrupt
 800059e:	e7e1      	b.n	8000564 <main+0x48>
 80005a0:	2000014c 	.word	0x2000014c
 80005a4:	2000019c 	.word	0x2000019c
 80005a8:	20000148 	.word	0x20000148
 80005ac:	20000149 	.word	0x20000149
 80005b0:	2000014d 	.word	0x2000014d

080005b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b094      	sub	sp, #80	@ 0x50
 80005b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005be:	2228      	movs	r2, #40	@ 0x28
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f004 f96e 	bl	80048a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c8:	f107 0314 	add.w	r3, r7, #20
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e4:	2302      	movs	r3, #2
 80005e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e8:	2301      	movs	r3, #1
 80005ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ec:	2310      	movs	r3, #16
 80005ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005f0:	2300      	movs	r3, #0
 80005f2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005f8:	4618      	mov	r0, r3
 80005fa:	f001 fe9f 	bl	800233c <HAL_RCC_OscConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000604:	f000 fc9a 	bl	8000f3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000608:	230f      	movs	r3, #15
 800060a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800060c:	2300      	movs	r3, #0
 800060e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800061c:	f107 0314 	add.w	r3, r7, #20
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f002 f90c 	bl	8002840 <HAL_RCC_ClockConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800062e:	f000 fc85 	bl	8000f3c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000632:	2302      	movs	r3, #2
 8000634:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000636:	2300      	movs	r3, #0
 8000638:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	4618      	mov	r0, r3
 800063e:	f002 fa8d 	bl	8002b5c <HAL_RCCEx_PeriphCLKConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000648:	f000 fc78 	bl	8000f3c <Error_Handler>
  }
}
 800064c:	bf00      	nop
 800064e:	3750      	adds	r7, #80	@ 0x50
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <multiplexer_set>:
/* USER CODE BEGIN 4 */


/***************************************** START AUTOLAUNCHER FUNCTIONS *****************************************/

void multiplexer_set(mux_t select){
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(MUX_SELECT_GPIO_Port, MUX_SELECT_Pin, select); // SET = UART-tx / RESET = Din from GPS
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	461a      	mov	r2, r3
 8000662:	2104      	movs	r1, #4
 8000664:	4803      	ldr	r0, [pc, #12]	@ (8000674 <multiplexer_set+0x20>)
 8000666:	f001 fd0d 	bl	8002084 <HAL_GPIO_WritePin>
}
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40010800 	.word	0x40010800

08000678 <_write>:

/* Redirect std output to uart with printf */
int _write(int file, char *ptr, int len){
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	b29a      	uxth	r2, r3
 8000688:	f04f 33ff 	mov.w	r3, #4294967295
 800068c:	68b9      	ldr	r1, [r7, #8]
 800068e:	4806      	ldr	r0, [pc, #24]	@ (80006a8 <_write+0x30>)
 8000690:	f003 f820 	bl	80036d4 <HAL_UART_Transmit>
	fflush(file);
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	4618      	mov	r0, r3
 8000698:	f003 fede 	bl	8004458 <fflush>
	return len;
 800069c:	687b      	ldr	r3, [r7, #4]
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	2000019c 	.word	0x2000019c

080006ac <parameter_init>:

/* Initialize autolauncher parameters */
void parameter_init(void){
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
	// get parameters from eeprom or assign default values

}
 80006b0:	bf00      	nop
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bc80      	pop	{r7}
 80006b6:	4770      	bx	lr

080006b8 <HAL_UART_RxCpltCallback>:

/* UART Receive interrupt callback, set rxStatus flag for new char received and echo, re-enable uart rx interrupt*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
	//uint8_t txBuffer[10] = {'\0'};
	if(huart->Instance == USART1){ // check that uart1 triggered the interrupt callback
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a0b      	ldr	r2, [pc, #44]	@ (80006f4 <HAL_UART_RxCpltCallback+0x3c>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d110      	bne.n	80006ec <HAL_UART_RxCpltCallback+0x34>
		rxChar = rxBuffer[0];
 80006ca:	4b0b      	ldr	r3, [pc, #44]	@ (80006f8 <HAL_UART_RxCpltCallback+0x40>)
 80006cc:	781a      	ldrb	r2, [r3, #0]
 80006ce:	4b0b      	ldr	r3, [pc, #44]	@ (80006fc <HAL_UART_RxCpltCallback+0x44>)
 80006d0:	701a      	strb	r2, [r3, #0]
		rxStatus = active;
 80006d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000700 <HAL_UART_RxCpltCallback+0x48>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	701a      	strb	r2, [r3, #0]

		if(RXECHO == 1){
			printf("%c", rxChar);
 80006d8:	4b08      	ldr	r3, [pc, #32]	@ (80006fc <HAL_UART_RxCpltCallback+0x44>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	4618      	mov	r0, r3
 80006de:	f003 ffa3 	bl	8004628 <putchar>
			//sprintf(txBuffer,"\r\n>> %c\r\n", rxChar);
			//HAL_UART_Transmit(&huart1, (const uint8_t *) txBuffer, sizeof(txBuffer), 100);
		}
		HAL_UART_Receive_IT(&huart1, (uint8_t *) rxBuffer, 1); // reactivate rx interrupt
 80006e2:	2201      	movs	r2, #1
 80006e4:	4904      	ldr	r1, [pc, #16]	@ (80006f8 <HAL_UART_RxCpltCallback+0x40>)
 80006e6:	4807      	ldr	r0, [pc, #28]	@ (8000704 <HAL_UART_RxCpltCallback+0x4c>)
 80006e8:	f003 f87f 	bl	80037ea <HAL_UART_Receive_IT>
	}
}
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40013800 	.word	0x40013800
 80006f8:	2000014c 	.word	0x2000014c
 80006fc:	2000014d 	.word	0x2000014d
 8000700:	20000148 	.word	0x20000148
 8000704:	2000019c 	.word	0x2000019c

08000708 <main_process_input>:

/* Process char received while in Main menu */
void main_process_input(char option){
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]
	printf("\r\n> Executing OPTION %c...\r\n", option);
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	4619      	mov	r1, r3
 8000716:	48a3      	ldr	r0, [pc, #652]	@ (80009a4 <main_process_input+0x29c>)
 8000718:	f003 ff74 	bl	8004604 <iprintf>
	//if (option == 'M') status_message();
	switch (option){
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	3b30      	subs	r3, #48	@ 0x30
 8000720:	2b4e      	cmp	r3, #78	@ 0x4e
 8000722:	f200 8136 	bhi.w	8000992 <main_process_input+0x28a>
 8000726:	a201      	add	r2, pc, #4	@ (adr r2, 800072c <main_process_input+0x24>)
 8000728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800072c:	08000869 	.word	0x08000869
 8000730:	08000871 	.word	0x08000871
 8000734:	08000879 	.word	0x08000879
 8000738:	08000881 	.word	0x08000881
 800073c:	08000889 	.word	0x08000889
 8000740:	08000891 	.word	0x08000891
 8000744:	08000899 	.word	0x08000899
 8000748:	080008a1 	.word	0x080008a1
 800074c:	080008af 	.word	0x080008af
 8000750:	08000993 	.word	0x08000993
 8000754:	08000993 	.word	0x08000993
 8000758:	08000993 	.word	0x08000993
 800075c:	08000993 	.word	0x08000993
 8000760:	08000993 	.word	0x08000993
 8000764:	08000993 	.word	0x08000993
 8000768:	08000993 	.word	0x08000993
 800076c:	08000993 	.word	0x08000993
 8000770:	08000909 	.word	0x08000909
 8000774:	08000911 	.word	0x08000911
 8000778:	08000919 	.word	0x08000919
 800077c:	08000921 	.word	0x08000921
 8000780:	08000929 	.word	0x08000929
 8000784:	08000931 	.word	0x08000931
 8000788:	0800096d 	.word	0x0800096d
 800078c:	08000939 	.word	0x08000939
 8000790:	08000947 	.word	0x08000947
 8000794:	08000993 	.word	0x08000993
 8000798:	08000955 	.word	0x08000955
 800079c:	08000965 	.word	0x08000965
 80007a0:	08000975 	.word	0x08000975
 80007a4:	08000993 	.word	0x08000993
 80007a8:	08000993 	.word	0x08000993
 80007ac:	08000993 	.word	0x08000993
 80007b0:	08000993 	.word	0x08000993
 80007b4:	0800095d 	.word	0x0800095d
 80007b8:	080008ed 	.word	0x080008ed
 80007bc:	080008fb 	.word	0x080008fb
 80007c0:	080008bd 	.word	0x080008bd
 80007c4:	080008c5 	.word	0x080008c5
 80007c8:	080008cd 	.word	0x080008cd
 80007cc:	080008d5 	.word	0x080008d5
 80007d0:	080008dd 	.word	0x080008dd
 80007d4:	080008e5 	.word	0x080008e5
 80007d8:	08000993 	.word	0x08000993
 80007dc:	08000993 	.word	0x08000993
 80007e0:	08000993 	.word	0x08000993
 80007e4:	08000993 	.word	0x08000993
 80007e8:	08000993 	.word	0x08000993
 80007ec:	08000993 	.word	0x08000993
 80007f0:	08000993 	.word	0x08000993
 80007f4:	08000993 	.word	0x08000993
 80007f8:	08000993 	.word	0x08000993
 80007fc:	08000993 	.word	0x08000993
 8000800:	08000993 	.word	0x08000993
 8000804:	08000993 	.word	0x08000993
 8000808:	08000993 	.word	0x08000993
 800080c:	08000993 	.word	0x08000993
 8000810:	08000993 	.word	0x08000993
 8000814:	08000993 	.word	0x08000993
 8000818:	08000993 	.word	0x08000993
 800081c:	08000993 	.word	0x08000993
 8000820:	08000993 	.word	0x08000993
 8000824:	08000993 	.word	0x08000993
 8000828:	08000993 	.word	0x08000993
 800082c:	08000993 	.word	0x08000993
 8000830:	08000993 	.word	0x08000993
 8000834:	08000993 	.word	0x08000993
 8000838:	08000987 	.word	0x08000987
 800083c:	08000993 	.word	0x08000993
 8000840:	08000993 	.word	0x08000993
 8000844:	08000993 	.word	0x08000993
 8000848:	08000993 	.word	0x08000993
 800084c:	08000993 	.word	0x08000993
 8000850:	08000993 	.word	0x08000993
 8000854:	08000993 	.word	0x08000993
 8000858:	08000993 	.word	0x08000993
 800085c:	08000993 	.word	0x08000993
 8000860:	08000993 	.word	0x08000993
 8000864:	0800097b 	.word	0x0800097b
		// Connect XBT pins
    case '0':
        //engage calibration resistor
    	printf("unground_xbt(),calibration_resistor(),calibrate_on()");
 8000868:	484f      	ldr	r0, [pc, #316]	@ (80009a8 <main_process_input+0x2a0>)
 800086a:	f003 fecb 	bl	8004604 <iprintf>
//        unground_xbt();
//        calibration_resistor();
//        calibrate_on();
        break;
 800086e:	e094      	b.n	800099a <main_process_input+0x292>
    case '1':
        //connect_xbt_pin('1');
        printf("connect_xbt_pin(1)");
 8000870:	484e      	ldr	r0, [pc, #312]	@ (80009ac <main_process_input+0x2a4>)
 8000872:	f003 fec7 	bl	8004604 <iprintf>
        break;
 8000876:	e090      	b.n	800099a <main_process_input+0x292>
    case '2':
        //connect_xbt_pin('2');
        printf("connect_xbt_pin(2)");
 8000878:	484d      	ldr	r0, [pc, #308]	@ (80009b0 <main_process_input+0x2a8>)
 800087a:	f003 fec3 	bl	8004604 <iprintf>
        break;
 800087e:	e08c      	b.n	800099a <main_process_input+0x292>
    case '3':
        //connect_xbt_pin('3');
        printf("connect_xbt_pin(3)");
 8000880:	484c      	ldr	r0, [pc, #304]	@ (80009b4 <main_process_input+0x2ac>)
 8000882:	f003 febf 	bl	8004604 <iprintf>
        break;
 8000886:	e088      	b.n	800099a <main_process_input+0x292>
    case '4':
        //connect_xbt_pin('4');
        printf("connect_xbt_pin(4)");
 8000888:	484b      	ldr	r0, [pc, #300]	@ (80009b8 <main_process_input+0x2b0>)
 800088a:	f003 febb 	bl	8004604 <iprintf>
        break;
 800088e:	e084      	b.n	800099a <main_process_input+0x292>
    case '5':
        //connect_xbt_pin('5');
        printf("connect_xbt_pin(5)");
 8000890:	484a      	ldr	r0, [pc, #296]	@ (80009bc <main_process_input+0x2b4>)
 8000892:	f003 feb7 	bl	8004604 <iprintf>
        break;
 8000896:	e080      	b.n	800099a <main_process_input+0x292>
    case '6':
        //connect_xbt_pin('6');
        printf("connect_xbt_pin(6)");
 8000898:	4849      	ldr	r0, [pc, #292]	@ (80009c0 <main_process_input+0x2b8>)
 800089a:	f003 feb3 	bl	8004604 <iprintf>
        break;
 800089e:	e07c      	b.n	800099a <main_process_input+0x292>
    case '7':
        if (launcher.tubeCount = '8'){
 80008a0:	4b48      	ldr	r3, [pc, #288]	@ (80009c4 <main_process_input+0x2bc>)
 80008a2:	2238      	movs	r2, #56	@ 0x38
 80008a4:	709a      	strb	r2, [r3, #2]
            //connect_xbt_pin('7');
            printf("connect_xbt_pin(7)");
 80008a6:	4848      	ldr	r0, [pc, #288]	@ (80009c8 <main_process_input+0x2c0>)
 80008a8:	f003 feac 	bl	8004604 <iprintf>
        } else {
        	printf("Error, tube 7 not available\r\n");
        }
        break;
 80008ac:	e075      	b.n	800099a <main_process_input+0x292>
    case '8':
        if (launcher.tubeCount = '8'){
 80008ae:	4b45      	ldr	r3, [pc, #276]	@ (80009c4 <main_process_input+0x2bc>)
 80008b0:	2238      	movs	r2, #56	@ 0x38
 80008b2:	709a      	strb	r2, [r3, #2]
        	//connect_xbt_pin('8');
        	printf("connect_xbt_pin(8)");
 80008b4:	4845      	ldr	r0, [pc, #276]	@ (80009cc <main_process_input+0x2c4>)
 80008b6:	f003 fea5 	bl	8004604 <iprintf>
        } else {
        	printf("Error, tube 8 not available\r\n");
        }
        break;
 80008ba:	e06e      	b.n	800099a <main_process_input+0x292>
        //EXTEND PINS
    case 'U':
        //extend_pin('1');
    	printf("extend_pin(1)");
 80008bc:	4844      	ldr	r0, [pc, #272]	@ (80009d0 <main_process_input+0x2c8>)
 80008be:	f003 fea1 	bl	8004604 <iprintf>
        break;
 80008c2:	e06a      	b.n	800099a <main_process_input+0x292>
    case 'V':
        //extend_pin('2');
        printf("extend_pin(1)");
 80008c4:	4842      	ldr	r0, [pc, #264]	@ (80009d0 <main_process_input+0x2c8>)
 80008c6:	f003 fe9d 	bl	8004604 <iprintf>
        break;
 80008ca:	e066      	b.n	800099a <main_process_input+0x292>
    case 'W':
        //extend_pin('3');
        printf("extend_pin(1)");
 80008cc:	4840      	ldr	r0, [pc, #256]	@ (80009d0 <main_process_input+0x2c8>)
 80008ce:	f003 fe99 	bl	8004604 <iprintf>
        break;
 80008d2:	e062      	b.n	800099a <main_process_input+0x292>
    case 'X':
        //extend_pin('4');
        printf("extend_pin(1)");
 80008d4:	483e      	ldr	r0, [pc, #248]	@ (80009d0 <main_process_input+0x2c8>)
 80008d6:	f003 fe95 	bl	8004604 <iprintf>
        break;
 80008da:	e05e      	b.n	800099a <main_process_input+0x292>
    case 'Y':
        //extend_pin('5');
        printf("extend_pin(1)");
 80008dc:	483c      	ldr	r0, [pc, #240]	@ (80009d0 <main_process_input+0x2c8>)
 80008de:	f003 fe91 	bl	8004604 <iprintf>
        break;
 80008e2:	e05a      	b.n	800099a <main_process_input+0x292>
    case 'Z':
        //extend_pin('6');
        printf("extend_pin(1)");
 80008e4:	483a      	ldr	r0, [pc, #232]	@ (80009d0 <main_process_input+0x2c8>)
 80008e6:	f003 fe8d 	bl	8004604 <iprintf>
        break;
 80008ea:	e056      	b.n	800099a <main_process_input+0x292>
    case 'S':
        if (launcher.tubeCount = '8'){
 80008ec:	4b35      	ldr	r3, [pc, #212]	@ (80009c4 <main_process_input+0x2bc>)
 80008ee:	2238      	movs	r2, #56	@ 0x38
 80008f0:	709a      	strb	r2, [r3, #2]
        	//extend_pin('7');
        	printf("extend_pin(1)");
 80008f2:	4837      	ldr	r0, [pc, #220]	@ (80009d0 <main_process_input+0x2c8>)
 80008f4:	f003 fe86 	bl	8004604 <iprintf>
        } else {
        	printf("Error, tube 7 not available\r\n");
        }
        break;
 80008f8:	e04f      	b.n	800099a <main_process_input+0x292>
    case 'T':
        if (launcher.tubeCount = '8'){
 80008fa:	4b32      	ldr	r3, [pc, #200]	@ (80009c4 <main_process_input+0x2bc>)
 80008fc:	2238      	movs	r2, #56	@ 0x38
 80008fe:	709a      	strb	r2, [r3, #2]
        	//extend_pin('8');
        	printf("extend_pin(1)");
 8000900:	4833      	ldr	r0, [pc, #204]	@ (80009d0 <main_process_input+0x2c8>)
 8000902:	f003 fe7f 	bl	8004604 <iprintf>
        } else {
        	printf("Error, tube 8 not available\r\n");
        }
        break;
 8000906:	e048      	b.n	800099a <main_process_input+0x292>
        //RETRACT PINS
    case 'A':
        //retract_pin('1');
    	printf("retract_pin(1)");
 8000908:	4832      	ldr	r0, [pc, #200]	@ (80009d4 <main_process_input+0x2cc>)
 800090a:	f003 fe7b 	bl	8004604 <iprintf>
        break;
 800090e:	e044      	b.n	800099a <main_process_input+0x292>
    case 'B':
        //retract_pin('2');
        printf("retract_pin(2)");
 8000910:	4831      	ldr	r0, [pc, #196]	@ (80009d8 <main_process_input+0x2d0>)
 8000912:	f003 fe77 	bl	8004604 <iprintf>
        break;
 8000916:	e040      	b.n	800099a <main_process_input+0x292>
    case 'C':
        //retract_pin('3');
        printf("retract_pin(1)");
 8000918:	482e      	ldr	r0, [pc, #184]	@ (80009d4 <main_process_input+0x2cc>)
 800091a:	f003 fe73 	bl	8004604 <iprintf>
        break;
 800091e:	e03c      	b.n	800099a <main_process_input+0x292>
    case 'D':
        //retract_pin('4');
        printf("retract_pin(4)");
 8000920:	482e      	ldr	r0, [pc, #184]	@ (80009dc <main_process_input+0x2d4>)
 8000922:	f003 fe6f 	bl	8004604 <iprintf>
        break;
 8000926:	e038      	b.n	800099a <main_process_input+0x292>
    case 'E':
        //retract_pin('5');
        printf("retract_pin(5)");
 8000928:	482d      	ldr	r0, [pc, #180]	@ (80009e0 <main_process_input+0x2d8>)
 800092a:	f003 fe6b 	bl	8004604 <iprintf>
        break;
 800092e:	e034      	b.n	800099a <main_process_input+0x292>
    case 'F':
        //retract_pin('6');
        printf("retract_pin(6)");
 8000930:	482c      	ldr	r0, [pc, #176]	@ (80009e4 <main_process_input+0x2dc>)
 8000932:	f003 fe67 	bl	8004604 <iprintf>
        break;
 8000936:	e030      	b.n	800099a <main_process_input+0x292>
    case 'H':
        if (launcher.tubeCount = '8'){
 8000938:	4b22      	ldr	r3, [pc, #136]	@ (80009c4 <main_process_input+0x2bc>)
 800093a:	2238      	movs	r2, #56	@ 0x38
 800093c:	709a      	strb	r2, [r3, #2]
        	//retract_pin('7');
        	printf("retract_pin(7)");
 800093e:	482a      	ldr	r0, [pc, #168]	@ (80009e8 <main_process_input+0x2e0>)
 8000940:	f003 fe60 	bl	8004604 <iprintf>
        } else {
        	printf("Error, tube 7 not available\r\n");
        }
        break;
 8000944:	e029      	b.n	800099a <main_process_input+0x292>
    case 'I':
        if (launcher.tubeCount = '8'){
 8000946:	4b1f      	ldr	r3, [pc, #124]	@ (80009c4 <main_process_input+0x2bc>)
 8000948:	2238      	movs	r2, #56	@ 0x38
 800094a:	709a      	strb	r2, [r3, #2]
        	//retract_pin('8');
        	printf("retract_pin(8)");
 800094c:	4827      	ldr	r0, [pc, #156]	@ (80009ec <main_process_input+0x2e4>)
 800094e:	f003 fe59 	bl	8004604 <iprintf>
        } else {
        	printf("Error, tube 8 not available\r\n");
        }
        break;
 8000952:	e022      	b.n	800099a <main_process_input+0x292>
    case 'K':
        //calibrate_on();
        printf("calibrate_on()");
 8000954:	4826      	ldr	r0, [pc, #152]	@ (80009f0 <main_process_input+0x2e8>)
 8000956:	f003 fe55 	bl	8004604 <iprintf>
        break;
 800095a:	e01e      	b.n	800099a <main_process_input+0x292>
    case 'R':
        //reset_relay();
        printf("reset_relay()");
 800095c:	4825      	ldr	r0, [pc, #148]	@ (80009f4 <main_process_input+0x2ec>)
 800095e:	f003 fe51 	bl	8004604 <iprintf>
        break;
 8000962:	e01a      	b.n	800099a <main_process_input+0x292>
    case 'L':
        //calibration_resistor();
        printf("calibration_resistor()");
 8000964:	4824      	ldr	r0, [pc, #144]	@ (80009f8 <main_process_input+0x2f0>)
 8000966:	f003 fe4d 	bl	8004604 <iprintf>
        break;
 800096a:	e016      	b.n	800099a <main_process_input+0x292>
    case 'G':
        //unground_xbt();
        printf("unground_xbt()");
 800096c:	4823      	ldr	r0, [pc, #140]	@ (80009fc <main_process_input+0x2f4>)
 800096e:	f003 fe49 	bl	8004604 <iprintf>
        break;
 8000972:	e012      	b.n	800099a <main_process_input+0x292>
    case 'M':
        status_message();
 8000974:	f000 f96e 	bl	8000c54 <status_message>
        break;
 8000978:	e00f      	b.n	800099a <main_process_input+0x292>
    case '~':
        config_menu();
 800097a:	f000 fa01 	bl	8000d80 <config_menu>
        activeMenu = configMenu; // set configuration menu flag
 800097e:	4b20      	ldr	r3, [pc, #128]	@ (8000a00 <main_process_input+0x2f8>)
 8000980:	2201      	movs	r2, #1
 8000982:	701a      	strb	r2, [r3, #0]
        break;
 8000984:	e009      	b.n	800099a <main_process_input+0x292>
    case 's':
        print_serial_number();
 8000986:	f000 fa49 	bl	8000e1c <print_serial_number>
        printf("\n\r");
 800098a:	481e      	ldr	r0, [pc, #120]	@ (8000a04 <main_process_input+0x2fc>)
 800098c:	f003 fe3a 	bl	8004604 <iprintf>
        break;
 8000990:	e003      	b.n	800099a <main_process_input+0x292>
    default:
        printf("\r\n** Unrecognized command!!** \r\n");
 8000992:	481d      	ldr	r0, [pc, #116]	@ (8000a08 <main_process_input+0x300>)
 8000994:	f003 fea6 	bl	80046e4 <puts>
        break;
 8000998:	bf00      	nop
	}
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	080052f0 	.word	0x080052f0
 80009a8:	08005310 	.word	0x08005310
 80009ac:	08005348 	.word	0x08005348
 80009b0:	0800535c 	.word	0x0800535c
 80009b4:	08005370 	.word	0x08005370
 80009b8:	08005384 	.word	0x08005384
 80009bc:	08005398 	.word	0x08005398
 80009c0:	080053ac 	.word	0x080053ac
 80009c4:	20000000 	.word	0x20000000
 80009c8:	080053c0 	.word	0x080053c0
 80009cc:	080053d4 	.word	0x080053d4
 80009d0:	080053e8 	.word	0x080053e8
 80009d4:	080053f8 	.word	0x080053f8
 80009d8:	08005408 	.word	0x08005408
 80009dc:	08005418 	.word	0x08005418
 80009e0:	08005428 	.word	0x08005428
 80009e4:	08005438 	.word	0x08005438
 80009e8:	08005448 	.word	0x08005448
 80009ec:	08005458 	.word	0x08005458
 80009f0:	08005468 	.word	0x08005468
 80009f4:	08005478 	.word	0x08005478
 80009f8:	08005488 	.word	0x08005488
 80009fc:	080054a0 	.word	0x080054a0
 8000a00:	20000149 	.word	0x20000149
 8000a04:	080054b0 	.word	0x080054b0
 8000a08:	080054b4 	.word	0x080054b4

08000a0c <config_process_input>:

/* Process char received while in configuration menu */
void config_process_input(char option){
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]
    switch (option) {
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	3b31      	subs	r3, #49	@ 0x31
 8000a1a:	2b20      	cmp	r3, #32
 8000a1c:	f200 80e9 	bhi.w	8000bf2 <config_process_input+0x1e6>
 8000a20:	a201      	add	r2, pc, #4	@ (adr r2, 8000a28 <config_process_input+0x1c>)
 8000a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a26:	bf00      	nop
 8000a28:	08000ac5 	.word	0x08000ac5
 8000a2c:	08000bf3 	.word	0x08000bf3
 8000a30:	08000bf3 	.word	0x08000bf3
 8000a34:	08000bf3 	.word	0x08000bf3
 8000a38:	08000bf3 	.word	0x08000bf3
 8000a3c:	08000bf3 	.word	0x08000bf3
 8000a40:	08000bf3 	.word	0x08000bf3
 8000a44:	08000bf3 	.word	0x08000bf3
 8000a48:	08000bf3 	.word	0x08000bf3
 8000a4c:	08000bf3 	.word	0x08000bf3
 8000a50:	08000bf3 	.word	0x08000bf3
 8000a54:	08000bf3 	.word	0x08000bf3
 8000a58:	08000bf3 	.word	0x08000bf3
 8000a5c:	08000bf3 	.word	0x08000bf3
 8000a60:	08000bf3 	.word	0x08000bf3
 8000a64:	08000bf3 	.word	0x08000bf3
 8000a68:	08000bf3 	.word	0x08000bf3
 8000a6c:	08000bf3 	.word	0x08000bf3
 8000a70:	08000bf3 	.word	0x08000bf3
 8000a74:	08000bf3 	.word	0x08000bf3
 8000a78:	08000bf3 	.word	0x08000bf3
 8000a7c:	08000bf3 	.word	0x08000bf3
 8000a80:	08000be5 	.word	0x08000be5
 8000a84:	08000bf3 	.word	0x08000bf3
 8000a88:	08000bf3 	.word	0x08000bf3
 8000a8c:	08000bd5 	.word	0x08000bd5
 8000a90:	08000bf3 	.word	0x08000bf3
 8000a94:	08000bf3 	.word	0x08000bf3
 8000a98:	08000abf 	.word	0x08000abf
 8000a9c:	08000bdd 	.word	0x08000bdd
 8000aa0:	08000bf3 	.word	0x08000bf3
 8000aa4:	08000bf3 	.word	0x08000bf3
 8000aa8:	08000aad 	.word	0x08000aad
        case 'Q':
            printf("\n\rLeaving Auto launcher configuration menu\n\r");
 8000aac:	4855      	ldr	r0, [pc, #340]	@ (8000c04 <config_process_input+0x1f8>)
 8000aae:	f003 fda9 	bl	8004604 <iprintf>
            activeMenu = mainMenu; // set active menu flag to main menu
 8000ab2:	4b55      	ldr	r3, [pc, #340]	@ (8000c08 <config_process_input+0x1fc>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	701a      	strb	r2, [r3, #0]
            status_message();
 8000ab8:	f000 f8cc 	bl	8000c54 <status_message>
            break;
 8000abc:	e09d      	b.n	8000bfa <config_process_input+0x1ee>
        case 'M':
            config_menu();
 8000abe:	f000 f95f 	bl	8000d80 <config_menu>
            break;
 8000ac2:	e09a      	b.n	8000bfa <config_process_input+0x1ee>
        case '1':
        	activeMenu = settingParams; // set active menu so all uart RX chars are processed here
 8000ac4:	4b50      	ldr	r3, [pc, #320]	@ (8000c08 <config_process_input+0x1fc>)
 8000ac6:	2202      	movs	r2, #2
 8000ac8:	701a      	strb	r2, [r3, #0]
            printf("\n\rEnter AL tube count [6] or [8]: ");
 8000aca:	4850      	ldr	r0, [pc, #320]	@ (8000c0c <config_process_input+0x200>)
 8000acc:	f003 fd9a 	bl	8004604 <iprintf>
            while(1){
            	if(rxStatus == active){
 8000ad0:	4b4f      	ldr	r3, [pc, #316]	@ (8000c10 <config_process_input+0x204>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d1fb      	bne.n	8000ad0 <config_process_input+0xc4>
            		if(rxChar == '6' || rxChar == '8'){
 8000ad8:	4b4e      	ldr	r3, [pc, #312]	@ (8000c14 <config_process_input+0x208>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b36      	cmp	r3, #54	@ 0x36
 8000ade:	d003      	beq.n	8000ae8 <config_process_input+0xdc>
 8000ae0:	4b4c      	ldr	r3, [pc, #304]	@ (8000c14 <config_process_input+0x208>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b38      	cmp	r3, #56	@ 0x38
 8000ae6:	d109      	bne.n	8000afc <config_process_input+0xf0>
            			launcher.tubeCount = rxChar;
 8000ae8:	4b4a      	ldr	r3, [pc, #296]	@ (8000c14 <config_process_input+0x208>)
 8000aea:	781a      	ldrb	r2, [r3, #0]
 8000aec:	4b4a      	ldr	r3, [pc, #296]	@ (8000c18 <config_process_input+0x20c>)
 8000aee:	709a      	strb	r2, [r3, #2]
            			break;
 8000af0:	bf00      	nop
            }

            //numOfTubes = currentChar;
            //launcherLength = numOfTubes;

            if(launcher.tubeCount == '8'){
 8000af2:	4b49      	ldr	r3, [pc, #292]	@ (8000c18 <config_process_input+0x20c>)
 8000af4:	789b      	ldrb	r3, [r3, #2]
 8000af6:	2b38      	cmp	r3, #56	@ 0x38
 8000af8:	d128      	bne.n	8000b4c <config_process_input+0x140>
 8000afa:	e009      	b.n	8000b10 <config_process_input+0x104>
            			printf("\r\nError, Enter 6 or 8 !\r\n");
 8000afc:	4847      	ldr	r0, [pc, #284]	@ (8000c1c <config_process_input+0x210>)
 8000afe:	f003 fdf1 	bl	80046e4 <puts>
            			printf("\n\rEnter AL tube count [6] or [8]: ");
 8000b02:	4842      	ldr	r0, [pc, #264]	@ (8000c0c <config_process_input+0x200>)
 8000b04:	f003 fd7e 	bl	8004604 <iprintf>
            		rxStatus = idle;
 8000b08:	4b41      	ldr	r3, [pc, #260]	@ (8000c10 <config_process_input+0x204>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	701a      	strb	r2, [r3, #0]
            	if(rxStatus == active){
 8000b0e:	e7df      	b.n	8000ad0 <config_process_input+0xc4>
                printf("Enter launcher type, [X] extended or [R] regular: ");
 8000b10:	4843      	ldr	r0, [pc, #268]	@ (8000c20 <config_process_input+0x214>)
 8000b12:	f003 fd77 	bl	8004604 <iprintf>
                while(1){
                	if(rxStatus == active){
 8000b16:	4b3e      	ldr	r3, [pc, #248]	@ (8000c10 <config_process_input+0x204>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d1fb      	bne.n	8000b16 <config_process_input+0x10a>
                		if(rxChar == 'X' || rxChar == 'R'){
 8000b1e:	4b3d      	ldr	r3, [pc, #244]	@ (8000c14 <config_process_input+0x208>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	2b58      	cmp	r3, #88	@ 0x58
 8000b24:	d003      	beq.n	8000b2e <config_process_input+0x122>
 8000b26:	4b3b      	ldr	r3, [pc, #236]	@ (8000c14 <config_process_input+0x208>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	2b52      	cmp	r3, #82	@ 0x52
 8000b2c:	d104      	bne.n	8000b38 <config_process_input+0x12c>
                			launcher.type = rxChar;
 8000b2e:	4b39      	ldr	r3, [pc, #228]	@ (8000c14 <config_process_input+0x208>)
 8000b30:	781a      	ldrb	r2, [r3, #0]
 8000b32:	4b39      	ldr	r3, [pc, #228]	@ (8000c18 <config_process_input+0x20c>)
 8000b34:	70da      	strb	r2, [r3, #3]
                			break;
 8000b36:	e009      	b.n	8000b4c <config_process_input+0x140>
                		} else {
                			printf("\r\nError, Enter X or R !\r\n");
 8000b38:	483a      	ldr	r0, [pc, #232]	@ (8000c24 <config_process_input+0x218>)
 8000b3a:	f003 fdd3 	bl	80046e4 <puts>
                			printf("Enter launcher type, [X] extended or [R] regular: ");
 8000b3e:	4838      	ldr	r0, [pc, #224]	@ (8000c20 <config_process_input+0x214>)
 8000b40:	f003 fd60 	bl	8004604 <iprintf>
                		}
                		rxStatus = idle;
 8000b44:	4b32      	ldr	r3, [pc, #200]	@ (8000c10 <config_process_input+0x204>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	701a      	strb	r2, [r3, #0]
                	if(rxStatus == active){
 8000b4a:	e7e4      	b.n	8000b16 <config_process_input+0x10a>

            }
            //launcherLength = currentChar;


    		printf("Enter a two-digit autolauncher serial number [0-99]: ");
 8000b4c:	4836      	ldr	r0, [pc, #216]	@ (8000c28 <config_process_input+0x21c>)
 8000b4e:	f003 fd59 	bl	8004604 <iprintf>
            //currentChar = '\0';
            //printf("The number part of the serial number has two digits\n\r");
            //printf("Enter a number from \"0\" to \"9\" for the first digit\n\r");
    		for(uint8_t i = 0; i < 2; i++){
 8000b52:	2300      	movs	r3, #0
 8000b54:	73fb      	strb	r3, [r7, #15]
 8000b56:	e025      	b.n	8000ba4 <config_process_input+0x198>
    			while(1){
					if(rxStatus == active){
 8000b58:	4b2d      	ldr	r3, [pc, #180]	@ (8000c10 <config_process_input+0x204>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d1fb      	bne.n	8000b58 <config_process_input+0x14c>
						if(isdigit(rxChar) > 0){ // check it's a number to store it
 8000b60:	4b2c      	ldr	r3, [pc, #176]	@ (8000c14 <config_process_input+0x208>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	3b30      	subs	r3, #48	@ 0x30
 8000b66:	2b09      	cmp	r3, #9
 8000b68:	d805      	bhi.n	8000b76 <config_process_input+0x16a>
							launcher.serialNumber[i] = rxChar;
 8000b6a:	7bfb      	ldrb	r3, [r7, #15]
 8000b6c:	4a29      	ldr	r2, [pc, #164]	@ (8000c14 <config_process_input+0x208>)
 8000b6e:	7811      	ldrb	r1, [r2, #0]
 8000b70:	4a29      	ldr	r2, [pc, #164]	@ (8000c18 <config_process_input+0x20c>)
 8000b72:	54d1      	strb	r1, [r2, r3]
							break;
 8000b74:	e013      	b.n	8000b9e <config_process_input+0x192>
						} else {
							printf("Enter only numbers!\r\n");
 8000b76:	482d      	ldr	r0, [pc, #180]	@ (8000c2c <config_process_input+0x220>)
 8000b78:	f003 fdb4 	bl	80046e4 <puts>
							if(i == 1){
 8000b7c:	7bfb      	ldrb	r3, [r7, #15]
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d106      	bne.n	8000b90 <config_process_input+0x184>
								printf("Enter a two-digit autolauncher serial number [0-99]: %c", launcher.serialNumber[0]);
 8000b82:	4b25      	ldr	r3, [pc, #148]	@ (8000c18 <config_process_input+0x20c>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	4619      	mov	r1, r3
 8000b88:	4829      	ldr	r0, [pc, #164]	@ (8000c30 <config_process_input+0x224>)
 8000b8a:	f003 fd3b 	bl	8004604 <iprintf>
 8000b8e:	e002      	b.n	8000b96 <config_process_input+0x18a>
							} else { // if i = 0
								printf("Enter a two-digit autolauncher serial number [0-99]: ");
 8000b90:	4825      	ldr	r0, [pc, #148]	@ (8000c28 <config_process_input+0x21c>)
 8000b92:	f003 fd37 	bl	8004604 <iprintf>
							}
						}
						rxStatus = idle;
 8000b96:	4b1e      	ldr	r3, [pc, #120]	@ (8000c10 <config_process_input+0x204>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	701a      	strb	r2, [r3, #0]
					if(rxStatus == active){
 8000b9c:	e7dc      	b.n	8000b58 <config_process_input+0x14c>
    		for(uint8_t i = 0; i < 2; i++){
 8000b9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	73fb      	strb	r3, [r7, #15]
 8000ba4:	7bfb      	ldrb	r3, [r7, #15]
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d9d6      	bls.n	8000b58 <config_process_input+0x14c>
//            while (!is_a_number(currentChar)) {
//                /*block until a number is received*/
//            }
//            num2 = currentChar;
//            currentChar = '\0';
            eeprom.configured = '|';
 8000baa:	4b22      	ldr	r3, [pc, #136]	@ (8000c34 <config_process_input+0x228>)
 8000bac:	227c      	movs	r2, #124	@ 0x7c
 8000bae:	711a      	strb	r2, [r3, #4]
            //numOfSavedTubes = numOfTubes;
            printf("\r\nNew autolauncher configuration: Tubes: %c | Type: %c | Serial: %s\r\n", launcher.tubeCount, launcher.type);
 8000bb0:	4b19      	ldr	r3, [pc, #100]	@ (8000c18 <config_process_input+0x20c>)
 8000bb2:	789b      	ldrb	r3, [r3, #2]
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4b18      	ldr	r3, [pc, #96]	@ (8000c18 <config_process_input+0x20c>)
 8000bb8:	78db      	ldrb	r3, [r3, #3]
 8000bba:	461a      	mov	r2, r3
 8000bbc:	481e      	ldr	r0, [pc, #120]	@ (8000c38 <config_process_input+0x22c>)
 8000bbe:	f003 fd21 	bl	8004604 <iprintf>
            // store parameters in eeprom
            printf("Settings saved!\r\n");
 8000bc2:	481e      	ldr	r0, [pc, #120]	@ (8000c3c <config_process_input+0x230>)
 8000bc4:	f003 fd8e 	bl	80046e4 <puts>
//            eeprom_write(0x01, launcherLength);
//            eeprom_write(0x02, num1);
//            eeprom_write(0x03, num2);
//            eeprom_write(0x04, configed);

            activeMenu = configMenu;
 8000bc8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c08 <config_process_input+0x1fc>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	701a      	strb	r2, [r3, #0]
            config_menu();
 8000bce:	f000 f8d7 	bl	8000d80 <config_menu>
            break;
 8000bd2:	e012      	b.n	8000bfa <config_process_input+0x1ee>
        case 'J':
            //extend_all_pins();
        	printf("extend_all_pins()\r\n");
 8000bd4:	481a      	ldr	r0, [pc, #104]	@ (8000c40 <config_process_input+0x234>)
 8000bd6:	f003 fd85 	bl	80046e4 <puts>
            break;
 8000bda:	e00e      	b.n	8000bfa <config_process_input+0x1ee>
        case 'N':
            //retract_all_pins();
        	printf("retract_all_pins()\r\n");
 8000bdc:	4819      	ldr	r0, [pc, #100]	@ (8000c44 <config_process_input+0x238>)
 8000bde:	f003 fd81 	bl	80046e4 <puts>
            break;
 8000be2:	e00a      	b.n	8000bfa <config_process_input+0x1ee>
        case 'G':
            printf("\n\rSend the \"@\" symbol repeatedly to exit grease pins mode\n\r");
 8000be4:	4818      	ldr	r0, [pc, #96]	@ (8000c48 <config_process_input+0x23c>)
 8000be6:	f003 fd0d 	bl	8004604 <iprintf>
            //grease_pins();
            printf("grease_pins();");
 8000bea:	4818      	ldr	r0, [pc, #96]	@ (8000c4c <config_process_input+0x240>)
 8000bec:	f003 fd0a 	bl	8004604 <iprintf>
            break;
 8000bf0:	e003      	b.n	8000bfa <config_process_input+0x1ee>
        default:
        	printf("\r\n** Unrecognized command!!** \r\n");
 8000bf2:	4817      	ldr	r0, [pc, #92]	@ (8000c50 <config_process_input+0x244>)
 8000bf4:	f003 fd76 	bl	80046e4 <puts>
            break;
 8000bf8:	bf00      	nop
    }
}
 8000bfa:	bf00      	nop
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	080054d4 	.word	0x080054d4
 8000c08:	20000149 	.word	0x20000149
 8000c0c:	08005504 	.word	0x08005504
 8000c10:	20000148 	.word	0x20000148
 8000c14:	2000014d 	.word	0x2000014d
 8000c18:	20000000 	.word	0x20000000
 8000c1c:	08005528 	.word	0x08005528
 8000c20:	08005544 	.word	0x08005544
 8000c24:	08005578 	.word	0x08005578
 8000c28:	08005594 	.word	0x08005594
 8000c2c:	080055cc 	.word	0x080055cc
 8000c30:	080055e4 	.word	0x080055e4
 8000c34:	20000008 	.word	0x20000008
 8000c38:	0800561c 	.word	0x0800561c
 8000c3c:	08005664 	.word	0x08005664
 8000c40:	08005678 	.word	0x08005678
 8000c44:	0800568c 	.word	0x0800568c
 8000c48:	080056a0 	.word	0x080056a0
 8000c4c:	080056dc 	.word	0x080056dc
 8000c50:	080054b4 	.word	0x080054b4

08000c54 <status_message>:


void status_message() {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
    printf("\r\n\n\r");
 8000c58:	4831      	ldr	r0, [pc, #196]	@ (8000d20 <status_message+0xcc>)
 8000c5a:	f003 fcd3 	bl	8004604 <iprintf>
    printf("=========================================\n\r");
 8000c5e:	4831      	ldr	r0, [pc, #196]	@ (8000d24 <status_message+0xd0>)
 8000c60:	f003 fcd0 	bl	8004604 <iprintf>
    printf("|  AOML auto launcher board version 3.0 |\n\r");
 8000c64:	4830      	ldr	r0, [pc, #192]	@ (8000d28 <status_message+0xd4>)
 8000c66:	f003 fccd 	bl	8004604 <iprintf>
    printf("|  Firmware version 2024.mm.dd.hhmm     |\n\r");
 8000c6a:	4830      	ldr	r0, [pc, #192]	@ (8000d2c <status_message+0xd8>)
 8000c6c:	f003 fcca 	bl	8004604 <iprintf>
    printf("=========================================\n\r");
 8000c70:	482c      	ldr	r0, [pc, #176]	@ (8000d24 <status_message+0xd0>)
 8000c72:	f003 fcc7 	bl	8004604 <iprintf>
    printf("|    Model #ALV3.0      S/N ");
 8000c76:	482e      	ldr	r0, [pc, #184]	@ (8000d30 <status_message+0xdc>)
 8000c78:	f003 fcc4 	bl	8004604 <iprintf>
    print_serial_number();
 8000c7c:	f000 f8ce 	bl	8000e1c <print_serial_number>
    printf("       |\n\r");
 8000c80:	482c      	ldr	r0, [pc, #176]	@ (8000d34 <status_message+0xe0>)
 8000c82:	f003 fcbf 	bl	8004604 <iprintf>
    printf("=========================================\n\r");
 8000c86:	4827      	ldr	r0, [pc, #156]	@ (8000d24 <status_message+0xd0>)
 8000c88:	f003 fcbc 	bl	8004604 <iprintf>
    printf("|               COMMANDS                |\n\r");
 8000c8c:	482a      	ldr	r0, [pc, #168]	@ (8000d38 <status_message+0xe4>)
 8000c8e:	f003 fcb9 	bl	8004604 <iprintf>
    if (eeprom.configured != '|') {
 8000c92:	4b2a      	ldr	r3, [pc, #168]	@ (8000d3c <status_message+0xe8>)
 8000c94:	791b      	ldrb	r3, [r3, #4]
 8000c96:	2b7c      	cmp	r3, #124	@ 0x7c
 8000c98:	d002      	beq.n	8000ca0 <status_message+0x4c>
        printf("| ERROR, NO SERIAL NUMBER ASSIGNED  |\n\r");
 8000c9a:	4829      	ldr	r0, [pc, #164]	@ (8000d40 <status_message+0xec>)
 8000c9c:	f003 fcb2 	bl	8004604 <iprintf>
    }
    printf("=========================================\n\r");
 8000ca0:	4820      	ldr	r0, [pc, #128]	@ (8000d24 <status_message+0xd0>)
 8000ca2:	f003 fcaf 	bl	8004604 <iprintf>
    printf("| Connect  cal Sim BT  0                |\n\r");
 8000ca6:	4827      	ldr	r0, [pc, #156]	@ (8000d44 <status_message+0xf0>)
 8000ca8:	f003 fcac 	bl	8004604 <iprintf>
    if (launcher.tubeCount == '6') {
 8000cac:	4b26      	ldr	r3, [pc, #152]	@ (8000d48 <status_message+0xf4>)
 8000cae:	789b      	ldrb	r3, [r3, #2]
 8000cb0:	2b36      	cmp	r3, #54	@ 0x36
 8000cb2:	d109      	bne.n	8000cc8 <status_message+0x74>
        printf("| Connect  XBT 1-6     1,2,3,4,5,6      |\n\r");
 8000cb4:	4825      	ldr	r0, [pc, #148]	@ (8000d4c <status_message+0xf8>)
 8000cb6:	f003 fca5 	bl	8004604 <iprintf>
        printf("| Extend   Pin 1-6     U,V,W,X,Y,Z      |\n\r");
 8000cba:	4825      	ldr	r0, [pc, #148]	@ (8000d50 <status_message+0xfc>)
 8000cbc:	f003 fca2 	bl	8004604 <iprintf>
        printf("| Retract  Pin 1-6     A,B,C,D,E,F      |\n\r");
 8000cc0:	4824      	ldr	r0, [pc, #144]	@ (8000d54 <status_message+0x100>)
 8000cc2:	f003 fc9f 	bl	8004604 <iprintf>
 8000cc6:	e010      	b.n	8000cea <status_message+0x96>
    } else if (launcher.tubeCount == '8') {
 8000cc8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d48 <status_message+0xf4>)
 8000cca:	789b      	ldrb	r3, [r3, #2]
 8000ccc:	2b38      	cmp	r3, #56	@ 0x38
 8000cce:	d109      	bne.n	8000ce4 <status_message+0x90>

        printf("| Connect  XBT 1-8     1,2,3,4,5,6,7,8  |\n\r");
 8000cd0:	4821      	ldr	r0, [pc, #132]	@ (8000d58 <status_message+0x104>)
 8000cd2:	f003 fc97 	bl	8004604 <iprintf>
        printf("| Extend   Pin 1-8     U,V,W,X,Y,Z,S,T  |\n\r");
 8000cd6:	4821      	ldr	r0, [pc, #132]	@ (8000d5c <status_message+0x108>)
 8000cd8:	f003 fc94 	bl	8004604 <iprintf>
        printf("| Retract  Pin 1-8     A,B,C,D,E,F,H,I  |\n\r");
 8000cdc:	4820      	ldr	r0, [pc, #128]	@ (8000d60 <status_message+0x10c>)
 8000cde:	f003 fc91 	bl	8004604 <iprintf>
 8000ce2:	e002      	b.n	8000cea <status_message+0x96>
    } else {
    	printf("| ERROR, NO TUBE COUNT!!     	        |\n\r");
 8000ce4:	481f      	ldr	r0, [pc, #124]	@ (8000d64 <status_message+0x110>)
 8000ce6:	f003 fc8d 	bl	8004604 <iprintf>
    }
    printf("| Unground   XBT       G                |\n\r");
 8000cea:	481f      	ldr	r0, [pc, #124]	@ (8000d68 <status_message+0x114>)
 8000cec:	f003 fc8a 	bl	8004604 <iprintf>
    printf("| Calibrate on         K                |\n\r");
 8000cf0:	481e      	ldr	r0, [pc, #120]	@ (8000d6c <status_message+0x118>)
 8000cf2:	f003 fc87 	bl	8004604 <iprintf>
    printf("| Cal resistor         L                |\n\r");
 8000cf6:	481e      	ldr	r0, [pc, #120]	@ (8000d70 <status_message+0x11c>)
 8000cf8:	f003 fc84 	bl	8004604 <iprintf>
    printf("| Reset Relays         R                |\n\r");
 8000cfc:	481d      	ldr	r0, [pc, #116]	@ (8000d74 <status_message+0x120>)
 8000cfe:	f003 fc81 	bl	8004604 <iprintf>
    printf("| Print serial number  s                |\n\r");
 8000d02:	481d      	ldr	r0, [pc, #116]	@ (8000d78 <status_message+0x124>)
 8000d04:	f003 fc7e 	bl	8004604 <iprintf>
    printf("| This Menu            M                |\n\r");
 8000d08:	481c      	ldr	r0, [pc, #112]	@ (8000d7c <status_message+0x128>)
 8000d0a:	f003 fc7b 	bl	8004604 <iprintf>
    printf("=========================================\n\r");
 8000d0e:	4805      	ldr	r0, [pc, #20]	@ (8000d24 <status_message+0xd0>)
 8000d10:	f003 fc78 	bl	8004604 <iprintf>
    printf("\r\n\n\r");
 8000d14:	4802      	ldr	r0, [pc, #8]	@ (8000d20 <status_message+0xcc>)
 8000d16:	f003 fc75 	bl	8004604 <iprintf>
}//end status_message
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	080056ec 	.word	0x080056ec
 8000d24:	080056f4 	.word	0x080056f4
 8000d28:	08005720 	.word	0x08005720
 8000d2c:	0800574c 	.word	0x0800574c
 8000d30:	08005778 	.word	0x08005778
 8000d34:	08005798 	.word	0x08005798
 8000d38:	080057a4 	.word	0x080057a4
 8000d3c:	20000008 	.word	0x20000008
 8000d40:	080057d0 	.word	0x080057d0
 8000d44:	080057f8 	.word	0x080057f8
 8000d48:	20000000 	.word	0x20000000
 8000d4c:	08005824 	.word	0x08005824
 8000d50:	08005850 	.word	0x08005850
 8000d54:	0800587c 	.word	0x0800587c
 8000d58:	080058a8 	.word	0x080058a8
 8000d5c:	080058d4 	.word	0x080058d4
 8000d60:	08005900 	.word	0x08005900
 8000d64:	0800592c 	.word	0x0800592c
 8000d68:	08005958 	.word	0x08005958
 8000d6c:	08005984 	.word	0x08005984
 8000d70:	080059b0 	.word	0x080059b0
 8000d74:	080059dc 	.word	0x080059dc
 8000d78:	08005a08 	.word	0x08005a08
 8000d7c:	08005a34 	.word	0x08005a34

08000d80 <config_menu>:


void config_menu() {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
    printf("\n\r");
 8000d84:	4819      	ldr	r0, [pc, #100]	@ (8000dec <config_menu+0x6c>)
 8000d86:	f003 fc3d 	bl	8004604 <iprintf>
    printf("=========================================\n\r");
 8000d8a:	4819      	ldr	r0, [pc, #100]	@ (8000df0 <config_menu+0x70>)
 8000d8c:	f003 fc3a 	bl	8004604 <iprintf>
    printf("|  AOML auto launcher config menu       |\n\r");
 8000d90:	4818      	ldr	r0, [pc, #96]	@ (8000df4 <config_menu+0x74>)
 8000d92:	f003 fc37 	bl	8004604 <iprintf>
    printf("=========================================\n\r");
 8000d96:	4816      	ldr	r0, [pc, #88]	@ (8000df0 <config_menu+0x70>)
 8000d98:	f003 fc34 	bl	8004604 <iprintf>
    printf("|    Model #ALV2        S/N ");
 8000d9c:	4816      	ldr	r0, [pc, #88]	@ (8000df8 <config_menu+0x78>)
 8000d9e:	f003 fc31 	bl	8004604 <iprintf>
    print_serial_number();
 8000da2:	f000 f83b 	bl	8000e1c <print_serial_number>
    printf("       |\n\r");
 8000da6:	4815      	ldr	r0, [pc, #84]	@ (8000dfc <config_menu+0x7c>)
 8000da8:	f003 fc2c 	bl	8004604 <iprintf>
    printf("=========================================\n\r");
 8000dac:	4810      	ldr	r0, [pc, #64]	@ (8000df0 <config_menu+0x70>)
 8000dae:	f003 fc29 	bl	8004604 <iprintf>
    printf("|               COMMANDS                |\n\r");
 8000db2:	4813      	ldr	r0, [pc, #76]	@ (8000e00 <config_menu+0x80>)
 8000db4:	f003 fc26 	bl	8004604 <iprintf>
    printf("=========================================\n\r");
 8000db8:	480d      	ldr	r0, [pc, #52]	@ (8000df0 <config_menu+0x70>)
 8000dba:	f003 fc23 	bl	8004604 <iprintf>
    printf("| Set tubes & S/N      1                |\n\r");
 8000dbe:	4811      	ldr	r0, [pc, #68]	@ (8000e04 <config_menu+0x84>)
 8000dc0:	f003 fc20 	bl	8004604 <iprintf>
    printf("| This Menu            M                |\n\r");
 8000dc4:	4810      	ldr	r0, [pc, #64]	@ (8000e08 <config_menu+0x88>)
 8000dc6:	f003 fc1d 	bl	8004604 <iprintf>
    printf("| Extend all   pins    J                |\n\r");
 8000dca:	4810      	ldr	r0, [pc, #64]	@ (8000e0c <config_menu+0x8c>)
 8000dcc:	f003 fc1a 	bl	8004604 <iprintf>
    printf("| Retract all  pins    N                |\n\r");
 8000dd0:	480f      	ldr	r0, [pc, #60]	@ (8000e10 <config_menu+0x90>)
 8000dd2:	f003 fc17 	bl	8004604 <iprintf>
    printf("| Grease pins  mode    G                |\n\r");
 8000dd6:	480f      	ldr	r0, [pc, #60]	@ (8000e14 <config_menu+0x94>)
 8000dd8:	f003 fc14 	bl	8004604 <iprintf>
    printf("| Quit config menu     Q                |\n\r");
 8000ddc:	480e      	ldr	r0, [pc, #56]	@ (8000e18 <config_menu+0x98>)
 8000dde:	f003 fc11 	bl	8004604 <iprintf>
    printf("=========================================\n\r");
 8000de2:	4803      	ldr	r0, [pc, #12]	@ (8000df0 <config_menu+0x70>)
 8000de4:	f003 fc0e 	bl	8004604 <iprintf>
}//end status_message
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	080054b0 	.word	0x080054b0
 8000df0:	080056f4 	.word	0x080056f4
 8000df4:	08005a60 	.word	0x08005a60
 8000df8:	08005a8c 	.word	0x08005a8c
 8000dfc:	08005798 	.word	0x08005798
 8000e00:	080057a4 	.word	0x080057a4
 8000e04:	08005aac 	.word	0x08005aac
 8000e08:	08005a34 	.word	0x08005a34
 8000e0c:	08005ad8 	.word	0x08005ad8
 8000e10:	08005b04 	.word	0x08005b04
 8000e14:	08005b30 	.word	0x08005b30
 8000e18:	08005b5c 	.word	0x08005b5c

08000e1c <print_serial_number>:

void print_serial_number(void){
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
	//printf( "AL%c%s", launcher.type[0], launcher.serialNumber);
    if(eeprom.configured == '|'){
 8000e20:	4b0c      	ldr	r3, [pc, #48]	@ (8000e54 <print_serial_number+0x38>)
 8000e22:	791b      	ldrb	r3, [r3, #4]
 8000e24:	2b7c      	cmp	r3, #124	@ 0x7c
 8000e26:	d107      	bne.n	8000e38 <print_serial_number+0x1c>
    	printf( "AL%c%s", launcher.type, launcher.serialNumber);
 8000e28:	4b0b      	ldr	r3, [pc, #44]	@ (8000e58 <print_serial_number+0x3c>)
 8000e2a:	78db      	ldrb	r3, [r3, #3]
 8000e2c:	4a0a      	ldr	r2, [pc, #40]	@ (8000e58 <print_serial_number+0x3c>)
 8000e2e:	4619      	mov	r1, r3
 8000e30:	480a      	ldr	r0, [pc, #40]	@ (8000e5c <print_serial_number+0x40>)
 8000e32:	f003 fbe7 	bl	8004604 <iprintf>
        if (launcher.tubeCount == '6')
            printf("AL6XX");
        else
            printf("ALRXX");
    }
}
 8000e36:	e00a      	b.n	8000e4e <print_serial_number+0x32>
        if (launcher.tubeCount == '6')
 8000e38:	4b07      	ldr	r3, [pc, #28]	@ (8000e58 <print_serial_number+0x3c>)
 8000e3a:	789b      	ldrb	r3, [r3, #2]
 8000e3c:	2b36      	cmp	r3, #54	@ 0x36
 8000e3e:	d103      	bne.n	8000e48 <print_serial_number+0x2c>
            printf("AL6XX");
 8000e40:	4807      	ldr	r0, [pc, #28]	@ (8000e60 <print_serial_number+0x44>)
 8000e42:	f003 fbdf 	bl	8004604 <iprintf>
}
 8000e46:	e002      	b.n	8000e4e <print_serial_number+0x32>
            printf("ALRXX");
 8000e48:	4806      	ldr	r0, [pc, #24]	@ (8000e64 <print_serial_number+0x48>)
 8000e4a:	f003 fbdb 	bl	8004604 <iprintf>
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000008 	.word	0x20000008
 8000e58:	20000000 	.word	0x20000000
 8000e5c:	08005b88 	.word	0x08005b88
 8000e60:	08005b90 	.word	0x08005b90
 8000e64:	08005b98 	.word	0x08005b98

08000e68 <relay_init>:
		return 1;
	}
}


void relay_init(void){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
	drive_relay(RELAY_RESET_1_GPIO_Port, RELAY_RESET_1_Pin, 10);  // RESET relay k1, k2, k3, k4, SSR1, SSR2, SSR3, SSR4
 8000e6c:	220a      	movs	r2, #10
 8000e6e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e72:	4808      	ldr	r0, [pc, #32]	@ (8000e94 <relay_init+0x2c>)
 8000e74:	f000 f812 	bl	8000e9c <drive_relay>
	drive_relay(RELAY_RESET_2_GPIO_Port, RELAY_RESET_2_Pin, 10); // RESET relay k5, k6, k7, k8, SSR5, SSR6, SSR7, SSR8
 8000e78:	220a      	movs	r2, #10
 8000e7a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e7e:	4806      	ldr	r0, [pc, #24]	@ (8000e98 <relay_init+0x30>)
 8000e80:	f000 f80c 	bl	8000e9c <drive_relay>
	drive_relay(RELAY_RESET_3_GPIO_Port, RELAY_RESET_3_Pin, 10); // RESET relay k9, k10, k11, k12 (GND, calibration and continuity circuit)
 8000e84:	220a      	movs	r2, #10
 8000e86:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e8a:	4803      	ldr	r0, [pc, #12]	@ (8000e98 <relay_init+0x30>)
 8000e8c:	f000 f806 	bl	8000e9c <drive_relay>

}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40010c00 	.word	0x40010c00
 8000e98:	40011000 	.word	0x40011000

08000e9c <drive_relay>:


void drive_relay(GPIO_TypeDef * relayPort, uint16_t relayPin, uint8_t onTime){
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	807b      	strh	r3, [r7, #2]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	707b      	strb	r3, [r7, #1]
	// SET relay k
	HAL_GPIO_WritePin(relayPort, relayPin, SET); // set
 8000eac:	887b      	ldrh	r3, [r7, #2]
 8000eae:	2201      	movs	r2, #1
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f001 f8e6 	bl	8002084 <HAL_GPIO_WritePin>
	HAL_Delay(onTime); // time coil is driven in ms
 8000eb8:	787b      	ldrb	r3, [r7, #1]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 fb68 	bl	8001590 <HAL_Delay>
	HAL_GPIO_WritePin(relayPort, relayPin, RESET); // release
 8000ec0:	887b      	ldrh	r3, [r7, #2]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f001 f8dc 	bl	8002084 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8000ecc:	2002      	movs	r0, #2
 8000ece:	f000 fb5f 	bl	8001590 <HAL_Delay>
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <motor_init>:


void motor_init(void){
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(ENABLE_M1_GPIO_Port, ENABLE_M1_Pin, RESET); // start disabled
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2104      	movs	r1, #4
 8000ee4:	4813      	ldr	r0, [pc, #76]	@ (8000f34 <motor_init+0x58>)
 8000ee6:	f001 f8cd 	bl	8002084 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M2_GPIO_Port, ENABLE_M2_Pin, RESET); // start disabled
 8000eea:	2200      	movs	r2, #0
 8000eec:	2108      	movs	r1, #8
 8000eee:	4811      	ldr	r0, [pc, #68]	@ (8000f34 <motor_init+0x58>)
 8000ef0:	f001 f8c8 	bl	8002084 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M3_GPIO_Port, ENABLE_M3_Pin, RESET); // start disabled
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	480f      	ldr	r0, [pc, #60]	@ (8000f38 <motor_init+0x5c>)
 8000efa:	f001 f8c3 	bl	8002084 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M4_GPIO_Port, ENABLE_M4_Pin, RESET); // start disabled
 8000efe:	2200      	movs	r2, #0
 8000f00:	2102      	movs	r1, #2
 8000f02:	480d      	ldr	r0, [pc, #52]	@ (8000f38 <motor_init+0x5c>)
 8000f04:	f001 f8be 	bl	8002084 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M5_GPIO_Port, ENABLE_M5_Pin, RESET); // start disabled
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2110      	movs	r1, #16
 8000f0c:	480a      	ldr	r0, [pc, #40]	@ (8000f38 <motor_init+0x5c>)
 8000f0e:	f001 f8b9 	bl	8002084 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M6_GPIO_Port, ENABLE_M6_Pin, RESET); // start disabled
 8000f12:	2200      	movs	r2, #0
 8000f14:	2120      	movs	r1, #32
 8000f16:	4808      	ldr	r0, [pc, #32]	@ (8000f38 <motor_init+0x5c>)
 8000f18:	f001 f8b4 	bl	8002084 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M7_GPIO_Port, ENABLE_M7_Pin, RESET); // start disabled
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2140      	movs	r1, #64	@ 0x40
 8000f20:	4805      	ldr	r0, [pc, #20]	@ (8000f38 <motor_init+0x5c>)
 8000f22:	f001 f8af 	bl	8002084 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M8_GPIO_Port, ENABLE_M8_Pin, RESET); // start disabled
 8000f26:	2200      	movs	r2, #0
 8000f28:	2180      	movs	r1, #128	@ 0x80
 8000f2a:	4803      	ldr	r0, [pc, #12]	@ (8000f38 <motor_init+0x5c>)
 8000f2c:	f001 f8aa 	bl	8002084 <HAL_GPIO_WritePin>
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40011000 	.word	0x40011000
 8000f38:	40010800 	.word	0x40010800

08000f3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f40:	b672      	cpsid	i
}
 8000f42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f44:	bf00      	nop
 8000f46:	e7fd      	b.n	8000f44 <Error_Handler+0x8>

08000f48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f4e:	4b15      	ldr	r3, [pc, #84]	@ (8000fa4 <HAL_MspInit+0x5c>)
 8000f50:	699b      	ldr	r3, [r3, #24]
 8000f52:	4a14      	ldr	r2, [pc, #80]	@ (8000fa4 <HAL_MspInit+0x5c>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6193      	str	r3, [r2, #24]
 8000f5a:	4b12      	ldr	r3, [pc, #72]	@ (8000fa4 <HAL_MspInit+0x5c>)
 8000f5c:	699b      	ldr	r3, [r3, #24]
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f66:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa4 <HAL_MspInit+0x5c>)
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	4a0e      	ldr	r2, [pc, #56]	@ (8000fa4 <HAL_MspInit+0x5c>)
 8000f6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f70:	61d3      	str	r3, [r2, #28]
 8000f72:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa4 <HAL_MspInit+0x5c>)
 8000f74:	69db      	ldr	r3, [r3, #28]
 8000f76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f7a:	607b      	str	r3, [r7, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa8 <HAL_MspInit+0x60>)
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	4a04      	ldr	r2, [pc, #16]	@ (8000fa8 <HAL_MspInit+0x60>)
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	40010000 	.word	0x40010000

08000fac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fb0:	bf00      	nop
 8000fb2:	e7fd      	b.n	8000fb0 <NMI_Handler+0x4>

08000fb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb8:	bf00      	nop
 8000fba:	e7fd      	b.n	8000fb8 <HardFault_Handler+0x4>

08000fbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc0:	bf00      	nop
 8000fc2:	e7fd      	b.n	8000fc0 <MemManage_Handler+0x4>

08000fc4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc8:	bf00      	nop
 8000fca:	e7fd      	b.n	8000fc8 <BusFault_Handler+0x4>

08000fcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd0:	bf00      	nop
 8000fd2:	e7fd      	b.n	8000fd0 <UsageFault_Handler+0x4>

08000fd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr

08000fe0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr

08000fec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr

08000ff8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ffc:	f000 faac 	bl	8001558 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}

08001004 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001008:	4802      	ldr	r0, [pc, #8]	@ (8001014 <USART1_IRQHandler+0x10>)
 800100a:	f002 fc13 	bl	8003834 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	2000019c 	.word	0x2000019c

08001018 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
 8001028:	e00a      	b.n	8001040 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800102a:	f3af 8000 	nop.w
 800102e:	4601      	mov	r1, r0
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	1c5a      	adds	r2, r3, #1
 8001034:	60ba      	str	r2, [r7, #8]
 8001036:	b2ca      	uxtb	r2, r1
 8001038:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	3301      	adds	r3, #1
 800103e:	617b      	str	r3, [r7, #20]
 8001040:	697a      	ldr	r2, [r7, #20]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	429a      	cmp	r2, r3
 8001046:	dbf0      	blt.n	800102a <_read+0x12>
  }

  return len;
 8001048:	687b      	ldr	r3, [r7, #4]
}
 800104a:	4618      	mov	r0, r3
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001052:	b480      	push	{r7}
 8001054:	b083      	sub	sp, #12
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800105a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800105e:	4618      	mov	r0, r3
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr

08001068 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001078:	605a      	str	r2, [r3, #4]
  return 0;
 800107a:	2300      	movs	r3, #0
}
 800107c:	4618      	mov	r0, r3
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	bc80      	pop	{r7}
 8001084:	4770      	bx	lr

08001086 <_isatty>:

int _isatty(int file)
{
 8001086:	b480      	push	{r7}
 8001088:	b083      	sub	sp, #12
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800108e:	2301      	movs	r3, #1
}
 8001090:	4618      	mov	r0, r3
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr

0800109a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800109a:	b480      	push	{r7}
 800109c:	b085      	sub	sp, #20
 800109e:	af00      	add	r7, sp, #0
 80010a0:	60f8      	str	r0, [r7, #12]
 80010a2:	60b9      	str	r1, [r7, #8]
 80010a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010a6:	2300      	movs	r3, #0
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bc80      	pop	{r7}
 80010b0:	4770      	bx	lr
	...

080010b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010bc:	4a14      	ldr	r2, [pc, #80]	@ (8001110 <_sbrk+0x5c>)
 80010be:	4b15      	ldr	r3, [pc, #84]	@ (8001114 <_sbrk+0x60>)
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010c8:	4b13      	ldr	r3, [pc, #76]	@ (8001118 <_sbrk+0x64>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d102      	bne.n	80010d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010d0:	4b11      	ldr	r3, [pc, #68]	@ (8001118 <_sbrk+0x64>)
 80010d2:	4a12      	ldr	r2, [pc, #72]	@ (800111c <_sbrk+0x68>)
 80010d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010d6:	4b10      	ldr	r3, [pc, #64]	@ (8001118 <_sbrk+0x64>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4413      	add	r3, r2
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d207      	bcs.n	80010f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010e4:	f003 fc2c 	bl	8004940 <__errno>
 80010e8:	4603      	mov	r3, r0
 80010ea:	220c      	movs	r2, #12
 80010ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ee:	f04f 33ff 	mov.w	r3, #4294967295
 80010f2:	e009      	b.n	8001108 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010f4:	4b08      	ldr	r3, [pc, #32]	@ (8001118 <_sbrk+0x64>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010fa:	4b07      	ldr	r3, [pc, #28]	@ (8001118 <_sbrk+0x64>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	4a05      	ldr	r2, [pc, #20]	@ (8001118 <_sbrk+0x64>)
 8001104:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001106:	68fb      	ldr	r3, [r7, #12]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3718      	adds	r7, #24
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20005000 	.word	0x20005000
 8001114:	00000400 	.word	0x00000400
 8001118:	20000150 	.word	0x20000150
 800111c:	20000380 	.word	0x20000380

08001120 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr

0800112c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08e      	sub	sp, #56	@ 0x38
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001132:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001140:	f107 0320 	add.w	r3, r7, #32
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
 8001158:	615a      	str	r2, [r3, #20]
 800115a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800115c:	4b2c      	ldr	r3, [pc, #176]	@ (8001210 <MX_TIM3_Init+0xe4>)
 800115e:	4a2d      	ldr	r2, [pc, #180]	@ (8001214 <MX_TIM3_Init+0xe8>)
 8001160:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 8001162:	4b2b      	ldr	r3, [pc, #172]	@ (8001210 <MX_TIM3_Init+0xe4>)
 8001164:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001168:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800116a:	4b29      	ldr	r3, [pc, #164]	@ (8001210 <MX_TIM3_Init+0xe4>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 15-1;
 8001170:	4b27      	ldr	r3, [pc, #156]	@ (8001210 <MX_TIM3_Init+0xe4>)
 8001172:	220e      	movs	r2, #14
 8001174:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001176:	4b26      	ldr	r3, [pc, #152]	@ (8001210 <MX_TIM3_Init+0xe4>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800117c:	4b24      	ldr	r3, [pc, #144]	@ (8001210 <MX_TIM3_Init+0xe4>)
 800117e:	2280      	movs	r2, #128	@ 0x80
 8001180:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001182:	4823      	ldr	r0, [pc, #140]	@ (8001210 <MX_TIM3_Init+0xe4>)
 8001184:	f001 fda0 	bl	8002cc8 <HAL_TIM_Base_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800118e:	f7ff fed5 	bl	8000f3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001192:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001196:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001198:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800119c:	4619      	mov	r1, r3
 800119e:	481c      	ldr	r0, [pc, #112]	@ (8001210 <MX_TIM3_Init+0xe4>)
 80011a0:	f001 fe96 	bl	8002ed0 <HAL_TIM_ConfigClockSource>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80011aa:	f7ff fec7 	bl	8000f3c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80011ae:	4818      	ldr	r0, [pc, #96]	@ (8001210 <MX_TIM3_Init+0xe4>)
 80011b0:	f001 fdd9 	bl	8002d66 <HAL_TIM_OC_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80011ba:	f7ff febf 	bl	8000f3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011be:	2300      	movs	r3, #0
 80011c0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c2:	2300      	movs	r3, #0
 80011c4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011c6:	f107 0320 	add.w	r3, r7, #32
 80011ca:	4619      	mov	r1, r3
 80011cc:	4810      	ldr	r0, [pc, #64]	@ (8001210 <MX_TIM3_Init+0xe4>)
 80011ce:	f002 f9d3 	bl	8003578 <HAL_TIMEx_MasterConfigSynchronization>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80011d8:	f7ff feb0 	bl	8000f3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80011dc:	2330      	movs	r3, #48	@ 0x30
 80011de:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	2208      	movs	r2, #8
 80011f0:	4619      	mov	r1, r3
 80011f2:	4807      	ldr	r0, [pc, #28]	@ (8001210 <MX_TIM3_Init+0xe4>)
 80011f4:	f001 fe10 	bl	8002e18 <HAL_TIM_OC_ConfigChannel>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80011fe:	f7ff fe9d 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001202:	4803      	ldr	r0, [pc, #12]	@ (8001210 <MX_TIM3_Init+0xe4>)
 8001204:	f000 f826 	bl	8001254 <HAL_TIM_MspPostInit>

}
 8001208:	bf00      	nop
 800120a:	3738      	adds	r7, #56	@ 0x38
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000154 	.word	0x20000154
 8001214:	40000400 	.word	0x40000400

08001218 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a09      	ldr	r2, [pc, #36]	@ (800124c <HAL_TIM_Base_MspInit+0x34>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d10b      	bne.n	8001242 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800122a:	4b09      	ldr	r3, [pc, #36]	@ (8001250 <HAL_TIM_Base_MspInit+0x38>)
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	4a08      	ldr	r2, [pc, #32]	@ (8001250 <HAL_TIM_Base_MspInit+0x38>)
 8001230:	f043 0302 	orr.w	r3, r3, #2
 8001234:	61d3      	str	r3, [r2, #28]
 8001236:	4b06      	ldr	r3, [pc, #24]	@ (8001250 <HAL_TIM_Base_MspInit+0x38>)
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001242:	bf00      	nop
 8001244:	3714      	adds	r7, #20
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr
 800124c:	40000400 	.word	0x40000400
 8001250:	40021000 	.word	0x40021000

08001254 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125c:	f107 0310 	add.w	r3, r7, #16
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a0f      	ldr	r2, [pc, #60]	@ (80012ac <HAL_TIM_MspPostInit+0x58>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d117      	bne.n	80012a4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001274:	4b0e      	ldr	r3, [pc, #56]	@ (80012b0 <HAL_TIM_MspPostInit+0x5c>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	4a0d      	ldr	r2, [pc, #52]	@ (80012b0 <HAL_TIM_MspPostInit+0x5c>)
 800127a:	f043 0308 	orr.w	r3, r3, #8
 800127e:	6193      	str	r3, [r2, #24]
 8001280:	4b0b      	ldr	r3, [pc, #44]	@ (80012b0 <HAL_TIM_MspPostInit+0x5c>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	f003 0308 	and.w	r3, r3, #8
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800128c:	2301      	movs	r3, #1
 800128e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	2302      	movs	r3, #2
 8001292:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001294:	2302      	movs	r3, #2
 8001296:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001298:	f107 0310 	add.w	r3, r7, #16
 800129c:	4619      	mov	r1, r3
 800129e:	4805      	ldr	r0, [pc, #20]	@ (80012b4 <HAL_TIM_MspPostInit+0x60>)
 80012a0:	f000 fd6c 	bl	8001d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80012a4:	bf00      	nop
 80012a6:	3720      	adds	r7, #32
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40000400 	.word	0x40000400
 80012b0:	40021000 	.word	0x40021000
 80012b4:	40010c00 	.word	0x40010c00

080012b8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012bc:	4b11      	ldr	r3, [pc, #68]	@ (8001304 <MX_USART1_UART_Init+0x4c>)
 80012be:	4a12      	ldr	r2, [pc, #72]	@ (8001308 <MX_USART1_UART_Init+0x50>)
 80012c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80012c2:	4b10      	ldr	r3, [pc, #64]	@ (8001304 <MX_USART1_UART_Init+0x4c>)
 80012c4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80012c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001304 <MX_USART1_UART_Init+0x4c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001304 <MX_USART1_UART_Init+0x4c>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001304 <MX_USART1_UART_Init+0x4c>)
 80012d8:	2200      	movs	r2, #0
 80012da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012dc:	4b09      	ldr	r3, [pc, #36]	@ (8001304 <MX_USART1_UART_Init+0x4c>)
 80012de:	220c      	movs	r2, #12
 80012e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012e2:	4b08      	ldr	r3, [pc, #32]	@ (8001304 <MX_USART1_UART_Init+0x4c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e8:	4b06      	ldr	r3, [pc, #24]	@ (8001304 <MX_USART1_UART_Init+0x4c>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012ee:	4805      	ldr	r0, [pc, #20]	@ (8001304 <MX_USART1_UART_Init+0x4c>)
 80012f0:	f002 f9a0 	bl	8003634 <HAL_UART_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012fa:	f7ff fe1f 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	2000019c 	.word	0x2000019c
 8001308:	40013800 	.word	0x40013800

0800130c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001310:	4b11      	ldr	r3, [pc, #68]	@ (8001358 <MX_USART3_UART_Init+0x4c>)
 8001312:	4a12      	ldr	r2, [pc, #72]	@ (800135c <MX_USART3_UART_Init+0x50>)
 8001314:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001316:	4b10      	ldr	r3, [pc, #64]	@ (8001358 <MX_USART3_UART_Init+0x4c>)
 8001318:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800131c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800131e:	4b0e      	ldr	r3, [pc, #56]	@ (8001358 <MX_USART3_UART_Init+0x4c>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001324:	4b0c      	ldr	r3, [pc, #48]	@ (8001358 <MX_USART3_UART_Init+0x4c>)
 8001326:	2200      	movs	r2, #0
 8001328:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800132a:	4b0b      	ldr	r3, [pc, #44]	@ (8001358 <MX_USART3_UART_Init+0x4c>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001330:	4b09      	ldr	r3, [pc, #36]	@ (8001358 <MX_USART3_UART_Init+0x4c>)
 8001332:	220c      	movs	r2, #12
 8001334:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001336:	4b08      	ldr	r3, [pc, #32]	@ (8001358 <MX_USART3_UART_Init+0x4c>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800133c:	4b06      	ldr	r3, [pc, #24]	@ (8001358 <MX_USART3_UART_Init+0x4c>)
 800133e:	2200      	movs	r2, #0
 8001340:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001342:	4805      	ldr	r0, [pc, #20]	@ (8001358 <MX_USART3_UART_Init+0x4c>)
 8001344:	f002 f976 	bl	8003634 <HAL_UART_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800134e:	f7ff fdf5 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200001e4 	.word	0x200001e4
 800135c:	40004800 	.word	0x40004800

08001360 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08a      	sub	sp, #40	@ 0x28
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 0318 	add.w	r3, r7, #24
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a3c      	ldr	r2, [pc, #240]	@ (800146c <HAL_UART_MspInit+0x10c>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d13a      	bne.n	80013f6 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001380:	4b3b      	ldr	r3, [pc, #236]	@ (8001470 <HAL_UART_MspInit+0x110>)
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	4a3a      	ldr	r2, [pc, #232]	@ (8001470 <HAL_UART_MspInit+0x110>)
 8001386:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800138a:	6193      	str	r3, [r2, #24]
 800138c:	4b38      	ldr	r3, [pc, #224]	@ (8001470 <HAL_UART_MspInit+0x110>)
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001394:	617b      	str	r3, [r7, #20]
 8001396:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001398:	4b35      	ldr	r3, [pc, #212]	@ (8001470 <HAL_UART_MspInit+0x110>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	4a34      	ldr	r2, [pc, #208]	@ (8001470 <HAL_UART_MspInit+0x110>)
 800139e:	f043 0304 	orr.w	r3, r3, #4
 80013a2:	6193      	str	r3, [r2, #24]
 80013a4:	4b32      	ldr	r3, [pc, #200]	@ (8001470 <HAL_UART_MspInit+0x110>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	f003 0304 	and.w	r3, r3, #4
 80013ac:	613b      	str	r3, [r7, #16]
 80013ae:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b6:	2302      	movs	r3, #2
 80013b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013ba:	2303      	movs	r3, #3
 80013bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013be:	f107 0318 	add.w	r3, r7, #24
 80013c2:	4619      	mov	r1, r3
 80013c4:	482b      	ldr	r0, [pc, #172]	@ (8001474 <HAL_UART_MspInit+0x114>)
 80013c6:	f000 fcd9 	bl	8001d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d8:	f107 0318 	add.w	r3, r7, #24
 80013dc:	4619      	mov	r1, r3
 80013de:	4825      	ldr	r0, [pc, #148]	@ (8001474 <HAL_UART_MspInit+0x114>)
 80013e0:	f000 fccc 	bl	8001d7c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80013e4:	2200      	movs	r2, #0
 80013e6:	2100      	movs	r1, #0
 80013e8:	2025      	movs	r0, #37	@ 0x25
 80013ea:	f000 fbde 	bl	8001baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013ee:	2025      	movs	r0, #37	@ 0x25
 80013f0:	f000 fbf7 	bl	8001be2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80013f4:	e036      	b.n	8001464 <HAL_UART_MspInit+0x104>
  else if(uartHandle->Instance==USART3)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a1f      	ldr	r2, [pc, #124]	@ (8001478 <HAL_UART_MspInit+0x118>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d131      	bne.n	8001464 <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001400:	4b1b      	ldr	r3, [pc, #108]	@ (8001470 <HAL_UART_MspInit+0x110>)
 8001402:	69db      	ldr	r3, [r3, #28]
 8001404:	4a1a      	ldr	r2, [pc, #104]	@ (8001470 <HAL_UART_MspInit+0x110>)
 8001406:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800140a:	61d3      	str	r3, [r2, #28]
 800140c:	4b18      	ldr	r3, [pc, #96]	@ (8001470 <HAL_UART_MspInit+0x110>)
 800140e:	69db      	ldr	r3, [r3, #28]
 8001410:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001418:	4b15      	ldr	r3, [pc, #84]	@ (8001470 <HAL_UART_MspInit+0x110>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	4a14      	ldr	r2, [pc, #80]	@ (8001470 <HAL_UART_MspInit+0x110>)
 800141e:	f043 0308 	orr.w	r3, r3, #8
 8001422:	6193      	str	r3, [r2, #24]
 8001424:	4b12      	ldr	r3, [pc, #72]	@ (8001470 <HAL_UART_MspInit+0x110>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	f003 0308 	and.w	r3, r3, #8
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001430:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001434:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001436:	2302      	movs	r3, #2
 8001438:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800143a:	2303      	movs	r3, #3
 800143c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143e:	f107 0318 	add.w	r3, r7, #24
 8001442:	4619      	mov	r1, r3
 8001444:	480d      	ldr	r0, [pc, #52]	@ (800147c <HAL_UART_MspInit+0x11c>)
 8001446:	f000 fc99 	bl	8001d7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800144a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800144e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001450:	2300      	movs	r3, #0
 8001452:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001458:	f107 0318 	add.w	r3, r7, #24
 800145c:	4619      	mov	r1, r3
 800145e:	4807      	ldr	r0, [pc, #28]	@ (800147c <HAL_UART_MspInit+0x11c>)
 8001460:	f000 fc8c 	bl	8001d7c <HAL_GPIO_Init>
}
 8001464:	bf00      	nop
 8001466:	3728      	adds	r7, #40	@ 0x28
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40013800 	.word	0x40013800
 8001470:	40021000 	.word	0x40021000
 8001474:	40010800 	.word	0x40010800
 8001478:	40004800 	.word	0x40004800
 800147c:	40010c00 	.word	0x40010c00

08001480 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001480:	f7ff fe4e 	bl	8001120 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001484:	480b      	ldr	r0, [pc, #44]	@ (80014b4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001486:	490c      	ldr	r1, [pc, #48]	@ (80014b8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001488:	4a0c      	ldr	r2, [pc, #48]	@ (80014bc <LoopFillZerobss+0x16>)
  movs r3, #0
 800148a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800148c:	e002      	b.n	8001494 <LoopCopyDataInit>

0800148e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800148e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001490:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001492:	3304      	adds	r3, #4

08001494 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001494:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001496:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001498:	d3f9      	bcc.n	800148e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800149a:	4a09      	ldr	r2, [pc, #36]	@ (80014c0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800149c:	4c09      	ldr	r4, [pc, #36]	@ (80014c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800149e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a0:	e001      	b.n	80014a6 <LoopFillZerobss>

080014a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a4:	3204      	adds	r2, #4

080014a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a8:	d3fb      	bcc.n	80014a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014aa:	f003 fa4f 	bl	800494c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014ae:	f7ff f835 	bl	800051c <main>
  bx lr
 80014b2:	4770      	bx	lr
  ldr r0, =_sdata
 80014b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014b8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80014bc:	08005ccc 	.word	0x08005ccc
  ldr r2, =_sbss
 80014c0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80014c4:	2000037c 	.word	0x2000037c

080014c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014c8:	e7fe      	b.n	80014c8 <ADC1_2_IRQHandler>
	...

080014cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014d0:	4b08      	ldr	r3, [pc, #32]	@ (80014f4 <HAL_Init+0x28>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a07      	ldr	r2, [pc, #28]	@ (80014f4 <HAL_Init+0x28>)
 80014d6:	f043 0310 	orr.w	r3, r3, #16
 80014da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014dc:	2003      	movs	r0, #3
 80014de:	f000 fb59 	bl	8001b94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014e2:	200f      	movs	r0, #15
 80014e4:	f000 f808 	bl	80014f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014e8:	f7ff fd2e 	bl	8000f48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40022000 	.word	0x40022000

080014f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001500:	4b12      	ldr	r3, [pc, #72]	@ (800154c <HAL_InitTick+0x54>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4b12      	ldr	r3, [pc, #72]	@ (8001550 <HAL_InitTick+0x58>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	4619      	mov	r1, r3
 800150a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800150e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001512:	fbb2 f3f3 	udiv	r3, r2, r3
 8001516:	4618      	mov	r0, r3
 8001518:	f000 fb71 	bl	8001bfe <HAL_SYSTICK_Config>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e00e      	b.n	8001544 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2b0f      	cmp	r3, #15
 800152a:	d80a      	bhi.n	8001542 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800152c:	2200      	movs	r2, #0
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	f04f 30ff 	mov.w	r0, #4294967295
 8001534:	f000 fb39 	bl	8001baa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001538:	4a06      	ldr	r2, [pc, #24]	@ (8001554 <HAL_InitTick+0x5c>)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800153e:	2300      	movs	r3, #0
 8001540:	e000      	b.n	8001544 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
}
 8001544:	4618      	mov	r0, r3
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000010 	.word	0x20000010
 8001550:	20000018 	.word	0x20000018
 8001554:	20000014 	.word	0x20000014

08001558 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800155c:	4b05      	ldr	r3, [pc, #20]	@ (8001574 <HAL_IncTick+0x1c>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	461a      	mov	r2, r3
 8001562:	4b05      	ldr	r3, [pc, #20]	@ (8001578 <HAL_IncTick+0x20>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4413      	add	r3, r2
 8001568:	4a03      	ldr	r2, [pc, #12]	@ (8001578 <HAL_IncTick+0x20>)
 800156a:	6013      	str	r3, [r2, #0]
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr
 8001574:	20000018 	.word	0x20000018
 8001578:	2000022c 	.word	0x2000022c

0800157c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return uwTick;
 8001580:	4b02      	ldr	r3, [pc, #8]	@ (800158c <HAL_GetTick+0x10>)
 8001582:	681b      	ldr	r3, [r3, #0]
}
 8001584:	4618      	mov	r0, r3
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr
 800158c:	2000022c 	.word	0x2000022c

08001590 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001598:	f7ff fff0 	bl	800157c <HAL_GetTick>
 800159c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015a8:	d005      	beq.n	80015b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015aa:	4b0a      	ldr	r3, [pc, #40]	@ (80015d4 <HAL_Delay+0x44>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	461a      	mov	r2, r3
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	4413      	add	r3, r2
 80015b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015b6:	bf00      	nop
 80015b8:	f7ff ffe0 	bl	800157c <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d8f7      	bhi.n	80015b8 <HAL_Delay+0x28>
  {
  }
}
 80015c8:	bf00      	nop
 80015ca:	bf00      	nop
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000018 	.word	0x20000018

080015d8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015e0:	2300      	movs	r3, #0
 80015e2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80015e4:	2300      	movs	r3, #0
 80015e6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80015e8:	2300      	movs	r3, #0
 80015ea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e0be      	b.n	8001778 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001604:	2b00      	cmp	r3, #0
 8001606:	d109      	bne.n	800161c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7fe fe14 	bl	8000244 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f000 f9ab 	bl	8001978 <ADC_ConversionStop_Disable>
 8001622:	4603      	mov	r3, r0
 8001624:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800162a:	f003 0310 	and.w	r3, r3, #16
 800162e:	2b00      	cmp	r3, #0
 8001630:	f040 8099 	bne.w	8001766 <HAL_ADC_Init+0x18e>
 8001634:	7dfb      	ldrb	r3, [r7, #23]
 8001636:	2b00      	cmp	r3, #0
 8001638:	f040 8095 	bne.w	8001766 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001640:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001644:	f023 0302 	bic.w	r3, r3, #2
 8001648:	f043 0202 	orr.w	r2, r3, #2
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001658:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	7b1b      	ldrb	r3, [r3, #12]
 800165e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001660:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001662:	68ba      	ldr	r2, [r7, #8]
 8001664:	4313      	orrs	r3, r2
 8001666:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001670:	d003      	beq.n	800167a <HAL_ADC_Init+0xa2>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d102      	bne.n	8001680 <HAL_ADC_Init+0xa8>
 800167a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800167e:	e000      	b.n	8001682 <HAL_ADC_Init+0xaa>
 8001680:	2300      	movs	r3, #0
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	4313      	orrs	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	7d1b      	ldrb	r3, [r3, #20]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d119      	bne.n	80016c4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	7b1b      	ldrb	r3, [r3, #12]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d109      	bne.n	80016ac <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	3b01      	subs	r3, #1
 800169e:	035a      	lsls	r2, r3, #13
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016a8:	613b      	str	r3, [r7, #16]
 80016aa:	e00b      	b.n	80016c4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016b0:	f043 0220 	orr.w	r2, r3, #32
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016bc:	f043 0201 	orr.w	r2, r3, #1
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	430a      	orrs	r2, r1
 80016d6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	689a      	ldr	r2, [r3, #8]
 80016de:	4b28      	ldr	r3, [pc, #160]	@ (8001780 <HAL_ADC_Init+0x1a8>)
 80016e0:	4013      	ands	r3, r2
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	6812      	ldr	r2, [r2, #0]
 80016e6:	68b9      	ldr	r1, [r7, #8]
 80016e8:	430b      	orrs	r3, r1
 80016ea:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80016f4:	d003      	beq.n	80016fe <HAL_ADC_Init+0x126>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d104      	bne.n	8001708 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	3b01      	subs	r3, #1
 8001704:	051b      	lsls	r3, r3, #20
 8001706:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800170e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	430a      	orrs	r2, r1
 800171a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	689a      	ldr	r2, [r3, #8]
 8001722:	4b18      	ldr	r3, [pc, #96]	@ (8001784 <HAL_ADC_Init+0x1ac>)
 8001724:	4013      	ands	r3, r2
 8001726:	68ba      	ldr	r2, [r7, #8]
 8001728:	429a      	cmp	r2, r3
 800172a:	d10b      	bne.n	8001744 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001736:	f023 0303 	bic.w	r3, r3, #3
 800173a:	f043 0201 	orr.w	r2, r3, #1
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001742:	e018      	b.n	8001776 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001748:	f023 0312 	bic.w	r3, r3, #18
 800174c:	f043 0210 	orr.w	r2, r3, #16
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001758:	f043 0201 	orr.w	r2, r3, #1
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001764:	e007      	b.n	8001776 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800176a:	f043 0210 	orr.w	r2, r3, #16
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001776:	7dfb      	ldrb	r3, [r7, #23]
}
 8001778:	4618      	mov	r0, r3
 800177a:	3718      	adds	r7, #24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	ffe1f7fd 	.word	0xffe1f7fd
 8001784:	ff1f0efe 	.word	0xff1f0efe

08001788 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001792:	2300      	movs	r3, #0
 8001794:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001796:	2300      	movs	r3, #0
 8001798:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d101      	bne.n	80017a8 <HAL_ADC_ConfigChannel+0x20>
 80017a4:	2302      	movs	r3, #2
 80017a6:	e0dc      	b.n	8001962 <HAL_ADC_ConfigChannel+0x1da>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2201      	movs	r2, #1
 80017ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	2b06      	cmp	r3, #6
 80017b6:	d81c      	bhi.n	80017f2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	4613      	mov	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	3b05      	subs	r3, #5
 80017ca:	221f      	movs	r2, #31
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	43db      	mvns	r3, r3
 80017d2:	4019      	ands	r1, r3
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	6818      	ldr	r0, [r3, #0]
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	3b05      	subs	r3, #5
 80017e4:	fa00 f203 	lsl.w	r2, r0, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	430a      	orrs	r2, r1
 80017ee:	635a      	str	r2, [r3, #52]	@ 0x34
 80017f0:	e03c      	b.n	800186c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b0c      	cmp	r3, #12
 80017f8:	d81c      	bhi.n	8001834 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	4613      	mov	r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4413      	add	r3, r2
 800180a:	3b23      	subs	r3, #35	@ 0x23
 800180c:	221f      	movs	r2, #31
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	4019      	ands	r1, r3
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	6818      	ldr	r0, [r3, #0]
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685a      	ldr	r2, [r3, #4]
 800181e:	4613      	mov	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4413      	add	r3, r2
 8001824:	3b23      	subs	r3, #35	@ 0x23
 8001826:	fa00 f203 	lsl.w	r2, r0, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	430a      	orrs	r2, r1
 8001830:	631a      	str	r2, [r3, #48]	@ 0x30
 8001832:	e01b      	b.n	800186c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685a      	ldr	r2, [r3, #4]
 800183e:	4613      	mov	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4413      	add	r3, r2
 8001844:	3b41      	subs	r3, #65	@ 0x41
 8001846:	221f      	movs	r2, #31
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	4019      	ands	r1, r3
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	6818      	ldr	r0, [r3, #0]
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	4613      	mov	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4413      	add	r3, r2
 800185e:	3b41      	subs	r3, #65	@ 0x41
 8001860:	fa00 f203 	lsl.w	r2, r0, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	430a      	orrs	r2, r1
 800186a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b09      	cmp	r3, #9
 8001872:	d91c      	bls.n	80018ae <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	68d9      	ldr	r1, [r3, #12]
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	4613      	mov	r3, r2
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	4413      	add	r3, r2
 8001884:	3b1e      	subs	r3, #30
 8001886:	2207      	movs	r2, #7
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	43db      	mvns	r3, r3
 800188e:	4019      	ands	r1, r3
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	6898      	ldr	r0, [r3, #8]
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	4613      	mov	r3, r2
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	4413      	add	r3, r2
 800189e:	3b1e      	subs	r3, #30
 80018a0:	fa00 f203 	lsl.w	r2, r0, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	430a      	orrs	r2, r1
 80018aa:	60da      	str	r2, [r3, #12]
 80018ac:	e019      	b.n	80018e2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6919      	ldr	r1, [r3, #16]
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	4613      	mov	r3, r2
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	4413      	add	r3, r2
 80018be:	2207      	movs	r2, #7
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	43db      	mvns	r3, r3
 80018c6:	4019      	ands	r1, r3
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	6898      	ldr	r0, [r3, #8]
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	4613      	mov	r3, r2
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	4413      	add	r3, r2
 80018d6:	fa00 f203 	lsl.w	r2, r0, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	430a      	orrs	r2, r1
 80018e0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2b10      	cmp	r3, #16
 80018e8:	d003      	beq.n	80018f2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80018ee:	2b11      	cmp	r3, #17
 80018f0:	d132      	bne.n	8001958 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a1d      	ldr	r2, [pc, #116]	@ (800196c <HAL_ADC_ConfigChannel+0x1e4>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d125      	bne.n	8001948 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d126      	bne.n	8001958 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001918:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2b10      	cmp	r3, #16
 8001920:	d11a      	bne.n	8001958 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001922:	4b13      	ldr	r3, [pc, #76]	@ (8001970 <HAL_ADC_ConfigChannel+0x1e8>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a13      	ldr	r2, [pc, #76]	@ (8001974 <HAL_ADC_ConfigChannel+0x1ec>)
 8001928:	fba2 2303 	umull	r2, r3, r2, r3
 800192c:	0c9a      	lsrs	r2, r3, #18
 800192e:	4613      	mov	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001938:	e002      	b.n	8001940 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	3b01      	subs	r3, #1
 800193e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1f9      	bne.n	800193a <HAL_ADC_ConfigChannel+0x1b2>
 8001946:	e007      	b.n	8001958 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800194c:	f043 0220 	orr.w	r2, r3, #32
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001960:	7bfb      	ldrb	r3, [r7, #15]
}
 8001962:	4618      	mov	r0, r3
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr
 800196c:	40012400 	.word	0x40012400
 8001970:	20000010 	.word	0x20000010
 8001974:	431bde83 	.word	0x431bde83

08001978 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001980:	2300      	movs	r3, #0
 8001982:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	2b01      	cmp	r3, #1
 8001990:	d12e      	bne.n	80019f0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f022 0201 	bic.w	r2, r2, #1
 80019a0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80019a2:	f7ff fdeb 	bl	800157c <HAL_GetTick>
 80019a6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019a8:	e01b      	b.n	80019e2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80019aa:	f7ff fde7 	bl	800157c <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d914      	bls.n	80019e2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d10d      	bne.n	80019e2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ca:	f043 0210 	orr.w	r2, r3, #16
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019d6:	f043 0201 	orr.w	r2, r3, #1
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e007      	b.n	80019f2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d0dc      	beq.n	80019aa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
	...

080019fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a40 <__NVIC_SetPriorityGrouping+0x44>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a12:	68ba      	ldr	r2, [r7, #8]
 8001a14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a18:	4013      	ands	r3, r2
 8001a1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a2e:	4a04      	ldr	r2, [pc, #16]	@ (8001a40 <__NVIC_SetPriorityGrouping+0x44>)
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	60d3      	str	r3, [r2, #12]
}
 8001a34:	bf00      	nop
 8001a36:	3714      	adds	r7, #20
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bc80      	pop	{r7}
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a48:	4b04      	ldr	r3, [pc, #16]	@ (8001a5c <__NVIC_GetPriorityGrouping+0x18>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	0a1b      	lsrs	r3, r3, #8
 8001a4e:	f003 0307 	and.w	r3, r3, #7
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bc80      	pop	{r7}
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	e000ed00 	.word	0xe000ed00

08001a60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	db0b      	blt.n	8001a8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	f003 021f 	and.w	r2, r3, #31
 8001a78:	4906      	ldr	r1, [pc, #24]	@ (8001a94 <__NVIC_EnableIRQ+0x34>)
 8001a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7e:	095b      	lsrs	r3, r3, #5
 8001a80:	2001      	movs	r0, #1
 8001a82:	fa00 f202 	lsl.w	r2, r0, r2
 8001a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr
 8001a94:	e000e100 	.word	0xe000e100

08001a98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	6039      	str	r1, [r7, #0]
 8001aa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	db0a      	blt.n	8001ac2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	490c      	ldr	r1, [pc, #48]	@ (8001ae4 <__NVIC_SetPriority+0x4c>)
 8001ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab6:	0112      	lsls	r2, r2, #4
 8001ab8:	b2d2      	uxtb	r2, r2
 8001aba:	440b      	add	r3, r1
 8001abc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ac0:	e00a      	b.n	8001ad8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	b2da      	uxtb	r2, r3
 8001ac6:	4908      	ldr	r1, [pc, #32]	@ (8001ae8 <__NVIC_SetPriority+0x50>)
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
 8001aca:	f003 030f 	and.w	r3, r3, #15
 8001ace:	3b04      	subs	r3, #4
 8001ad0:	0112      	lsls	r2, r2, #4
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	440b      	add	r3, r1
 8001ad6:	761a      	strb	r2, [r3, #24]
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc80      	pop	{r7}
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	e000e100 	.word	0xe000e100
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b089      	sub	sp, #36	@ 0x24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f1c3 0307 	rsb	r3, r3, #7
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	bf28      	it	cs
 8001b0a:	2304      	movcs	r3, #4
 8001b0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	3304      	adds	r3, #4
 8001b12:	2b06      	cmp	r3, #6
 8001b14:	d902      	bls.n	8001b1c <NVIC_EncodePriority+0x30>
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	3b03      	subs	r3, #3
 8001b1a:	e000      	b.n	8001b1e <NVIC_EncodePriority+0x32>
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b20:	f04f 32ff 	mov.w	r2, #4294967295
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43da      	mvns	r2, r3
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	401a      	ands	r2, r3
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b34:	f04f 31ff 	mov.w	r1, #4294967295
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3e:	43d9      	mvns	r1, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b44:	4313      	orrs	r3, r2
         );
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3724      	adds	r7, #36	@ 0x24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr

08001b50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b60:	d301      	bcc.n	8001b66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b62:	2301      	movs	r3, #1
 8001b64:	e00f      	b.n	8001b86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b66:	4a0a      	ldr	r2, [pc, #40]	@ (8001b90 <SysTick_Config+0x40>)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b6e:	210f      	movs	r1, #15
 8001b70:	f04f 30ff 	mov.w	r0, #4294967295
 8001b74:	f7ff ff90 	bl	8001a98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b78:	4b05      	ldr	r3, [pc, #20]	@ (8001b90 <SysTick_Config+0x40>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b7e:	4b04      	ldr	r3, [pc, #16]	@ (8001b90 <SysTick_Config+0x40>)
 8001b80:	2207      	movs	r2, #7
 8001b82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	e000e010 	.word	0xe000e010

08001b94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f7ff ff2d 	bl	80019fc <__NVIC_SetPriorityGrouping>
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b086      	sub	sp, #24
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	60b9      	str	r1, [r7, #8]
 8001bb4:	607a      	str	r2, [r7, #4]
 8001bb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bbc:	f7ff ff42 	bl	8001a44 <__NVIC_GetPriorityGrouping>
 8001bc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	68b9      	ldr	r1, [r7, #8]
 8001bc6:	6978      	ldr	r0, [r7, #20]
 8001bc8:	f7ff ff90 	bl	8001aec <NVIC_EncodePriority>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bd2:	4611      	mov	r1, r2
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff ff5f 	bl	8001a98 <__NVIC_SetPriority>
}
 8001bda:	bf00      	nop
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b082      	sub	sp, #8
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	4603      	mov	r3, r0
 8001bea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff ff35 	bl	8001a60 <__NVIC_EnableIRQ>
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b082      	sub	sp, #8
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff ffa2 	bl	8001b50 <SysTick_Config>
 8001c0c:	4603      	mov	r3, r0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b085      	sub	sp, #20
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d008      	beq.n	8001c40 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2204      	movs	r2, #4
 8001c32:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e020      	b.n	8001c82 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 020e 	bic.w	r2, r2, #14
 8001c4e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f022 0201 	bic.w	r2, r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c68:	2101      	movs	r1, #1
 8001c6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c6e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3714      	adds	r7, #20
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr

08001c8c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c94:	2300      	movs	r3, #0
 8001c96:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d005      	beq.n	8001cb0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2204      	movs	r2, #4
 8001ca8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	73fb      	strb	r3, [r7, #15]
 8001cae:	e051      	b.n	8001d54 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 020e 	bic.w	r2, r2, #14
 8001cbe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f022 0201 	bic.w	r2, r2, #1
 8001cce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a22      	ldr	r2, [pc, #136]	@ (8001d60 <HAL_DMA_Abort_IT+0xd4>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d029      	beq.n	8001d2e <HAL_DMA_Abort_IT+0xa2>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a21      	ldr	r2, [pc, #132]	@ (8001d64 <HAL_DMA_Abort_IT+0xd8>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d022      	beq.n	8001d2a <HAL_DMA_Abort_IT+0x9e>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a1f      	ldr	r2, [pc, #124]	@ (8001d68 <HAL_DMA_Abort_IT+0xdc>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d01a      	beq.n	8001d24 <HAL_DMA_Abort_IT+0x98>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a1e      	ldr	r2, [pc, #120]	@ (8001d6c <HAL_DMA_Abort_IT+0xe0>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d012      	beq.n	8001d1e <HAL_DMA_Abort_IT+0x92>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a1c      	ldr	r2, [pc, #112]	@ (8001d70 <HAL_DMA_Abort_IT+0xe4>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d00a      	beq.n	8001d18 <HAL_DMA_Abort_IT+0x8c>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a1b      	ldr	r2, [pc, #108]	@ (8001d74 <HAL_DMA_Abort_IT+0xe8>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d102      	bne.n	8001d12 <HAL_DMA_Abort_IT+0x86>
 8001d0c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001d10:	e00e      	b.n	8001d30 <HAL_DMA_Abort_IT+0xa4>
 8001d12:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001d16:	e00b      	b.n	8001d30 <HAL_DMA_Abort_IT+0xa4>
 8001d18:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d1c:	e008      	b.n	8001d30 <HAL_DMA_Abort_IT+0xa4>
 8001d1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d22:	e005      	b.n	8001d30 <HAL_DMA_Abort_IT+0xa4>
 8001d24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d28:	e002      	b.n	8001d30 <HAL_DMA_Abort_IT+0xa4>
 8001d2a:	2310      	movs	r3, #16
 8001d2c:	e000      	b.n	8001d30 <HAL_DMA_Abort_IT+0xa4>
 8001d2e:	2301      	movs	r3, #1
 8001d30:	4a11      	ldr	r2, [pc, #68]	@ (8001d78 <HAL_DMA_Abort_IT+0xec>)
 8001d32:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	4798      	blx	r3
    } 
  }
  return status;
 8001d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40020008 	.word	0x40020008
 8001d64:	4002001c 	.word	0x4002001c
 8001d68:	40020030 	.word	0x40020030
 8001d6c:	40020044 	.word	0x40020044
 8001d70:	40020058 	.word	0x40020058
 8001d74:	4002006c 	.word	0x4002006c
 8001d78:	40020000 	.word	0x40020000

08001d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b08b      	sub	sp, #44	@ 0x2c
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d86:	2300      	movs	r3, #0
 8001d88:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d8e:	e169      	b.n	8002064 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d90:	2201      	movs	r2, #1
 8001d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	69fa      	ldr	r2, [r7, #28]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	f040 8158 	bne.w	800205e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	4a9a      	ldr	r2, [pc, #616]	@ (800201c <HAL_GPIO_Init+0x2a0>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d05e      	beq.n	8001e76 <HAL_GPIO_Init+0xfa>
 8001db8:	4a98      	ldr	r2, [pc, #608]	@ (800201c <HAL_GPIO_Init+0x2a0>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d875      	bhi.n	8001eaa <HAL_GPIO_Init+0x12e>
 8001dbe:	4a98      	ldr	r2, [pc, #608]	@ (8002020 <HAL_GPIO_Init+0x2a4>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d058      	beq.n	8001e76 <HAL_GPIO_Init+0xfa>
 8001dc4:	4a96      	ldr	r2, [pc, #600]	@ (8002020 <HAL_GPIO_Init+0x2a4>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d86f      	bhi.n	8001eaa <HAL_GPIO_Init+0x12e>
 8001dca:	4a96      	ldr	r2, [pc, #600]	@ (8002024 <HAL_GPIO_Init+0x2a8>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d052      	beq.n	8001e76 <HAL_GPIO_Init+0xfa>
 8001dd0:	4a94      	ldr	r2, [pc, #592]	@ (8002024 <HAL_GPIO_Init+0x2a8>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d869      	bhi.n	8001eaa <HAL_GPIO_Init+0x12e>
 8001dd6:	4a94      	ldr	r2, [pc, #592]	@ (8002028 <HAL_GPIO_Init+0x2ac>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d04c      	beq.n	8001e76 <HAL_GPIO_Init+0xfa>
 8001ddc:	4a92      	ldr	r2, [pc, #584]	@ (8002028 <HAL_GPIO_Init+0x2ac>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d863      	bhi.n	8001eaa <HAL_GPIO_Init+0x12e>
 8001de2:	4a92      	ldr	r2, [pc, #584]	@ (800202c <HAL_GPIO_Init+0x2b0>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d046      	beq.n	8001e76 <HAL_GPIO_Init+0xfa>
 8001de8:	4a90      	ldr	r2, [pc, #576]	@ (800202c <HAL_GPIO_Init+0x2b0>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d85d      	bhi.n	8001eaa <HAL_GPIO_Init+0x12e>
 8001dee:	2b12      	cmp	r3, #18
 8001df0:	d82a      	bhi.n	8001e48 <HAL_GPIO_Init+0xcc>
 8001df2:	2b12      	cmp	r3, #18
 8001df4:	d859      	bhi.n	8001eaa <HAL_GPIO_Init+0x12e>
 8001df6:	a201      	add	r2, pc, #4	@ (adr r2, 8001dfc <HAL_GPIO_Init+0x80>)
 8001df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dfc:	08001e77 	.word	0x08001e77
 8001e00:	08001e51 	.word	0x08001e51
 8001e04:	08001e63 	.word	0x08001e63
 8001e08:	08001ea5 	.word	0x08001ea5
 8001e0c:	08001eab 	.word	0x08001eab
 8001e10:	08001eab 	.word	0x08001eab
 8001e14:	08001eab 	.word	0x08001eab
 8001e18:	08001eab 	.word	0x08001eab
 8001e1c:	08001eab 	.word	0x08001eab
 8001e20:	08001eab 	.word	0x08001eab
 8001e24:	08001eab 	.word	0x08001eab
 8001e28:	08001eab 	.word	0x08001eab
 8001e2c:	08001eab 	.word	0x08001eab
 8001e30:	08001eab 	.word	0x08001eab
 8001e34:	08001eab 	.word	0x08001eab
 8001e38:	08001eab 	.word	0x08001eab
 8001e3c:	08001eab 	.word	0x08001eab
 8001e40:	08001e59 	.word	0x08001e59
 8001e44:	08001e6d 	.word	0x08001e6d
 8001e48:	4a79      	ldr	r2, [pc, #484]	@ (8002030 <HAL_GPIO_Init+0x2b4>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d013      	beq.n	8001e76 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e4e:	e02c      	b.n	8001eaa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	623b      	str	r3, [r7, #32]
          break;
 8001e56:	e029      	b.n	8001eac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	3304      	adds	r3, #4
 8001e5e:	623b      	str	r3, [r7, #32]
          break;
 8001e60:	e024      	b.n	8001eac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	3308      	adds	r3, #8
 8001e68:	623b      	str	r3, [r7, #32]
          break;
 8001e6a:	e01f      	b.n	8001eac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	330c      	adds	r3, #12
 8001e72:	623b      	str	r3, [r7, #32]
          break;
 8001e74:	e01a      	b.n	8001eac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d102      	bne.n	8001e84 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e7e:	2304      	movs	r3, #4
 8001e80:	623b      	str	r3, [r7, #32]
          break;
 8001e82:	e013      	b.n	8001eac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d105      	bne.n	8001e98 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e8c:	2308      	movs	r3, #8
 8001e8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	69fa      	ldr	r2, [r7, #28]
 8001e94:	611a      	str	r2, [r3, #16]
          break;
 8001e96:	e009      	b.n	8001eac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e98:	2308      	movs	r3, #8
 8001e9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	69fa      	ldr	r2, [r7, #28]
 8001ea0:	615a      	str	r2, [r3, #20]
          break;
 8001ea2:	e003      	b.n	8001eac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	623b      	str	r3, [r7, #32]
          break;
 8001ea8:	e000      	b.n	8001eac <HAL_GPIO_Init+0x130>
          break;
 8001eaa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	2bff      	cmp	r3, #255	@ 0xff
 8001eb0:	d801      	bhi.n	8001eb6 <HAL_GPIO_Init+0x13a>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	e001      	b.n	8001eba <HAL_GPIO_Init+0x13e>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	3304      	adds	r3, #4
 8001eba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	2bff      	cmp	r3, #255	@ 0xff
 8001ec0:	d802      	bhi.n	8001ec8 <HAL_GPIO_Init+0x14c>
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	e002      	b.n	8001ece <HAL_GPIO_Init+0x152>
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eca:	3b08      	subs	r3, #8
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	210f      	movs	r1, #15
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8001edc:	43db      	mvns	r3, r3
 8001ede:	401a      	ands	r2, r3
 8001ee0:	6a39      	ldr	r1, [r7, #32]
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f000 80b1 	beq.w	800205e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001efc:	4b4d      	ldr	r3, [pc, #308]	@ (8002034 <HAL_GPIO_Init+0x2b8>)
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	4a4c      	ldr	r2, [pc, #304]	@ (8002034 <HAL_GPIO_Init+0x2b8>)
 8001f02:	f043 0301 	orr.w	r3, r3, #1
 8001f06:	6193      	str	r3, [r2, #24]
 8001f08:	4b4a      	ldr	r3, [pc, #296]	@ (8002034 <HAL_GPIO_Init+0x2b8>)
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	60bb      	str	r3, [r7, #8]
 8001f12:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f14:	4a48      	ldr	r2, [pc, #288]	@ (8002038 <HAL_GPIO_Init+0x2bc>)
 8001f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f18:	089b      	lsrs	r3, r3, #2
 8001f1a:	3302      	adds	r3, #2
 8001f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f20:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f24:	f003 0303 	and.w	r3, r3, #3
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	220f      	movs	r2, #15
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	4013      	ands	r3, r2
 8001f36:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a40      	ldr	r2, [pc, #256]	@ (800203c <HAL_GPIO_Init+0x2c0>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d013      	beq.n	8001f68 <HAL_GPIO_Init+0x1ec>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a3f      	ldr	r2, [pc, #252]	@ (8002040 <HAL_GPIO_Init+0x2c4>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d00d      	beq.n	8001f64 <HAL_GPIO_Init+0x1e8>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a3e      	ldr	r2, [pc, #248]	@ (8002044 <HAL_GPIO_Init+0x2c8>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d007      	beq.n	8001f60 <HAL_GPIO_Init+0x1e4>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a3d      	ldr	r2, [pc, #244]	@ (8002048 <HAL_GPIO_Init+0x2cc>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d101      	bne.n	8001f5c <HAL_GPIO_Init+0x1e0>
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e006      	b.n	8001f6a <HAL_GPIO_Init+0x1ee>
 8001f5c:	2304      	movs	r3, #4
 8001f5e:	e004      	b.n	8001f6a <HAL_GPIO_Init+0x1ee>
 8001f60:	2302      	movs	r3, #2
 8001f62:	e002      	b.n	8001f6a <HAL_GPIO_Init+0x1ee>
 8001f64:	2301      	movs	r3, #1
 8001f66:	e000      	b.n	8001f6a <HAL_GPIO_Init+0x1ee>
 8001f68:	2300      	movs	r3, #0
 8001f6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f6c:	f002 0203 	and.w	r2, r2, #3
 8001f70:	0092      	lsls	r2, r2, #2
 8001f72:	4093      	lsls	r3, r2
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f7a:	492f      	ldr	r1, [pc, #188]	@ (8002038 <HAL_GPIO_Init+0x2bc>)
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f7e:	089b      	lsrs	r3, r3, #2
 8001f80:	3302      	adds	r3, #2
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d006      	beq.n	8001fa2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f94:	4b2d      	ldr	r3, [pc, #180]	@ (800204c <HAL_GPIO_Init+0x2d0>)
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	492c      	ldr	r1, [pc, #176]	@ (800204c <HAL_GPIO_Init+0x2d0>)
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	608b      	str	r3, [r1, #8]
 8001fa0:	e006      	b.n	8001fb0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fa2:	4b2a      	ldr	r3, [pc, #168]	@ (800204c <HAL_GPIO_Init+0x2d0>)
 8001fa4:	689a      	ldr	r2, [r3, #8]
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	4928      	ldr	r1, [pc, #160]	@ (800204c <HAL_GPIO_Init+0x2d0>)
 8001fac:	4013      	ands	r3, r2
 8001fae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d006      	beq.n	8001fca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fbc:	4b23      	ldr	r3, [pc, #140]	@ (800204c <HAL_GPIO_Init+0x2d0>)
 8001fbe:	68da      	ldr	r2, [r3, #12]
 8001fc0:	4922      	ldr	r1, [pc, #136]	@ (800204c <HAL_GPIO_Init+0x2d0>)
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	60cb      	str	r3, [r1, #12]
 8001fc8:	e006      	b.n	8001fd8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fca:	4b20      	ldr	r3, [pc, #128]	@ (800204c <HAL_GPIO_Init+0x2d0>)
 8001fcc:	68da      	ldr	r2, [r3, #12]
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	491e      	ldr	r1, [pc, #120]	@ (800204c <HAL_GPIO_Init+0x2d0>)
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d006      	beq.n	8001ff2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fe4:	4b19      	ldr	r3, [pc, #100]	@ (800204c <HAL_GPIO_Init+0x2d0>)
 8001fe6:	685a      	ldr	r2, [r3, #4]
 8001fe8:	4918      	ldr	r1, [pc, #96]	@ (800204c <HAL_GPIO_Init+0x2d0>)
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	604b      	str	r3, [r1, #4]
 8001ff0:	e006      	b.n	8002000 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ff2:	4b16      	ldr	r3, [pc, #88]	@ (800204c <HAL_GPIO_Init+0x2d0>)
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	4914      	ldr	r1, [pc, #80]	@ (800204c <HAL_GPIO_Init+0x2d0>)
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d021      	beq.n	8002050 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800200c:	4b0f      	ldr	r3, [pc, #60]	@ (800204c <HAL_GPIO_Init+0x2d0>)
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	490e      	ldr	r1, [pc, #56]	@ (800204c <HAL_GPIO_Init+0x2d0>)
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	4313      	orrs	r3, r2
 8002016:	600b      	str	r3, [r1, #0]
 8002018:	e021      	b.n	800205e <HAL_GPIO_Init+0x2e2>
 800201a:	bf00      	nop
 800201c:	10320000 	.word	0x10320000
 8002020:	10310000 	.word	0x10310000
 8002024:	10220000 	.word	0x10220000
 8002028:	10210000 	.word	0x10210000
 800202c:	10120000 	.word	0x10120000
 8002030:	10110000 	.word	0x10110000
 8002034:	40021000 	.word	0x40021000
 8002038:	40010000 	.word	0x40010000
 800203c:	40010800 	.word	0x40010800
 8002040:	40010c00 	.word	0x40010c00
 8002044:	40011000 	.word	0x40011000
 8002048:	40011400 	.word	0x40011400
 800204c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002050:	4b0b      	ldr	r3, [pc, #44]	@ (8002080 <HAL_GPIO_Init+0x304>)
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	43db      	mvns	r3, r3
 8002058:	4909      	ldr	r1, [pc, #36]	@ (8002080 <HAL_GPIO_Init+0x304>)
 800205a:	4013      	ands	r3, r2
 800205c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800205e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002060:	3301      	adds	r3, #1
 8002062:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206a:	fa22 f303 	lsr.w	r3, r2, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	f47f ae8e 	bne.w	8001d90 <HAL_GPIO_Init+0x14>
  }
}
 8002074:	bf00      	nop
 8002076:	bf00      	nop
 8002078:	372c      	adds	r7, #44	@ 0x2c
 800207a:	46bd      	mov	sp, r7
 800207c:	bc80      	pop	{r7}
 800207e:	4770      	bx	lr
 8002080:	40010400 	.word	0x40010400

08002084 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	460b      	mov	r3, r1
 800208e:	807b      	strh	r3, [r7, #2]
 8002090:	4613      	mov	r3, r2
 8002092:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002094:	787b      	ldrb	r3, [r7, #1]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800209a:	887a      	ldrh	r2, [r7, #2]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020a0:	e003      	b.n	80020aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020a2:	887b      	ldrh	r3, [r7, #2]
 80020a4:	041a      	lsls	r2, r3, #16
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	611a      	str	r2, [r3, #16]
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr

080020b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e12b      	b.n	800231e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d106      	bne.n	80020e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f7fe f9e0 	bl	80004a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2224      	movs	r2, #36	@ 0x24
 80020e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f022 0201 	bic.w	r2, r2, #1
 80020f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002106:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002116:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002118:	f000 fcda 	bl	8002ad0 <HAL_RCC_GetPCLK1Freq>
 800211c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	4a81      	ldr	r2, [pc, #516]	@ (8002328 <HAL_I2C_Init+0x274>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d807      	bhi.n	8002138 <HAL_I2C_Init+0x84>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	4a80      	ldr	r2, [pc, #512]	@ (800232c <HAL_I2C_Init+0x278>)
 800212c:	4293      	cmp	r3, r2
 800212e:	bf94      	ite	ls
 8002130:	2301      	movls	r3, #1
 8002132:	2300      	movhi	r3, #0
 8002134:	b2db      	uxtb	r3, r3
 8002136:	e006      	b.n	8002146 <HAL_I2C_Init+0x92>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	4a7d      	ldr	r2, [pc, #500]	@ (8002330 <HAL_I2C_Init+0x27c>)
 800213c:	4293      	cmp	r3, r2
 800213e:	bf94      	ite	ls
 8002140:	2301      	movls	r3, #1
 8002142:	2300      	movhi	r3, #0
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e0e7      	b.n	800231e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	4a78      	ldr	r2, [pc, #480]	@ (8002334 <HAL_I2C_Init+0x280>)
 8002152:	fba2 2303 	umull	r2, r3, r2, r3
 8002156:	0c9b      	lsrs	r3, r3, #18
 8002158:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68ba      	ldr	r2, [r7, #8]
 800216a:	430a      	orrs	r2, r1
 800216c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	4a6a      	ldr	r2, [pc, #424]	@ (8002328 <HAL_I2C_Init+0x274>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d802      	bhi.n	8002188 <HAL_I2C_Init+0xd4>
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	3301      	adds	r3, #1
 8002186:	e009      	b.n	800219c <HAL_I2C_Init+0xe8>
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800218e:	fb02 f303 	mul.w	r3, r2, r3
 8002192:	4a69      	ldr	r2, [pc, #420]	@ (8002338 <HAL_I2C_Init+0x284>)
 8002194:	fba2 2303 	umull	r2, r3, r2, r3
 8002198:	099b      	lsrs	r3, r3, #6
 800219a:	3301      	adds	r3, #1
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	6812      	ldr	r2, [r2, #0]
 80021a0:	430b      	orrs	r3, r1
 80021a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80021ae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	495c      	ldr	r1, [pc, #368]	@ (8002328 <HAL_I2C_Init+0x274>)
 80021b8:	428b      	cmp	r3, r1
 80021ba:	d819      	bhi.n	80021f0 <HAL_I2C_Init+0x13c>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	1e59      	subs	r1, r3, #1
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80021ca:	1c59      	adds	r1, r3, #1
 80021cc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80021d0:	400b      	ands	r3, r1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00a      	beq.n	80021ec <HAL_I2C_Init+0x138>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	1e59      	subs	r1, r3, #1
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80021e4:	3301      	adds	r3, #1
 80021e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021ea:	e051      	b.n	8002290 <HAL_I2C_Init+0x1dc>
 80021ec:	2304      	movs	r3, #4
 80021ee:	e04f      	b.n	8002290 <HAL_I2C_Init+0x1dc>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d111      	bne.n	800221c <HAL_I2C_Init+0x168>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	1e58      	subs	r0, r3, #1
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6859      	ldr	r1, [r3, #4]
 8002200:	460b      	mov	r3, r1
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	440b      	add	r3, r1
 8002206:	fbb0 f3f3 	udiv	r3, r0, r3
 800220a:	3301      	adds	r3, #1
 800220c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002210:	2b00      	cmp	r3, #0
 8002212:	bf0c      	ite	eq
 8002214:	2301      	moveq	r3, #1
 8002216:	2300      	movne	r3, #0
 8002218:	b2db      	uxtb	r3, r3
 800221a:	e012      	b.n	8002242 <HAL_I2C_Init+0x18e>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	1e58      	subs	r0, r3, #1
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6859      	ldr	r1, [r3, #4]
 8002224:	460b      	mov	r3, r1
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	440b      	add	r3, r1
 800222a:	0099      	lsls	r1, r3, #2
 800222c:	440b      	add	r3, r1
 800222e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002232:	3301      	adds	r3, #1
 8002234:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002238:	2b00      	cmp	r3, #0
 800223a:	bf0c      	ite	eq
 800223c:	2301      	moveq	r3, #1
 800223e:	2300      	movne	r3, #0
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <HAL_I2C_Init+0x196>
 8002246:	2301      	movs	r3, #1
 8002248:	e022      	b.n	8002290 <HAL_I2C_Init+0x1dc>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10e      	bne.n	8002270 <HAL_I2C_Init+0x1bc>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	1e58      	subs	r0, r3, #1
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6859      	ldr	r1, [r3, #4]
 800225a:	460b      	mov	r3, r1
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	440b      	add	r3, r1
 8002260:	fbb0 f3f3 	udiv	r3, r0, r3
 8002264:	3301      	adds	r3, #1
 8002266:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800226a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800226e:	e00f      	b.n	8002290 <HAL_I2C_Init+0x1dc>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	1e58      	subs	r0, r3, #1
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6859      	ldr	r1, [r3, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	440b      	add	r3, r1
 800227e:	0099      	lsls	r1, r3, #2
 8002280:	440b      	add	r3, r1
 8002282:	fbb0 f3f3 	udiv	r3, r0, r3
 8002286:	3301      	adds	r3, #1
 8002288:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800228c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	6809      	ldr	r1, [r1, #0]
 8002294:	4313      	orrs	r3, r2
 8002296:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69da      	ldr	r2, [r3, #28]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	431a      	orrs	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	430a      	orrs	r2, r1
 80022b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80022be:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	6911      	ldr	r1, [r2, #16]
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	68d2      	ldr	r2, [r2, #12]
 80022ca:	4311      	orrs	r1, r2
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	6812      	ldr	r2, [r2, #0]
 80022d0:	430b      	orrs	r3, r1
 80022d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	695a      	ldr	r2, [r3, #20]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	431a      	orrs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f042 0201 	orr.w	r2, r2, #1
 80022fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2220      	movs	r2, #32
 800230a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	000186a0 	.word	0x000186a0
 800232c:	001e847f 	.word	0x001e847f
 8002330:	003d08ff 	.word	0x003d08ff
 8002334:	431bde83 	.word	0x431bde83
 8002338:	10624dd3 	.word	0x10624dd3

0800233c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e272      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b00      	cmp	r3, #0
 8002358:	f000 8087 	beq.w	800246a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800235c:	4b92      	ldr	r3, [pc, #584]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f003 030c 	and.w	r3, r3, #12
 8002364:	2b04      	cmp	r3, #4
 8002366:	d00c      	beq.n	8002382 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002368:	4b8f      	ldr	r3, [pc, #572]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f003 030c 	and.w	r3, r3, #12
 8002370:	2b08      	cmp	r3, #8
 8002372:	d112      	bne.n	800239a <HAL_RCC_OscConfig+0x5e>
 8002374:	4b8c      	ldr	r3, [pc, #560]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800237c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002380:	d10b      	bne.n	800239a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002382:	4b89      	ldr	r3, [pc, #548]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d06c      	beq.n	8002468 <HAL_RCC_OscConfig+0x12c>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d168      	bne.n	8002468 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e24c      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023a2:	d106      	bne.n	80023b2 <HAL_RCC_OscConfig+0x76>
 80023a4:	4b80      	ldr	r3, [pc, #512]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a7f      	ldr	r2, [pc, #508]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023ae:	6013      	str	r3, [r2, #0]
 80023b0:	e02e      	b.n	8002410 <HAL_RCC_OscConfig+0xd4>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10c      	bne.n	80023d4 <HAL_RCC_OscConfig+0x98>
 80023ba:	4b7b      	ldr	r3, [pc, #492]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a7a      	ldr	r2, [pc, #488]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023c4:	6013      	str	r3, [r2, #0]
 80023c6:	4b78      	ldr	r3, [pc, #480]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a77      	ldr	r2, [pc, #476]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	e01d      	b.n	8002410 <HAL_RCC_OscConfig+0xd4>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023dc:	d10c      	bne.n	80023f8 <HAL_RCC_OscConfig+0xbc>
 80023de:	4b72      	ldr	r3, [pc, #456]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a71      	ldr	r2, [pc, #452]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023e8:	6013      	str	r3, [r2, #0]
 80023ea:	4b6f      	ldr	r3, [pc, #444]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a6e      	ldr	r2, [pc, #440]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023f4:	6013      	str	r3, [r2, #0]
 80023f6:	e00b      	b.n	8002410 <HAL_RCC_OscConfig+0xd4>
 80023f8:	4b6b      	ldr	r3, [pc, #428]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a6a      	ldr	r2, [pc, #424]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002402:	6013      	str	r3, [r2, #0]
 8002404:	4b68      	ldr	r3, [pc, #416]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a67      	ldr	r2, [pc, #412]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 800240a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800240e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d013      	beq.n	8002440 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002418:	f7ff f8b0 	bl	800157c <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002420:	f7ff f8ac 	bl	800157c <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b64      	cmp	r3, #100	@ 0x64
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e200      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002432:	4b5d      	ldr	r3, [pc, #372]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0f0      	beq.n	8002420 <HAL_RCC_OscConfig+0xe4>
 800243e:	e014      	b.n	800246a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002440:	f7ff f89c 	bl	800157c <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002448:	f7ff f898 	bl	800157c <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b64      	cmp	r3, #100	@ 0x64
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e1ec      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800245a:	4b53      	ldr	r3, [pc, #332]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f0      	bne.n	8002448 <HAL_RCC_OscConfig+0x10c>
 8002466:	e000      	b.n	800246a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002468:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d063      	beq.n	800253e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002476:	4b4c      	ldr	r3, [pc, #304]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f003 030c 	and.w	r3, r3, #12
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00b      	beq.n	800249a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002482:	4b49      	ldr	r3, [pc, #292]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f003 030c 	and.w	r3, r3, #12
 800248a:	2b08      	cmp	r3, #8
 800248c:	d11c      	bne.n	80024c8 <HAL_RCC_OscConfig+0x18c>
 800248e:	4b46      	ldr	r3, [pc, #280]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d116      	bne.n	80024c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800249a:	4b43      	ldr	r3, [pc, #268]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d005      	beq.n	80024b2 <HAL_RCC_OscConfig+0x176>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d001      	beq.n	80024b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e1c0      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b2:	4b3d      	ldr	r3, [pc, #244]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	4939      	ldr	r1, [pc, #228]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024c6:	e03a      	b.n	800253e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d020      	beq.n	8002512 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024d0:	4b36      	ldr	r3, [pc, #216]	@ (80025ac <HAL_RCC_OscConfig+0x270>)
 80024d2:	2201      	movs	r2, #1
 80024d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d6:	f7ff f851 	bl	800157c <HAL_GetTick>
 80024da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024dc:	e008      	b.n	80024f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024de:	f7ff f84d 	bl	800157c <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e1a1      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f0:	4b2d      	ldr	r3, [pc, #180]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0f0      	beq.n	80024de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024fc:	4b2a      	ldr	r3, [pc, #168]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	4927      	ldr	r1, [pc, #156]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 800250c:	4313      	orrs	r3, r2
 800250e:	600b      	str	r3, [r1, #0]
 8002510:	e015      	b.n	800253e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002512:	4b26      	ldr	r3, [pc, #152]	@ (80025ac <HAL_RCC_OscConfig+0x270>)
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002518:	f7ff f830 	bl	800157c <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002520:	f7ff f82c 	bl	800157c <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e180      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002532:	4b1d      	ldr	r3, [pc, #116]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1f0      	bne.n	8002520 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0308 	and.w	r3, r3, #8
 8002546:	2b00      	cmp	r3, #0
 8002548:	d03a      	beq.n	80025c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d019      	beq.n	8002586 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002552:	4b17      	ldr	r3, [pc, #92]	@ (80025b0 <HAL_RCC_OscConfig+0x274>)
 8002554:	2201      	movs	r2, #1
 8002556:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002558:	f7ff f810 	bl	800157c <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002560:	f7ff f80c 	bl	800157c <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e160      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002572:	4b0d      	ldr	r3, [pc, #52]	@ (80025a8 <HAL_RCC_OscConfig+0x26c>)
 8002574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0f0      	beq.n	8002560 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800257e:	2001      	movs	r0, #1
 8002580:	f000 face 	bl	8002b20 <RCC_Delay>
 8002584:	e01c      	b.n	80025c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002586:	4b0a      	ldr	r3, [pc, #40]	@ (80025b0 <HAL_RCC_OscConfig+0x274>)
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800258c:	f7fe fff6 	bl	800157c <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002592:	e00f      	b.n	80025b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002594:	f7fe fff2 	bl	800157c <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d908      	bls.n	80025b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e146      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
 80025a6:	bf00      	nop
 80025a8:	40021000 	.word	0x40021000
 80025ac:	42420000 	.word	0x42420000
 80025b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025b4:	4b92      	ldr	r3, [pc, #584]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 80025b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1e9      	bne.n	8002594 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 80a6 	beq.w	800271a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ce:	2300      	movs	r3, #0
 80025d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025d2:	4b8b      	ldr	r3, [pc, #556]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10d      	bne.n	80025fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025de:	4b88      	ldr	r3, [pc, #544]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	4a87      	ldr	r2, [pc, #540]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 80025e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025e8:	61d3      	str	r3, [r2, #28]
 80025ea:	4b85      	ldr	r3, [pc, #532]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025f2:	60bb      	str	r3, [r7, #8]
 80025f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025f6:	2301      	movs	r3, #1
 80025f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025fa:	4b82      	ldr	r3, [pc, #520]	@ (8002804 <HAL_RCC_OscConfig+0x4c8>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002602:	2b00      	cmp	r3, #0
 8002604:	d118      	bne.n	8002638 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002606:	4b7f      	ldr	r3, [pc, #508]	@ (8002804 <HAL_RCC_OscConfig+0x4c8>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a7e      	ldr	r2, [pc, #504]	@ (8002804 <HAL_RCC_OscConfig+0x4c8>)
 800260c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002610:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002612:	f7fe ffb3 	bl	800157c <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800261a:	f7fe ffaf 	bl	800157c <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b64      	cmp	r3, #100	@ 0x64
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e103      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800262c:	4b75      	ldr	r3, [pc, #468]	@ (8002804 <HAL_RCC_OscConfig+0x4c8>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0f0      	beq.n	800261a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d106      	bne.n	800264e <HAL_RCC_OscConfig+0x312>
 8002640:	4b6f      	ldr	r3, [pc, #444]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	4a6e      	ldr	r2, [pc, #440]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002646:	f043 0301 	orr.w	r3, r3, #1
 800264a:	6213      	str	r3, [r2, #32]
 800264c:	e02d      	b.n	80026aa <HAL_RCC_OscConfig+0x36e>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10c      	bne.n	8002670 <HAL_RCC_OscConfig+0x334>
 8002656:	4b6a      	ldr	r3, [pc, #424]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	4a69      	ldr	r2, [pc, #420]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 800265c:	f023 0301 	bic.w	r3, r3, #1
 8002660:	6213      	str	r3, [r2, #32]
 8002662:	4b67      	ldr	r3, [pc, #412]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	4a66      	ldr	r2, [pc, #408]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002668:	f023 0304 	bic.w	r3, r3, #4
 800266c:	6213      	str	r3, [r2, #32]
 800266e:	e01c      	b.n	80026aa <HAL_RCC_OscConfig+0x36e>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	2b05      	cmp	r3, #5
 8002676:	d10c      	bne.n	8002692 <HAL_RCC_OscConfig+0x356>
 8002678:	4b61      	ldr	r3, [pc, #388]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	4a60      	ldr	r2, [pc, #384]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 800267e:	f043 0304 	orr.w	r3, r3, #4
 8002682:	6213      	str	r3, [r2, #32]
 8002684:	4b5e      	ldr	r3, [pc, #376]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	4a5d      	ldr	r2, [pc, #372]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 800268a:	f043 0301 	orr.w	r3, r3, #1
 800268e:	6213      	str	r3, [r2, #32]
 8002690:	e00b      	b.n	80026aa <HAL_RCC_OscConfig+0x36e>
 8002692:	4b5b      	ldr	r3, [pc, #364]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	4a5a      	ldr	r2, [pc, #360]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002698:	f023 0301 	bic.w	r3, r3, #1
 800269c:	6213      	str	r3, [r2, #32]
 800269e:	4b58      	ldr	r3, [pc, #352]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	4a57      	ldr	r2, [pc, #348]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 80026a4:	f023 0304 	bic.w	r3, r3, #4
 80026a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d015      	beq.n	80026de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b2:	f7fe ff63 	bl	800157c <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026b8:	e00a      	b.n	80026d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ba:	f7fe ff5f 	bl	800157c <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e0b1      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d0:	4b4b      	ldr	r3, [pc, #300]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d0ee      	beq.n	80026ba <HAL_RCC_OscConfig+0x37e>
 80026dc:	e014      	b.n	8002708 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026de:	f7fe ff4d 	bl	800157c <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026e4:	e00a      	b.n	80026fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026e6:	f7fe ff49 	bl	800157c <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e09b      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026fc:	4b40      	ldr	r3, [pc, #256]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1ee      	bne.n	80026e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002708:	7dfb      	ldrb	r3, [r7, #23]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d105      	bne.n	800271a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800270e:	4b3c      	ldr	r3, [pc, #240]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	4a3b      	ldr	r2, [pc, #236]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002714:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002718:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 8087 	beq.w	8002832 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002724:	4b36      	ldr	r3, [pc, #216]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f003 030c 	and.w	r3, r3, #12
 800272c:	2b08      	cmp	r3, #8
 800272e:	d061      	beq.n	80027f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	69db      	ldr	r3, [r3, #28]
 8002734:	2b02      	cmp	r3, #2
 8002736:	d146      	bne.n	80027c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002738:	4b33      	ldr	r3, [pc, #204]	@ (8002808 <HAL_RCC_OscConfig+0x4cc>)
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273e:	f7fe ff1d 	bl	800157c <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002744:	e008      	b.n	8002758 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002746:	f7fe ff19 	bl	800157c <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e06d      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002758:	4b29      	ldr	r3, [pc, #164]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1f0      	bne.n	8002746 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800276c:	d108      	bne.n	8002780 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800276e:	4b24      	ldr	r3, [pc, #144]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	4921      	ldr	r1, [pc, #132]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 800277c:	4313      	orrs	r3, r2
 800277e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002780:	4b1f      	ldr	r3, [pc, #124]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a19      	ldr	r1, [r3, #32]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002790:	430b      	orrs	r3, r1
 8002792:	491b      	ldr	r1, [pc, #108]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002794:	4313      	orrs	r3, r2
 8002796:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002798:	4b1b      	ldr	r3, [pc, #108]	@ (8002808 <HAL_RCC_OscConfig+0x4cc>)
 800279a:	2201      	movs	r2, #1
 800279c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279e:	f7fe feed 	bl	800157c <HAL_GetTick>
 80027a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027a4:	e008      	b.n	80027b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a6:	f7fe fee9 	bl	800157c <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e03d      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027b8:	4b11      	ldr	r3, [pc, #68]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d0f0      	beq.n	80027a6 <HAL_RCC_OscConfig+0x46a>
 80027c4:	e035      	b.n	8002832 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c6:	4b10      	ldr	r3, [pc, #64]	@ (8002808 <HAL_RCC_OscConfig+0x4cc>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027cc:	f7fe fed6 	bl	800157c <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d4:	f7fe fed2 	bl	800157c <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e026      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027e6:	4b06      	ldr	r3, [pc, #24]	@ (8002800 <HAL_RCC_OscConfig+0x4c4>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1f0      	bne.n	80027d4 <HAL_RCC_OscConfig+0x498>
 80027f2:	e01e      	b.n	8002832 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d107      	bne.n	800280c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e019      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
 8002800:	40021000 	.word	0x40021000
 8002804:	40007000 	.word	0x40007000
 8002808:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800280c:	4b0b      	ldr	r3, [pc, #44]	@ (800283c <HAL_RCC_OscConfig+0x500>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	429a      	cmp	r2, r3
 800281e:	d106      	bne.n	800282e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800282a:	429a      	cmp	r2, r3
 800282c:	d001      	beq.n	8002832 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e000      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40021000 	.word	0x40021000

08002840 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d101      	bne.n	8002854 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e0d0      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002854:	4b6a      	ldr	r3, [pc, #424]	@ (8002a00 <HAL_RCC_ClockConfig+0x1c0>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0307 	and.w	r3, r3, #7
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	429a      	cmp	r2, r3
 8002860:	d910      	bls.n	8002884 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002862:	4b67      	ldr	r3, [pc, #412]	@ (8002a00 <HAL_RCC_ClockConfig+0x1c0>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f023 0207 	bic.w	r2, r3, #7
 800286a:	4965      	ldr	r1, [pc, #404]	@ (8002a00 <HAL_RCC_ClockConfig+0x1c0>)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	4313      	orrs	r3, r2
 8002870:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002872:	4b63      	ldr	r3, [pc, #396]	@ (8002a00 <HAL_RCC_ClockConfig+0x1c0>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0307 	and.w	r3, r3, #7
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	429a      	cmp	r2, r3
 800287e:	d001      	beq.n	8002884 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e0b8      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d020      	beq.n	80028d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	2b00      	cmp	r3, #0
 800289a:	d005      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800289c:	4b59      	ldr	r3, [pc, #356]	@ (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	4a58      	ldr	r2, [pc, #352]	@ (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 80028a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80028a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0308 	and.w	r3, r3, #8
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d005      	beq.n	80028c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028b4:	4b53      	ldr	r3, [pc, #332]	@ (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	4a52      	ldr	r2, [pc, #328]	@ (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 80028ba:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80028be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028c0:	4b50      	ldr	r3, [pc, #320]	@ (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	494d      	ldr	r1, [pc, #308]	@ (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d040      	beq.n	8002960 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d107      	bne.n	80028f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028e6:	4b47      	ldr	r3, [pc, #284]	@ (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d115      	bne.n	800291e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e07f      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d107      	bne.n	800290e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028fe:	4b41      	ldr	r3, [pc, #260]	@ (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d109      	bne.n	800291e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e073      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800290e:	4b3d      	ldr	r3, [pc, #244]	@ (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e06b      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800291e:	4b39      	ldr	r3, [pc, #228]	@ (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f023 0203 	bic.w	r2, r3, #3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	4936      	ldr	r1, [pc, #216]	@ (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 800292c:	4313      	orrs	r3, r2
 800292e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002930:	f7fe fe24 	bl	800157c <HAL_GetTick>
 8002934:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002936:	e00a      	b.n	800294e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002938:	f7fe fe20 	bl	800157c <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002946:	4293      	cmp	r3, r2
 8002948:	d901      	bls.n	800294e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e053      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800294e:	4b2d      	ldr	r3, [pc, #180]	@ (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f003 020c 	and.w	r2, r3, #12
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	429a      	cmp	r2, r3
 800295e:	d1eb      	bne.n	8002938 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002960:	4b27      	ldr	r3, [pc, #156]	@ (8002a00 <HAL_RCC_ClockConfig+0x1c0>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	429a      	cmp	r2, r3
 800296c:	d210      	bcs.n	8002990 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800296e:	4b24      	ldr	r3, [pc, #144]	@ (8002a00 <HAL_RCC_ClockConfig+0x1c0>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f023 0207 	bic.w	r2, r3, #7
 8002976:	4922      	ldr	r1, [pc, #136]	@ (8002a00 <HAL_RCC_ClockConfig+0x1c0>)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	4313      	orrs	r3, r2
 800297c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800297e:	4b20      	ldr	r3, [pc, #128]	@ (8002a00 <HAL_RCC_ClockConfig+0x1c0>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	429a      	cmp	r2, r3
 800298a:	d001      	beq.n	8002990 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e032      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0304 	and.w	r3, r3, #4
 8002998:	2b00      	cmp	r3, #0
 800299a:	d008      	beq.n	80029ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800299c:	4b19      	ldr	r3, [pc, #100]	@ (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	4916      	ldr	r1, [pc, #88]	@ (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0308 	and.w	r3, r3, #8
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d009      	beq.n	80029ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029ba:	4b12      	ldr	r3, [pc, #72]	@ (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	490e      	ldr	r1, [pc, #56]	@ (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029ce:	f000 f821 	bl	8002a14 <HAL_RCC_GetSysClockFreq>
 80029d2:	4602      	mov	r2, r0
 80029d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	091b      	lsrs	r3, r3, #4
 80029da:	f003 030f 	and.w	r3, r3, #15
 80029de:	490a      	ldr	r1, [pc, #40]	@ (8002a08 <HAL_RCC_ClockConfig+0x1c8>)
 80029e0:	5ccb      	ldrb	r3, [r1, r3]
 80029e2:	fa22 f303 	lsr.w	r3, r2, r3
 80029e6:	4a09      	ldr	r2, [pc, #36]	@ (8002a0c <HAL_RCC_ClockConfig+0x1cc>)
 80029e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029ea:	4b09      	ldr	r3, [pc, #36]	@ (8002a10 <HAL_RCC_ClockConfig+0x1d0>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7fe fd82 	bl	80014f8 <HAL_InitTick>

  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40022000 	.word	0x40022000
 8002a04:	40021000 	.word	0x40021000
 8002a08:	08005c64 	.word	0x08005c64
 8002a0c:	20000010 	.word	0x20000010
 8002a10:	20000014 	.word	0x20000014

08002a14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b087      	sub	sp, #28
 8002a18:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60bb      	str	r3, [r7, #8]
 8002a22:	2300      	movs	r3, #0
 8002a24:	617b      	str	r3, [r7, #20]
 8002a26:	2300      	movs	r3, #0
 8002a28:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a2e:	4b1e      	ldr	r3, [pc, #120]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f003 030c 	and.w	r3, r3, #12
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	d002      	beq.n	8002a44 <HAL_RCC_GetSysClockFreq+0x30>
 8002a3e:	2b08      	cmp	r3, #8
 8002a40:	d003      	beq.n	8002a4a <HAL_RCC_GetSysClockFreq+0x36>
 8002a42:	e027      	b.n	8002a94 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a44:	4b19      	ldr	r3, [pc, #100]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x98>)
 8002a46:	613b      	str	r3, [r7, #16]
      break;
 8002a48:	e027      	b.n	8002a9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	0c9b      	lsrs	r3, r3, #18
 8002a4e:	f003 030f 	and.w	r3, r3, #15
 8002a52:	4a17      	ldr	r2, [pc, #92]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a54:	5cd3      	ldrb	r3, [r2, r3]
 8002a56:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d010      	beq.n	8002a84 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a62:	4b11      	ldr	r3, [pc, #68]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	0c5b      	lsrs	r3, r3, #17
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	4a11      	ldr	r2, [pc, #68]	@ (8002ab4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a6e:	5cd3      	ldrb	r3, [r2, r3]
 8002a70:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a0d      	ldr	r2, [pc, #52]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x98>)
 8002a76:	fb03 f202 	mul.w	r2, r3, r2
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a80:	617b      	str	r3, [r7, #20]
 8002a82:	e004      	b.n	8002a8e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a0c      	ldr	r2, [pc, #48]	@ (8002ab8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a88:	fb02 f303 	mul.w	r3, r2, r3
 8002a8c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	613b      	str	r3, [r7, #16]
      break;
 8002a92:	e002      	b.n	8002a9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a94:	4b05      	ldr	r3, [pc, #20]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x98>)
 8002a96:	613b      	str	r3, [r7, #16]
      break;
 8002a98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a9a:	693b      	ldr	r3, [r7, #16]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	371c      	adds	r7, #28
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bc80      	pop	{r7}
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	007a1200 	.word	0x007a1200
 8002ab0:	08005c7c 	.word	0x08005c7c
 8002ab4:	08005c8c 	.word	0x08005c8c
 8002ab8:	003d0900 	.word	0x003d0900

08002abc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ac0:	4b02      	ldr	r3, [pc, #8]	@ (8002acc <HAL_RCC_GetHCLKFreq+0x10>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bc80      	pop	{r7}
 8002aca:	4770      	bx	lr
 8002acc:	20000010 	.word	0x20000010

08002ad0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ad4:	f7ff fff2 	bl	8002abc <HAL_RCC_GetHCLKFreq>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	4b05      	ldr	r3, [pc, #20]	@ (8002af0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	0a1b      	lsrs	r3, r3, #8
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	4903      	ldr	r1, [pc, #12]	@ (8002af4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ae6:	5ccb      	ldrb	r3, [r1, r3]
 8002ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40021000 	.word	0x40021000
 8002af4:	08005c74 	.word	0x08005c74

08002af8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002afc:	f7ff ffde 	bl	8002abc <HAL_RCC_GetHCLKFreq>
 8002b00:	4602      	mov	r2, r0
 8002b02:	4b05      	ldr	r3, [pc, #20]	@ (8002b18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	0adb      	lsrs	r3, r3, #11
 8002b08:	f003 0307 	and.w	r3, r3, #7
 8002b0c:	4903      	ldr	r1, [pc, #12]	@ (8002b1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b0e:	5ccb      	ldrb	r3, [r1, r3]
 8002b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	08005c74 	.word	0x08005c74

08002b20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b28:	4b0a      	ldr	r3, [pc, #40]	@ (8002b54 <RCC_Delay+0x34>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a0a      	ldr	r2, [pc, #40]	@ (8002b58 <RCC_Delay+0x38>)
 8002b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b32:	0a5b      	lsrs	r3, r3, #9
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	fb02 f303 	mul.w	r3, r2, r3
 8002b3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b3c:	bf00      	nop
  }
  while (Delay --);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	1e5a      	subs	r2, r3, #1
 8002b42:	60fa      	str	r2, [r7, #12]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1f9      	bne.n	8002b3c <RCC_Delay+0x1c>
}
 8002b48:	bf00      	nop
 8002b4a:	bf00      	nop
 8002b4c:	3714      	adds	r7, #20
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr
 8002b54:	20000010 	.word	0x20000010
 8002b58:	10624dd3 	.word	0x10624dd3

08002b5c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	613b      	str	r3, [r7, #16]
 8002b68:	2300      	movs	r3, #0
 8002b6a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d07d      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b7c:	4b4f      	ldr	r3, [pc, #316]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b7e:	69db      	ldr	r3, [r3, #28]
 8002b80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10d      	bne.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b88:	4b4c      	ldr	r3, [pc, #304]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b8a:	69db      	ldr	r3, [r3, #28]
 8002b8c:	4a4b      	ldr	r2, [pc, #300]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b92:	61d3      	str	r3, [r2, #28]
 8002b94:	4b49      	ldr	r3, [pc, #292]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b96:	69db      	ldr	r3, [r3, #28]
 8002b98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b9c:	60bb      	str	r3, [r7, #8]
 8002b9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba4:	4b46      	ldr	r3, [pc, #280]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d118      	bne.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bb0:	4b43      	ldr	r3, [pc, #268]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a42      	ldr	r2, [pc, #264]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bbc:	f7fe fcde 	bl	800157c <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bc4:	f7fe fcda 	bl	800157c <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b64      	cmp	r3, #100	@ 0x64
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e06d      	b.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd6:	4b3a      	ldr	r3, [pc, #232]	@ (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d0f0      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002be2:	4b36      	ldr	r3, [pc, #216]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d02e      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d027      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c00:	4b2e      	ldr	r3, [pc, #184]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c08:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c0a:	4b2e      	ldr	r3, [pc, #184]	@ (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c10:	4b2c      	ldr	r3, [pc, #176]	@ (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c16:	4a29      	ldr	r2, [pc, #164]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d014      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c26:	f7fe fca9 	bl	800157c <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c2c:	e00a      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c2e:	f7fe fca5 	bl	800157c <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e036      	b.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c44:	4b1d      	ldr	r3, [pc, #116]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d0ee      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c50:	4b1a      	ldr	r3, [pc, #104]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	4917      	ldr	r1, [pc, #92]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c62:	7dfb      	ldrb	r3, [r7, #23]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d105      	bne.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c68:	4b14      	ldr	r3, [pc, #80]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c6a:	69db      	ldr	r3, [r3, #28]
 8002c6c:	4a13      	ldr	r2, [pc, #76]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c72:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d008      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c80:	4b0e      	ldr	r3, [pc, #56]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	490b      	ldr	r1, [pc, #44]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0310 	and.w	r3, r3, #16
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d008      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c9e:	4b07      	ldr	r3, [pc, #28]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	4904      	ldr	r1, [pc, #16]	@ (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3718      	adds	r7, #24
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	40007000 	.word	0x40007000
 8002cc4:	42420440 	.word	0x42420440

08002cc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e041      	b.n	8002d5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d106      	bne.n	8002cf4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7fe fa92 	bl	8001218 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	3304      	adds	r3, #4
 8002d04:	4619      	mov	r1, r3
 8002d06:	4610      	mov	r0, r2
 8002d08:	f000 f9aa 	bl	8003060 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b082      	sub	sp, #8
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e041      	b.n	8002dfc <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d106      	bne.n	8002d92 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 f839 	bl	8002e04 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2202      	movs	r2, #2
 8002d96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	3304      	adds	r3, #4
 8002da2:	4619      	mov	r1, r3
 8002da4:	4610      	mov	r0, r2
 8002da6:	f000 f95b 	bl	8003060 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2201      	movs	r2, #1
 8002db6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bc80      	pop	{r7}
 8002e14:	4770      	bx	lr
	...

08002e18 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e24:	2300      	movs	r3, #0
 8002e26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d101      	bne.n	8002e36 <HAL_TIM_OC_ConfigChannel+0x1e>
 8002e32:	2302      	movs	r3, #2
 8002e34:	e048      	b.n	8002ec8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b0c      	cmp	r3, #12
 8002e42:	d839      	bhi.n	8002eb8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8002e44:	a201      	add	r2, pc, #4	@ (adr r2, 8002e4c <HAL_TIM_OC_ConfigChannel+0x34>)
 8002e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e4a:	bf00      	nop
 8002e4c:	08002e81 	.word	0x08002e81
 8002e50:	08002eb9 	.word	0x08002eb9
 8002e54:	08002eb9 	.word	0x08002eb9
 8002e58:	08002eb9 	.word	0x08002eb9
 8002e5c:	08002e8f 	.word	0x08002e8f
 8002e60:	08002eb9 	.word	0x08002eb9
 8002e64:	08002eb9 	.word	0x08002eb9
 8002e68:	08002eb9 	.word	0x08002eb9
 8002e6c:	08002e9d 	.word	0x08002e9d
 8002e70:	08002eb9 	.word	0x08002eb9
 8002e74:	08002eb9 	.word	0x08002eb9
 8002e78:	08002eb9 	.word	0x08002eb9
 8002e7c:	08002eab 	.word	0x08002eab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68b9      	ldr	r1, [r7, #8]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 f958 	bl	800313c <TIM_OC1_SetConfig>
      break;
 8002e8c:	e017      	b.n	8002ebe <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68b9      	ldr	r1, [r7, #8]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f000 f9b7 	bl	8003208 <TIM_OC2_SetConfig>
      break;
 8002e9a:	e010      	b.n	8002ebe <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68b9      	ldr	r1, [r7, #8]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f000 fa1a 	bl	80032dc <TIM_OC3_SetConfig>
      break;
 8002ea8:	e009      	b.n	8002ebe <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68b9      	ldr	r1, [r7, #8]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f000 fa7d 	bl	80033b0 <TIM_OC4_SetConfig>
      break;
 8002eb6:	e002      	b.n	8002ebe <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	75fb      	strb	r3, [r7, #23]
      break;
 8002ebc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3718      	adds	r7, #24
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002eda:	2300      	movs	r3, #0
 8002edc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d101      	bne.n	8002eec <HAL_TIM_ConfigClockSource+0x1c>
 8002ee8:	2302      	movs	r3, #2
 8002eea:	e0b4      	b.n	8003056 <HAL_TIM_ConfigClockSource+0x186>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002f0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002f12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68ba      	ldr	r2, [r7, #8]
 8002f1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f24:	d03e      	beq.n	8002fa4 <HAL_TIM_ConfigClockSource+0xd4>
 8002f26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f2a:	f200 8087 	bhi.w	800303c <HAL_TIM_ConfigClockSource+0x16c>
 8002f2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f32:	f000 8086 	beq.w	8003042 <HAL_TIM_ConfigClockSource+0x172>
 8002f36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f3a:	d87f      	bhi.n	800303c <HAL_TIM_ConfigClockSource+0x16c>
 8002f3c:	2b70      	cmp	r3, #112	@ 0x70
 8002f3e:	d01a      	beq.n	8002f76 <HAL_TIM_ConfigClockSource+0xa6>
 8002f40:	2b70      	cmp	r3, #112	@ 0x70
 8002f42:	d87b      	bhi.n	800303c <HAL_TIM_ConfigClockSource+0x16c>
 8002f44:	2b60      	cmp	r3, #96	@ 0x60
 8002f46:	d050      	beq.n	8002fea <HAL_TIM_ConfigClockSource+0x11a>
 8002f48:	2b60      	cmp	r3, #96	@ 0x60
 8002f4a:	d877      	bhi.n	800303c <HAL_TIM_ConfigClockSource+0x16c>
 8002f4c:	2b50      	cmp	r3, #80	@ 0x50
 8002f4e:	d03c      	beq.n	8002fca <HAL_TIM_ConfigClockSource+0xfa>
 8002f50:	2b50      	cmp	r3, #80	@ 0x50
 8002f52:	d873      	bhi.n	800303c <HAL_TIM_ConfigClockSource+0x16c>
 8002f54:	2b40      	cmp	r3, #64	@ 0x40
 8002f56:	d058      	beq.n	800300a <HAL_TIM_ConfigClockSource+0x13a>
 8002f58:	2b40      	cmp	r3, #64	@ 0x40
 8002f5a:	d86f      	bhi.n	800303c <HAL_TIM_ConfigClockSource+0x16c>
 8002f5c:	2b30      	cmp	r3, #48	@ 0x30
 8002f5e:	d064      	beq.n	800302a <HAL_TIM_ConfigClockSource+0x15a>
 8002f60:	2b30      	cmp	r3, #48	@ 0x30
 8002f62:	d86b      	bhi.n	800303c <HAL_TIM_ConfigClockSource+0x16c>
 8002f64:	2b20      	cmp	r3, #32
 8002f66:	d060      	beq.n	800302a <HAL_TIM_ConfigClockSource+0x15a>
 8002f68:	2b20      	cmp	r3, #32
 8002f6a:	d867      	bhi.n	800303c <HAL_TIM_ConfigClockSource+0x16c>
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d05c      	beq.n	800302a <HAL_TIM_ConfigClockSource+0x15a>
 8002f70:	2b10      	cmp	r3, #16
 8002f72:	d05a      	beq.n	800302a <HAL_TIM_ConfigClockSource+0x15a>
 8002f74:	e062      	b.n	800303c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f86:	f000 fad8 	bl	800353a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002f98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	609a      	str	r2, [r3, #8]
      break;
 8002fa2:	e04f      	b.n	8003044 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002fb4:	f000 fac1 	bl	800353a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689a      	ldr	r2, [r3, #8]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002fc6:	609a      	str	r2, [r3, #8]
      break;
 8002fc8:	e03c      	b.n	8003044 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	f000 fa38 	bl	800344c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2150      	movs	r1, #80	@ 0x50
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f000 fa8f 	bl	8003506 <TIM_ITRx_SetConfig>
      break;
 8002fe8:	e02c      	b.n	8003044 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	f000 fa56 	bl	80034a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2160      	movs	r1, #96	@ 0x60
 8003002:	4618      	mov	r0, r3
 8003004:	f000 fa7f 	bl	8003506 <TIM_ITRx_SetConfig>
      break;
 8003008:	e01c      	b.n	8003044 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003016:	461a      	mov	r2, r3
 8003018:	f000 fa18 	bl	800344c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2140      	movs	r1, #64	@ 0x40
 8003022:	4618      	mov	r0, r3
 8003024:	f000 fa6f 	bl	8003506 <TIM_ITRx_SetConfig>
      break;
 8003028:	e00c      	b.n	8003044 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4619      	mov	r1, r3
 8003034:	4610      	mov	r0, r2
 8003036:	f000 fa66 	bl	8003506 <TIM_ITRx_SetConfig>
      break;
 800303a:	e003      	b.n	8003044 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	73fb      	strb	r3, [r7, #15]
      break;
 8003040:	e000      	b.n	8003044 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003042:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003054:	7bfb      	ldrb	r3, [r7, #15]
}
 8003056:	4618      	mov	r0, r3
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
	...

08003060 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a2f      	ldr	r2, [pc, #188]	@ (8003130 <TIM_Base_SetConfig+0xd0>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d00b      	beq.n	8003090 <TIM_Base_SetConfig+0x30>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800307e:	d007      	beq.n	8003090 <TIM_Base_SetConfig+0x30>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a2c      	ldr	r2, [pc, #176]	@ (8003134 <TIM_Base_SetConfig+0xd4>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d003      	beq.n	8003090 <TIM_Base_SetConfig+0x30>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a2b      	ldr	r2, [pc, #172]	@ (8003138 <TIM_Base_SetConfig+0xd8>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d108      	bne.n	80030a2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003096:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	4313      	orrs	r3, r2
 80030a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a22      	ldr	r2, [pc, #136]	@ (8003130 <TIM_Base_SetConfig+0xd0>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d00b      	beq.n	80030c2 <TIM_Base_SetConfig+0x62>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030b0:	d007      	beq.n	80030c2 <TIM_Base_SetConfig+0x62>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a1f      	ldr	r2, [pc, #124]	@ (8003134 <TIM_Base_SetConfig+0xd4>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d003      	beq.n	80030c2 <TIM_Base_SetConfig+0x62>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a1e      	ldr	r2, [pc, #120]	@ (8003138 <TIM_Base_SetConfig+0xd8>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d108      	bne.n	80030d4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	4313      	orrs	r3, r2
 80030e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a0d      	ldr	r2, [pc, #52]	@ (8003130 <TIM_Base_SetConfig+0xd0>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d103      	bne.n	8003108 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	691a      	ldr	r2, [r3, #16]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d005      	beq.n	8003126 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	f023 0201 	bic.w	r2, r3, #1
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	611a      	str	r2, [r3, #16]
  }
}
 8003126:	bf00      	nop
 8003128:	3714      	adds	r7, #20
 800312a:	46bd      	mov	sp, r7
 800312c:	bc80      	pop	{r7}
 800312e:	4770      	bx	lr
 8003130:	40012c00 	.word	0x40012c00
 8003134:	40000400 	.word	0x40000400
 8003138:	40000800 	.word	0x40000800

0800313c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800313c:	b480      	push	{r7}
 800313e:	b087      	sub	sp, #28
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a1b      	ldr	r3, [r3, #32]
 800314a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	f023 0201 	bic.w	r2, r3, #1
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800316a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f023 0303 	bic.w	r3, r3, #3
 8003172:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	4313      	orrs	r3, r2
 800317c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	f023 0302 	bic.w	r3, r3, #2
 8003184:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	4313      	orrs	r3, r2
 800318e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a1c      	ldr	r2, [pc, #112]	@ (8003204 <TIM_OC1_SetConfig+0xc8>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d10c      	bne.n	80031b2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	f023 0308 	bic.w	r3, r3, #8
 800319e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	697a      	ldr	r2, [r7, #20]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	f023 0304 	bic.w	r3, r3, #4
 80031b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a13      	ldr	r2, [pc, #76]	@ (8003204 <TIM_OC1_SetConfig+0xc8>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d111      	bne.n	80031de <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80031c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	4313      	orrs	r3, r2
 80031dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	621a      	str	r2, [r3, #32]
}
 80031f8:	bf00      	nop
 80031fa:	371c      	adds	r7, #28
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bc80      	pop	{r7}
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	40012c00 	.word	0x40012c00

08003208 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003208:	b480      	push	{r7}
 800320a:	b087      	sub	sp, #28
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	f023 0210 	bic.w	r2, r3, #16
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800323e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	021b      	lsls	r3, r3, #8
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	4313      	orrs	r3, r2
 800324a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	f023 0320 	bic.w	r3, r3, #32
 8003252:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	011b      	lsls	r3, r3, #4
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	4313      	orrs	r3, r2
 800325e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a1d      	ldr	r2, [pc, #116]	@ (80032d8 <TIM_OC2_SetConfig+0xd0>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d10d      	bne.n	8003284 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800326e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	4313      	orrs	r3, r2
 800327a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003282:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a14      	ldr	r2, [pc, #80]	@ (80032d8 <TIM_OC2_SetConfig+0xd0>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d113      	bne.n	80032b4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003292:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800329a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	621a      	str	r2, [r3, #32]
}
 80032ce:	bf00      	nop
 80032d0:	371c      	adds	r7, #28
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bc80      	pop	{r7}
 80032d6:	4770      	bx	lr
 80032d8:	40012c00 	.word	0x40012c00

080032dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032dc:	b480      	push	{r7}
 80032de:	b087      	sub	sp, #28
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800330a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f023 0303 	bic.w	r3, r3, #3
 8003312:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	4313      	orrs	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003324:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	021b      	lsls	r3, r3, #8
 800332c:	697a      	ldr	r2, [r7, #20]
 800332e:	4313      	orrs	r3, r2
 8003330:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a1d      	ldr	r2, [pc, #116]	@ (80033ac <TIM_OC3_SetConfig+0xd0>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d10d      	bne.n	8003356 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003340:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	021b      	lsls	r3, r3, #8
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	4313      	orrs	r3, r2
 800334c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003354:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a14      	ldr	r2, [pc, #80]	@ (80033ac <TIM_OC3_SetConfig+0xd0>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d113      	bne.n	8003386 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003364:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800336c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	011b      	lsls	r3, r3, #4
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	4313      	orrs	r3, r2
 8003378:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	011b      	lsls	r3, r3, #4
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	4313      	orrs	r3, r2
 8003384:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	621a      	str	r2, [r3, #32]
}
 80033a0:	bf00      	nop
 80033a2:	371c      	adds	r7, #28
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bc80      	pop	{r7}
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	40012c00 	.word	0x40012c00

080033b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b087      	sub	sp, #28
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	021b      	lsls	r3, r3, #8
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80033fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	031b      	lsls	r3, r3, #12
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	4313      	orrs	r3, r2
 8003406:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a0f      	ldr	r2, [pc, #60]	@ (8003448 <TIM_OC4_SetConfig+0x98>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d109      	bne.n	8003424 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003416:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	019b      	lsls	r3, r3, #6
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	4313      	orrs	r3, r2
 8003422:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	621a      	str	r2, [r3, #32]
}
 800343e:	bf00      	nop
 8003440:	371c      	adds	r7, #28
 8003442:	46bd      	mov	sp, r7
 8003444:	bc80      	pop	{r7}
 8003446:	4770      	bx	lr
 8003448:	40012c00 	.word	0x40012c00

0800344c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800344c:	b480      	push	{r7}
 800344e:	b087      	sub	sp, #28
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6a1b      	ldr	r3, [r3, #32]
 800345c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	f023 0201 	bic.w	r2, r3, #1
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003476:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	011b      	lsls	r3, r3, #4
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	4313      	orrs	r3, r2
 8003480:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f023 030a 	bic.w	r3, r3, #10
 8003488:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	4313      	orrs	r3, r2
 8003490:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	621a      	str	r2, [r3, #32]
}
 800349e:	bf00      	nop
 80034a0:	371c      	adds	r7, #28
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bc80      	pop	{r7}
 80034a6:	4770      	bx	lr

080034a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b087      	sub	sp, #28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	f023 0210 	bic.w	r2, r3, #16
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80034d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	031b      	lsls	r3, r3, #12
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	4313      	orrs	r3, r2
 80034dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80034e4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	011b      	lsls	r3, r3, #4
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	621a      	str	r2, [r3, #32]
}
 80034fc:	bf00      	nop
 80034fe:	371c      	adds	r7, #28
 8003500:	46bd      	mov	sp, r7
 8003502:	bc80      	pop	{r7}
 8003504:	4770      	bx	lr

08003506 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003506:	b480      	push	{r7}
 8003508:	b085      	sub	sp, #20
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
 800350e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800351c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	4313      	orrs	r3, r2
 8003524:	f043 0307 	orr.w	r3, r3, #7
 8003528:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	609a      	str	r2, [r3, #8]
}
 8003530:	bf00      	nop
 8003532:	3714      	adds	r7, #20
 8003534:	46bd      	mov	sp, r7
 8003536:	bc80      	pop	{r7}
 8003538:	4770      	bx	lr

0800353a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800353a:	b480      	push	{r7}
 800353c:	b087      	sub	sp, #28
 800353e:	af00      	add	r7, sp, #0
 8003540:	60f8      	str	r0, [r7, #12]
 8003542:	60b9      	str	r1, [r7, #8]
 8003544:	607a      	str	r2, [r7, #4]
 8003546:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003554:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	021a      	lsls	r2, r3, #8
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	431a      	orrs	r2, r3
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	4313      	orrs	r3, r2
 8003562:	697a      	ldr	r2, [r7, #20]
 8003564:	4313      	orrs	r3, r2
 8003566:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	609a      	str	r2, [r3, #8]
}
 800356e:	bf00      	nop
 8003570:	371c      	adds	r7, #28
 8003572:	46bd      	mov	sp, r7
 8003574:	bc80      	pop	{r7}
 8003576:	4770      	bx	lr

08003578 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003588:	2b01      	cmp	r3, #1
 800358a:	d101      	bne.n	8003590 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800358c:	2302      	movs	r3, #2
 800358e:	e046      	b.n	800361e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2202      	movs	r2, #2
 800359c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	4313      	orrs	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a16      	ldr	r2, [pc, #88]	@ (8003628 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d00e      	beq.n	80035f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035dc:	d009      	beq.n	80035f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a12      	ldr	r2, [pc, #72]	@ (800362c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d004      	beq.n	80035f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a10      	ldr	r2, [pc, #64]	@ (8003630 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d10c      	bne.n	800360c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	4313      	orrs	r3, r2
 8003602:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3714      	adds	r7, #20
 8003622:	46bd      	mov	sp, r7
 8003624:	bc80      	pop	{r7}
 8003626:	4770      	bx	lr
 8003628:	40012c00 	.word	0x40012c00
 800362c:	40000400 	.word	0x40000400
 8003630:	40000800 	.word	0x40000800

08003634 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e042      	b.n	80036cc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d106      	bne.n	8003660 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7fd fe80 	bl	8001360 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2224      	movs	r2, #36	@ 0x24
 8003664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68da      	ldr	r2, [r3, #12]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003676:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 fdb7 	bl	80041ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	691a      	ldr	r2, [r3, #16]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800368c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	695a      	ldr	r2, [r3, #20]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800369c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68da      	ldr	r2, [r3, #12]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2220      	movs	r2, #32
 80036b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2220      	movs	r2, #32
 80036c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3708      	adds	r7, #8
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b08a      	sub	sp, #40	@ 0x28
 80036d8:	af02      	add	r7, sp, #8
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	603b      	str	r3, [r7, #0]
 80036e0:	4613      	mov	r3, r2
 80036e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036e4:	2300      	movs	r3, #0
 80036e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	2b20      	cmp	r3, #32
 80036f2:	d175      	bne.n	80037e0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d002      	beq.n	8003700 <HAL_UART_Transmit+0x2c>
 80036fa:	88fb      	ldrh	r3, [r7, #6]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d101      	bne.n	8003704 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e06e      	b.n	80037e2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2221      	movs	r2, #33	@ 0x21
 800370e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003712:	f7fd ff33 	bl	800157c <HAL_GetTick>
 8003716:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	88fa      	ldrh	r2, [r7, #6]
 800371c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	88fa      	ldrh	r2, [r7, #6]
 8003722:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800372c:	d108      	bne.n	8003740 <HAL_UART_Transmit+0x6c>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d104      	bne.n	8003740 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003736:	2300      	movs	r3, #0
 8003738:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	61bb      	str	r3, [r7, #24]
 800373e:	e003      	b.n	8003748 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003744:	2300      	movs	r3, #0
 8003746:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003748:	e02e      	b.n	80037a8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	2200      	movs	r2, #0
 8003752:	2180      	movs	r1, #128	@ 0x80
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f000 fb1c 	bl	8003d92 <UART_WaitOnFlagUntilTimeout>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d005      	beq.n	800376c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2220      	movs	r2, #32
 8003764:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e03a      	b.n	80037e2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10b      	bne.n	800378a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	881b      	ldrh	r3, [r3, #0]
 8003776:	461a      	mov	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003780:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	3302      	adds	r3, #2
 8003786:	61bb      	str	r3, [r7, #24]
 8003788:	e007      	b.n	800379a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	781a      	ldrb	r2, [r3, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	3301      	adds	r3, #1
 8003798:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800379e:	b29b      	uxth	r3, r3
 80037a0:	3b01      	subs	r3, #1
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1cb      	bne.n	800374a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	9300      	str	r3, [sp, #0]
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	2200      	movs	r2, #0
 80037ba:	2140      	movs	r1, #64	@ 0x40
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f000 fae8 	bl	8003d92 <UART_WaitOnFlagUntilTimeout>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d005      	beq.n	80037d4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2220      	movs	r2, #32
 80037cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e006      	b.n	80037e2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2220      	movs	r2, #32
 80037d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80037dc:	2300      	movs	r3, #0
 80037de:	e000      	b.n	80037e2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80037e0:	2302      	movs	r3, #2
  }
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3720      	adds	r7, #32
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b084      	sub	sp, #16
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	60f8      	str	r0, [r7, #12]
 80037f2:	60b9      	str	r1, [r7, #8]
 80037f4:	4613      	mov	r3, r2
 80037f6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	2b20      	cmp	r3, #32
 8003802:	d112      	bne.n	800382a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d002      	beq.n	8003810 <HAL_UART_Receive_IT+0x26>
 800380a:	88fb      	ldrh	r3, [r7, #6]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d101      	bne.n	8003814 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e00b      	b.n	800382c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800381a:	88fb      	ldrh	r3, [r7, #6]
 800381c:	461a      	mov	r2, r3
 800381e:	68b9      	ldr	r1, [r7, #8]
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f000 fb0f 	bl	8003e44 <UART_Start_Receive_IT>
 8003826:	4603      	mov	r3, r0
 8003828:	e000      	b.n	800382c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800382a:	2302      	movs	r3, #2
  }
}
 800382c:	4618      	mov	r0, r3
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b0ba      	sub	sp, #232	@ 0xe8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800385a:	2300      	movs	r3, #0
 800385c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003860:	2300      	movs	r3, #0
 8003862:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800386a:	f003 030f 	and.w	r3, r3, #15
 800386e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003872:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10f      	bne.n	800389a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800387a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800387e:	f003 0320 	and.w	r3, r3, #32
 8003882:	2b00      	cmp	r3, #0
 8003884:	d009      	beq.n	800389a <HAL_UART_IRQHandler+0x66>
 8003886:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800388a:	f003 0320 	and.w	r3, r3, #32
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 fbec 	bl	8004070 <UART_Receive_IT>
      return;
 8003898:	e25b      	b.n	8003d52 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800389a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f000 80de 	beq.w	8003a60 <HAL_UART_IRQHandler+0x22c>
 80038a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038a8:	f003 0301 	and.w	r3, r3, #1
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d106      	bne.n	80038be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80038b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038b4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f000 80d1 	beq.w	8003a60 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80038be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00b      	beq.n	80038e2 <HAL_UART_IRQHandler+0xae>
 80038ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d005      	beq.n	80038e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038da:	f043 0201 	orr.w	r2, r3, #1
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038e6:	f003 0304 	and.w	r3, r3, #4
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00b      	beq.n	8003906 <HAL_UART_IRQHandler+0xd2>
 80038ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d005      	beq.n	8003906 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038fe:	f043 0202 	orr.w	r2, r3, #2
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00b      	beq.n	800392a <HAL_UART_IRQHandler+0xf6>
 8003912:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	2b00      	cmp	r3, #0
 800391c:	d005      	beq.n	800392a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003922:	f043 0204 	orr.w	r2, r3, #4
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800392a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800392e:	f003 0308 	and.w	r3, r3, #8
 8003932:	2b00      	cmp	r3, #0
 8003934:	d011      	beq.n	800395a <HAL_UART_IRQHandler+0x126>
 8003936:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800393a:	f003 0320 	and.w	r3, r3, #32
 800393e:	2b00      	cmp	r3, #0
 8003940:	d105      	bne.n	800394e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003942:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	d005      	beq.n	800395a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003952:	f043 0208 	orr.w	r2, r3, #8
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 81f2 	beq.w	8003d48 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003968:	f003 0320 	and.w	r3, r3, #32
 800396c:	2b00      	cmp	r3, #0
 800396e:	d008      	beq.n	8003982 <HAL_UART_IRQHandler+0x14e>
 8003970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003974:	f003 0320 	and.w	r3, r3, #32
 8003978:	2b00      	cmp	r3, #0
 800397a:	d002      	beq.n	8003982 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 fb77 	bl	8004070 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	695b      	ldr	r3, [r3, #20]
 8003988:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800398c:	2b00      	cmp	r3, #0
 800398e:	bf14      	ite	ne
 8003990:	2301      	movne	r3, #1
 8003992:	2300      	moveq	r3, #0
 8003994:	b2db      	uxtb	r3, r3
 8003996:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800399e:	f003 0308 	and.w	r3, r3, #8
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d103      	bne.n	80039ae <HAL_UART_IRQHandler+0x17a>
 80039a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d04f      	beq.n	8003a4e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 fa81 	bl	8003eb6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d041      	beq.n	8003a46 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	3314      	adds	r3, #20
 80039c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80039d0:	e853 3f00 	ldrex	r3, [r3]
 80039d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80039d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80039dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	3314      	adds	r3, #20
 80039ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80039ee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80039f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80039fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80039fe:	e841 2300 	strex	r3, r2, [r1]
 8003a02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003a06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1d9      	bne.n	80039c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d013      	beq.n	8003a3e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a1a:	4a7e      	ldr	r2, [pc, #504]	@ (8003c14 <HAL_UART_IRQHandler+0x3e0>)
 8003a1c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7fe f932 	bl	8001c8c <HAL_DMA_Abort_IT>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d016      	beq.n	8003a5c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003a38:	4610      	mov	r0, r2
 8003a3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a3c:	e00e      	b.n	8003a5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 f993 	bl	8003d6a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a44:	e00a      	b.n	8003a5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 f98f 	bl	8003d6a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a4c:	e006      	b.n	8003a5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 f98b 	bl	8003d6a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003a5a:	e175      	b.n	8003d48 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a5c:	bf00      	nop
    return;
 8003a5e:	e173      	b.n	8003d48 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	f040 814f 	bne.w	8003d08 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a6e:	f003 0310 	and.w	r3, r3, #16
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 8148 	beq.w	8003d08 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a7c:	f003 0310 	and.w	r3, r3, #16
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f000 8141 	beq.w	8003d08 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a86:	2300      	movs	r3, #0
 8003a88:	60bb      	str	r3, [r7, #8]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	60bb      	str	r3, [r7, #8]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	60bb      	str	r3, [r7, #8]
 8003a9a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f000 80b6 	beq.w	8003c18 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ab8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f000 8145 	beq.w	8003d4c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003ac6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003aca:	429a      	cmp	r2, r3
 8003acc:	f080 813e 	bcs.w	8003d4c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ad6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	2b20      	cmp	r3, #32
 8003ae0:	f000 8088 	beq.w	8003bf4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	330c      	adds	r3, #12
 8003aea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003af2:	e853 3f00 	ldrex	r3, [r3]
 8003af6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003afa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003afe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b02:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	330c      	adds	r3, #12
 8003b0c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003b10:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003b14:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b18:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003b1c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003b20:	e841 2300 	strex	r3, r2, [r1]
 8003b24:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003b28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1d9      	bne.n	8003ae4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	3314      	adds	r3, #20
 8003b36:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b38:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b3a:	e853 3f00 	ldrex	r3, [r3]
 8003b3e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003b40:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b42:	f023 0301 	bic.w	r3, r3, #1
 8003b46:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	3314      	adds	r3, #20
 8003b50:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003b54:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003b58:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b5a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003b5c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003b60:	e841 2300 	strex	r3, r2, [r1]
 8003b64:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003b66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1e1      	bne.n	8003b30 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	3314      	adds	r3, #20
 8003b72:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b74:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b76:	e853 3f00 	ldrex	r3, [r3]
 8003b7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003b7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	3314      	adds	r3, #20
 8003b8c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003b90:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003b92:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b94:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003b96:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003b98:	e841 2300 	strex	r3, r2, [r1]
 8003b9c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003b9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1e3      	bne.n	8003b6c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	330c      	adds	r3, #12
 8003bb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bbc:	e853 3f00 	ldrex	r3, [r3]
 8003bc0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003bc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bc4:	f023 0310 	bic.w	r3, r3, #16
 8003bc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	330c      	adds	r3, #12
 8003bd2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003bd6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003bd8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bda:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003bdc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003bde:	e841 2300 	strex	r3, r2, [r1]
 8003be2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003be4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1e3      	bne.n	8003bb2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7fe f811 	bl	8001c16 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	4619      	mov	r1, r3
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 f8b6 	bl	8003d7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c10:	e09c      	b.n	8003d4c <HAL_UART_IRQHandler+0x518>
 8003c12:	bf00      	nop
 8003c14:	08003f7b 	.word	0x08003f7b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 808e 	beq.w	8003d50 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003c34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f000 8089 	beq.w	8003d50 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	330c      	adds	r3, #12
 8003c44:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c48:	e853 3f00 	ldrex	r3, [r3]
 8003c4c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c54:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	330c      	adds	r3, #12
 8003c5e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003c62:	647a      	str	r2, [r7, #68]	@ 0x44
 8003c64:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c66:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c6a:	e841 2300 	strex	r3, r2, [r1]
 8003c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1e3      	bne.n	8003c3e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	3314      	adds	r3, #20
 8003c7c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c80:	e853 3f00 	ldrex	r3, [r3]
 8003c84:	623b      	str	r3, [r7, #32]
   return(result);
 8003c86:	6a3b      	ldr	r3, [r7, #32]
 8003c88:	f023 0301 	bic.w	r3, r3, #1
 8003c8c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	3314      	adds	r3, #20
 8003c96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003c9a:	633a      	str	r2, [r7, #48]	@ 0x30
 8003c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ca0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ca2:	e841 2300 	strex	r3, r2, [r1]
 8003ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1e3      	bne.n	8003c76 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2220      	movs	r2, #32
 8003cb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	330c      	adds	r3, #12
 8003cc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	e853 3f00 	ldrex	r3, [r3]
 8003cca:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f023 0310 	bic.w	r3, r3, #16
 8003cd2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	330c      	adds	r3, #12
 8003cdc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003ce0:	61fa      	str	r2, [r7, #28]
 8003ce2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce4:	69b9      	ldr	r1, [r7, #24]
 8003ce6:	69fa      	ldr	r2, [r7, #28]
 8003ce8:	e841 2300 	strex	r3, r2, [r1]
 8003cec:	617b      	str	r3, [r7, #20]
   return(result);
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1e3      	bne.n	8003cbc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003cfa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003cfe:	4619      	mov	r1, r3
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 f83b 	bl	8003d7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d06:	e023      	b.n	8003d50 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d009      	beq.n	8003d28 <HAL_UART_IRQHandler+0x4f4>
 8003d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d003      	beq.n	8003d28 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 f93e 	bl	8003fa2 <UART_Transmit_IT>
    return;
 8003d26:	e014      	b.n	8003d52 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00e      	beq.n	8003d52 <HAL_UART_IRQHandler+0x51e>
 8003d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d008      	beq.n	8003d52 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 f97d 	bl	8004040 <UART_EndTransmit_IT>
    return;
 8003d46:	e004      	b.n	8003d52 <HAL_UART_IRQHandler+0x51e>
    return;
 8003d48:	bf00      	nop
 8003d4a:	e002      	b.n	8003d52 <HAL_UART_IRQHandler+0x51e>
      return;
 8003d4c:	bf00      	nop
 8003d4e:	e000      	b.n	8003d52 <HAL_UART_IRQHandler+0x51e>
      return;
 8003d50:	bf00      	nop
  }
}
 8003d52:	37e8      	adds	r7, #232	@ 0xe8
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bc80      	pop	{r7}
 8003d68:	4770      	bx	lr

08003d6a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b083      	sub	sp, #12
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d72:	bf00      	nop
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bc80      	pop	{r7}
 8003d7a:	4770      	bx	lr

08003d7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	460b      	mov	r3, r1
 8003d86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bc80      	pop	{r7}
 8003d90:	4770      	bx	lr

08003d92 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b086      	sub	sp, #24
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	60f8      	str	r0, [r7, #12]
 8003d9a:	60b9      	str	r1, [r7, #8]
 8003d9c:	603b      	str	r3, [r7, #0]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003da2:	e03b      	b.n	8003e1c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003da4:	6a3b      	ldr	r3, [r7, #32]
 8003da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003daa:	d037      	beq.n	8003e1c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dac:	f7fd fbe6 	bl	800157c <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	6a3a      	ldr	r2, [r7, #32]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d302      	bcc.n	8003dc2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003dbc:	6a3b      	ldr	r3, [r7, #32]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e03a      	b.n	8003e3c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	f003 0304 	and.w	r3, r3, #4
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d023      	beq.n	8003e1c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	2b80      	cmp	r3, #128	@ 0x80
 8003dd8:	d020      	beq.n	8003e1c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	2b40      	cmp	r3, #64	@ 0x40
 8003dde:	d01d      	beq.n	8003e1c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0308 	and.w	r3, r3, #8
 8003dea:	2b08      	cmp	r3, #8
 8003dec:	d116      	bne.n	8003e1c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003dee:	2300      	movs	r3, #0
 8003df0:	617b      	str	r3, [r7, #20]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	617b      	str	r3, [r7, #20]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	617b      	str	r3, [r7, #20]
 8003e02:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e04:	68f8      	ldr	r0, [r7, #12]
 8003e06:	f000 f856 	bl	8003eb6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2208      	movs	r2, #8
 8003e0e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e00f      	b.n	8003e3c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	4013      	ands	r3, r2
 8003e26:	68ba      	ldr	r2, [r7, #8]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	bf0c      	ite	eq
 8003e2c:	2301      	moveq	r3, #1
 8003e2e:	2300      	movne	r3, #0
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	461a      	mov	r2, r3
 8003e34:	79fb      	ldrb	r3, [r7, #7]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d0b4      	beq.n	8003da4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3718      	adds	r7, #24
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	4613      	mov	r3, r2
 8003e50:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	88fa      	ldrh	r2, [r7, #6]
 8003e5c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	88fa      	ldrh	r2, [r7, #6]
 8003e62:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2222      	movs	r2, #34	@ 0x22
 8003e6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d007      	beq.n	8003e8a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68da      	ldr	r2, [r3, #12]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e88:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	695a      	ldr	r2, [r3, #20]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f042 0201 	orr.w	r2, r2, #1
 8003e98:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68da      	ldr	r2, [r3, #12]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f042 0220 	orr.w	r2, r2, #32
 8003ea8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3714      	adds	r7, #20
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bc80      	pop	{r7}
 8003eb4:	4770      	bx	lr

08003eb6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b095      	sub	sp, #84	@ 0x54
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	330c      	adds	r3, #12
 8003ec4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ec8:	e853 3f00 	ldrex	r3, [r3]
 8003ecc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ed4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	330c      	adds	r3, #12
 8003edc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ede:	643a      	str	r2, [r7, #64]	@ 0x40
 8003ee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ee4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ee6:	e841 2300 	strex	r3, r2, [r1]
 8003eea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1e5      	bne.n	8003ebe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	3314      	adds	r3, #20
 8003ef8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efa:	6a3b      	ldr	r3, [r7, #32]
 8003efc:	e853 3f00 	ldrex	r3, [r3]
 8003f00:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	f023 0301 	bic.w	r3, r3, #1
 8003f08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	3314      	adds	r3, #20
 8003f10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f14:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f1a:	e841 2300 	strex	r3, r2, [r1]
 8003f1e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1e5      	bne.n	8003ef2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d119      	bne.n	8003f62 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	330c      	adds	r3, #12
 8003f34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	e853 3f00 	ldrex	r3, [r3]
 8003f3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	f023 0310 	bic.w	r3, r3, #16
 8003f44:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	330c      	adds	r3, #12
 8003f4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f4e:	61ba      	str	r2, [r7, #24]
 8003f50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f52:	6979      	ldr	r1, [r7, #20]
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	e841 2300 	strex	r3, r2, [r1]
 8003f5a:	613b      	str	r3, [r7, #16]
   return(result);
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1e5      	bne.n	8003f2e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2220      	movs	r2, #32
 8003f66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003f70:	bf00      	nop
 8003f72:	3754      	adds	r7, #84	@ 0x54
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bc80      	pop	{r7}
 8003f78:	4770      	bx	lr

08003f7a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b084      	sub	sp, #16
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f7ff fee8 	bl	8003d6a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f9a:	bf00      	nop
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b085      	sub	sp, #20
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b21      	cmp	r3, #33	@ 0x21
 8003fb4:	d13e      	bne.n	8004034 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fbe:	d114      	bne.n	8003fea <UART_Transmit_IT+0x48>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d110      	bne.n	8003fea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a1b      	ldr	r3, [r3, #32]
 8003fcc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	881b      	ldrh	r3, [r3, #0]
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fdc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	1c9a      	adds	r2, r3, #2
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	621a      	str	r2, [r3, #32]
 8003fe8:	e008      	b.n	8003ffc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a1b      	ldr	r3, [r3, #32]
 8003fee:	1c59      	adds	r1, r3, #1
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	6211      	str	r1, [r2, #32]
 8003ff4:	781a      	ldrb	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004000:	b29b      	uxth	r3, r3
 8004002:	3b01      	subs	r3, #1
 8004004:	b29b      	uxth	r3, r3
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	4619      	mov	r1, r3
 800400a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10f      	bne.n	8004030 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68da      	ldr	r2, [r3, #12]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800401e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68da      	ldr	r2, [r3, #12]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800402e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004030:	2300      	movs	r3, #0
 8004032:	e000      	b.n	8004036 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004034:	2302      	movs	r3, #2
  }
}
 8004036:	4618      	mov	r0, r3
 8004038:	3714      	adds	r7, #20
 800403a:	46bd      	mov	sp, r7
 800403c:	bc80      	pop	{r7}
 800403e:	4770      	bx	lr

08004040 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004056:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2220      	movs	r2, #32
 800405c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f7ff fe79 	bl	8003d58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3708      	adds	r7, #8
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b08c      	sub	sp, #48	@ 0x30
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b22      	cmp	r3, #34	@ 0x22
 8004082:	f040 80ae 	bne.w	80041e2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800408e:	d117      	bne.n	80040c0 <UART_Receive_IT+0x50>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d113      	bne.n	80040c0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004098:	2300      	movs	r3, #0
 800409a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040b2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040b8:	1c9a      	adds	r2, r3, #2
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	629a      	str	r2, [r3, #40]	@ 0x28
 80040be:	e026      	b.n	800410e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80040c6:	2300      	movs	r3, #0
 80040c8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040d2:	d007      	beq.n	80040e4 <UART_Receive_IT+0x74>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10a      	bne.n	80040f2 <UART_Receive_IT+0x82>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d106      	bne.n	80040f2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	b2da      	uxtb	r2, r3
 80040ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040ee:	701a      	strb	r2, [r3, #0]
 80040f0:	e008      	b.n	8004104 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040fe:	b2da      	uxtb	r2, r3
 8004100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004102:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004108:	1c5a      	adds	r2, r3, #1
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004112:	b29b      	uxth	r3, r3
 8004114:	3b01      	subs	r3, #1
 8004116:	b29b      	uxth	r3, r3
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	4619      	mov	r1, r3
 800411c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800411e:	2b00      	cmp	r3, #0
 8004120:	d15d      	bne.n	80041de <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68da      	ldr	r2, [r3, #12]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f022 0220 	bic.w	r2, r2, #32
 8004130:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68da      	ldr	r2, [r3, #12]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004140:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	695a      	ldr	r2, [r3, #20]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f022 0201 	bic.w	r2, r2, #1
 8004150:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2220      	movs	r2, #32
 8004156:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004164:	2b01      	cmp	r3, #1
 8004166:	d135      	bne.n	80041d4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	330c      	adds	r3, #12
 8004174:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	e853 3f00 	ldrex	r3, [r3]
 800417c:	613b      	str	r3, [r7, #16]
   return(result);
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	f023 0310 	bic.w	r3, r3, #16
 8004184:	627b      	str	r3, [r7, #36]	@ 0x24
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	330c      	adds	r3, #12
 800418c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800418e:	623a      	str	r2, [r7, #32]
 8004190:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004192:	69f9      	ldr	r1, [r7, #28]
 8004194:	6a3a      	ldr	r2, [r7, #32]
 8004196:	e841 2300 	strex	r3, r2, [r1]
 800419a:	61bb      	str	r3, [r7, #24]
   return(result);
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1e5      	bne.n	800416e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0310 	and.w	r3, r3, #16
 80041ac:	2b10      	cmp	r3, #16
 80041ae:	d10a      	bne.n	80041c6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041b0:	2300      	movs	r3, #0
 80041b2:	60fb      	str	r3, [r7, #12]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	60fb      	str	r3, [r7, #12]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	60fb      	str	r3, [r7, #12]
 80041c4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80041ca:	4619      	mov	r1, r3
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f7ff fdd5 	bl	8003d7c <HAL_UARTEx_RxEventCallback>
 80041d2:	e002      	b.n	80041da <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f7fc fa6f 	bl	80006b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80041da:	2300      	movs	r3, #0
 80041dc:	e002      	b.n	80041e4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80041de:	2300      	movs	r3, #0
 80041e0:	e000      	b.n	80041e4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80041e2:	2302      	movs	r3, #2
  }
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3730      	adds	r7, #48	@ 0x30
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	68da      	ldr	r2, [r3, #12]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	689a      	ldr	r2, [r3, #8]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	431a      	orrs	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	695b      	ldr	r3, [r3, #20]
 8004218:	4313      	orrs	r3, r2
 800421a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004226:	f023 030c 	bic.w	r3, r3, #12
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6812      	ldr	r2, [r2, #0]
 800422e:	68b9      	ldr	r1, [r7, #8]
 8004230:	430b      	orrs	r3, r1
 8004232:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	699a      	ldr	r2, [r3, #24]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	430a      	orrs	r2, r1
 8004248:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a2c      	ldr	r2, [pc, #176]	@ (8004300 <UART_SetConfig+0x114>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d103      	bne.n	800425c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004254:	f7fe fc50 	bl	8002af8 <HAL_RCC_GetPCLK2Freq>
 8004258:	60f8      	str	r0, [r7, #12]
 800425a:	e002      	b.n	8004262 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800425c:	f7fe fc38 	bl	8002ad0 <HAL_RCC_GetPCLK1Freq>
 8004260:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	4613      	mov	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	009a      	lsls	r2, r3, #2
 800426c:	441a      	add	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	fbb2 f3f3 	udiv	r3, r2, r3
 8004278:	4a22      	ldr	r2, [pc, #136]	@ (8004304 <UART_SetConfig+0x118>)
 800427a:	fba2 2303 	umull	r2, r3, r2, r3
 800427e:	095b      	lsrs	r3, r3, #5
 8004280:	0119      	lsls	r1, r3, #4
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	4613      	mov	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	009a      	lsls	r2, r3, #2
 800428c:	441a      	add	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	fbb2 f2f3 	udiv	r2, r2, r3
 8004298:	4b1a      	ldr	r3, [pc, #104]	@ (8004304 <UART_SetConfig+0x118>)
 800429a:	fba3 0302 	umull	r0, r3, r3, r2
 800429e:	095b      	lsrs	r3, r3, #5
 80042a0:	2064      	movs	r0, #100	@ 0x64
 80042a2:	fb00 f303 	mul.w	r3, r0, r3
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	011b      	lsls	r3, r3, #4
 80042aa:	3332      	adds	r3, #50	@ 0x32
 80042ac:	4a15      	ldr	r2, [pc, #84]	@ (8004304 <UART_SetConfig+0x118>)
 80042ae:	fba2 2303 	umull	r2, r3, r2, r3
 80042b2:	095b      	lsrs	r3, r3, #5
 80042b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042b8:	4419      	add	r1, r3
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	4613      	mov	r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	4413      	add	r3, r2
 80042c2:	009a      	lsls	r2, r3, #2
 80042c4:	441a      	add	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80042d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004304 <UART_SetConfig+0x118>)
 80042d2:	fba3 0302 	umull	r0, r3, r3, r2
 80042d6:	095b      	lsrs	r3, r3, #5
 80042d8:	2064      	movs	r0, #100	@ 0x64
 80042da:	fb00 f303 	mul.w	r3, r0, r3
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	011b      	lsls	r3, r3, #4
 80042e2:	3332      	adds	r3, #50	@ 0x32
 80042e4:	4a07      	ldr	r2, [pc, #28]	@ (8004304 <UART_SetConfig+0x118>)
 80042e6:	fba2 2303 	umull	r2, r3, r2, r3
 80042ea:	095b      	lsrs	r3, r3, #5
 80042ec:	f003 020f 	and.w	r2, r3, #15
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	440a      	add	r2, r1
 80042f6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80042f8:	bf00      	nop
 80042fa:	3710      	adds	r7, #16
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	40013800 	.word	0x40013800
 8004304:	51eb851f 	.word	0x51eb851f

08004308 <__sflush_r>:
 8004308:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800430c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800430e:	0716      	lsls	r6, r2, #28
 8004310:	4605      	mov	r5, r0
 8004312:	460c      	mov	r4, r1
 8004314:	d454      	bmi.n	80043c0 <__sflush_r+0xb8>
 8004316:	684b      	ldr	r3, [r1, #4]
 8004318:	2b00      	cmp	r3, #0
 800431a:	dc02      	bgt.n	8004322 <__sflush_r+0x1a>
 800431c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800431e:	2b00      	cmp	r3, #0
 8004320:	dd48      	ble.n	80043b4 <__sflush_r+0xac>
 8004322:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004324:	2e00      	cmp	r6, #0
 8004326:	d045      	beq.n	80043b4 <__sflush_r+0xac>
 8004328:	2300      	movs	r3, #0
 800432a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800432e:	682f      	ldr	r7, [r5, #0]
 8004330:	6a21      	ldr	r1, [r4, #32]
 8004332:	602b      	str	r3, [r5, #0]
 8004334:	d030      	beq.n	8004398 <__sflush_r+0x90>
 8004336:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004338:	89a3      	ldrh	r3, [r4, #12]
 800433a:	0759      	lsls	r1, r3, #29
 800433c:	d505      	bpl.n	800434a <__sflush_r+0x42>
 800433e:	6863      	ldr	r3, [r4, #4]
 8004340:	1ad2      	subs	r2, r2, r3
 8004342:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004344:	b10b      	cbz	r3, 800434a <__sflush_r+0x42>
 8004346:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004348:	1ad2      	subs	r2, r2, r3
 800434a:	2300      	movs	r3, #0
 800434c:	4628      	mov	r0, r5
 800434e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004350:	6a21      	ldr	r1, [r4, #32]
 8004352:	47b0      	blx	r6
 8004354:	1c43      	adds	r3, r0, #1
 8004356:	89a3      	ldrh	r3, [r4, #12]
 8004358:	d106      	bne.n	8004368 <__sflush_r+0x60>
 800435a:	6829      	ldr	r1, [r5, #0]
 800435c:	291d      	cmp	r1, #29
 800435e:	d82b      	bhi.n	80043b8 <__sflush_r+0xb0>
 8004360:	4a28      	ldr	r2, [pc, #160]	@ (8004404 <__sflush_r+0xfc>)
 8004362:	410a      	asrs	r2, r1
 8004364:	07d6      	lsls	r6, r2, #31
 8004366:	d427      	bmi.n	80043b8 <__sflush_r+0xb0>
 8004368:	2200      	movs	r2, #0
 800436a:	6062      	str	r2, [r4, #4]
 800436c:	6922      	ldr	r2, [r4, #16]
 800436e:	04d9      	lsls	r1, r3, #19
 8004370:	6022      	str	r2, [r4, #0]
 8004372:	d504      	bpl.n	800437e <__sflush_r+0x76>
 8004374:	1c42      	adds	r2, r0, #1
 8004376:	d101      	bne.n	800437c <__sflush_r+0x74>
 8004378:	682b      	ldr	r3, [r5, #0]
 800437a:	b903      	cbnz	r3, 800437e <__sflush_r+0x76>
 800437c:	6560      	str	r0, [r4, #84]	@ 0x54
 800437e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004380:	602f      	str	r7, [r5, #0]
 8004382:	b1b9      	cbz	r1, 80043b4 <__sflush_r+0xac>
 8004384:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004388:	4299      	cmp	r1, r3
 800438a:	d002      	beq.n	8004392 <__sflush_r+0x8a>
 800438c:	4628      	mov	r0, r5
 800438e:	f000 fb05 	bl	800499c <_free_r>
 8004392:	2300      	movs	r3, #0
 8004394:	6363      	str	r3, [r4, #52]	@ 0x34
 8004396:	e00d      	b.n	80043b4 <__sflush_r+0xac>
 8004398:	2301      	movs	r3, #1
 800439a:	4628      	mov	r0, r5
 800439c:	47b0      	blx	r6
 800439e:	4602      	mov	r2, r0
 80043a0:	1c50      	adds	r0, r2, #1
 80043a2:	d1c9      	bne.n	8004338 <__sflush_r+0x30>
 80043a4:	682b      	ldr	r3, [r5, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d0c6      	beq.n	8004338 <__sflush_r+0x30>
 80043aa:	2b1d      	cmp	r3, #29
 80043ac:	d001      	beq.n	80043b2 <__sflush_r+0xaa>
 80043ae:	2b16      	cmp	r3, #22
 80043b0:	d11d      	bne.n	80043ee <__sflush_r+0xe6>
 80043b2:	602f      	str	r7, [r5, #0]
 80043b4:	2000      	movs	r0, #0
 80043b6:	e021      	b.n	80043fc <__sflush_r+0xf4>
 80043b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80043bc:	b21b      	sxth	r3, r3
 80043be:	e01a      	b.n	80043f6 <__sflush_r+0xee>
 80043c0:	690f      	ldr	r7, [r1, #16]
 80043c2:	2f00      	cmp	r7, #0
 80043c4:	d0f6      	beq.n	80043b4 <__sflush_r+0xac>
 80043c6:	0793      	lsls	r3, r2, #30
 80043c8:	bf18      	it	ne
 80043ca:	2300      	movne	r3, #0
 80043cc:	680e      	ldr	r6, [r1, #0]
 80043ce:	bf08      	it	eq
 80043d0:	694b      	ldreq	r3, [r1, #20]
 80043d2:	1bf6      	subs	r6, r6, r7
 80043d4:	600f      	str	r7, [r1, #0]
 80043d6:	608b      	str	r3, [r1, #8]
 80043d8:	2e00      	cmp	r6, #0
 80043da:	ddeb      	ble.n	80043b4 <__sflush_r+0xac>
 80043dc:	4633      	mov	r3, r6
 80043de:	463a      	mov	r2, r7
 80043e0:	4628      	mov	r0, r5
 80043e2:	6a21      	ldr	r1, [r4, #32]
 80043e4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80043e8:	47e0      	blx	ip
 80043ea:	2800      	cmp	r0, #0
 80043ec:	dc07      	bgt.n	80043fe <__sflush_r+0xf6>
 80043ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80043f6:	f04f 30ff 	mov.w	r0, #4294967295
 80043fa:	81a3      	strh	r3, [r4, #12]
 80043fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043fe:	4407      	add	r7, r0
 8004400:	1a36      	subs	r6, r6, r0
 8004402:	e7e9      	b.n	80043d8 <__sflush_r+0xd0>
 8004404:	dfbffffe 	.word	0xdfbffffe

08004408 <_fflush_r>:
 8004408:	b538      	push	{r3, r4, r5, lr}
 800440a:	690b      	ldr	r3, [r1, #16]
 800440c:	4605      	mov	r5, r0
 800440e:	460c      	mov	r4, r1
 8004410:	b913      	cbnz	r3, 8004418 <_fflush_r+0x10>
 8004412:	2500      	movs	r5, #0
 8004414:	4628      	mov	r0, r5
 8004416:	bd38      	pop	{r3, r4, r5, pc}
 8004418:	b118      	cbz	r0, 8004422 <_fflush_r+0x1a>
 800441a:	6a03      	ldr	r3, [r0, #32]
 800441c:	b90b      	cbnz	r3, 8004422 <_fflush_r+0x1a>
 800441e:	f000 f8bb 	bl	8004598 <__sinit>
 8004422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d0f3      	beq.n	8004412 <_fflush_r+0xa>
 800442a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800442c:	07d0      	lsls	r0, r2, #31
 800442e:	d404      	bmi.n	800443a <_fflush_r+0x32>
 8004430:	0599      	lsls	r1, r3, #22
 8004432:	d402      	bmi.n	800443a <_fflush_r+0x32>
 8004434:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004436:	f000 faae 	bl	8004996 <__retarget_lock_acquire_recursive>
 800443a:	4628      	mov	r0, r5
 800443c:	4621      	mov	r1, r4
 800443e:	f7ff ff63 	bl	8004308 <__sflush_r>
 8004442:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004444:	4605      	mov	r5, r0
 8004446:	07da      	lsls	r2, r3, #31
 8004448:	d4e4      	bmi.n	8004414 <_fflush_r+0xc>
 800444a:	89a3      	ldrh	r3, [r4, #12]
 800444c:	059b      	lsls	r3, r3, #22
 800444e:	d4e1      	bmi.n	8004414 <_fflush_r+0xc>
 8004450:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004452:	f000 faa1 	bl	8004998 <__retarget_lock_release_recursive>
 8004456:	e7dd      	b.n	8004414 <_fflush_r+0xc>

08004458 <fflush>:
 8004458:	4601      	mov	r1, r0
 800445a:	b920      	cbnz	r0, 8004466 <fflush+0xe>
 800445c:	4a04      	ldr	r2, [pc, #16]	@ (8004470 <fflush+0x18>)
 800445e:	4905      	ldr	r1, [pc, #20]	@ (8004474 <fflush+0x1c>)
 8004460:	4805      	ldr	r0, [pc, #20]	@ (8004478 <fflush+0x20>)
 8004462:	f000 b8b1 	b.w	80045c8 <_fwalk_sglue>
 8004466:	4b05      	ldr	r3, [pc, #20]	@ (800447c <fflush+0x24>)
 8004468:	6818      	ldr	r0, [r3, #0]
 800446a:	f7ff bfcd 	b.w	8004408 <_fflush_r>
 800446e:	bf00      	nop
 8004470:	2000001c 	.word	0x2000001c
 8004474:	08004409 	.word	0x08004409
 8004478:	2000002c 	.word	0x2000002c
 800447c:	20000028 	.word	0x20000028

08004480 <std>:
 8004480:	2300      	movs	r3, #0
 8004482:	b510      	push	{r4, lr}
 8004484:	4604      	mov	r4, r0
 8004486:	e9c0 3300 	strd	r3, r3, [r0]
 800448a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800448e:	6083      	str	r3, [r0, #8]
 8004490:	8181      	strh	r1, [r0, #12]
 8004492:	6643      	str	r3, [r0, #100]	@ 0x64
 8004494:	81c2      	strh	r2, [r0, #14]
 8004496:	6183      	str	r3, [r0, #24]
 8004498:	4619      	mov	r1, r3
 800449a:	2208      	movs	r2, #8
 800449c:	305c      	adds	r0, #92	@ 0x5c
 800449e:	f000 fa01 	bl	80048a4 <memset>
 80044a2:	4b0d      	ldr	r3, [pc, #52]	@ (80044d8 <std+0x58>)
 80044a4:	6224      	str	r4, [r4, #32]
 80044a6:	6263      	str	r3, [r4, #36]	@ 0x24
 80044a8:	4b0c      	ldr	r3, [pc, #48]	@ (80044dc <std+0x5c>)
 80044aa:	62a3      	str	r3, [r4, #40]	@ 0x28
 80044ac:	4b0c      	ldr	r3, [pc, #48]	@ (80044e0 <std+0x60>)
 80044ae:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80044b0:	4b0c      	ldr	r3, [pc, #48]	@ (80044e4 <std+0x64>)
 80044b2:	6323      	str	r3, [r4, #48]	@ 0x30
 80044b4:	4b0c      	ldr	r3, [pc, #48]	@ (80044e8 <std+0x68>)
 80044b6:	429c      	cmp	r4, r3
 80044b8:	d006      	beq.n	80044c8 <std+0x48>
 80044ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80044be:	4294      	cmp	r4, r2
 80044c0:	d002      	beq.n	80044c8 <std+0x48>
 80044c2:	33d0      	adds	r3, #208	@ 0xd0
 80044c4:	429c      	cmp	r4, r3
 80044c6:	d105      	bne.n	80044d4 <std+0x54>
 80044c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80044cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044d0:	f000 ba60 	b.w	8004994 <__retarget_lock_init_recursive>
 80044d4:	bd10      	pop	{r4, pc}
 80044d6:	bf00      	nop
 80044d8:	080046f5 	.word	0x080046f5
 80044dc:	08004717 	.word	0x08004717
 80044e0:	0800474f 	.word	0x0800474f
 80044e4:	08004773 	.word	0x08004773
 80044e8:	20000230 	.word	0x20000230

080044ec <stdio_exit_handler>:
 80044ec:	4a02      	ldr	r2, [pc, #8]	@ (80044f8 <stdio_exit_handler+0xc>)
 80044ee:	4903      	ldr	r1, [pc, #12]	@ (80044fc <stdio_exit_handler+0x10>)
 80044f0:	4803      	ldr	r0, [pc, #12]	@ (8004500 <stdio_exit_handler+0x14>)
 80044f2:	f000 b869 	b.w	80045c8 <_fwalk_sglue>
 80044f6:	bf00      	nop
 80044f8:	2000001c 	.word	0x2000001c
 80044fc:	08004409 	.word	0x08004409
 8004500:	2000002c 	.word	0x2000002c

08004504 <cleanup_stdio>:
 8004504:	6841      	ldr	r1, [r0, #4]
 8004506:	4b0c      	ldr	r3, [pc, #48]	@ (8004538 <cleanup_stdio+0x34>)
 8004508:	b510      	push	{r4, lr}
 800450a:	4299      	cmp	r1, r3
 800450c:	4604      	mov	r4, r0
 800450e:	d001      	beq.n	8004514 <cleanup_stdio+0x10>
 8004510:	f7ff ff7a 	bl	8004408 <_fflush_r>
 8004514:	68a1      	ldr	r1, [r4, #8]
 8004516:	4b09      	ldr	r3, [pc, #36]	@ (800453c <cleanup_stdio+0x38>)
 8004518:	4299      	cmp	r1, r3
 800451a:	d002      	beq.n	8004522 <cleanup_stdio+0x1e>
 800451c:	4620      	mov	r0, r4
 800451e:	f7ff ff73 	bl	8004408 <_fflush_r>
 8004522:	68e1      	ldr	r1, [r4, #12]
 8004524:	4b06      	ldr	r3, [pc, #24]	@ (8004540 <cleanup_stdio+0x3c>)
 8004526:	4299      	cmp	r1, r3
 8004528:	d004      	beq.n	8004534 <cleanup_stdio+0x30>
 800452a:	4620      	mov	r0, r4
 800452c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004530:	f7ff bf6a 	b.w	8004408 <_fflush_r>
 8004534:	bd10      	pop	{r4, pc}
 8004536:	bf00      	nop
 8004538:	20000230 	.word	0x20000230
 800453c:	20000298 	.word	0x20000298
 8004540:	20000300 	.word	0x20000300

08004544 <global_stdio_init.part.0>:
 8004544:	b510      	push	{r4, lr}
 8004546:	4b0b      	ldr	r3, [pc, #44]	@ (8004574 <global_stdio_init.part.0+0x30>)
 8004548:	4c0b      	ldr	r4, [pc, #44]	@ (8004578 <global_stdio_init.part.0+0x34>)
 800454a:	4a0c      	ldr	r2, [pc, #48]	@ (800457c <global_stdio_init.part.0+0x38>)
 800454c:	4620      	mov	r0, r4
 800454e:	601a      	str	r2, [r3, #0]
 8004550:	2104      	movs	r1, #4
 8004552:	2200      	movs	r2, #0
 8004554:	f7ff ff94 	bl	8004480 <std>
 8004558:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800455c:	2201      	movs	r2, #1
 800455e:	2109      	movs	r1, #9
 8004560:	f7ff ff8e 	bl	8004480 <std>
 8004564:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004568:	2202      	movs	r2, #2
 800456a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800456e:	2112      	movs	r1, #18
 8004570:	f7ff bf86 	b.w	8004480 <std>
 8004574:	20000368 	.word	0x20000368
 8004578:	20000230 	.word	0x20000230
 800457c:	080044ed 	.word	0x080044ed

08004580 <__sfp_lock_acquire>:
 8004580:	4801      	ldr	r0, [pc, #4]	@ (8004588 <__sfp_lock_acquire+0x8>)
 8004582:	f000 ba08 	b.w	8004996 <__retarget_lock_acquire_recursive>
 8004586:	bf00      	nop
 8004588:	20000371 	.word	0x20000371

0800458c <__sfp_lock_release>:
 800458c:	4801      	ldr	r0, [pc, #4]	@ (8004594 <__sfp_lock_release+0x8>)
 800458e:	f000 ba03 	b.w	8004998 <__retarget_lock_release_recursive>
 8004592:	bf00      	nop
 8004594:	20000371 	.word	0x20000371

08004598 <__sinit>:
 8004598:	b510      	push	{r4, lr}
 800459a:	4604      	mov	r4, r0
 800459c:	f7ff fff0 	bl	8004580 <__sfp_lock_acquire>
 80045a0:	6a23      	ldr	r3, [r4, #32]
 80045a2:	b11b      	cbz	r3, 80045ac <__sinit+0x14>
 80045a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045a8:	f7ff bff0 	b.w	800458c <__sfp_lock_release>
 80045ac:	4b04      	ldr	r3, [pc, #16]	@ (80045c0 <__sinit+0x28>)
 80045ae:	6223      	str	r3, [r4, #32]
 80045b0:	4b04      	ldr	r3, [pc, #16]	@ (80045c4 <__sinit+0x2c>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1f5      	bne.n	80045a4 <__sinit+0xc>
 80045b8:	f7ff ffc4 	bl	8004544 <global_stdio_init.part.0>
 80045bc:	e7f2      	b.n	80045a4 <__sinit+0xc>
 80045be:	bf00      	nop
 80045c0:	08004505 	.word	0x08004505
 80045c4:	20000368 	.word	0x20000368

080045c8 <_fwalk_sglue>:
 80045c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045cc:	4607      	mov	r7, r0
 80045ce:	4688      	mov	r8, r1
 80045d0:	4614      	mov	r4, r2
 80045d2:	2600      	movs	r6, #0
 80045d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80045d8:	f1b9 0901 	subs.w	r9, r9, #1
 80045dc:	d505      	bpl.n	80045ea <_fwalk_sglue+0x22>
 80045de:	6824      	ldr	r4, [r4, #0]
 80045e0:	2c00      	cmp	r4, #0
 80045e2:	d1f7      	bne.n	80045d4 <_fwalk_sglue+0xc>
 80045e4:	4630      	mov	r0, r6
 80045e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045ea:	89ab      	ldrh	r3, [r5, #12]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d907      	bls.n	8004600 <_fwalk_sglue+0x38>
 80045f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80045f4:	3301      	adds	r3, #1
 80045f6:	d003      	beq.n	8004600 <_fwalk_sglue+0x38>
 80045f8:	4629      	mov	r1, r5
 80045fa:	4638      	mov	r0, r7
 80045fc:	47c0      	blx	r8
 80045fe:	4306      	orrs	r6, r0
 8004600:	3568      	adds	r5, #104	@ 0x68
 8004602:	e7e9      	b.n	80045d8 <_fwalk_sglue+0x10>

08004604 <iprintf>:
 8004604:	b40f      	push	{r0, r1, r2, r3}
 8004606:	b507      	push	{r0, r1, r2, lr}
 8004608:	4906      	ldr	r1, [pc, #24]	@ (8004624 <iprintf+0x20>)
 800460a:	ab04      	add	r3, sp, #16
 800460c:	6808      	ldr	r0, [r1, #0]
 800460e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004612:	6881      	ldr	r1, [r0, #8]
 8004614:	9301      	str	r3, [sp, #4]
 8004616:	f000 fadf 	bl	8004bd8 <_vfiprintf_r>
 800461a:	b003      	add	sp, #12
 800461c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004620:	b004      	add	sp, #16
 8004622:	4770      	bx	lr
 8004624:	20000028 	.word	0x20000028

08004628 <putchar>:
 8004628:	4b02      	ldr	r3, [pc, #8]	@ (8004634 <putchar+0xc>)
 800462a:	4601      	mov	r1, r0
 800462c:	6818      	ldr	r0, [r3, #0]
 800462e:	6882      	ldr	r2, [r0, #8]
 8004630:	f000 bddd 	b.w	80051ee <_putc_r>
 8004634:	20000028 	.word	0x20000028

08004638 <_puts_r>:
 8004638:	6a03      	ldr	r3, [r0, #32]
 800463a:	b570      	push	{r4, r5, r6, lr}
 800463c:	4605      	mov	r5, r0
 800463e:	460e      	mov	r6, r1
 8004640:	6884      	ldr	r4, [r0, #8]
 8004642:	b90b      	cbnz	r3, 8004648 <_puts_r+0x10>
 8004644:	f7ff ffa8 	bl	8004598 <__sinit>
 8004648:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800464a:	07db      	lsls	r3, r3, #31
 800464c:	d405      	bmi.n	800465a <_puts_r+0x22>
 800464e:	89a3      	ldrh	r3, [r4, #12]
 8004650:	0598      	lsls	r0, r3, #22
 8004652:	d402      	bmi.n	800465a <_puts_r+0x22>
 8004654:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004656:	f000 f99e 	bl	8004996 <__retarget_lock_acquire_recursive>
 800465a:	89a3      	ldrh	r3, [r4, #12]
 800465c:	0719      	lsls	r1, r3, #28
 800465e:	d502      	bpl.n	8004666 <_puts_r+0x2e>
 8004660:	6923      	ldr	r3, [r4, #16]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d135      	bne.n	80046d2 <_puts_r+0x9a>
 8004666:	4621      	mov	r1, r4
 8004668:	4628      	mov	r0, r5
 800466a:	f000 f8c5 	bl	80047f8 <__swsetup_r>
 800466e:	b380      	cbz	r0, 80046d2 <_puts_r+0x9a>
 8004670:	f04f 35ff 	mov.w	r5, #4294967295
 8004674:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004676:	07da      	lsls	r2, r3, #31
 8004678:	d405      	bmi.n	8004686 <_puts_r+0x4e>
 800467a:	89a3      	ldrh	r3, [r4, #12]
 800467c:	059b      	lsls	r3, r3, #22
 800467e:	d402      	bmi.n	8004686 <_puts_r+0x4e>
 8004680:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004682:	f000 f989 	bl	8004998 <__retarget_lock_release_recursive>
 8004686:	4628      	mov	r0, r5
 8004688:	bd70      	pop	{r4, r5, r6, pc}
 800468a:	2b00      	cmp	r3, #0
 800468c:	da04      	bge.n	8004698 <_puts_r+0x60>
 800468e:	69a2      	ldr	r2, [r4, #24]
 8004690:	429a      	cmp	r2, r3
 8004692:	dc17      	bgt.n	80046c4 <_puts_r+0x8c>
 8004694:	290a      	cmp	r1, #10
 8004696:	d015      	beq.n	80046c4 <_puts_r+0x8c>
 8004698:	6823      	ldr	r3, [r4, #0]
 800469a:	1c5a      	adds	r2, r3, #1
 800469c:	6022      	str	r2, [r4, #0]
 800469e:	7019      	strb	r1, [r3, #0]
 80046a0:	68a3      	ldr	r3, [r4, #8]
 80046a2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80046a6:	3b01      	subs	r3, #1
 80046a8:	60a3      	str	r3, [r4, #8]
 80046aa:	2900      	cmp	r1, #0
 80046ac:	d1ed      	bne.n	800468a <_puts_r+0x52>
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	da11      	bge.n	80046d6 <_puts_r+0x9e>
 80046b2:	4622      	mov	r2, r4
 80046b4:	210a      	movs	r1, #10
 80046b6:	4628      	mov	r0, r5
 80046b8:	f000 f85f 	bl	800477a <__swbuf_r>
 80046bc:	3001      	adds	r0, #1
 80046be:	d0d7      	beq.n	8004670 <_puts_r+0x38>
 80046c0:	250a      	movs	r5, #10
 80046c2:	e7d7      	b.n	8004674 <_puts_r+0x3c>
 80046c4:	4622      	mov	r2, r4
 80046c6:	4628      	mov	r0, r5
 80046c8:	f000 f857 	bl	800477a <__swbuf_r>
 80046cc:	3001      	adds	r0, #1
 80046ce:	d1e7      	bne.n	80046a0 <_puts_r+0x68>
 80046d0:	e7ce      	b.n	8004670 <_puts_r+0x38>
 80046d2:	3e01      	subs	r6, #1
 80046d4:	e7e4      	b.n	80046a0 <_puts_r+0x68>
 80046d6:	6823      	ldr	r3, [r4, #0]
 80046d8:	1c5a      	adds	r2, r3, #1
 80046da:	6022      	str	r2, [r4, #0]
 80046dc:	220a      	movs	r2, #10
 80046de:	701a      	strb	r2, [r3, #0]
 80046e0:	e7ee      	b.n	80046c0 <_puts_r+0x88>
	...

080046e4 <puts>:
 80046e4:	4b02      	ldr	r3, [pc, #8]	@ (80046f0 <puts+0xc>)
 80046e6:	4601      	mov	r1, r0
 80046e8:	6818      	ldr	r0, [r3, #0]
 80046ea:	f7ff bfa5 	b.w	8004638 <_puts_r>
 80046ee:	bf00      	nop
 80046f0:	20000028 	.word	0x20000028

080046f4 <__sread>:
 80046f4:	b510      	push	{r4, lr}
 80046f6:	460c      	mov	r4, r1
 80046f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046fc:	f000 f8fc 	bl	80048f8 <_read_r>
 8004700:	2800      	cmp	r0, #0
 8004702:	bfab      	itete	ge
 8004704:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004706:	89a3      	ldrhlt	r3, [r4, #12]
 8004708:	181b      	addge	r3, r3, r0
 800470a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800470e:	bfac      	ite	ge
 8004710:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004712:	81a3      	strhlt	r3, [r4, #12]
 8004714:	bd10      	pop	{r4, pc}

08004716 <__swrite>:
 8004716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800471a:	461f      	mov	r7, r3
 800471c:	898b      	ldrh	r3, [r1, #12]
 800471e:	4605      	mov	r5, r0
 8004720:	05db      	lsls	r3, r3, #23
 8004722:	460c      	mov	r4, r1
 8004724:	4616      	mov	r6, r2
 8004726:	d505      	bpl.n	8004734 <__swrite+0x1e>
 8004728:	2302      	movs	r3, #2
 800472a:	2200      	movs	r2, #0
 800472c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004730:	f000 f8d0 	bl	80048d4 <_lseek_r>
 8004734:	89a3      	ldrh	r3, [r4, #12]
 8004736:	4632      	mov	r2, r6
 8004738:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800473c:	81a3      	strh	r3, [r4, #12]
 800473e:	4628      	mov	r0, r5
 8004740:	463b      	mov	r3, r7
 8004742:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004746:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800474a:	f000 b8e7 	b.w	800491c <_write_r>

0800474e <__sseek>:
 800474e:	b510      	push	{r4, lr}
 8004750:	460c      	mov	r4, r1
 8004752:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004756:	f000 f8bd 	bl	80048d4 <_lseek_r>
 800475a:	1c43      	adds	r3, r0, #1
 800475c:	89a3      	ldrh	r3, [r4, #12]
 800475e:	bf15      	itete	ne
 8004760:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004762:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004766:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800476a:	81a3      	strheq	r3, [r4, #12]
 800476c:	bf18      	it	ne
 800476e:	81a3      	strhne	r3, [r4, #12]
 8004770:	bd10      	pop	{r4, pc}

08004772 <__sclose>:
 8004772:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004776:	f000 b89d 	b.w	80048b4 <_close_r>

0800477a <__swbuf_r>:
 800477a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800477c:	460e      	mov	r6, r1
 800477e:	4614      	mov	r4, r2
 8004780:	4605      	mov	r5, r0
 8004782:	b118      	cbz	r0, 800478c <__swbuf_r+0x12>
 8004784:	6a03      	ldr	r3, [r0, #32]
 8004786:	b90b      	cbnz	r3, 800478c <__swbuf_r+0x12>
 8004788:	f7ff ff06 	bl	8004598 <__sinit>
 800478c:	69a3      	ldr	r3, [r4, #24]
 800478e:	60a3      	str	r3, [r4, #8]
 8004790:	89a3      	ldrh	r3, [r4, #12]
 8004792:	071a      	lsls	r2, r3, #28
 8004794:	d501      	bpl.n	800479a <__swbuf_r+0x20>
 8004796:	6923      	ldr	r3, [r4, #16]
 8004798:	b943      	cbnz	r3, 80047ac <__swbuf_r+0x32>
 800479a:	4621      	mov	r1, r4
 800479c:	4628      	mov	r0, r5
 800479e:	f000 f82b 	bl	80047f8 <__swsetup_r>
 80047a2:	b118      	cbz	r0, 80047ac <__swbuf_r+0x32>
 80047a4:	f04f 37ff 	mov.w	r7, #4294967295
 80047a8:	4638      	mov	r0, r7
 80047aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047ac:	6823      	ldr	r3, [r4, #0]
 80047ae:	6922      	ldr	r2, [r4, #16]
 80047b0:	b2f6      	uxtb	r6, r6
 80047b2:	1a98      	subs	r0, r3, r2
 80047b4:	6963      	ldr	r3, [r4, #20]
 80047b6:	4637      	mov	r7, r6
 80047b8:	4283      	cmp	r3, r0
 80047ba:	dc05      	bgt.n	80047c8 <__swbuf_r+0x4e>
 80047bc:	4621      	mov	r1, r4
 80047be:	4628      	mov	r0, r5
 80047c0:	f7ff fe22 	bl	8004408 <_fflush_r>
 80047c4:	2800      	cmp	r0, #0
 80047c6:	d1ed      	bne.n	80047a4 <__swbuf_r+0x2a>
 80047c8:	68a3      	ldr	r3, [r4, #8]
 80047ca:	3b01      	subs	r3, #1
 80047cc:	60a3      	str	r3, [r4, #8]
 80047ce:	6823      	ldr	r3, [r4, #0]
 80047d0:	1c5a      	adds	r2, r3, #1
 80047d2:	6022      	str	r2, [r4, #0]
 80047d4:	701e      	strb	r6, [r3, #0]
 80047d6:	6962      	ldr	r2, [r4, #20]
 80047d8:	1c43      	adds	r3, r0, #1
 80047da:	429a      	cmp	r2, r3
 80047dc:	d004      	beq.n	80047e8 <__swbuf_r+0x6e>
 80047de:	89a3      	ldrh	r3, [r4, #12]
 80047e0:	07db      	lsls	r3, r3, #31
 80047e2:	d5e1      	bpl.n	80047a8 <__swbuf_r+0x2e>
 80047e4:	2e0a      	cmp	r6, #10
 80047e6:	d1df      	bne.n	80047a8 <__swbuf_r+0x2e>
 80047e8:	4621      	mov	r1, r4
 80047ea:	4628      	mov	r0, r5
 80047ec:	f7ff fe0c 	bl	8004408 <_fflush_r>
 80047f0:	2800      	cmp	r0, #0
 80047f2:	d0d9      	beq.n	80047a8 <__swbuf_r+0x2e>
 80047f4:	e7d6      	b.n	80047a4 <__swbuf_r+0x2a>
	...

080047f8 <__swsetup_r>:
 80047f8:	b538      	push	{r3, r4, r5, lr}
 80047fa:	4b29      	ldr	r3, [pc, #164]	@ (80048a0 <__swsetup_r+0xa8>)
 80047fc:	4605      	mov	r5, r0
 80047fe:	6818      	ldr	r0, [r3, #0]
 8004800:	460c      	mov	r4, r1
 8004802:	b118      	cbz	r0, 800480c <__swsetup_r+0x14>
 8004804:	6a03      	ldr	r3, [r0, #32]
 8004806:	b90b      	cbnz	r3, 800480c <__swsetup_r+0x14>
 8004808:	f7ff fec6 	bl	8004598 <__sinit>
 800480c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004810:	0719      	lsls	r1, r3, #28
 8004812:	d422      	bmi.n	800485a <__swsetup_r+0x62>
 8004814:	06da      	lsls	r2, r3, #27
 8004816:	d407      	bmi.n	8004828 <__swsetup_r+0x30>
 8004818:	2209      	movs	r2, #9
 800481a:	602a      	str	r2, [r5, #0]
 800481c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004820:	f04f 30ff 	mov.w	r0, #4294967295
 8004824:	81a3      	strh	r3, [r4, #12]
 8004826:	e033      	b.n	8004890 <__swsetup_r+0x98>
 8004828:	0758      	lsls	r0, r3, #29
 800482a:	d512      	bpl.n	8004852 <__swsetup_r+0x5a>
 800482c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800482e:	b141      	cbz	r1, 8004842 <__swsetup_r+0x4a>
 8004830:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004834:	4299      	cmp	r1, r3
 8004836:	d002      	beq.n	800483e <__swsetup_r+0x46>
 8004838:	4628      	mov	r0, r5
 800483a:	f000 f8af 	bl	800499c <_free_r>
 800483e:	2300      	movs	r3, #0
 8004840:	6363      	str	r3, [r4, #52]	@ 0x34
 8004842:	89a3      	ldrh	r3, [r4, #12]
 8004844:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004848:	81a3      	strh	r3, [r4, #12]
 800484a:	2300      	movs	r3, #0
 800484c:	6063      	str	r3, [r4, #4]
 800484e:	6923      	ldr	r3, [r4, #16]
 8004850:	6023      	str	r3, [r4, #0]
 8004852:	89a3      	ldrh	r3, [r4, #12]
 8004854:	f043 0308 	orr.w	r3, r3, #8
 8004858:	81a3      	strh	r3, [r4, #12]
 800485a:	6923      	ldr	r3, [r4, #16]
 800485c:	b94b      	cbnz	r3, 8004872 <__swsetup_r+0x7a>
 800485e:	89a3      	ldrh	r3, [r4, #12]
 8004860:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004864:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004868:	d003      	beq.n	8004872 <__swsetup_r+0x7a>
 800486a:	4621      	mov	r1, r4
 800486c:	4628      	mov	r0, r5
 800486e:	f000 fc82 	bl	8005176 <__smakebuf_r>
 8004872:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004876:	f013 0201 	ands.w	r2, r3, #1
 800487a:	d00a      	beq.n	8004892 <__swsetup_r+0x9a>
 800487c:	2200      	movs	r2, #0
 800487e:	60a2      	str	r2, [r4, #8]
 8004880:	6962      	ldr	r2, [r4, #20]
 8004882:	4252      	negs	r2, r2
 8004884:	61a2      	str	r2, [r4, #24]
 8004886:	6922      	ldr	r2, [r4, #16]
 8004888:	b942      	cbnz	r2, 800489c <__swsetup_r+0xa4>
 800488a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800488e:	d1c5      	bne.n	800481c <__swsetup_r+0x24>
 8004890:	bd38      	pop	{r3, r4, r5, pc}
 8004892:	0799      	lsls	r1, r3, #30
 8004894:	bf58      	it	pl
 8004896:	6962      	ldrpl	r2, [r4, #20]
 8004898:	60a2      	str	r2, [r4, #8]
 800489a:	e7f4      	b.n	8004886 <__swsetup_r+0x8e>
 800489c:	2000      	movs	r0, #0
 800489e:	e7f7      	b.n	8004890 <__swsetup_r+0x98>
 80048a0:	20000028 	.word	0x20000028

080048a4 <memset>:
 80048a4:	4603      	mov	r3, r0
 80048a6:	4402      	add	r2, r0
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d100      	bne.n	80048ae <memset+0xa>
 80048ac:	4770      	bx	lr
 80048ae:	f803 1b01 	strb.w	r1, [r3], #1
 80048b2:	e7f9      	b.n	80048a8 <memset+0x4>

080048b4 <_close_r>:
 80048b4:	b538      	push	{r3, r4, r5, lr}
 80048b6:	2300      	movs	r3, #0
 80048b8:	4d05      	ldr	r5, [pc, #20]	@ (80048d0 <_close_r+0x1c>)
 80048ba:	4604      	mov	r4, r0
 80048bc:	4608      	mov	r0, r1
 80048be:	602b      	str	r3, [r5, #0]
 80048c0:	f7fc fbc7 	bl	8001052 <_close>
 80048c4:	1c43      	adds	r3, r0, #1
 80048c6:	d102      	bne.n	80048ce <_close_r+0x1a>
 80048c8:	682b      	ldr	r3, [r5, #0]
 80048ca:	b103      	cbz	r3, 80048ce <_close_r+0x1a>
 80048cc:	6023      	str	r3, [r4, #0]
 80048ce:	bd38      	pop	{r3, r4, r5, pc}
 80048d0:	2000036c 	.word	0x2000036c

080048d4 <_lseek_r>:
 80048d4:	b538      	push	{r3, r4, r5, lr}
 80048d6:	4604      	mov	r4, r0
 80048d8:	4608      	mov	r0, r1
 80048da:	4611      	mov	r1, r2
 80048dc:	2200      	movs	r2, #0
 80048de:	4d05      	ldr	r5, [pc, #20]	@ (80048f4 <_lseek_r+0x20>)
 80048e0:	602a      	str	r2, [r5, #0]
 80048e2:	461a      	mov	r2, r3
 80048e4:	f7fc fbd9 	bl	800109a <_lseek>
 80048e8:	1c43      	adds	r3, r0, #1
 80048ea:	d102      	bne.n	80048f2 <_lseek_r+0x1e>
 80048ec:	682b      	ldr	r3, [r5, #0]
 80048ee:	b103      	cbz	r3, 80048f2 <_lseek_r+0x1e>
 80048f0:	6023      	str	r3, [r4, #0]
 80048f2:	bd38      	pop	{r3, r4, r5, pc}
 80048f4:	2000036c 	.word	0x2000036c

080048f8 <_read_r>:
 80048f8:	b538      	push	{r3, r4, r5, lr}
 80048fa:	4604      	mov	r4, r0
 80048fc:	4608      	mov	r0, r1
 80048fe:	4611      	mov	r1, r2
 8004900:	2200      	movs	r2, #0
 8004902:	4d05      	ldr	r5, [pc, #20]	@ (8004918 <_read_r+0x20>)
 8004904:	602a      	str	r2, [r5, #0]
 8004906:	461a      	mov	r2, r3
 8004908:	f7fc fb86 	bl	8001018 <_read>
 800490c:	1c43      	adds	r3, r0, #1
 800490e:	d102      	bne.n	8004916 <_read_r+0x1e>
 8004910:	682b      	ldr	r3, [r5, #0]
 8004912:	b103      	cbz	r3, 8004916 <_read_r+0x1e>
 8004914:	6023      	str	r3, [r4, #0]
 8004916:	bd38      	pop	{r3, r4, r5, pc}
 8004918:	2000036c 	.word	0x2000036c

0800491c <_write_r>:
 800491c:	b538      	push	{r3, r4, r5, lr}
 800491e:	4604      	mov	r4, r0
 8004920:	4608      	mov	r0, r1
 8004922:	4611      	mov	r1, r2
 8004924:	2200      	movs	r2, #0
 8004926:	4d05      	ldr	r5, [pc, #20]	@ (800493c <_write_r+0x20>)
 8004928:	602a      	str	r2, [r5, #0]
 800492a:	461a      	mov	r2, r3
 800492c:	f7fb fea4 	bl	8000678 <_write>
 8004930:	1c43      	adds	r3, r0, #1
 8004932:	d102      	bne.n	800493a <_write_r+0x1e>
 8004934:	682b      	ldr	r3, [r5, #0]
 8004936:	b103      	cbz	r3, 800493a <_write_r+0x1e>
 8004938:	6023      	str	r3, [r4, #0]
 800493a:	bd38      	pop	{r3, r4, r5, pc}
 800493c:	2000036c 	.word	0x2000036c

08004940 <__errno>:
 8004940:	4b01      	ldr	r3, [pc, #4]	@ (8004948 <__errno+0x8>)
 8004942:	6818      	ldr	r0, [r3, #0]
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	20000028 	.word	0x20000028

0800494c <__libc_init_array>:
 800494c:	b570      	push	{r4, r5, r6, lr}
 800494e:	2600      	movs	r6, #0
 8004950:	4d0c      	ldr	r5, [pc, #48]	@ (8004984 <__libc_init_array+0x38>)
 8004952:	4c0d      	ldr	r4, [pc, #52]	@ (8004988 <__libc_init_array+0x3c>)
 8004954:	1b64      	subs	r4, r4, r5
 8004956:	10a4      	asrs	r4, r4, #2
 8004958:	42a6      	cmp	r6, r4
 800495a:	d109      	bne.n	8004970 <__libc_init_array+0x24>
 800495c:	f000 fcbc 	bl	80052d8 <_init>
 8004960:	2600      	movs	r6, #0
 8004962:	4d0a      	ldr	r5, [pc, #40]	@ (800498c <__libc_init_array+0x40>)
 8004964:	4c0a      	ldr	r4, [pc, #40]	@ (8004990 <__libc_init_array+0x44>)
 8004966:	1b64      	subs	r4, r4, r5
 8004968:	10a4      	asrs	r4, r4, #2
 800496a:	42a6      	cmp	r6, r4
 800496c:	d105      	bne.n	800497a <__libc_init_array+0x2e>
 800496e:	bd70      	pop	{r4, r5, r6, pc}
 8004970:	f855 3b04 	ldr.w	r3, [r5], #4
 8004974:	4798      	blx	r3
 8004976:	3601      	adds	r6, #1
 8004978:	e7ee      	b.n	8004958 <__libc_init_array+0xc>
 800497a:	f855 3b04 	ldr.w	r3, [r5], #4
 800497e:	4798      	blx	r3
 8004980:	3601      	adds	r6, #1
 8004982:	e7f2      	b.n	800496a <__libc_init_array+0x1e>
 8004984:	08005cc4 	.word	0x08005cc4
 8004988:	08005cc4 	.word	0x08005cc4
 800498c:	08005cc4 	.word	0x08005cc4
 8004990:	08005cc8 	.word	0x08005cc8

08004994 <__retarget_lock_init_recursive>:
 8004994:	4770      	bx	lr

08004996 <__retarget_lock_acquire_recursive>:
 8004996:	4770      	bx	lr

08004998 <__retarget_lock_release_recursive>:
 8004998:	4770      	bx	lr
	...

0800499c <_free_r>:
 800499c:	b538      	push	{r3, r4, r5, lr}
 800499e:	4605      	mov	r5, r0
 80049a0:	2900      	cmp	r1, #0
 80049a2:	d040      	beq.n	8004a26 <_free_r+0x8a>
 80049a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049a8:	1f0c      	subs	r4, r1, #4
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	bfb8      	it	lt
 80049ae:	18e4      	addlt	r4, r4, r3
 80049b0:	f000 f8de 	bl	8004b70 <__malloc_lock>
 80049b4:	4a1c      	ldr	r2, [pc, #112]	@ (8004a28 <_free_r+0x8c>)
 80049b6:	6813      	ldr	r3, [r2, #0]
 80049b8:	b933      	cbnz	r3, 80049c8 <_free_r+0x2c>
 80049ba:	6063      	str	r3, [r4, #4]
 80049bc:	6014      	str	r4, [r2, #0]
 80049be:	4628      	mov	r0, r5
 80049c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049c4:	f000 b8da 	b.w	8004b7c <__malloc_unlock>
 80049c8:	42a3      	cmp	r3, r4
 80049ca:	d908      	bls.n	80049de <_free_r+0x42>
 80049cc:	6820      	ldr	r0, [r4, #0]
 80049ce:	1821      	adds	r1, r4, r0
 80049d0:	428b      	cmp	r3, r1
 80049d2:	bf01      	itttt	eq
 80049d4:	6819      	ldreq	r1, [r3, #0]
 80049d6:	685b      	ldreq	r3, [r3, #4]
 80049d8:	1809      	addeq	r1, r1, r0
 80049da:	6021      	streq	r1, [r4, #0]
 80049dc:	e7ed      	b.n	80049ba <_free_r+0x1e>
 80049de:	461a      	mov	r2, r3
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	b10b      	cbz	r3, 80049e8 <_free_r+0x4c>
 80049e4:	42a3      	cmp	r3, r4
 80049e6:	d9fa      	bls.n	80049de <_free_r+0x42>
 80049e8:	6811      	ldr	r1, [r2, #0]
 80049ea:	1850      	adds	r0, r2, r1
 80049ec:	42a0      	cmp	r0, r4
 80049ee:	d10b      	bne.n	8004a08 <_free_r+0x6c>
 80049f0:	6820      	ldr	r0, [r4, #0]
 80049f2:	4401      	add	r1, r0
 80049f4:	1850      	adds	r0, r2, r1
 80049f6:	4283      	cmp	r3, r0
 80049f8:	6011      	str	r1, [r2, #0]
 80049fa:	d1e0      	bne.n	80049be <_free_r+0x22>
 80049fc:	6818      	ldr	r0, [r3, #0]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	4408      	add	r0, r1
 8004a02:	6010      	str	r0, [r2, #0]
 8004a04:	6053      	str	r3, [r2, #4]
 8004a06:	e7da      	b.n	80049be <_free_r+0x22>
 8004a08:	d902      	bls.n	8004a10 <_free_r+0x74>
 8004a0a:	230c      	movs	r3, #12
 8004a0c:	602b      	str	r3, [r5, #0]
 8004a0e:	e7d6      	b.n	80049be <_free_r+0x22>
 8004a10:	6820      	ldr	r0, [r4, #0]
 8004a12:	1821      	adds	r1, r4, r0
 8004a14:	428b      	cmp	r3, r1
 8004a16:	bf01      	itttt	eq
 8004a18:	6819      	ldreq	r1, [r3, #0]
 8004a1a:	685b      	ldreq	r3, [r3, #4]
 8004a1c:	1809      	addeq	r1, r1, r0
 8004a1e:	6021      	streq	r1, [r4, #0]
 8004a20:	6063      	str	r3, [r4, #4]
 8004a22:	6054      	str	r4, [r2, #4]
 8004a24:	e7cb      	b.n	80049be <_free_r+0x22>
 8004a26:	bd38      	pop	{r3, r4, r5, pc}
 8004a28:	20000378 	.word	0x20000378

08004a2c <sbrk_aligned>:
 8004a2c:	b570      	push	{r4, r5, r6, lr}
 8004a2e:	4e0f      	ldr	r6, [pc, #60]	@ (8004a6c <sbrk_aligned+0x40>)
 8004a30:	460c      	mov	r4, r1
 8004a32:	6831      	ldr	r1, [r6, #0]
 8004a34:	4605      	mov	r5, r0
 8004a36:	b911      	cbnz	r1, 8004a3e <sbrk_aligned+0x12>
 8004a38:	f000 fc30 	bl	800529c <_sbrk_r>
 8004a3c:	6030      	str	r0, [r6, #0]
 8004a3e:	4621      	mov	r1, r4
 8004a40:	4628      	mov	r0, r5
 8004a42:	f000 fc2b 	bl	800529c <_sbrk_r>
 8004a46:	1c43      	adds	r3, r0, #1
 8004a48:	d103      	bne.n	8004a52 <sbrk_aligned+0x26>
 8004a4a:	f04f 34ff 	mov.w	r4, #4294967295
 8004a4e:	4620      	mov	r0, r4
 8004a50:	bd70      	pop	{r4, r5, r6, pc}
 8004a52:	1cc4      	adds	r4, r0, #3
 8004a54:	f024 0403 	bic.w	r4, r4, #3
 8004a58:	42a0      	cmp	r0, r4
 8004a5a:	d0f8      	beq.n	8004a4e <sbrk_aligned+0x22>
 8004a5c:	1a21      	subs	r1, r4, r0
 8004a5e:	4628      	mov	r0, r5
 8004a60:	f000 fc1c 	bl	800529c <_sbrk_r>
 8004a64:	3001      	adds	r0, #1
 8004a66:	d1f2      	bne.n	8004a4e <sbrk_aligned+0x22>
 8004a68:	e7ef      	b.n	8004a4a <sbrk_aligned+0x1e>
 8004a6a:	bf00      	nop
 8004a6c:	20000374 	.word	0x20000374

08004a70 <_malloc_r>:
 8004a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a74:	1ccd      	adds	r5, r1, #3
 8004a76:	f025 0503 	bic.w	r5, r5, #3
 8004a7a:	3508      	adds	r5, #8
 8004a7c:	2d0c      	cmp	r5, #12
 8004a7e:	bf38      	it	cc
 8004a80:	250c      	movcc	r5, #12
 8004a82:	2d00      	cmp	r5, #0
 8004a84:	4606      	mov	r6, r0
 8004a86:	db01      	blt.n	8004a8c <_malloc_r+0x1c>
 8004a88:	42a9      	cmp	r1, r5
 8004a8a:	d904      	bls.n	8004a96 <_malloc_r+0x26>
 8004a8c:	230c      	movs	r3, #12
 8004a8e:	6033      	str	r3, [r6, #0]
 8004a90:	2000      	movs	r0, #0
 8004a92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004b6c <_malloc_r+0xfc>
 8004a9a:	f000 f869 	bl	8004b70 <__malloc_lock>
 8004a9e:	f8d8 3000 	ldr.w	r3, [r8]
 8004aa2:	461c      	mov	r4, r3
 8004aa4:	bb44      	cbnz	r4, 8004af8 <_malloc_r+0x88>
 8004aa6:	4629      	mov	r1, r5
 8004aa8:	4630      	mov	r0, r6
 8004aaa:	f7ff ffbf 	bl	8004a2c <sbrk_aligned>
 8004aae:	1c43      	adds	r3, r0, #1
 8004ab0:	4604      	mov	r4, r0
 8004ab2:	d158      	bne.n	8004b66 <_malloc_r+0xf6>
 8004ab4:	f8d8 4000 	ldr.w	r4, [r8]
 8004ab8:	4627      	mov	r7, r4
 8004aba:	2f00      	cmp	r7, #0
 8004abc:	d143      	bne.n	8004b46 <_malloc_r+0xd6>
 8004abe:	2c00      	cmp	r4, #0
 8004ac0:	d04b      	beq.n	8004b5a <_malloc_r+0xea>
 8004ac2:	6823      	ldr	r3, [r4, #0]
 8004ac4:	4639      	mov	r1, r7
 8004ac6:	4630      	mov	r0, r6
 8004ac8:	eb04 0903 	add.w	r9, r4, r3
 8004acc:	f000 fbe6 	bl	800529c <_sbrk_r>
 8004ad0:	4581      	cmp	r9, r0
 8004ad2:	d142      	bne.n	8004b5a <_malloc_r+0xea>
 8004ad4:	6821      	ldr	r1, [r4, #0]
 8004ad6:	4630      	mov	r0, r6
 8004ad8:	1a6d      	subs	r5, r5, r1
 8004ada:	4629      	mov	r1, r5
 8004adc:	f7ff ffa6 	bl	8004a2c <sbrk_aligned>
 8004ae0:	3001      	adds	r0, #1
 8004ae2:	d03a      	beq.n	8004b5a <_malloc_r+0xea>
 8004ae4:	6823      	ldr	r3, [r4, #0]
 8004ae6:	442b      	add	r3, r5
 8004ae8:	6023      	str	r3, [r4, #0]
 8004aea:	f8d8 3000 	ldr.w	r3, [r8]
 8004aee:	685a      	ldr	r2, [r3, #4]
 8004af0:	bb62      	cbnz	r2, 8004b4c <_malloc_r+0xdc>
 8004af2:	f8c8 7000 	str.w	r7, [r8]
 8004af6:	e00f      	b.n	8004b18 <_malloc_r+0xa8>
 8004af8:	6822      	ldr	r2, [r4, #0]
 8004afa:	1b52      	subs	r2, r2, r5
 8004afc:	d420      	bmi.n	8004b40 <_malloc_r+0xd0>
 8004afe:	2a0b      	cmp	r2, #11
 8004b00:	d917      	bls.n	8004b32 <_malloc_r+0xc2>
 8004b02:	1961      	adds	r1, r4, r5
 8004b04:	42a3      	cmp	r3, r4
 8004b06:	6025      	str	r5, [r4, #0]
 8004b08:	bf18      	it	ne
 8004b0a:	6059      	strne	r1, [r3, #4]
 8004b0c:	6863      	ldr	r3, [r4, #4]
 8004b0e:	bf08      	it	eq
 8004b10:	f8c8 1000 	streq.w	r1, [r8]
 8004b14:	5162      	str	r2, [r4, r5]
 8004b16:	604b      	str	r3, [r1, #4]
 8004b18:	4630      	mov	r0, r6
 8004b1a:	f000 f82f 	bl	8004b7c <__malloc_unlock>
 8004b1e:	f104 000b 	add.w	r0, r4, #11
 8004b22:	1d23      	adds	r3, r4, #4
 8004b24:	f020 0007 	bic.w	r0, r0, #7
 8004b28:	1ac2      	subs	r2, r0, r3
 8004b2a:	bf1c      	itt	ne
 8004b2c:	1a1b      	subne	r3, r3, r0
 8004b2e:	50a3      	strne	r3, [r4, r2]
 8004b30:	e7af      	b.n	8004a92 <_malloc_r+0x22>
 8004b32:	6862      	ldr	r2, [r4, #4]
 8004b34:	42a3      	cmp	r3, r4
 8004b36:	bf0c      	ite	eq
 8004b38:	f8c8 2000 	streq.w	r2, [r8]
 8004b3c:	605a      	strne	r2, [r3, #4]
 8004b3e:	e7eb      	b.n	8004b18 <_malloc_r+0xa8>
 8004b40:	4623      	mov	r3, r4
 8004b42:	6864      	ldr	r4, [r4, #4]
 8004b44:	e7ae      	b.n	8004aa4 <_malloc_r+0x34>
 8004b46:	463c      	mov	r4, r7
 8004b48:	687f      	ldr	r7, [r7, #4]
 8004b4a:	e7b6      	b.n	8004aba <_malloc_r+0x4a>
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	42a3      	cmp	r3, r4
 8004b52:	d1fb      	bne.n	8004b4c <_malloc_r+0xdc>
 8004b54:	2300      	movs	r3, #0
 8004b56:	6053      	str	r3, [r2, #4]
 8004b58:	e7de      	b.n	8004b18 <_malloc_r+0xa8>
 8004b5a:	230c      	movs	r3, #12
 8004b5c:	4630      	mov	r0, r6
 8004b5e:	6033      	str	r3, [r6, #0]
 8004b60:	f000 f80c 	bl	8004b7c <__malloc_unlock>
 8004b64:	e794      	b.n	8004a90 <_malloc_r+0x20>
 8004b66:	6005      	str	r5, [r0, #0]
 8004b68:	e7d6      	b.n	8004b18 <_malloc_r+0xa8>
 8004b6a:	bf00      	nop
 8004b6c:	20000378 	.word	0x20000378

08004b70 <__malloc_lock>:
 8004b70:	4801      	ldr	r0, [pc, #4]	@ (8004b78 <__malloc_lock+0x8>)
 8004b72:	f7ff bf10 	b.w	8004996 <__retarget_lock_acquire_recursive>
 8004b76:	bf00      	nop
 8004b78:	20000370 	.word	0x20000370

08004b7c <__malloc_unlock>:
 8004b7c:	4801      	ldr	r0, [pc, #4]	@ (8004b84 <__malloc_unlock+0x8>)
 8004b7e:	f7ff bf0b 	b.w	8004998 <__retarget_lock_release_recursive>
 8004b82:	bf00      	nop
 8004b84:	20000370 	.word	0x20000370

08004b88 <__sfputc_r>:
 8004b88:	6893      	ldr	r3, [r2, #8]
 8004b8a:	b410      	push	{r4}
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	6093      	str	r3, [r2, #8]
 8004b92:	da07      	bge.n	8004ba4 <__sfputc_r+0x1c>
 8004b94:	6994      	ldr	r4, [r2, #24]
 8004b96:	42a3      	cmp	r3, r4
 8004b98:	db01      	blt.n	8004b9e <__sfputc_r+0x16>
 8004b9a:	290a      	cmp	r1, #10
 8004b9c:	d102      	bne.n	8004ba4 <__sfputc_r+0x1c>
 8004b9e:	bc10      	pop	{r4}
 8004ba0:	f7ff bdeb 	b.w	800477a <__swbuf_r>
 8004ba4:	6813      	ldr	r3, [r2, #0]
 8004ba6:	1c58      	adds	r0, r3, #1
 8004ba8:	6010      	str	r0, [r2, #0]
 8004baa:	7019      	strb	r1, [r3, #0]
 8004bac:	4608      	mov	r0, r1
 8004bae:	bc10      	pop	{r4}
 8004bb0:	4770      	bx	lr

08004bb2 <__sfputs_r>:
 8004bb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bb4:	4606      	mov	r6, r0
 8004bb6:	460f      	mov	r7, r1
 8004bb8:	4614      	mov	r4, r2
 8004bba:	18d5      	adds	r5, r2, r3
 8004bbc:	42ac      	cmp	r4, r5
 8004bbe:	d101      	bne.n	8004bc4 <__sfputs_r+0x12>
 8004bc0:	2000      	movs	r0, #0
 8004bc2:	e007      	b.n	8004bd4 <__sfputs_r+0x22>
 8004bc4:	463a      	mov	r2, r7
 8004bc6:	4630      	mov	r0, r6
 8004bc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bcc:	f7ff ffdc 	bl	8004b88 <__sfputc_r>
 8004bd0:	1c43      	adds	r3, r0, #1
 8004bd2:	d1f3      	bne.n	8004bbc <__sfputs_r+0xa>
 8004bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004bd8 <_vfiprintf_r>:
 8004bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bdc:	460d      	mov	r5, r1
 8004bde:	4614      	mov	r4, r2
 8004be0:	4698      	mov	r8, r3
 8004be2:	4606      	mov	r6, r0
 8004be4:	b09d      	sub	sp, #116	@ 0x74
 8004be6:	b118      	cbz	r0, 8004bf0 <_vfiprintf_r+0x18>
 8004be8:	6a03      	ldr	r3, [r0, #32]
 8004bea:	b90b      	cbnz	r3, 8004bf0 <_vfiprintf_r+0x18>
 8004bec:	f7ff fcd4 	bl	8004598 <__sinit>
 8004bf0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004bf2:	07d9      	lsls	r1, r3, #31
 8004bf4:	d405      	bmi.n	8004c02 <_vfiprintf_r+0x2a>
 8004bf6:	89ab      	ldrh	r3, [r5, #12]
 8004bf8:	059a      	lsls	r2, r3, #22
 8004bfa:	d402      	bmi.n	8004c02 <_vfiprintf_r+0x2a>
 8004bfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004bfe:	f7ff feca 	bl	8004996 <__retarget_lock_acquire_recursive>
 8004c02:	89ab      	ldrh	r3, [r5, #12]
 8004c04:	071b      	lsls	r3, r3, #28
 8004c06:	d501      	bpl.n	8004c0c <_vfiprintf_r+0x34>
 8004c08:	692b      	ldr	r3, [r5, #16]
 8004c0a:	b99b      	cbnz	r3, 8004c34 <_vfiprintf_r+0x5c>
 8004c0c:	4629      	mov	r1, r5
 8004c0e:	4630      	mov	r0, r6
 8004c10:	f7ff fdf2 	bl	80047f8 <__swsetup_r>
 8004c14:	b170      	cbz	r0, 8004c34 <_vfiprintf_r+0x5c>
 8004c16:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004c18:	07dc      	lsls	r4, r3, #31
 8004c1a:	d504      	bpl.n	8004c26 <_vfiprintf_r+0x4e>
 8004c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c20:	b01d      	add	sp, #116	@ 0x74
 8004c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c26:	89ab      	ldrh	r3, [r5, #12]
 8004c28:	0598      	lsls	r0, r3, #22
 8004c2a:	d4f7      	bmi.n	8004c1c <_vfiprintf_r+0x44>
 8004c2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004c2e:	f7ff feb3 	bl	8004998 <__retarget_lock_release_recursive>
 8004c32:	e7f3      	b.n	8004c1c <_vfiprintf_r+0x44>
 8004c34:	2300      	movs	r3, #0
 8004c36:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c38:	2320      	movs	r3, #32
 8004c3a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004c3e:	2330      	movs	r3, #48	@ 0x30
 8004c40:	f04f 0901 	mov.w	r9, #1
 8004c44:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c48:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8004df4 <_vfiprintf_r+0x21c>
 8004c4c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004c50:	4623      	mov	r3, r4
 8004c52:	469a      	mov	sl, r3
 8004c54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c58:	b10a      	cbz	r2, 8004c5e <_vfiprintf_r+0x86>
 8004c5a:	2a25      	cmp	r2, #37	@ 0x25
 8004c5c:	d1f9      	bne.n	8004c52 <_vfiprintf_r+0x7a>
 8004c5e:	ebba 0b04 	subs.w	fp, sl, r4
 8004c62:	d00b      	beq.n	8004c7c <_vfiprintf_r+0xa4>
 8004c64:	465b      	mov	r3, fp
 8004c66:	4622      	mov	r2, r4
 8004c68:	4629      	mov	r1, r5
 8004c6a:	4630      	mov	r0, r6
 8004c6c:	f7ff ffa1 	bl	8004bb2 <__sfputs_r>
 8004c70:	3001      	adds	r0, #1
 8004c72:	f000 80a7 	beq.w	8004dc4 <_vfiprintf_r+0x1ec>
 8004c76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c78:	445a      	add	r2, fp
 8004c7a:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c7c:	f89a 3000 	ldrb.w	r3, [sl]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f000 809f 	beq.w	8004dc4 <_vfiprintf_r+0x1ec>
 8004c86:	2300      	movs	r3, #0
 8004c88:	f04f 32ff 	mov.w	r2, #4294967295
 8004c8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c90:	f10a 0a01 	add.w	sl, sl, #1
 8004c94:	9304      	str	r3, [sp, #16]
 8004c96:	9307      	str	r3, [sp, #28]
 8004c98:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004c9c:	931a      	str	r3, [sp, #104]	@ 0x68
 8004c9e:	4654      	mov	r4, sl
 8004ca0:	2205      	movs	r2, #5
 8004ca2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ca6:	4853      	ldr	r0, [pc, #332]	@ (8004df4 <_vfiprintf_r+0x21c>)
 8004ca8:	f000 fb08 	bl	80052bc <memchr>
 8004cac:	9a04      	ldr	r2, [sp, #16]
 8004cae:	b9d8      	cbnz	r0, 8004ce8 <_vfiprintf_r+0x110>
 8004cb0:	06d1      	lsls	r1, r2, #27
 8004cb2:	bf44      	itt	mi
 8004cb4:	2320      	movmi	r3, #32
 8004cb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004cba:	0713      	lsls	r3, r2, #28
 8004cbc:	bf44      	itt	mi
 8004cbe:	232b      	movmi	r3, #43	@ 0x2b
 8004cc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004cc4:	f89a 3000 	ldrb.w	r3, [sl]
 8004cc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8004cca:	d015      	beq.n	8004cf8 <_vfiprintf_r+0x120>
 8004ccc:	4654      	mov	r4, sl
 8004cce:	2000      	movs	r0, #0
 8004cd0:	f04f 0c0a 	mov.w	ip, #10
 8004cd4:	9a07      	ldr	r2, [sp, #28]
 8004cd6:	4621      	mov	r1, r4
 8004cd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cdc:	3b30      	subs	r3, #48	@ 0x30
 8004cde:	2b09      	cmp	r3, #9
 8004ce0:	d94b      	bls.n	8004d7a <_vfiprintf_r+0x1a2>
 8004ce2:	b1b0      	cbz	r0, 8004d12 <_vfiprintf_r+0x13a>
 8004ce4:	9207      	str	r2, [sp, #28]
 8004ce6:	e014      	b.n	8004d12 <_vfiprintf_r+0x13a>
 8004ce8:	eba0 0308 	sub.w	r3, r0, r8
 8004cec:	fa09 f303 	lsl.w	r3, r9, r3
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	46a2      	mov	sl, r4
 8004cf4:	9304      	str	r3, [sp, #16]
 8004cf6:	e7d2      	b.n	8004c9e <_vfiprintf_r+0xc6>
 8004cf8:	9b03      	ldr	r3, [sp, #12]
 8004cfa:	1d19      	adds	r1, r3, #4
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	9103      	str	r1, [sp, #12]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	bfbb      	ittet	lt
 8004d04:	425b      	neglt	r3, r3
 8004d06:	f042 0202 	orrlt.w	r2, r2, #2
 8004d0a:	9307      	strge	r3, [sp, #28]
 8004d0c:	9307      	strlt	r3, [sp, #28]
 8004d0e:	bfb8      	it	lt
 8004d10:	9204      	strlt	r2, [sp, #16]
 8004d12:	7823      	ldrb	r3, [r4, #0]
 8004d14:	2b2e      	cmp	r3, #46	@ 0x2e
 8004d16:	d10a      	bne.n	8004d2e <_vfiprintf_r+0x156>
 8004d18:	7863      	ldrb	r3, [r4, #1]
 8004d1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d1c:	d132      	bne.n	8004d84 <_vfiprintf_r+0x1ac>
 8004d1e:	9b03      	ldr	r3, [sp, #12]
 8004d20:	3402      	adds	r4, #2
 8004d22:	1d1a      	adds	r2, r3, #4
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	9203      	str	r2, [sp, #12]
 8004d28:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004d2c:	9305      	str	r3, [sp, #20]
 8004d2e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8004df8 <_vfiprintf_r+0x220>
 8004d32:	2203      	movs	r2, #3
 8004d34:	4650      	mov	r0, sl
 8004d36:	7821      	ldrb	r1, [r4, #0]
 8004d38:	f000 fac0 	bl	80052bc <memchr>
 8004d3c:	b138      	cbz	r0, 8004d4e <_vfiprintf_r+0x176>
 8004d3e:	2240      	movs	r2, #64	@ 0x40
 8004d40:	9b04      	ldr	r3, [sp, #16]
 8004d42:	eba0 000a 	sub.w	r0, r0, sl
 8004d46:	4082      	lsls	r2, r0
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	3401      	adds	r4, #1
 8004d4c:	9304      	str	r3, [sp, #16]
 8004d4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d52:	2206      	movs	r2, #6
 8004d54:	4829      	ldr	r0, [pc, #164]	@ (8004dfc <_vfiprintf_r+0x224>)
 8004d56:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004d5a:	f000 faaf 	bl	80052bc <memchr>
 8004d5e:	2800      	cmp	r0, #0
 8004d60:	d03f      	beq.n	8004de2 <_vfiprintf_r+0x20a>
 8004d62:	4b27      	ldr	r3, [pc, #156]	@ (8004e00 <_vfiprintf_r+0x228>)
 8004d64:	bb1b      	cbnz	r3, 8004dae <_vfiprintf_r+0x1d6>
 8004d66:	9b03      	ldr	r3, [sp, #12]
 8004d68:	3307      	adds	r3, #7
 8004d6a:	f023 0307 	bic.w	r3, r3, #7
 8004d6e:	3308      	adds	r3, #8
 8004d70:	9303      	str	r3, [sp, #12]
 8004d72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d74:	443b      	add	r3, r7
 8004d76:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d78:	e76a      	b.n	8004c50 <_vfiprintf_r+0x78>
 8004d7a:	460c      	mov	r4, r1
 8004d7c:	2001      	movs	r0, #1
 8004d7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d82:	e7a8      	b.n	8004cd6 <_vfiprintf_r+0xfe>
 8004d84:	2300      	movs	r3, #0
 8004d86:	f04f 0c0a 	mov.w	ip, #10
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	3401      	adds	r4, #1
 8004d8e:	9305      	str	r3, [sp, #20]
 8004d90:	4620      	mov	r0, r4
 8004d92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d96:	3a30      	subs	r2, #48	@ 0x30
 8004d98:	2a09      	cmp	r2, #9
 8004d9a:	d903      	bls.n	8004da4 <_vfiprintf_r+0x1cc>
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d0c6      	beq.n	8004d2e <_vfiprintf_r+0x156>
 8004da0:	9105      	str	r1, [sp, #20]
 8004da2:	e7c4      	b.n	8004d2e <_vfiprintf_r+0x156>
 8004da4:	4604      	mov	r4, r0
 8004da6:	2301      	movs	r3, #1
 8004da8:	fb0c 2101 	mla	r1, ip, r1, r2
 8004dac:	e7f0      	b.n	8004d90 <_vfiprintf_r+0x1b8>
 8004dae:	ab03      	add	r3, sp, #12
 8004db0:	9300      	str	r3, [sp, #0]
 8004db2:	462a      	mov	r2, r5
 8004db4:	4630      	mov	r0, r6
 8004db6:	4b13      	ldr	r3, [pc, #76]	@ (8004e04 <_vfiprintf_r+0x22c>)
 8004db8:	a904      	add	r1, sp, #16
 8004dba:	f3af 8000 	nop.w
 8004dbe:	4607      	mov	r7, r0
 8004dc0:	1c78      	adds	r0, r7, #1
 8004dc2:	d1d6      	bne.n	8004d72 <_vfiprintf_r+0x19a>
 8004dc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004dc6:	07d9      	lsls	r1, r3, #31
 8004dc8:	d405      	bmi.n	8004dd6 <_vfiprintf_r+0x1fe>
 8004dca:	89ab      	ldrh	r3, [r5, #12]
 8004dcc:	059a      	lsls	r2, r3, #22
 8004dce:	d402      	bmi.n	8004dd6 <_vfiprintf_r+0x1fe>
 8004dd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004dd2:	f7ff fde1 	bl	8004998 <__retarget_lock_release_recursive>
 8004dd6:	89ab      	ldrh	r3, [r5, #12]
 8004dd8:	065b      	lsls	r3, r3, #25
 8004dda:	f53f af1f 	bmi.w	8004c1c <_vfiprintf_r+0x44>
 8004dde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004de0:	e71e      	b.n	8004c20 <_vfiprintf_r+0x48>
 8004de2:	ab03      	add	r3, sp, #12
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	462a      	mov	r2, r5
 8004de8:	4630      	mov	r0, r6
 8004dea:	4b06      	ldr	r3, [pc, #24]	@ (8004e04 <_vfiprintf_r+0x22c>)
 8004dec:	a904      	add	r1, sp, #16
 8004dee:	f000 f87d 	bl	8004eec <_printf_i>
 8004df2:	e7e4      	b.n	8004dbe <_vfiprintf_r+0x1e6>
 8004df4:	08005c8e 	.word	0x08005c8e
 8004df8:	08005c94 	.word	0x08005c94
 8004dfc:	08005c98 	.word	0x08005c98
 8004e00:	00000000 	.word	0x00000000
 8004e04:	08004bb3 	.word	0x08004bb3

08004e08 <_printf_common>:
 8004e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e0c:	4616      	mov	r6, r2
 8004e0e:	4698      	mov	r8, r3
 8004e10:	688a      	ldr	r2, [r1, #8]
 8004e12:	690b      	ldr	r3, [r1, #16]
 8004e14:	4607      	mov	r7, r0
 8004e16:	4293      	cmp	r3, r2
 8004e18:	bfb8      	it	lt
 8004e1a:	4613      	movlt	r3, r2
 8004e1c:	6033      	str	r3, [r6, #0]
 8004e1e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004e22:	460c      	mov	r4, r1
 8004e24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004e28:	b10a      	cbz	r2, 8004e2e <_printf_common+0x26>
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	6033      	str	r3, [r6, #0]
 8004e2e:	6823      	ldr	r3, [r4, #0]
 8004e30:	0699      	lsls	r1, r3, #26
 8004e32:	bf42      	ittt	mi
 8004e34:	6833      	ldrmi	r3, [r6, #0]
 8004e36:	3302      	addmi	r3, #2
 8004e38:	6033      	strmi	r3, [r6, #0]
 8004e3a:	6825      	ldr	r5, [r4, #0]
 8004e3c:	f015 0506 	ands.w	r5, r5, #6
 8004e40:	d106      	bne.n	8004e50 <_printf_common+0x48>
 8004e42:	f104 0a19 	add.w	sl, r4, #25
 8004e46:	68e3      	ldr	r3, [r4, #12]
 8004e48:	6832      	ldr	r2, [r6, #0]
 8004e4a:	1a9b      	subs	r3, r3, r2
 8004e4c:	42ab      	cmp	r3, r5
 8004e4e:	dc2b      	bgt.n	8004ea8 <_printf_common+0xa0>
 8004e50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004e54:	6822      	ldr	r2, [r4, #0]
 8004e56:	3b00      	subs	r3, #0
 8004e58:	bf18      	it	ne
 8004e5a:	2301      	movne	r3, #1
 8004e5c:	0692      	lsls	r2, r2, #26
 8004e5e:	d430      	bmi.n	8004ec2 <_printf_common+0xba>
 8004e60:	4641      	mov	r1, r8
 8004e62:	4638      	mov	r0, r7
 8004e64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004e68:	47c8      	blx	r9
 8004e6a:	3001      	adds	r0, #1
 8004e6c:	d023      	beq.n	8004eb6 <_printf_common+0xae>
 8004e6e:	6823      	ldr	r3, [r4, #0]
 8004e70:	6922      	ldr	r2, [r4, #16]
 8004e72:	f003 0306 	and.w	r3, r3, #6
 8004e76:	2b04      	cmp	r3, #4
 8004e78:	bf14      	ite	ne
 8004e7a:	2500      	movne	r5, #0
 8004e7c:	6833      	ldreq	r3, [r6, #0]
 8004e7e:	f04f 0600 	mov.w	r6, #0
 8004e82:	bf08      	it	eq
 8004e84:	68e5      	ldreq	r5, [r4, #12]
 8004e86:	f104 041a 	add.w	r4, r4, #26
 8004e8a:	bf08      	it	eq
 8004e8c:	1aed      	subeq	r5, r5, r3
 8004e8e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004e92:	bf08      	it	eq
 8004e94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	bfc4      	itt	gt
 8004e9c:	1a9b      	subgt	r3, r3, r2
 8004e9e:	18ed      	addgt	r5, r5, r3
 8004ea0:	42b5      	cmp	r5, r6
 8004ea2:	d11a      	bne.n	8004eda <_printf_common+0xd2>
 8004ea4:	2000      	movs	r0, #0
 8004ea6:	e008      	b.n	8004eba <_printf_common+0xb2>
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	4652      	mov	r2, sl
 8004eac:	4641      	mov	r1, r8
 8004eae:	4638      	mov	r0, r7
 8004eb0:	47c8      	blx	r9
 8004eb2:	3001      	adds	r0, #1
 8004eb4:	d103      	bne.n	8004ebe <_printf_common+0xb6>
 8004eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8004eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ebe:	3501      	adds	r5, #1
 8004ec0:	e7c1      	b.n	8004e46 <_printf_common+0x3e>
 8004ec2:	2030      	movs	r0, #48	@ 0x30
 8004ec4:	18e1      	adds	r1, r4, r3
 8004ec6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004eca:	1c5a      	adds	r2, r3, #1
 8004ecc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004ed0:	4422      	add	r2, r4
 8004ed2:	3302      	adds	r3, #2
 8004ed4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004ed8:	e7c2      	b.n	8004e60 <_printf_common+0x58>
 8004eda:	2301      	movs	r3, #1
 8004edc:	4622      	mov	r2, r4
 8004ede:	4641      	mov	r1, r8
 8004ee0:	4638      	mov	r0, r7
 8004ee2:	47c8      	blx	r9
 8004ee4:	3001      	adds	r0, #1
 8004ee6:	d0e6      	beq.n	8004eb6 <_printf_common+0xae>
 8004ee8:	3601      	adds	r6, #1
 8004eea:	e7d9      	b.n	8004ea0 <_printf_common+0x98>

08004eec <_printf_i>:
 8004eec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ef0:	7e0f      	ldrb	r7, [r1, #24]
 8004ef2:	4691      	mov	r9, r2
 8004ef4:	2f78      	cmp	r7, #120	@ 0x78
 8004ef6:	4680      	mov	r8, r0
 8004ef8:	460c      	mov	r4, r1
 8004efa:	469a      	mov	sl, r3
 8004efc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004efe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004f02:	d807      	bhi.n	8004f14 <_printf_i+0x28>
 8004f04:	2f62      	cmp	r7, #98	@ 0x62
 8004f06:	d80a      	bhi.n	8004f1e <_printf_i+0x32>
 8004f08:	2f00      	cmp	r7, #0
 8004f0a:	f000 80d3 	beq.w	80050b4 <_printf_i+0x1c8>
 8004f0e:	2f58      	cmp	r7, #88	@ 0x58
 8004f10:	f000 80ba 	beq.w	8005088 <_printf_i+0x19c>
 8004f14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004f1c:	e03a      	b.n	8004f94 <_printf_i+0xa8>
 8004f1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004f22:	2b15      	cmp	r3, #21
 8004f24:	d8f6      	bhi.n	8004f14 <_printf_i+0x28>
 8004f26:	a101      	add	r1, pc, #4	@ (adr r1, 8004f2c <_printf_i+0x40>)
 8004f28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f2c:	08004f85 	.word	0x08004f85
 8004f30:	08004f99 	.word	0x08004f99
 8004f34:	08004f15 	.word	0x08004f15
 8004f38:	08004f15 	.word	0x08004f15
 8004f3c:	08004f15 	.word	0x08004f15
 8004f40:	08004f15 	.word	0x08004f15
 8004f44:	08004f99 	.word	0x08004f99
 8004f48:	08004f15 	.word	0x08004f15
 8004f4c:	08004f15 	.word	0x08004f15
 8004f50:	08004f15 	.word	0x08004f15
 8004f54:	08004f15 	.word	0x08004f15
 8004f58:	0800509b 	.word	0x0800509b
 8004f5c:	08004fc3 	.word	0x08004fc3
 8004f60:	08005055 	.word	0x08005055
 8004f64:	08004f15 	.word	0x08004f15
 8004f68:	08004f15 	.word	0x08004f15
 8004f6c:	080050bd 	.word	0x080050bd
 8004f70:	08004f15 	.word	0x08004f15
 8004f74:	08004fc3 	.word	0x08004fc3
 8004f78:	08004f15 	.word	0x08004f15
 8004f7c:	08004f15 	.word	0x08004f15
 8004f80:	0800505d 	.word	0x0800505d
 8004f84:	6833      	ldr	r3, [r6, #0]
 8004f86:	1d1a      	adds	r2, r3, #4
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	6032      	str	r2, [r6, #0]
 8004f8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004f94:	2301      	movs	r3, #1
 8004f96:	e09e      	b.n	80050d6 <_printf_i+0x1ea>
 8004f98:	6833      	ldr	r3, [r6, #0]
 8004f9a:	6820      	ldr	r0, [r4, #0]
 8004f9c:	1d19      	adds	r1, r3, #4
 8004f9e:	6031      	str	r1, [r6, #0]
 8004fa0:	0606      	lsls	r6, r0, #24
 8004fa2:	d501      	bpl.n	8004fa8 <_printf_i+0xbc>
 8004fa4:	681d      	ldr	r5, [r3, #0]
 8004fa6:	e003      	b.n	8004fb0 <_printf_i+0xc4>
 8004fa8:	0645      	lsls	r5, r0, #25
 8004faa:	d5fb      	bpl.n	8004fa4 <_printf_i+0xb8>
 8004fac:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004fb0:	2d00      	cmp	r5, #0
 8004fb2:	da03      	bge.n	8004fbc <_printf_i+0xd0>
 8004fb4:	232d      	movs	r3, #45	@ 0x2d
 8004fb6:	426d      	negs	r5, r5
 8004fb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fbc:	230a      	movs	r3, #10
 8004fbe:	4859      	ldr	r0, [pc, #356]	@ (8005124 <_printf_i+0x238>)
 8004fc0:	e011      	b.n	8004fe6 <_printf_i+0xfa>
 8004fc2:	6821      	ldr	r1, [r4, #0]
 8004fc4:	6833      	ldr	r3, [r6, #0]
 8004fc6:	0608      	lsls	r0, r1, #24
 8004fc8:	f853 5b04 	ldr.w	r5, [r3], #4
 8004fcc:	d402      	bmi.n	8004fd4 <_printf_i+0xe8>
 8004fce:	0649      	lsls	r1, r1, #25
 8004fd0:	bf48      	it	mi
 8004fd2:	b2ad      	uxthmi	r5, r5
 8004fd4:	2f6f      	cmp	r7, #111	@ 0x6f
 8004fd6:	6033      	str	r3, [r6, #0]
 8004fd8:	bf14      	ite	ne
 8004fda:	230a      	movne	r3, #10
 8004fdc:	2308      	moveq	r3, #8
 8004fde:	4851      	ldr	r0, [pc, #324]	@ (8005124 <_printf_i+0x238>)
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004fe6:	6866      	ldr	r6, [r4, #4]
 8004fe8:	2e00      	cmp	r6, #0
 8004fea:	bfa8      	it	ge
 8004fec:	6821      	ldrge	r1, [r4, #0]
 8004fee:	60a6      	str	r6, [r4, #8]
 8004ff0:	bfa4      	itt	ge
 8004ff2:	f021 0104 	bicge.w	r1, r1, #4
 8004ff6:	6021      	strge	r1, [r4, #0]
 8004ff8:	b90d      	cbnz	r5, 8004ffe <_printf_i+0x112>
 8004ffa:	2e00      	cmp	r6, #0
 8004ffc:	d04b      	beq.n	8005096 <_printf_i+0x1aa>
 8004ffe:	4616      	mov	r6, r2
 8005000:	fbb5 f1f3 	udiv	r1, r5, r3
 8005004:	fb03 5711 	mls	r7, r3, r1, r5
 8005008:	5dc7      	ldrb	r7, [r0, r7]
 800500a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800500e:	462f      	mov	r7, r5
 8005010:	42bb      	cmp	r3, r7
 8005012:	460d      	mov	r5, r1
 8005014:	d9f4      	bls.n	8005000 <_printf_i+0x114>
 8005016:	2b08      	cmp	r3, #8
 8005018:	d10b      	bne.n	8005032 <_printf_i+0x146>
 800501a:	6823      	ldr	r3, [r4, #0]
 800501c:	07df      	lsls	r7, r3, #31
 800501e:	d508      	bpl.n	8005032 <_printf_i+0x146>
 8005020:	6923      	ldr	r3, [r4, #16]
 8005022:	6861      	ldr	r1, [r4, #4]
 8005024:	4299      	cmp	r1, r3
 8005026:	bfde      	ittt	le
 8005028:	2330      	movle	r3, #48	@ 0x30
 800502a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800502e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005032:	1b92      	subs	r2, r2, r6
 8005034:	6122      	str	r2, [r4, #16]
 8005036:	464b      	mov	r3, r9
 8005038:	4621      	mov	r1, r4
 800503a:	4640      	mov	r0, r8
 800503c:	f8cd a000 	str.w	sl, [sp]
 8005040:	aa03      	add	r2, sp, #12
 8005042:	f7ff fee1 	bl	8004e08 <_printf_common>
 8005046:	3001      	adds	r0, #1
 8005048:	d14a      	bne.n	80050e0 <_printf_i+0x1f4>
 800504a:	f04f 30ff 	mov.w	r0, #4294967295
 800504e:	b004      	add	sp, #16
 8005050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005054:	6823      	ldr	r3, [r4, #0]
 8005056:	f043 0320 	orr.w	r3, r3, #32
 800505a:	6023      	str	r3, [r4, #0]
 800505c:	2778      	movs	r7, #120	@ 0x78
 800505e:	4832      	ldr	r0, [pc, #200]	@ (8005128 <_printf_i+0x23c>)
 8005060:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005064:	6823      	ldr	r3, [r4, #0]
 8005066:	6831      	ldr	r1, [r6, #0]
 8005068:	061f      	lsls	r7, r3, #24
 800506a:	f851 5b04 	ldr.w	r5, [r1], #4
 800506e:	d402      	bmi.n	8005076 <_printf_i+0x18a>
 8005070:	065f      	lsls	r7, r3, #25
 8005072:	bf48      	it	mi
 8005074:	b2ad      	uxthmi	r5, r5
 8005076:	6031      	str	r1, [r6, #0]
 8005078:	07d9      	lsls	r1, r3, #31
 800507a:	bf44      	itt	mi
 800507c:	f043 0320 	orrmi.w	r3, r3, #32
 8005080:	6023      	strmi	r3, [r4, #0]
 8005082:	b11d      	cbz	r5, 800508c <_printf_i+0x1a0>
 8005084:	2310      	movs	r3, #16
 8005086:	e7ab      	b.n	8004fe0 <_printf_i+0xf4>
 8005088:	4826      	ldr	r0, [pc, #152]	@ (8005124 <_printf_i+0x238>)
 800508a:	e7e9      	b.n	8005060 <_printf_i+0x174>
 800508c:	6823      	ldr	r3, [r4, #0]
 800508e:	f023 0320 	bic.w	r3, r3, #32
 8005092:	6023      	str	r3, [r4, #0]
 8005094:	e7f6      	b.n	8005084 <_printf_i+0x198>
 8005096:	4616      	mov	r6, r2
 8005098:	e7bd      	b.n	8005016 <_printf_i+0x12a>
 800509a:	6833      	ldr	r3, [r6, #0]
 800509c:	6825      	ldr	r5, [r4, #0]
 800509e:	1d18      	adds	r0, r3, #4
 80050a0:	6961      	ldr	r1, [r4, #20]
 80050a2:	6030      	str	r0, [r6, #0]
 80050a4:	062e      	lsls	r6, r5, #24
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	d501      	bpl.n	80050ae <_printf_i+0x1c2>
 80050aa:	6019      	str	r1, [r3, #0]
 80050ac:	e002      	b.n	80050b4 <_printf_i+0x1c8>
 80050ae:	0668      	lsls	r0, r5, #25
 80050b0:	d5fb      	bpl.n	80050aa <_printf_i+0x1be>
 80050b2:	8019      	strh	r1, [r3, #0]
 80050b4:	2300      	movs	r3, #0
 80050b6:	4616      	mov	r6, r2
 80050b8:	6123      	str	r3, [r4, #16]
 80050ba:	e7bc      	b.n	8005036 <_printf_i+0x14a>
 80050bc:	6833      	ldr	r3, [r6, #0]
 80050be:	2100      	movs	r1, #0
 80050c0:	1d1a      	adds	r2, r3, #4
 80050c2:	6032      	str	r2, [r6, #0]
 80050c4:	681e      	ldr	r6, [r3, #0]
 80050c6:	6862      	ldr	r2, [r4, #4]
 80050c8:	4630      	mov	r0, r6
 80050ca:	f000 f8f7 	bl	80052bc <memchr>
 80050ce:	b108      	cbz	r0, 80050d4 <_printf_i+0x1e8>
 80050d0:	1b80      	subs	r0, r0, r6
 80050d2:	6060      	str	r0, [r4, #4]
 80050d4:	6863      	ldr	r3, [r4, #4]
 80050d6:	6123      	str	r3, [r4, #16]
 80050d8:	2300      	movs	r3, #0
 80050da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050de:	e7aa      	b.n	8005036 <_printf_i+0x14a>
 80050e0:	4632      	mov	r2, r6
 80050e2:	4649      	mov	r1, r9
 80050e4:	4640      	mov	r0, r8
 80050e6:	6923      	ldr	r3, [r4, #16]
 80050e8:	47d0      	blx	sl
 80050ea:	3001      	adds	r0, #1
 80050ec:	d0ad      	beq.n	800504a <_printf_i+0x15e>
 80050ee:	6823      	ldr	r3, [r4, #0]
 80050f0:	079b      	lsls	r3, r3, #30
 80050f2:	d413      	bmi.n	800511c <_printf_i+0x230>
 80050f4:	68e0      	ldr	r0, [r4, #12]
 80050f6:	9b03      	ldr	r3, [sp, #12]
 80050f8:	4298      	cmp	r0, r3
 80050fa:	bfb8      	it	lt
 80050fc:	4618      	movlt	r0, r3
 80050fe:	e7a6      	b.n	800504e <_printf_i+0x162>
 8005100:	2301      	movs	r3, #1
 8005102:	4632      	mov	r2, r6
 8005104:	4649      	mov	r1, r9
 8005106:	4640      	mov	r0, r8
 8005108:	47d0      	blx	sl
 800510a:	3001      	adds	r0, #1
 800510c:	d09d      	beq.n	800504a <_printf_i+0x15e>
 800510e:	3501      	adds	r5, #1
 8005110:	68e3      	ldr	r3, [r4, #12]
 8005112:	9903      	ldr	r1, [sp, #12]
 8005114:	1a5b      	subs	r3, r3, r1
 8005116:	42ab      	cmp	r3, r5
 8005118:	dcf2      	bgt.n	8005100 <_printf_i+0x214>
 800511a:	e7eb      	b.n	80050f4 <_printf_i+0x208>
 800511c:	2500      	movs	r5, #0
 800511e:	f104 0619 	add.w	r6, r4, #25
 8005122:	e7f5      	b.n	8005110 <_printf_i+0x224>
 8005124:	08005c9f 	.word	0x08005c9f
 8005128:	08005cb0 	.word	0x08005cb0

0800512c <__swhatbuf_r>:
 800512c:	b570      	push	{r4, r5, r6, lr}
 800512e:	460c      	mov	r4, r1
 8005130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005134:	4615      	mov	r5, r2
 8005136:	2900      	cmp	r1, #0
 8005138:	461e      	mov	r6, r3
 800513a:	b096      	sub	sp, #88	@ 0x58
 800513c:	da0c      	bge.n	8005158 <__swhatbuf_r+0x2c>
 800513e:	89a3      	ldrh	r3, [r4, #12]
 8005140:	2100      	movs	r1, #0
 8005142:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005146:	bf14      	ite	ne
 8005148:	2340      	movne	r3, #64	@ 0x40
 800514a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800514e:	2000      	movs	r0, #0
 8005150:	6031      	str	r1, [r6, #0]
 8005152:	602b      	str	r3, [r5, #0]
 8005154:	b016      	add	sp, #88	@ 0x58
 8005156:	bd70      	pop	{r4, r5, r6, pc}
 8005158:	466a      	mov	r2, sp
 800515a:	f000 f87d 	bl	8005258 <_fstat_r>
 800515e:	2800      	cmp	r0, #0
 8005160:	dbed      	blt.n	800513e <__swhatbuf_r+0x12>
 8005162:	9901      	ldr	r1, [sp, #4]
 8005164:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005168:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800516c:	4259      	negs	r1, r3
 800516e:	4159      	adcs	r1, r3
 8005170:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005174:	e7eb      	b.n	800514e <__swhatbuf_r+0x22>

08005176 <__smakebuf_r>:
 8005176:	898b      	ldrh	r3, [r1, #12]
 8005178:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800517a:	079d      	lsls	r5, r3, #30
 800517c:	4606      	mov	r6, r0
 800517e:	460c      	mov	r4, r1
 8005180:	d507      	bpl.n	8005192 <__smakebuf_r+0x1c>
 8005182:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005186:	6023      	str	r3, [r4, #0]
 8005188:	6123      	str	r3, [r4, #16]
 800518a:	2301      	movs	r3, #1
 800518c:	6163      	str	r3, [r4, #20]
 800518e:	b003      	add	sp, #12
 8005190:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005192:	466a      	mov	r2, sp
 8005194:	ab01      	add	r3, sp, #4
 8005196:	f7ff ffc9 	bl	800512c <__swhatbuf_r>
 800519a:	9f00      	ldr	r7, [sp, #0]
 800519c:	4605      	mov	r5, r0
 800519e:	4639      	mov	r1, r7
 80051a0:	4630      	mov	r0, r6
 80051a2:	f7ff fc65 	bl	8004a70 <_malloc_r>
 80051a6:	b948      	cbnz	r0, 80051bc <__smakebuf_r+0x46>
 80051a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051ac:	059a      	lsls	r2, r3, #22
 80051ae:	d4ee      	bmi.n	800518e <__smakebuf_r+0x18>
 80051b0:	f023 0303 	bic.w	r3, r3, #3
 80051b4:	f043 0302 	orr.w	r3, r3, #2
 80051b8:	81a3      	strh	r3, [r4, #12]
 80051ba:	e7e2      	b.n	8005182 <__smakebuf_r+0xc>
 80051bc:	89a3      	ldrh	r3, [r4, #12]
 80051be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80051c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051c6:	81a3      	strh	r3, [r4, #12]
 80051c8:	9b01      	ldr	r3, [sp, #4]
 80051ca:	6020      	str	r0, [r4, #0]
 80051cc:	b15b      	cbz	r3, 80051e6 <__smakebuf_r+0x70>
 80051ce:	4630      	mov	r0, r6
 80051d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051d4:	f000 f852 	bl	800527c <_isatty_r>
 80051d8:	b128      	cbz	r0, 80051e6 <__smakebuf_r+0x70>
 80051da:	89a3      	ldrh	r3, [r4, #12]
 80051dc:	f023 0303 	bic.w	r3, r3, #3
 80051e0:	f043 0301 	orr.w	r3, r3, #1
 80051e4:	81a3      	strh	r3, [r4, #12]
 80051e6:	89a3      	ldrh	r3, [r4, #12]
 80051e8:	431d      	orrs	r5, r3
 80051ea:	81a5      	strh	r5, [r4, #12]
 80051ec:	e7cf      	b.n	800518e <__smakebuf_r+0x18>

080051ee <_putc_r>:
 80051ee:	b570      	push	{r4, r5, r6, lr}
 80051f0:	460d      	mov	r5, r1
 80051f2:	4614      	mov	r4, r2
 80051f4:	4606      	mov	r6, r0
 80051f6:	b118      	cbz	r0, 8005200 <_putc_r+0x12>
 80051f8:	6a03      	ldr	r3, [r0, #32]
 80051fa:	b90b      	cbnz	r3, 8005200 <_putc_r+0x12>
 80051fc:	f7ff f9cc 	bl	8004598 <__sinit>
 8005200:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005202:	07d8      	lsls	r0, r3, #31
 8005204:	d405      	bmi.n	8005212 <_putc_r+0x24>
 8005206:	89a3      	ldrh	r3, [r4, #12]
 8005208:	0599      	lsls	r1, r3, #22
 800520a:	d402      	bmi.n	8005212 <_putc_r+0x24>
 800520c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800520e:	f7ff fbc2 	bl	8004996 <__retarget_lock_acquire_recursive>
 8005212:	68a3      	ldr	r3, [r4, #8]
 8005214:	3b01      	subs	r3, #1
 8005216:	2b00      	cmp	r3, #0
 8005218:	60a3      	str	r3, [r4, #8]
 800521a:	da05      	bge.n	8005228 <_putc_r+0x3a>
 800521c:	69a2      	ldr	r2, [r4, #24]
 800521e:	4293      	cmp	r3, r2
 8005220:	db12      	blt.n	8005248 <_putc_r+0x5a>
 8005222:	b2eb      	uxtb	r3, r5
 8005224:	2b0a      	cmp	r3, #10
 8005226:	d00f      	beq.n	8005248 <_putc_r+0x5a>
 8005228:	6823      	ldr	r3, [r4, #0]
 800522a:	1c5a      	adds	r2, r3, #1
 800522c:	6022      	str	r2, [r4, #0]
 800522e:	701d      	strb	r5, [r3, #0]
 8005230:	b2ed      	uxtb	r5, r5
 8005232:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005234:	07da      	lsls	r2, r3, #31
 8005236:	d405      	bmi.n	8005244 <_putc_r+0x56>
 8005238:	89a3      	ldrh	r3, [r4, #12]
 800523a:	059b      	lsls	r3, r3, #22
 800523c:	d402      	bmi.n	8005244 <_putc_r+0x56>
 800523e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005240:	f7ff fbaa 	bl	8004998 <__retarget_lock_release_recursive>
 8005244:	4628      	mov	r0, r5
 8005246:	bd70      	pop	{r4, r5, r6, pc}
 8005248:	4629      	mov	r1, r5
 800524a:	4622      	mov	r2, r4
 800524c:	4630      	mov	r0, r6
 800524e:	f7ff fa94 	bl	800477a <__swbuf_r>
 8005252:	4605      	mov	r5, r0
 8005254:	e7ed      	b.n	8005232 <_putc_r+0x44>
	...

08005258 <_fstat_r>:
 8005258:	b538      	push	{r3, r4, r5, lr}
 800525a:	2300      	movs	r3, #0
 800525c:	4d06      	ldr	r5, [pc, #24]	@ (8005278 <_fstat_r+0x20>)
 800525e:	4604      	mov	r4, r0
 8005260:	4608      	mov	r0, r1
 8005262:	4611      	mov	r1, r2
 8005264:	602b      	str	r3, [r5, #0]
 8005266:	f7fb feff 	bl	8001068 <_fstat>
 800526a:	1c43      	adds	r3, r0, #1
 800526c:	d102      	bne.n	8005274 <_fstat_r+0x1c>
 800526e:	682b      	ldr	r3, [r5, #0]
 8005270:	b103      	cbz	r3, 8005274 <_fstat_r+0x1c>
 8005272:	6023      	str	r3, [r4, #0]
 8005274:	bd38      	pop	{r3, r4, r5, pc}
 8005276:	bf00      	nop
 8005278:	2000036c 	.word	0x2000036c

0800527c <_isatty_r>:
 800527c:	b538      	push	{r3, r4, r5, lr}
 800527e:	2300      	movs	r3, #0
 8005280:	4d05      	ldr	r5, [pc, #20]	@ (8005298 <_isatty_r+0x1c>)
 8005282:	4604      	mov	r4, r0
 8005284:	4608      	mov	r0, r1
 8005286:	602b      	str	r3, [r5, #0]
 8005288:	f7fb fefd 	bl	8001086 <_isatty>
 800528c:	1c43      	adds	r3, r0, #1
 800528e:	d102      	bne.n	8005296 <_isatty_r+0x1a>
 8005290:	682b      	ldr	r3, [r5, #0]
 8005292:	b103      	cbz	r3, 8005296 <_isatty_r+0x1a>
 8005294:	6023      	str	r3, [r4, #0]
 8005296:	bd38      	pop	{r3, r4, r5, pc}
 8005298:	2000036c 	.word	0x2000036c

0800529c <_sbrk_r>:
 800529c:	b538      	push	{r3, r4, r5, lr}
 800529e:	2300      	movs	r3, #0
 80052a0:	4d05      	ldr	r5, [pc, #20]	@ (80052b8 <_sbrk_r+0x1c>)
 80052a2:	4604      	mov	r4, r0
 80052a4:	4608      	mov	r0, r1
 80052a6:	602b      	str	r3, [r5, #0]
 80052a8:	f7fb ff04 	bl	80010b4 <_sbrk>
 80052ac:	1c43      	adds	r3, r0, #1
 80052ae:	d102      	bne.n	80052b6 <_sbrk_r+0x1a>
 80052b0:	682b      	ldr	r3, [r5, #0]
 80052b2:	b103      	cbz	r3, 80052b6 <_sbrk_r+0x1a>
 80052b4:	6023      	str	r3, [r4, #0]
 80052b6:	bd38      	pop	{r3, r4, r5, pc}
 80052b8:	2000036c 	.word	0x2000036c

080052bc <memchr>:
 80052bc:	4603      	mov	r3, r0
 80052be:	b510      	push	{r4, lr}
 80052c0:	b2c9      	uxtb	r1, r1
 80052c2:	4402      	add	r2, r0
 80052c4:	4293      	cmp	r3, r2
 80052c6:	4618      	mov	r0, r3
 80052c8:	d101      	bne.n	80052ce <memchr+0x12>
 80052ca:	2000      	movs	r0, #0
 80052cc:	e003      	b.n	80052d6 <memchr+0x1a>
 80052ce:	7804      	ldrb	r4, [r0, #0]
 80052d0:	3301      	adds	r3, #1
 80052d2:	428c      	cmp	r4, r1
 80052d4:	d1f6      	bne.n	80052c4 <memchr+0x8>
 80052d6:	bd10      	pop	{r4, pc}

080052d8 <_init>:
 80052d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052da:	bf00      	nop
 80052dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052de:	bc08      	pop	{r3}
 80052e0:	469e      	mov	lr, r3
 80052e2:	4770      	bx	lr

080052e4 <_fini>:
 80052e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052e6:	bf00      	nop
 80052e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ea:	bc08      	pop	{r3}
 80052ec:	469e      	mov	lr, r3
 80052ee:	4770      	bx	lr
