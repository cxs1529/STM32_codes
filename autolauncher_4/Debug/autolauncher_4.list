
autolauncher_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079e4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000be4  08007af4  08007af4  00008af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086d8  080086d8  0000a07c  2**0
                  CONTENTS
  4 .ARM          00000008  080086d8  080086d8  000096d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086e0  080086e0  0000a07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086e0  080086e0  000096e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086e4  080086e4  000096e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080086e8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  2000007c  08008764  0000a07c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  08008764  0000a380  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a07c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011b25  00000000  00000000  0000a0a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c78  00000000  00000000  0001bbca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e8  00000000  00000000  0001e848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e06  00000000  00000000  0001fa30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a1ba  00000000  00000000  00020836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016b22  00000000  00000000  0003a9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009424e  00000000  00000000  00051512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e5760  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054dc  00000000  00000000  000e57a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000eac80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	08007adc 	.word	0x08007adc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	08007adc 	.word	0x08007adc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_dmul>:
 8000160:	b570      	push	{r4, r5, r6, lr}
 8000162:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000166:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800016a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016e:	bf1d      	ittte	ne
 8000170:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000174:	ea94 0f0c 	teqne	r4, ip
 8000178:	ea95 0f0c 	teqne	r5, ip
 800017c:	f000 f8de 	bleq	800033c <__aeabi_dmul+0x1dc>
 8000180:	442c      	add	r4, r5
 8000182:	ea81 0603 	eor.w	r6, r1, r3
 8000186:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800018a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000192:	bf18      	it	ne
 8000194:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000198:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800019c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80001a0:	d038      	beq.n	8000214 <__aeabi_dmul+0xb4>
 80001a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a6:	f04f 0500 	mov.w	r5, #0
 80001aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ae:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b6:	f04f 0600 	mov.w	r6, #0
 80001ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001be:	f09c 0f00 	teq	ip, #0
 80001c2:	bf18      	it	ne
 80001c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001cc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001d0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001d4:	d204      	bcs.n	80001e0 <__aeabi_dmul+0x80>
 80001d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001da:	416d      	adcs	r5, r5
 80001dc:	eb46 0606 	adc.w	r6, r6, r6
 80001e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80001f8:	bf88      	it	hi
 80001fa:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80001fe:	d81e      	bhi.n	800023e <__aeabi_dmul+0xde>
 8000200:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000204:	bf08      	it	eq
 8000206:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800020a:	f150 0000 	adcs.w	r0, r0, #0
 800020e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000212:	bd70      	pop	{r4, r5, r6, pc}
 8000214:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000218:	ea46 0101 	orr.w	r1, r6, r1
 800021c:	ea40 0002 	orr.w	r0, r0, r2
 8000220:	ea81 0103 	eor.w	r1, r1, r3
 8000224:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000228:	bfc2      	ittt	gt
 800022a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000232:	bd70      	popgt	{r4, r5, r6, pc}
 8000234:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000238:	f04f 0e00 	mov.w	lr, #0
 800023c:	3c01      	subs	r4, #1
 800023e:	f300 80ab 	bgt.w	8000398 <__aeabi_dmul+0x238>
 8000242:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000246:	bfde      	ittt	le
 8000248:	2000      	movle	r0, #0
 800024a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800024e:	bd70      	pople	{r4, r5, r6, pc}
 8000250:	f1c4 0400 	rsb	r4, r4, #0
 8000254:	3c20      	subs	r4, #32
 8000256:	da35      	bge.n	80002c4 <__aeabi_dmul+0x164>
 8000258:	340c      	adds	r4, #12
 800025a:	dc1b      	bgt.n	8000294 <__aeabi_dmul+0x134>
 800025c:	f104 0414 	add.w	r4, r4, #20
 8000260:	f1c4 0520 	rsb	r5, r4, #32
 8000264:	fa00 f305 	lsl.w	r3, r0, r5
 8000268:	fa20 f004 	lsr.w	r0, r0, r4
 800026c:	fa01 f205 	lsl.w	r2, r1, r5
 8000270:	ea40 0002 	orr.w	r0, r0, r2
 8000274:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000278:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800027c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000280:	fa21 f604 	lsr.w	r6, r1, r4
 8000284:	eb42 0106 	adc.w	r1, r2, r6
 8000288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800028c:	bf08      	it	eq
 800028e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f1c4 040c 	rsb	r4, r4, #12
 8000298:	f1c4 0520 	rsb	r5, r4, #32
 800029c:	fa00 f304 	lsl.w	r3, r0, r4
 80002a0:	fa20 f005 	lsr.w	r0, r0, r5
 80002a4:	fa01 f204 	lsl.w	r2, r1, r4
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002bc:	bf08      	it	eq
 80002be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f1c4 0520 	rsb	r5, r4, #32
 80002c8:	fa00 f205 	lsl.w	r2, r0, r5
 80002cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002d0:	fa20 f304 	lsr.w	r3, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea43 0302 	orr.w	r3, r3, r2
 80002dc:	fa21 f004 	lsr.w	r0, r1, r4
 80002e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	fa21 f204 	lsr.w	r2, r1, r4
 80002e8:	ea20 0002 	bic.w	r0, r0, r2
 80002ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f094 0f00 	teq	r4, #0
 8000300:	d10f      	bne.n	8000322 <__aeabi_dmul+0x1c2>
 8000302:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000306:	0040      	lsls	r0, r0, #1
 8000308:	eb41 0101 	adc.w	r1, r1, r1
 800030c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000310:	bf08      	it	eq
 8000312:	3c01      	subeq	r4, #1
 8000314:	d0f7      	beq.n	8000306 <__aeabi_dmul+0x1a6>
 8000316:	ea41 0106 	orr.w	r1, r1, r6
 800031a:	f095 0f00 	teq	r5, #0
 800031e:	bf18      	it	ne
 8000320:	4770      	bxne	lr
 8000322:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000326:	0052      	lsls	r2, r2, #1
 8000328:	eb43 0303 	adc.w	r3, r3, r3
 800032c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000330:	bf08      	it	eq
 8000332:	3d01      	subeq	r5, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1c6>
 8000336:	ea43 0306 	orr.w	r3, r3, r6
 800033a:	4770      	bx	lr
 800033c:	ea94 0f0c 	teq	r4, ip
 8000340:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000344:	bf18      	it	ne
 8000346:	ea95 0f0c 	teqne	r5, ip
 800034a:	d00c      	beq.n	8000366 <__aeabi_dmul+0x206>
 800034c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000350:	bf18      	it	ne
 8000352:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000356:	d1d1      	bne.n	80002fc <__aeabi_dmul+0x19c>
 8000358:	ea81 0103 	eor.w	r1, r1, r3
 800035c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000360:	f04f 0000 	mov.w	r0, #0
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800036a:	bf06      	itte	eq
 800036c:	4610      	moveq	r0, r2
 800036e:	4619      	moveq	r1, r3
 8000370:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000374:	d019      	beq.n	80003aa <__aeabi_dmul+0x24a>
 8000376:	ea94 0f0c 	teq	r4, ip
 800037a:	d102      	bne.n	8000382 <__aeabi_dmul+0x222>
 800037c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000380:	d113      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000382:	ea95 0f0c 	teq	r5, ip
 8000386:	d105      	bne.n	8000394 <__aeabi_dmul+0x234>
 8000388:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800038c:	bf1c      	itt	ne
 800038e:	4610      	movne	r0, r2
 8000390:	4619      	movne	r1, r3
 8000392:	d10a      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000394:	ea81 0103 	eor.w	r1, r1, r3
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
 80003aa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003ae:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003b2:	bd70      	pop	{r4, r5, r6, pc}

080003b4 <__aeabi_drsub>:
 80003b4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b8:	e002      	b.n	80003c0 <__adddf3>
 80003ba:	bf00      	nop

080003bc <__aeabi_dsub>:
 80003bc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003c0 <__adddf3>:
 80003c0:	b530      	push	{r4, r5, lr}
 80003c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ca:	ea94 0f05 	teq	r4, r5
 80003ce:	bf08      	it	eq
 80003d0:	ea90 0f02 	teqeq	r0, r2
 80003d4:	bf1f      	itttt	ne
 80003d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e6:	f000 80e2 	beq.w	80005ae <__adddf3+0x1ee>
 80003ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003f2:	bfb8      	it	lt
 80003f4:	426d      	neglt	r5, r5
 80003f6:	dd0c      	ble.n	8000412 <__adddf3+0x52>
 80003f8:	442c      	add	r4, r5
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	ea82 0000 	eor.w	r0, r2, r0
 8000406:	ea83 0101 	eor.w	r1, r3, r1
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	2d36      	cmp	r5, #54	@ 0x36
 8000414:	bf88      	it	hi
 8000416:	bd30      	pophi	{r4, r5, pc}
 8000418:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800041c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000420:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000424:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x70>
 800042a:	4240      	negs	r0, r0
 800042c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000430:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000434:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000438:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800043c:	d002      	beq.n	8000444 <__adddf3+0x84>
 800043e:	4252      	negs	r2, r2
 8000440:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000444:	ea94 0f05 	teq	r4, r5
 8000448:	f000 80a7 	beq.w	800059a <__adddf3+0x1da>
 800044c:	f1a4 0401 	sub.w	r4, r4, #1
 8000450:	f1d5 0e20 	rsbs	lr, r5, #32
 8000454:	db0d      	blt.n	8000472 <__adddf3+0xb2>
 8000456:	fa02 fc0e 	lsl.w	ip, r2, lr
 800045a:	fa22 f205 	lsr.w	r2, r2, r5
 800045e:	1880      	adds	r0, r0, r2
 8000460:	f141 0100 	adc.w	r1, r1, #0
 8000464:	fa03 f20e 	lsl.w	r2, r3, lr
 8000468:	1880      	adds	r0, r0, r2
 800046a:	fa43 f305 	asr.w	r3, r3, r5
 800046e:	4159      	adcs	r1, r3
 8000470:	e00e      	b.n	8000490 <__adddf3+0xd0>
 8000472:	f1a5 0520 	sub.w	r5, r5, #32
 8000476:	f10e 0e20 	add.w	lr, lr, #32
 800047a:	2a01      	cmp	r2, #1
 800047c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000480:	bf28      	it	cs
 8000482:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000486:	fa43 f305 	asr.w	r3, r3, r5
 800048a:	18c0      	adds	r0, r0, r3
 800048c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	d507      	bpl.n	80004a6 <__adddf3+0xe6>
 8000496:	f04f 0e00 	mov.w	lr, #0
 800049a:	f1dc 0c00 	rsbs	ip, ip, #0
 800049e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004aa:	d31b      	bcc.n	80004e4 <__adddf3+0x124>
 80004ac:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004b0:	d30c      	bcc.n	80004cc <__adddf3+0x10c>
 80004b2:	0849      	lsrs	r1, r1, #1
 80004b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004bc:	f104 0401 	add.w	r4, r4, #1
 80004c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c8:	f080 809a 	bcs.w	8000600 <__adddf3+0x240>
 80004cc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004d0:	bf08      	it	eq
 80004d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d6:	f150 0000 	adcs.w	r0, r0, #0
 80004da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004de:	ea41 0105 	orr.w	r1, r1, r5
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e8:	4140      	adcs	r0, r0
 80004ea:	eb41 0101 	adc.w	r1, r1, r1
 80004ee:	3c01      	subs	r4, #1
 80004f0:	bf28      	it	cs
 80004f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f6:	d2e9      	bcs.n	80004cc <__adddf3+0x10c>
 80004f8:	f091 0f00 	teq	r1, #0
 80004fc:	bf04      	itt	eq
 80004fe:	4601      	moveq	r1, r0
 8000500:	2000      	moveq	r0, #0
 8000502:	fab1 f381 	clz	r3, r1
 8000506:	bf08      	it	eq
 8000508:	3320      	addeq	r3, #32
 800050a:	f1a3 030b 	sub.w	r3, r3, #11
 800050e:	f1b3 0220 	subs.w	r2, r3, #32
 8000512:	da0c      	bge.n	800052e <__adddf3+0x16e>
 8000514:	320c      	adds	r2, #12
 8000516:	dd08      	ble.n	800052a <__adddf3+0x16a>
 8000518:	f102 0c14 	add.w	ip, r2, #20
 800051c:	f1c2 020c 	rsb	r2, r2, #12
 8000520:	fa01 f00c 	lsl.w	r0, r1, ip
 8000524:	fa21 f102 	lsr.w	r1, r1, r2
 8000528:	e00c      	b.n	8000544 <__adddf3+0x184>
 800052a:	f102 0214 	add.w	r2, r2, #20
 800052e:	bfd8      	it	le
 8000530:	f1c2 0c20 	rsble	ip, r2, #32
 8000534:	fa01 f102 	lsl.w	r1, r1, r2
 8000538:	fa20 fc0c 	lsr.w	ip, r0, ip
 800053c:	bfdc      	itt	le
 800053e:	ea41 010c 	orrle.w	r1, r1, ip
 8000542:	4090      	lslle	r0, r2
 8000544:	1ae4      	subs	r4, r4, r3
 8000546:	bfa2      	ittt	ge
 8000548:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800054c:	4329      	orrge	r1, r5
 800054e:	bd30      	popge	{r4, r5, pc}
 8000550:	ea6f 0404 	mvn.w	r4, r4
 8000554:	3c1f      	subs	r4, #31
 8000556:	da1c      	bge.n	8000592 <__adddf3+0x1d2>
 8000558:	340c      	adds	r4, #12
 800055a:	dc0e      	bgt.n	800057a <__adddf3+0x1ba>
 800055c:	f104 0414 	add.w	r4, r4, #20
 8000560:	f1c4 0220 	rsb	r2, r4, #32
 8000564:	fa20 f004 	lsr.w	r0, r0, r4
 8000568:	fa01 f302 	lsl.w	r3, r1, r2
 800056c:	ea40 0003 	orr.w	r0, r0, r3
 8000570:	fa21 f304 	lsr.w	r3, r1, r4
 8000574:	ea45 0103 	orr.w	r1, r5, r3
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	f1c4 040c 	rsb	r4, r4, #12
 800057e:	f1c4 0220 	rsb	r2, r4, #32
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 f304 	lsl.w	r3, r1, r4
 800058a:	ea40 0003 	orr.w	r0, r0, r3
 800058e:	4629      	mov	r1, r5
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	fa21 f004 	lsr.w	r0, r1, r4
 8000596:	4629      	mov	r1, r5
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f094 0f00 	teq	r4, #0
 800059e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005a2:	bf06      	itte	eq
 80005a4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a8:	3401      	addeq	r4, #1
 80005aa:	3d01      	subne	r5, #1
 80005ac:	e74e      	b.n	800044c <__adddf3+0x8c>
 80005ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005b2:	bf18      	it	ne
 80005b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b8:	d029      	beq.n	800060e <__adddf3+0x24e>
 80005ba:	ea94 0f05 	teq	r4, r5
 80005be:	bf08      	it	eq
 80005c0:	ea90 0f02 	teqeq	r0, r2
 80005c4:	d005      	beq.n	80005d2 <__adddf3+0x212>
 80005c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ca:	bf04      	itt	eq
 80005cc:	4619      	moveq	r1, r3
 80005ce:	4610      	moveq	r0, r2
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	ea91 0f03 	teq	r1, r3
 80005d6:	bf1e      	ittt	ne
 80005d8:	2100      	movne	r1, #0
 80005da:	2000      	movne	r0, #0
 80005dc:	bd30      	popne	{r4, r5, pc}
 80005de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005e2:	d105      	bne.n	80005f0 <__adddf3+0x230>
 80005e4:	0040      	lsls	r0, r0, #1
 80005e6:	4149      	adcs	r1, r1
 80005e8:	bf28      	it	cs
 80005ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ee:	bd30      	pop	{r4, r5, pc}
 80005f0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f4:	bf3c      	itt	cc
 80005f6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005fa:	bd30      	popcc	{r4, r5, pc}
 80005fc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000600:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000604:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000608:	f04f 0000 	mov.w	r0, #0
 800060c:	bd30      	pop	{r4, r5, pc}
 800060e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000612:	bf1a      	itte	ne
 8000614:	4619      	movne	r1, r3
 8000616:	4610      	movne	r0, r2
 8000618:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800061c:	bf1c      	itt	ne
 800061e:	460b      	movne	r3, r1
 8000620:	4602      	movne	r2, r0
 8000622:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000626:	bf06      	itte	eq
 8000628:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800062c:	ea91 0f03 	teqeq	r1, r3
 8000630:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	bf00      	nop

08000638 <__aeabi_ui2d>:
 8000638:	f090 0f00 	teq	r0, #0
 800063c:	bf04      	itt	eq
 800063e:	2100      	moveq	r1, #0
 8000640:	4770      	bxeq	lr
 8000642:	b530      	push	{r4, r5, lr}
 8000644:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000648:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800064c:	f04f 0500 	mov.w	r5, #0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e750      	b.n	80004f8 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_i2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800066c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000670:	bf48      	it	mi
 8000672:	4240      	negmi	r0, r0
 8000674:	f04f 0100 	mov.w	r1, #0
 8000678:	e73e      	b.n	80004f8 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_f2d>:
 800067c:	0042      	lsls	r2, r0, #1
 800067e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000682:	ea4f 0131 	mov.w	r1, r1, rrx
 8000686:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800068a:	bf1f      	itttt	ne
 800068c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000690:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000694:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000698:	4770      	bxne	lr
 800069a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069e:	bf08      	it	eq
 80006a0:	4770      	bxeq	lr
 80006a2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a6:	bf04      	itt	eq
 80006a8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006ac:	4770      	bxeq	lr
 80006ae:	b530      	push	{r4, r5, lr}
 80006b0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006bc:	e71c      	b.n	80004f8 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_ul2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f04f 0500 	mov.w	r5, #0
 80006ce:	e00a      	b.n	80006e6 <__aeabi_l2d+0x16>

080006d0 <__aeabi_l2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006de:	d502      	bpl.n	80006e6 <__aeabi_l2d+0x16>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006ea:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006f2:	f43f aed8 	beq.w	80004a6 <__adddf3+0xe6>
 80006f6:	f04f 0203 	mov.w	r2, #3
 80006fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fe:	bf18      	it	ne
 8000700:	3203      	addne	r2, #3
 8000702:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000706:	bf18      	it	ne
 8000708:	3203      	addne	r2, #3
 800070a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070e:	f1c2 0320 	rsb	r3, r2, #32
 8000712:	fa00 fc03 	lsl.w	ip, r0, r3
 8000716:	fa20 f002 	lsr.w	r0, r0, r2
 800071a:	fa01 fe03 	lsl.w	lr, r1, r3
 800071e:	ea40 000e 	orr.w	r0, r0, lr
 8000722:	fa21 f102 	lsr.w	r1, r1, r2
 8000726:	4414      	add	r4, r2
 8000728:	e6bd      	b.n	80004a6 <__adddf3+0xe6>
 800072a:	bf00      	nop

0800072c <__aeabi_d2uiz>:
 800072c:	004a      	lsls	r2, r1, #1
 800072e:	d211      	bcs.n	8000754 <__aeabi_d2uiz+0x28>
 8000730:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000734:	d211      	bcs.n	800075a <__aeabi_d2uiz+0x2e>
 8000736:	d50d      	bpl.n	8000754 <__aeabi_d2uiz+0x28>
 8000738:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800073c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000740:	d40e      	bmi.n	8000760 <__aeabi_d2uiz+0x34>
 8000742:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000746:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800074a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800074e:	fa23 f002 	lsr.w	r0, r3, r2
 8000752:	4770      	bx	lr
 8000754:	f04f 0000 	mov.w	r0, #0
 8000758:	4770      	bx	lr
 800075a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800075e:	d102      	bne.n	8000766 <__aeabi_d2uiz+0x3a>
 8000760:	f04f 30ff 	mov.w	r0, #4294967295
 8000764:	4770      	bx	lr
 8000766:	f04f 0000 	mov.w	r0, #0
 800076a:	4770      	bx	lr

0800076c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800077c:	4b18      	ldr	r3, [pc, #96]	@ (80007e0 <MX_ADC1_Init+0x74>)
 800077e:	4a19      	ldr	r2, [pc, #100]	@ (80007e4 <MX_ADC1_Init+0x78>)
 8000780:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000782:	4b17      	ldr	r3, [pc, #92]	@ (80007e0 <MX_ADC1_Init+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000788:	4b15      	ldr	r3, [pc, #84]	@ (80007e0 <MX_ADC1_Init+0x74>)
 800078a:	2200      	movs	r2, #0
 800078c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800078e:	4b14      	ldr	r3, [pc, #80]	@ (80007e0 <MX_ADC1_Init+0x74>)
 8000790:	2200      	movs	r2, #0
 8000792:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000794:	4b12      	ldr	r3, [pc, #72]	@ (80007e0 <MX_ADC1_Init+0x74>)
 8000796:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800079a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800079c:	4b10      	ldr	r3, [pc, #64]	@ (80007e0 <MX_ADC1_Init+0x74>)
 800079e:	2200      	movs	r2, #0
 80007a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80007a2:	4b0f      	ldr	r3, [pc, #60]	@ (80007e0 <MX_ADC1_Init+0x74>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007a8:	480d      	ldr	r0, [pc, #52]	@ (80007e0 <MX_ADC1_Init+0x74>)
 80007aa:	f001 fe7b 	bl	80024a4 <HAL_ADC_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80007b4:	f001 fb0c 	bl	8001dd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80007b8:	230a      	movs	r3, #10
 80007ba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007bc:	2301      	movs	r3, #1
 80007be:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007c0:	2300      	movs	r3, #0
 80007c2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	4619      	mov	r1, r3
 80007c8:	4805      	ldr	r0, [pc, #20]	@ (80007e0 <MX_ADC1_Init+0x74>)
 80007ca:	f002 f92f 	bl	8002a2c <HAL_ADC_ConfigChannel>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80007d4:	f001 fafc 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	3710      	adds	r7, #16
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20000098 	.word	0x20000098
 80007e4:	40012400 	.word	0x40012400

080007e8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80007f8:	4b18      	ldr	r3, [pc, #96]	@ (800085c <MX_ADC2_Init+0x74>)
 80007fa:	4a19      	ldr	r2, [pc, #100]	@ (8000860 <MX_ADC2_Init+0x78>)
 80007fc:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007fe:	4b17      	ldr	r3, [pc, #92]	@ (800085c <MX_ADC2_Init+0x74>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000804:	4b15      	ldr	r3, [pc, #84]	@ (800085c <MX_ADC2_Init+0x74>)
 8000806:	2200      	movs	r2, #0
 8000808:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800080a:	4b14      	ldr	r3, [pc, #80]	@ (800085c <MX_ADC2_Init+0x74>)
 800080c:	2200      	movs	r2, #0
 800080e:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000810:	4b12      	ldr	r3, [pc, #72]	@ (800085c <MX_ADC2_Init+0x74>)
 8000812:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000816:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000818:	4b10      	ldr	r3, [pc, #64]	@ (800085c <MX_ADC2_Init+0x74>)
 800081a:	2200      	movs	r2, #0
 800081c:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 800081e:	4b0f      	ldr	r3, [pc, #60]	@ (800085c <MX_ADC2_Init+0x74>)
 8000820:	2201      	movs	r2, #1
 8000822:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000824:	480d      	ldr	r0, [pc, #52]	@ (800085c <MX_ADC2_Init+0x74>)
 8000826:	f001 fe3d 	bl	80024a4 <HAL_ADC_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000830:	f001 face 	bl	8001dd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000834:	230b      	movs	r3, #11
 8000836:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000838:	2301      	movs	r3, #1
 800083a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800083c:	2300      	movs	r3, #0
 800083e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	4619      	mov	r1, r3
 8000844:	4805      	ldr	r0, [pc, #20]	@ (800085c <MX_ADC2_Init+0x74>)
 8000846:	f002 f8f1 	bl	8002a2c <HAL_ADC_ConfigChannel>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000850:	f001 fabe 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	3710      	adds	r7, #16
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	200000c8 	.word	0x200000c8
 8000860:	40012800 	.word	0x40012800

08000864 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08a      	sub	sp, #40	@ 0x28
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086c:	f107 0318 	add.w	r3, r7, #24
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4a28      	ldr	r2, [pc, #160]	@ (8000920 <HAL_ADC_MspInit+0xbc>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d122      	bne.n	80008ca <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000884:	4b27      	ldr	r3, [pc, #156]	@ (8000924 <HAL_ADC_MspInit+0xc0>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	4a26      	ldr	r2, [pc, #152]	@ (8000924 <HAL_ADC_MspInit+0xc0>)
 800088a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800088e:	6193      	str	r3, [r2, #24]
 8000890:	4b24      	ldr	r3, [pc, #144]	@ (8000924 <HAL_ADC_MspInit+0xc0>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000898:	617b      	str	r3, [r7, #20]
 800089a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800089c:	4b21      	ldr	r3, [pc, #132]	@ (8000924 <HAL_ADC_MspInit+0xc0>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	4a20      	ldr	r2, [pc, #128]	@ (8000924 <HAL_ADC_MspInit+0xc0>)
 80008a2:	f043 0310 	orr.w	r3, r3, #16
 80008a6:	6193      	str	r3, [r2, #24]
 80008a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000924 <HAL_ADC_MspInit+0xc0>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	f003 0310 	and.w	r3, r3, #16
 80008b0:	613b      	str	r3, [r7, #16]
 80008b2:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008b4:	2301      	movs	r3, #1
 80008b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008b8:	2303      	movs	r3, #3
 80008ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008bc:	f107 0318 	add.w	r3, r7, #24
 80008c0:	4619      	mov	r1, r3
 80008c2:	4819      	ldr	r0, [pc, #100]	@ (8000928 <HAL_ADC_MspInit+0xc4>)
 80008c4:	f002 fc06 	bl	80030d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80008c8:	e026      	b.n	8000918 <HAL_ADC_MspInit+0xb4>
  else if(adcHandle->Instance==ADC2)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a17      	ldr	r2, [pc, #92]	@ (800092c <HAL_ADC_MspInit+0xc8>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d121      	bne.n	8000918 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80008d4:	4b13      	ldr	r3, [pc, #76]	@ (8000924 <HAL_ADC_MspInit+0xc0>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	4a12      	ldr	r2, [pc, #72]	@ (8000924 <HAL_ADC_MspInit+0xc0>)
 80008da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008de:	6193      	str	r3, [r2, #24]
 80008e0:	4b10      	ldr	r3, [pc, #64]	@ (8000924 <HAL_ADC_MspInit+0xc0>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000924 <HAL_ADC_MspInit+0xc0>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	4a0c      	ldr	r2, [pc, #48]	@ (8000924 <HAL_ADC_MspInit+0xc0>)
 80008f2:	f043 0310 	orr.w	r3, r3, #16
 80008f6:	6193      	str	r3, [r2, #24]
 80008f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000924 <HAL_ADC_MspInit+0xc0>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	f003 0310 	and.w	r3, r3, #16
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000904:	2302      	movs	r3, #2
 8000906:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000908:	2303      	movs	r3, #3
 800090a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800090c:	f107 0318 	add.w	r3, r7, #24
 8000910:	4619      	mov	r1, r3
 8000912:	4805      	ldr	r0, [pc, #20]	@ (8000928 <HAL_ADC_MspInit+0xc4>)
 8000914:	f002 fbde 	bl	80030d4 <HAL_GPIO_Init>
}
 8000918:	bf00      	nop
 800091a:	3728      	adds	r7, #40	@ 0x28
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40012400 	.word	0x40012400
 8000924:	40021000 	.word	0x40021000
 8000928:	40011000 	.word	0x40011000
 800092c:	40012800 	.word	0x40012800

08000930 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b088      	sub	sp, #32
 8000934:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000936:	f107 0310 	add.w	r3, r7, #16
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
 8000942:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000944:	4b42      	ldr	r3, [pc, #264]	@ (8000a50 <MX_GPIO_Init+0x120>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	4a41      	ldr	r2, [pc, #260]	@ (8000a50 <MX_GPIO_Init+0x120>)
 800094a:	f043 0310 	orr.w	r3, r3, #16
 800094e:	6193      	str	r3, [r2, #24]
 8000950:	4b3f      	ldr	r3, [pc, #252]	@ (8000a50 <MX_GPIO_Init+0x120>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	f003 0310 	and.w	r3, r3, #16
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800095c:	4b3c      	ldr	r3, [pc, #240]	@ (8000a50 <MX_GPIO_Init+0x120>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	4a3b      	ldr	r2, [pc, #236]	@ (8000a50 <MX_GPIO_Init+0x120>)
 8000962:	f043 0320 	orr.w	r3, r3, #32
 8000966:	6193      	str	r3, [r2, #24]
 8000968:	4b39      	ldr	r3, [pc, #228]	@ (8000a50 <MX_GPIO_Init+0x120>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	f003 0320 	and.w	r3, r3, #32
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000974:	4b36      	ldr	r3, [pc, #216]	@ (8000a50 <MX_GPIO_Init+0x120>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	4a35      	ldr	r2, [pc, #212]	@ (8000a50 <MX_GPIO_Init+0x120>)
 800097a:	f043 0304 	orr.w	r3, r3, #4
 800097e:	6193      	str	r3, [r2, #24]
 8000980:	4b33      	ldr	r3, [pc, #204]	@ (8000a50 <MX_GPIO_Init+0x120>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	f003 0304 	and.w	r3, r3, #4
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098c:	4b30      	ldr	r3, [pc, #192]	@ (8000a50 <MX_GPIO_Init+0x120>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	4a2f      	ldr	r2, [pc, #188]	@ (8000a50 <MX_GPIO_Init+0x120>)
 8000992:	f043 0308 	orr.w	r3, r3, #8
 8000996:	6193      	str	r3, [r2, #24]
 8000998:	4b2d      	ldr	r3, [pc, #180]	@ (8000a50 <MX_GPIO_Init+0x120>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	f003 0308 	and.w	r3, r3, #8
 80009a0:	603b      	str	r3, [r7, #0]
 80009a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SSR_3_Pin|SSR_2_Pin|SSR_1_Pin|ENABLE_M1_Pin
 80009a4:	2200      	movs	r2, #0
 80009a6:	f64f 71dc 	movw	r1, #65500	@ 0xffdc
 80009aa:	482a      	ldr	r0, [pc, #168]	@ (8000a54 <MX_GPIO_Init+0x124>)
 80009ac:	f002 fd16 	bl	80033dc <HAL_GPIO_WritePin>
                          |ENABLE_M2_Pin|DIR_Pin|SSR_6_Pin|SSR_5_Pin
                          |RELAY_RESET_3_Pin|RELAY_RESET_2_Pin|RELAY_K7_Pin|RELAY_K1_Pin
                          |RELAY_K2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENABLE_M3_Pin|ENABLE_M4_Pin|MUX_SELECT_Pin|ENABLE_M5_Pin
 80009b0:	2200      	movs	r2, #0
 80009b2:	f649 11f7 	movw	r1, #39415	@ 0x99f7
 80009b6:	4828      	ldr	r0, [pc, #160]	@ (8000a58 <MX_GPIO_Init+0x128>)
 80009b8:	f002 fd10 	bl	80033dc <HAL_GPIO_WritePin>
                          |ENABLE_M6_Pin|ENABLE_M7_Pin|ENABLE_M8_Pin|RELAY_K12_CAL_RES_Pin
                          |RELAY_K11_CAL_CONT_Pin|RELAY_K9_K10_GND_COND_Pin|RELAY_K8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|SSR_8_Pin|SSR_7_Pin|RELAY_K4_Pin
 80009bc:	2200      	movs	r2, #0
 80009be:	f24c 313a 	movw	r1, #49978	@ 0xc33a
 80009c2:	4826      	ldr	r0, [pc, #152]	@ (8000a5c <MX_GPIO_Init+0x12c>)
 80009c4:	f002 fd0a 	bl	80033dc <HAL_GPIO_WritePin>
                          |RELAY_K5_Pin|RELAY_K6_Pin|RELAY_RESET_1_Pin|SSR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_K3_GPIO_Port, RELAY_K3_Pin, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2104      	movs	r1, #4
 80009cc:	4824      	ldr	r0, [pc, #144]	@ (8000a60 <MX_GPIO_Init+0x130>)
 80009ce:	f002 fd05 	bl	80033dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = SSR_3_Pin|SSR_2_Pin|SSR_1_Pin|ENABLE_M1_Pin
 80009d2:	f64f 73dc 	movw	r3, #65500	@ 0xffdc
 80009d6:	613b      	str	r3, [r7, #16]
                          |ENABLE_M2_Pin|DIR_Pin|SSR_6_Pin|SSR_5_Pin
                          |RELAY_RESET_3_Pin|RELAY_RESET_2_Pin|RELAY_K7_Pin|RELAY_K1_Pin
                          |RELAY_K2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d8:	2301      	movs	r3, #1
 80009da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	2302      	movs	r3, #2
 80009e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e4:	f107 0310 	add.w	r3, r7, #16
 80009e8:	4619      	mov	r1, r3
 80009ea:	481a      	ldr	r0, [pc, #104]	@ (8000a54 <MX_GPIO_Init+0x124>)
 80009ec:	f002 fb72 	bl	80030d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ENABLE_M3_Pin|ENABLE_M4_Pin|MUX_SELECT_Pin|ENABLE_M5_Pin
 80009f0:	f649 13f7 	movw	r3, #39415	@ 0x99f7
 80009f4:	613b      	str	r3, [r7, #16]
                          |ENABLE_M6_Pin|ENABLE_M7_Pin|ENABLE_M8_Pin|RELAY_K12_CAL_RES_Pin
                          |RELAY_K11_CAL_CONT_Pin|RELAY_K9_K10_GND_COND_Pin|RELAY_K8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f6:	2301      	movs	r3, #1
 80009f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2302      	movs	r3, #2
 8000a00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a02:	f107 0310 	add.w	r3, r7, #16
 8000a06:	4619      	mov	r1, r3
 8000a08:	4813      	ldr	r0, [pc, #76]	@ (8000a58 <MX_GPIO_Init+0x128>)
 8000a0a:	f002 fb63 	bl	80030d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_Pin|SSR_8_Pin|SSR_7_Pin|RELAY_K4_Pin
 8000a0e:	f24c 333a 	movw	r3, #49978	@ 0xc33a
 8000a12:	613b      	str	r3, [r7, #16]
                          |RELAY_K5_Pin|RELAY_K6_Pin|RELAY_RESET_1_Pin|SSR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a14:	2301      	movs	r3, #1
 8000a16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a20:	f107 0310 	add.w	r3, r7, #16
 8000a24:	4619      	mov	r1, r3
 8000a26:	480d      	ldr	r0, [pc, #52]	@ (8000a5c <MX_GPIO_Init+0x12c>)
 8000a28:	f002 fb54 	bl	80030d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RELAY_K3_Pin;
 8000a2c:	2304      	movs	r3, #4
 8000a2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a30:	2301      	movs	r3, #1
 8000a32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RELAY_K3_GPIO_Port, &GPIO_InitStruct);
 8000a3c:	f107 0310 	add.w	r3, r7, #16
 8000a40:	4619      	mov	r1, r3
 8000a42:	4807      	ldr	r0, [pc, #28]	@ (8000a60 <MX_GPIO_Init+0x130>)
 8000a44:	f002 fb46 	bl	80030d4 <HAL_GPIO_Init>

}
 8000a48:	bf00      	nop
 8000a4a:	3720      	adds	r7, #32
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40021000 	.word	0x40021000
 8000a54:	40011000 	.word	0x40011000
 8000a58:	40010800 	.word	0x40010800
 8000a5c:	40010c00 	.word	0x40010c00
 8000a60:	40011400 	.word	0x40011400

08000a64 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a68:	4b12      	ldr	r3, [pc, #72]	@ (8000ab4 <MX_I2C1_Init+0x50>)
 8000a6a:	4a13      	ldr	r2, [pc, #76]	@ (8000ab8 <MX_I2C1_Init+0x54>)
 8000a6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a6e:	4b11      	ldr	r3, [pc, #68]	@ (8000ab4 <MX_I2C1_Init+0x50>)
 8000a70:	4a12      	ldr	r2, [pc, #72]	@ (8000abc <MX_I2C1_Init+0x58>)
 8000a72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a74:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab4 <MX_I2C1_Init+0x50>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab4 <MX_I2C1_Init+0x50>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a80:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab4 <MX_I2C1_Init+0x50>)
 8000a82:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a86:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a88:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab4 <MX_I2C1_Init+0x50>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a8e:	4b09      	ldr	r3, [pc, #36]	@ (8000ab4 <MX_I2C1_Init+0x50>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a94:	4b07      	ldr	r3, [pc, #28]	@ (8000ab4 <MX_I2C1_Init+0x50>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a9a:	4b06      	ldr	r3, [pc, #24]	@ (8000ab4 <MX_I2C1_Init+0x50>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000aa0:	4804      	ldr	r0, [pc, #16]	@ (8000ab4 <MX_I2C1_Init+0x50>)
 8000aa2:	f002 fcb3 	bl	800340c <HAL_I2C_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000aac:	f001 f990 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	200000f8 	.word	0x200000f8
 8000ab8:	40005400 	.word	0x40005400
 8000abc:	000186a0 	.word	0x000186a0

08000ac0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b088      	sub	sp, #32
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 0310 	add.w	r3, r7, #16
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a15      	ldr	r2, [pc, #84]	@ (8000b30 <HAL_I2C_MspInit+0x70>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d123      	bne.n	8000b28 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae0:	4b14      	ldr	r3, [pc, #80]	@ (8000b34 <HAL_I2C_MspInit+0x74>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	4a13      	ldr	r2, [pc, #76]	@ (8000b34 <HAL_I2C_MspInit+0x74>)
 8000ae6:	f043 0308 	orr.w	r3, r3, #8
 8000aea:	6193      	str	r3, [r2, #24]
 8000aec:	4b11      	ldr	r3, [pc, #68]	@ (8000b34 <HAL_I2C_MspInit+0x74>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	f003 0308 	and.w	r3, r3, #8
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000af8:	23c0      	movs	r3, #192	@ 0xc0
 8000afa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000afc:	2312      	movs	r3, #18
 8000afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b00:	2303      	movs	r3, #3
 8000b02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b04:	f107 0310 	add.w	r3, r7, #16
 8000b08:	4619      	mov	r1, r3
 8000b0a:	480b      	ldr	r0, [pc, #44]	@ (8000b38 <HAL_I2C_MspInit+0x78>)
 8000b0c:	f002 fae2 	bl	80030d4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b10:	4b08      	ldr	r3, [pc, #32]	@ (8000b34 <HAL_I2C_MspInit+0x74>)
 8000b12:	69db      	ldr	r3, [r3, #28]
 8000b14:	4a07      	ldr	r2, [pc, #28]	@ (8000b34 <HAL_I2C_MspInit+0x74>)
 8000b16:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b1a:	61d3      	str	r3, [r2, #28]
 8000b1c:	4b05      	ldr	r3, [pc, #20]	@ (8000b34 <HAL_I2C_MspInit+0x74>)
 8000b1e:	69db      	ldr	r3, [r3, #28]
 8000b20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b24:	60bb      	str	r3, [r7, #8]
 8000b26:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b28:	bf00      	nop
 8000b2a:	3720      	adds	r7, #32
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40005400 	.word	0x40005400
 8000b34:	40021000 	.word	0x40021000
 8000b38:	40010c00 	.word	0x40010c00

08000b3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b40:	f001 fc2a 	bl	8002398 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b44:	f000 f846 	bl	8000bd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b48:	f7ff fef2 	bl	8000930 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000b4c:	f001 fa54 	bl	8001ff8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000b50:	f001 fb18 	bl	8002184 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000b54:	f7ff fe0a 	bl	800076c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000b58:	f7ff fe46 	bl	80007e8 <MX_ADC2_Init>
  MX_I2C1_Init();
 8000b5c:	f7ff ff82 	bl	8000a64 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000b60:	f001 fb3a 	bl	80021d8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // Initialize stepper motors
  motor_init();
 8000b64:	f001 f840 	bl	8001be8 <motor_init>
  // initialize multiplexer
  multiplexer_set(MUX_STM32);
 8000b68:	2001      	movs	r0, #1
 8000b6a:	f000 fd43 	bl	80015f4 <multiplexer_set>
  // Initialize relays
  relay_init();
 8000b6e:	f000 fef9 	bl	8001964 <relay_init>
  // enable receive interrupt
  HAL_UART_Receive_IT(&huart1, rxBuffer, 1); // enable UART receive interrupt, store received char in rxChar buffer
 8000b72:	2201      	movs	r2, #1
 8000b74:	4912      	ldr	r1, [pc, #72]	@ (8000bc0 <main+0x84>)
 8000b76:	4813      	ldr	r0, [pc, #76]	@ (8000bc4 <main+0x88>)
 8000b78:	f005 f8b3 	bl	8005ce2 <HAL_UART_Receive_IT>
  // Initialize autolauncher parameters i.e. read eeprom
  parameter_init();
 8000b7c:	f000 fd80 	bl	8001680 <parameter_init>
  // display main menu at startup
  menu_main();
 8000b80:	f000 fbf6 	bl	8001370 <menu_main>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // menu control loop
	  if(active == rxStatus){ // set to active with UART RX interrupt
 8000b84:	4b10      	ldr	r3, [pc, #64]	@ (8000bc8 <main+0x8c>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d115      	bne.n	8000bb8 <main+0x7c>
		  rxStatus = idle;
 8000b8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc8 <main+0x8c>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	701a      	strb	r2, [r3, #0]
		  if( mainMenu == activeMenu){
 8000b92:	4b0e      	ldr	r3, [pc, #56]	@ (8000bcc <main+0x90>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d105      	bne.n	8000ba6 <main+0x6a>
			  main_process_input(rxChar); // go to main switch case menu
 8000b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd0 <main+0x94>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f000 f868 	bl	8000c74 <main_process_input>
 8000ba4:	e008      	b.n	8000bb8 <main+0x7c>
		  } else if ( configMenu == activeMenu){
 8000ba6:	4b09      	ldr	r3, [pc, #36]	@ (8000bcc <main+0x90>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d104      	bne.n	8000bb8 <main+0x7c>
			  config_process_input(rxChar);
 8000bae:	4b08      	ldr	r3, [pc, #32]	@ (8000bd0 <main+0x94>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f000 fa6c 	bl	8001090 <config_process_input>
		  }
	  }
	  // monitor voltage and send alarm if it's below a threshold
	  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	  HAL_Delay(100);
 8000bb8:	2064      	movs	r0, #100	@ 0x64
 8000bba:	f001 fc4f 	bl	800245c <HAL_Delay>
	  if(active == rxStatus){ // set to active with UART RX interrupt
 8000bbe:	e7e1      	b.n	8000b84 <main+0x48>
 8000bc0:	20000150 	.word	0x20000150
 8000bc4:	200001a0 	.word	0x200001a0
 8000bc8:	2000014e 	.word	0x2000014e
 8000bcc:	2000014f 	.word	0x2000014f
 8000bd0:	20000151 	.word	0x20000151

08000bd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b094      	sub	sp, #80	@ 0x50
 8000bd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bda:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bde:	2228      	movs	r2, #40	@ 0x28
 8000be0:	2100      	movs	r1, #0
 8000be2:	4618      	mov	r0, r3
 8000be4:	f006 f836 	bl	8006c54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c04:	2302      	movs	r3, #2
 8000c06:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c0c:	2310      	movs	r3, #16
 8000c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c10:	2300      	movs	r3, #0
 8000c12:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c14:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f003 fc2b 	bl	8004474 <HAL_RCC_OscConfig>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000c24:	f001 f8d4 	bl	8001dd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c28:	230f      	movs	r3, #15
 8000c2a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c34:	2300      	movs	r3, #0
 8000c36:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	2100      	movs	r1, #0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f003 fe98 	bl	8004978 <HAL_RCC_ClockConfig>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000c4e:	f001 f8bf 	bl	8001dd0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c52:	2302      	movs	r3, #2
 8000c54:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f004 f819 	bl	8004c94 <HAL_RCCEx_PeriphCLKConfig>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c68:	f001 f8b2 	bl	8001dd0 <Error_Handler>
  }
}
 8000c6c:	bf00      	nop
 8000c6e:	3750      	adds	r7, #80	@ 0x50
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <main_process_input>:




/* Process char received while in Main menu */
void main_process_input(char option){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
	printf("\r\n> Executing OPTION (%c) --> ", option);
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	4619      	mov	r1, r3
 8000c82:	48cb      	ldr	r0, [pc, #812]	@ (8000fb0 <main_process_input+0x33c>)
 8000c84:	f005 fe7e 	bl	8006984 <iprintf>

	switch (option){
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	3b30      	subs	r3, #48	@ 0x30
 8000c8c:	2b4e      	cmp	r3, #78	@ 0x4e
 8000c8e:	f200 81ec 	bhi.w	800106a <main_process_input+0x3f6>
 8000c92:	a201      	add	r2, pc, #4	@ (adr r2, 8000c98 <main_process_input+0x24>)
 8000c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c98:	08000dd5 	.word	0x08000dd5
 8000c9c:	08000de9 	.word	0x08000de9
 8000ca0:	08000df7 	.word	0x08000df7
 8000ca4:	08000e05 	.word	0x08000e05
 8000ca8:	08000e13 	.word	0x08000e13
 8000cac:	08000e21 	.word	0x08000e21
 8000cb0:	08000e2f 	.word	0x08000e2f
 8000cb4:	08000e3d 	.word	0x08000e3d
 8000cb8:	08000e5b 	.word	0x08000e5b
 8000cbc:	0800106b 	.word	0x0800106b
 8000cc0:	0800106b 	.word	0x0800106b
 8000cc4:	0800106b 	.word	0x0800106b
 8000cc8:	0800106b 	.word	0x0800106b
 8000ccc:	0800106b 	.word	0x0800106b
 8000cd0:	0800106b 	.word	0x0800106b
 8000cd4:	0800106b 	.word	0x0800106b
 8000cd8:	0800106b 	.word	0x0800106b
 8000cdc:	08000f09 	.word	0x08000f09
 8000ce0:	08000f17 	.word	0x08000f17
 8000ce4:	08000f25 	.word	0x08000f25
 8000ce8:	08000f33 	.word	0x08000f33
 8000cec:	08000f41 	.word	0x08000f41
 8000cf0:	08000f4f 	.word	0x08000f4f
 8000cf4:	08001041 	.word	0x08001041
 8000cf8:	08000f5d 	.word	0x08000f5d
 8000cfc:	08000f7b 	.word	0x08000f7b
 8000d00:	0800106b 	.word	0x0800106b
 8000d04:	08000f99 	.word	0x08000f99
 8000d08:	08001035 	.word	0x08001035
 8000d0c:	0800104d 	.word	0x0800104d
 8000d10:	0800106b 	.word	0x0800106b
 8000d14:	0800106b 	.word	0x0800106b
 8000d18:	0800106b 	.word	0x0800106b
 8000d1c:	0800106b 	.word	0x0800106b
 8000d20:	08000fa5 	.word	0x08000fa5
 8000d24:	08000ecd 	.word	0x08000ecd
 8000d28:	08000eeb 	.word	0x08000eeb
 8000d2c:	08000e79 	.word	0x08000e79
 8000d30:	08000e87 	.word	0x08000e87
 8000d34:	08000e95 	.word	0x08000e95
 8000d38:	08000ea3 	.word	0x08000ea3
 8000d3c:	08000eb1 	.word	0x08000eb1
 8000d40:	08000ebf 	.word	0x08000ebf
 8000d44:	0800106b 	.word	0x0800106b
 8000d48:	0800106b 	.word	0x0800106b
 8000d4c:	0800106b 	.word	0x0800106b
 8000d50:	0800106b 	.word	0x0800106b
 8000d54:	0800106b 	.word	0x0800106b
 8000d58:	0800106b 	.word	0x0800106b
 8000d5c:	0800106b 	.word	0x0800106b
 8000d60:	0800106b 	.word	0x0800106b
 8000d64:	0800106b 	.word	0x0800106b
 8000d68:	0800106b 	.word	0x0800106b
 8000d6c:	0800106b 	.word	0x0800106b
 8000d70:	0800106b 	.word	0x0800106b
 8000d74:	0800106b 	.word	0x0800106b
 8000d78:	0800106b 	.word	0x0800106b
 8000d7c:	0800106b 	.word	0x0800106b
 8000d80:	0800106b 	.word	0x0800106b
 8000d84:	0800106b 	.word	0x0800106b
 8000d88:	0800106b 	.word	0x0800106b
 8000d8c:	0800106b 	.word	0x0800106b
 8000d90:	0800106b 	.word	0x0800106b
 8000d94:	0800106b 	.word	0x0800106b
 8000d98:	0800106b 	.word	0x0800106b
 8000d9c:	0800106b 	.word	0x0800106b
 8000da0:	0800106b 	.word	0x0800106b
 8000da4:	0800105f 	.word	0x0800105f
 8000da8:	0800106b 	.word	0x0800106b
 8000dac:	0800106b 	.word	0x0800106b
 8000db0:	0800106b 	.word	0x0800106b
 8000db4:	0800106b 	.word	0x0800106b
 8000db8:	0800106b 	.word	0x0800106b
 8000dbc:	0800106b 	.word	0x0800106b
 8000dc0:	0800106b 	.word	0x0800106b
 8000dc4:	0800106b 	.word	0x0800106b
 8000dc8:	0800106b 	.word	0x0800106b
 8000dcc:	0800106b 	.word	0x0800106b
 8000dd0:	08001053 	.word	0x08001053
		// Connect XBT pins
    case '0':
        //engage calibration resistor
    	printf("unground_xbt(), calibration_resistor(), calibrate_on()\r\n");
 8000dd4:	4877      	ldr	r0, [pc, #476]	@ (8000fb4 <main_process_input+0x340>)
 8000dd6:	f005 fe3d 	bl	8006a54 <puts>
        unground_xbt();
 8000dda:	f000 fcaf 	bl	800173c <unground_xbt>
        calibration_resistor();
 8000dde:	f000 fcc5 	bl	800176c <calibration_resistor>
        calibrate_on();
 8000de2:	f000 fcdb 	bl	800179c <calibrate_on>
        break;
 8000de6:	e144      	b.n	8001072 <main_process_input+0x3fe>
    case '1':
    	printf("connect_xbt_pin(1)\r\n");
 8000de8:	4873      	ldr	r0, [pc, #460]	@ (8000fb8 <main_process_input+0x344>)
 8000dea:	f005 fe33 	bl	8006a54 <puts>
        connect_xbt_pin(1);
 8000dee:	2001      	movs	r0, #1
 8000df0:	f000 fd18 	bl	8001824 <connect_xbt_pin>
        break;
 8000df4:	e13d      	b.n	8001072 <main_process_input+0x3fe>
    case '2':
        connect_xbt_pin(2);
 8000df6:	2002      	movs	r0, #2
 8000df8:	f000 fd14 	bl	8001824 <connect_xbt_pin>
        printf("connect_xbt_pin(2)\r\n");
 8000dfc:	486f      	ldr	r0, [pc, #444]	@ (8000fbc <main_process_input+0x348>)
 8000dfe:	f005 fe29 	bl	8006a54 <puts>
        break;
 8000e02:	e136      	b.n	8001072 <main_process_input+0x3fe>
    case '3':
        connect_xbt_pin(3);
 8000e04:	2003      	movs	r0, #3
 8000e06:	f000 fd0d 	bl	8001824 <connect_xbt_pin>
        printf("connect_xbt_pin(3)\r\n");
 8000e0a:	486d      	ldr	r0, [pc, #436]	@ (8000fc0 <main_process_input+0x34c>)
 8000e0c:	f005 fe22 	bl	8006a54 <puts>
        break;
 8000e10:	e12f      	b.n	8001072 <main_process_input+0x3fe>
    case '4':
        connect_xbt_pin(4);
 8000e12:	2004      	movs	r0, #4
 8000e14:	f000 fd06 	bl	8001824 <connect_xbt_pin>
        printf("connect_xbt_pin(4)\r\n");
 8000e18:	486a      	ldr	r0, [pc, #424]	@ (8000fc4 <main_process_input+0x350>)
 8000e1a:	f005 fe1b 	bl	8006a54 <puts>
        break;
 8000e1e:	e128      	b.n	8001072 <main_process_input+0x3fe>
    case '5':
        connect_xbt_pin(5);
 8000e20:	2005      	movs	r0, #5
 8000e22:	f000 fcff 	bl	8001824 <connect_xbt_pin>
        printf("connect_xbt_pin(5)\r\n");
 8000e26:	4868      	ldr	r0, [pc, #416]	@ (8000fc8 <main_process_input+0x354>)
 8000e28:	f005 fe14 	bl	8006a54 <puts>
        break;
 8000e2c:	e121      	b.n	8001072 <main_process_input+0x3fe>
    case '6':
        connect_xbt_pin(6);
 8000e2e:	2006      	movs	r0, #6
 8000e30:	f000 fcf8 	bl	8001824 <connect_xbt_pin>
        printf("connect_xbt_pin(6)\r\n");
 8000e34:	4865      	ldr	r0, [pc, #404]	@ (8000fcc <main_process_input+0x358>)
 8000e36:	f005 fe0d 	bl	8006a54 <puts>
        break;
 8000e3a:	e11a      	b.n	8001072 <main_process_input+0x3fe>
    case '7':
        if (launcher.tubeCount == '8'){
 8000e3c:	4b64      	ldr	r3, [pc, #400]	@ (8000fd0 <main_process_input+0x35c>)
 8000e3e:	78db      	ldrb	r3, [r3, #3]
 8000e40:	2b38      	cmp	r3, #56	@ 0x38
 8000e42:	d106      	bne.n	8000e52 <main_process_input+0x1de>
            connect_xbt_pin(7);
 8000e44:	2007      	movs	r0, #7
 8000e46:	f000 fced 	bl	8001824 <connect_xbt_pin>
            printf("connect_xbt_pin(7)\r\n");
 8000e4a:	4862      	ldr	r0, [pc, #392]	@ (8000fd4 <main_process_input+0x360>)
 8000e4c:	f005 fe02 	bl	8006a54 <puts>
        } else {
        	printf("\r\n* ERROR: tube 7 not available *\r\n");
        }
        break;
 8000e50:	e10f      	b.n	8001072 <main_process_input+0x3fe>
        	printf("\r\n* ERROR: tube 7 not available *\r\n");
 8000e52:	4861      	ldr	r0, [pc, #388]	@ (8000fd8 <main_process_input+0x364>)
 8000e54:	f005 fdfe 	bl	8006a54 <puts>
        break;
 8000e58:	e10b      	b.n	8001072 <main_process_input+0x3fe>
    case '8':
        if (launcher.tubeCount == '8'){
 8000e5a:	4b5d      	ldr	r3, [pc, #372]	@ (8000fd0 <main_process_input+0x35c>)
 8000e5c:	78db      	ldrb	r3, [r3, #3]
 8000e5e:	2b38      	cmp	r3, #56	@ 0x38
 8000e60:	d106      	bne.n	8000e70 <main_process_input+0x1fc>
        	connect_xbt_pin(8);
 8000e62:	2008      	movs	r0, #8
 8000e64:	f000 fcde 	bl	8001824 <connect_xbt_pin>
        	printf("connect_xbt_pin(8)\r\n");
 8000e68:	485c      	ldr	r0, [pc, #368]	@ (8000fdc <main_process_input+0x368>)
 8000e6a:	f005 fdf3 	bl	8006a54 <puts>
        } else {
        	printf("\r\n* ERROR: tube 8 not available *\r\n");
        }
        break;
 8000e6e:	e100      	b.n	8001072 <main_process_input+0x3fe>
        	printf("\r\n* ERROR: tube 8 not available *\r\n");
 8000e70:	485b      	ldr	r0, [pc, #364]	@ (8000fe0 <main_process_input+0x36c>)
 8000e72:	f005 fdef 	bl	8006a54 <puts>
        break;
 8000e76:	e0fc      	b.n	8001072 <main_process_input+0x3fe>
        //EXTEND PINS
    case 'U':
    	printf("extend_pin(1)\r\n");
 8000e78:	485a      	ldr	r0, [pc, #360]	@ (8000fe4 <main_process_input+0x370>)
 8000e7a:	f005 fdeb 	bl	8006a54 <puts>
    	extend_pin(1);
 8000e7e:	2001      	movs	r0, #1
 8000e80:	f000 fdaf 	bl	80019e2 <extend_pin>
        break;
 8000e84:	e0f5      	b.n	8001072 <main_process_input+0x3fe>
    case 'V':
        printf("extend_pin(2)\r\n");
 8000e86:	4858      	ldr	r0, [pc, #352]	@ (8000fe8 <main_process_input+0x374>)
 8000e88:	f005 fde4 	bl	8006a54 <puts>
        extend_pin(2);
 8000e8c:	2002      	movs	r0, #2
 8000e8e:	f000 fda8 	bl	80019e2 <extend_pin>
        break;
 8000e92:	e0ee      	b.n	8001072 <main_process_input+0x3fe>
    case 'W':
        printf("extend_pin(3)\r\n");
 8000e94:	4855      	ldr	r0, [pc, #340]	@ (8000fec <main_process_input+0x378>)
 8000e96:	f005 fddd 	bl	8006a54 <puts>
        extend_pin(3);
 8000e9a:	2003      	movs	r0, #3
 8000e9c:	f000 fda1 	bl	80019e2 <extend_pin>
        break;
 8000ea0:	e0e7      	b.n	8001072 <main_process_input+0x3fe>
    case 'X':
        printf("extend_pin(4)\r\n");
 8000ea2:	4853      	ldr	r0, [pc, #332]	@ (8000ff0 <main_process_input+0x37c>)
 8000ea4:	f005 fdd6 	bl	8006a54 <puts>
        extend_pin(4);
 8000ea8:	2004      	movs	r0, #4
 8000eaa:	f000 fd9a 	bl	80019e2 <extend_pin>
        break;
 8000eae:	e0e0      	b.n	8001072 <main_process_input+0x3fe>
    case 'Y':
        printf("extend_pin(5)\r\n");
 8000eb0:	4850      	ldr	r0, [pc, #320]	@ (8000ff4 <main_process_input+0x380>)
 8000eb2:	f005 fdcf 	bl	8006a54 <puts>
        extend_pin(5);
 8000eb6:	2005      	movs	r0, #5
 8000eb8:	f000 fd93 	bl	80019e2 <extend_pin>
        break;
 8000ebc:	e0d9      	b.n	8001072 <main_process_input+0x3fe>
    case 'Z':
        printf("extend_pin(6)\r\n");
 8000ebe:	484e      	ldr	r0, [pc, #312]	@ (8000ff8 <main_process_input+0x384>)
 8000ec0:	f005 fdc8 	bl	8006a54 <puts>
        extend_pin(6);
 8000ec4:	2006      	movs	r0, #6
 8000ec6:	f000 fd8c 	bl	80019e2 <extend_pin>
        break;
 8000eca:	e0d2      	b.n	8001072 <main_process_input+0x3fe>
    case 'S':
        if (launcher.tubeCount == '8'){
 8000ecc:	4b40      	ldr	r3, [pc, #256]	@ (8000fd0 <main_process_input+0x35c>)
 8000ece:	78db      	ldrb	r3, [r3, #3]
 8000ed0:	2b38      	cmp	r3, #56	@ 0x38
 8000ed2:	d106      	bne.n	8000ee2 <main_process_input+0x26e>
        	printf("extend_pin(7)\r\n");
 8000ed4:	4849      	ldr	r0, [pc, #292]	@ (8000ffc <main_process_input+0x388>)
 8000ed6:	f005 fdbd 	bl	8006a54 <puts>
        	extend_pin(7);
 8000eda:	2007      	movs	r0, #7
 8000edc:	f000 fd81 	bl	80019e2 <extend_pin>
        } else {
        	printf("\r\n* ERROR: tube 7 not available *\r\n");
        }
        break;
 8000ee0:	e0c7      	b.n	8001072 <main_process_input+0x3fe>
        	printf("\r\n* ERROR: tube 7 not available *\r\n");
 8000ee2:	483d      	ldr	r0, [pc, #244]	@ (8000fd8 <main_process_input+0x364>)
 8000ee4:	f005 fdb6 	bl	8006a54 <puts>
        break;
 8000ee8:	e0c3      	b.n	8001072 <main_process_input+0x3fe>
    case 'T':
        if (launcher.tubeCount == '8'){
 8000eea:	4b39      	ldr	r3, [pc, #228]	@ (8000fd0 <main_process_input+0x35c>)
 8000eec:	78db      	ldrb	r3, [r3, #3]
 8000eee:	2b38      	cmp	r3, #56	@ 0x38
 8000ef0:	d106      	bne.n	8000f00 <main_process_input+0x28c>
        	printf("extend_pin(8)\r\n");
 8000ef2:	4843      	ldr	r0, [pc, #268]	@ (8001000 <main_process_input+0x38c>)
 8000ef4:	f005 fdae 	bl	8006a54 <puts>
        	extend_pin(8);
 8000ef8:	2008      	movs	r0, #8
 8000efa:	f000 fd72 	bl	80019e2 <extend_pin>
        } else {
        	printf("\r\n* ERROR: tube 8 not available *\r\n");
        }
        break;
 8000efe:	e0b8      	b.n	8001072 <main_process_input+0x3fe>
        	printf("\r\n* ERROR: tube 8 not available *\r\n");
 8000f00:	4837      	ldr	r0, [pc, #220]	@ (8000fe0 <main_process_input+0x36c>)
 8000f02:	f005 fda7 	bl	8006a54 <puts>
        break;
 8000f06:	e0b4      	b.n	8001072 <main_process_input+0x3fe>
        //RETRACT PINS
    case 'A':
    	printf("retract_pin(1)\r\n");
 8000f08:	483e      	ldr	r0, [pc, #248]	@ (8001004 <main_process_input+0x390>)
 8000f0a:	f005 fda3 	bl	8006a54 <puts>
    	retract_pin(1);
 8000f0e:	2001      	movs	r0, #1
 8000f10:	f000 fd75 	bl	80019fe <retract_pin>
        break;
 8000f14:	e0ad      	b.n	8001072 <main_process_input+0x3fe>
    case 'B':
        printf("retract_pin(2)\r\n");
 8000f16:	483c      	ldr	r0, [pc, #240]	@ (8001008 <main_process_input+0x394>)
 8000f18:	f005 fd9c 	bl	8006a54 <puts>
        retract_pin(2);
 8000f1c:	2002      	movs	r0, #2
 8000f1e:	f000 fd6e 	bl	80019fe <retract_pin>
        break;
 8000f22:	e0a6      	b.n	8001072 <main_process_input+0x3fe>
    case 'C':
        printf("retract_pin(3)\r\n");
 8000f24:	4839      	ldr	r0, [pc, #228]	@ (800100c <main_process_input+0x398>)
 8000f26:	f005 fd95 	bl	8006a54 <puts>
        retract_pin(3);
 8000f2a:	2003      	movs	r0, #3
 8000f2c:	f000 fd67 	bl	80019fe <retract_pin>
        break;
 8000f30:	e09f      	b.n	8001072 <main_process_input+0x3fe>
    case 'D':
        printf("retract_pin(4)\r\n");
 8000f32:	4837      	ldr	r0, [pc, #220]	@ (8001010 <main_process_input+0x39c>)
 8000f34:	f005 fd8e 	bl	8006a54 <puts>
        retract_pin(4);
 8000f38:	2004      	movs	r0, #4
 8000f3a:	f000 fd60 	bl	80019fe <retract_pin>
        break;
 8000f3e:	e098      	b.n	8001072 <main_process_input+0x3fe>
    case 'E':
        printf("retract_pin(5)\r\n");
 8000f40:	4834      	ldr	r0, [pc, #208]	@ (8001014 <main_process_input+0x3a0>)
 8000f42:	f005 fd87 	bl	8006a54 <puts>
        retract_pin(5);
 8000f46:	2005      	movs	r0, #5
 8000f48:	f000 fd59 	bl	80019fe <retract_pin>
        break;
 8000f4c:	e091      	b.n	8001072 <main_process_input+0x3fe>
    case 'F':
        printf("retract_pin(6)\r\n");
 8000f4e:	4832      	ldr	r0, [pc, #200]	@ (8001018 <main_process_input+0x3a4>)
 8000f50:	f005 fd80 	bl	8006a54 <puts>
        retract_pin(6);
 8000f54:	2006      	movs	r0, #6
 8000f56:	f000 fd52 	bl	80019fe <retract_pin>
        break;
 8000f5a:	e08a      	b.n	8001072 <main_process_input+0x3fe>
    case 'H':
        if (launcher.tubeCount == '8'){
 8000f5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd0 <main_process_input+0x35c>)
 8000f5e:	78db      	ldrb	r3, [r3, #3]
 8000f60:	2b38      	cmp	r3, #56	@ 0x38
 8000f62:	d106      	bne.n	8000f72 <main_process_input+0x2fe>
        	printf("retract_pin(7)\r\n");
 8000f64:	482d      	ldr	r0, [pc, #180]	@ (800101c <main_process_input+0x3a8>)
 8000f66:	f005 fd75 	bl	8006a54 <puts>
        	retract_pin(7);
 8000f6a:	2007      	movs	r0, #7
 8000f6c:	f000 fd47 	bl	80019fe <retract_pin>
        } else {
        	printf("* ERROR: tube 7 not available *\r\n");
        }
        break;
 8000f70:	e07f      	b.n	8001072 <main_process_input+0x3fe>
        	printf("* ERROR: tube 7 not available *\r\n");
 8000f72:	482b      	ldr	r0, [pc, #172]	@ (8001020 <main_process_input+0x3ac>)
 8000f74:	f005 fd6e 	bl	8006a54 <puts>
        break;
 8000f78:	e07b      	b.n	8001072 <main_process_input+0x3fe>
    case 'I':
        if (launcher.tubeCount == '8'){
 8000f7a:	4b15      	ldr	r3, [pc, #84]	@ (8000fd0 <main_process_input+0x35c>)
 8000f7c:	78db      	ldrb	r3, [r3, #3]
 8000f7e:	2b38      	cmp	r3, #56	@ 0x38
 8000f80:	d106      	bne.n	8000f90 <main_process_input+0x31c>
        	printf("retract_pin(8)\r\n");
 8000f82:	4828      	ldr	r0, [pc, #160]	@ (8001024 <main_process_input+0x3b0>)
 8000f84:	f005 fd66 	bl	8006a54 <puts>
        	retract_pin(8);
 8000f88:	2008      	movs	r0, #8
 8000f8a:	f000 fd38 	bl	80019fe <retract_pin>
        } else {
        	printf("* ERROR: tube 8 not available *\r\n");
        }
        break;
 8000f8e:	e070      	b.n	8001072 <main_process_input+0x3fe>
        	printf("* ERROR: tube 8 not available *\r\n");
 8000f90:	4825      	ldr	r0, [pc, #148]	@ (8001028 <main_process_input+0x3b4>)
 8000f92:	f005 fd5f 	bl	8006a54 <puts>
        break;
 8000f96:	e06c      	b.n	8001072 <main_process_input+0x3fe>
    case 'K':
    	printf("calibrate_on()\r\n");
 8000f98:	4824      	ldr	r0, [pc, #144]	@ (800102c <main_process_input+0x3b8>)
 8000f9a:	f005 fd5b 	bl	8006a54 <puts>
        calibrate_on();
 8000f9e:	f000 fbfd 	bl	800179c <calibrate_on>
        break;
 8000fa2:	e066      	b.n	8001072 <main_process_input+0x3fe>
    case 'R':
    	printf("reset_relay()\r\n");
 8000fa4:	4822      	ldr	r0, [pc, #136]	@ (8001030 <main_process_input+0x3bc>)
 8000fa6:	f005 fd55 	bl	8006a54 <puts>
        reset_relay();
 8000faa:	f000 fc0f 	bl	80017cc <reset_relay>
        break;
 8000fae:	e060      	b.n	8001072 <main_process_input+0x3fe>
 8000fb0:	08007af4 	.word	0x08007af4
 8000fb4:	08007b14 	.word	0x08007b14
 8000fb8:	08007b4c 	.word	0x08007b4c
 8000fbc:	08007b60 	.word	0x08007b60
 8000fc0:	08007b74 	.word	0x08007b74
 8000fc4:	08007b88 	.word	0x08007b88
 8000fc8:	08007b9c 	.word	0x08007b9c
 8000fcc:	08007bb0 	.word	0x08007bb0
 8000fd0:	20000000 	.word	0x20000000
 8000fd4:	08007bc4 	.word	0x08007bc4
 8000fd8:	08007bd8 	.word	0x08007bd8
 8000fdc:	08007bfc 	.word	0x08007bfc
 8000fe0:	08007c10 	.word	0x08007c10
 8000fe4:	08007c34 	.word	0x08007c34
 8000fe8:	08007c44 	.word	0x08007c44
 8000fec:	08007c54 	.word	0x08007c54
 8000ff0:	08007c64 	.word	0x08007c64
 8000ff4:	08007c74 	.word	0x08007c74
 8000ff8:	08007c84 	.word	0x08007c84
 8000ffc:	08007c94 	.word	0x08007c94
 8001000:	08007ca4 	.word	0x08007ca4
 8001004:	08007cb4 	.word	0x08007cb4
 8001008:	08007cc4 	.word	0x08007cc4
 800100c:	08007cd4 	.word	0x08007cd4
 8001010:	08007ce4 	.word	0x08007ce4
 8001014:	08007cf4 	.word	0x08007cf4
 8001018:	08007d04 	.word	0x08007d04
 800101c:	08007d14 	.word	0x08007d14
 8001020:	08007d24 	.word	0x08007d24
 8001024:	08007d48 	.word	0x08007d48
 8001028:	08007d58 	.word	0x08007d58
 800102c:	08007d7c 	.word	0x08007d7c
 8001030:	08007d8c 	.word	0x08007d8c
    case 'L':
    	printf("calibration_resistor()\r\n");
 8001034:	4811      	ldr	r0, [pc, #68]	@ (800107c <main_process_input+0x408>)
 8001036:	f005 fd0d 	bl	8006a54 <puts>
        calibration_resistor();
 800103a:	f000 fb97 	bl	800176c <calibration_resistor>
        break;
 800103e:	e018      	b.n	8001072 <main_process_input+0x3fe>
    case 'G':
    	printf("unground_xbt()\r\n");
 8001040:	480f      	ldr	r0, [pc, #60]	@ (8001080 <main_process_input+0x40c>)
 8001042:	f005 fd07 	bl	8006a54 <puts>
        unground_xbt();
 8001046:	f000 fb79 	bl	800173c <unground_xbt>
        break;
 800104a:	e012      	b.n	8001072 <main_process_input+0x3fe>
    case 'M':
        menu_main();
 800104c:	f000 f990 	bl	8001370 <menu_main>
        break;
 8001050:	e00f      	b.n	8001072 <main_process_input+0x3fe>
    case '~':
        menu_config();
 8001052:	f000 fa25 	bl	80014a0 <menu_config>
        activeMenu = configMenu; // set configuration menu flag
 8001056:	4b0b      	ldr	r3, [pc, #44]	@ (8001084 <main_process_input+0x410>)
 8001058:	2201      	movs	r2, #1
 800105a:	701a      	strb	r2, [r3, #0]
        break;
 800105c:	e009      	b.n	8001072 <main_process_input+0x3fe>
    case 's':
        print_serial_number();
 800105e:	f000 fa73 	bl	8001548 <print_serial_number>
        printf("\r\n");
 8001062:	4809      	ldr	r0, [pc, #36]	@ (8001088 <main_process_input+0x414>)
 8001064:	f005 fcf6 	bl	8006a54 <puts>
        break;
 8001068:	e003      	b.n	8001072 <main_process_input+0x3fe>
    default:
        printf("\r\n** Unrecognized command!!** \r\n");
 800106a:	4808      	ldr	r0, [pc, #32]	@ (800108c <main_process_input+0x418>)
 800106c:	f005 fcf2 	bl	8006a54 <puts>
        break;
 8001070:	bf00      	nop
	}
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	08007d9c 	.word	0x08007d9c
 8001080:	08007db4 	.word	0x08007db4
 8001084:	2000014f 	.word	0x2000014f
 8001088:	08007dc4 	.word	0x08007dc4
 800108c:	08007dc8 	.word	0x08007dc8

08001090 <config_process_input>:

/* Process char received while in configuration menu */
void config_process_input(char option){
 8001090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001094:	b086      	sub	sp, #24
 8001096:	af02      	add	r7, sp, #8
 8001098:	4603      	mov	r3, r0
 800109a:	71fb      	strb	r3, [r7, #7]
    switch (option) {
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	3b31      	subs	r3, #49	@ 0x31
 80010a0:	2b20      	cmp	r3, #32
 80010a2:	f200 812f 	bhi.w	8001304 <config_process_input+0x274>
 80010a6:	a201      	add	r2, pc, #4	@ (adr r2, 80010ac <config_process_input+0x1c>)
 80010a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ac:	08001149 	.word	0x08001149
 80010b0:	08001305 	.word	0x08001305
 80010b4:	08001305 	.word	0x08001305
 80010b8:	08001305 	.word	0x08001305
 80010bc:	08001305 	.word	0x08001305
 80010c0:	08001305 	.word	0x08001305
 80010c4:	08001305 	.word	0x08001305
 80010c8:	08001305 	.word	0x08001305
 80010cc:	08001305 	.word	0x08001305
 80010d0:	08001305 	.word	0x08001305
 80010d4:	08001305 	.word	0x08001305
 80010d8:	08001305 	.word	0x08001305
 80010dc:	08001305 	.word	0x08001305
 80010e0:	08001305 	.word	0x08001305
 80010e4:	08001305 	.word	0x08001305
 80010e8:	08001305 	.word	0x08001305
 80010ec:	08001305 	.word	0x08001305
 80010f0:	08001305 	.word	0x08001305
 80010f4:	08001305 	.word	0x08001305
 80010f8:	08001305 	.word	0x08001305
 80010fc:	08001305 	.word	0x08001305
 8001100:	08001305 	.word	0x08001305
 8001104:	080012f7 	.word	0x080012f7
 8001108:	08001305 	.word	0x08001305
 800110c:	08001305 	.word	0x08001305
 8001110:	080012e7 	.word	0x080012e7
 8001114:	08001305 	.word	0x08001305
 8001118:	08001305 	.word	0x08001305
 800111c:	08001143 	.word	0x08001143
 8001120:	080012ef 	.word	0x080012ef
 8001124:	08001305 	.word	0x08001305
 8001128:	08001305 	.word	0x08001305
 800112c:	08001131 	.word	0x08001131
        case 'Q':
            printf("\n\rLeaving Auto launcher configuration menu\n\r");
 8001130:	4879      	ldr	r0, [pc, #484]	@ (8001318 <config_process_input+0x288>)
 8001132:	f005 fc27 	bl	8006984 <iprintf>
            activeMenu = mainMenu; // set active menu flag to main menu
 8001136:	4b79      	ldr	r3, [pc, #484]	@ (800131c <config_process_input+0x28c>)
 8001138:	2200      	movs	r2, #0
 800113a:	701a      	strb	r2, [r3, #0]
            menu_main();
 800113c:	f000 f918 	bl	8001370 <menu_main>
            break;
 8001140:	e0e4      	b.n	800130c <config_process_input+0x27c>
        case 'M':
            menu_config();
 8001142:	f000 f9ad 	bl	80014a0 <menu_config>
            break;
 8001146:	e0e1      	b.n	800130c <config_process_input+0x27c>
        case '1':
        	// get the autolauncher tube count
            print_inline("\r\nEnter AL tube count [6] or [8]: ");
 8001148:	4875      	ldr	r0, [pc, #468]	@ (8001320 <config_process_input+0x290>)
 800114a:	f000 fa65 	bl	8001618 <print_inline>
            while(1){
            	if(rxStatus == active){
 800114e:	4b75      	ldr	r3, [pc, #468]	@ (8001324 <config_process_input+0x294>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d1fb      	bne.n	800114e <config_process_input+0xbe>
            		rxStatus = idle;
 8001156:	4b73      	ldr	r3, [pc, #460]	@ (8001324 <config_process_input+0x294>)
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]
            		printf("%c\r\n", rxChar);
 800115c:	4b72      	ldr	r3, [pc, #456]	@ (8001328 <config_process_input+0x298>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	4619      	mov	r1, r3
 8001162:	4872      	ldr	r0, [pc, #456]	@ (800132c <config_process_input+0x29c>)
 8001164:	f005 fc0e 	bl	8006984 <iprintf>
            		if(rxChar == '6' || rxChar == '8'){
 8001168:	4b6f      	ldr	r3, [pc, #444]	@ (8001328 <config_process_input+0x298>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b36      	cmp	r3, #54	@ 0x36
 800116e:	d003      	beq.n	8001178 <config_process_input+0xe8>
 8001170:	4b6d      	ldr	r3, [pc, #436]	@ (8001328 <config_process_input+0x298>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b38      	cmp	r3, #56	@ 0x38
 8001176:	d109      	bne.n	800118c <config_process_input+0xfc>
            			launcher.tubeCount = rxChar;
 8001178:	4b6b      	ldr	r3, [pc, #428]	@ (8001328 <config_process_input+0x298>)
 800117a:	781a      	ldrb	r2, [r3, #0]
 800117c:	4b6c      	ldr	r3, [pc, #432]	@ (8001330 <config_process_input+0x2a0>)
 800117e:	70da      	strb	r2, [r3, #3]
            			break;
 8001180:	bf00      	nop
            			print_inline("\r\nEnter AL tube count [6] or [8]: ");
            		}
            	}
            }
            // get the autolauncher type, R regular or X extended, only for 8 tube AL
            if(launcher.tubeCount == '8'){
 8001182:	4b6b      	ldr	r3, [pc, #428]	@ (8001330 <config_process_input+0x2a0>)
 8001184:	78db      	ldrb	r3, [r3, #3]
 8001186:	2b38      	cmp	r3, #56	@ 0x38
 8001188:	d12b      	bne.n	80011e2 <config_process_input+0x152>
 800118a:	e006      	b.n	800119a <config_process_input+0x10a>
            			printf("\r\nError, Enter 6 or 8 !\r\n");
 800118c:	4869      	ldr	r0, [pc, #420]	@ (8001334 <config_process_input+0x2a4>)
 800118e:	f005 fc61 	bl	8006a54 <puts>
            			print_inline("\r\nEnter AL tube count [6] or [8]: ");
 8001192:	4863      	ldr	r0, [pc, #396]	@ (8001320 <config_process_input+0x290>)
 8001194:	f000 fa40 	bl	8001618 <print_inline>
            	if(rxStatus == active){
 8001198:	e7d9      	b.n	800114e <config_process_input+0xbe>
            	print_inline("Enter launcher type, [X] extended or [R] regular: ");
 800119a:	4867      	ldr	r0, [pc, #412]	@ (8001338 <config_process_input+0x2a8>)
 800119c:	f000 fa3c 	bl	8001618 <print_inline>
                while(1){
                	if(rxStatus == active){
 80011a0:	4b60      	ldr	r3, [pc, #384]	@ (8001324 <config_process_input+0x294>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d1fb      	bne.n	80011a0 <config_process_input+0x110>
                		rxStatus = idle;
 80011a8:	4b5e      	ldr	r3, [pc, #376]	@ (8001324 <config_process_input+0x294>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	701a      	strb	r2, [r3, #0]
                		printf("%c\r\n", rxChar);
 80011ae:	4b5e      	ldr	r3, [pc, #376]	@ (8001328 <config_process_input+0x298>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	4619      	mov	r1, r3
 80011b4:	485d      	ldr	r0, [pc, #372]	@ (800132c <config_process_input+0x29c>)
 80011b6:	f005 fbe5 	bl	8006984 <iprintf>
                		if(rxChar == 'X' || rxChar == 'R'){
 80011ba:	4b5b      	ldr	r3, [pc, #364]	@ (8001328 <config_process_input+0x298>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b58      	cmp	r3, #88	@ 0x58
 80011c0:	d003      	beq.n	80011ca <config_process_input+0x13a>
 80011c2:	4b59      	ldr	r3, [pc, #356]	@ (8001328 <config_process_input+0x298>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b52      	cmp	r3, #82	@ 0x52
 80011c8:	d104      	bne.n	80011d4 <config_process_input+0x144>
                			launcher.type = rxChar;
 80011ca:	4b57      	ldr	r3, [pc, #348]	@ (8001328 <config_process_input+0x298>)
 80011cc:	781a      	ldrb	r2, [r3, #0]
 80011ce:	4b58      	ldr	r3, [pc, #352]	@ (8001330 <config_process_input+0x2a0>)
 80011d0:	711a      	strb	r2, [r3, #4]
                			break;
 80011d2:	e009      	b.n	80011e8 <config_process_input+0x158>
                		} else {
                			printf("\r\nError, Enter X or R !\r\n");
 80011d4:	4859      	ldr	r0, [pc, #356]	@ (800133c <config_process_input+0x2ac>)
 80011d6:	f005 fc3d 	bl	8006a54 <puts>
                			print_inline("Enter launcher type, [X] extended or [R] regular: ");
 80011da:	4857      	ldr	r0, [pc, #348]	@ (8001338 <config_process_input+0x2a8>)
 80011dc:	f000 fa1c 	bl	8001618 <print_inline>
                	if(rxStatus == active){
 80011e0:	e7de      	b.n	80011a0 <config_process_input+0x110>
                		}
                	}
                }
            } else {
            	launcher.type = '?'; // if not 8 tubes, reset type to unknown
 80011e2:	4b53      	ldr	r3, [pc, #332]	@ (8001330 <config_process_input+0x2a0>)
 80011e4:	223f      	movs	r2, #63	@ 0x3f
 80011e6:	711a      	strb	r2, [r3, #4]
            }
            print_inline("Enter a two-digit autolauncher serial number [0-99]: ");
 80011e8:	4855      	ldr	r0, [pc, #340]	@ (8001340 <config_process_input+0x2b0>)
 80011ea:	f000 fa15 	bl	8001618 <print_inline>
            // get the 2 digit serial number
    		for(uint8_t i = 0; i < 2; i++){
 80011ee:	2300      	movs	r3, #0
 80011f0:	73fb      	strb	r3, [r7, #15]
 80011f2:	e020      	b.n	8001236 <config_process_input+0x1a6>
    			while(1){
					if(rxStatus == active){
 80011f4:	4b4b      	ldr	r3, [pc, #300]	@ (8001324 <config_process_input+0x294>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d1fb      	bne.n	80011f4 <config_process_input+0x164>
						rxStatus = idle;
 80011fc:	4b49      	ldr	r3, [pc, #292]	@ (8001324 <config_process_input+0x294>)
 80011fe:	2200      	movs	r2, #0
 8001200:	701a      	strb	r2, [r3, #0]
						if(is_num(rxChar) == 1){ // check it's a number to store it
 8001202:	4b49      	ldr	r3, [pc, #292]	@ (8001328 <config_process_input+0x298>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	4618      	mov	r0, r3
 8001208:	f000 f9c4 	bl	8001594 <is_num>
 800120c:	4603      	mov	r3, r0
 800120e:	2b01      	cmp	r3, #1
 8001210:	d105      	bne.n	800121e <config_process_input+0x18e>
							launcher.serialNumber[i] = rxChar;
 8001212:	7bfb      	ldrb	r3, [r7, #15]
 8001214:	4a44      	ldr	r2, [pc, #272]	@ (8001328 <config_process_input+0x298>)
 8001216:	7811      	ldrb	r1, [r2, #0]
 8001218:	4a45      	ldr	r2, [pc, #276]	@ (8001330 <config_process_input+0x2a0>)
 800121a:	54d1      	strb	r1, [r2, r3]
							break;
 800121c:	e008      	b.n	8001230 <config_process_input+0x1a0>
						} else {
							printf("\r\nEnter only numbers!\r\n");
 800121e:	4849      	ldr	r0, [pc, #292]	@ (8001344 <config_process_input+0x2b4>)
 8001220:	f005 fc18 	bl	8006a54 <puts>
							i = 0; // restart index count
 8001224:	2300      	movs	r3, #0
 8001226:	73fb      	strb	r3, [r7, #15]
							print_inline("Enter a two-digit autolauncher serial number [0-99]: ");
 8001228:	4845      	ldr	r0, [pc, #276]	@ (8001340 <config_process_input+0x2b0>)
 800122a:	f000 f9f5 	bl	8001618 <print_inline>
					if(rxStatus == active){
 800122e:	e7e1      	b.n	80011f4 <config_process_input+0x164>
    		for(uint8_t i = 0; i < 2; i++){
 8001230:	7bfb      	ldrb	r3, [r7, #15]
 8001232:	3301      	adds	r3, #1
 8001234:	73fb      	strb	r3, [r7, #15]
 8001236:	7bfb      	ldrb	r3, [r7, #15]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d9db      	bls.n	80011f4 <config_process_input+0x164>
						}
    				}
    			}
    		}
    		printf("%s\r\n", launcher.serialNumber);
 800123c:	493c      	ldr	r1, [pc, #240]	@ (8001330 <config_process_input+0x2a0>)
 800123e:	4842      	ldr	r0, [pc, #264]	@ (8001348 <config_process_input+0x2b8>)
 8001240:	f005 fba0 	bl	8006984 <iprintf>
    		// set the AL configured flag and print configuration
            eeprom.configured = '|';
 8001244:	4b41      	ldr	r3, [pc, #260]	@ (800134c <config_process_input+0x2bc>)
 8001246:	227c      	movs	r2, #124	@ 0x7c
 8001248:	715a      	strb	r2, [r3, #5]
            printf("\r\nNew autolauncher configuration: Tubes: %c | Type: %c | Serial: %s\r\n", launcher.tubeCount, launcher.type, launcher.serialNumber);
 800124a:	4b39      	ldr	r3, [pc, #228]	@ (8001330 <config_process_input+0x2a0>)
 800124c:	78db      	ldrb	r3, [r3, #3]
 800124e:	4619      	mov	r1, r3
 8001250:	4b37      	ldr	r3, [pc, #220]	@ (8001330 <config_process_input+0x2a0>)
 8001252:	791b      	ldrb	r3, [r3, #4]
 8001254:	461a      	mov	r2, r3
 8001256:	4b36      	ldr	r3, [pc, #216]	@ (8001330 <config_process_input+0x2a0>)
 8001258:	483d      	ldr	r0, [pc, #244]	@ (8001350 <config_process_input+0x2c0>)
 800125a:	f005 fb93 	bl	8006984 <iprintf>

            // store parameters in eeprom
            eeprom_write(0x00, launcher.tubeCount);
 800125e:	4b34      	ldr	r3, [pc, #208]	@ (8001330 <config_process_input+0x2a0>)
 8001260:	78db      	ldrb	r3, [r3, #3]
 8001262:	4619      	mov	r1, r3
 8001264:	2000      	movs	r0, #0
 8001266:	f000 fc55 	bl	8001b14 <eeprom_write>
            eeprom_write(0x01, launcher.type);
 800126a:	4b31      	ldr	r3, [pc, #196]	@ (8001330 <config_process_input+0x2a0>)
 800126c:	791b      	ldrb	r3, [r3, #4]
 800126e:	4619      	mov	r1, r3
 8001270:	2001      	movs	r0, #1
 8001272:	f000 fc4f 	bl	8001b14 <eeprom_write>
            eeprom_write(0x02, launcher.serialNumber[0]);
 8001276:	4b2e      	ldr	r3, [pc, #184]	@ (8001330 <config_process_input+0x2a0>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	4619      	mov	r1, r3
 800127c:	2002      	movs	r0, #2
 800127e:	f000 fc49 	bl	8001b14 <eeprom_write>
            eeprom_write(0x03, launcher.serialNumber[1]);
 8001282:	4b2b      	ldr	r3, [pc, #172]	@ (8001330 <config_process_input+0x2a0>)
 8001284:	785b      	ldrb	r3, [r3, #1]
 8001286:	4619      	mov	r1, r3
 8001288:	2003      	movs	r0, #3
 800128a:	f000 fc43 	bl	8001b14 <eeprom_write>
            eeprom_write(0x04, eeprom.configured);
 800128e:	4b2f      	ldr	r3, [pc, #188]	@ (800134c <config_process_input+0x2bc>)
 8001290:	795b      	ldrb	r3, [r3, #5]
 8001292:	4619      	mov	r1, r3
 8001294:	2004      	movs	r0, #4
 8001296:	f000 fc3d 	bl	8001b14 <eeprom_write>

            printf("Settings saved!\r\n");
 800129a:	482e      	ldr	r0, [pc, #184]	@ (8001354 <config_process_input+0x2c4>)
 800129c:	f005 fbda 	bl	8006a54 <puts>
            printf("\r\nNew autolauncher configuration: Tubes: %c | Type: %c | Serial: %c%c | configed: %c\r\n", eeprom_read(0x00), eeprom_read(0x01), eeprom_read(0x02), eeprom_read(0x03), eeprom_read(0x04));
 80012a0:	2000      	movs	r0, #0
 80012a2:	f000 fc67 	bl	8001b74 <eeprom_read>
 80012a6:	4603      	mov	r3, r0
 80012a8:	461d      	mov	r5, r3
 80012aa:	2001      	movs	r0, #1
 80012ac:	f000 fc62 	bl	8001b74 <eeprom_read>
 80012b0:	4603      	mov	r3, r0
 80012b2:	461e      	mov	r6, r3
 80012b4:	2002      	movs	r0, #2
 80012b6:	f000 fc5d 	bl	8001b74 <eeprom_read>
 80012ba:	4603      	mov	r3, r0
 80012bc:	4698      	mov	r8, r3
 80012be:	2003      	movs	r0, #3
 80012c0:	f000 fc58 	bl	8001b74 <eeprom_read>
 80012c4:	4603      	mov	r3, r0
 80012c6:	461c      	mov	r4, r3
 80012c8:	2004      	movs	r0, #4
 80012ca:	f000 fc53 	bl	8001b74 <eeprom_read>
 80012ce:	4603      	mov	r3, r0
 80012d0:	9301      	str	r3, [sp, #4]
 80012d2:	9400      	str	r4, [sp, #0]
 80012d4:	4643      	mov	r3, r8
 80012d6:	4632      	mov	r2, r6
 80012d8:	4629      	mov	r1, r5
 80012da:	481f      	ldr	r0, [pc, #124]	@ (8001358 <config_process_input+0x2c8>)
 80012dc:	f005 fb52 	bl	8006984 <iprintf>

            menu_config();
 80012e0:	f000 f8de 	bl	80014a0 <menu_config>
            break;
 80012e4:	e012      	b.n	800130c <config_process_input+0x27c>
        case 'J':
            //extend_all_pins();
        	printf("extend_all_pins()\r\n");
 80012e6:	481d      	ldr	r0, [pc, #116]	@ (800135c <config_process_input+0x2cc>)
 80012e8:	f005 fbb4 	bl	8006a54 <puts>
            break;
 80012ec:	e00e      	b.n	800130c <config_process_input+0x27c>
        case 'N':
            //retract_all_pins();
        	printf("retract_all_pins()\r\n");
 80012ee:	481c      	ldr	r0, [pc, #112]	@ (8001360 <config_process_input+0x2d0>)
 80012f0:	f005 fbb0 	bl	8006a54 <puts>
            break;
 80012f4:	e00a      	b.n	800130c <config_process_input+0x27c>
        case 'G':
            printf("\n\rSend the \"@\" symbol repeatedly to exit grease pins mode\r\n");
 80012f6:	481b      	ldr	r0, [pc, #108]	@ (8001364 <config_process_input+0x2d4>)
 80012f8:	f005 fbac 	bl	8006a54 <puts>
            //grease_pins();
            printf("grease_pins();");
 80012fc:	481a      	ldr	r0, [pc, #104]	@ (8001368 <config_process_input+0x2d8>)
 80012fe:	f005 fb41 	bl	8006984 <iprintf>
            break;
 8001302:	e003      	b.n	800130c <config_process_input+0x27c>
        default:
        	printf("\r\n** Unrecognized command!!** \r\n");
 8001304:	4819      	ldr	r0, [pc, #100]	@ (800136c <config_process_input+0x2dc>)
 8001306:	f005 fba5 	bl	8006a54 <puts>
            break;
 800130a:	bf00      	nop
    }
}
 800130c:	bf00      	nop
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001316:	bf00      	nop
 8001318:	08007de8 	.word	0x08007de8
 800131c:	2000014f 	.word	0x2000014f
 8001320:	08007e18 	.word	0x08007e18
 8001324:	2000014e 	.word	0x2000014e
 8001328:	20000151 	.word	0x20000151
 800132c:	08007e3c 	.word	0x08007e3c
 8001330:	20000000 	.word	0x20000000
 8001334:	08007e44 	.word	0x08007e44
 8001338:	08007e60 	.word	0x08007e60
 800133c:	08007e94 	.word	0x08007e94
 8001340:	08007eb0 	.word	0x08007eb0
 8001344:	08007ee8 	.word	0x08007ee8
 8001348:	08007f00 	.word	0x08007f00
 800134c:	2000000c 	.word	0x2000000c
 8001350:	08007f08 	.word	0x08007f08
 8001354:	08007f50 	.word	0x08007f50
 8001358:	08007f64 	.word	0x08007f64
 800135c:	08007fbc 	.word	0x08007fbc
 8001360:	08007fd0 	.word	0x08007fd0
 8001364:	08007fe4 	.word	0x08007fe4
 8001368:	08008020 	.word	0x08008020
 800136c:	08007dc8 	.word	0x08007dc8

08001370 <menu_main>:


void menu_main(void) {
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
    printf("\r\n\n\r");
 8001374:	4831      	ldr	r0, [pc, #196]	@ (800143c <menu_main+0xcc>)
 8001376:	f005 fb05 	bl	8006984 <iprintf>
    printf("=========================================\n\r");
 800137a:	4831      	ldr	r0, [pc, #196]	@ (8001440 <menu_main+0xd0>)
 800137c:	f005 fb02 	bl	8006984 <iprintf>
    printf("|  AOML auto launcher board version 3.0 |\n\r");
 8001380:	4830      	ldr	r0, [pc, #192]	@ (8001444 <menu_main+0xd4>)
 8001382:	f005 faff 	bl	8006984 <iprintf>
    printf("|  Firmware version 2024.mm.dd.hhmm     |\n\r");
 8001386:	4830      	ldr	r0, [pc, #192]	@ (8001448 <menu_main+0xd8>)
 8001388:	f005 fafc 	bl	8006984 <iprintf>
    printf("=========================================\n\r");
 800138c:	482c      	ldr	r0, [pc, #176]	@ (8001440 <menu_main+0xd0>)
 800138e:	f005 faf9 	bl	8006984 <iprintf>
    printf("|    Model #ALV3.0      S/N ");
 8001392:	482e      	ldr	r0, [pc, #184]	@ (800144c <menu_main+0xdc>)
 8001394:	f005 faf6 	bl	8006984 <iprintf>
    print_serial_number();
 8001398:	f000 f8d6 	bl	8001548 <print_serial_number>
    printf("       |\n\r");
 800139c:	482c      	ldr	r0, [pc, #176]	@ (8001450 <menu_main+0xe0>)
 800139e:	f005 faf1 	bl	8006984 <iprintf>
    printf("=========================================\n\r");
 80013a2:	4827      	ldr	r0, [pc, #156]	@ (8001440 <menu_main+0xd0>)
 80013a4:	f005 faee 	bl	8006984 <iprintf>
    printf("|               COMMANDS                |\n\r");
 80013a8:	482a      	ldr	r0, [pc, #168]	@ (8001454 <menu_main+0xe4>)
 80013aa:	f005 faeb 	bl	8006984 <iprintf>
    if (eeprom.configured != '|') {
 80013ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001458 <menu_main+0xe8>)
 80013b0:	795b      	ldrb	r3, [r3, #5]
 80013b2:	2b7c      	cmp	r3, #124	@ 0x7c
 80013b4:	d002      	beq.n	80013bc <menu_main+0x4c>
        printf("| ERROR, NO SERIAL NUMBER ASSIGNED  |\n\r");
 80013b6:	4829      	ldr	r0, [pc, #164]	@ (800145c <menu_main+0xec>)
 80013b8:	f005 fae4 	bl	8006984 <iprintf>
    }
    printf("=========================================\n\r");
 80013bc:	4820      	ldr	r0, [pc, #128]	@ (8001440 <menu_main+0xd0>)
 80013be:	f005 fae1 	bl	8006984 <iprintf>
    printf("| Connect  cal Sim BT  0                |\n\r");
 80013c2:	4827      	ldr	r0, [pc, #156]	@ (8001460 <menu_main+0xf0>)
 80013c4:	f005 fade 	bl	8006984 <iprintf>
    if (launcher.tubeCount == '6') {
 80013c8:	4b26      	ldr	r3, [pc, #152]	@ (8001464 <menu_main+0xf4>)
 80013ca:	78db      	ldrb	r3, [r3, #3]
 80013cc:	2b36      	cmp	r3, #54	@ 0x36
 80013ce:	d109      	bne.n	80013e4 <menu_main+0x74>
        printf("| Connect  XBT 1-6     1,2,3,4,5,6      |\n\r");
 80013d0:	4825      	ldr	r0, [pc, #148]	@ (8001468 <menu_main+0xf8>)
 80013d2:	f005 fad7 	bl	8006984 <iprintf>
        printf("| Extend   Pin 1-6     U,V,W,X,Y,Z      |\n\r");
 80013d6:	4825      	ldr	r0, [pc, #148]	@ (800146c <menu_main+0xfc>)
 80013d8:	f005 fad4 	bl	8006984 <iprintf>
        printf("| Retract  Pin 1-6     A,B,C,D,E,F      |\n\r");
 80013dc:	4824      	ldr	r0, [pc, #144]	@ (8001470 <menu_main+0x100>)
 80013de:	f005 fad1 	bl	8006984 <iprintf>
 80013e2:	e010      	b.n	8001406 <menu_main+0x96>
    } else if (launcher.tubeCount == '8') {
 80013e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001464 <menu_main+0xf4>)
 80013e6:	78db      	ldrb	r3, [r3, #3]
 80013e8:	2b38      	cmp	r3, #56	@ 0x38
 80013ea:	d109      	bne.n	8001400 <menu_main+0x90>

        printf("| Connect  XBT 1-8     1,2,3,4,5,6,7,8  |\n\r");
 80013ec:	4821      	ldr	r0, [pc, #132]	@ (8001474 <menu_main+0x104>)
 80013ee:	f005 fac9 	bl	8006984 <iprintf>
        printf("| Extend   Pin 1-8     U,V,W,X,Y,Z,S,T  |\n\r");
 80013f2:	4821      	ldr	r0, [pc, #132]	@ (8001478 <menu_main+0x108>)
 80013f4:	f005 fac6 	bl	8006984 <iprintf>
        printf("| Retract  Pin 1-8     A,B,C,D,E,F,H,I  |\n\r");
 80013f8:	4820      	ldr	r0, [pc, #128]	@ (800147c <menu_main+0x10c>)
 80013fa:	f005 fac3 	bl	8006984 <iprintf>
 80013fe:	e002      	b.n	8001406 <menu_main+0x96>
    } else {
    	printf("| ERROR, NO TUBE COUNT!!     	        |\n\r");
 8001400:	481f      	ldr	r0, [pc, #124]	@ (8001480 <menu_main+0x110>)
 8001402:	f005 fabf 	bl	8006984 <iprintf>
    }
    printf("| Unground   XBT       G                |\n\r");
 8001406:	481f      	ldr	r0, [pc, #124]	@ (8001484 <menu_main+0x114>)
 8001408:	f005 fabc 	bl	8006984 <iprintf>
    printf("| Calibrate on         K                |\n\r");
 800140c:	481e      	ldr	r0, [pc, #120]	@ (8001488 <menu_main+0x118>)
 800140e:	f005 fab9 	bl	8006984 <iprintf>
    printf("| Cal resistor         L                |\n\r");
 8001412:	481e      	ldr	r0, [pc, #120]	@ (800148c <menu_main+0x11c>)
 8001414:	f005 fab6 	bl	8006984 <iprintf>
    printf("| Reset Relays         R                |\n\r");
 8001418:	481d      	ldr	r0, [pc, #116]	@ (8001490 <menu_main+0x120>)
 800141a:	f005 fab3 	bl	8006984 <iprintf>
    printf("| Print serial number  s                |\n\r");
 800141e:	481d      	ldr	r0, [pc, #116]	@ (8001494 <menu_main+0x124>)
 8001420:	f005 fab0 	bl	8006984 <iprintf>
    printf("| This Menu            M                |\n\r");
 8001424:	481c      	ldr	r0, [pc, #112]	@ (8001498 <menu_main+0x128>)
 8001426:	f005 faad 	bl	8006984 <iprintf>
    printf("=========================================\n\r");
 800142a:	4805      	ldr	r0, [pc, #20]	@ (8001440 <menu_main+0xd0>)
 800142c:	f005 faaa 	bl	8006984 <iprintf>
    printf("\r\n");
 8001430:	481a      	ldr	r0, [pc, #104]	@ (800149c <menu_main+0x12c>)
 8001432:	f005 fb0f 	bl	8006a54 <puts>
}//end status_message
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	08008030 	.word	0x08008030
 8001440:	08008038 	.word	0x08008038
 8001444:	08008064 	.word	0x08008064
 8001448:	08008090 	.word	0x08008090
 800144c:	080080bc 	.word	0x080080bc
 8001450:	080080dc 	.word	0x080080dc
 8001454:	080080e8 	.word	0x080080e8
 8001458:	2000000c 	.word	0x2000000c
 800145c:	08008114 	.word	0x08008114
 8001460:	0800813c 	.word	0x0800813c
 8001464:	20000000 	.word	0x20000000
 8001468:	08008168 	.word	0x08008168
 800146c:	08008194 	.word	0x08008194
 8001470:	080081c0 	.word	0x080081c0
 8001474:	080081ec 	.word	0x080081ec
 8001478:	08008218 	.word	0x08008218
 800147c:	08008244 	.word	0x08008244
 8001480:	08008270 	.word	0x08008270
 8001484:	0800829c 	.word	0x0800829c
 8001488:	080082c8 	.word	0x080082c8
 800148c:	080082f4 	.word	0x080082f4
 8001490:	08008320 	.word	0x08008320
 8001494:	0800834c 	.word	0x0800834c
 8001498:	08008378 	.word	0x08008378
 800149c:	08007dc4 	.word	0x08007dc4

080014a0 <menu_config>:


void menu_config(void) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
    printf("\n\r");
 80014a4:	481b      	ldr	r0, [pc, #108]	@ (8001514 <menu_config+0x74>)
 80014a6:	f005 fa6d 	bl	8006984 <iprintf>
    printf("=========================================\n\r");
 80014aa:	481b      	ldr	r0, [pc, #108]	@ (8001518 <menu_config+0x78>)
 80014ac:	f005 fa6a 	bl	8006984 <iprintf>
    printf("|  AOML auto launcher config menu       |\n\r");
 80014b0:	481a      	ldr	r0, [pc, #104]	@ (800151c <menu_config+0x7c>)
 80014b2:	f005 fa67 	bl	8006984 <iprintf>
    printf("=========================================\n\r");
 80014b6:	4818      	ldr	r0, [pc, #96]	@ (8001518 <menu_config+0x78>)
 80014b8:	f005 fa64 	bl	8006984 <iprintf>
    printf("|    Model #ALV3.0      S/N ");
 80014bc:	4818      	ldr	r0, [pc, #96]	@ (8001520 <menu_config+0x80>)
 80014be:	f005 fa61 	bl	8006984 <iprintf>
    print_serial_number();
 80014c2:	f000 f841 	bl	8001548 <print_serial_number>
    printf("       |\n\r");
 80014c6:	4817      	ldr	r0, [pc, #92]	@ (8001524 <menu_config+0x84>)
 80014c8:	f005 fa5c 	bl	8006984 <iprintf>
    printf("=========================================\n\r");
 80014cc:	4812      	ldr	r0, [pc, #72]	@ (8001518 <menu_config+0x78>)
 80014ce:	f005 fa59 	bl	8006984 <iprintf>
    printf("|               COMMANDS                |\n\r");
 80014d2:	4815      	ldr	r0, [pc, #84]	@ (8001528 <menu_config+0x88>)
 80014d4:	f005 fa56 	bl	8006984 <iprintf>
    printf("=========================================\n\r");
 80014d8:	480f      	ldr	r0, [pc, #60]	@ (8001518 <menu_config+0x78>)
 80014da:	f005 fa53 	bl	8006984 <iprintf>
    printf("| Set tubes & S/N      1                |\n\r");
 80014de:	4813      	ldr	r0, [pc, #76]	@ (800152c <menu_config+0x8c>)
 80014e0:	f005 fa50 	bl	8006984 <iprintf>
    printf("| This Menu            M                |\n\r");
 80014e4:	4812      	ldr	r0, [pc, #72]	@ (8001530 <menu_config+0x90>)
 80014e6:	f005 fa4d 	bl	8006984 <iprintf>
    printf("| Extend all   pins    J                |\n\r");
 80014ea:	4812      	ldr	r0, [pc, #72]	@ (8001534 <menu_config+0x94>)
 80014ec:	f005 fa4a 	bl	8006984 <iprintf>
    printf("| Retract all  pins    N                |\n\r");
 80014f0:	4811      	ldr	r0, [pc, #68]	@ (8001538 <menu_config+0x98>)
 80014f2:	f005 fa47 	bl	8006984 <iprintf>
    printf("| Grease pins  mode    G                |\n\r");
 80014f6:	4811      	ldr	r0, [pc, #68]	@ (800153c <menu_config+0x9c>)
 80014f8:	f005 fa44 	bl	8006984 <iprintf>
    printf("| Quit config menu     Q                |\n\r");
 80014fc:	4810      	ldr	r0, [pc, #64]	@ (8001540 <menu_config+0xa0>)
 80014fe:	f005 fa41 	bl	8006984 <iprintf>
    printf("=========================================\n\r");
 8001502:	4805      	ldr	r0, [pc, #20]	@ (8001518 <menu_config+0x78>)
 8001504:	f005 fa3e 	bl	8006984 <iprintf>
    printf("\r\n");
 8001508:	480e      	ldr	r0, [pc, #56]	@ (8001544 <menu_config+0xa4>)
 800150a:	f005 faa3 	bl	8006a54 <puts>
}//end status_message
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	080083a4 	.word	0x080083a4
 8001518:	08008038 	.word	0x08008038
 800151c:	080083a8 	.word	0x080083a8
 8001520:	080080bc 	.word	0x080080bc
 8001524:	080080dc 	.word	0x080080dc
 8001528:	080080e8 	.word	0x080080e8
 800152c:	080083d4 	.word	0x080083d4
 8001530:	08008378 	.word	0x08008378
 8001534:	08008400 	.word	0x08008400
 8001538:	0800842c 	.word	0x0800842c
 800153c:	08008458 	.word	0x08008458
 8001540:	08008484 	.word	0x08008484
 8001544:	08007dc4 	.word	0x08007dc4

08001548 <print_serial_number>:


/*********************** AUXILIAR FUNCTIONS ***********************/

void print_serial_number(void){
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
	//printf( "AL%c%s", launcher.type[0], launcher.serialNumber);
    if(eeprom.configured == '|'){
 800154c:	4b0c      	ldr	r3, [pc, #48]	@ (8001580 <print_serial_number+0x38>)
 800154e:	795b      	ldrb	r3, [r3, #5]
 8001550:	2b7c      	cmp	r3, #124	@ 0x7c
 8001552:	d107      	bne.n	8001564 <print_serial_number+0x1c>
    	printf( "AL%c%s", launcher.type, launcher.serialNumber);
 8001554:	4b0b      	ldr	r3, [pc, #44]	@ (8001584 <print_serial_number+0x3c>)
 8001556:	791b      	ldrb	r3, [r3, #4]
 8001558:	4a0a      	ldr	r2, [pc, #40]	@ (8001584 <print_serial_number+0x3c>)
 800155a:	4619      	mov	r1, r3
 800155c:	480a      	ldr	r0, [pc, #40]	@ (8001588 <print_serial_number+0x40>)
 800155e:	f005 fa11 	bl	8006984 <iprintf>
        if (launcher.tubeCount == '6')
            printf("AL6XX");
        else
            printf("ALRXX");
    }
}
 8001562:	e00a      	b.n	800157a <print_serial_number+0x32>
        if (launcher.tubeCount == '6')
 8001564:	4b07      	ldr	r3, [pc, #28]	@ (8001584 <print_serial_number+0x3c>)
 8001566:	78db      	ldrb	r3, [r3, #3]
 8001568:	2b36      	cmp	r3, #54	@ 0x36
 800156a:	d103      	bne.n	8001574 <print_serial_number+0x2c>
            printf("AL6XX");
 800156c:	4807      	ldr	r0, [pc, #28]	@ (800158c <print_serial_number+0x44>)
 800156e:	f005 fa09 	bl	8006984 <iprintf>
}
 8001572:	e002      	b.n	800157a <print_serial_number+0x32>
            printf("ALRXX");
 8001574:	4806      	ldr	r0, [pc, #24]	@ (8001590 <print_serial_number+0x48>)
 8001576:	f005 fa05 	bl	8006984 <iprintf>
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	2000000c 	.word	0x2000000c
 8001584:	20000000 	.word	0x20000000
 8001588:	080084b0 	.word	0x080084b0
 800158c:	080084b8 	.word	0x080084b8
 8001590:	080084c0 	.word	0x080084c0

08001594 <is_num>:

/* is_num()
 * Parameters: character c
 * Return: 1 if c is a digit, 0 if not */
uint8_t is_num(char c){
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	71fb      	strb	r3, [r7, #7]
	uint8_t isNum = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	73fb      	strb	r3, [r7, #15]
	isNum = ('0' == c || '1' == c || '2' == c || '3' == c || '4' == c || '5' == c || '6' == c || '7' == c || '8' == c || '9' == c);
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	2b30      	cmp	r3, #48	@ 0x30
 80015a6:	d01a      	beq.n	80015de <is_num+0x4a>
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	2b31      	cmp	r3, #49	@ 0x31
 80015ac:	d017      	beq.n	80015de <is_num+0x4a>
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	2b32      	cmp	r3, #50	@ 0x32
 80015b2:	d014      	beq.n	80015de <is_num+0x4a>
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	2b33      	cmp	r3, #51	@ 0x33
 80015b8:	d011      	beq.n	80015de <is_num+0x4a>
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	2b34      	cmp	r3, #52	@ 0x34
 80015be:	d00e      	beq.n	80015de <is_num+0x4a>
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	2b35      	cmp	r3, #53	@ 0x35
 80015c4:	d00b      	beq.n	80015de <is_num+0x4a>
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	2b36      	cmp	r3, #54	@ 0x36
 80015ca:	d008      	beq.n	80015de <is_num+0x4a>
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	2b37      	cmp	r3, #55	@ 0x37
 80015d0:	d005      	beq.n	80015de <is_num+0x4a>
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	2b38      	cmp	r3, #56	@ 0x38
 80015d6:	d002      	beq.n	80015de <is_num+0x4a>
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	2b39      	cmp	r3, #57	@ 0x39
 80015dc:	d101      	bne.n	80015e2 <is_num+0x4e>
 80015de:	2301      	movs	r3, #1
 80015e0:	e000      	b.n	80015e4 <is_num+0x50>
 80015e2:	2300      	movs	r3, #0
 80015e4:	73fb      	strb	r3, [r7, #15]
	return isNum;
 80015e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr
	...

080015f4 <multiplexer_set>:


/* Select the source of RS232
 * Parameters: select {MUX_GPS, MUX_STM32} */
void multiplexer_set(mux_t select){
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(MUX_SELECT_GPIO_Port, MUX_SELECT_Pin, select); // SET = UART-tx / RESET = Din from GPS
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	461a      	mov	r2, r3
 8001602:	2104      	movs	r1, #4
 8001604:	4803      	ldr	r0, [pc, #12]	@ (8001614 <multiplexer_set+0x20>)
 8001606:	f001 fee9 	bl	80033dc <HAL_GPIO_WritePin>
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40010800 	.word	0x40010800

08001618 <print_inline>:

void print_inline(char * text){
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	char temp = ' ';
 8001620:	2320      	movs	r3, #32
 8001622:	73bb      	strb	r3, [r7, #14]
	for(uint8_t i = 0; i<=255 && temp!= '\0' ; i++){
 8001624:	2300      	movs	r3, #0
 8001626:	73fb      	strb	r3, [r7, #15]
 8001628:	e00e      	b.n	8001648 <print_inline+0x30>
		temp = text[i];
 800162a:	7bfb      	ldrb	r3, [r7, #15]
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	4413      	add	r3, r2
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	73bb      	strb	r3, [r7, #14]
		HAL_UART_Transmit(&huart1, (uint8_t *) &temp, 1, 100);
 8001634:	f107 010e 	add.w	r1, r7, #14
 8001638:	2364      	movs	r3, #100	@ 0x64
 800163a:	2201      	movs	r2, #1
 800163c:	4806      	ldr	r0, [pc, #24]	@ (8001658 <print_inline+0x40>)
 800163e:	f004 fac5 	bl	8005bcc <HAL_UART_Transmit>
	for(uint8_t i = 0; i<=255 && temp!= '\0' ; i++){
 8001642:	7bfb      	ldrb	r3, [r7, #15]
 8001644:	3301      	adds	r3, #1
 8001646:	73fb      	strb	r3, [r7, #15]
 8001648:	7bbb      	ldrb	r3, [r7, #14]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1ed      	bne.n	800162a <print_inline+0x12>
	}
}
 800164e:	bf00      	nop
 8001650:	bf00      	nop
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	200001a0 	.word	0x200001a0

0800165c <__io_putchar>:

/* Support printf over UART
   Warning: printf() only empties the buffer and prints after seeing an \n */
int __io_putchar(int ch){
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
	(void) HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, HAL_MAX_DELAY);
 8001664:	1d39      	adds	r1, r7, #4
 8001666:	f04f 33ff 	mov.w	r3, #4294967295
 800166a:	2201      	movs	r2, #1
 800166c:	4803      	ldr	r0, [pc, #12]	@ (800167c <__io_putchar+0x20>)
 800166e:	f004 faad 	bl	8005bcc <HAL_UART_Transmit>
	return ch;
 8001672:	687b      	ldr	r3, [r7, #4]
}
 8001674:	4618      	mov	r0, r3
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	200001a0 	.word	0x200001a0

08001680 <parameter_init>:

/* Initialize autolauncher parameters */
void parameter_init(void){
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
	// get parameters from eeprom or assign default values
	eeprom.configured = eeprom_read(0x04);
 8001684:	2004      	movs	r0, #4
 8001686:	f000 fa75 	bl	8001b74 <eeprom_read>
 800168a:	4603      	mov	r3, r0
 800168c:	461a      	mov	r2, r3
 800168e:	4b15      	ldr	r3, [pc, #84]	@ (80016e4 <parameter_init+0x64>)
 8001690:	715a      	strb	r2, [r3, #5]
	if(eeprom.configured == '|'){
 8001692:	4b14      	ldr	r3, [pc, #80]	@ (80016e4 <parameter_init+0x64>)
 8001694:	795b      	ldrb	r3, [r3, #5]
 8001696:	2b7c      	cmp	r3, #124	@ 0x7c
 8001698:	d11f      	bne.n	80016da <parameter_init+0x5a>
		printf("\r\n... Configuration found in memory ... \r\n");
 800169a:	4813      	ldr	r0, [pc, #76]	@ (80016e8 <parameter_init+0x68>)
 800169c:	f005 f9da 	bl	8006a54 <puts>
		launcher.tubeCount = eeprom_read(0x00);
 80016a0:	2000      	movs	r0, #0
 80016a2:	f000 fa67 	bl	8001b74 <eeprom_read>
 80016a6:	4603      	mov	r3, r0
 80016a8:	461a      	mov	r2, r3
 80016aa:	4b10      	ldr	r3, [pc, #64]	@ (80016ec <parameter_init+0x6c>)
 80016ac:	70da      	strb	r2, [r3, #3]
		launcher.type = eeprom_read(0x01);
 80016ae:	2001      	movs	r0, #1
 80016b0:	f000 fa60 	bl	8001b74 <eeprom_read>
 80016b4:	4603      	mov	r3, r0
 80016b6:	461a      	mov	r2, r3
 80016b8:	4b0c      	ldr	r3, [pc, #48]	@ (80016ec <parameter_init+0x6c>)
 80016ba:	711a      	strb	r2, [r3, #4]
		launcher.serialNumber[0] = eeprom_read(0x02);
 80016bc:	2002      	movs	r0, #2
 80016be:	f000 fa59 	bl	8001b74 <eeprom_read>
 80016c2:	4603      	mov	r3, r0
 80016c4:	461a      	mov	r2, r3
 80016c6:	4b09      	ldr	r3, [pc, #36]	@ (80016ec <parameter_init+0x6c>)
 80016c8:	701a      	strb	r2, [r3, #0]
		launcher.serialNumber[1] = eeprom_read(0x03);
 80016ca:	2003      	movs	r0, #3
 80016cc:	f000 fa52 	bl	8001b74 <eeprom_read>
 80016d0:	4603      	mov	r3, r0
 80016d2:	461a      	mov	r2, r3
 80016d4:	4b05      	ldr	r3, [pc, #20]	@ (80016ec <parameter_init+0x6c>)
 80016d6:	705a      	strb	r2, [r3, #1]
	} else {
		printf("\r\n... Configuration NOT found in memory ... \r\n");
	}
}
 80016d8:	e002      	b.n	80016e0 <parameter_init+0x60>
		printf("\r\n... Configuration NOT found in memory ... \r\n");
 80016da:	4805      	ldr	r0, [pc, #20]	@ (80016f0 <parameter_init+0x70>)
 80016dc:	f005 f9ba 	bl	8006a54 <puts>
}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	2000000c 	.word	0x2000000c
 80016e8:	080084c8 	.word	0x080084c8
 80016ec:	20000000 	.word	0x20000000
 80016f0:	080084f4 	.word	0x080084f4

080016f4 <HAL_UART_RxCpltCallback>:

/* UART Receive complete interrupt callback, set rxStatus flag for new char received
 * re-enable uart rx interrupt */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
	// check that uart1 triggered the interrupt callback
	if(huart->Instance == USART1){
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a09      	ldr	r2, [pc, #36]	@ (8001728 <HAL_UART_RxCpltCallback+0x34>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d10b      	bne.n	800171e <HAL_UART_RxCpltCallback+0x2a>
		rxChar = rxBuffer[0]; // store the only element in buffer to a char for easier variable handling
 8001706:	4b09      	ldr	r3, [pc, #36]	@ (800172c <HAL_UART_RxCpltCallback+0x38>)
 8001708:	781a      	ldrb	r2, [r3, #0]
 800170a:	4b09      	ldr	r3, [pc, #36]	@ (8001730 <HAL_UART_RxCpltCallback+0x3c>)
 800170c:	701a      	strb	r2, [r3, #0]
		rxStatus = active; // set flag to enter main menu char processing
 800170e:	4b09      	ldr	r3, [pc, #36]	@ (8001734 <HAL_UART_RxCpltCallback+0x40>)
 8001710:	2201      	movs	r2, #1
 8001712:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, (uint8_t *) rxBuffer, 1); // reactivate rx interrupt
 8001714:	2201      	movs	r2, #1
 8001716:	4905      	ldr	r1, [pc, #20]	@ (800172c <HAL_UART_RxCpltCallback+0x38>)
 8001718:	4807      	ldr	r0, [pc, #28]	@ (8001738 <HAL_UART_RxCpltCallback+0x44>)
 800171a:	f004 fae2 	bl	8005ce2 <HAL_UART_Receive_IT>
	}
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40013800 	.word	0x40013800
 800172c:	20000150 	.word	0x20000150
 8001730:	20000151 	.word	0x20000151
 8001734:	2000014e 	.word	0x2000014e
 8001738:	200001a0 	.word	0x200001a0

0800173c <unground_xbt>:

/* Disconnect the XBT ABC pins from ground
 * 3 relays can be used as ground when SET, or ground when RESET based on jumpers JP6-7-8
 * If 1-2 pads are soldered, SET relays to unground, RESET relays to ground
 * Note: reset signal 3 is tied to other relays: CAL cont & CAL res */
void unground_xbt(void){
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
	if(relayLock == reFree){
 8001740:	4b08      	ldr	r3, [pc, #32]	@ (8001764 <unground_xbt+0x28>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d10b      	bne.n	8001760 <unground_xbt+0x24>
		relayLock = reLocked;
 8001748:	4b06      	ldr	r3, [pc, #24]	@ (8001764 <unground_xbt+0x28>)
 800174a:	2201      	movs	r2, #1
 800174c:	701a      	strb	r2, [r3, #0]
		drive_relay(RELAY_RESET_3_GPIO_Port, RELAY_RESET_3_Pin, 10); // RESET relay k9, k10, k11, k12
 800174e:	220a      	movs	r2, #10
 8001750:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001754:	4804      	ldr	r0, [pc, #16]	@ (8001768 <unground_xbt+0x2c>)
 8001756:	f000 f925 	bl	80019a4 <drive_relay>
		relayLock = reFree;
 800175a:	4b02      	ldr	r3, [pc, #8]	@ (8001764 <unground_xbt+0x28>)
 800175c:	2200      	movs	r2, #0
 800175e:	701a      	strb	r2, [r3, #0]
	}
}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}
 8001764:	2000014d 	.word	0x2000014d
 8001768:	40011000 	.word	0x40011000

0800176c <calibration_resistor>:

void calibration_resistor(void){
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
	if(relayLock == reFree){
 8001770:	4b08      	ldr	r3, [pc, #32]	@ (8001794 <calibration_resistor+0x28>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d10b      	bne.n	8001790 <calibration_resistor+0x24>
		relayLock = reLocked;
 8001778:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <calibration_resistor+0x28>)
 800177a:	2201      	movs	r2, #1
 800177c:	701a      	strb	r2, [r3, #0]
		drive_relay(RELAY_K12_CAL_RES_GPIO_Port, RELAY_K12_CAL_RES_Pin, 10); // SET relay k12
 800177e:	220a      	movs	r2, #10
 8001780:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001784:	4804      	ldr	r0, [pc, #16]	@ (8001798 <calibration_resistor+0x2c>)
 8001786:	f000 f90d 	bl	80019a4 <drive_relay>
		relayLock = reFree;
 800178a:	4b02      	ldr	r3, [pc, #8]	@ (8001794 <calibration_resistor+0x28>)
 800178c:	2200      	movs	r2, #0
 800178e:	701a      	strb	r2, [r3, #0]
	}
}
 8001790:	bf00      	nop
 8001792:	bd80      	pop	{r7, pc}
 8001794:	2000014d 	.word	0x2000014d
 8001798:	40010800 	.word	0x40010800

0800179c <calibrate_on>:

void calibrate_on(void){
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
	if(relayLock == reFree){
 80017a0:	4b08      	ldr	r3, [pc, #32]	@ (80017c4 <calibrate_on+0x28>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d10b      	bne.n	80017c0 <calibrate_on+0x24>
		relayLock = reLocked;
 80017a8:	4b06      	ldr	r3, [pc, #24]	@ (80017c4 <calibrate_on+0x28>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	701a      	strb	r2, [r3, #0]
		drive_relay(RELAY_K11_CAL_CONT_GPIO_Port, RELAY_K11_CAL_CONT_Pin, 10); // SET relay k11
 80017ae:	220a      	movs	r2, #10
 80017b0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80017b4:	4804      	ldr	r0, [pc, #16]	@ (80017c8 <calibrate_on+0x2c>)
 80017b6:	f000 f8f5 	bl	80019a4 <drive_relay>
		relayLock = reFree;
 80017ba:	4b02      	ldr	r3, [pc, #8]	@ (80017c4 <calibrate_on+0x28>)
 80017bc:	2200      	movs	r2, #0
 80017be:	701a      	strb	r2, [r3, #0]
	}
}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	2000014d 	.word	0x2000014d
 80017c8:	40010800 	.word	0x40010800

080017cc <reset_relay>:

void reset_relay(void){
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
	if(relayLock == reFree){
 80017d0:	4b11      	ldr	r3, [pc, #68]	@ (8001818 <reset_relay+0x4c>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d11d      	bne.n	8001814 <reset_relay+0x48>
		relayLock = reLocked;
 80017d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001818 <reset_relay+0x4c>)
 80017da:	2201      	movs	r2, #1
 80017dc:	701a      	strb	r2, [r3, #0]
		drive_relay(RELAY_RESET_1_GPIO_Port, RELAY_RESET_1_Pin, 10); // RESET relay k1, k2, k3, k4, SSR1, SSR2, SSR3, SSR4
 80017de:	220a      	movs	r2, #10
 80017e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017e4:	480d      	ldr	r0, [pc, #52]	@ (800181c <reset_relay+0x50>)
 80017e6:	f000 f8dd 	bl	80019a4 <drive_relay>
		HAL_Delay(10);
 80017ea:	200a      	movs	r0, #10
 80017ec:	f000 fe36 	bl	800245c <HAL_Delay>
		drive_relay(RELAY_RESET_2_GPIO_Port, RELAY_RESET_2_Pin, 10); // RESET relay k5, k6, k7, k8, SSR5, SSR6, SSR7, SSR8
 80017f0:	220a      	movs	r2, #10
 80017f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017f6:	480a      	ldr	r0, [pc, #40]	@ (8001820 <reset_relay+0x54>)
 80017f8:	f000 f8d4 	bl	80019a4 <drive_relay>
		HAL_Delay(10);
 80017fc:	200a      	movs	r0, #10
 80017fe:	f000 fe2d 	bl	800245c <HAL_Delay>
		drive_relay(RELAY_RESET_3_GPIO_Port, RELAY_RESET_3_Pin, 10); // RESET relay k9, k10, k11, k12 - This grounds ABC
 8001802:	220a      	movs	r2, #10
 8001804:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001808:	4805      	ldr	r0, [pc, #20]	@ (8001820 <reset_relay+0x54>)
 800180a:	f000 f8cb 	bl	80019a4 <drive_relay>
		relayLock = reFree;
 800180e:	4b02      	ldr	r3, [pc, #8]	@ (8001818 <reset_relay+0x4c>)
 8001810:	2200      	movs	r2, #0
 8001812:	701a      	strb	r2, [r3, #0]
	}
}
 8001814:	bf00      	nop
 8001816:	bd80      	pop	{r7, pc}
 8001818:	2000014d 	.word	0x2000014d
 800181c:	40010c00 	.word	0x40010c00
 8001820:	40011000 	.word	0x40011000

08001824 <connect_xbt_pin>:

void connect_xbt_pin(uint8_t xbtNum){
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	71fb      	strb	r3, [r7, #7]

	if(relayLock == reFree){
 800182e:	4b47      	ldr	r3, [pc, #284]	@ (800194c <connect_xbt_pin+0x128>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	f040 8085 	bne.w	8001942 <connect_xbt_pin+0x11e>
		relayLock = reLocked;
 8001838:	4b44      	ldr	r3, [pc, #272]	@ (800194c <connect_xbt_pin+0x128>)
 800183a:	2201      	movs	r2, #1
 800183c:	701a      	strb	r2, [r3, #0]

		switch (xbtNum){
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	3b01      	subs	r3, #1
 8001842:	2b07      	cmp	r3, #7
 8001844:	d874      	bhi.n	8001930 <connect_xbt_pin+0x10c>
 8001846:	a201      	add	r2, pc, #4	@ (adr r2, 800184c <connect_xbt_pin+0x28>)
 8001848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800184c:	0800186d 	.word	0x0800186d
 8001850:	08001887 	.word	0x08001887
 8001854:	080018a1 	.word	0x080018a1
 8001858:	080018b9 	.word	0x080018b9
 800185c:	080018d1 	.word	0x080018d1
 8001860:	080018e7 	.word	0x080018e7
 8001864:	080018fd 	.word	0x080018fd
 8001868:	08001917 	.word	0x08001917
		case 1:
			drive_relay(RELAY_K1_GPIO_Port, RELAY_K1_Pin, 10); // SET relay k1
 800186c:	220a      	movs	r2, #10
 800186e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001872:	4837      	ldr	r0, [pc, #220]	@ (8001950 <connect_xbt_pin+0x12c>)
 8001874:	f000 f896 	bl	80019a4 <drive_relay>
			drive_relay(SSR_1_GPIO_Port, SSR_1_Pin, 1); // SET SSR1
 8001878:	2201      	movs	r2, #1
 800187a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800187e:	4834      	ldr	r0, [pc, #208]	@ (8001950 <connect_xbt_pin+0x12c>)
 8001880:	f000 f890 	bl	80019a4 <drive_relay>
			break;
 8001884:	e05a      	b.n	800193c <connect_xbt_pin+0x118>
		case 2:
			drive_relay(RELAY_K2_GPIO_Port, RELAY_K2_Pin, 10); // SET relay k2
 8001886:	220a      	movs	r2, #10
 8001888:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800188c:	4830      	ldr	r0, [pc, #192]	@ (8001950 <connect_xbt_pin+0x12c>)
 800188e:	f000 f889 	bl	80019a4 <drive_relay>
			drive_relay(SSR_2_GPIO_Port, SSR_2_Pin, 1); // SET SSR2
 8001892:	2201      	movs	r2, #1
 8001894:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001898:	482d      	ldr	r0, [pc, #180]	@ (8001950 <connect_xbt_pin+0x12c>)
 800189a:	f000 f883 	bl	80019a4 <drive_relay>
			break;
 800189e:	e04d      	b.n	800193c <connect_xbt_pin+0x118>
		case 3:
			drive_relay(RELAY_K3_GPIO_Port, RELAY_K3_Pin, 10); // SET relay k3
 80018a0:	220a      	movs	r2, #10
 80018a2:	2104      	movs	r1, #4
 80018a4:	482b      	ldr	r0, [pc, #172]	@ (8001954 <connect_xbt_pin+0x130>)
 80018a6:	f000 f87d 	bl	80019a4 <drive_relay>
			drive_relay(SSR_3_GPIO_Port, SSR_3_Pin, 1); // SET SSR3
 80018aa:	2201      	movs	r2, #1
 80018ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018b0:	4827      	ldr	r0, [pc, #156]	@ (8001950 <connect_xbt_pin+0x12c>)
 80018b2:	f000 f877 	bl	80019a4 <drive_relay>
			break;
 80018b6:	e041      	b.n	800193c <connect_xbt_pin+0x118>
		case 4:
			drive_relay(RELAY_K4_GPIO_Port, RELAY_K4_Pin, 10); // SET relay k4
 80018b8:	220a      	movs	r2, #10
 80018ba:	2108      	movs	r1, #8
 80018bc:	4826      	ldr	r0, [pc, #152]	@ (8001958 <connect_xbt_pin+0x134>)
 80018be:	f000 f871 	bl	80019a4 <drive_relay>
			drive_relay(SSR_4_GPIO_Port, SSR_4_Pin, 1); // SET SSR4
 80018c2:	2201      	movs	r2, #1
 80018c4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018c8:	4823      	ldr	r0, [pc, #140]	@ (8001958 <connect_xbt_pin+0x134>)
 80018ca:	f000 f86b 	bl	80019a4 <drive_relay>
			break;
 80018ce:	e035      	b.n	800193c <connect_xbt_pin+0x118>
		case 5:
			drive_relay(RELAY_K5_GPIO_Port, RELAY_K5_Pin, 10); // SET relay k5
 80018d0:	220a      	movs	r2, #10
 80018d2:	2110      	movs	r1, #16
 80018d4:	4820      	ldr	r0, [pc, #128]	@ (8001958 <connect_xbt_pin+0x134>)
 80018d6:	f000 f865 	bl	80019a4 <drive_relay>
			drive_relay(SSR_5_GPIO_Port, SSR_5_Pin, 1); // SET SSR5
 80018da:	2201      	movs	r2, #1
 80018dc:	2180      	movs	r1, #128	@ 0x80
 80018de:	481c      	ldr	r0, [pc, #112]	@ (8001950 <connect_xbt_pin+0x12c>)
 80018e0:	f000 f860 	bl	80019a4 <drive_relay>
			break;
 80018e4:	e02a      	b.n	800193c <connect_xbt_pin+0x118>
		case 6:
			drive_relay(RELAY_K6_GPIO_Port, RELAY_K6_Pin, 10); // SET relay k6
 80018e6:	220a      	movs	r2, #10
 80018e8:	2120      	movs	r1, #32
 80018ea:	481b      	ldr	r0, [pc, #108]	@ (8001958 <connect_xbt_pin+0x134>)
 80018ec:	f000 f85a 	bl	80019a4 <drive_relay>
			drive_relay(SSR_6_GPIO_Port, SSR_6_Pin, 1); // SET SSR6
 80018f0:	2201      	movs	r2, #1
 80018f2:	2140      	movs	r1, #64	@ 0x40
 80018f4:	4816      	ldr	r0, [pc, #88]	@ (8001950 <connect_xbt_pin+0x12c>)
 80018f6:	f000 f855 	bl	80019a4 <drive_relay>
			break;
 80018fa:	e01f      	b.n	800193c <connect_xbt_pin+0x118>
		case 7:
			drive_relay(RELAY_K7_GPIO_Port, RELAY_K7_Pin, 10); // SET relay k7
 80018fc:	220a      	movs	r2, #10
 80018fe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001902:	4813      	ldr	r0, [pc, #76]	@ (8001950 <connect_xbt_pin+0x12c>)
 8001904:	f000 f84e 	bl	80019a4 <drive_relay>
			drive_relay(SSR_7_GPIO_Port, SSR_7_Pin, 1); // SET SSR7
 8001908:	2201      	movs	r2, #1
 800190a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800190e:	4812      	ldr	r0, [pc, #72]	@ (8001958 <connect_xbt_pin+0x134>)
 8001910:	f000 f848 	bl	80019a4 <drive_relay>
			break;
 8001914:	e012      	b.n	800193c <connect_xbt_pin+0x118>
		case 8:
			drive_relay(RELAY_K8_GPIO_Port, RELAY_K8_Pin, 10); // SET relay k8
 8001916:	220a      	movs	r2, #10
 8001918:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800191c:	480f      	ldr	r0, [pc, #60]	@ (800195c <connect_xbt_pin+0x138>)
 800191e:	f000 f841 	bl	80019a4 <drive_relay>
			drive_relay(SSR_8_GPIO_Port, SSR_8_Pin, 1); // SET SSR8
 8001922:	2201      	movs	r2, #1
 8001924:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001928:	480b      	ldr	r0, [pc, #44]	@ (8001958 <connect_xbt_pin+0x134>)
 800192a:	f000 f83b 	bl	80019a4 <drive_relay>
			break;
 800192e:	e005      	b.n	800193c <connect_xbt_pin+0x118>
		default:
			printf("\r\n* ERROR: XBT %i relay not found *\r\n", xbtNum);
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	4619      	mov	r1, r3
 8001934:	480a      	ldr	r0, [pc, #40]	@ (8001960 <connect_xbt_pin+0x13c>)
 8001936:	f005 f825 	bl	8006984 <iprintf>
			break;
 800193a:	bf00      	nop
		}
		relayLock = reFree;
 800193c:	4b03      	ldr	r3, [pc, #12]	@ (800194c <connect_xbt_pin+0x128>)
 800193e:	2200      	movs	r2, #0
 8001940:	701a      	strb	r2, [r3, #0]
	}
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	2000014d 	.word	0x2000014d
 8001950:	40011000 	.word	0x40011000
 8001954:	40011400 	.word	0x40011400
 8001958:	40010c00 	.word	0x40010c00
 800195c:	40010800 	.word	0x40010800
 8001960:	08008524 	.word	0x08008524

08001964 <relay_init>:

void relay_init(void){
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
	drive_relay(RELAY_RESET_1_GPIO_Port, RELAY_RESET_1_Pin, 10);  // RESET relay k1, k2, k3, k4, SSR1, SSR2, SSR3, SSR4
 8001968:	220a      	movs	r2, #10
 800196a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800196e:	480b      	ldr	r0, [pc, #44]	@ (800199c <relay_init+0x38>)
 8001970:	f000 f818 	bl	80019a4 <drive_relay>
	HAL_Delay(10);
 8001974:	200a      	movs	r0, #10
 8001976:	f000 fd71 	bl	800245c <HAL_Delay>
	drive_relay(RELAY_RESET_2_GPIO_Port, RELAY_RESET_2_Pin, 10); // RESET relay k5, k6, k7, k8, SSR5, SSR6, SSR7, SSR8
 800197a:	220a      	movs	r2, #10
 800197c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001980:	4807      	ldr	r0, [pc, #28]	@ (80019a0 <relay_init+0x3c>)
 8001982:	f000 f80f 	bl	80019a4 <drive_relay>
	HAL_Delay(10);
 8001986:	200a      	movs	r0, #10
 8001988:	f000 fd68 	bl	800245c <HAL_Delay>
	drive_relay(RELAY_RESET_3_GPIO_Port, RELAY_RESET_3_Pin, 10); // RESET relay k9, k10, k11, k12 (GND, calibration and continuity circuit)
 800198c:	220a      	movs	r2, #10
 800198e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001992:	4803      	ldr	r0, [pc, #12]	@ (80019a0 <relay_init+0x3c>)
 8001994:	f000 f806 	bl	80019a4 <drive_relay>
}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40010c00 	.word	0x40010c00
 80019a0:	40011000 	.word	0x40011000

080019a4 <drive_relay>:


void drive_relay(GPIO_TypeDef * relayPort, uint16_t relayPin, uint8_t onTime){
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	460b      	mov	r3, r1
 80019ae:	807b      	strh	r3, [r7, #2]
 80019b0:	4613      	mov	r3, r2
 80019b2:	707b      	strb	r3, [r7, #1]
	// SET relay k
	HAL_GPIO_WritePin(relayPort, relayPin, SET); // set
 80019b4:	887b      	ldrh	r3, [r7, #2]
 80019b6:	2201      	movs	r2, #1
 80019b8:	4619      	mov	r1, r3
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f001 fd0e 	bl	80033dc <HAL_GPIO_WritePin>
	HAL_Delay(onTime); // time coil is driven in ms
 80019c0:	787b      	ldrb	r3, [r7, #1]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f000 fd4a 	bl	800245c <HAL_Delay>
	HAL_GPIO_WritePin(relayPort, relayPin, RESET); // release
 80019c8:	887b      	ldrh	r3, [r7, #2]
 80019ca:	2200      	movs	r2, #0
 80019cc:	4619      	mov	r1, r3
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f001 fd04 	bl	80033dc <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80019d4:	2002      	movs	r0, #2
 80019d6:	f000 fd41 	bl	800245c <HAL_Delay>
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <extend_pin>:
/*********************** MOTOR CONTROL FUNCTIONS ***********************/

// ALV2 had a sequence with 4 delays of 8 ms, repeated in 300 steps = 4 * 8 ms * 300 = 7200 ms

/* Extend pin wrapper */
void extend_pin(uint8_t xbtNum){
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b082      	sub	sp, #8
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	4603      	mov	r3, r0
 80019ea:	71fb      	strb	r3, [r7, #7]
	if (MOTOR_WIRING == 0){ // select spin direction based on wiring
		motor_select(xbtNum, CW);
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	2101      	movs	r1, #1
 80019f0:	4618      	mov	r0, r3
 80019f2:	f000 f813 	bl	8001a1c <motor_select>
	} else {
		motor_select(xbtNum, CCW);
	}
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <retract_pin>:

/* Retract pin wrapper */
void retract_pin(uint8_t xbtNum){
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b082      	sub	sp, #8
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	4603      	mov	r3, r0
 8001a06:	71fb      	strb	r3, [r7, #7]
	if (MOTOR_WIRING == 0){ // select spin direction based on wiring
		motor_select(xbtNum, CCW);
 8001a08:	79fb      	ldrb	r3, [r7, #7]
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f000 f805 	bl	8001a1c <motor_select>
	} else {
		motor_select(xbtNum, CW);
	}
}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
	...

08001a1c <motor_select>:

/* Motor driver selector
 * direction to retract/extend may be different based on wiring
 * Parameters: XBT number, direction {CW,CCW} */
void motor_select(uint8_t xbtNum, motorDir_t dir){
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	460a      	mov	r2, r1
 8001a26:	71fb      	strb	r3, [r7, #7]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	71bb      	strb	r3, [r7, #6]
	if(motorLock == mFree){
 8001a2c:	4b35      	ldr	r3, [pc, #212]	@ (8001b04 <motor_select+0xe8>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d162      	bne.n	8001afa <motor_select+0xde>
		motorLock = mLocked;
 8001a34:	4b33      	ldr	r3, [pc, #204]	@ (8001b04 <motor_select+0xe8>)
 8001a36:	2201      	movs	r2, #1
 8001a38:	701a      	strb	r2, [r3, #0]
		switch (xbtNum){
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	2b07      	cmp	r3, #7
 8001a40:	d852      	bhi.n	8001ae8 <motor_select+0xcc>
 8001a42:	a201      	add	r2, pc, #4	@ (adr r2, 8001a48 <motor_select+0x2c>)
 8001a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a48:	08001a69 	.word	0x08001a69
 8001a4c:	08001a79 	.word	0x08001a79
 8001a50:	08001a89 	.word	0x08001a89
 8001a54:	08001a99 	.word	0x08001a99
 8001a58:	08001aa9 	.word	0x08001aa9
 8001a5c:	08001ab9 	.word	0x08001ab9
 8001a60:	08001ac9 	.word	0x08001ac9
 8001a64:	08001ad9 	.word	0x08001ad9
		case 1:
			drive_motor(ENABLE_M1_GPIO_Port, ENABLE_M1_Pin, dir, MOTOR_RUNTIME);
 8001a68:	79ba      	ldrb	r2, [r7, #6]
 8001a6a:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001a6e:	2104      	movs	r1, #4
 8001a70:	4825      	ldr	r0, [pc, #148]	@ (8001b08 <motor_select+0xec>)
 8001a72:	f000 f8e9 	bl	8001c48 <drive_motor>
			break;
 8001a76:	e03d      	b.n	8001af4 <motor_select+0xd8>
		case 2:
			drive_motor(ENABLE_M2_GPIO_Port, ENABLE_M2_Pin, dir, MOTOR_RUNTIME);
 8001a78:	79ba      	ldrb	r2, [r7, #6]
 8001a7a:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001a7e:	2108      	movs	r1, #8
 8001a80:	4821      	ldr	r0, [pc, #132]	@ (8001b08 <motor_select+0xec>)
 8001a82:	f000 f8e1 	bl	8001c48 <drive_motor>
			break;
 8001a86:	e035      	b.n	8001af4 <motor_select+0xd8>
		case 3:
			drive_motor(ENABLE_M3_GPIO_Port, ENABLE_M3_Pin, dir, MOTOR_RUNTIME);
 8001a88:	79ba      	ldrb	r2, [r7, #6]
 8001a8a:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001a8e:	2101      	movs	r1, #1
 8001a90:	481e      	ldr	r0, [pc, #120]	@ (8001b0c <motor_select+0xf0>)
 8001a92:	f000 f8d9 	bl	8001c48 <drive_motor>
			break;
 8001a96:	e02d      	b.n	8001af4 <motor_select+0xd8>
		case 4:
			drive_motor(ENABLE_M4_GPIO_Port, ENABLE_M4_Pin, dir, MOTOR_RUNTIME);
 8001a98:	79ba      	ldrb	r2, [r7, #6]
 8001a9a:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001a9e:	2102      	movs	r1, #2
 8001aa0:	481a      	ldr	r0, [pc, #104]	@ (8001b0c <motor_select+0xf0>)
 8001aa2:	f000 f8d1 	bl	8001c48 <drive_motor>
			break;
 8001aa6:	e025      	b.n	8001af4 <motor_select+0xd8>
		case 5:
			drive_motor(ENABLE_M5_GPIO_Port, ENABLE_M5_Pin, dir, MOTOR_RUNTIME);
 8001aa8:	79ba      	ldrb	r2, [r7, #6]
 8001aaa:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001aae:	2110      	movs	r1, #16
 8001ab0:	4816      	ldr	r0, [pc, #88]	@ (8001b0c <motor_select+0xf0>)
 8001ab2:	f000 f8c9 	bl	8001c48 <drive_motor>
			break;
 8001ab6:	e01d      	b.n	8001af4 <motor_select+0xd8>
		case 6:
			drive_motor(ENABLE_M6_GPIO_Port, ENABLE_M6_Pin, dir, MOTOR_RUNTIME);
 8001ab8:	79ba      	ldrb	r2, [r7, #6]
 8001aba:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001abe:	2120      	movs	r1, #32
 8001ac0:	4812      	ldr	r0, [pc, #72]	@ (8001b0c <motor_select+0xf0>)
 8001ac2:	f000 f8c1 	bl	8001c48 <drive_motor>
			break;
 8001ac6:	e015      	b.n	8001af4 <motor_select+0xd8>
		case 7:
			drive_motor(ENABLE_M7_GPIO_Port, ENABLE_M7_Pin, dir, MOTOR_RUNTIME);
 8001ac8:	79ba      	ldrb	r2, [r7, #6]
 8001aca:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001ace:	2140      	movs	r1, #64	@ 0x40
 8001ad0:	480e      	ldr	r0, [pc, #56]	@ (8001b0c <motor_select+0xf0>)
 8001ad2:	f000 f8b9 	bl	8001c48 <drive_motor>
			break;
 8001ad6:	e00d      	b.n	8001af4 <motor_select+0xd8>
		case 8:
			drive_motor(ENABLE_M8_GPIO_Port, ENABLE_M8_Pin, dir, MOTOR_RUNTIME);
 8001ad8:	79ba      	ldrb	r2, [r7, #6]
 8001ada:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001ade:	2180      	movs	r1, #128	@ 0x80
 8001ae0:	480a      	ldr	r0, [pc, #40]	@ (8001b0c <motor_select+0xf0>)
 8001ae2:	f000 f8b1 	bl	8001c48 <drive_motor>
			break;
 8001ae6:	e005      	b.n	8001af4 <motor_select+0xd8>
		default:
			printf("\r\n* ERROR: XBT %i motor not found *\r\n", xbtNum);
 8001ae8:	79fb      	ldrb	r3, [r7, #7]
 8001aea:	4619      	mov	r1, r3
 8001aec:	4808      	ldr	r0, [pc, #32]	@ (8001b10 <motor_select+0xf4>)
 8001aee:	f004 ff49 	bl	8006984 <iprintf>
			break;
 8001af2:	bf00      	nop
		}
		motorLock = mFree;
 8001af4:	4b03      	ldr	r3, [pc, #12]	@ (8001b04 <motor_select+0xe8>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	701a      	strb	r2, [r3, #0]
	}
}
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	2000014c 	.word	0x2000014c
 8001b08:	40011000 	.word	0x40011000
 8001b0c:	40010800 	.word	0x40010800
 8001b10:	0800854c 	.word	0x0800854c

08001b14 <eeprom_write>:
/*********************** EEPROM FUNCTIONS ***********************/
/* Model: Microchip AT24XX01
 * Max freq 1 MHz, 1 Kbit memory (1024 bit), 128 x 8-bit block, 5 ms page write,
 * 8-Byte write pages, fixed device address 1010-xxxRW, 128 bytes memory range {00-7F} */

void eeprom_write(uint8_t memoryAddress, uint8_t dataByte){
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af02      	add	r7, sp, #8
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	460a      	mov	r2, r1
 8001b1e:	71fb      	strb	r3, [r7, #7]
 8001b20:	4613      	mov	r3, r2
 8001b22:	71bb      	strb	r3, [r7, #6]
	uint8_t txBuffer[2] = {memoryAddress, dataByte};
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	733b      	strb	r3, [r7, #12]
 8001b28:	79bb      	ldrb	r3, [r7, #6]
 8001b2a:	737b      	strb	r3, [r7, #13]
	if(memoryAddress <= eeprom.MAX_MEM_ADDRESS ){
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	4b0d      	ldr	r3, [pc, #52]	@ (8001b68 <eeprom_write+0x54>)
 8001b32:	885b      	ldrh	r3, [r3, #2]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d80d      	bhi.n	8001b54 <eeprom_write+0x40>
		HAL_I2C_Master_Transmit(&hi2c1, EEPROM_BUS_ADDRESS , txBuffer, 2, HAL_MAX_DELAY); // send word address, value
 8001b38:	f107 020c 	add.w	r2, r7, #12
 8001b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	2302      	movs	r3, #2
 8001b44:	21a0      	movs	r1, #160	@ 0xa0
 8001b46:	4809      	ldr	r0, [pc, #36]	@ (8001b6c <eeprom_write+0x58>)
 8001b48:	f001 fda4 	bl	8003694 <HAL_I2C_Master_Transmit>
		HAL_Delay(10); // wait for data to be written
 8001b4c:	200a      	movs	r0, #10
 8001b4e:	f000 fc85 	bl	800245c <HAL_Delay>
	} else {
		printf("* ERROR: memory address %x exceeded max *\r\n", memoryAddress);
	}
}
 8001b52:	e004      	b.n	8001b5e <eeprom_write+0x4a>
		printf("* ERROR: memory address %x exceeded max *\r\n", memoryAddress);
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	4619      	mov	r1, r3
 8001b58:	4805      	ldr	r0, [pc, #20]	@ (8001b70 <eeprom_write+0x5c>)
 8001b5a:	f004 ff13 	bl	8006984 <iprintf>
}
 8001b5e:	bf00      	nop
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	2000000c 	.word	0x2000000c
 8001b6c:	200000f8 	.word	0x200000f8
 8001b70:	08008574 	.word	0x08008574

08001b74 <eeprom_read>:

uint8_t eeprom_read(uint8_t memoryAddress){
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af02      	add	r7, sp, #8
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	71fb      	strb	r3, [r7, #7]
	uint8_t addressBuffer[1] = {memoryAddress};
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	733b      	strb	r3, [r7, #12]
	uint8_t rxBuffer[1] = {0};
 8001b82:	2300      	movs	r3, #0
 8001b84:	723b      	strb	r3, [r7, #8]
	if(memoryAddress <= eeprom.MAX_MEM_ADDRESS ){
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	b29a      	uxth	r2, r3
 8001b8a:	4b14      	ldr	r3, [pc, #80]	@ (8001bdc <eeprom_read+0x68>)
 8001b8c:	885b      	ldrh	r3, [r3, #2]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d81a      	bhi.n	8001bc8 <eeprom_read+0x54>
		HAL_I2C_Master_Transmit(&hi2c1, EEPROM_BUS_ADDRESS , addressBuffer, 1, HAL_MAX_DELAY); // dummy write to set pointer to desired memory address
 8001b92:	f107 020c 	add.w	r2, r7, #12
 8001b96:	f04f 33ff 	mov.w	r3, #4294967295
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	21a0      	movs	r1, #160	@ 0xa0
 8001ba0:	480f      	ldr	r0, [pc, #60]	@ (8001be0 <eeprom_read+0x6c>)
 8001ba2:	f001 fd77 	bl	8003694 <HAL_I2C_Master_Transmit>
		HAL_Delay(10);
 8001ba6:	200a      	movs	r0, #10
 8001ba8:	f000 fc58 	bl	800245c <HAL_Delay>
		HAL_I2C_Master_Receive(&hi2c1, EEPROM_BUS_ADDRESS, rxBuffer, 1, HAL_MAX_DELAY); // send command to read 1 byte at current memory address pointer
 8001bac:	f107 0208 	add.w	r2, r7, #8
 8001bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb4:	9300      	str	r3, [sp, #0]
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	21a0      	movs	r1, #160	@ 0xa0
 8001bba:	4809      	ldr	r0, [pc, #36]	@ (8001be0 <eeprom_read+0x6c>)
 8001bbc:	f001 fe68 	bl	8003890 <HAL_I2C_Master_Receive>
		HAL_Delay(10);
 8001bc0:	200a      	movs	r0, #10
 8001bc2:	f000 fc4b 	bl	800245c <HAL_Delay>
 8001bc6:	e004      	b.n	8001bd2 <eeprom_read+0x5e>
	} else {
		printf("* ERROR: memory address %x exceeded max *\r\n", memoryAddress);
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4805      	ldr	r0, [pc, #20]	@ (8001be4 <eeprom_read+0x70>)
 8001bce:	f004 fed9 	bl	8006984 <iprintf>
	}
	return ((uint8_t) rxBuffer[0]);
 8001bd2:	7a3b      	ldrb	r3, [r7, #8]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	2000000c 	.word	0x2000000c
 8001be0:	200000f8 	.word	0x200000f8
 8001be4:	08008574 	.word	0x08008574

08001be8 <motor_init>:
		return 1;
	}
}


void motor_init(void){
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(ENABLE_M1_GPIO_Port, ENABLE_M1_Pin, RESET); // start disabled
 8001bec:	2200      	movs	r2, #0
 8001bee:	2104      	movs	r1, #4
 8001bf0:	4813      	ldr	r0, [pc, #76]	@ (8001c40 <motor_init+0x58>)
 8001bf2:	f001 fbf3 	bl	80033dc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M2_GPIO_Port, ENABLE_M2_Pin, RESET); // start disabled
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2108      	movs	r1, #8
 8001bfa:	4811      	ldr	r0, [pc, #68]	@ (8001c40 <motor_init+0x58>)
 8001bfc:	f001 fbee 	bl	80033dc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M3_GPIO_Port, ENABLE_M3_Pin, RESET); // start disabled
 8001c00:	2200      	movs	r2, #0
 8001c02:	2101      	movs	r1, #1
 8001c04:	480f      	ldr	r0, [pc, #60]	@ (8001c44 <motor_init+0x5c>)
 8001c06:	f001 fbe9 	bl	80033dc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M4_GPIO_Port, ENABLE_M4_Pin, RESET); // start disabled
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2102      	movs	r1, #2
 8001c0e:	480d      	ldr	r0, [pc, #52]	@ (8001c44 <motor_init+0x5c>)
 8001c10:	f001 fbe4 	bl	80033dc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M5_GPIO_Port, ENABLE_M5_Pin, RESET); // start disabled
 8001c14:	2200      	movs	r2, #0
 8001c16:	2110      	movs	r1, #16
 8001c18:	480a      	ldr	r0, [pc, #40]	@ (8001c44 <motor_init+0x5c>)
 8001c1a:	f001 fbdf 	bl	80033dc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M6_GPIO_Port, ENABLE_M6_Pin, RESET); // start disabled
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2120      	movs	r1, #32
 8001c22:	4808      	ldr	r0, [pc, #32]	@ (8001c44 <motor_init+0x5c>)
 8001c24:	f001 fbda 	bl	80033dc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M7_GPIO_Port, ENABLE_M7_Pin, RESET); // start disabled
 8001c28:	2200      	movs	r2, #0
 8001c2a:	2140      	movs	r1, #64	@ 0x40
 8001c2c:	4805      	ldr	r0, [pc, #20]	@ (8001c44 <motor_init+0x5c>)
 8001c2e:	f001 fbd5 	bl	80033dc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M8_GPIO_Port, ENABLE_M8_Pin, RESET); // start disabled
 8001c32:	2200      	movs	r2, #0
 8001c34:	2180      	movs	r1, #128	@ 0x80
 8001c36:	4803      	ldr	r0, [pc, #12]	@ (8001c44 <motor_init+0x5c>)
 8001c38:	f001 fbd0 	bl	80033dc <HAL_GPIO_WritePin>
}
 8001c3c:	bf00      	nop
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40011000 	.word	0x40011000
 8001c44:	40010800 	.word	0x40010800

08001c48 <drive_motor>:

void drive_motor(GPIO_TypeDef * motorPort, uint16_t motorPin, motorDir_t motorDirection, uint32_t runtime ){
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b096      	sub	sp, #88	@ 0x58
 8001c4c:	af02      	add	r7, sp, #8
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	607b      	str	r3, [r7, #4]
 8001c52:	460b      	mov	r3, r1
 8001c54:	817b      	strh	r3, [r7, #10]
 8001c56:	4613      	mov	r3, r2
 8001c58:	727b      	strb	r3, [r7, #9]
	uint32_t t0, adcReading = 0;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint16_t motor_i = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
	char adcmsg[50];

	HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_3 ); // Start STEP signal >> counter toggle to toggle every 20/1000 sec = 50hz
 8001c64:	2108      	movs	r1, #8
 8001c66:	4854      	ldr	r0, [pc, #336]	@ (8001db8 <drive_motor+0x170>)
 8001c68:	f003 fa28 	bl	80050bc <HAL_TIM_OC_Start>
	// motor
	HAL_GPIO_WritePin(motorPort, motorPin, RESET); // make sure to disable driver
 8001c6c:	897b      	ldrh	r3, [r7, #10]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	4619      	mov	r1, r3
 8001c72:	68f8      	ldr	r0, [r7, #12]
 8001c74:	f001 fbb2 	bl	80033dc <HAL_GPIO_WritePin>
	HAL_Delay(10); // wait for the motor to stop
 8001c78:	200a      	movs	r0, #10
 8001c7a:	f000 fbef 	bl	800245c <HAL_Delay>
	HAL_GPIO_WritePin(DIR_GPIO_Port,DIR_Pin, motorDirection); // set motor direction
 8001c7e:	7a7b      	ldrb	r3, [r7, #9]
 8001c80:	461a      	mov	r2, r3
 8001c82:	2110      	movs	r1, #16
 8001c84:	484d      	ldr	r0, [pc, #308]	@ (8001dbc <drive_motor+0x174>)
 8001c86:	f001 fba9 	bl	80033dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motorPort, motorPin, SET); // enable driver to run motor
 8001c8a:	897b      	ldrh	r3, [r7, #10]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	4619      	mov	r1, r3
 8001c90:	68f8      	ldr	r0, [r7, #12]
 8001c92:	f001 fba3 	bl	80033dc <HAL_GPIO_WritePin>
	// read current
	// should launch a timer here and stop it after X seconds
	t0 = HAL_GetTick();
 8001c96:	f000 fbd7 	bl	8002448 <HAL_GetTick>
 8001c9a:	6478      	str	r0, [r7, #68]	@ 0x44

	for (uint8_t ci = 1; ci < 20; ci++){
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 8001ca2:	e06d      	b.n	8001d80 <drive_motor+0x138>
		adcReading = 0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		for(uint8_t cj = 0; cj<100; cj++){
 8001ca8:	2300      	movs	r3, #0
 8001caa:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 8001cae:	e018      	b.n	8001ce2 <drive_motor+0x9a>
			HAL_ADC_Start(&hadc2);
 8001cb0:	4843      	ldr	r0, [pc, #268]	@ (8001dc0 <drive_motor+0x178>)
 8001cb2:	f000 fccf 	bl	8002654 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc2, 100);
 8001cb6:	2164      	movs	r1, #100	@ 0x64
 8001cb8:	4841      	ldr	r0, [pc, #260]	@ (8001dc0 <drive_motor+0x178>)
 8001cba:	f000 fda5 	bl	8002808 <HAL_ADC_PollForConversion>
			adcReading += HAL_ADC_GetValue(&hadc2);
 8001cbe:	4840      	ldr	r0, [pc, #256]	@ (8001dc0 <drive_motor+0x178>)
 8001cc0:	f000 fea8 	bl	8002a14 <HAL_ADC_GetValue>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001cc8:	4413      	add	r3, r2
 8001cca:	64fb      	str	r3, [r7, #76]	@ 0x4c
			HAL_ADC_Stop(&hadc2);
 8001ccc:	483c      	ldr	r0, [pc, #240]	@ (8001dc0 <drive_motor+0x178>)
 8001cce:	f000 fd6f 	bl	80027b0 <HAL_ADC_Stop>
			HAL_Delay(1);
 8001cd2:	2001      	movs	r0, #1
 8001cd4:	f000 fbc2 	bl	800245c <HAL_Delay>
		for(uint8_t cj = 0; cj<100; cj++){
 8001cd8:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8001cdc:	3301      	adds	r3, #1
 8001cde:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 8001ce2:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8001ce6:	2b63      	cmp	r3, #99	@ 0x63
 8001ce8:	d9e2      	bls.n	8001cb0 <drive_motor+0x68>
		}
		adcReading = adcReading/100;
 8001cea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001cec:	4a35      	ldr	r2, [pc, #212]	@ (8001dc4 <drive_motor+0x17c>)
 8001cee:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf2:	095b      	lsrs	r3, r3, #5
 8001cf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
		motor_i = (uint16_t) (adcReading * 0.163 + 7.3581); // mA - opAmp G = 50, Rsense = 0.10 ohm
 8001cf6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001cf8:	f7fe fc9e 	bl	8000638 <__aeabi_ui2d>
 8001cfc:	a32a      	add	r3, pc, #168	@ (adr r3, 8001da8 <drive_motor+0x160>)
 8001cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d02:	f7fe fa2d 	bl	8000160 <__aeabi_dmul>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	4610      	mov	r0, r2
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	a328      	add	r3, pc, #160	@ (adr r3, 8001db0 <drive_motor+0x168>)
 8001d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d14:	f7fe fb54 	bl	80003c0 <__adddf3>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	4610      	mov	r0, r2
 8001d1e:	4619      	mov	r1, r3
 8001d20:	f7fe fd04 	bl	800072c <__aeabi_d2uiz>
 8001d24:	4603      	mov	r3, r0
 8001d26:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

		sprintf(adcmsg, "[AD# %d] Im_%d = %d mA\r\n", (int)adcReading, ci ,(int) motor_i);
 8001d2a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d2c:	f897 104b 	ldrb.w	r1, [r7, #75]	@ 0x4b
 8001d30:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8001d34:	f107 0010 	add.w	r0, r7, #16
 8001d38:	9300      	str	r3, [sp, #0]
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4922      	ldr	r1, [pc, #136]	@ (8001dc8 <drive_motor+0x180>)
 8001d3e:	f004 fe91 	bl	8006a64 <siprintf>
		HAL_UART_Transmit(&huart1, adcmsg, strlen(adcmsg), HAL_MAX_DELAY);
 8001d42:	f107 0310 	add.w	r3, r7, #16
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7fe fa02 	bl	8000150 <strlen>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	f107 0110 	add.w	r1, r7, #16
 8001d54:	f04f 33ff 	mov.w	r3, #4294967295
 8001d58:	481c      	ldr	r0, [pc, #112]	@ (8001dcc <drive_motor+0x184>)
 8001d5a:	f003 ff37 	bl	8005bcc <HAL_UART_Transmit>
		HAL_Delay(1000);
 8001d5e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d62:	f000 fb7b 	bl	800245c <HAL_Delay>
		if((HAL_GetTick() - t0) > runtime) break;
 8001d66:	f000 fb6f 	bl	8002448 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d309      	bcc.n	8001d8a <drive_motor+0x142>
	for (uint8_t ci = 1; ci < 20; ci++){
 8001d76:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 8001d80:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001d84:	2b13      	cmp	r3, #19
 8001d86:	d98d      	bls.n	8001ca4 <drive_motor+0x5c>
 8001d88:	e000      	b.n	8001d8c <drive_motor+0x144>
		if((HAL_GetTick() - t0) > runtime) break;
 8001d8a:	bf00      	nop
	}
	HAL_GPIO_WritePin(motorPort, motorPin, RESET); // disable driver
 8001d8c:	897b      	ldrh	r3, [r7, #10]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	4619      	mov	r1, r3
 8001d92:	68f8      	ldr	r0, [r7, #12]
 8001d94:	f001 fb22 	bl	80033dc <HAL_GPIO_WritePin>
	HAL_TIM_OC_Stop(&htim3, TIM_CHANNEL_3 );
 8001d98:	2108      	movs	r1, #8
 8001d9a:	4807      	ldr	r0, [pc, #28]	@ (8001db8 <drive_motor+0x170>)
 8001d9c:	f003 fa30 	bl	8005200 <HAL_TIM_OC_Stop>

}
 8001da0:	bf00      	nop
 8001da2:	3750      	adds	r7, #80	@ 0x50
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	1a9fbe77 	.word	0x1a9fbe77
 8001dac:	3fc4dd2f 	.word	0x3fc4dd2f
 8001db0:	c432ca58 	.word	0xc432ca58
 8001db4:	401d6eb1 	.word	0x401d6eb1
 8001db8:	20000158 	.word	0x20000158
 8001dbc:	40011000 	.word	0x40011000
 8001dc0:	200000c8 	.word	0x200000c8
 8001dc4:	51eb851f 	.word	0x51eb851f
 8001dc8:	08008648 	.word	0x08008648
 8001dcc:	200001a0 	.word	0x200001a0

08001dd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dd4:	b672      	cpsid	i
}
 8001dd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dd8:	bf00      	nop
 8001dda:	e7fd      	b.n	8001dd8 <Error_Handler+0x8>

08001ddc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001de2:	4b15      	ldr	r3, [pc, #84]	@ (8001e38 <HAL_MspInit+0x5c>)
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	4a14      	ldr	r2, [pc, #80]	@ (8001e38 <HAL_MspInit+0x5c>)
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	6193      	str	r3, [r2, #24]
 8001dee:	4b12      	ldr	r3, [pc, #72]	@ (8001e38 <HAL_MspInit+0x5c>)
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dfa:	4b0f      	ldr	r3, [pc, #60]	@ (8001e38 <HAL_MspInit+0x5c>)
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	4a0e      	ldr	r2, [pc, #56]	@ (8001e38 <HAL_MspInit+0x5c>)
 8001e00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e04:	61d3      	str	r3, [r2, #28]
 8001e06:	4b0c      	ldr	r3, [pc, #48]	@ (8001e38 <HAL_MspInit+0x5c>)
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e0e:	607b      	str	r3, [r7, #4]
 8001e10:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e12:	4b0a      	ldr	r3, [pc, #40]	@ (8001e3c <HAL_MspInit+0x60>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	4a04      	ldr	r2, [pc, #16]	@ (8001e3c <HAL_MspInit+0x60>)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	40010000 	.word	0x40010000

08001e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e44:	bf00      	nop
 8001e46:	e7fd      	b.n	8001e44 <NMI_Handler+0x4>

08001e48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e4c:	bf00      	nop
 8001e4e:	e7fd      	b.n	8001e4c <HardFault_Handler+0x4>

08001e50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e54:	bf00      	nop
 8001e56:	e7fd      	b.n	8001e54 <MemManage_Handler+0x4>

08001e58 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e5c:	bf00      	nop
 8001e5e:	e7fd      	b.n	8001e5c <BusFault_Handler+0x4>

08001e60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e64:	bf00      	nop
 8001e66:	e7fd      	b.n	8001e64 <UsageFault_Handler+0x4>

08001e68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr

08001e74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e78:	bf00      	nop
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr

08001e80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr

08001e8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e90:	f000 fac8 	bl	8002424 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e94:	bf00      	nop
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e9c:	4802      	ldr	r0, [pc, #8]	@ (8001ea8 <USART1_IRQHandler+0x10>)
 8001e9e:	f003 ff45 	bl	8005d2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	200001a0 	.word	0x200001a0

08001eac <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]
 8001ebc:	e00a      	b.n	8001ed4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ebe:	f3af 8000 	nop.w
 8001ec2:	4601      	mov	r1, r0
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	1c5a      	adds	r2, r3, #1
 8001ec8:	60ba      	str	r2, [r7, #8]
 8001eca:	b2ca      	uxtb	r2, r1
 8001ecc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	617b      	str	r3, [r7, #20]
 8001ed4:	697a      	ldr	r2, [r7, #20]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	dbf0      	blt.n	8001ebe <_read+0x12>
  }

  return len;
 8001edc:	687b      	ldr	r3, [r7, #4]
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3718      	adds	r7, #24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b086      	sub	sp, #24
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	60f8      	str	r0, [r7, #12]
 8001eee:	60b9      	str	r1, [r7, #8]
 8001ef0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	617b      	str	r3, [r7, #20]
 8001ef6:	e009      	b.n	8001f0c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	1c5a      	adds	r2, r3, #1
 8001efc:	60ba      	str	r2, [r7, #8]
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff fbab 	bl	800165c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	617b      	str	r3, [r7, #20]
 8001f0c:	697a      	ldr	r2, [r7, #20]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	dbf1      	blt.n	8001ef8 <_write+0x12>
  }
  return len;
 8001f14:	687b      	ldr	r3, [r7, #4]
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3718      	adds	r7, #24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <_close>:

int _close(int file)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b083      	sub	sp, #12
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bc80      	pop	{r7}
 8001f32:	4770      	bx	lr

08001f34 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f44:	605a      	str	r2, [r3, #4]
  return 0;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr

08001f52 <_isatty>:

int _isatty(int file)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f5a:	2301      	movs	r3, #1
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bc80      	pop	{r7}
 8001f64:	4770      	bx	lr

08001f66 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b085      	sub	sp, #20
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	60f8      	str	r0, [r7, #12]
 8001f6e:	60b9      	str	r1, [r7, #8]
 8001f70:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc80      	pop	{r7}
 8001f7c:	4770      	bx	lr
	...

08001f80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f88:	4a14      	ldr	r2, [pc, #80]	@ (8001fdc <_sbrk+0x5c>)
 8001f8a:	4b15      	ldr	r3, [pc, #84]	@ (8001fe0 <_sbrk+0x60>)
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f94:	4b13      	ldr	r3, [pc, #76]	@ (8001fe4 <_sbrk+0x64>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d102      	bne.n	8001fa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f9c:	4b11      	ldr	r3, [pc, #68]	@ (8001fe4 <_sbrk+0x64>)
 8001f9e:	4a12      	ldr	r2, [pc, #72]	@ (8001fe8 <_sbrk+0x68>)
 8001fa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fa2:	4b10      	ldr	r3, [pc, #64]	@ (8001fe4 <_sbrk+0x64>)
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4413      	add	r3, r2
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d207      	bcs.n	8001fc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fb0:	f004 fe9e 	bl	8006cf0 <__errno>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	220c      	movs	r2, #12
 8001fb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fba:	f04f 33ff 	mov.w	r3, #4294967295
 8001fbe:	e009      	b.n	8001fd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fc0:	4b08      	ldr	r3, [pc, #32]	@ (8001fe4 <_sbrk+0x64>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fc6:	4b07      	ldr	r3, [pc, #28]	@ (8001fe4 <_sbrk+0x64>)
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4413      	add	r3, r2
 8001fce:	4a05      	ldr	r2, [pc, #20]	@ (8001fe4 <_sbrk+0x64>)
 8001fd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	20005000 	.word	0x20005000
 8001fe0:	00000400 	.word	0x00000400
 8001fe4:	20000154 	.word	0x20000154
 8001fe8:	20000380 	.word	0x20000380

08001fec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ff0:	bf00      	nop
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bc80      	pop	{r7}
 8001ff6:	4770      	bx	lr

08001ff8 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b08e      	sub	sp, #56	@ 0x38
 8001ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ffe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	605a      	str	r2, [r3, #4]
 8002008:	609a      	str	r2, [r3, #8]
 800200a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800200c:	f107 0320 	add.w	r3, r7, #32
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002016:	1d3b      	adds	r3, r7, #4
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]
 8002022:	611a      	str	r2, [r3, #16]
 8002024:	615a      	str	r2, [r3, #20]
 8002026:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002028:	4b2c      	ldr	r3, [pc, #176]	@ (80020dc <MX_TIM3_Init+0xe4>)
 800202a:	4a2d      	ldr	r2, [pc, #180]	@ (80020e0 <MX_TIM3_Init+0xe8>)
 800202c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 800202e:	4b2b      	ldr	r3, [pc, #172]	@ (80020dc <MX_TIM3_Init+0xe4>)
 8002030:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002034:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002036:	4b29      	ldr	r3, [pc, #164]	@ (80020dc <MX_TIM3_Init+0xe4>)
 8002038:	2200      	movs	r2, #0
 800203a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 15-1;
 800203c:	4b27      	ldr	r3, [pc, #156]	@ (80020dc <MX_TIM3_Init+0xe4>)
 800203e:	220e      	movs	r2, #14
 8002040:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002042:	4b26      	ldr	r3, [pc, #152]	@ (80020dc <MX_TIM3_Init+0xe4>)
 8002044:	2200      	movs	r2, #0
 8002046:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002048:	4b24      	ldr	r3, [pc, #144]	@ (80020dc <MX_TIM3_Init+0xe4>)
 800204a:	2280      	movs	r2, #128	@ 0x80
 800204c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800204e:	4823      	ldr	r0, [pc, #140]	@ (80020dc <MX_TIM3_Init+0xe4>)
 8002050:	f002 ff8c 	bl	8004f6c <HAL_TIM_Base_Init>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800205a:	f7ff feb9 	bl	8001dd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800205e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002062:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002064:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002068:	4619      	mov	r1, r3
 800206a:	481c      	ldr	r0, [pc, #112]	@ (80020dc <MX_TIM3_Init+0xe4>)
 800206c:	f003 f988 	bl	8005380 <HAL_TIM_ConfigClockSource>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002076:	f7ff feab 	bl	8001dd0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800207a:	4818      	ldr	r0, [pc, #96]	@ (80020dc <MX_TIM3_Init+0xe4>)
 800207c:	f002 ffc5 	bl	800500a <HAL_TIM_OC_Init>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002086:	f7ff fea3 	bl	8001dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800208a:	2300      	movs	r3, #0
 800208c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800208e:	2300      	movs	r3, #0
 8002090:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002092:	f107 0320 	add.w	r3, r7, #32
 8002096:	4619      	mov	r1, r3
 8002098:	4810      	ldr	r0, [pc, #64]	@ (80020dc <MX_TIM3_Init+0xe4>)
 800209a:	f003 fce9 	bl	8005a70 <HAL_TIMEx_MasterConfigSynchronization>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80020a4:	f7ff fe94 	bl	8001dd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80020a8:	2330      	movs	r3, #48	@ 0x30
 80020aa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020b0:	2300      	movs	r3, #0
 80020b2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80020b8:	1d3b      	adds	r3, r7, #4
 80020ba:	2208      	movs	r2, #8
 80020bc:	4619      	mov	r1, r3
 80020be:	4807      	ldr	r0, [pc, #28]	@ (80020dc <MX_TIM3_Init+0xe4>)
 80020c0:	f003 f902 	bl	80052c8 <HAL_TIM_OC_ConfigChannel>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80020ca:	f7ff fe81 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80020ce:	4803      	ldr	r0, [pc, #12]	@ (80020dc <MX_TIM3_Init+0xe4>)
 80020d0:	f000 f826 	bl	8002120 <HAL_TIM_MspPostInit>

}
 80020d4:	bf00      	nop
 80020d6:	3738      	adds	r7, #56	@ 0x38
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	20000158 	.word	0x20000158
 80020e0:	40000400 	.word	0x40000400

080020e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a09      	ldr	r2, [pc, #36]	@ (8002118 <HAL_TIM_Base_MspInit+0x34>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d10b      	bne.n	800210e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020f6:	4b09      	ldr	r3, [pc, #36]	@ (800211c <HAL_TIM_Base_MspInit+0x38>)
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	4a08      	ldr	r2, [pc, #32]	@ (800211c <HAL_TIM_Base_MspInit+0x38>)
 80020fc:	f043 0302 	orr.w	r3, r3, #2
 8002100:	61d3      	str	r3, [r2, #28]
 8002102:	4b06      	ldr	r3, [pc, #24]	@ (800211c <HAL_TIM_Base_MspInit+0x38>)
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800210e:	bf00      	nop
 8002110:	3714      	adds	r7, #20
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr
 8002118:	40000400 	.word	0x40000400
 800211c:	40021000 	.word	0x40021000

08002120 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b088      	sub	sp, #32
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002128:	f107 0310 	add.w	r3, r7, #16
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	605a      	str	r2, [r3, #4]
 8002132:	609a      	str	r2, [r3, #8]
 8002134:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a0f      	ldr	r2, [pc, #60]	@ (8002178 <HAL_TIM_MspPostInit+0x58>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d117      	bne.n	8002170 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002140:	4b0e      	ldr	r3, [pc, #56]	@ (800217c <HAL_TIM_MspPostInit+0x5c>)
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	4a0d      	ldr	r2, [pc, #52]	@ (800217c <HAL_TIM_MspPostInit+0x5c>)
 8002146:	f043 0308 	orr.w	r3, r3, #8
 800214a:	6193      	str	r3, [r2, #24]
 800214c:	4b0b      	ldr	r3, [pc, #44]	@ (800217c <HAL_TIM_MspPostInit+0x5c>)
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	f003 0308 	and.w	r3, r3, #8
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002158:	2301      	movs	r3, #1
 800215a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215c:	2302      	movs	r3, #2
 800215e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002160:	2302      	movs	r3, #2
 8002162:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002164:	f107 0310 	add.w	r3, r7, #16
 8002168:	4619      	mov	r1, r3
 800216a:	4805      	ldr	r0, [pc, #20]	@ (8002180 <HAL_TIM_MspPostInit+0x60>)
 800216c:	f000 ffb2 	bl	80030d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002170:	bf00      	nop
 8002172:	3720      	adds	r7, #32
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40000400 	.word	0x40000400
 800217c:	40021000 	.word	0x40021000
 8002180:	40010c00 	.word	0x40010c00

08002184 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002188:	4b11      	ldr	r3, [pc, #68]	@ (80021d0 <MX_USART1_UART_Init+0x4c>)
 800218a:	4a12      	ldr	r2, [pc, #72]	@ (80021d4 <MX_USART1_UART_Init+0x50>)
 800218c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800218e:	4b10      	ldr	r3, [pc, #64]	@ (80021d0 <MX_USART1_UART_Init+0x4c>)
 8002190:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002194:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002196:	4b0e      	ldr	r3, [pc, #56]	@ (80021d0 <MX_USART1_UART_Init+0x4c>)
 8002198:	2200      	movs	r2, #0
 800219a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800219c:	4b0c      	ldr	r3, [pc, #48]	@ (80021d0 <MX_USART1_UART_Init+0x4c>)
 800219e:	2200      	movs	r2, #0
 80021a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021a2:	4b0b      	ldr	r3, [pc, #44]	@ (80021d0 <MX_USART1_UART_Init+0x4c>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021a8:	4b09      	ldr	r3, [pc, #36]	@ (80021d0 <MX_USART1_UART_Init+0x4c>)
 80021aa:	220c      	movs	r2, #12
 80021ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ae:	4b08      	ldr	r3, [pc, #32]	@ (80021d0 <MX_USART1_UART_Init+0x4c>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021b4:	4b06      	ldr	r3, [pc, #24]	@ (80021d0 <MX_USART1_UART_Init+0x4c>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021ba:	4805      	ldr	r0, [pc, #20]	@ (80021d0 <MX_USART1_UART_Init+0x4c>)
 80021bc:	f003 fcb6 	bl	8005b2c <HAL_UART_Init>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80021c6:	f7ff fe03 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	200001a0 	.word	0x200001a0
 80021d4:	40013800 	.word	0x40013800

080021d8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80021dc:	4b11      	ldr	r3, [pc, #68]	@ (8002224 <MX_USART3_UART_Init+0x4c>)
 80021de:	4a12      	ldr	r2, [pc, #72]	@ (8002228 <MX_USART3_UART_Init+0x50>)
 80021e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80021e2:	4b10      	ldr	r3, [pc, #64]	@ (8002224 <MX_USART3_UART_Init+0x4c>)
 80021e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80021ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002224 <MX_USART3_UART_Init+0x4c>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80021f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002224 <MX_USART3_UART_Init+0x4c>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80021f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002224 <MX_USART3_UART_Init+0x4c>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80021fc:	4b09      	ldr	r3, [pc, #36]	@ (8002224 <MX_USART3_UART_Init+0x4c>)
 80021fe:	220c      	movs	r2, #12
 8002200:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002202:	4b08      	ldr	r3, [pc, #32]	@ (8002224 <MX_USART3_UART_Init+0x4c>)
 8002204:	2200      	movs	r2, #0
 8002206:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002208:	4b06      	ldr	r3, [pc, #24]	@ (8002224 <MX_USART3_UART_Init+0x4c>)
 800220a:	2200      	movs	r2, #0
 800220c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800220e:	4805      	ldr	r0, [pc, #20]	@ (8002224 <MX_USART3_UART_Init+0x4c>)
 8002210:	f003 fc8c 	bl	8005b2c <HAL_UART_Init>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800221a:	f7ff fdd9 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	200001e8 	.word	0x200001e8
 8002228:	40004800 	.word	0x40004800

0800222c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b08a      	sub	sp, #40	@ 0x28
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002234:	f107 0318 	add.w	r3, r7, #24
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	605a      	str	r2, [r3, #4]
 800223e:	609a      	str	r2, [r3, #8]
 8002240:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a3c      	ldr	r2, [pc, #240]	@ (8002338 <HAL_UART_MspInit+0x10c>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d13a      	bne.n	80022c2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800224c:	4b3b      	ldr	r3, [pc, #236]	@ (800233c <HAL_UART_MspInit+0x110>)
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	4a3a      	ldr	r2, [pc, #232]	@ (800233c <HAL_UART_MspInit+0x110>)
 8002252:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002256:	6193      	str	r3, [r2, #24]
 8002258:	4b38      	ldr	r3, [pc, #224]	@ (800233c <HAL_UART_MspInit+0x110>)
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002260:	617b      	str	r3, [r7, #20]
 8002262:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002264:	4b35      	ldr	r3, [pc, #212]	@ (800233c <HAL_UART_MspInit+0x110>)
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	4a34      	ldr	r2, [pc, #208]	@ (800233c <HAL_UART_MspInit+0x110>)
 800226a:	f043 0304 	orr.w	r3, r3, #4
 800226e:	6193      	str	r3, [r2, #24]
 8002270:	4b32      	ldr	r3, [pc, #200]	@ (800233c <HAL_UART_MspInit+0x110>)
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	613b      	str	r3, [r7, #16]
 800227a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800227c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002280:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002282:	2302      	movs	r3, #2
 8002284:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002286:	2303      	movs	r3, #3
 8002288:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800228a:	f107 0318 	add.w	r3, r7, #24
 800228e:	4619      	mov	r1, r3
 8002290:	482b      	ldr	r0, [pc, #172]	@ (8002340 <HAL_UART_MspInit+0x114>)
 8002292:	f000 ff1f 	bl	80030d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002296:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800229a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800229c:	2300      	movs	r3, #0
 800229e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a0:	2300      	movs	r3, #0
 80022a2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a4:	f107 0318 	add.w	r3, r7, #24
 80022a8:	4619      	mov	r1, r3
 80022aa:	4825      	ldr	r0, [pc, #148]	@ (8002340 <HAL_UART_MspInit+0x114>)
 80022ac:	f000 ff12 	bl	80030d4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80022b0:	2200      	movs	r2, #0
 80022b2:	2100      	movs	r1, #0
 80022b4:	2025      	movs	r0, #37	@ 0x25
 80022b6:	f000 fe24 	bl	8002f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022ba:	2025      	movs	r0, #37	@ 0x25
 80022bc:	f000 fe3d 	bl	8002f3a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80022c0:	e036      	b.n	8002330 <HAL_UART_MspInit+0x104>
  else if(uartHandle->Instance==USART3)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a1f      	ldr	r2, [pc, #124]	@ (8002344 <HAL_UART_MspInit+0x118>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d131      	bne.n	8002330 <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 80022cc:	4b1b      	ldr	r3, [pc, #108]	@ (800233c <HAL_UART_MspInit+0x110>)
 80022ce:	69db      	ldr	r3, [r3, #28]
 80022d0:	4a1a      	ldr	r2, [pc, #104]	@ (800233c <HAL_UART_MspInit+0x110>)
 80022d2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022d6:	61d3      	str	r3, [r2, #28]
 80022d8:	4b18      	ldr	r3, [pc, #96]	@ (800233c <HAL_UART_MspInit+0x110>)
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022e4:	4b15      	ldr	r3, [pc, #84]	@ (800233c <HAL_UART_MspInit+0x110>)
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	4a14      	ldr	r2, [pc, #80]	@ (800233c <HAL_UART_MspInit+0x110>)
 80022ea:	f043 0308 	orr.w	r3, r3, #8
 80022ee:	6193      	str	r3, [r2, #24]
 80022f0:	4b12      	ldr	r3, [pc, #72]	@ (800233c <HAL_UART_MspInit+0x110>)
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	f003 0308 	and.w	r3, r3, #8
 80022f8:	60bb      	str	r3, [r7, #8]
 80022fa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80022fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002302:	2302      	movs	r3, #2
 8002304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002306:	2303      	movs	r3, #3
 8002308:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800230a:	f107 0318 	add.w	r3, r7, #24
 800230e:	4619      	mov	r1, r3
 8002310:	480d      	ldr	r0, [pc, #52]	@ (8002348 <HAL_UART_MspInit+0x11c>)
 8002312:	f000 fedf 	bl	80030d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002316:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800231a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800231c:	2300      	movs	r3, #0
 800231e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002320:	2300      	movs	r3, #0
 8002322:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002324:	f107 0318 	add.w	r3, r7, #24
 8002328:	4619      	mov	r1, r3
 800232a:	4807      	ldr	r0, [pc, #28]	@ (8002348 <HAL_UART_MspInit+0x11c>)
 800232c:	f000 fed2 	bl	80030d4 <HAL_GPIO_Init>
}
 8002330:	bf00      	nop
 8002332:	3728      	adds	r7, #40	@ 0x28
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40013800 	.word	0x40013800
 800233c:	40021000 	.word	0x40021000
 8002340:	40010800 	.word	0x40010800
 8002344:	40004800 	.word	0x40004800
 8002348:	40010c00 	.word	0x40010c00

0800234c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800234c:	f7ff fe4e 	bl	8001fec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002350:	480b      	ldr	r0, [pc, #44]	@ (8002380 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002352:	490c      	ldr	r1, [pc, #48]	@ (8002384 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002354:	4a0c      	ldr	r2, [pc, #48]	@ (8002388 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002358:	e002      	b.n	8002360 <LoopCopyDataInit>

0800235a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800235a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800235c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800235e:	3304      	adds	r3, #4

08002360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002364:	d3f9      	bcc.n	800235a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002366:	4a09      	ldr	r2, [pc, #36]	@ (800238c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002368:	4c09      	ldr	r4, [pc, #36]	@ (8002390 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800236a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800236c:	e001      	b.n	8002372 <LoopFillZerobss>

0800236e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800236e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002370:	3204      	adds	r2, #4

08002372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002374:	d3fb      	bcc.n	800236e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002376:	f004 fcc1 	bl	8006cfc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800237a:	f7fe fbdf 	bl	8000b3c <main>
  bx lr
 800237e:	4770      	bx	lr
  ldr r0, =_sdata
 8002380:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002384:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002388:	080086e8 	.word	0x080086e8
  ldr r2, =_sbss
 800238c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8002390:	20000380 	.word	0x20000380

08002394 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002394:	e7fe      	b.n	8002394 <ADC1_2_IRQHandler>
	...

08002398 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800239c:	4b08      	ldr	r3, [pc, #32]	@ (80023c0 <HAL_Init+0x28>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a07      	ldr	r2, [pc, #28]	@ (80023c0 <HAL_Init+0x28>)
 80023a2:	f043 0310 	orr.w	r3, r3, #16
 80023a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023a8:	2003      	movs	r0, #3
 80023aa:	f000 fd9f 	bl	8002eec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023ae:	200f      	movs	r0, #15
 80023b0:	f000 f808 	bl	80023c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023b4:	f7ff fd12 	bl	8001ddc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	40022000 	.word	0x40022000

080023c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023cc:	4b12      	ldr	r3, [pc, #72]	@ (8002418 <HAL_InitTick+0x54>)
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	4b12      	ldr	r3, [pc, #72]	@ (800241c <HAL_InitTick+0x58>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	4619      	mov	r1, r3
 80023d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023da:	fbb3 f3f1 	udiv	r3, r3, r1
 80023de:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e2:	4618      	mov	r0, r3
 80023e4:	f000 fdb7 	bl	8002f56 <HAL_SYSTICK_Config>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e00e      	b.n	8002410 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2b0f      	cmp	r3, #15
 80023f6:	d80a      	bhi.n	800240e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023f8:	2200      	movs	r2, #0
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002400:	f000 fd7f 	bl	8002f02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002404:	4a06      	ldr	r2, [pc, #24]	@ (8002420 <HAL_InitTick+0x5c>)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800240a:	2300      	movs	r3, #0
 800240c:	e000      	b.n	8002410 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
}
 8002410:	4618      	mov	r0, r3
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	20000014 	.word	0x20000014
 800241c:	2000001c 	.word	0x2000001c
 8002420:	20000018 	.word	0x20000018

08002424 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002428:	4b05      	ldr	r3, [pc, #20]	@ (8002440 <HAL_IncTick+0x1c>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	461a      	mov	r2, r3
 800242e:	4b05      	ldr	r3, [pc, #20]	@ (8002444 <HAL_IncTick+0x20>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4413      	add	r3, r2
 8002434:	4a03      	ldr	r2, [pc, #12]	@ (8002444 <HAL_IncTick+0x20>)
 8002436:	6013      	str	r3, [r2, #0]
}
 8002438:	bf00      	nop
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr
 8002440:	2000001c 	.word	0x2000001c
 8002444:	20000230 	.word	0x20000230

08002448 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  return uwTick;
 800244c:	4b02      	ldr	r3, [pc, #8]	@ (8002458 <HAL_GetTick+0x10>)
 800244e:	681b      	ldr	r3, [r3, #0]
}
 8002450:	4618      	mov	r0, r3
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr
 8002458:	20000230 	.word	0x20000230

0800245c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002464:	f7ff fff0 	bl	8002448 <HAL_GetTick>
 8002468:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002474:	d005      	beq.n	8002482 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002476:	4b0a      	ldr	r3, [pc, #40]	@ (80024a0 <HAL_Delay+0x44>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	461a      	mov	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	4413      	add	r3, r2
 8002480:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002482:	bf00      	nop
 8002484:	f7ff ffe0 	bl	8002448 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	429a      	cmp	r2, r3
 8002492:	d8f7      	bhi.n	8002484 <HAL_Delay+0x28>
  {
  }
}
 8002494:	bf00      	nop
 8002496:	bf00      	nop
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	2000001c 	.word	0x2000001c

080024a4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024ac:	2300      	movs	r3, #0
 80024ae:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80024b8:	2300      	movs	r3, #0
 80024ba:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e0be      	b.n	8002644 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d109      	bne.n	80024e8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f7fe f9be 	bl	8000864 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f000 fbf1 	bl	8002cd0 <ADC_ConversionStop_Disable>
 80024ee:	4603      	mov	r3, r0
 80024f0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f6:	f003 0310 	and.w	r3, r3, #16
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f040 8099 	bne.w	8002632 <HAL_ADC_Init+0x18e>
 8002500:	7dfb      	ldrb	r3, [r7, #23]
 8002502:	2b00      	cmp	r3, #0
 8002504:	f040 8095 	bne.w	8002632 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800250c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002510:	f023 0302 	bic.w	r3, r3, #2
 8002514:	f043 0202 	orr.w	r2, r3, #2
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002524:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	7b1b      	ldrb	r3, [r3, #12]
 800252a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800252c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	4313      	orrs	r3, r2
 8002532:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800253c:	d003      	beq.n	8002546 <HAL_ADC_Init+0xa2>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d102      	bne.n	800254c <HAL_ADC_Init+0xa8>
 8002546:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800254a:	e000      	b.n	800254e <HAL_ADC_Init+0xaa>
 800254c:	2300      	movs	r3, #0
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	4313      	orrs	r3, r2
 8002552:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	7d1b      	ldrb	r3, [r3, #20]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d119      	bne.n	8002590 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	7b1b      	ldrb	r3, [r3, #12]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d109      	bne.n	8002578 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	3b01      	subs	r3, #1
 800256a:	035a      	lsls	r2, r3, #13
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	4313      	orrs	r3, r2
 8002570:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	e00b      	b.n	8002590 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800257c:	f043 0220 	orr.w	r2, r3, #32
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002588:	f043 0201 	orr.w	r2, r3, #1
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	430a      	orrs	r2, r1
 80025a2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	689a      	ldr	r2, [r3, #8]
 80025aa:	4b28      	ldr	r3, [pc, #160]	@ (800264c <HAL_ADC_Init+0x1a8>)
 80025ac:	4013      	ands	r3, r2
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	6812      	ldr	r2, [r2, #0]
 80025b2:	68b9      	ldr	r1, [r7, #8]
 80025b4:	430b      	orrs	r3, r1
 80025b6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025c0:	d003      	beq.n	80025ca <HAL_ADC_Init+0x126>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d104      	bne.n	80025d4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	3b01      	subs	r3, #1
 80025d0:	051b      	lsls	r3, r3, #20
 80025d2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025da:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	430a      	orrs	r2, r1
 80025e6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689a      	ldr	r2, [r3, #8]
 80025ee:	4b18      	ldr	r3, [pc, #96]	@ (8002650 <HAL_ADC_Init+0x1ac>)
 80025f0:	4013      	ands	r3, r2
 80025f2:	68ba      	ldr	r2, [r7, #8]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d10b      	bne.n	8002610 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002602:	f023 0303 	bic.w	r3, r3, #3
 8002606:	f043 0201 	orr.w	r2, r3, #1
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800260e:	e018      	b.n	8002642 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002614:	f023 0312 	bic.w	r3, r3, #18
 8002618:	f043 0210 	orr.w	r2, r3, #16
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002624:	f043 0201 	orr.w	r2, r3, #1
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002630:	e007      	b.n	8002642 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002636:	f043 0210 	orr.w	r2, r3, #16
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002642:	7dfb      	ldrb	r3, [r7, #23]
}
 8002644:	4618      	mov	r0, r3
 8002646:	3718      	adds	r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	ffe1f7fd 	.word	0xffe1f7fd
 8002650:	ff1f0efe 	.word	0xff1f0efe

08002654 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800265c:	2300      	movs	r3, #0
 800265e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002666:	2b01      	cmp	r3, #1
 8002668:	d101      	bne.n	800266e <HAL_ADC_Start+0x1a>
 800266a:	2302      	movs	r3, #2
 800266c:	e098      	b.n	80027a0 <HAL_ADC_Start+0x14c>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 fad0 	bl	8002c1c <ADC_Enable>
 800267c:	4603      	mov	r3, r0
 800267e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002680:	7bfb      	ldrb	r3, [r7, #15]
 8002682:	2b00      	cmp	r3, #0
 8002684:	f040 8087 	bne.w	8002796 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800268c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002690:	f023 0301 	bic.w	r3, r3, #1
 8002694:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a41      	ldr	r2, [pc, #260]	@ (80027a8 <HAL_ADC_Start+0x154>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d105      	bne.n	80026b2 <HAL_ADC_Start+0x5e>
 80026a6:	4b41      	ldr	r3, [pc, #260]	@ (80027ac <HAL_ADC_Start+0x158>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d115      	bne.n	80026de <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d026      	beq.n	800271a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026d0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80026d4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026dc:	e01d      	b.n	800271a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a2f      	ldr	r2, [pc, #188]	@ (80027ac <HAL_ADC_Start+0x158>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d004      	beq.n	80026fe <HAL_ADC_Start+0xaa>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a2b      	ldr	r2, [pc, #172]	@ (80027a8 <HAL_ADC_Start+0x154>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d10d      	bne.n	800271a <HAL_ADC_Start+0xc6>
 80026fe:	4b2b      	ldr	r3, [pc, #172]	@ (80027ac <HAL_ADC_Start+0x158>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002706:	2b00      	cmp	r3, #0
 8002708:	d007      	beq.n	800271a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800270e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002712:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800271e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d006      	beq.n	8002734 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800272a:	f023 0206 	bic.w	r2, r3, #6
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002732:	e002      	b.n	800273a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f06f 0202 	mvn.w	r2, #2
 800274a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002756:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800275a:	d113      	bne.n	8002784 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002760:	4a11      	ldr	r2, [pc, #68]	@ (80027a8 <HAL_ADC_Start+0x154>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d105      	bne.n	8002772 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002766:	4b11      	ldr	r3, [pc, #68]	@ (80027ac <HAL_ADC_Start+0x158>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800276e:	2b00      	cmp	r3, #0
 8002770:	d108      	bne.n	8002784 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002780:	609a      	str	r2, [r3, #8]
 8002782:	e00c      	b.n	800279e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689a      	ldr	r2, [r3, #8]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	e003      	b.n	800279e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800279e:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40012800 	.word	0x40012800
 80027ac:	40012400 	.word	0x40012400

080027b0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027b8:	2300      	movs	r3, #0
 80027ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d101      	bne.n	80027ca <HAL_ADC_Stop+0x1a>
 80027c6:	2302      	movs	r3, #2
 80027c8:	e01a      	b.n	8002800 <HAL_ADC_Stop+0x50>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 fa7c 	bl	8002cd0 <ADC_ConversionStop_Disable>
 80027d8:	4603      	mov	r3, r0
 80027da:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80027dc:	7bfb      	ldrb	r3, [r7, #15]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d109      	bne.n	80027f6 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80027ea:	f023 0301 	bic.w	r3, r3, #1
 80027ee:	f043 0201 	orr.w	r2, r3, #1
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80027fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002800:	4618      	mov	r0, r3
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002808:	b590      	push	{r4, r7, lr}
 800280a:	b087      	sub	sp, #28
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002812:	2300      	movs	r3, #0
 8002814:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002816:	2300      	movs	r3, #0
 8002818:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800281a:	2300      	movs	r3, #0
 800281c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800281e:	f7ff fe13 	bl	8002448 <HAL_GetTick>
 8002822:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00b      	beq.n	800284a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002836:	f043 0220 	orr.w	r2, r3, #32
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e0d3      	b.n	80029f2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002854:	2b00      	cmp	r3, #0
 8002856:	d131      	bne.n	80028bc <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800285e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002862:	2b00      	cmp	r3, #0
 8002864:	d12a      	bne.n	80028bc <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002866:	e021      	b.n	80028ac <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800286e:	d01d      	beq.n	80028ac <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d007      	beq.n	8002886 <HAL_ADC_PollForConversion+0x7e>
 8002876:	f7ff fde7 	bl	8002448 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	429a      	cmp	r2, r3
 8002884:	d212      	bcs.n	80028ac <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10b      	bne.n	80028ac <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002898:	f043 0204 	orr.w	r2, r3, #4
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e0a2      	b.n	80029f2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d0d6      	beq.n	8002868 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80028ba:	e070      	b.n	800299e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80028bc:	4b4f      	ldr	r3, [pc, #316]	@ (80029fc <HAL_ADC_PollForConversion+0x1f4>)
 80028be:	681c      	ldr	r4, [r3, #0]
 80028c0:	2002      	movs	r0, #2
 80028c2:	f002 fa9d 	bl	8004e00 <HAL_RCCEx_GetPeriphCLKFreq>
 80028c6:	4603      	mov	r3, r0
 80028c8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6919      	ldr	r1, [r3, #16]
 80028d2:	4b4b      	ldr	r3, [pc, #300]	@ (8002a00 <HAL_ADC_PollForConversion+0x1f8>)
 80028d4:	400b      	ands	r3, r1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d118      	bne.n	800290c <HAL_ADC_PollForConversion+0x104>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68d9      	ldr	r1, [r3, #12]
 80028e0:	4b48      	ldr	r3, [pc, #288]	@ (8002a04 <HAL_ADC_PollForConversion+0x1fc>)
 80028e2:	400b      	ands	r3, r1
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d111      	bne.n	800290c <HAL_ADC_PollForConversion+0x104>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6919      	ldr	r1, [r3, #16]
 80028ee:	4b46      	ldr	r3, [pc, #280]	@ (8002a08 <HAL_ADC_PollForConversion+0x200>)
 80028f0:	400b      	ands	r3, r1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d108      	bne.n	8002908 <HAL_ADC_PollForConversion+0x100>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68d9      	ldr	r1, [r3, #12]
 80028fc:	4b43      	ldr	r3, [pc, #268]	@ (8002a0c <HAL_ADC_PollForConversion+0x204>)
 80028fe:	400b      	ands	r3, r1
 8002900:	2b00      	cmp	r3, #0
 8002902:	d101      	bne.n	8002908 <HAL_ADC_PollForConversion+0x100>
 8002904:	2314      	movs	r3, #20
 8002906:	e020      	b.n	800294a <HAL_ADC_PollForConversion+0x142>
 8002908:	2329      	movs	r3, #41	@ 0x29
 800290a:	e01e      	b.n	800294a <HAL_ADC_PollForConversion+0x142>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6919      	ldr	r1, [r3, #16]
 8002912:	4b3d      	ldr	r3, [pc, #244]	@ (8002a08 <HAL_ADC_PollForConversion+0x200>)
 8002914:	400b      	ands	r3, r1
 8002916:	2b00      	cmp	r3, #0
 8002918:	d106      	bne.n	8002928 <HAL_ADC_PollForConversion+0x120>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68d9      	ldr	r1, [r3, #12]
 8002920:	4b3a      	ldr	r3, [pc, #232]	@ (8002a0c <HAL_ADC_PollForConversion+0x204>)
 8002922:	400b      	ands	r3, r1
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00d      	beq.n	8002944 <HAL_ADC_PollForConversion+0x13c>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6919      	ldr	r1, [r3, #16]
 800292e:	4b38      	ldr	r3, [pc, #224]	@ (8002a10 <HAL_ADC_PollForConversion+0x208>)
 8002930:	400b      	ands	r3, r1
 8002932:	2b00      	cmp	r3, #0
 8002934:	d108      	bne.n	8002948 <HAL_ADC_PollForConversion+0x140>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68d9      	ldr	r1, [r3, #12]
 800293c:	4b34      	ldr	r3, [pc, #208]	@ (8002a10 <HAL_ADC_PollForConversion+0x208>)
 800293e:	400b      	ands	r3, r1
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <HAL_ADC_PollForConversion+0x140>
 8002944:	2354      	movs	r3, #84	@ 0x54
 8002946:	e000      	b.n	800294a <HAL_ADC_PollForConversion+0x142>
 8002948:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800294a:	fb02 f303 	mul.w	r3, r2, r3
 800294e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002950:	e021      	b.n	8002996 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002958:	d01a      	beq.n	8002990 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d007      	beq.n	8002970 <HAL_ADC_PollForConversion+0x168>
 8002960:	f7ff fd72 	bl	8002448 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	429a      	cmp	r2, r3
 800296e:	d20f      	bcs.n	8002990 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	429a      	cmp	r2, r3
 8002976:	d90b      	bls.n	8002990 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800297c:	f043 0204 	orr.w	r2, r3, #4
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e030      	b.n	80029f2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	3301      	adds	r3, #1
 8002994:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	429a      	cmp	r2, r3
 800299c:	d8d9      	bhi.n	8002952 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f06f 0212 	mvn.w	r2, #18
 80029a6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ac:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80029be:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80029c2:	d115      	bne.n	80029f0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d111      	bne.n	80029f0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d105      	bne.n	80029f0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e8:	f043 0201 	orr.w	r2, r3, #1
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	371c      	adds	r7, #28
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd90      	pop	{r4, r7, pc}
 80029fa:	bf00      	nop
 80029fc:	20000014 	.word	0x20000014
 8002a00:	24924924 	.word	0x24924924
 8002a04:	00924924 	.word	0x00924924
 8002a08:	12492492 	.word	0x12492492
 8002a0c:	00492492 	.word	0x00492492
 8002a10:	00249249 	.word	0x00249249

08002a14 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr

08002a2c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a36:	2300      	movs	r3, #0
 8002a38:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d101      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x20>
 8002a48:	2302      	movs	r3, #2
 8002a4a:	e0dc      	b.n	8002c06 <HAL_ADC_ConfigChannel+0x1da>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2b06      	cmp	r3, #6
 8002a5a:	d81c      	bhi.n	8002a96 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	4613      	mov	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	4413      	add	r3, r2
 8002a6c:	3b05      	subs	r3, #5
 8002a6e:	221f      	movs	r2, #31
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	43db      	mvns	r3, r3
 8002a76:	4019      	ands	r1, r3
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	6818      	ldr	r0, [r3, #0]
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	4613      	mov	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4413      	add	r3, r2
 8002a86:	3b05      	subs	r3, #5
 8002a88:	fa00 f203 	lsl.w	r2, r0, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a94:	e03c      	b.n	8002b10 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	2b0c      	cmp	r3, #12
 8002a9c:	d81c      	bhi.n	8002ad8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	3b23      	subs	r3, #35	@ 0x23
 8002ab0:	221f      	movs	r2, #31
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	4019      	ands	r1, r3
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	6818      	ldr	r0, [r3, #0]
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4413      	add	r3, r2
 8002ac8:	3b23      	subs	r3, #35	@ 0x23
 8002aca:	fa00 f203 	lsl.w	r2, r0, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ad6:	e01b      	b.n	8002b10 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4413      	add	r3, r2
 8002ae8:	3b41      	subs	r3, #65	@ 0x41
 8002aea:	221f      	movs	r2, #31
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	43db      	mvns	r3, r3
 8002af2:	4019      	ands	r1, r3
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	6818      	ldr	r0, [r3, #0]
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685a      	ldr	r2, [r3, #4]
 8002afc:	4613      	mov	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	3b41      	subs	r3, #65	@ 0x41
 8002b04:	fa00 f203 	lsl.w	r2, r0, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2b09      	cmp	r3, #9
 8002b16:	d91c      	bls.n	8002b52 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68d9      	ldr	r1, [r3, #12]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	4613      	mov	r3, r2
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	4413      	add	r3, r2
 8002b28:	3b1e      	subs	r3, #30
 8002b2a:	2207      	movs	r2, #7
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	43db      	mvns	r3, r3
 8002b32:	4019      	ands	r1, r3
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	6898      	ldr	r0, [r3, #8]
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	4413      	add	r3, r2
 8002b42:	3b1e      	subs	r3, #30
 8002b44:	fa00 f203 	lsl.w	r2, r0, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	60da      	str	r2, [r3, #12]
 8002b50:	e019      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	6919      	ldr	r1, [r3, #16]
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	4413      	add	r3, r2
 8002b62:	2207      	movs	r2, #7
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	4019      	ands	r1, r3
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	6898      	ldr	r0, [r3, #8]
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	4613      	mov	r3, r2
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	4413      	add	r3, r2
 8002b7a:	fa00 f203 	lsl.w	r2, r0, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2b10      	cmp	r3, #16
 8002b8c:	d003      	beq.n	8002b96 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b92:	2b11      	cmp	r3, #17
 8002b94:	d132      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a1d      	ldr	r2, [pc, #116]	@ (8002c10 <HAL_ADC_ConfigChannel+0x1e4>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d125      	bne.n	8002bec <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d126      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002bbc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2b10      	cmp	r3, #16
 8002bc4:	d11a      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bc6:	4b13      	ldr	r3, [pc, #76]	@ (8002c14 <HAL_ADC_ConfigChannel+0x1e8>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a13      	ldr	r2, [pc, #76]	@ (8002c18 <HAL_ADC_ConfigChannel+0x1ec>)
 8002bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd0:	0c9a      	lsrs	r2, r3, #18
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	4413      	add	r3, r2
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002bdc:	e002      	b.n	8002be4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	3b01      	subs	r3, #1
 8002be2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1f9      	bne.n	8002bde <HAL_ADC_ConfigChannel+0x1b2>
 8002bea:	e007      	b.n	8002bfc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bf0:	f043 0220 	orr.w	r2, r3, #32
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3714      	adds	r7, #20
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr
 8002c10:	40012400 	.word	0x40012400
 8002c14:	20000014 	.word	0x20000014
 8002c18:	431bde83 	.word	0x431bde83

08002c1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c24:	2300      	movs	r3, #0
 8002c26:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d040      	beq.n	8002cbc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689a      	ldr	r2, [r3, #8]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f042 0201 	orr.w	r2, r2, #1
 8002c48:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c4a:	4b1f      	ldr	r3, [pc, #124]	@ (8002cc8 <ADC_Enable+0xac>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a1f      	ldr	r2, [pc, #124]	@ (8002ccc <ADC_Enable+0xb0>)
 8002c50:	fba2 2303 	umull	r2, r3, r2, r3
 8002c54:	0c9b      	lsrs	r3, r3, #18
 8002c56:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002c58:	e002      	b.n	8002c60 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1f9      	bne.n	8002c5a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c66:	f7ff fbef 	bl	8002448 <HAL_GetTick>
 8002c6a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c6c:	e01f      	b.n	8002cae <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c6e:	f7ff fbeb 	bl	8002448 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d918      	bls.n	8002cae <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d011      	beq.n	8002cae <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c8e:	f043 0210 	orr.w	r2, r3, #16
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c9a:	f043 0201 	orr.w	r2, r3, #1
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e007      	b.n	8002cbe <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d1d8      	bne.n	8002c6e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	20000014 	.word	0x20000014
 8002ccc:	431bde83 	.word	0x431bde83

08002cd0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d12e      	bne.n	8002d48 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 0201 	bic.w	r2, r2, #1
 8002cf8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002cfa:	f7ff fba5 	bl	8002448 <HAL_GetTick>
 8002cfe:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002d00:	e01b      	b.n	8002d3a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d02:	f7ff fba1 	bl	8002448 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d914      	bls.n	8002d3a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d10d      	bne.n	8002d3a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d22:	f043 0210 	orr.w	r2, r3, #16
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d2e:	f043 0201 	orr.w	r2, r3, #1
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e007      	b.n	8002d4a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d0dc      	beq.n	8002d02 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
	...

08002d54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f003 0307 	and.w	r3, r3, #7
 8002d62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d64:	4b0c      	ldr	r3, [pc, #48]	@ (8002d98 <__NVIC_SetPriorityGrouping+0x44>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d6a:	68ba      	ldr	r2, [r7, #8]
 8002d6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d70:	4013      	ands	r3, r2
 8002d72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d86:	4a04      	ldr	r2, [pc, #16]	@ (8002d98 <__NVIC_SetPriorityGrouping+0x44>)
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	60d3      	str	r3, [r2, #12]
}
 8002d8c:	bf00      	nop
 8002d8e:	3714      	adds	r7, #20
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bc80      	pop	{r7}
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	e000ed00 	.word	0xe000ed00

08002d9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002da0:	4b04      	ldr	r3, [pc, #16]	@ (8002db4 <__NVIC_GetPriorityGrouping+0x18>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	0a1b      	lsrs	r3, r3, #8
 8002da6:	f003 0307 	and.w	r3, r3, #7
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bc80      	pop	{r7}
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	e000ed00 	.word	0xe000ed00

08002db8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	db0b      	blt.n	8002de2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dca:	79fb      	ldrb	r3, [r7, #7]
 8002dcc:	f003 021f 	and.w	r2, r3, #31
 8002dd0:	4906      	ldr	r1, [pc, #24]	@ (8002dec <__NVIC_EnableIRQ+0x34>)
 8002dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd6:	095b      	lsrs	r3, r3, #5
 8002dd8:	2001      	movs	r0, #1
 8002dda:	fa00 f202 	lsl.w	r2, r0, r2
 8002dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr
 8002dec:	e000e100 	.word	0xe000e100

08002df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	4603      	mov	r3, r0
 8002df8:	6039      	str	r1, [r7, #0]
 8002dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	db0a      	blt.n	8002e1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	b2da      	uxtb	r2, r3
 8002e08:	490c      	ldr	r1, [pc, #48]	@ (8002e3c <__NVIC_SetPriority+0x4c>)
 8002e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0e:	0112      	lsls	r2, r2, #4
 8002e10:	b2d2      	uxtb	r2, r2
 8002e12:	440b      	add	r3, r1
 8002e14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e18:	e00a      	b.n	8002e30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	b2da      	uxtb	r2, r3
 8002e1e:	4908      	ldr	r1, [pc, #32]	@ (8002e40 <__NVIC_SetPriority+0x50>)
 8002e20:	79fb      	ldrb	r3, [r7, #7]
 8002e22:	f003 030f 	and.w	r3, r3, #15
 8002e26:	3b04      	subs	r3, #4
 8002e28:	0112      	lsls	r2, r2, #4
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	440b      	add	r3, r1
 8002e2e:	761a      	strb	r2, [r3, #24]
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bc80      	pop	{r7}
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	e000e100 	.word	0xe000e100
 8002e40:	e000ed00 	.word	0xe000ed00

08002e44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b089      	sub	sp, #36	@ 0x24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f003 0307 	and.w	r3, r3, #7
 8002e56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	f1c3 0307 	rsb	r3, r3, #7
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	bf28      	it	cs
 8002e62:	2304      	movcs	r3, #4
 8002e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	3304      	adds	r3, #4
 8002e6a:	2b06      	cmp	r3, #6
 8002e6c:	d902      	bls.n	8002e74 <NVIC_EncodePriority+0x30>
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	3b03      	subs	r3, #3
 8002e72:	e000      	b.n	8002e76 <NVIC_EncodePriority+0x32>
 8002e74:	2300      	movs	r3, #0
 8002e76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e78:	f04f 32ff 	mov.w	r2, #4294967295
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	43da      	mvns	r2, r3
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	401a      	ands	r2, r3
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	fa01 f303 	lsl.w	r3, r1, r3
 8002e96:	43d9      	mvns	r1, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e9c:	4313      	orrs	r3, r2
         );
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3724      	adds	r7, #36	@ 0x24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr

08002ea8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002eb8:	d301      	bcc.n	8002ebe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e00f      	b.n	8002ede <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ebe:	4a0a      	ldr	r2, [pc, #40]	@ (8002ee8 <SysTick_Config+0x40>)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ec6:	210f      	movs	r1, #15
 8002ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ecc:	f7ff ff90 	bl	8002df0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ed0:	4b05      	ldr	r3, [pc, #20]	@ (8002ee8 <SysTick_Config+0x40>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ed6:	4b04      	ldr	r3, [pc, #16]	@ (8002ee8 <SysTick_Config+0x40>)
 8002ed8:	2207      	movs	r2, #7
 8002eda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	e000e010 	.word	0xe000e010

08002eec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f7ff ff2d 	bl	8002d54 <__NVIC_SetPriorityGrouping>
}
 8002efa:	bf00      	nop
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b086      	sub	sp, #24
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	4603      	mov	r3, r0
 8002f0a:	60b9      	str	r1, [r7, #8]
 8002f0c:	607a      	str	r2, [r7, #4]
 8002f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f10:	2300      	movs	r3, #0
 8002f12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f14:	f7ff ff42 	bl	8002d9c <__NVIC_GetPriorityGrouping>
 8002f18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	68b9      	ldr	r1, [r7, #8]
 8002f1e:	6978      	ldr	r0, [r7, #20]
 8002f20:	f7ff ff90 	bl	8002e44 <NVIC_EncodePriority>
 8002f24:	4602      	mov	r2, r0
 8002f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f2a:	4611      	mov	r1, r2
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff ff5f 	bl	8002df0 <__NVIC_SetPriority>
}
 8002f32:	bf00      	nop
 8002f34:	3718      	adds	r7, #24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b082      	sub	sp, #8
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	4603      	mov	r3, r0
 8002f42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7ff ff35 	bl	8002db8 <__NVIC_EnableIRQ>
}
 8002f4e:	bf00      	nop
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b082      	sub	sp, #8
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f7ff ffa2 	bl	8002ea8 <SysTick_Config>
 8002f64:	4603      	mov	r3, r0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	b085      	sub	sp, #20
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f76:	2300      	movs	r3, #0
 8002f78:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d008      	beq.n	8002f98 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2204      	movs	r2, #4
 8002f8a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e020      	b.n	8002fda <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f022 020e 	bic.w	r2, r2, #14
 8002fa6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f022 0201 	bic.w	r2, r2, #1
 8002fb6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	fa01 f202 	lsl.w	r2, r1, r2
 8002fc6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3714      	adds	r7, #20
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fec:	2300      	movs	r3, #0
 8002fee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d005      	beq.n	8003008 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2204      	movs	r2, #4
 8003000:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	73fb      	strb	r3, [r7, #15]
 8003006:	e051      	b.n	80030ac <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f022 020e 	bic.w	r2, r2, #14
 8003016:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 0201 	bic.w	r2, r2, #1
 8003026:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a22      	ldr	r2, [pc, #136]	@ (80030b8 <HAL_DMA_Abort_IT+0xd4>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d029      	beq.n	8003086 <HAL_DMA_Abort_IT+0xa2>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a21      	ldr	r2, [pc, #132]	@ (80030bc <HAL_DMA_Abort_IT+0xd8>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d022      	beq.n	8003082 <HAL_DMA_Abort_IT+0x9e>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a1f      	ldr	r2, [pc, #124]	@ (80030c0 <HAL_DMA_Abort_IT+0xdc>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d01a      	beq.n	800307c <HAL_DMA_Abort_IT+0x98>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a1e      	ldr	r2, [pc, #120]	@ (80030c4 <HAL_DMA_Abort_IT+0xe0>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d012      	beq.n	8003076 <HAL_DMA_Abort_IT+0x92>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a1c      	ldr	r2, [pc, #112]	@ (80030c8 <HAL_DMA_Abort_IT+0xe4>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d00a      	beq.n	8003070 <HAL_DMA_Abort_IT+0x8c>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a1b      	ldr	r2, [pc, #108]	@ (80030cc <HAL_DMA_Abort_IT+0xe8>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d102      	bne.n	800306a <HAL_DMA_Abort_IT+0x86>
 8003064:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003068:	e00e      	b.n	8003088 <HAL_DMA_Abort_IT+0xa4>
 800306a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800306e:	e00b      	b.n	8003088 <HAL_DMA_Abort_IT+0xa4>
 8003070:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003074:	e008      	b.n	8003088 <HAL_DMA_Abort_IT+0xa4>
 8003076:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800307a:	e005      	b.n	8003088 <HAL_DMA_Abort_IT+0xa4>
 800307c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003080:	e002      	b.n	8003088 <HAL_DMA_Abort_IT+0xa4>
 8003082:	2310      	movs	r3, #16
 8003084:	e000      	b.n	8003088 <HAL_DMA_Abort_IT+0xa4>
 8003086:	2301      	movs	r3, #1
 8003088:	4a11      	ldr	r2, [pc, #68]	@ (80030d0 <HAL_DMA_Abort_IT+0xec>)
 800308a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d003      	beq.n	80030ac <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	4798      	blx	r3
    } 
  }
  return status;
 80030ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	40020008 	.word	0x40020008
 80030bc:	4002001c 	.word	0x4002001c
 80030c0:	40020030 	.word	0x40020030
 80030c4:	40020044 	.word	0x40020044
 80030c8:	40020058 	.word	0x40020058
 80030cc:	4002006c 	.word	0x4002006c
 80030d0:	40020000 	.word	0x40020000

080030d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b08b      	sub	sp, #44	@ 0x2c
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030de:	2300      	movs	r3, #0
 80030e0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80030e2:	2300      	movs	r3, #0
 80030e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030e6:	e169      	b.n	80033bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80030e8:	2201      	movs	r2, #1
 80030ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	69fa      	ldr	r2, [r7, #28]
 80030f8:	4013      	ands	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	429a      	cmp	r2, r3
 8003102:	f040 8158 	bne.w	80033b6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	4a9a      	ldr	r2, [pc, #616]	@ (8003374 <HAL_GPIO_Init+0x2a0>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d05e      	beq.n	80031ce <HAL_GPIO_Init+0xfa>
 8003110:	4a98      	ldr	r2, [pc, #608]	@ (8003374 <HAL_GPIO_Init+0x2a0>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d875      	bhi.n	8003202 <HAL_GPIO_Init+0x12e>
 8003116:	4a98      	ldr	r2, [pc, #608]	@ (8003378 <HAL_GPIO_Init+0x2a4>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d058      	beq.n	80031ce <HAL_GPIO_Init+0xfa>
 800311c:	4a96      	ldr	r2, [pc, #600]	@ (8003378 <HAL_GPIO_Init+0x2a4>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d86f      	bhi.n	8003202 <HAL_GPIO_Init+0x12e>
 8003122:	4a96      	ldr	r2, [pc, #600]	@ (800337c <HAL_GPIO_Init+0x2a8>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d052      	beq.n	80031ce <HAL_GPIO_Init+0xfa>
 8003128:	4a94      	ldr	r2, [pc, #592]	@ (800337c <HAL_GPIO_Init+0x2a8>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d869      	bhi.n	8003202 <HAL_GPIO_Init+0x12e>
 800312e:	4a94      	ldr	r2, [pc, #592]	@ (8003380 <HAL_GPIO_Init+0x2ac>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d04c      	beq.n	80031ce <HAL_GPIO_Init+0xfa>
 8003134:	4a92      	ldr	r2, [pc, #584]	@ (8003380 <HAL_GPIO_Init+0x2ac>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d863      	bhi.n	8003202 <HAL_GPIO_Init+0x12e>
 800313a:	4a92      	ldr	r2, [pc, #584]	@ (8003384 <HAL_GPIO_Init+0x2b0>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d046      	beq.n	80031ce <HAL_GPIO_Init+0xfa>
 8003140:	4a90      	ldr	r2, [pc, #576]	@ (8003384 <HAL_GPIO_Init+0x2b0>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d85d      	bhi.n	8003202 <HAL_GPIO_Init+0x12e>
 8003146:	2b12      	cmp	r3, #18
 8003148:	d82a      	bhi.n	80031a0 <HAL_GPIO_Init+0xcc>
 800314a:	2b12      	cmp	r3, #18
 800314c:	d859      	bhi.n	8003202 <HAL_GPIO_Init+0x12e>
 800314e:	a201      	add	r2, pc, #4	@ (adr r2, 8003154 <HAL_GPIO_Init+0x80>)
 8003150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003154:	080031cf 	.word	0x080031cf
 8003158:	080031a9 	.word	0x080031a9
 800315c:	080031bb 	.word	0x080031bb
 8003160:	080031fd 	.word	0x080031fd
 8003164:	08003203 	.word	0x08003203
 8003168:	08003203 	.word	0x08003203
 800316c:	08003203 	.word	0x08003203
 8003170:	08003203 	.word	0x08003203
 8003174:	08003203 	.word	0x08003203
 8003178:	08003203 	.word	0x08003203
 800317c:	08003203 	.word	0x08003203
 8003180:	08003203 	.word	0x08003203
 8003184:	08003203 	.word	0x08003203
 8003188:	08003203 	.word	0x08003203
 800318c:	08003203 	.word	0x08003203
 8003190:	08003203 	.word	0x08003203
 8003194:	08003203 	.word	0x08003203
 8003198:	080031b1 	.word	0x080031b1
 800319c:	080031c5 	.word	0x080031c5
 80031a0:	4a79      	ldr	r2, [pc, #484]	@ (8003388 <HAL_GPIO_Init+0x2b4>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d013      	beq.n	80031ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80031a6:	e02c      	b.n	8003202 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	623b      	str	r3, [r7, #32]
          break;
 80031ae:	e029      	b.n	8003204 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	3304      	adds	r3, #4
 80031b6:	623b      	str	r3, [r7, #32]
          break;
 80031b8:	e024      	b.n	8003204 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	3308      	adds	r3, #8
 80031c0:	623b      	str	r3, [r7, #32]
          break;
 80031c2:	e01f      	b.n	8003204 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	330c      	adds	r3, #12
 80031ca:	623b      	str	r3, [r7, #32]
          break;
 80031cc:	e01a      	b.n	8003204 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d102      	bne.n	80031dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80031d6:	2304      	movs	r3, #4
 80031d8:	623b      	str	r3, [r7, #32]
          break;
 80031da:	e013      	b.n	8003204 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d105      	bne.n	80031f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031e4:	2308      	movs	r3, #8
 80031e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	69fa      	ldr	r2, [r7, #28]
 80031ec:	611a      	str	r2, [r3, #16]
          break;
 80031ee:	e009      	b.n	8003204 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031f0:	2308      	movs	r3, #8
 80031f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	69fa      	ldr	r2, [r7, #28]
 80031f8:	615a      	str	r2, [r3, #20]
          break;
 80031fa:	e003      	b.n	8003204 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80031fc:	2300      	movs	r3, #0
 80031fe:	623b      	str	r3, [r7, #32]
          break;
 8003200:	e000      	b.n	8003204 <HAL_GPIO_Init+0x130>
          break;
 8003202:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	2bff      	cmp	r3, #255	@ 0xff
 8003208:	d801      	bhi.n	800320e <HAL_GPIO_Init+0x13a>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	e001      	b.n	8003212 <HAL_GPIO_Init+0x13e>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	3304      	adds	r3, #4
 8003212:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	2bff      	cmp	r3, #255	@ 0xff
 8003218:	d802      	bhi.n	8003220 <HAL_GPIO_Init+0x14c>
 800321a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	e002      	b.n	8003226 <HAL_GPIO_Init+0x152>
 8003220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003222:	3b08      	subs	r3, #8
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	210f      	movs	r1, #15
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	fa01 f303 	lsl.w	r3, r1, r3
 8003234:	43db      	mvns	r3, r3
 8003236:	401a      	ands	r2, r3
 8003238:	6a39      	ldr	r1, [r7, #32]
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	fa01 f303 	lsl.w	r3, r1, r3
 8003240:	431a      	orrs	r2, r3
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800324e:	2b00      	cmp	r3, #0
 8003250:	f000 80b1 	beq.w	80033b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003254:	4b4d      	ldr	r3, [pc, #308]	@ (800338c <HAL_GPIO_Init+0x2b8>)
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	4a4c      	ldr	r2, [pc, #304]	@ (800338c <HAL_GPIO_Init+0x2b8>)
 800325a:	f043 0301 	orr.w	r3, r3, #1
 800325e:	6193      	str	r3, [r2, #24]
 8003260:	4b4a      	ldr	r3, [pc, #296]	@ (800338c <HAL_GPIO_Init+0x2b8>)
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	60bb      	str	r3, [r7, #8]
 800326a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800326c:	4a48      	ldr	r2, [pc, #288]	@ (8003390 <HAL_GPIO_Init+0x2bc>)
 800326e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003270:	089b      	lsrs	r3, r3, #2
 8003272:	3302      	adds	r3, #2
 8003274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003278:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800327a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327c:	f003 0303 	and.w	r3, r3, #3
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	220f      	movs	r2, #15
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	43db      	mvns	r3, r3
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	4013      	ands	r3, r2
 800328e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a40      	ldr	r2, [pc, #256]	@ (8003394 <HAL_GPIO_Init+0x2c0>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d013      	beq.n	80032c0 <HAL_GPIO_Init+0x1ec>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a3f      	ldr	r2, [pc, #252]	@ (8003398 <HAL_GPIO_Init+0x2c4>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d00d      	beq.n	80032bc <HAL_GPIO_Init+0x1e8>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a3e      	ldr	r2, [pc, #248]	@ (800339c <HAL_GPIO_Init+0x2c8>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d007      	beq.n	80032b8 <HAL_GPIO_Init+0x1e4>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a3d      	ldr	r2, [pc, #244]	@ (80033a0 <HAL_GPIO_Init+0x2cc>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d101      	bne.n	80032b4 <HAL_GPIO_Init+0x1e0>
 80032b0:	2303      	movs	r3, #3
 80032b2:	e006      	b.n	80032c2 <HAL_GPIO_Init+0x1ee>
 80032b4:	2304      	movs	r3, #4
 80032b6:	e004      	b.n	80032c2 <HAL_GPIO_Init+0x1ee>
 80032b8:	2302      	movs	r3, #2
 80032ba:	e002      	b.n	80032c2 <HAL_GPIO_Init+0x1ee>
 80032bc:	2301      	movs	r3, #1
 80032be:	e000      	b.n	80032c2 <HAL_GPIO_Init+0x1ee>
 80032c0:	2300      	movs	r3, #0
 80032c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032c4:	f002 0203 	and.w	r2, r2, #3
 80032c8:	0092      	lsls	r2, r2, #2
 80032ca:	4093      	lsls	r3, r2
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80032d2:	492f      	ldr	r1, [pc, #188]	@ (8003390 <HAL_GPIO_Init+0x2bc>)
 80032d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d6:	089b      	lsrs	r3, r3, #2
 80032d8:	3302      	adds	r3, #2
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d006      	beq.n	80032fa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80032ec:	4b2d      	ldr	r3, [pc, #180]	@ (80033a4 <HAL_GPIO_Init+0x2d0>)
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	492c      	ldr	r1, [pc, #176]	@ (80033a4 <HAL_GPIO_Init+0x2d0>)
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	608b      	str	r3, [r1, #8]
 80032f8:	e006      	b.n	8003308 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80032fa:	4b2a      	ldr	r3, [pc, #168]	@ (80033a4 <HAL_GPIO_Init+0x2d0>)
 80032fc:	689a      	ldr	r2, [r3, #8]
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	43db      	mvns	r3, r3
 8003302:	4928      	ldr	r1, [pc, #160]	@ (80033a4 <HAL_GPIO_Init+0x2d0>)
 8003304:	4013      	ands	r3, r2
 8003306:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d006      	beq.n	8003322 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003314:	4b23      	ldr	r3, [pc, #140]	@ (80033a4 <HAL_GPIO_Init+0x2d0>)
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	4922      	ldr	r1, [pc, #136]	@ (80033a4 <HAL_GPIO_Init+0x2d0>)
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	4313      	orrs	r3, r2
 800331e:	60cb      	str	r3, [r1, #12]
 8003320:	e006      	b.n	8003330 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003322:	4b20      	ldr	r3, [pc, #128]	@ (80033a4 <HAL_GPIO_Init+0x2d0>)
 8003324:	68da      	ldr	r2, [r3, #12]
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	43db      	mvns	r3, r3
 800332a:	491e      	ldr	r1, [pc, #120]	@ (80033a4 <HAL_GPIO_Init+0x2d0>)
 800332c:	4013      	ands	r3, r2
 800332e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d006      	beq.n	800334a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800333c:	4b19      	ldr	r3, [pc, #100]	@ (80033a4 <HAL_GPIO_Init+0x2d0>)
 800333e:	685a      	ldr	r2, [r3, #4]
 8003340:	4918      	ldr	r1, [pc, #96]	@ (80033a4 <HAL_GPIO_Init+0x2d0>)
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	4313      	orrs	r3, r2
 8003346:	604b      	str	r3, [r1, #4]
 8003348:	e006      	b.n	8003358 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800334a:	4b16      	ldr	r3, [pc, #88]	@ (80033a4 <HAL_GPIO_Init+0x2d0>)
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	43db      	mvns	r3, r3
 8003352:	4914      	ldr	r1, [pc, #80]	@ (80033a4 <HAL_GPIO_Init+0x2d0>)
 8003354:	4013      	ands	r3, r2
 8003356:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d021      	beq.n	80033a8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003364:	4b0f      	ldr	r3, [pc, #60]	@ (80033a4 <HAL_GPIO_Init+0x2d0>)
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	490e      	ldr	r1, [pc, #56]	@ (80033a4 <HAL_GPIO_Init+0x2d0>)
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	4313      	orrs	r3, r2
 800336e:	600b      	str	r3, [r1, #0]
 8003370:	e021      	b.n	80033b6 <HAL_GPIO_Init+0x2e2>
 8003372:	bf00      	nop
 8003374:	10320000 	.word	0x10320000
 8003378:	10310000 	.word	0x10310000
 800337c:	10220000 	.word	0x10220000
 8003380:	10210000 	.word	0x10210000
 8003384:	10120000 	.word	0x10120000
 8003388:	10110000 	.word	0x10110000
 800338c:	40021000 	.word	0x40021000
 8003390:	40010000 	.word	0x40010000
 8003394:	40010800 	.word	0x40010800
 8003398:	40010c00 	.word	0x40010c00
 800339c:	40011000 	.word	0x40011000
 80033a0:	40011400 	.word	0x40011400
 80033a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80033a8:	4b0b      	ldr	r3, [pc, #44]	@ (80033d8 <HAL_GPIO_Init+0x304>)
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	43db      	mvns	r3, r3
 80033b0:	4909      	ldr	r1, [pc, #36]	@ (80033d8 <HAL_GPIO_Init+0x304>)
 80033b2:	4013      	ands	r3, r2
 80033b4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80033b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b8:	3301      	adds	r3, #1
 80033ba:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c2:	fa22 f303 	lsr.w	r3, r2, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f47f ae8e 	bne.w	80030e8 <HAL_GPIO_Init+0x14>
  }
}
 80033cc:	bf00      	nop
 80033ce:	bf00      	nop
 80033d0:	372c      	adds	r7, #44	@ 0x2c
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bc80      	pop	{r7}
 80033d6:	4770      	bx	lr
 80033d8:	40010400 	.word	0x40010400

080033dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	460b      	mov	r3, r1
 80033e6:	807b      	strh	r3, [r7, #2]
 80033e8:	4613      	mov	r3, r2
 80033ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033ec:	787b      	ldrb	r3, [r7, #1]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033f2:	887a      	ldrh	r2, [r7, #2]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80033f8:	e003      	b.n	8003402 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80033fa:	887b      	ldrh	r3, [r7, #2]
 80033fc:	041a      	lsls	r2, r3, #16
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	611a      	str	r2, [r3, #16]
}
 8003402:	bf00      	nop
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	bc80      	pop	{r7}
 800340a:	4770      	bx	lr

0800340c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e12b      	b.n	8003676 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d106      	bne.n	8003438 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7fd fb44 	bl	8000ac0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2224      	movs	r2, #36	@ 0x24
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 0201 	bic.w	r2, r2, #1
 800344e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800345e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800346e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003470:	f001 fbca 	bl	8004c08 <HAL_RCC_GetPCLK1Freq>
 8003474:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	4a81      	ldr	r2, [pc, #516]	@ (8003680 <HAL_I2C_Init+0x274>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d807      	bhi.n	8003490 <HAL_I2C_Init+0x84>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	4a80      	ldr	r2, [pc, #512]	@ (8003684 <HAL_I2C_Init+0x278>)
 8003484:	4293      	cmp	r3, r2
 8003486:	bf94      	ite	ls
 8003488:	2301      	movls	r3, #1
 800348a:	2300      	movhi	r3, #0
 800348c:	b2db      	uxtb	r3, r3
 800348e:	e006      	b.n	800349e <HAL_I2C_Init+0x92>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	4a7d      	ldr	r2, [pc, #500]	@ (8003688 <HAL_I2C_Init+0x27c>)
 8003494:	4293      	cmp	r3, r2
 8003496:	bf94      	ite	ls
 8003498:	2301      	movls	r3, #1
 800349a:	2300      	movhi	r3, #0
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e0e7      	b.n	8003676 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	4a78      	ldr	r2, [pc, #480]	@ (800368c <HAL_I2C_Init+0x280>)
 80034aa:	fba2 2303 	umull	r2, r3, r2, r3
 80034ae:	0c9b      	lsrs	r3, r3, #18
 80034b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68ba      	ldr	r2, [r7, #8]
 80034c2:	430a      	orrs	r2, r1
 80034c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	4a6a      	ldr	r2, [pc, #424]	@ (8003680 <HAL_I2C_Init+0x274>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d802      	bhi.n	80034e0 <HAL_I2C_Init+0xd4>
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	3301      	adds	r3, #1
 80034de:	e009      	b.n	80034f4 <HAL_I2C_Init+0xe8>
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80034e6:	fb02 f303 	mul.w	r3, r2, r3
 80034ea:	4a69      	ldr	r2, [pc, #420]	@ (8003690 <HAL_I2C_Init+0x284>)
 80034ec:	fba2 2303 	umull	r2, r3, r2, r3
 80034f0:	099b      	lsrs	r3, r3, #6
 80034f2:	3301      	adds	r3, #1
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	6812      	ldr	r2, [r2, #0]
 80034f8:	430b      	orrs	r3, r1
 80034fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003506:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	495c      	ldr	r1, [pc, #368]	@ (8003680 <HAL_I2C_Init+0x274>)
 8003510:	428b      	cmp	r3, r1
 8003512:	d819      	bhi.n	8003548 <HAL_I2C_Init+0x13c>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	1e59      	subs	r1, r3, #1
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003522:	1c59      	adds	r1, r3, #1
 8003524:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003528:	400b      	ands	r3, r1
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00a      	beq.n	8003544 <HAL_I2C_Init+0x138>
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	1e59      	subs	r1, r3, #1
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	005b      	lsls	r3, r3, #1
 8003538:	fbb1 f3f3 	udiv	r3, r1, r3
 800353c:	3301      	adds	r3, #1
 800353e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003542:	e051      	b.n	80035e8 <HAL_I2C_Init+0x1dc>
 8003544:	2304      	movs	r3, #4
 8003546:	e04f      	b.n	80035e8 <HAL_I2C_Init+0x1dc>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d111      	bne.n	8003574 <HAL_I2C_Init+0x168>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	1e58      	subs	r0, r3, #1
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6859      	ldr	r1, [r3, #4]
 8003558:	460b      	mov	r3, r1
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	440b      	add	r3, r1
 800355e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003562:	3301      	adds	r3, #1
 8003564:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003568:	2b00      	cmp	r3, #0
 800356a:	bf0c      	ite	eq
 800356c:	2301      	moveq	r3, #1
 800356e:	2300      	movne	r3, #0
 8003570:	b2db      	uxtb	r3, r3
 8003572:	e012      	b.n	800359a <HAL_I2C_Init+0x18e>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	1e58      	subs	r0, r3, #1
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6859      	ldr	r1, [r3, #4]
 800357c:	460b      	mov	r3, r1
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	440b      	add	r3, r1
 8003582:	0099      	lsls	r1, r3, #2
 8003584:	440b      	add	r3, r1
 8003586:	fbb0 f3f3 	udiv	r3, r0, r3
 800358a:	3301      	adds	r3, #1
 800358c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003590:	2b00      	cmp	r3, #0
 8003592:	bf0c      	ite	eq
 8003594:	2301      	moveq	r3, #1
 8003596:	2300      	movne	r3, #0
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <HAL_I2C_Init+0x196>
 800359e:	2301      	movs	r3, #1
 80035a0:	e022      	b.n	80035e8 <HAL_I2C_Init+0x1dc>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10e      	bne.n	80035c8 <HAL_I2C_Init+0x1bc>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	1e58      	subs	r0, r3, #1
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6859      	ldr	r1, [r3, #4]
 80035b2:	460b      	mov	r3, r1
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	440b      	add	r3, r1
 80035b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80035bc:	3301      	adds	r3, #1
 80035be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035c6:	e00f      	b.n	80035e8 <HAL_I2C_Init+0x1dc>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	1e58      	subs	r0, r3, #1
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6859      	ldr	r1, [r3, #4]
 80035d0:	460b      	mov	r3, r1
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	440b      	add	r3, r1
 80035d6:	0099      	lsls	r1, r3, #2
 80035d8:	440b      	add	r3, r1
 80035da:	fbb0 f3f3 	udiv	r3, r0, r3
 80035de:	3301      	adds	r3, #1
 80035e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80035e8:	6879      	ldr	r1, [r7, #4]
 80035ea:	6809      	ldr	r1, [r1, #0]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	69da      	ldr	r2, [r3, #28]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	431a      	orrs	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	430a      	orrs	r2, r1
 800360a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003616:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6911      	ldr	r1, [r2, #16]
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	68d2      	ldr	r2, [r2, #12]
 8003622:	4311      	orrs	r1, r2
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6812      	ldr	r2, [r2, #0]
 8003628:	430b      	orrs	r3, r1
 800362a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	695a      	ldr	r2, [r3, #20]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	431a      	orrs	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	430a      	orrs	r2, r1
 8003646:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f042 0201 	orr.w	r2, r2, #1
 8003656:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2220      	movs	r2, #32
 8003662:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	000186a0 	.word	0x000186a0
 8003684:	001e847f 	.word	0x001e847f
 8003688:	003d08ff 	.word	0x003d08ff
 800368c:	431bde83 	.word	0x431bde83
 8003690:	10624dd3 	.word	0x10624dd3

08003694 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b088      	sub	sp, #32
 8003698:	af02      	add	r7, sp, #8
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	607a      	str	r2, [r7, #4]
 800369e:	461a      	mov	r2, r3
 80036a0:	460b      	mov	r3, r1
 80036a2:	817b      	strh	r3, [r7, #10]
 80036a4:	4613      	mov	r3, r2
 80036a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036a8:	f7fe fece 	bl	8002448 <HAL_GetTick>
 80036ac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b20      	cmp	r3, #32
 80036b8:	f040 80e0 	bne.w	800387c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	2319      	movs	r3, #25
 80036c2:	2201      	movs	r2, #1
 80036c4:	4970      	ldr	r1, [pc, #448]	@ (8003888 <HAL_I2C_Master_Transmit+0x1f4>)
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 fc9e 	bl	8004008 <I2C_WaitOnFlagUntilTimeout>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80036d2:	2302      	movs	r3, #2
 80036d4:	e0d3      	b.n	800387e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d101      	bne.n	80036e4 <HAL_I2C_Master_Transmit+0x50>
 80036e0:	2302      	movs	r3, #2
 80036e2:	e0cc      	b.n	800387e <HAL_I2C_Master_Transmit+0x1ea>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d007      	beq.n	800370a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f042 0201 	orr.w	r2, r2, #1
 8003708:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003718:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2221      	movs	r2, #33	@ 0x21
 800371e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2210      	movs	r2, #16
 8003726:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	893a      	ldrh	r2, [r7, #8]
 800373a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003740:	b29a      	uxth	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	4a50      	ldr	r2, [pc, #320]	@ (800388c <HAL_I2C_Master_Transmit+0x1f8>)
 800374a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800374c:	8979      	ldrh	r1, [r7, #10]
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	6a3a      	ldr	r2, [r7, #32]
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 fb08 	bl	8003d68 <I2C_MasterRequestWrite>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e08d      	b.n	800387e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003762:	2300      	movs	r3, #0
 8003764:	613b      	str	r3, [r7, #16]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	695b      	ldr	r3, [r3, #20]
 800376c:	613b      	str	r3, [r7, #16]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	613b      	str	r3, [r7, #16]
 8003776:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003778:	e066      	b.n	8003848 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800377a:	697a      	ldr	r2, [r7, #20]
 800377c:	6a39      	ldr	r1, [r7, #32]
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f000 fd5c 	bl	800423c <I2C_WaitOnTXEFlagUntilTimeout>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00d      	beq.n	80037a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800378e:	2b04      	cmp	r3, #4
 8003790:	d107      	bne.n	80037a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e06b      	b.n	800387e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037aa:	781a      	ldrb	r2, [r3, #0]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b6:	1c5a      	adds	r2, r3, #1
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	3b01      	subs	r3, #1
 80037c4:	b29a      	uxth	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ce:	3b01      	subs	r3, #1
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b04      	cmp	r3, #4
 80037e2:	d11b      	bne.n	800381c <HAL_I2C_Master_Transmit+0x188>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d017      	beq.n	800381c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f0:	781a      	ldrb	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fc:	1c5a      	adds	r2, r3, #1
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003806:	b29b      	uxth	r3, r3
 8003808:	3b01      	subs	r3, #1
 800380a:	b29a      	uxth	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003814:	3b01      	subs	r3, #1
 8003816:	b29a      	uxth	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	6a39      	ldr	r1, [r7, #32]
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f000 fd53 	bl	80042cc <I2C_WaitOnBTFFlagUntilTimeout>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00d      	beq.n	8003848 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003830:	2b04      	cmp	r3, #4
 8003832:	d107      	bne.n	8003844 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003842:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e01a      	b.n	800387e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800384c:	2b00      	cmp	r3, #0
 800384e:	d194      	bne.n	800377a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800385e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2220      	movs	r2, #32
 8003864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003878:	2300      	movs	r3, #0
 800387a:	e000      	b.n	800387e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800387c:	2302      	movs	r3, #2
  }
}
 800387e:	4618      	mov	r0, r3
 8003880:	3718      	adds	r7, #24
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	00100002 	.word	0x00100002
 800388c:	ffff0000 	.word	0xffff0000

08003890 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b08c      	sub	sp, #48	@ 0x30
 8003894:	af02      	add	r7, sp, #8
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	607a      	str	r2, [r7, #4]
 800389a:	461a      	mov	r2, r3
 800389c:	460b      	mov	r3, r1
 800389e:	817b      	strh	r3, [r7, #10]
 80038a0:	4613      	mov	r3, r2
 80038a2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80038a4:	2300      	movs	r3, #0
 80038a6:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038a8:	f7fe fdce 	bl	8002448 <HAL_GetTick>
 80038ac:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b20      	cmp	r3, #32
 80038b8:	f040 824b 	bne.w	8003d52 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038be:	9300      	str	r3, [sp, #0]
 80038c0:	2319      	movs	r3, #25
 80038c2:	2201      	movs	r2, #1
 80038c4:	497f      	ldr	r1, [pc, #508]	@ (8003ac4 <HAL_I2C_Master_Receive+0x234>)
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f000 fb9e 	bl	8004008 <I2C_WaitOnFlagUntilTimeout>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80038d2:	2302      	movs	r3, #2
 80038d4:	e23e      	b.n	8003d54 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d101      	bne.n	80038e4 <HAL_I2C_Master_Receive+0x54>
 80038e0:	2302      	movs	r3, #2
 80038e2:	e237      	b.n	8003d54 <HAL_I2C_Master_Receive+0x4c4>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d007      	beq.n	800390a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f042 0201 	orr.w	r2, r2, #1
 8003908:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003918:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2222      	movs	r2, #34	@ 0x22
 800391e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2210      	movs	r2, #16
 8003926:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	893a      	ldrh	r2, [r7, #8]
 800393a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003940:	b29a      	uxth	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	4a5f      	ldr	r2, [pc, #380]	@ (8003ac8 <HAL_I2C_Master_Receive+0x238>)
 800394a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800394c:	8979      	ldrh	r1, [r7, #10]
 800394e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003950:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f000 fa8a 	bl	8003e6c <I2C_MasterRequestRead>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e1f8      	b.n	8003d54 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003966:	2b00      	cmp	r3, #0
 8003968:	d113      	bne.n	8003992 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800396a:	2300      	movs	r3, #0
 800396c:	61fb      	str	r3, [r7, #28]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	695b      	ldr	r3, [r3, #20]
 8003974:	61fb      	str	r3, [r7, #28]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	61fb      	str	r3, [r7, #28]
 800397e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800398e:	601a      	str	r2, [r3, #0]
 8003990:	e1cc      	b.n	8003d2c <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003996:	2b01      	cmp	r3, #1
 8003998:	d11e      	bne.n	80039d8 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80039aa:	b672      	cpsid	i
}
 80039ac:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ae:	2300      	movs	r3, #0
 80039b0:	61bb      	str	r3, [r7, #24]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	61bb      	str	r3, [r7, #24]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	61bb      	str	r3, [r7, #24]
 80039c2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80039d4:	b662      	cpsie	i
}
 80039d6:	e035      	b.n	8003a44 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d11e      	bne.n	8003a1e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80039f0:	b672      	cpsid	i
}
 80039f2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039f4:	2300      	movs	r3, #0
 80039f6:	617b      	str	r3, [r7, #20]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	617b      	str	r3, [r7, #20]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	617b      	str	r3, [r7, #20]
 8003a08:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a18:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003a1a:	b662      	cpsie	i
}
 8003a1c:	e012      	b.n	8003a44 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a2e:	2300      	movs	r3, #0
 8003a30:	613b      	str	r3, [r7, #16]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	695b      	ldr	r3, [r3, #20]
 8003a38:	613b      	str	r3, [r7, #16]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	613b      	str	r3, [r7, #16]
 8003a42:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003a44:	e172      	b.n	8003d2c <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a4a:	2b03      	cmp	r3, #3
 8003a4c:	f200 811f 	bhi.w	8003c8e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d123      	bne.n	8003aa0 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a5a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f000 fc7d 	bl	800435c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e173      	b.n	8003d54 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	691a      	ldr	r2, [r3, #16]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a76:	b2d2      	uxtb	r2, r2
 8003a78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7e:	1c5a      	adds	r2, r3, #1
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	3b01      	subs	r3, #1
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003a9e:	e145      	b.n	8003d2c <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d152      	bne.n	8003b4e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aaa:	9300      	str	r3, [sp, #0]
 8003aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aae:	2200      	movs	r2, #0
 8003ab0:	4906      	ldr	r1, [pc, #24]	@ (8003acc <HAL_I2C_Master_Receive+0x23c>)
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f000 faa8 	bl	8004008 <I2C_WaitOnFlagUntilTimeout>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d008      	beq.n	8003ad0 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e148      	b.n	8003d54 <HAL_I2C_Master_Receive+0x4c4>
 8003ac2:	bf00      	nop
 8003ac4:	00100002 	.word	0x00100002
 8003ac8:	ffff0000 	.word	0xffff0000
 8003acc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003ad0:	b672      	cpsid	i
}
 8003ad2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ae2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	691a      	ldr	r2, [r3, #16]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aee:	b2d2      	uxtb	r2, r2
 8003af0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af6:	1c5a      	adds	r2, r3, #1
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b00:	3b01      	subs	r3, #1
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003b16:	b662      	cpsie	i
}
 8003b18:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	691a      	ldr	r2, [r3, #16]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b24:	b2d2      	uxtb	r2, r2
 8003b26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b2c:	1c5a      	adds	r2, r3, #1
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b36:	3b01      	subs	r3, #1
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	3b01      	subs	r3, #1
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b4c:	e0ee      	b.n	8003d2c <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b50:	9300      	str	r3, [sp, #0]
 8003b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b54:	2200      	movs	r2, #0
 8003b56:	4981      	ldr	r1, [pc, #516]	@ (8003d5c <HAL_I2C_Master_Receive+0x4cc>)
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 fa55 	bl	8004008 <I2C_WaitOnFlagUntilTimeout>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d001      	beq.n	8003b68 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e0f5      	b.n	8003d54 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b76:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b78:	b672      	cpsid	i
}
 8003b7a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	691a      	ldr	r2, [r3, #16]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b86:	b2d2      	uxtb	r2, r2
 8003b88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b8e:	1c5a      	adds	r2, r3, #1
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003bae:	4b6c      	ldr	r3, [pc, #432]	@ (8003d60 <HAL_I2C_Master_Receive+0x4d0>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	08db      	lsrs	r3, r3, #3
 8003bb4:	4a6b      	ldr	r2, [pc, #428]	@ (8003d64 <HAL_I2C_Master_Receive+0x4d4>)
 8003bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bba:	0a1a      	lsrs	r2, r3, #8
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	00da      	lsls	r2, r3, #3
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003bc8:	6a3b      	ldr	r3, [r7, #32]
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003bce:	6a3b      	ldr	r3, [r7, #32]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d118      	bne.n	8003c06 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2220      	movs	r2, #32
 8003bde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bee:	f043 0220 	orr.w	r2, r3, #32
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003bf6:	b662      	cpsie	i
}
 8003bf8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e0a6      	b.n	8003d54 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	f003 0304 	and.w	r3, r3, #4
 8003c10:	2b04      	cmp	r3, #4
 8003c12:	d1d9      	bne.n	8003bc8 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	691a      	ldr	r2, [r3, #16]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c2e:	b2d2      	uxtb	r2, r2
 8003c30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c36:	1c5a      	adds	r2, r3, #1
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c40:	3b01      	subs	r3, #1
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003c56:	b662      	cpsie	i
}
 8003c58:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	691a      	ldr	r2, [r3, #16]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c64:	b2d2      	uxtb	r2, r2
 8003c66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c6c:	1c5a      	adds	r2, r3, #1
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c76:	3b01      	subs	r3, #1
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	3b01      	subs	r3, #1
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c8c:	e04e      	b.n	8003d2c <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c90:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f000 fb62 	bl	800435c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e058      	b.n	8003d54 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	691a      	ldr	r2, [r3, #16]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cac:	b2d2      	uxtb	r2, r2
 8003cae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb4:	1c5a      	adds	r2, r3, #1
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	f003 0304 	and.w	r3, r3, #4
 8003cde:	2b04      	cmp	r3, #4
 8003ce0:	d124      	bne.n	8003d2c <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ce6:	2b03      	cmp	r3, #3
 8003ce8:	d107      	bne.n	8003cfa <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cf8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	691a      	ldr	r2, [r3, #16]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d04:	b2d2      	uxtb	r2, r2
 8003d06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d0c:	1c5a      	adds	r2, r3, #1
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d16:	3b01      	subs	r3, #1
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	3b01      	subs	r3, #1
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f47f ae88 	bne.w	8003a46 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2220      	movs	r2, #32
 8003d3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	e000      	b.n	8003d54 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8003d52:	2302      	movs	r3, #2
  }
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3728      	adds	r7, #40	@ 0x28
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	00010004 	.word	0x00010004
 8003d60:	20000014 	.word	0x20000014
 8003d64:	14f8b589 	.word	0x14f8b589

08003d68 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b088      	sub	sp, #32
 8003d6c:	af02      	add	r7, sp, #8
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	607a      	str	r2, [r7, #4]
 8003d72:	603b      	str	r3, [r7, #0]
 8003d74:	460b      	mov	r3, r1
 8003d76:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d7c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	2b08      	cmp	r3, #8
 8003d82:	d006      	beq.n	8003d92 <I2C_MasterRequestWrite+0x2a>
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d003      	beq.n	8003d92 <I2C_MasterRequestWrite+0x2a>
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003d90:	d108      	bne.n	8003da4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003da0:	601a      	str	r2, [r3, #0]
 8003da2:	e00b      	b.n	8003dbc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da8:	2b12      	cmp	r3, #18
 8003daa:	d107      	bne.n	8003dbc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003dba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	9300      	str	r3, [sp, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f000 f91d 	bl	8004008 <I2C_WaitOnFlagUntilTimeout>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00d      	beq.n	8003df0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003de2:	d103      	bne.n	8003dec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003dea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e035      	b.n	8003e5c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003df8:	d108      	bne.n	8003e0c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003dfa:	897b      	ldrh	r3, [r7, #10]
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	461a      	mov	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e08:	611a      	str	r2, [r3, #16]
 8003e0a:	e01b      	b.n	8003e44 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003e0c:	897b      	ldrh	r3, [r7, #10]
 8003e0e:	11db      	asrs	r3, r3, #7
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	f003 0306 	and.w	r3, r3, #6
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	f063 030f 	orn	r3, r3, #15
 8003e1c:	b2da      	uxtb	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	490e      	ldr	r1, [pc, #56]	@ (8003e64 <I2C_MasterRequestWrite+0xfc>)
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	f000 f966 	bl	80040fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e010      	b.n	8003e5c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003e3a:	897b      	ldrh	r3, [r7, #10]
 8003e3c:	b2da      	uxtb	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	4907      	ldr	r1, [pc, #28]	@ (8003e68 <I2C_MasterRequestWrite+0x100>)
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f000 f956 	bl	80040fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e000      	b.n	8003e5c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3718      	adds	r7, #24
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	00010008 	.word	0x00010008
 8003e68:	00010002 	.word	0x00010002

08003e6c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b088      	sub	sp, #32
 8003e70:	af02      	add	r7, sp, #8
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	607a      	str	r2, [r7, #4]
 8003e76:	603b      	str	r3, [r7, #0]
 8003e78:	460b      	mov	r3, r1
 8003e7a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e80:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e90:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	2b08      	cmp	r3, #8
 8003e96:	d006      	beq.n	8003ea6 <I2C_MasterRequestRead+0x3a>
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d003      	beq.n	8003ea6 <I2C_MasterRequestRead+0x3a>
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ea4:	d108      	bne.n	8003eb8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003eb4:	601a      	str	r2, [r3, #0]
 8003eb6:	e00b      	b.n	8003ed0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ebc:	2b11      	cmp	r3, #17
 8003ebe:	d107      	bne.n	8003ed0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ece:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	9300      	str	r3, [sp, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f000 f893 	bl	8004008 <I2C_WaitOnFlagUntilTimeout>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d00d      	beq.n	8003f04 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ef2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ef6:	d103      	bne.n	8003f00 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003efe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e079      	b.n	8003ff8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f0c:	d108      	bne.n	8003f20 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003f0e:	897b      	ldrh	r3, [r7, #10]
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	f043 0301 	orr.w	r3, r3, #1
 8003f16:	b2da      	uxtb	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	611a      	str	r2, [r3, #16]
 8003f1e:	e05f      	b.n	8003fe0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f20:	897b      	ldrh	r3, [r7, #10]
 8003f22:	11db      	asrs	r3, r3, #7
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	f003 0306 	and.w	r3, r3, #6
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	f063 030f 	orn	r3, r3, #15
 8003f30:	b2da      	uxtb	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	4930      	ldr	r1, [pc, #192]	@ (8004000 <I2C_MasterRequestRead+0x194>)
 8003f3e:	68f8      	ldr	r0, [r7, #12]
 8003f40:	f000 f8dc 	bl	80040fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e054      	b.n	8003ff8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f4e:	897b      	ldrh	r3, [r7, #10]
 8003f50:	b2da      	uxtb	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	4929      	ldr	r1, [pc, #164]	@ (8004004 <I2C_MasterRequestRead+0x198>)
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f000 f8cc 	bl	80040fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e044      	b.n	8003ff8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f6e:	2300      	movs	r3, #0
 8003f70:	613b      	str	r3, [r7, #16]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	613b      	str	r3, [r7, #16]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	613b      	str	r3, [r7, #16]
 8003f82:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f92:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	9300      	str	r3, [sp, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	f000 f831 	bl	8004008 <I2C_WaitOnFlagUntilTimeout>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00d      	beq.n	8003fc8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fba:	d103      	bne.n	8003fc4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fc2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e017      	b.n	8003ff8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003fc8:	897b      	ldrh	r3, [r7, #10]
 8003fca:	11db      	asrs	r3, r3, #7
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	f003 0306 	and.w	r3, r3, #6
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	f063 030e 	orn	r3, r3, #14
 8003fd8:	b2da      	uxtb	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	4907      	ldr	r1, [pc, #28]	@ (8004004 <I2C_MasterRequestRead+0x198>)
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f000 f888 	bl	80040fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e000      	b.n	8003ff8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3718      	adds	r7, #24
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	00010008 	.word	0x00010008
 8004004:	00010002 	.word	0x00010002

08004008 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	603b      	str	r3, [r7, #0]
 8004014:	4613      	mov	r3, r2
 8004016:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004018:	e048      	b.n	80040ac <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004020:	d044      	beq.n	80040ac <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004022:	f7fe fa11 	bl	8002448 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	429a      	cmp	r2, r3
 8004030:	d302      	bcc.n	8004038 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d139      	bne.n	80040ac <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	0c1b      	lsrs	r3, r3, #16
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b01      	cmp	r3, #1
 8004040:	d10d      	bne.n	800405e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	695b      	ldr	r3, [r3, #20]
 8004048:	43da      	mvns	r2, r3
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	4013      	ands	r3, r2
 800404e:	b29b      	uxth	r3, r3
 8004050:	2b00      	cmp	r3, #0
 8004052:	bf0c      	ite	eq
 8004054:	2301      	moveq	r3, #1
 8004056:	2300      	movne	r3, #0
 8004058:	b2db      	uxtb	r3, r3
 800405a:	461a      	mov	r2, r3
 800405c:	e00c      	b.n	8004078 <I2C_WaitOnFlagUntilTimeout+0x70>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	43da      	mvns	r2, r3
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	4013      	ands	r3, r2
 800406a:	b29b      	uxth	r3, r3
 800406c:	2b00      	cmp	r3, #0
 800406e:	bf0c      	ite	eq
 8004070:	2301      	moveq	r3, #1
 8004072:	2300      	movne	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	461a      	mov	r2, r3
 8004078:	79fb      	ldrb	r3, [r7, #7]
 800407a:	429a      	cmp	r2, r3
 800407c:	d116      	bne.n	80040ac <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2220      	movs	r2, #32
 8004088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004098:	f043 0220 	orr.w	r2, r3, #32
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e023      	b.n	80040f4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	0c1b      	lsrs	r3, r3, #16
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d10d      	bne.n	80040d2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	43da      	mvns	r2, r3
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	4013      	ands	r3, r2
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	bf0c      	ite	eq
 80040c8:	2301      	moveq	r3, #1
 80040ca:	2300      	movne	r3, #0
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	461a      	mov	r2, r3
 80040d0:	e00c      	b.n	80040ec <I2C_WaitOnFlagUntilTimeout+0xe4>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	43da      	mvns	r2, r3
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	4013      	ands	r3, r2
 80040de:	b29b      	uxth	r3, r3
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	bf0c      	ite	eq
 80040e4:	2301      	moveq	r3, #1
 80040e6:	2300      	movne	r3, #0
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	461a      	mov	r2, r3
 80040ec:	79fb      	ldrb	r3, [r7, #7]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d093      	beq.n	800401a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3710      	adds	r7, #16
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
 8004108:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800410a:	e071      	b.n	80041f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004116:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800411a:	d123      	bne.n	8004164 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800412a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004134:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2220      	movs	r2, #32
 8004140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004150:	f043 0204 	orr.w	r2, r3, #4
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e067      	b.n	8004234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800416a:	d041      	beq.n	80041f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800416c:	f7fe f96c 	bl	8002448 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	429a      	cmp	r2, r3
 800417a:	d302      	bcc.n	8004182 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d136      	bne.n	80041f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	0c1b      	lsrs	r3, r3, #16
 8004186:	b2db      	uxtb	r3, r3
 8004188:	2b01      	cmp	r3, #1
 800418a:	d10c      	bne.n	80041a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	43da      	mvns	r2, r3
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	4013      	ands	r3, r2
 8004198:	b29b      	uxth	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	bf14      	ite	ne
 800419e:	2301      	movne	r3, #1
 80041a0:	2300      	moveq	r3, #0
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	e00b      	b.n	80041be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	43da      	mvns	r2, r3
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	4013      	ands	r3, r2
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	bf14      	ite	ne
 80041b8:	2301      	movne	r3, #1
 80041ba:	2300      	moveq	r3, #0
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d016      	beq.n	80041f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2220      	movs	r2, #32
 80041cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041dc:	f043 0220 	orr.w	r2, r3, #32
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e021      	b.n	8004234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	0c1b      	lsrs	r3, r3, #16
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d10c      	bne.n	8004214 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	695b      	ldr	r3, [r3, #20]
 8004200:	43da      	mvns	r2, r3
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	4013      	ands	r3, r2
 8004206:	b29b      	uxth	r3, r3
 8004208:	2b00      	cmp	r3, #0
 800420a:	bf14      	ite	ne
 800420c:	2301      	movne	r3, #1
 800420e:	2300      	moveq	r3, #0
 8004210:	b2db      	uxtb	r3, r3
 8004212:	e00b      	b.n	800422c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	43da      	mvns	r2, r3
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	4013      	ands	r3, r2
 8004220:	b29b      	uxth	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	bf14      	ite	ne
 8004226:	2301      	movne	r3, #1
 8004228:	2300      	moveq	r3, #0
 800422a:	b2db      	uxtb	r3, r3
 800422c:	2b00      	cmp	r3, #0
 800422e:	f47f af6d 	bne.w	800410c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004248:	e034      	b.n	80042b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f000 f8e3 	bl	8004416 <I2C_IsAcknowledgeFailed>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e034      	b.n	80042c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004260:	d028      	beq.n	80042b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004262:	f7fe f8f1 	bl	8002448 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	429a      	cmp	r2, r3
 8004270:	d302      	bcc.n	8004278 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d11d      	bne.n	80042b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004282:	2b80      	cmp	r3, #128	@ 0x80
 8004284:	d016      	beq.n	80042b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2220      	movs	r2, #32
 8004290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a0:	f043 0220 	orr.w	r2, r3, #32
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e007      	b.n	80042c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042be:	2b80      	cmp	r3, #128	@ 0x80
 80042c0:	d1c3      	bne.n	800424a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3710      	adds	r7, #16
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042d8:	e034      	b.n	8004344 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	f000 f89b 	bl	8004416 <I2C_IsAcknowledgeFailed>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e034      	b.n	8004354 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f0:	d028      	beq.n	8004344 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042f2:	f7fe f8a9 	bl	8002448 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d302      	bcc.n	8004308 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d11d      	bne.n	8004344 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	f003 0304 	and.w	r3, r3, #4
 8004312:	2b04      	cmp	r3, #4
 8004314:	d016      	beq.n	8004344 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2220      	movs	r2, #32
 8004320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004330:	f043 0220 	orr.w	r2, r3, #32
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e007      	b.n	8004354 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	f003 0304 	and.w	r3, r3, #4
 800434e:	2b04      	cmp	r3, #4
 8004350:	d1c3      	bne.n	80042da <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	3710      	adds	r7, #16
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004368:	e049      	b.n	80043fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	695b      	ldr	r3, [r3, #20]
 8004370:	f003 0310 	and.w	r3, r3, #16
 8004374:	2b10      	cmp	r3, #16
 8004376:	d119      	bne.n	80043ac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f06f 0210 	mvn.w	r2, #16
 8004380:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2220      	movs	r2, #32
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e030      	b.n	800440e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ac:	f7fe f84c 	bl	8002448 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d302      	bcc.n	80043c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d11d      	bne.n	80043fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043cc:	2b40      	cmp	r3, #64	@ 0x40
 80043ce:	d016      	beq.n	80043fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2220      	movs	r2, #32
 80043da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ea:	f043 0220 	orr.w	r2, r3, #32
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e007      	b.n	800440e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004408:	2b40      	cmp	r3, #64	@ 0x40
 800440a:	d1ae      	bne.n	800436a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004416:	b480      	push	{r7}
 8004418:	b083      	sub	sp, #12
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	695b      	ldr	r3, [r3, #20]
 8004424:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004428:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800442c:	d11b      	bne.n	8004466 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004436:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2220      	movs	r2, #32
 8004442:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004452:	f043 0204 	orr.w	r2, r3, #4
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e000      	b.n	8004468 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	bc80      	pop	{r7}
 8004470:	4770      	bx	lr
	...

08004474 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b086      	sub	sp, #24
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e272      	b.n	800496c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	2b00      	cmp	r3, #0
 8004490:	f000 8087 	beq.w	80045a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004494:	4b92      	ldr	r3, [pc, #584]	@ (80046e0 <HAL_RCC_OscConfig+0x26c>)
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f003 030c 	and.w	r3, r3, #12
 800449c:	2b04      	cmp	r3, #4
 800449e:	d00c      	beq.n	80044ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80044a0:	4b8f      	ldr	r3, [pc, #572]	@ (80046e0 <HAL_RCC_OscConfig+0x26c>)
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f003 030c 	and.w	r3, r3, #12
 80044a8:	2b08      	cmp	r3, #8
 80044aa:	d112      	bne.n	80044d2 <HAL_RCC_OscConfig+0x5e>
 80044ac:	4b8c      	ldr	r3, [pc, #560]	@ (80046e0 <HAL_RCC_OscConfig+0x26c>)
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044b8:	d10b      	bne.n	80044d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044ba:	4b89      	ldr	r3, [pc, #548]	@ (80046e0 <HAL_RCC_OscConfig+0x26c>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d06c      	beq.n	80045a0 <HAL_RCC_OscConfig+0x12c>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d168      	bne.n	80045a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e24c      	b.n	800496c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044da:	d106      	bne.n	80044ea <HAL_RCC_OscConfig+0x76>
 80044dc:	4b80      	ldr	r3, [pc, #512]	@ (80046e0 <HAL_RCC_OscConfig+0x26c>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a7f      	ldr	r2, [pc, #508]	@ (80046e0 <HAL_RCC_OscConfig+0x26c>)
 80044e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044e6:	6013      	str	r3, [r2, #0]
 80044e8:	e02e      	b.n	8004548 <HAL_RCC_OscConfig+0xd4>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10c      	bne.n	800450c <HAL_RCC_OscConfig+0x98>
 80044f2:	4b7b      	ldr	r3, [pc, #492]	@ (80046e0 <HAL_RCC_OscConfig+0x26c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a7a      	ldr	r2, [pc, #488]	@ (80046e0 <HAL_RCC_OscConfig+0x26c>)
 80044f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	4b78      	ldr	r3, [pc, #480]	@ (80046e0 <HAL_RCC_OscConfig+0x26c>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a77      	ldr	r2, [pc, #476]	@ (80046e0 <HAL_RCC_OscConfig+0x26c>)
 8004504:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004508:	6013      	str	r3, [r2, #0]
 800450a:	e01d      	b.n	8004548 <HAL_RCC_OscConfig+0xd4>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004514:	d10c      	bne.n	8004530 <HAL_RCC_OscConfig+0xbc>
 8004516:	4b72      	ldr	r3, [pc, #456]	@ (80046e0 <HAL_RCC_OscConfig+0x26c>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a71      	ldr	r2, [pc, #452]	@ (80046e0 <HAL_RCC_OscConfig+0x26c>)
 800451c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004520:	6013      	str	r3, [r2, #0]
 8004522:	4b6f      	ldr	r3, [pc, #444]	@ (80046e0 <HAL_RCC_OscConfig+0x26c>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a6e      	ldr	r2, [pc, #440]	@ (80046e0 <HAL_RCC_OscConfig+0x26c>)
 8004528:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800452c:	6013      	str	r3, [r2, #0]
 800452e:	e00b      	b.n	8004548 <HAL_RCC_OscConfig+0xd4>
 8004530:	4b6b      	ldr	r3, [pc, #428]	@ (80046e0 <HAL_RCC_OscConfig+0x26c>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a6a      	ldr	r2, [pc, #424]	@ (80046e0 <HAL_RCC_OscConfig+0x26c>)
 8004536:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800453a:	6013      	str	r3, [r2, #0]
 800453c:	4b68      	ldr	r3, [pc, #416]	@ (80046e0 <HAL_RCC_OscConfig+0x26c>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a67      	ldr	r2, [pc, #412]	@ (80046e0 <HAL_RCC_OscConfig+0x26c>)
 8004542:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004546:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d013      	beq.n	8004578 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004550:	f7fd ff7a 	bl	8002448 <HAL_GetTick>
 8004554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004556:	e008      	b.n	800456a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004558:	f7fd ff76 	bl	8002448 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b64      	cmp	r3, #100	@ 0x64
 8004564:	d901      	bls.n	800456a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e200      	b.n	800496c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800456a:	4b5d      	ldr	r3, [pc, #372]	@ (80046e0 <HAL_RCC_OscConfig+0x26c>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d0f0      	beq.n	8004558 <HAL_RCC_OscConfig+0xe4>
 8004576:	e014      	b.n	80045a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004578:	f7fd ff66 	bl	8002448 <HAL_GetTick>
 800457c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800457e:	e008      	b.n	8004592 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004580:	f7fd ff62 	bl	8002448 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b64      	cmp	r3, #100	@ 0x64
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e1ec      	b.n	800496c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004592:	4b53      	ldr	r3, [pc, #332]	@ (80046e0 <HAL_RCC_OscConfig+0x26c>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1f0      	bne.n	8004580 <HAL_RCC_OscConfig+0x10c>
 800459e:	e000      	b.n	80045a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d063      	beq.n	8004676 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045ae:	4b4c      	ldr	r3, [pc, #304]	@ (80046e0 <HAL_RCC_OscConfig+0x26c>)
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f003 030c 	and.w	r3, r3, #12
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00b      	beq.n	80045d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80045ba:	4b49      	ldr	r3, [pc, #292]	@ (80046e0 <HAL_RCC_OscConfig+0x26c>)
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f003 030c 	and.w	r3, r3, #12
 80045c2:	2b08      	cmp	r3, #8
 80045c4:	d11c      	bne.n	8004600 <HAL_RCC_OscConfig+0x18c>
 80045c6:	4b46      	ldr	r3, [pc, #280]	@ (80046e0 <HAL_RCC_OscConfig+0x26c>)
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d116      	bne.n	8004600 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045d2:	4b43      	ldr	r3, [pc, #268]	@ (80046e0 <HAL_RCC_OscConfig+0x26c>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d005      	beq.n	80045ea <HAL_RCC_OscConfig+0x176>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d001      	beq.n	80045ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e1c0      	b.n	800496c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ea:	4b3d      	ldr	r3, [pc, #244]	@ (80046e0 <HAL_RCC_OscConfig+0x26c>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	00db      	lsls	r3, r3, #3
 80045f8:	4939      	ldr	r1, [pc, #228]	@ (80046e0 <HAL_RCC_OscConfig+0x26c>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045fe:	e03a      	b.n	8004676 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d020      	beq.n	800464a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004608:	4b36      	ldr	r3, [pc, #216]	@ (80046e4 <HAL_RCC_OscConfig+0x270>)
 800460a:	2201      	movs	r2, #1
 800460c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800460e:	f7fd ff1b 	bl	8002448 <HAL_GetTick>
 8004612:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004614:	e008      	b.n	8004628 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004616:	f7fd ff17 	bl	8002448 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	2b02      	cmp	r3, #2
 8004622:	d901      	bls.n	8004628 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e1a1      	b.n	800496c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004628:	4b2d      	ldr	r3, [pc, #180]	@ (80046e0 <HAL_RCC_OscConfig+0x26c>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d0f0      	beq.n	8004616 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004634:	4b2a      	ldr	r3, [pc, #168]	@ (80046e0 <HAL_RCC_OscConfig+0x26c>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	695b      	ldr	r3, [r3, #20]
 8004640:	00db      	lsls	r3, r3, #3
 8004642:	4927      	ldr	r1, [pc, #156]	@ (80046e0 <HAL_RCC_OscConfig+0x26c>)
 8004644:	4313      	orrs	r3, r2
 8004646:	600b      	str	r3, [r1, #0]
 8004648:	e015      	b.n	8004676 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800464a:	4b26      	ldr	r3, [pc, #152]	@ (80046e4 <HAL_RCC_OscConfig+0x270>)
 800464c:	2200      	movs	r2, #0
 800464e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004650:	f7fd fefa 	bl	8002448 <HAL_GetTick>
 8004654:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004656:	e008      	b.n	800466a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004658:	f7fd fef6 	bl	8002448 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b02      	cmp	r3, #2
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e180      	b.n	800496c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800466a:	4b1d      	ldr	r3, [pc, #116]	@ (80046e0 <HAL_RCC_OscConfig+0x26c>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1f0      	bne.n	8004658 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0308 	and.w	r3, r3, #8
 800467e:	2b00      	cmp	r3, #0
 8004680:	d03a      	beq.n	80046f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d019      	beq.n	80046be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800468a:	4b17      	ldr	r3, [pc, #92]	@ (80046e8 <HAL_RCC_OscConfig+0x274>)
 800468c:	2201      	movs	r2, #1
 800468e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004690:	f7fd feda 	bl	8002448 <HAL_GetTick>
 8004694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004696:	e008      	b.n	80046aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004698:	f7fd fed6 	bl	8002448 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e160      	b.n	800496c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046aa:	4b0d      	ldr	r3, [pc, #52]	@ (80046e0 <HAL_RCC_OscConfig+0x26c>)
 80046ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d0f0      	beq.n	8004698 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80046b6:	2001      	movs	r0, #1
 80046b8:	f000 face 	bl	8004c58 <RCC_Delay>
 80046bc:	e01c      	b.n	80046f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046be:	4b0a      	ldr	r3, [pc, #40]	@ (80046e8 <HAL_RCC_OscConfig+0x274>)
 80046c0:	2200      	movs	r2, #0
 80046c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046c4:	f7fd fec0 	bl	8002448 <HAL_GetTick>
 80046c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046ca:	e00f      	b.n	80046ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046cc:	f7fd febc 	bl	8002448 <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d908      	bls.n	80046ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e146      	b.n	800496c <HAL_RCC_OscConfig+0x4f8>
 80046de:	bf00      	nop
 80046e0:	40021000 	.word	0x40021000
 80046e4:	42420000 	.word	0x42420000
 80046e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046ec:	4b92      	ldr	r3, [pc, #584]	@ (8004938 <HAL_RCC_OscConfig+0x4c4>)
 80046ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1e9      	bne.n	80046cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0304 	and.w	r3, r3, #4
 8004700:	2b00      	cmp	r3, #0
 8004702:	f000 80a6 	beq.w	8004852 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004706:	2300      	movs	r3, #0
 8004708:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800470a:	4b8b      	ldr	r3, [pc, #556]	@ (8004938 <HAL_RCC_OscConfig+0x4c4>)
 800470c:	69db      	ldr	r3, [r3, #28]
 800470e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d10d      	bne.n	8004732 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004716:	4b88      	ldr	r3, [pc, #544]	@ (8004938 <HAL_RCC_OscConfig+0x4c4>)
 8004718:	69db      	ldr	r3, [r3, #28]
 800471a:	4a87      	ldr	r2, [pc, #540]	@ (8004938 <HAL_RCC_OscConfig+0x4c4>)
 800471c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004720:	61d3      	str	r3, [r2, #28]
 8004722:	4b85      	ldr	r3, [pc, #532]	@ (8004938 <HAL_RCC_OscConfig+0x4c4>)
 8004724:	69db      	ldr	r3, [r3, #28]
 8004726:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800472a:	60bb      	str	r3, [r7, #8]
 800472c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800472e:	2301      	movs	r3, #1
 8004730:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004732:	4b82      	ldr	r3, [pc, #520]	@ (800493c <HAL_RCC_OscConfig+0x4c8>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800473a:	2b00      	cmp	r3, #0
 800473c:	d118      	bne.n	8004770 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800473e:	4b7f      	ldr	r3, [pc, #508]	@ (800493c <HAL_RCC_OscConfig+0x4c8>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a7e      	ldr	r2, [pc, #504]	@ (800493c <HAL_RCC_OscConfig+0x4c8>)
 8004744:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004748:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800474a:	f7fd fe7d 	bl	8002448 <HAL_GetTick>
 800474e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004750:	e008      	b.n	8004764 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004752:	f7fd fe79 	bl	8002448 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b64      	cmp	r3, #100	@ 0x64
 800475e:	d901      	bls.n	8004764 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e103      	b.n	800496c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004764:	4b75      	ldr	r3, [pc, #468]	@ (800493c <HAL_RCC_OscConfig+0x4c8>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800476c:	2b00      	cmp	r3, #0
 800476e:	d0f0      	beq.n	8004752 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d106      	bne.n	8004786 <HAL_RCC_OscConfig+0x312>
 8004778:	4b6f      	ldr	r3, [pc, #444]	@ (8004938 <HAL_RCC_OscConfig+0x4c4>)
 800477a:	6a1b      	ldr	r3, [r3, #32]
 800477c:	4a6e      	ldr	r2, [pc, #440]	@ (8004938 <HAL_RCC_OscConfig+0x4c4>)
 800477e:	f043 0301 	orr.w	r3, r3, #1
 8004782:	6213      	str	r3, [r2, #32]
 8004784:	e02d      	b.n	80047e2 <HAL_RCC_OscConfig+0x36e>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10c      	bne.n	80047a8 <HAL_RCC_OscConfig+0x334>
 800478e:	4b6a      	ldr	r3, [pc, #424]	@ (8004938 <HAL_RCC_OscConfig+0x4c4>)
 8004790:	6a1b      	ldr	r3, [r3, #32]
 8004792:	4a69      	ldr	r2, [pc, #420]	@ (8004938 <HAL_RCC_OscConfig+0x4c4>)
 8004794:	f023 0301 	bic.w	r3, r3, #1
 8004798:	6213      	str	r3, [r2, #32]
 800479a:	4b67      	ldr	r3, [pc, #412]	@ (8004938 <HAL_RCC_OscConfig+0x4c4>)
 800479c:	6a1b      	ldr	r3, [r3, #32]
 800479e:	4a66      	ldr	r2, [pc, #408]	@ (8004938 <HAL_RCC_OscConfig+0x4c4>)
 80047a0:	f023 0304 	bic.w	r3, r3, #4
 80047a4:	6213      	str	r3, [r2, #32]
 80047a6:	e01c      	b.n	80047e2 <HAL_RCC_OscConfig+0x36e>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	2b05      	cmp	r3, #5
 80047ae:	d10c      	bne.n	80047ca <HAL_RCC_OscConfig+0x356>
 80047b0:	4b61      	ldr	r3, [pc, #388]	@ (8004938 <HAL_RCC_OscConfig+0x4c4>)
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	4a60      	ldr	r2, [pc, #384]	@ (8004938 <HAL_RCC_OscConfig+0x4c4>)
 80047b6:	f043 0304 	orr.w	r3, r3, #4
 80047ba:	6213      	str	r3, [r2, #32]
 80047bc:	4b5e      	ldr	r3, [pc, #376]	@ (8004938 <HAL_RCC_OscConfig+0x4c4>)
 80047be:	6a1b      	ldr	r3, [r3, #32]
 80047c0:	4a5d      	ldr	r2, [pc, #372]	@ (8004938 <HAL_RCC_OscConfig+0x4c4>)
 80047c2:	f043 0301 	orr.w	r3, r3, #1
 80047c6:	6213      	str	r3, [r2, #32]
 80047c8:	e00b      	b.n	80047e2 <HAL_RCC_OscConfig+0x36e>
 80047ca:	4b5b      	ldr	r3, [pc, #364]	@ (8004938 <HAL_RCC_OscConfig+0x4c4>)
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	4a5a      	ldr	r2, [pc, #360]	@ (8004938 <HAL_RCC_OscConfig+0x4c4>)
 80047d0:	f023 0301 	bic.w	r3, r3, #1
 80047d4:	6213      	str	r3, [r2, #32]
 80047d6:	4b58      	ldr	r3, [pc, #352]	@ (8004938 <HAL_RCC_OscConfig+0x4c4>)
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	4a57      	ldr	r2, [pc, #348]	@ (8004938 <HAL_RCC_OscConfig+0x4c4>)
 80047dc:	f023 0304 	bic.w	r3, r3, #4
 80047e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d015      	beq.n	8004816 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047ea:	f7fd fe2d 	bl	8002448 <HAL_GetTick>
 80047ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047f0:	e00a      	b.n	8004808 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047f2:	f7fd fe29 	bl	8002448 <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004800:	4293      	cmp	r3, r2
 8004802:	d901      	bls.n	8004808 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e0b1      	b.n	800496c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004808:	4b4b      	ldr	r3, [pc, #300]	@ (8004938 <HAL_RCC_OscConfig+0x4c4>)
 800480a:	6a1b      	ldr	r3, [r3, #32]
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d0ee      	beq.n	80047f2 <HAL_RCC_OscConfig+0x37e>
 8004814:	e014      	b.n	8004840 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004816:	f7fd fe17 	bl	8002448 <HAL_GetTick>
 800481a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800481c:	e00a      	b.n	8004834 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800481e:	f7fd fe13 	bl	8002448 <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	f241 3288 	movw	r2, #5000	@ 0x1388
 800482c:	4293      	cmp	r3, r2
 800482e:	d901      	bls.n	8004834 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e09b      	b.n	800496c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004834:	4b40      	ldr	r3, [pc, #256]	@ (8004938 <HAL_RCC_OscConfig+0x4c4>)
 8004836:	6a1b      	ldr	r3, [r3, #32]
 8004838:	f003 0302 	and.w	r3, r3, #2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1ee      	bne.n	800481e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004840:	7dfb      	ldrb	r3, [r7, #23]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d105      	bne.n	8004852 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004846:	4b3c      	ldr	r3, [pc, #240]	@ (8004938 <HAL_RCC_OscConfig+0x4c4>)
 8004848:	69db      	ldr	r3, [r3, #28]
 800484a:	4a3b      	ldr	r2, [pc, #236]	@ (8004938 <HAL_RCC_OscConfig+0x4c4>)
 800484c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004850:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	69db      	ldr	r3, [r3, #28]
 8004856:	2b00      	cmp	r3, #0
 8004858:	f000 8087 	beq.w	800496a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800485c:	4b36      	ldr	r3, [pc, #216]	@ (8004938 <HAL_RCC_OscConfig+0x4c4>)
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f003 030c 	and.w	r3, r3, #12
 8004864:	2b08      	cmp	r3, #8
 8004866:	d061      	beq.n	800492c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	69db      	ldr	r3, [r3, #28]
 800486c:	2b02      	cmp	r3, #2
 800486e:	d146      	bne.n	80048fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004870:	4b33      	ldr	r3, [pc, #204]	@ (8004940 <HAL_RCC_OscConfig+0x4cc>)
 8004872:	2200      	movs	r2, #0
 8004874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004876:	f7fd fde7 	bl	8002448 <HAL_GetTick>
 800487a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800487c:	e008      	b.n	8004890 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800487e:	f7fd fde3 	bl	8002448 <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	2b02      	cmp	r3, #2
 800488a:	d901      	bls.n	8004890 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e06d      	b.n	800496c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004890:	4b29      	ldr	r3, [pc, #164]	@ (8004938 <HAL_RCC_OscConfig+0x4c4>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1f0      	bne.n	800487e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a1b      	ldr	r3, [r3, #32]
 80048a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048a4:	d108      	bne.n	80048b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80048a6:	4b24      	ldr	r3, [pc, #144]	@ (8004938 <HAL_RCC_OscConfig+0x4c4>)
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	4921      	ldr	r1, [pc, #132]	@ (8004938 <HAL_RCC_OscConfig+0x4c4>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048b8:	4b1f      	ldr	r3, [pc, #124]	@ (8004938 <HAL_RCC_OscConfig+0x4c4>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a19      	ldr	r1, [r3, #32]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c8:	430b      	orrs	r3, r1
 80048ca:	491b      	ldr	r1, [pc, #108]	@ (8004938 <HAL_RCC_OscConfig+0x4c4>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048d0:	4b1b      	ldr	r3, [pc, #108]	@ (8004940 <HAL_RCC_OscConfig+0x4cc>)
 80048d2:	2201      	movs	r2, #1
 80048d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d6:	f7fd fdb7 	bl	8002448 <HAL_GetTick>
 80048da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048dc:	e008      	b.n	80048f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048de:	f7fd fdb3 	bl	8002448 <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d901      	bls.n	80048f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e03d      	b.n	800496c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048f0:	4b11      	ldr	r3, [pc, #68]	@ (8004938 <HAL_RCC_OscConfig+0x4c4>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d0f0      	beq.n	80048de <HAL_RCC_OscConfig+0x46a>
 80048fc:	e035      	b.n	800496a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048fe:	4b10      	ldr	r3, [pc, #64]	@ (8004940 <HAL_RCC_OscConfig+0x4cc>)
 8004900:	2200      	movs	r2, #0
 8004902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004904:	f7fd fda0 	bl	8002448 <HAL_GetTick>
 8004908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800490a:	e008      	b.n	800491e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800490c:	f7fd fd9c 	bl	8002448 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b02      	cmp	r3, #2
 8004918:	d901      	bls.n	800491e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e026      	b.n	800496c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800491e:	4b06      	ldr	r3, [pc, #24]	@ (8004938 <HAL_RCC_OscConfig+0x4c4>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1f0      	bne.n	800490c <HAL_RCC_OscConfig+0x498>
 800492a:	e01e      	b.n	800496a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	69db      	ldr	r3, [r3, #28]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d107      	bne.n	8004944 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e019      	b.n	800496c <HAL_RCC_OscConfig+0x4f8>
 8004938:	40021000 	.word	0x40021000
 800493c:	40007000 	.word	0x40007000
 8004940:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004944:	4b0b      	ldr	r3, [pc, #44]	@ (8004974 <HAL_RCC_OscConfig+0x500>)
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a1b      	ldr	r3, [r3, #32]
 8004954:	429a      	cmp	r2, r3
 8004956:	d106      	bne.n	8004966 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004962:	429a      	cmp	r2, r3
 8004964:	d001      	beq.n	800496a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e000      	b.n	800496c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3718      	adds	r7, #24
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	40021000 	.word	0x40021000

08004978 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d101      	bne.n	800498c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e0d0      	b.n	8004b2e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800498c:	4b6a      	ldr	r3, [pc, #424]	@ (8004b38 <HAL_RCC_ClockConfig+0x1c0>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0307 	and.w	r3, r3, #7
 8004994:	683a      	ldr	r2, [r7, #0]
 8004996:	429a      	cmp	r2, r3
 8004998:	d910      	bls.n	80049bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800499a:	4b67      	ldr	r3, [pc, #412]	@ (8004b38 <HAL_RCC_ClockConfig+0x1c0>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f023 0207 	bic.w	r2, r3, #7
 80049a2:	4965      	ldr	r1, [pc, #404]	@ (8004b38 <HAL_RCC_ClockConfig+0x1c0>)
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049aa:	4b63      	ldr	r3, [pc, #396]	@ (8004b38 <HAL_RCC_ClockConfig+0x1c0>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0307 	and.w	r3, r3, #7
 80049b2:	683a      	ldr	r2, [r7, #0]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d001      	beq.n	80049bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e0b8      	b.n	8004b2e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0302 	and.w	r3, r3, #2
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d020      	beq.n	8004a0a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0304 	and.w	r3, r3, #4
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d005      	beq.n	80049e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049d4:	4b59      	ldr	r3, [pc, #356]	@ (8004b3c <HAL_RCC_ClockConfig+0x1c4>)
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	4a58      	ldr	r2, [pc, #352]	@ (8004b3c <HAL_RCC_ClockConfig+0x1c4>)
 80049da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80049de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0308 	and.w	r3, r3, #8
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d005      	beq.n	80049f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049ec:	4b53      	ldr	r3, [pc, #332]	@ (8004b3c <HAL_RCC_ClockConfig+0x1c4>)
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	4a52      	ldr	r2, [pc, #328]	@ (8004b3c <HAL_RCC_ClockConfig+0x1c4>)
 80049f2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80049f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049f8:	4b50      	ldr	r3, [pc, #320]	@ (8004b3c <HAL_RCC_ClockConfig+0x1c4>)
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	494d      	ldr	r1, [pc, #308]	@ (8004b3c <HAL_RCC_ClockConfig+0x1c4>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d040      	beq.n	8004a98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d107      	bne.n	8004a2e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a1e:	4b47      	ldr	r3, [pc, #284]	@ (8004b3c <HAL_RCC_ClockConfig+0x1c4>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d115      	bne.n	8004a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e07f      	b.n	8004b2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d107      	bne.n	8004a46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a36:	4b41      	ldr	r3, [pc, #260]	@ (8004b3c <HAL_RCC_ClockConfig+0x1c4>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d109      	bne.n	8004a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e073      	b.n	8004b2e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a46:	4b3d      	ldr	r3, [pc, #244]	@ (8004b3c <HAL_RCC_ClockConfig+0x1c4>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0302 	and.w	r3, r3, #2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e06b      	b.n	8004b2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a56:	4b39      	ldr	r3, [pc, #228]	@ (8004b3c <HAL_RCC_ClockConfig+0x1c4>)
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f023 0203 	bic.w	r2, r3, #3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	4936      	ldr	r1, [pc, #216]	@ (8004b3c <HAL_RCC_ClockConfig+0x1c4>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a68:	f7fd fcee 	bl	8002448 <HAL_GetTick>
 8004a6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a6e:	e00a      	b.n	8004a86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a70:	f7fd fcea 	bl	8002448 <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d901      	bls.n	8004a86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e053      	b.n	8004b2e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a86:	4b2d      	ldr	r3, [pc, #180]	@ (8004b3c <HAL_RCC_ClockConfig+0x1c4>)
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f003 020c 	and.w	r2, r3, #12
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d1eb      	bne.n	8004a70 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a98:	4b27      	ldr	r3, [pc, #156]	@ (8004b38 <HAL_RCC_ClockConfig+0x1c0>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0307 	and.w	r3, r3, #7
 8004aa0:	683a      	ldr	r2, [r7, #0]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d210      	bcs.n	8004ac8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aa6:	4b24      	ldr	r3, [pc, #144]	@ (8004b38 <HAL_RCC_ClockConfig+0x1c0>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f023 0207 	bic.w	r2, r3, #7
 8004aae:	4922      	ldr	r1, [pc, #136]	@ (8004b38 <HAL_RCC_ClockConfig+0x1c0>)
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ab6:	4b20      	ldr	r3, [pc, #128]	@ (8004b38 <HAL_RCC_ClockConfig+0x1c0>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0307 	and.w	r3, r3, #7
 8004abe:	683a      	ldr	r2, [r7, #0]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d001      	beq.n	8004ac8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e032      	b.n	8004b2e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0304 	and.w	r3, r3, #4
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d008      	beq.n	8004ae6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ad4:	4b19      	ldr	r3, [pc, #100]	@ (8004b3c <HAL_RCC_ClockConfig+0x1c4>)
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	4916      	ldr	r1, [pc, #88]	@ (8004b3c <HAL_RCC_ClockConfig+0x1c4>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0308 	and.w	r3, r3, #8
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d009      	beq.n	8004b06 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004af2:	4b12      	ldr	r3, [pc, #72]	@ (8004b3c <HAL_RCC_ClockConfig+0x1c4>)
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	00db      	lsls	r3, r3, #3
 8004b00:	490e      	ldr	r1, [pc, #56]	@ (8004b3c <HAL_RCC_ClockConfig+0x1c4>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b06:	f000 f821 	bl	8004b4c <HAL_RCC_GetSysClockFreq>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b3c <HAL_RCC_ClockConfig+0x1c4>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	091b      	lsrs	r3, r3, #4
 8004b12:	f003 030f 	and.w	r3, r3, #15
 8004b16:	490a      	ldr	r1, [pc, #40]	@ (8004b40 <HAL_RCC_ClockConfig+0x1c8>)
 8004b18:	5ccb      	ldrb	r3, [r1, r3]
 8004b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b1e:	4a09      	ldr	r2, [pc, #36]	@ (8004b44 <HAL_RCC_ClockConfig+0x1cc>)
 8004b20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b22:	4b09      	ldr	r3, [pc, #36]	@ (8004b48 <HAL_RCC_ClockConfig+0x1d0>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7fd fc4c 	bl	80023c4 <HAL_InitTick>

  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3710      	adds	r7, #16
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	40022000 	.word	0x40022000
 8004b3c:	40021000 	.word	0x40021000
 8004b40:	08008664 	.word	0x08008664
 8004b44:	20000014 	.word	0x20000014
 8004b48:	20000018 	.word	0x20000018

08004b4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b087      	sub	sp, #28
 8004b50:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b52:	2300      	movs	r3, #0
 8004b54:	60fb      	str	r3, [r7, #12]
 8004b56:	2300      	movs	r3, #0
 8004b58:	60bb      	str	r3, [r7, #8]
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	617b      	str	r3, [r7, #20]
 8004b5e:	2300      	movs	r3, #0
 8004b60:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004b62:	2300      	movs	r3, #0
 8004b64:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004b66:	4b1e      	ldr	r3, [pc, #120]	@ (8004be0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f003 030c 	and.w	r3, r3, #12
 8004b72:	2b04      	cmp	r3, #4
 8004b74:	d002      	beq.n	8004b7c <HAL_RCC_GetSysClockFreq+0x30>
 8004b76:	2b08      	cmp	r3, #8
 8004b78:	d003      	beq.n	8004b82 <HAL_RCC_GetSysClockFreq+0x36>
 8004b7a:	e027      	b.n	8004bcc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b7c:	4b19      	ldr	r3, [pc, #100]	@ (8004be4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b7e:	613b      	str	r3, [r7, #16]
      break;
 8004b80:	e027      	b.n	8004bd2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	0c9b      	lsrs	r3, r3, #18
 8004b86:	f003 030f 	and.w	r3, r3, #15
 8004b8a:	4a17      	ldr	r2, [pc, #92]	@ (8004be8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004b8c:	5cd3      	ldrb	r3, [r2, r3]
 8004b8e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d010      	beq.n	8004bbc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b9a:	4b11      	ldr	r3, [pc, #68]	@ (8004be0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	0c5b      	lsrs	r3, r3, #17
 8004ba0:	f003 0301 	and.w	r3, r3, #1
 8004ba4:	4a11      	ldr	r2, [pc, #68]	@ (8004bec <HAL_RCC_GetSysClockFreq+0xa0>)
 8004ba6:	5cd3      	ldrb	r3, [r2, r3]
 8004ba8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a0d      	ldr	r2, [pc, #52]	@ (8004be4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004bae:	fb03 f202 	mul.w	r2, r3, r2
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb8:	617b      	str	r3, [r7, #20]
 8004bba:	e004      	b.n	8004bc6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a0c      	ldr	r2, [pc, #48]	@ (8004bf0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004bc0:	fb02 f303 	mul.w	r3, r2, r3
 8004bc4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	613b      	str	r3, [r7, #16]
      break;
 8004bca:	e002      	b.n	8004bd2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004bcc:	4b05      	ldr	r3, [pc, #20]	@ (8004be4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004bce:	613b      	str	r3, [r7, #16]
      break;
 8004bd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bd2:	693b      	ldr	r3, [r7, #16]
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	371c      	adds	r7, #28
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bc80      	pop	{r7}
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	40021000 	.word	0x40021000
 8004be4:	007a1200 	.word	0x007a1200
 8004be8:	0800867c 	.word	0x0800867c
 8004bec:	0800868c 	.word	0x0800868c
 8004bf0:	003d0900 	.word	0x003d0900

08004bf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bf8:	4b02      	ldr	r3, [pc, #8]	@ (8004c04 <HAL_RCC_GetHCLKFreq+0x10>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bc80      	pop	{r7}
 8004c02:	4770      	bx	lr
 8004c04:	20000014 	.word	0x20000014

08004c08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c0c:	f7ff fff2 	bl	8004bf4 <HAL_RCC_GetHCLKFreq>
 8004c10:	4602      	mov	r2, r0
 8004c12:	4b05      	ldr	r3, [pc, #20]	@ (8004c28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	0a1b      	lsrs	r3, r3, #8
 8004c18:	f003 0307 	and.w	r3, r3, #7
 8004c1c:	4903      	ldr	r1, [pc, #12]	@ (8004c2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c1e:	5ccb      	ldrb	r3, [r1, r3]
 8004c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	08008674 	.word	0x08008674

08004c30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c34:	f7ff ffde 	bl	8004bf4 <HAL_RCC_GetHCLKFreq>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	4b05      	ldr	r3, [pc, #20]	@ (8004c50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	0adb      	lsrs	r3, r3, #11
 8004c40:	f003 0307 	and.w	r3, r3, #7
 8004c44:	4903      	ldr	r1, [pc, #12]	@ (8004c54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c46:	5ccb      	ldrb	r3, [r1, r3]
 8004c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	40021000 	.word	0x40021000
 8004c54:	08008674 	.word	0x08008674

08004c58 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004c60:	4b0a      	ldr	r3, [pc, #40]	@ (8004c8c <RCC_Delay+0x34>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a0a      	ldr	r2, [pc, #40]	@ (8004c90 <RCC_Delay+0x38>)
 8004c66:	fba2 2303 	umull	r2, r3, r2, r3
 8004c6a:	0a5b      	lsrs	r3, r3, #9
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	fb02 f303 	mul.w	r3, r2, r3
 8004c72:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004c74:	bf00      	nop
  }
  while (Delay --);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	1e5a      	subs	r2, r3, #1
 8004c7a:	60fa      	str	r2, [r7, #12]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1f9      	bne.n	8004c74 <RCC_Delay+0x1c>
}
 8004c80:	bf00      	nop
 8004c82:	bf00      	nop
 8004c84:	3714      	adds	r7, #20
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bc80      	pop	{r7}
 8004c8a:	4770      	bx	lr
 8004c8c:	20000014 	.word	0x20000014
 8004c90:	10624dd3 	.word	0x10624dd3

08004c94 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b086      	sub	sp, #24
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	613b      	str	r3, [r7, #16]
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0301 	and.w	r3, r3, #1
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d07d      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cb4:	4b4f      	ldr	r3, [pc, #316]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cb6:	69db      	ldr	r3, [r3, #28]
 8004cb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10d      	bne.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cc0:	4b4c      	ldr	r3, [pc, #304]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cc2:	69db      	ldr	r3, [r3, #28]
 8004cc4:	4a4b      	ldr	r2, [pc, #300]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cca:	61d3      	str	r3, [r2, #28]
 8004ccc:	4b49      	ldr	r3, [pc, #292]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cce:	69db      	ldr	r3, [r3, #28]
 8004cd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cd4:	60bb      	str	r3, [r7, #8]
 8004cd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cdc:	4b46      	ldr	r3, [pc, #280]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d118      	bne.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ce8:	4b43      	ldr	r3, [pc, #268]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a42      	ldr	r2, [pc, #264]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cf2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cf4:	f7fd fba8 	bl	8002448 <HAL_GetTick>
 8004cf8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cfa:	e008      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cfc:	f7fd fba4 	bl	8002448 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	2b64      	cmp	r3, #100	@ 0x64
 8004d08:	d901      	bls.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e06d      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d0e:	4b3a      	ldr	r3, [pc, #232]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d0f0      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d1a:	4b36      	ldr	r3, [pc, #216]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d1c:	6a1b      	ldr	r3, [r3, #32]
 8004d1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d22:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d02e      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d027      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d38:	4b2e      	ldr	r3, [pc, #184]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d3a:	6a1b      	ldr	r3, [r3, #32]
 8004d3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d40:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d42:	4b2e      	ldr	r3, [pc, #184]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d44:	2201      	movs	r2, #1
 8004d46:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d48:	4b2c      	ldr	r3, [pc, #176]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004d4e:	4a29      	ldr	r2, [pc, #164]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d014      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d5e:	f7fd fb73 	bl	8002448 <HAL_GetTick>
 8004d62:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d64:	e00a      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d66:	f7fd fb6f 	bl	8002448 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d901      	bls.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e036      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d7c:	4b1d      	ldr	r3, [pc, #116]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d7e:	6a1b      	ldr	r3, [r3, #32]
 8004d80:	f003 0302 	and.w	r3, r3, #2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d0ee      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d88:	4b1a      	ldr	r3, [pc, #104]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d8a:	6a1b      	ldr	r3, [r3, #32]
 8004d8c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	4917      	ldr	r1, [pc, #92]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d9a:	7dfb      	ldrb	r3, [r7, #23]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d105      	bne.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004da0:	4b14      	ldr	r3, [pc, #80]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004da2:	69db      	ldr	r3, [r3, #28]
 8004da4:	4a13      	ldr	r2, [pc, #76]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004da6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004daa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d008      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004db8:	4b0e      	ldr	r3, [pc, #56]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	490b      	ldr	r1, [pc, #44]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0310 	and.w	r3, r3, #16
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d008      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004dd6:	4b07      	ldr	r3, [pc, #28]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	4904      	ldr	r1, [pc, #16]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3718      	adds	r7, #24
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	40021000 	.word	0x40021000
 8004df8:	40007000 	.word	0x40007000
 8004dfc:	42420440 	.word	0x42420440

08004e00 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b088      	sub	sp, #32
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	617b      	str	r3, [r7, #20]
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	61fb      	str	r3, [r7, #28]
 8004e10:	2300      	movs	r3, #0
 8004e12:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004e14:	2300      	movs	r3, #0
 8004e16:	60fb      	str	r3, [r7, #12]
 8004e18:	2300      	movs	r3, #0
 8004e1a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b10      	cmp	r3, #16
 8004e20:	d00a      	beq.n	8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2b10      	cmp	r3, #16
 8004e26:	f200 808a 	bhi.w	8004f3e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d045      	beq.n	8004ebc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d075      	beq.n	8004f22 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004e36:	e082      	b.n	8004f3e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004e38:	4b46      	ldr	r3, [pc, #280]	@ (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004e3e:	4b45      	ldr	r3, [pc, #276]	@ (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d07b      	beq.n	8004f42 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	0c9b      	lsrs	r3, r3, #18
 8004e4e:	f003 030f 	and.w	r3, r3, #15
 8004e52:	4a41      	ldr	r2, [pc, #260]	@ (8004f58 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004e54:	5cd3      	ldrb	r3, [r2, r3]
 8004e56:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d015      	beq.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004e62:	4b3c      	ldr	r3, [pc, #240]	@ (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	0c5b      	lsrs	r3, r3, #17
 8004e68:	f003 0301 	and.w	r3, r3, #1
 8004e6c:	4a3b      	ldr	r2, [pc, #236]	@ (8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004e6e:	5cd3      	ldrb	r3, [r2, r3]
 8004e70:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00d      	beq.n	8004e98 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004e7c:	4a38      	ldr	r2, [pc, #224]	@ (8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	fb02 f303 	mul.w	r3, r2, r3
 8004e8a:	61fb      	str	r3, [r7, #28]
 8004e8c:	e004      	b.n	8004e98 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	4a34      	ldr	r2, [pc, #208]	@ (8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004e92:	fb02 f303 	mul.w	r3, r2, r3
 8004e96:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004e98:	4b2e      	ldr	r3, [pc, #184]	@ (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ea0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ea4:	d102      	bne.n	8004eac <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	61bb      	str	r3, [r7, #24]
      break;
 8004eaa:	e04a      	b.n	8004f42 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	005b      	lsls	r3, r3, #1
 8004eb0:	4a2d      	ldr	r2, [pc, #180]	@ (8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb6:	085b      	lsrs	r3, r3, #1
 8004eb8:	61bb      	str	r3, [r7, #24]
      break;
 8004eba:	e042      	b.n	8004f42 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004ebc:	4b25      	ldr	r3, [pc, #148]	@ (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004ebe:	6a1b      	ldr	r3, [r3, #32]
 8004ec0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ec8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ecc:	d108      	bne.n	8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f003 0302 	and.w	r3, r3, #2
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d003      	beq.n	8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004ed8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004edc:	61bb      	str	r3, [r7, #24]
 8004ede:	e01f      	b.n	8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ee6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004eea:	d109      	bne.n	8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004eec:	4b19      	ldr	r3, [pc, #100]	@ (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef0:	f003 0302 	and.w	r3, r3, #2
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d003      	beq.n	8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004ef8:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004efc:	61bb      	str	r3, [r7, #24]
 8004efe:	e00f      	b.n	8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f0a:	d11c      	bne.n	8004f46 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004f0c:	4b11      	ldr	r3, [pc, #68]	@ (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d016      	beq.n	8004f46 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004f18:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8004f1c:	61bb      	str	r3, [r7, #24]
      break;
 8004f1e:	e012      	b.n	8004f46 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004f20:	e011      	b.n	8004f46 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004f22:	f7ff fe85 	bl	8004c30 <HAL_RCC_GetPCLK2Freq>
 8004f26:	4602      	mov	r2, r0
 8004f28:	4b0a      	ldr	r3, [pc, #40]	@ (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	0b9b      	lsrs	r3, r3, #14
 8004f2e:	f003 0303 	and.w	r3, r3, #3
 8004f32:	3301      	adds	r3, #1
 8004f34:	005b      	lsls	r3, r3, #1
 8004f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f3a:	61bb      	str	r3, [r7, #24]
      break;
 8004f3c:	e004      	b.n	8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004f3e:	bf00      	nop
 8004f40:	e002      	b.n	8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004f42:	bf00      	nop
 8004f44:	e000      	b.n	8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004f46:	bf00      	nop
    }
  }
  return (frequency);
 8004f48:	69bb      	ldr	r3, [r7, #24]
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3720      	adds	r7, #32
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	40021000 	.word	0x40021000
 8004f58:	08008690 	.word	0x08008690
 8004f5c:	080086a0 	.word	0x080086a0
 8004f60:	007a1200 	.word	0x007a1200
 8004f64:	003d0900 	.word	0x003d0900
 8004f68:	aaaaaaab 	.word	0xaaaaaaab

08004f6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d101      	bne.n	8004f7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e041      	b.n	8005002 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d106      	bne.n	8004f98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f7fd f8a6 	bl	80020e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2202      	movs	r2, #2
 8004f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	3304      	adds	r3, #4
 8004fa8:	4619      	mov	r1, r3
 8004faa:	4610      	mov	r0, r2
 8004fac:	f000 fab0 	bl	8005510 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3708      	adds	r7, #8
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800500a:	b580      	push	{r7, lr}
 800500c:	b082      	sub	sp, #8
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d101      	bne.n	800501c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e041      	b.n	80050a0 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005022:	b2db      	uxtb	r3, r3
 8005024:	2b00      	cmp	r3, #0
 8005026:	d106      	bne.n	8005036 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 f839 	bl	80050a8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2202      	movs	r2, #2
 800503a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	3304      	adds	r3, #4
 8005046:	4619      	mov	r1, r3
 8005048:	4610      	mov	r0, r2
 800504a:	f000 fa61 	bl	8005510 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2201      	movs	r2, #1
 800505a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2201      	movs	r2, #1
 800506a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2201      	movs	r2, #1
 8005072:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2201      	movs	r2, #1
 800507a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2201      	movs	r2, #1
 8005082:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3708      	adds	r7, #8
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bc80      	pop	{r7}
 80050b8:	4770      	bx	lr
	...

080050bc <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d109      	bne.n	80050e0 <HAL_TIM_OC_Start+0x24>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	bf14      	ite	ne
 80050d8:	2301      	movne	r3, #1
 80050da:	2300      	moveq	r3, #0
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	e022      	b.n	8005126 <HAL_TIM_OC_Start+0x6a>
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	2b04      	cmp	r3, #4
 80050e4:	d109      	bne.n	80050fa <HAL_TIM_OC_Start+0x3e>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	bf14      	ite	ne
 80050f2:	2301      	movne	r3, #1
 80050f4:	2300      	moveq	r3, #0
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	e015      	b.n	8005126 <HAL_TIM_OC_Start+0x6a>
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	2b08      	cmp	r3, #8
 80050fe:	d109      	bne.n	8005114 <HAL_TIM_OC_Start+0x58>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005106:	b2db      	uxtb	r3, r3
 8005108:	2b01      	cmp	r3, #1
 800510a:	bf14      	ite	ne
 800510c:	2301      	movne	r3, #1
 800510e:	2300      	moveq	r3, #0
 8005110:	b2db      	uxtb	r3, r3
 8005112:	e008      	b.n	8005126 <HAL_TIM_OC_Start+0x6a>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b01      	cmp	r3, #1
 800511e:	bf14      	ite	ne
 8005120:	2301      	movne	r3, #1
 8005122:	2300      	moveq	r3, #0
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b00      	cmp	r3, #0
 8005128:	d001      	beq.n	800512e <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e05e      	b.n	80051ec <HAL_TIM_OC_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d104      	bne.n	800513e <HAL_TIM_OC_Start+0x82>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2202      	movs	r2, #2
 8005138:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800513c:	e013      	b.n	8005166 <HAL_TIM_OC_Start+0xaa>
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	2b04      	cmp	r3, #4
 8005142:	d104      	bne.n	800514e <HAL_TIM_OC_Start+0x92>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2202      	movs	r2, #2
 8005148:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800514c:	e00b      	b.n	8005166 <HAL_TIM_OC_Start+0xaa>
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	2b08      	cmp	r3, #8
 8005152:	d104      	bne.n	800515e <HAL_TIM_OC_Start+0xa2>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2202      	movs	r2, #2
 8005158:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800515c:	e003      	b.n	8005166 <HAL_TIM_OC_Start+0xaa>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2202      	movs	r2, #2
 8005162:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2201      	movs	r2, #1
 800516c:	6839      	ldr	r1, [r7, #0]
 800516e:	4618      	mov	r0, r3
 8005170:	f000 fc5a 	bl	8005a28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a1e      	ldr	r2, [pc, #120]	@ (80051f4 <HAL_TIM_OC_Start+0x138>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d107      	bne.n	800518e <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800518c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a18      	ldr	r2, [pc, #96]	@ (80051f4 <HAL_TIM_OC_Start+0x138>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d00e      	beq.n	80051b6 <HAL_TIM_OC_Start+0xfa>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051a0:	d009      	beq.n	80051b6 <HAL_TIM_OC_Start+0xfa>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a14      	ldr	r2, [pc, #80]	@ (80051f8 <HAL_TIM_OC_Start+0x13c>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d004      	beq.n	80051b6 <HAL_TIM_OC_Start+0xfa>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a12      	ldr	r2, [pc, #72]	@ (80051fc <HAL_TIM_OC_Start+0x140>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d111      	bne.n	80051da <HAL_TIM_OC_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f003 0307 	and.w	r3, r3, #7
 80051c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2b06      	cmp	r3, #6
 80051c6:	d010      	beq.n	80051ea <HAL_TIM_OC_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f042 0201 	orr.w	r2, r2, #1
 80051d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051d8:	e007      	b.n	80051ea <HAL_TIM_OC_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f042 0201 	orr.w	r2, r2, #1
 80051e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3710      	adds	r7, #16
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	40012c00 	.word	0x40012c00
 80051f8:	40000400 	.word	0x40000400
 80051fc:	40000800 	.word	0x40000800

08005200 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2200      	movs	r2, #0
 8005210:	6839      	ldr	r1, [r7, #0]
 8005212:	4618      	mov	r0, r3
 8005214:	f000 fc08 	bl	8005a28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a29      	ldr	r2, [pc, #164]	@ (80052c4 <HAL_TIM_OC_Stop+0xc4>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d117      	bne.n	8005252 <HAL_TIM_OC_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	6a1a      	ldr	r2, [r3, #32]
 8005228:	f241 1311 	movw	r3, #4369	@ 0x1111
 800522c:	4013      	ands	r3, r2
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10f      	bne.n	8005252 <HAL_TIM_OC_Stop+0x52>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	6a1a      	ldr	r2, [r3, #32]
 8005238:	f240 4344 	movw	r3, #1092	@ 0x444
 800523c:	4013      	ands	r3, r2
 800523e:	2b00      	cmp	r3, #0
 8005240:	d107      	bne.n	8005252 <HAL_TIM_OC_Stop+0x52>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005250:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	6a1a      	ldr	r2, [r3, #32]
 8005258:	f241 1311 	movw	r3, #4369	@ 0x1111
 800525c:	4013      	ands	r3, r2
 800525e:	2b00      	cmp	r3, #0
 8005260:	d10f      	bne.n	8005282 <HAL_TIM_OC_Stop+0x82>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	6a1a      	ldr	r2, [r3, #32]
 8005268:	f240 4344 	movw	r3, #1092	@ 0x444
 800526c:	4013      	ands	r3, r2
 800526e:	2b00      	cmp	r3, #0
 8005270:	d107      	bne.n	8005282 <HAL_TIM_OC_Stop+0x82>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f022 0201 	bic.w	r2, r2, #1
 8005280:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d104      	bne.n	8005292 <HAL_TIM_OC_Stop+0x92>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005290:	e013      	b.n	80052ba <HAL_TIM_OC_Stop+0xba>
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	2b04      	cmp	r3, #4
 8005296:	d104      	bne.n	80052a2 <HAL_TIM_OC_Stop+0xa2>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052a0:	e00b      	b.n	80052ba <HAL_TIM_OC_Stop+0xba>
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	2b08      	cmp	r3, #8
 80052a6:	d104      	bne.n	80052b2 <HAL_TIM_OC_Stop+0xb2>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052b0:	e003      	b.n	80052ba <HAL_TIM_OC_Stop+0xba>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2201      	movs	r2, #1
 80052b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3708      	adds	r7, #8
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	40012c00 	.word	0x40012c00

080052c8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052d4:	2300      	movs	r3, #0
 80052d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d101      	bne.n	80052e6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80052e2:	2302      	movs	r3, #2
 80052e4:	e048      	b.n	8005378 <HAL_TIM_OC_ConfigChannel+0xb0>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2201      	movs	r2, #1
 80052ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2b0c      	cmp	r3, #12
 80052f2:	d839      	bhi.n	8005368 <HAL_TIM_OC_ConfigChannel+0xa0>
 80052f4:	a201      	add	r2, pc, #4	@ (adr r2, 80052fc <HAL_TIM_OC_ConfigChannel+0x34>)
 80052f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052fa:	bf00      	nop
 80052fc:	08005331 	.word	0x08005331
 8005300:	08005369 	.word	0x08005369
 8005304:	08005369 	.word	0x08005369
 8005308:	08005369 	.word	0x08005369
 800530c:	0800533f 	.word	0x0800533f
 8005310:	08005369 	.word	0x08005369
 8005314:	08005369 	.word	0x08005369
 8005318:	08005369 	.word	0x08005369
 800531c:	0800534d 	.word	0x0800534d
 8005320:	08005369 	.word	0x08005369
 8005324:	08005369 	.word	0x08005369
 8005328:	08005369 	.word	0x08005369
 800532c:	0800535b 	.word	0x0800535b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68b9      	ldr	r1, [r7, #8]
 8005336:	4618      	mov	r0, r3
 8005338:	f000 f958 	bl	80055ec <TIM_OC1_SetConfig>
      break;
 800533c:	e017      	b.n	800536e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68b9      	ldr	r1, [r7, #8]
 8005344:	4618      	mov	r0, r3
 8005346:	f000 f9b7 	bl	80056b8 <TIM_OC2_SetConfig>
      break;
 800534a:	e010      	b.n	800536e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68b9      	ldr	r1, [r7, #8]
 8005352:	4618      	mov	r0, r3
 8005354:	f000 fa1a 	bl	800578c <TIM_OC3_SetConfig>
      break;
 8005358:	e009      	b.n	800536e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68b9      	ldr	r1, [r7, #8]
 8005360:	4618      	mov	r0, r3
 8005362:	f000 fa7d 	bl	8005860 <TIM_OC4_SetConfig>
      break;
 8005366:	e002      	b.n	800536e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	75fb      	strb	r3, [r7, #23]
      break;
 800536c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005376:	7dfb      	ldrb	r3, [r7, #23]
}
 8005378:	4618      	mov	r0, r3
 800537a:	3718      	adds	r7, #24
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800538a:	2300      	movs	r3, #0
 800538c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005394:	2b01      	cmp	r3, #1
 8005396:	d101      	bne.n	800539c <HAL_TIM_ConfigClockSource+0x1c>
 8005398:	2302      	movs	r3, #2
 800539a:	e0b4      	b.n	8005506 <HAL_TIM_ConfigClockSource+0x186>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2202      	movs	r2, #2
 80053a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80053ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80053c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68ba      	ldr	r2, [r7, #8]
 80053ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053d4:	d03e      	beq.n	8005454 <HAL_TIM_ConfigClockSource+0xd4>
 80053d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053da:	f200 8087 	bhi.w	80054ec <HAL_TIM_ConfigClockSource+0x16c>
 80053de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053e2:	f000 8086 	beq.w	80054f2 <HAL_TIM_ConfigClockSource+0x172>
 80053e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053ea:	d87f      	bhi.n	80054ec <HAL_TIM_ConfigClockSource+0x16c>
 80053ec:	2b70      	cmp	r3, #112	@ 0x70
 80053ee:	d01a      	beq.n	8005426 <HAL_TIM_ConfigClockSource+0xa6>
 80053f0:	2b70      	cmp	r3, #112	@ 0x70
 80053f2:	d87b      	bhi.n	80054ec <HAL_TIM_ConfigClockSource+0x16c>
 80053f4:	2b60      	cmp	r3, #96	@ 0x60
 80053f6:	d050      	beq.n	800549a <HAL_TIM_ConfigClockSource+0x11a>
 80053f8:	2b60      	cmp	r3, #96	@ 0x60
 80053fa:	d877      	bhi.n	80054ec <HAL_TIM_ConfigClockSource+0x16c>
 80053fc:	2b50      	cmp	r3, #80	@ 0x50
 80053fe:	d03c      	beq.n	800547a <HAL_TIM_ConfigClockSource+0xfa>
 8005400:	2b50      	cmp	r3, #80	@ 0x50
 8005402:	d873      	bhi.n	80054ec <HAL_TIM_ConfigClockSource+0x16c>
 8005404:	2b40      	cmp	r3, #64	@ 0x40
 8005406:	d058      	beq.n	80054ba <HAL_TIM_ConfigClockSource+0x13a>
 8005408:	2b40      	cmp	r3, #64	@ 0x40
 800540a:	d86f      	bhi.n	80054ec <HAL_TIM_ConfigClockSource+0x16c>
 800540c:	2b30      	cmp	r3, #48	@ 0x30
 800540e:	d064      	beq.n	80054da <HAL_TIM_ConfigClockSource+0x15a>
 8005410:	2b30      	cmp	r3, #48	@ 0x30
 8005412:	d86b      	bhi.n	80054ec <HAL_TIM_ConfigClockSource+0x16c>
 8005414:	2b20      	cmp	r3, #32
 8005416:	d060      	beq.n	80054da <HAL_TIM_ConfigClockSource+0x15a>
 8005418:	2b20      	cmp	r3, #32
 800541a:	d867      	bhi.n	80054ec <HAL_TIM_ConfigClockSource+0x16c>
 800541c:	2b00      	cmp	r3, #0
 800541e:	d05c      	beq.n	80054da <HAL_TIM_ConfigClockSource+0x15a>
 8005420:	2b10      	cmp	r3, #16
 8005422:	d05a      	beq.n	80054da <HAL_TIM_ConfigClockSource+0x15a>
 8005424:	e062      	b.n	80054ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005436:	f000 fad8 	bl	80059ea <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005448:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68ba      	ldr	r2, [r7, #8]
 8005450:	609a      	str	r2, [r3, #8]
      break;
 8005452:	e04f      	b.n	80054f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005464:	f000 fac1 	bl	80059ea <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689a      	ldr	r2, [r3, #8]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005476:	609a      	str	r2, [r3, #8]
      break;
 8005478:	e03c      	b.n	80054f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005486:	461a      	mov	r2, r3
 8005488:	f000 fa38 	bl	80058fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2150      	movs	r1, #80	@ 0x50
 8005492:	4618      	mov	r0, r3
 8005494:	f000 fa8f 	bl	80059b6 <TIM_ITRx_SetConfig>
      break;
 8005498:	e02c      	b.n	80054f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054a6:	461a      	mov	r2, r3
 80054a8:	f000 fa56 	bl	8005958 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2160      	movs	r1, #96	@ 0x60
 80054b2:	4618      	mov	r0, r3
 80054b4:	f000 fa7f 	bl	80059b6 <TIM_ITRx_SetConfig>
      break;
 80054b8:	e01c      	b.n	80054f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054c6:	461a      	mov	r2, r3
 80054c8:	f000 fa18 	bl	80058fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2140      	movs	r1, #64	@ 0x40
 80054d2:	4618      	mov	r0, r3
 80054d4:	f000 fa6f 	bl	80059b6 <TIM_ITRx_SetConfig>
      break;
 80054d8:	e00c      	b.n	80054f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4619      	mov	r1, r3
 80054e4:	4610      	mov	r0, r2
 80054e6:	f000 fa66 	bl	80059b6 <TIM_ITRx_SetConfig>
      break;
 80054ea:	e003      	b.n	80054f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	73fb      	strb	r3, [r7, #15]
      break;
 80054f0:	e000      	b.n	80054f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80054f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005504:	7bfb      	ldrb	r3, [r7, #15]
}
 8005506:	4618      	mov	r0, r3
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
	...

08005510 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a2f      	ldr	r2, [pc, #188]	@ (80055e0 <TIM_Base_SetConfig+0xd0>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d00b      	beq.n	8005540 <TIM_Base_SetConfig+0x30>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800552e:	d007      	beq.n	8005540 <TIM_Base_SetConfig+0x30>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a2c      	ldr	r2, [pc, #176]	@ (80055e4 <TIM_Base_SetConfig+0xd4>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d003      	beq.n	8005540 <TIM_Base_SetConfig+0x30>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a2b      	ldr	r2, [pc, #172]	@ (80055e8 <TIM_Base_SetConfig+0xd8>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d108      	bne.n	8005552 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005546:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	4313      	orrs	r3, r2
 8005550:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a22      	ldr	r2, [pc, #136]	@ (80055e0 <TIM_Base_SetConfig+0xd0>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d00b      	beq.n	8005572 <TIM_Base_SetConfig+0x62>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005560:	d007      	beq.n	8005572 <TIM_Base_SetConfig+0x62>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a1f      	ldr	r2, [pc, #124]	@ (80055e4 <TIM_Base_SetConfig+0xd4>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d003      	beq.n	8005572 <TIM_Base_SetConfig+0x62>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a1e      	ldr	r2, [pc, #120]	@ (80055e8 <TIM_Base_SetConfig+0xd8>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d108      	bne.n	8005584 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005578:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	4313      	orrs	r3, r2
 8005582:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	4313      	orrs	r3, r2
 8005590:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	689a      	ldr	r2, [r3, #8]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a0d      	ldr	r2, [pc, #52]	@ (80055e0 <TIM_Base_SetConfig+0xd0>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d103      	bne.n	80055b8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	691a      	ldr	r2, [r3, #16]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d005      	beq.n	80055d6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	f023 0201 	bic.w	r2, r3, #1
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	611a      	str	r2, [r3, #16]
  }
}
 80055d6:	bf00      	nop
 80055d8:	3714      	adds	r7, #20
 80055da:	46bd      	mov	sp, r7
 80055dc:	bc80      	pop	{r7}
 80055de:	4770      	bx	lr
 80055e0:	40012c00 	.word	0x40012c00
 80055e4:	40000400 	.word	0x40000400
 80055e8:	40000800 	.word	0x40000800

080055ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b087      	sub	sp, #28
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a1b      	ldr	r3, [r3, #32]
 8005600:	f023 0201 	bic.w	r2, r3, #1
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800561a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f023 0303 	bic.w	r3, r3, #3
 8005622:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	4313      	orrs	r3, r2
 800562c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	f023 0302 	bic.w	r3, r3, #2
 8005634:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	4313      	orrs	r3, r2
 800563e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a1c      	ldr	r2, [pc, #112]	@ (80056b4 <TIM_OC1_SetConfig+0xc8>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d10c      	bne.n	8005662 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	f023 0308 	bic.w	r3, r3, #8
 800564e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	697a      	ldr	r2, [r7, #20]
 8005656:	4313      	orrs	r3, r2
 8005658:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	f023 0304 	bic.w	r3, r3, #4
 8005660:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a13      	ldr	r2, [pc, #76]	@ (80056b4 <TIM_OC1_SetConfig+0xc8>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d111      	bne.n	800568e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005670:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005678:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	695b      	ldr	r3, [r3, #20]
 800567e:	693a      	ldr	r2, [r7, #16]
 8005680:	4313      	orrs	r3, r2
 8005682:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	4313      	orrs	r3, r2
 800568c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	685a      	ldr	r2, [r3, #4]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	697a      	ldr	r2, [r7, #20]
 80056a6:	621a      	str	r2, [r3, #32]
}
 80056a8:	bf00      	nop
 80056aa:	371c      	adds	r7, #28
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bc80      	pop	{r7}
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	40012c00 	.word	0x40012c00

080056b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b087      	sub	sp, #28
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a1b      	ldr	r3, [r3, #32]
 80056cc:	f023 0210 	bic.w	r2, r3, #16
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	021b      	lsls	r3, r3, #8
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	f023 0320 	bic.w	r3, r3, #32
 8005702:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	011b      	lsls	r3, r3, #4
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	4313      	orrs	r3, r2
 800570e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a1d      	ldr	r2, [pc, #116]	@ (8005788 <TIM_OC2_SetConfig+0xd0>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d10d      	bne.n	8005734 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800571e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	011b      	lsls	r3, r3, #4
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	4313      	orrs	r3, r2
 800572a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005732:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a14      	ldr	r2, [pc, #80]	@ (8005788 <TIM_OC2_SetConfig+0xd0>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d113      	bne.n	8005764 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005742:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800574a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	695b      	ldr	r3, [r3, #20]
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	4313      	orrs	r3, r2
 8005756:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	4313      	orrs	r3, r2
 8005762:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	685a      	ldr	r2, [r3, #4]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	621a      	str	r2, [r3, #32]
}
 800577e:	bf00      	nop
 8005780:	371c      	adds	r7, #28
 8005782:	46bd      	mov	sp, r7
 8005784:	bc80      	pop	{r7}
 8005786:	4770      	bx	lr
 8005788:	40012c00 	.word	0x40012c00

0800578c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800578c:	b480      	push	{r7}
 800578e:	b087      	sub	sp, #28
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a1b      	ldr	r3, [r3, #32]
 800579a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a1b      	ldr	r3, [r3, #32]
 80057a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	69db      	ldr	r3, [r3, #28]
 80057b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f023 0303 	bic.w	r3, r3, #3
 80057c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80057d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	021b      	lsls	r3, r3, #8
 80057dc:	697a      	ldr	r2, [r7, #20]
 80057de:	4313      	orrs	r3, r2
 80057e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a1d      	ldr	r2, [pc, #116]	@ (800585c <TIM_OC3_SetConfig+0xd0>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d10d      	bne.n	8005806 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80057f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	021b      	lsls	r3, r3, #8
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005804:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a14      	ldr	r2, [pc, #80]	@ (800585c <TIM_OC3_SetConfig+0xd0>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d113      	bne.n	8005836 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005814:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800581c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	011b      	lsls	r3, r3, #4
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	4313      	orrs	r3, r2
 8005828:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	011b      	lsls	r3, r3, #4
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	4313      	orrs	r3, r2
 8005834:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	693a      	ldr	r2, [r7, #16]
 800583a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	685a      	ldr	r2, [r3, #4]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	621a      	str	r2, [r3, #32]
}
 8005850:	bf00      	nop
 8005852:	371c      	adds	r7, #28
 8005854:	46bd      	mov	sp, r7
 8005856:	bc80      	pop	{r7}
 8005858:	4770      	bx	lr
 800585a:	bf00      	nop
 800585c:	40012c00 	.word	0x40012c00

08005860 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005860:	b480      	push	{r7}
 8005862:	b087      	sub	sp, #28
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a1b      	ldr	r3, [r3, #32]
 800586e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a1b      	ldr	r3, [r3, #32]
 8005874:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	69db      	ldr	r3, [r3, #28]
 8005886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800588e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005896:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	021b      	lsls	r3, r3, #8
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80058aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	031b      	lsls	r3, r3, #12
 80058b2:	693a      	ldr	r2, [r7, #16]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a0f      	ldr	r2, [pc, #60]	@ (80058f8 <TIM_OC4_SetConfig+0x98>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d109      	bne.n	80058d4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80058c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	695b      	ldr	r3, [r3, #20]
 80058cc:	019b      	lsls	r3, r3, #6
 80058ce:	697a      	ldr	r2, [r7, #20]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	685a      	ldr	r2, [r3, #4]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	693a      	ldr	r2, [r7, #16]
 80058ec:	621a      	str	r2, [r3, #32]
}
 80058ee:	bf00      	nop
 80058f0:	371c      	adds	r7, #28
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bc80      	pop	{r7}
 80058f6:	4770      	bx	lr
 80058f8:	40012c00 	.word	0x40012c00

080058fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b087      	sub	sp, #28
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6a1b      	ldr	r3, [r3, #32]
 800590c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6a1b      	ldr	r3, [r3, #32]
 8005912:	f023 0201 	bic.w	r2, r3, #1
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005926:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	011b      	lsls	r3, r3, #4
 800592c:	693a      	ldr	r2, [r7, #16]
 800592e:	4313      	orrs	r3, r2
 8005930:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	f023 030a 	bic.w	r3, r3, #10
 8005938:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800593a:	697a      	ldr	r2, [r7, #20]
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	4313      	orrs	r3, r2
 8005940:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	697a      	ldr	r2, [r7, #20]
 800594c:	621a      	str	r2, [r3, #32]
}
 800594e:	bf00      	nop
 8005950:	371c      	adds	r7, #28
 8005952:	46bd      	mov	sp, r7
 8005954:	bc80      	pop	{r7}
 8005956:	4770      	bx	lr

08005958 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005958:	b480      	push	{r7}
 800595a:	b087      	sub	sp, #28
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6a1b      	ldr	r3, [r3, #32]
 8005968:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6a1b      	ldr	r3, [r3, #32]
 800596e:	f023 0210 	bic.w	r2, r3, #16
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005982:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	031b      	lsls	r3, r3, #12
 8005988:	693a      	ldr	r2, [r7, #16]
 800598a:	4313      	orrs	r3, r2
 800598c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005994:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	011b      	lsls	r3, r3, #4
 800599a:	697a      	ldr	r2, [r7, #20]
 800599c:	4313      	orrs	r3, r2
 800599e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	693a      	ldr	r2, [r7, #16]
 80059a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	697a      	ldr	r2, [r7, #20]
 80059aa:	621a      	str	r2, [r3, #32]
}
 80059ac:	bf00      	nop
 80059ae:	371c      	adds	r7, #28
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bc80      	pop	{r7}
 80059b4:	4770      	bx	lr

080059b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059b6:	b480      	push	{r7}
 80059b8:	b085      	sub	sp, #20
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
 80059be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059ce:	683a      	ldr	r2, [r7, #0]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	f043 0307 	orr.w	r3, r3, #7
 80059d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	609a      	str	r2, [r3, #8]
}
 80059e0:	bf00      	nop
 80059e2:	3714      	adds	r7, #20
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bc80      	pop	{r7}
 80059e8:	4770      	bx	lr

080059ea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059ea:	b480      	push	{r7}
 80059ec:	b087      	sub	sp, #28
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	60f8      	str	r0, [r7, #12]
 80059f2:	60b9      	str	r1, [r7, #8]
 80059f4:	607a      	str	r2, [r7, #4]
 80059f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a04:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	021a      	lsls	r2, r3, #8
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	431a      	orrs	r2, r3
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	609a      	str	r2, [r3, #8]
}
 8005a1e:	bf00      	nop
 8005a20:	371c      	adds	r7, #28
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bc80      	pop	{r7}
 8005a26:	4770      	bx	lr

08005a28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b087      	sub	sp, #28
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	f003 031f 	and.w	r3, r3, #31
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6a1a      	ldr	r2, [r3, #32]
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	43db      	mvns	r3, r3
 8005a4a:	401a      	ands	r2, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6a1a      	ldr	r2, [r3, #32]
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	f003 031f 	and.w	r3, r3, #31
 8005a5a:	6879      	ldr	r1, [r7, #4]
 8005a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a60:	431a      	orrs	r2, r3
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	621a      	str	r2, [r3, #32]
}
 8005a66:	bf00      	nop
 8005a68:	371c      	adds	r7, #28
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bc80      	pop	{r7}
 8005a6e:	4770      	bx	lr

08005a70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d101      	bne.n	8005a88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a84:	2302      	movs	r3, #2
 8005a86:	e046      	b.n	8005b16 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2202      	movs	r2, #2
 8005a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005aae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a16      	ldr	r2, [pc, #88]	@ (8005b20 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d00e      	beq.n	8005aea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ad4:	d009      	beq.n	8005aea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a12      	ldr	r2, [pc, #72]	@ (8005b24 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d004      	beq.n	8005aea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a10      	ldr	r2, [pc, #64]	@ (8005b28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d10c      	bne.n	8005b04 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005af0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68ba      	ldr	r2, [r7, #8]
 8005b02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3714      	adds	r7, #20
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bc80      	pop	{r7}
 8005b1e:	4770      	bx	lr
 8005b20:	40012c00 	.word	0x40012c00
 8005b24:	40000400 	.word	0x40000400
 8005b28:	40000800 	.word	0x40000800

08005b2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d101      	bne.n	8005b3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e042      	b.n	8005bc4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d106      	bne.n	8005b58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f7fc fb6a 	bl	800222c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2224      	movs	r2, #36	@ 0x24
 8005b5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68da      	ldr	r2, [r3, #12]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 fdb7 	bl	80066e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	691a      	ldr	r2, [r3, #16]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	695a      	ldr	r2, [r3, #20]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68da      	ldr	r2, [r3, #12]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005ba4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2220      	movs	r2, #32
 8005bb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2220      	movs	r2, #32
 8005bb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3708      	adds	r7, #8
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b08a      	sub	sp, #40	@ 0x28
 8005bd0:	af02      	add	r7, sp, #8
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	603b      	str	r3, [r7, #0]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	2b20      	cmp	r3, #32
 8005bea:	d175      	bne.n	8005cd8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d002      	beq.n	8005bf8 <HAL_UART_Transmit+0x2c>
 8005bf2:	88fb      	ldrh	r3, [r7, #6]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d101      	bne.n	8005bfc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e06e      	b.n	8005cda <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2221      	movs	r2, #33	@ 0x21
 8005c06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c0a:	f7fc fc1d 	bl	8002448 <HAL_GetTick>
 8005c0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	88fa      	ldrh	r2, [r7, #6]
 8005c14:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	88fa      	ldrh	r2, [r7, #6]
 8005c1a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c24:	d108      	bne.n	8005c38 <HAL_UART_Transmit+0x6c>
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d104      	bne.n	8005c38 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	61bb      	str	r3, [r7, #24]
 8005c36:	e003      	b.n	8005c40 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c40:	e02e      	b.n	8005ca0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	9300      	str	r3, [sp, #0]
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	2180      	movs	r1, #128	@ 0x80
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f000 fb1c 	bl	800628a <UART_WaitOnFlagUntilTimeout>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d005      	beq.n	8005c64 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2220      	movs	r2, #32
 8005c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e03a      	b.n	8005cda <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d10b      	bne.n	8005c82 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	881b      	ldrh	r3, [r3, #0]
 8005c6e:	461a      	mov	r2, r3
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	3302      	adds	r3, #2
 8005c7e:	61bb      	str	r3, [r7, #24]
 8005c80:	e007      	b.n	8005c92 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	781a      	ldrb	r2, [r3, #0]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	b29a      	uxth	r2, r3
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1cb      	bne.n	8005c42 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	9300      	str	r3, [sp, #0]
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	2140      	movs	r1, #64	@ 0x40
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	f000 fae8 	bl	800628a <UART_WaitOnFlagUntilTimeout>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d005      	beq.n	8005ccc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2220      	movs	r2, #32
 8005cc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	e006      	b.n	8005cda <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2220      	movs	r2, #32
 8005cd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	e000      	b.n	8005cda <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005cd8:	2302      	movs	r3, #2
  }
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3720      	adds	r7, #32
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}

08005ce2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b084      	sub	sp, #16
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	60f8      	str	r0, [r7, #12]
 8005cea:	60b9      	str	r1, [r7, #8]
 8005cec:	4613      	mov	r3, r2
 8005cee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	2b20      	cmp	r3, #32
 8005cfa:	d112      	bne.n	8005d22 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d002      	beq.n	8005d08 <HAL_UART_Receive_IT+0x26>
 8005d02:	88fb      	ldrh	r3, [r7, #6]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d101      	bne.n	8005d0c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e00b      	b.n	8005d24 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005d12:	88fb      	ldrh	r3, [r7, #6]
 8005d14:	461a      	mov	r2, r3
 8005d16:	68b9      	ldr	r1, [r7, #8]
 8005d18:	68f8      	ldr	r0, [r7, #12]
 8005d1a:	f000 fb0f 	bl	800633c <UART_Start_Receive_IT>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	e000      	b.n	8005d24 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005d22:	2302      	movs	r3, #2
  }
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3710      	adds	r7, #16
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b0ba      	sub	sp, #232	@ 0xe8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	695b      	ldr	r3, [r3, #20]
 8005d4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005d52:	2300      	movs	r3, #0
 8005d54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d62:	f003 030f 	and.w	r3, r3, #15
 8005d66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005d6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d10f      	bne.n	8005d92 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d76:	f003 0320 	and.w	r3, r3, #32
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d009      	beq.n	8005d92 <HAL_UART_IRQHandler+0x66>
 8005d7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d82:	f003 0320 	and.w	r3, r3, #32
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d003      	beq.n	8005d92 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 fbec 	bl	8006568 <UART_Receive_IT>
      return;
 8005d90:	e25b      	b.n	800624a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005d92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	f000 80de 	beq.w	8005f58 <HAL_UART_IRQHandler+0x22c>
 8005d9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005da0:	f003 0301 	and.w	r3, r3, #1
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d106      	bne.n	8005db6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005da8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dac:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f000 80d1 	beq.w	8005f58 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dba:	f003 0301 	and.w	r3, r3, #1
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d00b      	beq.n	8005dda <HAL_UART_IRQHandler+0xae>
 8005dc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d005      	beq.n	8005dda <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dd2:	f043 0201 	orr.w	r2, r3, #1
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dde:	f003 0304 	and.w	r3, r3, #4
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d00b      	beq.n	8005dfe <HAL_UART_IRQHandler+0xd2>
 8005de6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005dea:	f003 0301 	and.w	r3, r3, #1
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d005      	beq.n	8005dfe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005df6:	f043 0202 	orr.w	r2, r3, #2
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e02:	f003 0302 	and.w	r3, r3, #2
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00b      	beq.n	8005e22 <HAL_UART_IRQHandler+0xf6>
 8005e0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e0e:	f003 0301 	and.w	r3, r3, #1
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d005      	beq.n	8005e22 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e1a:	f043 0204 	orr.w	r2, r3, #4
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e26:	f003 0308 	and.w	r3, r3, #8
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d011      	beq.n	8005e52 <HAL_UART_IRQHandler+0x126>
 8005e2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e32:	f003 0320 	and.w	r3, r3, #32
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d105      	bne.n	8005e46 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e3e:	f003 0301 	and.w	r3, r3, #1
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d005      	beq.n	8005e52 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e4a:	f043 0208 	orr.w	r2, r3, #8
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	f000 81f2 	beq.w	8006240 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e60:	f003 0320 	and.w	r3, r3, #32
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d008      	beq.n	8005e7a <HAL_UART_IRQHandler+0x14e>
 8005e68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e6c:	f003 0320 	and.w	r3, r3, #32
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d002      	beq.n	8005e7a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 fb77 	bl	8006568 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	695b      	ldr	r3, [r3, #20]
 8005e80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	bf14      	ite	ne
 8005e88:	2301      	movne	r3, #1
 8005e8a:	2300      	moveq	r3, #0
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e96:	f003 0308 	and.w	r3, r3, #8
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d103      	bne.n	8005ea6 <HAL_UART_IRQHandler+0x17a>
 8005e9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d04f      	beq.n	8005f46 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 fa81 	bl	80063ae <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	695b      	ldr	r3, [r3, #20]
 8005eb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d041      	beq.n	8005f3e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	3314      	adds	r3, #20
 8005ec0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005ec8:	e853 3f00 	ldrex	r3, [r3]
 8005ecc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005ed0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005ed4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ed8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	3314      	adds	r3, #20
 8005ee2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005ee6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005eea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005ef2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005ef6:	e841 2300 	strex	r3, r2, [r1]
 8005efa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005efe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1d9      	bne.n	8005eba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d013      	beq.n	8005f36 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f12:	4a7e      	ldr	r2, [pc, #504]	@ (800610c <HAL_UART_IRQHandler+0x3e0>)
 8005f14:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f7fd f862 	bl	8002fe4 <HAL_DMA_Abort_IT>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d016      	beq.n	8005f54 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005f30:	4610      	mov	r0, r2
 8005f32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f34:	e00e      	b.n	8005f54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f993 	bl	8006262 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f3c:	e00a      	b.n	8005f54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 f98f 	bl	8006262 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f44:	e006      	b.n	8005f54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f98b 	bl	8006262 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005f52:	e175      	b.n	8006240 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f54:	bf00      	nop
    return;
 8005f56:	e173      	b.n	8006240 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	f040 814f 	bne.w	8006200 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f66:	f003 0310 	and.w	r3, r3, #16
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	f000 8148 	beq.w	8006200 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005f70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f74:	f003 0310 	and.w	r3, r3, #16
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f000 8141 	beq.w	8006200 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f7e:	2300      	movs	r3, #0
 8005f80:	60bb      	str	r3, [r7, #8]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	60bb      	str	r3, [r7, #8]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	60bb      	str	r3, [r7, #8]
 8005f92:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	695b      	ldr	r3, [r3, #20]
 8005f9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	f000 80b6 	beq.w	8006110 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005fb0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	f000 8145 	beq.w	8006244 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005fbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	f080 813e 	bcs.w	8006244 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005fce:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	2b20      	cmp	r3, #32
 8005fd8:	f000 8088 	beq.w	80060ec <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	330c      	adds	r3, #12
 8005fe2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005fea:	e853 3f00 	ldrex	r3, [r3]
 8005fee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005ff2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005ff6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ffa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	330c      	adds	r3, #12
 8006004:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006008:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800600c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006010:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006014:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006018:	e841 2300 	strex	r3, r2, [r1]
 800601c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006020:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006024:	2b00      	cmp	r3, #0
 8006026:	d1d9      	bne.n	8005fdc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	3314      	adds	r3, #20
 800602e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006030:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006032:	e853 3f00 	ldrex	r3, [r3]
 8006036:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006038:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800603a:	f023 0301 	bic.w	r3, r3, #1
 800603e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	3314      	adds	r3, #20
 8006048:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800604c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006050:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006052:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006054:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006058:	e841 2300 	strex	r3, r2, [r1]
 800605c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800605e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1e1      	bne.n	8006028 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	3314      	adds	r3, #20
 800606a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800606c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800606e:	e853 3f00 	ldrex	r3, [r3]
 8006072:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006074:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006076:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800607a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	3314      	adds	r3, #20
 8006084:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006088:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800608a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800608e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006090:	e841 2300 	strex	r3, r2, [r1]
 8006094:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006096:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006098:	2b00      	cmp	r3, #0
 800609a:	d1e3      	bne.n	8006064 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2220      	movs	r2, #32
 80060a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	330c      	adds	r3, #12
 80060b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060b4:	e853 3f00 	ldrex	r3, [r3]
 80060b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80060ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060bc:	f023 0310 	bic.w	r3, r3, #16
 80060c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	330c      	adds	r3, #12
 80060ca:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80060ce:	65ba      	str	r2, [r7, #88]	@ 0x58
 80060d0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80060d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80060d6:	e841 2300 	strex	r3, r2, [r1]
 80060da:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80060dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1e3      	bne.n	80060aa <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060e6:	4618      	mov	r0, r3
 80060e8:	f7fc ff41 	bl	8002f6e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2202      	movs	r2, #2
 80060f0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	b29b      	uxth	r3, r3
 8006100:	4619      	mov	r1, r3
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 f8b6 	bl	8006274 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006108:	e09c      	b.n	8006244 <HAL_UART_IRQHandler+0x518>
 800610a:	bf00      	nop
 800610c:	08006473 	.word	0x08006473
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006118:	b29b      	uxth	r3, r3
 800611a:	1ad3      	subs	r3, r2, r3
 800611c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006124:	b29b      	uxth	r3, r3
 8006126:	2b00      	cmp	r3, #0
 8006128:	f000 808e 	beq.w	8006248 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800612c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006130:	2b00      	cmp	r3, #0
 8006132:	f000 8089 	beq.w	8006248 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	330c      	adds	r3, #12
 800613c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800613e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006140:	e853 3f00 	ldrex	r3, [r3]
 8006144:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006146:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006148:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800614c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	330c      	adds	r3, #12
 8006156:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800615a:	647a      	str	r2, [r7, #68]	@ 0x44
 800615c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006160:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006162:	e841 2300 	strex	r3, r2, [r1]
 8006166:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006168:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800616a:	2b00      	cmp	r3, #0
 800616c:	d1e3      	bne.n	8006136 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	3314      	adds	r3, #20
 8006174:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006178:	e853 3f00 	ldrex	r3, [r3]
 800617c:	623b      	str	r3, [r7, #32]
   return(result);
 800617e:	6a3b      	ldr	r3, [r7, #32]
 8006180:	f023 0301 	bic.w	r3, r3, #1
 8006184:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	3314      	adds	r3, #20
 800618e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006192:	633a      	str	r2, [r7, #48]	@ 0x30
 8006194:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006196:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006198:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800619a:	e841 2300 	strex	r3, r2, [r1]
 800619e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80061a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1e3      	bne.n	800616e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2220      	movs	r2, #32
 80061aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	330c      	adds	r3, #12
 80061ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	e853 3f00 	ldrex	r3, [r3]
 80061c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f023 0310 	bic.w	r3, r3, #16
 80061ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	330c      	adds	r3, #12
 80061d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80061d8:	61fa      	str	r2, [r7, #28]
 80061da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061dc:	69b9      	ldr	r1, [r7, #24]
 80061de:	69fa      	ldr	r2, [r7, #28]
 80061e0:	e841 2300 	strex	r3, r2, [r1]
 80061e4:	617b      	str	r3, [r7, #20]
   return(result);
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d1e3      	bne.n	80061b4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2202      	movs	r2, #2
 80061f0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80061f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80061f6:	4619      	mov	r1, r3
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 f83b 	bl	8006274 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80061fe:	e023      	b.n	8006248 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006204:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006208:	2b00      	cmp	r3, #0
 800620a:	d009      	beq.n	8006220 <HAL_UART_IRQHandler+0x4f4>
 800620c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006210:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006214:	2b00      	cmp	r3, #0
 8006216:	d003      	beq.n	8006220 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 f93e 	bl	800649a <UART_Transmit_IT>
    return;
 800621e:	e014      	b.n	800624a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006224:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00e      	beq.n	800624a <HAL_UART_IRQHandler+0x51e>
 800622c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006230:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006234:	2b00      	cmp	r3, #0
 8006236:	d008      	beq.n	800624a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 f97d 	bl	8006538 <UART_EndTransmit_IT>
    return;
 800623e:	e004      	b.n	800624a <HAL_UART_IRQHandler+0x51e>
    return;
 8006240:	bf00      	nop
 8006242:	e002      	b.n	800624a <HAL_UART_IRQHandler+0x51e>
      return;
 8006244:	bf00      	nop
 8006246:	e000      	b.n	800624a <HAL_UART_IRQHandler+0x51e>
      return;
 8006248:	bf00      	nop
  }
}
 800624a:	37e8      	adds	r7, #232	@ 0xe8
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006258:	bf00      	nop
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	bc80      	pop	{r7}
 8006260:	4770      	bx	lr

08006262 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006262:	b480      	push	{r7}
 8006264:	b083      	sub	sp, #12
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800626a:	bf00      	nop
 800626c:	370c      	adds	r7, #12
 800626e:	46bd      	mov	sp, r7
 8006270:	bc80      	pop	{r7}
 8006272:	4770      	bx	lr

08006274 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	460b      	mov	r3, r1
 800627e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006280:	bf00      	nop
 8006282:	370c      	adds	r7, #12
 8006284:	46bd      	mov	sp, r7
 8006286:	bc80      	pop	{r7}
 8006288:	4770      	bx	lr

0800628a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b086      	sub	sp, #24
 800628e:	af00      	add	r7, sp, #0
 8006290:	60f8      	str	r0, [r7, #12]
 8006292:	60b9      	str	r1, [r7, #8]
 8006294:	603b      	str	r3, [r7, #0]
 8006296:	4613      	mov	r3, r2
 8006298:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800629a:	e03b      	b.n	8006314 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800629c:	6a3b      	ldr	r3, [r7, #32]
 800629e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a2:	d037      	beq.n	8006314 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062a4:	f7fc f8d0 	bl	8002448 <HAL_GetTick>
 80062a8:	4602      	mov	r2, r0
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	6a3a      	ldr	r2, [r7, #32]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d302      	bcc.n	80062ba <UART_WaitOnFlagUntilTimeout+0x30>
 80062b4:	6a3b      	ldr	r3, [r7, #32]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d101      	bne.n	80062be <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e03a      	b.n	8006334 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	f003 0304 	and.w	r3, r3, #4
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d023      	beq.n	8006314 <UART_WaitOnFlagUntilTimeout+0x8a>
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	2b80      	cmp	r3, #128	@ 0x80
 80062d0:	d020      	beq.n	8006314 <UART_WaitOnFlagUntilTimeout+0x8a>
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	2b40      	cmp	r3, #64	@ 0x40
 80062d6:	d01d      	beq.n	8006314 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0308 	and.w	r3, r3, #8
 80062e2:	2b08      	cmp	r3, #8
 80062e4:	d116      	bne.n	8006314 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80062e6:	2300      	movs	r3, #0
 80062e8:	617b      	str	r3, [r7, #20]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	617b      	str	r3, [r7, #20]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	617b      	str	r3, [r7, #20]
 80062fa:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80062fc:	68f8      	ldr	r0, [r7, #12]
 80062fe:	f000 f856 	bl	80063ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2208      	movs	r2, #8
 8006306:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2200      	movs	r2, #0
 800630c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e00f      	b.n	8006334 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	4013      	ands	r3, r2
 800631e:	68ba      	ldr	r2, [r7, #8]
 8006320:	429a      	cmp	r2, r3
 8006322:	bf0c      	ite	eq
 8006324:	2301      	moveq	r3, #1
 8006326:	2300      	movne	r3, #0
 8006328:	b2db      	uxtb	r3, r3
 800632a:	461a      	mov	r2, r3
 800632c:	79fb      	ldrb	r3, [r7, #7]
 800632e:	429a      	cmp	r2, r3
 8006330:	d0b4      	beq.n	800629c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006332:	2300      	movs	r3, #0
}
 8006334:	4618      	mov	r0, r3
 8006336:	3718      	adds	r7, #24
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800633c:	b480      	push	{r7}
 800633e:	b085      	sub	sp, #20
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	4613      	mov	r3, r2
 8006348:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	68ba      	ldr	r2, [r7, #8]
 800634e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	88fa      	ldrh	r2, [r7, #6]
 8006354:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	88fa      	ldrh	r2, [r7, #6]
 800635a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2200      	movs	r2, #0
 8006360:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2222      	movs	r2, #34	@ 0x22
 8006366:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d007      	beq.n	8006382 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68da      	ldr	r2, [r3, #12]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006380:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	695a      	ldr	r2, [r3, #20]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f042 0201 	orr.w	r2, r2, #1
 8006390:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	68da      	ldr	r2, [r3, #12]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f042 0220 	orr.w	r2, r2, #32
 80063a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3714      	adds	r7, #20
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bc80      	pop	{r7}
 80063ac:	4770      	bx	lr

080063ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063ae:	b480      	push	{r7}
 80063b0:	b095      	sub	sp, #84	@ 0x54
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	330c      	adds	r3, #12
 80063bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063c0:	e853 3f00 	ldrex	r3, [r3]
 80063c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80063c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80063cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	330c      	adds	r3, #12
 80063d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80063d6:	643a      	str	r2, [r7, #64]	@ 0x40
 80063d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80063dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80063de:	e841 2300 	strex	r3, r2, [r1]
 80063e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80063e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d1e5      	bne.n	80063b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	3314      	adds	r3, #20
 80063f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f2:	6a3b      	ldr	r3, [r7, #32]
 80063f4:	e853 3f00 	ldrex	r3, [r3]
 80063f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	f023 0301 	bic.w	r3, r3, #1
 8006400:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	3314      	adds	r3, #20
 8006408:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800640a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800640c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800640e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006410:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006412:	e841 2300 	strex	r3, r2, [r1]
 8006416:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800641a:	2b00      	cmp	r3, #0
 800641c:	d1e5      	bne.n	80063ea <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006422:	2b01      	cmp	r3, #1
 8006424:	d119      	bne.n	800645a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	330c      	adds	r3, #12
 800642c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	e853 3f00 	ldrex	r3, [r3]
 8006434:	60bb      	str	r3, [r7, #8]
   return(result);
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	f023 0310 	bic.w	r3, r3, #16
 800643c:	647b      	str	r3, [r7, #68]	@ 0x44
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	330c      	adds	r3, #12
 8006444:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006446:	61ba      	str	r2, [r7, #24]
 8006448:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644a:	6979      	ldr	r1, [r7, #20]
 800644c:	69ba      	ldr	r2, [r7, #24]
 800644e:	e841 2300 	strex	r3, r2, [r1]
 8006452:	613b      	str	r3, [r7, #16]
   return(result);
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1e5      	bne.n	8006426 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2220      	movs	r2, #32
 800645e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006468:	bf00      	nop
 800646a:	3754      	adds	r7, #84	@ 0x54
 800646c:	46bd      	mov	sp, r7
 800646e:	bc80      	pop	{r7}
 8006470:	4770      	bx	lr

08006472 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006472:	b580      	push	{r7, lr}
 8006474:	b084      	sub	sp, #16
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800647e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2200      	movs	r2, #0
 800648a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800648c:	68f8      	ldr	r0, [r7, #12]
 800648e:	f7ff fee8 	bl	8006262 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006492:	bf00      	nop
 8006494:	3710      	adds	r7, #16
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}

0800649a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800649a:	b480      	push	{r7}
 800649c:	b085      	sub	sp, #20
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	2b21      	cmp	r3, #33	@ 0x21
 80064ac:	d13e      	bne.n	800652c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064b6:	d114      	bne.n	80064e2 <UART_Transmit_IT+0x48>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d110      	bne.n	80064e2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a1b      	ldr	r3, [r3, #32]
 80064c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	881b      	ldrh	r3, [r3, #0]
 80064ca:	461a      	mov	r2, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064d4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a1b      	ldr	r3, [r3, #32]
 80064da:	1c9a      	adds	r2, r3, #2
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	621a      	str	r2, [r3, #32]
 80064e0:	e008      	b.n	80064f4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a1b      	ldr	r3, [r3, #32]
 80064e6:	1c59      	adds	r1, r3, #1
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	6211      	str	r1, [r2, #32]
 80064ec:	781a      	ldrb	r2, [r3, #0]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	3b01      	subs	r3, #1
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	4619      	mov	r1, r3
 8006502:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006504:	2b00      	cmp	r3, #0
 8006506:	d10f      	bne.n	8006528 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68da      	ldr	r2, [r3, #12]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006516:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68da      	ldr	r2, [r3, #12]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006526:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006528:	2300      	movs	r3, #0
 800652a:	e000      	b.n	800652e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800652c:	2302      	movs	r3, #2
  }
}
 800652e:	4618      	mov	r0, r3
 8006530:	3714      	adds	r7, #20
 8006532:	46bd      	mov	sp, r7
 8006534:	bc80      	pop	{r7}
 8006536:	4770      	bx	lr

08006538 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68da      	ldr	r2, [r3, #12]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800654e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2220      	movs	r2, #32
 8006554:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f7ff fe79 	bl	8006250 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	3708      	adds	r7, #8
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b08c      	sub	sp, #48	@ 0x30
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006576:	b2db      	uxtb	r3, r3
 8006578:	2b22      	cmp	r3, #34	@ 0x22
 800657a:	f040 80ae 	bne.w	80066da <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006586:	d117      	bne.n	80065b8 <UART_Receive_IT+0x50>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d113      	bne.n	80065b8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006590:	2300      	movs	r3, #0
 8006592:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006598:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065a6:	b29a      	uxth	r2, r3
 80065a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065aa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065b0:	1c9a      	adds	r2, r3, #2
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	629a      	str	r2, [r3, #40]	@ 0x28
 80065b6:	e026      	b.n	8006606 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80065be:	2300      	movs	r3, #0
 80065c0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065ca:	d007      	beq.n	80065dc <UART_Receive_IT+0x74>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d10a      	bne.n	80065ea <UART_Receive_IT+0x82>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	691b      	ldr	r3, [r3, #16]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d106      	bne.n	80065ea <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	b2da      	uxtb	r2, r3
 80065e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065e6:	701a      	strb	r2, [r3, #0]
 80065e8:	e008      	b.n	80065fc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065f6:	b2da      	uxtb	r2, r3
 80065f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065fa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006600:	1c5a      	adds	r2, r3, #1
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800660a:	b29b      	uxth	r3, r3
 800660c:	3b01      	subs	r3, #1
 800660e:	b29b      	uxth	r3, r3
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	4619      	mov	r1, r3
 8006614:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006616:	2b00      	cmp	r3, #0
 8006618:	d15d      	bne.n	80066d6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68da      	ldr	r2, [r3, #12]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f022 0220 	bic.w	r2, r2, #32
 8006628:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68da      	ldr	r2, [r3, #12]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006638:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	695a      	ldr	r2, [r3, #20]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f022 0201 	bic.w	r2, r2, #1
 8006648:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2220      	movs	r2, #32
 800664e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800665c:	2b01      	cmp	r3, #1
 800665e:	d135      	bne.n	80066cc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	330c      	adds	r3, #12
 800666c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	e853 3f00 	ldrex	r3, [r3]
 8006674:	613b      	str	r3, [r7, #16]
   return(result);
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	f023 0310 	bic.w	r3, r3, #16
 800667c:	627b      	str	r3, [r7, #36]	@ 0x24
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	330c      	adds	r3, #12
 8006684:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006686:	623a      	str	r2, [r7, #32]
 8006688:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668a:	69f9      	ldr	r1, [r7, #28]
 800668c:	6a3a      	ldr	r2, [r7, #32]
 800668e:	e841 2300 	strex	r3, r2, [r1]
 8006692:	61bb      	str	r3, [r7, #24]
   return(result);
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d1e5      	bne.n	8006666 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 0310 	and.w	r3, r3, #16
 80066a4:	2b10      	cmp	r3, #16
 80066a6:	d10a      	bne.n	80066be <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80066a8:	2300      	movs	r3, #0
 80066aa:	60fb      	str	r3, [r7, #12]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	60fb      	str	r3, [r7, #12]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	60fb      	str	r3, [r7, #12]
 80066bc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80066c2:	4619      	mov	r1, r3
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f7ff fdd5 	bl	8006274 <HAL_UARTEx_RxEventCallback>
 80066ca:	e002      	b.n	80066d2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f7fb f811 	bl	80016f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80066d2:	2300      	movs	r3, #0
 80066d4:	e002      	b.n	80066dc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80066d6:	2300      	movs	r3, #0
 80066d8:	e000      	b.n	80066dc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80066da:	2302      	movs	r3, #2
  }
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3730      	adds	r7, #48	@ 0x30
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	68da      	ldr	r2, [r3, #12]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	430a      	orrs	r2, r1
 8006700:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	689a      	ldr	r2, [r3, #8]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	431a      	orrs	r2, r3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	695b      	ldr	r3, [r3, #20]
 8006710:	4313      	orrs	r3, r2
 8006712:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800671e:	f023 030c 	bic.w	r3, r3, #12
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	6812      	ldr	r2, [r2, #0]
 8006726:	68b9      	ldr	r1, [r7, #8]
 8006728:	430b      	orrs	r3, r1
 800672a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	695b      	ldr	r3, [r3, #20]
 8006732:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	699a      	ldr	r2, [r3, #24]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	430a      	orrs	r2, r1
 8006740:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a2c      	ldr	r2, [pc, #176]	@ (80067f8 <UART_SetConfig+0x114>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d103      	bne.n	8006754 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800674c:	f7fe fa70 	bl	8004c30 <HAL_RCC_GetPCLK2Freq>
 8006750:	60f8      	str	r0, [r7, #12]
 8006752:	e002      	b.n	800675a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006754:	f7fe fa58 	bl	8004c08 <HAL_RCC_GetPCLK1Freq>
 8006758:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	4613      	mov	r3, r2
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	4413      	add	r3, r2
 8006762:	009a      	lsls	r2, r3, #2
 8006764:	441a      	add	r2, r3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006770:	4a22      	ldr	r2, [pc, #136]	@ (80067fc <UART_SetConfig+0x118>)
 8006772:	fba2 2303 	umull	r2, r3, r2, r3
 8006776:	095b      	lsrs	r3, r3, #5
 8006778:	0119      	lsls	r1, r3, #4
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	4613      	mov	r3, r2
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	4413      	add	r3, r2
 8006782:	009a      	lsls	r2, r3, #2
 8006784:	441a      	add	r2, r3
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006790:	4b1a      	ldr	r3, [pc, #104]	@ (80067fc <UART_SetConfig+0x118>)
 8006792:	fba3 0302 	umull	r0, r3, r3, r2
 8006796:	095b      	lsrs	r3, r3, #5
 8006798:	2064      	movs	r0, #100	@ 0x64
 800679a:	fb00 f303 	mul.w	r3, r0, r3
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	011b      	lsls	r3, r3, #4
 80067a2:	3332      	adds	r3, #50	@ 0x32
 80067a4:	4a15      	ldr	r2, [pc, #84]	@ (80067fc <UART_SetConfig+0x118>)
 80067a6:	fba2 2303 	umull	r2, r3, r2, r3
 80067aa:	095b      	lsrs	r3, r3, #5
 80067ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80067b0:	4419      	add	r1, r3
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	4613      	mov	r3, r2
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	4413      	add	r3, r2
 80067ba:	009a      	lsls	r2, r3, #2
 80067bc:	441a      	add	r2, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80067c8:	4b0c      	ldr	r3, [pc, #48]	@ (80067fc <UART_SetConfig+0x118>)
 80067ca:	fba3 0302 	umull	r0, r3, r3, r2
 80067ce:	095b      	lsrs	r3, r3, #5
 80067d0:	2064      	movs	r0, #100	@ 0x64
 80067d2:	fb00 f303 	mul.w	r3, r0, r3
 80067d6:	1ad3      	subs	r3, r2, r3
 80067d8:	011b      	lsls	r3, r3, #4
 80067da:	3332      	adds	r3, #50	@ 0x32
 80067dc:	4a07      	ldr	r2, [pc, #28]	@ (80067fc <UART_SetConfig+0x118>)
 80067de:	fba2 2303 	umull	r2, r3, r2, r3
 80067e2:	095b      	lsrs	r3, r3, #5
 80067e4:	f003 020f 	and.w	r2, r3, #15
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	440a      	add	r2, r1
 80067ee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80067f0:	bf00      	nop
 80067f2:	3710      	adds	r7, #16
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	40013800 	.word	0x40013800
 80067fc:	51eb851f 	.word	0x51eb851f

08006800 <std>:
 8006800:	2300      	movs	r3, #0
 8006802:	b510      	push	{r4, lr}
 8006804:	4604      	mov	r4, r0
 8006806:	e9c0 3300 	strd	r3, r3, [r0]
 800680a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800680e:	6083      	str	r3, [r0, #8]
 8006810:	8181      	strh	r1, [r0, #12]
 8006812:	6643      	str	r3, [r0, #100]	@ 0x64
 8006814:	81c2      	strh	r2, [r0, #14]
 8006816:	6183      	str	r3, [r0, #24]
 8006818:	4619      	mov	r1, r3
 800681a:	2208      	movs	r2, #8
 800681c:	305c      	adds	r0, #92	@ 0x5c
 800681e:	f000 fa19 	bl	8006c54 <memset>
 8006822:	4b0d      	ldr	r3, [pc, #52]	@ (8006858 <std+0x58>)
 8006824:	6224      	str	r4, [r4, #32]
 8006826:	6263      	str	r3, [r4, #36]	@ 0x24
 8006828:	4b0c      	ldr	r3, [pc, #48]	@ (800685c <std+0x5c>)
 800682a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800682c:	4b0c      	ldr	r3, [pc, #48]	@ (8006860 <std+0x60>)
 800682e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006830:	4b0c      	ldr	r3, [pc, #48]	@ (8006864 <std+0x64>)
 8006832:	6323      	str	r3, [r4, #48]	@ 0x30
 8006834:	4b0c      	ldr	r3, [pc, #48]	@ (8006868 <std+0x68>)
 8006836:	429c      	cmp	r4, r3
 8006838:	d006      	beq.n	8006848 <std+0x48>
 800683a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800683e:	4294      	cmp	r4, r2
 8006840:	d002      	beq.n	8006848 <std+0x48>
 8006842:	33d0      	adds	r3, #208	@ 0xd0
 8006844:	429c      	cmp	r4, r3
 8006846:	d105      	bne.n	8006854 <std+0x54>
 8006848:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800684c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006850:	f000 ba78 	b.w	8006d44 <__retarget_lock_init_recursive>
 8006854:	bd10      	pop	{r4, pc}
 8006856:	bf00      	nop
 8006858:	08006aa5 	.word	0x08006aa5
 800685c:	08006ac7 	.word	0x08006ac7
 8006860:	08006aff 	.word	0x08006aff
 8006864:	08006b23 	.word	0x08006b23
 8006868:	20000234 	.word	0x20000234

0800686c <stdio_exit_handler>:
 800686c:	4a02      	ldr	r2, [pc, #8]	@ (8006878 <stdio_exit_handler+0xc>)
 800686e:	4903      	ldr	r1, [pc, #12]	@ (800687c <stdio_exit_handler+0x10>)
 8006870:	4803      	ldr	r0, [pc, #12]	@ (8006880 <stdio_exit_handler+0x14>)
 8006872:	f000 b869 	b.w	8006948 <_fwalk_sglue>
 8006876:	bf00      	nop
 8006878:	20000020 	.word	0x20000020
 800687c:	0800788d 	.word	0x0800788d
 8006880:	20000030 	.word	0x20000030

08006884 <cleanup_stdio>:
 8006884:	6841      	ldr	r1, [r0, #4]
 8006886:	4b0c      	ldr	r3, [pc, #48]	@ (80068b8 <cleanup_stdio+0x34>)
 8006888:	b510      	push	{r4, lr}
 800688a:	4299      	cmp	r1, r3
 800688c:	4604      	mov	r4, r0
 800688e:	d001      	beq.n	8006894 <cleanup_stdio+0x10>
 8006890:	f000 fffc 	bl	800788c <_fflush_r>
 8006894:	68a1      	ldr	r1, [r4, #8]
 8006896:	4b09      	ldr	r3, [pc, #36]	@ (80068bc <cleanup_stdio+0x38>)
 8006898:	4299      	cmp	r1, r3
 800689a:	d002      	beq.n	80068a2 <cleanup_stdio+0x1e>
 800689c:	4620      	mov	r0, r4
 800689e:	f000 fff5 	bl	800788c <_fflush_r>
 80068a2:	68e1      	ldr	r1, [r4, #12]
 80068a4:	4b06      	ldr	r3, [pc, #24]	@ (80068c0 <cleanup_stdio+0x3c>)
 80068a6:	4299      	cmp	r1, r3
 80068a8:	d004      	beq.n	80068b4 <cleanup_stdio+0x30>
 80068aa:	4620      	mov	r0, r4
 80068ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068b0:	f000 bfec 	b.w	800788c <_fflush_r>
 80068b4:	bd10      	pop	{r4, pc}
 80068b6:	bf00      	nop
 80068b8:	20000234 	.word	0x20000234
 80068bc:	2000029c 	.word	0x2000029c
 80068c0:	20000304 	.word	0x20000304

080068c4 <global_stdio_init.part.0>:
 80068c4:	b510      	push	{r4, lr}
 80068c6:	4b0b      	ldr	r3, [pc, #44]	@ (80068f4 <global_stdio_init.part.0+0x30>)
 80068c8:	4c0b      	ldr	r4, [pc, #44]	@ (80068f8 <global_stdio_init.part.0+0x34>)
 80068ca:	4a0c      	ldr	r2, [pc, #48]	@ (80068fc <global_stdio_init.part.0+0x38>)
 80068cc:	4620      	mov	r0, r4
 80068ce:	601a      	str	r2, [r3, #0]
 80068d0:	2104      	movs	r1, #4
 80068d2:	2200      	movs	r2, #0
 80068d4:	f7ff ff94 	bl	8006800 <std>
 80068d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80068dc:	2201      	movs	r2, #1
 80068de:	2109      	movs	r1, #9
 80068e0:	f7ff ff8e 	bl	8006800 <std>
 80068e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80068e8:	2202      	movs	r2, #2
 80068ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068ee:	2112      	movs	r1, #18
 80068f0:	f7ff bf86 	b.w	8006800 <std>
 80068f4:	2000036c 	.word	0x2000036c
 80068f8:	20000234 	.word	0x20000234
 80068fc:	0800686d 	.word	0x0800686d

08006900 <__sfp_lock_acquire>:
 8006900:	4801      	ldr	r0, [pc, #4]	@ (8006908 <__sfp_lock_acquire+0x8>)
 8006902:	f000 ba20 	b.w	8006d46 <__retarget_lock_acquire_recursive>
 8006906:	bf00      	nop
 8006908:	20000375 	.word	0x20000375

0800690c <__sfp_lock_release>:
 800690c:	4801      	ldr	r0, [pc, #4]	@ (8006914 <__sfp_lock_release+0x8>)
 800690e:	f000 ba1b 	b.w	8006d48 <__retarget_lock_release_recursive>
 8006912:	bf00      	nop
 8006914:	20000375 	.word	0x20000375

08006918 <__sinit>:
 8006918:	b510      	push	{r4, lr}
 800691a:	4604      	mov	r4, r0
 800691c:	f7ff fff0 	bl	8006900 <__sfp_lock_acquire>
 8006920:	6a23      	ldr	r3, [r4, #32]
 8006922:	b11b      	cbz	r3, 800692c <__sinit+0x14>
 8006924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006928:	f7ff bff0 	b.w	800690c <__sfp_lock_release>
 800692c:	4b04      	ldr	r3, [pc, #16]	@ (8006940 <__sinit+0x28>)
 800692e:	6223      	str	r3, [r4, #32]
 8006930:	4b04      	ldr	r3, [pc, #16]	@ (8006944 <__sinit+0x2c>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d1f5      	bne.n	8006924 <__sinit+0xc>
 8006938:	f7ff ffc4 	bl	80068c4 <global_stdio_init.part.0>
 800693c:	e7f2      	b.n	8006924 <__sinit+0xc>
 800693e:	bf00      	nop
 8006940:	08006885 	.word	0x08006885
 8006944:	2000036c 	.word	0x2000036c

08006948 <_fwalk_sglue>:
 8006948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800694c:	4607      	mov	r7, r0
 800694e:	4688      	mov	r8, r1
 8006950:	4614      	mov	r4, r2
 8006952:	2600      	movs	r6, #0
 8006954:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006958:	f1b9 0901 	subs.w	r9, r9, #1
 800695c:	d505      	bpl.n	800696a <_fwalk_sglue+0x22>
 800695e:	6824      	ldr	r4, [r4, #0]
 8006960:	2c00      	cmp	r4, #0
 8006962:	d1f7      	bne.n	8006954 <_fwalk_sglue+0xc>
 8006964:	4630      	mov	r0, r6
 8006966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800696a:	89ab      	ldrh	r3, [r5, #12]
 800696c:	2b01      	cmp	r3, #1
 800696e:	d907      	bls.n	8006980 <_fwalk_sglue+0x38>
 8006970:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006974:	3301      	adds	r3, #1
 8006976:	d003      	beq.n	8006980 <_fwalk_sglue+0x38>
 8006978:	4629      	mov	r1, r5
 800697a:	4638      	mov	r0, r7
 800697c:	47c0      	blx	r8
 800697e:	4306      	orrs	r6, r0
 8006980:	3568      	adds	r5, #104	@ 0x68
 8006982:	e7e9      	b.n	8006958 <_fwalk_sglue+0x10>

08006984 <iprintf>:
 8006984:	b40f      	push	{r0, r1, r2, r3}
 8006986:	b507      	push	{r0, r1, r2, lr}
 8006988:	4906      	ldr	r1, [pc, #24]	@ (80069a4 <iprintf+0x20>)
 800698a:	ab04      	add	r3, sp, #16
 800698c:	6808      	ldr	r0, [r1, #0]
 800698e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006992:	6881      	ldr	r1, [r0, #8]
 8006994:	9301      	str	r3, [sp, #4]
 8006996:	f000 fc4f 	bl	8007238 <_vfiprintf_r>
 800699a:	b003      	add	sp, #12
 800699c:	f85d eb04 	ldr.w	lr, [sp], #4
 80069a0:	b004      	add	sp, #16
 80069a2:	4770      	bx	lr
 80069a4:	2000002c 	.word	0x2000002c

080069a8 <_puts_r>:
 80069a8:	6a03      	ldr	r3, [r0, #32]
 80069aa:	b570      	push	{r4, r5, r6, lr}
 80069ac:	4605      	mov	r5, r0
 80069ae:	460e      	mov	r6, r1
 80069b0:	6884      	ldr	r4, [r0, #8]
 80069b2:	b90b      	cbnz	r3, 80069b8 <_puts_r+0x10>
 80069b4:	f7ff ffb0 	bl	8006918 <__sinit>
 80069b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80069ba:	07db      	lsls	r3, r3, #31
 80069bc:	d405      	bmi.n	80069ca <_puts_r+0x22>
 80069be:	89a3      	ldrh	r3, [r4, #12]
 80069c0:	0598      	lsls	r0, r3, #22
 80069c2:	d402      	bmi.n	80069ca <_puts_r+0x22>
 80069c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80069c6:	f000 f9be 	bl	8006d46 <__retarget_lock_acquire_recursive>
 80069ca:	89a3      	ldrh	r3, [r4, #12]
 80069cc:	0719      	lsls	r1, r3, #28
 80069ce:	d502      	bpl.n	80069d6 <_puts_r+0x2e>
 80069d0:	6923      	ldr	r3, [r4, #16]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d135      	bne.n	8006a42 <_puts_r+0x9a>
 80069d6:	4621      	mov	r1, r4
 80069d8:	4628      	mov	r0, r5
 80069da:	f000 f8e5 	bl	8006ba8 <__swsetup_r>
 80069de:	b380      	cbz	r0, 8006a42 <_puts_r+0x9a>
 80069e0:	f04f 35ff 	mov.w	r5, #4294967295
 80069e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80069e6:	07da      	lsls	r2, r3, #31
 80069e8:	d405      	bmi.n	80069f6 <_puts_r+0x4e>
 80069ea:	89a3      	ldrh	r3, [r4, #12]
 80069ec:	059b      	lsls	r3, r3, #22
 80069ee:	d402      	bmi.n	80069f6 <_puts_r+0x4e>
 80069f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80069f2:	f000 f9a9 	bl	8006d48 <__retarget_lock_release_recursive>
 80069f6:	4628      	mov	r0, r5
 80069f8:	bd70      	pop	{r4, r5, r6, pc}
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	da04      	bge.n	8006a08 <_puts_r+0x60>
 80069fe:	69a2      	ldr	r2, [r4, #24]
 8006a00:	429a      	cmp	r2, r3
 8006a02:	dc17      	bgt.n	8006a34 <_puts_r+0x8c>
 8006a04:	290a      	cmp	r1, #10
 8006a06:	d015      	beq.n	8006a34 <_puts_r+0x8c>
 8006a08:	6823      	ldr	r3, [r4, #0]
 8006a0a:	1c5a      	adds	r2, r3, #1
 8006a0c:	6022      	str	r2, [r4, #0]
 8006a0e:	7019      	strb	r1, [r3, #0]
 8006a10:	68a3      	ldr	r3, [r4, #8]
 8006a12:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006a16:	3b01      	subs	r3, #1
 8006a18:	60a3      	str	r3, [r4, #8]
 8006a1a:	2900      	cmp	r1, #0
 8006a1c:	d1ed      	bne.n	80069fa <_puts_r+0x52>
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	da11      	bge.n	8006a46 <_puts_r+0x9e>
 8006a22:	4622      	mov	r2, r4
 8006a24:	210a      	movs	r1, #10
 8006a26:	4628      	mov	r0, r5
 8006a28:	f000 f87f 	bl	8006b2a <__swbuf_r>
 8006a2c:	3001      	adds	r0, #1
 8006a2e:	d0d7      	beq.n	80069e0 <_puts_r+0x38>
 8006a30:	250a      	movs	r5, #10
 8006a32:	e7d7      	b.n	80069e4 <_puts_r+0x3c>
 8006a34:	4622      	mov	r2, r4
 8006a36:	4628      	mov	r0, r5
 8006a38:	f000 f877 	bl	8006b2a <__swbuf_r>
 8006a3c:	3001      	adds	r0, #1
 8006a3e:	d1e7      	bne.n	8006a10 <_puts_r+0x68>
 8006a40:	e7ce      	b.n	80069e0 <_puts_r+0x38>
 8006a42:	3e01      	subs	r6, #1
 8006a44:	e7e4      	b.n	8006a10 <_puts_r+0x68>
 8006a46:	6823      	ldr	r3, [r4, #0]
 8006a48:	1c5a      	adds	r2, r3, #1
 8006a4a:	6022      	str	r2, [r4, #0]
 8006a4c:	220a      	movs	r2, #10
 8006a4e:	701a      	strb	r2, [r3, #0]
 8006a50:	e7ee      	b.n	8006a30 <_puts_r+0x88>
	...

08006a54 <puts>:
 8006a54:	4b02      	ldr	r3, [pc, #8]	@ (8006a60 <puts+0xc>)
 8006a56:	4601      	mov	r1, r0
 8006a58:	6818      	ldr	r0, [r3, #0]
 8006a5a:	f7ff bfa5 	b.w	80069a8 <_puts_r>
 8006a5e:	bf00      	nop
 8006a60:	2000002c 	.word	0x2000002c

08006a64 <siprintf>:
 8006a64:	b40e      	push	{r1, r2, r3}
 8006a66:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006a6a:	b500      	push	{lr}
 8006a6c:	b09c      	sub	sp, #112	@ 0x70
 8006a6e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006a70:	9002      	str	r0, [sp, #8]
 8006a72:	9006      	str	r0, [sp, #24]
 8006a74:	9107      	str	r1, [sp, #28]
 8006a76:	9104      	str	r1, [sp, #16]
 8006a78:	4808      	ldr	r0, [pc, #32]	@ (8006a9c <siprintf+0x38>)
 8006a7a:	4909      	ldr	r1, [pc, #36]	@ (8006aa0 <siprintf+0x3c>)
 8006a7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a80:	9105      	str	r1, [sp, #20]
 8006a82:	6800      	ldr	r0, [r0, #0]
 8006a84:	a902      	add	r1, sp, #8
 8006a86:	9301      	str	r3, [sp, #4]
 8006a88:	f000 fab2 	bl	8006ff0 <_svfiprintf_r>
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	9b02      	ldr	r3, [sp, #8]
 8006a90:	701a      	strb	r2, [r3, #0]
 8006a92:	b01c      	add	sp, #112	@ 0x70
 8006a94:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a98:	b003      	add	sp, #12
 8006a9a:	4770      	bx	lr
 8006a9c:	2000002c 	.word	0x2000002c
 8006aa0:	ffff0208 	.word	0xffff0208

08006aa4 <__sread>:
 8006aa4:	b510      	push	{r4, lr}
 8006aa6:	460c      	mov	r4, r1
 8006aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006aac:	f000 f8fc 	bl	8006ca8 <_read_r>
 8006ab0:	2800      	cmp	r0, #0
 8006ab2:	bfab      	itete	ge
 8006ab4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006ab6:	89a3      	ldrhlt	r3, [r4, #12]
 8006ab8:	181b      	addge	r3, r3, r0
 8006aba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006abe:	bfac      	ite	ge
 8006ac0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006ac2:	81a3      	strhlt	r3, [r4, #12]
 8006ac4:	bd10      	pop	{r4, pc}

08006ac6 <__swrite>:
 8006ac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aca:	461f      	mov	r7, r3
 8006acc:	898b      	ldrh	r3, [r1, #12]
 8006ace:	4605      	mov	r5, r0
 8006ad0:	05db      	lsls	r3, r3, #23
 8006ad2:	460c      	mov	r4, r1
 8006ad4:	4616      	mov	r6, r2
 8006ad6:	d505      	bpl.n	8006ae4 <__swrite+0x1e>
 8006ad8:	2302      	movs	r3, #2
 8006ada:	2200      	movs	r2, #0
 8006adc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ae0:	f000 f8d0 	bl	8006c84 <_lseek_r>
 8006ae4:	89a3      	ldrh	r3, [r4, #12]
 8006ae6:	4632      	mov	r2, r6
 8006ae8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006aec:	81a3      	strh	r3, [r4, #12]
 8006aee:	4628      	mov	r0, r5
 8006af0:	463b      	mov	r3, r7
 8006af2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006af6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006afa:	f000 b8e7 	b.w	8006ccc <_write_r>

08006afe <__sseek>:
 8006afe:	b510      	push	{r4, lr}
 8006b00:	460c      	mov	r4, r1
 8006b02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b06:	f000 f8bd 	bl	8006c84 <_lseek_r>
 8006b0a:	1c43      	adds	r3, r0, #1
 8006b0c:	89a3      	ldrh	r3, [r4, #12]
 8006b0e:	bf15      	itete	ne
 8006b10:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006b12:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006b16:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006b1a:	81a3      	strheq	r3, [r4, #12]
 8006b1c:	bf18      	it	ne
 8006b1e:	81a3      	strhne	r3, [r4, #12]
 8006b20:	bd10      	pop	{r4, pc}

08006b22 <__sclose>:
 8006b22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b26:	f000 b89d 	b.w	8006c64 <_close_r>

08006b2a <__swbuf_r>:
 8006b2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b2c:	460e      	mov	r6, r1
 8006b2e:	4614      	mov	r4, r2
 8006b30:	4605      	mov	r5, r0
 8006b32:	b118      	cbz	r0, 8006b3c <__swbuf_r+0x12>
 8006b34:	6a03      	ldr	r3, [r0, #32]
 8006b36:	b90b      	cbnz	r3, 8006b3c <__swbuf_r+0x12>
 8006b38:	f7ff feee 	bl	8006918 <__sinit>
 8006b3c:	69a3      	ldr	r3, [r4, #24]
 8006b3e:	60a3      	str	r3, [r4, #8]
 8006b40:	89a3      	ldrh	r3, [r4, #12]
 8006b42:	071a      	lsls	r2, r3, #28
 8006b44:	d501      	bpl.n	8006b4a <__swbuf_r+0x20>
 8006b46:	6923      	ldr	r3, [r4, #16]
 8006b48:	b943      	cbnz	r3, 8006b5c <__swbuf_r+0x32>
 8006b4a:	4621      	mov	r1, r4
 8006b4c:	4628      	mov	r0, r5
 8006b4e:	f000 f82b 	bl	8006ba8 <__swsetup_r>
 8006b52:	b118      	cbz	r0, 8006b5c <__swbuf_r+0x32>
 8006b54:	f04f 37ff 	mov.w	r7, #4294967295
 8006b58:	4638      	mov	r0, r7
 8006b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b5c:	6823      	ldr	r3, [r4, #0]
 8006b5e:	6922      	ldr	r2, [r4, #16]
 8006b60:	b2f6      	uxtb	r6, r6
 8006b62:	1a98      	subs	r0, r3, r2
 8006b64:	6963      	ldr	r3, [r4, #20]
 8006b66:	4637      	mov	r7, r6
 8006b68:	4283      	cmp	r3, r0
 8006b6a:	dc05      	bgt.n	8006b78 <__swbuf_r+0x4e>
 8006b6c:	4621      	mov	r1, r4
 8006b6e:	4628      	mov	r0, r5
 8006b70:	f000 fe8c 	bl	800788c <_fflush_r>
 8006b74:	2800      	cmp	r0, #0
 8006b76:	d1ed      	bne.n	8006b54 <__swbuf_r+0x2a>
 8006b78:	68a3      	ldr	r3, [r4, #8]
 8006b7a:	3b01      	subs	r3, #1
 8006b7c:	60a3      	str	r3, [r4, #8]
 8006b7e:	6823      	ldr	r3, [r4, #0]
 8006b80:	1c5a      	adds	r2, r3, #1
 8006b82:	6022      	str	r2, [r4, #0]
 8006b84:	701e      	strb	r6, [r3, #0]
 8006b86:	6962      	ldr	r2, [r4, #20]
 8006b88:	1c43      	adds	r3, r0, #1
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d004      	beq.n	8006b98 <__swbuf_r+0x6e>
 8006b8e:	89a3      	ldrh	r3, [r4, #12]
 8006b90:	07db      	lsls	r3, r3, #31
 8006b92:	d5e1      	bpl.n	8006b58 <__swbuf_r+0x2e>
 8006b94:	2e0a      	cmp	r6, #10
 8006b96:	d1df      	bne.n	8006b58 <__swbuf_r+0x2e>
 8006b98:	4621      	mov	r1, r4
 8006b9a:	4628      	mov	r0, r5
 8006b9c:	f000 fe76 	bl	800788c <_fflush_r>
 8006ba0:	2800      	cmp	r0, #0
 8006ba2:	d0d9      	beq.n	8006b58 <__swbuf_r+0x2e>
 8006ba4:	e7d6      	b.n	8006b54 <__swbuf_r+0x2a>
	...

08006ba8 <__swsetup_r>:
 8006ba8:	b538      	push	{r3, r4, r5, lr}
 8006baa:	4b29      	ldr	r3, [pc, #164]	@ (8006c50 <__swsetup_r+0xa8>)
 8006bac:	4605      	mov	r5, r0
 8006bae:	6818      	ldr	r0, [r3, #0]
 8006bb0:	460c      	mov	r4, r1
 8006bb2:	b118      	cbz	r0, 8006bbc <__swsetup_r+0x14>
 8006bb4:	6a03      	ldr	r3, [r0, #32]
 8006bb6:	b90b      	cbnz	r3, 8006bbc <__swsetup_r+0x14>
 8006bb8:	f7ff feae 	bl	8006918 <__sinit>
 8006bbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bc0:	0719      	lsls	r1, r3, #28
 8006bc2:	d422      	bmi.n	8006c0a <__swsetup_r+0x62>
 8006bc4:	06da      	lsls	r2, r3, #27
 8006bc6:	d407      	bmi.n	8006bd8 <__swsetup_r+0x30>
 8006bc8:	2209      	movs	r2, #9
 8006bca:	602a      	str	r2, [r5, #0]
 8006bcc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8006bd4:	81a3      	strh	r3, [r4, #12]
 8006bd6:	e033      	b.n	8006c40 <__swsetup_r+0x98>
 8006bd8:	0758      	lsls	r0, r3, #29
 8006bda:	d512      	bpl.n	8006c02 <__swsetup_r+0x5a>
 8006bdc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006bde:	b141      	cbz	r1, 8006bf2 <__swsetup_r+0x4a>
 8006be0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006be4:	4299      	cmp	r1, r3
 8006be6:	d002      	beq.n	8006bee <__swsetup_r+0x46>
 8006be8:	4628      	mov	r0, r5
 8006bea:	f000 f8af 	bl	8006d4c <_free_r>
 8006bee:	2300      	movs	r3, #0
 8006bf0:	6363      	str	r3, [r4, #52]	@ 0x34
 8006bf2:	89a3      	ldrh	r3, [r4, #12]
 8006bf4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006bf8:	81a3      	strh	r3, [r4, #12]
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	6063      	str	r3, [r4, #4]
 8006bfe:	6923      	ldr	r3, [r4, #16]
 8006c00:	6023      	str	r3, [r4, #0]
 8006c02:	89a3      	ldrh	r3, [r4, #12]
 8006c04:	f043 0308 	orr.w	r3, r3, #8
 8006c08:	81a3      	strh	r3, [r4, #12]
 8006c0a:	6923      	ldr	r3, [r4, #16]
 8006c0c:	b94b      	cbnz	r3, 8006c22 <__swsetup_r+0x7a>
 8006c0e:	89a3      	ldrh	r3, [r4, #12]
 8006c10:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006c14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c18:	d003      	beq.n	8006c22 <__swsetup_r+0x7a>
 8006c1a:	4621      	mov	r1, r4
 8006c1c:	4628      	mov	r0, r5
 8006c1e:	f000 fe82 	bl	8007926 <__smakebuf_r>
 8006c22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c26:	f013 0201 	ands.w	r2, r3, #1
 8006c2a:	d00a      	beq.n	8006c42 <__swsetup_r+0x9a>
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	60a2      	str	r2, [r4, #8]
 8006c30:	6962      	ldr	r2, [r4, #20]
 8006c32:	4252      	negs	r2, r2
 8006c34:	61a2      	str	r2, [r4, #24]
 8006c36:	6922      	ldr	r2, [r4, #16]
 8006c38:	b942      	cbnz	r2, 8006c4c <__swsetup_r+0xa4>
 8006c3a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006c3e:	d1c5      	bne.n	8006bcc <__swsetup_r+0x24>
 8006c40:	bd38      	pop	{r3, r4, r5, pc}
 8006c42:	0799      	lsls	r1, r3, #30
 8006c44:	bf58      	it	pl
 8006c46:	6962      	ldrpl	r2, [r4, #20]
 8006c48:	60a2      	str	r2, [r4, #8]
 8006c4a:	e7f4      	b.n	8006c36 <__swsetup_r+0x8e>
 8006c4c:	2000      	movs	r0, #0
 8006c4e:	e7f7      	b.n	8006c40 <__swsetup_r+0x98>
 8006c50:	2000002c 	.word	0x2000002c

08006c54 <memset>:
 8006c54:	4603      	mov	r3, r0
 8006c56:	4402      	add	r2, r0
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d100      	bne.n	8006c5e <memset+0xa>
 8006c5c:	4770      	bx	lr
 8006c5e:	f803 1b01 	strb.w	r1, [r3], #1
 8006c62:	e7f9      	b.n	8006c58 <memset+0x4>

08006c64 <_close_r>:
 8006c64:	b538      	push	{r3, r4, r5, lr}
 8006c66:	2300      	movs	r3, #0
 8006c68:	4d05      	ldr	r5, [pc, #20]	@ (8006c80 <_close_r+0x1c>)
 8006c6a:	4604      	mov	r4, r0
 8006c6c:	4608      	mov	r0, r1
 8006c6e:	602b      	str	r3, [r5, #0]
 8006c70:	f7fb f955 	bl	8001f1e <_close>
 8006c74:	1c43      	adds	r3, r0, #1
 8006c76:	d102      	bne.n	8006c7e <_close_r+0x1a>
 8006c78:	682b      	ldr	r3, [r5, #0]
 8006c7a:	b103      	cbz	r3, 8006c7e <_close_r+0x1a>
 8006c7c:	6023      	str	r3, [r4, #0]
 8006c7e:	bd38      	pop	{r3, r4, r5, pc}
 8006c80:	20000370 	.word	0x20000370

08006c84 <_lseek_r>:
 8006c84:	b538      	push	{r3, r4, r5, lr}
 8006c86:	4604      	mov	r4, r0
 8006c88:	4608      	mov	r0, r1
 8006c8a:	4611      	mov	r1, r2
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	4d05      	ldr	r5, [pc, #20]	@ (8006ca4 <_lseek_r+0x20>)
 8006c90:	602a      	str	r2, [r5, #0]
 8006c92:	461a      	mov	r2, r3
 8006c94:	f7fb f967 	bl	8001f66 <_lseek>
 8006c98:	1c43      	adds	r3, r0, #1
 8006c9a:	d102      	bne.n	8006ca2 <_lseek_r+0x1e>
 8006c9c:	682b      	ldr	r3, [r5, #0]
 8006c9e:	b103      	cbz	r3, 8006ca2 <_lseek_r+0x1e>
 8006ca0:	6023      	str	r3, [r4, #0]
 8006ca2:	bd38      	pop	{r3, r4, r5, pc}
 8006ca4:	20000370 	.word	0x20000370

08006ca8 <_read_r>:
 8006ca8:	b538      	push	{r3, r4, r5, lr}
 8006caa:	4604      	mov	r4, r0
 8006cac:	4608      	mov	r0, r1
 8006cae:	4611      	mov	r1, r2
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	4d05      	ldr	r5, [pc, #20]	@ (8006cc8 <_read_r+0x20>)
 8006cb4:	602a      	str	r2, [r5, #0]
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	f7fb f8f8 	bl	8001eac <_read>
 8006cbc:	1c43      	adds	r3, r0, #1
 8006cbe:	d102      	bne.n	8006cc6 <_read_r+0x1e>
 8006cc0:	682b      	ldr	r3, [r5, #0]
 8006cc2:	b103      	cbz	r3, 8006cc6 <_read_r+0x1e>
 8006cc4:	6023      	str	r3, [r4, #0]
 8006cc6:	bd38      	pop	{r3, r4, r5, pc}
 8006cc8:	20000370 	.word	0x20000370

08006ccc <_write_r>:
 8006ccc:	b538      	push	{r3, r4, r5, lr}
 8006cce:	4604      	mov	r4, r0
 8006cd0:	4608      	mov	r0, r1
 8006cd2:	4611      	mov	r1, r2
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	4d05      	ldr	r5, [pc, #20]	@ (8006cec <_write_r+0x20>)
 8006cd8:	602a      	str	r2, [r5, #0]
 8006cda:	461a      	mov	r2, r3
 8006cdc:	f7fb f903 	bl	8001ee6 <_write>
 8006ce0:	1c43      	adds	r3, r0, #1
 8006ce2:	d102      	bne.n	8006cea <_write_r+0x1e>
 8006ce4:	682b      	ldr	r3, [r5, #0]
 8006ce6:	b103      	cbz	r3, 8006cea <_write_r+0x1e>
 8006ce8:	6023      	str	r3, [r4, #0]
 8006cea:	bd38      	pop	{r3, r4, r5, pc}
 8006cec:	20000370 	.word	0x20000370

08006cf0 <__errno>:
 8006cf0:	4b01      	ldr	r3, [pc, #4]	@ (8006cf8 <__errno+0x8>)
 8006cf2:	6818      	ldr	r0, [r3, #0]
 8006cf4:	4770      	bx	lr
 8006cf6:	bf00      	nop
 8006cf8:	2000002c 	.word	0x2000002c

08006cfc <__libc_init_array>:
 8006cfc:	b570      	push	{r4, r5, r6, lr}
 8006cfe:	2600      	movs	r6, #0
 8006d00:	4d0c      	ldr	r5, [pc, #48]	@ (8006d34 <__libc_init_array+0x38>)
 8006d02:	4c0d      	ldr	r4, [pc, #52]	@ (8006d38 <__libc_init_array+0x3c>)
 8006d04:	1b64      	subs	r4, r4, r5
 8006d06:	10a4      	asrs	r4, r4, #2
 8006d08:	42a6      	cmp	r6, r4
 8006d0a:	d109      	bne.n	8006d20 <__libc_init_array+0x24>
 8006d0c:	f000 fee6 	bl	8007adc <_init>
 8006d10:	2600      	movs	r6, #0
 8006d12:	4d0a      	ldr	r5, [pc, #40]	@ (8006d3c <__libc_init_array+0x40>)
 8006d14:	4c0a      	ldr	r4, [pc, #40]	@ (8006d40 <__libc_init_array+0x44>)
 8006d16:	1b64      	subs	r4, r4, r5
 8006d18:	10a4      	asrs	r4, r4, #2
 8006d1a:	42a6      	cmp	r6, r4
 8006d1c:	d105      	bne.n	8006d2a <__libc_init_array+0x2e>
 8006d1e:	bd70      	pop	{r4, r5, r6, pc}
 8006d20:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d24:	4798      	blx	r3
 8006d26:	3601      	adds	r6, #1
 8006d28:	e7ee      	b.n	8006d08 <__libc_init_array+0xc>
 8006d2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d2e:	4798      	blx	r3
 8006d30:	3601      	adds	r6, #1
 8006d32:	e7f2      	b.n	8006d1a <__libc_init_array+0x1e>
 8006d34:	080086e0 	.word	0x080086e0
 8006d38:	080086e0 	.word	0x080086e0
 8006d3c:	080086e0 	.word	0x080086e0
 8006d40:	080086e4 	.word	0x080086e4

08006d44 <__retarget_lock_init_recursive>:
 8006d44:	4770      	bx	lr

08006d46 <__retarget_lock_acquire_recursive>:
 8006d46:	4770      	bx	lr

08006d48 <__retarget_lock_release_recursive>:
 8006d48:	4770      	bx	lr
	...

08006d4c <_free_r>:
 8006d4c:	b538      	push	{r3, r4, r5, lr}
 8006d4e:	4605      	mov	r5, r0
 8006d50:	2900      	cmp	r1, #0
 8006d52:	d040      	beq.n	8006dd6 <_free_r+0x8a>
 8006d54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d58:	1f0c      	subs	r4, r1, #4
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	bfb8      	it	lt
 8006d5e:	18e4      	addlt	r4, r4, r3
 8006d60:	f000 f8de 	bl	8006f20 <__malloc_lock>
 8006d64:	4a1c      	ldr	r2, [pc, #112]	@ (8006dd8 <_free_r+0x8c>)
 8006d66:	6813      	ldr	r3, [r2, #0]
 8006d68:	b933      	cbnz	r3, 8006d78 <_free_r+0x2c>
 8006d6a:	6063      	str	r3, [r4, #4]
 8006d6c:	6014      	str	r4, [r2, #0]
 8006d6e:	4628      	mov	r0, r5
 8006d70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d74:	f000 b8da 	b.w	8006f2c <__malloc_unlock>
 8006d78:	42a3      	cmp	r3, r4
 8006d7a:	d908      	bls.n	8006d8e <_free_r+0x42>
 8006d7c:	6820      	ldr	r0, [r4, #0]
 8006d7e:	1821      	adds	r1, r4, r0
 8006d80:	428b      	cmp	r3, r1
 8006d82:	bf01      	itttt	eq
 8006d84:	6819      	ldreq	r1, [r3, #0]
 8006d86:	685b      	ldreq	r3, [r3, #4]
 8006d88:	1809      	addeq	r1, r1, r0
 8006d8a:	6021      	streq	r1, [r4, #0]
 8006d8c:	e7ed      	b.n	8006d6a <_free_r+0x1e>
 8006d8e:	461a      	mov	r2, r3
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	b10b      	cbz	r3, 8006d98 <_free_r+0x4c>
 8006d94:	42a3      	cmp	r3, r4
 8006d96:	d9fa      	bls.n	8006d8e <_free_r+0x42>
 8006d98:	6811      	ldr	r1, [r2, #0]
 8006d9a:	1850      	adds	r0, r2, r1
 8006d9c:	42a0      	cmp	r0, r4
 8006d9e:	d10b      	bne.n	8006db8 <_free_r+0x6c>
 8006da0:	6820      	ldr	r0, [r4, #0]
 8006da2:	4401      	add	r1, r0
 8006da4:	1850      	adds	r0, r2, r1
 8006da6:	4283      	cmp	r3, r0
 8006da8:	6011      	str	r1, [r2, #0]
 8006daa:	d1e0      	bne.n	8006d6e <_free_r+0x22>
 8006dac:	6818      	ldr	r0, [r3, #0]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	4408      	add	r0, r1
 8006db2:	6010      	str	r0, [r2, #0]
 8006db4:	6053      	str	r3, [r2, #4]
 8006db6:	e7da      	b.n	8006d6e <_free_r+0x22>
 8006db8:	d902      	bls.n	8006dc0 <_free_r+0x74>
 8006dba:	230c      	movs	r3, #12
 8006dbc:	602b      	str	r3, [r5, #0]
 8006dbe:	e7d6      	b.n	8006d6e <_free_r+0x22>
 8006dc0:	6820      	ldr	r0, [r4, #0]
 8006dc2:	1821      	adds	r1, r4, r0
 8006dc4:	428b      	cmp	r3, r1
 8006dc6:	bf01      	itttt	eq
 8006dc8:	6819      	ldreq	r1, [r3, #0]
 8006dca:	685b      	ldreq	r3, [r3, #4]
 8006dcc:	1809      	addeq	r1, r1, r0
 8006dce:	6021      	streq	r1, [r4, #0]
 8006dd0:	6063      	str	r3, [r4, #4]
 8006dd2:	6054      	str	r4, [r2, #4]
 8006dd4:	e7cb      	b.n	8006d6e <_free_r+0x22>
 8006dd6:	bd38      	pop	{r3, r4, r5, pc}
 8006dd8:	2000037c 	.word	0x2000037c

08006ddc <sbrk_aligned>:
 8006ddc:	b570      	push	{r4, r5, r6, lr}
 8006dde:	4e0f      	ldr	r6, [pc, #60]	@ (8006e1c <sbrk_aligned+0x40>)
 8006de0:	460c      	mov	r4, r1
 8006de2:	6831      	ldr	r1, [r6, #0]
 8006de4:	4605      	mov	r5, r0
 8006de6:	b911      	cbnz	r1, 8006dee <sbrk_aligned+0x12>
 8006de8:	f000 fe16 	bl	8007a18 <_sbrk_r>
 8006dec:	6030      	str	r0, [r6, #0]
 8006dee:	4621      	mov	r1, r4
 8006df0:	4628      	mov	r0, r5
 8006df2:	f000 fe11 	bl	8007a18 <_sbrk_r>
 8006df6:	1c43      	adds	r3, r0, #1
 8006df8:	d103      	bne.n	8006e02 <sbrk_aligned+0x26>
 8006dfa:	f04f 34ff 	mov.w	r4, #4294967295
 8006dfe:	4620      	mov	r0, r4
 8006e00:	bd70      	pop	{r4, r5, r6, pc}
 8006e02:	1cc4      	adds	r4, r0, #3
 8006e04:	f024 0403 	bic.w	r4, r4, #3
 8006e08:	42a0      	cmp	r0, r4
 8006e0a:	d0f8      	beq.n	8006dfe <sbrk_aligned+0x22>
 8006e0c:	1a21      	subs	r1, r4, r0
 8006e0e:	4628      	mov	r0, r5
 8006e10:	f000 fe02 	bl	8007a18 <_sbrk_r>
 8006e14:	3001      	adds	r0, #1
 8006e16:	d1f2      	bne.n	8006dfe <sbrk_aligned+0x22>
 8006e18:	e7ef      	b.n	8006dfa <sbrk_aligned+0x1e>
 8006e1a:	bf00      	nop
 8006e1c:	20000378 	.word	0x20000378

08006e20 <_malloc_r>:
 8006e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e24:	1ccd      	adds	r5, r1, #3
 8006e26:	f025 0503 	bic.w	r5, r5, #3
 8006e2a:	3508      	adds	r5, #8
 8006e2c:	2d0c      	cmp	r5, #12
 8006e2e:	bf38      	it	cc
 8006e30:	250c      	movcc	r5, #12
 8006e32:	2d00      	cmp	r5, #0
 8006e34:	4606      	mov	r6, r0
 8006e36:	db01      	blt.n	8006e3c <_malloc_r+0x1c>
 8006e38:	42a9      	cmp	r1, r5
 8006e3a:	d904      	bls.n	8006e46 <_malloc_r+0x26>
 8006e3c:	230c      	movs	r3, #12
 8006e3e:	6033      	str	r3, [r6, #0]
 8006e40:	2000      	movs	r0, #0
 8006e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006f1c <_malloc_r+0xfc>
 8006e4a:	f000 f869 	bl	8006f20 <__malloc_lock>
 8006e4e:	f8d8 3000 	ldr.w	r3, [r8]
 8006e52:	461c      	mov	r4, r3
 8006e54:	bb44      	cbnz	r4, 8006ea8 <_malloc_r+0x88>
 8006e56:	4629      	mov	r1, r5
 8006e58:	4630      	mov	r0, r6
 8006e5a:	f7ff ffbf 	bl	8006ddc <sbrk_aligned>
 8006e5e:	1c43      	adds	r3, r0, #1
 8006e60:	4604      	mov	r4, r0
 8006e62:	d158      	bne.n	8006f16 <_malloc_r+0xf6>
 8006e64:	f8d8 4000 	ldr.w	r4, [r8]
 8006e68:	4627      	mov	r7, r4
 8006e6a:	2f00      	cmp	r7, #0
 8006e6c:	d143      	bne.n	8006ef6 <_malloc_r+0xd6>
 8006e6e:	2c00      	cmp	r4, #0
 8006e70:	d04b      	beq.n	8006f0a <_malloc_r+0xea>
 8006e72:	6823      	ldr	r3, [r4, #0]
 8006e74:	4639      	mov	r1, r7
 8006e76:	4630      	mov	r0, r6
 8006e78:	eb04 0903 	add.w	r9, r4, r3
 8006e7c:	f000 fdcc 	bl	8007a18 <_sbrk_r>
 8006e80:	4581      	cmp	r9, r0
 8006e82:	d142      	bne.n	8006f0a <_malloc_r+0xea>
 8006e84:	6821      	ldr	r1, [r4, #0]
 8006e86:	4630      	mov	r0, r6
 8006e88:	1a6d      	subs	r5, r5, r1
 8006e8a:	4629      	mov	r1, r5
 8006e8c:	f7ff ffa6 	bl	8006ddc <sbrk_aligned>
 8006e90:	3001      	adds	r0, #1
 8006e92:	d03a      	beq.n	8006f0a <_malloc_r+0xea>
 8006e94:	6823      	ldr	r3, [r4, #0]
 8006e96:	442b      	add	r3, r5
 8006e98:	6023      	str	r3, [r4, #0]
 8006e9a:	f8d8 3000 	ldr.w	r3, [r8]
 8006e9e:	685a      	ldr	r2, [r3, #4]
 8006ea0:	bb62      	cbnz	r2, 8006efc <_malloc_r+0xdc>
 8006ea2:	f8c8 7000 	str.w	r7, [r8]
 8006ea6:	e00f      	b.n	8006ec8 <_malloc_r+0xa8>
 8006ea8:	6822      	ldr	r2, [r4, #0]
 8006eaa:	1b52      	subs	r2, r2, r5
 8006eac:	d420      	bmi.n	8006ef0 <_malloc_r+0xd0>
 8006eae:	2a0b      	cmp	r2, #11
 8006eb0:	d917      	bls.n	8006ee2 <_malloc_r+0xc2>
 8006eb2:	1961      	adds	r1, r4, r5
 8006eb4:	42a3      	cmp	r3, r4
 8006eb6:	6025      	str	r5, [r4, #0]
 8006eb8:	bf18      	it	ne
 8006eba:	6059      	strne	r1, [r3, #4]
 8006ebc:	6863      	ldr	r3, [r4, #4]
 8006ebe:	bf08      	it	eq
 8006ec0:	f8c8 1000 	streq.w	r1, [r8]
 8006ec4:	5162      	str	r2, [r4, r5]
 8006ec6:	604b      	str	r3, [r1, #4]
 8006ec8:	4630      	mov	r0, r6
 8006eca:	f000 f82f 	bl	8006f2c <__malloc_unlock>
 8006ece:	f104 000b 	add.w	r0, r4, #11
 8006ed2:	1d23      	adds	r3, r4, #4
 8006ed4:	f020 0007 	bic.w	r0, r0, #7
 8006ed8:	1ac2      	subs	r2, r0, r3
 8006eda:	bf1c      	itt	ne
 8006edc:	1a1b      	subne	r3, r3, r0
 8006ede:	50a3      	strne	r3, [r4, r2]
 8006ee0:	e7af      	b.n	8006e42 <_malloc_r+0x22>
 8006ee2:	6862      	ldr	r2, [r4, #4]
 8006ee4:	42a3      	cmp	r3, r4
 8006ee6:	bf0c      	ite	eq
 8006ee8:	f8c8 2000 	streq.w	r2, [r8]
 8006eec:	605a      	strne	r2, [r3, #4]
 8006eee:	e7eb      	b.n	8006ec8 <_malloc_r+0xa8>
 8006ef0:	4623      	mov	r3, r4
 8006ef2:	6864      	ldr	r4, [r4, #4]
 8006ef4:	e7ae      	b.n	8006e54 <_malloc_r+0x34>
 8006ef6:	463c      	mov	r4, r7
 8006ef8:	687f      	ldr	r7, [r7, #4]
 8006efa:	e7b6      	b.n	8006e6a <_malloc_r+0x4a>
 8006efc:	461a      	mov	r2, r3
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	42a3      	cmp	r3, r4
 8006f02:	d1fb      	bne.n	8006efc <_malloc_r+0xdc>
 8006f04:	2300      	movs	r3, #0
 8006f06:	6053      	str	r3, [r2, #4]
 8006f08:	e7de      	b.n	8006ec8 <_malloc_r+0xa8>
 8006f0a:	230c      	movs	r3, #12
 8006f0c:	4630      	mov	r0, r6
 8006f0e:	6033      	str	r3, [r6, #0]
 8006f10:	f000 f80c 	bl	8006f2c <__malloc_unlock>
 8006f14:	e794      	b.n	8006e40 <_malloc_r+0x20>
 8006f16:	6005      	str	r5, [r0, #0]
 8006f18:	e7d6      	b.n	8006ec8 <_malloc_r+0xa8>
 8006f1a:	bf00      	nop
 8006f1c:	2000037c 	.word	0x2000037c

08006f20 <__malloc_lock>:
 8006f20:	4801      	ldr	r0, [pc, #4]	@ (8006f28 <__malloc_lock+0x8>)
 8006f22:	f7ff bf10 	b.w	8006d46 <__retarget_lock_acquire_recursive>
 8006f26:	bf00      	nop
 8006f28:	20000374 	.word	0x20000374

08006f2c <__malloc_unlock>:
 8006f2c:	4801      	ldr	r0, [pc, #4]	@ (8006f34 <__malloc_unlock+0x8>)
 8006f2e:	f7ff bf0b 	b.w	8006d48 <__retarget_lock_release_recursive>
 8006f32:	bf00      	nop
 8006f34:	20000374 	.word	0x20000374

08006f38 <__ssputs_r>:
 8006f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f3c:	461f      	mov	r7, r3
 8006f3e:	688e      	ldr	r6, [r1, #8]
 8006f40:	4682      	mov	sl, r0
 8006f42:	42be      	cmp	r6, r7
 8006f44:	460c      	mov	r4, r1
 8006f46:	4690      	mov	r8, r2
 8006f48:	680b      	ldr	r3, [r1, #0]
 8006f4a:	d82d      	bhi.n	8006fa8 <__ssputs_r+0x70>
 8006f4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006f50:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006f54:	d026      	beq.n	8006fa4 <__ssputs_r+0x6c>
 8006f56:	6965      	ldr	r5, [r4, #20]
 8006f58:	6909      	ldr	r1, [r1, #16]
 8006f5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f5e:	eba3 0901 	sub.w	r9, r3, r1
 8006f62:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f66:	1c7b      	adds	r3, r7, #1
 8006f68:	444b      	add	r3, r9
 8006f6a:	106d      	asrs	r5, r5, #1
 8006f6c:	429d      	cmp	r5, r3
 8006f6e:	bf38      	it	cc
 8006f70:	461d      	movcc	r5, r3
 8006f72:	0553      	lsls	r3, r2, #21
 8006f74:	d527      	bpl.n	8006fc6 <__ssputs_r+0x8e>
 8006f76:	4629      	mov	r1, r5
 8006f78:	f7ff ff52 	bl	8006e20 <_malloc_r>
 8006f7c:	4606      	mov	r6, r0
 8006f7e:	b360      	cbz	r0, 8006fda <__ssputs_r+0xa2>
 8006f80:	464a      	mov	r2, r9
 8006f82:	6921      	ldr	r1, [r4, #16]
 8006f84:	f000 fd66 	bl	8007a54 <memcpy>
 8006f88:	89a3      	ldrh	r3, [r4, #12]
 8006f8a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006f8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f92:	81a3      	strh	r3, [r4, #12]
 8006f94:	6126      	str	r6, [r4, #16]
 8006f96:	444e      	add	r6, r9
 8006f98:	6026      	str	r6, [r4, #0]
 8006f9a:	463e      	mov	r6, r7
 8006f9c:	6165      	str	r5, [r4, #20]
 8006f9e:	eba5 0509 	sub.w	r5, r5, r9
 8006fa2:	60a5      	str	r5, [r4, #8]
 8006fa4:	42be      	cmp	r6, r7
 8006fa6:	d900      	bls.n	8006faa <__ssputs_r+0x72>
 8006fa8:	463e      	mov	r6, r7
 8006faa:	4632      	mov	r2, r6
 8006fac:	4641      	mov	r1, r8
 8006fae:	6820      	ldr	r0, [r4, #0]
 8006fb0:	f000 fcf5 	bl	800799e <memmove>
 8006fb4:	2000      	movs	r0, #0
 8006fb6:	68a3      	ldr	r3, [r4, #8]
 8006fb8:	1b9b      	subs	r3, r3, r6
 8006fba:	60a3      	str	r3, [r4, #8]
 8006fbc:	6823      	ldr	r3, [r4, #0]
 8006fbe:	4433      	add	r3, r6
 8006fc0:	6023      	str	r3, [r4, #0]
 8006fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fc6:	462a      	mov	r2, r5
 8006fc8:	f000 fd52 	bl	8007a70 <_realloc_r>
 8006fcc:	4606      	mov	r6, r0
 8006fce:	2800      	cmp	r0, #0
 8006fd0:	d1e0      	bne.n	8006f94 <__ssputs_r+0x5c>
 8006fd2:	4650      	mov	r0, sl
 8006fd4:	6921      	ldr	r1, [r4, #16]
 8006fd6:	f7ff feb9 	bl	8006d4c <_free_r>
 8006fda:	230c      	movs	r3, #12
 8006fdc:	f8ca 3000 	str.w	r3, [sl]
 8006fe0:	89a3      	ldrh	r3, [r4, #12]
 8006fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fea:	81a3      	strh	r3, [r4, #12]
 8006fec:	e7e9      	b.n	8006fc2 <__ssputs_r+0x8a>
	...

08006ff0 <_svfiprintf_r>:
 8006ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ff4:	4698      	mov	r8, r3
 8006ff6:	898b      	ldrh	r3, [r1, #12]
 8006ff8:	4607      	mov	r7, r0
 8006ffa:	061b      	lsls	r3, r3, #24
 8006ffc:	460d      	mov	r5, r1
 8006ffe:	4614      	mov	r4, r2
 8007000:	b09d      	sub	sp, #116	@ 0x74
 8007002:	d510      	bpl.n	8007026 <_svfiprintf_r+0x36>
 8007004:	690b      	ldr	r3, [r1, #16]
 8007006:	b973      	cbnz	r3, 8007026 <_svfiprintf_r+0x36>
 8007008:	2140      	movs	r1, #64	@ 0x40
 800700a:	f7ff ff09 	bl	8006e20 <_malloc_r>
 800700e:	6028      	str	r0, [r5, #0]
 8007010:	6128      	str	r0, [r5, #16]
 8007012:	b930      	cbnz	r0, 8007022 <_svfiprintf_r+0x32>
 8007014:	230c      	movs	r3, #12
 8007016:	603b      	str	r3, [r7, #0]
 8007018:	f04f 30ff 	mov.w	r0, #4294967295
 800701c:	b01d      	add	sp, #116	@ 0x74
 800701e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007022:	2340      	movs	r3, #64	@ 0x40
 8007024:	616b      	str	r3, [r5, #20]
 8007026:	2300      	movs	r3, #0
 8007028:	9309      	str	r3, [sp, #36]	@ 0x24
 800702a:	2320      	movs	r3, #32
 800702c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007030:	2330      	movs	r3, #48	@ 0x30
 8007032:	f04f 0901 	mov.w	r9, #1
 8007036:	f8cd 800c 	str.w	r8, [sp, #12]
 800703a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80071d4 <_svfiprintf_r+0x1e4>
 800703e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007042:	4623      	mov	r3, r4
 8007044:	469a      	mov	sl, r3
 8007046:	f813 2b01 	ldrb.w	r2, [r3], #1
 800704a:	b10a      	cbz	r2, 8007050 <_svfiprintf_r+0x60>
 800704c:	2a25      	cmp	r2, #37	@ 0x25
 800704e:	d1f9      	bne.n	8007044 <_svfiprintf_r+0x54>
 8007050:	ebba 0b04 	subs.w	fp, sl, r4
 8007054:	d00b      	beq.n	800706e <_svfiprintf_r+0x7e>
 8007056:	465b      	mov	r3, fp
 8007058:	4622      	mov	r2, r4
 800705a:	4629      	mov	r1, r5
 800705c:	4638      	mov	r0, r7
 800705e:	f7ff ff6b 	bl	8006f38 <__ssputs_r>
 8007062:	3001      	adds	r0, #1
 8007064:	f000 80a7 	beq.w	80071b6 <_svfiprintf_r+0x1c6>
 8007068:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800706a:	445a      	add	r2, fp
 800706c:	9209      	str	r2, [sp, #36]	@ 0x24
 800706e:	f89a 3000 	ldrb.w	r3, [sl]
 8007072:	2b00      	cmp	r3, #0
 8007074:	f000 809f 	beq.w	80071b6 <_svfiprintf_r+0x1c6>
 8007078:	2300      	movs	r3, #0
 800707a:	f04f 32ff 	mov.w	r2, #4294967295
 800707e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007082:	f10a 0a01 	add.w	sl, sl, #1
 8007086:	9304      	str	r3, [sp, #16]
 8007088:	9307      	str	r3, [sp, #28]
 800708a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800708e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007090:	4654      	mov	r4, sl
 8007092:	2205      	movs	r2, #5
 8007094:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007098:	484e      	ldr	r0, [pc, #312]	@ (80071d4 <_svfiprintf_r+0x1e4>)
 800709a:	f000 fccd 	bl	8007a38 <memchr>
 800709e:	9a04      	ldr	r2, [sp, #16]
 80070a0:	b9d8      	cbnz	r0, 80070da <_svfiprintf_r+0xea>
 80070a2:	06d0      	lsls	r0, r2, #27
 80070a4:	bf44      	itt	mi
 80070a6:	2320      	movmi	r3, #32
 80070a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80070ac:	0711      	lsls	r1, r2, #28
 80070ae:	bf44      	itt	mi
 80070b0:	232b      	movmi	r3, #43	@ 0x2b
 80070b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80070b6:	f89a 3000 	ldrb.w	r3, [sl]
 80070ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80070bc:	d015      	beq.n	80070ea <_svfiprintf_r+0xfa>
 80070be:	4654      	mov	r4, sl
 80070c0:	2000      	movs	r0, #0
 80070c2:	f04f 0c0a 	mov.w	ip, #10
 80070c6:	9a07      	ldr	r2, [sp, #28]
 80070c8:	4621      	mov	r1, r4
 80070ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070ce:	3b30      	subs	r3, #48	@ 0x30
 80070d0:	2b09      	cmp	r3, #9
 80070d2:	d94b      	bls.n	800716c <_svfiprintf_r+0x17c>
 80070d4:	b1b0      	cbz	r0, 8007104 <_svfiprintf_r+0x114>
 80070d6:	9207      	str	r2, [sp, #28]
 80070d8:	e014      	b.n	8007104 <_svfiprintf_r+0x114>
 80070da:	eba0 0308 	sub.w	r3, r0, r8
 80070de:	fa09 f303 	lsl.w	r3, r9, r3
 80070e2:	4313      	orrs	r3, r2
 80070e4:	46a2      	mov	sl, r4
 80070e6:	9304      	str	r3, [sp, #16]
 80070e8:	e7d2      	b.n	8007090 <_svfiprintf_r+0xa0>
 80070ea:	9b03      	ldr	r3, [sp, #12]
 80070ec:	1d19      	adds	r1, r3, #4
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	9103      	str	r1, [sp, #12]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	bfbb      	ittet	lt
 80070f6:	425b      	neglt	r3, r3
 80070f8:	f042 0202 	orrlt.w	r2, r2, #2
 80070fc:	9307      	strge	r3, [sp, #28]
 80070fe:	9307      	strlt	r3, [sp, #28]
 8007100:	bfb8      	it	lt
 8007102:	9204      	strlt	r2, [sp, #16]
 8007104:	7823      	ldrb	r3, [r4, #0]
 8007106:	2b2e      	cmp	r3, #46	@ 0x2e
 8007108:	d10a      	bne.n	8007120 <_svfiprintf_r+0x130>
 800710a:	7863      	ldrb	r3, [r4, #1]
 800710c:	2b2a      	cmp	r3, #42	@ 0x2a
 800710e:	d132      	bne.n	8007176 <_svfiprintf_r+0x186>
 8007110:	9b03      	ldr	r3, [sp, #12]
 8007112:	3402      	adds	r4, #2
 8007114:	1d1a      	adds	r2, r3, #4
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	9203      	str	r2, [sp, #12]
 800711a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800711e:	9305      	str	r3, [sp, #20]
 8007120:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80071d8 <_svfiprintf_r+0x1e8>
 8007124:	2203      	movs	r2, #3
 8007126:	4650      	mov	r0, sl
 8007128:	7821      	ldrb	r1, [r4, #0]
 800712a:	f000 fc85 	bl	8007a38 <memchr>
 800712e:	b138      	cbz	r0, 8007140 <_svfiprintf_r+0x150>
 8007130:	2240      	movs	r2, #64	@ 0x40
 8007132:	9b04      	ldr	r3, [sp, #16]
 8007134:	eba0 000a 	sub.w	r0, r0, sl
 8007138:	4082      	lsls	r2, r0
 800713a:	4313      	orrs	r3, r2
 800713c:	3401      	adds	r4, #1
 800713e:	9304      	str	r3, [sp, #16]
 8007140:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007144:	2206      	movs	r2, #6
 8007146:	4825      	ldr	r0, [pc, #148]	@ (80071dc <_svfiprintf_r+0x1ec>)
 8007148:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800714c:	f000 fc74 	bl	8007a38 <memchr>
 8007150:	2800      	cmp	r0, #0
 8007152:	d036      	beq.n	80071c2 <_svfiprintf_r+0x1d2>
 8007154:	4b22      	ldr	r3, [pc, #136]	@ (80071e0 <_svfiprintf_r+0x1f0>)
 8007156:	bb1b      	cbnz	r3, 80071a0 <_svfiprintf_r+0x1b0>
 8007158:	9b03      	ldr	r3, [sp, #12]
 800715a:	3307      	adds	r3, #7
 800715c:	f023 0307 	bic.w	r3, r3, #7
 8007160:	3308      	adds	r3, #8
 8007162:	9303      	str	r3, [sp, #12]
 8007164:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007166:	4433      	add	r3, r6
 8007168:	9309      	str	r3, [sp, #36]	@ 0x24
 800716a:	e76a      	b.n	8007042 <_svfiprintf_r+0x52>
 800716c:	460c      	mov	r4, r1
 800716e:	2001      	movs	r0, #1
 8007170:	fb0c 3202 	mla	r2, ip, r2, r3
 8007174:	e7a8      	b.n	80070c8 <_svfiprintf_r+0xd8>
 8007176:	2300      	movs	r3, #0
 8007178:	f04f 0c0a 	mov.w	ip, #10
 800717c:	4619      	mov	r1, r3
 800717e:	3401      	adds	r4, #1
 8007180:	9305      	str	r3, [sp, #20]
 8007182:	4620      	mov	r0, r4
 8007184:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007188:	3a30      	subs	r2, #48	@ 0x30
 800718a:	2a09      	cmp	r2, #9
 800718c:	d903      	bls.n	8007196 <_svfiprintf_r+0x1a6>
 800718e:	2b00      	cmp	r3, #0
 8007190:	d0c6      	beq.n	8007120 <_svfiprintf_r+0x130>
 8007192:	9105      	str	r1, [sp, #20]
 8007194:	e7c4      	b.n	8007120 <_svfiprintf_r+0x130>
 8007196:	4604      	mov	r4, r0
 8007198:	2301      	movs	r3, #1
 800719a:	fb0c 2101 	mla	r1, ip, r1, r2
 800719e:	e7f0      	b.n	8007182 <_svfiprintf_r+0x192>
 80071a0:	ab03      	add	r3, sp, #12
 80071a2:	9300      	str	r3, [sp, #0]
 80071a4:	462a      	mov	r2, r5
 80071a6:	4638      	mov	r0, r7
 80071a8:	4b0e      	ldr	r3, [pc, #56]	@ (80071e4 <_svfiprintf_r+0x1f4>)
 80071aa:	a904      	add	r1, sp, #16
 80071ac:	f3af 8000 	nop.w
 80071b0:	1c42      	adds	r2, r0, #1
 80071b2:	4606      	mov	r6, r0
 80071b4:	d1d6      	bne.n	8007164 <_svfiprintf_r+0x174>
 80071b6:	89ab      	ldrh	r3, [r5, #12]
 80071b8:	065b      	lsls	r3, r3, #25
 80071ba:	f53f af2d 	bmi.w	8007018 <_svfiprintf_r+0x28>
 80071be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80071c0:	e72c      	b.n	800701c <_svfiprintf_r+0x2c>
 80071c2:	ab03      	add	r3, sp, #12
 80071c4:	9300      	str	r3, [sp, #0]
 80071c6:	462a      	mov	r2, r5
 80071c8:	4638      	mov	r0, r7
 80071ca:	4b06      	ldr	r3, [pc, #24]	@ (80071e4 <_svfiprintf_r+0x1f4>)
 80071cc:	a904      	add	r1, sp, #16
 80071ce:	f000 f9bd 	bl	800754c <_printf_i>
 80071d2:	e7ed      	b.n	80071b0 <_svfiprintf_r+0x1c0>
 80071d4:	080086a2 	.word	0x080086a2
 80071d8:	080086a8 	.word	0x080086a8
 80071dc:	080086ac 	.word	0x080086ac
 80071e0:	00000000 	.word	0x00000000
 80071e4:	08006f39 	.word	0x08006f39

080071e8 <__sfputc_r>:
 80071e8:	6893      	ldr	r3, [r2, #8]
 80071ea:	b410      	push	{r4}
 80071ec:	3b01      	subs	r3, #1
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	6093      	str	r3, [r2, #8]
 80071f2:	da07      	bge.n	8007204 <__sfputc_r+0x1c>
 80071f4:	6994      	ldr	r4, [r2, #24]
 80071f6:	42a3      	cmp	r3, r4
 80071f8:	db01      	blt.n	80071fe <__sfputc_r+0x16>
 80071fa:	290a      	cmp	r1, #10
 80071fc:	d102      	bne.n	8007204 <__sfputc_r+0x1c>
 80071fe:	bc10      	pop	{r4}
 8007200:	f7ff bc93 	b.w	8006b2a <__swbuf_r>
 8007204:	6813      	ldr	r3, [r2, #0]
 8007206:	1c58      	adds	r0, r3, #1
 8007208:	6010      	str	r0, [r2, #0]
 800720a:	7019      	strb	r1, [r3, #0]
 800720c:	4608      	mov	r0, r1
 800720e:	bc10      	pop	{r4}
 8007210:	4770      	bx	lr

08007212 <__sfputs_r>:
 8007212:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007214:	4606      	mov	r6, r0
 8007216:	460f      	mov	r7, r1
 8007218:	4614      	mov	r4, r2
 800721a:	18d5      	adds	r5, r2, r3
 800721c:	42ac      	cmp	r4, r5
 800721e:	d101      	bne.n	8007224 <__sfputs_r+0x12>
 8007220:	2000      	movs	r0, #0
 8007222:	e007      	b.n	8007234 <__sfputs_r+0x22>
 8007224:	463a      	mov	r2, r7
 8007226:	4630      	mov	r0, r6
 8007228:	f814 1b01 	ldrb.w	r1, [r4], #1
 800722c:	f7ff ffdc 	bl	80071e8 <__sfputc_r>
 8007230:	1c43      	adds	r3, r0, #1
 8007232:	d1f3      	bne.n	800721c <__sfputs_r+0xa>
 8007234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007238 <_vfiprintf_r>:
 8007238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800723c:	460d      	mov	r5, r1
 800723e:	4614      	mov	r4, r2
 8007240:	4698      	mov	r8, r3
 8007242:	4606      	mov	r6, r0
 8007244:	b09d      	sub	sp, #116	@ 0x74
 8007246:	b118      	cbz	r0, 8007250 <_vfiprintf_r+0x18>
 8007248:	6a03      	ldr	r3, [r0, #32]
 800724a:	b90b      	cbnz	r3, 8007250 <_vfiprintf_r+0x18>
 800724c:	f7ff fb64 	bl	8006918 <__sinit>
 8007250:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007252:	07d9      	lsls	r1, r3, #31
 8007254:	d405      	bmi.n	8007262 <_vfiprintf_r+0x2a>
 8007256:	89ab      	ldrh	r3, [r5, #12]
 8007258:	059a      	lsls	r2, r3, #22
 800725a:	d402      	bmi.n	8007262 <_vfiprintf_r+0x2a>
 800725c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800725e:	f7ff fd72 	bl	8006d46 <__retarget_lock_acquire_recursive>
 8007262:	89ab      	ldrh	r3, [r5, #12]
 8007264:	071b      	lsls	r3, r3, #28
 8007266:	d501      	bpl.n	800726c <_vfiprintf_r+0x34>
 8007268:	692b      	ldr	r3, [r5, #16]
 800726a:	b99b      	cbnz	r3, 8007294 <_vfiprintf_r+0x5c>
 800726c:	4629      	mov	r1, r5
 800726e:	4630      	mov	r0, r6
 8007270:	f7ff fc9a 	bl	8006ba8 <__swsetup_r>
 8007274:	b170      	cbz	r0, 8007294 <_vfiprintf_r+0x5c>
 8007276:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007278:	07dc      	lsls	r4, r3, #31
 800727a:	d504      	bpl.n	8007286 <_vfiprintf_r+0x4e>
 800727c:	f04f 30ff 	mov.w	r0, #4294967295
 8007280:	b01d      	add	sp, #116	@ 0x74
 8007282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007286:	89ab      	ldrh	r3, [r5, #12]
 8007288:	0598      	lsls	r0, r3, #22
 800728a:	d4f7      	bmi.n	800727c <_vfiprintf_r+0x44>
 800728c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800728e:	f7ff fd5b 	bl	8006d48 <__retarget_lock_release_recursive>
 8007292:	e7f3      	b.n	800727c <_vfiprintf_r+0x44>
 8007294:	2300      	movs	r3, #0
 8007296:	9309      	str	r3, [sp, #36]	@ 0x24
 8007298:	2320      	movs	r3, #32
 800729a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800729e:	2330      	movs	r3, #48	@ 0x30
 80072a0:	f04f 0901 	mov.w	r9, #1
 80072a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80072a8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007454 <_vfiprintf_r+0x21c>
 80072ac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80072b0:	4623      	mov	r3, r4
 80072b2:	469a      	mov	sl, r3
 80072b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072b8:	b10a      	cbz	r2, 80072be <_vfiprintf_r+0x86>
 80072ba:	2a25      	cmp	r2, #37	@ 0x25
 80072bc:	d1f9      	bne.n	80072b2 <_vfiprintf_r+0x7a>
 80072be:	ebba 0b04 	subs.w	fp, sl, r4
 80072c2:	d00b      	beq.n	80072dc <_vfiprintf_r+0xa4>
 80072c4:	465b      	mov	r3, fp
 80072c6:	4622      	mov	r2, r4
 80072c8:	4629      	mov	r1, r5
 80072ca:	4630      	mov	r0, r6
 80072cc:	f7ff ffa1 	bl	8007212 <__sfputs_r>
 80072d0:	3001      	adds	r0, #1
 80072d2:	f000 80a7 	beq.w	8007424 <_vfiprintf_r+0x1ec>
 80072d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072d8:	445a      	add	r2, fp
 80072da:	9209      	str	r2, [sp, #36]	@ 0x24
 80072dc:	f89a 3000 	ldrb.w	r3, [sl]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	f000 809f 	beq.w	8007424 <_vfiprintf_r+0x1ec>
 80072e6:	2300      	movs	r3, #0
 80072e8:	f04f 32ff 	mov.w	r2, #4294967295
 80072ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072f0:	f10a 0a01 	add.w	sl, sl, #1
 80072f4:	9304      	str	r3, [sp, #16]
 80072f6:	9307      	str	r3, [sp, #28]
 80072f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80072fc:	931a      	str	r3, [sp, #104]	@ 0x68
 80072fe:	4654      	mov	r4, sl
 8007300:	2205      	movs	r2, #5
 8007302:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007306:	4853      	ldr	r0, [pc, #332]	@ (8007454 <_vfiprintf_r+0x21c>)
 8007308:	f000 fb96 	bl	8007a38 <memchr>
 800730c:	9a04      	ldr	r2, [sp, #16]
 800730e:	b9d8      	cbnz	r0, 8007348 <_vfiprintf_r+0x110>
 8007310:	06d1      	lsls	r1, r2, #27
 8007312:	bf44      	itt	mi
 8007314:	2320      	movmi	r3, #32
 8007316:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800731a:	0713      	lsls	r3, r2, #28
 800731c:	bf44      	itt	mi
 800731e:	232b      	movmi	r3, #43	@ 0x2b
 8007320:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007324:	f89a 3000 	ldrb.w	r3, [sl]
 8007328:	2b2a      	cmp	r3, #42	@ 0x2a
 800732a:	d015      	beq.n	8007358 <_vfiprintf_r+0x120>
 800732c:	4654      	mov	r4, sl
 800732e:	2000      	movs	r0, #0
 8007330:	f04f 0c0a 	mov.w	ip, #10
 8007334:	9a07      	ldr	r2, [sp, #28]
 8007336:	4621      	mov	r1, r4
 8007338:	f811 3b01 	ldrb.w	r3, [r1], #1
 800733c:	3b30      	subs	r3, #48	@ 0x30
 800733e:	2b09      	cmp	r3, #9
 8007340:	d94b      	bls.n	80073da <_vfiprintf_r+0x1a2>
 8007342:	b1b0      	cbz	r0, 8007372 <_vfiprintf_r+0x13a>
 8007344:	9207      	str	r2, [sp, #28]
 8007346:	e014      	b.n	8007372 <_vfiprintf_r+0x13a>
 8007348:	eba0 0308 	sub.w	r3, r0, r8
 800734c:	fa09 f303 	lsl.w	r3, r9, r3
 8007350:	4313      	orrs	r3, r2
 8007352:	46a2      	mov	sl, r4
 8007354:	9304      	str	r3, [sp, #16]
 8007356:	e7d2      	b.n	80072fe <_vfiprintf_r+0xc6>
 8007358:	9b03      	ldr	r3, [sp, #12]
 800735a:	1d19      	adds	r1, r3, #4
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	9103      	str	r1, [sp, #12]
 8007360:	2b00      	cmp	r3, #0
 8007362:	bfbb      	ittet	lt
 8007364:	425b      	neglt	r3, r3
 8007366:	f042 0202 	orrlt.w	r2, r2, #2
 800736a:	9307      	strge	r3, [sp, #28]
 800736c:	9307      	strlt	r3, [sp, #28]
 800736e:	bfb8      	it	lt
 8007370:	9204      	strlt	r2, [sp, #16]
 8007372:	7823      	ldrb	r3, [r4, #0]
 8007374:	2b2e      	cmp	r3, #46	@ 0x2e
 8007376:	d10a      	bne.n	800738e <_vfiprintf_r+0x156>
 8007378:	7863      	ldrb	r3, [r4, #1]
 800737a:	2b2a      	cmp	r3, #42	@ 0x2a
 800737c:	d132      	bne.n	80073e4 <_vfiprintf_r+0x1ac>
 800737e:	9b03      	ldr	r3, [sp, #12]
 8007380:	3402      	adds	r4, #2
 8007382:	1d1a      	adds	r2, r3, #4
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	9203      	str	r2, [sp, #12]
 8007388:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800738c:	9305      	str	r3, [sp, #20]
 800738e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007458 <_vfiprintf_r+0x220>
 8007392:	2203      	movs	r2, #3
 8007394:	4650      	mov	r0, sl
 8007396:	7821      	ldrb	r1, [r4, #0]
 8007398:	f000 fb4e 	bl	8007a38 <memchr>
 800739c:	b138      	cbz	r0, 80073ae <_vfiprintf_r+0x176>
 800739e:	2240      	movs	r2, #64	@ 0x40
 80073a0:	9b04      	ldr	r3, [sp, #16]
 80073a2:	eba0 000a 	sub.w	r0, r0, sl
 80073a6:	4082      	lsls	r2, r0
 80073a8:	4313      	orrs	r3, r2
 80073aa:	3401      	adds	r4, #1
 80073ac:	9304      	str	r3, [sp, #16]
 80073ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073b2:	2206      	movs	r2, #6
 80073b4:	4829      	ldr	r0, [pc, #164]	@ (800745c <_vfiprintf_r+0x224>)
 80073b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80073ba:	f000 fb3d 	bl	8007a38 <memchr>
 80073be:	2800      	cmp	r0, #0
 80073c0:	d03f      	beq.n	8007442 <_vfiprintf_r+0x20a>
 80073c2:	4b27      	ldr	r3, [pc, #156]	@ (8007460 <_vfiprintf_r+0x228>)
 80073c4:	bb1b      	cbnz	r3, 800740e <_vfiprintf_r+0x1d6>
 80073c6:	9b03      	ldr	r3, [sp, #12]
 80073c8:	3307      	adds	r3, #7
 80073ca:	f023 0307 	bic.w	r3, r3, #7
 80073ce:	3308      	adds	r3, #8
 80073d0:	9303      	str	r3, [sp, #12]
 80073d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073d4:	443b      	add	r3, r7
 80073d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80073d8:	e76a      	b.n	80072b0 <_vfiprintf_r+0x78>
 80073da:	460c      	mov	r4, r1
 80073dc:	2001      	movs	r0, #1
 80073de:	fb0c 3202 	mla	r2, ip, r2, r3
 80073e2:	e7a8      	b.n	8007336 <_vfiprintf_r+0xfe>
 80073e4:	2300      	movs	r3, #0
 80073e6:	f04f 0c0a 	mov.w	ip, #10
 80073ea:	4619      	mov	r1, r3
 80073ec:	3401      	adds	r4, #1
 80073ee:	9305      	str	r3, [sp, #20]
 80073f0:	4620      	mov	r0, r4
 80073f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073f6:	3a30      	subs	r2, #48	@ 0x30
 80073f8:	2a09      	cmp	r2, #9
 80073fa:	d903      	bls.n	8007404 <_vfiprintf_r+0x1cc>
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d0c6      	beq.n	800738e <_vfiprintf_r+0x156>
 8007400:	9105      	str	r1, [sp, #20]
 8007402:	e7c4      	b.n	800738e <_vfiprintf_r+0x156>
 8007404:	4604      	mov	r4, r0
 8007406:	2301      	movs	r3, #1
 8007408:	fb0c 2101 	mla	r1, ip, r1, r2
 800740c:	e7f0      	b.n	80073f0 <_vfiprintf_r+0x1b8>
 800740e:	ab03      	add	r3, sp, #12
 8007410:	9300      	str	r3, [sp, #0]
 8007412:	462a      	mov	r2, r5
 8007414:	4630      	mov	r0, r6
 8007416:	4b13      	ldr	r3, [pc, #76]	@ (8007464 <_vfiprintf_r+0x22c>)
 8007418:	a904      	add	r1, sp, #16
 800741a:	f3af 8000 	nop.w
 800741e:	4607      	mov	r7, r0
 8007420:	1c78      	adds	r0, r7, #1
 8007422:	d1d6      	bne.n	80073d2 <_vfiprintf_r+0x19a>
 8007424:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007426:	07d9      	lsls	r1, r3, #31
 8007428:	d405      	bmi.n	8007436 <_vfiprintf_r+0x1fe>
 800742a:	89ab      	ldrh	r3, [r5, #12]
 800742c:	059a      	lsls	r2, r3, #22
 800742e:	d402      	bmi.n	8007436 <_vfiprintf_r+0x1fe>
 8007430:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007432:	f7ff fc89 	bl	8006d48 <__retarget_lock_release_recursive>
 8007436:	89ab      	ldrh	r3, [r5, #12]
 8007438:	065b      	lsls	r3, r3, #25
 800743a:	f53f af1f 	bmi.w	800727c <_vfiprintf_r+0x44>
 800743e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007440:	e71e      	b.n	8007280 <_vfiprintf_r+0x48>
 8007442:	ab03      	add	r3, sp, #12
 8007444:	9300      	str	r3, [sp, #0]
 8007446:	462a      	mov	r2, r5
 8007448:	4630      	mov	r0, r6
 800744a:	4b06      	ldr	r3, [pc, #24]	@ (8007464 <_vfiprintf_r+0x22c>)
 800744c:	a904      	add	r1, sp, #16
 800744e:	f000 f87d 	bl	800754c <_printf_i>
 8007452:	e7e4      	b.n	800741e <_vfiprintf_r+0x1e6>
 8007454:	080086a2 	.word	0x080086a2
 8007458:	080086a8 	.word	0x080086a8
 800745c:	080086ac 	.word	0x080086ac
 8007460:	00000000 	.word	0x00000000
 8007464:	08007213 	.word	0x08007213

08007468 <_printf_common>:
 8007468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800746c:	4616      	mov	r6, r2
 800746e:	4698      	mov	r8, r3
 8007470:	688a      	ldr	r2, [r1, #8]
 8007472:	690b      	ldr	r3, [r1, #16]
 8007474:	4607      	mov	r7, r0
 8007476:	4293      	cmp	r3, r2
 8007478:	bfb8      	it	lt
 800747a:	4613      	movlt	r3, r2
 800747c:	6033      	str	r3, [r6, #0]
 800747e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007482:	460c      	mov	r4, r1
 8007484:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007488:	b10a      	cbz	r2, 800748e <_printf_common+0x26>
 800748a:	3301      	adds	r3, #1
 800748c:	6033      	str	r3, [r6, #0]
 800748e:	6823      	ldr	r3, [r4, #0]
 8007490:	0699      	lsls	r1, r3, #26
 8007492:	bf42      	ittt	mi
 8007494:	6833      	ldrmi	r3, [r6, #0]
 8007496:	3302      	addmi	r3, #2
 8007498:	6033      	strmi	r3, [r6, #0]
 800749a:	6825      	ldr	r5, [r4, #0]
 800749c:	f015 0506 	ands.w	r5, r5, #6
 80074a0:	d106      	bne.n	80074b0 <_printf_common+0x48>
 80074a2:	f104 0a19 	add.w	sl, r4, #25
 80074a6:	68e3      	ldr	r3, [r4, #12]
 80074a8:	6832      	ldr	r2, [r6, #0]
 80074aa:	1a9b      	subs	r3, r3, r2
 80074ac:	42ab      	cmp	r3, r5
 80074ae:	dc2b      	bgt.n	8007508 <_printf_common+0xa0>
 80074b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80074b4:	6822      	ldr	r2, [r4, #0]
 80074b6:	3b00      	subs	r3, #0
 80074b8:	bf18      	it	ne
 80074ba:	2301      	movne	r3, #1
 80074bc:	0692      	lsls	r2, r2, #26
 80074be:	d430      	bmi.n	8007522 <_printf_common+0xba>
 80074c0:	4641      	mov	r1, r8
 80074c2:	4638      	mov	r0, r7
 80074c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80074c8:	47c8      	blx	r9
 80074ca:	3001      	adds	r0, #1
 80074cc:	d023      	beq.n	8007516 <_printf_common+0xae>
 80074ce:	6823      	ldr	r3, [r4, #0]
 80074d0:	6922      	ldr	r2, [r4, #16]
 80074d2:	f003 0306 	and.w	r3, r3, #6
 80074d6:	2b04      	cmp	r3, #4
 80074d8:	bf14      	ite	ne
 80074da:	2500      	movne	r5, #0
 80074dc:	6833      	ldreq	r3, [r6, #0]
 80074de:	f04f 0600 	mov.w	r6, #0
 80074e2:	bf08      	it	eq
 80074e4:	68e5      	ldreq	r5, [r4, #12]
 80074e6:	f104 041a 	add.w	r4, r4, #26
 80074ea:	bf08      	it	eq
 80074ec:	1aed      	subeq	r5, r5, r3
 80074ee:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80074f2:	bf08      	it	eq
 80074f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074f8:	4293      	cmp	r3, r2
 80074fa:	bfc4      	itt	gt
 80074fc:	1a9b      	subgt	r3, r3, r2
 80074fe:	18ed      	addgt	r5, r5, r3
 8007500:	42b5      	cmp	r5, r6
 8007502:	d11a      	bne.n	800753a <_printf_common+0xd2>
 8007504:	2000      	movs	r0, #0
 8007506:	e008      	b.n	800751a <_printf_common+0xb2>
 8007508:	2301      	movs	r3, #1
 800750a:	4652      	mov	r2, sl
 800750c:	4641      	mov	r1, r8
 800750e:	4638      	mov	r0, r7
 8007510:	47c8      	blx	r9
 8007512:	3001      	adds	r0, #1
 8007514:	d103      	bne.n	800751e <_printf_common+0xb6>
 8007516:	f04f 30ff 	mov.w	r0, #4294967295
 800751a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800751e:	3501      	adds	r5, #1
 8007520:	e7c1      	b.n	80074a6 <_printf_common+0x3e>
 8007522:	2030      	movs	r0, #48	@ 0x30
 8007524:	18e1      	adds	r1, r4, r3
 8007526:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800752a:	1c5a      	adds	r2, r3, #1
 800752c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007530:	4422      	add	r2, r4
 8007532:	3302      	adds	r3, #2
 8007534:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007538:	e7c2      	b.n	80074c0 <_printf_common+0x58>
 800753a:	2301      	movs	r3, #1
 800753c:	4622      	mov	r2, r4
 800753e:	4641      	mov	r1, r8
 8007540:	4638      	mov	r0, r7
 8007542:	47c8      	blx	r9
 8007544:	3001      	adds	r0, #1
 8007546:	d0e6      	beq.n	8007516 <_printf_common+0xae>
 8007548:	3601      	adds	r6, #1
 800754a:	e7d9      	b.n	8007500 <_printf_common+0x98>

0800754c <_printf_i>:
 800754c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007550:	7e0f      	ldrb	r7, [r1, #24]
 8007552:	4691      	mov	r9, r2
 8007554:	2f78      	cmp	r7, #120	@ 0x78
 8007556:	4680      	mov	r8, r0
 8007558:	460c      	mov	r4, r1
 800755a:	469a      	mov	sl, r3
 800755c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800755e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007562:	d807      	bhi.n	8007574 <_printf_i+0x28>
 8007564:	2f62      	cmp	r7, #98	@ 0x62
 8007566:	d80a      	bhi.n	800757e <_printf_i+0x32>
 8007568:	2f00      	cmp	r7, #0
 800756a:	f000 80d3 	beq.w	8007714 <_printf_i+0x1c8>
 800756e:	2f58      	cmp	r7, #88	@ 0x58
 8007570:	f000 80ba 	beq.w	80076e8 <_printf_i+0x19c>
 8007574:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007578:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800757c:	e03a      	b.n	80075f4 <_printf_i+0xa8>
 800757e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007582:	2b15      	cmp	r3, #21
 8007584:	d8f6      	bhi.n	8007574 <_printf_i+0x28>
 8007586:	a101      	add	r1, pc, #4	@ (adr r1, 800758c <_printf_i+0x40>)
 8007588:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800758c:	080075e5 	.word	0x080075e5
 8007590:	080075f9 	.word	0x080075f9
 8007594:	08007575 	.word	0x08007575
 8007598:	08007575 	.word	0x08007575
 800759c:	08007575 	.word	0x08007575
 80075a0:	08007575 	.word	0x08007575
 80075a4:	080075f9 	.word	0x080075f9
 80075a8:	08007575 	.word	0x08007575
 80075ac:	08007575 	.word	0x08007575
 80075b0:	08007575 	.word	0x08007575
 80075b4:	08007575 	.word	0x08007575
 80075b8:	080076fb 	.word	0x080076fb
 80075bc:	08007623 	.word	0x08007623
 80075c0:	080076b5 	.word	0x080076b5
 80075c4:	08007575 	.word	0x08007575
 80075c8:	08007575 	.word	0x08007575
 80075cc:	0800771d 	.word	0x0800771d
 80075d0:	08007575 	.word	0x08007575
 80075d4:	08007623 	.word	0x08007623
 80075d8:	08007575 	.word	0x08007575
 80075dc:	08007575 	.word	0x08007575
 80075e0:	080076bd 	.word	0x080076bd
 80075e4:	6833      	ldr	r3, [r6, #0]
 80075e6:	1d1a      	adds	r2, r3, #4
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	6032      	str	r2, [r6, #0]
 80075ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80075f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80075f4:	2301      	movs	r3, #1
 80075f6:	e09e      	b.n	8007736 <_printf_i+0x1ea>
 80075f8:	6833      	ldr	r3, [r6, #0]
 80075fa:	6820      	ldr	r0, [r4, #0]
 80075fc:	1d19      	adds	r1, r3, #4
 80075fe:	6031      	str	r1, [r6, #0]
 8007600:	0606      	lsls	r6, r0, #24
 8007602:	d501      	bpl.n	8007608 <_printf_i+0xbc>
 8007604:	681d      	ldr	r5, [r3, #0]
 8007606:	e003      	b.n	8007610 <_printf_i+0xc4>
 8007608:	0645      	lsls	r5, r0, #25
 800760a:	d5fb      	bpl.n	8007604 <_printf_i+0xb8>
 800760c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007610:	2d00      	cmp	r5, #0
 8007612:	da03      	bge.n	800761c <_printf_i+0xd0>
 8007614:	232d      	movs	r3, #45	@ 0x2d
 8007616:	426d      	negs	r5, r5
 8007618:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800761c:	230a      	movs	r3, #10
 800761e:	4859      	ldr	r0, [pc, #356]	@ (8007784 <_printf_i+0x238>)
 8007620:	e011      	b.n	8007646 <_printf_i+0xfa>
 8007622:	6821      	ldr	r1, [r4, #0]
 8007624:	6833      	ldr	r3, [r6, #0]
 8007626:	0608      	lsls	r0, r1, #24
 8007628:	f853 5b04 	ldr.w	r5, [r3], #4
 800762c:	d402      	bmi.n	8007634 <_printf_i+0xe8>
 800762e:	0649      	lsls	r1, r1, #25
 8007630:	bf48      	it	mi
 8007632:	b2ad      	uxthmi	r5, r5
 8007634:	2f6f      	cmp	r7, #111	@ 0x6f
 8007636:	6033      	str	r3, [r6, #0]
 8007638:	bf14      	ite	ne
 800763a:	230a      	movne	r3, #10
 800763c:	2308      	moveq	r3, #8
 800763e:	4851      	ldr	r0, [pc, #324]	@ (8007784 <_printf_i+0x238>)
 8007640:	2100      	movs	r1, #0
 8007642:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007646:	6866      	ldr	r6, [r4, #4]
 8007648:	2e00      	cmp	r6, #0
 800764a:	bfa8      	it	ge
 800764c:	6821      	ldrge	r1, [r4, #0]
 800764e:	60a6      	str	r6, [r4, #8]
 8007650:	bfa4      	itt	ge
 8007652:	f021 0104 	bicge.w	r1, r1, #4
 8007656:	6021      	strge	r1, [r4, #0]
 8007658:	b90d      	cbnz	r5, 800765e <_printf_i+0x112>
 800765a:	2e00      	cmp	r6, #0
 800765c:	d04b      	beq.n	80076f6 <_printf_i+0x1aa>
 800765e:	4616      	mov	r6, r2
 8007660:	fbb5 f1f3 	udiv	r1, r5, r3
 8007664:	fb03 5711 	mls	r7, r3, r1, r5
 8007668:	5dc7      	ldrb	r7, [r0, r7]
 800766a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800766e:	462f      	mov	r7, r5
 8007670:	42bb      	cmp	r3, r7
 8007672:	460d      	mov	r5, r1
 8007674:	d9f4      	bls.n	8007660 <_printf_i+0x114>
 8007676:	2b08      	cmp	r3, #8
 8007678:	d10b      	bne.n	8007692 <_printf_i+0x146>
 800767a:	6823      	ldr	r3, [r4, #0]
 800767c:	07df      	lsls	r7, r3, #31
 800767e:	d508      	bpl.n	8007692 <_printf_i+0x146>
 8007680:	6923      	ldr	r3, [r4, #16]
 8007682:	6861      	ldr	r1, [r4, #4]
 8007684:	4299      	cmp	r1, r3
 8007686:	bfde      	ittt	le
 8007688:	2330      	movle	r3, #48	@ 0x30
 800768a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800768e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007692:	1b92      	subs	r2, r2, r6
 8007694:	6122      	str	r2, [r4, #16]
 8007696:	464b      	mov	r3, r9
 8007698:	4621      	mov	r1, r4
 800769a:	4640      	mov	r0, r8
 800769c:	f8cd a000 	str.w	sl, [sp]
 80076a0:	aa03      	add	r2, sp, #12
 80076a2:	f7ff fee1 	bl	8007468 <_printf_common>
 80076a6:	3001      	adds	r0, #1
 80076a8:	d14a      	bne.n	8007740 <_printf_i+0x1f4>
 80076aa:	f04f 30ff 	mov.w	r0, #4294967295
 80076ae:	b004      	add	sp, #16
 80076b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076b4:	6823      	ldr	r3, [r4, #0]
 80076b6:	f043 0320 	orr.w	r3, r3, #32
 80076ba:	6023      	str	r3, [r4, #0]
 80076bc:	2778      	movs	r7, #120	@ 0x78
 80076be:	4832      	ldr	r0, [pc, #200]	@ (8007788 <_printf_i+0x23c>)
 80076c0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80076c4:	6823      	ldr	r3, [r4, #0]
 80076c6:	6831      	ldr	r1, [r6, #0]
 80076c8:	061f      	lsls	r7, r3, #24
 80076ca:	f851 5b04 	ldr.w	r5, [r1], #4
 80076ce:	d402      	bmi.n	80076d6 <_printf_i+0x18a>
 80076d0:	065f      	lsls	r7, r3, #25
 80076d2:	bf48      	it	mi
 80076d4:	b2ad      	uxthmi	r5, r5
 80076d6:	6031      	str	r1, [r6, #0]
 80076d8:	07d9      	lsls	r1, r3, #31
 80076da:	bf44      	itt	mi
 80076dc:	f043 0320 	orrmi.w	r3, r3, #32
 80076e0:	6023      	strmi	r3, [r4, #0]
 80076e2:	b11d      	cbz	r5, 80076ec <_printf_i+0x1a0>
 80076e4:	2310      	movs	r3, #16
 80076e6:	e7ab      	b.n	8007640 <_printf_i+0xf4>
 80076e8:	4826      	ldr	r0, [pc, #152]	@ (8007784 <_printf_i+0x238>)
 80076ea:	e7e9      	b.n	80076c0 <_printf_i+0x174>
 80076ec:	6823      	ldr	r3, [r4, #0]
 80076ee:	f023 0320 	bic.w	r3, r3, #32
 80076f2:	6023      	str	r3, [r4, #0]
 80076f4:	e7f6      	b.n	80076e4 <_printf_i+0x198>
 80076f6:	4616      	mov	r6, r2
 80076f8:	e7bd      	b.n	8007676 <_printf_i+0x12a>
 80076fa:	6833      	ldr	r3, [r6, #0]
 80076fc:	6825      	ldr	r5, [r4, #0]
 80076fe:	1d18      	adds	r0, r3, #4
 8007700:	6961      	ldr	r1, [r4, #20]
 8007702:	6030      	str	r0, [r6, #0]
 8007704:	062e      	lsls	r6, r5, #24
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	d501      	bpl.n	800770e <_printf_i+0x1c2>
 800770a:	6019      	str	r1, [r3, #0]
 800770c:	e002      	b.n	8007714 <_printf_i+0x1c8>
 800770e:	0668      	lsls	r0, r5, #25
 8007710:	d5fb      	bpl.n	800770a <_printf_i+0x1be>
 8007712:	8019      	strh	r1, [r3, #0]
 8007714:	2300      	movs	r3, #0
 8007716:	4616      	mov	r6, r2
 8007718:	6123      	str	r3, [r4, #16]
 800771a:	e7bc      	b.n	8007696 <_printf_i+0x14a>
 800771c:	6833      	ldr	r3, [r6, #0]
 800771e:	2100      	movs	r1, #0
 8007720:	1d1a      	adds	r2, r3, #4
 8007722:	6032      	str	r2, [r6, #0]
 8007724:	681e      	ldr	r6, [r3, #0]
 8007726:	6862      	ldr	r2, [r4, #4]
 8007728:	4630      	mov	r0, r6
 800772a:	f000 f985 	bl	8007a38 <memchr>
 800772e:	b108      	cbz	r0, 8007734 <_printf_i+0x1e8>
 8007730:	1b80      	subs	r0, r0, r6
 8007732:	6060      	str	r0, [r4, #4]
 8007734:	6863      	ldr	r3, [r4, #4]
 8007736:	6123      	str	r3, [r4, #16]
 8007738:	2300      	movs	r3, #0
 800773a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800773e:	e7aa      	b.n	8007696 <_printf_i+0x14a>
 8007740:	4632      	mov	r2, r6
 8007742:	4649      	mov	r1, r9
 8007744:	4640      	mov	r0, r8
 8007746:	6923      	ldr	r3, [r4, #16]
 8007748:	47d0      	blx	sl
 800774a:	3001      	adds	r0, #1
 800774c:	d0ad      	beq.n	80076aa <_printf_i+0x15e>
 800774e:	6823      	ldr	r3, [r4, #0]
 8007750:	079b      	lsls	r3, r3, #30
 8007752:	d413      	bmi.n	800777c <_printf_i+0x230>
 8007754:	68e0      	ldr	r0, [r4, #12]
 8007756:	9b03      	ldr	r3, [sp, #12]
 8007758:	4298      	cmp	r0, r3
 800775a:	bfb8      	it	lt
 800775c:	4618      	movlt	r0, r3
 800775e:	e7a6      	b.n	80076ae <_printf_i+0x162>
 8007760:	2301      	movs	r3, #1
 8007762:	4632      	mov	r2, r6
 8007764:	4649      	mov	r1, r9
 8007766:	4640      	mov	r0, r8
 8007768:	47d0      	blx	sl
 800776a:	3001      	adds	r0, #1
 800776c:	d09d      	beq.n	80076aa <_printf_i+0x15e>
 800776e:	3501      	adds	r5, #1
 8007770:	68e3      	ldr	r3, [r4, #12]
 8007772:	9903      	ldr	r1, [sp, #12]
 8007774:	1a5b      	subs	r3, r3, r1
 8007776:	42ab      	cmp	r3, r5
 8007778:	dcf2      	bgt.n	8007760 <_printf_i+0x214>
 800777a:	e7eb      	b.n	8007754 <_printf_i+0x208>
 800777c:	2500      	movs	r5, #0
 800777e:	f104 0619 	add.w	r6, r4, #25
 8007782:	e7f5      	b.n	8007770 <_printf_i+0x224>
 8007784:	080086b3 	.word	0x080086b3
 8007788:	080086c4 	.word	0x080086c4

0800778c <__sflush_r>:
 800778c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007792:	0716      	lsls	r6, r2, #28
 8007794:	4605      	mov	r5, r0
 8007796:	460c      	mov	r4, r1
 8007798:	d454      	bmi.n	8007844 <__sflush_r+0xb8>
 800779a:	684b      	ldr	r3, [r1, #4]
 800779c:	2b00      	cmp	r3, #0
 800779e:	dc02      	bgt.n	80077a6 <__sflush_r+0x1a>
 80077a0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	dd48      	ble.n	8007838 <__sflush_r+0xac>
 80077a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80077a8:	2e00      	cmp	r6, #0
 80077aa:	d045      	beq.n	8007838 <__sflush_r+0xac>
 80077ac:	2300      	movs	r3, #0
 80077ae:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80077b2:	682f      	ldr	r7, [r5, #0]
 80077b4:	6a21      	ldr	r1, [r4, #32]
 80077b6:	602b      	str	r3, [r5, #0]
 80077b8:	d030      	beq.n	800781c <__sflush_r+0x90>
 80077ba:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80077bc:	89a3      	ldrh	r3, [r4, #12]
 80077be:	0759      	lsls	r1, r3, #29
 80077c0:	d505      	bpl.n	80077ce <__sflush_r+0x42>
 80077c2:	6863      	ldr	r3, [r4, #4]
 80077c4:	1ad2      	subs	r2, r2, r3
 80077c6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80077c8:	b10b      	cbz	r3, 80077ce <__sflush_r+0x42>
 80077ca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80077cc:	1ad2      	subs	r2, r2, r3
 80077ce:	2300      	movs	r3, #0
 80077d0:	4628      	mov	r0, r5
 80077d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80077d4:	6a21      	ldr	r1, [r4, #32]
 80077d6:	47b0      	blx	r6
 80077d8:	1c43      	adds	r3, r0, #1
 80077da:	89a3      	ldrh	r3, [r4, #12]
 80077dc:	d106      	bne.n	80077ec <__sflush_r+0x60>
 80077de:	6829      	ldr	r1, [r5, #0]
 80077e0:	291d      	cmp	r1, #29
 80077e2:	d82b      	bhi.n	800783c <__sflush_r+0xb0>
 80077e4:	4a28      	ldr	r2, [pc, #160]	@ (8007888 <__sflush_r+0xfc>)
 80077e6:	410a      	asrs	r2, r1
 80077e8:	07d6      	lsls	r6, r2, #31
 80077ea:	d427      	bmi.n	800783c <__sflush_r+0xb0>
 80077ec:	2200      	movs	r2, #0
 80077ee:	6062      	str	r2, [r4, #4]
 80077f0:	6922      	ldr	r2, [r4, #16]
 80077f2:	04d9      	lsls	r1, r3, #19
 80077f4:	6022      	str	r2, [r4, #0]
 80077f6:	d504      	bpl.n	8007802 <__sflush_r+0x76>
 80077f8:	1c42      	adds	r2, r0, #1
 80077fa:	d101      	bne.n	8007800 <__sflush_r+0x74>
 80077fc:	682b      	ldr	r3, [r5, #0]
 80077fe:	b903      	cbnz	r3, 8007802 <__sflush_r+0x76>
 8007800:	6560      	str	r0, [r4, #84]	@ 0x54
 8007802:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007804:	602f      	str	r7, [r5, #0]
 8007806:	b1b9      	cbz	r1, 8007838 <__sflush_r+0xac>
 8007808:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800780c:	4299      	cmp	r1, r3
 800780e:	d002      	beq.n	8007816 <__sflush_r+0x8a>
 8007810:	4628      	mov	r0, r5
 8007812:	f7ff fa9b 	bl	8006d4c <_free_r>
 8007816:	2300      	movs	r3, #0
 8007818:	6363      	str	r3, [r4, #52]	@ 0x34
 800781a:	e00d      	b.n	8007838 <__sflush_r+0xac>
 800781c:	2301      	movs	r3, #1
 800781e:	4628      	mov	r0, r5
 8007820:	47b0      	blx	r6
 8007822:	4602      	mov	r2, r0
 8007824:	1c50      	adds	r0, r2, #1
 8007826:	d1c9      	bne.n	80077bc <__sflush_r+0x30>
 8007828:	682b      	ldr	r3, [r5, #0]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d0c6      	beq.n	80077bc <__sflush_r+0x30>
 800782e:	2b1d      	cmp	r3, #29
 8007830:	d001      	beq.n	8007836 <__sflush_r+0xaa>
 8007832:	2b16      	cmp	r3, #22
 8007834:	d11d      	bne.n	8007872 <__sflush_r+0xe6>
 8007836:	602f      	str	r7, [r5, #0]
 8007838:	2000      	movs	r0, #0
 800783a:	e021      	b.n	8007880 <__sflush_r+0xf4>
 800783c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007840:	b21b      	sxth	r3, r3
 8007842:	e01a      	b.n	800787a <__sflush_r+0xee>
 8007844:	690f      	ldr	r7, [r1, #16]
 8007846:	2f00      	cmp	r7, #0
 8007848:	d0f6      	beq.n	8007838 <__sflush_r+0xac>
 800784a:	0793      	lsls	r3, r2, #30
 800784c:	bf18      	it	ne
 800784e:	2300      	movne	r3, #0
 8007850:	680e      	ldr	r6, [r1, #0]
 8007852:	bf08      	it	eq
 8007854:	694b      	ldreq	r3, [r1, #20]
 8007856:	1bf6      	subs	r6, r6, r7
 8007858:	600f      	str	r7, [r1, #0]
 800785a:	608b      	str	r3, [r1, #8]
 800785c:	2e00      	cmp	r6, #0
 800785e:	ddeb      	ble.n	8007838 <__sflush_r+0xac>
 8007860:	4633      	mov	r3, r6
 8007862:	463a      	mov	r2, r7
 8007864:	4628      	mov	r0, r5
 8007866:	6a21      	ldr	r1, [r4, #32]
 8007868:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800786c:	47e0      	blx	ip
 800786e:	2800      	cmp	r0, #0
 8007870:	dc07      	bgt.n	8007882 <__sflush_r+0xf6>
 8007872:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007876:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800787a:	f04f 30ff 	mov.w	r0, #4294967295
 800787e:	81a3      	strh	r3, [r4, #12]
 8007880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007882:	4407      	add	r7, r0
 8007884:	1a36      	subs	r6, r6, r0
 8007886:	e7e9      	b.n	800785c <__sflush_r+0xd0>
 8007888:	dfbffffe 	.word	0xdfbffffe

0800788c <_fflush_r>:
 800788c:	b538      	push	{r3, r4, r5, lr}
 800788e:	690b      	ldr	r3, [r1, #16]
 8007890:	4605      	mov	r5, r0
 8007892:	460c      	mov	r4, r1
 8007894:	b913      	cbnz	r3, 800789c <_fflush_r+0x10>
 8007896:	2500      	movs	r5, #0
 8007898:	4628      	mov	r0, r5
 800789a:	bd38      	pop	{r3, r4, r5, pc}
 800789c:	b118      	cbz	r0, 80078a6 <_fflush_r+0x1a>
 800789e:	6a03      	ldr	r3, [r0, #32]
 80078a0:	b90b      	cbnz	r3, 80078a6 <_fflush_r+0x1a>
 80078a2:	f7ff f839 	bl	8006918 <__sinit>
 80078a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d0f3      	beq.n	8007896 <_fflush_r+0xa>
 80078ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80078b0:	07d0      	lsls	r0, r2, #31
 80078b2:	d404      	bmi.n	80078be <_fflush_r+0x32>
 80078b4:	0599      	lsls	r1, r3, #22
 80078b6:	d402      	bmi.n	80078be <_fflush_r+0x32>
 80078b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078ba:	f7ff fa44 	bl	8006d46 <__retarget_lock_acquire_recursive>
 80078be:	4628      	mov	r0, r5
 80078c0:	4621      	mov	r1, r4
 80078c2:	f7ff ff63 	bl	800778c <__sflush_r>
 80078c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80078c8:	4605      	mov	r5, r0
 80078ca:	07da      	lsls	r2, r3, #31
 80078cc:	d4e4      	bmi.n	8007898 <_fflush_r+0xc>
 80078ce:	89a3      	ldrh	r3, [r4, #12]
 80078d0:	059b      	lsls	r3, r3, #22
 80078d2:	d4e1      	bmi.n	8007898 <_fflush_r+0xc>
 80078d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078d6:	f7ff fa37 	bl	8006d48 <__retarget_lock_release_recursive>
 80078da:	e7dd      	b.n	8007898 <_fflush_r+0xc>

080078dc <__swhatbuf_r>:
 80078dc:	b570      	push	{r4, r5, r6, lr}
 80078de:	460c      	mov	r4, r1
 80078e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078e4:	4615      	mov	r5, r2
 80078e6:	2900      	cmp	r1, #0
 80078e8:	461e      	mov	r6, r3
 80078ea:	b096      	sub	sp, #88	@ 0x58
 80078ec:	da0c      	bge.n	8007908 <__swhatbuf_r+0x2c>
 80078ee:	89a3      	ldrh	r3, [r4, #12]
 80078f0:	2100      	movs	r1, #0
 80078f2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80078f6:	bf14      	ite	ne
 80078f8:	2340      	movne	r3, #64	@ 0x40
 80078fa:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80078fe:	2000      	movs	r0, #0
 8007900:	6031      	str	r1, [r6, #0]
 8007902:	602b      	str	r3, [r5, #0]
 8007904:	b016      	add	sp, #88	@ 0x58
 8007906:	bd70      	pop	{r4, r5, r6, pc}
 8007908:	466a      	mov	r2, sp
 800790a:	f000 f863 	bl	80079d4 <_fstat_r>
 800790e:	2800      	cmp	r0, #0
 8007910:	dbed      	blt.n	80078ee <__swhatbuf_r+0x12>
 8007912:	9901      	ldr	r1, [sp, #4]
 8007914:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007918:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800791c:	4259      	negs	r1, r3
 800791e:	4159      	adcs	r1, r3
 8007920:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007924:	e7eb      	b.n	80078fe <__swhatbuf_r+0x22>

08007926 <__smakebuf_r>:
 8007926:	898b      	ldrh	r3, [r1, #12]
 8007928:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800792a:	079d      	lsls	r5, r3, #30
 800792c:	4606      	mov	r6, r0
 800792e:	460c      	mov	r4, r1
 8007930:	d507      	bpl.n	8007942 <__smakebuf_r+0x1c>
 8007932:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007936:	6023      	str	r3, [r4, #0]
 8007938:	6123      	str	r3, [r4, #16]
 800793a:	2301      	movs	r3, #1
 800793c:	6163      	str	r3, [r4, #20]
 800793e:	b003      	add	sp, #12
 8007940:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007942:	466a      	mov	r2, sp
 8007944:	ab01      	add	r3, sp, #4
 8007946:	f7ff ffc9 	bl	80078dc <__swhatbuf_r>
 800794a:	9f00      	ldr	r7, [sp, #0]
 800794c:	4605      	mov	r5, r0
 800794e:	4639      	mov	r1, r7
 8007950:	4630      	mov	r0, r6
 8007952:	f7ff fa65 	bl	8006e20 <_malloc_r>
 8007956:	b948      	cbnz	r0, 800796c <__smakebuf_r+0x46>
 8007958:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800795c:	059a      	lsls	r2, r3, #22
 800795e:	d4ee      	bmi.n	800793e <__smakebuf_r+0x18>
 8007960:	f023 0303 	bic.w	r3, r3, #3
 8007964:	f043 0302 	orr.w	r3, r3, #2
 8007968:	81a3      	strh	r3, [r4, #12]
 800796a:	e7e2      	b.n	8007932 <__smakebuf_r+0xc>
 800796c:	89a3      	ldrh	r3, [r4, #12]
 800796e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007972:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007976:	81a3      	strh	r3, [r4, #12]
 8007978:	9b01      	ldr	r3, [sp, #4]
 800797a:	6020      	str	r0, [r4, #0]
 800797c:	b15b      	cbz	r3, 8007996 <__smakebuf_r+0x70>
 800797e:	4630      	mov	r0, r6
 8007980:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007984:	f000 f838 	bl	80079f8 <_isatty_r>
 8007988:	b128      	cbz	r0, 8007996 <__smakebuf_r+0x70>
 800798a:	89a3      	ldrh	r3, [r4, #12]
 800798c:	f023 0303 	bic.w	r3, r3, #3
 8007990:	f043 0301 	orr.w	r3, r3, #1
 8007994:	81a3      	strh	r3, [r4, #12]
 8007996:	89a3      	ldrh	r3, [r4, #12]
 8007998:	431d      	orrs	r5, r3
 800799a:	81a5      	strh	r5, [r4, #12]
 800799c:	e7cf      	b.n	800793e <__smakebuf_r+0x18>

0800799e <memmove>:
 800799e:	4288      	cmp	r0, r1
 80079a0:	b510      	push	{r4, lr}
 80079a2:	eb01 0402 	add.w	r4, r1, r2
 80079a6:	d902      	bls.n	80079ae <memmove+0x10>
 80079a8:	4284      	cmp	r4, r0
 80079aa:	4623      	mov	r3, r4
 80079ac:	d807      	bhi.n	80079be <memmove+0x20>
 80079ae:	1e43      	subs	r3, r0, #1
 80079b0:	42a1      	cmp	r1, r4
 80079b2:	d008      	beq.n	80079c6 <memmove+0x28>
 80079b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80079b8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80079bc:	e7f8      	b.n	80079b0 <memmove+0x12>
 80079be:	4601      	mov	r1, r0
 80079c0:	4402      	add	r2, r0
 80079c2:	428a      	cmp	r2, r1
 80079c4:	d100      	bne.n	80079c8 <memmove+0x2a>
 80079c6:	bd10      	pop	{r4, pc}
 80079c8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80079cc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80079d0:	e7f7      	b.n	80079c2 <memmove+0x24>
	...

080079d4 <_fstat_r>:
 80079d4:	b538      	push	{r3, r4, r5, lr}
 80079d6:	2300      	movs	r3, #0
 80079d8:	4d06      	ldr	r5, [pc, #24]	@ (80079f4 <_fstat_r+0x20>)
 80079da:	4604      	mov	r4, r0
 80079dc:	4608      	mov	r0, r1
 80079de:	4611      	mov	r1, r2
 80079e0:	602b      	str	r3, [r5, #0]
 80079e2:	f7fa faa7 	bl	8001f34 <_fstat>
 80079e6:	1c43      	adds	r3, r0, #1
 80079e8:	d102      	bne.n	80079f0 <_fstat_r+0x1c>
 80079ea:	682b      	ldr	r3, [r5, #0]
 80079ec:	b103      	cbz	r3, 80079f0 <_fstat_r+0x1c>
 80079ee:	6023      	str	r3, [r4, #0]
 80079f0:	bd38      	pop	{r3, r4, r5, pc}
 80079f2:	bf00      	nop
 80079f4:	20000370 	.word	0x20000370

080079f8 <_isatty_r>:
 80079f8:	b538      	push	{r3, r4, r5, lr}
 80079fa:	2300      	movs	r3, #0
 80079fc:	4d05      	ldr	r5, [pc, #20]	@ (8007a14 <_isatty_r+0x1c>)
 80079fe:	4604      	mov	r4, r0
 8007a00:	4608      	mov	r0, r1
 8007a02:	602b      	str	r3, [r5, #0]
 8007a04:	f7fa faa5 	bl	8001f52 <_isatty>
 8007a08:	1c43      	adds	r3, r0, #1
 8007a0a:	d102      	bne.n	8007a12 <_isatty_r+0x1a>
 8007a0c:	682b      	ldr	r3, [r5, #0]
 8007a0e:	b103      	cbz	r3, 8007a12 <_isatty_r+0x1a>
 8007a10:	6023      	str	r3, [r4, #0]
 8007a12:	bd38      	pop	{r3, r4, r5, pc}
 8007a14:	20000370 	.word	0x20000370

08007a18 <_sbrk_r>:
 8007a18:	b538      	push	{r3, r4, r5, lr}
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	4d05      	ldr	r5, [pc, #20]	@ (8007a34 <_sbrk_r+0x1c>)
 8007a1e:	4604      	mov	r4, r0
 8007a20:	4608      	mov	r0, r1
 8007a22:	602b      	str	r3, [r5, #0]
 8007a24:	f7fa faac 	bl	8001f80 <_sbrk>
 8007a28:	1c43      	adds	r3, r0, #1
 8007a2a:	d102      	bne.n	8007a32 <_sbrk_r+0x1a>
 8007a2c:	682b      	ldr	r3, [r5, #0]
 8007a2e:	b103      	cbz	r3, 8007a32 <_sbrk_r+0x1a>
 8007a30:	6023      	str	r3, [r4, #0]
 8007a32:	bd38      	pop	{r3, r4, r5, pc}
 8007a34:	20000370 	.word	0x20000370

08007a38 <memchr>:
 8007a38:	4603      	mov	r3, r0
 8007a3a:	b510      	push	{r4, lr}
 8007a3c:	b2c9      	uxtb	r1, r1
 8007a3e:	4402      	add	r2, r0
 8007a40:	4293      	cmp	r3, r2
 8007a42:	4618      	mov	r0, r3
 8007a44:	d101      	bne.n	8007a4a <memchr+0x12>
 8007a46:	2000      	movs	r0, #0
 8007a48:	e003      	b.n	8007a52 <memchr+0x1a>
 8007a4a:	7804      	ldrb	r4, [r0, #0]
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	428c      	cmp	r4, r1
 8007a50:	d1f6      	bne.n	8007a40 <memchr+0x8>
 8007a52:	bd10      	pop	{r4, pc}

08007a54 <memcpy>:
 8007a54:	440a      	add	r2, r1
 8007a56:	4291      	cmp	r1, r2
 8007a58:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a5c:	d100      	bne.n	8007a60 <memcpy+0xc>
 8007a5e:	4770      	bx	lr
 8007a60:	b510      	push	{r4, lr}
 8007a62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a66:	4291      	cmp	r1, r2
 8007a68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a6c:	d1f9      	bne.n	8007a62 <memcpy+0xe>
 8007a6e:	bd10      	pop	{r4, pc}

08007a70 <_realloc_r>:
 8007a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a74:	4680      	mov	r8, r0
 8007a76:	4615      	mov	r5, r2
 8007a78:	460c      	mov	r4, r1
 8007a7a:	b921      	cbnz	r1, 8007a86 <_realloc_r+0x16>
 8007a7c:	4611      	mov	r1, r2
 8007a7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a82:	f7ff b9cd 	b.w	8006e20 <_malloc_r>
 8007a86:	b92a      	cbnz	r2, 8007a94 <_realloc_r+0x24>
 8007a88:	f7ff f960 	bl	8006d4c <_free_r>
 8007a8c:	2400      	movs	r4, #0
 8007a8e:	4620      	mov	r0, r4
 8007a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a94:	f000 f81a 	bl	8007acc <_malloc_usable_size_r>
 8007a98:	4285      	cmp	r5, r0
 8007a9a:	4606      	mov	r6, r0
 8007a9c:	d802      	bhi.n	8007aa4 <_realloc_r+0x34>
 8007a9e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007aa2:	d8f4      	bhi.n	8007a8e <_realloc_r+0x1e>
 8007aa4:	4629      	mov	r1, r5
 8007aa6:	4640      	mov	r0, r8
 8007aa8:	f7ff f9ba 	bl	8006e20 <_malloc_r>
 8007aac:	4607      	mov	r7, r0
 8007aae:	2800      	cmp	r0, #0
 8007ab0:	d0ec      	beq.n	8007a8c <_realloc_r+0x1c>
 8007ab2:	42b5      	cmp	r5, r6
 8007ab4:	462a      	mov	r2, r5
 8007ab6:	4621      	mov	r1, r4
 8007ab8:	bf28      	it	cs
 8007aba:	4632      	movcs	r2, r6
 8007abc:	f7ff ffca 	bl	8007a54 <memcpy>
 8007ac0:	4621      	mov	r1, r4
 8007ac2:	4640      	mov	r0, r8
 8007ac4:	f7ff f942 	bl	8006d4c <_free_r>
 8007ac8:	463c      	mov	r4, r7
 8007aca:	e7e0      	b.n	8007a8e <_realloc_r+0x1e>

08007acc <_malloc_usable_size_r>:
 8007acc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ad0:	1f18      	subs	r0, r3, #4
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	bfbc      	itt	lt
 8007ad6:	580b      	ldrlt	r3, [r1, r0]
 8007ad8:	18c0      	addlt	r0, r0, r3
 8007ada:	4770      	bx	lr

08007adc <_init>:
 8007adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ade:	bf00      	nop
 8007ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ae2:	bc08      	pop	{r3}
 8007ae4:	469e      	mov	lr, r3
 8007ae6:	4770      	bx	lr

08007ae8 <_fini>:
 8007ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aea:	bf00      	nop
 8007aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aee:	bc08      	pop	{r3}
 8007af0:	469e      	mov	lr, r3
 8007af2:	4770      	bx	lr
