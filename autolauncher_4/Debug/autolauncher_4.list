
autolauncher_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4a4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b1c  0800a5b4  0800a5b4  0000b5b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0d0  0800c0d0  0000e0a0  2**0
                  CONTENTS
  4 .ARM          00000000  0800c0d0  0800c0d0  0000e0a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c0d0  0800c0d0  0000e0a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c0d0  0800c0d0  0000d0d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c0d4  0800c0d4  0000d0d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  0800c0d8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  200000a0  0800c178  0000e0a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000408  0800c178  0000e408  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e0a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000144eb  00000000  00000000  0000e0c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003247  00000000  00000000  000225b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001390  00000000  00000000  00025800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f5a  00000000  00000000  00026b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab31  00000000  00000000  00027aea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019221  00000000  00000000  0004261b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009501c  00000000  00000000  0005b83c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f0858  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cd8  00000000  00000000  000f089c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000f6574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000a0 	.word	0x200000a0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a59c 	.word	0x0800a59c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000a4 	.word	0x200000a4
 800014c:	0800a59c 	.word	0x0800a59c

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001a2:	2afd      	cmp	r2, #253	@ 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	@ 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	@ 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__aeabi_d2uiz>:
 8000a54:	004a      	lsls	r2, r1, #1
 8000a56:	d211      	bcs.n	8000a7c <__aeabi_d2uiz+0x28>
 8000a58:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a5c:	d211      	bcs.n	8000a82 <__aeabi_d2uiz+0x2e>
 8000a5e:	d50d      	bpl.n	8000a7c <__aeabi_d2uiz+0x28>
 8000a60:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a64:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a68:	d40e      	bmi.n	8000a88 <__aeabi_d2uiz+0x34>
 8000a6a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a6e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a72:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a76:	fa23 f002 	lsr.w	r0, r3, r2
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d102      	bne.n	8000a8e <__aeabi_d2uiz+0x3a>
 8000a88:	f04f 30ff 	mov.w	r0, #4294967295
 8000a8c:	4770      	bx	lr
 8000a8e:	f04f 0000 	mov.w	r0, #0
 8000a92:	4770      	bx	lr

08000a94 <__aeabi_d2f>:
 8000a94:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a98:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a9c:	bf24      	itt	cs
 8000a9e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aa2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aa6:	d90d      	bls.n	8000ac4 <__aeabi_d2f+0x30>
 8000aa8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ab4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ab8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000abc:	bf08      	it	eq
 8000abe:	f020 0001 	biceq.w	r0, r0, #1
 8000ac2:	4770      	bx	lr
 8000ac4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ac8:	d121      	bne.n	8000b0e <__aeabi_d2f+0x7a>
 8000aca:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ace:	bfbc      	itt	lt
 8000ad0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ad4:	4770      	bxlt	lr
 8000ad6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ada:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ade:	f1c2 0218 	rsb	r2, r2, #24
 8000ae2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ae6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aea:	fa20 f002 	lsr.w	r0, r0, r2
 8000aee:	bf18      	it	ne
 8000af0:	f040 0001 	orrne.w	r0, r0, #1
 8000af4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000afc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b00:	ea40 000c 	orr.w	r0, r0, ip
 8000b04:	fa23 f302 	lsr.w	r3, r3, r2
 8000b08:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b0c:	e7cc      	b.n	8000aa8 <__aeabi_d2f+0x14>
 8000b0e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b12:	d107      	bne.n	8000b24 <__aeabi_d2f+0x90>
 8000b14:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b18:	bf1e      	ittt	ne
 8000b1a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b1e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b22:	4770      	bxne	lr
 8000b24:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b28:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop

08000b34 <__aeabi_frsub>:
 8000b34:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b38:	e002      	b.n	8000b40 <__addsf3>
 8000b3a:	bf00      	nop

08000b3c <__aeabi_fsub>:
 8000b3c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b40 <__addsf3>:
 8000b40:	0042      	lsls	r2, r0, #1
 8000b42:	bf1f      	itttt	ne
 8000b44:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b48:	ea92 0f03 	teqne	r2, r3
 8000b4c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b50:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b54:	d06a      	beq.n	8000c2c <__addsf3+0xec>
 8000b56:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b5a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b5e:	bfc1      	itttt	gt
 8000b60:	18d2      	addgt	r2, r2, r3
 8000b62:	4041      	eorgt	r1, r0
 8000b64:	4048      	eorgt	r0, r1
 8000b66:	4041      	eorgt	r1, r0
 8000b68:	bfb8      	it	lt
 8000b6a:	425b      	neglt	r3, r3
 8000b6c:	2b19      	cmp	r3, #25
 8000b6e:	bf88      	it	hi
 8000b70:	4770      	bxhi	lr
 8000b72:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b76:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b7e:	bf18      	it	ne
 8000b80:	4240      	negne	r0, r0
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b86:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b8a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b8e:	bf18      	it	ne
 8000b90:	4249      	negne	r1, r1
 8000b92:	ea92 0f03 	teq	r2, r3
 8000b96:	d03f      	beq.n	8000c18 <__addsf3+0xd8>
 8000b98:	f1a2 0201 	sub.w	r2, r2, #1
 8000b9c:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba0:	eb10 000c 	adds.w	r0, r0, ip
 8000ba4:	f1c3 0320 	rsb	r3, r3, #32
 8000ba8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bac:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bb0:	d502      	bpl.n	8000bb8 <__addsf3+0x78>
 8000bb2:	4249      	negs	r1, r1
 8000bb4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bb8:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bbc:	d313      	bcc.n	8000be6 <__addsf3+0xa6>
 8000bbe:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bc2:	d306      	bcc.n	8000bd2 <__addsf3+0x92>
 8000bc4:	0840      	lsrs	r0, r0, #1
 8000bc6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bca:	f102 0201 	add.w	r2, r2, #1
 8000bce:	2afe      	cmp	r2, #254	@ 0xfe
 8000bd0:	d251      	bcs.n	8000c76 <__addsf3+0x136>
 8000bd2:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bd6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bda:	bf08      	it	eq
 8000bdc:	f020 0001 	biceq.w	r0, r0, #1
 8000be0:	ea40 0003 	orr.w	r0, r0, r3
 8000be4:	4770      	bx	lr
 8000be6:	0049      	lsls	r1, r1, #1
 8000be8:	eb40 0000 	adc.w	r0, r0, r0
 8000bec:	3a01      	subs	r2, #1
 8000bee:	bf28      	it	cs
 8000bf0:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bf4:	d2ed      	bcs.n	8000bd2 <__addsf3+0x92>
 8000bf6:	fab0 fc80 	clz	ip, r0
 8000bfa:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bfe:	ebb2 020c 	subs.w	r2, r2, ip
 8000c02:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c06:	bfaa      	itet	ge
 8000c08:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c0c:	4252      	neglt	r2, r2
 8000c0e:	4318      	orrge	r0, r3
 8000c10:	bfbc      	itt	lt
 8000c12:	40d0      	lsrlt	r0, r2
 8000c14:	4318      	orrlt	r0, r3
 8000c16:	4770      	bx	lr
 8000c18:	f092 0f00 	teq	r2, #0
 8000c1c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c20:	bf06      	itte	eq
 8000c22:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c26:	3201      	addeq	r2, #1
 8000c28:	3b01      	subne	r3, #1
 8000c2a:	e7b5      	b.n	8000b98 <__addsf3+0x58>
 8000c2c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c30:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c34:	bf18      	it	ne
 8000c36:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c3a:	d021      	beq.n	8000c80 <__addsf3+0x140>
 8000c3c:	ea92 0f03 	teq	r2, r3
 8000c40:	d004      	beq.n	8000c4c <__addsf3+0x10c>
 8000c42:	f092 0f00 	teq	r2, #0
 8000c46:	bf08      	it	eq
 8000c48:	4608      	moveq	r0, r1
 8000c4a:	4770      	bx	lr
 8000c4c:	ea90 0f01 	teq	r0, r1
 8000c50:	bf1c      	itt	ne
 8000c52:	2000      	movne	r0, #0
 8000c54:	4770      	bxne	lr
 8000c56:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c5a:	d104      	bne.n	8000c66 <__addsf3+0x126>
 8000c5c:	0040      	lsls	r0, r0, #1
 8000c5e:	bf28      	it	cs
 8000c60:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c64:	4770      	bx	lr
 8000c66:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c6a:	bf3c      	itt	cc
 8000c6c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c70:	4770      	bxcc	lr
 8000c72:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c76:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c7a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c7e:	4770      	bx	lr
 8000c80:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c84:	bf16      	itet	ne
 8000c86:	4608      	movne	r0, r1
 8000c88:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c8c:	4601      	movne	r1, r0
 8000c8e:	0242      	lsls	r2, r0, #9
 8000c90:	bf06      	itte	eq
 8000c92:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c96:	ea90 0f01 	teqeq	r0, r1
 8000c9a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c9e:	4770      	bx	lr

08000ca0 <__aeabi_ui2f>:
 8000ca0:	f04f 0300 	mov.w	r3, #0
 8000ca4:	e004      	b.n	8000cb0 <__aeabi_i2f+0x8>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_i2f>:
 8000ca8:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cac:	bf48      	it	mi
 8000cae:	4240      	negmi	r0, r0
 8000cb0:	ea5f 0c00 	movs.w	ip, r0
 8000cb4:	bf08      	it	eq
 8000cb6:	4770      	bxeq	lr
 8000cb8:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cbc:	4601      	mov	r1, r0
 8000cbe:	f04f 0000 	mov.w	r0, #0
 8000cc2:	e01c      	b.n	8000cfe <__aeabi_l2f+0x2a>

08000cc4 <__aeabi_ul2f>:
 8000cc4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	e00a      	b.n	8000ce8 <__aeabi_l2f+0x14>
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_l2f>:
 8000cd4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000ce0:	d502      	bpl.n	8000ce8 <__aeabi_l2f+0x14>
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	ea5f 0c01 	movs.w	ip, r1
 8000cec:	bf02      	ittt	eq
 8000cee:	4684      	moveq	ip, r0
 8000cf0:	4601      	moveq	r1, r0
 8000cf2:	2000      	moveq	r0, #0
 8000cf4:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cf8:	bf08      	it	eq
 8000cfa:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cfe:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d02:	fabc f28c 	clz	r2, ip
 8000d06:	3a08      	subs	r2, #8
 8000d08:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d0c:	db10      	blt.n	8000d30 <__aeabi_l2f+0x5c>
 8000d0e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d12:	4463      	add	r3, ip
 8000d14:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d18:	f1c2 0220 	rsb	r2, r2, #32
 8000d1c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d20:	fa20 f202 	lsr.w	r2, r0, r2
 8000d24:	eb43 0002 	adc.w	r0, r3, r2
 8000d28:	bf08      	it	eq
 8000d2a:	f020 0001 	biceq.w	r0, r0, #1
 8000d2e:	4770      	bx	lr
 8000d30:	f102 0220 	add.w	r2, r2, #32
 8000d34:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d38:	f1c2 0220 	rsb	r2, r2, #32
 8000d3c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d40:	fa21 f202 	lsr.w	r2, r1, r2
 8000d44:	eb43 0002 	adc.w	r0, r3, r2
 8000d48:	bf08      	it	eq
 8000d4a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d4e:	4770      	bx	lr

08000d50 <__aeabi_f2iz>:
 8000d50:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d54:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000d58:	d30f      	bcc.n	8000d7a <__aeabi_f2iz+0x2a>
 8000d5a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000d5e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d62:	d90d      	bls.n	8000d80 <__aeabi_f2iz+0x30>
 8000d64:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d68:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000d6c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d70:	fa23 f002 	lsr.w	r0, r3, r2
 8000d74:	bf18      	it	ne
 8000d76:	4240      	negne	r0, r0
 8000d78:	4770      	bx	lr
 8000d7a:	f04f 0000 	mov.w	r0, #0
 8000d7e:	4770      	bx	lr
 8000d80:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000d84:	d101      	bne.n	8000d8a <__aeabi_f2iz+0x3a>
 8000d86:	0242      	lsls	r2, r0, #9
 8000d88:	d105      	bne.n	8000d96 <__aeabi_f2iz+0x46>
 8000d8a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000d8e:	bf08      	it	eq
 8000d90:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000d94:	4770      	bx	lr
 8000d96:	f04f 0000 	mov.w	r0, #0
 8000d9a:	4770      	bx	lr

08000d9c <__aeabi_f2uiz>:
 8000d9c:	0042      	lsls	r2, r0, #1
 8000d9e:	d20e      	bcs.n	8000dbe <__aeabi_f2uiz+0x22>
 8000da0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000da4:	d30b      	bcc.n	8000dbe <__aeabi_f2uiz+0x22>
 8000da6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000daa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000dae:	d409      	bmi.n	8000dc4 <__aeabi_f2uiz+0x28>
 8000db0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000db4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000db8:	fa23 f002 	lsr.w	r0, r3, r2
 8000dbc:	4770      	bx	lr
 8000dbe:	f04f 0000 	mov.w	r0, #0
 8000dc2:	4770      	bx	lr
 8000dc4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000dc8:	d101      	bne.n	8000dce <__aeabi_f2uiz+0x32>
 8000dca:	0242      	lsls	r2, r0, #9
 8000dcc:	d102      	bne.n	8000dd4 <__aeabi_f2uiz+0x38>
 8000dce:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd2:	4770      	bx	lr
 8000dd4:	f04f 0000 	mov.w	r0, #0
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop

08000ddc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000dec:	4b27      	ldr	r3, [pc, #156]	@ (8000e8c <MX_ADC1_Init+0xb0>)
 8000dee:	4a28      	ldr	r2, [pc, #160]	@ (8000e90 <MX_ADC1_Init+0xb4>)
 8000df0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000df2:	4b26      	ldr	r3, [pc, #152]	@ (8000e8c <MX_ADC1_Init+0xb0>)
 8000df4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000df8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dfa:	4b24      	ldr	r3, [pc, #144]	@ (8000e8c <MX_ADC1_Init+0xb0>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e00:	4b22      	ldr	r3, [pc, #136]	@ (8000e8c <MX_ADC1_Init+0xb0>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e06:	4b21      	ldr	r3, [pc, #132]	@ (8000e8c <MX_ADC1_Init+0xb0>)
 8000e08:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000e0c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e0e:	4b1f      	ldr	r3, [pc, #124]	@ (8000e8c <MX_ADC1_Init+0xb0>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8000e14:	4b1d      	ldr	r3, [pc, #116]	@ (8000e8c <MX_ADC1_Init+0xb0>)
 8000e16:	2203      	movs	r2, #3
 8000e18:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e1a:	481c      	ldr	r0, [pc, #112]	@ (8000e8c <MX_ADC1_Init+0xb0>)
 8000e1c:	f003 f9c4 	bl	80041a8 <HAL_ADC_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000e26:	f002 fd60 	bl	80038ea <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000e2a:	230a      	movs	r3, #10
 8000e2c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000e32:	2307      	movs	r3, #7
 8000e34:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4814      	ldr	r0, [pc, #80]	@ (8000e8c <MX_ADC1_Init+0xb0>)
 8000e3c:	f003 fbc8 	bl	80045d0 <HAL_ADC_ConfigChannel>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000e46:	f002 fd50 	bl	80038ea <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000e4a:	230b      	movs	r3, #11
 8000e4c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	4619      	mov	r1, r3
 8000e56:	480d      	ldr	r0, [pc, #52]	@ (8000e8c <MX_ADC1_Init+0xb0>)
 8000e58:	f003 fbba 	bl	80045d0 <HAL_ADC_ConfigChannel>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000e62:	f002 fd42 	bl	80038ea <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000e66:	2310      	movs	r3, #16
 8000e68:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	4619      	mov	r1, r3
 8000e72:	4806      	ldr	r0, [pc, #24]	@ (8000e8c <MX_ADC1_Init+0xb0>)
 8000e74:	f003 fbac 	bl	80045d0 <HAL_ADC_ConfigChannel>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000e7e:	f002 fd34 	bl	80038ea <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e82:	bf00      	nop
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	200000bc 	.word	0x200000bc
 8000e90:	40012400 	.word	0x40012400

08000e94 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b088      	sub	sp, #32
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9c:	f107 0310 	add.w	r3, r7, #16
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a28      	ldr	r2, [pc, #160]	@ (8000f50 <HAL_ADC_MspInit+0xbc>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d149      	bne.n	8000f48 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000eb4:	4b27      	ldr	r3, [pc, #156]	@ (8000f54 <HAL_ADC_MspInit+0xc0>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	4a26      	ldr	r2, [pc, #152]	@ (8000f54 <HAL_ADC_MspInit+0xc0>)
 8000eba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ebe:	6193      	str	r3, [r2, #24]
 8000ec0:	4b24      	ldr	r3, [pc, #144]	@ (8000f54 <HAL_ADC_MspInit+0xc0>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ecc:	4b21      	ldr	r3, [pc, #132]	@ (8000f54 <HAL_ADC_MspInit+0xc0>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	4a20      	ldr	r2, [pc, #128]	@ (8000f54 <HAL_ADC_MspInit+0xc0>)
 8000ed2:	f043 0310 	orr.w	r3, r3, #16
 8000ed6:	6193      	str	r3, [r2, #24]
 8000ed8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f54 <HAL_ADC_MspInit+0xc0>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	f003 0310 	and.w	r3, r3, #16
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = ADC_VOLT_Pin|ADC_AMP_Pin;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eec:	f107 0310 	add.w	r3, r7, #16
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4819      	ldr	r0, [pc, #100]	@ (8000f58 <HAL_ADC_MspInit+0xc4>)
 8000ef4:	f004 f9c4 	bl	8005280 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000ef8:	4b18      	ldr	r3, [pc, #96]	@ (8000f5c <HAL_ADC_MspInit+0xc8>)
 8000efa:	4a19      	ldr	r2, [pc, #100]	@ (8000f60 <HAL_ADC_MspInit+0xcc>)
 8000efc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000efe:	4b17      	ldr	r3, [pc, #92]	@ (8000f5c <HAL_ADC_MspInit+0xc8>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f04:	4b15      	ldr	r3, [pc, #84]	@ (8000f5c <HAL_ADC_MspInit+0xc8>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f0a:	4b14      	ldr	r3, [pc, #80]	@ (8000f5c <HAL_ADC_MspInit+0xc8>)
 8000f0c:	2280      	movs	r2, #128	@ 0x80
 8000f0e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f10:	4b12      	ldr	r3, [pc, #72]	@ (8000f5c <HAL_ADC_MspInit+0xc8>)
 8000f12:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f16:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f18:	4b10      	ldr	r3, [pc, #64]	@ (8000f5c <HAL_ADC_MspInit+0xc8>)
 8000f1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f1e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f20:	4b0e      	ldr	r3, [pc, #56]	@ (8000f5c <HAL_ADC_MspInit+0xc8>)
 8000f22:	2220      	movs	r2, #32
 8000f24:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f26:	4b0d      	ldr	r3, [pc, #52]	@ (8000f5c <HAL_ADC_MspInit+0xc8>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f2c:	480b      	ldr	r0, [pc, #44]	@ (8000f5c <HAL_ADC_MspInit+0xc8>)
 8000f2e:	f003 ff05 	bl	8004d3c <HAL_DMA_Init>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000f38:	f002 fcd7 	bl	80038ea <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a07      	ldr	r2, [pc, #28]	@ (8000f5c <HAL_ADC_MspInit+0xc8>)
 8000f40:	621a      	str	r2, [r3, #32]
 8000f42:	4a06      	ldr	r2, [pc, #24]	@ (8000f5c <HAL_ADC_MspInit+0xc8>)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f48:	bf00      	nop
 8000f4a:	3720      	adds	r7, #32
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40012400 	.word	0x40012400
 8000f54:	40021000 	.word	0x40021000
 8000f58:	40011000 	.word	0x40011000
 8000f5c:	200000ec 	.word	0x200000ec
 8000f60:	40020008 	.word	0x40020008

08000f64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f9c <MX_DMA_Init+0x38>)
 8000f6c:	695b      	ldr	r3, [r3, #20]
 8000f6e:	4a0b      	ldr	r2, [pc, #44]	@ (8000f9c <MX_DMA_Init+0x38>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	6153      	str	r3, [r2, #20]
 8000f76:	4b09      	ldr	r3, [pc, #36]	@ (8000f9c <MX_DMA_Init+0x38>)
 8000f78:	695b      	ldr	r3, [r3, #20]
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2100      	movs	r1, #0
 8000f86:	200b      	movs	r0, #11
 8000f88:	f003 fea1 	bl	8004cce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f8c:	200b      	movs	r0, #11
 8000f8e:	f003 feba 	bl	8004d06 <HAL_NVIC_EnableIRQ>

}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40021000 	.word	0x40021000

08000fa0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b088      	sub	sp, #32
 8000fa4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa6:	f107 0310 	add.w	r3, r7, #16
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb4:	4b42      	ldr	r3, [pc, #264]	@ (80010c0 <MX_GPIO_Init+0x120>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	4a41      	ldr	r2, [pc, #260]	@ (80010c0 <MX_GPIO_Init+0x120>)
 8000fba:	f043 0310 	orr.w	r3, r3, #16
 8000fbe:	6193      	str	r3, [r2, #24]
 8000fc0:	4b3f      	ldr	r3, [pc, #252]	@ (80010c0 <MX_GPIO_Init+0x120>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	f003 0310 	and.w	r3, r3, #16
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fcc:	4b3c      	ldr	r3, [pc, #240]	@ (80010c0 <MX_GPIO_Init+0x120>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	4a3b      	ldr	r2, [pc, #236]	@ (80010c0 <MX_GPIO_Init+0x120>)
 8000fd2:	f043 0304 	orr.w	r3, r3, #4
 8000fd6:	6193      	str	r3, [r2, #24]
 8000fd8:	4b39      	ldr	r3, [pc, #228]	@ (80010c0 <MX_GPIO_Init+0x120>)
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	f003 0304 	and.w	r3, r3, #4
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe4:	4b36      	ldr	r3, [pc, #216]	@ (80010c0 <MX_GPIO_Init+0x120>)
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	4a35      	ldr	r2, [pc, #212]	@ (80010c0 <MX_GPIO_Init+0x120>)
 8000fea:	f043 0308 	orr.w	r3, r3, #8
 8000fee:	6193      	str	r3, [r2, #24]
 8000ff0:	4b33      	ldr	r3, [pc, #204]	@ (80010c0 <MX_GPIO_Init+0x120>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	f003 0308 	and.w	r3, r3, #8
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ffc:	4b30      	ldr	r3, [pc, #192]	@ (80010c0 <MX_GPIO_Init+0x120>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	4a2f      	ldr	r2, [pc, #188]	@ (80010c0 <MX_GPIO_Init+0x120>)
 8001002:	f043 0320 	orr.w	r3, r3, #32
 8001006:	6193      	str	r3, [r2, #24]
 8001008:	4b2d      	ldr	r3, [pc, #180]	@ (80010c0 <MX_GPIO_Init+0x120>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	f003 0320 	and.w	r3, r3, #32
 8001010:	603b      	str	r3, [r7, #0]
 8001012:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SSR_3_Pin|SSR_2_Pin|SSR_1_Pin|ENABLE_M1_Pin
 8001014:	2200      	movs	r2, #0
 8001016:	f64f 71dc 	movw	r1, #65500	@ 0xffdc
 800101a:	482a      	ldr	r0, [pc, #168]	@ (80010c4 <MX_GPIO_Init+0x124>)
 800101c:	f004 fab4 	bl	8005588 <HAL_GPIO_WritePin>
                          |ENABLE_M2_Pin|DIR_Pin|SSR_6_Pin|SSR_5_Pin
                          |RELAY_RESET_3_Pin|RELAY_RESET_2_Pin|RELAY_K7_Pin|RELAY_K1_Pin
                          |RELAY_K2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENABLE_M3_Pin|ENABLE_M4_Pin|MUX_SELECT_Pin|ENABLE_M5_Pin
 8001020:	2200      	movs	r2, #0
 8001022:	f649 11f7 	movw	r1, #39415	@ 0x99f7
 8001026:	4828      	ldr	r0, [pc, #160]	@ (80010c8 <MX_GPIO_Init+0x128>)
 8001028:	f004 faae 	bl	8005588 <HAL_GPIO_WritePin>
                          |ENABLE_M6_Pin|ENABLE_M7_Pin|ENABLE_M8_Pin|RELAY_K12_CAL_RES_Pin
                          |RELAY_K11_CAL_CONT_Pin|RELAY_K9_K10_GND_COND_Pin|RELAY_K8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|SSR_8_Pin|SSR_7_Pin|RELAY_K4_Pin
 800102c:	2200      	movs	r2, #0
 800102e:	f24c 313a 	movw	r1, #49978	@ 0xc33a
 8001032:	4826      	ldr	r0, [pc, #152]	@ (80010cc <MX_GPIO_Init+0x12c>)
 8001034:	f004 faa8 	bl	8005588 <HAL_GPIO_WritePin>
                          |RELAY_K5_Pin|RELAY_K6_Pin|RELAY_RESET_1_Pin|SSR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_K3_GPIO_Port, RELAY_K3_Pin, GPIO_PIN_RESET);
 8001038:	2200      	movs	r2, #0
 800103a:	2104      	movs	r1, #4
 800103c:	4824      	ldr	r0, [pc, #144]	@ (80010d0 <MX_GPIO_Init+0x130>)
 800103e:	f004 faa3 	bl	8005588 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = SSR_3_Pin|SSR_2_Pin|SSR_1_Pin|ENABLE_M1_Pin
 8001042:	f64f 73dc 	movw	r3, #65500	@ 0xffdc
 8001046:	613b      	str	r3, [r7, #16]
                          |ENABLE_M2_Pin|DIR_Pin|SSR_6_Pin|SSR_5_Pin
                          |RELAY_RESET_3_Pin|RELAY_RESET_2_Pin|RELAY_K7_Pin|RELAY_K1_Pin
                          |RELAY_K2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001048:	2301      	movs	r3, #1
 800104a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001050:	2302      	movs	r3, #2
 8001052:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001054:	f107 0310 	add.w	r3, r7, #16
 8001058:	4619      	mov	r1, r3
 800105a:	481a      	ldr	r0, [pc, #104]	@ (80010c4 <MX_GPIO_Init+0x124>)
 800105c:	f004 f910 	bl	8005280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ENABLE_M3_Pin|ENABLE_M4_Pin|MUX_SELECT_Pin|ENABLE_M5_Pin
 8001060:	f649 13f7 	movw	r3, #39415	@ 0x99f7
 8001064:	613b      	str	r3, [r7, #16]
                          |ENABLE_M6_Pin|ENABLE_M7_Pin|ENABLE_M8_Pin|RELAY_K12_CAL_RES_Pin
                          |RELAY_K11_CAL_CONT_Pin|RELAY_K9_K10_GND_COND_Pin|RELAY_K8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001066:	2301      	movs	r3, #1
 8001068:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106e:	2302      	movs	r3, #2
 8001070:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001072:	f107 0310 	add.w	r3, r7, #16
 8001076:	4619      	mov	r1, r3
 8001078:	4813      	ldr	r0, [pc, #76]	@ (80010c8 <MX_GPIO_Init+0x128>)
 800107a:	f004 f901 	bl	8005280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_Pin|SSR_8_Pin|SSR_7_Pin|RELAY_K4_Pin
 800107e:	f24c 333a 	movw	r3, #49978	@ 0xc33a
 8001082:	613b      	str	r3, [r7, #16]
                          |RELAY_K5_Pin|RELAY_K6_Pin|RELAY_RESET_1_Pin|SSR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001084:	2301      	movs	r3, #1
 8001086:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108c:	2302      	movs	r3, #2
 800108e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001090:	f107 0310 	add.w	r3, r7, #16
 8001094:	4619      	mov	r1, r3
 8001096:	480d      	ldr	r0, [pc, #52]	@ (80010cc <MX_GPIO_Init+0x12c>)
 8001098:	f004 f8f2 	bl	8005280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RELAY_K3_Pin;
 800109c:	2304      	movs	r3, #4
 800109e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a0:	2301      	movs	r3, #1
 80010a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a8:	2302      	movs	r3, #2
 80010aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RELAY_K3_GPIO_Port, &GPIO_InitStruct);
 80010ac:	f107 0310 	add.w	r3, r7, #16
 80010b0:	4619      	mov	r1, r3
 80010b2:	4807      	ldr	r0, [pc, #28]	@ (80010d0 <MX_GPIO_Init+0x130>)
 80010b4:	f004 f8e4 	bl	8005280 <HAL_GPIO_Init>

}
 80010b8:	bf00      	nop
 80010ba:	3720      	adds	r7, #32
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40021000 	.word	0x40021000
 80010c4:	40011000 	.word	0x40011000
 80010c8:	40010800 	.word	0x40010800
 80010cc:	40010c00 	.word	0x40010c00
 80010d0:	40011400 	.word	0x40011400

080010d4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010d8:	4b12      	ldr	r3, [pc, #72]	@ (8001124 <MX_I2C1_Init+0x50>)
 80010da:	4a13      	ldr	r2, [pc, #76]	@ (8001128 <MX_I2C1_Init+0x54>)
 80010dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010de:	4b11      	ldr	r3, [pc, #68]	@ (8001124 <MX_I2C1_Init+0x50>)
 80010e0:	4a12      	ldr	r2, [pc, #72]	@ (800112c <MX_I2C1_Init+0x58>)
 80010e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001124 <MX_I2C1_Init+0x50>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001124 <MX_I2C1_Init+0x50>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001124 <MX_I2C1_Init+0x50>)
 80010f2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001124 <MX_I2C1_Init+0x50>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010fe:	4b09      	ldr	r3, [pc, #36]	@ (8001124 <MX_I2C1_Init+0x50>)
 8001100:	2200      	movs	r2, #0
 8001102:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001104:	4b07      	ldr	r3, [pc, #28]	@ (8001124 <MX_I2C1_Init+0x50>)
 8001106:	2200      	movs	r2, #0
 8001108:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800110a:	4b06      	ldr	r3, [pc, #24]	@ (8001124 <MX_I2C1_Init+0x50>)
 800110c:	2200      	movs	r2, #0
 800110e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001110:	4804      	ldr	r0, [pc, #16]	@ (8001124 <MX_I2C1_Init+0x50>)
 8001112:	f004 fa51 	bl	80055b8 <HAL_I2C_Init>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800111c:	f002 fbe5 	bl	80038ea <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000130 	.word	0x20000130
 8001128:	40005400 	.word	0x40005400
 800112c:	000186a0 	.word	0x000186a0

08001130 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b088      	sub	sp, #32
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 0310 	add.w	r3, r7, #16
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a15      	ldr	r2, [pc, #84]	@ (80011a0 <HAL_I2C_MspInit+0x70>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d123      	bne.n	8001198 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001150:	4b14      	ldr	r3, [pc, #80]	@ (80011a4 <HAL_I2C_MspInit+0x74>)
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	4a13      	ldr	r2, [pc, #76]	@ (80011a4 <HAL_I2C_MspInit+0x74>)
 8001156:	f043 0308 	orr.w	r3, r3, #8
 800115a:	6193      	str	r3, [r2, #24]
 800115c:	4b11      	ldr	r3, [pc, #68]	@ (80011a4 <HAL_I2C_MspInit+0x74>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	f003 0308 	and.w	r3, r3, #8
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001168:	23c0      	movs	r3, #192	@ 0xc0
 800116a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800116c:	2312      	movs	r3, #18
 800116e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001170:	2303      	movs	r3, #3
 8001172:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001174:	f107 0310 	add.w	r3, r7, #16
 8001178:	4619      	mov	r1, r3
 800117a:	480b      	ldr	r0, [pc, #44]	@ (80011a8 <HAL_I2C_MspInit+0x78>)
 800117c:	f004 f880 	bl	8005280 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001180:	4b08      	ldr	r3, [pc, #32]	@ (80011a4 <HAL_I2C_MspInit+0x74>)
 8001182:	69db      	ldr	r3, [r3, #28]
 8001184:	4a07      	ldr	r2, [pc, #28]	@ (80011a4 <HAL_I2C_MspInit+0x74>)
 8001186:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800118a:	61d3      	str	r3, [r2, #28]
 800118c:	4b05      	ldr	r3, [pc, #20]	@ (80011a4 <HAL_I2C_MspInit+0x74>)
 800118e:	69db      	ldr	r3, [r3, #28]
 8001190:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001198:	bf00      	nop
 800119a:	3720      	adds	r7, #32
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40005400 	.word	0x40005400
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40010c00 	.word	0x40010c00

080011ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011b0:	f002 ff74 	bl	800409c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011b4:	f000 f84c 	bl	8001250 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011b8:	f7ff fef2 	bl	8000fa0 <MX_GPIO_Init>
  MX_DMA_Init();
 80011bc:	f7ff fed2 	bl	8000f64 <MX_DMA_Init>
  MX_TIM3_Init();
 80011c0:	f002 fc8a 	bl	8003ad8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80011c4:	f002 fde0 	bl	8003d88 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80011c8:	f7ff fe08 	bl	8000ddc <MX_ADC1_Init>
  MX_I2C1_Init();
 80011cc:	f7ff ff82 	bl	80010d4 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80011d0:	f002 fe04 	bl	8003ddc <MX_USART3_UART_Init>
  MX_TIM4_Init();
 80011d4:	f002 fcf8 	bl	8003bc8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  // Retarget IO stream to UART
  RetargetInit(&huart1);
 80011d8:	4818      	ldr	r0, [pc, #96]	@ (800123c <main+0x90>)
 80011da:	f002 fedf 	bl	8003f9c <RetargetInit>
  // Initialize stepper motors
  motor_init();
 80011de:	f001 ffd3 	bl	8003188 <motor_init>
  // initialize multiplexer
  multiplexer_set(MUX_STM32);
 80011e2:	2001      	movs	r0, #1
 80011e4:	f001 fc48 	bl	8002a78 <multiplexer_set>
  // Initialize relays
  relay_init();
 80011e8:	f001 fe16 	bl	8002e18 <relay_init>
  // enable receive interrupt
  uartrx_interrupt_init();
 80011ec:	f001 fcf2 	bl	8002bd4 <uartrx_interrupt_init>
  // Initialize autolauncher parameters i.e. read eeprom
  parameter_init();
 80011f0:	f001 fc76 	bl	8002ae0 <parameter_init>
  // display main menu at startup
  menu_main_print();
 80011f4:	f000 f87c 	bl	80012f0 <menu_main_print>
  printf("\r\n> ");
 80011f8:	4811      	ldr	r0, [pc, #68]	@ (8001240 <main+0x94>)
 80011fa:	f008 f867 	bl	80092cc <iprintf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // menu control loop
	  if(active == rxStatus){ // set to active with UART RX interrupt
 80011fe:	4b11      	ldr	r3, [pc, #68]	@ (8001244 <main+0x98>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d115      	bne.n	8001232 <main+0x86>
		  rxStatus = idle;
 8001206:	4b0f      	ldr	r3, [pc, #60]	@ (8001244 <main+0x98>)
 8001208:	2200      	movs	r2, #0
 800120a:	701a      	strb	r2, [r3, #0]
		  if( mainMenu == activeMenu){
 800120c:	4b0e      	ldr	r3, [pc, #56]	@ (8001248 <main+0x9c>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d105      	bne.n	8001220 <main+0x74>
			  menu_main_process_input(rxChar); // go to main switch case menu
 8001214:	4b0d      	ldr	r3, [pc, #52]	@ (800124c <main+0xa0>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	4618      	mov	r0, r3
 800121a:	f000 f905 	bl	8001428 <menu_main_process_input>
 800121e:	e008      	b.n	8001232 <main+0x86>
		  } else if ( configMenu == activeMenu){
 8001220:	4b09      	ldr	r3, [pc, #36]	@ (8001248 <main+0x9c>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d104      	bne.n	8001232 <main+0x86>
			  menu_config_process_input(rxChar);
 8001228:	4b08      	ldr	r3, [pc, #32]	@ (800124c <main+0xa0>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	4618      	mov	r0, r3
 800122e:	f000 fbf9 	bl	8001a24 <menu_config_process_input>
		  }
	  }
	  // monitor voltage and send alarm if it's below a threshold
	  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	  HAL_Delay(1); // needed to debug, remove
 8001232:	2001      	movs	r0, #1
 8001234:	f002 ff94 	bl	8004160 <HAL_Delay>
	  if(active == rxStatus){ // set to active with UART RX interrupt
 8001238:	e7e1      	b.n	80011fe <main+0x52>
 800123a:	bf00      	nop
 800123c:	20000224 	.word	0x20000224
 8001240:	0800a5b4 	.word	0x0800a5b4
 8001244:	20000186 	.word	0x20000186
 8001248:	20000187 	.word	0x20000187
 800124c:	20000189 	.word	0x20000189

08001250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b094      	sub	sp, #80	@ 0x50
 8001254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001256:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800125a:	2228      	movs	r2, #40	@ 0x28
 800125c:	2100      	movs	r1, #0
 800125e:	4618      	mov	r0, r3
 8001260:	f008 fa50 	bl	8009704 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001280:	2302      	movs	r3, #2
 8001282:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001284:	2301      	movs	r3, #1
 8001286:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001288:	2310      	movs	r3, #16
 800128a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800128c:	2300      	movs	r3, #0
 800128e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001290:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001294:	4618      	mov	r0, r3
 8001296:	f005 f9c3 	bl	8006620 <HAL_RCC_OscConfig>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80012a0:	f002 fb23 	bl	80038ea <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a4:	230f      	movs	r3, #15
 80012a6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012a8:	2300      	movs	r3, #0
 80012aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ac:	2300      	movs	r3, #0
 80012ae:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012b0:	2300      	movs	r3, #0
 80012b2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012b4:	2300      	movs	r3, #0
 80012b6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	2100      	movs	r1, #0
 80012be:	4618      	mov	r0, r3
 80012c0:	f005 fc30 	bl	8006b24 <HAL_RCC_ClockConfig>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80012ca:	f002 fb0e 	bl	80038ea <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80012ce:	2302      	movs	r3, #2
 80012d0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	4618      	mov	r0, r3
 80012da:	f005 fdb1 	bl	8006e40 <HAL_RCCEx_PeriphCLKConfig>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80012e4:	f002 fb01 	bl	80038ea <Error_Handler>
  }
}
 80012e8:	bf00      	nop
 80012ea:	3750      	adds	r7, #80	@ 0x50
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <menu_main_print>:
}

/********************************************** MENU FUNCTIONS **********************************************/

/* Print Main Menu options */
void menu_main_print(void) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
    printf("\r\n\n\r");
 80012f4:	4832      	ldr	r0, [pc, #200]	@ (80013c0 <menu_main_print+0xd0>)
 80012f6:	f007 ffe9 	bl	80092cc <iprintf>
    printf("|========================================|\n\r");
 80012fa:	4832      	ldr	r0, [pc, #200]	@ (80013c4 <menu_main_print+0xd4>)
 80012fc:	f007 ffe6 	bl	80092cc <iprintf>
    printf("|   AOML Autolauncher board version 3.0  |\n\r");
 8001300:	4831      	ldr	r0, [pc, #196]	@ (80013c8 <menu_main_print+0xd8>)
 8001302:	f007 ffe3 	bl	80092cc <iprintf>
    printf("|        Firmware version 2024.12.dd     |\n\r");
 8001306:	4831      	ldr	r0, [pc, #196]	@ (80013cc <menu_main_print+0xdc>)
 8001308:	f007 ffe0 	bl	80092cc <iprintf>
    printf("|========================================|\n\r");
 800130c:	482d      	ldr	r0, [pc, #180]	@ (80013c4 <menu_main_print+0xd4>)
 800130e:	f007 ffdd 	bl	80092cc <iprintf>
    printf("|     Model #ALV3.0      S/N ");
 8001312:	482f      	ldr	r0, [pc, #188]	@ (80013d0 <menu_main_print+0xe0>)
 8001314:	f007 ffda 	bl	80092cc <iprintf>
    print_serial_number();
 8001318:	f001 fb4c 	bl	80029b4 <print_serial_number>
    printf("       |\n\r");
 800131c:	482d      	ldr	r0, [pc, #180]	@ (80013d4 <menu_main_print+0xe4>)
 800131e:	f007 ffd5 	bl	80092cc <iprintf>
    printf("|========================================|\n\r");
 8001322:	4828      	ldr	r0, [pc, #160]	@ (80013c4 <menu_main_print+0xd4>)
 8001324:	f007 ffd2 	bl	80092cc <iprintf>
    printf("|               COMMANDS                 |\r\n");
 8001328:	482b      	ldr	r0, [pc, #172]	@ (80013d8 <menu_main_print+0xe8>)
 800132a:	f008 f837 	bl	800939c <puts>
//    if (launcher.configured != 'Y') {
//        printf("| ERROR, NO SERIAL NUMBER ASSIGNED 	 |\n\r");
//    }
    printf("|========================================|\n\r");
 800132e:	4825      	ldr	r0, [pc, #148]	@ (80013c4 <menu_main_print+0xd4>)
 8001330:	f007 ffcc 	bl	80092cc <iprintf>
    printf("| Connect  Cal Sim BT  	0                |\n\r");
 8001334:	4829      	ldr	r0, [pc, #164]	@ (80013dc <menu_main_print+0xec>)
 8001336:	f007 ffc9 	bl	80092cc <iprintf>
    if (launcher.tubeCount == '6') {
 800133a:	4b29      	ldr	r3, [pc, #164]	@ (80013e0 <menu_main_print+0xf0>)
 800133c:	785b      	ldrb	r3, [r3, #1]
 800133e:	2b36      	cmp	r3, #54	@ 0x36
 8001340:	d109      	bne.n	8001356 <menu_main_print+0x66>
        printf("| Connect  XBT 1-6     1,2,3,4,5,6       |\n\r");
 8001342:	4828      	ldr	r0, [pc, #160]	@ (80013e4 <menu_main_print+0xf4>)
 8001344:	f007 ffc2 	bl	80092cc <iprintf>
        printf("| Extend   Pin 1-6     U,V,W,X,Y,Z       |\n\r");
 8001348:	4827      	ldr	r0, [pc, #156]	@ (80013e8 <menu_main_print+0xf8>)
 800134a:	f007 ffbf 	bl	80092cc <iprintf>
        printf("| Retract  Pin 1-6     A,B,C,D,E,F       |\n\r");
 800134e:	4827      	ldr	r0, [pc, #156]	@ (80013ec <menu_main_print+0xfc>)
 8001350:	f007 ffbc 	bl	80092cc <iprintf>
 8001354:	e010      	b.n	8001378 <menu_main_print+0x88>
    } else if (launcher.tubeCount == '8') {
 8001356:	4b22      	ldr	r3, [pc, #136]	@ (80013e0 <menu_main_print+0xf0>)
 8001358:	785b      	ldrb	r3, [r3, #1]
 800135a:	2b38      	cmp	r3, #56	@ 0x38
 800135c:	d109      	bne.n	8001372 <menu_main_print+0x82>
        printf("| Connect  XBT 1-8      1,2,3,4,5,6,7,8  |\n\r");
 800135e:	4824      	ldr	r0, [pc, #144]	@ (80013f0 <menu_main_print+0x100>)
 8001360:	f007 ffb4 	bl	80092cc <iprintf>
        printf("| Extend   Pin 1-8      U,V,W,X,Y,Z,S,T  |\n\r");
 8001364:	4823      	ldr	r0, [pc, #140]	@ (80013f4 <menu_main_print+0x104>)
 8001366:	f007 ffb1 	bl	80092cc <iprintf>
        printf("| Retract  Pin 1-8      A,B,C,D,E,F,H,I  |\n\r");
 800136a:	4823      	ldr	r0, [pc, #140]	@ (80013f8 <menu_main_print+0x108>)
 800136c:	f007 ffae 	bl	80092cc <iprintf>
 8001370:	e002      	b.n	8001378 <menu_main_print+0x88>
    } else {
    	printf("| ERROR, NO TUBE COUNT!!                |\n\r");
 8001372:	4822      	ldr	r0, [pc, #136]	@ (80013fc <menu_main_print+0x10c>)
 8001374:	f007 ffaa 	bl	80092cc <iprintf>
    }
    printf("| Unground XBT         	G                |\n\r");
 8001378:	4821      	ldr	r0, [pc, #132]	@ (8001400 <menu_main_print+0x110>)
 800137a:	f007 ffa7 	bl	80092cc <iprintf>
    printf("| Calibrate ON         	K                |\n\r");
 800137e:	4821      	ldr	r0, [pc, #132]	@ (8001404 <menu_main_print+0x114>)
 8001380:	f007 ffa4 	bl	80092cc <iprintf>
    printf("| Calibration resistor	L                |\n\r");
 8001384:	4820      	ldr	r0, [pc, #128]	@ (8001408 <menu_main_print+0x118>)
 8001386:	f007 ffa1 	bl	80092cc <iprintf>
    printf("| Reset all relays    	R                |\n\r");
 800138a:	4820      	ldr	r0, [pc, #128]	@ (800140c <menu_main_print+0x11c>)
 800138c:	f007 ff9e 	bl	80092cc <iprintf>
    printf("| Print serial number  	s                |\n\r");
 8001390:	481f      	ldr	r0, [pc, #124]	@ (8001410 <menu_main_print+0x120>)
 8001392:	f007 ff9b 	bl	80092cc <iprintf>
    printf("| This menu            	M                |\n\r");
 8001396:	481f      	ldr	r0, [pc, #124]	@ (8001414 <menu_main_print+0x124>)
 8001398:	f007 ff98 	bl	80092cc <iprintf>
    printf("| Read voltage & temp   P                |\n\r");
 800139c:	481e      	ldr	r0, [pc, #120]	@ (8001418 <menu_main_print+0x128>)
 800139e:	f007 ff95 	bl	80092cc <iprintf>
    printf("| Set Tx to GPS         N                |\n\r");
 80013a2:	481e      	ldr	r0, [pc, #120]	@ (800141c <menu_main_print+0x12c>)
 80013a4:	f007 ff92 	bl	80092cc <iprintf>
    printf("| Set Tx to STM32       O                |\n\r");
 80013a8:	481d      	ldr	r0, [pc, #116]	@ (8001420 <menu_main_print+0x130>)
 80013aa:	f007 ff8f 	bl	80092cc <iprintf>
    printf("|========================================|\n\r");
 80013ae:	4805      	ldr	r0, [pc, #20]	@ (80013c4 <menu_main_print+0xd4>)
 80013b0:	f007 ff8c 	bl	80092cc <iprintf>
    printf("\r\n");
 80013b4:	481b      	ldr	r0, [pc, #108]	@ (8001424 <menu_main_print+0x134>)
 80013b6:	f007 fff1 	bl	800939c <puts>
}//end status_message
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	0800a5d4 	.word	0x0800a5d4
 80013c4:	0800a5dc 	.word	0x0800a5dc
 80013c8:	0800a60c 	.word	0x0800a60c
 80013cc:	0800a63c 	.word	0x0800a63c
 80013d0:	0800a66c 	.word	0x0800a66c
 80013d4:	0800a68c 	.word	0x0800a68c
 80013d8:	0800a698 	.word	0x0800a698
 80013dc:	0800a6c4 	.word	0x0800a6c4
 80013e0:	20000000 	.word	0x20000000
 80013e4:	0800a6f4 	.word	0x0800a6f4
 80013e8:	0800a724 	.word	0x0800a724
 80013ec:	0800a754 	.word	0x0800a754
 80013f0:	0800a784 	.word	0x0800a784
 80013f4:	0800a7b4 	.word	0x0800a7b4
 80013f8:	0800a7e4 	.word	0x0800a7e4
 80013fc:	0800a814 	.word	0x0800a814
 8001400:	0800a840 	.word	0x0800a840
 8001404:	0800a870 	.word	0x0800a870
 8001408:	0800a8a0 	.word	0x0800a8a0
 800140c:	0800a8cc 	.word	0x0800a8cc
 8001410:	0800a8f8 	.word	0x0800a8f8
 8001414:	0800a928 	.word	0x0800a928
 8001418:	0800a958 	.word	0x0800a958
 800141c:	0800a988 	.word	0x0800a988
 8001420:	0800a9b8 	.word	0x0800a9b8
 8001424:	0800a9e8 	.word	0x0800a9e8

08001428 <menu_main_process_input>:


/* Process char received while in Main menu */
void menu_main_process_input(char option){
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]
	printf("\r\n> Executing OPTION (%c) --> ", option);
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	4619      	mov	r1, r3
 8001436:	48cb      	ldr	r0, [pc, #812]	@ (8001764 <menu_main_process_input+0x33c>)
 8001438:	f007 ff48 	bl	80092cc <iprintf>

	switch (option){
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	3b30      	subs	r3, #48	@ 0x30
 8001440:	2b4e      	cmp	r3, #78	@ 0x4e
 8001442:	f200 8211 	bhi.w	8001868 <menu_main_process_input+0x440>
 8001446:	a201      	add	r2, pc, #4	@ (adr r2, 800144c <menu_main_process_input+0x24>)
 8001448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800144c:	08001589 	.word	0x08001589
 8001450:	0800159d 	.word	0x0800159d
 8001454:	080015ab 	.word	0x080015ab
 8001458:	080015b9 	.word	0x080015b9
 800145c:	080015c7 	.word	0x080015c7
 8001460:	080015d5 	.word	0x080015d5
 8001464:	080015e3 	.word	0x080015e3
 8001468:	080015f1 	.word	0x080015f1
 800146c:	0800160f 	.word	0x0800160f
 8001470:	08001869 	.word	0x08001869
 8001474:	08001869 	.word	0x08001869
 8001478:	08001869 	.word	0x08001869
 800147c:	08001869 	.word	0x08001869
 8001480:	08001869 	.word	0x08001869
 8001484:	08001869 	.word	0x08001869
 8001488:	08001869 	.word	0x08001869
 800148c:	08001869 	.word	0x08001869
 8001490:	080016bd 	.word	0x080016bd
 8001494:	080016cb 	.word	0x080016cb
 8001498:	080016d9 	.word	0x080016d9
 800149c:	080016e7 	.word	0x080016e7
 80014a0:	080016f5 	.word	0x080016f5
 80014a4:	08001703 	.word	0x08001703
 80014a8:	080017f5 	.word	0x080017f5
 80014ac:	08001711 	.word	0x08001711
 80014b0:	0800172f 	.word	0x0800172f
 80014b4:	08001869 	.word	0x08001869
 80014b8:	0800174d 	.word	0x0800174d
 80014bc:	080017e9 	.word	0x080017e9
 80014c0:	08001801 	.word	0x08001801
 80014c4:	0800183d 	.word	0x0800183d
 80014c8:	08001851 	.word	0x08001851
 80014cc:	08001831 	.word	0x08001831
 80014d0:	08001869 	.word	0x08001869
 80014d4:	08001759 	.word	0x08001759
 80014d8:	08001681 	.word	0x08001681
 80014dc:	0800169f 	.word	0x0800169f
 80014e0:	0800162d 	.word	0x0800162d
 80014e4:	0800163b 	.word	0x0800163b
 80014e8:	08001649 	.word	0x08001649
 80014ec:	08001657 	.word	0x08001657
 80014f0:	08001665 	.word	0x08001665
 80014f4:	08001673 	.word	0x08001673
 80014f8:	08001869 	.word	0x08001869
 80014fc:	08001869 	.word	0x08001869
 8001500:	08001869 	.word	0x08001869
 8001504:	08001869 	.word	0x08001869
 8001508:	08001869 	.word	0x08001869
 800150c:	08001869 	.word	0x08001869
 8001510:	08001869 	.word	0x08001869
 8001514:	08001869 	.word	0x08001869
 8001518:	08001869 	.word	0x08001869
 800151c:	08001869 	.word	0x08001869
 8001520:	08001869 	.word	0x08001869
 8001524:	08001869 	.word	0x08001869
 8001528:	08001869 	.word	0x08001869
 800152c:	08001869 	.word	0x08001869
 8001530:	08001869 	.word	0x08001869
 8001534:	08001869 	.word	0x08001869
 8001538:	08001869 	.word	0x08001869
 800153c:	08001869 	.word	0x08001869
 8001540:	08001869 	.word	0x08001869
 8001544:	08001869 	.word	0x08001869
 8001548:	08001869 	.word	0x08001869
 800154c:	08001869 	.word	0x08001869
 8001550:	08001869 	.word	0x08001869
 8001554:	08001869 	.word	0x08001869
 8001558:	08001819 	.word	0x08001819
 800155c:	08001869 	.word	0x08001869
 8001560:	08001869 	.word	0x08001869
 8001564:	08001869 	.word	0x08001869
 8001568:	08001869 	.word	0x08001869
 800156c:	08001869 	.word	0x08001869
 8001570:	08001869 	.word	0x08001869
 8001574:	08001869 	.word	0x08001869
 8001578:	08001869 	.word	0x08001869
 800157c:	08001869 	.word	0x08001869
 8001580:	08001869 	.word	0x08001869
 8001584:	08001807 	.word	0x08001807
		// Connect XBT pins
    case '0':
        //engage calibration resistor
    	printf("unground_xbt(), calibration_resistor(), calibrate_on()\r\n");
 8001588:	4877      	ldr	r0, [pc, #476]	@ (8001768 <menu_main_process_input+0x340>)
 800158a:	f007 ff07 	bl	800939c <puts>
        unground_xbt();
 800158e:	f001 fb2f 	bl	8002bf0 <unground_xbt>
        calibration_resistor();
 8001592:	f001 fb45 	bl	8002c20 <calibration_resistor>
        calibrate_on();
 8001596:	f001 fb5b 	bl	8002c50 <calibrate_on>
        break;
 800159a:	e169      	b.n	8001870 <menu_main_process_input+0x448>
    case '1':
    	printf("connect_xbt_pin(1)\r\n");
 800159c:	4873      	ldr	r0, [pc, #460]	@ (800176c <menu_main_process_input+0x344>)
 800159e:	f007 fefd 	bl	800939c <puts>
        connect_xbt_pin(1);
 80015a2:	2001      	movs	r0, #1
 80015a4:	f001 fb98 	bl	8002cd8 <connect_xbt_pin>
        break;
 80015a8:	e162      	b.n	8001870 <menu_main_process_input+0x448>
    case '2':
        connect_xbt_pin(2);
 80015aa:	2002      	movs	r0, #2
 80015ac:	f001 fb94 	bl	8002cd8 <connect_xbt_pin>
        printf("connect_xbt_pin(2)\r\n");
 80015b0:	486f      	ldr	r0, [pc, #444]	@ (8001770 <menu_main_process_input+0x348>)
 80015b2:	f007 fef3 	bl	800939c <puts>
        break;
 80015b6:	e15b      	b.n	8001870 <menu_main_process_input+0x448>
    case '3':
        connect_xbt_pin(3);
 80015b8:	2003      	movs	r0, #3
 80015ba:	f001 fb8d 	bl	8002cd8 <connect_xbt_pin>
        printf("connect_xbt_pin(3)\r\n");
 80015be:	486d      	ldr	r0, [pc, #436]	@ (8001774 <menu_main_process_input+0x34c>)
 80015c0:	f007 feec 	bl	800939c <puts>
        break;
 80015c4:	e154      	b.n	8001870 <menu_main_process_input+0x448>
    case '4':
        connect_xbt_pin(4);
 80015c6:	2004      	movs	r0, #4
 80015c8:	f001 fb86 	bl	8002cd8 <connect_xbt_pin>
        printf("connect_xbt_pin(4)\r\n");
 80015cc:	486a      	ldr	r0, [pc, #424]	@ (8001778 <menu_main_process_input+0x350>)
 80015ce:	f007 fee5 	bl	800939c <puts>
        break;
 80015d2:	e14d      	b.n	8001870 <menu_main_process_input+0x448>
    case '5':
        connect_xbt_pin(5);
 80015d4:	2005      	movs	r0, #5
 80015d6:	f001 fb7f 	bl	8002cd8 <connect_xbt_pin>
        printf("connect_xbt_pin(5)\r\n");
 80015da:	4868      	ldr	r0, [pc, #416]	@ (800177c <menu_main_process_input+0x354>)
 80015dc:	f007 fede 	bl	800939c <puts>
        break;
 80015e0:	e146      	b.n	8001870 <menu_main_process_input+0x448>
    case '6':
        connect_xbt_pin(6);
 80015e2:	2006      	movs	r0, #6
 80015e4:	f001 fb78 	bl	8002cd8 <connect_xbt_pin>
        printf("connect_xbt_pin(6)\r\n");
 80015e8:	4865      	ldr	r0, [pc, #404]	@ (8001780 <menu_main_process_input+0x358>)
 80015ea:	f007 fed7 	bl	800939c <puts>
        break;
 80015ee:	e13f      	b.n	8001870 <menu_main_process_input+0x448>
    case '7':
        if (launcher.tubeCount == '8'){
 80015f0:	4b64      	ldr	r3, [pc, #400]	@ (8001784 <menu_main_process_input+0x35c>)
 80015f2:	785b      	ldrb	r3, [r3, #1]
 80015f4:	2b38      	cmp	r3, #56	@ 0x38
 80015f6:	d106      	bne.n	8001606 <menu_main_process_input+0x1de>
            connect_xbt_pin(7);
 80015f8:	2007      	movs	r0, #7
 80015fa:	f001 fb6d 	bl	8002cd8 <connect_xbt_pin>
            printf("connect_xbt_pin(7)\r\n");
 80015fe:	4862      	ldr	r0, [pc, #392]	@ (8001788 <menu_main_process_input+0x360>)
 8001600:	f007 fecc 	bl	800939c <puts>
        } else {
        	printf("\r\n* ERROR: tube 7 not available *\r\n");
        }
        break;
 8001604:	e134      	b.n	8001870 <menu_main_process_input+0x448>
        	printf("\r\n* ERROR: tube 7 not available *\r\n");
 8001606:	4861      	ldr	r0, [pc, #388]	@ (800178c <menu_main_process_input+0x364>)
 8001608:	f007 fec8 	bl	800939c <puts>
        break;
 800160c:	e130      	b.n	8001870 <menu_main_process_input+0x448>
    case '8':
        if (launcher.tubeCount == '8'){
 800160e:	4b5d      	ldr	r3, [pc, #372]	@ (8001784 <menu_main_process_input+0x35c>)
 8001610:	785b      	ldrb	r3, [r3, #1]
 8001612:	2b38      	cmp	r3, #56	@ 0x38
 8001614:	d106      	bne.n	8001624 <menu_main_process_input+0x1fc>
        	connect_xbt_pin(8);
 8001616:	2008      	movs	r0, #8
 8001618:	f001 fb5e 	bl	8002cd8 <connect_xbt_pin>
        	printf("connect_xbt_pin(8)\r\n");
 800161c:	485c      	ldr	r0, [pc, #368]	@ (8001790 <menu_main_process_input+0x368>)
 800161e:	f007 febd 	bl	800939c <puts>
        } else {
        	printf("\r\n* ERROR: tube 8 not available *\r\n");
        }
        break;
 8001622:	e125      	b.n	8001870 <menu_main_process_input+0x448>
        	printf("\r\n* ERROR: tube 8 not available *\r\n");
 8001624:	485b      	ldr	r0, [pc, #364]	@ (8001794 <menu_main_process_input+0x36c>)
 8001626:	f007 feb9 	bl	800939c <puts>
        break;
 800162a:	e121      	b.n	8001870 <menu_main_process_input+0x448>
        //EXTEND PINS
    case 'U':
    	printf("extend_pin(1)\r\n");
 800162c:	485a      	ldr	r0, [pc, #360]	@ (8001798 <menu_main_process_input+0x370>)
 800162e:	f007 feb5 	bl	800939c <puts>
    	extend_pin(1);
 8001632:	2001      	movs	r0, #1
 8001634:	f001 fc74 	bl	8002f20 <extend_pin>
        break;
 8001638:	e11a      	b.n	8001870 <menu_main_process_input+0x448>
    case 'V':
        printf("extend_pin(2)\r\n");
 800163a:	4858      	ldr	r0, [pc, #352]	@ (800179c <menu_main_process_input+0x374>)
 800163c:	f007 feae 	bl	800939c <puts>
        extend_pin(2);
 8001640:	2002      	movs	r0, #2
 8001642:	f001 fc6d 	bl	8002f20 <extend_pin>
        break;
 8001646:	e113      	b.n	8001870 <menu_main_process_input+0x448>
    case 'W':
        printf("extend_pin(3)\r\n");
 8001648:	4855      	ldr	r0, [pc, #340]	@ (80017a0 <menu_main_process_input+0x378>)
 800164a:	f007 fea7 	bl	800939c <puts>
        extend_pin(3);
 800164e:	2003      	movs	r0, #3
 8001650:	f001 fc66 	bl	8002f20 <extend_pin>
        break;
 8001654:	e10c      	b.n	8001870 <menu_main_process_input+0x448>
    case 'X':
        printf("extend_pin(4)\r\n");
 8001656:	4853      	ldr	r0, [pc, #332]	@ (80017a4 <menu_main_process_input+0x37c>)
 8001658:	f007 fea0 	bl	800939c <puts>
        extend_pin(4);
 800165c:	2004      	movs	r0, #4
 800165e:	f001 fc5f 	bl	8002f20 <extend_pin>
        break;
 8001662:	e105      	b.n	8001870 <menu_main_process_input+0x448>
    case 'Y':
        printf("extend_pin(5)\r\n");
 8001664:	4850      	ldr	r0, [pc, #320]	@ (80017a8 <menu_main_process_input+0x380>)
 8001666:	f007 fe99 	bl	800939c <puts>
        extend_pin(5);
 800166a:	2005      	movs	r0, #5
 800166c:	f001 fc58 	bl	8002f20 <extend_pin>
        break;
 8001670:	e0fe      	b.n	8001870 <menu_main_process_input+0x448>
    case 'Z':
        printf("extend_pin(6)\r\n");
 8001672:	484e      	ldr	r0, [pc, #312]	@ (80017ac <menu_main_process_input+0x384>)
 8001674:	f007 fe92 	bl	800939c <puts>
        extend_pin(6);
 8001678:	2006      	movs	r0, #6
 800167a:	f001 fc51 	bl	8002f20 <extend_pin>
        break;
 800167e:	e0f7      	b.n	8001870 <menu_main_process_input+0x448>
    case 'S':
        if (launcher.tubeCount == '8'){
 8001680:	4b40      	ldr	r3, [pc, #256]	@ (8001784 <menu_main_process_input+0x35c>)
 8001682:	785b      	ldrb	r3, [r3, #1]
 8001684:	2b38      	cmp	r3, #56	@ 0x38
 8001686:	d106      	bne.n	8001696 <menu_main_process_input+0x26e>
        	printf("extend_pin(7)\r\n");
 8001688:	4849      	ldr	r0, [pc, #292]	@ (80017b0 <menu_main_process_input+0x388>)
 800168a:	f007 fe87 	bl	800939c <puts>
        	extend_pin(7);
 800168e:	2007      	movs	r0, #7
 8001690:	f001 fc46 	bl	8002f20 <extend_pin>
        } else {
        	printf("\r\n* ERROR: tube 7 not available *\r\n");
        }
        break;
 8001694:	e0ec      	b.n	8001870 <menu_main_process_input+0x448>
        	printf("\r\n* ERROR: tube 7 not available *\r\n");
 8001696:	483d      	ldr	r0, [pc, #244]	@ (800178c <menu_main_process_input+0x364>)
 8001698:	f007 fe80 	bl	800939c <puts>
        break;
 800169c:	e0e8      	b.n	8001870 <menu_main_process_input+0x448>
    case 'T':
        if (launcher.tubeCount == '8'){
 800169e:	4b39      	ldr	r3, [pc, #228]	@ (8001784 <menu_main_process_input+0x35c>)
 80016a0:	785b      	ldrb	r3, [r3, #1]
 80016a2:	2b38      	cmp	r3, #56	@ 0x38
 80016a4:	d106      	bne.n	80016b4 <menu_main_process_input+0x28c>
        	printf("extend_pin(8)\r\n");
 80016a6:	4843      	ldr	r0, [pc, #268]	@ (80017b4 <menu_main_process_input+0x38c>)
 80016a8:	f007 fe78 	bl	800939c <puts>
        	extend_pin(8);
 80016ac:	2008      	movs	r0, #8
 80016ae:	f001 fc37 	bl	8002f20 <extend_pin>
        } else {
        	printf("\r\n* ERROR: tube 8 not available *\r\n");
        }
        break;
 80016b2:	e0dd      	b.n	8001870 <menu_main_process_input+0x448>
        	printf("\r\n* ERROR: tube 8 not available *\r\n");
 80016b4:	4837      	ldr	r0, [pc, #220]	@ (8001794 <menu_main_process_input+0x36c>)
 80016b6:	f007 fe71 	bl	800939c <puts>
        break;
 80016ba:	e0d9      	b.n	8001870 <menu_main_process_input+0x448>
        //RETRACT PINS
    case 'A':
    	printf("retract_pin(1)\r\n");
 80016bc:	483e      	ldr	r0, [pc, #248]	@ (80017b8 <menu_main_process_input+0x390>)
 80016be:	f007 fe6d 	bl	800939c <puts>
    	retract_pin(1);
 80016c2:	2001      	movs	r0, #1
 80016c4:	f001 fc46 	bl	8002f54 <retract_pin>
        break;
 80016c8:	e0d2      	b.n	8001870 <menu_main_process_input+0x448>
    case 'B':
        printf("retract_pin(2)\r\n");
 80016ca:	483c      	ldr	r0, [pc, #240]	@ (80017bc <menu_main_process_input+0x394>)
 80016cc:	f007 fe66 	bl	800939c <puts>
        retract_pin(2);
 80016d0:	2002      	movs	r0, #2
 80016d2:	f001 fc3f 	bl	8002f54 <retract_pin>
        break;
 80016d6:	e0cb      	b.n	8001870 <menu_main_process_input+0x448>
    case 'C':
        printf("retract_pin(3)\r\n");
 80016d8:	4839      	ldr	r0, [pc, #228]	@ (80017c0 <menu_main_process_input+0x398>)
 80016da:	f007 fe5f 	bl	800939c <puts>
        retract_pin(3);
 80016de:	2003      	movs	r0, #3
 80016e0:	f001 fc38 	bl	8002f54 <retract_pin>
        break;
 80016e4:	e0c4      	b.n	8001870 <menu_main_process_input+0x448>
    case 'D':
        printf("retract_pin(4)\r\n");
 80016e6:	4837      	ldr	r0, [pc, #220]	@ (80017c4 <menu_main_process_input+0x39c>)
 80016e8:	f007 fe58 	bl	800939c <puts>
        retract_pin(4);
 80016ec:	2004      	movs	r0, #4
 80016ee:	f001 fc31 	bl	8002f54 <retract_pin>
        break;
 80016f2:	e0bd      	b.n	8001870 <menu_main_process_input+0x448>
    case 'E':
        printf("retract_pin(5)\r\n");
 80016f4:	4834      	ldr	r0, [pc, #208]	@ (80017c8 <menu_main_process_input+0x3a0>)
 80016f6:	f007 fe51 	bl	800939c <puts>
        retract_pin(5);
 80016fa:	2005      	movs	r0, #5
 80016fc:	f001 fc2a 	bl	8002f54 <retract_pin>
        break;
 8001700:	e0b6      	b.n	8001870 <menu_main_process_input+0x448>
    case 'F':
        printf("retract_pin(6)\r\n");
 8001702:	4832      	ldr	r0, [pc, #200]	@ (80017cc <menu_main_process_input+0x3a4>)
 8001704:	f007 fe4a 	bl	800939c <puts>
        retract_pin(6);
 8001708:	2006      	movs	r0, #6
 800170a:	f001 fc23 	bl	8002f54 <retract_pin>
        break;
 800170e:	e0af      	b.n	8001870 <menu_main_process_input+0x448>
    case 'H':
        if (launcher.tubeCount == '8'){
 8001710:	4b1c      	ldr	r3, [pc, #112]	@ (8001784 <menu_main_process_input+0x35c>)
 8001712:	785b      	ldrb	r3, [r3, #1]
 8001714:	2b38      	cmp	r3, #56	@ 0x38
 8001716:	d106      	bne.n	8001726 <menu_main_process_input+0x2fe>
        	printf("retract_pin(7)\r\n");
 8001718:	482d      	ldr	r0, [pc, #180]	@ (80017d0 <menu_main_process_input+0x3a8>)
 800171a:	f007 fe3f 	bl	800939c <puts>
        	retract_pin(7);
 800171e:	2007      	movs	r0, #7
 8001720:	f001 fc18 	bl	8002f54 <retract_pin>
        } else {
        	printf("* ERROR: tube 7 not available *\r\n");
        }
        break;
 8001724:	e0a4      	b.n	8001870 <menu_main_process_input+0x448>
        	printf("* ERROR: tube 7 not available *\r\n");
 8001726:	482b      	ldr	r0, [pc, #172]	@ (80017d4 <menu_main_process_input+0x3ac>)
 8001728:	f007 fe38 	bl	800939c <puts>
        break;
 800172c:	e0a0      	b.n	8001870 <menu_main_process_input+0x448>
    case 'I':
        if (launcher.tubeCount == '8'){
 800172e:	4b15      	ldr	r3, [pc, #84]	@ (8001784 <menu_main_process_input+0x35c>)
 8001730:	785b      	ldrb	r3, [r3, #1]
 8001732:	2b38      	cmp	r3, #56	@ 0x38
 8001734:	d106      	bne.n	8001744 <menu_main_process_input+0x31c>
        	printf("retract_pin(8)\r\n");
 8001736:	4828      	ldr	r0, [pc, #160]	@ (80017d8 <menu_main_process_input+0x3b0>)
 8001738:	f007 fe30 	bl	800939c <puts>
        	retract_pin(8);
 800173c:	2008      	movs	r0, #8
 800173e:	f001 fc09 	bl	8002f54 <retract_pin>
        } else {
        	printf("* ERROR: tube 8 not available *\r\n");
        }
        break;
 8001742:	e095      	b.n	8001870 <menu_main_process_input+0x448>
        	printf("* ERROR: tube 8 not available *\r\n");
 8001744:	4825      	ldr	r0, [pc, #148]	@ (80017dc <menu_main_process_input+0x3b4>)
 8001746:	f007 fe29 	bl	800939c <puts>
        break;
 800174a:	e091      	b.n	8001870 <menu_main_process_input+0x448>
    case 'K':
    	printf("calibrate_on()\r\n");
 800174c:	4824      	ldr	r0, [pc, #144]	@ (80017e0 <menu_main_process_input+0x3b8>)
 800174e:	f007 fe25 	bl	800939c <puts>
        calibrate_on();
 8001752:	f001 fa7d 	bl	8002c50 <calibrate_on>
        break;
 8001756:	e08b      	b.n	8001870 <menu_main_process_input+0x448>
    case 'R':
    	printf("reset_relay(), ground XBT\r\n");
 8001758:	4822      	ldr	r0, [pc, #136]	@ (80017e4 <menu_main_process_input+0x3bc>)
 800175a:	f007 fe1f 	bl	800939c <puts>
        reset_relay();
 800175e:	f001 fa8f 	bl	8002c80 <reset_relay>
        break;
 8001762:	e085      	b.n	8001870 <menu_main_process_input+0x448>
 8001764:	0800a9ec 	.word	0x0800a9ec
 8001768:	0800aa0c 	.word	0x0800aa0c
 800176c:	0800aa44 	.word	0x0800aa44
 8001770:	0800aa58 	.word	0x0800aa58
 8001774:	0800aa6c 	.word	0x0800aa6c
 8001778:	0800aa80 	.word	0x0800aa80
 800177c:	0800aa94 	.word	0x0800aa94
 8001780:	0800aaa8 	.word	0x0800aaa8
 8001784:	20000000 	.word	0x20000000
 8001788:	0800aabc 	.word	0x0800aabc
 800178c:	0800aad0 	.word	0x0800aad0
 8001790:	0800aaf4 	.word	0x0800aaf4
 8001794:	0800ab08 	.word	0x0800ab08
 8001798:	0800ab2c 	.word	0x0800ab2c
 800179c:	0800ab3c 	.word	0x0800ab3c
 80017a0:	0800ab4c 	.word	0x0800ab4c
 80017a4:	0800ab5c 	.word	0x0800ab5c
 80017a8:	0800ab6c 	.word	0x0800ab6c
 80017ac:	0800ab7c 	.word	0x0800ab7c
 80017b0:	0800ab8c 	.word	0x0800ab8c
 80017b4:	0800ab9c 	.word	0x0800ab9c
 80017b8:	0800abac 	.word	0x0800abac
 80017bc:	0800abbc 	.word	0x0800abbc
 80017c0:	0800abcc 	.word	0x0800abcc
 80017c4:	0800abdc 	.word	0x0800abdc
 80017c8:	0800abec 	.word	0x0800abec
 80017cc:	0800abfc 	.word	0x0800abfc
 80017d0:	0800ac0c 	.word	0x0800ac0c
 80017d4:	0800ac1c 	.word	0x0800ac1c
 80017d8:	0800ac40 	.word	0x0800ac40
 80017dc:	0800ac50 	.word	0x0800ac50
 80017e0:	0800ac74 	.word	0x0800ac74
 80017e4:	0800ac84 	.word	0x0800ac84
    case 'L':
    	printf("calibration_resistor()\r\n");
 80017e8:	4825      	ldr	r0, [pc, #148]	@ (8001880 <menu_main_process_input+0x458>)
 80017ea:	f007 fdd7 	bl	800939c <puts>
        calibration_resistor();
 80017ee:	f001 fa17 	bl	8002c20 <calibration_resistor>
        break;
 80017f2:	e03d      	b.n	8001870 <menu_main_process_input+0x448>
    case 'G':
    	printf("unground_xbt()\r\n");
 80017f4:	4823      	ldr	r0, [pc, #140]	@ (8001884 <menu_main_process_input+0x45c>)
 80017f6:	f007 fdd1 	bl	800939c <puts>
        unground_xbt();
 80017fa:	f001 f9f9 	bl	8002bf0 <unground_xbt>
        break;
 80017fe:	e037      	b.n	8001870 <menu_main_process_input+0x448>
    case 'M':
        menu_main_print();
 8001800:	f7ff fd76 	bl	80012f0 <menu_main_print>
        break;
 8001804:	e034      	b.n	8001870 <menu_main_process_input+0x448>
    case '~':
    	printf("menu_config_print()\r\n");
 8001806:	4820      	ldr	r0, [pc, #128]	@ (8001888 <menu_main_process_input+0x460>)
 8001808:	f007 fdc8 	bl	800939c <puts>
        menu_config_print();
 800180c:	f000 f888 	bl	8001920 <menu_config_print>
        activeMenu = configMenu; // set configuration menu flag
 8001810:	4b1e      	ldr	r3, [pc, #120]	@ (800188c <menu_main_process_input+0x464>)
 8001812:	2201      	movs	r2, #1
 8001814:	701a      	strb	r2, [r3, #0]
        break;
 8001816:	e02b      	b.n	8001870 <menu_main_process_input+0x448>
    case 's':
    	printf("print_serial_number()\r\n");
 8001818:	481d      	ldr	r0, [pc, #116]	@ (8001890 <menu_main_process_input+0x468>)
 800181a:	f007 fdbf 	bl	800939c <puts>
    	printf("AL Serial Number: ");
 800181e:	481d      	ldr	r0, [pc, #116]	@ (8001894 <menu_main_process_input+0x46c>)
 8001820:	f007 fd54 	bl	80092cc <iprintf>
        print_serial_number();
 8001824:	f001 f8c6 	bl	80029b4 <print_serial_number>
        printf("\r\n");
 8001828:	481b      	ldr	r0, [pc, #108]	@ (8001898 <menu_main_process_input+0x470>)
 800182a:	f007 fdb7 	bl	800939c <puts>
        break;
 800182e:	e01f      	b.n	8001870 <menu_main_process_input+0x448>
    case 'P':
    	printf("menu_print_volt_temp()\r\n");
 8001830:	481a      	ldr	r0, [pc, #104]	@ (800189c <menu_main_process_input+0x474>)
 8001832:	f007 fdb3 	bl	800939c <puts>
    	// read input voltage and internal temp on autolauncher
    	menu_print_volt_temp();
 8001836:	f000 f83f 	bl	80018b8 <menu_print_volt_temp>
    	break;
 800183a:	e019      	b.n	8001870 <menu_main_process_input+0x448>
    case 'N':
    	printf("multiplexer_set(MUX_GPS)\r\n");
 800183c:	4818      	ldr	r0, [pc, #96]	@ (80018a0 <menu_main_process_input+0x478>)
 800183e:	f007 fdad 	bl	800939c <puts>
    	printf("\r\n** Data TX from local GPS --> press 'O' to set Tx to STM32 **\r\n\r\n");
 8001842:	4818      	ldr	r0, [pc, #96]	@ (80018a4 <menu_main_process_input+0x47c>)
 8001844:	f007 fdaa 	bl	800939c <puts>
    	multiplexer_set(MUX_GPS);
 8001848:	2000      	movs	r0, #0
 800184a:	f001 f915 	bl	8002a78 <multiplexer_set>
    	break;
 800184e:	e00f      	b.n	8001870 <menu_main_process_input+0x448>
    case 'O':
    	printf("multiplexer_set(MUX_STM32)\r\n");
 8001850:	4815      	ldr	r0, [pc, #84]	@ (80018a8 <menu_main_process_input+0x480>)
 8001852:	f007 fda3 	bl	800939c <puts>
    	printf("\r\n** Data TX from STM32 **\r\n");
 8001856:	4815      	ldr	r0, [pc, #84]	@ (80018ac <menu_main_process_input+0x484>)
 8001858:	f007 fda0 	bl	800939c <puts>
    	multiplexer_set(MUX_STM32);
 800185c:	2001      	movs	r0, #1
 800185e:	f001 f90b 	bl	8002a78 <multiplexer_set>
    	menu_main_print();
 8001862:	f7ff fd45 	bl	80012f0 <menu_main_print>
    	break;
 8001866:	e003      	b.n	8001870 <menu_main_process_input+0x448>
    default:
        printf("\r\n** Unrecognized command!!** \r\n");
 8001868:	4811      	ldr	r0, [pc, #68]	@ (80018b0 <menu_main_process_input+0x488>)
 800186a:	f007 fd97 	bl	800939c <puts>
        break;
 800186e:	bf00      	nop
	}
	printf("\r\n> ");
 8001870:	4810      	ldr	r0, [pc, #64]	@ (80018b4 <menu_main_process_input+0x48c>)
 8001872:	f007 fd2b 	bl	80092cc <iprintf>
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	0800aca0 	.word	0x0800aca0
 8001884:	0800acb8 	.word	0x0800acb8
 8001888:	0800acc8 	.word	0x0800acc8
 800188c:	20000187 	.word	0x20000187
 8001890:	0800ace0 	.word	0x0800ace0
 8001894:	0800acf8 	.word	0x0800acf8
 8001898:	0800a9e8 	.word	0x0800a9e8
 800189c:	0800ad0c 	.word	0x0800ad0c
 80018a0:	0800ad24 	.word	0x0800ad24
 80018a4:	0800ad40 	.word	0x0800ad40
 80018a8:	0800ad84 	.word	0x0800ad84
 80018ac:	0800ada0 	.word	0x0800ada0
 80018b0:	0800adbc 	.word	0x0800adbc
 80018b4:	0800a5b4 	.word	0x0800a5b4

080018b8 <menu_print_volt_temp>:

/* Prints Input voltage and STM32 internal temperature */
void menu_print_volt_temp(void){
 80018b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80018bc:	b08b      	sub	sp, #44	@ 0x2c
 80018be:	af04      	add	r7, sp, #16
	adcScan_t adcReading = adc_get_values();
 80018c0:	463b      	mov	r3, r7
 80018c2:	4618      	mov	r0, r3
 80018c4:	f001 fd74 	bl	80033b0 <adc_get_values>
	printf("\r\n<> Voltage [AD# %i]: %i.%i V | STM32 Temperature [AD# %i]: %i.%i C\r\n",
				 (int)adcReading.voltage.rawValue, (int)adcReading.voltage.realValue, get_decimal(adcReading.voltage.realValue, 1),
 80018c8:	883b      	ldrh	r3, [r7, #0]
	printf("\r\n<> Voltage [AD# %i]: %i.%i V | STM32 Temperature [AD# %i]: %i.%i C\r\n",
 80018ca:	4698      	mov	r8, r3
				 (int)adcReading.voltage.rawValue, (int)adcReading.voltage.realValue, get_decimal(adcReading.voltage.realValue, 1),
 80018cc:	687b      	ldr	r3, [r7, #4]
	printf("\r\n<> Voltage [AD# %i]: %i.%i V | STM32 Temperature [AD# %i]: %i.%i C\r\n",
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff fa3e 	bl	8000d50 <__aeabi_f2iz>
 80018d4:	4605      	mov	r5, r0
				 (int)adcReading.voltage.rawValue, (int)adcReading.voltage.realValue, get_decimal(adcReading.voltage.realValue, 1),
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2101      	movs	r1, #1
 80018da:	4618      	mov	r0, r3
 80018dc:	f001 f892 	bl	8002a04 <get_decimal>
 80018e0:	4603      	mov	r3, r0
	printf("\r\n<> Voltage [AD# %i]: %i.%i V | STM32 Temperature [AD# %i]: %i.%i C\r\n",
 80018e2:	4699      	mov	r9, r3
				 (int)adcReading.temperature.rawValue, (int)adcReading.temperature.realValue, get_decimal(adcReading.temperature.realValue, 1));
 80018e4:	8a3b      	ldrh	r3, [r7, #16]
	printf("\r\n<> Voltage [AD# %i]: %i.%i V | STM32 Temperature [AD# %i]: %i.%i C\r\n",
 80018e6:	461e      	mov	r6, r3
				 (int)adcReading.temperature.rawValue, (int)adcReading.temperature.realValue, get_decimal(adcReading.temperature.realValue, 1));
 80018e8:	697b      	ldr	r3, [r7, #20]
	printf("\r\n<> Voltage [AD# %i]: %i.%i V | STM32 Temperature [AD# %i]: %i.%i C\r\n",
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff fa30 	bl	8000d50 <__aeabi_f2iz>
 80018f0:	4604      	mov	r4, r0
				 (int)adcReading.temperature.rawValue, (int)adcReading.temperature.realValue, get_decimal(adcReading.temperature.realValue, 1));
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	2101      	movs	r1, #1
 80018f6:	4618      	mov	r0, r3
 80018f8:	f001 f884 	bl	8002a04 <get_decimal>
 80018fc:	4603      	mov	r3, r0
	printf("\r\n<> Voltage [AD# %i]: %i.%i V | STM32 Temperature [AD# %i]: %i.%i C\r\n",
 80018fe:	9302      	str	r3, [sp, #8]
 8001900:	9401      	str	r4, [sp, #4]
 8001902:	9600      	str	r6, [sp, #0]
 8001904:	464b      	mov	r3, r9
 8001906:	462a      	mov	r2, r5
 8001908:	4641      	mov	r1, r8
 800190a:	4804      	ldr	r0, [pc, #16]	@ (800191c <menu_print_volt_temp+0x64>)
 800190c:	f007 fcde 	bl	80092cc <iprintf>
}
 8001910:	bf00      	nop
 8001912:	371c      	adds	r7, #28
 8001914:	46bd      	mov	sp, r7
 8001916:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800191a:	bf00      	nop
 800191c:	0800addc 	.word	0x0800addc

08001920 <menu_config_print>:



/* Print secret configuration menu options
 * Access this menu with '~' */
void menu_config_print(void) {
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
    printf("\n\r");
 8001924:	4828      	ldr	r0, [pc, #160]	@ (80019c8 <menu_config_print+0xa8>)
 8001926:	f007 fcd1 	bl	80092cc <iprintf>
    printf("=========================================\n\r");
 800192a:	4828      	ldr	r0, [pc, #160]	@ (80019cc <menu_config_print+0xac>)
 800192c:	f007 fcce 	bl	80092cc <iprintf>
    printf("| AOML Autolauncher configuration menu	|\n\r");
 8001930:	4827      	ldr	r0, [pc, #156]	@ (80019d0 <menu_config_print+0xb0>)
 8001932:	f007 fccb 	bl	80092cc <iprintf>
    printf("=========================================\n\r");
 8001936:	4825      	ldr	r0, [pc, #148]	@ (80019cc <menu_config_print+0xac>)
 8001938:	f007 fcc8 	bl	80092cc <iprintf>
    printf("|    Model #ALV3.0      S/N ");
 800193c:	4825      	ldr	r0, [pc, #148]	@ (80019d4 <menu_config_print+0xb4>)
 800193e:	f007 fcc5 	bl	80092cc <iprintf>
    print_serial_number();
 8001942:	f001 f837 	bl	80029b4 <print_serial_number>
    printf("       |\n\r");
 8001946:	4824      	ldr	r0, [pc, #144]	@ (80019d8 <menu_config_print+0xb8>)
 8001948:	f007 fcc0 	bl	80092cc <iprintf>
    printf("|=======================================|\n\r");
 800194c:	4823      	ldr	r0, [pc, #140]	@ (80019dc <menu_config_print+0xbc>)
 800194e:	f007 fcbd 	bl	80092cc <iprintf>
    printf("|               COMMANDS                |\n\r");
 8001952:	4823      	ldr	r0, [pc, #140]	@ (80019e0 <menu_config_print+0xc0>)
 8001954:	f007 fcba 	bl	80092cc <iprintf>
    printf("|=======================================|\n\r");
 8001958:	4820      	ldr	r0, [pc, #128]	@ (80019dc <menu_config_print+0xbc>)
 800195a:	f007 fcb7 	bl	80092cc <iprintf>
    printf("| <M> This Menu                         |\n\r");
 800195e:	4821      	ldr	r0, [pc, #132]	@ (80019e4 <menu_config_print+0xc4>)
 8001960:	f007 fcb4 	bl	80092cc <iprintf>
    printf("| <A> Set AL tubes, type & S/N          |\n\r");
 8001964:	4820      	ldr	r0, [pc, #128]	@ (80019e8 <menu_config_print+0xc8>)
 8001966:	f007 fcb1 	bl	80092cc <iprintf>
    printf("| <S> Extend all pins                   |\n\r");
 800196a:	4820      	ldr	r0, [pc, #128]	@ (80019ec <menu_config_print+0xcc>)
 800196c:	f007 fcae 	bl	80092cc <iprintf>
    printf("| <D> Retract all pins                  |\n\r");
 8001970:	481f      	ldr	r0, [pc, #124]	@ (80019f0 <menu_config_print+0xd0>)
 8001972:	f007 fcab 	bl	80092cc <iprintf>
    printf("| <F> Grease pins mode                  |\n\r");
 8001976:	481f      	ldr	r0, [pc, #124]	@ (80019f4 <menu_config_print+0xd4>)
 8001978:	f007 fca8 	bl	80092cc <iprintf>
    printf("| <G> Clear memory range                |\n\r");
 800197c:	481e      	ldr	r0, [pc, #120]	@ (80019f8 <menu_config_print+0xd8>)
 800197e:	f007 fca5 	bl	80092cc <iprintf>
    printf("| <H> Read motor statistics             |\n\r");
 8001982:	481e      	ldr	r0, [pc, #120]	@ (80019fc <menu_config_print+0xdc>)
 8001984:	f007 fca2 	bl	80092cc <iprintf>
    printf("| <J> Set motor runtime                 |\n\r");
 8001988:	481d      	ldr	r0, [pc, #116]	@ (8001a00 <menu_config_print+0xe0>)
 800198a:	f007 fc9f 	bl	80092cc <iprintf>
    printf("| <K> Set ADC sampling period           |\n\r");
 800198e:	481d      	ldr	r0, [pc, #116]	@ (8001a04 <menu_config_print+0xe4>)
 8001990:	f007 fc9c 	bl	80092cc <iprintf>
    printf("| <L> Set motor wiring mode             |\n\r");
 8001994:	481c      	ldr	r0, [pc, #112]	@ (8001a08 <menu_config_print+0xe8>)
 8001996:	f007 fc99 	bl	80092cc <iprintf>
    printf("| <W> Set motor PWM frequency           |\n\r");
 800199a:	481c      	ldr	r0, [pc, #112]	@ (8001a0c <menu_config_print+0xec>)
 800199c:	f007 fc96 	bl	80092cc <iprintf>
    printf("| <E> Reset motor statistics            |\n\r");
 80019a0:	481b      	ldr	r0, [pc, #108]	@ (8001a10 <menu_config_print+0xf0>)
 80019a2:	f007 fc93 	bl	80092cc <iprintf>
    printf("| <R> Read motor configuration          |\n\r");
 80019a6:	481b      	ldr	r0, [pc, #108]	@ (8001a14 <menu_config_print+0xf4>)
 80019a8:	f007 fc90 	bl	80092cc <iprintf>
    printf("| <Z> Help                              |\n\r");
 80019ac:	481a      	ldr	r0, [pc, #104]	@ (8001a18 <menu_config_print+0xf8>)
 80019ae:	f007 fc8d 	bl	80092cc <iprintf>
    printf("| <Q> QUIT to main menu                 |\n\r");
 80019b2:	481a      	ldr	r0, [pc, #104]	@ (8001a1c <menu_config_print+0xfc>)
 80019b4:	f007 fc8a 	bl	80092cc <iprintf>
    printf("|=======================================|\n\r");
 80019b8:	4808      	ldr	r0, [pc, #32]	@ (80019dc <menu_config_print+0xbc>)
 80019ba:	f007 fc87 	bl	80092cc <iprintf>
    printf("\r\n");
 80019be:	4818      	ldr	r0, [pc, #96]	@ (8001a20 <menu_config_print+0x100>)
 80019c0:	f007 fcec 	bl	800939c <puts>
}//end status_message
 80019c4:	bf00      	nop
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	0800ae24 	.word	0x0800ae24
 80019cc:	0800ae28 	.word	0x0800ae28
 80019d0:	0800ae54 	.word	0x0800ae54
 80019d4:	0800ae80 	.word	0x0800ae80
 80019d8:	0800a68c 	.word	0x0800a68c
 80019dc:	0800aea0 	.word	0x0800aea0
 80019e0:	0800aecc 	.word	0x0800aecc
 80019e4:	0800aef8 	.word	0x0800aef8
 80019e8:	0800af24 	.word	0x0800af24
 80019ec:	0800af50 	.word	0x0800af50
 80019f0:	0800af7c 	.word	0x0800af7c
 80019f4:	0800afa8 	.word	0x0800afa8
 80019f8:	0800afd4 	.word	0x0800afd4
 80019fc:	0800b000 	.word	0x0800b000
 8001a00:	0800b02c 	.word	0x0800b02c
 8001a04:	0800b058 	.word	0x0800b058
 8001a08:	0800b084 	.word	0x0800b084
 8001a0c:	0800b0b0 	.word	0x0800b0b0
 8001a10:	0800b0dc 	.word	0x0800b0dc
 8001a14:	0800b108 	.word	0x0800b108
 8001a18:	0800b134 	.word	0x0800b134
 8001a1c:	0800b160 	.word	0x0800b160
 8001a20:	0800a9e8 	.word	0x0800a9e8

08001a24 <menu_config_process_input>:


/* Process char received while in configuration menu */
void menu_config_process_input(char option){
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	71fb      	strb	r3, [r7, #7]
	printf("\r\n> Executing OPTION (%c) --> ", option);
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	4619      	mov	r1, r3
 8001a32:	4851      	ldr	r0, [pc, #324]	@ (8001b78 <menu_config_process_input+0x154>)
 8001a34:	f007 fc4a 	bl	80092cc <iprintf>

    switch (option) {
 8001a38:	79fb      	ldrb	r3, [r7, #7]
 8001a3a:	3b41      	subs	r3, #65	@ 0x41
 8001a3c:	2b19      	cmp	r3, #25
 8001a3e:	f200 808d 	bhi.w	8001b5c <menu_config_process_input+0x138>
 8001a42:	a201      	add	r2, pc, #4	@ (adr r2, 8001a48 <menu_config_process_input+0x24>)
 8001a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a48:	08001ac9 	.word	0x08001ac9
 8001a4c:	08001b5d 	.word	0x08001b5d
 8001a50:	08001b5d 	.word	0x08001b5d
 8001a54:	08001af7 	.word	0x08001af7
 8001a58:	08001b4d 	.word	0x08001b4d
 8001a5c:	08001b1b 	.word	0x08001b1b
 8001a60:	08001b29 	.word	0x08001b29
 8001a64:	08001b2f 	.word	0x08001b2f
 8001a68:	08001b5d 	.word	0x08001b5d
 8001a6c:	08001b35 	.word	0x08001b35
 8001a70:	08001b3b 	.word	0x08001b3b
 8001a74:	08001b41 	.word	0x08001b41
 8001a78:	08001ac3 	.word	0x08001ac3
 8001a7c:	08001b5d 	.word	0x08001b5d
 8001a80:	08001b5d 	.word	0x08001b5d
 8001a84:	08001b5d 	.word	0x08001b5d
 8001a88:	08001ab1 	.word	0x08001ab1
 8001a8c:	08001b53 	.word	0x08001b53
 8001a90:	08001ad3 	.word	0x08001ad3
 8001a94:	08001b5d 	.word	0x08001b5d
 8001a98:	08001b5d 	.word	0x08001b5d
 8001a9c:	08001b5d 	.word	0x08001b5d
 8001aa0:	08001b47 	.word	0x08001b47
 8001aa4:	08001b5d 	.word	0x08001b5d
 8001aa8:	08001b5d 	.word	0x08001b5d
 8001aac:	08001b59 	.word	0x08001b59
        case 'Q':
            printf("\n\rLeaving Auto launcher configuration menu\n\r");
 8001ab0:	4832      	ldr	r0, [pc, #200]	@ (8001b7c <menu_config_process_input+0x158>)
 8001ab2:	f007 fc0b 	bl	80092cc <iprintf>
            activeMenu = mainMenu; // set active menu flag to main menu
 8001ab6:	4b32      	ldr	r3, [pc, #200]	@ (8001b80 <menu_config_process_input+0x15c>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	701a      	strb	r2, [r3, #0]
            menu_main_print();
 8001abc:	f7ff fc18 	bl	80012f0 <menu_main_print>
            break;
 8001ac0:	e053      	b.n	8001b6a <menu_config_process_input+0x146>
        case 'M':
            menu_config_print();
 8001ac2:	f7ff ff2d 	bl	8001920 <menu_config_print>
            break;
 8001ac6:	e050      	b.n	8001b6a <menu_config_process_input+0x146>
        case 'A':
        	// get the autolauncher tube count
        	menu_config_tubes_type_serial();
 8001ac8:	f000 f86a 	bl	8001ba0 <menu_config_tubes_type_serial>
            // print config menu again
            menu_config_print();
 8001acc:	f7ff ff28 	bl	8001920 <menu_config_print>
            break;
 8001ad0:	e04b      	b.n	8001b6a <menu_config_process_input+0x146>
        case 'S':
        	printf("extend_all_pins()\r\n");
 8001ad2:	482c      	ldr	r0, [pc, #176]	@ (8001b84 <menu_config_process_input+0x160>)
 8001ad4:	f007 fc62 	bl	800939c <puts>
        	if(launcher.tubeCount == '6')
 8001ad8:	4b2b      	ldr	r3, [pc, #172]	@ (8001b88 <menu_config_process_input+0x164>)
 8001ada:	785b      	ldrb	r3, [r3, #1]
 8001adc:	2b36      	cmp	r3, #54	@ 0x36
 8001ade:	d102      	bne.n	8001ae6 <menu_config_process_input+0xc2>
        		extend_all_pins(6);
 8001ae0:	2006      	movs	r0, #6
 8001ae2:	f001 f9d9 	bl	8002e98 <extend_all_pins>
        	if(launcher.tubeCount == '8')
 8001ae6:	4b28      	ldr	r3, [pc, #160]	@ (8001b88 <menu_config_process_input+0x164>)
 8001ae8:	785b      	ldrb	r3, [r3, #1]
 8001aea:	2b38      	cmp	r3, #56	@ 0x38
 8001aec:	d13a      	bne.n	8001b64 <menu_config_process_input+0x140>
        		extend_all_pins(8);
 8001aee:	2008      	movs	r0, #8
 8001af0:	f001 f9d2 	bl	8002e98 <extend_all_pins>
            break;
 8001af4:	e036      	b.n	8001b64 <menu_config_process_input+0x140>
        case 'D':
        	printf("retract_all_pins()\r\n");
 8001af6:	4825      	ldr	r0, [pc, #148]	@ (8001b8c <menu_config_process_input+0x168>)
 8001af8:	f007 fc50 	bl	800939c <puts>
        	if(launcher.tubeCount == '6')
 8001afc:	4b22      	ldr	r3, [pc, #136]	@ (8001b88 <menu_config_process_input+0x164>)
 8001afe:	785b      	ldrb	r3, [r3, #1]
 8001b00:	2b36      	cmp	r3, #54	@ 0x36
 8001b02:	d102      	bne.n	8001b0a <menu_config_process_input+0xe6>
        		retract_all_pins(6);
 8001b04:	2006      	movs	r0, #6
 8001b06:	f001 f9e9 	bl	8002edc <retract_all_pins>
        	if(launcher.tubeCount == '8')
 8001b0a:	4b1f      	ldr	r3, [pc, #124]	@ (8001b88 <menu_config_process_input+0x164>)
 8001b0c:	785b      	ldrb	r3, [r3, #1]
 8001b0e:	2b38      	cmp	r3, #56	@ 0x38
 8001b10:	d12a      	bne.n	8001b68 <menu_config_process_input+0x144>
        		retract_all_pins(8);
 8001b12:	2008      	movs	r0, #8
 8001b14:	f001 f9e2 	bl	8002edc <retract_all_pins>
            break;
 8001b18:	e026      	b.n	8001b68 <menu_config_process_input+0x144>
        case 'F':
            printf("\n\rSend the \"@\" symbol repeatedly to exit grease pins mode\r\n");
 8001b1a:	481d      	ldr	r0, [pc, #116]	@ (8001b90 <menu_config_process_input+0x16c>)
 8001b1c:	f007 fc3e 	bl	800939c <puts>
            printf("grease_pins();");
 8001b20:	481c      	ldr	r0, [pc, #112]	@ (8001b94 <menu_config_process_input+0x170>)
 8001b22:	f007 fbd3 	bl	80092cc <iprintf>
            //grease_pins();
            break;
 8001b26:	e020      	b.n	8001b6a <menu_config_process_input+0x146>
        case 'G':
        	menu_clear_memory();
 8001b28:	f000 f95c 	bl	8001de4 <menu_clear_memory>
        	break;
 8001b2c:	e01d      	b.n	8001b6a <menu_config_process_input+0x146>
        case 'H':
        	motor_read_stats();
 8001b2e:	f000 fa89 	bl	8002044 <motor_read_stats>
        	break;
 8001b32:	e01a      	b.n	8001b6a <menu_config_process_input+0x146>
        case 'J':
        	// motor runtime
        	motor_set_runtime();
 8001b34:	f000 fb28 	bl	8002188 <motor_set_runtime>
    		break;
 8001b38:	e017      	b.n	8001b6a <menu_config_process_input+0x146>
        case 'K':
        	motor_set_sampling_period();
 8001b3a:	f000 fbc1 	bl	80022c0 <motor_set_sampling_period>
        	break;
 8001b3e:	e014      	b.n	8001b6a <menu_config_process_input+0x146>
        case 'L':
        	motor_set_wiring();
 8001b40:	f000 fd7e 	bl	8002640 <motor_set_wiring>
        	break;
 8001b44:	e011      	b.n	8001b6a <menu_config_process_input+0x146>
        case 'W':
        	motor_set_pwm_freq();
 8001b46:	f000 fc6f 	bl	8002428 <motor_set_pwm_freq>
        	break;
 8001b4a:	e00e      	b.n	8001b6a <menu_config_process_input+0x146>
        case 'E':
        	motor_reset_stats();
 8001b4c:	f000 fdee 	bl	800272c <motor_reset_stats>
        	break;
 8001b50:	e00b      	b.n	8001b6a <menu_config_process_input+0x146>
        case 'R':
        	motor_read_parameters();
 8001b52:	f000 fe01 	bl	8002758 <motor_read_parameters>
        	break;
 8001b56:	e008      	b.n	8001b6a <menu_config_process_input+0x146>
        case 'Z':
        	menu_help_print();
 8001b58:	f000 feb6 	bl	80028c8 <menu_help_print>
        default:
        	printf("\r\n** Unrecognized command!!** \r\n");
 8001b5c:	480e      	ldr	r0, [pc, #56]	@ (8001b98 <menu_config_process_input+0x174>)
 8001b5e:	f007 fc1d 	bl	800939c <puts>
            break;
 8001b62:	e002      	b.n	8001b6a <menu_config_process_input+0x146>
            break;
 8001b64:	bf00      	nop
 8001b66:	e000      	b.n	8001b6a <menu_config_process_input+0x146>
            break;
 8001b68:	bf00      	nop
    }
    printf("\r\n> ");
 8001b6a:	480c      	ldr	r0, [pc, #48]	@ (8001b9c <menu_config_process_input+0x178>)
 8001b6c:	f007 fbae 	bl	80092cc <iprintf>
}
 8001b70:	bf00      	nop
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	0800a9ec 	.word	0x0800a9ec
 8001b7c:	0800b18c 	.word	0x0800b18c
 8001b80:	20000187 	.word	0x20000187
 8001b84:	0800b1bc 	.word	0x0800b1bc
 8001b88:	20000000 	.word	0x20000000
 8001b8c:	0800b1d0 	.word	0x0800b1d0
 8001b90:	0800b1e4 	.word	0x0800b1e4
 8001b94:	0800b220 	.word	0x0800b220
 8001b98:	0800adbc 	.word	0x0800adbc
 8001b9c:	0800a5b4 	.word	0x0800a5b4

08001ba0 <menu_config_tubes_type_serial>:



void menu_config_tubes_type_serial(void){
 8001ba0:	b5b0      	push	{r4, r5, r7, lr}
 8001ba2:	b0c2      	sub	sp, #264	@ 0x108
 8001ba4:	af02      	add	r7, sp, #8
	printf("Current tube count: %c\r\n", launcher.tubeCount);
 8001ba6:	4b7f      	ldr	r3, [pc, #508]	@ (8001da4 <menu_config_tubes_type_serial+0x204>)
 8001ba8:	785b      	ldrb	r3, [r3, #1]
 8001baa:	4619      	mov	r1, r3
 8001bac:	487e      	ldr	r0, [pc, #504]	@ (8001da8 <menu_config_tubes_type_serial+0x208>)
 8001bae:	f007 fb8d 	bl	80092cc <iprintf>
	char tubes[1];
	char tubePrompt[] = "\r\nEnter AL tube count [6] or [8]: ";
 8001bb2:	4b7e      	ldr	r3, [pc, #504]	@ (8001dac <menu_config_tubes_type_serial+0x20c>)
 8001bb4:	f107 04d8 	add.w	r4, r7, #216	@ 0xd8
 8001bb8:	461d      	mov	r5, r3
 8001bba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bc2:	682b      	ldr	r3, [r5, #0]
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	8022      	strh	r2, [r4, #0]
 8001bc8:	3402      	adds	r4, #2
 8001bca:	0c1b      	lsrs	r3, r3, #16
 8001bcc:	7023      	strb	r3, [r4, #0]
	char tubeError[] = "\r\nERROR: Enter 6 or 8 !\r\n";
 8001bce:	4b78      	ldr	r3, [pc, #480]	@ (8001db0 <menu_config_tubes_type_serial+0x210>)
 8001bd0:	f107 04bc 	add.w	r4, r7, #188	@ 0xbc
 8001bd4:	461d      	mov	r5, r3
 8001bd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bda:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001bde:	c403      	stmia	r4!, {r0, r1}
 8001be0:	8022      	strh	r2, [r4, #0]
	char tubeCheck[] = {'6','8'};
 8001be2:	f643 0336 	movw	r3, #14390	@ 0x3836
 8001be6:	f8a7 30b8 	strh.w	r3, [r7, #184]	@ 0xb8
	get_user_input(tubePrompt, tubeError, 1, tubeCheck, tubes);
 8001bea:	f107 02b8 	add.w	r2, r7, #184	@ 0xb8
 8001bee:	f107 01bc 	add.w	r1, r7, #188	@ 0xbc
 8001bf2:	f107 00d8 	add.w	r0, r7, #216	@ 0xd8
 8001bf6:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001bfa:	9300      	str	r3, [sp, #0]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f000 fe68 	bl	80028d4 <get_user_input>

    launcher.tubeCount = tubes[0];
 8001c04:	f897 20fc 	ldrb.w	r2, [r7, #252]	@ 0xfc
 8001c08:	4b66      	ldr	r3, [pc, #408]	@ (8001da4 <menu_config_tubes_type_serial+0x204>)
 8001c0a:	705a      	strb	r2, [r3, #1]
    // get the autolauncher type, R regular or X extended, only for 8 tube AL
    if(launcher.tubeCount == '8'){
 8001c0c:	4b65      	ldr	r3, [pc, #404]	@ (8001da4 <menu_config_tubes_type_serial+0x204>)
 8001c0e:	785b      	ldrb	r3, [r3, #1]
 8001c10:	2b38      	cmp	r3, #56	@ 0x38
 8001c12:	d130      	bne.n	8001c76 <menu_config_tubes_type_serial+0xd6>
    	char type[1];
    	char typePrompt[] = "Enter launcher type, [X] extended or [R] regular: ";
 8001c14:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8001c18:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001c1c:	4a65      	ldr	r2, [pc, #404]	@ (8001db4 <menu_config_tubes_type_serial+0x214>)
 8001c1e:	461c      	mov	r4, r3
 8001c20:	4615      	mov	r5, r2
 8001c22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c2e:	682b      	ldr	r3, [r5, #0]
 8001c30:	461a      	mov	r2, r3
 8001c32:	8022      	strh	r2, [r4, #0]
 8001c34:	3402      	adds	r4, #2
 8001c36:	0c1b      	lsrs	r3, r3, #16
 8001c38:	7023      	strb	r3, [r4, #0]
    	char typeError[] = "\r\nERROR: Enter X or R !\r\n";
 8001c3a:	4b5f      	ldr	r3, [pc, #380]	@ (8001db8 <menu_config_tubes_type_serial+0x218>)
 8001c3c:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8001c40:	461d      	mov	r5, r3
 8001c42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c46:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c4a:	c403      	stmia	r4!, {r0, r1}
 8001c4c:	8022      	strh	r2, [r4, #0]
    	char typeCheck[] = {'R','X'};
 8001c4e:	f645 0352 	movw	r3, #22610	@ 0x5852
 8001c52:	86bb      	strh	r3, [r7, #52]	@ 0x34
    	get_user_input(typePrompt, typeError, 1, typeCheck, type);
 8001c54:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8001c58:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8001c5c:	4638      	mov	r0, r7
 8001c5e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c62:	9300      	str	r3, [sp, #0]
 8001c64:	4613      	mov	r3, r2
 8001c66:	2201      	movs	r2, #1
 8001c68:	f000 fe34 	bl	80028d4 <get_user_input>
    	launcher.type = type[0];
 8001c6c:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8001c70:	4b4c      	ldr	r3, [pc, #304]	@ (8001da4 <menu_config_tubes_type_serial+0x204>)
 8001c72:	709a      	strb	r2, [r3, #2]
 8001c74:	e002      	b.n	8001c7c <menu_config_tubes_type_serial+0xdc>

    } else {
    	launcher.type = '0'; // if not 8 tubes, reset type to unknown
 8001c76:	4b4b      	ldr	r3, [pc, #300]	@ (8001da4 <menu_config_tubes_type_serial+0x204>)
 8001c78:	2230      	movs	r2, #48	@ 0x30
 8001c7a:	709a      	strb	r2, [r3, #2]
    }
    printf("Current serial number: %c\r\n", launcher.serialNumber);
 8001c7c:	4b49      	ldr	r3, [pc, #292]	@ (8001da4 <menu_config_tubes_type_serial+0x204>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	4619      	mov	r1, r3
 8001c82:	484e      	ldr	r0, [pc, #312]	@ (8001dbc <menu_config_tubes_type_serial+0x21c>)
 8001c84:	f007 fb22 	bl	80092cc <iprintf>
	char serial[2];
	char serialPrompt[] = "Enter a two-digit Autolauncher serial number [00-99]: ";
 8001c88:	4b4d      	ldr	r3, [pc, #308]	@ (8001dc0 <menu_config_tubes_type_serial+0x220>)
 8001c8a:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 8001c8e:	461d      	mov	r5, r3
 8001c90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c9c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001ca0:	6020      	str	r0, [r4, #0]
 8001ca2:	3404      	adds	r4, #4
 8001ca4:	8021      	strh	r1, [r4, #0]
 8001ca6:	3402      	adds	r4, #2
 8001ca8:	0c0b      	lsrs	r3, r1, #16
 8001caa:	7023      	strb	r3, [r4, #0]
	char serialError[] = "\r\nEnter only numbers!\r\n";
 8001cac:	4b45      	ldr	r3, [pc, #276]	@ (8001dc4 <menu_config_tubes_type_serial+0x224>)
 8001cae:	f107 0464 	add.w	r4, r7, #100	@ 0x64
 8001cb2:	461d      	mov	r5, r3
 8001cb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cb8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001cbc:	e884 0003 	stmia.w	r4, {r0, r1}
	char serialCheck[] = {'0','1','2','3','4','5','6','7','8','9'};
 8001cc0:	4a41      	ldr	r2, [pc, #260]	@ (8001dc8 <menu_config_tubes_type_serial+0x228>)
 8001cc2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001cc6:	ca07      	ldmia	r2, {r0, r1, r2}
 8001cc8:	c303      	stmia	r3!, {r0, r1}
 8001cca:	801a      	strh	r2, [r3, #0]
	get_user_input(serialPrompt, serialError, 2, serialCheck, serial);
 8001ccc:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8001cd0:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 8001cd4:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 8001cd8:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	2202      	movs	r2, #2
 8001ce2:	f000 fdf7 	bl	80028d4 <get_user_input>
	launcher.serialNumber = (uint8_t) ( (serial[0] - '0') * 10 + (serial[1] - '0') ); // convert to number, subtract '0' (48 dec)
 8001ce6:	f897 30b4 	ldrb.w	r3, [r7, #180]	@ 0xb4
 8001cea:	3b30      	subs	r3, #48	@ 0x30
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	461a      	mov	r2, r3
 8001cf0:	0092      	lsls	r2, r2, #2
 8001cf2:	4413      	add	r3, r2
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	f897 30b5 	ldrb.w	r3, [r7, #181]	@ 0xb5
 8001cfc:	4413      	add	r3, r2
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	3b30      	subs	r3, #48	@ 0x30
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	4b27      	ldr	r3, [pc, #156]	@ (8001da4 <menu_config_tubes_type_serial+0x204>)
 8001d06:	701a      	strb	r2, [r3, #0]
    launcher.configured = 'Y';
 8001d08:	4b26      	ldr	r3, [pc, #152]	@ (8001da4 <menu_config_tubes_type_serial+0x204>)
 8001d0a:	2259      	movs	r2, #89	@ 0x59
 8001d0c:	711a      	strb	r2, [r3, #4]
    printf("\r\nTubes: %c | Type: %c | Serial: %i\r\n", launcher.tubeCount, launcher.type, launcher.serialNumber);
 8001d0e:	4b25      	ldr	r3, [pc, #148]	@ (8001da4 <menu_config_tubes_type_serial+0x204>)
 8001d10:	785b      	ldrb	r3, [r3, #1]
 8001d12:	4619      	mov	r1, r3
 8001d14:	4b23      	ldr	r3, [pc, #140]	@ (8001da4 <menu_config_tubes_type_serial+0x204>)
 8001d16:	789b      	ldrb	r3, [r3, #2]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4b22      	ldr	r3, [pc, #136]	@ (8001da4 <menu_config_tubes_type_serial+0x204>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	482b      	ldr	r0, [pc, #172]	@ (8001dcc <menu_config_tubes_type_serial+0x22c>)
 8001d20:	f007 fad4 	bl	80092cc <iprintf>

    // store parameters in eeprom
    eeprom_write_nbytes(AL_TUBECOUNT1B, sizeof(launcher.tubeCount), &launcher.tubeCount);
 8001d24:	4a2a      	ldr	r2, [pc, #168]	@ (8001dd0 <menu_config_tubes_type_serial+0x230>)
 8001d26:	2101      	movs	r1, #1
 8001d28:	2000      	movs	r0, #0
 8001d2a:	f001 fd8b 	bl	8003844 <eeprom_write_nbytes>
    eeprom_write_nbytes(AL_TYPE1B, sizeof(launcher.type), &launcher.type);
 8001d2e:	4a29      	ldr	r2, [pc, #164]	@ (8001dd4 <menu_config_tubes_type_serial+0x234>)
 8001d30:	2101      	movs	r1, #1
 8001d32:	2001      	movs	r0, #1
 8001d34:	f001 fd86 	bl	8003844 <eeprom_write_nbytes>
    eeprom_write_nbytes(AL_SN1B, sizeof(launcher.serialNumber), &launcher.serialNumber);
 8001d38:	4a1a      	ldr	r2, [pc, #104]	@ (8001da4 <menu_config_tubes_type_serial+0x204>)
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	2002      	movs	r0, #2
 8001d3e:	f001 fd81 	bl	8003844 <eeprom_write_nbytes>
    eeprom_write_nbytes(AL_CONFIGED1B, sizeof(launcher.configured), &launcher.configured);
 8001d42:	4a25      	ldr	r2, [pc, #148]	@ (8001dd8 <menu_config_tubes_type_serial+0x238>)
 8001d44:	2101      	movs	r1, #1
 8001d46:	2003      	movs	r0, #3
 8001d48:	f001 fd7c 	bl	8003844 <eeprom_write_nbytes>
    printf("Settings saved!");
 8001d4c:	4823      	ldr	r0, [pc, #140]	@ (8001ddc <menu_config_tubes_type_serial+0x23c>)
 8001d4e:	f007 fabd 	bl	80092cc <iprintf>
    // test eeprom memory
    eeprom_read_nbytes(AL_TUBECOUNT1B, sizeof(launcher.tubeCount), &launcher.tubeCount);
 8001d52:	4a1f      	ldr	r2, [pc, #124]	@ (8001dd0 <menu_config_tubes_type_serial+0x230>)
 8001d54:	2101      	movs	r1, #1
 8001d56:	2000      	movs	r0, #0
 8001d58:	f001 fd9d 	bl	8003896 <eeprom_read_nbytes>
    eeprom_read_nbytes(AL_TYPE1B, sizeof(launcher.type), &launcher.type);
 8001d5c:	4a1d      	ldr	r2, [pc, #116]	@ (8001dd4 <menu_config_tubes_type_serial+0x234>)
 8001d5e:	2101      	movs	r1, #1
 8001d60:	2001      	movs	r0, #1
 8001d62:	f001 fd98 	bl	8003896 <eeprom_read_nbytes>
    eeprom_read_nbytes(AL_SN1B, sizeof(launcher.serialNumber), &launcher.serialNumber);
 8001d66:	4a0f      	ldr	r2, [pc, #60]	@ (8001da4 <menu_config_tubes_type_serial+0x204>)
 8001d68:	2101      	movs	r1, #1
 8001d6a:	2002      	movs	r0, #2
 8001d6c:	f001 fd93 	bl	8003896 <eeprom_read_nbytes>
    eeprom_read_nbytes(AL_CONFIGED1B, sizeof(launcher.configured), &launcher.configured);
 8001d70:	4a19      	ldr	r2, [pc, #100]	@ (8001dd8 <menu_config_tubes_type_serial+0x238>)
 8001d72:	2101      	movs	r1, #1
 8001d74:	2003      	movs	r0, #3
 8001d76:	f001 fd8e 	bl	8003896 <eeprom_read_nbytes>
    // print stored values
    printf("\r\nStored autolauncher configuration: Tubes: %c | Type: %c | Serial: %i | Configured: %c\r\n",
    		launcher.tubeCount, launcher.type, launcher.serialNumber, launcher.configured);
 8001d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001da4 <menu_config_tubes_type_serial+0x204>)
 8001d7c:	785b      	ldrb	r3, [r3, #1]
    printf("\r\nStored autolauncher configuration: Tubes: %c | Type: %c | Serial: %i | Configured: %c\r\n",
 8001d7e:	4619      	mov	r1, r3
    		launcher.tubeCount, launcher.type, launcher.serialNumber, launcher.configured);
 8001d80:	4b08      	ldr	r3, [pc, #32]	@ (8001da4 <menu_config_tubes_type_serial+0x204>)
 8001d82:	789b      	ldrb	r3, [r3, #2]
    printf("\r\nStored autolauncher configuration: Tubes: %c | Type: %c | Serial: %i | Configured: %c\r\n",
 8001d84:	461a      	mov	r2, r3
    		launcher.tubeCount, launcher.type, launcher.serialNumber, launcher.configured);
 8001d86:	4b07      	ldr	r3, [pc, #28]	@ (8001da4 <menu_config_tubes_type_serial+0x204>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
    printf("\r\nStored autolauncher configuration: Tubes: %c | Type: %c | Serial: %i | Configured: %c\r\n",
 8001d8a:	4618      	mov	r0, r3
    		launcher.tubeCount, launcher.type, launcher.serialNumber, launcher.configured);
 8001d8c:	4b05      	ldr	r3, [pc, #20]	@ (8001da4 <menu_config_tubes_type_serial+0x204>)
 8001d8e:	791b      	ldrb	r3, [r3, #4]
    printf("\r\nStored autolauncher configuration: Tubes: %c | Type: %c | Serial: %i | Configured: %c\r\n",
 8001d90:	9300      	str	r3, [sp, #0]
 8001d92:	4603      	mov	r3, r0
 8001d94:	4812      	ldr	r0, [pc, #72]	@ (8001de0 <menu_config_tubes_type_serial+0x240>)
 8001d96:	f007 fa99 	bl	80092cc <iprintf>
}
 8001d9a:	bf00      	nop
 8001d9c:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bdb0      	pop	{r4, r5, r7, pc}
 8001da4:	20000000 	.word	0x20000000
 8001da8:	0800b230 	.word	0x0800b230
 8001dac:	0800b2fc 	.word	0x0800b2fc
 8001db0:	0800b320 	.word	0x0800b320
 8001db4:	0800b33c 	.word	0x0800b33c
 8001db8:	0800b370 	.word	0x0800b370
 8001dbc:	0800b24c 	.word	0x0800b24c
 8001dc0:	0800b38c 	.word	0x0800b38c
 8001dc4:	0800b3c4 	.word	0x0800b3c4
 8001dc8:	0800b3dc 	.word	0x0800b3dc
 8001dcc:	0800b268 	.word	0x0800b268
 8001dd0:	20000001 	.word	0x20000001
 8001dd4:	20000002 	.word	0x20000002
 8001dd8:	20000004 	.word	0x20000004
 8001ddc:	0800b290 	.word	0x0800b290
 8001de0:	0800b2a0 	.word	0x0800b2a0

08001de4 <menu_clear_memory>:


void menu_clear_memory(void){
 8001de4:	b5b0      	push	{r4, r5, r7, lr}
 8001de6:	b0aa      	sub	sp, #168	@ 0xa8
 8001de8:	af02      	add	r7, sp, #8
	uint8_t memStart, memEnd;
	uint8_t validMemory = 0; // valid memory value flag
 8001dea:	2300      	movs	r3, #0
 8001dec:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
	// print memory map
	eeprom_print_memory_map();
 8001df0:	f001 fc62 	bl	80036b8 <eeprom_print_memory_map>
	// get the memory range to clear - start
	char mem[3]; // buffer to store digits
	char mStartPrompt[] = "\r\n>Enter 3 digit START memory address [000-127]: ";
 8001df4:	4b82      	ldr	r3, [pc, #520]	@ (8002000 <menu_clear_memory+0x21c>)
 8001df6:	f107 0464 	add.w	r4, r7, #100	@ 0x64
 8001dfa:	461d      	mov	r5, r3
 8001dfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e08:	682b      	ldr	r3, [r5, #0]
 8001e0a:	8023      	strh	r3, [r4, #0]
	char mEndPrompt[] = "\r\n>Enter 3 digit END memory address [000-127]: ";
 8001e0c:	4b7d      	ldr	r3, [pc, #500]	@ (8002004 <menu_clear_memory+0x220>)
 8001e0e:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8001e12:	461d      	mov	r5, r3
 8001e14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e1c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001e20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char memError[] = "\r\n* ERROR: enter valid numbers *\r\n";
 8001e24:	4b78      	ldr	r3, [pc, #480]	@ (8002008 <menu_clear_memory+0x224>)
 8001e26:	f107 0410 	add.w	r4, r7, #16
 8001e2a:	461d      	mov	r5, r3
 8001e2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e34:	682b      	ldr	r3, [r5, #0]
 8001e36:	461a      	mov	r2, r3
 8001e38:	8022      	strh	r2, [r4, #0]
 8001e3a:	3402      	adds	r4, #2
 8001e3c:	0c1b      	lsrs	r3, r3, #16
 8001e3e:	7023      	strb	r3, [r4, #0]
	char memCheck[] = {'0','1','2','3','4','5','6','7','8','9'};
 8001e40:	4a72      	ldr	r2, [pc, #456]	@ (800200c <menu_clear_memory+0x228>)
 8001e42:	1d3b      	adds	r3, r7, #4
 8001e44:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e46:	c303      	stmia	r3!, {r0, r1}
 8001e48:	801a      	strh	r2, [r3, #0]
	// get start address
	do{
		get_user_input(mStartPrompt, memError, 3, memCheck, mem);
 8001e4a:	1d3a      	adds	r2, r7, #4
 8001e4c:	f107 0110 	add.w	r1, r7, #16
 8001e50:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 8001e54:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8001e58:	9300      	str	r3, [sp, #0]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	2203      	movs	r2, #3
 8001e5e:	f000 fd39 	bl	80028d4 <get_user_input>
		memStart = (uint8_t) ( (mem[0] - '0') * 100 + (mem[1] - '0') * 10 + (mem[2] - '0') ); // convert to number, subtract '0' (48 dec)
 8001e62:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 8001e66:	3b30      	subs	r3, #48	@ 0x30
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	0092      	lsls	r2, r2, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	461a      	mov	r2, r3
 8001e72:	0091      	lsls	r1, r2, #2
 8001e74:	461a      	mov	r2, r3
 8001e76:	460b      	mov	r3, r1
 8001e78:	4413      	add	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
 8001e82:	3b30      	subs	r3, #48	@ 0x30
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	4619      	mov	r1, r3
 8001e88:	0089      	lsls	r1, r1, #2
 8001e8a:	440b      	add	r3, r1
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	4413      	add	r3, r2
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	f897 309a 	ldrb.w	r3, [r7, #154]	@ 0x9a
 8001e98:	4413      	add	r3, r2
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	3b30      	subs	r3, #48	@ 0x30
 8001e9e:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
		if((memStart >= 0) && (memStart <= 127)){
 8001ea2:	f997 309e 	ldrsb.w	r3, [r7, #158]	@ 0x9e
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	db03      	blt.n	8001eb2 <menu_clear_memory+0xce>
			validMemory = 1;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 8001eb0:	e002      	b.n	8001eb8 <menu_clear_memory+0xd4>
		} else {
			printf("\r\n** Memory out of range! **\r\n");
 8001eb2:	4857      	ldr	r0, [pc, #348]	@ (8002010 <menu_clear_memory+0x22c>)
 8001eb4:	f007 fa72 	bl	800939c <puts>
		}
	} while ( validMemory == 0 );
 8001eb8:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d0c4      	beq.n	8001e4a <menu_clear_memory+0x66>
	// get end address
	validMemory = 0;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
	do{
		mem[0] = '\0', mem[1] = '\0' , mem[2] = '\0';
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	f887 3098 	strb.w	r3, [r7, #152]	@ 0x98
 8001ecc:	2300      	movs	r3, #0
 8001ece:	f887 3099 	strb.w	r3, [r7, #153]	@ 0x99
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	f887 309a 	strb.w	r3, [r7, #154]	@ 0x9a

		get_user_input(mEndPrompt, memError, 3, memCheck, mem);
 8001ed8:	1d3a      	adds	r2, r7, #4
 8001eda:	f107 0110 	add.w	r1, r7, #16
 8001ede:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8001ee2:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	2203      	movs	r2, #3
 8001eec:	f000 fcf2 	bl	80028d4 <get_user_input>
		memEnd = (uint8_t)( (mem[0] - '0') * 100 + (mem[1] - '0') * 10 + (mem[2] - '0') ); // convert to number, subtract '0' (48 dec)
 8001ef0:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 8001ef4:	3b30      	subs	r3, #48	@ 0x30
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	461a      	mov	r2, r3
 8001efa:	0092      	lsls	r2, r2, #2
 8001efc:	4413      	add	r3, r2
 8001efe:	461a      	mov	r2, r3
 8001f00:	0091      	lsls	r1, r2, #2
 8001f02:	461a      	mov	r2, r3
 8001f04:	460b      	mov	r3, r1
 8001f06:	4413      	add	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
 8001f10:	3b30      	subs	r3, #48	@ 0x30
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	4619      	mov	r1, r3
 8001f16:	0089      	lsls	r1, r1, #2
 8001f18:	440b      	add	r3, r1
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	4413      	add	r3, r2
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	f897 309a 	ldrb.w	r3, [r7, #154]	@ 0x9a
 8001f26:	4413      	add	r3, r2
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	3b30      	subs	r3, #48	@ 0x30
 8001f2c:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d
		if((memEnd >= 0) && (memEnd <= 127)){
 8001f30:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	db03      	blt.n	8001f40 <menu_clear_memory+0x15c>
			validMemory = 1;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 8001f3e:	e002      	b.n	8001f46 <menu_clear_memory+0x162>
		} else {
			printf("\r\n** Memory out of range! **\r\n");
 8001f40:	4833      	ldr	r0, [pc, #204]	@ (8002010 <menu_clear_memory+0x22c>)
 8001f42:	f007 fa2b 	bl	800939c <puts>
		}
	} while ( validMemory == 0 );
 8001f46:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d0bb      	beq.n	8001ec6 <menu_clear_memory+0xe2>
	printf("> %i block/s cleared!\r\n", eeprom_clear(memStart, memEnd));
 8001f4e:	f897 209d 	ldrb.w	r2, [r7, #157]	@ 0x9d
 8001f52:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8001f56:	4611      	mov	r1, r2
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f001 fb7d 	bl	8003658 <eeprom_clear>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	4619      	mov	r1, r3
 8001f62:	482c      	ldr	r0, [pc, #176]	@ (8002014 <menu_clear_memory+0x230>)
 8001f64:	f007 f9b2 	bl	80092cc <iprintf>
	// update variables with new stored values
	// read launcher config
	eeprom_read_nbytes(AL_TUBECOUNT1B, sizeof(launcher.tubeCount), &launcher.tubeCount);
 8001f68:	4a2b      	ldr	r2, [pc, #172]	@ (8002018 <menu_clear_memory+0x234>)
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	2000      	movs	r0, #0
 8001f6e:	f001 fc92 	bl	8003896 <eeprom_read_nbytes>
	eeprom_read_nbytes(AL_TYPE1B, sizeof(launcher.type), &launcher.type);
 8001f72:	4a2a      	ldr	r2, [pc, #168]	@ (800201c <menu_clear_memory+0x238>)
 8001f74:	2101      	movs	r1, #1
 8001f76:	2001      	movs	r0, #1
 8001f78:	f001 fc8d 	bl	8003896 <eeprom_read_nbytes>
	eeprom_read_nbytes(AL_SN1B, sizeof(launcher.serialNumber), &launcher.serialNumber);
 8001f7c:	4a28      	ldr	r2, [pc, #160]	@ (8002020 <menu_clear_memory+0x23c>)
 8001f7e:	2101      	movs	r1, #1
 8001f80:	2002      	movs	r0, #2
 8001f82:	f001 fc88 	bl	8003896 <eeprom_read_nbytes>
	eeprom_read_nbytes(AL_CONFIGED1B, sizeof(launcher.configured), &launcher.configured);
 8001f86:	4a27      	ldr	r2, [pc, #156]	@ (8002024 <menu_clear_memory+0x240>)
 8001f88:	2101      	movs	r1, #1
 8001f8a:	2003      	movs	r0, #3
 8001f8c:	f001 fc83 	bl	8003896 <eeprom_read_nbytes>
	// read motor config
	eeprom_read_nbytes(M_RUNTIME2B, sizeof(motor.runTime), &motor.runTime);
 8001f90:	4a25      	ldr	r2, [pc, #148]	@ (8002028 <menu_clear_memory+0x244>)
 8001f92:	2102      	movs	r1, #2
 8001f94:	2008      	movs	r0, #8
 8001f96:	f001 fc7e 	bl	8003896 <eeprom_read_nbytes>
	eeprom_read_nbytes(M_PWM_FREQ2B, sizeof(motor.pwmFreq), &motor.pwmFreq);
 8001f9a:	4a24      	ldr	r2, [pc, #144]	@ (800202c <menu_clear_memory+0x248>)
 8001f9c:	2102      	movs	r1, #2
 8001f9e:	200a      	movs	r0, #10
 8001fa0:	f001 fc79 	bl	8003896 <eeprom_read_nbytes>
	eeprom_read_nbytes(M_SAMPLEPERIOD2B, sizeof(motor.samplePeriod), &motor.samplePeriod);
 8001fa4:	4a22      	ldr	r2, [pc, #136]	@ (8002030 <menu_clear_memory+0x24c>)
 8001fa6:	2102      	movs	r1, #2
 8001fa8:	200c      	movs	r0, #12
 8001faa:	f001 fc74 	bl	8003896 <eeprom_read_nbytes>
	eeprom_read_nbytes(M_WIRING1B, sizeof(motor.wiring), &motor.wiring);
 8001fae:	4a21      	ldr	r2, [pc, #132]	@ (8002034 <menu_clear_memory+0x250>)
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	200e      	movs	r0, #14
 8001fb4:	f001 fc6f 	bl	8003896 <eeprom_read_nbytes>
	// print new values
	printf("\r\n<EEPROM>\r\n");
 8001fb8:	481f      	ldr	r0, [pc, #124]	@ (8002038 <menu_clear_memory+0x254>)
 8001fba:	f007 f9ef 	bl	800939c <puts>
	printf("<AL> Tubes: %c | Type: %c | Serial: %i\r\n", launcher.tubeCount, launcher.type, launcher.serialNumber);
 8001fbe:	4b18      	ldr	r3, [pc, #96]	@ (8002020 <menu_clear_memory+0x23c>)
 8001fc0:	785b      	ldrb	r3, [r3, #1]
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4b16      	ldr	r3, [pc, #88]	@ (8002020 <menu_clear_memory+0x23c>)
 8001fc6:	789b      	ldrb	r3, [r3, #2]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4b15      	ldr	r3, [pc, #84]	@ (8002020 <menu_clear_memory+0x23c>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	481b      	ldr	r0, [pc, #108]	@ (800203c <menu_clear_memory+0x258>)
 8001fd0:	f007 f97c 	bl	80092cc <iprintf>
	printf("<MOTOR> Runtime: %i ms | PWM Frequency: %i Hz | Sample Period: %i ms | Wiring: %i\r\n",
			(int)motor.runTime, (int)motor.pwmFreq, (int)motor.samplePeriod, (int)motor.wiring);
 8001fd4:	4b14      	ldr	r3, [pc, #80]	@ (8002028 <menu_clear_memory+0x244>)
 8001fd6:	881b      	ldrh	r3, [r3, #0]
	printf("<MOTOR> Runtime: %i ms | PWM Frequency: %i Hz | Sample Period: %i ms | Wiring: %i\r\n",
 8001fd8:	4619      	mov	r1, r3
			(int)motor.runTime, (int)motor.pwmFreq, (int)motor.samplePeriod, (int)motor.wiring);
 8001fda:	4b13      	ldr	r3, [pc, #76]	@ (8002028 <menu_clear_memory+0x244>)
 8001fdc:	889b      	ldrh	r3, [r3, #4]
	printf("<MOTOR> Runtime: %i ms | PWM Frequency: %i Hz | Sample Period: %i ms | Wiring: %i\r\n",
 8001fde:	461a      	mov	r2, r3
			(int)motor.runTime, (int)motor.pwmFreq, (int)motor.samplePeriod, (int)motor.wiring);
 8001fe0:	4b11      	ldr	r3, [pc, #68]	@ (8002028 <menu_clear_memory+0x244>)
 8001fe2:	885b      	ldrh	r3, [r3, #2]
	printf("<MOTOR> Runtime: %i ms | PWM Frequency: %i Hz | Sample Period: %i ms | Wiring: %i\r\n",
 8001fe4:	4618      	mov	r0, r3
			(int)motor.runTime, (int)motor.pwmFreq, (int)motor.samplePeriod, (int)motor.wiring);
 8001fe6:	4b10      	ldr	r3, [pc, #64]	@ (8002028 <menu_clear_memory+0x244>)
 8001fe8:	799b      	ldrb	r3, [r3, #6]
	printf("<MOTOR> Runtime: %i ms | PWM Frequency: %i Hz | Sample Period: %i ms | Wiring: %i\r\n",
 8001fea:	9300      	str	r3, [sp, #0]
 8001fec:	4603      	mov	r3, r0
 8001fee:	4814      	ldr	r0, [pc, #80]	@ (8002040 <menu_clear_memory+0x25c>)
 8001ff0:	f007 f96c 	bl	80092cc <iprintf>
	motor_read_stats();
 8001ff4:	f000 f826 	bl	8002044 <motor_read_stats>
}
 8001ff8:	bf00      	nop
 8001ffa:	37a0      	adds	r7, #160	@ 0xa0
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bdb0      	pop	{r4, r5, r7, pc}
 8002000:	0800b4ac 	.word	0x0800b4ac
 8002004:	0800b4e0 	.word	0x0800b4e0
 8002008:	0800b510 	.word	0x0800b510
 800200c:	0800b3dc 	.word	0x0800b3dc
 8002010:	0800b3e8 	.word	0x0800b3e8
 8002014:	0800b408 	.word	0x0800b408
 8002018:	20000001 	.word	0x20000001
 800201c:	20000002 	.word	0x20000002
 8002020:	20000000 	.word	0x20000000
 8002024:	20000004 	.word	0x20000004
 8002028:	20000010 	.word	0x20000010
 800202c:	20000014 	.word	0x20000014
 8002030:	20000012 	.word	0x20000012
 8002034:	20000016 	.word	0x20000016
 8002038:	0800b420 	.word	0x0800b420
 800203c:	0800b42c 	.word	0x0800b42c
 8002040:	0800b458 	.word	0x0800b458

08002044 <motor_read_stats>:



/* Read motor use and Imax stored in eeprom memory */
void motor_read_stats(void){
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
	// use count
	eeprom_read_nbytes(M_1COUNT2B, sizeof(motor.count[0]), &motor.count[0]);
 800204a:	4a3b      	ldr	r2, [pc, #236]	@ (8002138 <motor_read_stats+0xf4>)
 800204c:	2102      	movs	r1, #2
 800204e:	2010      	movs	r0, #16
 8002050:	f001 fc21 	bl	8003896 <eeprom_read_nbytes>
	eeprom_read_nbytes(M_2COUNT2B, sizeof(motor.count[1]), &motor.count[1]);
 8002054:	4a39      	ldr	r2, [pc, #228]	@ (800213c <motor_read_stats+0xf8>)
 8002056:	2102      	movs	r1, #2
 8002058:	2012      	movs	r0, #18
 800205a:	f001 fc1c 	bl	8003896 <eeprom_read_nbytes>
	eeprom_read_nbytes(M_3COUNT2B, sizeof(motor.count[2]), &motor.count[2]);
 800205e:	4a38      	ldr	r2, [pc, #224]	@ (8002140 <motor_read_stats+0xfc>)
 8002060:	2102      	movs	r1, #2
 8002062:	2014      	movs	r0, #20
 8002064:	f001 fc17 	bl	8003896 <eeprom_read_nbytes>
	eeprom_read_nbytes(M_4COUNT2B, sizeof(motor.count[3]), &motor.count[3]);
 8002068:	4a36      	ldr	r2, [pc, #216]	@ (8002144 <motor_read_stats+0x100>)
 800206a:	2102      	movs	r1, #2
 800206c:	2016      	movs	r0, #22
 800206e:	f001 fc12 	bl	8003896 <eeprom_read_nbytes>
	eeprom_read_nbytes(M_5COUNT2B, sizeof(motor.count[4]), &motor.count[4]);
 8002072:	4a35      	ldr	r2, [pc, #212]	@ (8002148 <motor_read_stats+0x104>)
 8002074:	2102      	movs	r1, #2
 8002076:	2018      	movs	r0, #24
 8002078:	f001 fc0d 	bl	8003896 <eeprom_read_nbytes>
	eeprom_read_nbytes(M_6COUNT2B, sizeof(motor.count[5]), &motor.count[5]);
 800207c:	4a33      	ldr	r2, [pc, #204]	@ (800214c <motor_read_stats+0x108>)
 800207e:	2102      	movs	r1, #2
 8002080:	201a      	movs	r0, #26
 8002082:	f001 fc08 	bl	8003896 <eeprom_read_nbytes>
	eeprom_read_nbytes(M_7COUNT2B, sizeof(motor.count[6]), &motor.count[6]);
 8002086:	4a32      	ldr	r2, [pc, #200]	@ (8002150 <motor_read_stats+0x10c>)
 8002088:	2102      	movs	r1, #2
 800208a:	201c      	movs	r0, #28
 800208c:	f001 fc03 	bl	8003896 <eeprom_read_nbytes>
	eeprom_read_nbytes(M_8COUNT2B, sizeof(motor.count[7]), &motor.count[7]);
 8002090:	4a30      	ldr	r2, [pc, #192]	@ (8002154 <motor_read_stats+0x110>)
 8002092:	2102      	movs	r1, #2
 8002094:	201e      	movs	r0, #30
 8002096:	f001 fbfe 	bl	8003896 <eeprom_read_nbytes>
	// max current logged
	eeprom_read_nbytes(M_1MXAMP2B, sizeof(motor.imax[0]), &motor.imax[0]);
 800209a:	4a2f      	ldr	r2, [pc, #188]	@ (8002158 <motor_read_stats+0x114>)
 800209c:	2102      	movs	r1, #2
 800209e:	2020      	movs	r0, #32
 80020a0:	f001 fbf9 	bl	8003896 <eeprom_read_nbytes>
	eeprom_read_nbytes(M_2MXAMP2B, sizeof(motor.imax[1]), &motor.imax[1]);
 80020a4:	4a2d      	ldr	r2, [pc, #180]	@ (800215c <motor_read_stats+0x118>)
 80020a6:	2102      	movs	r1, #2
 80020a8:	2022      	movs	r0, #34	@ 0x22
 80020aa:	f001 fbf4 	bl	8003896 <eeprom_read_nbytes>
	eeprom_read_nbytes(M_3MXAMP2B, sizeof(motor.imax[2]), &motor.imax[2]);
 80020ae:	4a2c      	ldr	r2, [pc, #176]	@ (8002160 <motor_read_stats+0x11c>)
 80020b0:	2102      	movs	r1, #2
 80020b2:	2024      	movs	r0, #36	@ 0x24
 80020b4:	f001 fbef 	bl	8003896 <eeprom_read_nbytes>
	eeprom_read_nbytes(M_4MXAMP2B, sizeof(motor.imax[3]), &motor.imax[3]);
 80020b8:	4a2a      	ldr	r2, [pc, #168]	@ (8002164 <motor_read_stats+0x120>)
 80020ba:	2102      	movs	r1, #2
 80020bc:	2026      	movs	r0, #38	@ 0x26
 80020be:	f001 fbea 	bl	8003896 <eeprom_read_nbytes>
	eeprom_read_nbytes(M_5MXAMP2B, sizeof(motor.imax[4]), &motor.imax[4]);
 80020c2:	4a29      	ldr	r2, [pc, #164]	@ (8002168 <motor_read_stats+0x124>)
 80020c4:	2102      	movs	r1, #2
 80020c6:	2028      	movs	r0, #40	@ 0x28
 80020c8:	f001 fbe5 	bl	8003896 <eeprom_read_nbytes>
	eeprom_read_nbytes(M_6MXAMP2B, sizeof(motor.imax[5]), &motor.imax[5]);
 80020cc:	4a27      	ldr	r2, [pc, #156]	@ (800216c <motor_read_stats+0x128>)
 80020ce:	2102      	movs	r1, #2
 80020d0:	202a      	movs	r0, #42	@ 0x2a
 80020d2:	f001 fbe0 	bl	8003896 <eeprom_read_nbytes>
	eeprom_read_nbytes(M_7MXAMP2B, sizeof(motor.imax[6]), &motor.imax[6]);
 80020d6:	4a26      	ldr	r2, [pc, #152]	@ (8002170 <motor_read_stats+0x12c>)
 80020d8:	2102      	movs	r1, #2
 80020da:	202c      	movs	r0, #44	@ 0x2c
 80020dc:	f001 fbdb 	bl	8003896 <eeprom_read_nbytes>
	eeprom_read_nbytes(M_8MXAMP2B, sizeof(motor.imax[7]), &motor.imax[7]);
 80020e0:	4a24      	ldr	r2, [pc, #144]	@ (8002174 <motor_read_stats+0x130>)
 80020e2:	2102      	movs	r1, #2
 80020e4:	202e      	movs	r0, #46	@ 0x2e
 80020e6:	f001 fbd6 	bl	8003896 <eeprom_read_nbytes>
	// print stats
	printf("\r\n\r\n|        STEPPER MOTOR STATS          |\r\n");
 80020ea:	4823      	ldr	r0, [pc, #140]	@ (8002178 <motor_read_stats+0x134>)
 80020ec:	f007 f956 	bl	800939c <puts>
	printf("|=====================================|\r\n");
 80020f0:	4822      	ldr	r0, [pc, #136]	@ (800217c <motor_read_stats+0x138>)
 80020f2:	f007 f953 	bl	800939c <puts>
	for(uint8_t i = 0; i < 8; i++){
 80020f6:	2300      	movs	r3, #0
 80020f8:	71fb      	strb	r3, [r7, #7]
 80020fa:	e013      	b.n	8002124 <motor_read_stats+0xe0>
		printf("| [M%i] IMAX= %03i mA, USE_COUNT= %05i |\r\n", i+1 ,(int)motor.imax[i], (int)motor.count[i]);
 80020fc:	79fb      	ldrb	r3, [r7, #7]
 80020fe:	1c59      	adds	r1, r3, #1
 8002100:	79fb      	ldrb	r3, [r7, #7]
 8002102:	4a1f      	ldr	r2, [pc, #124]	@ (8002180 <motor_read_stats+0x13c>)
 8002104:	3304      	adds	r3, #4
 8002106:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800210a:	4618      	mov	r0, r3
 800210c:	79fb      	ldrb	r3, [r7, #7]
 800210e:	4a1c      	ldr	r2, [pc, #112]	@ (8002180 <motor_read_stats+0x13c>)
 8002110:	330c      	adds	r3, #12
 8002112:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002116:	4602      	mov	r2, r0
 8002118:	481a      	ldr	r0, [pc, #104]	@ (8002184 <motor_read_stats+0x140>)
 800211a:	f007 f8d7 	bl	80092cc <iprintf>
	for(uint8_t i = 0; i < 8; i++){
 800211e:	79fb      	ldrb	r3, [r7, #7]
 8002120:	3301      	adds	r3, #1
 8002122:	71fb      	strb	r3, [r7, #7]
 8002124:	79fb      	ldrb	r3, [r7, #7]
 8002126:	2b07      	cmp	r3, #7
 8002128:	d9e8      	bls.n	80020fc <motor_read_stats+0xb8>
	}
	printf("|=====================================|\r\n");
 800212a:	4814      	ldr	r0, [pc, #80]	@ (800217c <motor_read_stats+0x138>)
 800212c:	f007 f936 	bl	800939c <puts>
}
 8002130:	bf00      	nop
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	20000028 	.word	0x20000028
 800213c:	2000002a 	.word	0x2000002a
 8002140:	2000002c 	.word	0x2000002c
 8002144:	2000002e 	.word	0x2000002e
 8002148:	20000030 	.word	0x20000030
 800214c:	20000032 	.word	0x20000032
 8002150:	20000034 	.word	0x20000034
 8002154:	20000036 	.word	0x20000036
 8002158:	20000018 	.word	0x20000018
 800215c:	2000001a 	.word	0x2000001a
 8002160:	2000001c 	.word	0x2000001c
 8002164:	2000001e 	.word	0x2000001e
 8002168:	20000020 	.word	0x20000020
 800216c:	20000022 	.word	0x20000022
 8002170:	20000024 	.word	0x20000024
 8002174:	20000026 	.word	0x20000026
 8002178:	0800b534 	.word	0x0800b534
 800217c:	0800b564 	.word	0x0800b564
 8002180:	20000010 	.word	0x20000010
 8002184:	0800b590 	.word	0x0800b590

08002188 <motor_set_runtime>:



void motor_set_runtime(void){
 8002188:	b5b0      	push	{r4, r5, r7, lr}
 800218a:	b0aa      	sub	sp, #168	@ 0xa8
 800218c:	af02      	add	r7, sp, #8
	printf("\r\n>Current runtime: %i ms [default=%i]\r\n", motor.runTime, MOTOR_RUNTIME_DEFAULT);
 800218e:	4b44      	ldr	r3, [pc, #272]	@ (80022a0 <motor_set_runtime+0x118>)
 8002190:	881b      	ldrh	r3, [r3, #0]
 8002192:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8002196:	4619      	mov	r1, r3
 8002198:	4842      	ldr	r0, [pc, #264]	@ (80022a4 <motor_set_runtime+0x11c>)
 800219a:	f007 f897 	bl	80092cc <iprintf>
	char runtime[5];
	char runtimePrompt[100];
	sprintf(runtimePrompt, ">Enter motor runtime (5-digit number) in milliseconds [%05i-%05i]: ", MOTOR_RUNTIME_MIN, MOTOR_RUNTIME_MAX);
 800219e:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80021a2:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80021a6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80021aa:	493f      	ldr	r1, [pc, #252]	@ (80022a8 <motor_set_runtime+0x120>)
 80021ac:	f007 f9b2 	bl	8009514 <siprintf>
	char runtimeError[] = "\r\n** Enter only numbers! **\r\n";
 80021b0:	4b3e      	ldr	r3, [pc, #248]	@ (80022ac <motor_set_runtime+0x124>)
 80021b2:	f107 040c 	add.w	r4, r7, #12
 80021b6:	461d      	mov	r5, r3
 80021b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80021c0:	c407      	stmia	r4!, {r0, r1, r2}
 80021c2:	8023      	strh	r3, [r4, #0]
	char runtimeCheck[] = {'0','1','2','3','4','5','6','7','8','9'};
 80021c4:	4a3a      	ldr	r2, [pc, #232]	@ (80022b0 <motor_set_runtime+0x128>)
 80021c6:	463b      	mov	r3, r7
 80021c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80021ca:	c303      	stmia	r3!, {r0, r1}
 80021cc:	801a      	strh	r2, [r3, #0]
	uint8_t rtFlag;
	do{
		rtFlag = 0;
 80021ce:	2300      	movs	r3, #0
 80021d0:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
		get_user_input(runtimePrompt, runtimeError, 5, runtimeCheck, runtime);
 80021d4:	463a      	mov	r2, r7
 80021d6:	f107 010c 	add.w	r1, r7, #12
 80021da:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80021de:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	4613      	mov	r3, r2
 80021e6:	2205      	movs	r2, #5
 80021e8:	f000 fb74 	bl	80028d4 <get_user_input>
		uint32_t rt = ( (runtime[0] - '0') * 10000 + (runtime[1] - '0') * 1000 + (runtime[2] - '0') * 100 + (runtime[3] - '0') * 10 + (runtime[4] - '0') );
 80021ec:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 80021f0:	3b30      	subs	r3, #48	@ 0x30
 80021f2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80021f6:	fb03 f202 	mul.w	r2, r3, r2
 80021fa:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 80021fe:	3b30      	subs	r3, #48	@ 0x30
 8002200:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002204:	fb01 f303 	mul.w	r3, r1, r3
 8002208:	441a      	add	r2, r3
 800220a:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 800220e:	3b30      	subs	r3, #48	@ 0x30
 8002210:	2164      	movs	r1, #100	@ 0x64
 8002212:	fb01 f303 	mul.w	r3, r1, r3
 8002216:	18d1      	adds	r1, r2, r3
 8002218:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800221c:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8002220:	4613      	mov	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4413      	add	r3, r2
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	18ca      	adds	r2, r1, r3
 800222a:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 800222e:	3b30      	subs	r3, #48	@ 0x30
 8002230:	4413      	add	r3, r2
 8002232:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		if((rt >= MOTOR_RUNTIME_MIN) && (rt <= MOTOR_RUNTIME_MAX)){
 8002236:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800223a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800223e:	d30b      	bcc.n	8002258 <motor_set_runtime+0xd0>
 8002240:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002244:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8002248:	4293      	cmp	r3, r2
 800224a:	d805      	bhi.n	8002258 <motor_set_runtime+0xd0>
			motor.runTime = (uint16_t) rt;
 800224c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002250:	b29a      	uxth	r2, r3
 8002252:	4b13      	ldr	r3, [pc, #76]	@ (80022a0 <motor_set_runtime+0x118>)
 8002254:	801a      	strh	r2, [r3, #0]
 8002256:	e005      	b.n	8002264 <motor_set_runtime+0xdc>
		} else {
			printf("\r\n** Value out of range! **\r\n");
 8002258:	4816      	ldr	r0, [pc, #88]	@ (80022b4 <motor_set_runtime+0x12c>)
 800225a:	f007 f89f 	bl	800939c <puts>
			rtFlag = 1;
 800225e:	2301      	movs	r3, #1
 8002260:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
		}

	} while(rtFlag);
 8002264:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1b0      	bne.n	80021ce <motor_set_runtime+0x46>
	// Print all inputs
	printf(">Motor Runtime: %i ms\r\n", (int)motor.runTime);
 800226c:	4b0c      	ldr	r3, [pc, #48]	@ (80022a0 <motor_set_runtime+0x118>)
 800226e:	881b      	ldrh	r3, [r3, #0]
 8002270:	4619      	mov	r1, r3
 8002272:	4811      	ldr	r0, [pc, #68]	@ (80022b8 <motor_set_runtime+0x130>)
 8002274:	f007 f82a 	bl	80092cc <iprintf>
	// store in eeprom
	eeprom_write_nbytes(M_RUNTIME2B, sizeof(motor.runTime), &motor.runTime);
 8002278:	4a09      	ldr	r2, [pc, #36]	@ (80022a0 <motor_set_runtime+0x118>)
 800227a:	2102      	movs	r1, #2
 800227c:	2008      	movs	r0, #8
 800227e:	f001 fae1 	bl	8003844 <eeprom_write_nbytes>
	// test memory
	eeprom_read_nbytes(M_RUNTIME2B, sizeof(motor.runTime), &motor.runTime);
 8002282:	4a07      	ldr	r2, [pc, #28]	@ (80022a0 <motor_set_runtime+0x118>)
 8002284:	2102      	movs	r1, #2
 8002286:	2008      	movs	r0, #8
 8002288:	f001 fb05 	bl	8003896 <eeprom_read_nbytes>
	printf(">Setting saved! Runtime: %i\r\n\r\n", (int)motor.runTime);
 800228c:	4b04      	ldr	r3, [pc, #16]	@ (80022a0 <motor_set_runtime+0x118>)
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	4619      	mov	r1, r3
 8002292:	480a      	ldr	r0, [pc, #40]	@ (80022bc <motor_set_runtime+0x134>)
 8002294:	f007 f81a 	bl	80092cc <iprintf>
}
 8002298:	bf00      	nop
 800229a:	37a0      	adds	r7, #160	@ 0xa0
 800229c:	46bd      	mov	sp, r7
 800229e:	bdb0      	pop	{r4, r5, r7, pc}
 80022a0:	20000010 	.word	0x20000010
 80022a4:	0800b5bc 	.word	0x0800b5bc
 80022a8:	0800b5e8 	.word	0x0800b5e8
 80022ac:	0800b684 	.word	0x0800b684
 80022b0:	0800b3dc 	.word	0x0800b3dc
 80022b4:	0800b62c 	.word	0x0800b62c
 80022b8:	0800b64c 	.word	0x0800b64c
 80022bc:	0800b664 	.word	0x0800b664

080022c0 <motor_set_sampling_period>:


void motor_set_sampling_period(void){
 80022c0:	b5b0      	push	{r4, r5, r7, lr}
 80022c2:	b0aa      	sub	sp, #168	@ 0xa8
 80022c4:	af02      	add	r7, sp, #8
	printf("\r\n>Current ADC sampling period: %i ms [default=%i]\r\n", motor.samplePeriod, MOTOR_SAMPLE_PERIOD_DEFAULT);
 80022c6:	4b4d      	ldr	r3, [pc, #308]	@ (80023fc <motor_set_sampling_period+0x13c>)
 80022c8:	885b      	ldrh	r3, [r3, #2]
 80022ca:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80022ce:	4619      	mov	r1, r3
 80022d0:	484b      	ldr	r0, [pc, #300]	@ (8002400 <motor_set_sampling_period+0x140>)
 80022d2:	f006 fffb 	bl	80092cc <iprintf>
	char sPeriod[4];
	char sPeriodPrompt[100];
	sprintf(sPeriodPrompt, ">Enter ADC sampling time (4-digit number) in milliseconds [%04i-%04i]: ", MOTOR_SAMPLE_PERIOD_MIN, MOTOR_SAMPLE_PERIOD_MAX);
 80022d6:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80022da:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80022de:	2264      	movs	r2, #100	@ 0x64
 80022e0:	4948      	ldr	r1, [pc, #288]	@ (8002404 <motor_set_sampling_period+0x144>)
 80022e2:	f007 f917 	bl	8009514 <siprintf>
	char sPeriodError[] = "\r\n** Enter only numbers! **\r\n";
 80022e6:	4b48      	ldr	r3, [pc, #288]	@ (8002408 <motor_set_sampling_period+0x148>)
 80022e8:	f107 0410 	add.w	r4, r7, #16
 80022ec:	461d      	mov	r5, r3
 80022ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022f2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80022f6:	c407      	stmia	r4!, {r0, r1, r2}
 80022f8:	8023      	strh	r3, [r4, #0]
	char sPeriodCheck[] = {'0','1','2','3','4','5','6','7','8','9'};
 80022fa:	4a44      	ldr	r2, [pc, #272]	@ (800240c <motor_set_sampling_period+0x14c>)
 80022fc:	1d3b      	adds	r3, r7, #4
 80022fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8002300:	c303      	stmia	r3!, {r0, r1}
 8002302:	801a      	strh	r2, [r3, #0]
	uint8_t spFlag;
	do{
		spFlag = 0;
 8002304:	2300      	movs	r3, #0
 8002306:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
		get_user_input(sPeriodPrompt, sPeriodError, 4, sPeriodCheck, sPeriod);
 800230a:	1d3a      	adds	r2, r7, #4
 800230c:	f107 0110 	add.w	r1, r7, #16
 8002310:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8002314:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	4613      	mov	r3, r2
 800231c:	2204      	movs	r2, #4
 800231e:	f000 fad9 	bl	80028d4 <get_user_input>
		uint32_t sp = ( (sPeriod[0] - '0') * 1000 + (sPeriod[1] - '0') * 100 + (sPeriod[2] - '0') * 10 + (sPeriod[3] - '0') );
 8002322:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 8002326:	3b30      	subs	r3, #48	@ 0x30
 8002328:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800232c:	fb03 f202 	mul.w	r2, r3, r2
 8002330:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 8002334:	3b30      	subs	r3, #48	@ 0x30
 8002336:	2164      	movs	r1, #100	@ 0x64
 8002338:	fb01 f303 	mul.w	r3, r1, r3
 800233c:	18d1      	adds	r1, r2, r3
 800233e:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8002342:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8002346:	4613      	mov	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4413      	add	r3, r2
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	18ca      	adds	r2, r1, r3
 8002350:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8002354:	3b30      	subs	r3, #48	@ 0x30
 8002356:	4413      	add	r3, r2
 8002358:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		if(( sp >= MOTOR_SAMPLE_PERIOD_MIN) && (sp <= MOTOR_SAMPLE_PERIOD_MAX) && sp < motor.runTime){
 800235c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002360:	2b63      	cmp	r3, #99	@ 0x63
 8002362:	d911      	bls.n	8002388 <motor_set_sampling_period+0xc8>
 8002364:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002368:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800236c:	d80c      	bhi.n	8002388 <motor_set_sampling_period+0xc8>
 800236e:	4b23      	ldr	r3, [pc, #140]	@ (80023fc <motor_set_sampling_period+0x13c>)
 8002370:	881b      	ldrh	r3, [r3, #0]
 8002372:	461a      	mov	r2, r3
 8002374:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002378:	4293      	cmp	r3, r2
 800237a:	d205      	bcs.n	8002388 <motor_set_sampling_period+0xc8>
			motor.samplePeriod = (uint16_t) sp;
 800237c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002380:	b29a      	uxth	r2, r3
 8002382:	4b1e      	ldr	r3, [pc, #120]	@ (80023fc <motor_set_sampling_period+0x13c>)
 8002384:	805a      	strh	r2, [r3, #2]
 8002386:	e005      	b.n	8002394 <motor_set_sampling_period+0xd4>
		} else {
			printf("\r\n** Value out of range or greater than runtime! **\r\n");
 8002388:	4821      	ldr	r0, [pc, #132]	@ (8002410 <motor_set_sampling_period+0x150>)
 800238a:	f007 f807 	bl	800939c <puts>
			spFlag = 1;
 800238e:	2301      	movs	r3, #1
 8002390:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
		}
	} while(spFlag);
 8002394:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1b3      	bne.n	8002304 <motor_set_sampling_period+0x44>
	// Print all inputs
	printf(">Motor ADC Sample Period: %i ms\r\n", (int)motor.samplePeriod);
 800239c:	4b17      	ldr	r3, [pc, #92]	@ (80023fc <motor_set_sampling_period+0x13c>)
 800239e:	885b      	ldrh	r3, [r3, #2]
 80023a0:	4619      	mov	r1, r3
 80023a2:	481c      	ldr	r0, [pc, #112]	@ (8002414 <motor_set_sampling_period+0x154>)
 80023a4:	f006 ff92 	bl	80092cc <iprintf>
	// store in eeprom
	eeprom_write_nbytes(M_SAMPLEPERIOD2B, sizeof(motor.samplePeriod), &motor.samplePeriod);
 80023a8:	4a1b      	ldr	r2, [pc, #108]	@ (8002418 <motor_set_sampling_period+0x158>)
 80023aa:	2102      	movs	r1, #2
 80023ac:	200c      	movs	r0, #12
 80023ae:	f001 fa49 	bl	8003844 <eeprom_write_nbytes>
	// test memory
	eeprom_read_nbytes(M_SAMPLEPERIOD2B, sizeof(motor.samplePeriod), &motor.samplePeriod);
 80023b2:	4a19      	ldr	r2, [pc, #100]	@ (8002418 <motor_set_sampling_period+0x158>)
 80023b4:	2102      	movs	r1, #2
 80023b6:	200c      	movs	r0, #12
 80023b8:	f001 fa6d 	bl	8003896 <eeprom_read_nbytes>
	printf(">Setting saved! Sample Period: %i\r\n\r\n", (int)motor.samplePeriod);
 80023bc:	4b0f      	ldr	r3, [pc, #60]	@ (80023fc <motor_set_sampling_period+0x13c>)
 80023be:	885b      	ldrh	r3, [r3, #2]
 80023c0:	4619      	mov	r1, r3
 80023c2:	4816      	ldr	r0, [pc, #88]	@ (800241c <motor_set_sampling_period+0x15c>)
 80023c4:	f006 ff82 	bl	80092cc <iprintf>
	// verify value read is ok
	if( !(motor.samplePeriod >= MOTOR_SAMPLE_PERIOD_MIN && motor.samplePeriod <= MOTOR_SAMPLE_PERIOD_MAX)){
 80023c8:	4b0c      	ldr	r3, [pc, #48]	@ (80023fc <motor_set_sampling_period+0x13c>)
 80023ca:	885b      	ldrh	r3, [r3, #2]
 80023cc:	2b63      	cmp	r3, #99	@ 0x63
 80023ce:	d904      	bls.n	80023da <motor_set_sampling_period+0x11a>
 80023d0:	4b0a      	ldr	r3, [pc, #40]	@ (80023fc <motor_set_sampling_period+0x13c>)
 80023d2:	885b      	ldrh	r3, [r3, #2]
 80023d4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80023d8:	d903      	bls.n	80023e2 <motor_set_sampling_period+0x122>
		motor.samplePeriod = MOTOR_SAMPLE_PERIOD_DEFAULT;
 80023da:	4b08      	ldr	r3, [pc, #32]	@ (80023fc <motor_set_sampling_period+0x13c>)
 80023dc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80023e0:	805a      	strh	r2, [r3, #2]
	}
	// update timer PWM registers
	update_timer(&htim4, motor.samplePeriod, 4, 0.5);
 80023e2:	4b06      	ldr	r3, [pc, #24]	@ (80023fc <motor_set_sampling_period+0x13c>)
 80023e4:	885b      	ldrh	r3, [r3, #2]
 80023e6:	4619      	mov	r1, r3
 80023e8:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 80023ec:	2204      	movs	r2, #4
 80023ee:	480c      	ldr	r0, [pc, #48]	@ (8002420 <motor_set_sampling_period+0x160>)
 80023f0:	f000 f8de 	bl	80025b0 <update_timer>
	// update timer registers with new adc period (timer 4, channel 4 pwm). See TIM_TypeDef definition
	// Prescaler is 8000, so  TIMER CLK = 8 MHz/8000 -> PWM f = 1 kHz -> 1 cycle/1 ms -> 1 rising edge / 1 ms
//	TIM4->ARR = (uint32_t) motor.samplePeriod-1; // ARR Auto Reload Register, counter Period: 500-1 (500 ms)
//	TIM4->CCR4 = (uint32_t) ((motor.samplePeriod)/2) - 1; // CCR4 Capture Compare Register, channel 4 Pulse: 250-1 (PWM mode 1 -> 0-250 off, 250-499 on) 50% Duty cycle
}
 80023f4:	bf00      	nop
 80023f6:	37a0      	adds	r7, #160	@ 0xa0
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bdb0      	pop	{r4, r5, r7, pc}
 80023fc:	20000010 	.word	0x20000010
 8002400:	0800b6a4 	.word	0x0800b6a4
 8002404:	0800b6dc 	.word	0x0800b6dc
 8002408:	0800b684 	.word	0x0800b684
 800240c:	0800b3dc 	.word	0x0800b3dc
 8002410:	0800b724 	.word	0x0800b724
 8002414:	0800b75c 	.word	0x0800b75c
 8002418:	20000012 	.word	0x20000012
 800241c:	0800b780 	.word	0x0800b780
 8002420:	200001dc 	.word	0x200001dc
 8002424:	00000000 	.word	0x00000000

08002428 <motor_set_pwm_freq>:


void motor_set_pwm_freq(void){
 8002428:	b5b0      	push	{r4, r5, r7, lr}
 800242a:	b0aa      	sub	sp, #168	@ 0xa8
 800242c:	af02      	add	r7, sp, #8
	printf("\r\n>Current PWM frequency: %i Hz [default=%i]\r\n", motor.pwmFreq, MOTOR_PWM_FREQ_DEFAULT);
 800242e:	4b56      	ldr	r3, [pc, #344]	@ (8002588 <motor_set_pwm_freq+0x160>)
 8002430:	889b      	ldrh	r3, [r3, #4]
 8002432:	22c8      	movs	r2, #200	@ 0xc8
 8002434:	4619      	mov	r1, r3
 8002436:	4855      	ldr	r0, [pc, #340]	@ (800258c <motor_set_pwm_freq+0x164>)
 8002438:	f006 ff48 	bl	80092cc <iprintf>
	char pwmf[4];
	char pwmfPrompt[100];
	sprintf(pwmfPrompt, ">Enter PWM frequency (4-digit number) in Hz [%04i-%04i]: ", MOTOR_PWM_FREQ_MIN, MOTOR_PWM_FREQ_MAX);
 800243c:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8002440:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002444:	2232      	movs	r2, #50	@ 0x32
 8002446:	4952      	ldr	r1, [pc, #328]	@ (8002590 <motor_set_pwm_freq+0x168>)
 8002448:	f007 f864 	bl	8009514 <siprintf>
	char pwmfError[] = "\r\n** Enter only numbers! **\r\n";
 800244c:	4b51      	ldr	r3, [pc, #324]	@ (8002594 <motor_set_pwm_freq+0x16c>)
 800244e:	f107 040c 	add.w	r4, r7, #12
 8002452:	461d      	mov	r5, r3
 8002454:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002456:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002458:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800245c:	c407      	stmia	r4!, {r0, r1, r2}
 800245e:	8023      	strh	r3, [r4, #0]
	char pwmfCheck[] = {'0','1','2','3','4','5','6','7','8','9'};
 8002460:	4a4d      	ldr	r2, [pc, #308]	@ (8002598 <motor_set_pwm_freq+0x170>)
 8002462:	463b      	mov	r3, r7
 8002464:	ca07      	ldmia	r2, {r0, r1, r2}
 8002466:	c303      	stmia	r3!, {r0, r1}
 8002468:	801a      	strh	r2, [r3, #0]
	uint8_t pwmfFlag;
	do{
		pwmfFlag = 0;
 800246a:	2300      	movs	r3, #0
 800246c:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
		get_user_input(pwmfPrompt, pwmfError, 4, pwmfCheck, pwmf);
 8002470:	463a      	mov	r2, r7
 8002472:	f107 010c 	add.w	r1, r7, #12
 8002476:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 800247a:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	4613      	mov	r3, r2
 8002482:	2204      	movs	r2, #4
 8002484:	f000 fa26 	bl	80028d4 <get_user_input>
		uint32_t f = ( (pwmf[0] - '0') * 1000 + (pwmf[1] - '0') * 100 + (pwmf[2] - '0') * 10 + (pwmf[3] - '0') );
 8002488:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800248c:	3b30      	subs	r3, #48	@ 0x30
 800248e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002492:	fb03 f202 	mul.w	r2, r3, r2
 8002496:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 800249a:	3b30      	subs	r3, #48	@ 0x30
 800249c:	2164      	movs	r1, #100	@ 0x64
 800249e:	fb01 f303 	mul.w	r3, r1, r3
 80024a2:	18d1      	adds	r1, r2, r3
 80024a4:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 80024a8:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80024ac:	4613      	mov	r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	18ca      	adds	r2, r1, r3
 80024b6:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 80024ba:	3b30      	subs	r3, #48	@ 0x30
 80024bc:	4413      	add	r3, r2
 80024be:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		if(( f >= MOTOR_PWM_FREQ_MIN) && (f <= MOTOR_PWM_FREQ_MAX)){
 80024c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80024c6:	2b31      	cmp	r3, #49	@ 0x31
 80024c8:	d90a      	bls.n	80024e0 <motor_set_pwm_freq+0xb8>
 80024ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80024ce:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80024d2:	d805      	bhi.n	80024e0 <motor_set_pwm_freq+0xb8>
			motor.pwmFreq = (uint16_t) f;
 80024d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80024d8:	b29a      	uxth	r2, r3
 80024da:	4b2b      	ldr	r3, [pc, #172]	@ (8002588 <motor_set_pwm_freq+0x160>)
 80024dc:	809a      	strh	r2, [r3, #4]
 80024de:	e005      	b.n	80024ec <motor_set_pwm_freq+0xc4>
		} else {
			printf("\r\n** Value out of range! **\r\n");
 80024e0:	482e      	ldr	r0, [pc, #184]	@ (800259c <motor_set_pwm_freq+0x174>)
 80024e2:	f006 ff5b 	bl	800939c <puts>
			pwmfFlag = 1;
 80024e6:	2301      	movs	r3, #1
 80024e8:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
		}
	} while(pwmfFlag);
 80024ec:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1ba      	bne.n	800246a <motor_set_pwm_freq+0x42>
	// Print all inputs
	printf(">Motor PWM frequency: %i Hz\r\n", (int)motor.pwmFreq);
 80024f4:	4b24      	ldr	r3, [pc, #144]	@ (8002588 <motor_set_pwm_freq+0x160>)
 80024f6:	889b      	ldrh	r3, [r3, #4]
 80024f8:	4619      	mov	r1, r3
 80024fa:	4829      	ldr	r0, [pc, #164]	@ (80025a0 <motor_set_pwm_freq+0x178>)
 80024fc:	f006 fee6 	bl	80092cc <iprintf>
	// store in eeprom
	eeprom_write_nbytes(M_PWM_FREQ2B, sizeof(motor.pwmFreq), &motor.pwmFreq);
 8002500:	4a28      	ldr	r2, [pc, #160]	@ (80025a4 <motor_set_pwm_freq+0x17c>)
 8002502:	2102      	movs	r1, #2
 8002504:	200a      	movs	r0, #10
 8002506:	f001 f99d 	bl	8003844 <eeprom_write_nbytes>
	// test memory
	eeprom_read_nbytes(M_PWM_FREQ2B, sizeof(motor.pwmFreq), &motor.pwmFreq);
 800250a:	4a26      	ldr	r2, [pc, #152]	@ (80025a4 <motor_set_pwm_freq+0x17c>)
 800250c:	2102      	movs	r1, #2
 800250e:	200a      	movs	r0, #10
 8002510:	f001 f9c1 	bl	8003896 <eeprom_read_nbytes>
	printf(">Setting saved! PWM Freq: %i\r\n\r\n", (int)motor.pwmFreq);
 8002514:	4b1c      	ldr	r3, [pc, #112]	@ (8002588 <motor_set_pwm_freq+0x160>)
 8002516:	889b      	ldrh	r3, [r3, #4]
 8002518:	4619      	mov	r1, r3
 800251a:	4823      	ldr	r0, [pc, #140]	@ (80025a8 <motor_set_pwm_freq+0x180>)
 800251c:	f006 fed6 	bl	80092cc <iprintf>
	// verify value read is ok
	if( !(motor.pwmFreq >= MOTOR_PWM_FREQ_MIN && motor.pwmFreq <= MOTOR_PWM_FREQ_MAX)){
 8002520:	4b19      	ldr	r3, [pc, #100]	@ (8002588 <motor_set_pwm_freq+0x160>)
 8002522:	889b      	ldrh	r3, [r3, #4]
 8002524:	2b31      	cmp	r3, #49	@ 0x31
 8002526:	d904      	bls.n	8002532 <motor_set_pwm_freq+0x10a>
 8002528:	4b17      	ldr	r3, [pc, #92]	@ (8002588 <motor_set_pwm_freq+0x160>)
 800252a:	889b      	ldrh	r3, [r3, #4]
 800252c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002530:	d902      	bls.n	8002538 <motor_set_pwm_freq+0x110>
		motor.pwmFreq = MOTOR_PWM_FREQ_DEFAULT;
 8002532:	4b15      	ldr	r3, [pc, #84]	@ (8002588 <motor_set_pwm_freq+0x160>)
 8002534:	22c8      	movs	r2, #200	@ 0xc8
 8002536:	809a      	strh	r2, [r3, #4]
	}
	// get period from frequency
	uint32_t pwmPeriod = 1E6/motor.pwmFreq; // PWM period in us -> 1E6/200 Hz = 5000 us
 8002538:	4b13      	ldr	r3, [pc, #76]	@ (8002588 <motor_set_pwm_freq+0x160>)
 800253a:	889b      	ldrh	r3, [r3, #4]
 800253c:	4618      	mov	r0, r3
 800253e:	f7fe f80d 	bl	800055c <__aeabi_i2d>
 8002542:	4602      	mov	r2, r0
 8002544:	460b      	mov	r3, r1
 8002546:	a10e      	add	r1, pc, #56	@ (adr r1, 8002580 <motor_set_pwm_freq+0x158>)
 8002548:	e9d1 0100 	ldrd	r0, r1, [r1]
 800254c:	f7fe f99a 	bl	8000884 <__aeabi_ddiv>
 8002550:	4602      	mov	r2, r0
 8002552:	460b      	mov	r3, r1
 8002554:	4610      	mov	r0, r2
 8002556:	4619      	mov	r1, r3
 8002558:	f7fe fa7c 	bl	8000a54 <__aeabi_d2uiz>
 800255c:	4603      	mov	r3, r0
 800255e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	// update timer PWM registers
	update_timer(&htim3, pwmPeriod, 3, 0.5);
 8002562:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8002566:	2203      	movs	r2, #3
 8002568:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 800256c:	480f      	ldr	r0, [pc, #60]	@ (80025ac <motor_set_pwm_freq+0x184>)
 800256e:	f000 f81f 	bl	80025b0 <update_timer>
	// update timer registers with new motor step PWM period (timer 3, channel 3 pwm output). See TIM_TypeDef definition
	// Prescaler is 8, so  TIMER CLK = 8 MHz/8-> PWM f = 1 MHz  -> 1 cycle/1 us -> 1 rising edge / 1 us
//	TIM3->ARR = (uint32_t) pwmPeriod-1; // ARR Auto Reload Register, counter Period: 5000-1 (5 ms)
//	TIM3->CCR3 = (uint32_t) (pwmPeriod/2) - 1; // CCR3 Capture Compare Register, channel 3 Pulse: 2500-1 (PWM mode 1 -> 0-2500 off, 2500-4999 on) 50% Duty cycle
}
 8002572:	bf00      	nop
 8002574:	37a0      	adds	r7, #160	@ 0xa0
 8002576:	46bd      	mov	sp, r7
 8002578:	bdb0      	pop	{r4, r5, r7, pc}
 800257a:	bf00      	nop
 800257c:	f3af 8000 	nop.w
 8002580:	00000000 	.word	0x00000000
 8002584:	412e8480 	.word	0x412e8480
 8002588:	20000010 	.word	0x20000010
 800258c:	0800b7a8 	.word	0x0800b7a8
 8002590:	0800b7d8 	.word	0x0800b7d8
 8002594:	0800b684 	.word	0x0800b684
 8002598:	0800b3dc 	.word	0x0800b3dc
 800259c:	0800b62c 	.word	0x0800b62c
 80025a0:	0800b814 	.word	0x0800b814
 80025a4:	20000014 	.word	0x20000014
 80025a8:	0800b834 	.word	0x0800b834
 80025ac:	20000194 	.word	0x20000194

080025b0 <update_timer>:

void update_timer(TIM_HandleTypeDef * htim, uint32_t period, uint8_t channel ,float dutyCycle){
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	603b      	str	r3, [r7, #0]
 80025bc:	4613      	mov	r3, r2
 80025be:	71fb      	strb	r3, [r7, #7]
	// update timer registers with period and duty cycle See TIM_TypeDef definition
	// Example: Prescaler is 8, so  TIMER CLK = 8 MHz/8-> PWM f = 1 MHz  -> 1 cycle/1 us -> 1 rising edge / 1 us
	// ARR Auto Reload Register, counter Period: 5000-1 (5 ms)
	// CCR3 Capture Compare Register, channel 3 Pulse: 2500-1 (PWM mode 1 -> 0-2500 off, 2500-4999 on) 50% Duty cycle
	uint32_t pulse = (uint32_t) ((float)period * dutyCycle);
 80025c0:	68b8      	ldr	r0, [r7, #8]
 80025c2:	f7fe fb6d 	bl	8000ca0 <__aeabi_ui2f>
 80025c6:	4603      	mov	r3, r0
 80025c8:	6839      	ldr	r1, [r7, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7fd fdc0 	bl	8000150 <__aeabi_fmul>
 80025d0:	4603      	mov	r3, r0
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fe fbe2 	bl	8000d9c <__aeabi_f2uiz>
 80025d8:	4603      	mov	r3, r0
 80025da:	617b      	str	r3, [r7, #20]
	htim->Instance->ARR = (uint32_t) (period - 1);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68ba      	ldr	r2, [r7, #8]
 80025e2:	3a01      	subs	r2, #1
 80025e4:	62da      	str	r2, [r3, #44]	@ 0x2c

	switch (channel){
 80025e6:	79fb      	ldrb	r3, [r7, #7]
 80025e8:	3b01      	subs	r3, #1
 80025ea:	2b03      	cmp	r3, #3
 80025ec:	d822      	bhi.n	8002634 <update_timer+0x84>
 80025ee:	a201      	add	r2, pc, #4	@ (adr r2, 80025f4 <update_timer+0x44>)
 80025f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f4:	08002605 	.word	0x08002605
 80025f8:	08002611 	.word	0x08002611
 80025fc:	0800261d 	.word	0x0800261d
 8002600:	08002629 	.word	0x08002629
	case 1:
		htim->Instance->CCR1 = pulse - 1;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	697a      	ldr	r2, [r7, #20]
 800260a:	3a01      	subs	r2, #1
 800260c:	635a      	str	r2, [r3, #52]	@ 0x34
		break;
 800260e:	e012      	b.n	8002636 <update_timer+0x86>
	case 2:
		htim->Instance->CCR2 = pulse - 1;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	3a01      	subs	r2, #1
 8002618:	639a      	str	r2, [r3, #56]	@ 0x38
		break;
 800261a:	e00c      	b.n	8002636 <update_timer+0x86>
	case 3:
		htim->Instance->CCR3 = pulse - 1;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	697a      	ldr	r2, [r7, #20]
 8002622:	3a01      	subs	r2, #1
 8002624:	63da      	str	r2, [r3, #60]	@ 0x3c
		break;
 8002626:	e006      	b.n	8002636 <update_timer+0x86>
	case 4:
		htim->Instance->CCR4 = pulse - 1;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	3a01      	subs	r2, #1
 8002630:	641a      	str	r2, [r3, #64]	@ 0x40
		break;
 8002632:	e000      	b.n	8002636 <update_timer+0x86>
	default:
		break;
 8002634:	bf00      	nop
	}
}
 8002636:	bf00      	nop
 8002638:	3718      	adds	r7, #24
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop

08002640 <motor_set_wiring>:



void motor_set_wiring(void){
 8002640:	b5b0      	push	{r4, r5, r7, lr}
 8002642:	b09c      	sub	sp, #112	@ 0x70
 8002644:	af02      	add	r7, sp, #8
	printf("\r\n>Current motor wiring: %i [default=%i]\r\n", motor.wiring, MOTOR_WIRING_DEFAULT);
 8002646:	4b31      	ldr	r3, [pc, #196]	@ (800270c <motor_set_wiring+0xcc>)
 8002648:	799b      	ldrb	r3, [r3, #6]
 800264a:	2200      	movs	r2, #0
 800264c:	4619      	mov	r1, r3
 800264e:	4830      	ldr	r0, [pc, #192]	@ (8002710 <motor_set_wiring+0xd0>)
 8002650:	f006 fe3c 	bl	80092cc <iprintf>
	char mw[1];
	char mwPrompt[] = ">Enter motor wiring code (1-digit number) [0-1]: ";
 8002654:	4b2f      	ldr	r3, [pc, #188]	@ (8002714 <motor_set_wiring+0xd4>)
 8002656:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800265a:	461d      	mov	r5, r3
 800265c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800265e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002660:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002662:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002664:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002666:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002668:	682b      	ldr	r3, [r5, #0]
 800266a:	8023      	strh	r3, [r4, #0]
	char mwError[] = "\r\n** Enter only numbers! **\r\n";
 800266c:	4b2a      	ldr	r3, [pc, #168]	@ (8002718 <motor_set_wiring+0xd8>)
 800266e:	f107 0408 	add.w	r4, r7, #8
 8002672:	461d      	mov	r5, r3
 8002674:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002676:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002678:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800267c:	c407      	stmia	r4!, {r0, r1, r2}
 800267e:	8023      	strh	r3, [r4, #0]
	char mwCheck[] = {'0','1'};
 8002680:	f243 1330 	movw	r3, #12592	@ 0x3130
 8002684:	80bb      	strh	r3, [r7, #4]
	uint8_t mwFlag;
	do{
		mwFlag = 0;
 8002686:	2300      	movs	r3, #0
 8002688:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		get_user_input(mwPrompt, mwError, 1, mwCheck, mw);
 800268c:	1d3a      	adds	r2, r7, #4
 800268e:	f107 0108 	add.w	r1, r7, #8
 8002692:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8002696:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800269a:	9300      	str	r3, [sp, #0]
 800269c:	4613      	mov	r3, r2
 800269e:	2201      	movs	r2, #1
 80026a0:	f000 f918 	bl	80028d4 <get_user_input>
		uint32_t w = (mw[0] - '0');
 80026a4:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 80026a8:	3b30      	subs	r3, #48	@ 0x30
 80026aa:	663b      	str	r3, [r7, #96]	@ 0x60
		if( w == 1 || w == 0){
 80026ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d002      	beq.n	80026b8 <motor_set_wiring+0x78>
 80026b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d104      	bne.n	80026c2 <motor_set_wiring+0x82>
			motor.wiring = (uint8_t) w;
 80026b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	4b13      	ldr	r3, [pc, #76]	@ (800270c <motor_set_wiring+0xcc>)
 80026be:	719a      	strb	r2, [r3, #6]
 80026c0:	e005      	b.n	80026ce <motor_set_wiring+0x8e>
		} else {
			printf("\r\n** Value out of range! **\r\n");
 80026c2:	4816      	ldr	r0, [pc, #88]	@ (800271c <motor_set_wiring+0xdc>)
 80026c4:	f006 fe6a 	bl	800939c <puts>
			mwFlag = 1;
 80026c8:	2301      	movs	r3, #1
 80026ca:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}
	} while(mwFlag);
 80026ce:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1d7      	bne.n	8002686 <motor_set_wiring+0x46>
	// Print all inputs
	printf(">Motor wiring code: %i\r\n", (int)motor.wiring);
 80026d6:	4b0d      	ldr	r3, [pc, #52]	@ (800270c <motor_set_wiring+0xcc>)
 80026d8:	799b      	ldrb	r3, [r3, #6]
 80026da:	4619      	mov	r1, r3
 80026dc:	4810      	ldr	r0, [pc, #64]	@ (8002720 <motor_set_wiring+0xe0>)
 80026de:	f006 fdf5 	bl	80092cc <iprintf>
	// store in eeprom
	eeprom_write_nbytes(M_WIRING1B, sizeof(motor.wiring), &motor.wiring);
 80026e2:	4a10      	ldr	r2, [pc, #64]	@ (8002724 <motor_set_wiring+0xe4>)
 80026e4:	2101      	movs	r1, #1
 80026e6:	200e      	movs	r0, #14
 80026e8:	f001 f8ac 	bl	8003844 <eeprom_write_nbytes>
	// test memory
	eeprom_read_nbytes(M_WIRING1B, sizeof(motor.wiring), &motor.wiring);
 80026ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002724 <motor_set_wiring+0xe4>)
 80026ee:	2101      	movs	r1, #1
 80026f0:	200e      	movs	r0, #14
 80026f2:	f001 f8d0 	bl	8003896 <eeprom_read_nbytes>
	printf(">Setting saved! Motor wiring: %i\r\n\r\n", (int)motor.wiring);
 80026f6:	4b05      	ldr	r3, [pc, #20]	@ (800270c <motor_set_wiring+0xcc>)
 80026f8:	799b      	ldrb	r3, [r3, #6]
 80026fa:	4619      	mov	r1, r3
 80026fc:	480a      	ldr	r0, [pc, #40]	@ (8002728 <motor_set_wiring+0xe8>)
 80026fe:	f006 fde5 	bl	80092cc <iprintf>
}
 8002702:	bf00      	nop
 8002704:	3768      	adds	r7, #104	@ 0x68
 8002706:	46bd      	mov	sp, r7
 8002708:	bdb0      	pop	{r4, r5, r7, pc}
 800270a:	bf00      	nop
 800270c:	20000010 	.word	0x20000010
 8002710:	0800b858 	.word	0x0800b858
 8002714:	0800b8c8 	.word	0x0800b8c8
 8002718:	0800b684 	.word	0x0800b684
 800271c:	0800b62c 	.word	0x0800b62c
 8002720:	0800b884 	.word	0x0800b884
 8002724:	20000016 	.word	0x20000016
 8002728:	0800b8a0 	.word	0x0800b8a0

0800272c <motor_reset_stats>:


void motor_reset_stats(void){
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
	uint8_t slots = eeprom_clear(M_1COUNT2B, M_8MXAMP2B+2);
 8002732:	2130      	movs	r1, #48	@ 0x30
 8002734:	2010      	movs	r0, #16
 8002736:	f000 ff8f 	bl	8003658 <eeprom_clear>
 800273a:	4603      	mov	r3, r0
 800273c:	71fb      	strb	r3, [r7, #7]
	printf("\r\n>%i bytes cleared\r\n", slots);
 800273e:	79fb      	ldrb	r3, [r7, #7]
 8002740:	4619      	mov	r1, r3
 8002742:	4804      	ldr	r0, [pc, #16]	@ (8002754 <motor_reset_stats+0x28>)
 8002744:	f006 fdc2 	bl	80092cc <iprintf>
	motor_read_stats();
 8002748:	f7ff fc7c 	bl	8002044 <motor_read_stats>
}
 800274c:	bf00      	nop
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	0800b8fc 	.word	0x0800b8fc

08002758 <motor_read_parameters>:


void motor_read_parameters(void){
 8002758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800275a:	b093      	sub	sp, #76	@ 0x4c
 800275c:	af06      	add	r7, sp, #24
	// read motor parameters from eeprom
	motor_t tempMotor;
	eeprom_read_nbytes(M_RUNTIME2B, sizeof(tempMotor.runTime), &tempMotor.runTime);
 800275e:	463b      	mov	r3, r7
 8002760:	461a      	mov	r2, r3
 8002762:	2102      	movs	r1, #2
 8002764:	2008      	movs	r0, #8
 8002766:	f001 f896 	bl	8003896 <eeprom_read_nbytes>
	eeprom_read_nbytes(M_SAMPLEPERIOD2B, sizeof(tempMotor.samplePeriod), &tempMotor.samplePeriod);
 800276a:	463b      	mov	r3, r7
 800276c:	3302      	adds	r3, #2
 800276e:	461a      	mov	r2, r3
 8002770:	2102      	movs	r1, #2
 8002772:	200c      	movs	r0, #12
 8002774:	f001 f88f 	bl	8003896 <eeprom_read_nbytes>
	eeprom_read_nbytes(M_PWM_FREQ2B, sizeof(tempMotor.pwmFreq), &tempMotor.pwmFreq);
 8002778:	463b      	mov	r3, r7
 800277a:	3304      	adds	r3, #4
 800277c:	461a      	mov	r2, r3
 800277e:	2102      	movs	r1, #2
 8002780:	200a      	movs	r0, #10
 8002782:	f001 f888 	bl	8003896 <eeprom_read_nbytes>
	eeprom_read_nbytes(M_WIRING1B, sizeof(tempMotor.wiring), &tempMotor.wiring);
 8002786:	463b      	mov	r3, r7
 8002788:	3306      	adds	r3, #6
 800278a:	461a      	mov	r2, r3
 800278c:	2101      	movs	r1, #1
 800278e:	200e      	movs	r0, #14
 8002790:	f001 f881 	bl	8003896 <eeprom_read_nbytes>

	// check values are within range or use defaults {flag = 'N'}
	char rtFlag = 'D', spFlag = 'D', pfFlag = 'D', wFlag = 'D'; // using default values?
 8002794:	2344      	movs	r3, #68	@ 0x44
 8002796:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800279a:	2344      	movs	r3, #68	@ 0x44
 800279c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80027a0:	2344      	movs	r3, #68	@ 0x44
 80027a2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80027a6:	2344      	movs	r3, #68	@ 0x44
 80027a8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	if(tempMotor.runTime >= MOTOR_RUNTIME_MIN && tempMotor.runTime <= MOTOR_RUNTIME_MAX){
 80027ac:	883b      	ldrh	r3, [r7, #0]
 80027ae:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80027b2:	d30a      	bcc.n	80027ca <motor_read_parameters+0x72>
 80027b4:	883b      	ldrh	r3, [r7, #0]
 80027b6:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d805      	bhi.n	80027ca <motor_read_parameters+0x72>
		motor.runTime = tempMotor.runTime;
 80027be:	883a      	ldrh	r2, [r7, #0]
 80027c0:	4b3d      	ldr	r3, [pc, #244]	@ (80028b8 <motor_read_parameters+0x160>)
 80027c2:	801a      	strh	r2, [r3, #0]
		rtFlag = 'M';
 80027c4:	234d      	movs	r3, #77	@ 0x4d
 80027c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	}
	if(tempMotor.samplePeriod >= MOTOR_SAMPLE_PERIOD_MIN && tempMotor.samplePeriod <= MOTOR_SAMPLE_PERIOD_MAX && tempMotor.samplePeriod <= motor.runTime){
 80027ca:	887b      	ldrh	r3, [r7, #2]
 80027cc:	2b63      	cmp	r3, #99	@ 0x63
 80027ce:	d90e      	bls.n	80027ee <motor_read_parameters+0x96>
 80027d0:	887b      	ldrh	r3, [r7, #2]
 80027d2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80027d6:	d80a      	bhi.n	80027ee <motor_read_parameters+0x96>
 80027d8:	887a      	ldrh	r2, [r7, #2]
 80027da:	4b37      	ldr	r3, [pc, #220]	@ (80028b8 <motor_read_parameters+0x160>)
 80027dc:	881b      	ldrh	r3, [r3, #0]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d805      	bhi.n	80027ee <motor_read_parameters+0x96>
		motor.samplePeriod = tempMotor.samplePeriod;
 80027e2:	887a      	ldrh	r2, [r7, #2]
 80027e4:	4b34      	ldr	r3, [pc, #208]	@ (80028b8 <motor_read_parameters+0x160>)
 80027e6:	805a      	strh	r2, [r3, #2]
		spFlag = 'M';
 80027e8:	234d      	movs	r3, #77	@ 0x4d
 80027ea:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	}
	if(tempMotor.pwmFreq >= MOTOR_PWM_FREQ_MIN && tempMotor.pwmFreq <= MOTOR_PWM_FREQ_MAX){
 80027ee:	88bb      	ldrh	r3, [r7, #4]
 80027f0:	2b31      	cmp	r3, #49	@ 0x31
 80027f2:	d909      	bls.n	8002808 <motor_read_parameters+0xb0>
 80027f4:	88bb      	ldrh	r3, [r7, #4]
 80027f6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80027fa:	d805      	bhi.n	8002808 <motor_read_parameters+0xb0>
		motor.pwmFreq = tempMotor.pwmFreq;
 80027fc:	88ba      	ldrh	r2, [r7, #4]
 80027fe:	4b2e      	ldr	r3, [pc, #184]	@ (80028b8 <motor_read_parameters+0x160>)
 8002800:	809a      	strh	r2, [r3, #4]
		pfFlag = 'M';
 8002802:	234d      	movs	r3, #77	@ 0x4d
 8002804:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	}
	if(tempMotor.wiring == 0 || tempMotor.wiring == 1){
 8002808:	79bb      	ldrb	r3, [r7, #6]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d002      	beq.n	8002814 <motor_read_parameters+0xbc>
 800280e:	79bb      	ldrb	r3, [r7, #6]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d105      	bne.n	8002820 <motor_read_parameters+0xc8>
		motor.wiring = tempMotor.wiring;
 8002814:	79ba      	ldrb	r2, [r7, #6]
 8002816:	4b28      	ldr	r3, [pc, #160]	@ (80028b8 <motor_read_parameters+0x160>)
 8002818:	719a      	strb	r2, [r3, #6]
		wFlag = 'M';
 800281a:	234d      	movs	r3, #77	@ 0x4d
 800281c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	}
	// update timer registers
	uint32_t pwmPeriod = 1E6/motor.pwmFreq; // PWM period in us -> 1E6/200 Hz = 5000 us
 8002820:	4b25      	ldr	r3, [pc, #148]	@ (80028b8 <motor_read_parameters+0x160>)
 8002822:	889b      	ldrh	r3, [r3, #4]
 8002824:	4618      	mov	r0, r3
 8002826:	f7fd fe99 	bl	800055c <__aeabi_i2d>
 800282a:	4602      	mov	r2, r0
 800282c:	460b      	mov	r3, r1
 800282e:	a120      	add	r1, pc, #128	@ (adr r1, 80028b0 <motor_read_parameters+0x158>)
 8002830:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002834:	f7fe f826 	bl	8000884 <__aeabi_ddiv>
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	4610      	mov	r0, r2
 800283e:	4619      	mov	r1, r3
 8002840:	f7fe f908 	bl	8000a54 <__aeabi_d2uiz>
 8002844:	4603      	mov	r3, r0
 8002846:	62bb      	str	r3, [r7, #40]	@ 0x28
	update_timer(&htim3, pwmPeriod, 3, 0.5); // timer 3 motor PWM steps
 8002848:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 800284c:	2203      	movs	r2, #3
 800284e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002850:	481a      	ldr	r0, [pc, #104]	@ (80028bc <motor_read_parameters+0x164>)
 8002852:	f7ff fead 	bl	80025b0 <update_timer>
	update_timer(&htim4, motor.samplePeriod, 4, 0.5); // tiemr 4 ADC sampling period
 8002856:	4b18      	ldr	r3, [pc, #96]	@ (80028b8 <motor_read_parameters+0x160>)
 8002858:	885b      	ldrh	r3, [r3, #2]
 800285a:	4619      	mov	r1, r3
 800285c:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8002860:	2204      	movs	r2, #4
 8002862:	4817      	ldr	r0, [pc, #92]	@ (80028c0 <motor_read_parameters+0x168>)
 8002864:	f7ff fea4 	bl	80025b0 <update_timer>

	printf("\r\n>Non-Volatile Memory {M} OR Default {D}\r\n<MOTOR> Runtime: %i ms {%c} | PWM Frequency: %i Hz {%c} | Sample Period: %i ms {%c} | Wiring: %i {%c} \r\n",
			 (int)motor.runTime, rtFlag, (int)motor.pwmFreq, spFlag, (int)motor.samplePeriod, pfFlag,  (int)motor.wiring, wFlag);
 8002868:	4b13      	ldr	r3, [pc, #76]	@ (80028b8 <motor_read_parameters+0x160>)
 800286a:	881b      	ldrh	r3, [r3, #0]
	printf("\r\n>Non-Volatile Memory {M} OR Default {D}\r\n<MOTOR> Runtime: %i ms {%c} | PWM Frequency: %i Hz {%c} | Sample Period: %i ms {%c} | Wiring: %i {%c} \r\n",
 800286c:	461e      	mov	r6, r3
 800286e:	f897 002f 	ldrb.w	r0, [r7, #47]	@ 0x2f
			 (int)motor.runTime, rtFlag, (int)motor.pwmFreq, spFlag, (int)motor.samplePeriod, pfFlag,  (int)motor.wiring, wFlag);
 8002872:	4b11      	ldr	r3, [pc, #68]	@ (80028b8 <motor_read_parameters+0x160>)
 8002874:	889b      	ldrh	r3, [r3, #4]
	printf("\r\n>Non-Volatile Memory {M} OR Default {D}\r\n<MOTOR> Runtime: %i ms {%c} | PWM Frequency: %i Hz {%c} | Sample Period: %i ms {%c} | Wiring: %i {%c} \r\n",
 8002876:	469c      	mov	ip, r3
 8002878:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
			 (int)motor.runTime, rtFlag, (int)motor.pwmFreq, spFlag, (int)motor.samplePeriod, pfFlag,  (int)motor.wiring, wFlag);
 800287c:	4a0e      	ldr	r2, [pc, #56]	@ (80028b8 <motor_read_parameters+0x160>)
 800287e:	8852      	ldrh	r2, [r2, #2]
	printf("\r\n>Non-Volatile Memory {M} OR Default {D}\r\n<MOTOR> Runtime: %i ms {%c} | PWM Frequency: %i Hz {%c} | Sample Period: %i ms {%c} | Wiring: %i {%c} \r\n",
 8002880:	4614      	mov	r4, r2
 8002882:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
			 (int)motor.runTime, rtFlag, (int)motor.pwmFreq, spFlag, (int)motor.samplePeriod, pfFlag,  (int)motor.wiring, wFlag);
 8002886:	490c      	ldr	r1, [pc, #48]	@ (80028b8 <motor_read_parameters+0x160>)
 8002888:	7989      	ldrb	r1, [r1, #6]
	printf("\r\n>Non-Volatile Memory {M} OR Default {D}\r\n<MOTOR> Runtime: %i ms {%c} | PWM Frequency: %i Hz {%c} | Sample Period: %i ms {%c} | Wiring: %i {%c} \r\n",
 800288a:	460d      	mov	r5, r1
 800288c:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8002890:	9104      	str	r1, [sp, #16]
 8002892:	9503      	str	r5, [sp, #12]
 8002894:	9202      	str	r2, [sp, #8]
 8002896:	9401      	str	r4, [sp, #4]
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	4663      	mov	r3, ip
 800289c:	4602      	mov	r2, r0
 800289e:	4631      	mov	r1, r6
 80028a0:	4808      	ldr	r0, [pc, #32]	@ (80028c4 <motor_read_parameters+0x16c>)
 80028a2:	f006 fd13 	bl	80092cc <iprintf>
}
 80028a6:	bf00      	nop
 80028a8:	3734      	adds	r7, #52	@ 0x34
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028ae:	bf00      	nop
 80028b0:	00000000 	.word	0x00000000
 80028b4:	412e8480 	.word	0x412e8480
 80028b8:	20000010 	.word	0x20000010
 80028bc:	20000194 	.word	0x20000194
 80028c0:	200001dc 	.word	0x200001dc
 80028c4:	0800b914 	.word	0x0800b914

080028c8 <menu_help_print>:

void menu_help_print(void){
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0

}
 80028cc:	bf00      	nop
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr

080028d4 <get_user_input>:


/********************************************** AUXILIAR FUNCTIONS **********************************************/

void get_user_input(char promptMsg[], char errorMsg[], uint8_t count, char checkList[], char * output){
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	603b      	str	r3, [r7, #0]
 80028e0:	4613      	mov	r3, r2
 80028e2:	71fb      	strb	r3, [r7, #7]
	//const uint8_t checkListSize = 10;
	print_inline(promptMsg);
 80028e4:	68f8      	ldr	r0, [r7, #12]
 80028e6:	f000 f8d9 	bl	8002a9c <print_inline>
    for(uint8_t i = 0; i < count; i++){
 80028ea:	2300      	movs	r3, #0
 80028ec:	75fb      	strb	r3, [r7, #23]
 80028ee:	e03d      	b.n	800296c <get_user_input+0x98>
		while(1){
			HAL_Delay(1); // needed to debug, remove
 80028f0:	2001      	movs	r0, #1
 80028f2:	f001 fc35 	bl	8004160 <HAL_Delay>
			if(rxStatus == active){
 80028f6:	4b23      	ldr	r3, [pc, #140]	@ (8002984 <get_user_input+0xb0>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d1f8      	bne.n	80028f0 <get_user_input+0x1c>
				rxStatus = idle;
 80028fe:	4b21      	ldr	r3, [pc, #132]	@ (8002984 <get_user_input+0xb0>)
 8002900:	2200      	movs	r2, #0
 8002902:	701a      	strb	r2, [r3, #0]
				print_char(rxChar);
 8002904:	4b20      	ldr	r3, [pc, #128]	@ (8002988 <get_user_input+0xb4>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f000 f841 	bl	8002990 <print_char>
				uint8_t checkFlag = 0;
 800290e:	2300      	movs	r3, #0
 8002910:	75bb      	strb	r3, [r7, #22]
				// check that belongs to the checkList
				for(uint8_t j = 0; j < MAX_CHECKLIST_SIZE; j++){
 8002912:	2300      	movs	r3, #0
 8002914:	757b      	strb	r3, [r7, #21]
 8002916:	e013      	b.n	8002940 <get_user_input+0x6c>
					// if there is a match, set flag, store value and break
					if(rxChar == checkList[j]){
 8002918:	7d7b      	ldrb	r3, [r7, #21]
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	4413      	add	r3, r2
 800291e:	781a      	ldrb	r2, [r3, #0]
 8002920:	4b19      	ldr	r3, [pc, #100]	@ (8002988 <get_user_input+0xb4>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	429a      	cmp	r2, r3
 8002926:	d108      	bne.n	800293a <get_user_input+0x66>
						checkFlag = 1;
 8002928:	2301      	movs	r3, #1
 800292a:	75bb      	strb	r3, [r7, #22]
						output[i] = rxChar;// store the value
 800292c:	7dfb      	ldrb	r3, [r7, #23]
 800292e:	6a3a      	ldr	r2, [r7, #32]
 8002930:	4413      	add	r3, r2
 8002932:	4a15      	ldr	r2, [pc, #84]	@ (8002988 <get_user_input+0xb4>)
 8002934:	7812      	ldrb	r2, [r2, #0]
 8002936:	701a      	strb	r2, [r3, #0]
						break;
 8002938:	e005      	b.n	8002946 <get_user_input+0x72>
				for(uint8_t j = 0; j < MAX_CHECKLIST_SIZE; j++){
 800293a:	7d7b      	ldrb	r3, [r7, #21]
 800293c:	3301      	adds	r3, #1
 800293e:	757b      	strb	r3, [r7, #21]
 8002940:	7d7b      	ldrb	r3, [r7, #21]
 8002942:	2b09      	cmp	r3, #9
 8002944:	d9e8      	bls.n	8002918 <get_user_input+0x44>
					}
				} // if no match, flag is 0
				if(checkFlag == 0){
 8002946:	7dbb      	ldrb	r3, [r7, #22]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d107      	bne.n	800295c <get_user_input+0x88>
					printf(errorMsg);
 800294c:	68b8      	ldr	r0, [r7, #8]
 800294e:	f006 fcbd 	bl	80092cc <iprintf>
					print_inline(promptMsg);
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f000 f8a2 	bl	8002a9c <print_inline>
					i = 0; // reinitialize counter to start over
 8002958:	2300      	movs	r3, #0
 800295a:	75fb      	strb	r3, [r7, #23]
				}
				// break while loop if value is good
				if(checkFlag == 1) break;
 800295c:	7dbb      	ldrb	r3, [r7, #22]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d000      	beq.n	8002964 <get_user_input+0x90>
			HAL_Delay(1); // needed to debug, remove
 8002962:	e7c5      	b.n	80028f0 <get_user_input+0x1c>
				if(checkFlag == 1) break;
 8002964:	bf00      	nop
    for(uint8_t i = 0; i < count; i++){
 8002966:	7dfb      	ldrb	r3, [r7, #23]
 8002968:	3301      	adds	r3, #1
 800296a:	75fb      	strb	r3, [r7, #23]
 800296c:	7dfa      	ldrb	r2, [r7, #23]
 800296e:	79fb      	ldrb	r3, [r7, #7]
 8002970:	429a      	cmp	r2, r3
 8002972:	d3bd      	bcc.n	80028f0 <get_user_input+0x1c>
			}
		}
    }
    printf("\r\n");
 8002974:	4805      	ldr	r0, [pc, #20]	@ (800298c <get_user_input+0xb8>)
 8002976:	f006 fd11 	bl	800939c <puts>
}
 800297a:	bf00      	nop
 800297c:	3718      	adds	r7, #24
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	20000186 	.word	0x20000186
 8002988:	20000189 	.word	0x20000189
 800298c:	0800a9e8 	.word	0x0800a9e8

08002990 <print_char>:

/* Print a single character for echo in line */
void print_char(uint8_t ch){
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	4603      	mov	r3, r0
 8002998:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, 10);
 800299a:	1df9      	adds	r1, r7, #7
 800299c:	230a      	movs	r3, #10
 800299e:	2201      	movs	r2, #1
 80029a0:	4803      	ldr	r0, [pc, #12]	@ (80029b0 <print_char+0x20>)
 80029a2:	f005 fd1f 	bl	80083e4 <HAL_UART_Transmit>
}
 80029a6:	bf00      	nop
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	20000224 	.word	0x20000224

080029b4 <print_serial_number>:

/* Print serial number based on AL configuration saved */
void print_serial_number(void){
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
	//printf( "AL%c%s", launcher.type[0], launcher.serialNumber);
    if(launcher.configured == 'Y'){
 80029b8:	4b0e      	ldr	r3, [pc, #56]	@ (80029f4 <print_serial_number+0x40>)
 80029ba:	791b      	ldrb	r3, [r3, #4]
 80029bc:	2b59      	cmp	r3, #89	@ 0x59
 80029be:	d114      	bne.n	80029ea <print_serial_number+0x36>
    	if(launcher.tubeCount == '6'){
 80029c0:	4b0c      	ldr	r3, [pc, #48]	@ (80029f4 <print_serial_number+0x40>)
 80029c2:	785b      	ldrb	r3, [r3, #1]
 80029c4:	2b36      	cmp	r3, #54	@ 0x36
 80029c6:	d106      	bne.n	80029d6 <print_serial_number+0x22>
    		printf( "AL%i ", launcher.serialNumber);
 80029c8:	4b0a      	ldr	r3, [pc, #40]	@ (80029f4 <print_serial_number+0x40>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	4619      	mov	r1, r3
 80029ce:	480a      	ldr	r0, [pc, #40]	@ (80029f8 <print_serial_number+0x44>)
 80029d0:	f006 fc7c 	bl	80092cc <iprintf>
    		printf( "AL%c%i", launcher.type, launcher.serialNumber);
    	}
    } else {
    	printf( "AL000");
    }
}
 80029d4:	e00c      	b.n	80029f0 <print_serial_number+0x3c>
    		printf( "AL%c%i", launcher.type, launcher.serialNumber);
 80029d6:	4b07      	ldr	r3, [pc, #28]	@ (80029f4 <print_serial_number+0x40>)
 80029d8:	789b      	ldrb	r3, [r3, #2]
 80029da:	4619      	mov	r1, r3
 80029dc:	4b05      	ldr	r3, [pc, #20]	@ (80029f4 <print_serial_number+0x40>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	461a      	mov	r2, r3
 80029e2:	4806      	ldr	r0, [pc, #24]	@ (80029fc <print_serial_number+0x48>)
 80029e4:	f006 fc72 	bl	80092cc <iprintf>
}
 80029e8:	e002      	b.n	80029f0 <print_serial_number+0x3c>
    	printf( "AL000");
 80029ea:	4805      	ldr	r0, [pc, #20]	@ (8002a00 <print_serial_number+0x4c>)
 80029ec:	f006 fc6e 	bl	80092cc <iprintf>
}
 80029f0:	bf00      	nop
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	20000000 	.word	0x20000000
 80029f8:	0800b9a8 	.word	0x0800b9a8
 80029fc:	0800b9b0 	.word	0x0800b9b0
 8002a00:	0800b9b8 	.word	0x0800b9b8

08002a04 <get_decimal>:
	return isNum;
}

/* Returns the decimal digits of a float as an integer
 * Parameters: float number to retreive decimals, number of decimal digits */
uint8_t get_decimal(float value, uint8_t digits){
 8002a04:	b590      	push	{r4, r7, lr}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	70fb      	strb	r3, [r7, #3]
	uint8_t dec;
	uint32_t exp = 1;
 8002a10:	2301      	movs	r3, #1
 8002a12:	60fb      	str	r3, [r7, #12]

	for(uint8_t i = 0; i < digits ; i++){
 8002a14:	2300      	movs	r3, #0
 8002a16:	72fb      	strb	r3, [r7, #11]
 8002a18:	e008      	b.n	8002a2c <get_decimal+0x28>
		exp = exp * 10;
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < digits ; i++){
 8002a26:	7afb      	ldrb	r3, [r7, #11]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	72fb      	strb	r3, [r7, #11]
 8002a2c:	7afa      	ldrb	r2, [r7, #11]
 8002a2e:	78fb      	ldrb	r3, [r7, #3]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d3f2      	bcc.n	8002a1a <get_decimal+0x16>
	}
	dec = (value - (int)value) * exp;
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f7fe f98b 	bl	8000d50 <__aeabi_f2iz>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7fe f933 	bl	8000ca8 <__aeabi_i2f>
 8002a42:	4603      	mov	r3, r0
 8002a44:	4619      	mov	r1, r3
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f7fe f878 	bl	8000b3c <__aeabi_fsub>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	461c      	mov	r4, r3
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f7fe f925 	bl	8000ca0 <__aeabi_ui2f>
 8002a56:	4603      	mov	r3, r0
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4620      	mov	r0, r4
 8002a5c:	f7fd fb78 	bl	8000150 <__aeabi_fmul>
 8002a60:	4603      	mov	r3, r0
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7fe f99a 	bl	8000d9c <__aeabi_f2uiz>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	72bb      	strb	r3, [r7, #10]
	return dec;
 8002a6c:	7abb      	ldrb	r3, [r7, #10]
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3714      	adds	r7, #20
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd90      	pop	{r4, r7, pc}
	...

08002a78 <multiplexer_set>:

/* Select the source of RS232
 * Parameters: select {MUX_GPS, MUX_STM32} */
void multiplexer_set(mux_t select){
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(MUX_SELECT_GPIO_Port, MUX_SELECT_Pin, select); // SET = UART-tx / RESET = Din from GPS
 8002a82:	79fb      	ldrb	r3, [r7, #7]
 8002a84:	461a      	mov	r2, r3
 8002a86:	2104      	movs	r1, #4
 8002a88:	4803      	ldr	r0, [pc, #12]	@ (8002a98 <multiplexer_set+0x20>)
 8002a8a:	f002 fd7d 	bl	8005588 <HAL_GPIO_WritePin>
}
 8002a8e:	bf00      	nop
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	40010800 	.word	0x40010800

08002a9c <print_inline>:

/* Print line without a '\n' newline at the end
 * Use for data entry prompts or partial text inline */
void print_inline(char * text){
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
	char temp = ' ';
 8002aa4:	2320      	movs	r3, #32
 8002aa6:	73bb      	strb	r3, [r7, #14]
	for(uint8_t i = 0; i<=255 && temp!= '\0' ; i++){
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	73fb      	strb	r3, [r7, #15]
 8002aac:	e00e      	b.n	8002acc <print_inline+0x30>
		temp = text[i];
 8002aae:	7bfb      	ldrb	r3, [r7, #15]
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	73bb      	strb	r3, [r7, #14]
		HAL_UART_Transmit(&huart1, (uint8_t *) &temp, 1, 100);
 8002ab8:	f107 010e 	add.w	r1, r7, #14
 8002abc:	2364      	movs	r3, #100	@ 0x64
 8002abe:	2201      	movs	r2, #1
 8002ac0:	4806      	ldr	r0, [pc, #24]	@ (8002adc <print_inline+0x40>)
 8002ac2:	f005 fc8f 	bl	80083e4 <HAL_UART_Transmit>
	for(uint8_t i = 0; i<=255 && temp!= '\0' ; i++){
 8002ac6:	7bfb      	ldrb	r3, [r7, #15]
 8002ac8:	3301      	adds	r3, #1
 8002aca:	73fb      	strb	r3, [r7, #15]
 8002acc:	7bbb      	ldrb	r3, [r7, #14]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1ed      	bne.n	8002aae <print_inline+0x12>
	}
}
 8002ad2:	bf00      	nop
 8002ad4:	bf00      	nop
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	20000224 	.word	0x20000224

08002ae0 <parameter_init>:



/* Initialize autolauncher parameters */
void parameter_init(void){
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
	// get parameters from eeprom or assign default values
	eeprom_read_nbytes(AL_CONFIGED1B, sizeof(launcher.configured), &launcher.configured);
 8002ae4:	4a17      	ldr	r2, [pc, #92]	@ (8002b44 <parameter_init+0x64>)
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	2003      	movs	r0, #3
 8002aea:	f000 fed4 	bl	8003896 <eeprom_read_nbytes>

	if(launcher.configured == 'Y'){
 8002aee:	4b16      	ldr	r3, [pc, #88]	@ (8002b48 <parameter_init+0x68>)
 8002af0:	791b      	ldrb	r3, [r3, #4]
 8002af2:	2b59      	cmp	r3, #89	@ 0x59
 8002af4:	d11d      	bne.n	8002b32 <parameter_init+0x52>
		printf("\r\n** AL configuration found in memory **\r\n");
 8002af6:	4815      	ldr	r0, [pc, #84]	@ (8002b4c <parameter_init+0x6c>)
 8002af8:	f006 fc50 	bl	800939c <puts>
		eeprom_read_nbytes(AL_TUBECOUNT1B, sizeof(launcher.tubeCount), &launcher.tubeCount);
 8002afc:	4a14      	ldr	r2, [pc, #80]	@ (8002b50 <parameter_init+0x70>)
 8002afe:	2101      	movs	r1, #1
 8002b00:	2000      	movs	r0, #0
 8002b02:	f000 fec8 	bl	8003896 <eeprom_read_nbytes>
		eeprom_read_nbytes(AL_TYPE1B, sizeof(launcher.type), &launcher.type);
 8002b06:	4a13      	ldr	r2, [pc, #76]	@ (8002b54 <parameter_init+0x74>)
 8002b08:	2101      	movs	r1, #1
 8002b0a:	2001      	movs	r0, #1
 8002b0c:	f000 fec3 	bl	8003896 <eeprom_read_nbytes>
		eeprom_read_nbytes(AL_SN1B, sizeof(launcher.serialNumber), &launcher.serialNumber);
 8002b10:	4a0d      	ldr	r2, [pc, #52]	@ (8002b48 <parameter_init+0x68>)
 8002b12:	2101      	movs	r1, #1
 8002b14:	2002      	movs	r0, #2
 8002b16:	f000 febe 	bl	8003896 <eeprom_read_nbytes>

		printf("\r\n<AL> Tubes: %c | Type: %c | Serial: %03i <AL>\r\n", launcher.tubeCount, launcher.type, launcher.serialNumber);
 8002b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8002b48 <parameter_init+0x68>)
 8002b1c:	785b      	ldrb	r3, [r3, #1]
 8002b1e:	4619      	mov	r1, r3
 8002b20:	4b09      	ldr	r3, [pc, #36]	@ (8002b48 <parameter_init+0x68>)
 8002b22:	789b      	ldrb	r3, [r3, #2]
 8002b24:	461a      	mov	r2, r3
 8002b26:	4b08      	ldr	r3, [pc, #32]	@ (8002b48 <parameter_init+0x68>)
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	480b      	ldr	r0, [pc, #44]	@ (8002b58 <parameter_init+0x78>)
 8002b2c:	f006 fbce 	bl	80092cc <iprintf>
 8002b30:	e002      	b.n	8002b38 <parameter_init+0x58>
	} else {
		printf("\r\n** AL Configuration NOT found in memory **\r\n");
 8002b32:	480a      	ldr	r0, [pc, #40]	@ (8002b5c <parameter_init+0x7c>)
 8002b34:	f006 fc32 	bl	800939c <puts>
	}
	// read motor parameters from eeprom
	motor_read_parameters();
 8002b38:	f7ff fe0e 	bl	8002758 <motor_read_parameters>
	// Read motor stats
	motor_read_stats();
 8002b3c:	f7ff fa82 	bl	8002044 <motor_read_stats>
}
 8002b40:	bf00      	nop
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	20000004 	.word	0x20000004
 8002b48:	20000000 	.word	0x20000000
 8002b4c:	0800b9c0 	.word	0x0800b9c0
 8002b50:	20000001 	.word	0x20000001
 8002b54:	20000002 	.word	0x20000002
 8002b58:	0800b9ec 	.word	0x0800b9ec
 8002b5c:	0800ba20 	.word	0x0800ba20

08002b60 <HAL_UART_RxCpltCallback>:

/* UART Receive complete interrupt callback, set rxStatus flag for new char received
 * re-enable uart rx interrupt */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
	// check that uart1 triggered the interrupt callback
	if(huart->Instance == USART1){
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a09      	ldr	r2, [pc, #36]	@ (8002b94 <HAL_UART_RxCpltCallback+0x34>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d10b      	bne.n	8002b8a <HAL_UART_RxCpltCallback+0x2a>
		rxChar = rxBuffer[0]; // store the only element in buffer to a char for easier variable handling
 8002b72:	4b09      	ldr	r3, [pc, #36]	@ (8002b98 <HAL_UART_RxCpltCallback+0x38>)
 8002b74:	781a      	ldrb	r2, [r3, #0]
 8002b76:	4b09      	ldr	r3, [pc, #36]	@ (8002b9c <HAL_UART_RxCpltCallback+0x3c>)
 8002b78:	701a      	strb	r2, [r3, #0]
		rxStatus = active; // set flag to enter main menu char processing
 8002b7a:	4b09      	ldr	r3, [pc, #36]	@ (8002ba0 <HAL_UART_RxCpltCallback+0x40>)
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, (uint8_t *) rxBuffer, 1); // reactivate rx interrupt
 8002b80:	2201      	movs	r2, #1
 8002b82:	4905      	ldr	r1, [pc, #20]	@ (8002b98 <HAL_UART_RxCpltCallback+0x38>)
 8002b84:	4807      	ldr	r0, [pc, #28]	@ (8002ba4 <HAL_UART_RxCpltCallback+0x44>)
 8002b86:	f005 fd4f 	bl	8008628 <HAL_UART_Receive_IT>
	}
}
 8002b8a:	bf00      	nop
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	40013800 	.word	0x40013800
 8002b98:	20000188 	.word	0x20000188
 8002b9c:	20000189 	.word	0x20000189
 8002ba0:	20000186 	.word	0x20000186
 8002ba4:	20000224 	.word	0x20000224

08002ba8 <HAL_ADC_ConvCpltCallback>:
//	}
//}

/* When the ADC conversion in DMA mode is complete (all samples in adc scan)
 * Then the IRQ calls this function */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
	//HAL_ADC_Stop_DMA(&hadc1);
	if(hadc->Instance == ADC1){
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a05      	ldr	r2, [pc, #20]	@ (8002bcc <HAL_ADC_ConvCpltCallback+0x24>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d102      	bne.n	8002bc0 <HAL_ADC_ConvCpltCallback+0x18>
		adcComplete = 1;
 8002bba:	4b05      	ldr	r3, [pc, #20]	@ (8002bd0 <HAL_ADC_ConvCpltCallback+0x28>)
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	701a      	strb	r2, [r3, #0]
		//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);

	}
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bc80      	pop	{r7}
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	40012400 	.word	0x40012400
 8002bd0:	2000018a 	.word	0x2000018a

08002bd4 <uartrx_interrupt_init>:



/* Wrapper for 1st uart_rx call
 * The interrupt is enabled for rx after this function is called, and then disabled until called again */
void uartrx_interrupt_init(void){
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, (uint8_t *) rxBuffer, 1); // enable UART receive interrupt, store received char in rxChar buffer
 8002bd8:	2201      	movs	r2, #1
 8002bda:	4903      	ldr	r1, [pc, #12]	@ (8002be8 <uartrx_interrupt_init+0x14>)
 8002bdc:	4803      	ldr	r0, [pc, #12]	@ (8002bec <uartrx_interrupt_init+0x18>)
 8002bde:	f005 fd23 	bl	8008628 <HAL_UART_Receive_IT>
}
 8002be2:	bf00      	nop
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	20000188 	.word	0x20000188
 8002bec:	20000224 	.word	0x20000224

08002bf0 <unground_xbt>:

/* Disconnect the XBT ABC pins from ground
 * 3 relays can be used as ground when SET, or ground when RESET based on jumpers JP6-7-8
 * If 1-2 pads are soldered, SET relays to unground, RESET relays to ground
 * Note: reset signal 3 is tied to other relays: CAL cont & CAL res */
void unground_xbt(void){
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
	if(relayLock == reFree){
 8002bf4:	4b08      	ldr	r3, [pc, #32]	@ (8002c18 <unground_xbt+0x28>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10b      	bne.n	8002c14 <unground_xbt+0x24>
		relayLock = reLocked;
 8002bfc:	4b06      	ldr	r3, [pc, #24]	@ (8002c18 <unground_xbt+0x28>)
 8002bfe:	2201      	movs	r2, #1
 8002c00:	701a      	strb	r2, [r3, #0]
		drive_relay(RELAY_RESET_3_GPIO_Port, RELAY_RESET_3_Pin, 10); // RESET relay k9, k10, k11, k12
 8002c02:	220a      	movs	r2, #10
 8002c04:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002c08:	4804      	ldr	r0, [pc, #16]	@ (8002c1c <unground_xbt+0x2c>)
 8002c0a:	f000 f925 	bl	8002e58 <drive_relay>
		relayLock = reFree;
 8002c0e:	4b02      	ldr	r3, [pc, #8]	@ (8002c18 <unground_xbt+0x28>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	701a      	strb	r2, [r3, #0]
	}
}
 8002c14:	bf00      	nop
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	20000185 	.word	0x20000185
 8002c1c:	40011000 	.word	0x40011000

08002c20 <calibration_resistor>:

void calibration_resistor(void){
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
	if(relayLock == reFree){
 8002c24:	4b08      	ldr	r3, [pc, #32]	@ (8002c48 <calibration_resistor+0x28>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d10b      	bne.n	8002c44 <calibration_resistor+0x24>
		relayLock = reLocked;
 8002c2c:	4b06      	ldr	r3, [pc, #24]	@ (8002c48 <calibration_resistor+0x28>)
 8002c2e:	2201      	movs	r2, #1
 8002c30:	701a      	strb	r2, [r3, #0]
		drive_relay(RELAY_K12_CAL_RES_GPIO_Port, RELAY_K12_CAL_RES_Pin, RELAY_ON_TIME); // SET relay k12
 8002c32:	220a      	movs	r2, #10
 8002c34:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002c38:	4804      	ldr	r0, [pc, #16]	@ (8002c4c <calibration_resistor+0x2c>)
 8002c3a:	f000 f90d 	bl	8002e58 <drive_relay>
		relayLock = reFree;
 8002c3e:	4b02      	ldr	r3, [pc, #8]	@ (8002c48 <calibration_resistor+0x28>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	701a      	strb	r2, [r3, #0]
	}
}
 8002c44:	bf00      	nop
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	20000185 	.word	0x20000185
 8002c4c:	40010800 	.word	0x40010800

08002c50 <calibrate_on>:

void calibrate_on(void){
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
	if(relayLock == reFree){
 8002c54:	4b08      	ldr	r3, [pc, #32]	@ (8002c78 <calibrate_on+0x28>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d10b      	bne.n	8002c74 <calibrate_on+0x24>
		relayLock = reLocked;
 8002c5c:	4b06      	ldr	r3, [pc, #24]	@ (8002c78 <calibrate_on+0x28>)
 8002c5e:	2201      	movs	r2, #1
 8002c60:	701a      	strb	r2, [r3, #0]
		drive_relay(RELAY_K11_CAL_CONT_GPIO_Port, RELAY_K11_CAL_CONT_Pin, RELAY_ON_TIME); // SET relay k11
 8002c62:	220a      	movs	r2, #10
 8002c64:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002c68:	4804      	ldr	r0, [pc, #16]	@ (8002c7c <calibrate_on+0x2c>)
 8002c6a:	f000 f8f5 	bl	8002e58 <drive_relay>
		relayLock = reFree;
 8002c6e:	4b02      	ldr	r3, [pc, #8]	@ (8002c78 <calibrate_on+0x28>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	701a      	strb	r2, [r3, #0]
	}
}
 8002c74:	bf00      	nop
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	20000185 	.word	0x20000185
 8002c7c:	40010800 	.word	0x40010800

08002c80 <reset_relay>:

void reset_relay(void){
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
	if(relayLock == reFree){
 8002c84:	4b11      	ldr	r3, [pc, #68]	@ (8002ccc <reset_relay+0x4c>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d11d      	bne.n	8002cc8 <reset_relay+0x48>
		relayLock = reLocked;
 8002c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8002ccc <reset_relay+0x4c>)
 8002c8e:	2201      	movs	r2, #1
 8002c90:	701a      	strb	r2, [r3, #0]
		drive_relay(RELAY_RESET_1_GPIO_Port, RELAY_RESET_1_Pin, RELAY_ON_TIME); // RESET relay k1, k2, k3, k4, SSR1, SSR2, SSR3, SSR4
 8002c92:	220a      	movs	r2, #10
 8002c94:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002c98:	480d      	ldr	r0, [pc, #52]	@ (8002cd0 <reset_relay+0x50>)
 8002c9a:	f000 f8dd 	bl	8002e58 <drive_relay>
		HAL_Delay(RELAY_INTERVAL_TIME);
 8002c9e:	200a      	movs	r0, #10
 8002ca0:	f001 fa5e 	bl	8004160 <HAL_Delay>
		drive_relay(RELAY_RESET_2_GPIO_Port, RELAY_RESET_2_Pin, RELAY_ON_TIME); // RESET relay k5, k6, k7, k8, SSR5, SSR6, SSR7, SSR8
 8002ca4:	220a      	movs	r2, #10
 8002ca6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002caa:	480a      	ldr	r0, [pc, #40]	@ (8002cd4 <reset_relay+0x54>)
 8002cac:	f000 f8d4 	bl	8002e58 <drive_relay>
		HAL_Delay(RELAY_INTERVAL_TIME);
 8002cb0:	200a      	movs	r0, #10
 8002cb2:	f001 fa55 	bl	8004160 <HAL_Delay>
		drive_relay(RELAY_RESET_3_GPIO_Port, RELAY_RESET_3_Pin, RELAY_ON_TIME); // RESET relay k9, k10, k11, k12 - This grounds ABC
 8002cb6:	220a      	movs	r2, #10
 8002cb8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002cbc:	4805      	ldr	r0, [pc, #20]	@ (8002cd4 <reset_relay+0x54>)
 8002cbe:	f000 f8cb 	bl	8002e58 <drive_relay>
		relayLock = reFree;
 8002cc2:	4b02      	ldr	r3, [pc, #8]	@ (8002ccc <reset_relay+0x4c>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	701a      	strb	r2, [r3, #0]
	}
}
 8002cc8:	bf00      	nop
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	20000185 	.word	0x20000185
 8002cd0:	40010c00 	.word	0x40010c00
 8002cd4:	40011000 	.word	0x40011000

08002cd8 <connect_xbt_pin>:

void connect_xbt_pin(uint8_t xbtNum){
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	4603      	mov	r3, r0
 8002ce0:	71fb      	strb	r3, [r7, #7]

	if(relayLock == reFree){
 8002ce2:	4b47      	ldr	r3, [pc, #284]	@ (8002e00 <connect_xbt_pin+0x128>)
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f040 8085 	bne.w	8002df6 <connect_xbt_pin+0x11e>
		relayLock = reLocked;
 8002cec:	4b44      	ldr	r3, [pc, #272]	@ (8002e00 <connect_xbt_pin+0x128>)
 8002cee:	2201      	movs	r2, #1
 8002cf0:	701a      	strb	r2, [r3, #0]

		switch (xbtNum){
 8002cf2:	79fb      	ldrb	r3, [r7, #7]
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	2b07      	cmp	r3, #7
 8002cf8:	d874      	bhi.n	8002de4 <connect_xbt_pin+0x10c>
 8002cfa:	a201      	add	r2, pc, #4	@ (adr r2, 8002d00 <connect_xbt_pin+0x28>)
 8002cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d00:	08002d21 	.word	0x08002d21
 8002d04:	08002d3b 	.word	0x08002d3b
 8002d08:	08002d55 	.word	0x08002d55
 8002d0c:	08002d6d 	.word	0x08002d6d
 8002d10:	08002d85 	.word	0x08002d85
 8002d14:	08002d9b 	.word	0x08002d9b
 8002d18:	08002db1 	.word	0x08002db1
 8002d1c:	08002dcb 	.word	0x08002dcb
		case 1:
			drive_relay(RELAY_K1_GPIO_Port, RELAY_K1_Pin, RELAY_ON_TIME); // SET relay k1
 8002d20:	220a      	movs	r2, #10
 8002d22:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002d26:	4837      	ldr	r0, [pc, #220]	@ (8002e04 <connect_xbt_pin+0x12c>)
 8002d28:	f000 f896 	bl	8002e58 <drive_relay>
			drive_relay(SSR_1_GPIO_Port, SSR_1_Pin, 1); // SET SSR1
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002d32:	4834      	ldr	r0, [pc, #208]	@ (8002e04 <connect_xbt_pin+0x12c>)
 8002d34:	f000 f890 	bl	8002e58 <drive_relay>
			break;
 8002d38:	e05a      	b.n	8002df0 <connect_xbt_pin+0x118>
		case 2:
			drive_relay(RELAY_K2_GPIO_Port, RELAY_K2_Pin, RELAY_ON_TIME); // SET relay k2
 8002d3a:	220a      	movs	r2, #10
 8002d3c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002d40:	4830      	ldr	r0, [pc, #192]	@ (8002e04 <connect_xbt_pin+0x12c>)
 8002d42:	f000 f889 	bl	8002e58 <drive_relay>
			drive_relay(SSR_2_GPIO_Port, SSR_2_Pin, 1); // SET SSR2
 8002d46:	2201      	movs	r2, #1
 8002d48:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002d4c:	482d      	ldr	r0, [pc, #180]	@ (8002e04 <connect_xbt_pin+0x12c>)
 8002d4e:	f000 f883 	bl	8002e58 <drive_relay>
			break;
 8002d52:	e04d      	b.n	8002df0 <connect_xbt_pin+0x118>
		case 3:
			drive_relay(RELAY_K3_GPIO_Port, RELAY_K3_Pin, RELAY_ON_TIME); // SET relay k3
 8002d54:	220a      	movs	r2, #10
 8002d56:	2104      	movs	r1, #4
 8002d58:	482b      	ldr	r0, [pc, #172]	@ (8002e08 <connect_xbt_pin+0x130>)
 8002d5a:	f000 f87d 	bl	8002e58 <drive_relay>
			drive_relay(SSR_3_GPIO_Port, SSR_3_Pin, 1); // SET SSR3
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002d64:	4827      	ldr	r0, [pc, #156]	@ (8002e04 <connect_xbt_pin+0x12c>)
 8002d66:	f000 f877 	bl	8002e58 <drive_relay>
			break;
 8002d6a:	e041      	b.n	8002df0 <connect_xbt_pin+0x118>
		case 4:
			drive_relay(RELAY_K4_GPIO_Port, RELAY_K4_Pin, RELAY_ON_TIME); // SET relay k4
 8002d6c:	220a      	movs	r2, #10
 8002d6e:	2108      	movs	r1, #8
 8002d70:	4826      	ldr	r0, [pc, #152]	@ (8002e0c <connect_xbt_pin+0x134>)
 8002d72:	f000 f871 	bl	8002e58 <drive_relay>
			drive_relay(SSR_4_GPIO_Port, SSR_4_Pin, 1); // SET SSR4
 8002d76:	2201      	movs	r2, #1
 8002d78:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002d7c:	4823      	ldr	r0, [pc, #140]	@ (8002e0c <connect_xbt_pin+0x134>)
 8002d7e:	f000 f86b 	bl	8002e58 <drive_relay>
			break;
 8002d82:	e035      	b.n	8002df0 <connect_xbt_pin+0x118>
		case 5:
			drive_relay(RELAY_K5_GPIO_Port, RELAY_K5_Pin, RELAY_ON_TIME); // SET relay k5
 8002d84:	220a      	movs	r2, #10
 8002d86:	2110      	movs	r1, #16
 8002d88:	4820      	ldr	r0, [pc, #128]	@ (8002e0c <connect_xbt_pin+0x134>)
 8002d8a:	f000 f865 	bl	8002e58 <drive_relay>
			drive_relay(SSR_5_GPIO_Port, SSR_5_Pin, 1); // SET SSR5
 8002d8e:	2201      	movs	r2, #1
 8002d90:	2180      	movs	r1, #128	@ 0x80
 8002d92:	481c      	ldr	r0, [pc, #112]	@ (8002e04 <connect_xbt_pin+0x12c>)
 8002d94:	f000 f860 	bl	8002e58 <drive_relay>
			break;
 8002d98:	e02a      	b.n	8002df0 <connect_xbt_pin+0x118>
		case 6:
			drive_relay(RELAY_K6_GPIO_Port, RELAY_K6_Pin, RELAY_ON_TIME); // SET relay k6
 8002d9a:	220a      	movs	r2, #10
 8002d9c:	2120      	movs	r1, #32
 8002d9e:	481b      	ldr	r0, [pc, #108]	@ (8002e0c <connect_xbt_pin+0x134>)
 8002da0:	f000 f85a 	bl	8002e58 <drive_relay>
			drive_relay(SSR_6_GPIO_Port, SSR_6_Pin, 1); // SET SSR6
 8002da4:	2201      	movs	r2, #1
 8002da6:	2140      	movs	r1, #64	@ 0x40
 8002da8:	4816      	ldr	r0, [pc, #88]	@ (8002e04 <connect_xbt_pin+0x12c>)
 8002daa:	f000 f855 	bl	8002e58 <drive_relay>
			break;
 8002dae:	e01f      	b.n	8002df0 <connect_xbt_pin+0x118>
		case 7:
			drive_relay(RELAY_K7_GPIO_Port, RELAY_K7_Pin, RELAY_ON_TIME); // SET relay k7
 8002db0:	220a      	movs	r2, #10
 8002db2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002db6:	4813      	ldr	r0, [pc, #76]	@ (8002e04 <connect_xbt_pin+0x12c>)
 8002db8:	f000 f84e 	bl	8002e58 <drive_relay>
			drive_relay(SSR_7_GPIO_Port, SSR_7_Pin, 1); // SET SSR7
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002dc2:	4812      	ldr	r0, [pc, #72]	@ (8002e0c <connect_xbt_pin+0x134>)
 8002dc4:	f000 f848 	bl	8002e58 <drive_relay>
			break;
 8002dc8:	e012      	b.n	8002df0 <connect_xbt_pin+0x118>
		case 8:
			drive_relay(RELAY_K8_GPIO_Port, RELAY_K8_Pin, RELAY_ON_TIME); // SET relay k8
 8002dca:	220a      	movs	r2, #10
 8002dcc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002dd0:	480f      	ldr	r0, [pc, #60]	@ (8002e10 <connect_xbt_pin+0x138>)
 8002dd2:	f000 f841 	bl	8002e58 <drive_relay>
			drive_relay(SSR_8_GPIO_Port, SSR_8_Pin, 1); // SET SSR8
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002ddc:	480b      	ldr	r0, [pc, #44]	@ (8002e0c <connect_xbt_pin+0x134>)
 8002dde:	f000 f83b 	bl	8002e58 <drive_relay>
			break;
 8002de2:	e005      	b.n	8002df0 <connect_xbt_pin+0x118>
		default:
			printf("\r\n** ERROR: XBT %i relay not found **\r\n", xbtNum);
 8002de4:	79fb      	ldrb	r3, [r7, #7]
 8002de6:	4619      	mov	r1, r3
 8002de8:	480a      	ldr	r0, [pc, #40]	@ (8002e14 <connect_xbt_pin+0x13c>)
 8002dea:	f006 fa6f 	bl	80092cc <iprintf>
			break;
 8002dee:	bf00      	nop
		}
		relayLock = reFree;
 8002df0:	4b03      	ldr	r3, [pc, #12]	@ (8002e00 <connect_xbt_pin+0x128>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	701a      	strb	r2, [r3, #0]
	}
}
 8002df6:	bf00      	nop
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	20000185 	.word	0x20000185
 8002e04:	40011000 	.word	0x40011000
 8002e08:	40011400 	.word	0x40011400
 8002e0c:	40010c00 	.word	0x40010c00
 8002e10:	40010800 	.word	0x40010800
 8002e14:	0800ba50 	.word	0x0800ba50

08002e18 <relay_init>:

void relay_init(void){
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
	drive_relay(RELAY_RESET_1_GPIO_Port, RELAY_RESET_1_Pin, RELAY_ON_TIME);  // RESET relay k1, k2, k3, k4, SSR1, SSR2, SSR3, SSR4
 8002e1c:	220a      	movs	r2, #10
 8002e1e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e22:	480b      	ldr	r0, [pc, #44]	@ (8002e50 <relay_init+0x38>)
 8002e24:	f000 f818 	bl	8002e58 <drive_relay>
	HAL_Delay(RELAY_INTERVAL_TIME);
 8002e28:	200a      	movs	r0, #10
 8002e2a:	f001 f999 	bl	8004160 <HAL_Delay>
	drive_relay(RELAY_RESET_2_GPIO_Port, RELAY_RESET_2_Pin, RELAY_ON_TIME); // RESET relay k5, k6, k7, k8, SSR5, SSR6, SSR7, SSR8
 8002e2e:	220a      	movs	r2, #10
 8002e30:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002e34:	4807      	ldr	r0, [pc, #28]	@ (8002e54 <relay_init+0x3c>)
 8002e36:	f000 f80f 	bl	8002e58 <drive_relay>
	HAL_Delay(RELAY_INTERVAL_TIME);
 8002e3a:	200a      	movs	r0, #10
 8002e3c:	f001 f990 	bl	8004160 <HAL_Delay>
	drive_relay(RELAY_RESET_3_GPIO_Port, RELAY_RESET_3_Pin, RELAY_ON_TIME); // RESET relay k9, k10, k11, k12 (GND, calibration and continuity circuit)
 8002e40:	220a      	movs	r2, #10
 8002e42:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e46:	4803      	ldr	r0, [pc, #12]	@ (8002e54 <relay_init+0x3c>)
 8002e48:	f000 f806 	bl	8002e58 <drive_relay>
}
 8002e4c:	bf00      	nop
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	40010c00 	.word	0x40010c00
 8002e54:	40011000 	.word	0x40011000

08002e58 <drive_relay>:


void drive_relay(GPIO_TypeDef * relayPort, uint16_t relayPin, uint8_t onTime){
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	460b      	mov	r3, r1
 8002e62:	807b      	strh	r3, [r7, #2]
 8002e64:	4613      	mov	r3, r2
 8002e66:	707b      	strb	r3, [r7, #1]
	// SET relay k
	HAL_GPIO_WritePin(relayPort, relayPin, SET); // set
 8002e68:	887b      	ldrh	r3, [r7, #2]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f002 fb8a 	bl	8005588 <HAL_GPIO_WritePin>
	HAL_Delay(onTime); // time coil is driven in ms
 8002e74:	787b      	ldrb	r3, [r7, #1]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f001 f972 	bl	8004160 <HAL_Delay>
	HAL_GPIO_WritePin(relayPort, relayPin, RESET); // release
 8002e7c:	887b      	ldrh	r3, [r7, #2]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	4619      	mov	r1, r3
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f002 fb80 	bl	8005588 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8002e88:	2002      	movs	r0, #2
 8002e8a:	f001 f969 	bl	8004160 <HAL_Delay>
}
 8002e8e:	bf00      	nop
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
	...

08002e98 <extend_all_pins>:

// ALV2 (previous firmware) had a sequence with 4 delays of 8 ms, repeated in 300 steps = 4 * 8 ms * 300 = 7200 ms

/* Extend all pins up to countLimit or eeprom.tubes, whichever is smaller
 * Parameter: countLimit, extend all pins up to this number */
void extend_all_pins(uint8_t countLimit){
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	71fb      	strb	r3, [r7, #7]
	if(countLimit > 0){
 8002ea2:	79fb      	ldrb	r3, [r7, #7]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d012      	beq.n	8002ece <extend_all_pins+0x36>
		for(uint8_t i = 1; (i <= countLimit) && (i <= launcher.tubeCount); i++){
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	73fb      	strb	r3, [r7, #15]
 8002eac:	e006      	b.n	8002ebc <extend_all_pins+0x24>
			extend_pin(i);
 8002eae:	7bfb      	ldrb	r3, [r7, #15]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f000 f835 	bl	8002f20 <extend_pin>
		for(uint8_t i = 1; (i <= countLimit) && (i <= launcher.tubeCount); i++){
 8002eb6:	7bfb      	ldrb	r3, [r7, #15]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	73fb      	strb	r3, [r7, #15]
 8002ebc:	7bfa      	ldrb	r2, [r7, #15]
 8002ebe:	79fb      	ldrb	r3, [r7, #7]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d804      	bhi.n	8002ece <extend_all_pins+0x36>
 8002ec4:	4b04      	ldr	r3, [pc, #16]	@ (8002ed8 <extend_all_pins+0x40>)
 8002ec6:	785b      	ldrb	r3, [r3, #1]
 8002ec8:	7bfa      	ldrb	r2, [r7, #15]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d9ef      	bls.n	8002eae <extend_all_pins+0x16>
		}
	}
}
 8002ece:	bf00      	nop
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	20000000 	.word	0x20000000

08002edc <retract_all_pins>:

/* Retract all pins up to countLimit or eeprom.tubes, whichever is smaller
 * Parameter: countLimit, retract all pins up to this number */
void retract_all_pins(uint8_t countLimit){
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	71fb      	strb	r3, [r7, #7]
	if(countLimit > 0){
 8002ee6:	79fb      	ldrb	r3, [r7, #7]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d012      	beq.n	8002f12 <retract_all_pins+0x36>
		for(uint8_t i = 1; (i <= countLimit) && (i <= launcher.tubeCount); i++){
 8002eec:	2301      	movs	r3, #1
 8002eee:	73fb      	strb	r3, [r7, #15]
 8002ef0:	e006      	b.n	8002f00 <retract_all_pins+0x24>
			retract_pin(i);
 8002ef2:	7bfb      	ldrb	r3, [r7, #15]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f000 f82d 	bl	8002f54 <retract_pin>
		for(uint8_t i = 1; (i <= countLimit) && (i <= launcher.tubeCount); i++){
 8002efa:	7bfb      	ldrb	r3, [r7, #15]
 8002efc:	3301      	adds	r3, #1
 8002efe:	73fb      	strb	r3, [r7, #15]
 8002f00:	7bfa      	ldrb	r2, [r7, #15]
 8002f02:	79fb      	ldrb	r3, [r7, #7]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d804      	bhi.n	8002f12 <retract_all_pins+0x36>
 8002f08:	4b04      	ldr	r3, [pc, #16]	@ (8002f1c <retract_all_pins+0x40>)
 8002f0a:	785b      	ldrb	r3, [r3, #1]
 8002f0c:	7bfa      	ldrb	r2, [r7, #15]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d9ef      	bls.n	8002ef2 <retract_all_pins+0x16>
		}
	}
}
 8002f12:	bf00      	nop
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	20000000 	.word	0x20000000

08002f20 <extend_pin>:


/* Extend pin wrapper
 * Parameter: xbtNum [1-8] */
void extend_pin(uint8_t xbtNum){
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	4603      	mov	r3, r0
 8002f28:	71fb      	strb	r3, [r7, #7]
	if (motor.wiring == 0){ // select spin direction based on wiring
 8002f2a:	4b09      	ldr	r3, [pc, #36]	@ (8002f50 <extend_pin+0x30>)
 8002f2c:	799b      	ldrb	r3, [r3, #6]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d105      	bne.n	8002f3e <extend_pin+0x1e>
		motor_select(xbtNum, CW);
 8002f32:	79fb      	ldrb	r3, [r7, #7]
 8002f34:	2101      	movs	r1, #1
 8002f36:	4618      	mov	r0, r3
 8002f38:	f000 f826 	bl	8002f88 <motor_select>
	} else {
		motor_select(xbtNum, CCW);
	}
}
 8002f3c:	e004      	b.n	8002f48 <extend_pin+0x28>
		motor_select(xbtNum, CCW);
 8002f3e:	79fb      	ldrb	r3, [r7, #7]
 8002f40:	2100      	movs	r1, #0
 8002f42:	4618      	mov	r0, r3
 8002f44:	f000 f820 	bl	8002f88 <motor_select>
}
 8002f48:	bf00      	nop
 8002f4a:	3708      	adds	r7, #8
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	20000010 	.word	0x20000010

08002f54 <retract_pin>:

/* Retract pin wrapper
 * Parameter: xbtNum [1-8] */
void retract_pin(uint8_t xbtNum){
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	71fb      	strb	r3, [r7, #7]
	if (motor.wiring == 0){ // select spin direction based on wiring
 8002f5e:	4b09      	ldr	r3, [pc, #36]	@ (8002f84 <retract_pin+0x30>)
 8002f60:	799b      	ldrb	r3, [r3, #6]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d105      	bne.n	8002f72 <retract_pin+0x1e>
		motor_select(xbtNum, CCW);
 8002f66:	79fb      	ldrb	r3, [r7, #7]
 8002f68:	2100      	movs	r1, #0
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 f80c 	bl	8002f88 <motor_select>
	} else {
		motor_select(xbtNum, CW);
	}
}
 8002f70:	e004      	b.n	8002f7c <retract_pin+0x28>
		motor_select(xbtNum, CW);
 8002f72:	79fb      	ldrb	r3, [r7, #7]
 8002f74:	2101      	movs	r1, #1
 8002f76:	4618      	mov	r0, r3
 8002f78:	f000 f806 	bl	8002f88 <motor_select>
}
 8002f7c:	bf00      	nop
 8002f7e:	3708      	adds	r7, #8
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	20000010 	.word	0x20000010

08002f88 <motor_select>:

/* Motor driver selector
 * direction to retract/extend may be different based on wiring
 * Parameters: XBT number, direction {CW,CCW} */
void motor_select(uint8_t xbtNum, motorDir_t dir){
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	4603      	mov	r3, r0
 8002f90:	460a      	mov	r2, r1
 8002f92:	71fb      	strb	r3, [r7, #7]
 8002f94:	4613      	mov	r3, r2
 8002f96:	71bb      	strb	r3, [r7, #6]
	uint16_t rtime = motor.runTime;
 8002f98:	4b4b      	ldr	r3, [pc, #300]	@ (80030c8 <motor_select+0x140>)
 8002f9a:	881b      	ldrh	r3, [r3, #0]
 8002f9c:	81fb      	strh	r3, [r7, #14]
	uint16_t imax = 0;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	81bb      	strh	r3, [r7, #12]

	if((motor.runTime < MOTOR_RUNTIME_MIN) || (motor.runTime > MOTOR_RUNTIME_MAX)){
 8002fa2:	4b49      	ldr	r3, [pc, #292]	@ (80030c8 <motor_select+0x140>)
 8002fa4:	881b      	ldrh	r3, [r3, #0]
 8002fa6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002faa:	d305      	bcc.n	8002fb8 <motor_select+0x30>
 8002fac:	4b46      	ldr	r3, [pc, #280]	@ (80030c8 <motor_select+0x140>)
 8002fae:	881b      	ldrh	r3, [r3, #0]
 8002fb0:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d902      	bls.n	8002fbe <motor_select+0x36>
		rtime = MOTOR_RUNTIME_DEFAULT; // run with default runtime
 8002fb8:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002fbc:	81fb      	strh	r3, [r7, #14]
	}

	if(motorLock == mFree){
 8002fbe:	4b43      	ldr	r3, [pc, #268]	@ (80030cc <motor_select+0x144>)
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d17b      	bne.n	80030be <motor_select+0x136>
		motorLock = mLocked;
 8002fc6:	4b41      	ldr	r3, [pc, #260]	@ (80030cc <motor_select+0x144>)
 8002fc8:	2201      	movs	r2, #1
 8002fca:	701a      	strb	r2, [r3, #0]
		switch (xbtNum){
 8002fcc:	79fb      	ldrb	r3, [r7, #7]
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	2b07      	cmp	r3, #7
 8002fd2:	d85b      	bhi.n	800308c <motor_select+0x104>
 8002fd4:	a201      	add	r2, pc, #4	@ (adr r2, 8002fdc <motor_select+0x54>)
 8002fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fda:	bf00      	nop
 8002fdc:	08002ffd 	.word	0x08002ffd
 8002fe0:	0800300f 	.word	0x0800300f
 8002fe4:	08003021 	.word	0x08003021
 8002fe8:	08003033 	.word	0x08003033
 8002fec:	08003045 	.word	0x08003045
 8002ff0:	08003057 	.word	0x08003057
 8002ff4:	08003069 	.word	0x08003069
 8002ff8:	0800307b 	.word	0x0800307b
		case 1:
			imax = motor_drive(ENABLE_M1_GPIO_Port, ENABLE_M1_Pin, dir, rtime);
 8002ffc:	89fb      	ldrh	r3, [r7, #14]
 8002ffe:	79ba      	ldrb	r2, [r7, #6]
 8003000:	2104      	movs	r1, #4
 8003002:	4833      	ldr	r0, [pc, #204]	@ (80030d0 <motor_select+0x148>)
 8003004:	f000 f8f6 	bl	80031f4 <motor_drive>
 8003008:	4603      	mov	r3, r0
 800300a:	81bb      	strh	r3, [r7, #12]
			break;
 800300c:	e044      	b.n	8003098 <motor_select+0x110>
		case 2:
			imax = motor_drive(ENABLE_M2_GPIO_Port, ENABLE_M2_Pin, dir, rtime);
 800300e:	89fb      	ldrh	r3, [r7, #14]
 8003010:	79ba      	ldrb	r2, [r7, #6]
 8003012:	2108      	movs	r1, #8
 8003014:	482e      	ldr	r0, [pc, #184]	@ (80030d0 <motor_select+0x148>)
 8003016:	f000 f8ed 	bl	80031f4 <motor_drive>
 800301a:	4603      	mov	r3, r0
 800301c:	81bb      	strh	r3, [r7, #12]
			break;
 800301e:	e03b      	b.n	8003098 <motor_select+0x110>
		case 3:
			imax = motor_drive(ENABLE_M3_GPIO_Port, ENABLE_M3_Pin, dir, rtime);
 8003020:	89fb      	ldrh	r3, [r7, #14]
 8003022:	79ba      	ldrb	r2, [r7, #6]
 8003024:	2101      	movs	r1, #1
 8003026:	482b      	ldr	r0, [pc, #172]	@ (80030d4 <motor_select+0x14c>)
 8003028:	f000 f8e4 	bl	80031f4 <motor_drive>
 800302c:	4603      	mov	r3, r0
 800302e:	81bb      	strh	r3, [r7, #12]
			break;
 8003030:	e032      	b.n	8003098 <motor_select+0x110>
		case 4:
			imax = motor_drive(ENABLE_M4_GPIO_Port, ENABLE_M4_Pin, dir, rtime);
 8003032:	89fb      	ldrh	r3, [r7, #14]
 8003034:	79ba      	ldrb	r2, [r7, #6]
 8003036:	2102      	movs	r1, #2
 8003038:	4826      	ldr	r0, [pc, #152]	@ (80030d4 <motor_select+0x14c>)
 800303a:	f000 f8db 	bl	80031f4 <motor_drive>
 800303e:	4603      	mov	r3, r0
 8003040:	81bb      	strh	r3, [r7, #12]
			break;
 8003042:	e029      	b.n	8003098 <motor_select+0x110>
		case 5:
			imax = motor_drive(ENABLE_M5_GPIO_Port, ENABLE_M5_Pin, dir, rtime);
 8003044:	89fb      	ldrh	r3, [r7, #14]
 8003046:	79ba      	ldrb	r2, [r7, #6]
 8003048:	2110      	movs	r1, #16
 800304a:	4822      	ldr	r0, [pc, #136]	@ (80030d4 <motor_select+0x14c>)
 800304c:	f000 f8d2 	bl	80031f4 <motor_drive>
 8003050:	4603      	mov	r3, r0
 8003052:	81bb      	strh	r3, [r7, #12]
			break;
 8003054:	e020      	b.n	8003098 <motor_select+0x110>
		case 6:
			imax = motor_drive(ENABLE_M6_GPIO_Port, ENABLE_M6_Pin, dir, rtime);
 8003056:	89fb      	ldrh	r3, [r7, #14]
 8003058:	79ba      	ldrb	r2, [r7, #6]
 800305a:	2120      	movs	r1, #32
 800305c:	481d      	ldr	r0, [pc, #116]	@ (80030d4 <motor_select+0x14c>)
 800305e:	f000 f8c9 	bl	80031f4 <motor_drive>
 8003062:	4603      	mov	r3, r0
 8003064:	81bb      	strh	r3, [r7, #12]
			break;
 8003066:	e017      	b.n	8003098 <motor_select+0x110>
		case 7:
			imax = motor_drive(ENABLE_M7_GPIO_Port, ENABLE_M7_Pin, dir, rtime);
 8003068:	89fb      	ldrh	r3, [r7, #14]
 800306a:	79ba      	ldrb	r2, [r7, #6]
 800306c:	2140      	movs	r1, #64	@ 0x40
 800306e:	4819      	ldr	r0, [pc, #100]	@ (80030d4 <motor_select+0x14c>)
 8003070:	f000 f8c0 	bl	80031f4 <motor_drive>
 8003074:	4603      	mov	r3, r0
 8003076:	81bb      	strh	r3, [r7, #12]
			break;
 8003078:	e00e      	b.n	8003098 <motor_select+0x110>
		case 8:
			imax = motor_drive(ENABLE_M8_GPIO_Port, ENABLE_M8_Pin, dir, rtime);
 800307a:	89fb      	ldrh	r3, [r7, #14]
 800307c:	79ba      	ldrb	r2, [r7, #6]
 800307e:	2180      	movs	r1, #128	@ 0x80
 8003080:	4814      	ldr	r0, [pc, #80]	@ (80030d4 <motor_select+0x14c>)
 8003082:	f000 f8b7 	bl	80031f4 <motor_drive>
 8003086:	4603      	mov	r3, r0
 8003088:	81bb      	strh	r3, [r7, #12]
			break;
 800308a:	e005      	b.n	8003098 <motor_select+0x110>
		default:
			printf("\r\n** ERROR: XBT %i motor not found **\r\n", xbtNum);
 800308c:	79fb      	ldrb	r3, [r7, #7]
 800308e:	4619      	mov	r1, r3
 8003090:	4811      	ldr	r0, [pc, #68]	@ (80030d8 <motor_select+0x150>)
 8003092:	f006 f91b 	bl	80092cc <iprintf>
			break;
 8003096:	bf00      	nop
		}
		// release motor lock
		motorLock = mFree;
 8003098:	4b0c      	ldr	r3, [pc, #48]	@ (80030cc <motor_select+0x144>)
 800309a:	2200      	movs	r2, #0
 800309c:	701a      	strb	r2, [r3, #0]
		// update motor stats
		if(xbtNum >= 1 && xbtNum <= 8 ){
 800309e:	79fb      	ldrb	r3, [r7, #7]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00c      	beq.n	80030be <motor_select+0x136>
 80030a4:	79fb      	ldrb	r3, [r7, #7]
 80030a6:	2b08      	cmp	r3, #8
 80030a8:	d809      	bhi.n	80030be <motor_select+0x136>
			// store use count
			motor_count_update(xbtNum);
 80030aa:	79fb      	ldrb	r3, [r7, #7]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f000 f815 	bl	80030dc <motor_count_update>
			// store Imax if new max is found
			motor_imax_update(xbtNum, imax);
 80030b2:	89ba      	ldrh	r2, [r7, #12]
 80030b4:	79fb      	ldrb	r3, [r7, #7]
 80030b6:	4611      	mov	r1, r2
 80030b8:	4618      	mov	r0, r3
 80030ba:	f000 f837 	bl	800312c <motor_imax_update>
		}
	}
}
 80030be:	bf00      	nop
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	20000010 	.word	0x20000010
 80030cc:	20000184 	.word	0x20000184
 80030d0:	40011000 	.word	0x40011000
 80030d4:	40010800 	.word	0x40010800
 80030d8:	0800ba78 	.word	0x0800ba78

080030dc <motor_count_update>:

/* Update the stepper motor use count
 * Parameter: xbt tube used
 * Warning: The EEPROM memory locations for motor.count[i] must be cleared to 0,
 * otherwise values present from factory will be 0xFFFF (65535) */
void motor_count_update(uint8_t xbtNum){
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	4603      	mov	r3, r0
 80030e4:	71fb      	strb	r3, [r7, #7]
	motor.count[xbtNum-1]++;
 80030e6:	79fb      	ldrb	r3, [r7, #7]
 80030e8:	3b01      	subs	r3, #1
 80030ea:	490f      	ldr	r1, [pc, #60]	@ (8003128 <motor_count_update+0x4c>)
 80030ec:	f103 020c 	add.w	r2, r3, #12
 80030f0:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80030f4:	3201      	adds	r2, #1
 80030f6:	b291      	uxth	r1, r2
 80030f8:	4a0b      	ldr	r2, [pc, #44]	@ (8003128 <motor_count_update+0x4c>)
 80030fa:	330c      	adds	r3, #12
 80030fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	eeprom_write_nbytes(M_1COUNT2B + (xbtNum-1)*2, sizeof(motor.count[xbtNum-1]), &motor.count[xbtNum-1]);
 8003100:	79fb      	ldrb	r3, [r7, #7]
 8003102:	3307      	adds	r3, #7
 8003104:	b2db      	uxtb	r3, r3
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	b2d8      	uxtb	r0, r3
 800310a:	79fb      	ldrb	r3, [r7, #7]
 800310c:	3b01      	subs	r3, #1
 800310e:	330c      	adds	r3, #12
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	4a05      	ldr	r2, [pc, #20]	@ (8003128 <motor_count_update+0x4c>)
 8003114:	4413      	add	r3, r2
 8003116:	461a      	mov	r2, r3
 8003118:	2102      	movs	r1, #2
 800311a:	f000 fb93 	bl	8003844 <eeprom_write_nbytes>
}
 800311e:	bf00      	nop
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	20000010 	.word	0x20000010

0800312c <motor_imax_update>:

/* Update the maximum logged current for each stepper, if applicable
 * Warning: The EEPROM memory locations for motor.imax[i] must be cleared to 0,
 * otherwise values present from factory will be 0xFFFF (65535) >> any imax */
void motor_imax_update(uint8_t xbtNum, uint16_t imax){
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	4603      	mov	r3, r0
 8003134:	460a      	mov	r2, r1
 8003136:	71fb      	strb	r3, [r7, #7]
 8003138:	4613      	mov	r3, r2
 800313a:	80bb      	strh	r3, [r7, #4]
	if( motor.imax[xbtNum-1] < imax){
 800313c:	79fb      	ldrb	r3, [r7, #7]
 800313e:	3b01      	subs	r3, #1
 8003140:	4a10      	ldr	r2, [pc, #64]	@ (8003184 <motor_imax_update+0x58>)
 8003142:	3304      	adds	r3, #4
 8003144:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003148:	88ba      	ldrh	r2, [r7, #4]
 800314a:	429a      	cmp	r2, r3
 800314c:	d915      	bls.n	800317a <motor_imax_update+0x4e>
		motor.imax[xbtNum-1] = imax;
 800314e:	79fb      	ldrb	r3, [r7, #7]
 8003150:	3b01      	subs	r3, #1
 8003152:	490c      	ldr	r1, [pc, #48]	@ (8003184 <motor_imax_update+0x58>)
 8003154:	3304      	adds	r3, #4
 8003156:	88ba      	ldrh	r2, [r7, #4]
 8003158:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		eeprom_write_nbytes(M_1MXAMP2B + (xbtNum-1)*2, sizeof(motor.imax[xbtNum-1]), &motor.imax[xbtNum-1]);
 800315c:	79fb      	ldrb	r3, [r7, #7]
 800315e:	330f      	adds	r3, #15
 8003160:	b2db      	uxtb	r3, r3
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	b2d8      	uxtb	r0, r3
 8003166:	79fb      	ldrb	r3, [r7, #7]
 8003168:	3b01      	subs	r3, #1
 800316a:	3304      	adds	r3, #4
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	4a05      	ldr	r2, [pc, #20]	@ (8003184 <motor_imax_update+0x58>)
 8003170:	4413      	add	r3, r2
 8003172:	461a      	mov	r2, r3
 8003174:	2102      	movs	r1, #2
 8003176:	f000 fb65 	bl	8003844 <eeprom_write_nbytes>
	}
}
 800317a:	bf00      	nop
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	20000010 	.word	0x20000010

08003188 <motor_init>:


void motor_init(void){
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(ENABLE_M1_GPIO_Port, ENABLE_M1_Pin, RESET); // start disabled
 800318c:	2200      	movs	r2, #0
 800318e:	2104      	movs	r1, #4
 8003190:	4815      	ldr	r0, [pc, #84]	@ (80031e8 <motor_init+0x60>)
 8003192:	f002 f9f9 	bl	8005588 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M2_GPIO_Port, ENABLE_M2_Pin, RESET); // start disabled
 8003196:	2200      	movs	r2, #0
 8003198:	2108      	movs	r1, #8
 800319a:	4813      	ldr	r0, [pc, #76]	@ (80031e8 <motor_init+0x60>)
 800319c:	f002 f9f4 	bl	8005588 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M3_GPIO_Port, ENABLE_M3_Pin, RESET); // start disabled
 80031a0:	2200      	movs	r2, #0
 80031a2:	2101      	movs	r1, #1
 80031a4:	4811      	ldr	r0, [pc, #68]	@ (80031ec <motor_init+0x64>)
 80031a6:	f002 f9ef 	bl	8005588 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M4_GPIO_Port, ENABLE_M4_Pin, RESET); // start disabled
 80031aa:	2200      	movs	r2, #0
 80031ac:	2102      	movs	r1, #2
 80031ae:	480f      	ldr	r0, [pc, #60]	@ (80031ec <motor_init+0x64>)
 80031b0:	f002 f9ea 	bl	8005588 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M5_GPIO_Port, ENABLE_M5_Pin, RESET); // start disabled
 80031b4:	2200      	movs	r2, #0
 80031b6:	2110      	movs	r1, #16
 80031b8:	480c      	ldr	r0, [pc, #48]	@ (80031ec <motor_init+0x64>)
 80031ba:	f002 f9e5 	bl	8005588 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M6_GPIO_Port, ENABLE_M6_Pin, RESET); // start disabled
 80031be:	2200      	movs	r2, #0
 80031c0:	2120      	movs	r1, #32
 80031c2:	480a      	ldr	r0, [pc, #40]	@ (80031ec <motor_init+0x64>)
 80031c4:	f002 f9e0 	bl	8005588 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M7_GPIO_Port, ENABLE_M7_Pin, RESET); // start disabled
 80031c8:	2200      	movs	r2, #0
 80031ca:	2140      	movs	r1, #64	@ 0x40
 80031cc:	4807      	ldr	r0, [pc, #28]	@ (80031ec <motor_init+0x64>)
 80031ce:	f002 f9db 	bl	8005588 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M8_GPIO_Port, ENABLE_M8_Pin, RESET); // start disabled
 80031d2:	2200      	movs	r2, #0
 80031d4:	2180      	movs	r1, #128	@ 0x80
 80031d6:	4805      	ldr	r0, [pc, #20]	@ (80031ec <motor_init+0x64>)
 80031d8:	f002 f9d6 	bl	8005588 <HAL_GPIO_WritePin>
	  // calibrate ADC
	  HAL_ADCEx_Calibration_Start(&hadc1);
 80031dc:	4804      	ldr	r0, [pc, #16]	@ (80031f0 <motor_init+0x68>)
 80031de:	f001 fbf1 	bl	80049c4 <HAL_ADCEx_Calibration_Start>
}
 80031e2:	bf00      	nop
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	40011000 	.word	0x40011000
 80031ec:	40010800 	.word	0x40010800
 80031f0:	200000bc 	.word	0x200000bc

080031f4 <motor_drive>:


uint16_t motor_drive(GPIO_TypeDef * motorPort, uint16_t motorPin, motorDir_t motorDirection, uint32_t runTime ){
 80031f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80031f8:	b09b      	sub	sp, #108	@ 0x6c
 80031fa:	af08      	add	r7, sp, #32
 80031fc:	61f8      	str	r0, [r7, #28]
 80031fe:	617b      	str	r3, [r7, #20]
 8003200:	460b      	mov	r3, r1
 8003202:	837b      	strh	r3, [r7, #26]
 8003204:	4613      	mov	r3, r2
 8003206:	767b      	strb	r3, [r7, #25]
	uint16_t imax = 0;
 8003208:	2300      	movs	r3, #0
 800320a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	uint32_t timeStart, timeNow;
	uint16_t adcSampleCount = 0;
 800320e:	2300      	movs	r3, #0
 8003210:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
	adcScan_t adcReading;

	// Initialize PWM
	HAL_GPIO_WritePin(motorPort, motorPin, RESET); // make sure driver pin is disabled
 8003214:	8b7b      	ldrh	r3, [r7, #26]
 8003216:	2200      	movs	r2, #0
 8003218:	4619      	mov	r1, r3
 800321a:	69f8      	ldr	r0, [r7, #28]
 800321c:	f002 f9b4 	bl	8005588 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // initialize PWM pulses for DRV8826
 8003220:	2108      	movs	r1, #8
 8003222:	4859      	ldr	r0, [pc, #356]	@ (8003388 <motor_drive+0x194>)
 8003224:	f004 f820 	bl	8007268 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(DIR_GPIO_Port,DIR_Pin, motorDirection); // set motor direction
 8003228:	7e7b      	ldrb	r3, [r7, #25]
 800322a:	461a      	mov	r2, r3
 800322c:	2110      	movs	r1, #16
 800322e:	4857      	ldr	r0, [pc, #348]	@ (800338c <motor_drive+0x198>)
 8003230:	f002 f9aa 	bl	8005588 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motorPort, motorPin, SET); // enable driver to run motor
 8003234:	8b7b      	ldrh	r3, [r7, #26]
 8003236:	2201      	movs	r2, #1
 8003238:	4619      	mov	r1, r3
 800323a:	69f8      	ldr	r0, [r7, #28]
 800323c:	f002 f9a4 	bl	8005588 <HAL_GPIO_WritePin>

	timeStart = HAL_GetTick(); // initial timer count using SysTick timer (32 bit variable uwTick incremented every 1 ms, MAX = 50 days)
 8003240:	f000 ff84 	bl	800414c <HAL_GetTick>
 8003244:	6438      	str	r0, [r7, #64]	@ 0x40

	// get 1 current, voltage, temp reading every 500 ms using TIM2 interrupts
	HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_4); // trigger adc conversions in DMA mode every x ms
 8003246:	210c      	movs	r1, #12
 8003248:	4851      	ldr	r0, [pc, #324]	@ (8003390 <motor_drive+0x19c>)
 800324a:	f004 f913 	bl	8007474 <HAL_TIM_PWM_Start_IT>
	printf("\r\n");
 800324e:	4851      	ldr	r0, [pc, #324]	@ (8003394 <motor_drive+0x1a0>)
 8003250:	f006 f8a4 	bl	800939c <puts>

	while(1){
		// track motor runtime and break loop after desired time elapsed
		timeNow = HAL_GetTick();
 8003254:	f000 ff7a 	bl	800414c <HAL_GetTick>
 8003258:	63f8      	str	r0, [r7, #60]	@ 0x3c
		if(timeNow >= timeStart){
 800325a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800325c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800325e:	429a      	cmp	r2, r3
 8003260:	d306      	bcc.n	8003270 <motor_drive+0x7c>
			if((timeNow - timeStart) >= runTime) break;
 8003262:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003264:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	429a      	cmp	r2, r3
 800326c:	d807      	bhi.n	800327e <motor_drive+0x8a>
 800326e:	e075      	b.n	800335c <motor_drive+0x168>
		} else { // if timeNow < timeStart, this only happens when uwTick ~ 2^32 (50 days) and there was an overflow
			if( (HAL_MAX_DELAY - timeStart + timeNow) >= runTime) break;
 8003270:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003272:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	3b01      	subs	r3, #1
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	429a      	cmp	r2, r3
 800327c:	d96d      	bls.n	800335a <motor_drive+0x166>
		}
		// check if user sent stop signal
		if(active == rxStatus){ // set to active with UART RX interrupt
 800327e:	4b46      	ldr	r3, [pc, #280]	@ (8003398 <motor_drive+0x1a4>)
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d10a      	bne.n	800329c <motor_drive+0xa8>
			rxStatus = idle;
 8003286:	4b44      	ldr	r3, [pc, #272]	@ (8003398 <motor_drive+0x1a4>)
 8003288:	2200      	movs	r2, #0
 800328a:	701a      	strb	r2, [r3, #0]
			if(rxChar == '@'){
 800328c:	4b43      	ldr	r3, [pc, #268]	@ (800339c <motor_drive+0x1a8>)
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	2b40      	cmp	r3, #64	@ 0x40
 8003292:	d103      	bne.n	800329c <motor_drive+0xa8>
				printf("\r\n** Motor Stopped by user! **\r\n");
 8003294:	4842      	ldr	r0, [pc, #264]	@ (80033a0 <motor_drive+0x1ac>)
 8003296:	f006 f881 	bl	800939c <puts>
				break;
 800329a:	e05f      	b.n	800335c <motor_drive+0x168>
			}
		}
		if(adcTimerTrigger == 1){
 800329c:	4b41      	ldr	r3, [pc, #260]	@ (80033a4 <motor_drive+0x1b0>)
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d1d7      	bne.n	8003254 <motor_drive+0x60>
			adcTimerTrigger = 0;
 80032a4:	4b3f      	ldr	r3, [pc, #252]	@ (80033a4 <motor_drive+0x1b0>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	701a      	strb	r2, [r3, #0]
			adcReading = adc_get_values();
 80032aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 f87e 	bl	80033b0 <adc_get_values>
			// print
			printf("<%02i> Current [AD# %i]: %i.%i mA | Voltage [AD# %i]: %i.%i V | Temperature [AD# %i]: %i.%i C\r\n", (int)adcSampleCount,
 80032b4:	f8b7 4044 	ldrh.w	r4, [r7, #68]	@ 0x44
					 	 (int)adcReading.current.rawValue, (int)adcReading.current.realValue, get_decimal(adcReading.current.realValue, 1),
 80032b8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
			printf("<%02i> Current [AD# %i]: %i.%i mA | Voltage [AD# %i]: %i.%i V | Temperature [AD# %i]: %i.%i C\r\n", (int)adcSampleCount,
 80032ba:	4699      	mov	r9, r3
					 	 (int)adcReading.current.rawValue, (int)adcReading.current.realValue, get_decimal(adcReading.current.realValue, 1),
 80032bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
			printf("<%02i> Current [AD# %i]: %i.%i mA | Voltage [AD# %i]: %i.%i V | Temperature [AD# %i]: %i.%i C\r\n", (int)adcSampleCount,
 80032be:	4618      	mov	r0, r3
 80032c0:	f7fd fd46 	bl	8000d50 <__aeabi_f2iz>
 80032c4:	4680      	mov	r8, r0
					 	 (int)adcReading.current.rawValue, (int)adcReading.current.realValue, get_decimal(adcReading.current.realValue, 1),
 80032c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032c8:	2101      	movs	r1, #1
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7ff fb9a 	bl	8002a04 <get_decimal>
 80032d0:	4603      	mov	r3, r0
			printf("<%02i> Current [AD# %i]: %i.%i mA | Voltage [AD# %i]: %i.%i V | Temperature [AD# %i]: %i.%i C\r\n", (int)adcSampleCount,
 80032d2:	613b      	str	r3, [r7, #16]
						 (int)adcReading.voltage.rawValue, (int)adcReading.voltage.realValue, get_decimal(adcReading.voltage.realValue, 1),
 80032d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
			printf("<%02i> Current [AD# %i]: %i.%i mA | Voltage [AD# %i]: %i.%i V | Temperature [AD# %i]: %i.%i C\r\n", (int)adcSampleCount,
 80032d6:	60fb      	str	r3, [r7, #12]
						 (int)adcReading.voltage.rawValue, (int)adcReading.voltage.realValue, get_decimal(adcReading.voltage.realValue, 1),
 80032d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
			printf("<%02i> Current [AD# %i]: %i.%i mA | Voltage [AD# %i]: %i.%i V | Temperature [AD# %i]: %i.%i C\r\n", (int)adcSampleCount,
 80032da:	4618      	mov	r0, r3
 80032dc:	f7fd fd38 	bl	8000d50 <__aeabi_f2iz>
 80032e0:	4605      	mov	r5, r0
						 (int)adcReading.voltage.rawValue, (int)adcReading.voltage.realValue, get_decimal(adcReading.voltage.realValue, 1),
 80032e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032e4:	2101      	movs	r1, #1
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7ff fb8c 	bl	8002a04 <get_decimal>
 80032ec:	4603      	mov	r3, r0
			printf("<%02i> Current [AD# %i]: %i.%i mA | Voltage [AD# %i]: %i.%i V | Temperature [AD# %i]: %i.%i C\r\n", (int)adcSampleCount,
 80032ee:	60bb      	str	r3, [r7, #8]
						 (int)adcReading.temperature.rawValue, (int)adcReading.temperature.realValue, get_decimal(adcReading.temperature.realValue, 1));
 80032f0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
			printf("<%02i> Current [AD# %i]: %i.%i mA | Voltage [AD# %i]: %i.%i V | Temperature [AD# %i]: %i.%i C\r\n", (int)adcSampleCount,
 80032f2:	607b      	str	r3, [r7, #4]
						 (int)adcReading.temperature.rawValue, (int)adcReading.temperature.realValue, get_decimal(adcReading.temperature.realValue, 1));
 80032f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
			printf("<%02i> Current [AD# %i]: %i.%i mA | Voltage [AD# %i]: %i.%i V | Temperature [AD# %i]: %i.%i C\r\n", (int)adcSampleCount,
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7fd fd2a 	bl	8000d50 <__aeabi_f2iz>
 80032fc:	4606      	mov	r6, r0
						 (int)adcReading.temperature.rawValue, (int)adcReading.temperature.realValue, get_decimal(adcReading.temperature.realValue, 1));
 80032fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003300:	2101      	movs	r1, #1
 8003302:	4618      	mov	r0, r3
 8003304:	f7ff fb7e 	bl	8002a04 <get_decimal>
 8003308:	4603      	mov	r3, r0
			printf("<%02i> Current [AD# %i]: %i.%i mA | Voltage [AD# %i]: %i.%i V | Temperature [AD# %i]: %i.%i C\r\n", (int)adcSampleCount,
 800330a:	9306      	str	r3, [sp, #24]
 800330c:	9605      	str	r6, [sp, #20]
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	9204      	str	r2, [sp, #16]
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	9203      	str	r2, [sp, #12]
 8003316:	9502      	str	r5, [sp, #8]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	9201      	str	r2, [sp, #4]
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	4643      	mov	r3, r8
 8003322:	464a      	mov	r2, r9
 8003324:	4621      	mov	r1, r4
 8003326:	4820      	ldr	r0, [pc, #128]	@ (80033a8 <motor_drive+0x1b4>)
 8003328:	f005 ffd0 	bl	80092cc <iprintf>
			adcSampleCount++;
 800332c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8003330:	3301      	adds	r3, #1
 8003332:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
			// update imax
			if(imax < (uint16_t)adcReading.current.realValue){ // if previous imax is less than new one, replace it
 8003336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003338:	4618      	mov	r0, r3
 800333a:	f7fd fd2f 	bl	8000d9c <__aeabi_f2uiz>
 800333e:	4603      	mov	r3, r0
 8003340:	b29b      	uxth	r3, r3
 8003342:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8003346:	429a      	cmp	r2, r3
 8003348:	d284      	bcs.n	8003254 <motor_drive+0x60>
				imax = (uint16_t)adcReading.current.realValue;
 800334a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800334c:	4618      	mov	r0, r3
 800334e:	f7fd fd25 	bl	8000d9c <__aeabi_f2uiz>
 8003352:	4603      	mov	r3, r0
 8003354:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		timeNow = HAL_GetTick();
 8003358:	e77c      	b.n	8003254 <motor_drive+0x60>
			if( (HAL_MAX_DELAY - timeStart + timeNow) >= runTime) break;
 800335a:	bf00      	nop
			}
		}
	}
	// stop PWM and ADC sample timers
	HAL_GPIO_WritePin(motorPort, motorPin, RESET); // disable motor driver
 800335c:	8b7b      	ldrh	r3, [r7, #26]
 800335e:	2200      	movs	r2, #0
 8003360:	4619      	mov	r1, r3
 8003362:	69f8      	ldr	r0, [r7, #28]
 8003364:	f002 f910 	bl	8005588 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3); // stop PWM signal to step the motor
 8003368:	2108      	movs	r1, #8
 800336a:	4807      	ldr	r0, [pc, #28]	@ (8003388 <motor_drive+0x194>)
 800336c:	f004 f81e 	bl	80073ac <HAL_TIM_PWM_Stop>
	//HAL_ADC_Stop_DMA(&hadc1); // stop ADC conversion if there was one triggered before exiting the while(1)
	HAL_TIM_PWM_Stop_IT(&htim4, TIM_CHANNEL_4); // stop timer triggering adc conversions
 8003370:	210c      	movs	r1, #12
 8003372:	4807      	ldr	r0, [pc, #28]	@ (8003390 <motor_drive+0x19c>)
 8003374:	f004 f96e 	bl	8007654 <HAL_TIM_PWM_Stop_IT>

	return imax;
 8003378:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
}
 800337c:	4618      	mov	r0, r3
 800337e:	374c      	adds	r7, #76	@ 0x4c
 8003380:	46bd      	mov	sp, r7
 8003382:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003386:	bf00      	nop
 8003388:	20000194 	.word	0x20000194
 800338c:	40011000 	.word	0x40011000
 8003390:	200001dc 	.word	0x200001dc
 8003394:	0800a9e8 	.word	0x0800a9e8
 8003398:	20000186 	.word	0x20000186
 800339c:	20000189 	.word	0x20000189
 80033a0:	0800baa0 	.word	0x0800baa0
 80033a4:	2000018b 	.word	0x2000018b
 80033a8:	0800bac0 	.word	0x0800bac0
 80033ac:	00000000 	.word	0x00000000

080033b0 <adc_get_values>:


/*************************************** ADC CONTROL FUNCTIONS ***************************************/

adcScan_t adc_get_values(void){
 80033b0:	b5b0      	push	{r4, r5, r7, lr}
 80033b2:	b08e      	sub	sp, #56	@ 0x38
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
	//	const float AVG_SLOPE_avg = 4.3, AVG_SLOPE_min = 4.0, AVG_SLOPE_max = 4.6; // average slope [mV/C]
	//	const float V25_avg = 1430, V25_min = 1340, V25_max = 1520 ; // Voltage at 25 degrees [mV]
//	const float AVG_SLOPE_avg = 4.3, V25_avg = 1430;
//	const float VOLT_SLOPE = 0.0083, VOLT_OFFSET = 0.3963;
//	const float AMP_SLOPE = 0.163, AMP_OFFSET = 7.3581;
	uint16_t adcBuffer[ADC_BUFFER] = {'\0'}; // store 3 ADC measurements in DMA mode: [Vin0,Im0,TempInt0,Vin1,Im1,...]
 80033b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033bc:	2200      	movs	r2, #0
 80033be:	601a      	str	r2, [r3, #0]
 80033c0:	809a      	strh	r2, [r3, #4]
	uint32_t vAccum = 0, iAccum = 0, tAccum = 0;
 80033c2:	2300      	movs	r3, #0
 80033c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80033c6:	2300      	movs	r3, #0
 80033c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80033ca:	2300      	movs	r3, #0
 80033cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	adcScan_t adc = {.current = {0,0}, .voltage = {0,0}, .temperature = {0,0} };
 80033ce:	f107 030c 	add.w	r3, r7, #12
 80033d2:	2200      	movs	r2, #0
 80033d4:	601a      	str	r2, [r3, #0]
 80033d6:	605a      	str	r2, [r3, #4]
 80033d8:	609a      	str	r2, [r3, #8]
 80033da:	60da      	str	r2, [r3, #12]
 80033dc:	611a      	str	r2, [r3, #16]
 80033de:	615a      	str	r2, [r3, #20]

	// Sample ADC scan and fill the DMA buffer (3 channels: AIN10, AIN11, TEMPINT)
	for(uint16_t j = 0; j < ADC_SAMPLES; j++){
 80033e0:	2300      	movs	r3, #0
 80033e2:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80033e4:	e018      	b.n	8003418 <adc_get_values+0x68>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcBuffer, ADC_BUFFER);
 80033e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033ea:	2203      	movs	r2, #3
 80033ec:	4619      	mov	r1, r3
 80033ee:	4860      	ldr	r0, [pc, #384]	@ (8003570 <adc_get_values+0x1c0>)
 80033f0:	f000 ffb2 	bl	8004358 <HAL_ADC_Start_DMA>
		vAccum += adcBuffer[0];
 80033f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80033f6:	461a      	mov	r2, r3
 80033f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033fa:	4413      	add	r3, r2
 80033fc:	637b      	str	r3, [r7, #52]	@ 0x34
		iAccum += adcBuffer[1];
 80033fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003400:	461a      	mov	r2, r3
 8003402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003404:	4413      	add	r3, r2
 8003406:	633b      	str	r3, [r7, #48]	@ 0x30
		tAccum += adcBuffer[2];
 8003408:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800340a:	461a      	mov	r2, r3
 800340c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800340e:	4413      	add	r3, r2
 8003410:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for(uint16_t j = 0; j < ADC_SAMPLES; j++){
 8003412:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003414:	3301      	adds	r3, #1
 8003416:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8003418:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800341a:	2b63      	cmp	r3, #99	@ 0x63
 800341c:	d9e3      	bls.n	80033e6 <adc_get_values+0x36>
//		HAL_Delay(1);
	}

	HAL_ADC_Stop_DMA(&hadc1); // stop ADC conversions
 800341e:	4854      	ldr	r0, [pc, #336]	@ (8003570 <adc_get_values+0x1c0>)
 8003420:	f001 f878 	bl	8004514 <HAL_ADC_Stop_DMA>
//		iAccum += adcBuffer[i+1];
//		tAccum += adcBuffer[i+2];
//	}
	// calculate averages and real values
	// voltage
	adc.voltage.rawValue = (uint16_t) ( vAccum / ADC_SAMPLES ); // ADC counts, divide by 3 num of buffer slots since each scan has 3 readings
 8003424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003426:	4a53      	ldr	r2, [pc, #332]	@ (8003574 <adc_get_values+0x1c4>)
 8003428:	fba2 2303 	umull	r2, r3, r2, r3
 800342c:	095b      	lsrs	r3, r3, #5
 800342e:	b29b      	uxth	r3, r3
 8003430:	81bb      	strh	r3, [r7, #12]
	adc.voltage.realValue = (float) adc.voltage.rawValue * ADC_V_SLOPE + ADC_V_OFFSET; // calibration coeff should be taken from eeprom
 8003432:	89bb      	ldrh	r3, [r7, #12]
 8003434:	4618      	mov	r0, r3
 8003436:	f7fd fc33 	bl	8000ca0 <__aeabi_ui2f>
 800343a:	4603      	mov	r3, r0
 800343c:	4618      	mov	r0, r3
 800343e:	f7fd f89f 	bl	8000580 <__aeabi_f2d>
 8003442:	a33d      	add	r3, pc, #244	@ (adr r3, 8003538 <adc_get_values+0x188>)
 8003444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003448:	f7fd f8f2 	bl	8000630 <__aeabi_dmul>
 800344c:	4602      	mov	r2, r0
 800344e:	460b      	mov	r3, r1
 8003450:	4610      	mov	r0, r2
 8003452:	4619      	mov	r1, r3
 8003454:	a33a      	add	r3, pc, #232	@ (adr r3, 8003540 <adc_get_values+0x190>)
 8003456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800345a:	f7fc ff33 	bl	80002c4 <__adddf3>
 800345e:	4602      	mov	r2, r0
 8003460:	460b      	mov	r3, r1
 8003462:	4610      	mov	r0, r2
 8003464:	4619      	mov	r1, r3
 8003466:	f7fd fb15 	bl	8000a94 <__aeabi_d2f>
 800346a:	4603      	mov	r3, r0
 800346c:	613b      	str	r3, [r7, #16]
	// current
	adc.current.rawValue = (uint16_t) ( iAccum / ADC_SAMPLES ); // ADC counts
 800346e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003470:	4a40      	ldr	r2, [pc, #256]	@ (8003574 <adc_get_values+0x1c4>)
 8003472:	fba2 2303 	umull	r2, r3, r2, r3
 8003476:	095b      	lsrs	r3, r3, #5
 8003478:	b29b      	uxth	r3, r3
 800347a:	82bb      	strh	r3, [r7, #20]
	adc.current.realValue =  (float) adc.current.rawValue * ADC_I_SLOPE + ADC_I_OFFSET; // mA - opAmp G = 50, Rsense = 0.10 ohm
 800347c:	8abb      	ldrh	r3, [r7, #20]
 800347e:	4618      	mov	r0, r3
 8003480:	f7fd fc0e 	bl	8000ca0 <__aeabi_ui2f>
 8003484:	4603      	mov	r3, r0
 8003486:	4618      	mov	r0, r3
 8003488:	f7fd f87a 	bl	8000580 <__aeabi_f2d>
 800348c:	a32e      	add	r3, pc, #184	@ (adr r3, 8003548 <adc_get_values+0x198>)
 800348e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003492:	f7fd f8cd 	bl	8000630 <__aeabi_dmul>
 8003496:	4602      	mov	r2, r0
 8003498:	460b      	mov	r3, r1
 800349a:	4610      	mov	r0, r2
 800349c:	4619      	mov	r1, r3
 800349e:	a32c      	add	r3, pc, #176	@ (adr r3, 8003550 <adc_get_values+0x1a0>)
 80034a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a4:	f7fc ff0e 	bl	80002c4 <__adddf3>
 80034a8:	4602      	mov	r2, r0
 80034aa:	460b      	mov	r3, r1
 80034ac:	4610      	mov	r0, r2
 80034ae:	4619      	mov	r1, r3
 80034b0:	f7fd faf0 	bl	8000a94 <__aeabi_d2f>
 80034b4:	4603      	mov	r3, r0
 80034b6:	61bb      	str	r3, [r7, #24]
	// internal temperature
	adc.temperature.rawValue = (uint16_t) ( tAccum / ADC_SAMPLES ); // ADC counts
 80034b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034ba:	4a2e      	ldr	r2, [pc, #184]	@ (8003574 <adc_get_values+0x1c4>)
 80034bc:	fba2 2303 	umull	r2, r3, r2, r3
 80034c0:	095b      	lsrs	r3, r3, #5
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	83bb      	strh	r3, [r7, #28]
	adc.temperature.realValue = ( (ADC_T_V25_OFFSET - (adc.temperature.rawValue * (3300.0/4096.0) ) )  / ADC_T_SLOPE) + 25.0 ;
 80034c6:	8bbb      	ldrh	r3, [r7, #28]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7fd f847 	bl	800055c <__aeabi_i2d>
 80034ce:	a322      	add	r3, pc, #136	@ (adr r3, 8003558 <adc_get_values+0x1a8>)
 80034d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d4:	f7fd f8ac 	bl	8000630 <__aeabi_dmul>
 80034d8:	4602      	mov	r2, r0
 80034da:	460b      	mov	r3, r1
 80034dc:	a120      	add	r1, pc, #128	@ (adr r1, 8003560 <adc_get_values+0x1b0>)
 80034de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80034e2:	f7fc feed 	bl	80002c0 <__aeabi_dsub>
 80034e6:	4602      	mov	r2, r0
 80034e8:	460b      	mov	r3, r1
 80034ea:	4610      	mov	r0, r2
 80034ec:	4619      	mov	r1, r3
 80034ee:	a31e      	add	r3, pc, #120	@ (adr r3, 8003568 <adc_get_values+0x1b8>)
 80034f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f4:	f7fd f9c6 	bl	8000884 <__aeabi_ddiv>
 80034f8:	4602      	mov	r2, r0
 80034fa:	460b      	mov	r3, r1
 80034fc:	4610      	mov	r0, r2
 80034fe:	4619      	mov	r1, r3
 8003500:	f04f 0200 	mov.w	r2, #0
 8003504:	4b1c      	ldr	r3, [pc, #112]	@ (8003578 <adc_get_values+0x1c8>)
 8003506:	f7fc fedd 	bl	80002c4 <__adddf3>
 800350a:	4602      	mov	r2, r0
 800350c:	460b      	mov	r3, r1
 800350e:	4610      	mov	r0, r2
 8003510:	4619      	mov	r1, r3
 8003512:	f7fd fabf 	bl	8000a94 <__aeabi_d2f>
 8003516:	4603      	mov	r3, r0
 8003518:	623b      	str	r3, [r7, #32]

	return adc;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	461d      	mov	r5, r3
 800351e:	f107 040c 	add.w	r4, r7, #12
 8003522:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003524:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003526:	e894 0003 	ldmia.w	r4, {r0, r1}
 800352a:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	3738      	adds	r7, #56	@ 0x38
 8003532:	46bd      	mov	sp, r7
 8003534:	bdb0      	pop	{r4, r5, r7, pc}
 8003536:	bf00      	nop
 8003538:	2474538f 	.word	0x2474538f
 800353c:	3f80ff97 	.word	0x3f80ff97
 8003540:	acd9e83e 	.word	0xacd9e83e
 8003544:	3fd95cfa 	.word	0x3fd95cfa
 8003548:	1a9fbe77 	.word	0x1a9fbe77
 800354c:	3fc4dd2f 	.word	0x3fc4dd2f
 8003550:	c432ca58 	.word	0xc432ca58
 8003554:	401d6eb1 	.word	0x401d6eb1
 8003558:	00000000 	.word	0x00000000
 800355c:	3fe9c800 	.word	0x3fe9c800
 8003560:	00000000 	.word	0x00000000
 8003564:	40965800 	.word	0x40965800
 8003568:	33333333 	.word	0x33333333
 800356c:	40113333 	.word	0x40113333
 8003570:	200000bc 	.word	0x200000bc
 8003574:	51eb851f 	.word	0x51eb851f
 8003578:	40390000 	.word	0x40390000

0800357c <eeprom_write>:
 * Max freq 1 MHz, 1 Kbit memory (1024 bit), 128 x 8-bit block, 5 ms page write,
 * 8-Byte write pages, fixed device address 1010-xxxRW, 128 bytes memory range {00-7F} */

/* Write 1 byte in epprom
 * Parameters: memory address [0-127], 1 byte of data */
void eeprom_write(uint8_t memoryAddress, uint8_t dataByte){
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af02      	add	r7, sp, #8
 8003582:	4603      	mov	r3, r0
 8003584:	460a      	mov	r2, r1
 8003586:	71fb      	strb	r3, [r7, #7]
 8003588:	4613      	mov	r3, r2
 800358a:	71bb      	strb	r3, [r7, #6]
	uint8_t txBuff[2] = {memoryAddress, dataByte};
 800358c:	79fb      	ldrb	r3, [r7, #7]
 800358e:	733b      	strb	r3, [r7, #12]
 8003590:	79bb      	ldrb	r3, [r7, #6]
 8003592:	737b      	strb	r3, [r7, #13]
	if(memoryAddress <= eeprom.MAX_MEM_ADDRESS ){
 8003594:	79fb      	ldrb	r3, [r7, #7]
 8003596:	b29a      	uxth	r2, r3
 8003598:	4b0e      	ldr	r3, [pc, #56]	@ (80035d4 <eeprom_write+0x58>)
 800359a:	885b      	ldrh	r3, [r3, #2]
 800359c:	429a      	cmp	r2, r3
 800359e:	d80d      	bhi.n	80035bc <eeprom_write+0x40>
		HAL_I2C_Master_Transmit(&hi2c1, EEPROM_BUS_ADDRESS , txBuff, 2, HAL_MAX_DELAY); // send word address, value
 80035a0:	f107 020c 	add.w	r2, r7, #12
 80035a4:	f04f 33ff 	mov.w	r3, #4294967295
 80035a8:	9300      	str	r3, [sp, #0]
 80035aa:	2302      	movs	r3, #2
 80035ac:	21a0      	movs	r1, #160	@ 0xa0
 80035ae:	480a      	ldr	r0, [pc, #40]	@ (80035d8 <eeprom_write+0x5c>)
 80035b0:	f002 f946 	bl	8005840 <HAL_I2C_Master_Transmit>
		HAL_Delay(10); // wait for data to be written
 80035b4:	200a      	movs	r0, #10
 80035b6:	f000 fdd3 	bl	8004160 <HAL_Delay>
	} else {
		printf("** ERROR: memory address %x out of range [0-%i] **\r\n", memoryAddress, eeprom.MAX_MEM_ADDRESS);
	}
}
 80035ba:	e006      	b.n	80035ca <eeprom_write+0x4e>
		printf("** ERROR: memory address %x out of range [0-%i] **\r\n", memoryAddress, eeprom.MAX_MEM_ADDRESS);
 80035bc:	79fb      	ldrb	r3, [r7, #7]
 80035be:	4a05      	ldr	r2, [pc, #20]	@ (80035d4 <eeprom_write+0x58>)
 80035c0:	8852      	ldrh	r2, [r2, #2]
 80035c2:	4619      	mov	r1, r3
 80035c4:	4805      	ldr	r0, [pc, #20]	@ (80035dc <eeprom_write+0x60>)
 80035c6:	f005 fe81 	bl	80092cc <iprintf>
}
 80035ca:	bf00      	nop
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	20000008 	.word	0x20000008
 80035d8:	20000130 	.word	0x20000130
 80035dc:	0800bb20 	.word	0x0800bb20

080035e0 <eeprom_read>:

/* Read 1 byte from epprom
 * Parameters: memory address [0-127]
 * Returns 1 byte of data */
uint8_t eeprom_read(uint8_t memoryAddress){
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af02      	add	r7, sp, #8
 80035e6:	4603      	mov	r3, r0
 80035e8:	71fb      	strb	r3, [r7, #7]
	uint8_t addressBuffer[1] = {memoryAddress};
 80035ea:	79fb      	ldrb	r3, [r7, #7]
 80035ec:	733b      	strb	r3, [r7, #12]
	uint8_t rxBuff[1] = {0};
 80035ee:	2300      	movs	r3, #0
 80035f0:	723b      	strb	r3, [r7, #8]
	if(memoryAddress <= eeprom.MAX_MEM_ADDRESS ){
 80035f2:	79fb      	ldrb	r3, [r7, #7]
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	4b15      	ldr	r3, [pc, #84]	@ (800364c <eeprom_read+0x6c>)
 80035f8:	885b      	ldrh	r3, [r3, #2]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d81a      	bhi.n	8003634 <eeprom_read+0x54>
		HAL_I2C_Master_Transmit(&hi2c1, EEPROM_BUS_ADDRESS , addressBuffer, 1, HAL_MAX_DELAY); // dummy write to set pointer to desired memory address
 80035fe:	f107 020c 	add.w	r2, r7, #12
 8003602:	f04f 33ff 	mov.w	r3, #4294967295
 8003606:	9300      	str	r3, [sp, #0]
 8003608:	2301      	movs	r3, #1
 800360a:	21a0      	movs	r1, #160	@ 0xa0
 800360c:	4810      	ldr	r0, [pc, #64]	@ (8003650 <eeprom_read+0x70>)
 800360e:	f002 f917 	bl	8005840 <HAL_I2C_Master_Transmit>
		HAL_Delay(10);
 8003612:	200a      	movs	r0, #10
 8003614:	f000 fda4 	bl	8004160 <HAL_Delay>
		HAL_I2C_Master_Receive(&hi2c1, EEPROM_BUS_ADDRESS, rxBuff, 1, HAL_MAX_DELAY); // send command to read 1 byte at current memory address pointer
 8003618:	f107 0208 	add.w	r2, r7, #8
 800361c:	f04f 33ff 	mov.w	r3, #4294967295
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	2301      	movs	r3, #1
 8003624:	21a0      	movs	r1, #160	@ 0xa0
 8003626:	480a      	ldr	r0, [pc, #40]	@ (8003650 <eeprom_read+0x70>)
 8003628:	f002 fa08 	bl	8005a3c <HAL_I2C_Master_Receive>
		HAL_Delay(10);
 800362c:	200a      	movs	r0, #10
 800362e:	f000 fd97 	bl	8004160 <HAL_Delay>
 8003632:	e006      	b.n	8003642 <eeprom_read+0x62>
	} else {
		printf("** ERROR: memory address %x out of range [0-%i] **\r\n", memoryAddress, eeprom.MAX_MEM_ADDRESS);
 8003634:	79fb      	ldrb	r3, [r7, #7]
 8003636:	4a05      	ldr	r2, [pc, #20]	@ (800364c <eeprom_read+0x6c>)
 8003638:	8852      	ldrh	r2, [r2, #2]
 800363a:	4619      	mov	r1, r3
 800363c:	4805      	ldr	r0, [pc, #20]	@ (8003654 <eeprom_read+0x74>)
 800363e:	f005 fe45 	bl	80092cc <iprintf>
	}
	return ((uint8_t) rxBuff[0]);
 8003642:	7a3b      	ldrb	r3, [r7, #8]
}
 8003644:	4618      	mov	r0, r3
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	20000008 	.word	0x20000008
 8003650:	20000130 	.word	0x20000130
 8003654:	0800bb20 	.word	0x0800bb20

08003658 <eeprom_clear>:

/* Clear memory within a given range of addresses
 * Parameters: start address and end address (inclusive) [0-127]
 * Returns number of blocks cleared */
uint8_t eeprom_clear(uint8_t memoryStart, uint8_t memoryEnd){
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	4603      	mov	r3, r0
 8003660:	460a      	mov	r2, r1
 8003662:	71fb      	strb	r3, [r7, #7]
 8003664:	4613      	mov	r3, r2
 8003666:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	if( (memoryStart >= 0) && (memoryEnd <= eeprom.MAX_MEM_ADDRESS) ){
 8003668:	79bb      	ldrb	r3, [r7, #6]
 800366a:	b29a      	uxth	r2, r3
 800366c:	4b10      	ldr	r3, [pc, #64]	@ (80036b0 <eeprom_clear+0x58>)
 800366e:	885b      	ldrh	r3, [r3, #2]
 8003670:	429a      	cmp	r2, r3
 8003672:	d80f      	bhi.n	8003694 <eeprom_clear+0x3c>
		for(i = memoryStart ; i <= memoryEnd ; i++){
 8003674:	79fb      	ldrb	r3, [r7, #7]
 8003676:	73fb      	strb	r3, [r7, #15]
 8003678:	e007      	b.n	800368a <eeprom_clear+0x32>
			eeprom_write(i, 0); // write 0 to corresponding byte
 800367a:	7bfb      	ldrb	r3, [r7, #15]
 800367c:	2100      	movs	r1, #0
 800367e:	4618      	mov	r0, r3
 8003680:	f7ff ff7c 	bl	800357c <eeprom_write>
		for(i = memoryStart ; i <= memoryEnd ; i++){
 8003684:	7bfb      	ldrb	r3, [r7, #15]
 8003686:	3301      	adds	r3, #1
 8003688:	73fb      	strb	r3, [r7, #15]
 800368a:	7bfa      	ldrb	r2, [r7, #15]
 800368c:	79bb      	ldrb	r3, [r7, #6]
 800368e:	429a      	cmp	r2, r3
 8003690:	d9f3      	bls.n	800367a <eeprom_clear+0x22>
 8003692:	e005      	b.n	80036a0 <eeprom_clear+0x48>
		}
	} else {
		printf("** ERROR: memory out of range [0-%i] **\r\n", eeprom.MAX_MEM_ADDRESS);
 8003694:	4b06      	ldr	r3, [pc, #24]	@ (80036b0 <eeprom_clear+0x58>)
 8003696:	885b      	ldrh	r3, [r3, #2]
 8003698:	4619      	mov	r1, r3
 800369a:	4806      	ldr	r0, [pc, #24]	@ (80036b4 <eeprom_clear+0x5c>)
 800369c:	f005 fe16 	bl	80092cc <iprintf>
	}
	return (i-memoryStart);
 80036a0:	7bfa      	ldrb	r2, [r7, #15]
 80036a2:	79fb      	ldrb	r3, [r7, #7]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	b2db      	uxtb	r3, r3
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3710      	adds	r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	20000008 	.word	0x20000008
 80036b4:	0800bb58 	.word	0x0800bb58

080036b8 <eeprom_print_memory_map>:

/* print memory map on eeprom
 * {AL_TUBECOUNT, AL_TYPE, AL_SN1, AL_SN2, AL_CONFIGED, M_RUNTIME } */
void eeprom_print_memory_map(void){
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0
	printf("\r\n");
 80036bc:	4846      	ldr	r0, [pc, #280]	@ (80037d8 <eeprom_print_memory_map+0x120>)
 80036be:	f005 fe6d 	bl	800939c <puts>
	printf("|========================================|\r\n");
 80036c2:	4846      	ldr	r0, [pc, #280]	@ (80037dc <eeprom_print_memory_map+0x124>)
 80036c4:	f005 fe6a 	bl	800939c <puts>
	printf("|              MEMORY MAP                |\r\n");
 80036c8:	4845      	ldr	r0, [pc, #276]	@ (80037e0 <eeprom_print_memory_map+0x128>)
 80036ca:	f005 fe67 	bl	800939c <puts>
	printf("|========================================|\r\n");
 80036ce:	4843      	ldr	r0, [pc, #268]	@ (80037dc <eeprom_print_memory_map+0x124>)
 80036d0:	f005 fe64 	bl	800939c <puts>
	// autolauncher aprameters
	printf("| [%03i]        AL_TUBECOUNT              |\r\n", AL_TUBECOUNT1B);
 80036d4:	2100      	movs	r1, #0
 80036d6:	4843      	ldr	r0, [pc, #268]	@ (80037e4 <eeprom_print_memory_map+0x12c>)
 80036d8:	f005 fdf8 	bl	80092cc <iprintf>
	printf("| [%03i]        AL_TYPE                   |\r\n", AL_TYPE1B);
 80036dc:	2101      	movs	r1, #1
 80036de:	4842      	ldr	r0, [pc, #264]	@ (80037e8 <eeprom_print_memory_map+0x130>)
 80036e0:	f005 fdf4 	bl	80092cc <iprintf>
	printf("| [%03i]        AL_SN                     |\r\n", AL_SN1B);
 80036e4:	2102      	movs	r1, #2
 80036e6:	4841      	ldr	r0, [pc, #260]	@ (80037ec <eeprom_print_memory_map+0x134>)
 80036e8:	f005 fdf0 	bl	80092cc <iprintf>
	printf("| [%03i]        AL_CONFIGED               |\r\n", AL_CONFIGED1B);
 80036ec:	2103      	movs	r1, #3
 80036ee:	4840      	ldr	r0, [pc, #256]	@ (80037f0 <eeprom_print_memory_map+0x138>)
 80036f0:	f005 fdec 	bl	80092cc <iprintf>
	printf("|========================================|\r\n");
 80036f4:	4839      	ldr	r0, [pc, #228]	@ (80037dc <eeprom_print_memory_map+0x124>)
 80036f6:	f005 fe51 	bl	800939c <puts>
	// motor parameters
	printf("| [%03i-%03i]    M_RUNTIME               |\r\n", M_RUNTIME2B,M_RUNTIME2B+1);
 80036fa:	2209      	movs	r2, #9
 80036fc:	2108      	movs	r1, #8
 80036fe:	483d      	ldr	r0, [pc, #244]	@ (80037f4 <eeprom_print_memory_map+0x13c>)
 8003700:	f005 fde4 	bl	80092cc <iprintf>
	printf("| [%03i-%03i]    M_PWM_FREQ              |\r\n", M_PWM_FREQ2B, M_PWM_FREQ2B+1);
 8003704:	220b      	movs	r2, #11
 8003706:	210a      	movs	r1, #10
 8003708:	483b      	ldr	r0, [pc, #236]	@ (80037f8 <eeprom_print_memory_map+0x140>)
 800370a:	f005 fddf 	bl	80092cc <iprintf>
	printf("| [%03i-%03i]    M_SAMPLEPERIOD          |\r\n", M_SAMPLEPERIOD2B, M_SAMPLEPERIOD2B+1);
 800370e:	220d      	movs	r2, #13
 8003710:	210c      	movs	r1, #12
 8003712:	483a      	ldr	r0, [pc, #232]	@ (80037fc <eeprom_print_memory_map+0x144>)
 8003714:	f005 fdda 	bl	80092cc <iprintf>
	printf("| [%03i-%03i]    M_WIRING1B              |\r\n", M_WIRING1B, M_WIRING1B+1);
 8003718:	220f      	movs	r2, #15
 800371a:	210e      	movs	r1, #14
 800371c:	4838      	ldr	r0, [pc, #224]	@ (8003800 <eeprom_print_memory_map+0x148>)
 800371e:	f005 fdd5 	bl	80092cc <iprintf>
	printf("|========================================|\r\n");
 8003722:	482e      	ldr	r0, [pc, #184]	@ (80037dc <eeprom_print_memory_map+0x124>)
 8003724:	f005 fe3a 	bl	800939c <puts>
	// use count
	printf("| [%03i-%03i]    M_1COUNT                  |\r\n", M_1COUNT2B, M_1COUNT2B+1);
 8003728:	2211      	movs	r2, #17
 800372a:	2110      	movs	r1, #16
 800372c:	4835      	ldr	r0, [pc, #212]	@ (8003804 <eeprom_print_memory_map+0x14c>)
 800372e:	f005 fdcd 	bl	80092cc <iprintf>
	printf("| [%03i-%03i]    M_2COUNT                  |\r\n", M_2COUNT2B, M_2COUNT2B+1);
 8003732:	2213      	movs	r2, #19
 8003734:	2112      	movs	r1, #18
 8003736:	4834      	ldr	r0, [pc, #208]	@ (8003808 <eeprom_print_memory_map+0x150>)
 8003738:	f005 fdc8 	bl	80092cc <iprintf>
	printf("| [%03i-%03i]    M_3COUNT                  |\r\n", M_3COUNT2B, M_3COUNT2B+1);
 800373c:	2215      	movs	r2, #21
 800373e:	2114      	movs	r1, #20
 8003740:	4832      	ldr	r0, [pc, #200]	@ (800380c <eeprom_print_memory_map+0x154>)
 8003742:	f005 fdc3 	bl	80092cc <iprintf>
	printf("| [%03i-%03i]    M_4COUNT                  |\r\n", M_4COUNT2B, M_4COUNT2B+1);
 8003746:	2217      	movs	r2, #23
 8003748:	2116      	movs	r1, #22
 800374a:	4831      	ldr	r0, [pc, #196]	@ (8003810 <eeprom_print_memory_map+0x158>)
 800374c:	f005 fdbe 	bl	80092cc <iprintf>
	printf("| [%03i-%03i]    M_5COUNT                  |\r\n", M_5COUNT2B, M_5COUNT2B+1);
 8003750:	2219      	movs	r2, #25
 8003752:	2118      	movs	r1, #24
 8003754:	482f      	ldr	r0, [pc, #188]	@ (8003814 <eeprom_print_memory_map+0x15c>)
 8003756:	f005 fdb9 	bl	80092cc <iprintf>
	printf("| [%03i-%03i]    M_6COUNT                  |\r\n", M_6COUNT2B, M_6COUNT2B+1);
 800375a:	221b      	movs	r2, #27
 800375c:	211a      	movs	r1, #26
 800375e:	482e      	ldr	r0, [pc, #184]	@ (8003818 <eeprom_print_memory_map+0x160>)
 8003760:	f005 fdb4 	bl	80092cc <iprintf>
	printf("| [%03i-%03i]    M_7COUNT                  |\r\n", M_7COUNT2B, M_7COUNT2B+1);
 8003764:	221d      	movs	r2, #29
 8003766:	211c      	movs	r1, #28
 8003768:	482c      	ldr	r0, [pc, #176]	@ (800381c <eeprom_print_memory_map+0x164>)
 800376a:	f005 fdaf 	bl	80092cc <iprintf>
	printf("| [%03i-%03i]    M_8COUNT                  |\r\n", M_8COUNT2B, M_8COUNT2B+1);
 800376e:	221f      	movs	r2, #31
 8003770:	211e      	movs	r1, #30
 8003772:	482b      	ldr	r0, [pc, #172]	@ (8003820 <eeprom_print_memory_map+0x168>)
 8003774:	f005 fdaa 	bl	80092cc <iprintf>
	printf("|========================================|\r\n");
 8003778:	4818      	ldr	r0, [pc, #96]	@ (80037dc <eeprom_print_memory_map+0x124>)
 800377a:	f005 fe0f 	bl	800939c <puts>
	// Max current
	printf("| [%03i-%03i]    M_1MXAMP                  |\r\n", M_1MXAMP2B, M_1MXAMP2B+1);
 800377e:	2221      	movs	r2, #33	@ 0x21
 8003780:	2120      	movs	r1, #32
 8003782:	4828      	ldr	r0, [pc, #160]	@ (8003824 <eeprom_print_memory_map+0x16c>)
 8003784:	f005 fda2 	bl	80092cc <iprintf>
	printf("| [%03i-%03i]    M_2MXAMP                  |\r\n", M_2MXAMP2B, M_2MXAMP2B+1);
 8003788:	2223      	movs	r2, #35	@ 0x23
 800378a:	2122      	movs	r1, #34	@ 0x22
 800378c:	4826      	ldr	r0, [pc, #152]	@ (8003828 <eeprom_print_memory_map+0x170>)
 800378e:	f005 fd9d 	bl	80092cc <iprintf>
	printf("| [%03i-%03i]    M_3MXAMP                  |\r\n", M_3MXAMP2B, M_3MXAMP2B+1);
 8003792:	2225      	movs	r2, #37	@ 0x25
 8003794:	2124      	movs	r1, #36	@ 0x24
 8003796:	4825      	ldr	r0, [pc, #148]	@ (800382c <eeprom_print_memory_map+0x174>)
 8003798:	f005 fd98 	bl	80092cc <iprintf>
	printf("| [%03i-%03i]    M_4MXAMP                  |\r\n", M_4MXAMP2B, M_4MXAMP2B+1);
 800379c:	2227      	movs	r2, #39	@ 0x27
 800379e:	2126      	movs	r1, #38	@ 0x26
 80037a0:	4823      	ldr	r0, [pc, #140]	@ (8003830 <eeprom_print_memory_map+0x178>)
 80037a2:	f005 fd93 	bl	80092cc <iprintf>
	printf("| [%03i-%03i]    M_5MXAMP                  |\r\n", M_5MXAMP2B, M_5MXAMP2B+1);
 80037a6:	2229      	movs	r2, #41	@ 0x29
 80037a8:	2128      	movs	r1, #40	@ 0x28
 80037aa:	4822      	ldr	r0, [pc, #136]	@ (8003834 <eeprom_print_memory_map+0x17c>)
 80037ac:	f005 fd8e 	bl	80092cc <iprintf>
	printf("| [%03i-%03i]    M_6MXAMP                  |\r\n", M_6MXAMP2B, M_6MXAMP2B+1);
 80037b0:	222b      	movs	r2, #43	@ 0x2b
 80037b2:	212a      	movs	r1, #42	@ 0x2a
 80037b4:	4820      	ldr	r0, [pc, #128]	@ (8003838 <eeprom_print_memory_map+0x180>)
 80037b6:	f005 fd89 	bl	80092cc <iprintf>
	printf("| [%03i-%03i]    M_7MXAMP                  |\r\n", M_7MXAMP2B, M_7MXAMP2B+1);
 80037ba:	222d      	movs	r2, #45	@ 0x2d
 80037bc:	212c      	movs	r1, #44	@ 0x2c
 80037be:	481f      	ldr	r0, [pc, #124]	@ (800383c <eeprom_print_memory_map+0x184>)
 80037c0:	f005 fd84 	bl	80092cc <iprintf>
	printf("| [%03i-%03i]    M_8MXAMP                  |\r\n", M_8MXAMP2B, M_8MXAMP2B+1);
 80037c4:	222f      	movs	r2, #47	@ 0x2f
 80037c6:	212e      	movs	r1, #46	@ 0x2e
 80037c8:	481d      	ldr	r0, [pc, #116]	@ (8003840 <eeprom_print_memory_map+0x188>)
 80037ca:	f005 fd7f 	bl	80092cc <iprintf>
	printf("|========================================|\r\n");
 80037ce:	4803      	ldr	r0, [pc, #12]	@ (80037dc <eeprom_print_memory_map+0x124>)
 80037d0:	f005 fde4 	bl	800939c <puts>
}
 80037d4:	bf00      	nop
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	0800a9e8 	.word	0x0800a9e8
 80037dc:	0800bb84 	.word	0x0800bb84
 80037e0:	0800bbb0 	.word	0x0800bbb0
 80037e4:	0800bbdc 	.word	0x0800bbdc
 80037e8:	0800bc0c 	.word	0x0800bc0c
 80037ec:	0800bc3c 	.word	0x0800bc3c
 80037f0:	0800bc6c 	.word	0x0800bc6c
 80037f4:	0800bc9c 	.word	0x0800bc9c
 80037f8:	0800bccc 	.word	0x0800bccc
 80037fc:	0800bcfc 	.word	0x0800bcfc
 8003800:	0800bd2c 	.word	0x0800bd2c
 8003804:	0800bd5c 	.word	0x0800bd5c
 8003808:	0800bd8c 	.word	0x0800bd8c
 800380c:	0800bdbc 	.word	0x0800bdbc
 8003810:	0800bdec 	.word	0x0800bdec
 8003814:	0800be1c 	.word	0x0800be1c
 8003818:	0800be4c 	.word	0x0800be4c
 800381c:	0800be7c 	.word	0x0800be7c
 8003820:	0800beac 	.word	0x0800beac
 8003824:	0800bedc 	.word	0x0800bedc
 8003828:	0800bf0c 	.word	0x0800bf0c
 800382c:	0800bf3c 	.word	0x0800bf3c
 8003830:	0800bf6c 	.word	0x0800bf6c
 8003834:	0800bf9c 	.word	0x0800bf9c
 8003838:	0800bfcc 	.word	0x0800bfcc
 800383c:	0800bffc 	.word	0x0800bffc
 8003840:	0800c02c 	.word	0x0800c02c

08003844 <eeprom_write_nbytes>:


/* Write N bytes to eeprom
 * Parameters: starting address on eeprom, number of bytes to write, pointer to data of any type */
void eeprom_write_nbytes(uint8_t baseAddress, uint8_t bytes, void * pData){
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	4603      	mov	r3, r0
 800384c:	603a      	str	r2, [r7, #0]
 800384e:	71fb      	strb	r3, [r7, #7]
 8003850:	460b      	mov	r3, r1
 8003852:	71bb      	strb	r3, [r7, #6]
    uint8_t *ptr = 0;
 8003854:	2300      	movs	r3, #0
 8003856:	60bb      	str	r3, [r7, #8]
    //uint8_t data = 0;
 	for( uint8_t i = 0; i < bytes && i < 4; i++){
 8003858:	2300      	movs	r3, #0
 800385a:	73fb      	strb	r3, [r7, #15]
 800385c:	e010      	b.n	8003880 <eeprom_write_nbytes+0x3c>
		//uint8_t address = baseAddress+i;
 		ptr = pData+i; // cast to 1 byte before adding 1 to address
 800385e:	7bfb      	ldrb	r3, [r7, #15]
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	4413      	add	r3, r2
 8003864:	60bb      	str	r3, [r7, #8]
		//data = *ptr;
		eeprom_write(baseAddress+i, *ptr);
 8003866:	79fa      	ldrb	r2, [r7, #7]
 8003868:	7bfb      	ldrb	r3, [r7, #15]
 800386a:	4413      	add	r3, r2
 800386c:	b2da      	uxtb	r2, r3
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	4619      	mov	r1, r3
 8003874:	4610      	mov	r0, r2
 8003876:	f7ff fe81 	bl	800357c <eeprom_write>
 	for( uint8_t i = 0; i < bytes && i < 4; i++){
 800387a:	7bfb      	ldrb	r3, [r7, #15]
 800387c:	3301      	adds	r3, #1
 800387e:	73fb      	strb	r3, [r7, #15]
 8003880:	7bfa      	ldrb	r2, [r7, #15]
 8003882:	79bb      	ldrb	r3, [r7, #6]
 8003884:	429a      	cmp	r2, r3
 8003886:	d202      	bcs.n	800388e <eeprom_write_nbytes+0x4a>
 8003888:	7bfb      	ldrb	r3, [r7, #15]
 800388a:	2b03      	cmp	r3, #3
 800388c:	d9e7      	bls.n	800385e <eeprom_write_nbytes+0x1a>
	}
}
 800388e:	bf00      	nop
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <eeprom_read_nbytes>:

/* Read N bytes from eeprom
 * Parameters: starting address on eeprom, number of bytes to read, pointer to store data of any type */
void eeprom_read_nbytes(uint8_t baseAddress, uint8_t bytes, void * pData){
 8003896:	b580      	push	{r7, lr}
 8003898:	b084      	sub	sp, #16
 800389a:	af00      	add	r7, sp, #0
 800389c:	4603      	mov	r3, r0
 800389e:	603a      	str	r2, [r7, #0]
 80038a0:	71fb      	strb	r3, [r7, #7]
 80038a2:	460b      	mov	r3, r1
 80038a4:	71bb      	strb	r3, [r7, #6]
	uint8_t *ptr = 0;
 80038a6:	2300      	movs	r3, #0
 80038a8:	60bb      	str	r3, [r7, #8]
 	for( uint8_t i = 0; i < bytes && i < 4; i++){
 80038aa:	2300      	movs	r3, #0
 80038ac:	73fb      	strb	r3, [r7, #15]
 80038ae:	e011      	b.n	80038d4 <eeprom_read_nbytes+0x3e>
		//uint8_t address = baseAddress+i;
 		ptr = pData+i;
 80038b0:	7bfb      	ldrb	r3, [r7, #15]
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	4413      	add	r3, r2
 80038b6:	60bb      	str	r3, [r7, #8]
		//data = *ptr;
		*ptr = eeprom_read(baseAddress+i);
 80038b8:	79fa      	ldrb	r2, [r7, #7]
 80038ba:	7bfb      	ldrb	r3, [r7, #15]
 80038bc:	4413      	add	r3, r2
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7ff fe8d 	bl	80035e0 <eeprom_read>
 80038c6:	4603      	mov	r3, r0
 80038c8:	461a      	mov	r2, r3
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	701a      	strb	r2, [r3, #0]
 	for( uint8_t i = 0; i < bytes && i < 4; i++){
 80038ce:	7bfb      	ldrb	r3, [r7, #15]
 80038d0:	3301      	adds	r3, #1
 80038d2:	73fb      	strb	r3, [r7, #15]
 80038d4:	7bfa      	ldrb	r2, [r7, #15]
 80038d6:	79bb      	ldrb	r3, [r7, #6]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d202      	bcs.n	80038e2 <eeprom_read_nbytes+0x4c>
 80038dc:	7bfb      	ldrb	r3, [r7, #15]
 80038de:	2b03      	cmp	r3, #3
 80038e0:	d9e6      	bls.n	80038b0 <eeprom_read_nbytes+0x1a>
	}
}
 80038e2:	bf00      	nop
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80038ea:	b480      	push	{r7}
 80038ec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80038ee:	b672      	cpsid	i
}
 80038f0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80038f2:	bf00      	nop
 80038f4:	e7fd      	b.n	80038f2 <Error_Handler+0x8>
	...

080038f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80038fe:	4b15      	ldr	r3, [pc, #84]	@ (8003954 <HAL_MspInit+0x5c>)
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	4a14      	ldr	r2, [pc, #80]	@ (8003954 <HAL_MspInit+0x5c>)
 8003904:	f043 0301 	orr.w	r3, r3, #1
 8003908:	6193      	str	r3, [r2, #24]
 800390a:	4b12      	ldr	r3, [pc, #72]	@ (8003954 <HAL_MspInit+0x5c>)
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	60bb      	str	r3, [r7, #8]
 8003914:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003916:	4b0f      	ldr	r3, [pc, #60]	@ (8003954 <HAL_MspInit+0x5c>)
 8003918:	69db      	ldr	r3, [r3, #28]
 800391a:	4a0e      	ldr	r2, [pc, #56]	@ (8003954 <HAL_MspInit+0x5c>)
 800391c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003920:	61d3      	str	r3, [r2, #28]
 8003922:	4b0c      	ldr	r3, [pc, #48]	@ (8003954 <HAL_MspInit+0x5c>)
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800392a:	607b      	str	r3, [r7, #4]
 800392c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800392e:	4b0a      	ldr	r3, [pc, #40]	@ (8003958 <HAL_MspInit+0x60>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	60fb      	str	r3, [r7, #12]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800393a:	60fb      	str	r3, [r7, #12]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003942:	60fb      	str	r3, [r7, #12]
 8003944:	4a04      	ldr	r2, [pc, #16]	@ (8003958 <HAL_MspInit+0x60>)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800394a:	bf00      	nop
 800394c:	3714      	adds	r7, #20
 800394e:	46bd      	mov	sp, r7
 8003950:	bc80      	pop	{r7}
 8003952:	4770      	bx	lr
 8003954:	40021000 	.word	0x40021000
 8003958:	40010000 	.word	0x40010000

0800395c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800395c:	b480      	push	{r7}
 800395e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003960:	bf00      	nop
 8003962:	e7fd      	b.n	8003960 <NMI_Handler+0x4>

08003964 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003968:	bf00      	nop
 800396a:	e7fd      	b.n	8003968 <HardFault_Handler+0x4>

0800396c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003970:	bf00      	nop
 8003972:	e7fd      	b.n	8003970 <MemManage_Handler+0x4>

08003974 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003974:	b480      	push	{r7}
 8003976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003978:	bf00      	nop
 800397a:	e7fd      	b.n	8003978 <BusFault_Handler+0x4>

0800397c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003980:	bf00      	nop
 8003982:	e7fd      	b.n	8003980 <UsageFault_Handler+0x4>

08003984 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003988:	bf00      	nop
 800398a:	46bd      	mov	sp, r7
 800398c:	bc80      	pop	{r7}
 800398e:	4770      	bx	lr

08003990 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003994:	bf00      	nop
 8003996:	46bd      	mov	sp, r7
 8003998:	bc80      	pop	{r7}
 800399a:	4770      	bx	lr

0800399c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039a0:	bf00      	nop
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bc80      	pop	{r7}
 80039a6:	4770      	bx	lr

080039a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039ac:	f000 fbbc 	bl	8004128 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039b0:	bf00      	nop
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80039b8:	4803      	ldr	r0, [pc, #12]	@ (80039c8 <DMA1_Channel1_IRQHandler+0x14>)
 80039ba:	f001 fb2d 	bl	8005018 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  adcDMAFull = 1;
 80039be:	4b03      	ldr	r3, [pc, #12]	@ (80039cc <DMA1_Channel1_IRQHandler+0x18>)
 80039c0:	2201      	movs	r2, #1
 80039c2:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80039c4:	bf00      	nop
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	200000ec 	.word	0x200000ec
 80039cc:	2000018c 	.word	0x2000018c

080039d0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80039d4:	4803      	ldr	r0, [pc, #12]	@ (80039e4 <TIM4_IRQHandler+0x14>)
 80039d6:	f003 feef 	bl	80077b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  adcTimerTrigger = 1;
 80039da:	4b03      	ldr	r3, [pc, #12]	@ (80039e8 <TIM4_IRQHandler+0x18>)
 80039dc:	2201      	movs	r2, #1
 80039de:	701a      	strb	r2, [r3, #0]
  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
  /* USER CODE END TIM4_IRQn 1 */
}
 80039e0:	bf00      	nop
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	200001dc 	.word	0x200001dc
 80039e8:	2000018b 	.word	0x2000018b

080039ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80039f0:	4802      	ldr	r0, [pc, #8]	@ (80039fc <USART1_IRQHandler+0x10>)
 80039f2:	f004 fe3f 	bl	8008674 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80039f6:	bf00      	nop
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	20000224 	.word	0x20000224

08003a00 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003a08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bc80      	pop	{r7}
 8003a14:	4770      	bx	lr

08003a16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a16:	b480      	push	{r7}
 8003a18:	b083      	sub	sp, #12
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
 8003a1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003a26:	605a      	str	r2, [r3, #4]
  return 0;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bc80      	pop	{r7}
 8003a32:	4770      	bx	lr

08003a34 <_isatty>:

int _isatty(int file)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003a3c:	2301      	movs	r3, #1
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bc80      	pop	{r7}
 8003a46:	4770      	bx	lr

08003a48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3714      	adds	r7, #20
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bc80      	pop	{r7}
 8003a5e:	4770      	bx	lr

08003a60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a68:	4a14      	ldr	r2, [pc, #80]	@ (8003abc <_sbrk+0x5c>)
 8003a6a:	4b15      	ldr	r3, [pc, #84]	@ (8003ac0 <_sbrk+0x60>)
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a74:	4b13      	ldr	r3, [pc, #76]	@ (8003ac4 <_sbrk+0x64>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d102      	bne.n	8003a82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a7c:	4b11      	ldr	r3, [pc, #68]	@ (8003ac4 <_sbrk+0x64>)
 8003a7e:	4a12      	ldr	r2, [pc, #72]	@ (8003ac8 <_sbrk+0x68>)
 8003a80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a82:	4b10      	ldr	r3, [pc, #64]	@ (8003ac4 <_sbrk+0x64>)
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4413      	add	r3, r2
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d207      	bcs.n	8003aa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a90:	f005 fe86 	bl	80097a0 <__errno>
 8003a94:	4603      	mov	r3, r0
 8003a96:	220c      	movs	r2, #12
 8003a98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a9e:	e009      	b.n	8003ab4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003aa0:	4b08      	ldr	r3, [pc, #32]	@ (8003ac4 <_sbrk+0x64>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003aa6:	4b07      	ldr	r3, [pc, #28]	@ (8003ac4 <_sbrk+0x64>)
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4413      	add	r3, r2
 8003aae:	4a05      	ldr	r2, [pc, #20]	@ (8003ac4 <_sbrk+0x64>)
 8003ab0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3718      	adds	r7, #24
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	20005000 	.word	0x20005000
 8003ac0:	00000400 	.word	0x00000400
 8003ac4:	20000190 	.word	0x20000190
 8003ac8:	20000408 	.word	0x20000408

08003acc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ad0:	bf00      	nop
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bc80      	pop	{r7}
 8003ad6:	4770      	bx	lr

08003ad8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b08e      	sub	sp, #56	@ 0x38
 8003adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ade:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	601a      	str	r2, [r3, #0]
 8003ae6:	605a      	str	r2, [r3, #4]
 8003ae8:	609a      	str	r2, [r3, #8]
 8003aea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003aec:	f107 0320 	add.w	r3, r7, #32
 8003af0:	2200      	movs	r2, #0
 8003af2:	601a      	str	r2, [r3, #0]
 8003af4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003af6:	1d3b      	adds	r3, r7, #4
 8003af8:	2200      	movs	r2, #0
 8003afa:	601a      	str	r2, [r3, #0]
 8003afc:	605a      	str	r2, [r3, #4]
 8003afe:	609a      	str	r2, [r3, #8]
 8003b00:	60da      	str	r2, [r3, #12]
 8003b02:	611a      	str	r2, [r3, #16]
 8003b04:	615a      	str	r2, [r3, #20]
 8003b06:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003b08:	4b2d      	ldr	r3, [pc, #180]	@ (8003bc0 <MX_TIM3_Init+0xe8>)
 8003b0a:	4a2e      	ldr	r2, [pc, #184]	@ (8003bc4 <MX_TIM3_Init+0xec>)
 8003b0c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 8003b0e:	4b2c      	ldr	r3, [pc, #176]	@ (8003bc0 <MX_TIM3_Init+0xe8>)
 8003b10:	2207      	movs	r2, #7
 8003b12:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b14:	4b2a      	ldr	r3, [pc, #168]	@ (8003bc0 <MX_TIM3_Init+0xe8>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000-1;
 8003b1a:	4b29      	ldr	r3, [pc, #164]	@ (8003bc0 <MX_TIM3_Init+0xe8>)
 8003b1c:	f241 3287 	movw	r2, #4999	@ 0x1387
 8003b20:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b22:	4b27      	ldr	r3, [pc, #156]	@ (8003bc0 <MX_TIM3_Init+0xe8>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003b28:	4b25      	ldr	r3, [pc, #148]	@ (8003bc0 <MX_TIM3_Init+0xe8>)
 8003b2a:	2280      	movs	r2, #128	@ 0x80
 8003b2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003b2e:	4824      	ldr	r0, [pc, #144]	@ (8003bc0 <MX_TIM3_Init+0xe8>)
 8003b30:	f003 faf2 	bl	8007118 <HAL_TIM_Base_Init>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003b3a:	f7ff fed6 	bl	80038ea <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b42:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003b44:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003b48:	4619      	mov	r1, r3
 8003b4a:	481d      	ldr	r0, [pc, #116]	@ (8003bc0 <MX_TIM3_Init+0xe8>)
 8003b4c:	f003 ffe6 	bl	8007b1c <HAL_TIM_ConfigClockSource>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003b56:	f7ff fec8 	bl	80038ea <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003b5a:	4819      	ldr	r0, [pc, #100]	@ (8003bc0 <MX_TIM3_Init+0xe8>)
 8003b5c:	f003 fb2b 	bl	80071b6 <HAL_TIM_PWM_Init>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003b66:	f7ff fec0 	bl	80038ea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003b72:	f107 0320 	add.w	r3, r7, #32
 8003b76:	4619      	mov	r1, r3
 8003b78:	4811      	ldr	r0, [pc, #68]	@ (8003bc0 <MX_TIM3_Init+0xe8>)
 8003b7a:	f004 fb73 	bl	8008264 <HAL_TIMEx_MasterConfigSynchronization>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d001      	beq.n	8003b88 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003b84:	f7ff feb1 	bl	80038ea <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b88:	2360      	movs	r3, #96	@ 0x60
 8003b8a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 4500-1;
 8003b8c:	f241 1393 	movw	r3, #4499	@ 0x1193
 8003b90:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b92:	2300      	movs	r3, #0
 8003b94:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b96:	2300      	movs	r3, #0
 8003b98:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003b9a:	1d3b      	adds	r3, r7, #4
 8003b9c:	2208      	movs	r2, #8
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	4807      	ldr	r0, [pc, #28]	@ (8003bc0 <MX_TIM3_Init+0xe8>)
 8003ba2:	f003 fef9 	bl	8007998 <HAL_TIM_PWM_ConfigChannel>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d001      	beq.n	8003bb0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003bac:	f7ff fe9d 	bl	80038ea <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003bb0:	4803      	ldr	r0, [pc, #12]	@ (8003bc0 <MX_TIM3_Init+0xe8>)
 8003bb2:	f000 f8b7 	bl	8003d24 <HAL_TIM_MspPostInit>

}
 8003bb6:	bf00      	nop
 8003bb8:	3738      	adds	r7, #56	@ 0x38
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	20000194 	.word	0x20000194
 8003bc4:	40000400 	.word	0x40000400

08003bc8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b08e      	sub	sp, #56	@ 0x38
 8003bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003bce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	601a      	str	r2, [r3, #0]
 8003bd6:	605a      	str	r2, [r3, #4]
 8003bd8:	609a      	str	r2, [r3, #8]
 8003bda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bdc:	f107 0320 	add.w	r3, r7, #32
 8003be0:	2200      	movs	r2, #0
 8003be2:	601a      	str	r2, [r3, #0]
 8003be4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003be6:	1d3b      	adds	r3, r7, #4
 8003be8:	2200      	movs	r2, #0
 8003bea:	601a      	str	r2, [r3, #0]
 8003bec:	605a      	str	r2, [r3, #4]
 8003bee:	609a      	str	r2, [r3, #8]
 8003bf0:	60da      	str	r2, [r3, #12]
 8003bf2:	611a      	str	r2, [r3, #16]
 8003bf4:	615a      	str	r2, [r3, #20]
 8003bf6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003bf8:	4b2b      	ldr	r3, [pc, #172]	@ (8003ca8 <MX_TIM4_Init+0xe0>)
 8003bfa:	4a2c      	ldr	r2, [pc, #176]	@ (8003cac <MX_TIM4_Init+0xe4>)
 8003bfc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8000-1;
 8003bfe:	4b2a      	ldr	r3, [pc, #168]	@ (8003ca8 <MX_TIM4_Init+0xe0>)
 8003c00:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8003c04:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c06:	4b28      	ldr	r3, [pc, #160]	@ (8003ca8 <MX_TIM4_Init+0xe0>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 500-1;
 8003c0c:	4b26      	ldr	r3, [pc, #152]	@ (8003ca8 <MX_TIM4_Init+0xe0>)
 8003c0e:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8003c12:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c14:	4b24      	ldr	r3, [pc, #144]	@ (8003ca8 <MX_TIM4_Init+0xe0>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c1a:	4b23      	ldr	r3, [pc, #140]	@ (8003ca8 <MX_TIM4_Init+0xe0>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003c20:	4821      	ldr	r0, [pc, #132]	@ (8003ca8 <MX_TIM4_Init+0xe0>)
 8003c22:	f003 fa79 	bl	8007118 <HAL_TIM_Base_Init>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d001      	beq.n	8003c30 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8003c2c:	f7ff fe5d 	bl	80038ea <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c34:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003c36:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	481a      	ldr	r0, [pc, #104]	@ (8003ca8 <MX_TIM4_Init+0xe0>)
 8003c3e:	f003 ff6d 	bl	8007b1c <HAL_TIM_ConfigClockSource>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d001      	beq.n	8003c4c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8003c48:	f7ff fe4f 	bl	80038ea <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003c4c:	4816      	ldr	r0, [pc, #88]	@ (8003ca8 <MX_TIM4_Init+0xe0>)
 8003c4e:	f003 fab2 	bl	80071b6 <HAL_TIM_PWM_Init>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8003c58:	f7ff fe47 	bl	80038ea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003c5c:	2320      	movs	r3, #32
 8003c5e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c60:	2300      	movs	r3, #0
 8003c62:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003c64:	f107 0320 	add.w	r3, r7, #32
 8003c68:	4619      	mov	r1, r3
 8003c6a:	480f      	ldr	r0, [pc, #60]	@ (8003ca8 <MX_TIM4_Init+0xe0>)
 8003c6c:	f004 fafa 	bl	8008264 <HAL_TIMEx_MasterConfigSynchronization>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8003c76:	f7ff fe38 	bl	80038ea <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c7a:	2360      	movs	r3, #96	@ 0x60
 8003c7c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 250-1;
 8003c7e:	23f9      	movs	r3, #249	@ 0xf9
 8003c80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c82:	2300      	movs	r3, #0
 8003c84:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c86:	2300      	movs	r3, #0
 8003c88:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003c8a:	1d3b      	adds	r3, r7, #4
 8003c8c:	220c      	movs	r2, #12
 8003c8e:	4619      	mov	r1, r3
 8003c90:	4805      	ldr	r0, [pc, #20]	@ (8003ca8 <MX_TIM4_Init+0xe0>)
 8003c92:	f003 fe81 	bl	8007998 <HAL_TIM_PWM_ConfigChannel>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8003c9c:	f7ff fe25 	bl	80038ea <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003ca0:	bf00      	nop
 8003ca2:	3738      	adds	r7, #56	@ 0x38
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	200001dc 	.word	0x200001dc
 8003cac:	40000800 	.word	0x40000800

08003cb0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a16      	ldr	r2, [pc, #88]	@ (8003d18 <HAL_TIM_Base_MspInit+0x68>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d10c      	bne.n	8003cdc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003cc2:	4b16      	ldr	r3, [pc, #88]	@ (8003d1c <HAL_TIM_Base_MspInit+0x6c>)
 8003cc4:	69db      	ldr	r3, [r3, #28]
 8003cc6:	4a15      	ldr	r2, [pc, #84]	@ (8003d1c <HAL_TIM_Base_MspInit+0x6c>)
 8003cc8:	f043 0302 	orr.w	r3, r3, #2
 8003ccc:	61d3      	str	r3, [r2, #28]
 8003cce:	4b13      	ldr	r3, [pc, #76]	@ (8003d1c <HAL_TIM_Base_MspInit+0x6c>)
 8003cd0:	69db      	ldr	r3, [r3, #28]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	60fb      	str	r3, [r7, #12]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003cda:	e018      	b.n	8003d0e <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM4)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a0f      	ldr	r2, [pc, #60]	@ (8003d20 <HAL_TIM_Base_MspInit+0x70>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d113      	bne.n	8003d0e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8003d1c <HAL_TIM_Base_MspInit+0x6c>)
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	4a0c      	ldr	r2, [pc, #48]	@ (8003d1c <HAL_TIM_Base_MspInit+0x6c>)
 8003cec:	f043 0304 	orr.w	r3, r3, #4
 8003cf0:	61d3      	str	r3, [r2, #28]
 8003cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8003d1c <HAL_TIM_Base_MspInit+0x6c>)
 8003cf4:	69db      	ldr	r3, [r3, #28]
 8003cf6:	f003 0304 	and.w	r3, r3, #4
 8003cfa:	60bb      	str	r3, [r7, #8]
 8003cfc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003cfe:	2200      	movs	r2, #0
 8003d00:	2100      	movs	r1, #0
 8003d02:	201e      	movs	r0, #30
 8003d04:	f000 ffe3 	bl	8004cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003d08:	201e      	movs	r0, #30
 8003d0a:	f000 fffc 	bl	8004d06 <HAL_NVIC_EnableIRQ>
}
 8003d0e:	bf00      	nop
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	40000400 	.word	0x40000400
 8003d1c:	40021000 	.word	0x40021000
 8003d20:	40000800 	.word	0x40000800

08003d24 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b088      	sub	sp, #32
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d2c:	f107 0310 	add.w	r3, r7, #16
 8003d30:	2200      	movs	r2, #0
 8003d32:	601a      	str	r2, [r3, #0]
 8003d34:	605a      	str	r2, [r3, #4]
 8003d36:	609a      	str	r2, [r3, #8]
 8003d38:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a0f      	ldr	r2, [pc, #60]	@ (8003d7c <HAL_TIM_MspPostInit+0x58>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d117      	bne.n	8003d74 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d44:	4b0e      	ldr	r3, [pc, #56]	@ (8003d80 <HAL_TIM_MspPostInit+0x5c>)
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	4a0d      	ldr	r2, [pc, #52]	@ (8003d80 <HAL_TIM_MspPostInit+0x5c>)
 8003d4a:	f043 0308 	orr.w	r3, r3, #8
 8003d4e:	6193      	str	r3, [r2, #24]
 8003d50:	4b0b      	ldr	r3, [pc, #44]	@ (8003d80 <HAL_TIM_MspPostInit+0x5c>)
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	f003 0308 	and.w	r3, r3, #8
 8003d58:	60fb      	str	r3, [r7, #12]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_PWM_Pin;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d60:	2302      	movs	r3, #2
 8003d62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d64:	2302      	movs	r3, #2
 8003d66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOTOR_PWM_GPIO_Port, &GPIO_InitStruct);
 8003d68:	f107 0310 	add.w	r3, r7, #16
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	4805      	ldr	r0, [pc, #20]	@ (8003d84 <HAL_TIM_MspPostInit+0x60>)
 8003d70:	f001 fa86 	bl	8005280 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003d74:	bf00      	nop
 8003d76:	3720      	adds	r7, #32
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	40000400 	.word	0x40000400
 8003d80:	40021000 	.word	0x40021000
 8003d84:	40010c00 	.word	0x40010c00

08003d88 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003d8c:	4b11      	ldr	r3, [pc, #68]	@ (8003dd4 <MX_USART1_UART_Init+0x4c>)
 8003d8e:	4a12      	ldr	r2, [pc, #72]	@ (8003dd8 <MX_USART1_UART_Init+0x50>)
 8003d90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003d92:	4b10      	ldr	r3, [pc, #64]	@ (8003dd4 <MX_USART1_UART_Init+0x4c>)
 8003d94:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003d98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003d9a:	4b0e      	ldr	r3, [pc, #56]	@ (8003dd4 <MX_USART1_UART_Init+0x4c>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003da0:	4b0c      	ldr	r3, [pc, #48]	@ (8003dd4 <MX_USART1_UART_Init+0x4c>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003da6:	4b0b      	ldr	r3, [pc, #44]	@ (8003dd4 <MX_USART1_UART_Init+0x4c>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003dac:	4b09      	ldr	r3, [pc, #36]	@ (8003dd4 <MX_USART1_UART_Init+0x4c>)
 8003dae:	220c      	movs	r2, #12
 8003db0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003db2:	4b08      	ldr	r3, [pc, #32]	@ (8003dd4 <MX_USART1_UART_Init+0x4c>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003db8:	4b06      	ldr	r3, [pc, #24]	@ (8003dd4 <MX_USART1_UART_Init+0x4c>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003dbe:	4805      	ldr	r0, [pc, #20]	@ (8003dd4 <MX_USART1_UART_Init+0x4c>)
 8003dc0:	f004 fac0 	bl	8008344 <HAL_UART_Init>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003dca:	f7ff fd8e 	bl	80038ea <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003dce:	bf00      	nop
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	20000224 	.word	0x20000224
 8003dd8:	40013800 	.word	0x40013800

08003ddc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003de0:	4b11      	ldr	r3, [pc, #68]	@ (8003e28 <MX_USART3_UART_Init+0x4c>)
 8003de2:	4a12      	ldr	r2, [pc, #72]	@ (8003e2c <MX_USART3_UART_Init+0x50>)
 8003de4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003de6:	4b10      	ldr	r3, [pc, #64]	@ (8003e28 <MX_USART3_UART_Init+0x4c>)
 8003de8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003dec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003dee:	4b0e      	ldr	r3, [pc, #56]	@ (8003e28 <MX_USART3_UART_Init+0x4c>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003df4:	4b0c      	ldr	r3, [pc, #48]	@ (8003e28 <MX_USART3_UART_Init+0x4c>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8003e28 <MX_USART3_UART_Init+0x4c>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003e00:	4b09      	ldr	r3, [pc, #36]	@ (8003e28 <MX_USART3_UART_Init+0x4c>)
 8003e02:	220c      	movs	r2, #12
 8003e04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e06:	4b08      	ldr	r3, [pc, #32]	@ (8003e28 <MX_USART3_UART_Init+0x4c>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e0c:	4b06      	ldr	r3, [pc, #24]	@ (8003e28 <MX_USART3_UART_Init+0x4c>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003e12:	4805      	ldr	r0, [pc, #20]	@ (8003e28 <MX_USART3_UART_Init+0x4c>)
 8003e14:	f004 fa96 	bl	8008344 <HAL_UART_Init>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003e1e:	f7ff fd64 	bl	80038ea <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003e22:	bf00      	nop
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	2000026c 	.word	0x2000026c
 8003e2c:	40004800 	.word	0x40004800

08003e30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b08a      	sub	sp, #40	@ 0x28
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e38:	f107 0318 	add.w	r3, r7, #24
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	601a      	str	r2, [r3, #0]
 8003e40:	605a      	str	r2, [r3, #4]
 8003e42:	609a      	str	r2, [r3, #8]
 8003e44:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a3c      	ldr	r2, [pc, #240]	@ (8003f3c <HAL_UART_MspInit+0x10c>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d13a      	bne.n	8003ec6 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e50:	4b3b      	ldr	r3, [pc, #236]	@ (8003f40 <HAL_UART_MspInit+0x110>)
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	4a3a      	ldr	r2, [pc, #232]	@ (8003f40 <HAL_UART_MspInit+0x110>)
 8003e56:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e5a:	6193      	str	r3, [r2, #24]
 8003e5c:	4b38      	ldr	r3, [pc, #224]	@ (8003f40 <HAL_UART_MspInit+0x110>)
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e64:	617b      	str	r3, [r7, #20]
 8003e66:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e68:	4b35      	ldr	r3, [pc, #212]	@ (8003f40 <HAL_UART_MspInit+0x110>)
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	4a34      	ldr	r2, [pc, #208]	@ (8003f40 <HAL_UART_MspInit+0x110>)
 8003e6e:	f043 0304 	orr.w	r3, r3, #4
 8003e72:	6193      	str	r3, [r2, #24]
 8003e74:	4b32      	ldr	r3, [pc, #200]	@ (8003f40 <HAL_UART_MspInit+0x110>)
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	f003 0304 	and.w	r3, r3, #4
 8003e7c:	613b      	str	r3, [r7, #16]
 8003e7e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003e80:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003e84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e86:	2302      	movs	r3, #2
 8003e88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e8e:	f107 0318 	add.w	r3, r7, #24
 8003e92:	4619      	mov	r1, r3
 8003e94:	482b      	ldr	r0, [pc, #172]	@ (8003f44 <HAL_UART_MspInit+0x114>)
 8003e96:	f001 f9f3 	bl	8005280 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003e9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ea8:	f107 0318 	add.w	r3, r7, #24
 8003eac:	4619      	mov	r1, r3
 8003eae:	4825      	ldr	r0, [pc, #148]	@ (8003f44 <HAL_UART_MspInit+0x114>)
 8003eb0:	f001 f9e6 	bl	8005280 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	2025      	movs	r0, #37	@ 0x25
 8003eba:	f000 ff08 	bl	8004cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003ebe:	2025      	movs	r0, #37	@ 0x25
 8003ec0:	f000 ff21 	bl	8004d06 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003ec4:	e036      	b.n	8003f34 <HAL_UART_MspInit+0x104>
  else if(uartHandle->Instance==USART3)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a1f      	ldr	r2, [pc, #124]	@ (8003f48 <HAL_UART_MspInit+0x118>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d131      	bne.n	8003f34 <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003ed0:	4b1b      	ldr	r3, [pc, #108]	@ (8003f40 <HAL_UART_MspInit+0x110>)
 8003ed2:	69db      	ldr	r3, [r3, #28]
 8003ed4:	4a1a      	ldr	r2, [pc, #104]	@ (8003f40 <HAL_UART_MspInit+0x110>)
 8003ed6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003eda:	61d3      	str	r3, [r2, #28]
 8003edc:	4b18      	ldr	r3, [pc, #96]	@ (8003f40 <HAL_UART_MspInit+0x110>)
 8003ede:	69db      	ldr	r3, [r3, #28]
 8003ee0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ee4:	60fb      	str	r3, [r7, #12]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ee8:	4b15      	ldr	r3, [pc, #84]	@ (8003f40 <HAL_UART_MspInit+0x110>)
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	4a14      	ldr	r2, [pc, #80]	@ (8003f40 <HAL_UART_MspInit+0x110>)
 8003eee:	f043 0308 	orr.w	r3, r3, #8
 8003ef2:	6193      	str	r3, [r2, #24]
 8003ef4:	4b12      	ldr	r3, [pc, #72]	@ (8003f40 <HAL_UART_MspInit+0x110>)
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	f003 0308 	and.w	r3, r3, #8
 8003efc:	60bb      	str	r3, [r7, #8]
 8003efe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003f00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f06:	2302      	movs	r3, #2
 8003f08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f0e:	f107 0318 	add.w	r3, r7, #24
 8003f12:	4619      	mov	r1, r3
 8003f14:	480d      	ldr	r0, [pc, #52]	@ (8003f4c <HAL_UART_MspInit+0x11c>)
 8003f16:	f001 f9b3 	bl	8005280 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003f1a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003f1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f20:	2300      	movs	r3, #0
 8003f22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f24:	2300      	movs	r3, #0
 8003f26:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f28:	f107 0318 	add.w	r3, r7, #24
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	4807      	ldr	r0, [pc, #28]	@ (8003f4c <HAL_UART_MspInit+0x11c>)
 8003f30:	f001 f9a6 	bl	8005280 <HAL_GPIO_Init>
}
 8003f34:	bf00      	nop
 8003f36:	3728      	adds	r7, #40	@ 0x28
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	40013800 	.word	0x40013800
 8003f40:	40021000 	.word	0x40021000
 8003f44:	40010800 	.word	0x40010800
 8003f48:	40004800 	.word	0x40004800
 8003f4c:	40010c00 	.word	0x40010c00

08003f50 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003f50:	f7ff fdbc 	bl	8003acc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f54:	480b      	ldr	r0, [pc, #44]	@ (8003f84 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003f56:	490c      	ldr	r1, [pc, #48]	@ (8003f88 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003f58:	4a0c      	ldr	r2, [pc, #48]	@ (8003f8c <LoopFillZerobss+0x16>)
  movs r3, #0
 8003f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f5c:	e002      	b.n	8003f64 <LoopCopyDataInit>

08003f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f62:	3304      	adds	r3, #4

08003f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f68:	d3f9      	bcc.n	8003f5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f6a:	4a09      	ldr	r2, [pc, #36]	@ (8003f90 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003f6c:	4c09      	ldr	r4, [pc, #36]	@ (8003f94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f70:	e001      	b.n	8003f76 <LoopFillZerobss>

08003f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f74:	3204      	adds	r2, #4

08003f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f78:	d3fb      	bcc.n	8003f72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f7a:	f005 fc17 	bl	80097ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003f7e:	f7fd f915 	bl	80011ac <main>
  bx lr
 8003f82:	4770      	bx	lr
  ldr r0, =_sdata
 8003f84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f88:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8003f8c:	0800c0d8 	.word	0x0800c0d8
  ldr r2, =_sbss
 8003f90:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8003f94:	20000408 	.word	0x20000408

08003f98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003f98:	e7fe      	b.n	8003f98 <ADC1_2_IRQHandler>
	...

08003f9c <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8003fa4:	4a11      	ldr	r2, [pc, #68]	@ (8003fec <RetargetInit+0x50>)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8003faa:	4b11      	ldr	r3, [pc, #68]	@ (8003ff0 <RetargetInit+0x54>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	6898      	ldr	r0, [r3, #8]
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	f005 f9f9 	bl	80093ac <setvbuf>
  setvbuf(stdin, NULL, _IONBF, 0);
 8003fba:	4b0d      	ldr	r3, [pc, #52]	@ (8003ff0 <RetargetInit+0x54>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	6858      	ldr	r0, [r3, #4]
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	f005 f9f1 	bl	80093ac <setvbuf>
  __HAL_UART_CLEAR_OREFLAG(gHuart);
 8003fca:	2300      	movs	r3, #0
 8003fcc:	60fb      	str	r3, [r7, #12]
 8003fce:	4b07      	ldr	r3, [pc, #28]	@ (8003fec <RetargetInit+0x50>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	60fb      	str	r3, [r7, #12]
 8003fd8:	4b04      	ldr	r3, [pc, #16]	@ (8003fec <RetargetInit+0x50>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	68fb      	ldr	r3, [r7, #12]

}
 8003fe4:	bf00      	nop
 8003fe6:	3710      	adds	r7, #16
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	200002b4 	.word	0x200002b4
 8003ff0:	20000050 	.word	0x20000050

08003ff4 <_write>:


int _write(int fd, char* ptr, int len) {
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d002      	beq.n	800400c <_write+0x18>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2b02      	cmp	r3, #2
 800400a:	d111      	bne.n	8004030 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 800400c:	4b0e      	ldr	r3, [pc, #56]	@ (8004048 <_write+0x54>)
 800400e:	6818      	ldr	r0, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	b29a      	uxth	r2, r3
 8004014:	f04f 33ff 	mov.w	r3, #4294967295
 8004018:	68b9      	ldr	r1, [r7, #8]
 800401a:	f004 f9e3 	bl	80083e4 <HAL_UART_Transmit>
 800401e:	4603      	mov	r3, r0
 8004020:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8004022:	7dfb      	ldrb	r3, [r7, #23]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d101      	bne.n	800402c <_write+0x38>
      return len;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	e008      	b.n	800403e <_write+0x4a>
    else
      return EIO;
 800402c:	2305      	movs	r3, #5
 800402e:	e006      	b.n	800403e <_write+0x4a>
  }
  errno = EBADF;
 8004030:	f005 fbb6 	bl	80097a0 <__errno>
 8004034:	4603      	mov	r3, r0
 8004036:	2209      	movs	r2, #9
 8004038:	601a      	str	r2, [r3, #0]
  return -1;
 800403a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800403e:	4618      	mov	r0, r3
 8004040:	3718      	adds	r7, #24
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	200002b4 	.word	0x200002b4

0800404c <_read>:


int _read(int fd, char* ptr, int len) {
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d110      	bne.n	8004080 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800405e:	4b0e      	ldr	r3, [pc, #56]	@ (8004098 <_read+0x4c>)
 8004060:	6818      	ldr	r0, [r3, #0]
 8004062:	f04f 33ff 	mov.w	r3, #4294967295
 8004066:	2201      	movs	r2, #1
 8004068:	68b9      	ldr	r1, [r7, #8]
 800406a:	f004 fa46 	bl	80084fa <HAL_UART_Receive>
 800406e:	4603      	mov	r3, r0
 8004070:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8004072:	7dfb      	ldrb	r3, [r7, #23]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d101      	bne.n	800407c <_read+0x30>
      return 1;
 8004078:	2301      	movs	r3, #1
 800407a:	e008      	b.n	800408e <_read+0x42>
    else
      return EIO;
 800407c:	2305      	movs	r3, #5
 800407e:	e006      	b.n	800408e <_read+0x42>
  }
  errno = EBADF;
 8004080:	f005 fb8e 	bl	80097a0 <__errno>
 8004084:	4603      	mov	r3, r0
 8004086:	2209      	movs	r2, #9
 8004088:	601a      	str	r2, [r3, #0]
  return -1;
 800408a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800408e:	4618      	mov	r0, r3
 8004090:	3718      	adds	r7, #24
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	200002b4 	.word	0x200002b4

0800409c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040a0:	4b08      	ldr	r3, [pc, #32]	@ (80040c4 <HAL_Init+0x28>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a07      	ldr	r2, [pc, #28]	@ (80040c4 <HAL_Init+0x28>)
 80040a6:	f043 0310 	orr.w	r3, r3, #16
 80040aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040ac:	2003      	movs	r0, #3
 80040ae:	f000 fe03 	bl	8004cb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80040b2:	2000      	movs	r0, #0
 80040b4:	f000 f808 	bl	80040c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80040b8:	f7ff fc1e 	bl	80038f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	40022000 	.word	0x40022000

080040c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80040d0:	4b12      	ldr	r3, [pc, #72]	@ (800411c <HAL_InitTick+0x54>)
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	4b12      	ldr	r3, [pc, #72]	@ (8004120 <HAL_InitTick+0x58>)
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	4619      	mov	r1, r3
 80040da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80040de:	fbb3 f3f1 	udiv	r3, r3, r1
 80040e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 fe1b 	bl	8004d22 <HAL_SYSTICK_Config>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e00e      	b.n	8004114 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2b0f      	cmp	r3, #15
 80040fa:	d80a      	bhi.n	8004112 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040fc:	2200      	movs	r2, #0
 80040fe:	6879      	ldr	r1, [r7, #4]
 8004100:	f04f 30ff 	mov.w	r0, #4294967295
 8004104:	f000 fde3 	bl	8004cce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004108:	4a06      	ldr	r2, [pc, #24]	@ (8004124 <HAL_InitTick+0x5c>)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800410e:	2300      	movs	r3, #0
 8004110:	e000      	b.n	8004114 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
}
 8004114:	4618      	mov	r0, r3
 8004116:	3708      	adds	r7, #8
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	20000038 	.word	0x20000038
 8004120:	20000040 	.word	0x20000040
 8004124:	2000003c 	.word	0x2000003c

08004128 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004128:	b480      	push	{r7}
 800412a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800412c:	4b05      	ldr	r3, [pc, #20]	@ (8004144 <HAL_IncTick+0x1c>)
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	461a      	mov	r2, r3
 8004132:	4b05      	ldr	r3, [pc, #20]	@ (8004148 <HAL_IncTick+0x20>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4413      	add	r3, r2
 8004138:	4a03      	ldr	r2, [pc, #12]	@ (8004148 <HAL_IncTick+0x20>)
 800413a:	6013      	str	r3, [r2, #0]
}
 800413c:	bf00      	nop
 800413e:	46bd      	mov	sp, r7
 8004140:	bc80      	pop	{r7}
 8004142:	4770      	bx	lr
 8004144:	20000040 	.word	0x20000040
 8004148:	200002b8 	.word	0x200002b8

0800414c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800414c:	b480      	push	{r7}
 800414e:	af00      	add	r7, sp, #0
  return uwTick;
 8004150:	4b02      	ldr	r3, [pc, #8]	@ (800415c <HAL_GetTick+0x10>)
 8004152:	681b      	ldr	r3, [r3, #0]
}
 8004154:	4618      	mov	r0, r3
 8004156:	46bd      	mov	sp, r7
 8004158:	bc80      	pop	{r7}
 800415a:	4770      	bx	lr
 800415c:	200002b8 	.word	0x200002b8

08004160 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004168:	f7ff fff0 	bl	800414c <HAL_GetTick>
 800416c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004178:	d005      	beq.n	8004186 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800417a:	4b0a      	ldr	r3, [pc, #40]	@ (80041a4 <HAL_Delay+0x44>)
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	461a      	mov	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	4413      	add	r3, r2
 8004184:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004186:	bf00      	nop
 8004188:	f7ff ffe0 	bl	800414c <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	429a      	cmp	r2, r3
 8004196:	d8f7      	bhi.n	8004188 <HAL_Delay+0x28>
  {
  }
}
 8004198:	bf00      	nop
 800419a:	bf00      	nop
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	20000040 	.word	0x20000040

080041a8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041b0:	2300      	movs	r3, #0
 80041b2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80041b4:	2300      	movs	r3, #0
 80041b6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80041b8:	2300      	movs	r3, #0
 80041ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80041bc:	2300      	movs	r3, #0
 80041be:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d101      	bne.n	80041ca <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e0be      	b.n	8004348 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d109      	bne.n	80041ec <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f7fc fe54 	bl	8000e94 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 fb41 	bl	8004874 <ADC_ConversionStop_Disable>
 80041f2:	4603      	mov	r3, r0
 80041f4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041fa:	f003 0310 	and.w	r3, r3, #16
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f040 8099 	bne.w	8004336 <HAL_ADC_Init+0x18e>
 8004204:	7dfb      	ldrb	r3, [r7, #23]
 8004206:	2b00      	cmp	r3, #0
 8004208:	f040 8095 	bne.w	8004336 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004210:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004214:	f023 0302 	bic.w	r3, r3, #2
 8004218:	f043 0202 	orr.w	r2, r3, #2
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004228:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	7b1b      	ldrb	r3, [r3, #12]
 800422e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004230:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004232:	68ba      	ldr	r2, [r7, #8]
 8004234:	4313      	orrs	r3, r2
 8004236:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004240:	d003      	beq.n	800424a <HAL_ADC_Init+0xa2>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d102      	bne.n	8004250 <HAL_ADC_Init+0xa8>
 800424a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800424e:	e000      	b.n	8004252 <HAL_ADC_Init+0xaa>
 8004250:	2300      	movs	r3, #0
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	4313      	orrs	r3, r2
 8004256:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	7d1b      	ldrb	r3, [r3, #20]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d119      	bne.n	8004294 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	7b1b      	ldrb	r3, [r3, #12]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d109      	bne.n	800427c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	3b01      	subs	r3, #1
 800426e:	035a      	lsls	r2, r3, #13
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	4313      	orrs	r3, r2
 8004274:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004278:	613b      	str	r3, [r7, #16]
 800427a:	e00b      	b.n	8004294 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004280:	f043 0220 	orr.w	r2, r3, #32
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800428c:	f043 0201 	orr.w	r2, r3, #1
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	430a      	orrs	r2, r1
 80042a6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	689a      	ldr	r2, [r3, #8]
 80042ae:	4b28      	ldr	r3, [pc, #160]	@ (8004350 <HAL_ADC_Init+0x1a8>)
 80042b0:	4013      	ands	r3, r2
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	6812      	ldr	r2, [r2, #0]
 80042b6:	68b9      	ldr	r1, [r7, #8]
 80042b8:	430b      	orrs	r3, r1
 80042ba:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042c4:	d003      	beq.n	80042ce <HAL_ADC_Init+0x126>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d104      	bne.n	80042d8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	3b01      	subs	r3, #1
 80042d4:	051b      	lsls	r3, r3, #20
 80042d6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042de:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	430a      	orrs	r2, r1
 80042ea:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	689a      	ldr	r2, [r3, #8]
 80042f2:	4b18      	ldr	r3, [pc, #96]	@ (8004354 <HAL_ADC_Init+0x1ac>)
 80042f4:	4013      	ands	r3, r2
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d10b      	bne.n	8004314 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004306:	f023 0303 	bic.w	r3, r3, #3
 800430a:	f043 0201 	orr.w	r2, r3, #1
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004312:	e018      	b.n	8004346 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004318:	f023 0312 	bic.w	r3, r3, #18
 800431c:	f043 0210 	orr.w	r2, r3, #16
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004328:	f043 0201 	orr.w	r2, r3, #1
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004334:	e007      	b.n	8004346 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800433a:	f043 0210 	orr.w	r2, r3, #16
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004346:	7dfb      	ldrb	r3, [r7, #23]
}
 8004348:	4618      	mov	r0, r3
 800434a:	3718      	adds	r7, #24
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	ffe1f7fd 	.word	0xffe1f7fd
 8004354:	ff1f0efe 	.word	0xff1f0efe

08004358 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b086      	sub	sp, #24
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004364:	2300      	movs	r3, #0
 8004366:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a64      	ldr	r2, [pc, #400]	@ (8004500 <HAL_ADC_Start_DMA+0x1a8>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d004      	beq.n	800437c <HAL_ADC_Start_DMA+0x24>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a63      	ldr	r2, [pc, #396]	@ (8004504 <HAL_ADC_Start_DMA+0x1ac>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d106      	bne.n	800438a <HAL_ADC_Start_DMA+0x32>
 800437c:	4b60      	ldr	r3, [pc, #384]	@ (8004500 <HAL_ADC_Start_DMA+0x1a8>)
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8004384:	2b00      	cmp	r3, #0
 8004386:	f040 80b3 	bne.w	80044f0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004390:	2b01      	cmp	r3, #1
 8004392:	d101      	bne.n	8004398 <HAL_ADC_Start_DMA+0x40>
 8004394:	2302      	movs	r3, #2
 8004396:	e0ae      	b.n	80044f6 <HAL_ADC_Start_DMA+0x19e>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80043a0:	68f8      	ldr	r0, [r7, #12]
 80043a2:	f000 fa0d 	bl	80047c0 <ADC_Enable>
 80043a6:	4603      	mov	r3, r0
 80043a8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80043aa:	7dfb      	ldrb	r3, [r7, #23]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f040 809a 	bne.w	80044e6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043b6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80043ba:	f023 0301 	bic.w	r3, r3, #1
 80043be:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a4e      	ldr	r2, [pc, #312]	@ (8004504 <HAL_ADC_Start_DMA+0x1ac>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d105      	bne.n	80043dc <HAL_ADC_Start_DMA+0x84>
 80043d0:	4b4b      	ldr	r3, [pc, #300]	@ (8004500 <HAL_ADC_Start_DMA+0x1a8>)
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d115      	bne.n	8004408 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d026      	beq.n	8004444 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043fa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80043fe:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004406:	e01d      	b.n	8004444 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800440c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a39      	ldr	r2, [pc, #228]	@ (8004500 <HAL_ADC_Start_DMA+0x1a8>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d004      	beq.n	8004428 <HAL_ADC_Start_DMA+0xd0>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a38      	ldr	r2, [pc, #224]	@ (8004504 <HAL_ADC_Start_DMA+0x1ac>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d10d      	bne.n	8004444 <HAL_ADC_Start_DMA+0xec>
 8004428:	4b35      	ldr	r3, [pc, #212]	@ (8004500 <HAL_ADC_Start_DMA+0x1a8>)
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004430:	2b00      	cmp	r3, #0
 8004432:	d007      	beq.n	8004444 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004438:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800443c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004448:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d006      	beq.n	800445e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004454:	f023 0206 	bic.w	r2, r3, #6
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800445c:	e002      	b.n	8004464 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6a1b      	ldr	r3, [r3, #32]
 8004470:	4a25      	ldr	r2, [pc, #148]	@ (8004508 <HAL_ADC_Start_DMA+0x1b0>)
 8004472:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	4a24      	ldr	r2, [pc, #144]	@ (800450c <HAL_ADC_Start_DMA+0x1b4>)
 800447a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6a1b      	ldr	r3, [r3, #32]
 8004480:	4a23      	ldr	r2, [pc, #140]	@ (8004510 <HAL_ADC_Start_DMA+0x1b8>)
 8004482:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f06f 0202 	mvn.w	r2, #2
 800448c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	689a      	ldr	r2, [r3, #8]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800449c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6a18      	ldr	r0, [r3, #32]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	334c      	adds	r3, #76	@ 0x4c
 80044a8:	4619      	mov	r1, r3
 80044aa:	68ba      	ldr	r2, [r7, #8]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f000 fc9f 	bl	8004df0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80044bc:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80044c0:	d108      	bne.n	80044d4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	689a      	ldr	r2, [r3, #8]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80044d0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80044d2:	e00f      	b.n	80044f4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	689a      	ldr	r2, [r3, #8]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80044e2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80044e4:	e006      	b.n	80044f4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 80044ee:	e001      	b.n	80044f4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80044f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3718      	adds	r7, #24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	40012400 	.word	0x40012400
 8004504:	40012800 	.word	0x40012800
 8004508:	080048f7 	.word	0x080048f7
 800450c:	08004973 	.word	0x08004973
 8004510:	0800498f 	.word	0x0800498f

08004514 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800451c:	2300      	movs	r3, #0
 800451e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004526:	2b01      	cmp	r3, #1
 8004528:	d101      	bne.n	800452e <HAL_ADC_Stop_DMA+0x1a>
 800452a:	2302      	movs	r3, #2
 800452c:	e03a      	b.n	80045a4 <HAL_ADC_Stop_DMA+0x90>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f99c 	bl	8004874 <ADC_ConversionStop_Disable>
 800453c:	4603      	mov	r3, r0
 800453e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004540:	7bfb      	ldrb	r3, [r7, #15]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d129      	bne.n	800459a <HAL_ADC_Stop_DMA+0x86>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	689a      	ldr	r2, [r3, #8]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004554:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800455e:	b2db      	uxtb	r3, r3
 8004560:	2b02      	cmp	r3, #2
 8004562:	d11a      	bne.n	800459a <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	4618      	mov	r0, r3
 800456a:	f000 fca1 	bl	8004eb0 <HAL_DMA_Abort>
 800456e:	4603      	mov	r3, r0
 8004570:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8004572:	7bfb      	ldrb	r3, [r7, #15]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d10a      	bne.n	800458e <HAL_ADC_Stop_DMA+0x7a>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800457c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004580:	f023 0301 	bic.w	r3, r3, #1
 8004584:	f043 0201 	orr.w	r2, r3, #1
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	629a      	str	r2, [r3, #40]	@ 0x28
 800458c:	e005      	b.n	800459a <HAL_ADC_Stop_DMA+0x86>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004592:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Return function status */
  return tmp_hal_status;
 80045a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3710      	adds	r7, #16
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bc80      	pop	{r7}
 80045bc:	4770      	bx	lr

080045be <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80045be:	b480      	push	{r7}
 80045c0:	b083      	sub	sp, #12
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80045c6:	bf00      	nop
 80045c8:	370c      	adds	r7, #12
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bc80      	pop	{r7}
 80045ce:	4770      	bx	lr

080045d0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045da:	2300      	movs	r3, #0
 80045dc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80045de:	2300      	movs	r3, #0
 80045e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d101      	bne.n	80045f0 <HAL_ADC_ConfigChannel+0x20>
 80045ec:	2302      	movs	r3, #2
 80045ee:	e0dc      	b.n	80047aa <HAL_ADC_ConfigChannel+0x1da>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	2b06      	cmp	r3, #6
 80045fe:	d81c      	bhi.n	800463a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	685a      	ldr	r2, [r3, #4]
 800460a:	4613      	mov	r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	4413      	add	r3, r2
 8004610:	3b05      	subs	r3, #5
 8004612:	221f      	movs	r2, #31
 8004614:	fa02 f303 	lsl.w	r3, r2, r3
 8004618:	43db      	mvns	r3, r3
 800461a:	4019      	ands	r1, r3
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	6818      	ldr	r0, [r3, #0]
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685a      	ldr	r2, [r3, #4]
 8004624:	4613      	mov	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	4413      	add	r3, r2
 800462a:	3b05      	subs	r3, #5
 800462c:	fa00 f203 	lsl.w	r2, r0, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	430a      	orrs	r2, r1
 8004636:	635a      	str	r2, [r3, #52]	@ 0x34
 8004638:	e03c      	b.n	80046b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	2b0c      	cmp	r3, #12
 8004640:	d81c      	bhi.n	800467c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	685a      	ldr	r2, [r3, #4]
 800464c:	4613      	mov	r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4413      	add	r3, r2
 8004652:	3b23      	subs	r3, #35	@ 0x23
 8004654:	221f      	movs	r2, #31
 8004656:	fa02 f303 	lsl.w	r3, r2, r3
 800465a:	43db      	mvns	r3, r3
 800465c:	4019      	ands	r1, r3
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	6818      	ldr	r0, [r3, #0]
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	4613      	mov	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	4413      	add	r3, r2
 800466c:	3b23      	subs	r3, #35	@ 0x23
 800466e:	fa00 f203 	lsl.w	r2, r0, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	430a      	orrs	r2, r1
 8004678:	631a      	str	r2, [r3, #48]	@ 0x30
 800467a:	e01b      	b.n	80046b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	4613      	mov	r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	4413      	add	r3, r2
 800468c:	3b41      	subs	r3, #65	@ 0x41
 800468e:	221f      	movs	r2, #31
 8004690:	fa02 f303 	lsl.w	r3, r2, r3
 8004694:	43db      	mvns	r3, r3
 8004696:	4019      	ands	r1, r3
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	6818      	ldr	r0, [r3, #0]
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685a      	ldr	r2, [r3, #4]
 80046a0:	4613      	mov	r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	4413      	add	r3, r2
 80046a6:	3b41      	subs	r3, #65	@ 0x41
 80046a8:	fa00 f203 	lsl.w	r2, r0, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	430a      	orrs	r2, r1
 80046b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2b09      	cmp	r3, #9
 80046ba:	d91c      	bls.n	80046f6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68d9      	ldr	r1, [r3, #12]
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	4613      	mov	r3, r2
 80046c8:	005b      	lsls	r3, r3, #1
 80046ca:	4413      	add	r3, r2
 80046cc:	3b1e      	subs	r3, #30
 80046ce:	2207      	movs	r2, #7
 80046d0:	fa02 f303 	lsl.w	r3, r2, r3
 80046d4:	43db      	mvns	r3, r3
 80046d6:	4019      	ands	r1, r3
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	6898      	ldr	r0, [r3, #8]
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	4613      	mov	r3, r2
 80046e2:	005b      	lsls	r3, r3, #1
 80046e4:	4413      	add	r3, r2
 80046e6:	3b1e      	subs	r3, #30
 80046e8:	fa00 f203 	lsl.w	r2, r0, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	430a      	orrs	r2, r1
 80046f2:	60da      	str	r2, [r3, #12]
 80046f4:	e019      	b.n	800472a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	6919      	ldr	r1, [r3, #16]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	4613      	mov	r3, r2
 8004702:	005b      	lsls	r3, r3, #1
 8004704:	4413      	add	r3, r2
 8004706:	2207      	movs	r2, #7
 8004708:	fa02 f303 	lsl.w	r3, r2, r3
 800470c:	43db      	mvns	r3, r3
 800470e:	4019      	ands	r1, r3
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	6898      	ldr	r0, [r3, #8]
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	4613      	mov	r3, r2
 800471a:	005b      	lsls	r3, r3, #1
 800471c:	4413      	add	r3, r2
 800471e:	fa00 f203 	lsl.w	r2, r0, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	430a      	orrs	r2, r1
 8004728:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2b10      	cmp	r3, #16
 8004730:	d003      	beq.n	800473a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004736:	2b11      	cmp	r3, #17
 8004738:	d132      	bne.n	80047a0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a1d      	ldr	r2, [pc, #116]	@ (80047b4 <HAL_ADC_ConfigChannel+0x1e4>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d125      	bne.n	8004790 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d126      	bne.n	80047a0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689a      	ldr	r2, [r3, #8]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8004760:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2b10      	cmp	r3, #16
 8004768:	d11a      	bne.n	80047a0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800476a:	4b13      	ldr	r3, [pc, #76]	@ (80047b8 <HAL_ADC_ConfigChannel+0x1e8>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a13      	ldr	r2, [pc, #76]	@ (80047bc <HAL_ADC_ConfigChannel+0x1ec>)
 8004770:	fba2 2303 	umull	r2, r3, r2, r3
 8004774:	0c9a      	lsrs	r2, r3, #18
 8004776:	4613      	mov	r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	4413      	add	r3, r2
 800477c:	005b      	lsls	r3, r3, #1
 800477e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004780:	e002      	b.n	8004788 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	3b01      	subs	r3, #1
 8004786:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1f9      	bne.n	8004782 <HAL_ADC_ConfigChannel+0x1b2>
 800478e:	e007      	b.n	80047a0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004794:	f043 0220 	orr.w	r2, r3, #32
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80047a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3714      	adds	r7, #20
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bc80      	pop	{r7}
 80047b2:	4770      	bx	lr
 80047b4:	40012400 	.word	0x40012400
 80047b8:	20000038 	.word	0x20000038
 80047bc:	431bde83 	.word	0x431bde83

080047c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047c8:	2300      	movs	r3, #0
 80047ca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80047cc:	2300      	movs	r3, #0
 80047ce:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d040      	beq.n	8004860 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	689a      	ldr	r2, [r3, #8]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f042 0201 	orr.w	r2, r2, #1
 80047ec:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80047ee:	4b1f      	ldr	r3, [pc, #124]	@ (800486c <ADC_Enable+0xac>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a1f      	ldr	r2, [pc, #124]	@ (8004870 <ADC_Enable+0xb0>)
 80047f4:	fba2 2303 	umull	r2, r3, r2, r3
 80047f8:	0c9b      	lsrs	r3, r3, #18
 80047fa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80047fc:	e002      	b.n	8004804 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	3b01      	subs	r3, #1
 8004802:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1f9      	bne.n	80047fe <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800480a:	f7ff fc9f 	bl	800414c <HAL_GetTick>
 800480e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004810:	e01f      	b.n	8004852 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004812:	f7ff fc9b 	bl	800414c <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	2b02      	cmp	r3, #2
 800481e:	d918      	bls.n	8004852 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b01      	cmp	r3, #1
 800482c:	d011      	beq.n	8004852 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004832:	f043 0210 	orr.w	r2, r3, #16
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800483e:	f043 0201 	orr.w	r2, r3, #1
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e007      	b.n	8004862 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	2b01      	cmp	r3, #1
 800485e:	d1d8      	bne.n	8004812 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	20000038 	.word	0x20000038
 8004870:	431bde83 	.word	0x431bde83

08004874 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800487c:	2300      	movs	r3, #0
 800487e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	2b01      	cmp	r3, #1
 800488c:	d12e      	bne.n	80048ec <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	689a      	ldr	r2, [r3, #8]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f022 0201 	bic.w	r2, r2, #1
 800489c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800489e:	f7ff fc55 	bl	800414c <HAL_GetTick>
 80048a2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80048a4:	e01b      	b.n	80048de <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80048a6:	f7ff fc51 	bl	800414c <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d914      	bls.n	80048de <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d10d      	bne.n	80048de <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c6:	f043 0210 	orr.w	r2, r3, #16
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d2:	f043 0201 	orr.w	r2, r3, #1
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e007      	b.n	80048ee <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f003 0301 	and.w	r3, r3, #1
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d0dc      	beq.n	80048a6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}

080048f6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80048f6:	b580      	push	{r7, lr}
 80048f8:	b084      	sub	sp, #16
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004902:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004908:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800490c:	2b00      	cmp	r3, #0
 800490e:	d127      	bne.n	8004960 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004914:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8004926:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800492a:	d115      	bne.n	8004958 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004930:	2b00      	cmp	r3, #0
 8004932:	d111      	bne.n	8004958 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004938:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004944:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d105      	bne.n	8004958 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004950:	f043 0201 	orr.w	r2, r3, #1
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004958:	68f8      	ldr	r0, [r7, #12]
 800495a:	f7fe f925 	bl	8002ba8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800495e:	e004      	b.n	800496a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6a1b      	ldr	r3, [r3, #32]
 8004964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	4798      	blx	r3
}
 800496a:	bf00      	nop
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004972:	b580      	push	{r7, lr}
 8004974:	b084      	sub	sp, #16
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800497e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f7ff fe13 	bl	80045ac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004986:	bf00      	nop
 8004988:	3710      	adds	r7, #16
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800498e:	b580      	push	{r7, lr}
 8004990:	b084      	sub	sp, #16
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800499a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049a0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ac:	f043 0204 	orr.w	r2, r3, #4
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f7ff fe02 	bl	80045be <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80049ba:	bf00      	nop
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
	...

080049c4 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80049c4:	b590      	push	{r4, r7, lr}
 80049c6:	b087      	sub	sp, #28
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049cc:	2300      	movs	r3, #0
 80049ce:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80049d0:	2300      	movs	r3, #0
 80049d2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d101      	bne.n	80049e2 <HAL_ADCEx_Calibration_Start+0x1e>
 80049de:	2302      	movs	r3, #2
 80049e0:	e097      	b.n	8004b12 <HAL_ADCEx_Calibration_Start+0x14e>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7ff ff42 	bl	8004874 <ADC_ConversionStop_Disable>
 80049f0:	4603      	mov	r3, r0
 80049f2:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f7ff fee3 	bl	80047c0 <ADC_Enable>
 80049fa:	4603      	mov	r3, r0
 80049fc:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 80049fe:	7dfb      	ldrb	r3, [r7, #23]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	f040 8081 	bne.w	8004b08 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a0a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004a0e:	f023 0302 	bic.w	r3, r3, #2
 8004a12:	f043 0202 	orr.w	r2, r3, #2
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8004a1a:	4b40      	ldr	r3, [pc, #256]	@ (8004b1c <HAL_ADCEx_Calibration_Start+0x158>)
 8004a1c:	681c      	ldr	r4, [r3, #0]
 8004a1e:	2002      	movs	r0, #2
 8004a20:	f002 fac4 	bl	8006fac <HAL_RCCEx_GetPeriphCLKFreq>
 8004a24:	4603      	mov	r3, r0
 8004a26:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8004a2a:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8004a2c:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8004a2e:	e002      	b.n	8004a36 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	3b01      	subs	r3, #1
 8004a34:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1f9      	bne.n	8004a30 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	689a      	ldr	r2, [r3, #8]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f042 0208 	orr.w	r2, r2, #8
 8004a4a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8004a4c:	f7ff fb7e 	bl	800414c <HAL_GetTick>
 8004a50:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004a52:	e01b      	b.n	8004a8c <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004a54:	f7ff fb7a 	bl	800414c <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b0a      	cmp	r3, #10
 8004a60:	d914      	bls.n	8004a8c <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f003 0308 	and.w	r3, r3, #8
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00d      	beq.n	8004a8c <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a74:	f023 0312 	bic.w	r3, r3, #18
 8004a78:	f043 0210 	orr.w	r2, r3, #16
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e042      	b.n	8004b12 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f003 0308 	and.w	r3, r3, #8
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1dc      	bne.n	8004a54 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	689a      	ldr	r2, [r3, #8]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f042 0204 	orr.w	r2, r2, #4
 8004aa8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8004aaa:	f7ff fb4f 	bl	800414c <HAL_GetTick>
 8004aae:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004ab0:	e01b      	b.n	8004aea <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004ab2:	f7ff fb4b 	bl	800414c <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	2b0a      	cmp	r3, #10
 8004abe:	d914      	bls.n	8004aea <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f003 0304 	and.w	r3, r3, #4
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00d      	beq.n	8004aea <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad2:	f023 0312 	bic.w	r3, r3, #18
 8004ad6:	f043 0210 	orr.w	r2, r3, #16
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e013      	b.n	8004b12 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f003 0304 	and.w	r3, r3, #4
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1dc      	bne.n	8004ab2 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004afc:	f023 0303 	bic.w	r3, r3, #3
 8004b00:	f043 0201 	orr.w	r2, r3, #1
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004b10:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	371c      	adds	r7, #28
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd90      	pop	{r4, r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	20000038 	.word	0x20000038

08004b20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f003 0307 	and.w	r3, r3, #7
 8004b2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b30:	4b0c      	ldr	r3, [pc, #48]	@ (8004b64 <__NVIC_SetPriorityGrouping+0x44>)
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004b4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b52:	4a04      	ldr	r2, [pc, #16]	@ (8004b64 <__NVIC_SetPriorityGrouping+0x44>)
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	60d3      	str	r3, [r2, #12]
}
 8004b58:	bf00      	nop
 8004b5a:	3714      	adds	r7, #20
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bc80      	pop	{r7}
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	e000ed00 	.word	0xe000ed00

08004b68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b6c:	4b04      	ldr	r3, [pc, #16]	@ (8004b80 <__NVIC_GetPriorityGrouping+0x18>)
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	0a1b      	lsrs	r3, r3, #8
 8004b72:	f003 0307 	and.w	r3, r3, #7
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bc80      	pop	{r7}
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	e000ed00 	.word	0xe000ed00

08004b84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	db0b      	blt.n	8004bae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b96:	79fb      	ldrb	r3, [r7, #7]
 8004b98:	f003 021f 	and.w	r2, r3, #31
 8004b9c:	4906      	ldr	r1, [pc, #24]	@ (8004bb8 <__NVIC_EnableIRQ+0x34>)
 8004b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ba2:	095b      	lsrs	r3, r3, #5
 8004ba4:	2001      	movs	r0, #1
 8004ba6:	fa00 f202 	lsl.w	r2, r0, r2
 8004baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004bae:	bf00      	nop
 8004bb0:	370c      	adds	r7, #12
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bc80      	pop	{r7}
 8004bb6:	4770      	bx	lr
 8004bb8:	e000e100 	.word	0xe000e100

08004bbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	6039      	str	r1, [r7, #0]
 8004bc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	db0a      	blt.n	8004be6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	b2da      	uxtb	r2, r3
 8004bd4:	490c      	ldr	r1, [pc, #48]	@ (8004c08 <__NVIC_SetPriority+0x4c>)
 8004bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bda:	0112      	lsls	r2, r2, #4
 8004bdc:	b2d2      	uxtb	r2, r2
 8004bde:	440b      	add	r3, r1
 8004be0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004be4:	e00a      	b.n	8004bfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	b2da      	uxtb	r2, r3
 8004bea:	4908      	ldr	r1, [pc, #32]	@ (8004c0c <__NVIC_SetPriority+0x50>)
 8004bec:	79fb      	ldrb	r3, [r7, #7]
 8004bee:	f003 030f 	and.w	r3, r3, #15
 8004bf2:	3b04      	subs	r3, #4
 8004bf4:	0112      	lsls	r2, r2, #4
 8004bf6:	b2d2      	uxtb	r2, r2
 8004bf8:	440b      	add	r3, r1
 8004bfa:	761a      	strb	r2, [r3, #24]
}
 8004bfc:	bf00      	nop
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bc80      	pop	{r7}
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	e000e100 	.word	0xe000e100
 8004c0c:	e000ed00 	.word	0xe000ed00

08004c10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b089      	sub	sp, #36	@ 0x24
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f003 0307 	and.w	r3, r3, #7
 8004c22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	f1c3 0307 	rsb	r3, r3, #7
 8004c2a:	2b04      	cmp	r3, #4
 8004c2c:	bf28      	it	cs
 8004c2e:	2304      	movcs	r3, #4
 8004c30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	3304      	adds	r3, #4
 8004c36:	2b06      	cmp	r3, #6
 8004c38:	d902      	bls.n	8004c40 <NVIC_EncodePriority+0x30>
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	3b03      	subs	r3, #3
 8004c3e:	e000      	b.n	8004c42 <NVIC_EncodePriority+0x32>
 8004c40:	2300      	movs	r3, #0
 8004c42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c44:	f04f 32ff 	mov.w	r2, #4294967295
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4e:	43da      	mvns	r2, r3
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	401a      	ands	r2, r3
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c58:	f04f 31ff 	mov.w	r1, #4294967295
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c62:	43d9      	mvns	r1, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c68:	4313      	orrs	r3, r2
         );
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3724      	adds	r7, #36	@ 0x24
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bc80      	pop	{r7}
 8004c72:	4770      	bx	lr

08004c74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c84:	d301      	bcc.n	8004c8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c86:	2301      	movs	r3, #1
 8004c88:	e00f      	b.n	8004caa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c8a:	4a0a      	ldr	r2, [pc, #40]	@ (8004cb4 <SysTick_Config+0x40>)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c92:	210f      	movs	r1, #15
 8004c94:	f04f 30ff 	mov.w	r0, #4294967295
 8004c98:	f7ff ff90 	bl	8004bbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c9c:	4b05      	ldr	r3, [pc, #20]	@ (8004cb4 <SysTick_Config+0x40>)
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ca2:	4b04      	ldr	r3, [pc, #16]	@ (8004cb4 <SysTick_Config+0x40>)
 8004ca4:	2207      	movs	r2, #7
 8004ca6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3708      	adds	r7, #8
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	e000e010 	.word	0xe000e010

08004cb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f7ff ff2d 	bl	8004b20 <__NVIC_SetPriorityGrouping>
}
 8004cc6:	bf00      	nop
 8004cc8:	3708      	adds	r7, #8
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b086      	sub	sp, #24
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	60b9      	str	r1, [r7, #8]
 8004cd8:	607a      	str	r2, [r7, #4]
 8004cda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004ce0:	f7ff ff42 	bl	8004b68 <__NVIC_GetPriorityGrouping>
 8004ce4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	68b9      	ldr	r1, [r7, #8]
 8004cea:	6978      	ldr	r0, [r7, #20]
 8004cec:	f7ff ff90 	bl	8004c10 <NVIC_EncodePriority>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cf6:	4611      	mov	r1, r2
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f7ff ff5f 	bl	8004bbc <__NVIC_SetPriority>
}
 8004cfe:	bf00      	nop
 8004d00:	3718      	adds	r7, #24
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b082      	sub	sp, #8
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7ff ff35 	bl	8004b84 <__NVIC_EnableIRQ>
}
 8004d1a:	bf00      	nop
 8004d1c:	3708      	adds	r7, #8
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b082      	sub	sp, #8
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7ff ffa2 	bl	8004c74 <SysTick_Config>
 8004d30:	4603      	mov	r3, r0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3708      	adds	r7, #8
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
	...

08004d3c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004d44:	2300      	movs	r3, #0
 8004d46:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d101      	bne.n	8004d52 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e043      	b.n	8004dda <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	461a      	mov	r2, r3
 8004d58:	4b22      	ldr	r3, [pc, #136]	@ (8004de4 <HAL_DMA_Init+0xa8>)
 8004d5a:	4413      	add	r3, r2
 8004d5c:	4a22      	ldr	r2, [pc, #136]	@ (8004de8 <HAL_DMA_Init+0xac>)
 8004d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d62:	091b      	lsrs	r3, r3, #4
 8004d64:	009a      	lsls	r2, r3, #2
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a1f      	ldr	r2, [pc, #124]	@ (8004dec <HAL_DMA_Init+0xb0>)
 8004d6e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2202      	movs	r2, #2
 8004d74:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004d86:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004d8a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004d94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004da0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	69db      	ldr	r3, [r3, #28]
 8004db2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3714      	adds	r7, #20
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bc80      	pop	{r7}
 8004de2:	4770      	bx	lr
 8004de4:	bffdfff8 	.word	0xbffdfff8
 8004de8:	cccccccd 	.word	0xcccccccd
 8004dec:	40020000 	.word	0x40020000

08004df0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b086      	sub	sp, #24
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
 8004dfc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d101      	bne.n	8004e10 <HAL_DMA_Start_IT+0x20>
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	e04b      	b.n	8004ea8 <HAL_DMA_Start_IT+0xb8>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d13a      	bne.n	8004e9a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2202      	movs	r2, #2
 8004e28:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f022 0201 	bic.w	r2, r2, #1
 8004e40:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	68b9      	ldr	r1, [r7, #8]
 8004e48:	68f8      	ldr	r0, [r7, #12]
 8004e4a:	f000 f9eb 	bl	8005224 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d008      	beq.n	8004e68 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f042 020e 	orr.w	r2, r2, #14
 8004e64:	601a      	str	r2, [r3, #0]
 8004e66:	e00f      	b.n	8004e88 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f022 0204 	bic.w	r2, r2, #4
 8004e76:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f042 020a 	orr.w	r2, r2, #10
 8004e86:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f042 0201 	orr.w	r2, r2, #1
 8004e96:	601a      	str	r2, [r3, #0]
 8004e98:	e005      	b.n	8004ea6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004ea6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3718      	adds	r7, #24
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b085      	sub	sp, #20
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d008      	beq.n	8004eda <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2204      	movs	r2, #4
 8004ecc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e020      	b.n	8004f1c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f022 020e 	bic.w	r2, r2, #14
 8004ee8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f022 0201 	bic.w	r2, r2, #1
 8004ef8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f02:	2101      	movs	r1, #1
 8004f04:	fa01 f202 	lsl.w	r2, r1, r2
 8004f08:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3714      	adds	r7, #20
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bc80      	pop	{r7}
 8004f24:	4770      	bx	lr
	...

08004f28 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f30:	2300      	movs	r3, #0
 8004f32:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d005      	beq.n	8004f4c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2204      	movs	r2, #4
 8004f44:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	73fb      	strb	r3, [r7, #15]
 8004f4a:	e051      	b.n	8004ff0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f022 020e 	bic.w	r2, r2, #14
 8004f5a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f022 0201 	bic.w	r2, r2, #1
 8004f6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a22      	ldr	r2, [pc, #136]	@ (8004ffc <HAL_DMA_Abort_IT+0xd4>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d029      	beq.n	8004fca <HAL_DMA_Abort_IT+0xa2>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a21      	ldr	r2, [pc, #132]	@ (8005000 <HAL_DMA_Abort_IT+0xd8>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d022      	beq.n	8004fc6 <HAL_DMA_Abort_IT+0x9e>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a1f      	ldr	r2, [pc, #124]	@ (8005004 <HAL_DMA_Abort_IT+0xdc>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d01a      	beq.n	8004fc0 <HAL_DMA_Abort_IT+0x98>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a1e      	ldr	r2, [pc, #120]	@ (8005008 <HAL_DMA_Abort_IT+0xe0>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d012      	beq.n	8004fba <HAL_DMA_Abort_IT+0x92>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a1c      	ldr	r2, [pc, #112]	@ (800500c <HAL_DMA_Abort_IT+0xe4>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d00a      	beq.n	8004fb4 <HAL_DMA_Abort_IT+0x8c>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a1b      	ldr	r2, [pc, #108]	@ (8005010 <HAL_DMA_Abort_IT+0xe8>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d102      	bne.n	8004fae <HAL_DMA_Abort_IT+0x86>
 8004fa8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004fac:	e00e      	b.n	8004fcc <HAL_DMA_Abort_IT+0xa4>
 8004fae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004fb2:	e00b      	b.n	8004fcc <HAL_DMA_Abort_IT+0xa4>
 8004fb4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004fb8:	e008      	b.n	8004fcc <HAL_DMA_Abort_IT+0xa4>
 8004fba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004fbe:	e005      	b.n	8004fcc <HAL_DMA_Abort_IT+0xa4>
 8004fc0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004fc4:	e002      	b.n	8004fcc <HAL_DMA_Abort_IT+0xa4>
 8004fc6:	2310      	movs	r3, #16
 8004fc8:	e000      	b.n	8004fcc <HAL_DMA_Abort_IT+0xa4>
 8004fca:	2301      	movs	r3, #1
 8004fcc:	4a11      	ldr	r2, [pc, #68]	@ (8005014 <HAL_DMA_Abort_IT+0xec>)
 8004fce:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d003      	beq.n	8004ff0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	4798      	blx	r3
    } 
  }
  return status;
 8004ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3710      	adds	r7, #16
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	40020008 	.word	0x40020008
 8005000:	4002001c 	.word	0x4002001c
 8005004:	40020030 	.word	0x40020030
 8005008:	40020044 	.word	0x40020044
 800500c:	40020058 	.word	0x40020058
 8005010:	4002006c 	.word	0x4002006c
 8005014:	40020000 	.word	0x40020000

08005018 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005034:	2204      	movs	r2, #4
 8005036:	409a      	lsls	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	4013      	ands	r3, r2
 800503c:	2b00      	cmp	r3, #0
 800503e:	d04f      	beq.n	80050e0 <HAL_DMA_IRQHandler+0xc8>
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	f003 0304 	and.w	r3, r3, #4
 8005046:	2b00      	cmp	r3, #0
 8005048:	d04a      	beq.n	80050e0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0320 	and.w	r3, r3, #32
 8005054:	2b00      	cmp	r3, #0
 8005056:	d107      	bne.n	8005068 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f022 0204 	bic.w	r2, r2, #4
 8005066:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a66      	ldr	r2, [pc, #408]	@ (8005208 <HAL_DMA_IRQHandler+0x1f0>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d029      	beq.n	80050c6 <HAL_DMA_IRQHandler+0xae>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a65      	ldr	r2, [pc, #404]	@ (800520c <HAL_DMA_IRQHandler+0x1f4>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d022      	beq.n	80050c2 <HAL_DMA_IRQHandler+0xaa>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a63      	ldr	r2, [pc, #396]	@ (8005210 <HAL_DMA_IRQHandler+0x1f8>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d01a      	beq.n	80050bc <HAL_DMA_IRQHandler+0xa4>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a62      	ldr	r2, [pc, #392]	@ (8005214 <HAL_DMA_IRQHandler+0x1fc>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d012      	beq.n	80050b6 <HAL_DMA_IRQHandler+0x9e>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a60      	ldr	r2, [pc, #384]	@ (8005218 <HAL_DMA_IRQHandler+0x200>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d00a      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x98>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a5f      	ldr	r2, [pc, #380]	@ (800521c <HAL_DMA_IRQHandler+0x204>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d102      	bne.n	80050aa <HAL_DMA_IRQHandler+0x92>
 80050a4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80050a8:	e00e      	b.n	80050c8 <HAL_DMA_IRQHandler+0xb0>
 80050aa:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80050ae:	e00b      	b.n	80050c8 <HAL_DMA_IRQHandler+0xb0>
 80050b0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80050b4:	e008      	b.n	80050c8 <HAL_DMA_IRQHandler+0xb0>
 80050b6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80050ba:	e005      	b.n	80050c8 <HAL_DMA_IRQHandler+0xb0>
 80050bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80050c0:	e002      	b.n	80050c8 <HAL_DMA_IRQHandler+0xb0>
 80050c2:	2340      	movs	r3, #64	@ 0x40
 80050c4:	e000      	b.n	80050c8 <HAL_DMA_IRQHandler+0xb0>
 80050c6:	2304      	movs	r3, #4
 80050c8:	4a55      	ldr	r2, [pc, #340]	@ (8005220 <HAL_DMA_IRQHandler+0x208>)
 80050ca:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f000 8094 	beq.w	80051fe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80050de:	e08e      	b.n	80051fe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e4:	2202      	movs	r2, #2
 80050e6:	409a      	lsls	r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	4013      	ands	r3, r2
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d056      	beq.n	800519e <HAL_DMA_IRQHandler+0x186>
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	f003 0302 	and.w	r3, r3, #2
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d051      	beq.n	800519e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0320 	and.w	r3, r3, #32
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10b      	bne.n	8005120 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f022 020a 	bic.w	r2, r2, #10
 8005116:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a38      	ldr	r2, [pc, #224]	@ (8005208 <HAL_DMA_IRQHandler+0x1f0>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d029      	beq.n	800517e <HAL_DMA_IRQHandler+0x166>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a37      	ldr	r2, [pc, #220]	@ (800520c <HAL_DMA_IRQHandler+0x1f4>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d022      	beq.n	800517a <HAL_DMA_IRQHandler+0x162>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a35      	ldr	r2, [pc, #212]	@ (8005210 <HAL_DMA_IRQHandler+0x1f8>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d01a      	beq.n	8005174 <HAL_DMA_IRQHandler+0x15c>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a34      	ldr	r2, [pc, #208]	@ (8005214 <HAL_DMA_IRQHandler+0x1fc>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d012      	beq.n	800516e <HAL_DMA_IRQHandler+0x156>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a32      	ldr	r2, [pc, #200]	@ (8005218 <HAL_DMA_IRQHandler+0x200>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d00a      	beq.n	8005168 <HAL_DMA_IRQHandler+0x150>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a31      	ldr	r2, [pc, #196]	@ (800521c <HAL_DMA_IRQHandler+0x204>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d102      	bne.n	8005162 <HAL_DMA_IRQHandler+0x14a>
 800515c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005160:	e00e      	b.n	8005180 <HAL_DMA_IRQHandler+0x168>
 8005162:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005166:	e00b      	b.n	8005180 <HAL_DMA_IRQHandler+0x168>
 8005168:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800516c:	e008      	b.n	8005180 <HAL_DMA_IRQHandler+0x168>
 800516e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005172:	e005      	b.n	8005180 <HAL_DMA_IRQHandler+0x168>
 8005174:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005178:	e002      	b.n	8005180 <HAL_DMA_IRQHandler+0x168>
 800517a:	2320      	movs	r3, #32
 800517c:	e000      	b.n	8005180 <HAL_DMA_IRQHandler+0x168>
 800517e:	2302      	movs	r3, #2
 8005180:	4a27      	ldr	r2, [pc, #156]	@ (8005220 <HAL_DMA_IRQHandler+0x208>)
 8005182:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005190:	2b00      	cmp	r3, #0
 8005192:	d034      	beq.n	80051fe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800519c:	e02f      	b.n	80051fe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a2:	2208      	movs	r2, #8
 80051a4:	409a      	lsls	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	4013      	ands	r3, r2
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d028      	beq.n	8005200 <HAL_DMA_IRQHandler+0x1e8>
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	f003 0308 	and.w	r3, r3, #8
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d023      	beq.n	8005200 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f022 020e 	bic.w	r2, r2, #14
 80051c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051d0:	2101      	movs	r1, #1
 80051d2:	fa01 f202 	lsl.w	r2, r1, r2
 80051d6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2201      	movs	r2, #1
 80051e2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d004      	beq.n	8005200 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	4798      	blx	r3
    }
  }
  return;
 80051fe:	bf00      	nop
 8005200:	bf00      	nop
}
 8005202:	3710      	adds	r7, #16
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	40020008 	.word	0x40020008
 800520c:	4002001c 	.word	0x4002001c
 8005210:	40020030 	.word	0x40020030
 8005214:	40020044 	.word	0x40020044
 8005218:	40020058 	.word	0x40020058
 800521c:	4002006c 	.word	0x4002006c
 8005220:	40020000 	.word	0x40020000

08005224 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	60b9      	str	r1, [r7, #8]
 800522e:	607a      	str	r2, [r7, #4]
 8005230:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800523a:	2101      	movs	r1, #1
 800523c:	fa01 f202 	lsl.w	r2, r1, r2
 8005240:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	683a      	ldr	r2, [r7, #0]
 8005248:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	2b10      	cmp	r3, #16
 8005250:	d108      	bne.n	8005264 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005262:	e007      	b.n	8005274 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68ba      	ldr	r2, [r7, #8]
 800526a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	60da      	str	r2, [r3, #12]
}
 8005274:	bf00      	nop
 8005276:	3714      	adds	r7, #20
 8005278:	46bd      	mov	sp, r7
 800527a:	bc80      	pop	{r7}
 800527c:	4770      	bx	lr
	...

08005280 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005280:	b480      	push	{r7}
 8005282:	b08b      	sub	sp, #44	@ 0x2c
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800528a:	2300      	movs	r3, #0
 800528c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800528e:	2300      	movs	r3, #0
 8005290:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005292:	e169      	b.n	8005568 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005294:	2201      	movs	r2, #1
 8005296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005298:	fa02 f303 	lsl.w	r3, r2, r3
 800529c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	69fa      	ldr	r2, [r7, #28]
 80052a4:	4013      	ands	r3, r2
 80052a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80052a8:	69ba      	ldr	r2, [r7, #24]
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	f040 8158 	bne.w	8005562 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	4a9a      	ldr	r2, [pc, #616]	@ (8005520 <HAL_GPIO_Init+0x2a0>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d05e      	beq.n	800537a <HAL_GPIO_Init+0xfa>
 80052bc:	4a98      	ldr	r2, [pc, #608]	@ (8005520 <HAL_GPIO_Init+0x2a0>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d875      	bhi.n	80053ae <HAL_GPIO_Init+0x12e>
 80052c2:	4a98      	ldr	r2, [pc, #608]	@ (8005524 <HAL_GPIO_Init+0x2a4>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d058      	beq.n	800537a <HAL_GPIO_Init+0xfa>
 80052c8:	4a96      	ldr	r2, [pc, #600]	@ (8005524 <HAL_GPIO_Init+0x2a4>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d86f      	bhi.n	80053ae <HAL_GPIO_Init+0x12e>
 80052ce:	4a96      	ldr	r2, [pc, #600]	@ (8005528 <HAL_GPIO_Init+0x2a8>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d052      	beq.n	800537a <HAL_GPIO_Init+0xfa>
 80052d4:	4a94      	ldr	r2, [pc, #592]	@ (8005528 <HAL_GPIO_Init+0x2a8>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d869      	bhi.n	80053ae <HAL_GPIO_Init+0x12e>
 80052da:	4a94      	ldr	r2, [pc, #592]	@ (800552c <HAL_GPIO_Init+0x2ac>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d04c      	beq.n	800537a <HAL_GPIO_Init+0xfa>
 80052e0:	4a92      	ldr	r2, [pc, #584]	@ (800552c <HAL_GPIO_Init+0x2ac>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d863      	bhi.n	80053ae <HAL_GPIO_Init+0x12e>
 80052e6:	4a92      	ldr	r2, [pc, #584]	@ (8005530 <HAL_GPIO_Init+0x2b0>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d046      	beq.n	800537a <HAL_GPIO_Init+0xfa>
 80052ec:	4a90      	ldr	r2, [pc, #576]	@ (8005530 <HAL_GPIO_Init+0x2b0>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d85d      	bhi.n	80053ae <HAL_GPIO_Init+0x12e>
 80052f2:	2b12      	cmp	r3, #18
 80052f4:	d82a      	bhi.n	800534c <HAL_GPIO_Init+0xcc>
 80052f6:	2b12      	cmp	r3, #18
 80052f8:	d859      	bhi.n	80053ae <HAL_GPIO_Init+0x12e>
 80052fa:	a201      	add	r2, pc, #4	@ (adr r2, 8005300 <HAL_GPIO_Init+0x80>)
 80052fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005300:	0800537b 	.word	0x0800537b
 8005304:	08005355 	.word	0x08005355
 8005308:	08005367 	.word	0x08005367
 800530c:	080053a9 	.word	0x080053a9
 8005310:	080053af 	.word	0x080053af
 8005314:	080053af 	.word	0x080053af
 8005318:	080053af 	.word	0x080053af
 800531c:	080053af 	.word	0x080053af
 8005320:	080053af 	.word	0x080053af
 8005324:	080053af 	.word	0x080053af
 8005328:	080053af 	.word	0x080053af
 800532c:	080053af 	.word	0x080053af
 8005330:	080053af 	.word	0x080053af
 8005334:	080053af 	.word	0x080053af
 8005338:	080053af 	.word	0x080053af
 800533c:	080053af 	.word	0x080053af
 8005340:	080053af 	.word	0x080053af
 8005344:	0800535d 	.word	0x0800535d
 8005348:	08005371 	.word	0x08005371
 800534c:	4a79      	ldr	r2, [pc, #484]	@ (8005534 <HAL_GPIO_Init+0x2b4>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d013      	beq.n	800537a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005352:	e02c      	b.n	80053ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	623b      	str	r3, [r7, #32]
          break;
 800535a:	e029      	b.n	80053b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	3304      	adds	r3, #4
 8005362:	623b      	str	r3, [r7, #32]
          break;
 8005364:	e024      	b.n	80053b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	3308      	adds	r3, #8
 800536c:	623b      	str	r3, [r7, #32]
          break;
 800536e:	e01f      	b.n	80053b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	330c      	adds	r3, #12
 8005376:	623b      	str	r3, [r7, #32]
          break;
 8005378:	e01a      	b.n	80053b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d102      	bne.n	8005388 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005382:	2304      	movs	r3, #4
 8005384:	623b      	str	r3, [r7, #32]
          break;
 8005386:	e013      	b.n	80053b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	2b01      	cmp	r3, #1
 800538e:	d105      	bne.n	800539c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005390:	2308      	movs	r3, #8
 8005392:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	69fa      	ldr	r2, [r7, #28]
 8005398:	611a      	str	r2, [r3, #16]
          break;
 800539a:	e009      	b.n	80053b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800539c:	2308      	movs	r3, #8
 800539e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	69fa      	ldr	r2, [r7, #28]
 80053a4:	615a      	str	r2, [r3, #20]
          break;
 80053a6:	e003      	b.n	80053b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80053a8:	2300      	movs	r3, #0
 80053aa:	623b      	str	r3, [r7, #32]
          break;
 80053ac:	e000      	b.n	80053b0 <HAL_GPIO_Init+0x130>
          break;
 80053ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	2bff      	cmp	r3, #255	@ 0xff
 80053b4:	d801      	bhi.n	80053ba <HAL_GPIO_Init+0x13a>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	e001      	b.n	80053be <HAL_GPIO_Init+0x13e>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	3304      	adds	r3, #4
 80053be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	2bff      	cmp	r3, #255	@ 0xff
 80053c4:	d802      	bhi.n	80053cc <HAL_GPIO_Init+0x14c>
 80053c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	e002      	b.n	80053d2 <HAL_GPIO_Init+0x152>
 80053cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ce:	3b08      	subs	r3, #8
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	210f      	movs	r1, #15
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	fa01 f303 	lsl.w	r3, r1, r3
 80053e0:	43db      	mvns	r3, r3
 80053e2:	401a      	ands	r2, r3
 80053e4:	6a39      	ldr	r1, [r7, #32]
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	fa01 f303 	lsl.w	r3, r1, r3
 80053ec:	431a      	orrs	r2, r3
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	f000 80b1 	beq.w	8005562 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005400:	4b4d      	ldr	r3, [pc, #308]	@ (8005538 <HAL_GPIO_Init+0x2b8>)
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	4a4c      	ldr	r2, [pc, #304]	@ (8005538 <HAL_GPIO_Init+0x2b8>)
 8005406:	f043 0301 	orr.w	r3, r3, #1
 800540a:	6193      	str	r3, [r2, #24]
 800540c:	4b4a      	ldr	r3, [pc, #296]	@ (8005538 <HAL_GPIO_Init+0x2b8>)
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	f003 0301 	and.w	r3, r3, #1
 8005414:	60bb      	str	r3, [r7, #8]
 8005416:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005418:	4a48      	ldr	r2, [pc, #288]	@ (800553c <HAL_GPIO_Init+0x2bc>)
 800541a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800541c:	089b      	lsrs	r3, r3, #2
 800541e:	3302      	adds	r3, #2
 8005420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005424:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005428:	f003 0303 	and.w	r3, r3, #3
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	220f      	movs	r2, #15
 8005430:	fa02 f303 	lsl.w	r3, r2, r3
 8005434:	43db      	mvns	r3, r3
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	4013      	ands	r3, r2
 800543a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a40      	ldr	r2, [pc, #256]	@ (8005540 <HAL_GPIO_Init+0x2c0>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d013      	beq.n	800546c <HAL_GPIO_Init+0x1ec>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a3f      	ldr	r2, [pc, #252]	@ (8005544 <HAL_GPIO_Init+0x2c4>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d00d      	beq.n	8005468 <HAL_GPIO_Init+0x1e8>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a3e      	ldr	r2, [pc, #248]	@ (8005548 <HAL_GPIO_Init+0x2c8>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d007      	beq.n	8005464 <HAL_GPIO_Init+0x1e4>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a3d      	ldr	r2, [pc, #244]	@ (800554c <HAL_GPIO_Init+0x2cc>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d101      	bne.n	8005460 <HAL_GPIO_Init+0x1e0>
 800545c:	2303      	movs	r3, #3
 800545e:	e006      	b.n	800546e <HAL_GPIO_Init+0x1ee>
 8005460:	2304      	movs	r3, #4
 8005462:	e004      	b.n	800546e <HAL_GPIO_Init+0x1ee>
 8005464:	2302      	movs	r3, #2
 8005466:	e002      	b.n	800546e <HAL_GPIO_Init+0x1ee>
 8005468:	2301      	movs	r3, #1
 800546a:	e000      	b.n	800546e <HAL_GPIO_Init+0x1ee>
 800546c:	2300      	movs	r3, #0
 800546e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005470:	f002 0203 	and.w	r2, r2, #3
 8005474:	0092      	lsls	r2, r2, #2
 8005476:	4093      	lsls	r3, r2
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	4313      	orrs	r3, r2
 800547c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800547e:	492f      	ldr	r1, [pc, #188]	@ (800553c <HAL_GPIO_Init+0x2bc>)
 8005480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005482:	089b      	lsrs	r3, r3, #2
 8005484:	3302      	adds	r3, #2
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d006      	beq.n	80054a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005498:	4b2d      	ldr	r3, [pc, #180]	@ (8005550 <HAL_GPIO_Init+0x2d0>)
 800549a:	689a      	ldr	r2, [r3, #8]
 800549c:	492c      	ldr	r1, [pc, #176]	@ (8005550 <HAL_GPIO_Init+0x2d0>)
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	608b      	str	r3, [r1, #8]
 80054a4:	e006      	b.n	80054b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80054a6:	4b2a      	ldr	r3, [pc, #168]	@ (8005550 <HAL_GPIO_Init+0x2d0>)
 80054a8:	689a      	ldr	r2, [r3, #8]
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	43db      	mvns	r3, r3
 80054ae:	4928      	ldr	r1, [pc, #160]	@ (8005550 <HAL_GPIO_Init+0x2d0>)
 80054b0:	4013      	ands	r3, r2
 80054b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d006      	beq.n	80054ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80054c0:	4b23      	ldr	r3, [pc, #140]	@ (8005550 <HAL_GPIO_Init+0x2d0>)
 80054c2:	68da      	ldr	r2, [r3, #12]
 80054c4:	4922      	ldr	r1, [pc, #136]	@ (8005550 <HAL_GPIO_Init+0x2d0>)
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	60cb      	str	r3, [r1, #12]
 80054cc:	e006      	b.n	80054dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80054ce:	4b20      	ldr	r3, [pc, #128]	@ (8005550 <HAL_GPIO_Init+0x2d0>)
 80054d0:	68da      	ldr	r2, [r3, #12]
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	43db      	mvns	r3, r3
 80054d6:	491e      	ldr	r1, [pc, #120]	@ (8005550 <HAL_GPIO_Init+0x2d0>)
 80054d8:	4013      	ands	r3, r2
 80054da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d006      	beq.n	80054f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80054e8:	4b19      	ldr	r3, [pc, #100]	@ (8005550 <HAL_GPIO_Init+0x2d0>)
 80054ea:	685a      	ldr	r2, [r3, #4]
 80054ec:	4918      	ldr	r1, [pc, #96]	@ (8005550 <HAL_GPIO_Init+0x2d0>)
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	604b      	str	r3, [r1, #4]
 80054f4:	e006      	b.n	8005504 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80054f6:	4b16      	ldr	r3, [pc, #88]	@ (8005550 <HAL_GPIO_Init+0x2d0>)
 80054f8:	685a      	ldr	r2, [r3, #4]
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	43db      	mvns	r3, r3
 80054fe:	4914      	ldr	r1, [pc, #80]	@ (8005550 <HAL_GPIO_Init+0x2d0>)
 8005500:	4013      	ands	r3, r2
 8005502:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d021      	beq.n	8005554 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005510:	4b0f      	ldr	r3, [pc, #60]	@ (8005550 <HAL_GPIO_Init+0x2d0>)
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	490e      	ldr	r1, [pc, #56]	@ (8005550 <HAL_GPIO_Init+0x2d0>)
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	4313      	orrs	r3, r2
 800551a:	600b      	str	r3, [r1, #0]
 800551c:	e021      	b.n	8005562 <HAL_GPIO_Init+0x2e2>
 800551e:	bf00      	nop
 8005520:	10320000 	.word	0x10320000
 8005524:	10310000 	.word	0x10310000
 8005528:	10220000 	.word	0x10220000
 800552c:	10210000 	.word	0x10210000
 8005530:	10120000 	.word	0x10120000
 8005534:	10110000 	.word	0x10110000
 8005538:	40021000 	.word	0x40021000
 800553c:	40010000 	.word	0x40010000
 8005540:	40010800 	.word	0x40010800
 8005544:	40010c00 	.word	0x40010c00
 8005548:	40011000 	.word	0x40011000
 800554c:	40011400 	.word	0x40011400
 8005550:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005554:	4b0b      	ldr	r3, [pc, #44]	@ (8005584 <HAL_GPIO_Init+0x304>)
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	43db      	mvns	r3, r3
 800555c:	4909      	ldr	r1, [pc, #36]	@ (8005584 <HAL_GPIO_Init+0x304>)
 800555e:	4013      	ands	r3, r2
 8005560:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8005562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005564:	3301      	adds	r3, #1
 8005566:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800556e:	fa22 f303 	lsr.w	r3, r2, r3
 8005572:	2b00      	cmp	r3, #0
 8005574:	f47f ae8e 	bne.w	8005294 <HAL_GPIO_Init+0x14>
  }
}
 8005578:	bf00      	nop
 800557a:	bf00      	nop
 800557c:	372c      	adds	r7, #44	@ 0x2c
 800557e:	46bd      	mov	sp, r7
 8005580:	bc80      	pop	{r7}
 8005582:	4770      	bx	lr
 8005584:	40010400 	.word	0x40010400

08005588 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	460b      	mov	r3, r1
 8005592:	807b      	strh	r3, [r7, #2]
 8005594:	4613      	mov	r3, r2
 8005596:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005598:	787b      	ldrb	r3, [r7, #1]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d003      	beq.n	80055a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800559e:	887a      	ldrh	r2, [r7, #2]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80055a4:	e003      	b.n	80055ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80055a6:	887b      	ldrh	r3, [r7, #2]
 80055a8:	041a      	lsls	r2, r3, #16
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	611a      	str	r2, [r3, #16]
}
 80055ae:	bf00      	nop
 80055b0:	370c      	adds	r7, #12
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bc80      	pop	{r7}
 80055b6:	4770      	bx	lr

080055b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d101      	bne.n	80055ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e12b      	b.n	8005822 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d106      	bne.n	80055e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f7fb fda6 	bl	8001130 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2224      	movs	r2, #36	@ 0x24
 80055e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f022 0201 	bic.w	r2, r2, #1
 80055fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800560a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800561a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800561c:	f001 fbca 	bl	8006db4 <HAL_RCC_GetPCLK1Freq>
 8005620:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	4a81      	ldr	r2, [pc, #516]	@ (800582c <HAL_I2C_Init+0x274>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d807      	bhi.n	800563c <HAL_I2C_Init+0x84>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	4a80      	ldr	r2, [pc, #512]	@ (8005830 <HAL_I2C_Init+0x278>)
 8005630:	4293      	cmp	r3, r2
 8005632:	bf94      	ite	ls
 8005634:	2301      	movls	r3, #1
 8005636:	2300      	movhi	r3, #0
 8005638:	b2db      	uxtb	r3, r3
 800563a:	e006      	b.n	800564a <HAL_I2C_Init+0x92>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	4a7d      	ldr	r2, [pc, #500]	@ (8005834 <HAL_I2C_Init+0x27c>)
 8005640:	4293      	cmp	r3, r2
 8005642:	bf94      	ite	ls
 8005644:	2301      	movls	r3, #1
 8005646:	2300      	movhi	r3, #0
 8005648:	b2db      	uxtb	r3, r3
 800564a:	2b00      	cmp	r3, #0
 800564c:	d001      	beq.n	8005652 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e0e7      	b.n	8005822 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	4a78      	ldr	r2, [pc, #480]	@ (8005838 <HAL_I2C_Init+0x280>)
 8005656:	fba2 2303 	umull	r2, r3, r2, r3
 800565a:	0c9b      	lsrs	r3, r3, #18
 800565c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68ba      	ldr	r2, [r7, #8]
 800566e:	430a      	orrs	r2, r1
 8005670:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	6a1b      	ldr	r3, [r3, #32]
 8005678:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	4a6a      	ldr	r2, [pc, #424]	@ (800582c <HAL_I2C_Init+0x274>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d802      	bhi.n	800568c <HAL_I2C_Init+0xd4>
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	3301      	adds	r3, #1
 800568a:	e009      	b.n	80056a0 <HAL_I2C_Init+0xe8>
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005692:	fb02 f303 	mul.w	r3, r2, r3
 8005696:	4a69      	ldr	r2, [pc, #420]	@ (800583c <HAL_I2C_Init+0x284>)
 8005698:	fba2 2303 	umull	r2, r3, r2, r3
 800569c:	099b      	lsrs	r3, r3, #6
 800569e:	3301      	adds	r3, #1
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	6812      	ldr	r2, [r2, #0]
 80056a4:	430b      	orrs	r3, r1
 80056a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	69db      	ldr	r3, [r3, #28]
 80056ae:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80056b2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	495c      	ldr	r1, [pc, #368]	@ (800582c <HAL_I2C_Init+0x274>)
 80056bc:	428b      	cmp	r3, r1
 80056be:	d819      	bhi.n	80056f4 <HAL_I2C_Init+0x13c>
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	1e59      	subs	r1, r3, #1
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	005b      	lsls	r3, r3, #1
 80056ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80056ce:	1c59      	adds	r1, r3, #1
 80056d0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80056d4:	400b      	ands	r3, r1
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00a      	beq.n	80056f0 <HAL_I2C_Init+0x138>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	1e59      	subs	r1, r3, #1
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	005b      	lsls	r3, r3, #1
 80056e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80056e8:	3301      	adds	r3, #1
 80056ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056ee:	e051      	b.n	8005794 <HAL_I2C_Init+0x1dc>
 80056f0:	2304      	movs	r3, #4
 80056f2:	e04f      	b.n	8005794 <HAL_I2C_Init+0x1dc>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d111      	bne.n	8005720 <HAL_I2C_Init+0x168>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	1e58      	subs	r0, r3, #1
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6859      	ldr	r1, [r3, #4]
 8005704:	460b      	mov	r3, r1
 8005706:	005b      	lsls	r3, r3, #1
 8005708:	440b      	add	r3, r1
 800570a:	fbb0 f3f3 	udiv	r3, r0, r3
 800570e:	3301      	adds	r3, #1
 8005710:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005714:	2b00      	cmp	r3, #0
 8005716:	bf0c      	ite	eq
 8005718:	2301      	moveq	r3, #1
 800571a:	2300      	movne	r3, #0
 800571c:	b2db      	uxtb	r3, r3
 800571e:	e012      	b.n	8005746 <HAL_I2C_Init+0x18e>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	1e58      	subs	r0, r3, #1
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6859      	ldr	r1, [r3, #4]
 8005728:	460b      	mov	r3, r1
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	440b      	add	r3, r1
 800572e:	0099      	lsls	r1, r3, #2
 8005730:	440b      	add	r3, r1
 8005732:	fbb0 f3f3 	udiv	r3, r0, r3
 8005736:	3301      	adds	r3, #1
 8005738:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800573c:	2b00      	cmp	r3, #0
 800573e:	bf0c      	ite	eq
 8005740:	2301      	moveq	r3, #1
 8005742:	2300      	movne	r3, #0
 8005744:	b2db      	uxtb	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d001      	beq.n	800574e <HAL_I2C_Init+0x196>
 800574a:	2301      	movs	r3, #1
 800574c:	e022      	b.n	8005794 <HAL_I2C_Init+0x1dc>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d10e      	bne.n	8005774 <HAL_I2C_Init+0x1bc>
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	1e58      	subs	r0, r3, #1
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6859      	ldr	r1, [r3, #4]
 800575e:	460b      	mov	r3, r1
 8005760:	005b      	lsls	r3, r3, #1
 8005762:	440b      	add	r3, r1
 8005764:	fbb0 f3f3 	udiv	r3, r0, r3
 8005768:	3301      	adds	r3, #1
 800576a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800576e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005772:	e00f      	b.n	8005794 <HAL_I2C_Init+0x1dc>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	1e58      	subs	r0, r3, #1
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6859      	ldr	r1, [r3, #4]
 800577c:	460b      	mov	r3, r1
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	440b      	add	r3, r1
 8005782:	0099      	lsls	r1, r3, #2
 8005784:	440b      	add	r3, r1
 8005786:	fbb0 f3f3 	udiv	r3, r0, r3
 800578a:	3301      	adds	r3, #1
 800578c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005790:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005794:	6879      	ldr	r1, [r7, #4]
 8005796:	6809      	ldr	r1, [r1, #0]
 8005798:	4313      	orrs	r3, r2
 800579a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	69da      	ldr	r2, [r3, #28]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	431a      	orrs	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	430a      	orrs	r2, r1
 80057b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80057c2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	6911      	ldr	r1, [r2, #16]
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	68d2      	ldr	r2, [r2, #12]
 80057ce:	4311      	orrs	r1, r2
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	6812      	ldr	r2, [r2, #0]
 80057d4:	430b      	orrs	r3, r1
 80057d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	695a      	ldr	r2, [r3, #20]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	431a      	orrs	r2, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	430a      	orrs	r2, r1
 80057f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f042 0201 	orr.w	r2, r2, #1
 8005802:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2220      	movs	r2, #32
 800580e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	000186a0 	.word	0x000186a0
 8005830:	001e847f 	.word	0x001e847f
 8005834:	003d08ff 	.word	0x003d08ff
 8005838:	431bde83 	.word	0x431bde83
 800583c:	10624dd3 	.word	0x10624dd3

08005840 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b088      	sub	sp, #32
 8005844:	af02      	add	r7, sp, #8
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	607a      	str	r2, [r7, #4]
 800584a:	461a      	mov	r2, r3
 800584c:	460b      	mov	r3, r1
 800584e:	817b      	strh	r3, [r7, #10]
 8005850:	4613      	mov	r3, r2
 8005852:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005854:	f7fe fc7a 	bl	800414c <HAL_GetTick>
 8005858:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005860:	b2db      	uxtb	r3, r3
 8005862:	2b20      	cmp	r3, #32
 8005864:	f040 80e0 	bne.w	8005a28 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	9300      	str	r3, [sp, #0]
 800586c:	2319      	movs	r3, #25
 800586e:	2201      	movs	r2, #1
 8005870:	4970      	ldr	r1, [pc, #448]	@ (8005a34 <HAL_I2C_Master_Transmit+0x1f4>)
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	f000 fc9e 	bl	80061b4 <I2C_WaitOnFlagUntilTimeout>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d001      	beq.n	8005882 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800587e:	2302      	movs	r3, #2
 8005880:	e0d3      	b.n	8005a2a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005888:	2b01      	cmp	r3, #1
 800588a:	d101      	bne.n	8005890 <HAL_I2C_Master_Transmit+0x50>
 800588c:	2302      	movs	r3, #2
 800588e:	e0cc      	b.n	8005a2a <HAL_I2C_Master_Transmit+0x1ea>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0301 	and.w	r3, r3, #1
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d007      	beq.n	80058b6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f042 0201 	orr.w	r2, r2, #1
 80058b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80058c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2221      	movs	r2, #33	@ 0x21
 80058ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2210      	movs	r2, #16
 80058d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	893a      	ldrh	r2, [r7, #8]
 80058e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058ec:	b29a      	uxth	r2, r3
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	4a50      	ldr	r2, [pc, #320]	@ (8005a38 <HAL_I2C_Master_Transmit+0x1f8>)
 80058f6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80058f8:	8979      	ldrh	r1, [r7, #10]
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	6a3a      	ldr	r2, [r7, #32]
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f000 fb08 	bl	8005f14 <I2C_MasterRequestWrite>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d001      	beq.n	800590e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e08d      	b.n	8005a2a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800590e:	2300      	movs	r3, #0
 8005910:	613b      	str	r3, [r7, #16]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	695b      	ldr	r3, [r3, #20]
 8005918:	613b      	str	r3, [r7, #16]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	699b      	ldr	r3, [r3, #24]
 8005920:	613b      	str	r3, [r7, #16]
 8005922:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005924:	e066      	b.n	80059f4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	6a39      	ldr	r1, [r7, #32]
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	f000 fd5c 	bl	80063e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00d      	beq.n	8005952 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800593a:	2b04      	cmp	r3, #4
 800593c:	d107      	bne.n	800594e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800594c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e06b      	b.n	8005a2a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005956:	781a      	ldrb	r2, [r3, #0]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005962:	1c5a      	adds	r2, r3, #1
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800596c:	b29b      	uxth	r3, r3
 800596e:	3b01      	subs	r3, #1
 8005970:	b29a      	uxth	r2, r3
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800597a:	3b01      	subs	r3, #1
 800597c:	b29a      	uxth	r2, r3
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	695b      	ldr	r3, [r3, #20]
 8005988:	f003 0304 	and.w	r3, r3, #4
 800598c:	2b04      	cmp	r3, #4
 800598e:	d11b      	bne.n	80059c8 <HAL_I2C_Master_Transmit+0x188>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005994:	2b00      	cmp	r3, #0
 8005996:	d017      	beq.n	80059c8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800599c:	781a      	ldrb	r2, [r3, #0]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a8:	1c5a      	adds	r2, r3, #1
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	3b01      	subs	r3, #1
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059c0:	3b01      	subs	r3, #1
 80059c2:	b29a      	uxth	r2, r3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059c8:	697a      	ldr	r2, [r7, #20]
 80059ca:	6a39      	ldr	r1, [r7, #32]
 80059cc:	68f8      	ldr	r0, [r7, #12]
 80059ce:	f000 fd53 	bl	8006478 <I2C_WaitOnBTFFlagUntilTimeout>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00d      	beq.n	80059f4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059dc:	2b04      	cmp	r3, #4
 80059de:	d107      	bne.n	80059f0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059ee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e01a      	b.n	8005a2a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d194      	bne.n	8005926 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2220      	movs	r2, #32
 8005a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005a24:	2300      	movs	r3, #0
 8005a26:	e000      	b.n	8005a2a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005a28:	2302      	movs	r3, #2
  }
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3718      	adds	r7, #24
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
 8005a32:	bf00      	nop
 8005a34:	00100002 	.word	0x00100002
 8005a38:	ffff0000 	.word	0xffff0000

08005a3c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b08c      	sub	sp, #48	@ 0x30
 8005a40:	af02      	add	r7, sp, #8
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	607a      	str	r2, [r7, #4]
 8005a46:	461a      	mov	r2, r3
 8005a48:	460b      	mov	r3, r1
 8005a4a:	817b      	strh	r3, [r7, #10]
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8005a50:	2300      	movs	r3, #0
 8005a52:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a54:	f7fe fb7a 	bl	800414c <HAL_GetTick>
 8005a58:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	2b20      	cmp	r3, #32
 8005a64:	f040 824b 	bne.w	8005efe <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a6a:	9300      	str	r3, [sp, #0]
 8005a6c:	2319      	movs	r3, #25
 8005a6e:	2201      	movs	r2, #1
 8005a70:	497f      	ldr	r1, [pc, #508]	@ (8005c70 <HAL_I2C_Master_Receive+0x234>)
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	f000 fb9e 	bl	80061b4 <I2C_WaitOnFlagUntilTimeout>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d001      	beq.n	8005a82 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8005a7e:	2302      	movs	r3, #2
 8005a80:	e23e      	b.n	8005f00 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d101      	bne.n	8005a90 <HAL_I2C_Master_Receive+0x54>
 8005a8c:	2302      	movs	r3, #2
 8005a8e:	e237      	b.n	8005f00 <HAL_I2C_Master_Receive+0x4c4>
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0301 	and.w	r3, r3, #1
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d007      	beq.n	8005ab6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f042 0201 	orr.w	r2, r2, #1
 8005ab4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ac4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2222      	movs	r2, #34	@ 0x22
 8005aca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2210      	movs	r2, #16
 8005ad2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	893a      	ldrh	r2, [r7, #8]
 8005ae6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aec:	b29a      	uxth	r2, r3
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	4a5f      	ldr	r2, [pc, #380]	@ (8005c74 <HAL_I2C_Master_Receive+0x238>)
 8005af6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005af8:	8979      	ldrh	r1, [r7, #10]
 8005afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005afc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f000 fa8a 	bl	8006018 <I2C_MasterRequestRead>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d001      	beq.n	8005b0e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e1f8      	b.n	8005f00 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d113      	bne.n	8005b3e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b16:	2300      	movs	r3, #0
 8005b18:	61fb      	str	r3, [r7, #28]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	695b      	ldr	r3, [r3, #20]
 8005b20:	61fb      	str	r3, [r7, #28]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	61fb      	str	r3, [r7, #28]
 8005b2a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b3a:	601a      	str	r2, [r3, #0]
 8005b3c:	e1cc      	b.n	8005ed8 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d11e      	bne.n	8005b84 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b54:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005b56:	b672      	cpsid	i
}
 8005b58:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	61bb      	str	r3, [r7, #24]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	695b      	ldr	r3, [r3, #20]
 8005b64:	61bb      	str	r3, [r7, #24]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	61bb      	str	r3, [r7, #24]
 8005b6e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b7e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005b80:	b662      	cpsie	i
}
 8005b82:	e035      	b.n	8005bf0 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d11e      	bne.n	8005bca <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b9a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005b9c:	b672      	cpsid	i
}
 8005b9e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	617b      	str	r3, [r7, #20]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	617b      	str	r3, [r7, #20]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	617b      	str	r3, [r7, #20]
 8005bb4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bc4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005bc6:	b662      	cpsie	i
}
 8005bc8:	e012      	b.n	8005bf0 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005bd8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bda:	2300      	movs	r3, #0
 8005bdc:	613b      	str	r3, [r7, #16]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	695b      	ldr	r3, [r3, #20]
 8005be4:	613b      	str	r3, [r7, #16]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	699b      	ldr	r3, [r3, #24]
 8005bec:	613b      	str	r3, [r7, #16]
 8005bee:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005bf0:	e172      	b.n	8005ed8 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bf6:	2b03      	cmp	r3, #3
 8005bf8:	f200 811f 	bhi.w	8005e3a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d123      	bne.n	8005c4c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c06:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	f000 fc7d 	bl	8006508 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d001      	beq.n	8005c18 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e173      	b.n	8005f00 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	691a      	ldr	r2, [r3, #16]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c22:	b2d2      	uxtb	r2, r2
 8005c24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c2a:	1c5a      	adds	r2, r3, #1
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c34:	3b01      	subs	r3, #1
 8005c36:	b29a      	uxth	r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	3b01      	subs	r3, #1
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005c4a:	e145      	b.n	8005ed8 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d152      	bne.n	8005cfa <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c56:	9300      	str	r3, [sp, #0]
 8005c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	4906      	ldr	r1, [pc, #24]	@ (8005c78 <HAL_I2C_Master_Receive+0x23c>)
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f000 faa8 	bl	80061b4 <I2C_WaitOnFlagUntilTimeout>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d008      	beq.n	8005c7c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e148      	b.n	8005f00 <HAL_I2C_Master_Receive+0x4c4>
 8005c6e:	bf00      	nop
 8005c70:	00100002 	.word	0x00100002
 8005c74:	ffff0000 	.word	0xffff0000
 8005c78:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005c7c:	b672      	cpsid	i
}
 8005c7e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	691a      	ldr	r2, [r3, #16]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c9a:	b2d2      	uxtb	r2, r2
 8005c9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ca2:	1c5a      	adds	r2, r3, #1
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cac:	3b01      	subs	r3, #1
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	b29a      	uxth	r2, r3
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005cc2:	b662      	cpsie	i
}
 8005cc4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	691a      	ldr	r2, [r3, #16]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cd0:	b2d2      	uxtb	r2, r2
 8005cd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cd8:	1c5a      	adds	r2, r3, #1
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	b29a      	uxth	r2, r3
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005cf8:	e0ee      	b.n	8005ed8 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cfc:	9300      	str	r3, [sp, #0]
 8005cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d00:	2200      	movs	r2, #0
 8005d02:	4981      	ldr	r1, [pc, #516]	@ (8005f08 <HAL_I2C_Master_Receive+0x4cc>)
 8005d04:	68f8      	ldr	r0, [r7, #12]
 8005d06:	f000 fa55 	bl	80061b4 <I2C_WaitOnFlagUntilTimeout>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d001      	beq.n	8005d14 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e0f5      	b.n	8005f00 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d22:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005d24:	b672      	cpsid	i
}
 8005d26:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	691a      	ldr	r2, [r3, #16]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d32:	b2d2      	uxtb	r2, r2
 8005d34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d3a:	1c5a      	adds	r2, r3, #1
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d44:	3b01      	subs	r3, #1
 8005d46:	b29a      	uxth	r2, r3
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	3b01      	subs	r3, #1
 8005d54:	b29a      	uxth	r2, r3
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005d5a:	4b6c      	ldr	r3, [pc, #432]	@ (8005f0c <HAL_I2C_Master_Receive+0x4d0>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	08db      	lsrs	r3, r3, #3
 8005d60:	4a6b      	ldr	r2, [pc, #428]	@ (8005f10 <HAL_I2C_Master_Receive+0x4d4>)
 8005d62:	fba2 2303 	umull	r2, r3, r2, r3
 8005d66:	0a1a      	lsrs	r2, r3, #8
 8005d68:	4613      	mov	r3, r2
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	4413      	add	r3, r2
 8005d6e:	00da      	lsls	r2, r3, #3
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005d74:	6a3b      	ldr	r3, [r7, #32]
 8005d76:	3b01      	subs	r3, #1
 8005d78:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005d7a:	6a3b      	ldr	r3, [r7, #32]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d118      	bne.n	8005db2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2220      	movs	r2, #32
 8005d8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d9a:	f043 0220 	orr.w	r2, r3, #32
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005da2:	b662      	cpsie	i
}
 8005da4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e0a6      	b.n	8005f00 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	695b      	ldr	r3, [r3, #20]
 8005db8:	f003 0304 	and.w	r3, r3, #4
 8005dbc:	2b04      	cmp	r3, #4
 8005dbe:	d1d9      	bne.n	8005d74 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005dce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	691a      	ldr	r2, [r3, #16]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dda:	b2d2      	uxtb	r2, r2
 8005ddc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005de2:	1c5a      	adds	r2, r3, #1
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dec:	3b01      	subs	r3, #1
 8005dee:	b29a      	uxth	r2, r3
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	b29a      	uxth	r2, r3
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005e02:	b662      	cpsie	i
}
 8005e04:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	691a      	ldr	r2, [r3, #16]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e10:	b2d2      	uxtb	r2, r2
 8005e12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e18:	1c5a      	adds	r2, r3, #1
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e22:	3b01      	subs	r3, #1
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	3b01      	subs	r3, #1
 8005e32:	b29a      	uxth	r2, r3
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005e38:	e04e      	b.n	8005ed8 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e3c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005e3e:	68f8      	ldr	r0, [r7, #12]
 8005e40:	f000 fb62 	bl	8006508 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d001      	beq.n	8005e4e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e058      	b.n	8005f00 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	691a      	ldr	r2, [r3, #16]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e58:	b2d2      	uxtb	r2, r2
 8005e5a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e60:	1c5a      	adds	r2, r3, #1
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e6a:	3b01      	subs	r3, #1
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	f003 0304 	and.w	r3, r3, #4
 8005e8a:	2b04      	cmp	r3, #4
 8005e8c:	d124      	bne.n	8005ed8 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e92:	2b03      	cmp	r3, #3
 8005e94:	d107      	bne.n	8005ea6 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ea4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	691a      	ldr	r2, [r3, #16]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb0:	b2d2      	uxtb	r2, r2
 8005eb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb8:	1c5a      	adds	r2, r3, #1
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	b29a      	uxth	r2, r3
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f47f ae88 	bne.w	8005bf2 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2220      	movs	r2, #32
 8005ee6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005efa:	2300      	movs	r3, #0
 8005efc:	e000      	b.n	8005f00 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8005efe:	2302      	movs	r3, #2
  }
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3728      	adds	r7, #40	@ 0x28
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	00010004 	.word	0x00010004
 8005f0c:	20000038 	.word	0x20000038
 8005f10:	14f8b589 	.word	0x14f8b589

08005f14 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b088      	sub	sp, #32
 8005f18:	af02      	add	r7, sp, #8
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	607a      	str	r2, [r7, #4]
 8005f1e:	603b      	str	r3, [r7, #0]
 8005f20:	460b      	mov	r3, r1
 8005f22:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f28:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	2b08      	cmp	r3, #8
 8005f2e:	d006      	beq.n	8005f3e <I2C_MasterRequestWrite+0x2a>
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d003      	beq.n	8005f3e <I2C_MasterRequestWrite+0x2a>
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005f3c:	d108      	bne.n	8005f50 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f4c:	601a      	str	r2, [r3, #0]
 8005f4e:	e00b      	b.n	8005f68 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f54:	2b12      	cmp	r3, #18
 8005f56:	d107      	bne.n	8005f68 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f66:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	9300      	str	r3, [sp, #0]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005f74:	68f8      	ldr	r0, [r7, #12]
 8005f76:	f000 f91d 	bl	80061b4 <I2C_WaitOnFlagUntilTimeout>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d00d      	beq.n	8005f9c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f8e:	d103      	bne.n	8005f98 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f96:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	e035      	b.n	8006008 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005fa4:	d108      	bne.n	8005fb8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005fa6:	897b      	ldrh	r3, [r7, #10]
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	461a      	mov	r2, r3
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005fb4:	611a      	str	r2, [r3, #16]
 8005fb6:	e01b      	b.n	8005ff0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005fb8:	897b      	ldrh	r3, [r7, #10]
 8005fba:	11db      	asrs	r3, r3, #7
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	f003 0306 	and.w	r3, r3, #6
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	f063 030f 	orn	r3, r3, #15
 8005fc8:	b2da      	uxtb	r2, r3
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	490e      	ldr	r1, [pc, #56]	@ (8006010 <I2C_MasterRequestWrite+0xfc>)
 8005fd6:	68f8      	ldr	r0, [r7, #12]
 8005fd8:	f000 f966 	bl	80062a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d001      	beq.n	8005fe6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e010      	b.n	8006008 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005fe6:	897b      	ldrh	r3, [r7, #10]
 8005fe8:	b2da      	uxtb	r2, r3
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	4907      	ldr	r1, [pc, #28]	@ (8006014 <I2C_MasterRequestWrite+0x100>)
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	f000 f956 	bl	80062a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d001      	beq.n	8006006 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e000      	b.n	8006008 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	3718      	adds	r7, #24
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	00010008 	.word	0x00010008
 8006014:	00010002 	.word	0x00010002

08006018 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b088      	sub	sp, #32
 800601c:	af02      	add	r7, sp, #8
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	607a      	str	r2, [r7, #4]
 8006022:	603b      	str	r3, [r7, #0]
 8006024:	460b      	mov	r3, r1
 8006026:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800602c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800603c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	2b08      	cmp	r3, #8
 8006042:	d006      	beq.n	8006052 <I2C_MasterRequestRead+0x3a>
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	2b01      	cmp	r3, #1
 8006048:	d003      	beq.n	8006052 <I2C_MasterRequestRead+0x3a>
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006050:	d108      	bne.n	8006064 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006060:	601a      	str	r2, [r3, #0]
 8006062:	e00b      	b.n	800607c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006068:	2b11      	cmp	r3, #17
 800606a:	d107      	bne.n	800607c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800607a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	9300      	str	r3, [sp, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	f000 f893 	bl	80061b4 <I2C_WaitOnFlagUntilTimeout>
 800608e:	4603      	mov	r3, r0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d00d      	beq.n	80060b0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800609e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060a2:	d103      	bne.n	80060ac <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060aa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80060ac:	2303      	movs	r3, #3
 80060ae:	e079      	b.n	80061a4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80060b8:	d108      	bne.n	80060cc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80060ba:	897b      	ldrh	r3, [r7, #10]
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	f043 0301 	orr.w	r3, r3, #1
 80060c2:	b2da      	uxtb	r2, r3
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	611a      	str	r2, [r3, #16]
 80060ca:	e05f      	b.n	800618c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80060cc:	897b      	ldrh	r3, [r7, #10]
 80060ce:	11db      	asrs	r3, r3, #7
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	f003 0306 	and.w	r3, r3, #6
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	f063 030f 	orn	r3, r3, #15
 80060dc:	b2da      	uxtb	r2, r3
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	4930      	ldr	r1, [pc, #192]	@ (80061ac <I2C_MasterRequestRead+0x194>)
 80060ea:	68f8      	ldr	r0, [r7, #12]
 80060ec:	f000 f8dc 	bl	80062a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d001      	beq.n	80060fa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e054      	b.n	80061a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80060fa:	897b      	ldrh	r3, [r7, #10]
 80060fc:	b2da      	uxtb	r2, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	4929      	ldr	r1, [pc, #164]	@ (80061b0 <I2C_MasterRequestRead+0x198>)
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	f000 f8cc 	bl	80062a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d001      	beq.n	800611a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e044      	b.n	80061a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800611a:	2300      	movs	r3, #0
 800611c:	613b      	str	r3, [r7, #16]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	695b      	ldr	r3, [r3, #20]
 8006124:	613b      	str	r3, [r7, #16]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	699b      	ldr	r3, [r3, #24]
 800612c:	613b      	str	r3, [r7, #16]
 800612e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800613e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	9300      	str	r3, [sp, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	f000 f831 	bl	80061b4 <I2C_WaitOnFlagUntilTimeout>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00d      	beq.n	8006174 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006162:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006166:	d103      	bne.n	8006170 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800616e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8006170:	2303      	movs	r3, #3
 8006172:	e017      	b.n	80061a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006174:	897b      	ldrh	r3, [r7, #10]
 8006176:	11db      	asrs	r3, r3, #7
 8006178:	b2db      	uxtb	r3, r3
 800617a:	f003 0306 	and.w	r3, r3, #6
 800617e:	b2db      	uxtb	r3, r3
 8006180:	f063 030e 	orn	r3, r3, #14
 8006184:	b2da      	uxtb	r2, r3
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	4907      	ldr	r1, [pc, #28]	@ (80061b0 <I2C_MasterRequestRead+0x198>)
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	f000 f888 	bl	80062a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d001      	beq.n	80061a2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e000      	b.n	80061a4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3718      	adds	r7, #24
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	00010008 	.word	0x00010008
 80061b0:	00010002 	.word	0x00010002

080061b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	603b      	str	r3, [r7, #0]
 80061c0:	4613      	mov	r3, r2
 80061c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061c4:	e048      	b.n	8006258 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061cc:	d044      	beq.n	8006258 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061ce:	f7fd ffbd 	bl	800414c <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	683a      	ldr	r2, [r7, #0]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d302      	bcc.n	80061e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d139      	bne.n	8006258 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	0c1b      	lsrs	r3, r3, #16
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d10d      	bne.n	800620a <I2C_WaitOnFlagUntilTimeout+0x56>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	695b      	ldr	r3, [r3, #20]
 80061f4:	43da      	mvns	r2, r3
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	4013      	ands	r3, r2
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	bf0c      	ite	eq
 8006200:	2301      	moveq	r3, #1
 8006202:	2300      	movne	r3, #0
 8006204:	b2db      	uxtb	r3, r3
 8006206:	461a      	mov	r2, r3
 8006208:	e00c      	b.n	8006224 <I2C_WaitOnFlagUntilTimeout+0x70>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	699b      	ldr	r3, [r3, #24]
 8006210:	43da      	mvns	r2, r3
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	4013      	ands	r3, r2
 8006216:	b29b      	uxth	r3, r3
 8006218:	2b00      	cmp	r3, #0
 800621a:	bf0c      	ite	eq
 800621c:	2301      	moveq	r3, #1
 800621e:	2300      	movne	r3, #0
 8006220:	b2db      	uxtb	r3, r3
 8006222:	461a      	mov	r2, r3
 8006224:	79fb      	ldrb	r3, [r7, #7]
 8006226:	429a      	cmp	r2, r3
 8006228:	d116      	bne.n	8006258 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2200      	movs	r2, #0
 800622e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2220      	movs	r2, #32
 8006234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2200      	movs	r2, #0
 800623c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006244:	f043 0220 	orr.w	r2, r3, #32
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e023      	b.n	80062a0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	0c1b      	lsrs	r3, r3, #16
 800625c:	b2db      	uxtb	r3, r3
 800625e:	2b01      	cmp	r3, #1
 8006260:	d10d      	bne.n	800627e <I2C_WaitOnFlagUntilTimeout+0xca>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	695b      	ldr	r3, [r3, #20]
 8006268:	43da      	mvns	r2, r3
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	4013      	ands	r3, r2
 800626e:	b29b      	uxth	r3, r3
 8006270:	2b00      	cmp	r3, #0
 8006272:	bf0c      	ite	eq
 8006274:	2301      	moveq	r3, #1
 8006276:	2300      	movne	r3, #0
 8006278:	b2db      	uxtb	r3, r3
 800627a:	461a      	mov	r2, r3
 800627c:	e00c      	b.n	8006298 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	699b      	ldr	r3, [r3, #24]
 8006284:	43da      	mvns	r2, r3
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	4013      	ands	r3, r2
 800628a:	b29b      	uxth	r3, r3
 800628c:	2b00      	cmp	r3, #0
 800628e:	bf0c      	ite	eq
 8006290:	2301      	moveq	r3, #1
 8006292:	2300      	movne	r3, #0
 8006294:	b2db      	uxtb	r3, r3
 8006296:	461a      	mov	r2, r3
 8006298:	79fb      	ldrb	r3, [r7, #7]
 800629a:	429a      	cmp	r2, r3
 800629c:	d093      	beq.n	80061c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3710      	adds	r7, #16
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	607a      	str	r2, [r7, #4]
 80062b4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80062b6:	e071      	b.n	800639c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	695b      	ldr	r3, [r3, #20]
 80062be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062c6:	d123      	bne.n	8006310 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062d6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80062e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2220      	movs	r2, #32
 80062ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062fc:	f043 0204 	orr.w	r2, r3, #4
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e067      	b.n	80063e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006316:	d041      	beq.n	800639c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006318:	f7fd ff18 	bl	800414c <HAL_GetTick>
 800631c:	4602      	mov	r2, r0
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	429a      	cmp	r2, r3
 8006326:	d302      	bcc.n	800632e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d136      	bne.n	800639c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	0c1b      	lsrs	r3, r3, #16
 8006332:	b2db      	uxtb	r3, r3
 8006334:	2b01      	cmp	r3, #1
 8006336:	d10c      	bne.n	8006352 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	695b      	ldr	r3, [r3, #20]
 800633e:	43da      	mvns	r2, r3
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	4013      	ands	r3, r2
 8006344:	b29b      	uxth	r3, r3
 8006346:	2b00      	cmp	r3, #0
 8006348:	bf14      	ite	ne
 800634a:	2301      	movne	r3, #1
 800634c:	2300      	moveq	r3, #0
 800634e:	b2db      	uxtb	r3, r3
 8006350:	e00b      	b.n	800636a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	699b      	ldr	r3, [r3, #24]
 8006358:	43da      	mvns	r2, r3
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	4013      	ands	r3, r2
 800635e:	b29b      	uxth	r3, r3
 8006360:	2b00      	cmp	r3, #0
 8006362:	bf14      	ite	ne
 8006364:	2301      	movne	r3, #1
 8006366:	2300      	moveq	r3, #0
 8006368:	b2db      	uxtb	r3, r3
 800636a:	2b00      	cmp	r3, #0
 800636c:	d016      	beq.n	800639c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2200      	movs	r2, #0
 8006372:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2220      	movs	r2, #32
 8006378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2200      	movs	r2, #0
 8006380:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006388:	f043 0220 	orr.w	r2, r3, #32
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2200      	movs	r2, #0
 8006394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	e021      	b.n	80063e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	0c1b      	lsrs	r3, r3, #16
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d10c      	bne.n	80063c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	695b      	ldr	r3, [r3, #20]
 80063ac:	43da      	mvns	r2, r3
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	4013      	ands	r3, r2
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	bf14      	ite	ne
 80063b8:	2301      	movne	r3, #1
 80063ba:	2300      	moveq	r3, #0
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	e00b      	b.n	80063d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	699b      	ldr	r3, [r3, #24]
 80063c6:	43da      	mvns	r2, r3
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	4013      	ands	r3, r2
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	bf14      	ite	ne
 80063d2:	2301      	movne	r3, #1
 80063d4:	2300      	moveq	r3, #0
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f47f af6d 	bne.w	80062b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80063f4:	e034      	b.n	8006460 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80063f6:	68f8      	ldr	r0, [r7, #12]
 80063f8:	f000 f8e3 	bl	80065c2 <I2C_IsAcknowledgeFailed>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d001      	beq.n	8006406 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	e034      	b.n	8006470 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800640c:	d028      	beq.n	8006460 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800640e:	f7fd fe9d 	bl	800414c <HAL_GetTick>
 8006412:	4602      	mov	r2, r0
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	1ad3      	subs	r3, r2, r3
 8006418:	68ba      	ldr	r2, [r7, #8]
 800641a:	429a      	cmp	r2, r3
 800641c:	d302      	bcc.n	8006424 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d11d      	bne.n	8006460 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	695b      	ldr	r3, [r3, #20]
 800642a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800642e:	2b80      	cmp	r3, #128	@ 0x80
 8006430:	d016      	beq.n	8006460 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2220      	movs	r2, #32
 800643c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800644c:	f043 0220 	orr.w	r2, r3, #32
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2200      	movs	r2, #0
 8006458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	e007      	b.n	8006470 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800646a:	2b80      	cmp	r3, #128	@ 0x80
 800646c:	d1c3      	bne.n	80063f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	3710      	adds	r7, #16
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006484:	e034      	b.n	80064f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006486:	68f8      	ldr	r0, [r7, #12]
 8006488:	f000 f89b 	bl	80065c2 <I2C_IsAcknowledgeFailed>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d001      	beq.n	8006496 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e034      	b.n	8006500 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800649c:	d028      	beq.n	80064f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800649e:	f7fd fe55 	bl	800414c <HAL_GetTick>
 80064a2:	4602      	mov	r2, r0
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	1ad3      	subs	r3, r2, r3
 80064a8:	68ba      	ldr	r2, [r7, #8]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d302      	bcc.n	80064b4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d11d      	bne.n	80064f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	f003 0304 	and.w	r3, r3, #4
 80064be:	2b04      	cmp	r3, #4
 80064c0:	d016      	beq.n	80064f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2200      	movs	r2, #0
 80064c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2220      	movs	r2, #32
 80064cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064dc:	f043 0220 	orr.w	r2, r3, #32
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	e007      	b.n	8006500 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	695b      	ldr	r3, [r3, #20]
 80064f6:	f003 0304 	and.w	r3, r3, #4
 80064fa:	2b04      	cmp	r3, #4
 80064fc:	d1c3      	bne.n	8006486 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	3710      	adds	r7, #16
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006514:	e049      	b.n	80065aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	695b      	ldr	r3, [r3, #20]
 800651c:	f003 0310 	and.w	r3, r3, #16
 8006520:	2b10      	cmp	r3, #16
 8006522:	d119      	bne.n	8006558 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f06f 0210 	mvn.w	r2, #16
 800652c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2200      	movs	r2, #0
 8006532:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2220      	movs	r2, #32
 8006538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	e030      	b.n	80065ba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006558:	f7fd fdf8 	bl	800414c <HAL_GetTick>
 800655c:	4602      	mov	r2, r0
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	68ba      	ldr	r2, [r7, #8]
 8006564:	429a      	cmp	r2, r3
 8006566:	d302      	bcc.n	800656e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d11d      	bne.n	80065aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	695b      	ldr	r3, [r3, #20]
 8006574:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006578:	2b40      	cmp	r3, #64	@ 0x40
 800657a:	d016      	beq.n	80065aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2200      	movs	r2, #0
 8006580:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2220      	movs	r2, #32
 8006586:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006596:	f043 0220 	orr.w	r2, r3, #32
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e007      	b.n	80065ba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	695b      	ldr	r3, [r3, #20]
 80065b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065b4:	2b40      	cmp	r3, #64	@ 0x40
 80065b6:	d1ae      	bne.n	8006516 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3710      	adds	r7, #16
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}

080065c2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80065c2:	b480      	push	{r7}
 80065c4:	b083      	sub	sp, #12
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	695b      	ldr	r3, [r3, #20]
 80065d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065d8:	d11b      	bne.n	8006612 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80065e2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2220      	movs	r2, #32
 80065ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065fe:	f043 0204 	orr.w	r2, r3, #4
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	e000      	b.n	8006614 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006612:	2300      	movs	r3, #0
}
 8006614:	4618      	mov	r0, r3
 8006616:	370c      	adds	r7, #12
 8006618:	46bd      	mov	sp, r7
 800661a:	bc80      	pop	{r7}
 800661c:	4770      	bx	lr
	...

08006620 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b086      	sub	sp, #24
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d101      	bne.n	8006632 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	e272      	b.n	8006b18 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 0301 	and.w	r3, r3, #1
 800663a:	2b00      	cmp	r3, #0
 800663c:	f000 8087 	beq.w	800674e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006640:	4b92      	ldr	r3, [pc, #584]	@ (800688c <HAL_RCC_OscConfig+0x26c>)
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	f003 030c 	and.w	r3, r3, #12
 8006648:	2b04      	cmp	r3, #4
 800664a:	d00c      	beq.n	8006666 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800664c:	4b8f      	ldr	r3, [pc, #572]	@ (800688c <HAL_RCC_OscConfig+0x26c>)
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	f003 030c 	and.w	r3, r3, #12
 8006654:	2b08      	cmp	r3, #8
 8006656:	d112      	bne.n	800667e <HAL_RCC_OscConfig+0x5e>
 8006658:	4b8c      	ldr	r3, [pc, #560]	@ (800688c <HAL_RCC_OscConfig+0x26c>)
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006660:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006664:	d10b      	bne.n	800667e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006666:	4b89      	ldr	r3, [pc, #548]	@ (800688c <HAL_RCC_OscConfig+0x26c>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800666e:	2b00      	cmp	r3, #0
 8006670:	d06c      	beq.n	800674c <HAL_RCC_OscConfig+0x12c>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d168      	bne.n	800674c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	e24c      	b.n	8006b18 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006686:	d106      	bne.n	8006696 <HAL_RCC_OscConfig+0x76>
 8006688:	4b80      	ldr	r3, [pc, #512]	@ (800688c <HAL_RCC_OscConfig+0x26c>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a7f      	ldr	r2, [pc, #508]	@ (800688c <HAL_RCC_OscConfig+0x26c>)
 800668e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006692:	6013      	str	r3, [r2, #0]
 8006694:	e02e      	b.n	80066f4 <HAL_RCC_OscConfig+0xd4>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10c      	bne.n	80066b8 <HAL_RCC_OscConfig+0x98>
 800669e:	4b7b      	ldr	r3, [pc, #492]	@ (800688c <HAL_RCC_OscConfig+0x26c>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a7a      	ldr	r2, [pc, #488]	@ (800688c <HAL_RCC_OscConfig+0x26c>)
 80066a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066a8:	6013      	str	r3, [r2, #0]
 80066aa:	4b78      	ldr	r3, [pc, #480]	@ (800688c <HAL_RCC_OscConfig+0x26c>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a77      	ldr	r2, [pc, #476]	@ (800688c <HAL_RCC_OscConfig+0x26c>)
 80066b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80066b4:	6013      	str	r3, [r2, #0]
 80066b6:	e01d      	b.n	80066f4 <HAL_RCC_OscConfig+0xd4>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80066c0:	d10c      	bne.n	80066dc <HAL_RCC_OscConfig+0xbc>
 80066c2:	4b72      	ldr	r3, [pc, #456]	@ (800688c <HAL_RCC_OscConfig+0x26c>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a71      	ldr	r2, [pc, #452]	@ (800688c <HAL_RCC_OscConfig+0x26c>)
 80066c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80066cc:	6013      	str	r3, [r2, #0]
 80066ce:	4b6f      	ldr	r3, [pc, #444]	@ (800688c <HAL_RCC_OscConfig+0x26c>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a6e      	ldr	r2, [pc, #440]	@ (800688c <HAL_RCC_OscConfig+0x26c>)
 80066d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066d8:	6013      	str	r3, [r2, #0]
 80066da:	e00b      	b.n	80066f4 <HAL_RCC_OscConfig+0xd4>
 80066dc:	4b6b      	ldr	r3, [pc, #428]	@ (800688c <HAL_RCC_OscConfig+0x26c>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a6a      	ldr	r2, [pc, #424]	@ (800688c <HAL_RCC_OscConfig+0x26c>)
 80066e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066e6:	6013      	str	r3, [r2, #0]
 80066e8:	4b68      	ldr	r3, [pc, #416]	@ (800688c <HAL_RCC_OscConfig+0x26c>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a67      	ldr	r2, [pc, #412]	@ (800688c <HAL_RCC_OscConfig+0x26c>)
 80066ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80066f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d013      	beq.n	8006724 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066fc:	f7fd fd26 	bl	800414c <HAL_GetTick>
 8006700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006702:	e008      	b.n	8006716 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006704:	f7fd fd22 	bl	800414c <HAL_GetTick>
 8006708:	4602      	mov	r2, r0
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	1ad3      	subs	r3, r2, r3
 800670e:	2b64      	cmp	r3, #100	@ 0x64
 8006710:	d901      	bls.n	8006716 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006712:	2303      	movs	r3, #3
 8006714:	e200      	b.n	8006b18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006716:	4b5d      	ldr	r3, [pc, #372]	@ (800688c <HAL_RCC_OscConfig+0x26c>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800671e:	2b00      	cmp	r3, #0
 8006720:	d0f0      	beq.n	8006704 <HAL_RCC_OscConfig+0xe4>
 8006722:	e014      	b.n	800674e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006724:	f7fd fd12 	bl	800414c <HAL_GetTick>
 8006728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800672a:	e008      	b.n	800673e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800672c:	f7fd fd0e 	bl	800414c <HAL_GetTick>
 8006730:	4602      	mov	r2, r0
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	2b64      	cmp	r3, #100	@ 0x64
 8006738:	d901      	bls.n	800673e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	e1ec      	b.n	8006b18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800673e:	4b53      	ldr	r3, [pc, #332]	@ (800688c <HAL_RCC_OscConfig+0x26c>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d1f0      	bne.n	800672c <HAL_RCC_OscConfig+0x10c>
 800674a:	e000      	b.n	800674e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800674c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 0302 	and.w	r3, r3, #2
 8006756:	2b00      	cmp	r3, #0
 8006758:	d063      	beq.n	8006822 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800675a:	4b4c      	ldr	r3, [pc, #304]	@ (800688c <HAL_RCC_OscConfig+0x26c>)
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	f003 030c 	and.w	r3, r3, #12
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00b      	beq.n	800677e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006766:	4b49      	ldr	r3, [pc, #292]	@ (800688c <HAL_RCC_OscConfig+0x26c>)
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	f003 030c 	and.w	r3, r3, #12
 800676e:	2b08      	cmp	r3, #8
 8006770:	d11c      	bne.n	80067ac <HAL_RCC_OscConfig+0x18c>
 8006772:	4b46      	ldr	r3, [pc, #280]	@ (800688c <HAL_RCC_OscConfig+0x26c>)
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800677a:	2b00      	cmp	r3, #0
 800677c:	d116      	bne.n	80067ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800677e:	4b43      	ldr	r3, [pc, #268]	@ (800688c <HAL_RCC_OscConfig+0x26c>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0302 	and.w	r3, r3, #2
 8006786:	2b00      	cmp	r3, #0
 8006788:	d005      	beq.n	8006796 <HAL_RCC_OscConfig+0x176>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	2b01      	cmp	r3, #1
 8006790:	d001      	beq.n	8006796 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e1c0      	b.n	8006b18 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006796:	4b3d      	ldr	r3, [pc, #244]	@ (800688c <HAL_RCC_OscConfig+0x26c>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	695b      	ldr	r3, [r3, #20]
 80067a2:	00db      	lsls	r3, r3, #3
 80067a4:	4939      	ldr	r1, [pc, #228]	@ (800688c <HAL_RCC_OscConfig+0x26c>)
 80067a6:	4313      	orrs	r3, r2
 80067a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067aa:	e03a      	b.n	8006822 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d020      	beq.n	80067f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067b4:	4b36      	ldr	r3, [pc, #216]	@ (8006890 <HAL_RCC_OscConfig+0x270>)
 80067b6:	2201      	movs	r2, #1
 80067b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067ba:	f7fd fcc7 	bl	800414c <HAL_GetTick>
 80067be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067c0:	e008      	b.n	80067d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067c2:	f7fd fcc3 	bl	800414c <HAL_GetTick>
 80067c6:	4602      	mov	r2, r0
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	d901      	bls.n	80067d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80067d0:	2303      	movs	r3, #3
 80067d2:	e1a1      	b.n	8006b18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067d4:	4b2d      	ldr	r3, [pc, #180]	@ (800688c <HAL_RCC_OscConfig+0x26c>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 0302 	and.w	r3, r3, #2
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d0f0      	beq.n	80067c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067e0:	4b2a      	ldr	r3, [pc, #168]	@ (800688c <HAL_RCC_OscConfig+0x26c>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	695b      	ldr	r3, [r3, #20]
 80067ec:	00db      	lsls	r3, r3, #3
 80067ee:	4927      	ldr	r1, [pc, #156]	@ (800688c <HAL_RCC_OscConfig+0x26c>)
 80067f0:	4313      	orrs	r3, r2
 80067f2:	600b      	str	r3, [r1, #0]
 80067f4:	e015      	b.n	8006822 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067f6:	4b26      	ldr	r3, [pc, #152]	@ (8006890 <HAL_RCC_OscConfig+0x270>)
 80067f8:	2200      	movs	r2, #0
 80067fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067fc:	f7fd fca6 	bl	800414c <HAL_GetTick>
 8006800:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006802:	e008      	b.n	8006816 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006804:	f7fd fca2 	bl	800414c <HAL_GetTick>
 8006808:	4602      	mov	r2, r0
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	1ad3      	subs	r3, r2, r3
 800680e:	2b02      	cmp	r3, #2
 8006810:	d901      	bls.n	8006816 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006812:	2303      	movs	r3, #3
 8006814:	e180      	b.n	8006b18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006816:	4b1d      	ldr	r3, [pc, #116]	@ (800688c <HAL_RCC_OscConfig+0x26c>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 0302 	and.w	r3, r3, #2
 800681e:	2b00      	cmp	r3, #0
 8006820:	d1f0      	bne.n	8006804 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 0308 	and.w	r3, r3, #8
 800682a:	2b00      	cmp	r3, #0
 800682c:	d03a      	beq.n	80068a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d019      	beq.n	800686a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006836:	4b17      	ldr	r3, [pc, #92]	@ (8006894 <HAL_RCC_OscConfig+0x274>)
 8006838:	2201      	movs	r2, #1
 800683a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800683c:	f7fd fc86 	bl	800414c <HAL_GetTick>
 8006840:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006842:	e008      	b.n	8006856 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006844:	f7fd fc82 	bl	800414c <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	2b02      	cmp	r3, #2
 8006850:	d901      	bls.n	8006856 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006852:	2303      	movs	r3, #3
 8006854:	e160      	b.n	8006b18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006856:	4b0d      	ldr	r3, [pc, #52]	@ (800688c <HAL_RCC_OscConfig+0x26c>)
 8006858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800685a:	f003 0302 	and.w	r3, r3, #2
 800685e:	2b00      	cmp	r3, #0
 8006860:	d0f0      	beq.n	8006844 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006862:	2001      	movs	r0, #1
 8006864:	f000 face 	bl	8006e04 <RCC_Delay>
 8006868:	e01c      	b.n	80068a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800686a:	4b0a      	ldr	r3, [pc, #40]	@ (8006894 <HAL_RCC_OscConfig+0x274>)
 800686c:	2200      	movs	r2, #0
 800686e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006870:	f7fd fc6c 	bl	800414c <HAL_GetTick>
 8006874:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006876:	e00f      	b.n	8006898 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006878:	f7fd fc68 	bl	800414c <HAL_GetTick>
 800687c:	4602      	mov	r2, r0
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	2b02      	cmp	r3, #2
 8006884:	d908      	bls.n	8006898 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	e146      	b.n	8006b18 <HAL_RCC_OscConfig+0x4f8>
 800688a:	bf00      	nop
 800688c:	40021000 	.word	0x40021000
 8006890:	42420000 	.word	0x42420000
 8006894:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006898:	4b92      	ldr	r3, [pc, #584]	@ (8006ae4 <HAL_RCC_OscConfig+0x4c4>)
 800689a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800689c:	f003 0302 	and.w	r3, r3, #2
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d1e9      	bne.n	8006878 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0304 	and.w	r3, r3, #4
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	f000 80a6 	beq.w	80069fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068b2:	2300      	movs	r3, #0
 80068b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068b6:	4b8b      	ldr	r3, [pc, #556]	@ (8006ae4 <HAL_RCC_OscConfig+0x4c4>)
 80068b8:	69db      	ldr	r3, [r3, #28]
 80068ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d10d      	bne.n	80068de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068c2:	4b88      	ldr	r3, [pc, #544]	@ (8006ae4 <HAL_RCC_OscConfig+0x4c4>)
 80068c4:	69db      	ldr	r3, [r3, #28]
 80068c6:	4a87      	ldr	r2, [pc, #540]	@ (8006ae4 <HAL_RCC_OscConfig+0x4c4>)
 80068c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068cc:	61d3      	str	r3, [r2, #28]
 80068ce:	4b85      	ldr	r3, [pc, #532]	@ (8006ae4 <HAL_RCC_OscConfig+0x4c4>)
 80068d0:	69db      	ldr	r3, [r3, #28]
 80068d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068d6:	60bb      	str	r3, [r7, #8]
 80068d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068da:	2301      	movs	r3, #1
 80068dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068de:	4b82      	ldr	r3, [pc, #520]	@ (8006ae8 <HAL_RCC_OscConfig+0x4c8>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d118      	bne.n	800691c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80068ea:	4b7f      	ldr	r3, [pc, #508]	@ (8006ae8 <HAL_RCC_OscConfig+0x4c8>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a7e      	ldr	r2, [pc, #504]	@ (8006ae8 <HAL_RCC_OscConfig+0x4c8>)
 80068f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068f6:	f7fd fc29 	bl	800414c <HAL_GetTick>
 80068fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068fc:	e008      	b.n	8006910 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068fe:	f7fd fc25 	bl	800414c <HAL_GetTick>
 8006902:	4602      	mov	r2, r0
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	2b64      	cmp	r3, #100	@ 0x64
 800690a:	d901      	bls.n	8006910 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800690c:	2303      	movs	r3, #3
 800690e:	e103      	b.n	8006b18 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006910:	4b75      	ldr	r3, [pc, #468]	@ (8006ae8 <HAL_RCC_OscConfig+0x4c8>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006918:	2b00      	cmp	r3, #0
 800691a:	d0f0      	beq.n	80068fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	2b01      	cmp	r3, #1
 8006922:	d106      	bne.n	8006932 <HAL_RCC_OscConfig+0x312>
 8006924:	4b6f      	ldr	r3, [pc, #444]	@ (8006ae4 <HAL_RCC_OscConfig+0x4c4>)
 8006926:	6a1b      	ldr	r3, [r3, #32]
 8006928:	4a6e      	ldr	r2, [pc, #440]	@ (8006ae4 <HAL_RCC_OscConfig+0x4c4>)
 800692a:	f043 0301 	orr.w	r3, r3, #1
 800692e:	6213      	str	r3, [r2, #32]
 8006930:	e02d      	b.n	800698e <HAL_RCC_OscConfig+0x36e>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d10c      	bne.n	8006954 <HAL_RCC_OscConfig+0x334>
 800693a:	4b6a      	ldr	r3, [pc, #424]	@ (8006ae4 <HAL_RCC_OscConfig+0x4c4>)
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	4a69      	ldr	r2, [pc, #420]	@ (8006ae4 <HAL_RCC_OscConfig+0x4c4>)
 8006940:	f023 0301 	bic.w	r3, r3, #1
 8006944:	6213      	str	r3, [r2, #32]
 8006946:	4b67      	ldr	r3, [pc, #412]	@ (8006ae4 <HAL_RCC_OscConfig+0x4c4>)
 8006948:	6a1b      	ldr	r3, [r3, #32]
 800694a:	4a66      	ldr	r2, [pc, #408]	@ (8006ae4 <HAL_RCC_OscConfig+0x4c4>)
 800694c:	f023 0304 	bic.w	r3, r3, #4
 8006950:	6213      	str	r3, [r2, #32]
 8006952:	e01c      	b.n	800698e <HAL_RCC_OscConfig+0x36e>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	2b05      	cmp	r3, #5
 800695a:	d10c      	bne.n	8006976 <HAL_RCC_OscConfig+0x356>
 800695c:	4b61      	ldr	r3, [pc, #388]	@ (8006ae4 <HAL_RCC_OscConfig+0x4c4>)
 800695e:	6a1b      	ldr	r3, [r3, #32]
 8006960:	4a60      	ldr	r2, [pc, #384]	@ (8006ae4 <HAL_RCC_OscConfig+0x4c4>)
 8006962:	f043 0304 	orr.w	r3, r3, #4
 8006966:	6213      	str	r3, [r2, #32]
 8006968:	4b5e      	ldr	r3, [pc, #376]	@ (8006ae4 <HAL_RCC_OscConfig+0x4c4>)
 800696a:	6a1b      	ldr	r3, [r3, #32]
 800696c:	4a5d      	ldr	r2, [pc, #372]	@ (8006ae4 <HAL_RCC_OscConfig+0x4c4>)
 800696e:	f043 0301 	orr.w	r3, r3, #1
 8006972:	6213      	str	r3, [r2, #32]
 8006974:	e00b      	b.n	800698e <HAL_RCC_OscConfig+0x36e>
 8006976:	4b5b      	ldr	r3, [pc, #364]	@ (8006ae4 <HAL_RCC_OscConfig+0x4c4>)
 8006978:	6a1b      	ldr	r3, [r3, #32]
 800697a:	4a5a      	ldr	r2, [pc, #360]	@ (8006ae4 <HAL_RCC_OscConfig+0x4c4>)
 800697c:	f023 0301 	bic.w	r3, r3, #1
 8006980:	6213      	str	r3, [r2, #32]
 8006982:	4b58      	ldr	r3, [pc, #352]	@ (8006ae4 <HAL_RCC_OscConfig+0x4c4>)
 8006984:	6a1b      	ldr	r3, [r3, #32]
 8006986:	4a57      	ldr	r2, [pc, #348]	@ (8006ae4 <HAL_RCC_OscConfig+0x4c4>)
 8006988:	f023 0304 	bic.w	r3, r3, #4
 800698c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d015      	beq.n	80069c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006996:	f7fd fbd9 	bl	800414c <HAL_GetTick>
 800699a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800699c:	e00a      	b.n	80069b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800699e:	f7fd fbd5 	bl	800414c <HAL_GetTick>
 80069a2:	4602      	mov	r2, r0
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	1ad3      	subs	r3, r2, r3
 80069a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d901      	bls.n	80069b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80069b0:	2303      	movs	r3, #3
 80069b2:	e0b1      	b.n	8006b18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069b4:	4b4b      	ldr	r3, [pc, #300]	@ (8006ae4 <HAL_RCC_OscConfig+0x4c4>)
 80069b6:	6a1b      	ldr	r3, [r3, #32]
 80069b8:	f003 0302 	and.w	r3, r3, #2
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d0ee      	beq.n	800699e <HAL_RCC_OscConfig+0x37e>
 80069c0:	e014      	b.n	80069ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069c2:	f7fd fbc3 	bl	800414c <HAL_GetTick>
 80069c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069c8:	e00a      	b.n	80069e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069ca:	f7fd fbbf 	bl	800414c <HAL_GetTick>
 80069ce:	4602      	mov	r2, r0
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069d8:	4293      	cmp	r3, r2
 80069da:	d901      	bls.n	80069e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80069dc:	2303      	movs	r3, #3
 80069de:	e09b      	b.n	8006b18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069e0:	4b40      	ldr	r3, [pc, #256]	@ (8006ae4 <HAL_RCC_OscConfig+0x4c4>)
 80069e2:	6a1b      	ldr	r3, [r3, #32]
 80069e4:	f003 0302 	and.w	r3, r3, #2
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d1ee      	bne.n	80069ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80069ec:	7dfb      	ldrb	r3, [r7, #23]
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d105      	bne.n	80069fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069f2:	4b3c      	ldr	r3, [pc, #240]	@ (8006ae4 <HAL_RCC_OscConfig+0x4c4>)
 80069f4:	69db      	ldr	r3, [r3, #28]
 80069f6:	4a3b      	ldr	r2, [pc, #236]	@ (8006ae4 <HAL_RCC_OscConfig+0x4c4>)
 80069f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	69db      	ldr	r3, [r3, #28]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	f000 8087 	beq.w	8006b16 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a08:	4b36      	ldr	r3, [pc, #216]	@ (8006ae4 <HAL_RCC_OscConfig+0x4c4>)
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	f003 030c 	and.w	r3, r3, #12
 8006a10:	2b08      	cmp	r3, #8
 8006a12:	d061      	beq.n	8006ad8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	69db      	ldr	r3, [r3, #28]
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	d146      	bne.n	8006aaa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a1c:	4b33      	ldr	r3, [pc, #204]	@ (8006aec <HAL_RCC_OscConfig+0x4cc>)
 8006a1e:	2200      	movs	r2, #0
 8006a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a22:	f7fd fb93 	bl	800414c <HAL_GetTick>
 8006a26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a28:	e008      	b.n	8006a3c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a2a:	f7fd fb8f 	bl	800414c <HAL_GetTick>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	1ad3      	subs	r3, r2, r3
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d901      	bls.n	8006a3c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	e06d      	b.n	8006b18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a3c:	4b29      	ldr	r3, [pc, #164]	@ (8006ae4 <HAL_RCC_OscConfig+0x4c4>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d1f0      	bne.n	8006a2a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6a1b      	ldr	r3, [r3, #32]
 8006a4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a50:	d108      	bne.n	8006a64 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006a52:	4b24      	ldr	r3, [pc, #144]	@ (8006ae4 <HAL_RCC_OscConfig+0x4c4>)
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	4921      	ldr	r1, [pc, #132]	@ (8006ae4 <HAL_RCC_OscConfig+0x4c4>)
 8006a60:	4313      	orrs	r3, r2
 8006a62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a64:	4b1f      	ldr	r3, [pc, #124]	@ (8006ae4 <HAL_RCC_OscConfig+0x4c4>)
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6a19      	ldr	r1, [r3, #32]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a74:	430b      	orrs	r3, r1
 8006a76:	491b      	ldr	r1, [pc, #108]	@ (8006ae4 <HAL_RCC_OscConfig+0x4c4>)
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a7c:	4b1b      	ldr	r3, [pc, #108]	@ (8006aec <HAL_RCC_OscConfig+0x4cc>)
 8006a7e:	2201      	movs	r2, #1
 8006a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a82:	f7fd fb63 	bl	800414c <HAL_GetTick>
 8006a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006a88:	e008      	b.n	8006a9c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a8a:	f7fd fb5f 	bl	800414c <HAL_GetTick>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	1ad3      	subs	r3, r2, r3
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d901      	bls.n	8006a9c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006a98:	2303      	movs	r3, #3
 8006a9a:	e03d      	b.n	8006b18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006a9c:	4b11      	ldr	r3, [pc, #68]	@ (8006ae4 <HAL_RCC_OscConfig+0x4c4>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d0f0      	beq.n	8006a8a <HAL_RCC_OscConfig+0x46a>
 8006aa8:	e035      	b.n	8006b16 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006aaa:	4b10      	ldr	r3, [pc, #64]	@ (8006aec <HAL_RCC_OscConfig+0x4cc>)
 8006aac:	2200      	movs	r2, #0
 8006aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ab0:	f7fd fb4c 	bl	800414c <HAL_GetTick>
 8006ab4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ab6:	e008      	b.n	8006aca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ab8:	f7fd fb48 	bl	800414c <HAL_GetTick>
 8006abc:	4602      	mov	r2, r0
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	1ad3      	subs	r3, r2, r3
 8006ac2:	2b02      	cmp	r3, #2
 8006ac4:	d901      	bls.n	8006aca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	e026      	b.n	8006b18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006aca:	4b06      	ldr	r3, [pc, #24]	@ (8006ae4 <HAL_RCC_OscConfig+0x4c4>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d1f0      	bne.n	8006ab8 <HAL_RCC_OscConfig+0x498>
 8006ad6:	e01e      	b.n	8006b16 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	69db      	ldr	r3, [r3, #28]
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d107      	bne.n	8006af0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e019      	b.n	8006b18 <HAL_RCC_OscConfig+0x4f8>
 8006ae4:	40021000 	.word	0x40021000
 8006ae8:	40007000 	.word	0x40007000
 8006aec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006af0:	4b0b      	ldr	r3, [pc, #44]	@ (8006b20 <HAL_RCC_OscConfig+0x500>)
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6a1b      	ldr	r3, [r3, #32]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d106      	bne.n	8006b12 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d001      	beq.n	8006b16 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e000      	b.n	8006b18 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006b16:	2300      	movs	r3, #0
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3718      	adds	r7, #24
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	40021000 	.word	0x40021000

08006b24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d101      	bne.n	8006b38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	e0d0      	b.n	8006cda <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b38:	4b6a      	ldr	r3, [pc, #424]	@ (8006ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 0307 	and.w	r3, r3, #7
 8006b40:	683a      	ldr	r2, [r7, #0]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d910      	bls.n	8006b68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b46:	4b67      	ldr	r3, [pc, #412]	@ (8006ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f023 0207 	bic.w	r2, r3, #7
 8006b4e:	4965      	ldr	r1, [pc, #404]	@ (8006ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b56:	4b63      	ldr	r3, [pc, #396]	@ (8006ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 0307 	and.w	r3, r3, #7
 8006b5e:	683a      	ldr	r2, [r7, #0]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d001      	beq.n	8006b68 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	e0b8      	b.n	8006cda <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f003 0302 	and.w	r3, r3, #2
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d020      	beq.n	8006bb6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 0304 	and.w	r3, r3, #4
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d005      	beq.n	8006b8c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b80:	4b59      	ldr	r3, [pc, #356]	@ (8006ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	4a58      	ldr	r2, [pc, #352]	@ (8006ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8006b86:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006b8a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 0308 	and.w	r3, r3, #8
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d005      	beq.n	8006ba4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b98:	4b53      	ldr	r3, [pc, #332]	@ (8006ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	4a52      	ldr	r2, [pc, #328]	@ (8006ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8006b9e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8006ba2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ba4:	4b50      	ldr	r3, [pc, #320]	@ (8006ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	494d      	ldr	r1, [pc, #308]	@ (8006ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 0301 	and.w	r3, r3, #1
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d040      	beq.n	8006c44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d107      	bne.n	8006bda <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bca:	4b47      	ldr	r3, [pc, #284]	@ (8006ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d115      	bne.n	8006c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e07f      	b.n	8006cda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	2b02      	cmp	r3, #2
 8006be0:	d107      	bne.n	8006bf2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006be2:	4b41      	ldr	r3, [pc, #260]	@ (8006ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d109      	bne.n	8006c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e073      	b.n	8006cda <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bf2:	4b3d      	ldr	r3, [pc, #244]	@ (8006ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 0302 	and.w	r3, r3, #2
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d101      	bne.n	8006c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e06b      	b.n	8006cda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c02:	4b39      	ldr	r3, [pc, #228]	@ (8006ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	f023 0203 	bic.w	r2, r3, #3
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	4936      	ldr	r1, [pc, #216]	@ (8006ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8006c10:	4313      	orrs	r3, r2
 8006c12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c14:	f7fd fa9a 	bl	800414c <HAL_GetTick>
 8006c18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c1a:	e00a      	b.n	8006c32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c1c:	f7fd fa96 	bl	800414c <HAL_GetTick>
 8006c20:	4602      	mov	r2, r0
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d901      	bls.n	8006c32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e053      	b.n	8006cda <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c32:	4b2d      	ldr	r3, [pc, #180]	@ (8006ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	f003 020c 	and.w	r2, r3, #12
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d1eb      	bne.n	8006c1c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c44:	4b27      	ldr	r3, [pc, #156]	@ (8006ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 0307 	and.w	r3, r3, #7
 8006c4c:	683a      	ldr	r2, [r7, #0]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d210      	bcs.n	8006c74 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c52:	4b24      	ldr	r3, [pc, #144]	@ (8006ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f023 0207 	bic.w	r2, r3, #7
 8006c5a:	4922      	ldr	r1, [pc, #136]	@ (8006ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c62:	4b20      	ldr	r3, [pc, #128]	@ (8006ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f003 0307 	and.w	r3, r3, #7
 8006c6a:	683a      	ldr	r2, [r7, #0]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d001      	beq.n	8006c74 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e032      	b.n	8006cda <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f003 0304 	and.w	r3, r3, #4
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d008      	beq.n	8006c92 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c80:	4b19      	ldr	r3, [pc, #100]	@ (8006ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	4916      	ldr	r1, [pc, #88]	@ (8006ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 0308 	and.w	r3, r3, #8
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d009      	beq.n	8006cb2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006c9e:	4b12      	ldr	r3, [pc, #72]	@ (8006ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	00db      	lsls	r3, r3, #3
 8006cac:	490e      	ldr	r1, [pc, #56]	@ (8006ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006cb2:	f000 f821 	bl	8006cf8 <HAL_RCC_GetSysClockFreq>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8006ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	091b      	lsrs	r3, r3, #4
 8006cbe:	f003 030f 	and.w	r3, r3, #15
 8006cc2:	490a      	ldr	r1, [pc, #40]	@ (8006cec <HAL_RCC_ClockConfig+0x1c8>)
 8006cc4:	5ccb      	ldrb	r3, [r1, r3]
 8006cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8006cca:	4a09      	ldr	r2, [pc, #36]	@ (8006cf0 <HAL_RCC_ClockConfig+0x1cc>)
 8006ccc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006cce:	4b09      	ldr	r3, [pc, #36]	@ (8006cf4 <HAL_RCC_ClockConfig+0x1d0>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f7fd f9f8 	bl	80040c8 <HAL_InitTick>

  return HAL_OK;
 8006cd8:	2300      	movs	r3, #0
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3710      	adds	r7, #16
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	40022000 	.word	0x40022000
 8006ce8:	40021000 	.word	0x40021000
 8006cec:	0800c05c 	.word	0x0800c05c
 8006cf0:	20000038 	.word	0x20000038
 8006cf4:	2000003c 	.word	0x2000003c

08006cf8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b087      	sub	sp, #28
 8006cfc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	60fb      	str	r3, [r7, #12]
 8006d02:	2300      	movs	r3, #0
 8006d04:	60bb      	str	r3, [r7, #8]
 8006d06:	2300      	movs	r3, #0
 8006d08:	617b      	str	r3, [r7, #20]
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006d12:	4b1e      	ldr	r3, [pc, #120]	@ (8006d8c <HAL_RCC_GetSysClockFreq+0x94>)
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f003 030c 	and.w	r3, r3, #12
 8006d1e:	2b04      	cmp	r3, #4
 8006d20:	d002      	beq.n	8006d28 <HAL_RCC_GetSysClockFreq+0x30>
 8006d22:	2b08      	cmp	r3, #8
 8006d24:	d003      	beq.n	8006d2e <HAL_RCC_GetSysClockFreq+0x36>
 8006d26:	e027      	b.n	8006d78 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006d28:	4b19      	ldr	r3, [pc, #100]	@ (8006d90 <HAL_RCC_GetSysClockFreq+0x98>)
 8006d2a:	613b      	str	r3, [r7, #16]
      break;
 8006d2c:	e027      	b.n	8006d7e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	0c9b      	lsrs	r3, r3, #18
 8006d32:	f003 030f 	and.w	r3, r3, #15
 8006d36:	4a17      	ldr	r2, [pc, #92]	@ (8006d94 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006d38:	5cd3      	ldrb	r3, [r2, r3]
 8006d3a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d010      	beq.n	8006d68 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006d46:	4b11      	ldr	r3, [pc, #68]	@ (8006d8c <HAL_RCC_GetSysClockFreq+0x94>)
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	0c5b      	lsrs	r3, r3, #17
 8006d4c:	f003 0301 	and.w	r3, r3, #1
 8006d50:	4a11      	ldr	r2, [pc, #68]	@ (8006d98 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006d52:	5cd3      	ldrb	r3, [r2, r3]
 8006d54:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a0d      	ldr	r2, [pc, #52]	@ (8006d90 <HAL_RCC_GetSysClockFreq+0x98>)
 8006d5a:	fb03 f202 	mul.w	r2, r3, r2
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d64:	617b      	str	r3, [r7, #20]
 8006d66:	e004      	b.n	8006d72 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a0c      	ldr	r2, [pc, #48]	@ (8006d9c <HAL_RCC_GetSysClockFreq+0xa4>)
 8006d6c:	fb02 f303 	mul.w	r3, r2, r3
 8006d70:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	613b      	str	r3, [r7, #16]
      break;
 8006d76:	e002      	b.n	8006d7e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006d78:	4b05      	ldr	r3, [pc, #20]	@ (8006d90 <HAL_RCC_GetSysClockFreq+0x98>)
 8006d7a:	613b      	str	r3, [r7, #16]
      break;
 8006d7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d7e:	693b      	ldr	r3, [r7, #16]
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	371c      	adds	r7, #28
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bc80      	pop	{r7}
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	40021000 	.word	0x40021000
 8006d90:	007a1200 	.word	0x007a1200
 8006d94:	0800c074 	.word	0x0800c074
 8006d98:	0800c084 	.word	0x0800c084
 8006d9c:	003d0900 	.word	0x003d0900

08006da0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006da0:	b480      	push	{r7}
 8006da2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006da4:	4b02      	ldr	r3, [pc, #8]	@ (8006db0 <HAL_RCC_GetHCLKFreq+0x10>)
 8006da6:	681b      	ldr	r3, [r3, #0]
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bc80      	pop	{r7}
 8006dae:	4770      	bx	lr
 8006db0:	20000038 	.word	0x20000038

08006db4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006db8:	f7ff fff2 	bl	8006da0 <HAL_RCC_GetHCLKFreq>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	4b05      	ldr	r3, [pc, #20]	@ (8006dd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	0a1b      	lsrs	r3, r3, #8
 8006dc4:	f003 0307 	and.w	r3, r3, #7
 8006dc8:	4903      	ldr	r1, [pc, #12]	@ (8006dd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006dca:	5ccb      	ldrb	r3, [r1, r3]
 8006dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	40021000 	.word	0x40021000
 8006dd8:	0800c06c 	.word	0x0800c06c

08006ddc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006de0:	f7ff ffde 	bl	8006da0 <HAL_RCC_GetHCLKFreq>
 8006de4:	4602      	mov	r2, r0
 8006de6:	4b05      	ldr	r3, [pc, #20]	@ (8006dfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	0adb      	lsrs	r3, r3, #11
 8006dec:	f003 0307 	and.w	r3, r3, #7
 8006df0:	4903      	ldr	r1, [pc, #12]	@ (8006e00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006df2:	5ccb      	ldrb	r3, [r1, r3]
 8006df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	40021000 	.word	0x40021000
 8006e00:	0800c06c 	.word	0x0800c06c

08006e04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b085      	sub	sp, #20
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006e0c:	4b0a      	ldr	r3, [pc, #40]	@ (8006e38 <RCC_Delay+0x34>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a0a      	ldr	r2, [pc, #40]	@ (8006e3c <RCC_Delay+0x38>)
 8006e12:	fba2 2303 	umull	r2, r3, r2, r3
 8006e16:	0a5b      	lsrs	r3, r3, #9
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	fb02 f303 	mul.w	r3, r2, r3
 8006e1e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006e20:	bf00      	nop
  }
  while (Delay --);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	1e5a      	subs	r2, r3, #1
 8006e26:	60fa      	str	r2, [r7, #12]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d1f9      	bne.n	8006e20 <RCC_Delay+0x1c>
}
 8006e2c:	bf00      	nop
 8006e2e:	bf00      	nop
 8006e30:	3714      	adds	r7, #20
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bc80      	pop	{r7}
 8006e36:	4770      	bx	lr
 8006e38:	20000038 	.word	0x20000038
 8006e3c:	10624dd3 	.word	0x10624dd3

08006e40 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b086      	sub	sp, #24
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	613b      	str	r3, [r7, #16]
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 0301 	and.w	r3, r3, #1
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d07d      	beq.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e60:	4b4f      	ldr	r3, [pc, #316]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e62:	69db      	ldr	r3, [r3, #28]
 8006e64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d10d      	bne.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e6c:	4b4c      	ldr	r3, [pc, #304]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e6e:	69db      	ldr	r3, [r3, #28]
 8006e70:	4a4b      	ldr	r2, [pc, #300]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e76:	61d3      	str	r3, [r2, #28]
 8006e78:	4b49      	ldr	r3, [pc, #292]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e7a:	69db      	ldr	r3, [r3, #28]
 8006e7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e80:	60bb      	str	r3, [r7, #8]
 8006e82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e84:	2301      	movs	r3, #1
 8006e86:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e88:	4b46      	ldr	r3, [pc, #280]	@ (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d118      	bne.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e94:	4b43      	ldr	r3, [pc, #268]	@ (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a42      	ldr	r2, [pc, #264]	@ (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e9e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ea0:	f7fd f954 	bl	800414c <HAL_GetTick>
 8006ea4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ea6:	e008      	b.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ea8:	f7fd f950 	bl	800414c <HAL_GetTick>
 8006eac:	4602      	mov	r2, r0
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	2b64      	cmp	r3, #100	@ 0x64
 8006eb4:	d901      	bls.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006eb6:	2303      	movs	r3, #3
 8006eb8:	e06d      	b.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006eba:	4b3a      	ldr	r3, [pc, #232]	@ (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d0f0      	beq.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006ec6:	4b36      	ldr	r3, [pc, #216]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ec8:	6a1b      	ldr	r3, [r3, #32]
 8006eca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ece:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d02e      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ede:	68fa      	ldr	r2, [r7, #12]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d027      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006ee4:	4b2e      	ldr	r3, [pc, #184]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ee6:	6a1b      	ldr	r3, [r3, #32]
 8006ee8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006eec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006eee:	4b2e      	ldr	r3, [pc, #184]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006ef4:	4b2c      	ldr	r3, [pc, #176]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006efa:	4a29      	ldr	r2, [pc, #164]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f003 0301 	and.w	r3, r3, #1
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d014      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f0a:	f7fd f91f 	bl	800414c <HAL_GetTick>
 8006f0e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f10:	e00a      	b.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f12:	f7fd f91b 	bl	800414c <HAL_GetTick>
 8006f16:	4602      	mov	r2, r0
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	1ad3      	subs	r3, r2, r3
 8006f1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d901      	bls.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006f24:	2303      	movs	r3, #3
 8006f26:	e036      	b.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f28:	4b1d      	ldr	r3, [pc, #116]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f2a:	6a1b      	ldr	r3, [r3, #32]
 8006f2c:	f003 0302 	and.w	r3, r3, #2
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d0ee      	beq.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f34:	4b1a      	ldr	r3, [pc, #104]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f36:	6a1b      	ldr	r3, [r3, #32]
 8006f38:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	4917      	ldr	r1, [pc, #92]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f42:	4313      	orrs	r3, r2
 8006f44:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006f46:	7dfb      	ldrb	r3, [r7, #23]
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d105      	bne.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f4c:	4b14      	ldr	r3, [pc, #80]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f4e:	69db      	ldr	r3, [r3, #28]
 8006f50:	4a13      	ldr	r2, [pc, #76]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f56:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 0302 	and.w	r3, r3, #2
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d008      	beq.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006f64:	4b0e      	ldr	r3, [pc, #56]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	490b      	ldr	r1, [pc, #44]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f72:	4313      	orrs	r3, r2
 8006f74:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f003 0310 	and.w	r3, r3, #16
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d008      	beq.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f82:	4b07      	ldr	r3, [pc, #28]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	4904      	ldr	r1, [pc, #16]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f90:	4313      	orrs	r3, r2
 8006f92:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3718      	adds	r7, #24
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	40021000 	.word	0x40021000
 8006fa4:	40007000 	.word	0x40007000
 8006fa8:	42420440 	.word	0x42420440

08006fac <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b088      	sub	sp, #32
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	617b      	str	r3, [r7, #20]
 8006fb8:	2300      	movs	r3, #0
 8006fba:	61fb      	str	r3, [r7, #28]
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	60fb      	str	r3, [r7, #12]
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2b10      	cmp	r3, #16
 8006fcc:	d00a      	beq.n	8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2b10      	cmp	r3, #16
 8006fd2:	f200 808a 	bhi.w	80070ea <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d045      	beq.n	8007068 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2b02      	cmp	r3, #2
 8006fe0:	d075      	beq.n	80070ce <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8006fe2:	e082      	b.n	80070ea <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8006fe4:	4b46      	ldr	r3, [pc, #280]	@ (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006fea:	4b45      	ldr	r3, [pc, #276]	@ (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d07b      	beq.n	80070ee <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	0c9b      	lsrs	r3, r3, #18
 8006ffa:	f003 030f 	and.w	r3, r3, #15
 8006ffe:	4a41      	ldr	r2, [pc, #260]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8007000:	5cd3      	ldrb	r3, [r2, r3]
 8007002:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800700a:	2b00      	cmp	r3, #0
 800700c:	d015      	beq.n	800703a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800700e:	4b3c      	ldr	r3, [pc, #240]	@ (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	0c5b      	lsrs	r3, r3, #17
 8007014:	f003 0301 	and.w	r3, r3, #1
 8007018:	4a3b      	ldr	r2, [pc, #236]	@ (8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800701a:	5cd3      	ldrb	r3, [r2, r3]
 800701c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00d      	beq.n	8007044 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8007028:	4a38      	ldr	r2, [pc, #224]	@ (800710c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	fb02 f303 	mul.w	r3, r2, r3
 8007036:	61fb      	str	r3, [r7, #28]
 8007038:	e004      	b.n	8007044 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	4a34      	ldr	r2, [pc, #208]	@ (8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800703e:	fb02 f303 	mul.w	r3, r2, r3
 8007042:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8007044:	4b2e      	ldr	r3, [pc, #184]	@ (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800704c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007050:	d102      	bne.n	8007058 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	61bb      	str	r3, [r7, #24]
      break;
 8007056:	e04a      	b.n	80070ee <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	005b      	lsls	r3, r3, #1
 800705c:	4a2d      	ldr	r2, [pc, #180]	@ (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800705e:	fba2 2303 	umull	r2, r3, r2, r3
 8007062:	085b      	lsrs	r3, r3, #1
 8007064:	61bb      	str	r3, [r7, #24]
      break;
 8007066:	e042      	b.n	80070ee <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8007068:	4b25      	ldr	r3, [pc, #148]	@ (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800706a:	6a1b      	ldr	r3, [r3, #32]
 800706c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007074:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007078:	d108      	bne.n	800708c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f003 0302 	and.w	r3, r3, #2
 8007080:	2b00      	cmp	r3, #0
 8007082:	d003      	beq.n	800708c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8007084:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007088:	61bb      	str	r3, [r7, #24]
 800708a:	e01f      	b.n	80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007092:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007096:	d109      	bne.n	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8007098:	4b19      	ldr	r3, [pc, #100]	@ (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800709a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800709c:	f003 0302 	and.w	r3, r3, #2
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d003      	beq.n	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80070a4:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80070a8:	61bb      	str	r3, [r7, #24]
 80070aa:	e00f      	b.n	80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070b6:	d11c      	bne.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80070b8:	4b11      	ldr	r3, [pc, #68]	@ (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d016      	beq.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80070c4:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80070c8:	61bb      	str	r3, [r7, #24]
      break;
 80070ca:	e012      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80070cc:	e011      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80070ce:	f7ff fe85 	bl	8006ddc <HAL_RCC_GetPCLK2Freq>
 80070d2:	4602      	mov	r2, r0
 80070d4:	4b0a      	ldr	r3, [pc, #40]	@ (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	0b9b      	lsrs	r3, r3, #14
 80070da:	f003 0303 	and.w	r3, r3, #3
 80070de:	3301      	adds	r3, #1
 80070e0:	005b      	lsls	r3, r3, #1
 80070e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80070e6:	61bb      	str	r3, [r7, #24]
      break;
 80070e8:	e004      	b.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80070ea:	bf00      	nop
 80070ec:	e002      	b.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80070ee:	bf00      	nop
 80070f0:	e000      	b.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80070f2:	bf00      	nop
    }
  }
  return (frequency);
 80070f4:	69bb      	ldr	r3, [r7, #24]
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3720      	adds	r7, #32
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	40021000 	.word	0x40021000
 8007104:	0800c088 	.word	0x0800c088
 8007108:	0800c098 	.word	0x0800c098
 800710c:	007a1200 	.word	0x007a1200
 8007110:	003d0900 	.word	0x003d0900
 8007114:	aaaaaaab 	.word	0xaaaaaaab

08007118 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d101      	bne.n	800712a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007126:	2301      	movs	r3, #1
 8007128:	e041      	b.n	80071ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007130:	b2db      	uxtb	r3, r3
 8007132:	2b00      	cmp	r3, #0
 8007134:	d106      	bne.n	8007144 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f7fc fdb6 	bl	8003cb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2202      	movs	r2, #2
 8007148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	3304      	adds	r3, #4
 8007154:	4619      	mov	r1, r3
 8007156:	4610      	mov	r0, r2
 8007158:	f000 fdd4 	bl	8007d04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3708      	adds	r7, #8
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80071b6:	b580      	push	{r7, lr}
 80071b8:	b082      	sub	sp, #8
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d101      	bne.n	80071c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	e041      	b.n	800724c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d106      	bne.n	80071e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 f839 	bl	8007254 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2202      	movs	r2, #2
 80071e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	3304      	adds	r3, #4
 80071f2:	4619      	mov	r1, r3
 80071f4:	4610      	mov	r0, r2
 80071f6:	f000 fd85 	bl	8007d04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2201      	movs	r2, #1
 80071fe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2201      	movs	r2, #1
 8007206:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2201      	movs	r2, #1
 800720e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2201      	movs	r2, #1
 8007216:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2201      	movs	r2, #1
 800721e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2201      	movs	r2, #1
 8007226:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2201      	movs	r2, #1
 800722e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2201      	movs	r2, #1
 8007236:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2201      	movs	r2, #1
 800723e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2201      	movs	r2, #1
 8007246:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800724a:	2300      	movs	r3, #0
}
 800724c:	4618      	mov	r0, r3
 800724e:	3708      	adds	r7, #8
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800725c:	bf00      	nop
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	bc80      	pop	{r7}
 8007264:	4770      	bx	lr
	...

08007268 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d109      	bne.n	800728c <HAL_TIM_PWM_Start+0x24>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800727e:	b2db      	uxtb	r3, r3
 8007280:	2b01      	cmp	r3, #1
 8007282:	bf14      	ite	ne
 8007284:	2301      	movne	r3, #1
 8007286:	2300      	moveq	r3, #0
 8007288:	b2db      	uxtb	r3, r3
 800728a:	e022      	b.n	80072d2 <HAL_TIM_PWM_Start+0x6a>
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	2b04      	cmp	r3, #4
 8007290:	d109      	bne.n	80072a6 <HAL_TIM_PWM_Start+0x3e>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007298:	b2db      	uxtb	r3, r3
 800729a:	2b01      	cmp	r3, #1
 800729c:	bf14      	ite	ne
 800729e:	2301      	movne	r3, #1
 80072a0:	2300      	moveq	r3, #0
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	e015      	b.n	80072d2 <HAL_TIM_PWM_Start+0x6a>
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	2b08      	cmp	r3, #8
 80072aa:	d109      	bne.n	80072c0 <HAL_TIM_PWM_Start+0x58>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	bf14      	ite	ne
 80072b8:	2301      	movne	r3, #1
 80072ba:	2300      	moveq	r3, #0
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	e008      	b.n	80072d2 <HAL_TIM_PWM_Start+0x6a>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	bf14      	ite	ne
 80072cc:	2301      	movne	r3, #1
 80072ce:	2300      	moveq	r3, #0
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d001      	beq.n	80072da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	e05e      	b.n	8007398 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d104      	bne.n	80072ea <HAL_TIM_PWM_Start+0x82>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2202      	movs	r2, #2
 80072e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80072e8:	e013      	b.n	8007312 <HAL_TIM_PWM_Start+0xaa>
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	2b04      	cmp	r3, #4
 80072ee:	d104      	bne.n	80072fa <HAL_TIM_PWM_Start+0x92>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2202      	movs	r2, #2
 80072f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80072f8:	e00b      	b.n	8007312 <HAL_TIM_PWM_Start+0xaa>
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	2b08      	cmp	r3, #8
 80072fe:	d104      	bne.n	800730a <HAL_TIM_PWM_Start+0xa2>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2202      	movs	r2, #2
 8007304:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007308:	e003      	b.n	8007312 <HAL_TIM_PWM_Start+0xaa>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2202      	movs	r2, #2
 800730e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	2201      	movs	r2, #1
 8007318:	6839      	ldr	r1, [r7, #0]
 800731a:	4618      	mov	r0, r3
 800731c:	f000 ff7e 	bl	800821c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a1e      	ldr	r2, [pc, #120]	@ (80073a0 <HAL_TIM_PWM_Start+0x138>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d107      	bne.n	800733a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007338:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a18      	ldr	r2, [pc, #96]	@ (80073a0 <HAL_TIM_PWM_Start+0x138>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d00e      	beq.n	8007362 <HAL_TIM_PWM_Start+0xfa>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800734c:	d009      	beq.n	8007362 <HAL_TIM_PWM_Start+0xfa>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a14      	ldr	r2, [pc, #80]	@ (80073a4 <HAL_TIM_PWM_Start+0x13c>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d004      	beq.n	8007362 <HAL_TIM_PWM_Start+0xfa>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a12      	ldr	r2, [pc, #72]	@ (80073a8 <HAL_TIM_PWM_Start+0x140>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d111      	bne.n	8007386 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	f003 0307 	and.w	r3, r3, #7
 800736c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2b06      	cmp	r3, #6
 8007372:	d010      	beq.n	8007396 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f042 0201 	orr.w	r2, r2, #1
 8007382:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007384:	e007      	b.n	8007396 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f042 0201 	orr.w	r2, r2, #1
 8007394:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007396:	2300      	movs	r3, #0
}
 8007398:	4618      	mov	r0, r3
 800739a:	3710      	adds	r7, #16
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}
 80073a0:	40012c00 	.word	0x40012c00
 80073a4:	40000400 	.word	0x40000400
 80073a8:	40000800 	.word	0x40000800

080073ac <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	2200      	movs	r2, #0
 80073bc:	6839      	ldr	r1, [r7, #0]
 80073be:	4618      	mov	r0, r3
 80073c0:	f000 ff2c 	bl	800821c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a29      	ldr	r2, [pc, #164]	@ (8007470 <HAL_TIM_PWM_Stop+0xc4>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d117      	bne.n	80073fe <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	6a1a      	ldr	r2, [r3, #32]
 80073d4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80073d8:	4013      	ands	r3, r2
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d10f      	bne.n	80073fe <HAL_TIM_PWM_Stop+0x52>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	6a1a      	ldr	r2, [r3, #32]
 80073e4:	f240 4344 	movw	r3, #1092	@ 0x444
 80073e8:	4013      	ands	r3, r2
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d107      	bne.n	80073fe <HAL_TIM_PWM_Stop+0x52>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80073fc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	6a1a      	ldr	r2, [r3, #32]
 8007404:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007408:	4013      	ands	r3, r2
 800740a:	2b00      	cmp	r3, #0
 800740c:	d10f      	bne.n	800742e <HAL_TIM_PWM_Stop+0x82>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	6a1a      	ldr	r2, [r3, #32]
 8007414:	f240 4344 	movw	r3, #1092	@ 0x444
 8007418:	4013      	ands	r3, r2
 800741a:	2b00      	cmp	r3, #0
 800741c:	d107      	bne.n	800742e <HAL_TIM_PWM_Stop+0x82>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f022 0201 	bic.w	r2, r2, #1
 800742c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d104      	bne.n	800743e <HAL_TIM_PWM_Stop+0x92>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2201      	movs	r2, #1
 8007438:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800743c:	e013      	b.n	8007466 <HAL_TIM_PWM_Stop+0xba>
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	2b04      	cmp	r3, #4
 8007442:	d104      	bne.n	800744e <HAL_TIM_PWM_Stop+0xa2>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800744c:	e00b      	b.n	8007466 <HAL_TIM_PWM_Stop+0xba>
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	2b08      	cmp	r3, #8
 8007452:	d104      	bne.n	800745e <HAL_TIM_PWM_Stop+0xb2>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800745c:	e003      	b.n	8007466 <HAL_TIM_PWM_Stop+0xba>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2201      	movs	r2, #1
 8007462:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8007466:	2300      	movs	r3, #0
}
 8007468:	4618      	mov	r0, r3
 800746a:	3708      	adds	r7, #8
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}
 8007470:	40012c00 	.word	0x40012c00

08007474 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800747e:	2300      	movs	r3, #0
 8007480:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d109      	bne.n	800749c <HAL_TIM_PWM_Start_IT+0x28>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800748e:	b2db      	uxtb	r3, r3
 8007490:	2b01      	cmp	r3, #1
 8007492:	bf14      	ite	ne
 8007494:	2301      	movne	r3, #1
 8007496:	2300      	moveq	r3, #0
 8007498:	b2db      	uxtb	r3, r3
 800749a:	e022      	b.n	80074e2 <HAL_TIM_PWM_Start_IT+0x6e>
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	2b04      	cmp	r3, #4
 80074a0:	d109      	bne.n	80074b6 <HAL_TIM_PWM_Start_IT+0x42>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	bf14      	ite	ne
 80074ae:	2301      	movne	r3, #1
 80074b0:	2300      	moveq	r3, #0
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	e015      	b.n	80074e2 <HAL_TIM_PWM_Start_IT+0x6e>
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	2b08      	cmp	r3, #8
 80074ba:	d109      	bne.n	80074d0 <HAL_TIM_PWM_Start_IT+0x5c>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	bf14      	ite	ne
 80074c8:	2301      	movne	r3, #1
 80074ca:	2300      	moveq	r3, #0
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	e008      	b.n	80074e2 <HAL_TIM_PWM_Start_IT+0x6e>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	2b01      	cmp	r3, #1
 80074da:	bf14      	ite	ne
 80074dc:	2301      	movne	r3, #1
 80074de:	2300      	moveq	r3, #0
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d001      	beq.n	80074ea <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	e0a9      	b.n	800763e <HAL_TIM_PWM_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d104      	bne.n	80074fa <HAL_TIM_PWM_Start_IT+0x86>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2202      	movs	r2, #2
 80074f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80074f8:	e013      	b.n	8007522 <HAL_TIM_PWM_Start_IT+0xae>
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	2b04      	cmp	r3, #4
 80074fe:	d104      	bne.n	800750a <HAL_TIM_PWM_Start_IT+0x96>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2202      	movs	r2, #2
 8007504:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007508:	e00b      	b.n	8007522 <HAL_TIM_PWM_Start_IT+0xae>
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	2b08      	cmp	r3, #8
 800750e:	d104      	bne.n	800751a <HAL_TIM_PWM_Start_IT+0xa6>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2202      	movs	r2, #2
 8007514:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007518:	e003      	b.n	8007522 <HAL_TIM_PWM_Start_IT+0xae>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2202      	movs	r2, #2
 800751e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	2b0c      	cmp	r3, #12
 8007526:	d841      	bhi.n	80075ac <HAL_TIM_PWM_Start_IT+0x138>
 8007528:	a201      	add	r2, pc, #4	@ (adr r2, 8007530 <HAL_TIM_PWM_Start_IT+0xbc>)
 800752a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800752e:	bf00      	nop
 8007530:	08007565 	.word	0x08007565
 8007534:	080075ad 	.word	0x080075ad
 8007538:	080075ad 	.word	0x080075ad
 800753c:	080075ad 	.word	0x080075ad
 8007540:	08007577 	.word	0x08007577
 8007544:	080075ad 	.word	0x080075ad
 8007548:	080075ad 	.word	0x080075ad
 800754c:	080075ad 	.word	0x080075ad
 8007550:	08007589 	.word	0x08007589
 8007554:	080075ad 	.word	0x080075ad
 8007558:	080075ad 	.word	0x080075ad
 800755c:	080075ad 	.word	0x080075ad
 8007560:	0800759b 	.word	0x0800759b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	68da      	ldr	r2, [r3, #12]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f042 0202 	orr.w	r2, r2, #2
 8007572:	60da      	str	r2, [r3, #12]
      break;
 8007574:	e01d      	b.n	80075b2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	68da      	ldr	r2, [r3, #12]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f042 0204 	orr.w	r2, r2, #4
 8007584:	60da      	str	r2, [r3, #12]
      break;
 8007586:	e014      	b.n	80075b2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	68da      	ldr	r2, [r3, #12]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f042 0208 	orr.w	r2, r2, #8
 8007596:	60da      	str	r2, [r3, #12]
      break;
 8007598:	e00b      	b.n	80075b2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	68da      	ldr	r2, [r3, #12]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f042 0210 	orr.w	r2, r2, #16
 80075a8:	60da      	str	r2, [r3, #12]
      break;
 80075aa:	e002      	b.n	80075b2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	73fb      	strb	r3, [r7, #15]
      break;
 80075b0:	bf00      	nop
  }

  if (status == HAL_OK)
 80075b2:	7bfb      	ldrb	r3, [r7, #15]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d141      	bne.n	800763c <HAL_TIM_PWM_Start_IT+0x1c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2201      	movs	r2, #1
 80075be:	6839      	ldr	r1, [r7, #0]
 80075c0:	4618      	mov	r0, r3
 80075c2:	f000 fe2b 	bl	800821c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a1f      	ldr	r2, [pc, #124]	@ (8007648 <HAL_TIM_PWM_Start_IT+0x1d4>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d107      	bne.n	80075e0 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80075de:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a18      	ldr	r2, [pc, #96]	@ (8007648 <HAL_TIM_PWM_Start_IT+0x1d4>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d00e      	beq.n	8007608 <HAL_TIM_PWM_Start_IT+0x194>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075f2:	d009      	beq.n	8007608 <HAL_TIM_PWM_Start_IT+0x194>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a14      	ldr	r2, [pc, #80]	@ (800764c <HAL_TIM_PWM_Start_IT+0x1d8>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d004      	beq.n	8007608 <HAL_TIM_PWM_Start_IT+0x194>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a13      	ldr	r2, [pc, #76]	@ (8007650 <HAL_TIM_PWM_Start_IT+0x1dc>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d111      	bne.n	800762c <HAL_TIM_PWM_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	f003 0307 	and.w	r3, r3, #7
 8007612:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	2b06      	cmp	r3, #6
 8007618:	d010      	beq.n	800763c <HAL_TIM_PWM_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f042 0201 	orr.w	r2, r2, #1
 8007628:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800762a:	e007      	b.n	800763c <HAL_TIM_PWM_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f042 0201 	orr.w	r2, r2, #1
 800763a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800763c:	7bfb      	ldrb	r3, [r7, #15]
}
 800763e:	4618      	mov	r0, r3
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	40012c00 	.word	0x40012c00
 800764c:	40000400 	.word	0x40000400
 8007650:	40000800 	.word	0x40000800

08007654 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b084      	sub	sp, #16
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800765e:	2300      	movs	r3, #0
 8007660:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	2b0c      	cmp	r3, #12
 8007666:	d841      	bhi.n	80076ec <HAL_TIM_PWM_Stop_IT+0x98>
 8007668:	a201      	add	r2, pc, #4	@ (adr r2, 8007670 <HAL_TIM_PWM_Stop_IT+0x1c>)
 800766a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800766e:	bf00      	nop
 8007670:	080076a5 	.word	0x080076a5
 8007674:	080076ed 	.word	0x080076ed
 8007678:	080076ed 	.word	0x080076ed
 800767c:	080076ed 	.word	0x080076ed
 8007680:	080076b7 	.word	0x080076b7
 8007684:	080076ed 	.word	0x080076ed
 8007688:	080076ed 	.word	0x080076ed
 800768c:	080076ed 	.word	0x080076ed
 8007690:	080076c9 	.word	0x080076c9
 8007694:	080076ed 	.word	0x080076ed
 8007698:	080076ed 	.word	0x080076ed
 800769c:	080076ed 	.word	0x080076ed
 80076a0:	080076db 	.word	0x080076db
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	68da      	ldr	r2, [r3, #12]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f022 0202 	bic.w	r2, r2, #2
 80076b2:	60da      	str	r2, [r3, #12]
      break;
 80076b4:	e01d      	b.n	80076f2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	68da      	ldr	r2, [r3, #12]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f022 0204 	bic.w	r2, r2, #4
 80076c4:	60da      	str	r2, [r3, #12]
      break;
 80076c6:	e014      	b.n	80076f2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	68da      	ldr	r2, [r3, #12]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f022 0208 	bic.w	r2, r2, #8
 80076d6:	60da      	str	r2, [r3, #12]
      break;
 80076d8:	e00b      	b.n	80076f2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	68da      	ldr	r2, [r3, #12]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f022 0210 	bic.w	r2, r2, #16
 80076e8:	60da      	str	r2, [r3, #12]
      break;
 80076ea:	e002      	b.n	80076f2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80076ec:	2301      	movs	r3, #1
 80076ee:	73fb      	strb	r3, [r7, #15]
      break;
 80076f0:	bf00      	nop
  }

  if (status == HAL_OK)
 80076f2:	7bfb      	ldrb	r3, [r7, #15]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d157      	bne.n	80077a8 <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	2200      	movs	r2, #0
 80076fe:	6839      	ldr	r1, [r7, #0]
 8007700:	4618      	mov	r0, r3
 8007702:	f000 fd8b 	bl	800821c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a2a      	ldr	r2, [pc, #168]	@ (80077b4 <HAL_TIM_PWM_Stop_IT+0x160>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d117      	bne.n	8007740 <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	6a1a      	ldr	r2, [r3, #32]
 8007716:	f241 1311 	movw	r3, #4369	@ 0x1111
 800771a:	4013      	ands	r3, r2
 800771c:	2b00      	cmp	r3, #0
 800771e:	d10f      	bne.n	8007740 <HAL_TIM_PWM_Stop_IT+0xec>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	6a1a      	ldr	r2, [r3, #32]
 8007726:	f240 4344 	movw	r3, #1092	@ 0x444
 800772a:	4013      	ands	r3, r2
 800772c:	2b00      	cmp	r3, #0
 800772e:	d107      	bne.n	8007740 <HAL_TIM_PWM_Stop_IT+0xec>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800773e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	6a1a      	ldr	r2, [r3, #32]
 8007746:	f241 1311 	movw	r3, #4369	@ 0x1111
 800774a:	4013      	ands	r3, r2
 800774c:	2b00      	cmp	r3, #0
 800774e:	d10f      	bne.n	8007770 <HAL_TIM_PWM_Stop_IT+0x11c>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	6a1a      	ldr	r2, [r3, #32]
 8007756:	f240 4344 	movw	r3, #1092	@ 0x444
 800775a:	4013      	ands	r3, r2
 800775c:	2b00      	cmp	r3, #0
 800775e:	d107      	bne.n	8007770 <HAL_TIM_PWM_Stop_IT+0x11c>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f022 0201 	bic.w	r2, r2, #1
 800776e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d104      	bne.n	8007780 <HAL_TIM_PWM_Stop_IT+0x12c>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2201      	movs	r2, #1
 800777a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800777e:	e013      	b.n	80077a8 <HAL_TIM_PWM_Stop_IT+0x154>
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	2b04      	cmp	r3, #4
 8007784:	d104      	bne.n	8007790 <HAL_TIM_PWM_Stop_IT+0x13c>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2201      	movs	r2, #1
 800778a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800778e:	e00b      	b.n	80077a8 <HAL_TIM_PWM_Stop_IT+0x154>
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	2b08      	cmp	r3, #8
 8007794:	d104      	bne.n	80077a0 <HAL_TIM_PWM_Stop_IT+0x14c>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2201      	movs	r2, #1
 800779a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800779e:	e003      	b.n	80077a8 <HAL_TIM_PWM_Stop_IT+0x154>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2201      	movs	r2, #1
 80077a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 80077a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3710      	adds	r7, #16
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	bf00      	nop
 80077b4:	40012c00 	.word	0x40012c00

080077b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	691b      	ldr	r3, [r3, #16]
 80077ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	f003 0302 	and.w	r3, r3, #2
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d020      	beq.n	800781c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f003 0302 	and.w	r3, r3, #2
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d01b      	beq.n	800781c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f06f 0202 	mvn.w	r2, #2
 80077ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2201      	movs	r2, #1
 80077f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	699b      	ldr	r3, [r3, #24]
 80077fa:	f003 0303 	and.w	r3, r3, #3
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d003      	beq.n	800780a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 fa63 	bl	8007cce <HAL_TIM_IC_CaptureCallback>
 8007808:	e005      	b.n	8007816 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 fa56 	bl	8007cbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 fa65 	bl	8007ce0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2200      	movs	r2, #0
 800781a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	f003 0304 	and.w	r3, r3, #4
 8007822:	2b00      	cmp	r3, #0
 8007824:	d020      	beq.n	8007868 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f003 0304 	and.w	r3, r3, #4
 800782c:	2b00      	cmp	r3, #0
 800782e:	d01b      	beq.n	8007868 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f06f 0204 	mvn.w	r2, #4
 8007838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2202      	movs	r2, #2
 800783e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	699b      	ldr	r3, [r3, #24]
 8007846:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800784a:	2b00      	cmp	r3, #0
 800784c:	d003      	beq.n	8007856 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 fa3d 	bl	8007cce <HAL_TIM_IC_CaptureCallback>
 8007854:	e005      	b.n	8007862 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 fa30 	bl	8007cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 fa3f 	bl	8007ce0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	f003 0308 	and.w	r3, r3, #8
 800786e:	2b00      	cmp	r3, #0
 8007870:	d020      	beq.n	80078b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f003 0308 	and.w	r3, r3, #8
 8007878:	2b00      	cmp	r3, #0
 800787a:	d01b      	beq.n	80078b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f06f 0208 	mvn.w	r2, #8
 8007884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2204      	movs	r2, #4
 800788a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	69db      	ldr	r3, [r3, #28]
 8007892:	f003 0303 	and.w	r3, r3, #3
 8007896:	2b00      	cmp	r3, #0
 8007898:	d003      	beq.n	80078a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 fa17 	bl	8007cce <HAL_TIM_IC_CaptureCallback>
 80078a0:	e005      	b.n	80078ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 fa0a 	bl	8007cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 fa19 	bl	8007ce0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2200      	movs	r2, #0
 80078b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	f003 0310 	and.w	r3, r3, #16
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d020      	beq.n	8007900 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f003 0310 	and.w	r3, r3, #16
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d01b      	beq.n	8007900 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f06f 0210 	mvn.w	r2, #16
 80078d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2208      	movs	r2, #8
 80078d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	69db      	ldr	r3, [r3, #28]
 80078de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d003      	beq.n	80078ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 f9f1 	bl	8007cce <HAL_TIM_IC_CaptureCallback>
 80078ec:	e005      	b.n	80078fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 f9e4 	bl	8007cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 f9f3 	bl	8007ce0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	f003 0301 	and.w	r3, r3, #1
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00c      	beq.n	8007924 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f003 0301 	and.w	r3, r3, #1
 8007910:	2b00      	cmp	r3, #0
 8007912:	d007      	beq.n	8007924 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f06f 0201 	mvn.w	r2, #1
 800791c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 f9c3 	bl	8007caa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800792a:	2b00      	cmp	r3, #0
 800792c:	d00c      	beq.n	8007948 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007934:	2b00      	cmp	r3, #0
 8007936:	d007      	beq.n	8007948 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007940:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 fcf5 	bl	8008332 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800794e:	2b00      	cmp	r3, #0
 8007950:	d00c      	beq.n	800796c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007958:	2b00      	cmp	r3, #0
 800795a:	d007      	beq.n	800796c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 f9c3 	bl	8007cf2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	f003 0320 	and.w	r3, r3, #32
 8007972:	2b00      	cmp	r3, #0
 8007974:	d00c      	beq.n	8007990 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	f003 0320 	and.w	r3, r3, #32
 800797c:	2b00      	cmp	r3, #0
 800797e:	d007      	beq.n	8007990 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f06f 0220 	mvn.w	r2, #32
 8007988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 fcc8 	bl	8008320 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007990:	bf00      	nop
 8007992:	3710      	adds	r7, #16
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b086      	sub	sp, #24
 800799c:	af00      	add	r7, sp, #0
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079a4:	2300      	movs	r3, #0
 80079a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d101      	bne.n	80079b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80079b2:	2302      	movs	r3, #2
 80079b4:	e0ae      	b.n	8007b14 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2201      	movs	r2, #1
 80079ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2b0c      	cmp	r3, #12
 80079c2:	f200 809f 	bhi.w	8007b04 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80079c6:	a201      	add	r2, pc, #4	@ (adr r2, 80079cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80079c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079cc:	08007a01 	.word	0x08007a01
 80079d0:	08007b05 	.word	0x08007b05
 80079d4:	08007b05 	.word	0x08007b05
 80079d8:	08007b05 	.word	0x08007b05
 80079dc:	08007a41 	.word	0x08007a41
 80079e0:	08007b05 	.word	0x08007b05
 80079e4:	08007b05 	.word	0x08007b05
 80079e8:	08007b05 	.word	0x08007b05
 80079ec:	08007a83 	.word	0x08007a83
 80079f0:	08007b05 	.word	0x08007b05
 80079f4:	08007b05 	.word	0x08007b05
 80079f8:	08007b05 	.word	0x08007b05
 80079fc:	08007ac3 	.word	0x08007ac3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	68b9      	ldr	r1, [r7, #8]
 8007a06:	4618      	mov	r0, r3
 8007a08:	f000 f9ea 	bl	8007de0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	699a      	ldr	r2, [r3, #24]
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f042 0208 	orr.w	r2, r2, #8
 8007a1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	699a      	ldr	r2, [r3, #24]
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f022 0204 	bic.w	r2, r2, #4
 8007a2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	6999      	ldr	r1, [r3, #24]
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	691a      	ldr	r2, [r3, #16]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	430a      	orrs	r2, r1
 8007a3c:	619a      	str	r2, [r3, #24]
      break;
 8007a3e:	e064      	b.n	8007b0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	68b9      	ldr	r1, [r7, #8]
 8007a46:	4618      	mov	r0, r3
 8007a48:	f000 fa30 	bl	8007eac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	699a      	ldr	r2, [r3, #24]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	699a      	ldr	r2, [r3, #24]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	6999      	ldr	r1, [r3, #24]
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	691b      	ldr	r3, [r3, #16]
 8007a76:	021a      	lsls	r2, r3, #8
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	430a      	orrs	r2, r1
 8007a7e:	619a      	str	r2, [r3, #24]
      break;
 8007a80:	e043      	b.n	8007b0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	68b9      	ldr	r1, [r7, #8]
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f000 fa79 	bl	8007f80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	69da      	ldr	r2, [r3, #28]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f042 0208 	orr.w	r2, r2, #8
 8007a9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	69da      	ldr	r2, [r3, #28]
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f022 0204 	bic.w	r2, r2, #4
 8007aac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	69d9      	ldr	r1, [r3, #28]
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	691a      	ldr	r2, [r3, #16]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	430a      	orrs	r2, r1
 8007abe:	61da      	str	r2, [r3, #28]
      break;
 8007ac0:	e023      	b.n	8007b0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	68b9      	ldr	r1, [r7, #8]
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f000 fac3 	bl	8008054 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	69da      	ldr	r2, [r3, #28]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007adc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	69da      	ldr	r2, [r3, #28]
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007aec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	69d9      	ldr	r1, [r3, #28]
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	691b      	ldr	r3, [r3, #16]
 8007af8:	021a      	lsls	r2, r3, #8
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	430a      	orrs	r2, r1
 8007b00:	61da      	str	r2, [r3, #28]
      break;
 8007b02:	e002      	b.n	8007b0a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007b04:	2301      	movs	r3, #1
 8007b06:	75fb      	strb	r3, [r7, #23]
      break;
 8007b08:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3718      	adds	r7, #24
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b26:	2300      	movs	r3, #0
 8007b28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d101      	bne.n	8007b38 <HAL_TIM_ConfigClockSource+0x1c>
 8007b34:	2302      	movs	r3, #2
 8007b36:	e0b4      	b.n	8007ca2 <HAL_TIM_ConfigClockSource+0x186>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2202      	movs	r2, #2
 8007b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007b56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007b5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	68ba      	ldr	r2, [r7, #8]
 8007b66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b70:	d03e      	beq.n	8007bf0 <HAL_TIM_ConfigClockSource+0xd4>
 8007b72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b76:	f200 8087 	bhi.w	8007c88 <HAL_TIM_ConfigClockSource+0x16c>
 8007b7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b7e:	f000 8086 	beq.w	8007c8e <HAL_TIM_ConfigClockSource+0x172>
 8007b82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b86:	d87f      	bhi.n	8007c88 <HAL_TIM_ConfigClockSource+0x16c>
 8007b88:	2b70      	cmp	r3, #112	@ 0x70
 8007b8a:	d01a      	beq.n	8007bc2 <HAL_TIM_ConfigClockSource+0xa6>
 8007b8c:	2b70      	cmp	r3, #112	@ 0x70
 8007b8e:	d87b      	bhi.n	8007c88 <HAL_TIM_ConfigClockSource+0x16c>
 8007b90:	2b60      	cmp	r3, #96	@ 0x60
 8007b92:	d050      	beq.n	8007c36 <HAL_TIM_ConfigClockSource+0x11a>
 8007b94:	2b60      	cmp	r3, #96	@ 0x60
 8007b96:	d877      	bhi.n	8007c88 <HAL_TIM_ConfigClockSource+0x16c>
 8007b98:	2b50      	cmp	r3, #80	@ 0x50
 8007b9a:	d03c      	beq.n	8007c16 <HAL_TIM_ConfigClockSource+0xfa>
 8007b9c:	2b50      	cmp	r3, #80	@ 0x50
 8007b9e:	d873      	bhi.n	8007c88 <HAL_TIM_ConfigClockSource+0x16c>
 8007ba0:	2b40      	cmp	r3, #64	@ 0x40
 8007ba2:	d058      	beq.n	8007c56 <HAL_TIM_ConfigClockSource+0x13a>
 8007ba4:	2b40      	cmp	r3, #64	@ 0x40
 8007ba6:	d86f      	bhi.n	8007c88 <HAL_TIM_ConfigClockSource+0x16c>
 8007ba8:	2b30      	cmp	r3, #48	@ 0x30
 8007baa:	d064      	beq.n	8007c76 <HAL_TIM_ConfigClockSource+0x15a>
 8007bac:	2b30      	cmp	r3, #48	@ 0x30
 8007bae:	d86b      	bhi.n	8007c88 <HAL_TIM_ConfigClockSource+0x16c>
 8007bb0:	2b20      	cmp	r3, #32
 8007bb2:	d060      	beq.n	8007c76 <HAL_TIM_ConfigClockSource+0x15a>
 8007bb4:	2b20      	cmp	r3, #32
 8007bb6:	d867      	bhi.n	8007c88 <HAL_TIM_ConfigClockSource+0x16c>
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d05c      	beq.n	8007c76 <HAL_TIM_ConfigClockSource+0x15a>
 8007bbc:	2b10      	cmp	r3, #16
 8007bbe:	d05a      	beq.n	8007c76 <HAL_TIM_ConfigClockSource+0x15a>
 8007bc0:	e062      	b.n	8007c88 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007bd2:	f000 fb04 	bl	80081de <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007be4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	68ba      	ldr	r2, [r7, #8]
 8007bec:	609a      	str	r2, [r3, #8]
      break;
 8007bee:	e04f      	b.n	8007c90 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007c00:	f000 faed 	bl	80081de <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	689a      	ldr	r2, [r3, #8]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007c12:	609a      	str	r2, [r3, #8]
      break;
 8007c14:	e03c      	b.n	8007c90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c22:	461a      	mov	r2, r3
 8007c24:	f000 fa64 	bl	80080f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	2150      	movs	r1, #80	@ 0x50
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f000 fabb 	bl	80081aa <TIM_ITRx_SetConfig>
      break;
 8007c34:	e02c      	b.n	8007c90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c42:	461a      	mov	r2, r3
 8007c44:	f000 fa82 	bl	800814c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2160      	movs	r1, #96	@ 0x60
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f000 faab 	bl	80081aa <TIM_ITRx_SetConfig>
      break;
 8007c54:	e01c      	b.n	8007c90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c62:	461a      	mov	r2, r3
 8007c64:	f000 fa44 	bl	80080f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2140      	movs	r1, #64	@ 0x40
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f000 fa9b 	bl	80081aa <TIM_ITRx_SetConfig>
      break;
 8007c74:	e00c      	b.n	8007c90 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4619      	mov	r1, r3
 8007c80:	4610      	mov	r0, r2
 8007c82:	f000 fa92 	bl	80081aa <TIM_ITRx_SetConfig>
      break;
 8007c86:	e003      	b.n	8007c90 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	73fb      	strb	r3, [r7, #15]
      break;
 8007c8c:	e000      	b.n	8007c90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007c8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3710      	adds	r7, #16
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}

08007caa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007caa:	b480      	push	{r7}
 8007cac:	b083      	sub	sp, #12
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007cb2:	bf00      	nop
 8007cb4:	370c      	adds	r7, #12
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bc80      	pop	{r7}
 8007cba:	4770      	bx	lr

08007cbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007cc4:	bf00      	nop
 8007cc6:	370c      	adds	r7, #12
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bc80      	pop	{r7}
 8007ccc:	4770      	bx	lr

08007cce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007cce:	b480      	push	{r7}
 8007cd0:	b083      	sub	sp, #12
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007cd6:	bf00      	nop
 8007cd8:	370c      	adds	r7, #12
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bc80      	pop	{r7}
 8007cde:	4770      	bx	lr

08007ce0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b083      	sub	sp, #12
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ce8:	bf00      	nop
 8007cea:	370c      	adds	r7, #12
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bc80      	pop	{r7}
 8007cf0:	4770      	bx	lr

08007cf2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007cf2:	b480      	push	{r7}
 8007cf4:	b083      	sub	sp, #12
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007cfa:	bf00      	nop
 8007cfc:	370c      	adds	r7, #12
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bc80      	pop	{r7}
 8007d02:	4770      	bx	lr

08007d04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b085      	sub	sp, #20
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	4a2f      	ldr	r2, [pc, #188]	@ (8007dd4 <TIM_Base_SetConfig+0xd0>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d00b      	beq.n	8007d34 <TIM_Base_SetConfig+0x30>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d22:	d007      	beq.n	8007d34 <TIM_Base_SetConfig+0x30>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	4a2c      	ldr	r2, [pc, #176]	@ (8007dd8 <TIM_Base_SetConfig+0xd4>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d003      	beq.n	8007d34 <TIM_Base_SetConfig+0x30>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4a2b      	ldr	r2, [pc, #172]	@ (8007ddc <TIM_Base_SetConfig+0xd8>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d108      	bne.n	8007d46 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	68fa      	ldr	r2, [r7, #12]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	4a22      	ldr	r2, [pc, #136]	@ (8007dd4 <TIM_Base_SetConfig+0xd0>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d00b      	beq.n	8007d66 <TIM_Base_SetConfig+0x62>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d54:	d007      	beq.n	8007d66 <TIM_Base_SetConfig+0x62>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	4a1f      	ldr	r2, [pc, #124]	@ (8007dd8 <TIM_Base_SetConfig+0xd4>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d003      	beq.n	8007d66 <TIM_Base_SetConfig+0x62>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	4a1e      	ldr	r2, [pc, #120]	@ (8007ddc <TIM_Base_SetConfig+0xd8>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d108      	bne.n	8007d78 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	68db      	ldr	r3, [r3, #12]
 8007d72:	68fa      	ldr	r2, [r7, #12]
 8007d74:	4313      	orrs	r3, r2
 8007d76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	695b      	ldr	r3, [r3, #20]
 8007d82:	4313      	orrs	r3, r2
 8007d84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	68fa      	ldr	r2, [r7, #12]
 8007d8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	689a      	ldr	r2, [r3, #8]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	4a0d      	ldr	r2, [pc, #52]	@ (8007dd4 <TIM_Base_SetConfig+0xd0>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d103      	bne.n	8007dac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	691a      	ldr	r2, [r3, #16]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2201      	movs	r2, #1
 8007db0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	691b      	ldr	r3, [r3, #16]
 8007db6:	f003 0301 	and.w	r3, r3, #1
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d005      	beq.n	8007dca <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	691b      	ldr	r3, [r3, #16]
 8007dc2:	f023 0201 	bic.w	r2, r3, #1
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	611a      	str	r2, [r3, #16]
  }
}
 8007dca:	bf00      	nop
 8007dcc:	3714      	adds	r7, #20
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bc80      	pop	{r7}
 8007dd2:	4770      	bx	lr
 8007dd4:	40012c00 	.word	0x40012c00
 8007dd8:	40000400 	.word	0x40000400
 8007ddc:	40000800 	.word	0x40000800

08007de0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b087      	sub	sp, #28
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6a1b      	ldr	r3, [r3, #32]
 8007dee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6a1b      	ldr	r3, [r3, #32]
 8007df4:	f023 0201 	bic.w	r2, r3, #1
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	699b      	ldr	r3, [r3, #24]
 8007e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f023 0303 	bic.w	r3, r3, #3
 8007e16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	68fa      	ldr	r2, [r7, #12]
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	f023 0302 	bic.w	r3, r3, #2
 8007e28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	697a      	ldr	r2, [r7, #20]
 8007e30:	4313      	orrs	r3, r2
 8007e32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4a1c      	ldr	r2, [pc, #112]	@ (8007ea8 <TIM_OC1_SetConfig+0xc8>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d10c      	bne.n	8007e56 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	f023 0308 	bic.w	r3, r3, #8
 8007e42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	697a      	ldr	r2, [r7, #20]
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	f023 0304 	bic.w	r3, r3, #4
 8007e54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	4a13      	ldr	r2, [pc, #76]	@ (8007ea8 <TIM_OC1_SetConfig+0xc8>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d111      	bne.n	8007e82 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007e6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	695b      	ldr	r3, [r3, #20]
 8007e72:	693a      	ldr	r2, [r7, #16]
 8007e74:	4313      	orrs	r3, r2
 8007e76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	699b      	ldr	r3, [r3, #24]
 8007e7c:	693a      	ldr	r2, [r7, #16]
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	693a      	ldr	r2, [r7, #16]
 8007e86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	68fa      	ldr	r2, [r7, #12]
 8007e8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	685a      	ldr	r2, [r3, #4]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	697a      	ldr	r2, [r7, #20]
 8007e9a:	621a      	str	r2, [r3, #32]
}
 8007e9c:	bf00      	nop
 8007e9e:	371c      	adds	r7, #28
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bc80      	pop	{r7}
 8007ea4:	4770      	bx	lr
 8007ea6:	bf00      	nop
 8007ea8:	40012c00 	.word	0x40012c00

08007eac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b087      	sub	sp, #28
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6a1b      	ldr	r3, [r3, #32]
 8007eba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6a1b      	ldr	r3, [r3, #32]
 8007ec0:	f023 0210 	bic.w	r2, r3, #16
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	699b      	ldr	r3, [r3, #24]
 8007ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007eda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ee2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	021b      	lsls	r3, r3, #8
 8007eea:	68fa      	ldr	r2, [r7, #12]
 8007eec:	4313      	orrs	r3, r2
 8007eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	f023 0320 	bic.w	r3, r3, #32
 8007ef6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	011b      	lsls	r3, r3, #4
 8007efe:	697a      	ldr	r2, [r7, #20]
 8007f00:	4313      	orrs	r3, r2
 8007f02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	4a1d      	ldr	r2, [pc, #116]	@ (8007f7c <TIM_OC2_SetConfig+0xd0>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d10d      	bne.n	8007f28 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	011b      	lsls	r3, r3, #4
 8007f1a:	697a      	ldr	r2, [r7, #20]
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f26:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	4a14      	ldr	r2, [pc, #80]	@ (8007f7c <TIM_OC2_SetConfig+0xd0>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d113      	bne.n	8007f58 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007f36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007f3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	695b      	ldr	r3, [r3, #20]
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	693a      	ldr	r2, [r7, #16]
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	699b      	ldr	r3, [r3, #24]
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	693a      	ldr	r2, [r7, #16]
 8007f54:	4313      	orrs	r3, r2
 8007f56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	693a      	ldr	r2, [r7, #16]
 8007f5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	68fa      	ldr	r2, [r7, #12]
 8007f62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	685a      	ldr	r2, [r3, #4]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	697a      	ldr	r2, [r7, #20]
 8007f70:	621a      	str	r2, [r3, #32]
}
 8007f72:	bf00      	nop
 8007f74:	371c      	adds	r7, #28
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bc80      	pop	{r7}
 8007f7a:	4770      	bx	lr
 8007f7c:	40012c00 	.word	0x40012c00

08007f80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b087      	sub	sp, #28
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a1b      	ldr	r3, [r3, #32]
 8007f8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6a1b      	ldr	r3, [r3, #32]
 8007f94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	69db      	ldr	r3, [r3, #28]
 8007fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f023 0303 	bic.w	r3, r3, #3
 8007fb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	68fa      	ldr	r2, [r7, #12]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007fc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	021b      	lsls	r3, r3, #8
 8007fd0:	697a      	ldr	r2, [r7, #20]
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4a1d      	ldr	r2, [pc, #116]	@ (8008050 <TIM_OC3_SetConfig+0xd0>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d10d      	bne.n	8007ffa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007fe4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	68db      	ldr	r3, [r3, #12]
 8007fea:	021b      	lsls	r3, r3, #8
 8007fec:	697a      	ldr	r2, [r7, #20]
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007ff8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4a14      	ldr	r2, [pc, #80]	@ (8008050 <TIM_OC3_SetConfig+0xd0>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d113      	bne.n	800802a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008008:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008010:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	695b      	ldr	r3, [r3, #20]
 8008016:	011b      	lsls	r3, r3, #4
 8008018:	693a      	ldr	r2, [r7, #16]
 800801a:	4313      	orrs	r3, r2
 800801c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	699b      	ldr	r3, [r3, #24]
 8008022:	011b      	lsls	r3, r3, #4
 8008024:	693a      	ldr	r2, [r7, #16]
 8008026:	4313      	orrs	r3, r2
 8008028:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	693a      	ldr	r2, [r7, #16]
 800802e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	68fa      	ldr	r2, [r7, #12]
 8008034:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	685a      	ldr	r2, [r3, #4]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	697a      	ldr	r2, [r7, #20]
 8008042:	621a      	str	r2, [r3, #32]
}
 8008044:	bf00      	nop
 8008046:	371c      	adds	r7, #28
 8008048:	46bd      	mov	sp, r7
 800804a:	bc80      	pop	{r7}
 800804c:	4770      	bx	lr
 800804e:	bf00      	nop
 8008050:	40012c00 	.word	0x40012c00

08008054 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008054:	b480      	push	{r7}
 8008056:	b087      	sub	sp, #28
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6a1b      	ldr	r3, [r3, #32]
 8008062:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6a1b      	ldr	r3, [r3, #32]
 8008068:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	69db      	ldr	r3, [r3, #28]
 800807a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800808a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	021b      	lsls	r3, r3, #8
 8008092:	68fa      	ldr	r2, [r7, #12]
 8008094:	4313      	orrs	r3, r2
 8008096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800809e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	031b      	lsls	r3, r3, #12
 80080a6:	693a      	ldr	r2, [r7, #16]
 80080a8:	4313      	orrs	r3, r2
 80080aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	4a0f      	ldr	r2, [pc, #60]	@ (80080ec <TIM_OC4_SetConfig+0x98>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d109      	bne.n	80080c8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80080ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	695b      	ldr	r3, [r3, #20]
 80080c0:	019b      	lsls	r3, r3, #6
 80080c2:	697a      	ldr	r2, [r7, #20]
 80080c4:	4313      	orrs	r3, r2
 80080c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	697a      	ldr	r2, [r7, #20]
 80080cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	68fa      	ldr	r2, [r7, #12]
 80080d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	685a      	ldr	r2, [r3, #4]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	693a      	ldr	r2, [r7, #16]
 80080e0:	621a      	str	r2, [r3, #32]
}
 80080e2:	bf00      	nop
 80080e4:	371c      	adds	r7, #28
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bc80      	pop	{r7}
 80080ea:	4770      	bx	lr
 80080ec:	40012c00 	.word	0x40012c00

080080f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b087      	sub	sp, #28
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	6a1b      	ldr	r3, [r3, #32]
 8008100:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	6a1b      	ldr	r3, [r3, #32]
 8008106:	f023 0201 	bic.w	r2, r3, #1
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	699b      	ldr	r3, [r3, #24]
 8008112:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800811a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	011b      	lsls	r3, r3, #4
 8008120:	693a      	ldr	r2, [r7, #16]
 8008122:	4313      	orrs	r3, r2
 8008124:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	f023 030a 	bic.w	r3, r3, #10
 800812c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800812e:	697a      	ldr	r2, [r7, #20]
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	4313      	orrs	r3, r2
 8008134:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	693a      	ldr	r2, [r7, #16]
 800813a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	697a      	ldr	r2, [r7, #20]
 8008140:	621a      	str	r2, [r3, #32]
}
 8008142:	bf00      	nop
 8008144:	371c      	adds	r7, #28
 8008146:	46bd      	mov	sp, r7
 8008148:	bc80      	pop	{r7}
 800814a:	4770      	bx	lr

0800814c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800814c:	b480      	push	{r7}
 800814e:	b087      	sub	sp, #28
 8008150:	af00      	add	r7, sp, #0
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	6a1b      	ldr	r3, [r3, #32]
 800815c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	6a1b      	ldr	r3, [r3, #32]
 8008162:	f023 0210 	bic.w	r2, r3, #16
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	699b      	ldr	r3, [r3, #24]
 800816e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008176:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	031b      	lsls	r3, r3, #12
 800817c:	693a      	ldr	r2, [r7, #16]
 800817e:	4313      	orrs	r3, r2
 8008180:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008188:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	011b      	lsls	r3, r3, #4
 800818e:	697a      	ldr	r2, [r7, #20]
 8008190:	4313      	orrs	r3, r2
 8008192:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	693a      	ldr	r2, [r7, #16]
 8008198:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	697a      	ldr	r2, [r7, #20]
 800819e:	621a      	str	r2, [r3, #32]
}
 80081a0:	bf00      	nop
 80081a2:	371c      	adds	r7, #28
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bc80      	pop	{r7}
 80081a8:	4770      	bx	lr

080081aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80081aa:	b480      	push	{r7}
 80081ac:	b085      	sub	sp, #20
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
 80081b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80081c2:	683a      	ldr	r2, [r7, #0]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	4313      	orrs	r3, r2
 80081c8:	f043 0307 	orr.w	r3, r3, #7
 80081cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	68fa      	ldr	r2, [r7, #12]
 80081d2:	609a      	str	r2, [r3, #8]
}
 80081d4:	bf00      	nop
 80081d6:	3714      	adds	r7, #20
 80081d8:	46bd      	mov	sp, r7
 80081da:	bc80      	pop	{r7}
 80081dc:	4770      	bx	lr

080081de <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80081de:	b480      	push	{r7}
 80081e0:	b087      	sub	sp, #28
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	60f8      	str	r0, [r7, #12]
 80081e6:	60b9      	str	r1, [r7, #8]
 80081e8:	607a      	str	r2, [r7, #4]
 80081ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80081f8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	021a      	lsls	r2, r3, #8
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	431a      	orrs	r2, r3
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	4313      	orrs	r3, r2
 8008206:	697a      	ldr	r2, [r7, #20]
 8008208:	4313      	orrs	r3, r2
 800820a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	697a      	ldr	r2, [r7, #20]
 8008210:	609a      	str	r2, [r3, #8]
}
 8008212:	bf00      	nop
 8008214:	371c      	adds	r7, #28
 8008216:	46bd      	mov	sp, r7
 8008218:	bc80      	pop	{r7}
 800821a:	4770      	bx	lr

0800821c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800821c:	b480      	push	{r7}
 800821e:	b087      	sub	sp, #28
 8008220:	af00      	add	r7, sp, #0
 8008222:	60f8      	str	r0, [r7, #12]
 8008224:	60b9      	str	r1, [r7, #8]
 8008226:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	f003 031f 	and.w	r3, r3, #31
 800822e:	2201      	movs	r2, #1
 8008230:	fa02 f303 	lsl.w	r3, r2, r3
 8008234:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	6a1a      	ldr	r2, [r3, #32]
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	43db      	mvns	r3, r3
 800823e:	401a      	ands	r2, r3
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	6a1a      	ldr	r2, [r3, #32]
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	f003 031f 	and.w	r3, r3, #31
 800824e:	6879      	ldr	r1, [r7, #4]
 8008250:	fa01 f303 	lsl.w	r3, r1, r3
 8008254:	431a      	orrs	r2, r3
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	621a      	str	r2, [r3, #32]
}
 800825a:	bf00      	nop
 800825c:	371c      	adds	r7, #28
 800825e:	46bd      	mov	sp, r7
 8008260:	bc80      	pop	{r7}
 8008262:	4770      	bx	lr

08008264 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008264:	b480      	push	{r7}
 8008266:	b085      	sub	sp, #20
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008274:	2b01      	cmp	r3, #1
 8008276:	d101      	bne.n	800827c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008278:	2302      	movs	r3, #2
 800827a:	e046      	b.n	800830a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2201      	movs	r2, #1
 8008280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2202      	movs	r2, #2
 8008288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	4313      	orrs	r3, r2
 80082ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	68fa      	ldr	r2, [r7, #12]
 80082b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a16      	ldr	r2, [pc, #88]	@ (8008314 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d00e      	beq.n	80082de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082c8:	d009      	beq.n	80082de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a12      	ldr	r2, [pc, #72]	@ (8008318 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d004      	beq.n	80082de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a10      	ldr	r2, [pc, #64]	@ (800831c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d10c      	bne.n	80082f8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80082e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	68ba      	ldr	r2, [r7, #8]
 80082ec:	4313      	orrs	r3, r2
 80082ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	68ba      	ldr	r2, [r7, #8]
 80082f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2201      	movs	r2, #1
 80082fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2200      	movs	r2, #0
 8008304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008308:	2300      	movs	r3, #0
}
 800830a:	4618      	mov	r0, r3
 800830c:	3714      	adds	r7, #20
 800830e:	46bd      	mov	sp, r7
 8008310:	bc80      	pop	{r7}
 8008312:	4770      	bx	lr
 8008314:	40012c00 	.word	0x40012c00
 8008318:	40000400 	.word	0x40000400
 800831c:	40000800 	.word	0x40000800

08008320 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008320:	b480      	push	{r7}
 8008322:	b083      	sub	sp, #12
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008328:	bf00      	nop
 800832a:	370c      	adds	r7, #12
 800832c:	46bd      	mov	sp, r7
 800832e:	bc80      	pop	{r7}
 8008330:	4770      	bx	lr

08008332 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008332:	b480      	push	{r7}
 8008334:	b083      	sub	sp, #12
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800833a:	bf00      	nop
 800833c:	370c      	adds	r7, #12
 800833e:	46bd      	mov	sp, r7
 8008340:	bc80      	pop	{r7}
 8008342:	4770      	bx	lr

08008344 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b082      	sub	sp, #8
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d101      	bne.n	8008356 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	e042      	b.n	80083dc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800835c:	b2db      	uxtb	r3, r3
 800835e:	2b00      	cmp	r3, #0
 8008360:	d106      	bne.n	8008370 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f7fb fd60 	bl	8003e30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2224      	movs	r2, #36	@ 0x24
 8008374:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	68da      	ldr	r2, [r3, #12]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008386:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 fe4f 	bl	800902c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	691a      	ldr	r2, [r3, #16]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800839c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	695a      	ldr	r2, [r3, #20]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80083ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	68da      	ldr	r2, [r3, #12]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80083bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2200      	movs	r2, #0
 80083c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2220      	movs	r2, #32
 80083c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2220      	movs	r2, #32
 80083d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2200      	movs	r2, #0
 80083d8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80083da:	2300      	movs	r3, #0
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3708      	adds	r7, #8
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b08a      	sub	sp, #40	@ 0x28
 80083e8:	af02      	add	r7, sp, #8
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	603b      	str	r3, [r7, #0]
 80083f0:	4613      	mov	r3, r2
 80083f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80083f4:	2300      	movs	r3, #0
 80083f6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	2b20      	cmp	r3, #32
 8008402:	d175      	bne.n	80084f0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d002      	beq.n	8008410 <HAL_UART_Transmit+0x2c>
 800840a:	88fb      	ldrh	r3, [r7, #6]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d101      	bne.n	8008414 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008410:	2301      	movs	r3, #1
 8008412:	e06e      	b.n	80084f2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2200      	movs	r2, #0
 8008418:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2221      	movs	r2, #33	@ 0x21
 800841e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008422:	f7fb fe93 	bl	800414c <HAL_GetTick>
 8008426:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	88fa      	ldrh	r2, [r7, #6]
 800842c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	88fa      	ldrh	r2, [r7, #6]
 8008432:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	689b      	ldr	r3, [r3, #8]
 8008438:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800843c:	d108      	bne.n	8008450 <HAL_UART_Transmit+0x6c>
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	691b      	ldr	r3, [r3, #16]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d104      	bne.n	8008450 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008446:	2300      	movs	r3, #0
 8008448:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	61bb      	str	r3, [r7, #24]
 800844e:	e003      	b.n	8008458 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008454:	2300      	movs	r3, #0
 8008456:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008458:	e02e      	b.n	80084b8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	9300      	str	r3, [sp, #0]
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	2200      	movs	r2, #0
 8008462:	2180      	movs	r1, #128	@ 0x80
 8008464:	68f8      	ldr	r0, [r7, #12]
 8008466:	f000 fbb4 	bl	8008bd2 <UART_WaitOnFlagUntilTimeout>
 800846a:	4603      	mov	r3, r0
 800846c:	2b00      	cmp	r3, #0
 800846e:	d005      	beq.n	800847c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2220      	movs	r2, #32
 8008474:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008478:	2303      	movs	r3, #3
 800847a:	e03a      	b.n	80084f2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800847c:	69fb      	ldr	r3, [r7, #28]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d10b      	bne.n	800849a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008482:	69bb      	ldr	r3, [r7, #24]
 8008484:	881b      	ldrh	r3, [r3, #0]
 8008486:	461a      	mov	r2, r3
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008490:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008492:	69bb      	ldr	r3, [r7, #24]
 8008494:	3302      	adds	r3, #2
 8008496:	61bb      	str	r3, [r7, #24]
 8008498:	e007      	b.n	80084aa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800849a:	69fb      	ldr	r3, [r7, #28]
 800849c:	781a      	ldrb	r2, [r3, #0]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80084a4:	69fb      	ldr	r3, [r7, #28]
 80084a6:	3301      	adds	r3, #1
 80084a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	3b01      	subs	r3, #1
 80084b2:	b29a      	uxth	r2, r3
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80084bc:	b29b      	uxth	r3, r3
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d1cb      	bne.n	800845a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	9300      	str	r3, [sp, #0]
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	2200      	movs	r2, #0
 80084ca:	2140      	movs	r1, #64	@ 0x40
 80084cc:	68f8      	ldr	r0, [r7, #12]
 80084ce:	f000 fb80 	bl	8008bd2 <UART_WaitOnFlagUntilTimeout>
 80084d2:	4603      	mov	r3, r0
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d005      	beq.n	80084e4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2220      	movs	r2, #32
 80084dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80084e0:	2303      	movs	r3, #3
 80084e2:	e006      	b.n	80084f2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2220      	movs	r2, #32
 80084e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80084ec:	2300      	movs	r3, #0
 80084ee:	e000      	b.n	80084f2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80084f0:	2302      	movs	r3, #2
  }
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3720      	adds	r7, #32
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}

080084fa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084fa:	b580      	push	{r7, lr}
 80084fc:	b08a      	sub	sp, #40	@ 0x28
 80084fe:	af02      	add	r7, sp, #8
 8008500:	60f8      	str	r0, [r7, #12]
 8008502:	60b9      	str	r1, [r7, #8]
 8008504:	603b      	str	r3, [r7, #0]
 8008506:	4613      	mov	r3, r2
 8008508:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800850a:	2300      	movs	r3, #0
 800850c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008514:	b2db      	uxtb	r3, r3
 8008516:	2b20      	cmp	r3, #32
 8008518:	f040 8081 	bne.w	800861e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d002      	beq.n	8008528 <HAL_UART_Receive+0x2e>
 8008522:	88fb      	ldrh	r3, [r7, #6]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d101      	bne.n	800852c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008528:	2301      	movs	r3, #1
 800852a:	e079      	b.n	8008620 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2200      	movs	r2, #0
 8008530:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2222      	movs	r2, #34	@ 0x22
 8008536:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2200      	movs	r2, #0
 800853e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008540:	f7fb fe04 	bl	800414c <HAL_GetTick>
 8008544:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	88fa      	ldrh	r2, [r7, #6]
 800854a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	88fa      	ldrh	r2, [r7, #6]
 8008550:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	689b      	ldr	r3, [r3, #8]
 8008556:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800855a:	d108      	bne.n	800856e <HAL_UART_Receive+0x74>
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	691b      	ldr	r3, [r3, #16]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d104      	bne.n	800856e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8008564:	2300      	movs	r3, #0
 8008566:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	61bb      	str	r3, [r7, #24]
 800856c:	e003      	b.n	8008576 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008572:	2300      	movs	r3, #0
 8008574:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008576:	e047      	b.n	8008608 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	9300      	str	r3, [sp, #0]
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	2200      	movs	r2, #0
 8008580:	2120      	movs	r1, #32
 8008582:	68f8      	ldr	r0, [r7, #12]
 8008584:	f000 fb25 	bl	8008bd2 <UART_WaitOnFlagUntilTimeout>
 8008588:	4603      	mov	r3, r0
 800858a:	2b00      	cmp	r3, #0
 800858c:	d005      	beq.n	800859a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2220      	movs	r2, #32
 8008592:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8008596:	2303      	movs	r3, #3
 8008598:	e042      	b.n	8008620 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800859a:	69fb      	ldr	r3, [r7, #28]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d10c      	bne.n	80085ba <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085ac:	b29a      	uxth	r2, r3
 80085ae:	69bb      	ldr	r3, [r7, #24]
 80085b0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80085b2:	69bb      	ldr	r3, [r7, #24]
 80085b4:	3302      	adds	r3, #2
 80085b6:	61bb      	str	r3, [r7, #24]
 80085b8:	e01f      	b.n	80085fa <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085c2:	d007      	beq.n	80085d4 <HAL_UART_Receive+0xda>
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	689b      	ldr	r3, [r3, #8]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d10a      	bne.n	80085e2 <HAL_UART_Receive+0xe8>
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	691b      	ldr	r3, [r3, #16]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d106      	bne.n	80085e2 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	b2da      	uxtb	r2, r3
 80085dc:	69fb      	ldr	r3, [r7, #28]
 80085de:	701a      	strb	r2, [r3, #0]
 80085e0:	e008      	b.n	80085f4 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085ee:	b2da      	uxtb	r2, r3
 80085f0:	69fb      	ldr	r3, [r7, #28]
 80085f2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80085f4:	69fb      	ldr	r3, [r7, #28]
 80085f6:	3301      	adds	r3, #1
 80085f8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80085fe:	b29b      	uxth	r3, r3
 8008600:	3b01      	subs	r3, #1
 8008602:	b29a      	uxth	r2, r3
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800860c:	b29b      	uxth	r3, r3
 800860e:	2b00      	cmp	r3, #0
 8008610:	d1b2      	bne.n	8008578 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2220      	movs	r2, #32
 8008616:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800861a:	2300      	movs	r3, #0
 800861c:	e000      	b.n	8008620 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800861e:	2302      	movs	r3, #2
  }
}
 8008620:	4618      	mov	r0, r3
 8008622:	3720      	adds	r7, #32
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	4613      	mov	r3, r2
 8008634:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800863c:	b2db      	uxtb	r3, r3
 800863e:	2b20      	cmp	r3, #32
 8008640:	d112      	bne.n	8008668 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d002      	beq.n	800864e <HAL_UART_Receive_IT+0x26>
 8008648:	88fb      	ldrh	r3, [r7, #6]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d101      	bne.n	8008652 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800864e:	2301      	movs	r3, #1
 8008650:	e00b      	b.n	800866a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2200      	movs	r2, #0
 8008656:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008658:	88fb      	ldrh	r3, [r7, #6]
 800865a:	461a      	mov	r2, r3
 800865c:	68b9      	ldr	r1, [r7, #8]
 800865e:	68f8      	ldr	r0, [r7, #12]
 8008660:	f000 fb10 	bl	8008c84 <UART_Start_Receive_IT>
 8008664:	4603      	mov	r3, r0
 8008666:	e000      	b.n	800866a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008668:	2302      	movs	r3, #2
  }
}
 800866a:	4618      	mov	r0, r3
 800866c:	3710      	adds	r7, #16
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
	...

08008674 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b0ba      	sub	sp, #232	@ 0xe8
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	68db      	ldr	r3, [r3, #12]
 800868c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	695b      	ldr	r3, [r3, #20]
 8008696:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800869a:	2300      	movs	r3, #0
 800869c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80086a0:	2300      	movs	r3, #0
 80086a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80086a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086aa:	f003 030f 	and.w	r3, r3, #15
 80086ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80086b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d10f      	bne.n	80086da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80086ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086be:	f003 0320 	and.w	r3, r3, #32
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d009      	beq.n	80086da <HAL_UART_IRQHandler+0x66>
 80086c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086ca:	f003 0320 	and.w	r3, r3, #32
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d003      	beq.n	80086da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 fbec 	bl	8008eb0 <UART_Receive_IT>
      return;
 80086d8:	e25b      	b.n	8008b92 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80086da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80086de:	2b00      	cmp	r3, #0
 80086e0:	f000 80de 	beq.w	80088a0 <HAL_UART_IRQHandler+0x22c>
 80086e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086e8:	f003 0301 	and.w	r3, r3, #1
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d106      	bne.n	80086fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80086f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086f4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	f000 80d1 	beq.w	80088a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80086fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008702:	f003 0301 	and.w	r3, r3, #1
 8008706:	2b00      	cmp	r3, #0
 8008708:	d00b      	beq.n	8008722 <HAL_UART_IRQHandler+0xae>
 800870a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800870e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008712:	2b00      	cmp	r3, #0
 8008714:	d005      	beq.n	8008722 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800871a:	f043 0201 	orr.w	r2, r3, #1
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008726:	f003 0304 	and.w	r3, r3, #4
 800872a:	2b00      	cmp	r3, #0
 800872c:	d00b      	beq.n	8008746 <HAL_UART_IRQHandler+0xd2>
 800872e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008732:	f003 0301 	and.w	r3, r3, #1
 8008736:	2b00      	cmp	r3, #0
 8008738:	d005      	beq.n	8008746 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800873e:	f043 0202 	orr.w	r2, r3, #2
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800874a:	f003 0302 	and.w	r3, r3, #2
 800874e:	2b00      	cmp	r3, #0
 8008750:	d00b      	beq.n	800876a <HAL_UART_IRQHandler+0xf6>
 8008752:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008756:	f003 0301 	and.w	r3, r3, #1
 800875a:	2b00      	cmp	r3, #0
 800875c:	d005      	beq.n	800876a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008762:	f043 0204 	orr.w	r2, r3, #4
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800876a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800876e:	f003 0308 	and.w	r3, r3, #8
 8008772:	2b00      	cmp	r3, #0
 8008774:	d011      	beq.n	800879a <HAL_UART_IRQHandler+0x126>
 8008776:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800877a:	f003 0320 	and.w	r3, r3, #32
 800877e:	2b00      	cmp	r3, #0
 8008780:	d105      	bne.n	800878e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008782:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008786:	f003 0301 	and.w	r3, r3, #1
 800878a:	2b00      	cmp	r3, #0
 800878c:	d005      	beq.n	800879a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008792:	f043 0208 	orr.w	r2, r3, #8
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800879e:	2b00      	cmp	r3, #0
 80087a0:	f000 81f2 	beq.w	8008b88 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80087a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087a8:	f003 0320 	and.w	r3, r3, #32
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d008      	beq.n	80087c2 <HAL_UART_IRQHandler+0x14e>
 80087b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087b4:	f003 0320 	and.w	r3, r3, #32
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d002      	beq.n	80087c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f000 fb77 	bl	8008eb0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	695b      	ldr	r3, [r3, #20]
 80087c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	bf14      	ite	ne
 80087d0:	2301      	movne	r3, #1
 80087d2:	2300      	moveq	r3, #0
 80087d4:	b2db      	uxtb	r3, r3
 80087d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087de:	f003 0308 	and.w	r3, r3, #8
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d103      	bne.n	80087ee <HAL_UART_IRQHandler+0x17a>
 80087e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d04f      	beq.n	800888e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 fa81 	bl	8008cf6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	695b      	ldr	r3, [r3, #20]
 80087fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d041      	beq.n	8008886 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	3314      	adds	r3, #20
 8008808:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800880c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008810:	e853 3f00 	ldrex	r3, [r3]
 8008814:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008818:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800881c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008820:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	3314      	adds	r3, #20
 800882a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800882e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008832:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008836:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800883a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800883e:	e841 2300 	strex	r3, r2, [r1]
 8008842:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008846:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800884a:	2b00      	cmp	r3, #0
 800884c:	d1d9      	bne.n	8008802 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008852:	2b00      	cmp	r3, #0
 8008854:	d013      	beq.n	800887e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800885a:	4a7e      	ldr	r2, [pc, #504]	@ (8008a54 <HAL_UART_IRQHandler+0x3e0>)
 800885c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008862:	4618      	mov	r0, r3
 8008864:	f7fc fb60 	bl	8004f28 <HAL_DMA_Abort_IT>
 8008868:	4603      	mov	r3, r0
 800886a:	2b00      	cmp	r3, #0
 800886c:	d016      	beq.n	800889c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008872:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008878:	4610      	mov	r0, r2
 800887a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800887c:	e00e      	b.n	800889c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 f993 	bl	8008baa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008884:	e00a      	b.n	800889c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f000 f98f 	bl	8008baa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800888c:	e006      	b.n	800889c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 f98b 	bl	8008baa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2200      	movs	r2, #0
 8008898:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800889a:	e175      	b.n	8008b88 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800889c:	bf00      	nop
    return;
 800889e:	e173      	b.n	8008b88 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	f040 814f 	bne.w	8008b48 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80088aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088ae:	f003 0310 	and.w	r3, r3, #16
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	f000 8148 	beq.w	8008b48 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80088b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088bc:	f003 0310 	and.w	r3, r3, #16
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	f000 8141 	beq.w	8008b48 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80088c6:	2300      	movs	r3, #0
 80088c8:	60bb      	str	r3, [r7, #8]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	60bb      	str	r3, [r7, #8]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	60bb      	str	r3, [r7, #8]
 80088da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	695b      	ldr	r3, [r3, #20]
 80088e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	f000 80b6 	beq.w	8008a58 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80088f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	f000 8145 	beq.w	8008b8c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008906:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800890a:	429a      	cmp	r2, r3
 800890c:	f080 813e 	bcs.w	8008b8c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008916:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800891c:	699b      	ldr	r3, [r3, #24]
 800891e:	2b20      	cmp	r3, #32
 8008920:	f000 8088 	beq.w	8008a34 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	330c      	adds	r3, #12
 800892a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800892e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008932:	e853 3f00 	ldrex	r3, [r3]
 8008936:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800893a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800893e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008942:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	330c      	adds	r3, #12
 800894c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008950:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008954:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008958:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800895c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008960:	e841 2300 	strex	r3, r2, [r1]
 8008964:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008968:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800896c:	2b00      	cmp	r3, #0
 800896e:	d1d9      	bne.n	8008924 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	3314      	adds	r3, #20
 8008976:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008978:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800897a:	e853 3f00 	ldrex	r3, [r3]
 800897e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008980:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008982:	f023 0301 	bic.w	r3, r3, #1
 8008986:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	3314      	adds	r3, #20
 8008990:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008994:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008998:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800899a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800899c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80089a0:	e841 2300 	strex	r3, r2, [r1]
 80089a4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80089a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d1e1      	bne.n	8008970 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	3314      	adds	r3, #20
 80089b2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80089b6:	e853 3f00 	ldrex	r3, [r3]
 80089ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80089bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	3314      	adds	r3, #20
 80089cc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80089d0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80089d2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80089d6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80089d8:	e841 2300 	strex	r3, r2, [r1]
 80089dc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80089de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d1e3      	bne.n	80089ac <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2220      	movs	r2, #32
 80089e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2200      	movs	r2, #0
 80089f0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	330c      	adds	r3, #12
 80089f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089fc:	e853 3f00 	ldrex	r3, [r3]
 8008a00:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008a02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a04:	f023 0310 	bic.w	r3, r3, #16
 8008a08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	330c      	adds	r3, #12
 8008a12:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008a16:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008a18:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a1a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008a1c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008a1e:	e841 2300 	strex	r3, r2, [r1]
 8008a22:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008a24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d1e3      	bne.n	80089f2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7fc fa3e 	bl	8004eb0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2202      	movs	r2, #2
 8008a38:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	1ad3      	subs	r3, r2, r3
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	4619      	mov	r1, r3
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 f8b6 	bl	8008bbc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008a50:	e09c      	b.n	8008b8c <HAL_UART_IRQHandler+0x518>
 8008a52:	bf00      	nop
 8008a54:	08008dbb 	.word	0x08008dbb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	1ad3      	subs	r3, r2, r3
 8008a64:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	f000 808e 	beq.w	8008b90 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008a74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	f000 8089 	beq.w	8008b90 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	330c      	adds	r3, #12
 8008a84:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a88:	e853 3f00 	ldrex	r3, [r3]
 8008a8c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008a8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a94:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	330c      	adds	r3, #12
 8008a9e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008aa2:	647a      	str	r2, [r7, #68]	@ 0x44
 8008aa4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008aa8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008aaa:	e841 2300 	strex	r3, r2, [r1]
 8008aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008ab0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d1e3      	bne.n	8008a7e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	3314      	adds	r3, #20
 8008abc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ac0:	e853 3f00 	ldrex	r3, [r3]
 8008ac4:	623b      	str	r3, [r7, #32]
   return(result);
 8008ac6:	6a3b      	ldr	r3, [r7, #32]
 8008ac8:	f023 0301 	bic.w	r3, r3, #1
 8008acc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	3314      	adds	r3, #20
 8008ad6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008ada:	633a      	str	r2, [r7, #48]	@ 0x30
 8008adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ade:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ae0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ae2:	e841 2300 	strex	r3, r2, [r1]
 8008ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d1e3      	bne.n	8008ab6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2220      	movs	r2, #32
 8008af2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2200      	movs	r2, #0
 8008afa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	330c      	adds	r3, #12
 8008b02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	e853 3f00 	ldrex	r3, [r3]
 8008b0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f023 0310 	bic.w	r3, r3, #16
 8008b12:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	330c      	adds	r3, #12
 8008b1c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008b20:	61fa      	str	r2, [r7, #28]
 8008b22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b24:	69b9      	ldr	r1, [r7, #24]
 8008b26:	69fa      	ldr	r2, [r7, #28]
 8008b28:	e841 2300 	strex	r3, r2, [r1]
 8008b2c:	617b      	str	r3, [r7, #20]
   return(result);
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d1e3      	bne.n	8008afc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2202      	movs	r2, #2
 8008b38:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008b3a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008b3e:	4619      	mov	r1, r3
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f000 f83b 	bl	8008bbc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008b46:	e023      	b.n	8008b90 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d009      	beq.n	8008b68 <HAL_UART_IRQHandler+0x4f4>
 8008b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d003      	beq.n	8008b68 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 f93e 	bl	8008de2 <UART_Transmit_IT>
    return;
 8008b66:	e014      	b.n	8008b92 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008b68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d00e      	beq.n	8008b92 <HAL_UART_IRQHandler+0x51e>
 8008b74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d008      	beq.n	8008b92 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 f97d 	bl	8008e80 <UART_EndTransmit_IT>
    return;
 8008b86:	e004      	b.n	8008b92 <HAL_UART_IRQHandler+0x51e>
    return;
 8008b88:	bf00      	nop
 8008b8a:	e002      	b.n	8008b92 <HAL_UART_IRQHandler+0x51e>
      return;
 8008b8c:	bf00      	nop
 8008b8e:	e000      	b.n	8008b92 <HAL_UART_IRQHandler+0x51e>
      return;
 8008b90:	bf00      	nop
  }
}
 8008b92:	37e8      	adds	r7, #232	@ 0xe8
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b083      	sub	sp, #12
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008ba0:	bf00      	nop
 8008ba2:	370c      	adds	r7, #12
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bc80      	pop	{r7}
 8008ba8:	4770      	bx	lr

08008baa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008baa:	b480      	push	{r7}
 8008bac:	b083      	sub	sp, #12
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008bb2:	bf00      	nop
 8008bb4:	370c      	adds	r7, #12
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bc80      	pop	{r7}
 8008bba:	4770      	bx	lr

08008bbc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b083      	sub	sp, #12
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008bc8:	bf00      	nop
 8008bca:	370c      	adds	r7, #12
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bc80      	pop	{r7}
 8008bd0:	4770      	bx	lr

08008bd2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008bd2:	b580      	push	{r7, lr}
 8008bd4:	b086      	sub	sp, #24
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	60f8      	str	r0, [r7, #12]
 8008bda:	60b9      	str	r1, [r7, #8]
 8008bdc:	603b      	str	r3, [r7, #0]
 8008bde:	4613      	mov	r3, r2
 8008be0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008be2:	e03b      	b.n	8008c5c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008be4:	6a3b      	ldr	r3, [r7, #32]
 8008be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bea:	d037      	beq.n	8008c5c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bec:	f7fb faae 	bl	800414c <HAL_GetTick>
 8008bf0:	4602      	mov	r2, r0
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	1ad3      	subs	r3, r2, r3
 8008bf6:	6a3a      	ldr	r2, [r7, #32]
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d302      	bcc.n	8008c02 <UART_WaitOnFlagUntilTimeout+0x30>
 8008bfc:	6a3b      	ldr	r3, [r7, #32]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d101      	bne.n	8008c06 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008c02:	2303      	movs	r3, #3
 8008c04:	e03a      	b.n	8008c7c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	68db      	ldr	r3, [r3, #12]
 8008c0c:	f003 0304 	and.w	r3, r3, #4
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d023      	beq.n	8008c5c <UART_WaitOnFlagUntilTimeout+0x8a>
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	2b80      	cmp	r3, #128	@ 0x80
 8008c18:	d020      	beq.n	8008c5c <UART_WaitOnFlagUntilTimeout+0x8a>
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	2b40      	cmp	r3, #64	@ 0x40
 8008c1e:	d01d      	beq.n	8008c5c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f003 0308 	and.w	r3, r3, #8
 8008c2a:	2b08      	cmp	r3, #8
 8008c2c:	d116      	bne.n	8008c5c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008c2e:	2300      	movs	r3, #0
 8008c30:	617b      	str	r3, [r7, #20]
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	617b      	str	r3, [r7, #20]
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	617b      	str	r3, [r7, #20]
 8008c42:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008c44:	68f8      	ldr	r0, [r7, #12]
 8008c46:	f000 f856 	bl	8008cf6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2208      	movs	r2, #8
 8008c4e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2200      	movs	r2, #0
 8008c54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008c58:	2301      	movs	r3, #1
 8008c5a:	e00f      	b.n	8008c7c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	681a      	ldr	r2, [r3, #0]
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	4013      	ands	r3, r2
 8008c66:	68ba      	ldr	r2, [r7, #8]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	bf0c      	ite	eq
 8008c6c:	2301      	moveq	r3, #1
 8008c6e:	2300      	movne	r3, #0
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	461a      	mov	r2, r3
 8008c74:	79fb      	ldrb	r3, [r7, #7]
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d0b4      	beq.n	8008be4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c7a:	2300      	movs	r3, #0
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3718      	adds	r7, #24
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b085      	sub	sp, #20
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	60f8      	str	r0, [r7, #12]
 8008c8c:	60b9      	str	r1, [r7, #8]
 8008c8e:	4613      	mov	r3, r2
 8008c90:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	68ba      	ldr	r2, [r7, #8]
 8008c96:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	88fa      	ldrh	r2, [r7, #6]
 8008c9c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	88fa      	ldrh	r2, [r7, #6]
 8008ca2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2222      	movs	r2, #34	@ 0x22
 8008cae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	691b      	ldr	r3, [r3, #16]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d007      	beq.n	8008cca <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	68da      	ldr	r2, [r3, #12]
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008cc8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	695a      	ldr	r2, [r3, #20]
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f042 0201 	orr.w	r2, r2, #1
 8008cd8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	68da      	ldr	r2, [r3, #12]
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f042 0220 	orr.w	r2, r2, #32
 8008ce8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008cea:	2300      	movs	r3, #0
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3714      	adds	r7, #20
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bc80      	pop	{r7}
 8008cf4:	4770      	bx	lr

08008cf6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008cf6:	b480      	push	{r7}
 8008cf8:	b095      	sub	sp, #84	@ 0x54
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	330c      	adds	r3, #12
 8008d04:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d08:	e853 3f00 	ldrex	r3, [r3]
 8008d0c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	330c      	adds	r3, #12
 8008d1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008d1e:	643a      	str	r2, [r7, #64]	@ 0x40
 8008d20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d22:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008d24:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008d26:	e841 2300 	strex	r3, r2, [r1]
 8008d2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d1e5      	bne.n	8008cfe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	3314      	adds	r3, #20
 8008d38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d3a:	6a3b      	ldr	r3, [r7, #32]
 8008d3c:	e853 3f00 	ldrex	r3, [r3]
 8008d40:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d42:	69fb      	ldr	r3, [r7, #28]
 8008d44:	f023 0301 	bic.w	r3, r3, #1
 8008d48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	3314      	adds	r3, #20
 8008d50:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008d54:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d5a:	e841 2300 	strex	r3, r2, [r1]
 8008d5e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d1e5      	bne.n	8008d32 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d119      	bne.n	8008da2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	330c      	adds	r3, #12
 8008d74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	e853 3f00 	ldrex	r3, [r3]
 8008d7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	f023 0310 	bic.w	r3, r3, #16
 8008d84:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	330c      	adds	r3, #12
 8008d8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d8e:	61ba      	str	r2, [r7, #24]
 8008d90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d92:	6979      	ldr	r1, [r7, #20]
 8008d94:	69ba      	ldr	r2, [r7, #24]
 8008d96:	e841 2300 	strex	r3, r2, [r1]
 8008d9a:	613b      	str	r3, [r7, #16]
   return(result);
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d1e5      	bne.n	8008d6e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2220      	movs	r2, #32
 8008da6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2200      	movs	r2, #0
 8008dae:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008db0:	bf00      	nop
 8008db2:	3754      	adds	r7, #84	@ 0x54
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bc80      	pop	{r7}
 8008db8:	4770      	bx	lr

08008dba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008dba:	b580      	push	{r7, lr}
 8008dbc:	b084      	sub	sp, #16
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dc6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008dd4:	68f8      	ldr	r0, [r7, #12]
 8008dd6:	f7ff fee8 	bl	8008baa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008dda:	bf00      	nop
 8008ddc:	3710      	adds	r7, #16
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}

08008de2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008de2:	b480      	push	{r7}
 8008de4:	b085      	sub	sp, #20
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008df0:	b2db      	uxtb	r3, r3
 8008df2:	2b21      	cmp	r3, #33	@ 0x21
 8008df4:	d13e      	bne.n	8008e74 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	689b      	ldr	r3, [r3, #8]
 8008dfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008dfe:	d114      	bne.n	8008e2a <UART_Transmit_IT+0x48>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	691b      	ldr	r3, [r3, #16]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d110      	bne.n	8008e2a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6a1b      	ldr	r3, [r3, #32]
 8008e0c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	881b      	ldrh	r3, [r3, #0]
 8008e12:	461a      	mov	r2, r3
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e1c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6a1b      	ldr	r3, [r3, #32]
 8008e22:	1c9a      	adds	r2, r3, #2
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	621a      	str	r2, [r3, #32]
 8008e28:	e008      	b.n	8008e3c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6a1b      	ldr	r3, [r3, #32]
 8008e2e:	1c59      	adds	r1, r3, #1
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	6211      	str	r1, [r2, #32]
 8008e34:	781a      	ldrb	r2, [r3, #0]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008e40:	b29b      	uxth	r3, r3
 8008e42:	3b01      	subs	r3, #1
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	687a      	ldr	r2, [r7, #4]
 8008e48:	4619      	mov	r1, r3
 8008e4a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d10f      	bne.n	8008e70 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	68da      	ldr	r2, [r3, #12]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008e5e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	68da      	ldr	r2, [r3, #12]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e6e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008e70:	2300      	movs	r3, #0
 8008e72:	e000      	b.n	8008e76 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008e74:	2302      	movs	r3, #2
  }
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3714      	adds	r7, #20
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bc80      	pop	{r7}
 8008e7e:	4770      	bx	lr

08008e80 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	68da      	ldr	r2, [r3, #12]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008e96:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2220      	movs	r2, #32
 8008e9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f7ff fe79 	bl	8008b98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008ea6:	2300      	movs	r3, #0
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3708      	adds	r7, #8
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b08c      	sub	sp, #48	@ 0x30
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	2b22      	cmp	r3, #34	@ 0x22
 8008ec2:	f040 80ae 	bne.w	8009022 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	689b      	ldr	r3, [r3, #8]
 8008eca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ece:	d117      	bne.n	8008f00 <UART_Receive_IT+0x50>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	691b      	ldr	r3, [r3, #16]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d113      	bne.n	8008f00 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eee:	b29a      	uxth	r2, r3
 8008ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ef2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ef8:	1c9a      	adds	r2, r3, #2
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	629a      	str	r2, [r3, #40]	@ 0x28
 8008efe:	e026      	b.n	8008f4e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008f06:	2300      	movs	r3, #0
 8008f08:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	689b      	ldr	r3, [r3, #8]
 8008f0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f12:	d007      	beq.n	8008f24 <UART_Receive_IT+0x74>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d10a      	bne.n	8008f32 <UART_Receive_IT+0x82>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	691b      	ldr	r3, [r3, #16]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d106      	bne.n	8008f32 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	b2da      	uxtb	r2, r3
 8008f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f2e:	701a      	strb	r2, [r3, #0]
 8008f30:	e008      	b.n	8008f44 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	b2db      	uxtb	r3, r3
 8008f3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f3e:	b2da      	uxtb	r2, r3
 8008f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f42:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f48:	1c5a      	adds	r2, r3, #1
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008f52:	b29b      	uxth	r3, r3
 8008f54:	3b01      	subs	r3, #1
 8008f56:	b29b      	uxth	r3, r3
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	4619      	mov	r1, r3
 8008f5c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d15d      	bne.n	800901e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	68da      	ldr	r2, [r3, #12]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f022 0220 	bic.w	r2, r2, #32
 8008f70:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	68da      	ldr	r2, [r3, #12]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008f80:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	695a      	ldr	r2, [r3, #20]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f022 0201 	bic.w	r2, r2, #1
 8008f90:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2220      	movs	r2, #32
 8008f96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	d135      	bne.n	8009014 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2200      	movs	r2, #0
 8008fac:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	330c      	adds	r3, #12
 8008fb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	e853 3f00 	ldrex	r3, [r3]
 8008fbc:	613b      	str	r3, [r7, #16]
   return(result);
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	f023 0310 	bic.w	r3, r3, #16
 8008fc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	330c      	adds	r3, #12
 8008fcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fce:	623a      	str	r2, [r7, #32]
 8008fd0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd2:	69f9      	ldr	r1, [r7, #28]
 8008fd4:	6a3a      	ldr	r2, [r7, #32]
 8008fd6:	e841 2300 	strex	r3, r2, [r1]
 8008fda:	61bb      	str	r3, [r7, #24]
   return(result);
 8008fdc:	69bb      	ldr	r3, [r7, #24]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d1e5      	bne.n	8008fae <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f003 0310 	and.w	r3, r3, #16
 8008fec:	2b10      	cmp	r3, #16
 8008fee:	d10a      	bne.n	8009006 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	60fb      	str	r3, [r7, #12]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	60fb      	str	r3, [r7, #12]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	60fb      	str	r3, [r7, #12]
 8009004:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800900a:	4619      	mov	r1, r3
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f7ff fdd5 	bl	8008bbc <HAL_UARTEx_RxEventCallback>
 8009012:	e002      	b.n	800901a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f7f9 fda3 	bl	8002b60 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800901a:	2300      	movs	r3, #0
 800901c:	e002      	b.n	8009024 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800901e:	2300      	movs	r3, #0
 8009020:	e000      	b.n	8009024 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009022:	2302      	movs	r3, #2
  }
}
 8009024:	4618      	mov	r0, r3
 8009026:	3730      	adds	r7, #48	@ 0x30
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}

0800902c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b084      	sub	sp, #16
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	691b      	ldr	r3, [r3, #16]
 800903a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	68da      	ldr	r2, [r3, #12]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	430a      	orrs	r2, r1
 8009048:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	689a      	ldr	r2, [r3, #8]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	691b      	ldr	r3, [r3, #16]
 8009052:	431a      	orrs	r2, r3
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	695b      	ldr	r3, [r3, #20]
 8009058:	4313      	orrs	r3, r2
 800905a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	68db      	ldr	r3, [r3, #12]
 8009062:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8009066:	f023 030c 	bic.w	r3, r3, #12
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	6812      	ldr	r2, [r2, #0]
 800906e:	68b9      	ldr	r1, [r7, #8]
 8009070:	430b      	orrs	r3, r1
 8009072:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	695b      	ldr	r3, [r3, #20]
 800907a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	699a      	ldr	r2, [r3, #24]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	430a      	orrs	r2, r1
 8009088:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a2c      	ldr	r2, [pc, #176]	@ (8009140 <UART_SetConfig+0x114>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d103      	bne.n	800909c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009094:	f7fd fea2 	bl	8006ddc <HAL_RCC_GetPCLK2Freq>
 8009098:	60f8      	str	r0, [r7, #12]
 800909a:	e002      	b.n	80090a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800909c:	f7fd fe8a 	bl	8006db4 <HAL_RCC_GetPCLK1Freq>
 80090a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80090a2:	68fa      	ldr	r2, [r7, #12]
 80090a4:	4613      	mov	r3, r2
 80090a6:	009b      	lsls	r3, r3, #2
 80090a8:	4413      	add	r3, r2
 80090aa:	009a      	lsls	r2, r3, #2
 80090ac:	441a      	add	r2, r3
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80090b8:	4a22      	ldr	r2, [pc, #136]	@ (8009144 <UART_SetConfig+0x118>)
 80090ba:	fba2 2303 	umull	r2, r3, r2, r3
 80090be:	095b      	lsrs	r3, r3, #5
 80090c0:	0119      	lsls	r1, r3, #4
 80090c2:	68fa      	ldr	r2, [r7, #12]
 80090c4:	4613      	mov	r3, r2
 80090c6:	009b      	lsls	r3, r3, #2
 80090c8:	4413      	add	r3, r2
 80090ca:	009a      	lsls	r2, r3, #2
 80090cc:	441a      	add	r2, r3
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	009b      	lsls	r3, r3, #2
 80090d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80090d8:	4b1a      	ldr	r3, [pc, #104]	@ (8009144 <UART_SetConfig+0x118>)
 80090da:	fba3 0302 	umull	r0, r3, r3, r2
 80090de:	095b      	lsrs	r3, r3, #5
 80090e0:	2064      	movs	r0, #100	@ 0x64
 80090e2:	fb00 f303 	mul.w	r3, r0, r3
 80090e6:	1ad3      	subs	r3, r2, r3
 80090e8:	011b      	lsls	r3, r3, #4
 80090ea:	3332      	adds	r3, #50	@ 0x32
 80090ec:	4a15      	ldr	r2, [pc, #84]	@ (8009144 <UART_SetConfig+0x118>)
 80090ee:	fba2 2303 	umull	r2, r3, r2, r3
 80090f2:	095b      	lsrs	r3, r3, #5
 80090f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80090f8:	4419      	add	r1, r3
 80090fa:	68fa      	ldr	r2, [r7, #12]
 80090fc:	4613      	mov	r3, r2
 80090fe:	009b      	lsls	r3, r3, #2
 8009100:	4413      	add	r3, r2
 8009102:	009a      	lsls	r2, r3, #2
 8009104:	441a      	add	r2, r3
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	009b      	lsls	r3, r3, #2
 800910c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009110:	4b0c      	ldr	r3, [pc, #48]	@ (8009144 <UART_SetConfig+0x118>)
 8009112:	fba3 0302 	umull	r0, r3, r3, r2
 8009116:	095b      	lsrs	r3, r3, #5
 8009118:	2064      	movs	r0, #100	@ 0x64
 800911a:	fb00 f303 	mul.w	r3, r0, r3
 800911e:	1ad3      	subs	r3, r2, r3
 8009120:	011b      	lsls	r3, r3, #4
 8009122:	3332      	adds	r3, #50	@ 0x32
 8009124:	4a07      	ldr	r2, [pc, #28]	@ (8009144 <UART_SetConfig+0x118>)
 8009126:	fba2 2303 	umull	r2, r3, r2, r3
 800912a:	095b      	lsrs	r3, r3, #5
 800912c:	f003 020f 	and.w	r2, r3, #15
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	440a      	add	r2, r1
 8009136:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009138:	bf00      	nop
 800913a:	3710      	adds	r7, #16
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}
 8009140:	40013800 	.word	0x40013800
 8009144:	51eb851f 	.word	0x51eb851f

08009148 <std>:
 8009148:	2300      	movs	r3, #0
 800914a:	b510      	push	{r4, lr}
 800914c:	4604      	mov	r4, r0
 800914e:	e9c0 3300 	strd	r3, r3, [r0]
 8009152:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009156:	6083      	str	r3, [r0, #8]
 8009158:	8181      	strh	r1, [r0, #12]
 800915a:	6643      	str	r3, [r0, #100]	@ 0x64
 800915c:	81c2      	strh	r2, [r0, #14]
 800915e:	6183      	str	r3, [r0, #24]
 8009160:	4619      	mov	r1, r3
 8009162:	2208      	movs	r2, #8
 8009164:	305c      	adds	r0, #92	@ 0x5c
 8009166:	f000 facd 	bl	8009704 <memset>
 800916a:	4b0d      	ldr	r3, [pc, #52]	@ (80091a0 <std+0x58>)
 800916c:	6224      	str	r4, [r4, #32]
 800916e:	6263      	str	r3, [r4, #36]	@ 0x24
 8009170:	4b0c      	ldr	r3, [pc, #48]	@ (80091a4 <std+0x5c>)
 8009172:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009174:	4b0c      	ldr	r3, [pc, #48]	@ (80091a8 <std+0x60>)
 8009176:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009178:	4b0c      	ldr	r3, [pc, #48]	@ (80091ac <std+0x64>)
 800917a:	6323      	str	r3, [r4, #48]	@ 0x30
 800917c:	4b0c      	ldr	r3, [pc, #48]	@ (80091b0 <std+0x68>)
 800917e:	429c      	cmp	r4, r3
 8009180:	d006      	beq.n	8009190 <std+0x48>
 8009182:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009186:	4294      	cmp	r4, r2
 8009188:	d002      	beq.n	8009190 <std+0x48>
 800918a:	33d0      	adds	r3, #208	@ 0xd0
 800918c:	429c      	cmp	r4, r3
 800918e:	d105      	bne.n	800919c <std+0x54>
 8009190:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009198:	f000 bb2c 	b.w	80097f4 <__retarget_lock_init_recursive>
 800919c:	bd10      	pop	{r4, pc}
 800919e:	bf00      	nop
 80091a0:	08009555 	.word	0x08009555
 80091a4:	08009577 	.word	0x08009577
 80091a8:	080095af 	.word	0x080095af
 80091ac:	080095d3 	.word	0x080095d3
 80091b0:	200002bc 	.word	0x200002bc

080091b4 <stdio_exit_handler>:
 80091b4:	4a02      	ldr	r2, [pc, #8]	@ (80091c0 <stdio_exit_handler+0xc>)
 80091b6:	4903      	ldr	r1, [pc, #12]	@ (80091c4 <stdio_exit_handler+0x10>)
 80091b8:	4803      	ldr	r0, [pc, #12]	@ (80091c8 <stdio_exit_handler+0x14>)
 80091ba:	f000 b869 	b.w	8009290 <_fwalk_sglue>
 80091be:	bf00      	nop
 80091c0:	20000044 	.word	0x20000044
 80091c4:	0800a34d 	.word	0x0800a34d
 80091c8:	20000054 	.word	0x20000054

080091cc <cleanup_stdio>:
 80091cc:	6841      	ldr	r1, [r0, #4]
 80091ce:	4b0c      	ldr	r3, [pc, #48]	@ (8009200 <cleanup_stdio+0x34>)
 80091d0:	b510      	push	{r4, lr}
 80091d2:	4299      	cmp	r1, r3
 80091d4:	4604      	mov	r4, r0
 80091d6:	d001      	beq.n	80091dc <cleanup_stdio+0x10>
 80091d8:	f001 f8b8 	bl	800a34c <_fflush_r>
 80091dc:	68a1      	ldr	r1, [r4, #8]
 80091de:	4b09      	ldr	r3, [pc, #36]	@ (8009204 <cleanup_stdio+0x38>)
 80091e0:	4299      	cmp	r1, r3
 80091e2:	d002      	beq.n	80091ea <cleanup_stdio+0x1e>
 80091e4:	4620      	mov	r0, r4
 80091e6:	f001 f8b1 	bl	800a34c <_fflush_r>
 80091ea:	68e1      	ldr	r1, [r4, #12]
 80091ec:	4b06      	ldr	r3, [pc, #24]	@ (8009208 <cleanup_stdio+0x3c>)
 80091ee:	4299      	cmp	r1, r3
 80091f0:	d004      	beq.n	80091fc <cleanup_stdio+0x30>
 80091f2:	4620      	mov	r0, r4
 80091f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091f8:	f001 b8a8 	b.w	800a34c <_fflush_r>
 80091fc:	bd10      	pop	{r4, pc}
 80091fe:	bf00      	nop
 8009200:	200002bc 	.word	0x200002bc
 8009204:	20000324 	.word	0x20000324
 8009208:	2000038c 	.word	0x2000038c

0800920c <global_stdio_init.part.0>:
 800920c:	b510      	push	{r4, lr}
 800920e:	4b0b      	ldr	r3, [pc, #44]	@ (800923c <global_stdio_init.part.0+0x30>)
 8009210:	4c0b      	ldr	r4, [pc, #44]	@ (8009240 <global_stdio_init.part.0+0x34>)
 8009212:	4a0c      	ldr	r2, [pc, #48]	@ (8009244 <global_stdio_init.part.0+0x38>)
 8009214:	4620      	mov	r0, r4
 8009216:	601a      	str	r2, [r3, #0]
 8009218:	2104      	movs	r1, #4
 800921a:	2200      	movs	r2, #0
 800921c:	f7ff ff94 	bl	8009148 <std>
 8009220:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009224:	2201      	movs	r2, #1
 8009226:	2109      	movs	r1, #9
 8009228:	f7ff ff8e 	bl	8009148 <std>
 800922c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009230:	2202      	movs	r2, #2
 8009232:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009236:	2112      	movs	r1, #18
 8009238:	f7ff bf86 	b.w	8009148 <std>
 800923c:	200003f4 	.word	0x200003f4
 8009240:	200002bc 	.word	0x200002bc
 8009244:	080091b5 	.word	0x080091b5

08009248 <__sfp_lock_acquire>:
 8009248:	4801      	ldr	r0, [pc, #4]	@ (8009250 <__sfp_lock_acquire+0x8>)
 800924a:	f000 bad4 	b.w	80097f6 <__retarget_lock_acquire_recursive>
 800924e:	bf00      	nop
 8009250:	200003fd 	.word	0x200003fd

08009254 <__sfp_lock_release>:
 8009254:	4801      	ldr	r0, [pc, #4]	@ (800925c <__sfp_lock_release+0x8>)
 8009256:	f000 bacf 	b.w	80097f8 <__retarget_lock_release_recursive>
 800925a:	bf00      	nop
 800925c:	200003fd 	.word	0x200003fd

08009260 <__sinit>:
 8009260:	b510      	push	{r4, lr}
 8009262:	4604      	mov	r4, r0
 8009264:	f7ff fff0 	bl	8009248 <__sfp_lock_acquire>
 8009268:	6a23      	ldr	r3, [r4, #32]
 800926a:	b11b      	cbz	r3, 8009274 <__sinit+0x14>
 800926c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009270:	f7ff bff0 	b.w	8009254 <__sfp_lock_release>
 8009274:	4b04      	ldr	r3, [pc, #16]	@ (8009288 <__sinit+0x28>)
 8009276:	6223      	str	r3, [r4, #32]
 8009278:	4b04      	ldr	r3, [pc, #16]	@ (800928c <__sinit+0x2c>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d1f5      	bne.n	800926c <__sinit+0xc>
 8009280:	f7ff ffc4 	bl	800920c <global_stdio_init.part.0>
 8009284:	e7f2      	b.n	800926c <__sinit+0xc>
 8009286:	bf00      	nop
 8009288:	080091cd 	.word	0x080091cd
 800928c:	200003f4 	.word	0x200003f4

08009290 <_fwalk_sglue>:
 8009290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009294:	4607      	mov	r7, r0
 8009296:	4688      	mov	r8, r1
 8009298:	4614      	mov	r4, r2
 800929a:	2600      	movs	r6, #0
 800929c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80092a0:	f1b9 0901 	subs.w	r9, r9, #1
 80092a4:	d505      	bpl.n	80092b2 <_fwalk_sglue+0x22>
 80092a6:	6824      	ldr	r4, [r4, #0]
 80092a8:	2c00      	cmp	r4, #0
 80092aa:	d1f7      	bne.n	800929c <_fwalk_sglue+0xc>
 80092ac:	4630      	mov	r0, r6
 80092ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092b2:	89ab      	ldrh	r3, [r5, #12]
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	d907      	bls.n	80092c8 <_fwalk_sglue+0x38>
 80092b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80092bc:	3301      	adds	r3, #1
 80092be:	d003      	beq.n	80092c8 <_fwalk_sglue+0x38>
 80092c0:	4629      	mov	r1, r5
 80092c2:	4638      	mov	r0, r7
 80092c4:	47c0      	blx	r8
 80092c6:	4306      	orrs	r6, r0
 80092c8:	3568      	adds	r5, #104	@ 0x68
 80092ca:	e7e9      	b.n	80092a0 <_fwalk_sglue+0x10>

080092cc <iprintf>:
 80092cc:	b40f      	push	{r0, r1, r2, r3}
 80092ce:	b507      	push	{r0, r1, r2, lr}
 80092d0:	4906      	ldr	r1, [pc, #24]	@ (80092ec <iprintf+0x20>)
 80092d2:	ab04      	add	r3, sp, #16
 80092d4:	6808      	ldr	r0, [r1, #0]
 80092d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80092da:	6881      	ldr	r1, [r0, #8]
 80092dc:	9301      	str	r3, [sp, #4]
 80092de:	f000 fd0b 	bl	8009cf8 <_vfiprintf_r>
 80092e2:	b003      	add	sp, #12
 80092e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80092e8:	b004      	add	sp, #16
 80092ea:	4770      	bx	lr
 80092ec:	20000050 	.word	0x20000050

080092f0 <_puts_r>:
 80092f0:	6a03      	ldr	r3, [r0, #32]
 80092f2:	b570      	push	{r4, r5, r6, lr}
 80092f4:	4605      	mov	r5, r0
 80092f6:	460e      	mov	r6, r1
 80092f8:	6884      	ldr	r4, [r0, #8]
 80092fa:	b90b      	cbnz	r3, 8009300 <_puts_r+0x10>
 80092fc:	f7ff ffb0 	bl	8009260 <__sinit>
 8009300:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009302:	07db      	lsls	r3, r3, #31
 8009304:	d405      	bmi.n	8009312 <_puts_r+0x22>
 8009306:	89a3      	ldrh	r3, [r4, #12]
 8009308:	0598      	lsls	r0, r3, #22
 800930a:	d402      	bmi.n	8009312 <_puts_r+0x22>
 800930c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800930e:	f000 fa72 	bl	80097f6 <__retarget_lock_acquire_recursive>
 8009312:	89a3      	ldrh	r3, [r4, #12]
 8009314:	0719      	lsls	r1, r3, #28
 8009316:	d502      	bpl.n	800931e <_puts_r+0x2e>
 8009318:	6923      	ldr	r3, [r4, #16]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d135      	bne.n	800938a <_puts_r+0x9a>
 800931e:	4621      	mov	r1, r4
 8009320:	4628      	mov	r0, r5
 8009322:	f000 f999 	bl	8009658 <__swsetup_r>
 8009326:	b380      	cbz	r0, 800938a <_puts_r+0x9a>
 8009328:	f04f 35ff 	mov.w	r5, #4294967295
 800932c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800932e:	07da      	lsls	r2, r3, #31
 8009330:	d405      	bmi.n	800933e <_puts_r+0x4e>
 8009332:	89a3      	ldrh	r3, [r4, #12]
 8009334:	059b      	lsls	r3, r3, #22
 8009336:	d402      	bmi.n	800933e <_puts_r+0x4e>
 8009338:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800933a:	f000 fa5d 	bl	80097f8 <__retarget_lock_release_recursive>
 800933e:	4628      	mov	r0, r5
 8009340:	bd70      	pop	{r4, r5, r6, pc}
 8009342:	2b00      	cmp	r3, #0
 8009344:	da04      	bge.n	8009350 <_puts_r+0x60>
 8009346:	69a2      	ldr	r2, [r4, #24]
 8009348:	429a      	cmp	r2, r3
 800934a:	dc17      	bgt.n	800937c <_puts_r+0x8c>
 800934c:	290a      	cmp	r1, #10
 800934e:	d015      	beq.n	800937c <_puts_r+0x8c>
 8009350:	6823      	ldr	r3, [r4, #0]
 8009352:	1c5a      	adds	r2, r3, #1
 8009354:	6022      	str	r2, [r4, #0]
 8009356:	7019      	strb	r1, [r3, #0]
 8009358:	68a3      	ldr	r3, [r4, #8]
 800935a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800935e:	3b01      	subs	r3, #1
 8009360:	60a3      	str	r3, [r4, #8]
 8009362:	2900      	cmp	r1, #0
 8009364:	d1ed      	bne.n	8009342 <_puts_r+0x52>
 8009366:	2b00      	cmp	r3, #0
 8009368:	da11      	bge.n	800938e <_puts_r+0x9e>
 800936a:	4622      	mov	r2, r4
 800936c:	210a      	movs	r1, #10
 800936e:	4628      	mov	r0, r5
 8009370:	f000 f933 	bl	80095da <__swbuf_r>
 8009374:	3001      	adds	r0, #1
 8009376:	d0d7      	beq.n	8009328 <_puts_r+0x38>
 8009378:	250a      	movs	r5, #10
 800937a:	e7d7      	b.n	800932c <_puts_r+0x3c>
 800937c:	4622      	mov	r2, r4
 800937e:	4628      	mov	r0, r5
 8009380:	f000 f92b 	bl	80095da <__swbuf_r>
 8009384:	3001      	adds	r0, #1
 8009386:	d1e7      	bne.n	8009358 <_puts_r+0x68>
 8009388:	e7ce      	b.n	8009328 <_puts_r+0x38>
 800938a:	3e01      	subs	r6, #1
 800938c:	e7e4      	b.n	8009358 <_puts_r+0x68>
 800938e:	6823      	ldr	r3, [r4, #0]
 8009390:	1c5a      	adds	r2, r3, #1
 8009392:	6022      	str	r2, [r4, #0]
 8009394:	220a      	movs	r2, #10
 8009396:	701a      	strb	r2, [r3, #0]
 8009398:	e7ee      	b.n	8009378 <_puts_r+0x88>
	...

0800939c <puts>:
 800939c:	4b02      	ldr	r3, [pc, #8]	@ (80093a8 <puts+0xc>)
 800939e:	4601      	mov	r1, r0
 80093a0:	6818      	ldr	r0, [r3, #0]
 80093a2:	f7ff bfa5 	b.w	80092f0 <_puts_r>
 80093a6:	bf00      	nop
 80093a8:	20000050 	.word	0x20000050

080093ac <setvbuf>:
 80093ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80093b0:	461d      	mov	r5, r3
 80093b2:	4b57      	ldr	r3, [pc, #348]	@ (8009510 <setvbuf+0x164>)
 80093b4:	4604      	mov	r4, r0
 80093b6:	681f      	ldr	r7, [r3, #0]
 80093b8:	460e      	mov	r6, r1
 80093ba:	4690      	mov	r8, r2
 80093bc:	b127      	cbz	r7, 80093c8 <setvbuf+0x1c>
 80093be:	6a3b      	ldr	r3, [r7, #32]
 80093c0:	b913      	cbnz	r3, 80093c8 <setvbuf+0x1c>
 80093c2:	4638      	mov	r0, r7
 80093c4:	f7ff ff4c 	bl	8009260 <__sinit>
 80093c8:	f1b8 0f02 	cmp.w	r8, #2
 80093cc:	d006      	beq.n	80093dc <setvbuf+0x30>
 80093ce:	f1b8 0f01 	cmp.w	r8, #1
 80093d2:	f200 809a 	bhi.w	800950a <setvbuf+0x15e>
 80093d6:	2d00      	cmp	r5, #0
 80093d8:	f2c0 8097 	blt.w	800950a <setvbuf+0x15e>
 80093dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80093de:	07d9      	lsls	r1, r3, #31
 80093e0:	d405      	bmi.n	80093ee <setvbuf+0x42>
 80093e2:	89a3      	ldrh	r3, [r4, #12]
 80093e4:	059a      	lsls	r2, r3, #22
 80093e6:	d402      	bmi.n	80093ee <setvbuf+0x42>
 80093e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80093ea:	f000 fa04 	bl	80097f6 <__retarget_lock_acquire_recursive>
 80093ee:	4621      	mov	r1, r4
 80093f0:	4638      	mov	r0, r7
 80093f2:	f000 ffab 	bl	800a34c <_fflush_r>
 80093f6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80093f8:	b141      	cbz	r1, 800940c <setvbuf+0x60>
 80093fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80093fe:	4299      	cmp	r1, r3
 8009400:	d002      	beq.n	8009408 <setvbuf+0x5c>
 8009402:	4638      	mov	r0, r7
 8009404:	f000 f9fa 	bl	80097fc <_free_r>
 8009408:	2300      	movs	r3, #0
 800940a:	6363      	str	r3, [r4, #52]	@ 0x34
 800940c:	2300      	movs	r3, #0
 800940e:	61a3      	str	r3, [r4, #24]
 8009410:	6063      	str	r3, [r4, #4]
 8009412:	89a3      	ldrh	r3, [r4, #12]
 8009414:	061b      	lsls	r3, r3, #24
 8009416:	d503      	bpl.n	8009420 <setvbuf+0x74>
 8009418:	4638      	mov	r0, r7
 800941a:	6921      	ldr	r1, [r4, #16]
 800941c:	f000 f9ee 	bl	80097fc <_free_r>
 8009420:	89a3      	ldrh	r3, [r4, #12]
 8009422:	f1b8 0f02 	cmp.w	r8, #2
 8009426:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800942a:	f023 0303 	bic.w	r3, r3, #3
 800942e:	81a3      	strh	r3, [r4, #12]
 8009430:	d061      	beq.n	80094f6 <setvbuf+0x14a>
 8009432:	ab01      	add	r3, sp, #4
 8009434:	466a      	mov	r2, sp
 8009436:	4621      	mov	r1, r4
 8009438:	4638      	mov	r0, r7
 800943a:	f000 ffaf 	bl	800a39c <__swhatbuf_r>
 800943e:	89a3      	ldrh	r3, [r4, #12]
 8009440:	4318      	orrs	r0, r3
 8009442:	81a0      	strh	r0, [r4, #12]
 8009444:	bb2d      	cbnz	r5, 8009492 <setvbuf+0xe6>
 8009446:	9d00      	ldr	r5, [sp, #0]
 8009448:	4628      	mov	r0, r5
 800944a:	f000 fa1f 	bl	800988c <malloc>
 800944e:	4606      	mov	r6, r0
 8009450:	2800      	cmp	r0, #0
 8009452:	d152      	bne.n	80094fa <setvbuf+0x14e>
 8009454:	f8dd 9000 	ldr.w	r9, [sp]
 8009458:	45a9      	cmp	r9, r5
 800945a:	d140      	bne.n	80094de <setvbuf+0x132>
 800945c:	f04f 35ff 	mov.w	r5, #4294967295
 8009460:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009464:	f043 0202 	orr.w	r2, r3, #2
 8009468:	81a2      	strh	r2, [r4, #12]
 800946a:	2200      	movs	r2, #0
 800946c:	60a2      	str	r2, [r4, #8]
 800946e:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8009472:	6022      	str	r2, [r4, #0]
 8009474:	6122      	str	r2, [r4, #16]
 8009476:	2201      	movs	r2, #1
 8009478:	6162      	str	r2, [r4, #20]
 800947a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800947c:	07d6      	lsls	r6, r2, #31
 800947e:	d404      	bmi.n	800948a <setvbuf+0xde>
 8009480:	0598      	lsls	r0, r3, #22
 8009482:	d402      	bmi.n	800948a <setvbuf+0xde>
 8009484:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009486:	f000 f9b7 	bl	80097f8 <__retarget_lock_release_recursive>
 800948a:	4628      	mov	r0, r5
 800948c:	b003      	add	sp, #12
 800948e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009492:	2e00      	cmp	r6, #0
 8009494:	d0d8      	beq.n	8009448 <setvbuf+0x9c>
 8009496:	6a3b      	ldr	r3, [r7, #32]
 8009498:	b913      	cbnz	r3, 80094a0 <setvbuf+0xf4>
 800949a:	4638      	mov	r0, r7
 800949c:	f7ff fee0 	bl	8009260 <__sinit>
 80094a0:	f1b8 0f01 	cmp.w	r8, #1
 80094a4:	bf08      	it	eq
 80094a6:	89a3      	ldrheq	r3, [r4, #12]
 80094a8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80094ac:	bf04      	itt	eq
 80094ae:	f043 0301 	orreq.w	r3, r3, #1
 80094b2:	81a3      	strheq	r3, [r4, #12]
 80094b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094b8:	6026      	str	r6, [r4, #0]
 80094ba:	f013 0208 	ands.w	r2, r3, #8
 80094be:	d01e      	beq.n	80094fe <setvbuf+0x152>
 80094c0:	07d9      	lsls	r1, r3, #31
 80094c2:	bf41      	itttt	mi
 80094c4:	2200      	movmi	r2, #0
 80094c6:	426d      	negmi	r5, r5
 80094c8:	60a2      	strmi	r2, [r4, #8]
 80094ca:	61a5      	strmi	r5, [r4, #24]
 80094cc:	bf58      	it	pl
 80094ce:	60a5      	strpl	r5, [r4, #8]
 80094d0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80094d2:	07d2      	lsls	r2, r2, #31
 80094d4:	d401      	bmi.n	80094da <setvbuf+0x12e>
 80094d6:	059b      	lsls	r3, r3, #22
 80094d8:	d513      	bpl.n	8009502 <setvbuf+0x156>
 80094da:	2500      	movs	r5, #0
 80094dc:	e7d5      	b.n	800948a <setvbuf+0xde>
 80094de:	4648      	mov	r0, r9
 80094e0:	f000 f9d4 	bl	800988c <malloc>
 80094e4:	4606      	mov	r6, r0
 80094e6:	2800      	cmp	r0, #0
 80094e8:	d0b8      	beq.n	800945c <setvbuf+0xb0>
 80094ea:	89a3      	ldrh	r3, [r4, #12]
 80094ec:	464d      	mov	r5, r9
 80094ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094f2:	81a3      	strh	r3, [r4, #12]
 80094f4:	e7cf      	b.n	8009496 <setvbuf+0xea>
 80094f6:	2500      	movs	r5, #0
 80094f8:	e7b2      	b.n	8009460 <setvbuf+0xb4>
 80094fa:	46a9      	mov	r9, r5
 80094fc:	e7f5      	b.n	80094ea <setvbuf+0x13e>
 80094fe:	60a2      	str	r2, [r4, #8]
 8009500:	e7e6      	b.n	80094d0 <setvbuf+0x124>
 8009502:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009504:	f000 f978 	bl	80097f8 <__retarget_lock_release_recursive>
 8009508:	e7e7      	b.n	80094da <setvbuf+0x12e>
 800950a:	f04f 35ff 	mov.w	r5, #4294967295
 800950e:	e7bc      	b.n	800948a <setvbuf+0xde>
 8009510:	20000050 	.word	0x20000050

08009514 <siprintf>:
 8009514:	b40e      	push	{r1, r2, r3}
 8009516:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800951a:	b500      	push	{lr}
 800951c:	b09c      	sub	sp, #112	@ 0x70
 800951e:	ab1d      	add	r3, sp, #116	@ 0x74
 8009520:	9002      	str	r0, [sp, #8]
 8009522:	9006      	str	r0, [sp, #24]
 8009524:	9107      	str	r1, [sp, #28]
 8009526:	9104      	str	r1, [sp, #16]
 8009528:	4808      	ldr	r0, [pc, #32]	@ (800954c <siprintf+0x38>)
 800952a:	4909      	ldr	r1, [pc, #36]	@ (8009550 <siprintf+0x3c>)
 800952c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009530:	9105      	str	r1, [sp, #20]
 8009532:	6800      	ldr	r0, [r0, #0]
 8009534:	a902      	add	r1, sp, #8
 8009536:	9301      	str	r3, [sp, #4]
 8009538:	f000 faba 	bl	8009ab0 <_svfiprintf_r>
 800953c:	2200      	movs	r2, #0
 800953e:	9b02      	ldr	r3, [sp, #8]
 8009540:	701a      	strb	r2, [r3, #0]
 8009542:	b01c      	add	sp, #112	@ 0x70
 8009544:	f85d eb04 	ldr.w	lr, [sp], #4
 8009548:	b003      	add	sp, #12
 800954a:	4770      	bx	lr
 800954c:	20000050 	.word	0x20000050
 8009550:	ffff0208 	.word	0xffff0208

08009554 <__sread>:
 8009554:	b510      	push	{r4, lr}
 8009556:	460c      	mov	r4, r1
 8009558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800955c:	f000 f8fc 	bl	8009758 <_read_r>
 8009560:	2800      	cmp	r0, #0
 8009562:	bfab      	itete	ge
 8009564:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009566:	89a3      	ldrhlt	r3, [r4, #12]
 8009568:	181b      	addge	r3, r3, r0
 800956a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800956e:	bfac      	ite	ge
 8009570:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009572:	81a3      	strhlt	r3, [r4, #12]
 8009574:	bd10      	pop	{r4, pc}

08009576 <__swrite>:
 8009576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800957a:	461f      	mov	r7, r3
 800957c:	898b      	ldrh	r3, [r1, #12]
 800957e:	4605      	mov	r5, r0
 8009580:	05db      	lsls	r3, r3, #23
 8009582:	460c      	mov	r4, r1
 8009584:	4616      	mov	r6, r2
 8009586:	d505      	bpl.n	8009594 <__swrite+0x1e>
 8009588:	2302      	movs	r3, #2
 800958a:	2200      	movs	r2, #0
 800958c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009590:	f000 f8d0 	bl	8009734 <_lseek_r>
 8009594:	89a3      	ldrh	r3, [r4, #12]
 8009596:	4632      	mov	r2, r6
 8009598:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800959c:	81a3      	strh	r3, [r4, #12]
 800959e:	4628      	mov	r0, r5
 80095a0:	463b      	mov	r3, r7
 80095a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095aa:	f000 b8e7 	b.w	800977c <_write_r>

080095ae <__sseek>:
 80095ae:	b510      	push	{r4, lr}
 80095b0:	460c      	mov	r4, r1
 80095b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095b6:	f000 f8bd 	bl	8009734 <_lseek_r>
 80095ba:	1c43      	adds	r3, r0, #1
 80095bc:	89a3      	ldrh	r3, [r4, #12]
 80095be:	bf15      	itete	ne
 80095c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80095c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80095c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80095ca:	81a3      	strheq	r3, [r4, #12]
 80095cc:	bf18      	it	ne
 80095ce:	81a3      	strhne	r3, [r4, #12]
 80095d0:	bd10      	pop	{r4, pc}

080095d2 <__sclose>:
 80095d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095d6:	f000 b89d 	b.w	8009714 <_close_r>

080095da <__swbuf_r>:
 80095da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095dc:	460e      	mov	r6, r1
 80095de:	4614      	mov	r4, r2
 80095e0:	4605      	mov	r5, r0
 80095e2:	b118      	cbz	r0, 80095ec <__swbuf_r+0x12>
 80095e4:	6a03      	ldr	r3, [r0, #32]
 80095e6:	b90b      	cbnz	r3, 80095ec <__swbuf_r+0x12>
 80095e8:	f7ff fe3a 	bl	8009260 <__sinit>
 80095ec:	69a3      	ldr	r3, [r4, #24]
 80095ee:	60a3      	str	r3, [r4, #8]
 80095f0:	89a3      	ldrh	r3, [r4, #12]
 80095f2:	071a      	lsls	r2, r3, #28
 80095f4:	d501      	bpl.n	80095fa <__swbuf_r+0x20>
 80095f6:	6923      	ldr	r3, [r4, #16]
 80095f8:	b943      	cbnz	r3, 800960c <__swbuf_r+0x32>
 80095fa:	4621      	mov	r1, r4
 80095fc:	4628      	mov	r0, r5
 80095fe:	f000 f82b 	bl	8009658 <__swsetup_r>
 8009602:	b118      	cbz	r0, 800960c <__swbuf_r+0x32>
 8009604:	f04f 37ff 	mov.w	r7, #4294967295
 8009608:	4638      	mov	r0, r7
 800960a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800960c:	6823      	ldr	r3, [r4, #0]
 800960e:	6922      	ldr	r2, [r4, #16]
 8009610:	b2f6      	uxtb	r6, r6
 8009612:	1a98      	subs	r0, r3, r2
 8009614:	6963      	ldr	r3, [r4, #20]
 8009616:	4637      	mov	r7, r6
 8009618:	4283      	cmp	r3, r0
 800961a:	dc05      	bgt.n	8009628 <__swbuf_r+0x4e>
 800961c:	4621      	mov	r1, r4
 800961e:	4628      	mov	r0, r5
 8009620:	f000 fe94 	bl	800a34c <_fflush_r>
 8009624:	2800      	cmp	r0, #0
 8009626:	d1ed      	bne.n	8009604 <__swbuf_r+0x2a>
 8009628:	68a3      	ldr	r3, [r4, #8]
 800962a:	3b01      	subs	r3, #1
 800962c:	60a3      	str	r3, [r4, #8]
 800962e:	6823      	ldr	r3, [r4, #0]
 8009630:	1c5a      	adds	r2, r3, #1
 8009632:	6022      	str	r2, [r4, #0]
 8009634:	701e      	strb	r6, [r3, #0]
 8009636:	6962      	ldr	r2, [r4, #20]
 8009638:	1c43      	adds	r3, r0, #1
 800963a:	429a      	cmp	r2, r3
 800963c:	d004      	beq.n	8009648 <__swbuf_r+0x6e>
 800963e:	89a3      	ldrh	r3, [r4, #12]
 8009640:	07db      	lsls	r3, r3, #31
 8009642:	d5e1      	bpl.n	8009608 <__swbuf_r+0x2e>
 8009644:	2e0a      	cmp	r6, #10
 8009646:	d1df      	bne.n	8009608 <__swbuf_r+0x2e>
 8009648:	4621      	mov	r1, r4
 800964a:	4628      	mov	r0, r5
 800964c:	f000 fe7e 	bl	800a34c <_fflush_r>
 8009650:	2800      	cmp	r0, #0
 8009652:	d0d9      	beq.n	8009608 <__swbuf_r+0x2e>
 8009654:	e7d6      	b.n	8009604 <__swbuf_r+0x2a>
	...

08009658 <__swsetup_r>:
 8009658:	b538      	push	{r3, r4, r5, lr}
 800965a:	4b29      	ldr	r3, [pc, #164]	@ (8009700 <__swsetup_r+0xa8>)
 800965c:	4605      	mov	r5, r0
 800965e:	6818      	ldr	r0, [r3, #0]
 8009660:	460c      	mov	r4, r1
 8009662:	b118      	cbz	r0, 800966c <__swsetup_r+0x14>
 8009664:	6a03      	ldr	r3, [r0, #32]
 8009666:	b90b      	cbnz	r3, 800966c <__swsetup_r+0x14>
 8009668:	f7ff fdfa 	bl	8009260 <__sinit>
 800966c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009670:	0719      	lsls	r1, r3, #28
 8009672:	d422      	bmi.n	80096ba <__swsetup_r+0x62>
 8009674:	06da      	lsls	r2, r3, #27
 8009676:	d407      	bmi.n	8009688 <__swsetup_r+0x30>
 8009678:	2209      	movs	r2, #9
 800967a:	602a      	str	r2, [r5, #0]
 800967c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009680:	f04f 30ff 	mov.w	r0, #4294967295
 8009684:	81a3      	strh	r3, [r4, #12]
 8009686:	e033      	b.n	80096f0 <__swsetup_r+0x98>
 8009688:	0758      	lsls	r0, r3, #29
 800968a:	d512      	bpl.n	80096b2 <__swsetup_r+0x5a>
 800968c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800968e:	b141      	cbz	r1, 80096a2 <__swsetup_r+0x4a>
 8009690:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009694:	4299      	cmp	r1, r3
 8009696:	d002      	beq.n	800969e <__swsetup_r+0x46>
 8009698:	4628      	mov	r0, r5
 800969a:	f000 f8af 	bl	80097fc <_free_r>
 800969e:	2300      	movs	r3, #0
 80096a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80096a2:	89a3      	ldrh	r3, [r4, #12]
 80096a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80096a8:	81a3      	strh	r3, [r4, #12]
 80096aa:	2300      	movs	r3, #0
 80096ac:	6063      	str	r3, [r4, #4]
 80096ae:	6923      	ldr	r3, [r4, #16]
 80096b0:	6023      	str	r3, [r4, #0]
 80096b2:	89a3      	ldrh	r3, [r4, #12]
 80096b4:	f043 0308 	orr.w	r3, r3, #8
 80096b8:	81a3      	strh	r3, [r4, #12]
 80096ba:	6923      	ldr	r3, [r4, #16]
 80096bc:	b94b      	cbnz	r3, 80096d2 <__swsetup_r+0x7a>
 80096be:	89a3      	ldrh	r3, [r4, #12]
 80096c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80096c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80096c8:	d003      	beq.n	80096d2 <__swsetup_r+0x7a>
 80096ca:	4621      	mov	r1, r4
 80096cc:	4628      	mov	r0, r5
 80096ce:	f000 fe8a 	bl	800a3e6 <__smakebuf_r>
 80096d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096d6:	f013 0201 	ands.w	r2, r3, #1
 80096da:	d00a      	beq.n	80096f2 <__swsetup_r+0x9a>
 80096dc:	2200      	movs	r2, #0
 80096de:	60a2      	str	r2, [r4, #8]
 80096e0:	6962      	ldr	r2, [r4, #20]
 80096e2:	4252      	negs	r2, r2
 80096e4:	61a2      	str	r2, [r4, #24]
 80096e6:	6922      	ldr	r2, [r4, #16]
 80096e8:	b942      	cbnz	r2, 80096fc <__swsetup_r+0xa4>
 80096ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80096ee:	d1c5      	bne.n	800967c <__swsetup_r+0x24>
 80096f0:	bd38      	pop	{r3, r4, r5, pc}
 80096f2:	0799      	lsls	r1, r3, #30
 80096f4:	bf58      	it	pl
 80096f6:	6962      	ldrpl	r2, [r4, #20]
 80096f8:	60a2      	str	r2, [r4, #8]
 80096fa:	e7f4      	b.n	80096e6 <__swsetup_r+0x8e>
 80096fc:	2000      	movs	r0, #0
 80096fe:	e7f7      	b.n	80096f0 <__swsetup_r+0x98>
 8009700:	20000050 	.word	0x20000050

08009704 <memset>:
 8009704:	4603      	mov	r3, r0
 8009706:	4402      	add	r2, r0
 8009708:	4293      	cmp	r3, r2
 800970a:	d100      	bne.n	800970e <memset+0xa>
 800970c:	4770      	bx	lr
 800970e:	f803 1b01 	strb.w	r1, [r3], #1
 8009712:	e7f9      	b.n	8009708 <memset+0x4>

08009714 <_close_r>:
 8009714:	b538      	push	{r3, r4, r5, lr}
 8009716:	2300      	movs	r3, #0
 8009718:	4d05      	ldr	r5, [pc, #20]	@ (8009730 <_close_r+0x1c>)
 800971a:	4604      	mov	r4, r0
 800971c:	4608      	mov	r0, r1
 800971e:	602b      	str	r3, [r5, #0]
 8009720:	f7fa f96e 	bl	8003a00 <_close>
 8009724:	1c43      	adds	r3, r0, #1
 8009726:	d102      	bne.n	800972e <_close_r+0x1a>
 8009728:	682b      	ldr	r3, [r5, #0]
 800972a:	b103      	cbz	r3, 800972e <_close_r+0x1a>
 800972c:	6023      	str	r3, [r4, #0]
 800972e:	bd38      	pop	{r3, r4, r5, pc}
 8009730:	200003f8 	.word	0x200003f8

08009734 <_lseek_r>:
 8009734:	b538      	push	{r3, r4, r5, lr}
 8009736:	4604      	mov	r4, r0
 8009738:	4608      	mov	r0, r1
 800973a:	4611      	mov	r1, r2
 800973c:	2200      	movs	r2, #0
 800973e:	4d05      	ldr	r5, [pc, #20]	@ (8009754 <_lseek_r+0x20>)
 8009740:	602a      	str	r2, [r5, #0]
 8009742:	461a      	mov	r2, r3
 8009744:	f7fa f980 	bl	8003a48 <_lseek>
 8009748:	1c43      	adds	r3, r0, #1
 800974a:	d102      	bne.n	8009752 <_lseek_r+0x1e>
 800974c:	682b      	ldr	r3, [r5, #0]
 800974e:	b103      	cbz	r3, 8009752 <_lseek_r+0x1e>
 8009750:	6023      	str	r3, [r4, #0]
 8009752:	bd38      	pop	{r3, r4, r5, pc}
 8009754:	200003f8 	.word	0x200003f8

08009758 <_read_r>:
 8009758:	b538      	push	{r3, r4, r5, lr}
 800975a:	4604      	mov	r4, r0
 800975c:	4608      	mov	r0, r1
 800975e:	4611      	mov	r1, r2
 8009760:	2200      	movs	r2, #0
 8009762:	4d05      	ldr	r5, [pc, #20]	@ (8009778 <_read_r+0x20>)
 8009764:	602a      	str	r2, [r5, #0]
 8009766:	461a      	mov	r2, r3
 8009768:	f7fa fc70 	bl	800404c <_read>
 800976c:	1c43      	adds	r3, r0, #1
 800976e:	d102      	bne.n	8009776 <_read_r+0x1e>
 8009770:	682b      	ldr	r3, [r5, #0]
 8009772:	b103      	cbz	r3, 8009776 <_read_r+0x1e>
 8009774:	6023      	str	r3, [r4, #0]
 8009776:	bd38      	pop	{r3, r4, r5, pc}
 8009778:	200003f8 	.word	0x200003f8

0800977c <_write_r>:
 800977c:	b538      	push	{r3, r4, r5, lr}
 800977e:	4604      	mov	r4, r0
 8009780:	4608      	mov	r0, r1
 8009782:	4611      	mov	r1, r2
 8009784:	2200      	movs	r2, #0
 8009786:	4d05      	ldr	r5, [pc, #20]	@ (800979c <_write_r+0x20>)
 8009788:	602a      	str	r2, [r5, #0]
 800978a:	461a      	mov	r2, r3
 800978c:	f7fa fc32 	bl	8003ff4 <_write>
 8009790:	1c43      	adds	r3, r0, #1
 8009792:	d102      	bne.n	800979a <_write_r+0x1e>
 8009794:	682b      	ldr	r3, [r5, #0]
 8009796:	b103      	cbz	r3, 800979a <_write_r+0x1e>
 8009798:	6023      	str	r3, [r4, #0]
 800979a:	bd38      	pop	{r3, r4, r5, pc}
 800979c:	200003f8 	.word	0x200003f8

080097a0 <__errno>:
 80097a0:	4b01      	ldr	r3, [pc, #4]	@ (80097a8 <__errno+0x8>)
 80097a2:	6818      	ldr	r0, [r3, #0]
 80097a4:	4770      	bx	lr
 80097a6:	bf00      	nop
 80097a8:	20000050 	.word	0x20000050

080097ac <__libc_init_array>:
 80097ac:	b570      	push	{r4, r5, r6, lr}
 80097ae:	2600      	movs	r6, #0
 80097b0:	4d0c      	ldr	r5, [pc, #48]	@ (80097e4 <__libc_init_array+0x38>)
 80097b2:	4c0d      	ldr	r4, [pc, #52]	@ (80097e8 <__libc_init_array+0x3c>)
 80097b4:	1b64      	subs	r4, r4, r5
 80097b6:	10a4      	asrs	r4, r4, #2
 80097b8:	42a6      	cmp	r6, r4
 80097ba:	d109      	bne.n	80097d0 <__libc_init_array+0x24>
 80097bc:	f000 feee 	bl	800a59c <_init>
 80097c0:	2600      	movs	r6, #0
 80097c2:	4d0a      	ldr	r5, [pc, #40]	@ (80097ec <__libc_init_array+0x40>)
 80097c4:	4c0a      	ldr	r4, [pc, #40]	@ (80097f0 <__libc_init_array+0x44>)
 80097c6:	1b64      	subs	r4, r4, r5
 80097c8:	10a4      	asrs	r4, r4, #2
 80097ca:	42a6      	cmp	r6, r4
 80097cc:	d105      	bne.n	80097da <__libc_init_array+0x2e>
 80097ce:	bd70      	pop	{r4, r5, r6, pc}
 80097d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80097d4:	4798      	blx	r3
 80097d6:	3601      	adds	r6, #1
 80097d8:	e7ee      	b.n	80097b8 <__libc_init_array+0xc>
 80097da:	f855 3b04 	ldr.w	r3, [r5], #4
 80097de:	4798      	blx	r3
 80097e0:	3601      	adds	r6, #1
 80097e2:	e7f2      	b.n	80097ca <__libc_init_array+0x1e>
 80097e4:	0800c0d0 	.word	0x0800c0d0
 80097e8:	0800c0d0 	.word	0x0800c0d0
 80097ec:	0800c0d0 	.word	0x0800c0d0
 80097f0:	0800c0d4 	.word	0x0800c0d4

080097f4 <__retarget_lock_init_recursive>:
 80097f4:	4770      	bx	lr

080097f6 <__retarget_lock_acquire_recursive>:
 80097f6:	4770      	bx	lr

080097f8 <__retarget_lock_release_recursive>:
 80097f8:	4770      	bx	lr
	...

080097fc <_free_r>:
 80097fc:	b538      	push	{r3, r4, r5, lr}
 80097fe:	4605      	mov	r5, r0
 8009800:	2900      	cmp	r1, #0
 8009802:	d040      	beq.n	8009886 <_free_r+0x8a>
 8009804:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009808:	1f0c      	subs	r4, r1, #4
 800980a:	2b00      	cmp	r3, #0
 800980c:	bfb8      	it	lt
 800980e:	18e4      	addlt	r4, r4, r3
 8009810:	f000 f8e6 	bl	80099e0 <__malloc_lock>
 8009814:	4a1c      	ldr	r2, [pc, #112]	@ (8009888 <_free_r+0x8c>)
 8009816:	6813      	ldr	r3, [r2, #0]
 8009818:	b933      	cbnz	r3, 8009828 <_free_r+0x2c>
 800981a:	6063      	str	r3, [r4, #4]
 800981c:	6014      	str	r4, [r2, #0]
 800981e:	4628      	mov	r0, r5
 8009820:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009824:	f000 b8e2 	b.w	80099ec <__malloc_unlock>
 8009828:	42a3      	cmp	r3, r4
 800982a:	d908      	bls.n	800983e <_free_r+0x42>
 800982c:	6820      	ldr	r0, [r4, #0]
 800982e:	1821      	adds	r1, r4, r0
 8009830:	428b      	cmp	r3, r1
 8009832:	bf01      	itttt	eq
 8009834:	6819      	ldreq	r1, [r3, #0]
 8009836:	685b      	ldreq	r3, [r3, #4]
 8009838:	1809      	addeq	r1, r1, r0
 800983a:	6021      	streq	r1, [r4, #0]
 800983c:	e7ed      	b.n	800981a <_free_r+0x1e>
 800983e:	461a      	mov	r2, r3
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	b10b      	cbz	r3, 8009848 <_free_r+0x4c>
 8009844:	42a3      	cmp	r3, r4
 8009846:	d9fa      	bls.n	800983e <_free_r+0x42>
 8009848:	6811      	ldr	r1, [r2, #0]
 800984a:	1850      	adds	r0, r2, r1
 800984c:	42a0      	cmp	r0, r4
 800984e:	d10b      	bne.n	8009868 <_free_r+0x6c>
 8009850:	6820      	ldr	r0, [r4, #0]
 8009852:	4401      	add	r1, r0
 8009854:	1850      	adds	r0, r2, r1
 8009856:	4283      	cmp	r3, r0
 8009858:	6011      	str	r1, [r2, #0]
 800985a:	d1e0      	bne.n	800981e <_free_r+0x22>
 800985c:	6818      	ldr	r0, [r3, #0]
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	4408      	add	r0, r1
 8009862:	6010      	str	r0, [r2, #0]
 8009864:	6053      	str	r3, [r2, #4]
 8009866:	e7da      	b.n	800981e <_free_r+0x22>
 8009868:	d902      	bls.n	8009870 <_free_r+0x74>
 800986a:	230c      	movs	r3, #12
 800986c:	602b      	str	r3, [r5, #0]
 800986e:	e7d6      	b.n	800981e <_free_r+0x22>
 8009870:	6820      	ldr	r0, [r4, #0]
 8009872:	1821      	adds	r1, r4, r0
 8009874:	428b      	cmp	r3, r1
 8009876:	bf01      	itttt	eq
 8009878:	6819      	ldreq	r1, [r3, #0]
 800987a:	685b      	ldreq	r3, [r3, #4]
 800987c:	1809      	addeq	r1, r1, r0
 800987e:	6021      	streq	r1, [r4, #0]
 8009880:	6063      	str	r3, [r4, #4]
 8009882:	6054      	str	r4, [r2, #4]
 8009884:	e7cb      	b.n	800981e <_free_r+0x22>
 8009886:	bd38      	pop	{r3, r4, r5, pc}
 8009888:	20000404 	.word	0x20000404

0800988c <malloc>:
 800988c:	4b02      	ldr	r3, [pc, #8]	@ (8009898 <malloc+0xc>)
 800988e:	4601      	mov	r1, r0
 8009890:	6818      	ldr	r0, [r3, #0]
 8009892:	f000 b825 	b.w	80098e0 <_malloc_r>
 8009896:	bf00      	nop
 8009898:	20000050 	.word	0x20000050

0800989c <sbrk_aligned>:
 800989c:	b570      	push	{r4, r5, r6, lr}
 800989e:	4e0f      	ldr	r6, [pc, #60]	@ (80098dc <sbrk_aligned+0x40>)
 80098a0:	460c      	mov	r4, r1
 80098a2:	6831      	ldr	r1, [r6, #0]
 80098a4:	4605      	mov	r5, r0
 80098a6:	b911      	cbnz	r1, 80098ae <sbrk_aligned+0x12>
 80098a8:	f000 fe16 	bl	800a4d8 <_sbrk_r>
 80098ac:	6030      	str	r0, [r6, #0]
 80098ae:	4621      	mov	r1, r4
 80098b0:	4628      	mov	r0, r5
 80098b2:	f000 fe11 	bl	800a4d8 <_sbrk_r>
 80098b6:	1c43      	adds	r3, r0, #1
 80098b8:	d103      	bne.n	80098c2 <sbrk_aligned+0x26>
 80098ba:	f04f 34ff 	mov.w	r4, #4294967295
 80098be:	4620      	mov	r0, r4
 80098c0:	bd70      	pop	{r4, r5, r6, pc}
 80098c2:	1cc4      	adds	r4, r0, #3
 80098c4:	f024 0403 	bic.w	r4, r4, #3
 80098c8:	42a0      	cmp	r0, r4
 80098ca:	d0f8      	beq.n	80098be <sbrk_aligned+0x22>
 80098cc:	1a21      	subs	r1, r4, r0
 80098ce:	4628      	mov	r0, r5
 80098d0:	f000 fe02 	bl	800a4d8 <_sbrk_r>
 80098d4:	3001      	adds	r0, #1
 80098d6:	d1f2      	bne.n	80098be <sbrk_aligned+0x22>
 80098d8:	e7ef      	b.n	80098ba <sbrk_aligned+0x1e>
 80098da:	bf00      	nop
 80098dc:	20000400 	.word	0x20000400

080098e0 <_malloc_r>:
 80098e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098e4:	1ccd      	adds	r5, r1, #3
 80098e6:	f025 0503 	bic.w	r5, r5, #3
 80098ea:	3508      	adds	r5, #8
 80098ec:	2d0c      	cmp	r5, #12
 80098ee:	bf38      	it	cc
 80098f0:	250c      	movcc	r5, #12
 80098f2:	2d00      	cmp	r5, #0
 80098f4:	4606      	mov	r6, r0
 80098f6:	db01      	blt.n	80098fc <_malloc_r+0x1c>
 80098f8:	42a9      	cmp	r1, r5
 80098fa:	d904      	bls.n	8009906 <_malloc_r+0x26>
 80098fc:	230c      	movs	r3, #12
 80098fe:	6033      	str	r3, [r6, #0]
 8009900:	2000      	movs	r0, #0
 8009902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009906:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80099dc <_malloc_r+0xfc>
 800990a:	f000 f869 	bl	80099e0 <__malloc_lock>
 800990e:	f8d8 3000 	ldr.w	r3, [r8]
 8009912:	461c      	mov	r4, r3
 8009914:	bb44      	cbnz	r4, 8009968 <_malloc_r+0x88>
 8009916:	4629      	mov	r1, r5
 8009918:	4630      	mov	r0, r6
 800991a:	f7ff ffbf 	bl	800989c <sbrk_aligned>
 800991e:	1c43      	adds	r3, r0, #1
 8009920:	4604      	mov	r4, r0
 8009922:	d158      	bne.n	80099d6 <_malloc_r+0xf6>
 8009924:	f8d8 4000 	ldr.w	r4, [r8]
 8009928:	4627      	mov	r7, r4
 800992a:	2f00      	cmp	r7, #0
 800992c:	d143      	bne.n	80099b6 <_malloc_r+0xd6>
 800992e:	2c00      	cmp	r4, #0
 8009930:	d04b      	beq.n	80099ca <_malloc_r+0xea>
 8009932:	6823      	ldr	r3, [r4, #0]
 8009934:	4639      	mov	r1, r7
 8009936:	4630      	mov	r0, r6
 8009938:	eb04 0903 	add.w	r9, r4, r3
 800993c:	f000 fdcc 	bl	800a4d8 <_sbrk_r>
 8009940:	4581      	cmp	r9, r0
 8009942:	d142      	bne.n	80099ca <_malloc_r+0xea>
 8009944:	6821      	ldr	r1, [r4, #0]
 8009946:	4630      	mov	r0, r6
 8009948:	1a6d      	subs	r5, r5, r1
 800994a:	4629      	mov	r1, r5
 800994c:	f7ff ffa6 	bl	800989c <sbrk_aligned>
 8009950:	3001      	adds	r0, #1
 8009952:	d03a      	beq.n	80099ca <_malloc_r+0xea>
 8009954:	6823      	ldr	r3, [r4, #0]
 8009956:	442b      	add	r3, r5
 8009958:	6023      	str	r3, [r4, #0]
 800995a:	f8d8 3000 	ldr.w	r3, [r8]
 800995e:	685a      	ldr	r2, [r3, #4]
 8009960:	bb62      	cbnz	r2, 80099bc <_malloc_r+0xdc>
 8009962:	f8c8 7000 	str.w	r7, [r8]
 8009966:	e00f      	b.n	8009988 <_malloc_r+0xa8>
 8009968:	6822      	ldr	r2, [r4, #0]
 800996a:	1b52      	subs	r2, r2, r5
 800996c:	d420      	bmi.n	80099b0 <_malloc_r+0xd0>
 800996e:	2a0b      	cmp	r2, #11
 8009970:	d917      	bls.n	80099a2 <_malloc_r+0xc2>
 8009972:	1961      	adds	r1, r4, r5
 8009974:	42a3      	cmp	r3, r4
 8009976:	6025      	str	r5, [r4, #0]
 8009978:	bf18      	it	ne
 800997a:	6059      	strne	r1, [r3, #4]
 800997c:	6863      	ldr	r3, [r4, #4]
 800997e:	bf08      	it	eq
 8009980:	f8c8 1000 	streq.w	r1, [r8]
 8009984:	5162      	str	r2, [r4, r5]
 8009986:	604b      	str	r3, [r1, #4]
 8009988:	4630      	mov	r0, r6
 800998a:	f000 f82f 	bl	80099ec <__malloc_unlock>
 800998e:	f104 000b 	add.w	r0, r4, #11
 8009992:	1d23      	adds	r3, r4, #4
 8009994:	f020 0007 	bic.w	r0, r0, #7
 8009998:	1ac2      	subs	r2, r0, r3
 800999a:	bf1c      	itt	ne
 800999c:	1a1b      	subne	r3, r3, r0
 800999e:	50a3      	strne	r3, [r4, r2]
 80099a0:	e7af      	b.n	8009902 <_malloc_r+0x22>
 80099a2:	6862      	ldr	r2, [r4, #4]
 80099a4:	42a3      	cmp	r3, r4
 80099a6:	bf0c      	ite	eq
 80099a8:	f8c8 2000 	streq.w	r2, [r8]
 80099ac:	605a      	strne	r2, [r3, #4]
 80099ae:	e7eb      	b.n	8009988 <_malloc_r+0xa8>
 80099b0:	4623      	mov	r3, r4
 80099b2:	6864      	ldr	r4, [r4, #4]
 80099b4:	e7ae      	b.n	8009914 <_malloc_r+0x34>
 80099b6:	463c      	mov	r4, r7
 80099b8:	687f      	ldr	r7, [r7, #4]
 80099ba:	e7b6      	b.n	800992a <_malloc_r+0x4a>
 80099bc:	461a      	mov	r2, r3
 80099be:	685b      	ldr	r3, [r3, #4]
 80099c0:	42a3      	cmp	r3, r4
 80099c2:	d1fb      	bne.n	80099bc <_malloc_r+0xdc>
 80099c4:	2300      	movs	r3, #0
 80099c6:	6053      	str	r3, [r2, #4]
 80099c8:	e7de      	b.n	8009988 <_malloc_r+0xa8>
 80099ca:	230c      	movs	r3, #12
 80099cc:	4630      	mov	r0, r6
 80099ce:	6033      	str	r3, [r6, #0]
 80099d0:	f000 f80c 	bl	80099ec <__malloc_unlock>
 80099d4:	e794      	b.n	8009900 <_malloc_r+0x20>
 80099d6:	6005      	str	r5, [r0, #0]
 80099d8:	e7d6      	b.n	8009988 <_malloc_r+0xa8>
 80099da:	bf00      	nop
 80099dc:	20000404 	.word	0x20000404

080099e0 <__malloc_lock>:
 80099e0:	4801      	ldr	r0, [pc, #4]	@ (80099e8 <__malloc_lock+0x8>)
 80099e2:	f7ff bf08 	b.w	80097f6 <__retarget_lock_acquire_recursive>
 80099e6:	bf00      	nop
 80099e8:	200003fc 	.word	0x200003fc

080099ec <__malloc_unlock>:
 80099ec:	4801      	ldr	r0, [pc, #4]	@ (80099f4 <__malloc_unlock+0x8>)
 80099ee:	f7ff bf03 	b.w	80097f8 <__retarget_lock_release_recursive>
 80099f2:	bf00      	nop
 80099f4:	200003fc 	.word	0x200003fc

080099f8 <__ssputs_r>:
 80099f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099fc:	461f      	mov	r7, r3
 80099fe:	688e      	ldr	r6, [r1, #8]
 8009a00:	4682      	mov	sl, r0
 8009a02:	42be      	cmp	r6, r7
 8009a04:	460c      	mov	r4, r1
 8009a06:	4690      	mov	r8, r2
 8009a08:	680b      	ldr	r3, [r1, #0]
 8009a0a:	d82d      	bhi.n	8009a68 <__ssputs_r+0x70>
 8009a0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009a10:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009a14:	d026      	beq.n	8009a64 <__ssputs_r+0x6c>
 8009a16:	6965      	ldr	r5, [r4, #20]
 8009a18:	6909      	ldr	r1, [r1, #16]
 8009a1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009a1e:	eba3 0901 	sub.w	r9, r3, r1
 8009a22:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009a26:	1c7b      	adds	r3, r7, #1
 8009a28:	444b      	add	r3, r9
 8009a2a:	106d      	asrs	r5, r5, #1
 8009a2c:	429d      	cmp	r5, r3
 8009a2e:	bf38      	it	cc
 8009a30:	461d      	movcc	r5, r3
 8009a32:	0553      	lsls	r3, r2, #21
 8009a34:	d527      	bpl.n	8009a86 <__ssputs_r+0x8e>
 8009a36:	4629      	mov	r1, r5
 8009a38:	f7ff ff52 	bl	80098e0 <_malloc_r>
 8009a3c:	4606      	mov	r6, r0
 8009a3e:	b360      	cbz	r0, 8009a9a <__ssputs_r+0xa2>
 8009a40:	464a      	mov	r2, r9
 8009a42:	6921      	ldr	r1, [r4, #16]
 8009a44:	f000 fd66 	bl	800a514 <memcpy>
 8009a48:	89a3      	ldrh	r3, [r4, #12]
 8009a4a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009a4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a52:	81a3      	strh	r3, [r4, #12]
 8009a54:	6126      	str	r6, [r4, #16]
 8009a56:	444e      	add	r6, r9
 8009a58:	6026      	str	r6, [r4, #0]
 8009a5a:	463e      	mov	r6, r7
 8009a5c:	6165      	str	r5, [r4, #20]
 8009a5e:	eba5 0509 	sub.w	r5, r5, r9
 8009a62:	60a5      	str	r5, [r4, #8]
 8009a64:	42be      	cmp	r6, r7
 8009a66:	d900      	bls.n	8009a6a <__ssputs_r+0x72>
 8009a68:	463e      	mov	r6, r7
 8009a6a:	4632      	mov	r2, r6
 8009a6c:	4641      	mov	r1, r8
 8009a6e:	6820      	ldr	r0, [r4, #0]
 8009a70:	f000 fcf5 	bl	800a45e <memmove>
 8009a74:	2000      	movs	r0, #0
 8009a76:	68a3      	ldr	r3, [r4, #8]
 8009a78:	1b9b      	subs	r3, r3, r6
 8009a7a:	60a3      	str	r3, [r4, #8]
 8009a7c:	6823      	ldr	r3, [r4, #0]
 8009a7e:	4433      	add	r3, r6
 8009a80:	6023      	str	r3, [r4, #0]
 8009a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a86:	462a      	mov	r2, r5
 8009a88:	f000 fd52 	bl	800a530 <_realloc_r>
 8009a8c:	4606      	mov	r6, r0
 8009a8e:	2800      	cmp	r0, #0
 8009a90:	d1e0      	bne.n	8009a54 <__ssputs_r+0x5c>
 8009a92:	4650      	mov	r0, sl
 8009a94:	6921      	ldr	r1, [r4, #16]
 8009a96:	f7ff feb1 	bl	80097fc <_free_r>
 8009a9a:	230c      	movs	r3, #12
 8009a9c:	f8ca 3000 	str.w	r3, [sl]
 8009aa0:	89a3      	ldrh	r3, [r4, #12]
 8009aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8009aa6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009aaa:	81a3      	strh	r3, [r4, #12]
 8009aac:	e7e9      	b.n	8009a82 <__ssputs_r+0x8a>
	...

08009ab0 <_svfiprintf_r>:
 8009ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ab4:	4698      	mov	r8, r3
 8009ab6:	898b      	ldrh	r3, [r1, #12]
 8009ab8:	4607      	mov	r7, r0
 8009aba:	061b      	lsls	r3, r3, #24
 8009abc:	460d      	mov	r5, r1
 8009abe:	4614      	mov	r4, r2
 8009ac0:	b09d      	sub	sp, #116	@ 0x74
 8009ac2:	d510      	bpl.n	8009ae6 <_svfiprintf_r+0x36>
 8009ac4:	690b      	ldr	r3, [r1, #16]
 8009ac6:	b973      	cbnz	r3, 8009ae6 <_svfiprintf_r+0x36>
 8009ac8:	2140      	movs	r1, #64	@ 0x40
 8009aca:	f7ff ff09 	bl	80098e0 <_malloc_r>
 8009ace:	6028      	str	r0, [r5, #0]
 8009ad0:	6128      	str	r0, [r5, #16]
 8009ad2:	b930      	cbnz	r0, 8009ae2 <_svfiprintf_r+0x32>
 8009ad4:	230c      	movs	r3, #12
 8009ad6:	603b      	str	r3, [r7, #0]
 8009ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8009adc:	b01d      	add	sp, #116	@ 0x74
 8009ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ae2:	2340      	movs	r3, #64	@ 0x40
 8009ae4:	616b      	str	r3, [r5, #20]
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	9309      	str	r3, [sp, #36]	@ 0x24
 8009aea:	2320      	movs	r3, #32
 8009aec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009af0:	2330      	movs	r3, #48	@ 0x30
 8009af2:	f04f 0901 	mov.w	r9, #1
 8009af6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009afa:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009c94 <_svfiprintf_r+0x1e4>
 8009afe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009b02:	4623      	mov	r3, r4
 8009b04:	469a      	mov	sl, r3
 8009b06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b0a:	b10a      	cbz	r2, 8009b10 <_svfiprintf_r+0x60>
 8009b0c:	2a25      	cmp	r2, #37	@ 0x25
 8009b0e:	d1f9      	bne.n	8009b04 <_svfiprintf_r+0x54>
 8009b10:	ebba 0b04 	subs.w	fp, sl, r4
 8009b14:	d00b      	beq.n	8009b2e <_svfiprintf_r+0x7e>
 8009b16:	465b      	mov	r3, fp
 8009b18:	4622      	mov	r2, r4
 8009b1a:	4629      	mov	r1, r5
 8009b1c:	4638      	mov	r0, r7
 8009b1e:	f7ff ff6b 	bl	80099f8 <__ssputs_r>
 8009b22:	3001      	adds	r0, #1
 8009b24:	f000 80a7 	beq.w	8009c76 <_svfiprintf_r+0x1c6>
 8009b28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b2a:	445a      	add	r2, fp
 8009b2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8009b2e:	f89a 3000 	ldrb.w	r3, [sl]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	f000 809f 	beq.w	8009c76 <_svfiprintf_r+0x1c6>
 8009b38:	2300      	movs	r3, #0
 8009b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8009b3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b42:	f10a 0a01 	add.w	sl, sl, #1
 8009b46:	9304      	str	r3, [sp, #16]
 8009b48:	9307      	str	r3, [sp, #28]
 8009b4a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009b4e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009b50:	4654      	mov	r4, sl
 8009b52:	2205      	movs	r2, #5
 8009b54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b58:	484e      	ldr	r0, [pc, #312]	@ (8009c94 <_svfiprintf_r+0x1e4>)
 8009b5a:	f000 fccd 	bl	800a4f8 <memchr>
 8009b5e:	9a04      	ldr	r2, [sp, #16]
 8009b60:	b9d8      	cbnz	r0, 8009b9a <_svfiprintf_r+0xea>
 8009b62:	06d0      	lsls	r0, r2, #27
 8009b64:	bf44      	itt	mi
 8009b66:	2320      	movmi	r3, #32
 8009b68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b6c:	0711      	lsls	r1, r2, #28
 8009b6e:	bf44      	itt	mi
 8009b70:	232b      	movmi	r3, #43	@ 0x2b
 8009b72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b76:	f89a 3000 	ldrb.w	r3, [sl]
 8009b7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b7c:	d015      	beq.n	8009baa <_svfiprintf_r+0xfa>
 8009b7e:	4654      	mov	r4, sl
 8009b80:	2000      	movs	r0, #0
 8009b82:	f04f 0c0a 	mov.w	ip, #10
 8009b86:	9a07      	ldr	r2, [sp, #28]
 8009b88:	4621      	mov	r1, r4
 8009b8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b8e:	3b30      	subs	r3, #48	@ 0x30
 8009b90:	2b09      	cmp	r3, #9
 8009b92:	d94b      	bls.n	8009c2c <_svfiprintf_r+0x17c>
 8009b94:	b1b0      	cbz	r0, 8009bc4 <_svfiprintf_r+0x114>
 8009b96:	9207      	str	r2, [sp, #28]
 8009b98:	e014      	b.n	8009bc4 <_svfiprintf_r+0x114>
 8009b9a:	eba0 0308 	sub.w	r3, r0, r8
 8009b9e:	fa09 f303 	lsl.w	r3, r9, r3
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	46a2      	mov	sl, r4
 8009ba6:	9304      	str	r3, [sp, #16]
 8009ba8:	e7d2      	b.n	8009b50 <_svfiprintf_r+0xa0>
 8009baa:	9b03      	ldr	r3, [sp, #12]
 8009bac:	1d19      	adds	r1, r3, #4
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	9103      	str	r1, [sp, #12]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	bfbb      	ittet	lt
 8009bb6:	425b      	neglt	r3, r3
 8009bb8:	f042 0202 	orrlt.w	r2, r2, #2
 8009bbc:	9307      	strge	r3, [sp, #28]
 8009bbe:	9307      	strlt	r3, [sp, #28]
 8009bc0:	bfb8      	it	lt
 8009bc2:	9204      	strlt	r2, [sp, #16]
 8009bc4:	7823      	ldrb	r3, [r4, #0]
 8009bc6:	2b2e      	cmp	r3, #46	@ 0x2e
 8009bc8:	d10a      	bne.n	8009be0 <_svfiprintf_r+0x130>
 8009bca:	7863      	ldrb	r3, [r4, #1]
 8009bcc:	2b2a      	cmp	r3, #42	@ 0x2a
 8009bce:	d132      	bne.n	8009c36 <_svfiprintf_r+0x186>
 8009bd0:	9b03      	ldr	r3, [sp, #12]
 8009bd2:	3402      	adds	r4, #2
 8009bd4:	1d1a      	adds	r2, r3, #4
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	9203      	str	r2, [sp, #12]
 8009bda:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009bde:	9305      	str	r3, [sp, #20]
 8009be0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009c98 <_svfiprintf_r+0x1e8>
 8009be4:	2203      	movs	r2, #3
 8009be6:	4650      	mov	r0, sl
 8009be8:	7821      	ldrb	r1, [r4, #0]
 8009bea:	f000 fc85 	bl	800a4f8 <memchr>
 8009bee:	b138      	cbz	r0, 8009c00 <_svfiprintf_r+0x150>
 8009bf0:	2240      	movs	r2, #64	@ 0x40
 8009bf2:	9b04      	ldr	r3, [sp, #16]
 8009bf4:	eba0 000a 	sub.w	r0, r0, sl
 8009bf8:	4082      	lsls	r2, r0
 8009bfa:	4313      	orrs	r3, r2
 8009bfc:	3401      	adds	r4, #1
 8009bfe:	9304      	str	r3, [sp, #16]
 8009c00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c04:	2206      	movs	r2, #6
 8009c06:	4825      	ldr	r0, [pc, #148]	@ (8009c9c <_svfiprintf_r+0x1ec>)
 8009c08:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009c0c:	f000 fc74 	bl	800a4f8 <memchr>
 8009c10:	2800      	cmp	r0, #0
 8009c12:	d036      	beq.n	8009c82 <_svfiprintf_r+0x1d2>
 8009c14:	4b22      	ldr	r3, [pc, #136]	@ (8009ca0 <_svfiprintf_r+0x1f0>)
 8009c16:	bb1b      	cbnz	r3, 8009c60 <_svfiprintf_r+0x1b0>
 8009c18:	9b03      	ldr	r3, [sp, #12]
 8009c1a:	3307      	adds	r3, #7
 8009c1c:	f023 0307 	bic.w	r3, r3, #7
 8009c20:	3308      	adds	r3, #8
 8009c22:	9303      	str	r3, [sp, #12]
 8009c24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c26:	4433      	add	r3, r6
 8009c28:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c2a:	e76a      	b.n	8009b02 <_svfiprintf_r+0x52>
 8009c2c:	460c      	mov	r4, r1
 8009c2e:	2001      	movs	r0, #1
 8009c30:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c34:	e7a8      	b.n	8009b88 <_svfiprintf_r+0xd8>
 8009c36:	2300      	movs	r3, #0
 8009c38:	f04f 0c0a 	mov.w	ip, #10
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	3401      	adds	r4, #1
 8009c40:	9305      	str	r3, [sp, #20]
 8009c42:	4620      	mov	r0, r4
 8009c44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c48:	3a30      	subs	r2, #48	@ 0x30
 8009c4a:	2a09      	cmp	r2, #9
 8009c4c:	d903      	bls.n	8009c56 <_svfiprintf_r+0x1a6>
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d0c6      	beq.n	8009be0 <_svfiprintf_r+0x130>
 8009c52:	9105      	str	r1, [sp, #20]
 8009c54:	e7c4      	b.n	8009be0 <_svfiprintf_r+0x130>
 8009c56:	4604      	mov	r4, r0
 8009c58:	2301      	movs	r3, #1
 8009c5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c5e:	e7f0      	b.n	8009c42 <_svfiprintf_r+0x192>
 8009c60:	ab03      	add	r3, sp, #12
 8009c62:	9300      	str	r3, [sp, #0]
 8009c64:	462a      	mov	r2, r5
 8009c66:	4638      	mov	r0, r7
 8009c68:	4b0e      	ldr	r3, [pc, #56]	@ (8009ca4 <_svfiprintf_r+0x1f4>)
 8009c6a:	a904      	add	r1, sp, #16
 8009c6c:	f3af 8000 	nop.w
 8009c70:	1c42      	adds	r2, r0, #1
 8009c72:	4606      	mov	r6, r0
 8009c74:	d1d6      	bne.n	8009c24 <_svfiprintf_r+0x174>
 8009c76:	89ab      	ldrh	r3, [r5, #12]
 8009c78:	065b      	lsls	r3, r3, #25
 8009c7a:	f53f af2d 	bmi.w	8009ad8 <_svfiprintf_r+0x28>
 8009c7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c80:	e72c      	b.n	8009adc <_svfiprintf_r+0x2c>
 8009c82:	ab03      	add	r3, sp, #12
 8009c84:	9300      	str	r3, [sp, #0]
 8009c86:	462a      	mov	r2, r5
 8009c88:	4638      	mov	r0, r7
 8009c8a:	4b06      	ldr	r3, [pc, #24]	@ (8009ca4 <_svfiprintf_r+0x1f4>)
 8009c8c:	a904      	add	r1, sp, #16
 8009c8e:	f000 f9bd 	bl	800a00c <_printf_i>
 8009c92:	e7ed      	b.n	8009c70 <_svfiprintf_r+0x1c0>
 8009c94:	0800c09a 	.word	0x0800c09a
 8009c98:	0800c0a0 	.word	0x0800c0a0
 8009c9c:	0800c0a4 	.word	0x0800c0a4
 8009ca0:	00000000 	.word	0x00000000
 8009ca4:	080099f9 	.word	0x080099f9

08009ca8 <__sfputc_r>:
 8009ca8:	6893      	ldr	r3, [r2, #8]
 8009caa:	b410      	push	{r4}
 8009cac:	3b01      	subs	r3, #1
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	6093      	str	r3, [r2, #8]
 8009cb2:	da07      	bge.n	8009cc4 <__sfputc_r+0x1c>
 8009cb4:	6994      	ldr	r4, [r2, #24]
 8009cb6:	42a3      	cmp	r3, r4
 8009cb8:	db01      	blt.n	8009cbe <__sfputc_r+0x16>
 8009cba:	290a      	cmp	r1, #10
 8009cbc:	d102      	bne.n	8009cc4 <__sfputc_r+0x1c>
 8009cbe:	bc10      	pop	{r4}
 8009cc0:	f7ff bc8b 	b.w	80095da <__swbuf_r>
 8009cc4:	6813      	ldr	r3, [r2, #0]
 8009cc6:	1c58      	adds	r0, r3, #1
 8009cc8:	6010      	str	r0, [r2, #0]
 8009cca:	7019      	strb	r1, [r3, #0]
 8009ccc:	4608      	mov	r0, r1
 8009cce:	bc10      	pop	{r4}
 8009cd0:	4770      	bx	lr

08009cd2 <__sfputs_r>:
 8009cd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cd4:	4606      	mov	r6, r0
 8009cd6:	460f      	mov	r7, r1
 8009cd8:	4614      	mov	r4, r2
 8009cda:	18d5      	adds	r5, r2, r3
 8009cdc:	42ac      	cmp	r4, r5
 8009cde:	d101      	bne.n	8009ce4 <__sfputs_r+0x12>
 8009ce0:	2000      	movs	r0, #0
 8009ce2:	e007      	b.n	8009cf4 <__sfputs_r+0x22>
 8009ce4:	463a      	mov	r2, r7
 8009ce6:	4630      	mov	r0, r6
 8009ce8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cec:	f7ff ffdc 	bl	8009ca8 <__sfputc_r>
 8009cf0:	1c43      	adds	r3, r0, #1
 8009cf2:	d1f3      	bne.n	8009cdc <__sfputs_r+0xa>
 8009cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009cf8 <_vfiprintf_r>:
 8009cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cfc:	460d      	mov	r5, r1
 8009cfe:	4614      	mov	r4, r2
 8009d00:	4698      	mov	r8, r3
 8009d02:	4606      	mov	r6, r0
 8009d04:	b09d      	sub	sp, #116	@ 0x74
 8009d06:	b118      	cbz	r0, 8009d10 <_vfiprintf_r+0x18>
 8009d08:	6a03      	ldr	r3, [r0, #32]
 8009d0a:	b90b      	cbnz	r3, 8009d10 <_vfiprintf_r+0x18>
 8009d0c:	f7ff faa8 	bl	8009260 <__sinit>
 8009d10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d12:	07d9      	lsls	r1, r3, #31
 8009d14:	d405      	bmi.n	8009d22 <_vfiprintf_r+0x2a>
 8009d16:	89ab      	ldrh	r3, [r5, #12]
 8009d18:	059a      	lsls	r2, r3, #22
 8009d1a:	d402      	bmi.n	8009d22 <_vfiprintf_r+0x2a>
 8009d1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d1e:	f7ff fd6a 	bl	80097f6 <__retarget_lock_acquire_recursive>
 8009d22:	89ab      	ldrh	r3, [r5, #12]
 8009d24:	071b      	lsls	r3, r3, #28
 8009d26:	d501      	bpl.n	8009d2c <_vfiprintf_r+0x34>
 8009d28:	692b      	ldr	r3, [r5, #16]
 8009d2a:	b99b      	cbnz	r3, 8009d54 <_vfiprintf_r+0x5c>
 8009d2c:	4629      	mov	r1, r5
 8009d2e:	4630      	mov	r0, r6
 8009d30:	f7ff fc92 	bl	8009658 <__swsetup_r>
 8009d34:	b170      	cbz	r0, 8009d54 <_vfiprintf_r+0x5c>
 8009d36:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d38:	07dc      	lsls	r4, r3, #31
 8009d3a:	d504      	bpl.n	8009d46 <_vfiprintf_r+0x4e>
 8009d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d40:	b01d      	add	sp, #116	@ 0x74
 8009d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d46:	89ab      	ldrh	r3, [r5, #12]
 8009d48:	0598      	lsls	r0, r3, #22
 8009d4a:	d4f7      	bmi.n	8009d3c <_vfiprintf_r+0x44>
 8009d4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d4e:	f7ff fd53 	bl	80097f8 <__retarget_lock_release_recursive>
 8009d52:	e7f3      	b.n	8009d3c <_vfiprintf_r+0x44>
 8009d54:	2300      	movs	r3, #0
 8009d56:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d58:	2320      	movs	r3, #32
 8009d5a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009d5e:	2330      	movs	r3, #48	@ 0x30
 8009d60:	f04f 0901 	mov.w	r9, #1
 8009d64:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d68:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009f14 <_vfiprintf_r+0x21c>
 8009d6c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009d70:	4623      	mov	r3, r4
 8009d72:	469a      	mov	sl, r3
 8009d74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d78:	b10a      	cbz	r2, 8009d7e <_vfiprintf_r+0x86>
 8009d7a:	2a25      	cmp	r2, #37	@ 0x25
 8009d7c:	d1f9      	bne.n	8009d72 <_vfiprintf_r+0x7a>
 8009d7e:	ebba 0b04 	subs.w	fp, sl, r4
 8009d82:	d00b      	beq.n	8009d9c <_vfiprintf_r+0xa4>
 8009d84:	465b      	mov	r3, fp
 8009d86:	4622      	mov	r2, r4
 8009d88:	4629      	mov	r1, r5
 8009d8a:	4630      	mov	r0, r6
 8009d8c:	f7ff ffa1 	bl	8009cd2 <__sfputs_r>
 8009d90:	3001      	adds	r0, #1
 8009d92:	f000 80a7 	beq.w	8009ee4 <_vfiprintf_r+0x1ec>
 8009d96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d98:	445a      	add	r2, fp
 8009d9a:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d9c:	f89a 3000 	ldrb.w	r3, [sl]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	f000 809f 	beq.w	8009ee4 <_vfiprintf_r+0x1ec>
 8009da6:	2300      	movs	r3, #0
 8009da8:	f04f 32ff 	mov.w	r2, #4294967295
 8009dac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009db0:	f10a 0a01 	add.w	sl, sl, #1
 8009db4:	9304      	str	r3, [sp, #16]
 8009db6:	9307      	str	r3, [sp, #28]
 8009db8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009dbc:	931a      	str	r3, [sp, #104]	@ 0x68
 8009dbe:	4654      	mov	r4, sl
 8009dc0:	2205      	movs	r2, #5
 8009dc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dc6:	4853      	ldr	r0, [pc, #332]	@ (8009f14 <_vfiprintf_r+0x21c>)
 8009dc8:	f000 fb96 	bl	800a4f8 <memchr>
 8009dcc:	9a04      	ldr	r2, [sp, #16]
 8009dce:	b9d8      	cbnz	r0, 8009e08 <_vfiprintf_r+0x110>
 8009dd0:	06d1      	lsls	r1, r2, #27
 8009dd2:	bf44      	itt	mi
 8009dd4:	2320      	movmi	r3, #32
 8009dd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009dda:	0713      	lsls	r3, r2, #28
 8009ddc:	bf44      	itt	mi
 8009dde:	232b      	movmi	r3, #43	@ 0x2b
 8009de0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009de4:	f89a 3000 	ldrb.w	r3, [sl]
 8009de8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009dea:	d015      	beq.n	8009e18 <_vfiprintf_r+0x120>
 8009dec:	4654      	mov	r4, sl
 8009dee:	2000      	movs	r0, #0
 8009df0:	f04f 0c0a 	mov.w	ip, #10
 8009df4:	9a07      	ldr	r2, [sp, #28]
 8009df6:	4621      	mov	r1, r4
 8009df8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009dfc:	3b30      	subs	r3, #48	@ 0x30
 8009dfe:	2b09      	cmp	r3, #9
 8009e00:	d94b      	bls.n	8009e9a <_vfiprintf_r+0x1a2>
 8009e02:	b1b0      	cbz	r0, 8009e32 <_vfiprintf_r+0x13a>
 8009e04:	9207      	str	r2, [sp, #28]
 8009e06:	e014      	b.n	8009e32 <_vfiprintf_r+0x13a>
 8009e08:	eba0 0308 	sub.w	r3, r0, r8
 8009e0c:	fa09 f303 	lsl.w	r3, r9, r3
 8009e10:	4313      	orrs	r3, r2
 8009e12:	46a2      	mov	sl, r4
 8009e14:	9304      	str	r3, [sp, #16]
 8009e16:	e7d2      	b.n	8009dbe <_vfiprintf_r+0xc6>
 8009e18:	9b03      	ldr	r3, [sp, #12]
 8009e1a:	1d19      	adds	r1, r3, #4
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	9103      	str	r1, [sp, #12]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	bfbb      	ittet	lt
 8009e24:	425b      	neglt	r3, r3
 8009e26:	f042 0202 	orrlt.w	r2, r2, #2
 8009e2a:	9307      	strge	r3, [sp, #28]
 8009e2c:	9307      	strlt	r3, [sp, #28]
 8009e2e:	bfb8      	it	lt
 8009e30:	9204      	strlt	r2, [sp, #16]
 8009e32:	7823      	ldrb	r3, [r4, #0]
 8009e34:	2b2e      	cmp	r3, #46	@ 0x2e
 8009e36:	d10a      	bne.n	8009e4e <_vfiprintf_r+0x156>
 8009e38:	7863      	ldrb	r3, [r4, #1]
 8009e3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e3c:	d132      	bne.n	8009ea4 <_vfiprintf_r+0x1ac>
 8009e3e:	9b03      	ldr	r3, [sp, #12]
 8009e40:	3402      	adds	r4, #2
 8009e42:	1d1a      	adds	r2, r3, #4
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	9203      	str	r2, [sp, #12]
 8009e48:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009e4c:	9305      	str	r3, [sp, #20]
 8009e4e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009f18 <_vfiprintf_r+0x220>
 8009e52:	2203      	movs	r2, #3
 8009e54:	4650      	mov	r0, sl
 8009e56:	7821      	ldrb	r1, [r4, #0]
 8009e58:	f000 fb4e 	bl	800a4f8 <memchr>
 8009e5c:	b138      	cbz	r0, 8009e6e <_vfiprintf_r+0x176>
 8009e5e:	2240      	movs	r2, #64	@ 0x40
 8009e60:	9b04      	ldr	r3, [sp, #16]
 8009e62:	eba0 000a 	sub.w	r0, r0, sl
 8009e66:	4082      	lsls	r2, r0
 8009e68:	4313      	orrs	r3, r2
 8009e6a:	3401      	adds	r4, #1
 8009e6c:	9304      	str	r3, [sp, #16]
 8009e6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e72:	2206      	movs	r2, #6
 8009e74:	4829      	ldr	r0, [pc, #164]	@ (8009f1c <_vfiprintf_r+0x224>)
 8009e76:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009e7a:	f000 fb3d 	bl	800a4f8 <memchr>
 8009e7e:	2800      	cmp	r0, #0
 8009e80:	d03f      	beq.n	8009f02 <_vfiprintf_r+0x20a>
 8009e82:	4b27      	ldr	r3, [pc, #156]	@ (8009f20 <_vfiprintf_r+0x228>)
 8009e84:	bb1b      	cbnz	r3, 8009ece <_vfiprintf_r+0x1d6>
 8009e86:	9b03      	ldr	r3, [sp, #12]
 8009e88:	3307      	adds	r3, #7
 8009e8a:	f023 0307 	bic.w	r3, r3, #7
 8009e8e:	3308      	adds	r3, #8
 8009e90:	9303      	str	r3, [sp, #12]
 8009e92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e94:	443b      	add	r3, r7
 8009e96:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e98:	e76a      	b.n	8009d70 <_vfiprintf_r+0x78>
 8009e9a:	460c      	mov	r4, r1
 8009e9c:	2001      	movs	r0, #1
 8009e9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ea2:	e7a8      	b.n	8009df6 <_vfiprintf_r+0xfe>
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	f04f 0c0a 	mov.w	ip, #10
 8009eaa:	4619      	mov	r1, r3
 8009eac:	3401      	adds	r4, #1
 8009eae:	9305      	str	r3, [sp, #20]
 8009eb0:	4620      	mov	r0, r4
 8009eb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009eb6:	3a30      	subs	r2, #48	@ 0x30
 8009eb8:	2a09      	cmp	r2, #9
 8009eba:	d903      	bls.n	8009ec4 <_vfiprintf_r+0x1cc>
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d0c6      	beq.n	8009e4e <_vfiprintf_r+0x156>
 8009ec0:	9105      	str	r1, [sp, #20]
 8009ec2:	e7c4      	b.n	8009e4e <_vfiprintf_r+0x156>
 8009ec4:	4604      	mov	r4, r0
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ecc:	e7f0      	b.n	8009eb0 <_vfiprintf_r+0x1b8>
 8009ece:	ab03      	add	r3, sp, #12
 8009ed0:	9300      	str	r3, [sp, #0]
 8009ed2:	462a      	mov	r2, r5
 8009ed4:	4630      	mov	r0, r6
 8009ed6:	4b13      	ldr	r3, [pc, #76]	@ (8009f24 <_vfiprintf_r+0x22c>)
 8009ed8:	a904      	add	r1, sp, #16
 8009eda:	f3af 8000 	nop.w
 8009ede:	4607      	mov	r7, r0
 8009ee0:	1c78      	adds	r0, r7, #1
 8009ee2:	d1d6      	bne.n	8009e92 <_vfiprintf_r+0x19a>
 8009ee4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ee6:	07d9      	lsls	r1, r3, #31
 8009ee8:	d405      	bmi.n	8009ef6 <_vfiprintf_r+0x1fe>
 8009eea:	89ab      	ldrh	r3, [r5, #12]
 8009eec:	059a      	lsls	r2, r3, #22
 8009eee:	d402      	bmi.n	8009ef6 <_vfiprintf_r+0x1fe>
 8009ef0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009ef2:	f7ff fc81 	bl	80097f8 <__retarget_lock_release_recursive>
 8009ef6:	89ab      	ldrh	r3, [r5, #12]
 8009ef8:	065b      	lsls	r3, r3, #25
 8009efa:	f53f af1f 	bmi.w	8009d3c <_vfiprintf_r+0x44>
 8009efe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009f00:	e71e      	b.n	8009d40 <_vfiprintf_r+0x48>
 8009f02:	ab03      	add	r3, sp, #12
 8009f04:	9300      	str	r3, [sp, #0]
 8009f06:	462a      	mov	r2, r5
 8009f08:	4630      	mov	r0, r6
 8009f0a:	4b06      	ldr	r3, [pc, #24]	@ (8009f24 <_vfiprintf_r+0x22c>)
 8009f0c:	a904      	add	r1, sp, #16
 8009f0e:	f000 f87d 	bl	800a00c <_printf_i>
 8009f12:	e7e4      	b.n	8009ede <_vfiprintf_r+0x1e6>
 8009f14:	0800c09a 	.word	0x0800c09a
 8009f18:	0800c0a0 	.word	0x0800c0a0
 8009f1c:	0800c0a4 	.word	0x0800c0a4
 8009f20:	00000000 	.word	0x00000000
 8009f24:	08009cd3 	.word	0x08009cd3

08009f28 <_printf_common>:
 8009f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f2c:	4616      	mov	r6, r2
 8009f2e:	4698      	mov	r8, r3
 8009f30:	688a      	ldr	r2, [r1, #8]
 8009f32:	690b      	ldr	r3, [r1, #16]
 8009f34:	4607      	mov	r7, r0
 8009f36:	4293      	cmp	r3, r2
 8009f38:	bfb8      	it	lt
 8009f3a:	4613      	movlt	r3, r2
 8009f3c:	6033      	str	r3, [r6, #0]
 8009f3e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009f42:	460c      	mov	r4, r1
 8009f44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009f48:	b10a      	cbz	r2, 8009f4e <_printf_common+0x26>
 8009f4a:	3301      	adds	r3, #1
 8009f4c:	6033      	str	r3, [r6, #0]
 8009f4e:	6823      	ldr	r3, [r4, #0]
 8009f50:	0699      	lsls	r1, r3, #26
 8009f52:	bf42      	ittt	mi
 8009f54:	6833      	ldrmi	r3, [r6, #0]
 8009f56:	3302      	addmi	r3, #2
 8009f58:	6033      	strmi	r3, [r6, #0]
 8009f5a:	6825      	ldr	r5, [r4, #0]
 8009f5c:	f015 0506 	ands.w	r5, r5, #6
 8009f60:	d106      	bne.n	8009f70 <_printf_common+0x48>
 8009f62:	f104 0a19 	add.w	sl, r4, #25
 8009f66:	68e3      	ldr	r3, [r4, #12]
 8009f68:	6832      	ldr	r2, [r6, #0]
 8009f6a:	1a9b      	subs	r3, r3, r2
 8009f6c:	42ab      	cmp	r3, r5
 8009f6e:	dc2b      	bgt.n	8009fc8 <_printf_common+0xa0>
 8009f70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009f74:	6822      	ldr	r2, [r4, #0]
 8009f76:	3b00      	subs	r3, #0
 8009f78:	bf18      	it	ne
 8009f7a:	2301      	movne	r3, #1
 8009f7c:	0692      	lsls	r2, r2, #26
 8009f7e:	d430      	bmi.n	8009fe2 <_printf_common+0xba>
 8009f80:	4641      	mov	r1, r8
 8009f82:	4638      	mov	r0, r7
 8009f84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009f88:	47c8      	blx	r9
 8009f8a:	3001      	adds	r0, #1
 8009f8c:	d023      	beq.n	8009fd6 <_printf_common+0xae>
 8009f8e:	6823      	ldr	r3, [r4, #0]
 8009f90:	6922      	ldr	r2, [r4, #16]
 8009f92:	f003 0306 	and.w	r3, r3, #6
 8009f96:	2b04      	cmp	r3, #4
 8009f98:	bf14      	ite	ne
 8009f9a:	2500      	movne	r5, #0
 8009f9c:	6833      	ldreq	r3, [r6, #0]
 8009f9e:	f04f 0600 	mov.w	r6, #0
 8009fa2:	bf08      	it	eq
 8009fa4:	68e5      	ldreq	r5, [r4, #12]
 8009fa6:	f104 041a 	add.w	r4, r4, #26
 8009faa:	bf08      	it	eq
 8009fac:	1aed      	subeq	r5, r5, r3
 8009fae:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009fb2:	bf08      	it	eq
 8009fb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	bfc4      	itt	gt
 8009fbc:	1a9b      	subgt	r3, r3, r2
 8009fbe:	18ed      	addgt	r5, r5, r3
 8009fc0:	42b5      	cmp	r5, r6
 8009fc2:	d11a      	bne.n	8009ffa <_printf_common+0xd2>
 8009fc4:	2000      	movs	r0, #0
 8009fc6:	e008      	b.n	8009fda <_printf_common+0xb2>
 8009fc8:	2301      	movs	r3, #1
 8009fca:	4652      	mov	r2, sl
 8009fcc:	4641      	mov	r1, r8
 8009fce:	4638      	mov	r0, r7
 8009fd0:	47c8      	blx	r9
 8009fd2:	3001      	adds	r0, #1
 8009fd4:	d103      	bne.n	8009fde <_printf_common+0xb6>
 8009fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8009fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fde:	3501      	adds	r5, #1
 8009fe0:	e7c1      	b.n	8009f66 <_printf_common+0x3e>
 8009fe2:	2030      	movs	r0, #48	@ 0x30
 8009fe4:	18e1      	adds	r1, r4, r3
 8009fe6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009fea:	1c5a      	adds	r2, r3, #1
 8009fec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009ff0:	4422      	add	r2, r4
 8009ff2:	3302      	adds	r3, #2
 8009ff4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009ff8:	e7c2      	b.n	8009f80 <_printf_common+0x58>
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	4622      	mov	r2, r4
 8009ffe:	4641      	mov	r1, r8
 800a000:	4638      	mov	r0, r7
 800a002:	47c8      	blx	r9
 800a004:	3001      	adds	r0, #1
 800a006:	d0e6      	beq.n	8009fd6 <_printf_common+0xae>
 800a008:	3601      	adds	r6, #1
 800a00a:	e7d9      	b.n	8009fc0 <_printf_common+0x98>

0800a00c <_printf_i>:
 800a00c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a010:	7e0f      	ldrb	r7, [r1, #24]
 800a012:	4691      	mov	r9, r2
 800a014:	2f78      	cmp	r7, #120	@ 0x78
 800a016:	4680      	mov	r8, r0
 800a018:	460c      	mov	r4, r1
 800a01a:	469a      	mov	sl, r3
 800a01c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a01e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a022:	d807      	bhi.n	800a034 <_printf_i+0x28>
 800a024:	2f62      	cmp	r7, #98	@ 0x62
 800a026:	d80a      	bhi.n	800a03e <_printf_i+0x32>
 800a028:	2f00      	cmp	r7, #0
 800a02a:	f000 80d3 	beq.w	800a1d4 <_printf_i+0x1c8>
 800a02e:	2f58      	cmp	r7, #88	@ 0x58
 800a030:	f000 80ba 	beq.w	800a1a8 <_printf_i+0x19c>
 800a034:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a038:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a03c:	e03a      	b.n	800a0b4 <_printf_i+0xa8>
 800a03e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a042:	2b15      	cmp	r3, #21
 800a044:	d8f6      	bhi.n	800a034 <_printf_i+0x28>
 800a046:	a101      	add	r1, pc, #4	@ (adr r1, 800a04c <_printf_i+0x40>)
 800a048:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a04c:	0800a0a5 	.word	0x0800a0a5
 800a050:	0800a0b9 	.word	0x0800a0b9
 800a054:	0800a035 	.word	0x0800a035
 800a058:	0800a035 	.word	0x0800a035
 800a05c:	0800a035 	.word	0x0800a035
 800a060:	0800a035 	.word	0x0800a035
 800a064:	0800a0b9 	.word	0x0800a0b9
 800a068:	0800a035 	.word	0x0800a035
 800a06c:	0800a035 	.word	0x0800a035
 800a070:	0800a035 	.word	0x0800a035
 800a074:	0800a035 	.word	0x0800a035
 800a078:	0800a1bb 	.word	0x0800a1bb
 800a07c:	0800a0e3 	.word	0x0800a0e3
 800a080:	0800a175 	.word	0x0800a175
 800a084:	0800a035 	.word	0x0800a035
 800a088:	0800a035 	.word	0x0800a035
 800a08c:	0800a1dd 	.word	0x0800a1dd
 800a090:	0800a035 	.word	0x0800a035
 800a094:	0800a0e3 	.word	0x0800a0e3
 800a098:	0800a035 	.word	0x0800a035
 800a09c:	0800a035 	.word	0x0800a035
 800a0a0:	0800a17d 	.word	0x0800a17d
 800a0a4:	6833      	ldr	r3, [r6, #0]
 800a0a6:	1d1a      	adds	r2, r3, #4
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	6032      	str	r2, [r6, #0]
 800a0ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a0b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	e09e      	b.n	800a1f6 <_printf_i+0x1ea>
 800a0b8:	6833      	ldr	r3, [r6, #0]
 800a0ba:	6820      	ldr	r0, [r4, #0]
 800a0bc:	1d19      	adds	r1, r3, #4
 800a0be:	6031      	str	r1, [r6, #0]
 800a0c0:	0606      	lsls	r6, r0, #24
 800a0c2:	d501      	bpl.n	800a0c8 <_printf_i+0xbc>
 800a0c4:	681d      	ldr	r5, [r3, #0]
 800a0c6:	e003      	b.n	800a0d0 <_printf_i+0xc4>
 800a0c8:	0645      	lsls	r5, r0, #25
 800a0ca:	d5fb      	bpl.n	800a0c4 <_printf_i+0xb8>
 800a0cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a0d0:	2d00      	cmp	r5, #0
 800a0d2:	da03      	bge.n	800a0dc <_printf_i+0xd0>
 800a0d4:	232d      	movs	r3, #45	@ 0x2d
 800a0d6:	426d      	negs	r5, r5
 800a0d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a0dc:	230a      	movs	r3, #10
 800a0de:	4859      	ldr	r0, [pc, #356]	@ (800a244 <_printf_i+0x238>)
 800a0e0:	e011      	b.n	800a106 <_printf_i+0xfa>
 800a0e2:	6821      	ldr	r1, [r4, #0]
 800a0e4:	6833      	ldr	r3, [r6, #0]
 800a0e6:	0608      	lsls	r0, r1, #24
 800a0e8:	f853 5b04 	ldr.w	r5, [r3], #4
 800a0ec:	d402      	bmi.n	800a0f4 <_printf_i+0xe8>
 800a0ee:	0649      	lsls	r1, r1, #25
 800a0f0:	bf48      	it	mi
 800a0f2:	b2ad      	uxthmi	r5, r5
 800a0f4:	2f6f      	cmp	r7, #111	@ 0x6f
 800a0f6:	6033      	str	r3, [r6, #0]
 800a0f8:	bf14      	ite	ne
 800a0fa:	230a      	movne	r3, #10
 800a0fc:	2308      	moveq	r3, #8
 800a0fe:	4851      	ldr	r0, [pc, #324]	@ (800a244 <_printf_i+0x238>)
 800a100:	2100      	movs	r1, #0
 800a102:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a106:	6866      	ldr	r6, [r4, #4]
 800a108:	2e00      	cmp	r6, #0
 800a10a:	bfa8      	it	ge
 800a10c:	6821      	ldrge	r1, [r4, #0]
 800a10e:	60a6      	str	r6, [r4, #8]
 800a110:	bfa4      	itt	ge
 800a112:	f021 0104 	bicge.w	r1, r1, #4
 800a116:	6021      	strge	r1, [r4, #0]
 800a118:	b90d      	cbnz	r5, 800a11e <_printf_i+0x112>
 800a11a:	2e00      	cmp	r6, #0
 800a11c:	d04b      	beq.n	800a1b6 <_printf_i+0x1aa>
 800a11e:	4616      	mov	r6, r2
 800a120:	fbb5 f1f3 	udiv	r1, r5, r3
 800a124:	fb03 5711 	mls	r7, r3, r1, r5
 800a128:	5dc7      	ldrb	r7, [r0, r7]
 800a12a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a12e:	462f      	mov	r7, r5
 800a130:	42bb      	cmp	r3, r7
 800a132:	460d      	mov	r5, r1
 800a134:	d9f4      	bls.n	800a120 <_printf_i+0x114>
 800a136:	2b08      	cmp	r3, #8
 800a138:	d10b      	bne.n	800a152 <_printf_i+0x146>
 800a13a:	6823      	ldr	r3, [r4, #0]
 800a13c:	07df      	lsls	r7, r3, #31
 800a13e:	d508      	bpl.n	800a152 <_printf_i+0x146>
 800a140:	6923      	ldr	r3, [r4, #16]
 800a142:	6861      	ldr	r1, [r4, #4]
 800a144:	4299      	cmp	r1, r3
 800a146:	bfde      	ittt	le
 800a148:	2330      	movle	r3, #48	@ 0x30
 800a14a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a14e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a152:	1b92      	subs	r2, r2, r6
 800a154:	6122      	str	r2, [r4, #16]
 800a156:	464b      	mov	r3, r9
 800a158:	4621      	mov	r1, r4
 800a15a:	4640      	mov	r0, r8
 800a15c:	f8cd a000 	str.w	sl, [sp]
 800a160:	aa03      	add	r2, sp, #12
 800a162:	f7ff fee1 	bl	8009f28 <_printf_common>
 800a166:	3001      	adds	r0, #1
 800a168:	d14a      	bne.n	800a200 <_printf_i+0x1f4>
 800a16a:	f04f 30ff 	mov.w	r0, #4294967295
 800a16e:	b004      	add	sp, #16
 800a170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a174:	6823      	ldr	r3, [r4, #0]
 800a176:	f043 0320 	orr.w	r3, r3, #32
 800a17a:	6023      	str	r3, [r4, #0]
 800a17c:	2778      	movs	r7, #120	@ 0x78
 800a17e:	4832      	ldr	r0, [pc, #200]	@ (800a248 <_printf_i+0x23c>)
 800a180:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a184:	6823      	ldr	r3, [r4, #0]
 800a186:	6831      	ldr	r1, [r6, #0]
 800a188:	061f      	lsls	r7, r3, #24
 800a18a:	f851 5b04 	ldr.w	r5, [r1], #4
 800a18e:	d402      	bmi.n	800a196 <_printf_i+0x18a>
 800a190:	065f      	lsls	r7, r3, #25
 800a192:	bf48      	it	mi
 800a194:	b2ad      	uxthmi	r5, r5
 800a196:	6031      	str	r1, [r6, #0]
 800a198:	07d9      	lsls	r1, r3, #31
 800a19a:	bf44      	itt	mi
 800a19c:	f043 0320 	orrmi.w	r3, r3, #32
 800a1a0:	6023      	strmi	r3, [r4, #0]
 800a1a2:	b11d      	cbz	r5, 800a1ac <_printf_i+0x1a0>
 800a1a4:	2310      	movs	r3, #16
 800a1a6:	e7ab      	b.n	800a100 <_printf_i+0xf4>
 800a1a8:	4826      	ldr	r0, [pc, #152]	@ (800a244 <_printf_i+0x238>)
 800a1aa:	e7e9      	b.n	800a180 <_printf_i+0x174>
 800a1ac:	6823      	ldr	r3, [r4, #0]
 800a1ae:	f023 0320 	bic.w	r3, r3, #32
 800a1b2:	6023      	str	r3, [r4, #0]
 800a1b4:	e7f6      	b.n	800a1a4 <_printf_i+0x198>
 800a1b6:	4616      	mov	r6, r2
 800a1b8:	e7bd      	b.n	800a136 <_printf_i+0x12a>
 800a1ba:	6833      	ldr	r3, [r6, #0]
 800a1bc:	6825      	ldr	r5, [r4, #0]
 800a1be:	1d18      	adds	r0, r3, #4
 800a1c0:	6961      	ldr	r1, [r4, #20]
 800a1c2:	6030      	str	r0, [r6, #0]
 800a1c4:	062e      	lsls	r6, r5, #24
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	d501      	bpl.n	800a1ce <_printf_i+0x1c2>
 800a1ca:	6019      	str	r1, [r3, #0]
 800a1cc:	e002      	b.n	800a1d4 <_printf_i+0x1c8>
 800a1ce:	0668      	lsls	r0, r5, #25
 800a1d0:	d5fb      	bpl.n	800a1ca <_printf_i+0x1be>
 800a1d2:	8019      	strh	r1, [r3, #0]
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	4616      	mov	r6, r2
 800a1d8:	6123      	str	r3, [r4, #16]
 800a1da:	e7bc      	b.n	800a156 <_printf_i+0x14a>
 800a1dc:	6833      	ldr	r3, [r6, #0]
 800a1de:	2100      	movs	r1, #0
 800a1e0:	1d1a      	adds	r2, r3, #4
 800a1e2:	6032      	str	r2, [r6, #0]
 800a1e4:	681e      	ldr	r6, [r3, #0]
 800a1e6:	6862      	ldr	r2, [r4, #4]
 800a1e8:	4630      	mov	r0, r6
 800a1ea:	f000 f985 	bl	800a4f8 <memchr>
 800a1ee:	b108      	cbz	r0, 800a1f4 <_printf_i+0x1e8>
 800a1f0:	1b80      	subs	r0, r0, r6
 800a1f2:	6060      	str	r0, [r4, #4]
 800a1f4:	6863      	ldr	r3, [r4, #4]
 800a1f6:	6123      	str	r3, [r4, #16]
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a1fe:	e7aa      	b.n	800a156 <_printf_i+0x14a>
 800a200:	4632      	mov	r2, r6
 800a202:	4649      	mov	r1, r9
 800a204:	4640      	mov	r0, r8
 800a206:	6923      	ldr	r3, [r4, #16]
 800a208:	47d0      	blx	sl
 800a20a:	3001      	adds	r0, #1
 800a20c:	d0ad      	beq.n	800a16a <_printf_i+0x15e>
 800a20e:	6823      	ldr	r3, [r4, #0]
 800a210:	079b      	lsls	r3, r3, #30
 800a212:	d413      	bmi.n	800a23c <_printf_i+0x230>
 800a214:	68e0      	ldr	r0, [r4, #12]
 800a216:	9b03      	ldr	r3, [sp, #12]
 800a218:	4298      	cmp	r0, r3
 800a21a:	bfb8      	it	lt
 800a21c:	4618      	movlt	r0, r3
 800a21e:	e7a6      	b.n	800a16e <_printf_i+0x162>
 800a220:	2301      	movs	r3, #1
 800a222:	4632      	mov	r2, r6
 800a224:	4649      	mov	r1, r9
 800a226:	4640      	mov	r0, r8
 800a228:	47d0      	blx	sl
 800a22a:	3001      	adds	r0, #1
 800a22c:	d09d      	beq.n	800a16a <_printf_i+0x15e>
 800a22e:	3501      	adds	r5, #1
 800a230:	68e3      	ldr	r3, [r4, #12]
 800a232:	9903      	ldr	r1, [sp, #12]
 800a234:	1a5b      	subs	r3, r3, r1
 800a236:	42ab      	cmp	r3, r5
 800a238:	dcf2      	bgt.n	800a220 <_printf_i+0x214>
 800a23a:	e7eb      	b.n	800a214 <_printf_i+0x208>
 800a23c:	2500      	movs	r5, #0
 800a23e:	f104 0619 	add.w	r6, r4, #25
 800a242:	e7f5      	b.n	800a230 <_printf_i+0x224>
 800a244:	0800c0ab 	.word	0x0800c0ab
 800a248:	0800c0bc 	.word	0x0800c0bc

0800a24c <__sflush_r>:
 800a24c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a252:	0716      	lsls	r6, r2, #28
 800a254:	4605      	mov	r5, r0
 800a256:	460c      	mov	r4, r1
 800a258:	d454      	bmi.n	800a304 <__sflush_r+0xb8>
 800a25a:	684b      	ldr	r3, [r1, #4]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	dc02      	bgt.n	800a266 <__sflush_r+0x1a>
 800a260:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a262:	2b00      	cmp	r3, #0
 800a264:	dd48      	ble.n	800a2f8 <__sflush_r+0xac>
 800a266:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a268:	2e00      	cmp	r6, #0
 800a26a:	d045      	beq.n	800a2f8 <__sflush_r+0xac>
 800a26c:	2300      	movs	r3, #0
 800a26e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a272:	682f      	ldr	r7, [r5, #0]
 800a274:	6a21      	ldr	r1, [r4, #32]
 800a276:	602b      	str	r3, [r5, #0]
 800a278:	d030      	beq.n	800a2dc <__sflush_r+0x90>
 800a27a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a27c:	89a3      	ldrh	r3, [r4, #12]
 800a27e:	0759      	lsls	r1, r3, #29
 800a280:	d505      	bpl.n	800a28e <__sflush_r+0x42>
 800a282:	6863      	ldr	r3, [r4, #4]
 800a284:	1ad2      	subs	r2, r2, r3
 800a286:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a288:	b10b      	cbz	r3, 800a28e <__sflush_r+0x42>
 800a28a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a28c:	1ad2      	subs	r2, r2, r3
 800a28e:	2300      	movs	r3, #0
 800a290:	4628      	mov	r0, r5
 800a292:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a294:	6a21      	ldr	r1, [r4, #32]
 800a296:	47b0      	blx	r6
 800a298:	1c43      	adds	r3, r0, #1
 800a29a:	89a3      	ldrh	r3, [r4, #12]
 800a29c:	d106      	bne.n	800a2ac <__sflush_r+0x60>
 800a29e:	6829      	ldr	r1, [r5, #0]
 800a2a0:	291d      	cmp	r1, #29
 800a2a2:	d82b      	bhi.n	800a2fc <__sflush_r+0xb0>
 800a2a4:	4a28      	ldr	r2, [pc, #160]	@ (800a348 <__sflush_r+0xfc>)
 800a2a6:	410a      	asrs	r2, r1
 800a2a8:	07d6      	lsls	r6, r2, #31
 800a2aa:	d427      	bmi.n	800a2fc <__sflush_r+0xb0>
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	6062      	str	r2, [r4, #4]
 800a2b0:	6922      	ldr	r2, [r4, #16]
 800a2b2:	04d9      	lsls	r1, r3, #19
 800a2b4:	6022      	str	r2, [r4, #0]
 800a2b6:	d504      	bpl.n	800a2c2 <__sflush_r+0x76>
 800a2b8:	1c42      	adds	r2, r0, #1
 800a2ba:	d101      	bne.n	800a2c0 <__sflush_r+0x74>
 800a2bc:	682b      	ldr	r3, [r5, #0]
 800a2be:	b903      	cbnz	r3, 800a2c2 <__sflush_r+0x76>
 800a2c0:	6560      	str	r0, [r4, #84]	@ 0x54
 800a2c2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a2c4:	602f      	str	r7, [r5, #0]
 800a2c6:	b1b9      	cbz	r1, 800a2f8 <__sflush_r+0xac>
 800a2c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a2cc:	4299      	cmp	r1, r3
 800a2ce:	d002      	beq.n	800a2d6 <__sflush_r+0x8a>
 800a2d0:	4628      	mov	r0, r5
 800a2d2:	f7ff fa93 	bl	80097fc <_free_r>
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	6363      	str	r3, [r4, #52]	@ 0x34
 800a2da:	e00d      	b.n	800a2f8 <__sflush_r+0xac>
 800a2dc:	2301      	movs	r3, #1
 800a2de:	4628      	mov	r0, r5
 800a2e0:	47b0      	blx	r6
 800a2e2:	4602      	mov	r2, r0
 800a2e4:	1c50      	adds	r0, r2, #1
 800a2e6:	d1c9      	bne.n	800a27c <__sflush_r+0x30>
 800a2e8:	682b      	ldr	r3, [r5, #0]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d0c6      	beq.n	800a27c <__sflush_r+0x30>
 800a2ee:	2b1d      	cmp	r3, #29
 800a2f0:	d001      	beq.n	800a2f6 <__sflush_r+0xaa>
 800a2f2:	2b16      	cmp	r3, #22
 800a2f4:	d11d      	bne.n	800a332 <__sflush_r+0xe6>
 800a2f6:	602f      	str	r7, [r5, #0]
 800a2f8:	2000      	movs	r0, #0
 800a2fa:	e021      	b.n	800a340 <__sflush_r+0xf4>
 800a2fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a300:	b21b      	sxth	r3, r3
 800a302:	e01a      	b.n	800a33a <__sflush_r+0xee>
 800a304:	690f      	ldr	r7, [r1, #16]
 800a306:	2f00      	cmp	r7, #0
 800a308:	d0f6      	beq.n	800a2f8 <__sflush_r+0xac>
 800a30a:	0793      	lsls	r3, r2, #30
 800a30c:	bf18      	it	ne
 800a30e:	2300      	movne	r3, #0
 800a310:	680e      	ldr	r6, [r1, #0]
 800a312:	bf08      	it	eq
 800a314:	694b      	ldreq	r3, [r1, #20]
 800a316:	1bf6      	subs	r6, r6, r7
 800a318:	600f      	str	r7, [r1, #0]
 800a31a:	608b      	str	r3, [r1, #8]
 800a31c:	2e00      	cmp	r6, #0
 800a31e:	ddeb      	ble.n	800a2f8 <__sflush_r+0xac>
 800a320:	4633      	mov	r3, r6
 800a322:	463a      	mov	r2, r7
 800a324:	4628      	mov	r0, r5
 800a326:	6a21      	ldr	r1, [r4, #32]
 800a328:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a32c:	47e0      	blx	ip
 800a32e:	2800      	cmp	r0, #0
 800a330:	dc07      	bgt.n	800a342 <__sflush_r+0xf6>
 800a332:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a336:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a33a:	f04f 30ff 	mov.w	r0, #4294967295
 800a33e:	81a3      	strh	r3, [r4, #12]
 800a340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a342:	4407      	add	r7, r0
 800a344:	1a36      	subs	r6, r6, r0
 800a346:	e7e9      	b.n	800a31c <__sflush_r+0xd0>
 800a348:	dfbffffe 	.word	0xdfbffffe

0800a34c <_fflush_r>:
 800a34c:	b538      	push	{r3, r4, r5, lr}
 800a34e:	690b      	ldr	r3, [r1, #16]
 800a350:	4605      	mov	r5, r0
 800a352:	460c      	mov	r4, r1
 800a354:	b913      	cbnz	r3, 800a35c <_fflush_r+0x10>
 800a356:	2500      	movs	r5, #0
 800a358:	4628      	mov	r0, r5
 800a35a:	bd38      	pop	{r3, r4, r5, pc}
 800a35c:	b118      	cbz	r0, 800a366 <_fflush_r+0x1a>
 800a35e:	6a03      	ldr	r3, [r0, #32]
 800a360:	b90b      	cbnz	r3, 800a366 <_fflush_r+0x1a>
 800a362:	f7fe ff7d 	bl	8009260 <__sinit>
 800a366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d0f3      	beq.n	800a356 <_fflush_r+0xa>
 800a36e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a370:	07d0      	lsls	r0, r2, #31
 800a372:	d404      	bmi.n	800a37e <_fflush_r+0x32>
 800a374:	0599      	lsls	r1, r3, #22
 800a376:	d402      	bmi.n	800a37e <_fflush_r+0x32>
 800a378:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a37a:	f7ff fa3c 	bl	80097f6 <__retarget_lock_acquire_recursive>
 800a37e:	4628      	mov	r0, r5
 800a380:	4621      	mov	r1, r4
 800a382:	f7ff ff63 	bl	800a24c <__sflush_r>
 800a386:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a388:	4605      	mov	r5, r0
 800a38a:	07da      	lsls	r2, r3, #31
 800a38c:	d4e4      	bmi.n	800a358 <_fflush_r+0xc>
 800a38e:	89a3      	ldrh	r3, [r4, #12]
 800a390:	059b      	lsls	r3, r3, #22
 800a392:	d4e1      	bmi.n	800a358 <_fflush_r+0xc>
 800a394:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a396:	f7ff fa2f 	bl	80097f8 <__retarget_lock_release_recursive>
 800a39a:	e7dd      	b.n	800a358 <_fflush_r+0xc>

0800a39c <__swhatbuf_r>:
 800a39c:	b570      	push	{r4, r5, r6, lr}
 800a39e:	460c      	mov	r4, r1
 800a3a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3a4:	4615      	mov	r5, r2
 800a3a6:	2900      	cmp	r1, #0
 800a3a8:	461e      	mov	r6, r3
 800a3aa:	b096      	sub	sp, #88	@ 0x58
 800a3ac:	da0c      	bge.n	800a3c8 <__swhatbuf_r+0x2c>
 800a3ae:	89a3      	ldrh	r3, [r4, #12]
 800a3b0:	2100      	movs	r1, #0
 800a3b2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a3b6:	bf14      	ite	ne
 800a3b8:	2340      	movne	r3, #64	@ 0x40
 800a3ba:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a3be:	2000      	movs	r0, #0
 800a3c0:	6031      	str	r1, [r6, #0]
 800a3c2:	602b      	str	r3, [r5, #0]
 800a3c4:	b016      	add	sp, #88	@ 0x58
 800a3c6:	bd70      	pop	{r4, r5, r6, pc}
 800a3c8:	466a      	mov	r2, sp
 800a3ca:	f000 f863 	bl	800a494 <_fstat_r>
 800a3ce:	2800      	cmp	r0, #0
 800a3d0:	dbed      	blt.n	800a3ae <__swhatbuf_r+0x12>
 800a3d2:	9901      	ldr	r1, [sp, #4]
 800a3d4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a3d8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a3dc:	4259      	negs	r1, r3
 800a3de:	4159      	adcs	r1, r3
 800a3e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a3e4:	e7eb      	b.n	800a3be <__swhatbuf_r+0x22>

0800a3e6 <__smakebuf_r>:
 800a3e6:	898b      	ldrh	r3, [r1, #12]
 800a3e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3ea:	079d      	lsls	r5, r3, #30
 800a3ec:	4606      	mov	r6, r0
 800a3ee:	460c      	mov	r4, r1
 800a3f0:	d507      	bpl.n	800a402 <__smakebuf_r+0x1c>
 800a3f2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a3f6:	6023      	str	r3, [r4, #0]
 800a3f8:	6123      	str	r3, [r4, #16]
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	6163      	str	r3, [r4, #20]
 800a3fe:	b003      	add	sp, #12
 800a400:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a402:	466a      	mov	r2, sp
 800a404:	ab01      	add	r3, sp, #4
 800a406:	f7ff ffc9 	bl	800a39c <__swhatbuf_r>
 800a40a:	9f00      	ldr	r7, [sp, #0]
 800a40c:	4605      	mov	r5, r0
 800a40e:	4639      	mov	r1, r7
 800a410:	4630      	mov	r0, r6
 800a412:	f7ff fa65 	bl	80098e0 <_malloc_r>
 800a416:	b948      	cbnz	r0, 800a42c <__smakebuf_r+0x46>
 800a418:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a41c:	059a      	lsls	r2, r3, #22
 800a41e:	d4ee      	bmi.n	800a3fe <__smakebuf_r+0x18>
 800a420:	f023 0303 	bic.w	r3, r3, #3
 800a424:	f043 0302 	orr.w	r3, r3, #2
 800a428:	81a3      	strh	r3, [r4, #12]
 800a42a:	e7e2      	b.n	800a3f2 <__smakebuf_r+0xc>
 800a42c:	89a3      	ldrh	r3, [r4, #12]
 800a42e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a432:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a436:	81a3      	strh	r3, [r4, #12]
 800a438:	9b01      	ldr	r3, [sp, #4]
 800a43a:	6020      	str	r0, [r4, #0]
 800a43c:	b15b      	cbz	r3, 800a456 <__smakebuf_r+0x70>
 800a43e:	4630      	mov	r0, r6
 800a440:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a444:	f000 f838 	bl	800a4b8 <_isatty_r>
 800a448:	b128      	cbz	r0, 800a456 <__smakebuf_r+0x70>
 800a44a:	89a3      	ldrh	r3, [r4, #12]
 800a44c:	f023 0303 	bic.w	r3, r3, #3
 800a450:	f043 0301 	orr.w	r3, r3, #1
 800a454:	81a3      	strh	r3, [r4, #12]
 800a456:	89a3      	ldrh	r3, [r4, #12]
 800a458:	431d      	orrs	r5, r3
 800a45a:	81a5      	strh	r5, [r4, #12]
 800a45c:	e7cf      	b.n	800a3fe <__smakebuf_r+0x18>

0800a45e <memmove>:
 800a45e:	4288      	cmp	r0, r1
 800a460:	b510      	push	{r4, lr}
 800a462:	eb01 0402 	add.w	r4, r1, r2
 800a466:	d902      	bls.n	800a46e <memmove+0x10>
 800a468:	4284      	cmp	r4, r0
 800a46a:	4623      	mov	r3, r4
 800a46c:	d807      	bhi.n	800a47e <memmove+0x20>
 800a46e:	1e43      	subs	r3, r0, #1
 800a470:	42a1      	cmp	r1, r4
 800a472:	d008      	beq.n	800a486 <memmove+0x28>
 800a474:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a478:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a47c:	e7f8      	b.n	800a470 <memmove+0x12>
 800a47e:	4601      	mov	r1, r0
 800a480:	4402      	add	r2, r0
 800a482:	428a      	cmp	r2, r1
 800a484:	d100      	bne.n	800a488 <memmove+0x2a>
 800a486:	bd10      	pop	{r4, pc}
 800a488:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a48c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a490:	e7f7      	b.n	800a482 <memmove+0x24>
	...

0800a494 <_fstat_r>:
 800a494:	b538      	push	{r3, r4, r5, lr}
 800a496:	2300      	movs	r3, #0
 800a498:	4d06      	ldr	r5, [pc, #24]	@ (800a4b4 <_fstat_r+0x20>)
 800a49a:	4604      	mov	r4, r0
 800a49c:	4608      	mov	r0, r1
 800a49e:	4611      	mov	r1, r2
 800a4a0:	602b      	str	r3, [r5, #0]
 800a4a2:	f7f9 fab8 	bl	8003a16 <_fstat>
 800a4a6:	1c43      	adds	r3, r0, #1
 800a4a8:	d102      	bne.n	800a4b0 <_fstat_r+0x1c>
 800a4aa:	682b      	ldr	r3, [r5, #0]
 800a4ac:	b103      	cbz	r3, 800a4b0 <_fstat_r+0x1c>
 800a4ae:	6023      	str	r3, [r4, #0]
 800a4b0:	bd38      	pop	{r3, r4, r5, pc}
 800a4b2:	bf00      	nop
 800a4b4:	200003f8 	.word	0x200003f8

0800a4b8 <_isatty_r>:
 800a4b8:	b538      	push	{r3, r4, r5, lr}
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	4d05      	ldr	r5, [pc, #20]	@ (800a4d4 <_isatty_r+0x1c>)
 800a4be:	4604      	mov	r4, r0
 800a4c0:	4608      	mov	r0, r1
 800a4c2:	602b      	str	r3, [r5, #0]
 800a4c4:	f7f9 fab6 	bl	8003a34 <_isatty>
 800a4c8:	1c43      	adds	r3, r0, #1
 800a4ca:	d102      	bne.n	800a4d2 <_isatty_r+0x1a>
 800a4cc:	682b      	ldr	r3, [r5, #0]
 800a4ce:	b103      	cbz	r3, 800a4d2 <_isatty_r+0x1a>
 800a4d0:	6023      	str	r3, [r4, #0]
 800a4d2:	bd38      	pop	{r3, r4, r5, pc}
 800a4d4:	200003f8 	.word	0x200003f8

0800a4d8 <_sbrk_r>:
 800a4d8:	b538      	push	{r3, r4, r5, lr}
 800a4da:	2300      	movs	r3, #0
 800a4dc:	4d05      	ldr	r5, [pc, #20]	@ (800a4f4 <_sbrk_r+0x1c>)
 800a4de:	4604      	mov	r4, r0
 800a4e0:	4608      	mov	r0, r1
 800a4e2:	602b      	str	r3, [r5, #0]
 800a4e4:	f7f9 fabc 	bl	8003a60 <_sbrk>
 800a4e8:	1c43      	adds	r3, r0, #1
 800a4ea:	d102      	bne.n	800a4f2 <_sbrk_r+0x1a>
 800a4ec:	682b      	ldr	r3, [r5, #0]
 800a4ee:	b103      	cbz	r3, 800a4f2 <_sbrk_r+0x1a>
 800a4f0:	6023      	str	r3, [r4, #0]
 800a4f2:	bd38      	pop	{r3, r4, r5, pc}
 800a4f4:	200003f8 	.word	0x200003f8

0800a4f8 <memchr>:
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	b510      	push	{r4, lr}
 800a4fc:	b2c9      	uxtb	r1, r1
 800a4fe:	4402      	add	r2, r0
 800a500:	4293      	cmp	r3, r2
 800a502:	4618      	mov	r0, r3
 800a504:	d101      	bne.n	800a50a <memchr+0x12>
 800a506:	2000      	movs	r0, #0
 800a508:	e003      	b.n	800a512 <memchr+0x1a>
 800a50a:	7804      	ldrb	r4, [r0, #0]
 800a50c:	3301      	adds	r3, #1
 800a50e:	428c      	cmp	r4, r1
 800a510:	d1f6      	bne.n	800a500 <memchr+0x8>
 800a512:	bd10      	pop	{r4, pc}

0800a514 <memcpy>:
 800a514:	440a      	add	r2, r1
 800a516:	4291      	cmp	r1, r2
 800a518:	f100 33ff 	add.w	r3, r0, #4294967295
 800a51c:	d100      	bne.n	800a520 <memcpy+0xc>
 800a51e:	4770      	bx	lr
 800a520:	b510      	push	{r4, lr}
 800a522:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a526:	4291      	cmp	r1, r2
 800a528:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a52c:	d1f9      	bne.n	800a522 <memcpy+0xe>
 800a52e:	bd10      	pop	{r4, pc}

0800a530 <_realloc_r>:
 800a530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a534:	4680      	mov	r8, r0
 800a536:	4615      	mov	r5, r2
 800a538:	460c      	mov	r4, r1
 800a53a:	b921      	cbnz	r1, 800a546 <_realloc_r+0x16>
 800a53c:	4611      	mov	r1, r2
 800a53e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a542:	f7ff b9cd 	b.w	80098e0 <_malloc_r>
 800a546:	b92a      	cbnz	r2, 800a554 <_realloc_r+0x24>
 800a548:	f7ff f958 	bl	80097fc <_free_r>
 800a54c:	2400      	movs	r4, #0
 800a54e:	4620      	mov	r0, r4
 800a550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a554:	f000 f81a 	bl	800a58c <_malloc_usable_size_r>
 800a558:	4285      	cmp	r5, r0
 800a55a:	4606      	mov	r6, r0
 800a55c:	d802      	bhi.n	800a564 <_realloc_r+0x34>
 800a55e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a562:	d8f4      	bhi.n	800a54e <_realloc_r+0x1e>
 800a564:	4629      	mov	r1, r5
 800a566:	4640      	mov	r0, r8
 800a568:	f7ff f9ba 	bl	80098e0 <_malloc_r>
 800a56c:	4607      	mov	r7, r0
 800a56e:	2800      	cmp	r0, #0
 800a570:	d0ec      	beq.n	800a54c <_realloc_r+0x1c>
 800a572:	42b5      	cmp	r5, r6
 800a574:	462a      	mov	r2, r5
 800a576:	4621      	mov	r1, r4
 800a578:	bf28      	it	cs
 800a57a:	4632      	movcs	r2, r6
 800a57c:	f7ff ffca 	bl	800a514 <memcpy>
 800a580:	4621      	mov	r1, r4
 800a582:	4640      	mov	r0, r8
 800a584:	f7ff f93a 	bl	80097fc <_free_r>
 800a588:	463c      	mov	r4, r7
 800a58a:	e7e0      	b.n	800a54e <_realloc_r+0x1e>

0800a58c <_malloc_usable_size_r>:
 800a58c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a590:	1f18      	subs	r0, r3, #4
 800a592:	2b00      	cmp	r3, #0
 800a594:	bfbc      	itt	lt
 800a596:	580b      	ldrlt	r3, [r1, r0]
 800a598:	18c0      	addlt	r0, r0, r3
 800a59a:	4770      	bx	lr

0800a59c <_init>:
 800a59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a59e:	bf00      	nop
 800a5a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5a2:	bc08      	pop	{r3}
 800a5a4:	469e      	mov	lr, r3
 800a5a6:	4770      	bx	lr

0800a5a8 <_fini>:
 800a5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5aa:	bf00      	nop
 800a5ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5ae:	bc08      	pop	{r3}
 800a5b0:	469e      	mov	lr, r3
 800a5b2:	4770      	bx	lr
