
autolauncher_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009724  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001074  08009834  08009834  0000a834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8a8  0800a8a8  0000c070  2**0
                  CONTENTS
  4 .ARM          00000000  0800a8a8  0800a8a8  0000c070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a8a8  0800a8a8  0000c070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8a8  0800a8a8  0000b8a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8ac  0800a8ac  0000b8ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800a8b0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000394  20000070  0800a920  0000c070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  0800a920  0000c404  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000142b9  00000000  00000000  0000c099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000322c  00000000  00000000  00020352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001330  00000000  00000000  00023580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f08  00000000  00000000  000248b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aafb  00000000  00000000  000257b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018e84  00000000  00000000  000402b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094e0c  00000000  00000000  00059137  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000edf43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000596c  00000000  00000000  000edf88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000f38f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	0800981c 	.word	0x0800981c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	0800981c 	.word	0x0800981c

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001a2:	2afd      	cmp	r2, #253	@ 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	@ 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	@ 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__aeabi_d2f>:
 8000a54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a5c:	bf24      	itt	cs
 8000a5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a66:	d90d      	bls.n	8000a84 <__aeabi_d2f+0x30>
 8000a68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a7c:	bf08      	it	eq
 8000a7e:	f020 0001 	biceq.w	r0, r0, #1
 8000a82:	4770      	bx	lr
 8000a84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a88:	d121      	bne.n	8000ace <__aeabi_d2f+0x7a>
 8000a8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a8e:	bfbc      	itt	lt
 8000a90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a94:	4770      	bxlt	lr
 8000a96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a9e:	f1c2 0218 	rsb	r2, r2, #24
 8000aa2:	f1c2 0c20 	rsb	ip, r2, #32
 8000aa6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aaa:	fa20 f002 	lsr.w	r0, r0, r2
 8000aae:	bf18      	it	ne
 8000ab0:	f040 0001 	orrne.w	r0, r0, #1
 8000ab4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000abc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac0:	ea40 000c 	orr.w	r0, r0, ip
 8000ac4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000acc:	e7cc      	b.n	8000a68 <__aeabi_d2f+0x14>
 8000ace:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ad2:	d107      	bne.n	8000ae4 <__aeabi_d2f+0x90>
 8000ad4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad8:	bf1e      	ittt	ne
 8000ada:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ade:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ae2:	4770      	bxne	lr
 8000ae4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ae8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000aec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop

08000af4 <__aeabi_frsub>:
 8000af4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000af8:	e002      	b.n	8000b00 <__addsf3>
 8000afa:	bf00      	nop

08000afc <__aeabi_fsub>:
 8000afc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b00 <__addsf3>:
 8000b00:	0042      	lsls	r2, r0, #1
 8000b02:	bf1f      	itttt	ne
 8000b04:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b08:	ea92 0f03 	teqne	r2, r3
 8000b0c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b10:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b14:	d06a      	beq.n	8000bec <__addsf3+0xec>
 8000b16:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b1a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b1e:	bfc1      	itttt	gt
 8000b20:	18d2      	addgt	r2, r2, r3
 8000b22:	4041      	eorgt	r1, r0
 8000b24:	4048      	eorgt	r0, r1
 8000b26:	4041      	eorgt	r1, r0
 8000b28:	bfb8      	it	lt
 8000b2a:	425b      	neglt	r3, r3
 8000b2c:	2b19      	cmp	r3, #25
 8000b2e:	bf88      	it	hi
 8000b30:	4770      	bxhi	lr
 8000b32:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b36:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b3a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b3e:	bf18      	it	ne
 8000b40:	4240      	negne	r0, r0
 8000b42:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b46:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b4a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b4e:	bf18      	it	ne
 8000b50:	4249      	negne	r1, r1
 8000b52:	ea92 0f03 	teq	r2, r3
 8000b56:	d03f      	beq.n	8000bd8 <__addsf3+0xd8>
 8000b58:	f1a2 0201 	sub.w	r2, r2, #1
 8000b5c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b60:	eb10 000c 	adds.w	r0, r0, ip
 8000b64:	f1c3 0320 	rsb	r3, r3, #32
 8000b68:	fa01 f103 	lsl.w	r1, r1, r3
 8000b6c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b70:	d502      	bpl.n	8000b78 <__addsf3+0x78>
 8000b72:	4249      	negs	r1, r1
 8000b74:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b78:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b7c:	d313      	bcc.n	8000ba6 <__addsf3+0xa6>
 8000b7e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b82:	d306      	bcc.n	8000b92 <__addsf3+0x92>
 8000b84:	0840      	lsrs	r0, r0, #1
 8000b86:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b8a:	f102 0201 	add.w	r2, r2, #1
 8000b8e:	2afe      	cmp	r2, #254	@ 0xfe
 8000b90:	d251      	bcs.n	8000c36 <__addsf3+0x136>
 8000b92:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b96:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b9a:	bf08      	it	eq
 8000b9c:	f020 0001 	biceq.w	r0, r0, #1
 8000ba0:	ea40 0003 	orr.w	r0, r0, r3
 8000ba4:	4770      	bx	lr
 8000ba6:	0049      	lsls	r1, r1, #1
 8000ba8:	eb40 0000 	adc.w	r0, r0, r0
 8000bac:	3a01      	subs	r2, #1
 8000bae:	bf28      	it	cs
 8000bb0:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bb4:	d2ed      	bcs.n	8000b92 <__addsf3+0x92>
 8000bb6:	fab0 fc80 	clz	ip, r0
 8000bba:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bbe:	ebb2 020c 	subs.w	r2, r2, ip
 8000bc2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bc6:	bfaa      	itet	ge
 8000bc8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bcc:	4252      	neglt	r2, r2
 8000bce:	4318      	orrge	r0, r3
 8000bd0:	bfbc      	itt	lt
 8000bd2:	40d0      	lsrlt	r0, r2
 8000bd4:	4318      	orrlt	r0, r3
 8000bd6:	4770      	bx	lr
 8000bd8:	f092 0f00 	teq	r2, #0
 8000bdc:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000be0:	bf06      	itte	eq
 8000be2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000be6:	3201      	addeq	r2, #1
 8000be8:	3b01      	subne	r3, #1
 8000bea:	e7b5      	b.n	8000b58 <__addsf3+0x58>
 8000bec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bf0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bf4:	bf18      	it	ne
 8000bf6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bfa:	d021      	beq.n	8000c40 <__addsf3+0x140>
 8000bfc:	ea92 0f03 	teq	r2, r3
 8000c00:	d004      	beq.n	8000c0c <__addsf3+0x10c>
 8000c02:	f092 0f00 	teq	r2, #0
 8000c06:	bf08      	it	eq
 8000c08:	4608      	moveq	r0, r1
 8000c0a:	4770      	bx	lr
 8000c0c:	ea90 0f01 	teq	r0, r1
 8000c10:	bf1c      	itt	ne
 8000c12:	2000      	movne	r0, #0
 8000c14:	4770      	bxne	lr
 8000c16:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c1a:	d104      	bne.n	8000c26 <__addsf3+0x126>
 8000c1c:	0040      	lsls	r0, r0, #1
 8000c1e:	bf28      	it	cs
 8000c20:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c24:	4770      	bx	lr
 8000c26:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c2a:	bf3c      	itt	cc
 8000c2c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c30:	4770      	bxcc	lr
 8000c32:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c36:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c3a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c3e:	4770      	bx	lr
 8000c40:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c44:	bf16      	itet	ne
 8000c46:	4608      	movne	r0, r1
 8000c48:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c4c:	4601      	movne	r1, r0
 8000c4e:	0242      	lsls	r2, r0, #9
 8000c50:	bf06      	itte	eq
 8000c52:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c56:	ea90 0f01 	teqeq	r0, r1
 8000c5a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c5e:	4770      	bx	lr

08000c60 <__aeabi_ui2f>:
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e004      	b.n	8000c70 <__aeabi_i2f+0x8>
 8000c66:	bf00      	nop

08000c68 <__aeabi_i2f>:
 8000c68:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c6c:	bf48      	it	mi
 8000c6e:	4240      	negmi	r0, r0
 8000c70:	ea5f 0c00 	movs.w	ip, r0
 8000c74:	bf08      	it	eq
 8000c76:	4770      	bxeq	lr
 8000c78:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c7c:	4601      	mov	r1, r0
 8000c7e:	f04f 0000 	mov.w	r0, #0
 8000c82:	e01c      	b.n	8000cbe <__aeabi_l2f+0x2a>

08000c84 <__aeabi_ul2f>:
 8000c84:	ea50 0201 	orrs.w	r2, r0, r1
 8000c88:	bf08      	it	eq
 8000c8a:	4770      	bxeq	lr
 8000c8c:	f04f 0300 	mov.w	r3, #0
 8000c90:	e00a      	b.n	8000ca8 <__aeabi_l2f+0x14>
 8000c92:	bf00      	nop

08000c94 <__aeabi_l2f>:
 8000c94:	ea50 0201 	orrs.w	r2, r0, r1
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000ca0:	d502      	bpl.n	8000ca8 <__aeabi_l2f+0x14>
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	ea5f 0c01 	movs.w	ip, r1
 8000cac:	bf02      	ittt	eq
 8000cae:	4684      	moveq	ip, r0
 8000cb0:	4601      	moveq	r1, r0
 8000cb2:	2000      	moveq	r0, #0
 8000cb4:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cb8:	bf08      	it	eq
 8000cba:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cbe:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cc2:	fabc f28c 	clz	r2, ip
 8000cc6:	3a08      	subs	r2, #8
 8000cc8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ccc:	db10      	blt.n	8000cf0 <__aeabi_l2f+0x5c>
 8000cce:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cd2:	4463      	add	r3, ip
 8000cd4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd8:	f1c2 0220 	rsb	r2, r2, #32
 8000cdc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ce0:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce4:	eb43 0002 	adc.w	r0, r3, r2
 8000ce8:	bf08      	it	eq
 8000cea:	f020 0001 	biceq.w	r0, r0, #1
 8000cee:	4770      	bx	lr
 8000cf0:	f102 0220 	add.w	r2, r2, #32
 8000cf4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf8:	f1c2 0220 	rsb	r2, r2, #32
 8000cfc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d00:	fa21 f202 	lsr.w	r2, r1, r2
 8000d04:	eb43 0002 	adc.w	r0, r3, r2
 8000d08:	bf08      	it	eq
 8000d0a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_f2iz>:
 8000d10:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d14:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000d18:	d30f      	bcc.n	8000d3a <__aeabi_f2iz+0x2a>
 8000d1a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000d1e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d22:	d90d      	bls.n	8000d40 <__aeabi_f2iz+0x30>
 8000d24:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d28:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000d2c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d30:	fa23 f002 	lsr.w	r0, r3, r2
 8000d34:	bf18      	it	ne
 8000d36:	4240      	negne	r0, r0
 8000d38:	4770      	bx	lr
 8000d3a:	f04f 0000 	mov.w	r0, #0
 8000d3e:	4770      	bx	lr
 8000d40:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000d44:	d101      	bne.n	8000d4a <__aeabi_f2iz+0x3a>
 8000d46:	0242      	lsls	r2, r0, #9
 8000d48:	d105      	bne.n	8000d56 <__aeabi_f2iz+0x46>
 8000d4a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000d4e:	bf08      	it	eq
 8000d50:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000d54:	4770      	bx	lr
 8000d56:	f04f 0000 	mov.w	r0, #0
 8000d5a:	4770      	bx	lr

08000d5c <__aeabi_f2uiz>:
 8000d5c:	0042      	lsls	r2, r0, #1
 8000d5e:	d20e      	bcs.n	8000d7e <__aeabi_f2uiz+0x22>
 8000d60:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000d64:	d30b      	bcc.n	8000d7e <__aeabi_f2uiz+0x22>
 8000d66:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000d6a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d6e:	d409      	bmi.n	8000d84 <__aeabi_f2uiz+0x28>
 8000d70:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d74:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000d78:	fa23 f002 	lsr.w	r0, r3, r2
 8000d7c:	4770      	bx	lr
 8000d7e:	f04f 0000 	mov.w	r0, #0
 8000d82:	4770      	bx	lr
 8000d84:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000d88:	d101      	bne.n	8000d8e <__aeabi_f2uiz+0x32>
 8000d8a:	0242      	lsls	r2, r0, #9
 8000d8c:	d102      	bne.n	8000d94 <__aeabi_f2uiz+0x38>
 8000d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8000d92:	4770      	bx	lr
 8000d94:	f04f 0000 	mov.w	r0, #0
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000dac:	4b27      	ldr	r3, [pc, #156]	@ (8000e4c <MX_ADC1_Init+0xb0>)
 8000dae:	4a28      	ldr	r2, [pc, #160]	@ (8000e50 <MX_ADC1_Init+0xb4>)
 8000db0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000db2:	4b26      	ldr	r3, [pc, #152]	@ (8000e4c <MX_ADC1_Init+0xb0>)
 8000db4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000db8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dba:	4b24      	ldr	r3, [pc, #144]	@ (8000e4c <MX_ADC1_Init+0xb0>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dc0:	4b22      	ldr	r3, [pc, #136]	@ (8000e4c <MX_ADC1_Init+0xb0>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dc6:	4b21      	ldr	r3, [pc, #132]	@ (8000e4c <MX_ADC1_Init+0xb0>)
 8000dc8:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000dcc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dce:	4b1f      	ldr	r3, [pc, #124]	@ (8000e4c <MX_ADC1_Init+0xb0>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8000dd4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e4c <MX_ADC1_Init+0xb0>)
 8000dd6:	2203      	movs	r2, #3
 8000dd8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dda:	481c      	ldr	r0, [pc, #112]	@ (8000e4c <MX_ADC1_Init+0xb0>)
 8000ddc:	f002 fcec 	bl	80037b8 <HAL_ADC_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000de6:	f002 f888 	bl	8002efa <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000dea:	230a      	movs	r3, #10
 8000dec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dee:	2301      	movs	r3, #1
 8000df0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000df2:	2307      	movs	r3, #7
 8000df4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4814      	ldr	r0, [pc, #80]	@ (8000e4c <MX_ADC1_Init+0xb0>)
 8000dfc:	f002 fef0 	bl	8003be0 <HAL_ADC_ConfigChannel>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000e06:	f002 f878 	bl	8002efa <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000e0a:	230b      	movs	r3, #11
 8000e0c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e12:	1d3b      	adds	r3, r7, #4
 8000e14:	4619      	mov	r1, r3
 8000e16:	480d      	ldr	r0, [pc, #52]	@ (8000e4c <MX_ADC1_Init+0xb0>)
 8000e18:	f002 fee2 	bl	8003be0 <HAL_ADC_ConfigChannel>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000e22:	f002 f86a 	bl	8002efa <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000e26:	2310      	movs	r3, #16
 8000e28:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e2e:	1d3b      	adds	r3, r7, #4
 8000e30:	4619      	mov	r1, r3
 8000e32:	4806      	ldr	r0, [pc, #24]	@ (8000e4c <MX_ADC1_Init+0xb0>)
 8000e34:	f002 fed4 	bl	8003be0 <HAL_ADC_ConfigChannel>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000e3e:	f002 f85c 	bl	8002efa <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e42:	bf00      	nop
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	2000008c 	.word	0x2000008c
 8000e50:	40012400 	.word	0x40012400

08000e54 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b088      	sub	sp, #32
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5c:	f107 0310 	add.w	r3, r7, #16
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a28      	ldr	r2, [pc, #160]	@ (8000f10 <HAL_ADC_MspInit+0xbc>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d149      	bne.n	8000f08 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e74:	4b27      	ldr	r3, [pc, #156]	@ (8000f14 <HAL_ADC_MspInit+0xc0>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	4a26      	ldr	r2, [pc, #152]	@ (8000f14 <HAL_ADC_MspInit+0xc0>)
 8000e7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e7e:	6193      	str	r3, [r2, #24]
 8000e80:	4b24      	ldr	r3, [pc, #144]	@ (8000f14 <HAL_ADC_MspInit+0xc0>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e8c:	4b21      	ldr	r3, [pc, #132]	@ (8000f14 <HAL_ADC_MspInit+0xc0>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	4a20      	ldr	r2, [pc, #128]	@ (8000f14 <HAL_ADC_MspInit+0xc0>)
 8000e92:	f043 0310 	orr.w	r3, r3, #16
 8000e96:	6193      	str	r3, [r2, #24]
 8000e98:	4b1e      	ldr	r3, [pc, #120]	@ (8000f14 <HAL_ADC_MspInit+0xc0>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	f003 0310 	and.w	r3, r3, #16
 8000ea0:	60bb      	str	r3, [r7, #8]
 8000ea2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = ADC_VOLT_Pin|ADC_AMP_Pin;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eac:	f107 0310 	add.w	r3, r7, #16
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4819      	ldr	r0, [pc, #100]	@ (8000f18 <HAL_ADC_MspInit+0xc4>)
 8000eb4:	f003 fcec 	bl	8004890 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000eb8:	4b18      	ldr	r3, [pc, #96]	@ (8000f1c <HAL_ADC_MspInit+0xc8>)
 8000eba:	4a19      	ldr	r2, [pc, #100]	@ (8000f20 <HAL_ADC_MspInit+0xcc>)
 8000ebc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ebe:	4b17      	ldr	r3, [pc, #92]	@ (8000f1c <HAL_ADC_MspInit+0xc8>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ec4:	4b15      	ldr	r3, [pc, #84]	@ (8000f1c <HAL_ADC_MspInit+0xc8>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000eca:	4b14      	ldr	r3, [pc, #80]	@ (8000f1c <HAL_ADC_MspInit+0xc8>)
 8000ecc:	2280      	movs	r2, #128	@ 0x80
 8000ece:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ed0:	4b12      	ldr	r3, [pc, #72]	@ (8000f1c <HAL_ADC_MspInit+0xc8>)
 8000ed2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ed6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ed8:	4b10      	ldr	r3, [pc, #64]	@ (8000f1c <HAL_ADC_MspInit+0xc8>)
 8000eda:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ede:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ee0:	4b0e      	ldr	r3, [pc, #56]	@ (8000f1c <HAL_ADC_MspInit+0xc8>)
 8000ee2:	2220      	movs	r2, #32
 8000ee4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8000f1c <HAL_ADC_MspInit+0xc8>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000eec:	480b      	ldr	r0, [pc, #44]	@ (8000f1c <HAL_ADC_MspInit+0xc8>)
 8000eee:	f003 fa2d 	bl	800434c <HAL_DMA_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000ef8:	f001 ffff 	bl	8002efa <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a07      	ldr	r2, [pc, #28]	@ (8000f1c <HAL_ADC_MspInit+0xc8>)
 8000f00:	621a      	str	r2, [r3, #32]
 8000f02:	4a06      	ldr	r2, [pc, #24]	@ (8000f1c <HAL_ADC_MspInit+0xc8>)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f08:	bf00      	nop
 8000f0a:	3720      	adds	r7, #32
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40012400 	.word	0x40012400
 8000f14:	40021000 	.word	0x40021000
 8000f18:	40011000 	.word	0x40011000
 8000f1c:	200000bc 	.word	0x200000bc
 8000f20:	40020008 	.word	0x40020008

08000f24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f5c <MX_DMA_Init+0x38>)
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	4a0b      	ldr	r2, [pc, #44]	@ (8000f5c <MX_DMA_Init+0x38>)
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	6153      	str	r3, [r2, #20]
 8000f36:	4b09      	ldr	r3, [pc, #36]	@ (8000f5c <MX_DMA_Init+0x38>)
 8000f38:	695b      	ldr	r3, [r3, #20]
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2100      	movs	r1, #0
 8000f46:	200b      	movs	r0, #11
 8000f48:	f003 f9c9 	bl	80042de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f4c:	200b      	movs	r0, #11
 8000f4e:	f003 f9e2 	bl	8004316 <HAL_NVIC_EnableIRQ>

}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40021000 	.word	0x40021000

08000f60 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b088      	sub	sp, #32
 8000f64:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f66:	f107 0310 	add.w	r3, r7, #16
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f74:	4b42      	ldr	r3, [pc, #264]	@ (8001080 <MX_GPIO_Init+0x120>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	4a41      	ldr	r2, [pc, #260]	@ (8001080 <MX_GPIO_Init+0x120>)
 8000f7a:	f043 0310 	orr.w	r3, r3, #16
 8000f7e:	6193      	str	r3, [r2, #24]
 8000f80:	4b3f      	ldr	r3, [pc, #252]	@ (8001080 <MX_GPIO_Init+0x120>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	f003 0310 	and.w	r3, r3, #16
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8c:	4b3c      	ldr	r3, [pc, #240]	@ (8001080 <MX_GPIO_Init+0x120>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	4a3b      	ldr	r2, [pc, #236]	@ (8001080 <MX_GPIO_Init+0x120>)
 8000f92:	f043 0304 	orr.w	r3, r3, #4
 8000f96:	6193      	str	r3, [r2, #24]
 8000f98:	4b39      	ldr	r3, [pc, #228]	@ (8001080 <MX_GPIO_Init+0x120>)
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	f003 0304 	and.w	r3, r3, #4
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa4:	4b36      	ldr	r3, [pc, #216]	@ (8001080 <MX_GPIO_Init+0x120>)
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	4a35      	ldr	r2, [pc, #212]	@ (8001080 <MX_GPIO_Init+0x120>)
 8000faa:	f043 0308 	orr.w	r3, r3, #8
 8000fae:	6193      	str	r3, [r2, #24]
 8000fb0:	4b33      	ldr	r3, [pc, #204]	@ (8001080 <MX_GPIO_Init+0x120>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	f003 0308 	and.w	r3, r3, #8
 8000fb8:	607b      	str	r3, [r7, #4]
 8000fba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fbc:	4b30      	ldr	r3, [pc, #192]	@ (8001080 <MX_GPIO_Init+0x120>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	4a2f      	ldr	r2, [pc, #188]	@ (8001080 <MX_GPIO_Init+0x120>)
 8000fc2:	f043 0320 	orr.w	r3, r3, #32
 8000fc6:	6193      	str	r3, [r2, #24]
 8000fc8:	4b2d      	ldr	r3, [pc, #180]	@ (8001080 <MX_GPIO_Init+0x120>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	f003 0320 	and.w	r3, r3, #32
 8000fd0:	603b      	str	r3, [r7, #0]
 8000fd2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SSR_3_Pin|SSR_2_Pin|SSR_1_Pin|ENABLE_M1_Pin
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f64f 71dc 	movw	r1, #65500	@ 0xffdc
 8000fda:	482a      	ldr	r0, [pc, #168]	@ (8001084 <MX_GPIO_Init+0x124>)
 8000fdc:	f003 fddc 	bl	8004b98 <HAL_GPIO_WritePin>
                          |ENABLE_M2_Pin|DIR_Pin|SSR_6_Pin|SSR_5_Pin
                          |RELAY_RESET_3_Pin|RELAY_RESET_2_Pin|RELAY_K7_Pin|RELAY_K1_Pin
                          |RELAY_K2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENABLE_M3_Pin|ENABLE_M4_Pin|MUX_SELECT_Pin|ENABLE_M5_Pin
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f649 11f7 	movw	r1, #39415	@ 0x99f7
 8000fe6:	4828      	ldr	r0, [pc, #160]	@ (8001088 <MX_GPIO_Init+0x128>)
 8000fe8:	f003 fdd6 	bl	8004b98 <HAL_GPIO_WritePin>
                          |ENABLE_M6_Pin|ENABLE_M7_Pin|ENABLE_M8_Pin|RELAY_K12_CAL_RES_Pin
                          |RELAY_K11_CAL_CONT_Pin|RELAY_K9_K10_GND_COND_Pin|RELAY_K8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|SSR_8_Pin|SSR_7_Pin|RELAY_K4_Pin
 8000fec:	2200      	movs	r2, #0
 8000fee:	f24c 313a 	movw	r1, #49978	@ 0xc33a
 8000ff2:	4826      	ldr	r0, [pc, #152]	@ (800108c <MX_GPIO_Init+0x12c>)
 8000ff4:	f003 fdd0 	bl	8004b98 <HAL_GPIO_WritePin>
                          |RELAY_K5_Pin|RELAY_K6_Pin|RELAY_RESET_1_Pin|SSR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_K3_GPIO_Port, RELAY_K3_Pin, GPIO_PIN_RESET);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2104      	movs	r1, #4
 8000ffc:	4824      	ldr	r0, [pc, #144]	@ (8001090 <MX_GPIO_Init+0x130>)
 8000ffe:	f003 fdcb 	bl	8004b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = SSR_3_Pin|SSR_2_Pin|SSR_1_Pin|ENABLE_M1_Pin
 8001002:	f64f 73dc 	movw	r3, #65500	@ 0xffdc
 8001006:	613b      	str	r3, [r7, #16]
                          |ENABLE_M2_Pin|DIR_Pin|SSR_6_Pin|SSR_5_Pin
                          |RELAY_RESET_3_Pin|RELAY_RESET_2_Pin|RELAY_K7_Pin|RELAY_K1_Pin
                          |RELAY_K2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001008:	2301      	movs	r3, #1
 800100a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001010:	2302      	movs	r3, #2
 8001012:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001014:	f107 0310 	add.w	r3, r7, #16
 8001018:	4619      	mov	r1, r3
 800101a:	481a      	ldr	r0, [pc, #104]	@ (8001084 <MX_GPIO_Init+0x124>)
 800101c:	f003 fc38 	bl	8004890 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ENABLE_M3_Pin|ENABLE_M4_Pin|MUX_SELECT_Pin|ENABLE_M5_Pin
 8001020:	f649 13f7 	movw	r3, #39415	@ 0x99f7
 8001024:	613b      	str	r3, [r7, #16]
                          |ENABLE_M6_Pin|ENABLE_M7_Pin|ENABLE_M8_Pin|RELAY_K12_CAL_RES_Pin
                          |RELAY_K11_CAL_CONT_Pin|RELAY_K9_K10_GND_COND_Pin|RELAY_K8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001026:	2301      	movs	r3, #1
 8001028:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	2302      	movs	r3, #2
 8001030:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001032:	f107 0310 	add.w	r3, r7, #16
 8001036:	4619      	mov	r1, r3
 8001038:	4813      	ldr	r0, [pc, #76]	@ (8001088 <MX_GPIO_Init+0x128>)
 800103a:	f003 fc29 	bl	8004890 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_Pin|SSR_8_Pin|SSR_7_Pin|RELAY_K4_Pin
 800103e:	f24c 333a 	movw	r3, #49978	@ 0xc33a
 8001042:	613b      	str	r3, [r7, #16]
                          |RELAY_K5_Pin|RELAY_K6_Pin|RELAY_RESET_1_Pin|SSR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001044:	2301      	movs	r3, #1
 8001046:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104c:	2302      	movs	r3, #2
 800104e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001050:	f107 0310 	add.w	r3, r7, #16
 8001054:	4619      	mov	r1, r3
 8001056:	480d      	ldr	r0, [pc, #52]	@ (800108c <MX_GPIO_Init+0x12c>)
 8001058:	f003 fc1a 	bl	8004890 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RELAY_K3_Pin;
 800105c:	2304      	movs	r3, #4
 800105e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001060:	2301      	movs	r3, #1
 8001062:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	2302      	movs	r3, #2
 800106a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RELAY_K3_GPIO_Port, &GPIO_InitStruct);
 800106c:	f107 0310 	add.w	r3, r7, #16
 8001070:	4619      	mov	r1, r3
 8001072:	4807      	ldr	r0, [pc, #28]	@ (8001090 <MX_GPIO_Init+0x130>)
 8001074:	f003 fc0c 	bl	8004890 <HAL_GPIO_Init>

}
 8001078:	bf00      	nop
 800107a:	3720      	adds	r7, #32
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40021000 	.word	0x40021000
 8001084:	40011000 	.word	0x40011000
 8001088:	40010800 	.word	0x40010800
 800108c:	40010c00 	.word	0x40010c00
 8001090:	40011400 	.word	0x40011400

08001094 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001098:	4b12      	ldr	r3, [pc, #72]	@ (80010e4 <MX_I2C1_Init+0x50>)
 800109a:	4a13      	ldr	r2, [pc, #76]	@ (80010e8 <MX_I2C1_Init+0x54>)
 800109c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800109e:	4b11      	ldr	r3, [pc, #68]	@ (80010e4 <MX_I2C1_Init+0x50>)
 80010a0:	4a12      	ldr	r2, [pc, #72]	@ (80010ec <MX_I2C1_Init+0x58>)
 80010a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010a4:	4b0f      	ldr	r3, [pc, #60]	@ (80010e4 <MX_I2C1_Init+0x50>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010aa:	4b0e      	ldr	r3, [pc, #56]	@ (80010e4 <MX_I2C1_Init+0x50>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010b0:	4b0c      	ldr	r3, [pc, #48]	@ (80010e4 <MX_I2C1_Init+0x50>)
 80010b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010b8:	4b0a      	ldr	r3, [pc, #40]	@ (80010e4 <MX_I2C1_Init+0x50>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010be:	4b09      	ldr	r3, [pc, #36]	@ (80010e4 <MX_I2C1_Init+0x50>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010c4:	4b07      	ldr	r3, [pc, #28]	@ (80010e4 <MX_I2C1_Init+0x50>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ca:	4b06      	ldr	r3, [pc, #24]	@ (80010e4 <MX_I2C1_Init+0x50>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010d0:	4804      	ldr	r0, [pc, #16]	@ (80010e4 <MX_I2C1_Init+0x50>)
 80010d2:	f003 fd79 	bl	8004bc8 <HAL_I2C_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010dc:	f001 ff0d 	bl	8002efa <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000100 	.word	0x20000100
 80010e8:	40005400 	.word	0x40005400
 80010ec:	000186a0 	.word	0x000186a0

080010f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b088      	sub	sp, #32
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	f107 0310 	add.w	r3, r7, #16
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a15      	ldr	r2, [pc, #84]	@ (8001160 <HAL_I2C_MspInit+0x70>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d123      	bne.n	8001158 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001110:	4b14      	ldr	r3, [pc, #80]	@ (8001164 <HAL_I2C_MspInit+0x74>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	4a13      	ldr	r2, [pc, #76]	@ (8001164 <HAL_I2C_MspInit+0x74>)
 8001116:	f043 0308 	orr.w	r3, r3, #8
 800111a:	6193      	str	r3, [r2, #24]
 800111c:	4b11      	ldr	r3, [pc, #68]	@ (8001164 <HAL_I2C_MspInit+0x74>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	f003 0308 	and.w	r3, r3, #8
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001128:	23c0      	movs	r3, #192	@ 0xc0
 800112a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800112c:	2312      	movs	r3, #18
 800112e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001130:	2303      	movs	r3, #3
 8001132:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001134:	f107 0310 	add.w	r3, r7, #16
 8001138:	4619      	mov	r1, r3
 800113a:	480b      	ldr	r0, [pc, #44]	@ (8001168 <HAL_I2C_MspInit+0x78>)
 800113c:	f003 fba8 	bl	8004890 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001140:	4b08      	ldr	r3, [pc, #32]	@ (8001164 <HAL_I2C_MspInit+0x74>)
 8001142:	69db      	ldr	r3, [r3, #28]
 8001144:	4a07      	ldr	r2, [pc, #28]	@ (8001164 <HAL_I2C_MspInit+0x74>)
 8001146:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800114a:	61d3      	str	r3, [r2, #28]
 800114c:	4b05      	ldr	r3, [pc, #20]	@ (8001164 <HAL_I2C_MspInit+0x74>)
 800114e:	69db      	ldr	r3, [r3, #28]
 8001150:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001158:	bf00      	nop
 800115a:	3720      	adds	r7, #32
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40005400 	.word	0x40005400
 8001164:	40021000 	.word	0x40021000
 8001168:	40010c00 	.word	0x40010c00

0800116c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001170:	f002 fa9c 	bl	80036ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001174:	f000 f846 	bl	8001204 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001178:	f7ff fef2 	bl	8000f60 <MX_GPIO_Init>
  MX_DMA_Init();
 800117c:	f7ff fed2 	bl	8000f24 <MX_DMA_Init>
  MX_TIM3_Init();
 8001180:	f001 ffb2 	bl	80030e8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001184:	f002 f908 	bl	8003398 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001188:	f7ff fe08 	bl	8000d9c <MX_ADC1_Init>
  MX_I2C1_Init();
 800118c:	f7ff ff82 	bl	8001094 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8001190:	f002 f92c 	bl	80033ec <MX_USART3_UART_Init>
  MX_TIM4_Init();
 8001194:	f002 f820 	bl	80031d8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  // Retarget IO stream to UART
  RetargetInit(&huart1);
 8001198:	4816      	ldr	r0, [pc, #88]	@ (80011f4 <main+0x88>)
 800119a:	f002 fa07 	bl	80035ac <RetargetInit>
  // Initialize stepper motors
  motor_init();
 800119e:	f001 fb81 	bl	80028a4 <motor_init>
  // initialize multiplexer
  multiplexer_set(MUX_STM32);
 80011a2:	2001      	movs	r0, #1
 80011a4:	f001 f86e 	bl	8002284 <multiplexer_set>
  // Initialize relays
  relay_init();
 80011a8:	f001 fa54 	bl	8002654 <relay_init>
  // enable receive interrupt
  uartrx_interrupt_init();
 80011ac:	f001 f930 	bl	8002410 <uartrx_interrupt_init>
  // Initialize autolauncher parameters i.e. read eeprom
  parameter_init();
 80011b0:	f001 f89c 	bl	80022ec <parameter_init>
  // display main menu at startup
  menu_main();
 80011b4:	f000 fed0 	bl	8001f58 <menu_main>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // menu control loop
	  if(active == rxStatus){ // set to active with UART RX interrupt
 80011b8:	4b0f      	ldr	r3, [pc, #60]	@ (80011f8 <main+0x8c>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d115      	bne.n	80011ec <main+0x80>
		  rxStatus = idle;
 80011c0:	4b0d      	ldr	r3, [pc, #52]	@ (80011f8 <main+0x8c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	701a      	strb	r2, [r3, #0]
		  if( mainMenu == activeMenu){
 80011c6:	4b0d      	ldr	r3, [pc, #52]	@ (80011fc <main+0x90>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d105      	bne.n	80011da <main+0x6e>
			  main_process_input(rxChar); // go to main switch case menu
 80011ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001200 <main+0x94>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f000 f866 	bl	80012a4 <main_process_input>
 80011d8:	e008      	b.n	80011ec <main+0x80>
		  } else if ( configMenu == activeMenu){
 80011da:	4b08      	ldr	r3, [pc, #32]	@ (80011fc <main+0x90>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d104      	bne.n	80011ec <main+0x80>
			  config_process_input(rxChar);
 80011e2:	4b07      	ldr	r3, [pc, #28]	@ (8001200 <main+0x94>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 fa98 	bl	800171c <config_process_input>
		  }
	  }
	  // monitor voltage and send alarm if it's below a threshold
	  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	  HAL_Delay(1); // needed to debug, remove
 80011ec:	2001      	movs	r0, #1
 80011ee:	f002 fabf 	bl	8003770 <HAL_Delay>
	  if(active == rxStatus){ // set to active with UART RX interrupt
 80011f2:	e7e1      	b.n	80011b8 <main+0x4c>
 80011f4:	20000220 	.word	0x20000220
 80011f8:	20000156 	.word	0x20000156
 80011fc:	20000157 	.word	0x20000157
 8001200:	20000185 	.word	0x20000185

08001204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b094      	sub	sp, #80	@ 0x50
 8001208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800120a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800120e:	2228      	movs	r2, #40	@ 0x28
 8001210:	2100      	movs	r1, #0
 8001212:	4618      	mov	r0, r3
 8001214:	f007 fd5e 	bl	8008cd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001234:	2302      	movs	r3, #2
 8001236:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001238:	2301      	movs	r3, #1
 800123a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800123c:	2310      	movs	r3, #16
 800123e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001240:	2300      	movs	r3, #0
 8001242:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001244:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001248:	4618      	mov	r0, r3
 800124a:	f004 fcf1 	bl	8005c30 <HAL_RCC_OscConfig>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001254:	f001 fe51 	bl	8002efa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001258:	230f      	movs	r3, #15
 800125a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800125c:	2300      	movs	r3, #0
 800125e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001260:	2300      	movs	r3, #0
 8001262:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001264:	2300      	movs	r3, #0
 8001266:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001268:	2300      	movs	r3, #0
 800126a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	2100      	movs	r1, #0
 8001272:	4618      	mov	r0, r3
 8001274:	f004 ff5e 	bl	8006134 <HAL_RCC_ClockConfig>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800127e:	f001 fe3c 	bl	8002efa <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001282:	2302      	movs	r3, #2
 8001284:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	4618      	mov	r0, r3
 800128e:	f005 f8df 	bl	8006450 <HAL_RCCEx_PeriphCLKConfig>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001298:	f001 fe2f 	bl	8002efa <Error_Handler>
  }
}
 800129c:	bf00      	nop
 800129e:	3750      	adds	r7, #80	@ 0x50
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <main_process_input>:
	printf("d is: %i.%i", (int)d, (int)(10000 * (float)(d - (uint8_t)d)));
}


/* Process char received while in Main menu */
void main_process_input(char option){
 80012a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012a8:	b08d      	sub	sp, #52	@ 0x34
 80012aa:	af04      	add	r7, sp, #16
 80012ac:	4603      	mov	r3, r0
 80012ae:	71fb      	strb	r3, [r7, #7]
	printf("\r\n> Executing OPTION (%c) --> ", option);
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	4619      	mov	r1, r3
 80012b4:	48cb      	ldr	r0, [pc, #812]	@ (80015e4 <main_process_input+0x340>)
 80012b6:	f007 fb11 	bl	80088dc <iprintf>

	switch (option){
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	3b30      	subs	r3, #48	@ 0x30
 80012be:	2b4e      	cmp	r3, #78	@ 0x4e
 80012c0:	f200 8217 	bhi.w	80016f2 <main_process_input+0x44e>
 80012c4:	a201      	add	r2, pc, #4	@ (adr r2, 80012cc <main_process_input+0x28>)
 80012c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ca:	bf00      	nop
 80012cc:	08001409 	.word	0x08001409
 80012d0:	0800141d 	.word	0x0800141d
 80012d4:	0800142b 	.word	0x0800142b
 80012d8:	08001439 	.word	0x08001439
 80012dc:	08001447 	.word	0x08001447
 80012e0:	08001455 	.word	0x08001455
 80012e4:	08001463 	.word	0x08001463
 80012e8:	08001471 	.word	0x08001471
 80012ec:	0800148f 	.word	0x0800148f
 80012f0:	080016f3 	.word	0x080016f3
 80012f4:	080016f3 	.word	0x080016f3
 80012f8:	080016f3 	.word	0x080016f3
 80012fc:	080016f3 	.word	0x080016f3
 8001300:	080016f3 	.word	0x080016f3
 8001304:	080016f3 	.word	0x080016f3
 8001308:	080016f3 	.word	0x080016f3
 800130c:	080016f3 	.word	0x080016f3
 8001310:	0800153d 	.word	0x0800153d
 8001314:	0800154b 	.word	0x0800154b
 8001318:	08001559 	.word	0x08001559
 800131c:	08001567 	.word	0x08001567
 8001320:	08001575 	.word	0x08001575
 8001324:	08001583 	.word	0x08001583
 8001328:	08001675 	.word	0x08001675
 800132c:	08001591 	.word	0x08001591
 8001330:	080015af 	.word	0x080015af
 8001334:	080016f3 	.word	0x080016f3
 8001338:	080015cd 	.word	0x080015cd
 800133c:	08001669 	.word	0x08001669
 8001340:	08001681 	.word	0x08001681
 8001344:	080016f3 	.word	0x080016f3
 8001348:	080016f3 	.word	0x080016f3
 800134c:	0800169f 	.word	0x0800169f
 8001350:	080016f3 	.word	0x080016f3
 8001354:	080015d9 	.word	0x080015d9
 8001358:	08001501 	.word	0x08001501
 800135c:	0800151f 	.word	0x0800151f
 8001360:	080014ad 	.word	0x080014ad
 8001364:	080014bb 	.word	0x080014bb
 8001368:	080014c9 	.word	0x080014c9
 800136c:	080014d7 	.word	0x080014d7
 8001370:	080014e5 	.word	0x080014e5
 8001374:	080014f3 	.word	0x080014f3
 8001378:	080016f3 	.word	0x080016f3
 800137c:	080016f3 	.word	0x080016f3
 8001380:	080016f3 	.word	0x080016f3
 8001384:	080016f3 	.word	0x080016f3
 8001388:	080016f3 	.word	0x080016f3
 800138c:	080016f3 	.word	0x080016f3
 8001390:	080016f3 	.word	0x080016f3
 8001394:	080016f3 	.word	0x080016f3
 8001398:	080016f3 	.word	0x080016f3
 800139c:	080016f3 	.word	0x080016f3
 80013a0:	080016f3 	.word	0x080016f3
 80013a4:	080016f3 	.word	0x080016f3
 80013a8:	080016f3 	.word	0x080016f3
 80013ac:	080016f3 	.word	0x080016f3
 80013b0:	080016f3 	.word	0x080016f3
 80013b4:	080016f3 	.word	0x080016f3
 80013b8:	080016f3 	.word	0x080016f3
 80013bc:	080016f3 	.word	0x080016f3
 80013c0:	080016f3 	.word	0x080016f3
 80013c4:	080016f3 	.word	0x080016f3
 80013c8:	080016f3 	.word	0x080016f3
 80013cc:	080016f3 	.word	0x080016f3
 80013d0:	080016f3 	.word	0x080016f3
 80013d4:	080016f3 	.word	0x080016f3
 80013d8:	08001693 	.word	0x08001693
 80013dc:	080016f3 	.word	0x080016f3
 80013e0:	080016f3 	.word	0x080016f3
 80013e4:	080016f3 	.word	0x080016f3
 80013e8:	080016f3 	.word	0x080016f3
 80013ec:	080016f3 	.word	0x080016f3
 80013f0:	080016f3 	.word	0x080016f3
 80013f4:	080016f3 	.word	0x080016f3
 80013f8:	080016f3 	.word	0x080016f3
 80013fc:	080016f3 	.word	0x080016f3
 8001400:	080016f3 	.word	0x080016f3
 8001404:	08001687 	.word	0x08001687
		// Connect XBT pins
    case '0':
        //engage calibration resistor
    	printf("unground_xbt(), calibration_resistor(), calibrate_on()\r\n");
 8001408:	4877      	ldr	r0, [pc, #476]	@ (80015e8 <main_process_input+0x344>)
 800140a:	f007 facf 	bl	80089ac <puts>
        unground_xbt();
 800140e:	f001 f80d 	bl	800242c <unground_xbt>
        calibration_resistor();
 8001412:	f001 f823 	bl	800245c <calibration_resistor>
        calibrate_on();
 8001416:	f001 f839 	bl	800248c <calibrate_on>
        break;
 800141a:	e16e      	b.n	80016fa <main_process_input+0x456>
    case '1':
    	printf("connect_xbt_pin(1)\r\n");
 800141c:	4873      	ldr	r0, [pc, #460]	@ (80015ec <main_process_input+0x348>)
 800141e:	f007 fac5 	bl	80089ac <puts>
        connect_xbt_pin(1);
 8001422:	2001      	movs	r0, #1
 8001424:	f001 f876 	bl	8002514 <connect_xbt_pin>
        break;
 8001428:	e167      	b.n	80016fa <main_process_input+0x456>
    case '2':
        connect_xbt_pin(2);
 800142a:	2002      	movs	r0, #2
 800142c:	f001 f872 	bl	8002514 <connect_xbt_pin>
        printf("connect_xbt_pin(2)\r\n");
 8001430:	486f      	ldr	r0, [pc, #444]	@ (80015f0 <main_process_input+0x34c>)
 8001432:	f007 fabb 	bl	80089ac <puts>
        break;
 8001436:	e160      	b.n	80016fa <main_process_input+0x456>
    case '3':
        connect_xbt_pin(3);
 8001438:	2003      	movs	r0, #3
 800143a:	f001 f86b 	bl	8002514 <connect_xbt_pin>
        printf("connect_xbt_pin(3)\r\n");
 800143e:	486d      	ldr	r0, [pc, #436]	@ (80015f4 <main_process_input+0x350>)
 8001440:	f007 fab4 	bl	80089ac <puts>
        break;
 8001444:	e159      	b.n	80016fa <main_process_input+0x456>
    case '4':
        connect_xbt_pin(4);
 8001446:	2004      	movs	r0, #4
 8001448:	f001 f864 	bl	8002514 <connect_xbt_pin>
        printf("connect_xbt_pin(4)\r\n");
 800144c:	486a      	ldr	r0, [pc, #424]	@ (80015f8 <main_process_input+0x354>)
 800144e:	f007 faad 	bl	80089ac <puts>
        break;
 8001452:	e152      	b.n	80016fa <main_process_input+0x456>
    case '5':
        connect_xbt_pin(5);
 8001454:	2005      	movs	r0, #5
 8001456:	f001 f85d 	bl	8002514 <connect_xbt_pin>
        printf("connect_xbt_pin(5)\r\n");
 800145a:	4868      	ldr	r0, [pc, #416]	@ (80015fc <main_process_input+0x358>)
 800145c:	f007 faa6 	bl	80089ac <puts>
        break;
 8001460:	e14b      	b.n	80016fa <main_process_input+0x456>
    case '6':
        connect_xbt_pin(6);
 8001462:	2006      	movs	r0, #6
 8001464:	f001 f856 	bl	8002514 <connect_xbt_pin>
        printf("connect_xbt_pin(6)\r\n");
 8001468:	4865      	ldr	r0, [pc, #404]	@ (8001600 <main_process_input+0x35c>)
 800146a:	f007 fa9f 	bl	80089ac <puts>
        break;
 800146e:	e144      	b.n	80016fa <main_process_input+0x456>
    case '7':
        if (launcher.tubeCount == '8'){
 8001470:	4b64      	ldr	r3, [pc, #400]	@ (8001604 <main_process_input+0x360>)
 8001472:	785b      	ldrb	r3, [r3, #1]
 8001474:	2b38      	cmp	r3, #56	@ 0x38
 8001476:	d106      	bne.n	8001486 <main_process_input+0x1e2>
            connect_xbt_pin(7);
 8001478:	2007      	movs	r0, #7
 800147a:	f001 f84b 	bl	8002514 <connect_xbt_pin>
            printf("connect_xbt_pin(7)\r\n");
 800147e:	4862      	ldr	r0, [pc, #392]	@ (8001608 <main_process_input+0x364>)
 8001480:	f007 fa94 	bl	80089ac <puts>
        } else {
        	printf("\r\n* ERROR: tube 7 not available *\r\n");
        }
        break;
 8001484:	e139      	b.n	80016fa <main_process_input+0x456>
        	printf("\r\n* ERROR: tube 7 not available *\r\n");
 8001486:	4861      	ldr	r0, [pc, #388]	@ (800160c <main_process_input+0x368>)
 8001488:	f007 fa90 	bl	80089ac <puts>
        break;
 800148c:	e135      	b.n	80016fa <main_process_input+0x456>
    case '8':
        if (launcher.tubeCount == '8'){
 800148e:	4b5d      	ldr	r3, [pc, #372]	@ (8001604 <main_process_input+0x360>)
 8001490:	785b      	ldrb	r3, [r3, #1]
 8001492:	2b38      	cmp	r3, #56	@ 0x38
 8001494:	d106      	bne.n	80014a4 <main_process_input+0x200>
        	connect_xbt_pin(8);
 8001496:	2008      	movs	r0, #8
 8001498:	f001 f83c 	bl	8002514 <connect_xbt_pin>
        	printf("connect_xbt_pin(8)\r\n");
 800149c:	485c      	ldr	r0, [pc, #368]	@ (8001610 <main_process_input+0x36c>)
 800149e:	f007 fa85 	bl	80089ac <puts>
        } else {
        	printf("\r\n* ERROR: tube 8 not available *\r\n");
        }
        break;
 80014a2:	e12a      	b.n	80016fa <main_process_input+0x456>
        	printf("\r\n* ERROR: tube 8 not available *\r\n");
 80014a4:	485b      	ldr	r0, [pc, #364]	@ (8001614 <main_process_input+0x370>)
 80014a6:	f007 fa81 	bl	80089ac <puts>
        break;
 80014aa:	e126      	b.n	80016fa <main_process_input+0x456>
        //EXTEND PINS
    case 'U':
    	printf("extend_pin(1)\r\n");
 80014ac:	485a      	ldr	r0, [pc, #360]	@ (8001618 <main_process_input+0x374>)
 80014ae:	f007 fa7d 	bl	80089ac <puts>
    	extend_pin(1);
 80014b2:	2001      	movs	r0, #1
 80014b4:	f001 f952 	bl	800275c <extend_pin>
        break;
 80014b8:	e11f      	b.n	80016fa <main_process_input+0x456>
    case 'V':
        printf("extend_pin(2)\r\n");
 80014ba:	4858      	ldr	r0, [pc, #352]	@ (800161c <main_process_input+0x378>)
 80014bc:	f007 fa76 	bl	80089ac <puts>
        extend_pin(2);
 80014c0:	2002      	movs	r0, #2
 80014c2:	f001 f94b 	bl	800275c <extend_pin>
        break;
 80014c6:	e118      	b.n	80016fa <main_process_input+0x456>
    case 'W':
        printf("extend_pin(3)\r\n");
 80014c8:	4855      	ldr	r0, [pc, #340]	@ (8001620 <main_process_input+0x37c>)
 80014ca:	f007 fa6f 	bl	80089ac <puts>
        extend_pin(3);
 80014ce:	2003      	movs	r0, #3
 80014d0:	f001 f944 	bl	800275c <extend_pin>
        break;
 80014d4:	e111      	b.n	80016fa <main_process_input+0x456>
    case 'X':
        printf("extend_pin(4)\r\n");
 80014d6:	4853      	ldr	r0, [pc, #332]	@ (8001624 <main_process_input+0x380>)
 80014d8:	f007 fa68 	bl	80089ac <puts>
        extend_pin(4);
 80014dc:	2004      	movs	r0, #4
 80014de:	f001 f93d 	bl	800275c <extend_pin>
        break;
 80014e2:	e10a      	b.n	80016fa <main_process_input+0x456>
    case 'Y':
        printf("extend_pin(5)\r\n");
 80014e4:	4850      	ldr	r0, [pc, #320]	@ (8001628 <main_process_input+0x384>)
 80014e6:	f007 fa61 	bl	80089ac <puts>
        extend_pin(5);
 80014ea:	2005      	movs	r0, #5
 80014ec:	f001 f936 	bl	800275c <extend_pin>
        break;
 80014f0:	e103      	b.n	80016fa <main_process_input+0x456>
    case 'Z':
        printf("extend_pin(6)\r\n");
 80014f2:	484e      	ldr	r0, [pc, #312]	@ (800162c <main_process_input+0x388>)
 80014f4:	f007 fa5a 	bl	80089ac <puts>
        extend_pin(6);
 80014f8:	2006      	movs	r0, #6
 80014fa:	f001 f92f 	bl	800275c <extend_pin>
        break;
 80014fe:	e0fc      	b.n	80016fa <main_process_input+0x456>
    case 'S':
        if (launcher.tubeCount == '8'){
 8001500:	4b40      	ldr	r3, [pc, #256]	@ (8001604 <main_process_input+0x360>)
 8001502:	785b      	ldrb	r3, [r3, #1]
 8001504:	2b38      	cmp	r3, #56	@ 0x38
 8001506:	d106      	bne.n	8001516 <main_process_input+0x272>
        	printf("extend_pin(7)\r\n");
 8001508:	4849      	ldr	r0, [pc, #292]	@ (8001630 <main_process_input+0x38c>)
 800150a:	f007 fa4f 	bl	80089ac <puts>
        	extend_pin(7);
 800150e:	2007      	movs	r0, #7
 8001510:	f001 f924 	bl	800275c <extend_pin>
        } else {
        	printf("\r\n* ERROR: tube 7 not available *\r\n");
        }
        break;
 8001514:	e0f1      	b.n	80016fa <main_process_input+0x456>
        	printf("\r\n* ERROR: tube 7 not available *\r\n");
 8001516:	483d      	ldr	r0, [pc, #244]	@ (800160c <main_process_input+0x368>)
 8001518:	f007 fa48 	bl	80089ac <puts>
        break;
 800151c:	e0ed      	b.n	80016fa <main_process_input+0x456>
    case 'T':
        if (launcher.tubeCount == '8'){
 800151e:	4b39      	ldr	r3, [pc, #228]	@ (8001604 <main_process_input+0x360>)
 8001520:	785b      	ldrb	r3, [r3, #1]
 8001522:	2b38      	cmp	r3, #56	@ 0x38
 8001524:	d106      	bne.n	8001534 <main_process_input+0x290>
        	printf("extend_pin(8)\r\n");
 8001526:	4843      	ldr	r0, [pc, #268]	@ (8001634 <main_process_input+0x390>)
 8001528:	f007 fa40 	bl	80089ac <puts>
        	extend_pin(8);
 800152c:	2008      	movs	r0, #8
 800152e:	f001 f915 	bl	800275c <extend_pin>
        } else {
        	printf("\r\n* ERROR: tube 8 not available *\r\n");
        }
        break;
 8001532:	e0e2      	b.n	80016fa <main_process_input+0x456>
        	printf("\r\n* ERROR: tube 8 not available *\r\n");
 8001534:	4837      	ldr	r0, [pc, #220]	@ (8001614 <main_process_input+0x370>)
 8001536:	f007 fa39 	bl	80089ac <puts>
        break;
 800153a:	e0de      	b.n	80016fa <main_process_input+0x456>
        //RETRACT PINS
    case 'A':
    	printf("retract_pin(1)\r\n");
 800153c:	483e      	ldr	r0, [pc, #248]	@ (8001638 <main_process_input+0x394>)
 800153e:	f007 fa35 	bl	80089ac <puts>
    	retract_pin(1);
 8001542:	2001      	movs	r0, #1
 8001544:	f001 f918 	bl	8002778 <retract_pin>
        break;
 8001548:	e0d7      	b.n	80016fa <main_process_input+0x456>
    case 'B':
        printf("retract_pin(2)\r\n");
 800154a:	483c      	ldr	r0, [pc, #240]	@ (800163c <main_process_input+0x398>)
 800154c:	f007 fa2e 	bl	80089ac <puts>
        retract_pin(2);
 8001550:	2002      	movs	r0, #2
 8001552:	f001 f911 	bl	8002778 <retract_pin>
        break;
 8001556:	e0d0      	b.n	80016fa <main_process_input+0x456>
    case 'C':
        printf("retract_pin(3)\r\n");
 8001558:	4839      	ldr	r0, [pc, #228]	@ (8001640 <main_process_input+0x39c>)
 800155a:	f007 fa27 	bl	80089ac <puts>
        retract_pin(3);
 800155e:	2003      	movs	r0, #3
 8001560:	f001 f90a 	bl	8002778 <retract_pin>
        break;
 8001564:	e0c9      	b.n	80016fa <main_process_input+0x456>
    case 'D':
        printf("retract_pin(4)\r\n");
 8001566:	4837      	ldr	r0, [pc, #220]	@ (8001644 <main_process_input+0x3a0>)
 8001568:	f007 fa20 	bl	80089ac <puts>
        retract_pin(4);
 800156c:	2004      	movs	r0, #4
 800156e:	f001 f903 	bl	8002778 <retract_pin>
        break;
 8001572:	e0c2      	b.n	80016fa <main_process_input+0x456>
    case 'E':
        printf("retract_pin(5)\r\n");
 8001574:	4834      	ldr	r0, [pc, #208]	@ (8001648 <main_process_input+0x3a4>)
 8001576:	f007 fa19 	bl	80089ac <puts>
        retract_pin(5);
 800157a:	2005      	movs	r0, #5
 800157c:	f001 f8fc 	bl	8002778 <retract_pin>
        break;
 8001580:	e0bb      	b.n	80016fa <main_process_input+0x456>
    case 'F':
        printf("retract_pin(6)\r\n");
 8001582:	4832      	ldr	r0, [pc, #200]	@ (800164c <main_process_input+0x3a8>)
 8001584:	f007 fa12 	bl	80089ac <puts>
        retract_pin(6);
 8001588:	2006      	movs	r0, #6
 800158a:	f001 f8f5 	bl	8002778 <retract_pin>
        break;
 800158e:	e0b4      	b.n	80016fa <main_process_input+0x456>
    case 'H':
        if (launcher.tubeCount == '8'){
 8001590:	4b1c      	ldr	r3, [pc, #112]	@ (8001604 <main_process_input+0x360>)
 8001592:	785b      	ldrb	r3, [r3, #1]
 8001594:	2b38      	cmp	r3, #56	@ 0x38
 8001596:	d106      	bne.n	80015a6 <main_process_input+0x302>
        	printf("retract_pin(7)\r\n");
 8001598:	482d      	ldr	r0, [pc, #180]	@ (8001650 <main_process_input+0x3ac>)
 800159a:	f007 fa07 	bl	80089ac <puts>
        	retract_pin(7);
 800159e:	2007      	movs	r0, #7
 80015a0:	f001 f8ea 	bl	8002778 <retract_pin>
        } else {
        	printf("* ERROR: tube 7 not available *\r\n");
        }
        break;
 80015a4:	e0a9      	b.n	80016fa <main_process_input+0x456>
        	printf("* ERROR: tube 7 not available *\r\n");
 80015a6:	482b      	ldr	r0, [pc, #172]	@ (8001654 <main_process_input+0x3b0>)
 80015a8:	f007 fa00 	bl	80089ac <puts>
        break;
 80015ac:	e0a5      	b.n	80016fa <main_process_input+0x456>
    case 'I':
        if (launcher.tubeCount == '8'){
 80015ae:	4b15      	ldr	r3, [pc, #84]	@ (8001604 <main_process_input+0x360>)
 80015b0:	785b      	ldrb	r3, [r3, #1]
 80015b2:	2b38      	cmp	r3, #56	@ 0x38
 80015b4:	d106      	bne.n	80015c4 <main_process_input+0x320>
        	printf("retract_pin(8)\r\n");
 80015b6:	4828      	ldr	r0, [pc, #160]	@ (8001658 <main_process_input+0x3b4>)
 80015b8:	f007 f9f8 	bl	80089ac <puts>
        	retract_pin(8);
 80015bc:	2008      	movs	r0, #8
 80015be:	f001 f8db 	bl	8002778 <retract_pin>
        } else {
        	printf("* ERROR: tube 8 not available *\r\n");
        }
        break;
 80015c2:	e09a      	b.n	80016fa <main_process_input+0x456>
        	printf("* ERROR: tube 8 not available *\r\n");
 80015c4:	4825      	ldr	r0, [pc, #148]	@ (800165c <main_process_input+0x3b8>)
 80015c6:	f007 f9f1 	bl	80089ac <puts>
        break;
 80015ca:	e096      	b.n	80016fa <main_process_input+0x456>
    case 'K':
    	printf("calibrate_on()\r\n");
 80015cc:	4824      	ldr	r0, [pc, #144]	@ (8001660 <main_process_input+0x3bc>)
 80015ce:	f007 f9ed 	bl	80089ac <puts>
        calibrate_on();
 80015d2:	f000 ff5b 	bl	800248c <calibrate_on>
        break;
 80015d6:	e090      	b.n	80016fa <main_process_input+0x456>
    case 'R':
    	printf("reset_relay()\r\n");
 80015d8:	4822      	ldr	r0, [pc, #136]	@ (8001664 <main_process_input+0x3c0>)
 80015da:	f007 f9e7 	bl	80089ac <puts>
        reset_relay();
 80015de:	f000 ff6d 	bl	80024bc <reset_relay>
        break;
 80015e2:	e08a      	b.n	80016fa <main_process_input+0x456>
 80015e4:	0800984c 	.word	0x0800984c
 80015e8:	0800986c 	.word	0x0800986c
 80015ec:	080098a4 	.word	0x080098a4
 80015f0:	080098b8 	.word	0x080098b8
 80015f4:	080098cc 	.word	0x080098cc
 80015f8:	080098e0 	.word	0x080098e0
 80015fc:	080098f4 	.word	0x080098f4
 8001600:	08009908 	.word	0x08009908
 8001604:	20000158 	.word	0x20000158
 8001608:	0800991c 	.word	0x0800991c
 800160c:	08009930 	.word	0x08009930
 8001610:	08009954 	.word	0x08009954
 8001614:	08009968 	.word	0x08009968
 8001618:	0800998c 	.word	0x0800998c
 800161c:	0800999c 	.word	0x0800999c
 8001620:	080099ac 	.word	0x080099ac
 8001624:	080099bc 	.word	0x080099bc
 8001628:	080099cc 	.word	0x080099cc
 800162c:	080099dc 	.word	0x080099dc
 8001630:	080099ec 	.word	0x080099ec
 8001634:	080099fc 	.word	0x080099fc
 8001638:	08009a0c 	.word	0x08009a0c
 800163c:	08009a1c 	.word	0x08009a1c
 8001640:	08009a2c 	.word	0x08009a2c
 8001644:	08009a3c 	.word	0x08009a3c
 8001648:	08009a4c 	.word	0x08009a4c
 800164c:	08009a5c 	.word	0x08009a5c
 8001650:	08009a6c 	.word	0x08009a6c
 8001654:	08009a7c 	.word	0x08009a7c
 8001658:	08009aa0 	.word	0x08009aa0
 800165c:	08009ab0 	.word	0x08009ab0
 8001660:	08009ad4 	.word	0x08009ad4
 8001664:	08009ae4 	.word	0x08009ae4
    case 'L':
    	printf("calibration_resistor()\r\n");
 8001668:	4826      	ldr	r0, [pc, #152]	@ (8001704 <main_process_input+0x460>)
 800166a:	f007 f99f 	bl	80089ac <puts>
        calibration_resistor();
 800166e:	f000 fef5 	bl	800245c <calibration_resistor>
        break;
 8001672:	e042      	b.n	80016fa <main_process_input+0x456>
    case 'G':
    	printf("unground_xbt()\r\n");
 8001674:	4824      	ldr	r0, [pc, #144]	@ (8001708 <main_process_input+0x464>)
 8001676:	f007 f999 	bl	80089ac <puts>
        unground_xbt();
 800167a:	f000 fed7 	bl	800242c <unground_xbt>
        break;
 800167e:	e03c      	b.n	80016fa <main_process_input+0x456>
    case 'M':
        menu_main();
 8001680:	f000 fc6a 	bl	8001f58 <menu_main>
        break;
 8001684:	e039      	b.n	80016fa <main_process_input+0x456>
    case '~':
        menu_config();
 8001686:	f000 fd01 	bl	800208c <menu_config>
        activeMenu = configMenu; // set configuration menu flag
 800168a:	4b20      	ldr	r3, [pc, #128]	@ (800170c <main_process_input+0x468>)
 800168c:	2201      	movs	r2, #1
 800168e:	701a      	strb	r2, [r3, #0]
        break;
 8001690:	e033      	b.n	80016fa <main_process_input+0x456>
    case 's':
        print_serial_number();
 8001692:	f000 fdcf 	bl	8002234 <print_serial_number>
        printf("\r\n");
 8001696:	481e      	ldr	r0, [pc, #120]	@ (8001710 <main_process_input+0x46c>)
 8001698:	f007 f988 	bl	80089ac <puts>
        break;
 800169c:	e02d      	b.n	80016fa <main_process_input+0x456>
    case 'P':
    	// read input voltage and internal temp on autolauncher
    	adcScan_t adcReading = get_adc_values();
 800169e:	f107 0308 	add.w	r3, r7, #8
 80016a2:	4618      	mov	r0, r3
 80016a4:	f001 f9fc 	bl	8002aa0 <get_adc_values>
		printf("\r\nVOLTAGE[AD# %i]: %i.%i V | TEMPERATURE[AD# %i]: %i.%i C\r\n",
					 (int)adcReading.voltage.rawValue, (int)adcReading.voltage.realValue, get_decimal(adcReading.voltage.realValue, 1),
 80016a8:	893b      	ldrh	r3, [r7, #8]
		printf("\r\nVOLTAGE[AD# %i]: %i.%i V | TEMPERATURE[AD# %i]: %i.%i C\r\n",
 80016aa:	4698      	mov	r8, r3
					 (int)adcReading.voltage.rawValue, (int)adcReading.voltage.realValue, get_decimal(adcReading.voltage.realValue, 1),
 80016ac:	68fb      	ldr	r3, [r7, #12]
		printf("\r\nVOLTAGE[AD# %i]: %i.%i V | TEMPERATURE[AD# %i]: %i.%i C\r\n",
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff fb2e 	bl	8000d10 <__aeabi_f2iz>
 80016b4:	4605      	mov	r5, r0
					 (int)adcReading.voltage.rawValue, (int)adcReading.voltage.realValue, get_decimal(adcReading.voltage.realValue, 1),
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2101      	movs	r1, #1
 80016ba:	4618      	mov	r0, r3
 80016bc:	f001 fac6 	bl	8002c4c <get_decimal>
 80016c0:	4603      	mov	r3, r0
		printf("\r\nVOLTAGE[AD# %i]: %i.%i V | TEMPERATURE[AD# %i]: %i.%i C\r\n",
 80016c2:	4699      	mov	r9, r3
					 (int)adcReading.temperature.rawValue, (int)adcReading.temperature.realValue, get_decimal(adcReading.temperature.realValue, 1));
 80016c4:	8b3b      	ldrh	r3, [r7, #24]
		printf("\r\nVOLTAGE[AD# %i]: %i.%i V | TEMPERATURE[AD# %i]: %i.%i C\r\n",
 80016c6:	461e      	mov	r6, r3
					 (int)adcReading.temperature.rawValue, (int)adcReading.temperature.realValue, get_decimal(adcReading.temperature.realValue, 1));
 80016c8:	69fb      	ldr	r3, [r7, #28]
		printf("\r\nVOLTAGE[AD# %i]: %i.%i V | TEMPERATURE[AD# %i]: %i.%i C\r\n",
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff fb20 	bl	8000d10 <__aeabi_f2iz>
 80016d0:	4604      	mov	r4, r0
					 (int)adcReading.temperature.rawValue, (int)adcReading.temperature.realValue, get_decimal(adcReading.temperature.realValue, 1));
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	2101      	movs	r1, #1
 80016d6:	4618      	mov	r0, r3
 80016d8:	f001 fab8 	bl	8002c4c <get_decimal>
 80016dc:	4603      	mov	r3, r0
		printf("\r\nVOLTAGE[AD# %i]: %i.%i V | TEMPERATURE[AD# %i]: %i.%i C\r\n",
 80016de:	9302      	str	r3, [sp, #8]
 80016e0:	9401      	str	r4, [sp, #4]
 80016e2:	9600      	str	r6, [sp, #0]
 80016e4:	464b      	mov	r3, r9
 80016e6:	462a      	mov	r2, r5
 80016e8:	4641      	mov	r1, r8
 80016ea:	480a      	ldr	r0, [pc, #40]	@ (8001714 <main_process_input+0x470>)
 80016ec:	f007 f8f6 	bl	80088dc <iprintf>
    	//analog_t vin = voltage_read(VOLTAGE_READ_SAMPLES);
    	//printf("[AD# %i] Vin= %i.%i V\r\n", vin.adcReading,(uint8_t)vin.realValue, (uint8_t)(vin.realValue * 10 - ((uint8_t)vin.realValue * 10)) );
    	break;
 80016f0:	e003      	b.n	80016fa <main_process_input+0x456>
    default:
        printf("\r\n** Unrecognized command!!** \r\n");
 80016f2:	4809      	ldr	r0, [pc, #36]	@ (8001718 <main_process_input+0x474>)
 80016f4:	f007 f95a 	bl	80089ac <puts>
        break;
 80016f8:	bf00      	nop
	}
}
 80016fa:	bf00      	nop
 80016fc:	3724      	adds	r7, #36	@ 0x24
 80016fe:	46bd      	mov	sp, r7
 8001700:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001704:	08009af4 	.word	0x08009af4
 8001708:	08009b0c 	.word	0x08009b0c
 800170c:	20000157 	.word	0x20000157
 8001710:	08009b1c 	.word	0x08009b1c
 8001714:	08009b20 	.word	0x08009b20
 8001718:	08009b5c 	.word	0x08009b5c

0800171c <config_process_input>:

/* Process char received while in configuration menu */
void config_process_input(char option){
 800171c:	b5b0      	push	{r4, r5, r7, lr}
 800171e:	b0f2      	sub	sp, #456	@ 0x1c8
 8001720:	af02      	add	r7, sp, #8
 8001722:	4602      	mov	r2, r0
 8001724:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001728:	f2a3 13b9 	subw	r3, r3, #441	@ 0x1b9
 800172c:	701a      	strb	r2, [r3, #0]
	launcher_t alMemory;
	motor_t mtMemory;

    switch (option) {
 800172e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001732:	f2a3 13b9 	subw	r3, r3, #441	@ 0x1b9
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	3b31      	subs	r3, #49	@ 0x31
 800173a:	2b23      	cmp	r3, #35	@ 0x23
 800173c:	f200 83ec 	bhi.w	8001f18 <config_process_input+0x7fc>
 8001740:	a201      	add	r2, pc, #4	@ (adr r2, 8001748 <config_process_input+0x2c>)
 8001742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001746:	bf00      	nop
 8001748:	080017f1 	.word	0x080017f1
 800174c:	08001f19 	.word	0x08001f19
 8001750:	08001f19 	.word	0x08001f19
 8001754:	08001f19 	.word	0x08001f19
 8001758:	08001f19 	.word	0x08001f19
 800175c:	08001f19 	.word	0x08001f19
 8001760:	08001f19 	.word	0x08001f19
 8001764:	08001f19 	.word	0x08001f19
 8001768:	08001f19 	.word	0x08001f19
 800176c:	08001f19 	.word	0x08001f19
 8001770:	08001f19 	.word	0x08001f19
 8001774:	08001f19 	.word	0x08001f19
 8001778:	08001f19 	.word	0x08001f19
 800177c:	08001f19 	.word	0x08001f19
 8001780:	08001f19 	.word	0x08001f19
 8001784:	08001f19 	.word	0x08001f19
 8001788:	08001f19 	.word	0x08001f19
 800178c:	08001f19 	.word	0x08001f19
 8001790:	08001aad 	.word	0x08001aad
 8001794:	08001f19 	.word	0x08001f19
 8001798:	08001f19 	.word	0x08001f19
 800179c:	08001f19 	.word	0x08001f19
 80017a0:	08001a4d 	.word	0x08001a4d
 80017a4:	08001f19 	.word	0x08001f19
 80017a8:	08001f19 	.word	0x08001f19
 80017ac:	08001a01 	.word	0x08001a01
 80017b0:	08001f19 	.word	0x08001f19
 80017b4:	08001f19 	.word	0x08001f19
 80017b8:	080017eb 	.word	0x080017eb
 80017bc:	08001a27 	.word	0x08001a27
 80017c0:	08001f19 	.word	0x08001f19
 80017c4:	08001f19 	.word	0x08001f19
 80017c8:	080017d9 	.word	0x080017d9
 80017cc:	08001f19 	.word	0x08001f19
 80017d0:	08001f19 	.word	0x08001f19
 80017d4:	08001ce9 	.word	0x08001ce9
        case 'Q':
            printf("\n\rLeaving Auto launcher configuration menu\n\r");
 80017d8:	48a0      	ldr	r0, [pc, #640]	@ (8001a5c <config_process_input+0x340>)
 80017da:	f007 f87f 	bl	80088dc <iprintf>
            activeMenu = mainMenu; // set active menu flag to main menu
 80017de:	4ba0      	ldr	r3, [pc, #640]	@ (8001a60 <config_process_input+0x344>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	701a      	strb	r2, [r3, #0]
            menu_main();
 80017e4:	f000 fbb8 	bl	8001f58 <menu_main>
            break;
 80017e8:	e39d      	b.n	8001f26 <config_process_input+0x80a>
        case 'M':
            menu_config();
 80017ea:	f000 fc4f 	bl	800208c <menu_config>
            break;
 80017ee:	e39a      	b.n	8001f26 <config_process_input+0x80a>
        case '1':
        	// get the autolauncher tube count
        	char tubes[1];
        	char tubePrompt[] = "\r\nEnter AL tube count [6] or [8]: ";
 80017f0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80017f4:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80017f8:	4a9a      	ldr	r2, [pc, #616]	@ (8001a64 <config_process_input+0x348>)
 80017fa:	461c      	mov	r4, r3
 80017fc:	4615      	mov	r5, r2
 80017fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001800:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001802:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001804:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001806:	682b      	ldr	r3, [r5, #0]
 8001808:	461a      	mov	r2, r3
 800180a:	8022      	strh	r2, [r4, #0]
 800180c:	3402      	adds	r4, #2
 800180e:	0c1b      	lsrs	r3, r3, #16
 8001810:	7023      	strb	r3, [r4, #0]
        	char tubeError[] = "\r\nERROR: Enter 6 or 8 !\r\n";
 8001812:	4b95      	ldr	r3, [pc, #596]	@ (8001a68 <config_process_input+0x34c>)
 8001814:	f507 74b8 	add.w	r4, r7, #368	@ 0x170
 8001818:	461d      	mov	r5, r3
 800181a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800181c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800181e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001822:	c403      	stmia	r4!, {r0, r1}
 8001824:	8022      	strh	r2, [r4, #0]
        	char tubeCheck[] = {'6','8'};
 8001826:	f643 0336 	movw	r3, #14390	@ 0x3836
 800182a:	f8a7 316c 	strh.w	r3, [r7, #364]	@ 0x16c
        	get_user_input(tubePrompt, tubeError, 1, tubeCheck, tubes);
 800182e:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8001832:	f507 71b8 	add.w	r1, r7, #368	@ 0x170
 8001836:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 800183a:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	4613      	mov	r3, r2
 8001842:	2201      	movs	r2, #1
 8001844:	f000 fc8a 	bl	800215c <get_user_input>

            launcher.tubeCount = tubes[0];
 8001848:	f897 218c 	ldrb.w	r2, [r7, #396]	@ 0x18c
 800184c:	4b87      	ldr	r3, [pc, #540]	@ (8001a6c <config_process_input+0x350>)
 800184e:	705a      	strb	r2, [r3, #1]
            // get the autolauncher type, R regular or X extended, only for 8 tube AL
            if(launcher.tubeCount == '8'){
 8001850:	4b86      	ldr	r3, [pc, #536]	@ (8001a6c <config_process_input+0x350>)
 8001852:	785b      	ldrb	r3, [r3, #1]
 8001854:	2b38      	cmp	r3, #56	@ 0x38
 8001856:	d138      	bne.n	80018ca <config_process_input+0x1ae>
            	char type[1];
            	char typePrompt[] = "Enter launcher type, [X] extended or [R] regular: ";
 8001858:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800185c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001860:	4a83      	ldr	r2, [pc, #524]	@ (8001a70 <config_process_input+0x354>)
 8001862:	461c      	mov	r4, r3
 8001864:	4615      	mov	r5, r2
 8001866:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001868:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800186a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800186c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800186e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001870:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001872:	682b      	ldr	r3, [r5, #0]
 8001874:	461a      	mov	r2, r3
 8001876:	8022      	strh	r2, [r4, #0]
 8001878:	3402      	adds	r4, #2
 800187a:	0c1b      	lsrs	r3, r3, #16
 800187c:	7023      	strb	r3, [r4, #0]
            	char typeError[] = "\r\nERROR: Enter X or R !\r\n";
 800187e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001882:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001886:	4a7b      	ldr	r2, [pc, #492]	@ (8001a74 <config_process_input+0x358>)
 8001888:	461c      	mov	r4, r3
 800188a:	4615      	mov	r5, r2
 800188c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800188e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001890:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001894:	c403      	stmia	r4!, {r0, r1}
 8001896:	8022      	strh	r2, [r4, #0]
            	char typeCheck[] = {'R','X'};
 8001898:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800189c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80018a0:	f645 0252 	movw	r2, #22610	@ 0x5852
 80018a4:	801a      	strh	r2, [r3, #0]
            	get_user_input(typePrompt, typeError, 1, typeCheck, type);
 80018a6:	f107 02bc 	add.w	r2, r7, #188	@ 0xbc
 80018aa:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 80018ae:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 80018b2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80018b6:	9300      	str	r3, [sp, #0]
 80018b8:	4613      	mov	r3, r2
 80018ba:	2201      	movs	r2, #1
 80018bc:	f000 fc4e 	bl	800215c <get_user_input>
            	launcher.type = type[0];
 80018c0:	f897 20dc 	ldrb.w	r2, [r7, #220]	@ 0xdc
 80018c4:	4b69      	ldr	r3, [pc, #420]	@ (8001a6c <config_process_input+0x350>)
 80018c6:	709a      	strb	r2, [r3, #2]
 80018c8:	e002      	b.n	80018d0 <config_process_input+0x1b4>

            } else {
            	launcher.type = '?'; // if not 8 tubes, reset type to unknown
 80018ca:	4b68      	ldr	r3, [pc, #416]	@ (8001a6c <config_process_input+0x350>)
 80018cc:	223f      	movs	r2, #63	@ 0x3f
 80018ce:	709a      	strb	r2, [r3, #2]
            }
            //launcher.serialNumber = 55;
        	char serial[2];
        	char serialPrompt[] = "Enter a two-digit autolauncher serial number [00-99]: ";
 80018d0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80018d4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80018d8:	4a67      	ldr	r2, [pc, #412]	@ (8001a78 <config_process_input+0x35c>)
 80018da:	461c      	mov	r4, r3
 80018dc:	4615      	mov	r5, r2
 80018de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018ea:	e895 0003 	ldmia.w	r5, {r0, r1}
 80018ee:	6020      	str	r0, [r4, #0]
 80018f0:	3404      	adds	r4, #4
 80018f2:	8021      	strh	r1, [r4, #0]
 80018f4:	3402      	adds	r4, #2
 80018f6:	0c0b      	lsrs	r3, r1, #16
 80018f8:	7023      	strb	r3, [r4, #0]
        	char serialError[] = "\r\nEnter only numbers!\r\n";
 80018fa:	4b60      	ldr	r3, [pc, #384]	@ (8001a7c <config_process_input+0x360>)
 80018fc:	f507 74a8 	add.w	r4, r7, #336	@ 0x150
 8001900:	461d      	mov	r5, r3
 8001902:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001904:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001906:	e895 0003 	ldmia.w	r5, {r0, r1}
 800190a:	e884 0003 	stmia.w	r4, {r0, r1}
        	char serialCheck[] = {'0','1','2','3','4','5','6','7','8','9'};
 800190e:	4a5c      	ldr	r2, [pc, #368]	@ (8001a80 <config_process_input+0x364>)
 8001910:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8001914:	ca07      	ldmia	r2, {r0, r1, r2}
 8001916:	c303      	stmia	r3!, {r0, r1}
 8001918:	801a      	strh	r2, [r3, #0]
        	get_user_input(serialPrompt, serialError, 2, serialCheck, serial);
 800191a:	f507 72a2 	add.w	r2, r7, #324	@ 0x144
 800191e:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8001922:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 8001926:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	4613      	mov	r3, r2
 800192e:	2202      	movs	r2, #2
 8001930:	f000 fc14 	bl	800215c <get_user_input>
        	launcher.serialNumber = (uint8_t)(serial[0] - '0') * 10 + (serial[1] - '0'); // convert to number, subtract '0' (48 dec)
 8001934:	f897 3168 	ldrb.w	r3, [r7, #360]	@ 0x168
 8001938:	461a      	mov	r2, r3
 800193a:	0092      	lsls	r2, r2, #2
 800193c:	4413      	add	r3, r2
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	b2da      	uxtb	r2, r3
 8001942:	f897 3169 	ldrb.w	r3, [r7, #361]	@ 0x169
 8001946:	4413      	add	r3, r2
 8001948:	b2db      	uxtb	r3, r3
 800194a:	3b10      	subs	r3, #16
 800194c:	b2da      	uxtb	r2, r3
 800194e:	4b47      	ldr	r3, [pc, #284]	@ (8001a6c <config_process_input+0x350>)
 8001950:	701a      	strb	r2, [r3, #0]
            launcher.configured = '|';
 8001952:	4b46      	ldr	r3, [pc, #280]	@ (8001a6c <config_process_input+0x350>)
 8001954:	227c      	movs	r2, #124	@ 0x7c
 8001956:	711a      	strb	r2, [r3, #4]
            printf("\r\nTubes: %c | Type: %c | Serial: %i\r\n", launcher.tubeCount, launcher.type, launcher.serialNumber);
 8001958:	4b44      	ldr	r3, [pc, #272]	@ (8001a6c <config_process_input+0x350>)
 800195a:	785b      	ldrb	r3, [r3, #1]
 800195c:	4619      	mov	r1, r3
 800195e:	4b43      	ldr	r3, [pc, #268]	@ (8001a6c <config_process_input+0x350>)
 8001960:	789b      	ldrb	r3, [r3, #2]
 8001962:	461a      	mov	r2, r3
 8001964:	4b41      	ldr	r3, [pc, #260]	@ (8001a6c <config_process_input+0x350>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	4846      	ldr	r0, [pc, #280]	@ (8001a84 <config_process_input+0x368>)
 800196a:	f006 ffb7 	bl	80088dc <iprintf>

            // store parameters in eeprom
            eeprom_write_nbytes(AL_TUBECOUNT1B, sizeof(launcher.tubeCount), &launcher.tubeCount);
 800196e:	4a46      	ldr	r2, [pc, #280]	@ (8001a88 <config_process_input+0x36c>)
 8001970:	2101      	movs	r1, #1
 8001972:	2000      	movs	r0, #0
 8001974:	f001 fa6e 	bl	8002e54 <eeprom_write_nbytes>
//            eeprom_write(AL_TUBECOUNT1B, launcher.tubeCount);
            eeprom_write_nbytes(AL_TYPE1B, sizeof(launcher.type), &launcher.type);
 8001978:	4a44      	ldr	r2, [pc, #272]	@ (8001a8c <config_process_input+0x370>)
 800197a:	2101      	movs	r1, #1
 800197c:	2001      	movs	r0, #1
 800197e:	f001 fa69 	bl	8002e54 <eeprom_write_nbytes>
//            eeprom_write(AL_TYPE1B, launcher.type);
            eeprom_write_nbytes(AL_SN1B, sizeof(launcher.serialNumber), &launcher.serialNumber);
 8001982:	4a3a      	ldr	r2, [pc, #232]	@ (8001a6c <config_process_input+0x350>)
 8001984:	2101      	movs	r1, #1
 8001986:	2002      	movs	r0, #2
 8001988:	f001 fa64 	bl	8002e54 <eeprom_write_nbytes>
//            eeprom_write(AL_SN1B, launcher.serialNumber);
            eeprom_write_nbytes(AL_CONFIGED1B, sizeof(launcher.configured), &launcher.configured);
 800198c:	4a40      	ldr	r2, [pc, #256]	@ (8001a90 <config_process_input+0x374>)
 800198e:	2101      	movs	r1, #1
 8001990:	2003      	movs	r0, #3
 8001992:	f001 fa5f 	bl	8002e54 <eeprom_write_nbytes>
//            eeprom_write(AL_CONFIGED1B, eeprom.configured);
            printf("Settings saved!");
 8001996:	483f      	ldr	r0, [pc, #252]	@ (8001a94 <config_process_input+0x378>)
 8001998:	f006 ffa0 	bl	80088dc <iprintf>
//            printf("\r\nNew autolauncher configuration: Tubes: %c | Type: %c | Serial: %i | configed: %c\r\n", eeprom_read(AL_TUBECOUNT1B), eeprom_read(AL_TYPE1B), eeprom_read(AL_SN1B), eeprom_read(AL_CONFIGED1B));

            // test eeprom memory
//            alMemory = *(launcher_t*) eeprom_read(DATA_LAUNCHER);
            eeprom_read_nbytes(AL_TUBECOUNT1B, sizeof(alMemory.tubeCount), &alMemory.tubeCount);
 800199c:	f507 73da 	add.w	r3, r7, #436	@ 0x1b4
 80019a0:	3301      	adds	r3, #1
 80019a2:	461a      	mov	r2, r3
 80019a4:	2101      	movs	r1, #1
 80019a6:	2000      	movs	r0, #0
 80019a8:	f001 fa7d 	bl	8002ea6 <eeprom_read_nbytes>
            eeprom_read_nbytes(AL_TYPE1B, sizeof(alMemory.type), &alMemory.type);
 80019ac:	f507 73da 	add.w	r3, r7, #436	@ 0x1b4
 80019b0:	3302      	adds	r3, #2
 80019b2:	461a      	mov	r2, r3
 80019b4:	2101      	movs	r1, #1
 80019b6:	2001      	movs	r0, #1
 80019b8:	f001 fa75 	bl	8002ea6 <eeprom_read_nbytes>
            eeprom_read_nbytes(AL_SN1B, sizeof(alMemory.serialNumber), &alMemory.serialNumber);
 80019bc:	f507 73da 	add.w	r3, r7, #436	@ 0x1b4
 80019c0:	461a      	mov	r2, r3
 80019c2:	2101      	movs	r1, #1
 80019c4:	2002      	movs	r0, #2
 80019c6:	f001 fa6e 	bl	8002ea6 <eeprom_read_nbytes>
            eeprom_read_nbytes(AL_CONFIGED1B, sizeof(alMemory.configured), &alMemory.configured);
 80019ca:	f507 73da 	add.w	r3, r7, #436	@ 0x1b4
 80019ce:	3304      	adds	r3, #4
 80019d0:	461a      	mov	r2, r3
 80019d2:	2101      	movs	r1, #1
 80019d4:	2003      	movs	r0, #3
 80019d6:	f001 fa66 	bl	8002ea6 <eeprom_read_nbytes>

            printf("\r\nStored autolauncher configuration: Tubes: %c | Type: %c | Serial: %i | configed: %c\r\n",
            		alMemory.tubeCount, alMemory.type, alMemory.serialNumber, alMemory.configured);
 80019da:	f897 31b5 	ldrb.w	r3, [r7, #437]	@ 0x1b5
            printf("\r\nStored autolauncher configuration: Tubes: %c | Type: %c | Serial: %i | configed: %c\r\n",
 80019de:	4619      	mov	r1, r3
            		alMemory.tubeCount, alMemory.type, alMemory.serialNumber, alMemory.configured);
 80019e0:	f897 31b6 	ldrb.w	r3, [r7, #438]	@ 0x1b6
            printf("\r\nStored autolauncher configuration: Tubes: %c | Type: %c | Serial: %i | configed: %c\r\n",
 80019e4:	461a      	mov	r2, r3
            		alMemory.tubeCount, alMemory.type, alMemory.serialNumber, alMemory.configured);
 80019e6:	f897 31b4 	ldrb.w	r3, [r7, #436]	@ 0x1b4
            printf("\r\nStored autolauncher configuration: Tubes: %c | Type: %c | Serial: %i | configed: %c\r\n",
 80019ea:	4618      	mov	r0, r3
            		alMemory.tubeCount, alMemory.type, alMemory.serialNumber, alMemory.configured);
 80019ec:	f897 31b8 	ldrb.w	r3, [r7, #440]	@ 0x1b8
            printf("\r\nStored autolauncher configuration: Tubes: %c | Type: %c | Serial: %i | configed: %c\r\n",
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	4603      	mov	r3, r0
 80019f4:	4828      	ldr	r0, [pc, #160]	@ (8001a98 <config_process_input+0x37c>)
 80019f6:	f006 ff71 	bl	80088dc <iprintf>
            // print config menu again
            menu_config();
 80019fa:	f000 fb47 	bl	800208c <menu_config>
            break;
 80019fe:	e292      	b.n	8001f26 <config_process_input+0x80a>
        case 'J':
        	printf("extend_all_pins()\r\n");
 8001a00:	4826      	ldr	r0, [pc, #152]	@ (8001a9c <config_process_input+0x380>)
 8001a02:	f006 ffd3 	bl	80089ac <puts>
        	if(launcher.tubeCount == '6')
 8001a06:	4b19      	ldr	r3, [pc, #100]	@ (8001a6c <config_process_input+0x350>)
 8001a08:	785b      	ldrb	r3, [r3, #1]
 8001a0a:	2b36      	cmp	r3, #54	@ 0x36
 8001a0c:	d102      	bne.n	8001a14 <config_process_input+0x2f8>
        		extend_all_pins(6);
 8001a0e:	2006      	movs	r0, #6
 8001a10:	f000 fe60 	bl	80026d4 <extend_all_pins>
        	if(launcher.tubeCount == '8')
 8001a14:	4b15      	ldr	r3, [pc, #84]	@ (8001a6c <config_process_input+0x350>)
 8001a16:	785b      	ldrb	r3, [r3, #1]
 8001a18:	2b38      	cmp	r3, #56	@ 0x38
 8001a1a:	f040 8281 	bne.w	8001f20 <config_process_input+0x804>
        		extend_all_pins(8);
 8001a1e:	2008      	movs	r0, #8
 8001a20:	f000 fe58 	bl	80026d4 <extend_all_pins>
            break;
 8001a24:	e27c      	b.n	8001f20 <config_process_input+0x804>
        case 'N':
        	printf("retract_all_pins()\r\n");
 8001a26:	481e      	ldr	r0, [pc, #120]	@ (8001aa0 <config_process_input+0x384>)
 8001a28:	f006 ffc0 	bl	80089ac <puts>
        	if(launcher.tubeCount == '6')
 8001a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a6c <config_process_input+0x350>)
 8001a2e:	785b      	ldrb	r3, [r3, #1]
 8001a30:	2b36      	cmp	r3, #54	@ 0x36
 8001a32:	d102      	bne.n	8001a3a <config_process_input+0x31e>
        		retract_all_pins(6);
 8001a34:	2006      	movs	r0, #6
 8001a36:	f000 fe6f 	bl	8002718 <retract_all_pins>
        	if(launcher.tubeCount == '8')
 8001a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a6c <config_process_input+0x350>)
 8001a3c:	785b      	ldrb	r3, [r3, #1]
 8001a3e:	2b38      	cmp	r3, #56	@ 0x38
 8001a40:	f040 8270 	bne.w	8001f24 <config_process_input+0x808>
        		retract_all_pins(8);
 8001a44:	2008      	movs	r0, #8
 8001a46:	f000 fe67 	bl	8002718 <retract_all_pins>
            break;
 8001a4a:	e26b      	b.n	8001f24 <config_process_input+0x808>
        case 'G':
            printf("\n\rSend the \"@\" symbol repeatedly to exit grease pins mode\r\n");
 8001a4c:	4815      	ldr	r0, [pc, #84]	@ (8001aa4 <config_process_input+0x388>)
 8001a4e:	f006 ffad 	bl	80089ac <puts>
            printf("grease_pins();");
 8001a52:	4815      	ldr	r0, [pc, #84]	@ (8001aa8 <config_process_input+0x38c>)
 8001a54:	f006 ff42 	bl	80088dc <iprintf>
            //grease_pins();
            break;
 8001a58:	e265      	b.n	8001f26 <config_process_input+0x80a>
 8001a5a:	bf00      	nop
 8001a5c:	08009b7c 	.word	0x08009b7c
 8001a60:	20000157 	.word	0x20000157
 8001a64:	08009da8 	.word	0x08009da8
 8001a68:	08009dcc 	.word	0x08009dcc
 8001a6c:	20000158 	.word	0x20000158
 8001a70:	08009de8 	.word	0x08009de8
 8001a74:	08009e1c 	.word	0x08009e1c
 8001a78:	08009e38 	.word	0x08009e38
 8001a7c:	08009e70 	.word	0x08009e70
 8001a80:	08009e88 	.word	0x08009e88
 8001a84:	08009bac 	.word	0x08009bac
 8001a88:	20000159 	.word	0x20000159
 8001a8c:	2000015a 	.word	0x2000015a
 8001a90:	2000015c 	.word	0x2000015c
 8001a94:	08009bd4 	.word	0x08009bd4
 8001a98:	08009be4 	.word	0x08009be4
 8001a9c:	08009c3c 	.word	0x08009c3c
 8001aa0:	08009c50 	.word	0x08009c50
 8001aa4:	08009c64 	.word	0x08009c64
 8001aa8:	08009ca0 	.word	0x08009ca0
        case 'C':
        	uint8_t memStart, memEnd;
        	eeprom_print_map(); // print memory map
 8001aac:	f001 f9a8 	bl	8002e00 <eeprom_print_map>
        	// get the memory range to clear - start
        	uint8_t validMemory = 0; // valid memory value flag
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	f887 31bf 	strb.w	r3, [r7, #447]	@ 0x1bf
			char mem[3]; // buffer to store digits
			char mStartPrompt[] = "\r\nEnter 3 digit START memory address [000-127]: ";
 8001ab6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001aba:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001abe:	4a83      	ldr	r2, [pc, #524]	@ (8001ccc <config_process_input+0x5b0>)
 8001ac0:	461c      	mov	r4, r3
 8001ac2:	4615      	mov	r5, r2
 8001ac4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ac6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ac8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001aca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001acc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ace:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ad0:	682b      	ldr	r3, [r5, #0]
 8001ad2:	7023      	strb	r3, [r4, #0]
			char mEndPrompt[] = "\r\nEnter 3 digit END memory address [000-127]: ";
 8001ad4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001ad8:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001adc:	4a7c      	ldr	r2, [pc, #496]	@ (8001cd0 <config_process_input+0x5b4>)
 8001ade:	461c      	mov	r4, r3
 8001ae0:	4615      	mov	r5, r2
 8001ae2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ae4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ae6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ae8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001aea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001aee:	c407      	stmia	r4!, {r0, r1, r2}
 8001af0:	8023      	strh	r3, [r4, #0]
 8001af2:	3402      	adds	r4, #2
 8001af4:	0c1b      	lsrs	r3, r3, #16
 8001af6:	7023      	strb	r3, [r4, #0]
			char memError[] = "\r\n* ERROR: enter valid numbers *\r\n";
 8001af8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001afc:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001b00:	4a74      	ldr	r2, [pc, #464]	@ (8001cd4 <config_process_input+0x5b8>)
 8001b02:	461c      	mov	r4, r3
 8001b04:	4615      	mov	r5, r2
 8001b06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b0e:	682b      	ldr	r3, [r5, #0]
 8001b10:	461a      	mov	r2, r3
 8001b12:	8022      	strh	r2, [r4, #0]
 8001b14:	3402      	adds	r4, #2
 8001b16:	0c1b      	lsrs	r3, r3, #16
 8001b18:	7023      	strb	r3, [r4, #0]
			char memCheck[] = {'0','1','2','3','4','5','6','7','8','9'};
 8001b1a:	4a6f      	ldr	r2, [pc, #444]	@ (8001cd8 <config_process_input+0x5bc>)
 8001b1c:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8001b20:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b22:	c303      	stmia	r3!, {r0, r1}
 8001b24:	801a      	strh	r2, [r3, #0]
			// get start address
        	do{
				get_user_input(mStartPrompt, memError, 3, memCheck, mem);
 8001b26:	f507 729a 	add.w	r2, r7, #308	@ 0x134
 8001b2a:	f107 0108 	add.w	r1, r7, #8
 8001b2e:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 8001b32:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	2203      	movs	r2, #3
 8001b3c:	f000 fb0e 	bl	800215c <get_user_input>
				memStart = (uint8_t)(mem[0] - '0') * 100 + (mem[1] - '0') * 10 + (mem[2] - '0'); // convert to number, subtract '0' (48 dec)
 8001b40:	f897 3140 	ldrb.w	r3, [r7, #320]	@ 0x140
 8001b44:	461a      	mov	r2, r3
 8001b46:	0092      	lsls	r2, r2, #2
 8001b48:	4413      	add	r3, r2
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	0091      	lsls	r1, r2, #2
 8001b4e:	461a      	mov	r2, r3
 8001b50:	460b      	mov	r3, r1
 8001b52:	4413      	add	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	f897 3141 	ldrb.w	r3, [r7, #321]	@ 0x141
 8001b5c:	3b30      	subs	r3, #48	@ 0x30
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	4619      	mov	r1, r3
 8001b62:	0089      	lsls	r1, r1, #2
 8001b64:	440b      	add	r3, r1
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	4413      	add	r3, r2
 8001b6c:	b2da      	uxtb	r2, r3
 8001b6e:	f897 3142 	ldrb.w	r3, [r7, #322]	@ 0x142
 8001b72:	4413      	add	r3, r2
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	3310      	adds	r3, #16
 8001b78:	f887 31bc 	strb.w	r3, [r7, #444]	@ 0x1bc
				if((memStart >= 0) && (memStart <= 127)){
 8001b7c:	f997 31bc 	ldrsb.w	r3, [r7, #444]	@ 0x1bc
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	db03      	blt.n	8001b8c <config_process_input+0x470>
					validMemory = 1;
 8001b84:	2301      	movs	r3, #1
 8001b86:	f887 31bf 	strb.w	r3, [r7, #447]	@ 0x1bf
 8001b8a:	e002      	b.n	8001b92 <config_process_input+0x476>
				} else {
					printf("Memory out of range!\r\n");
 8001b8c:	4853      	ldr	r0, [pc, #332]	@ (8001cdc <config_process_input+0x5c0>)
 8001b8e:	f006 ff0d 	bl	80089ac <puts>
				}
        	} while ( validMemory == 0 );
 8001b92:	f897 31bf 	ldrb.w	r3, [r7, #447]	@ 0x1bf
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0c5      	beq.n	8001b26 <config_process_input+0x40a>
        	// get end address
        	validMemory = 0;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	f887 31bf 	strb.w	r3, [r7, #447]	@ 0x1bf
        	do{
				mem[0] = '\0', mem[1] = '\0' , mem[2] = '\0';
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	f887 3140 	strb.w	r3, [r7, #320]	@ 0x140
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	f887 3141 	strb.w	r3, [r7, #321]	@ 0x141
 8001bac:	2300      	movs	r3, #0
 8001bae:	f887 3142 	strb.w	r3, [r7, #322]	@ 0x142

				get_user_input(mEndPrompt, memError, 3, memCheck, mem);
 8001bb2:	f507 729a 	add.w	r2, r7, #308	@ 0x134
 8001bb6:	f107 0108 	add.w	r1, r7, #8
 8001bba:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001bbe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	2203      	movs	r2, #3
 8001bc8:	f000 fac8 	bl	800215c <get_user_input>
				memEnd = (uint8_t)( (mem[0] - '0') * 100 + (mem[1] - '0') * 10 + (mem[2] - '0') ); // convert to number, subtract '0' (48 dec)
 8001bcc:	f897 3140 	ldrb.w	r3, [r7, #320]	@ 0x140
 8001bd0:	3b30      	subs	r3, #48	@ 0x30
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	0092      	lsls	r2, r2, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	461a      	mov	r2, r3
 8001bdc:	0091      	lsls	r1, r2, #2
 8001bde:	461a      	mov	r2, r3
 8001be0:	460b      	mov	r3, r1
 8001be2:	4413      	add	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	f897 3141 	ldrb.w	r3, [r7, #321]	@ 0x141
 8001bec:	3b30      	subs	r3, #48	@ 0x30
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	0089      	lsls	r1, r1, #2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	4413      	add	r3, r2
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	f897 3142 	ldrb.w	r3, [r7, #322]	@ 0x142
 8001c02:	4413      	add	r3, r2
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	3b30      	subs	r3, #48	@ 0x30
 8001c08:	f887 31bb 	strb.w	r3, [r7, #443]	@ 0x1bb
				if((memEnd >= 0) && (memEnd <= 127)){
 8001c0c:	f997 31bb 	ldrsb.w	r3, [r7, #443]	@ 0x1bb
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	db03      	blt.n	8001c1c <config_process_input+0x500>
					validMemory = 1;
 8001c14:	2301      	movs	r3, #1
 8001c16:	f887 31bf 	strb.w	r3, [r7, #447]	@ 0x1bf
 8001c1a:	e002      	b.n	8001c22 <config_process_input+0x506>
				} else {
					printf("Memory out of range!\r\n");
 8001c1c:	482f      	ldr	r0, [pc, #188]	@ (8001cdc <config_process_input+0x5c0>)
 8001c1e:	f006 fec5 	bl	80089ac <puts>
				}
        	} while ( validMemory == 0 );
 8001c22:	f897 31bf 	ldrb.w	r3, [r7, #447]	@ 0x1bf
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0ba      	beq.n	8001ba0 <config_process_input+0x484>
        	printf("%i blocks cleared\r\n", eeprom_clear(memStart, memEnd));
 8001c2a:	f897 21bb 	ldrb.w	r2, [r7, #443]	@ 0x1bb
 8001c2e:	f897 31bc 	ldrb.w	r3, [r7, #444]	@ 0x1bc
 8001c32:	4611      	mov	r1, r2
 8001c34:	4618      	mov	r0, r3
 8001c36:	f001 f8b1 	bl	8002d9c <eeprom_clear>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4828      	ldr	r0, [pc, #160]	@ (8001ce0 <config_process_input+0x5c4>)
 8001c40:	f006 fe4c 	bl	80088dc <iprintf>
//    		launcher.type = eeprom_read(AL_TYPE1B);
//    		launcher.serialNumber = eeprom_read(AL_SN1B);
//    		launcher.configured = eeprom_read(AL_CONFIGED1B);
//    		motor.runTime = eeprom_read_uint32(M_RUNTIME4B);

        	eeprom_read_nbytes(AL_TUBECOUNT1B, sizeof(alMemory.tubeCount), &alMemory.tubeCount);
 8001c44:	f507 73da 	add.w	r3, r7, #436	@ 0x1b4
 8001c48:	3301      	adds	r3, #1
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	2000      	movs	r0, #0
 8001c50:	f001 f929 	bl	8002ea6 <eeprom_read_nbytes>
        	eeprom_read_nbytes(AL_TYPE1B, sizeof(alMemory.type), &alMemory.type);
 8001c54:	f507 73da 	add.w	r3, r7, #436	@ 0x1b4
 8001c58:	3302      	adds	r3, #2
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	2001      	movs	r0, #1
 8001c60:	f001 f921 	bl	8002ea6 <eeprom_read_nbytes>
        	eeprom_read_nbytes(AL_SN1B, sizeof(alMemory.serialNumber), &alMemory.serialNumber);
 8001c64:	f507 73da 	add.w	r3, r7, #436	@ 0x1b4
 8001c68:	461a      	mov	r2, r3
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	2002      	movs	r0, #2
 8001c6e:	f001 f91a 	bl	8002ea6 <eeprom_read_nbytes>
        	eeprom_read_nbytes(AL_CONFIGED1B, sizeof(alMemory.configured), &alMemory.configured);
 8001c72:	f507 73da 	add.w	r3, r7, #436	@ 0x1b4
 8001c76:	3304      	adds	r3, #4
 8001c78:	461a      	mov	r2, r3
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	2003      	movs	r0, #3
 8001c7e:	f001 f912 	bl	8002ea6 <eeprom_read_nbytes>
        	eeprom_read_nbytes(M_RUNTIME2B, sizeof(mtMemory.runTime), &mtMemory.runTime);
 8001c82:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001c86:	461a      	mov	r2, r3
 8001c88:	2102      	movs	r1, #2
 8001c8a:	2008      	movs	r0, #8
 8001c8c:	f001 f90b 	bl	8002ea6 <eeprom_read_nbytes>
        	eeprom_read_nbytes(M_SAMPLEPERIOD2B, sizeof(mtMemory.samplePeriod), &mtMemory.samplePeriod);
 8001c90:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001c94:	3302      	adds	r3, #2
 8001c96:	461a      	mov	r2, r3
 8001c98:	2102      	movs	r1, #2
 8001c9a:	200a      	movs	r0, #10
 8001c9c:	f001 f903 	bl	8002ea6 <eeprom_read_nbytes>
//        	mtMemory = *(motor_t*) eeprom_read(DATA_MOTOR);
//        	alMemory = *(launcher_t*) eeprom_read(DATA_LAUNCHER);
    		printf("\r\n<AL> Tubes: %c | Type: %c | Serial: %i <M> Runtime: %i | Sample Period: %i\r\n", alMemory.tubeCount, alMemory.type, alMemory.serialNumber, mtMemory.runTime, mtMemory.samplePeriod);
 8001ca0:	f897 31b5 	ldrb.w	r3, [r7, #437]	@ 0x1b5
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	f897 31b6 	ldrb.w	r3, [r7, #438]	@ 0x1b6
 8001caa:	4618      	mov	r0, r3
 8001cac:	f897 31b4 	ldrb.w	r3, [r7, #436]	@ 0x1b4
 8001cb0:	461c      	mov	r4, r3
 8001cb2:	f8b7 3190 	ldrh.w	r3, [r7, #400]	@ 0x190
 8001cb6:	f8b7 2192 	ldrh.w	r2, [r7, #402]	@ 0x192
 8001cba:	9201      	str	r2, [sp, #4]
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	4623      	mov	r3, r4
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	4808      	ldr	r0, [pc, #32]	@ (8001ce4 <config_process_input+0x5c8>)
 8001cc4:	f006 fe0a 	bl	80088dc <iprintf>

        	break;
 8001cc8:	e12d      	b.n	8001f26 <config_process_input+0x80a>
 8001cca:	bf00      	nop
 8001ccc:	08009e94 	.word	0x08009e94
 8001cd0:	08009ec8 	.word	0x08009ec8
 8001cd4:	08009ef8 	.word	0x08009ef8
 8001cd8:	08009e88 	.word	0x08009e88
 8001cdc:	08009cb0 	.word	0x08009cb0
 8001ce0:	08009cc8 	.word	0x08009cc8
 8001ce4:	08009cdc 	.word	0x08009cdc
        case 'T':
        	// motor runtime
        	char mot[5];
        	char motorPrompt[] = "Enter motor runtime (5-digit number) in milliseconds [02000-15000]: ";
 8001ce8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001cec:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001cf0:	4a8f      	ldr	r2, [pc, #572]	@ (8001f30 <config_process_input+0x814>)
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	4611      	mov	r1, r2
 8001cf6:	2345      	movs	r3, #69	@ 0x45
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	f007 f866 	bl	8008dca <memcpy>
        	char motorError[] = "\r\nEnter only numbers!\r\n";
 8001cfe:	4b8d      	ldr	r3, [pc, #564]	@ (8001f34 <config_process_input+0x818>)
 8001d00:	f507 748a 	add.w	r4, r7, #276	@ 0x114
 8001d04:	461d      	mov	r5, r3
 8001d06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d0a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001d0e:	e884 0003 	stmia.w	r4, {r0, r1}
        	char motorCheck[] = {'0','1','2','3','4','5','6','7','8','9'};
 8001d12:	4a89      	ldr	r2, [pc, #548]	@ (8001f38 <config_process_input+0x81c>)
 8001d14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001d18:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d1a:	c303      	stmia	r3!, {r0, r1}
 8001d1c:	801a      	strh	r2, [r3, #0]
        	uint8_t rtFlag;
        	do{
        		rtFlag = 0;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	f887 31be 	strb.w	r3, [r7, #446]	@ 0x1be
        		get_user_input(motorPrompt, motorError, 5, motorCheck, mot);
 8001d24:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8001d28:	f507 718a 	add.w	r1, r7, #276	@ 0x114
 8001d2c:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001d30:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8001d34:	9300      	str	r3, [sp, #0]
 8001d36:	4613      	mov	r3, r2
 8001d38:	2205      	movs	r2, #5
 8001d3a:	f000 fa0f 	bl	800215c <get_user_input>
        		motor.runTime = (uint16_t)( (mot[0] - '0') * 10000 + (mot[1] - '0') * 1000 + (mot[2] - '0') * 100 + (mot[3] - '0') * 10 + (mot[4] - '0') );
 8001d3e:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 8001d42:	3b30      	subs	r3, #48	@ 0x30
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	461a      	mov	r2, r3
 8001d48:	0152      	lsls	r2, r2, #5
 8001d4a:	1ad2      	subs	r2, r2, r3
 8001d4c:	0092      	lsls	r2, r2, #2
 8001d4e:	4413      	add	r3, r2
 8001d50:	461a      	mov	r2, r3
 8001d52:	0091      	lsls	r1, r2, #2
 8001d54:	461a      	mov	r2, r3
 8001d56:	460b      	mov	r3, r1
 8001d58:	4413      	add	r3, r2
 8001d5a:	011b      	lsls	r3, r3, #4
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 8001d62:	3b30      	subs	r3, #48	@ 0x30
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	4619      	mov	r1, r3
 8001d68:	0149      	lsls	r1, r1, #5
 8001d6a:	1ac9      	subs	r1, r1, r3
 8001d6c:	0089      	lsls	r1, r1, #2
 8001d6e:	440b      	add	r3, r1
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	4413      	add	r3, r2
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8001d7c:	3b30      	subs	r3, #48	@ 0x30
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	4619      	mov	r1, r3
 8001d82:	0089      	lsls	r1, r1, #2
 8001d84:	440b      	add	r3, r1
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	b299      	uxth	r1, r3
 8001d8a:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8001d8e:	3b30      	subs	r3, #48	@ 0x30
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	4618      	mov	r0, r3
 8001d94:	0080      	lsls	r0, r0, #2
 8001d96:	4403      	add	r3, r0
 8001d98:	4618      	mov	r0, r3
 8001d9a:	0084      	lsls	r4, r0, #2
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	4623      	mov	r3, r4
 8001da0:	4403      	add	r3, r0
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	440b      	add	r3, r1
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	4413      	add	r3, r2
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	f897 2130 	ldrb.w	r2, [r7, #304]	@ 0x130
 8001db2:	4413      	add	r3, r2
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	3b30      	subs	r3, #48	@ 0x30
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	4b60      	ldr	r3, [pc, #384]	@ (8001f3c <config_process_input+0x820>)
 8001dbc:	801a      	strh	r2, [r3, #0]
        		if((motor.runTime < MOTOR_RUNTIME_MIN) || (motor.runTime > MOTOR_RUNTIME_MAX)){
 8001dbe:	4b5f      	ldr	r3, [pc, #380]	@ (8001f3c <config_process_input+0x820>)
 8001dc0:	881b      	ldrh	r3, [r3, #0]
 8001dc2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001dc6:	d305      	bcc.n	8001dd4 <config_process_input+0x6b8>
 8001dc8:	4b5c      	ldr	r3, [pc, #368]	@ (8001f3c <config_process_input+0x820>)
 8001dca:	881b      	ldrh	r3, [r3, #0]
 8001dcc:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d905      	bls.n	8001de0 <config_process_input+0x6c4>
        			printf("\r\nValue out of range!\r\n");
 8001dd4:	485a      	ldr	r0, [pc, #360]	@ (8001f40 <config_process_input+0x824>)
 8001dd6:	f006 fde9 	bl	80089ac <puts>
        			rtFlag = 1;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	f887 31be 	strb.w	r3, [r7, #446]	@ 0x1be
        		}

        	} while(rtFlag);
 8001de0:	f897 31be 	ldrb.w	r3, [r7, #446]	@ 0x1be
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d19a      	bne.n	8001d1e <config_process_input+0x602>

        	// adc sample period
        	char sPeriod[4];
        	char sPeriodPrompt[] = "Enter ADC sampling time (4-digit number) in milliseconds [0100-2000]: ";
 8001de8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001dec:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001df0:	4a54      	ldr	r2, [pc, #336]	@ (8001f44 <config_process_input+0x828>)
 8001df2:	4618      	mov	r0, r3
 8001df4:	4611      	mov	r1, r2
 8001df6:	2347      	movs	r3, #71	@ 0x47
 8001df8:	461a      	mov	r2, r3
 8001dfa:	f006 ffe6 	bl	8008dca <memcpy>
        	char sPeriodError[] = "\r\nEnter only numbers!\r\n";
 8001dfe:	4b4d      	ldr	r3, [pc, #308]	@ (8001f34 <config_process_input+0x818>)
 8001e00:	f107 04ec 	add.w	r4, r7, #236	@ 0xec
 8001e04:	461d      	mov	r5, r3
 8001e06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e0a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001e0e:	e884 0003 	stmia.w	r4, {r0, r1}
        	char sPeriodCheck[] = {'0','1','2','3','4','5','6','7','8','9'};
 8001e12:	4a49      	ldr	r2, [pc, #292]	@ (8001f38 <config_process_input+0x81c>)
 8001e14:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001e18:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e1a:	c303      	stmia	r3!, {r0, r1}
 8001e1c:	801a      	strh	r2, [r3, #0]
        	uint8_t spFlag;
        	do{
        		spFlag = 0;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	f887 31bd 	strb.w	r3, [r7, #445]	@ 0x1bd
        		get_user_input(sPeriodPrompt, sPeriodError, 4, sPeriodCheck, sPeriod);
 8001e24:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 8001e28:	f107 01ec 	add.w	r1, r7, #236	@ 0xec
 8001e2c:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 8001e30:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001e34:	9300      	str	r3, [sp, #0]
 8001e36:	4613      	mov	r3, r2
 8001e38:	2204      	movs	r2, #4
 8001e3a:	f000 f98f 	bl	800215c <get_user_input>
        		motor.samplePeriod = (uint16_t) ( (sPeriod[0] - '0') * 1000 + (sPeriod[1] - '0') * 100 + (sPeriod[2] - '0') * 10 + (sPeriod[3] - '0') );
 8001e3e:	f897 3104 	ldrb.w	r3, [r7, #260]	@ 0x104
 8001e42:	3b30      	subs	r3, #48	@ 0x30
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	461a      	mov	r2, r3
 8001e48:	0152      	lsls	r2, r2, #5
 8001e4a:	1ad2      	subs	r2, r2, r3
 8001e4c:	0092      	lsls	r2, r2, #2
 8001e4e:	4413      	add	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	f897 3105 	ldrb.w	r3, [r7, #261]	@ 0x105
 8001e58:	3b30      	subs	r3, #48	@ 0x30
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	0089      	lsls	r1, r1, #2
 8001e60:	440b      	add	r3, r1
 8001e62:	4619      	mov	r1, r3
 8001e64:	0088      	lsls	r0, r1, #2
 8001e66:	4619      	mov	r1, r3
 8001e68:	4603      	mov	r3, r0
 8001e6a:	440b      	add	r3, r1
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	4413      	add	r3, r2
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 8001e78:	3b30      	subs	r3, #48	@ 0x30
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	0089      	lsls	r1, r1, #2
 8001e80:	440b      	add	r3, r1
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	4413      	add	r3, r2
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	f897 2107 	ldrb.w	r2, [r7, #263]	@ 0x107
 8001e8e:	4413      	add	r3, r2
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	3b30      	subs	r3, #48	@ 0x30
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	4b29      	ldr	r3, [pc, #164]	@ (8001f3c <config_process_input+0x820>)
 8001e98:	805a      	strh	r2, [r3, #2]
        		if((motor.samplePeriod < MOTOR_SAMPLE_PERIOD_MIN) || (motor.samplePeriod > MOTOR_SAMPLE_PERIOD_MAX)){
 8001e9a:	4b28      	ldr	r3, [pc, #160]	@ (8001f3c <config_process_input+0x820>)
 8001e9c:	885b      	ldrh	r3, [r3, #2]
 8001e9e:	2b63      	cmp	r3, #99	@ 0x63
 8001ea0:	d904      	bls.n	8001eac <config_process_input+0x790>
 8001ea2:	4b26      	ldr	r3, [pc, #152]	@ (8001f3c <config_process_input+0x820>)
 8001ea4:	885b      	ldrh	r3, [r3, #2]
 8001ea6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001eaa:	d905      	bls.n	8001eb8 <config_process_input+0x79c>
        			printf("\r\nValue out of range!\r\n");
 8001eac:	4824      	ldr	r0, [pc, #144]	@ (8001f40 <config_process_input+0x824>)
 8001eae:	f006 fd7d 	bl	80089ac <puts>
        			spFlag = 1;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	f887 31bd 	strb.w	r3, [r7, #445]	@ 0x1bd
        		}
        	} while(spFlag);
 8001eb8:	f897 31bd 	ldrb.w	r3, [r7, #445]	@ 0x1bd
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1ae      	bne.n	8001e1e <config_process_input+0x702>

        	// Print all inputs
        	printf("Motor Runtime: %i ms | ADC Sample Period: %i\r\n", (int)motor.runTime, (int)motor.samplePeriod);
 8001ec0:	4b1e      	ldr	r3, [pc, #120]	@ (8001f3c <config_process_input+0x820>)
 8001ec2:	881b      	ldrh	r3, [r3, #0]
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4b1d      	ldr	r3, [pc, #116]	@ (8001f3c <config_process_input+0x820>)
 8001ec8:	885b      	ldrh	r3, [r3, #2]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	481e      	ldr	r0, [pc, #120]	@ (8001f48 <config_process_input+0x82c>)
 8001ece:	f006 fd05 	bl	80088dc <iprintf>
        	// store in eeprom
    		eeprom_write_nbytes(M_RUNTIME2B, sizeof(motor.runTime), &motor.runTime);
 8001ed2:	4a1a      	ldr	r2, [pc, #104]	@ (8001f3c <config_process_input+0x820>)
 8001ed4:	2102      	movs	r1, #2
 8001ed6:	2008      	movs	r0, #8
 8001ed8:	f000 ffbc 	bl	8002e54 <eeprom_write_nbytes>
    		eeprom_write_nbytes(M_SAMPLEPERIOD2B, sizeof(motor.samplePeriod), &motor.samplePeriod);
 8001edc:	4a1b      	ldr	r2, [pc, #108]	@ (8001f4c <config_process_input+0x830>)
 8001ede:	2102      	movs	r1, #2
 8001ee0:	200a      	movs	r0, #10
 8001ee2:	f000 ffb7 	bl	8002e54 <eeprom_write_nbytes>
//    		eeprom_write_uint32(M_RUNTIME4B, motor.runTime);
    		// test memory
    		eeprom_read_nbytes(M_RUNTIME2B, sizeof(mtMemory.runTime), &mtMemory.runTime);
 8001ee6:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001eea:	461a      	mov	r2, r3
 8001eec:	2102      	movs	r1, #2
 8001eee:	2008      	movs	r0, #8
 8001ef0:	f000 ffd9 	bl	8002ea6 <eeprom_read_nbytes>
    		eeprom_read_nbytes(M_SAMPLEPERIOD2B, sizeof(mtMemory.samplePeriod), &mtMemory.samplePeriod);
 8001ef4:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001ef8:	3302      	adds	r3, #2
 8001efa:	461a      	mov	r2, r3
 8001efc:	2102      	movs	r1, #2
 8001efe:	200a      	movs	r0, #10
 8001f00:	f000 ffd1 	bl	8002ea6 <eeprom_read_nbytes>
//    		mtMemory = *(motor_t*) eeprom_read(DATA_MOTOR);
    		printf("Setting saved! Runtime: %i | Sample Period: %i\r\n\r\n", (int)mtMemory.runTime, (int)mtMemory.samplePeriod);
 8001f04:	f8b7 3190 	ldrh.w	r3, [r7, #400]	@ 0x190
 8001f08:	4619      	mov	r1, r3
 8001f0a:	f8b7 3192 	ldrh.w	r3, [r7, #402]	@ 0x192
 8001f0e:	461a      	mov	r2, r3
 8001f10:	480f      	ldr	r0, [pc, #60]	@ (8001f50 <config_process_input+0x834>)
 8001f12:	f006 fce3 	bl	80088dc <iprintf>

        	break;
 8001f16:	e006      	b.n	8001f26 <config_process_input+0x80a>
        default:
        	printf("\r\n** Unrecognized command!!** \r\n");
 8001f18:	480e      	ldr	r0, [pc, #56]	@ (8001f54 <config_process_input+0x838>)
 8001f1a:	f006 fd47 	bl	80089ac <puts>
            break;
 8001f1e:	e002      	b.n	8001f26 <config_process_input+0x80a>
            break;
 8001f20:	bf00      	nop
 8001f22:	e000      	b.n	8001f26 <config_process_input+0x80a>
            break;
 8001f24:	bf00      	nop
    }
}
 8001f26:	bf00      	nop
 8001f28:	f507 77e0 	add.w	r7, r7, #448	@ 0x1c0
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bdb0      	pop	{r4, r5, r7, pc}
 8001f30:	08009f1c 	.word	0x08009f1c
 8001f34:	08009e70 	.word	0x08009e70
 8001f38:	08009e88 	.word	0x08009e88
 8001f3c:	20000160 	.word	0x20000160
 8001f40:	08009d2c 	.word	0x08009d2c
 8001f44:	08009f64 	.word	0x08009f64
 8001f48:	08009d44 	.word	0x08009d44
 8001f4c:	20000162 	.word	0x20000162
 8001f50:	08009d74 	.word	0x08009d74
 8001f54:	08009b5c 	.word	0x08009b5c

08001f58 <menu_main>:


void menu_main(void) {
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
    printf("\r\n\n\r");
 8001f5c:	4832      	ldr	r0, [pc, #200]	@ (8002028 <menu_main+0xd0>)
 8001f5e:	f006 fcbd 	bl	80088dc <iprintf>
    printf("=========================================\n\r");
 8001f62:	4832      	ldr	r0, [pc, #200]	@ (800202c <menu_main+0xd4>)
 8001f64:	f006 fcba 	bl	80088dc <iprintf>
    printf("|  AOML auto launcher board version 3.0 |\n\r");
 8001f68:	4831      	ldr	r0, [pc, #196]	@ (8002030 <menu_main+0xd8>)
 8001f6a:	f006 fcb7 	bl	80088dc <iprintf>
    printf("|  Firmware version 2024.mm.dd.hhmm     |\n\r");
 8001f6e:	4831      	ldr	r0, [pc, #196]	@ (8002034 <menu_main+0xdc>)
 8001f70:	f006 fcb4 	bl	80088dc <iprintf>
    printf("=========================================\n\r");
 8001f74:	482d      	ldr	r0, [pc, #180]	@ (800202c <menu_main+0xd4>)
 8001f76:	f006 fcb1 	bl	80088dc <iprintf>
    printf("|    Model #ALV3.0      S/N ");
 8001f7a:	482f      	ldr	r0, [pc, #188]	@ (8002038 <menu_main+0xe0>)
 8001f7c:	f006 fcae 	bl	80088dc <iprintf>
    print_serial_number();
 8001f80:	f000 f958 	bl	8002234 <print_serial_number>
    printf("       |\n\r");
 8001f84:	482d      	ldr	r0, [pc, #180]	@ (800203c <menu_main+0xe4>)
 8001f86:	f006 fca9 	bl	80088dc <iprintf>
    printf("=========================================\n\r");
 8001f8a:	4828      	ldr	r0, [pc, #160]	@ (800202c <menu_main+0xd4>)
 8001f8c:	f006 fca6 	bl	80088dc <iprintf>
    printf("|               COMMANDS                |\n\r");
 8001f90:	482b      	ldr	r0, [pc, #172]	@ (8002040 <menu_main+0xe8>)
 8001f92:	f006 fca3 	bl	80088dc <iprintf>
    if (launcher.configured != '|') {
 8001f96:	4b2b      	ldr	r3, [pc, #172]	@ (8002044 <menu_main+0xec>)
 8001f98:	791b      	ldrb	r3, [r3, #4]
 8001f9a:	2b7c      	cmp	r3, #124	@ 0x7c
 8001f9c:	d002      	beq.n	8001fa4 <menu_main+0x4c>
        printf("| ERROR, NO SERIAL NUMBER ASSIGNED  |\n\r");
 8001f9e:	482a      	ldr	r0, [pc, #168]	@ (8002048 <menu_main+0xf0>)
 8001fa0:	f006 fc9c 	bl	80088dc <iprintf>
    }
    printf("=========================================\n\r");
 8001fa4:	4821      	ldr	r0, [pc, #132]	@ (800202c <menu_main+0xd4>)
 8001fa6:	f006 fc99 	bl	80088dc <iprintf>
    printf("| Connect  cal Sim BT  0                |\n\r");
 8001faa:	4828      	ldr	r0, [pc, #160]	@ (800204c <menu_main+0xf4>)
 8001fac:	f006 fc96 	bl	80088dc <iprintf>
    if (launcher.tubeCount == '6') {
 8001fb0:	4b24      	ldr	r3, [pc, #144]	@ (8002044 <menu_main+0xec>)
 8001fb2:	785b      	ldrb	r3, [r3, #1]
 8001fb4:	2b36      	cmp	r3, #54	@ 0x36
 8001fb6:	d109      	bne.n	8001fcc <menu_main+0x74>
        printf("| Connect  XBT 1-6     1,2,3,4,5,6      |\n\r");
 8001fb8:	4825      	ldr	r0, [pc, #148]	@ (8002050 <menu_main+0xf8>)
 8001fba:	f006 fc8f 	bl	80088dc <iprintf>
        printf("| Extend   Pin 1-6     U,V,W,X,Y,Z      |\n\r");
 8001fbe:	4825      	ldr	r0, [pc, #148]	@ (8002054 <menu_main+0xfc>)
 8001fc0:	f006 fc8c 	bl	80088dc <iprintf>
        printf("| Retract  Pin 1-6     A,B,C,D,E,F      |\n\r");
 8001fc4:	4824      	ldr	r0, [pc, #144]	@ (8002058 <menu_main+0x100>)
 8001fc6:	f006 fc89 	bl	80088dc <iprintf>
 8001fca:	e010      	b.n	8001fee <menu_main+0x96>
    } else if (launcher.tubeCount == '8') {
 8001fcc:	4b1d      	ldr	r3, [pc, #116]	@ (8002044 <menu_main+0xec>)
 8001fce:	785b      	ldrb	r3, [r3, #1]
 8001fd0:	2b38      	cmp	r3, #56	@ 0x38
 8001fd2:	d109      	bne.n	8001fe8 <menu_main+0x90>

        printf("| Connect  XBT 1-8     1,2,3,4,5,6,7,8  |\n\r");
 8001fd4:	4821      	ldr	r0, [pc, #132]	@ (800205c <menu_main+0x104>)
 8001fd6:	f006 fc81 	bl	80088dc <iprintf>
        printf("| Extend   Pin 1-8     U,V,W,X,Y,Z,S,T  |\n\r");
 8001fda:	4821      	ldr	r0, [pc, #132]	@ (8002060 <menu_main+0x108>)
 8001fdc:	f006 fc7e 	bl	80088dc <iprintf>
        printf("| Retract  Pin 1-8     A,B,C,D,E,F,H,I  |\n\r");
 8001fe0:	4820      	ldr	r0, [pc, #128]	@ (8002064 <menu_main+0x10c>)
 8001fe2:	f006 fc7b 	bl	80088dc <iprintf>
 8001fe6:	e002      	b.n	8001fee <menu_main+0x96>
    } else {
    	printf("| ERROR, NO TUBE COUNT!!     	        |\n\r");
 8001fe8:	481f      	ldr	r0, [pc, #124]	@ (8002068 <menu_main+0x110>)
 8001fea:	f006 fc77 	bl	80088dc <iprintf>
    }
    printf("| Unground XBT         G                |\n\r");
 8001fee:	481f      	ldr	r0, [pc, #124]	@ (800206c <menu_main+0x114>)
 8001ff0:	f006 fc74 	bl	80088dc <iprintf>
    printf("| Calibrate On         K                |\n\r");
 8001ff4:	481e      	ldr	r0, [pc, #120]	@ (8002070 <menu_main+0x118>)
 8001ff6:	f006 fc71 	bl	80088dc <iprintf>
    printf("| Cal Resistor         L                |\n\r");
 8001ffa:	481e      	ldr	r0, [pc, #120]	@ (8002074 <menu_main+0x11c>)
 8001ffc:	f006 fc6e 	bl	80088dc <iprintf>
    printf("| Reset Relays         R                |\n\r");
 8002000:	481d      	ldr	r0, [pc, #116]	@ (8002078 <menu_main+0x120>)
 8002002:	f006 fc6b 	bl	80088dc <iprintf>
    printf("| Print Serial Number  s                |\n\r");
 8002006:	481d      	ldr	r0, [pc, #116]	@ (800207c <menu_main+0x124>)
 8002008:	f006 fc68 	bl	80088dc <iprintf>
    printf("| This Menu            M                |\n\r");
 800200c:	481c      	ldr	r0, [pc, #112]	@ (8002080 <menu_main+0x128>)
 800200e:	f006 fc65 	bl	80088dc <iprintf>
    printf("| Read Voltage & Temp  P                |\n\r");
 8002012:	481c      	ldr	r0, [pc, #112]	@ (8002084 <menu_main+0x12c>)
 8002014:	f006 fc62 	bl	80088dc <iprintf>
    printf("=========================================\n\r");
 8002018:	4804      	ldr	r0, [pc, #16]	@ (800202c <menu_main+0xd4>)
 800201a:	f006 fc5f 	bl	80088dc <iprintf>
    printf("\r\n");
 800201e:	481a      	ldr	r0, [pc, #104]	@ (8002088 <menu_main+0x130>)
 8002020:	f006 fcc4 	bl	80089ac <puts>
}//end status_message
 8002024:	bf00      	nop
 8002026:	bd80      	pop	{r7, pc}
 8002028:	08009fac 	.word	0x08009fac
 800202c:	08009fb4 	.word	0x08009fb4
 8002030:	08009fe0 	.word	0x08009fe0
 8002034:	0800a00c 	.word	0x0800a00c
 8002038:	0800a038 	.word	0x0800a038
 800203c:	0800a058 	.word	0x0800a058
 8002040:	0800a064 	.word	0x0800a064
 8002044:	20000158 	.word	0x20000158
 8002048:	0800a090 	.word	0x0800a090
 800204c:	0800a0b8 	.word	0x0800a0b8
 8002050:	0800a0e4 	.word	0x0800a0e4
 8002054:	0800a110 	.word	0x0800a110
 8002058:	0800a13c 	.word	0x0800a13c
 800205c:	0800a168 	.word	0x0800a168
 8002060:	0800a194 	.word	0x0800a194
 8002064:	0800a1c0 	.word	0x0800a1c0
 8002068:	0800a1ec 	.word	0x0800a1ec
 800206c:	0800a218 	.word	0x0800a218
 8002070:	0800a244 	.word	0x0800a244
 8002074:	0800a270 	.word	0x0800a270
 8002078:	0800a29c 	.word	0x0800a29c
 800207c:	0800a2c8 	.word	0x0800a2c8
 8002080:	0800a2f4 	.word	0x0800a2f4
 8002084:	0800a320 	.word	0x0800a320
 8002088:	08009b1c 	.word	0x08009b1c

0800208c <menu_config>:


void menu_config(void) {
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
    printf("\n\r");
 8002090:	4821      	ldr	r0, [pc, #132]	@ (8002118 <menu_config+0x8c>)
 8002092:	f006 fc23 	bl	80088dc <iprintf>
    printf("=========================================\n\r");
 8002096:	4821      	ldr	r0, [pc, #132]	@ (800211c <menu_config+0x90>)
 8002098:	f006 fc20 	bl	80088dc <iprintf>
    printf("|  AOML auto launcher config menu       |\n\r");
 800209c:	4820      	ldr	r0, [pc, #128]	@ (8002120 <menu_config+0x94>)
 800209e:	f006 fc1d 	bl	80088dc <iprintf>
    printf("=========================================\n\r");
 80020a2:	481e      	ldr	r0, [pc, #120]	@ (800211c <menu_config+0x90>)
 80020a4:	f006 fc1a 	bl	80088dc <iprintf>
    printf("|    Model #ALV3.0      S/N ");
 80020a8:	481e      	ldr	r0, [pc, #120]	@ (8002124 <menu_config+0x98>)
 80020aa:	f006 fc17 	bl	80088dc <iprintf>
    print_serial_number();
 80020ae:	f000 f8c1 	bl	8002234 <print_serial_number>
    printf("       |\n\r");
 80020b2:	481d      	ldr	r0, [pc, #116]	@ (8002128 <menu_config+0x9c>)
 80020b4:	f006 fc12 	bl	80088dc <iprintf>
    printf("=========================================\n\r");
 80020b8:	4818      	ldr	r0, [pc, #96]	@ (800211c <menu_config+0x90>)
 80020ba:	f006 fc0f 	bl	80088dc <iprintf>
    printf("|               COMMANDS                |\n\r");
 80020be:	481b      	ldr	r0, [pc, #108]	@ (800212c <menu_config+0xa0>)
 80020c0:	f006 fc0c 	bl	80088dc <iprintf>
    printf("=========================================\n\r");
 80020c4:	4815      	ldr	r0, [pc, #84]	@ (800211c <menu_config+0x90>)
 80020c6:	f006 fc09 	bl	80088dc <iprintf>
    printf("| Set tubes & S/N      1                |\n\r");
 80020ca:	4819      	ldr	r0, [pc, #100]	@ (8002130 <menu_config+0xa4>)
 80020cc:	f006 fc06 	bl	80088dc <iprintf>
    printf("| This Menu            M                |\n\r");
 80020d0:	4818      	ldr	r0, [pc, #96]	@ (8002134 <menu_config+0xa8>)
 80020d2:	f006 fc03 	bl	80088dc <iprintf>
    printf("| Extend all pins      J                |\n\r");
 80020d6:	4818      	ldr	r0, [pc, #96]	@ (8002138 <menu_config+0xac>)
 80020d8:	f006 fc00 	bl	80088dc <iprintf>
    printf("| Retract all pins     N                |\n\r");
 80020dc:	4817      	ldr	r0, [pc, #92]	@ (800213c <menu_config+0xb0>)
 80020de:	f006 fbfd 	bl	80088dc <iprintf>
    printf("| Grease pins  mode    G                |\n\r");
 80020e2:	4817      	ldr	r0, [pc, #92]	@ (8002140 <menu_config+0xb4>)
 80020e4:	f006 fbfa 	bl	80088dc <iprintf>
    printf("| Clear memory range   C                |\n\r");
 80020e8:	4816      	ldr	r0, [pc, #88]	@ (8002144 <menu_config+0xb8>)
 80020ea:	f006 fbf7 	bl	80088dc <iprintf>
    printf("| Read motor stats     S                |\n\r");
 80020ee:	4816      	ldr	r0, [pc, #88]	@ (8002148 <menu_config+0xbc>)
 80020f0:	f006 fbf4 	bl	80088dc <iprintf>
    printf("| Set motor runtime                     |\n\r");
 80020f4:	4815      	ldr	r0, [pc, #84]	@ (800214c <menu_config+0xc0>)
 80020f6:	f006 fbf1 	bl	80088dc <iprintf>
    printf("| & sampling period    T                |\n\r");
 80020fa:	4815      	ldr	r0, [pc, #84]	@ (8002150 <menu_config+0xc4>)
 80020fc:	f006 fbee 	bl	80088dc <iprintf>
    printf("| Quit config menu     Q                |\n\r");
 8002100:	4814      	ldr	r0, [pc, #80]	@ (8002154 <menu_config+0xc8>)
 8002102:	f006 fbeb 	bl	80088dc <iprintf>
    printf("=========================================\n\r");
 8002106:	4805      	ldr	r0, [pc, #20]	@ (800211c <menu_config+0x90>)
 8002108:	f006 fbe8 	bl	80088dc <iprintf>
    printf("\r\n");
 800210c:	4812      	ldr	r0, [pc, #72]	@ (8002158 <menu_config+0xcc>)
 800210e:	f006 fc4d 	bl	80089ac <puts>
}//end status_message
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	0800a34c 	.word	0x0800a34c
 800211c:	08009fb4 	.word	0x08009fb4
 8002120:	0800a350 	.word	0x0800a350
 8002124:	0800a038 	.word	0x0800a038
 8002128:	0800a058 	.word	0x0800a058
 800212c:	0800a064 	.word	0x0800a064
 8002130:	0800a37c 	.word	0x0800a37c
 8002134:	0800a2f4 	.word	0x0800a2f4
 8002138:	0800a3a8 	.word	0x0800a3a8
 800213c:	0800a3d4 	.word	0x0800a3d4
 8002140:	0800a400 	.word	0x0800a400
 8002144:	0800a42c 	.word	0x0800a42c
 8002148:	0800a458 	.word	0x0800a458
 800214c:	0800a484 	.word	0x0800a484
 8002150:	0800a4b0 	.word	0x0800a4b0
 8002154:	0800a4dc 	.word	0x0800a4dc
 8002158:	08009b1c 	.word	0x08009b1c

0800215c <get_user_input>:


/*********************** AUXILIAR FUNCTIONS ***********************/

void get_user_input(char promptMsg[], char errorMsg[], uint8_t count, char checkList[], char * output){
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	603b      	str	r3, [r7, #0]
 8002168:	4613      	mov	r3, r2
 800216a:	71fb      	strb	r3, [r7, #7]
	//const uint8_t checkListSize = 10;
	print_inline(promptMsg);
 800216c:	68f8      	ldr	r0, [r7, #12]
 800216e:	f000 f89b 	bl	80022a8 <print_inline>
    for(uint8_t i = 0; i < count; i++){
 8002172:	2300      	movs	r3, #0
 8002174:	75fb      	strb	r3, [r7, #23]
 8002176:	e03b      	b.n	80021f0 <get_user_input+0x94>
		while(1){
			HAL_Delay(5); // needed to debug, remove
 8002178:	2005      	movs	r0, #5
 800217a:	f001 faf9 	bl	8003770 <HAL_Delay>
			if(rxStatus == active){
 800217e:	4b22      	ldr	r3, [pc, #136]	@ (8002208 <get_user_input+0xac>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d1f8      	bne.n	8002178 <get_user_input+0x1c>
				rxStatus = idle;
 8002186:	4b20      	ldr	r3, [pc, #128]	@ (8002208 <get_user_input+0xac>)
 8002188:	2200      	movs	r2, #0
 800218a:	701a      	strb	r2, [r3, #0]
				print_char(&rxChar);
 800218c:	481f      	ldr	r0, [pc, #124]	@ (800220c <get_user_input+0xb0>)
 800218e:	f000 f841 	bl	8002214 <print_char>
				uint8_t checkFlag = 0;
 8002192:	2300      	movs	r3, #0
 8002194:	75bb      	strb	r3, [r7, #22]
				// check that belongs to the checkList
				for(uint8_t j = 0; j < MAX_CHECKLIST_SIZE; j++){
 8002196:	2300      	movs	r3, #0
 8002198:	757b      	strb	r3, [r7, #21]
 800219a:	e013      	b.n	80021c4 <get_user_input+0x68>
					// if there is a match, set flag, store value and break
					if(rxChar == checkList[j]){
 800219c:	7d7b      	ldrb	r3, [r7, #21]
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	4413      	add	r3, r2
 80021a2:	781a      	ldrb	r2, [r3, #0]
 80021a4:	4b19      	ldr	r3, [pc, #100]	@ (800220c <get_user_input+0xb0>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d108      	bne.n	80021be <get_user_input+0x62>
						checkFlag = 1;
 80021ac:	2301      	movs	r3, #1
 80021ae:	75bb      	strb	r3, [r7, #22]
						output[i] = rxChar;// store the value
 80021b0:	7dfb      	ldrb	r3, [r7, #23]
 80021b2:	6a3a      	ldr	r2, [r7, #32]
 80021b4:	4413      	add	r3, r2
 80021b6:	4a15      	ldr	r2, [pc, #84]	@ (800220c <get_user_input+0xb0>)
 80021b8:	7812      	ldrb	r2, [r2, #0]
 80021ba:	701a      	strb	r2, [r3, #0]
						break;
 80021bc:	e005      	b.n	80021ca <get_user_input+0x6e>
				for(uint8_t j = 0; j < MAX_CHECKLIST_SIZE; j++){
 80021be:	7d7b      	ldrb	r3, [r7, #21]
 80021c0:	3301      	adds	r3, #1
 80021c2:	757b      	strb	r3, [r7, #21]
 80021c4:	7d7b      	ldrb	r3, [r7, #21]
 80021c6:	2b09      	cmp	r3, #9
 80021c8:	d9e8      	bls.n	800219c <get_user_input+0x40>
					}
				} // if no match, flag is 0
				if(checkFlag == 0){
 80021ca:	7dbb      	ldrb	r3, [r7, #22]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d107      	bne.n	80021e0 <get_user_input+0x84>
					printf(errorMsg);
 80021d0:	68b8      	ldr	r0, [r7, #8]
 80021d2:	f006 fb83 	bl	80088dc <iprintf>
					print_inline(promptMsg);
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	f000 f866 	bl	80022a8 <print_inline>
					i = 0; // reinitialize counter to start over
 80021dc:	2300      	movs	r3, #0
 80021de:	75fb      	strb	r3, [r7, #23]
				}
				// break while loop if value is good
				if(checkFlag == 1) break;
 80021e0:	7dbb      	ldrb	r3, [r7, #22]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d000      	beq.n	80021e8 <get_user_input+0x8c>
			HAL_Delay(5); // needed to debug, remove
 80021e6:	e7c7      	b.n	8002178 <get_user_input+0x1c>
				if(checkFlag == 1) break;
 80021e8:	bf00      	nop
    for(uint8_t i = 0; i < count; i++){
 80021ea:	7dfb      	ldrb	r3, [r7, #23]
 80021ec:	3301      	adds	r3, #1
 80021ee:	75fb      	strb	r3, [r7, #23]
 80021f0:	7dfa      	ldrb	r2, [r7, #23]
 80021f2:	79fb      	ldrb	r3, [r7, #7]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d3bf      	bcc.n	8002178 <get_user_input+0x1c>
			}
		}
    }
    printf("\r\n");
 80021f8:	4805      	ldr	r0, [pc, #20]	@ (8002210 <get_user_input+0xb4>)
 80021fa:	f006 fbd7 	bl	80089ac <puts>
}
 80021fe:	bf00      	nop
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	20000156 	.word	0x20000156
 800220c:	20000185 	.word	0x20000185
 8002210:	08009b1c 	.word	0x08009b1c

08002214 <print_char>:

/* Print a single character for echo in line */
void print_char(char * ch){
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, 10);
 800221c:	1d39      	adds	r1, r7, #4
 800221e:	230a      	movs	r3, #10
 8002220:	2201      	movs	r2, #1
 8002222:	4803      	ldr	r0, [pc, #12]	@ (8002230 <print_char+0x1c>)
 8002224:	f005 fbe6 	bl	80079f4 <HAL_UART_Transmit>
}
 8002228:	bf00      	nop
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	20000220 	.word	0x20000220

08002234 <print_serial_number>:

/* Print serial number based on AL configuration saved */
void print_serial_number(void){
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
	//printf( "AL%c%s", launcher.type[0], launcher.serialNumber);
    if(launcher.configured == '|'){
 8002238:	4b0e      	ldr	r3, [pc, #56]	@ (8002274 <print_serial_number+0x40>)
 800223a:	791b      	ldrb	r3, [r3, #4]
 800223c:	2b7c      	cmp	r3, #124	@ 0x7c
 800223e:	d114      	bne.n	800226a <print_serial_number+0x36>
    	if(launcher.tubeCount == '6'){
 8002240:	4b0c      	ldr	r3, [pc, #48]	@ (8002274 <print_serial_number+0x40>)
 8002242:	785b      	ldrb	r3, [r3, #1]
 8002244:	2b36      	cmp	r3, #54	@ 0x36
 8002246:	d106      	bne.n	8002256 <print_serial_number+0x22>
    		printf( "AL%i ", launcher.serialNumber);
 8002248:	4b0a      	ldr	r3, [pc, #40]	@ (8002274 <print_serial_number+0x40>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	4619      	mov	r1, r3
 800224e:	480a      	ldr	r0, [pc, #40]	@ (8002278 <print_serial_number+0x44>)
 8002250:	f006 fb44 	bl	80088dc <iprintf>
    		printf( "AL%c%i", launcher.type, launcher.serialNumber);
    	}
    } else {
    	printf( "AL???");
    }
}
 8002254:	e00c      	b.n	8002270 <print_serial_number+0x3c>
    		printf( "AL%c%i", launcher.type, launcher.serialNumber);
 8002256:	4b07      	ldr	r3, [pc, #28]	@ (8002274 <print_serial_number+0x40>)
 8002258:	789b      	ldrb	r3, [r3, #2]
 800225a:	4619      	mov	r1, r3
 800225c:	4b05      	ldr	r3, [pc, #20]	@ (8002274 <print_serial_number+0x40>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	461a      	mov	r2, r3
 8002262:	4806      	ldr	r0, [pc, #24]	@ (800227c <print_serial_number+0x48>)
 8002264:	f006 fb3a 	bl	80088dc <iprintf>
}
 8002268:	e002      	b.n	8002270 <print_serial_number+0x3c>
    	printf( "AL???");
 800226a:	4805      	ldr	r0, [pc, #20]	@ (8002280 <print_serial_number+0x4c>)
 800226c:	f006 fb36 	bl	80088dc <iprintf>
}
 8002270:	bf00      	nop
 8002272:	bd80      	pop	{r7, pc}
 8002274:	20000158 	.word	0x20000158
 8002278:	0800a508 	.word	0x0800a508
 800227c:	0800a510 	.word	0x0800a510
 8002280:	0800a518 	.word	0x0800a518

08002284 <multiplexer_set>:
}


/* Select the source of RS232
 * Parameters: select {MUX_GPS, MUX_STM32} */
void multiplexer_set(mux_t select){
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	4603      	mov	r3, r0
 800228c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(MUX_SELECT_GPIO_Port, MUX_SELECT_Pin, select); // SET = UART-tx / RESET = Din from GPS
 800228e:	79fb      	ldrb	r3, [r7, #7]
 8002290:	461a      	mov	r2, r3
 8002292:	2104      	movs	r1, #4
 8002294:	4803      	ldr	r0, [pc, #12]	@ (80022a4 <multiplexer_set+0x20>)
 8002296:	f002 fc7f 	bl	8004b98 <HAL_GPIO_WritePin>
}
 800229a:	bf00      	nop
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40010800 	.word	0x40010800

080022a8 <print_inline>:

/* Print line without a '\n' newline at the end
 * Use for data entry prompts or partial text inline */
void print_inline(char * text){
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
	char temp = ' ';
 80022b0:	2320      	movs	r3, #32
 80022b2:	73bb      	strb	r3, [r7, #14]
	for(uint8_t i = 0; i<=255 && temp!= '\0' ; i++){
 80022b4:	2300      	movs	r3, #0
 80022b6:	73fb      	strb	r3, [r7, #15]
 80022b8:	e00e      	b.n	80022d8 <print_inline+0x30>
		temp = text[i];
 80022ba:	7bfb      	ldrb	r3, [r7, #15]
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	4413      	add	r3, r2
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	73bb      	strb	r3, [r7, #14]
		HAL_UART_Transmit(&huart1, (uint8_t *) &temp, 1, 100);
 80022c4:	f107 010e 	add.w	r1, r7, #14
 80022c8:	2364      	movs	r3, #100	@ 0x64
 80022ca:	2201      	movs	r2, #1
 80022cc:	4806      	ldr	r0, [pc, #24]	@ (80022e8 <print_inline+0x40>)
 80022ce:	f005 fb91 	bl	80079f4 <HAL_UART_Transmit>
	for(uint8_t i = 0; i<=255 && temp!= '\0' ; i++){
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
 80022d4:	3301      	adds	r3, #1
 80022d6:	73fb      	strb	r3, [r7, #15]
 80022d8:	7bbb      	ldrb	r3, [r7, #14]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1ed      	bne.n	80022ba <print_inline+0x12>
	}
}
 80022de:	bf00      	nop
 80022e0:	bf00      	nop
 80022e2:	3710      	adds	r7, #16
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	20000220 	.word	0x20000220

080022ec <parameter_init>:


/* Initialize autolauncher parameters */
void parameter_init(void){
 80022ec:	b590      	push	{r4, r7, lr}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af02      	add	r7, sp, #8
	// get parameters from eeprom or assign default values
//	launcher.configured = eeprom_read(AL_CONFIGED1B);
	eeprom_read_nbytes(AL_CONFIGED1B, sizeof(launcher.configured), &launcher.configured);
 80022f2:	4a21      	ldr	r2, [pc, #132]	@ (8002378 <parameter_init+0x8c>)
 80022f4:	2101      	movs	r1, #1
 80022f6:	2003      	movs	r0, #3
 80022f8:	f000 fdd5 	bl	8002ea6 <eeprom_read_nbytes>
//	launcher_t al = *(launcher_t*) eeprom_read(DATA_LAUNCHER);
//	motor_t mt = *(motor_t*) eeprom_read(DATA_MOTOR);

	if(launcher.configured == '|'){
 80022fc:	4b1f      	ldr	r3, [pc, #124]	@ (800237c <parameter_init+0x90>)
 80022fe:	791b      	ldrb	r3, [r3, #4]
 8002300:	2b7c      	cmp	r3, #124	@ 0x7c
 8002302:	d131      	bne.n	8002368 <parameter_init+0x7c>
		printf("\r\n... Configuration found in memory ... \r\n");
 8002304:	481e      	ldr	r0, [pc, #120]	@ (8002380 <parameter_init+0x94>)
 8002306:	f006 fb51 	bl	80089ac <puts>
		eeprom_read_nbytes(AL_TUBECOUNT1B, sizeof(launcher.tubeCount), &launcher.tubeCount);
 800230a:	4a1e      	ldr	r2, [pc, #120]	@ (8002384 <parameter_init+0x98>)
 800230c:	2101      	movs	r1, #1
 800230e:	2000      	movs	r0, #0
 8002310:	f000 fdc9 	bl	8002ea6 <eeprom_read_nbytes>
		eeprom_read_nbytes(AL_TYPE1B, sizeof(launcher.type), &launcher.type);
 8002314:	4a1c      	ldr	r2, [pc, #112]	@ (8002388 <parameter_init+0x9c>)
 8002316:	2101      	movs	r1, #1
 8002318:	2001      	movs	r0, #1
 800231a:	f000 fdc4 	bl	8002ea6 <eeprom_read_nbytes>
		eeprom_read_nbytes(AL_SN1B, sizeof(launcher.serialNumber), &launcher.serialNumber);
 800231e:	4a17      	ldr	r2, [pc, #92]	@ (800237c <parameter_init+0x90>)
 8002320:	2101      	movs	r1, #1
 8002322:	2002      	movs	r0, #2
 8002324:	f000 fdbf 	bl	8002ea6 <eeprom_read_nbytes>
//		launcher.tubeCount = eeprom_read(AL_TUBECOUNT1B);
//		launcher.type = eeprom_read(AL_TYPE1B);
//		launcher.serialNumber = eeprom_read(AL_SN1B);
		// read motor runtime and assign a default value if out of range
//		uint32_t rt = eeprom_read_uint32(M_RUNTIME4B);
		eeprom_read_nbytes(M_RUNTIME2B, sizeof(motor.runTime), &motor.runTime);
 8002328:	4a18      	ldr	r2, [pc, #96]	@ (800238c <parameter_init+0xa0>)
 800232a:	2102      	movs	r1, #2
 800232c:	2008      	movs	r0, #8
 800232e:	f000 fdba 	bl	8002ea6 <eeprom_read_nbytes>
		eeprom_read_nbytes(M_SAMPLEPERIOD2B, sizeof(motor.samplePeriod), &motor.samplePeriod);
 8002332:	4a17      	ldr	r2, [pc, #92]	@ (8002390 <parameter_init+0xa4>)
 8002334:	2102      	movs	r1, #2
 8002336:	200a      	movs	r0, #10
 8002338:	f000 fdb5 	bl	8002ea6 <eeprom_read_nbytes>

		printf("\r\n<AL> Tubes: %c | Type: %c | Serial: %i\r\n<M> Runtime: %i ms | Sample Period: %i ms\r\n", launcher.tubeCount, launcher.type, launcher.serialNumber, (int)motor.runTime, (int)motor.samplePeriod);
 800233c:	4b0f      	ldr	r3, [pc, #60]	@ (800237c <parameter_init+0x90>)
 800233e:	785b      	ldrb	r3, [r3, #1]
 8002340:	4619      	mov	r1, r3
 8002342:	4b0e      	ldr	r3, [pc, #56]	@ (800237c <parameter_init+0x90>)
 8002344:	789b      	ldrb	r3, [r3, #2]
 8002346:	4618      	mov	r0, r3
 8002348:	4b0c      	ldr	r3, [pc, #48]	@ (800237c <parameter_init+0x90>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	461c      	mov	r4, r3
 800234e:	4b0f      	ldr	r3, [pc, #60]	@ (800238c <parameter_init+0xa0>)
 8002350:	881b      	ldrh	r3, [r3, #0]
 8002352:	461a      	mov	r2, r3
 8002354:	4b0d      	ldr	r3, [pc, #52]	@ (800238c <parameter_init+0xa0>)
 8002356:	885b      	ldrh	r3, [r3, #2]
 8002358:	9301      	str	r3, [sp, #4]
 800235a:	9200      	str	r2, [sp, #0]
 800235c:	4623      	mov	r3, r4
 800235e:	4602      	mov	r2, r0
 8002360:	480c      	ldr	r0, [pc, #48]	@ (8002394 <parameter_init+0xa8>)
 8002362:	f006 fabb 	bl	80088dc <iprintf>
	} else {
		printf("\r\n... Configuration NOT found in memory ... \r\n");
	}


}
 8002366:	e002      	b.n	800236e <parameter_init+0x82>
		printf("\r\n... Configuration NOT found in memory ... \r\n");
 8002368:	480b      	ldr	r0, [pc, #44]	@ (8002398 <parameter_init+0xac>)
 800236a:	f006 fb1f 	bl	80089ac <puts>
}
 800236e:	bf00      	nop
 8002370:	3704      	adds	r7, #4
 8002372:	46bd      	mov	sp, r7
 8002374:	bd90      	pop	{r4, r7, pc}
 8002376:	bf00      	nop
 8002378:	2000015c 	.word	0x2000015c
 800237c:	20000158 	.word	0x20000158
 8002380:	0800a520 	.word	0x0800a520
 8002384:	20000159 	.word	0x20000159
 8002388:	2000015a 	.word	0x2000015a
 800238c:	20000160 	.word	0x20000160
 8002390:	20000162 	.word	0x20000162
 8002394:	0800a54c 	.word	0x0800a54c
 8002398:	0800a5a4 	.word	0x0800a5a4

0800239c <HAL_UART_RxCpltCallback>:

/* UART Receive complete interrupt callback, set rxStatus flag for new char received
 * re-enable uart rx interrupt */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
	// check that uart1 triggered the interrupt callback
	if(huart->Instance == USART1){
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a09      	ldr	r2, [pc, #36]	@ (80023d0 <HAL_UART_RxCpltCallback+0x34>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d10b      	bne.n	80023c6 <HAL_UART_RxCpltCallback+0x2a>
		rxChar = rxBuffer[0]; // store the only element in buffer to a char for easier variable handling
 80023ae:	4b09      	ldr	r3, [pc, #36]	@ (80023d4 <HAL_UART_RxCpltCallback+0x38>)
 80023b0:	781a      	ldrb	r2, [r3, #0]
 80023b2:	4b09      	ldr	r3, [pc, #36]	@ (80023d8 <HAL_UART_RxCpltCallback+0x3c>)
 80023b4:	701a      	strb	r2, [r3, #0]
		rxStatus = active; // set flag to enter main menu char processing
 80023b6:	4b09      	ldr	r3, [pc, #36]	@ (80023dc <HAL_UART_RxCpltCallback+0x40>)
 80023b8:	2201      	movs	r2, #1
 80023ba:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, (uint8_t *) rxBuffer, 1); // reactivate rx interrupt
 80023bc:	2201      	movs	r2, #1
 80023be:	4905      	ldr	r1, [pc, #20]	@ (80023d4 <HAL_UART_RxCpltCallback+0x38>)
 80023c0:	4807      	ldr	r0, [pc, #28]	@ (80023e0 <HAL_UART_RxCpltCallback+0x44>)
 80023c2:	f005 fc39 	bl	8007c38 <HAL_UART_Receive_IT>
	}
}
 80023c6:	bf00      	nop
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40013800 	.word	0x40013800
 80023d4:	20000184 	.word	0x20000184
 80023d8:	20000185 	.word	0x20000185
 80023dc:	20000156 	.word	0x20000156
 80023e0:	20000220 	.word	0x20000220

080023e4 <HAL_ADC_ConvCpltCallback>:
//	}
//}

/* When the ADC conversion in DMA mode is complete (all samples in adc scan)
 * Then the IRQ calls this function */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
	//HAL_ADC_Stop_DMA(&hadc1);
	if(hadc->Instance == ADC1){
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a05      	ldr	r2, [pc, #20]	@ (8002408 <HAL_ADC_ConvCpltCallback+0x24>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d102      	bne.n	80023fc <HAL_ADC_ConvCpltCallback+0x18>
		adcComplete = 1;
 80023f6:	4b05      	ldr	r3, [pc, #20]	@ (800240c <HAL_ADC_ConvCpltCallback+0x28>)
 80023f8:	2201      	movs	r2, #1
 80023fa:	701a      	strb	r2, [r3, #0]
		//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);

	}
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	bc80      	pop	{r7}
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	40012400 	.word	0x40012400
 800240c:	20000186 	.word	0x20000186

08002410 <uartrx_interrupt_init>:



/* Wrapper for 1st uart_rx call
 * The interrupt is enabled for rx after this function is called, and then disabled until called again */
void uartrx_interrupt_init(void){
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, (uint8_t *) rxBuffer, 1); // enable UART receive interrupt, store received char in rxChar buffer
 8002414:	2201      	movs	r2, #1
 8002416:	4903      	ldr	r1, [pc, #12]	@ (8002424 <uartrx_interrupt_init+0x14>)
 8002418:	4803      	ldr	r0, [pc, #12]	@ (8002428 <uartrx_interrupt_init+0x18>)
 800241a:	f005 fc0d 	bl	8007c38 <HAL_UART_Receive_IT>
}
 800241e:	bf00      	nop
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	20000184 	.word	0x20000184
 8002428:	20000220 	.word	0x20000220

0800242c <unground_xbt>:

/* Disconnect the XBT ABC pins from ground
 * 3 relays can be used as ground when SET, or ground when RESET based on jumpers JP6-7-8
 * If 1-2 pads are soldered, SET relays to unground, RESET relays to ground
 * Note: reset signal 3 is tied to other relays: CAL cont & CAL res */
void unground_xbt(void){
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
	if(relayLock == reFree){
 8002430:	4b08      	ldr	r3, [pc, #32]	@ (8002454 <unground_xbt+0x28>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d10b      	bne.n	8002450 <unground_xbt+0x24>
		relayLock = reLocked;
 8002438:	4b06      	ldr	r3, [pc, #24]	@ (8002454 <unground_xbt+0x28>)
 800243a:	2201      	movs	r2, #1
 800243c:	701a      	strb	r2, [r3, #0]
		drive_relay(RELAY_RESET_3_GPIO_Port, RELAY_RESET_3_Pin, 10); // RESET relay k9, k10, k11, k12
 800243e:	220a      	movs	r2, #10
 8002440:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002444:	4804      	ldr	r0, [pc, #16]	@ (8002458 <unground_xbt+0x2c>)
 8002446:	f000 f925 	bl	8002694 <drive_relay>
		relayLock = reFree;
 800244a:	4b02      	ldr	r3, [pc, #8]	@ (8002454 <unground_xbt+0x28>)
 800244c:	2200      	movs	r2, #0
 800244e:	701a      	strb	r2, [r3, #0]
	}
}
 8002450:	bf00      	nop
 8002452:	bd80      	pop	{r7, pc}
 8002454:	20000155 	.word	0x20000155
 8002458:	40011000 	.word	0x40011000

0800245c <calibration_resistor>:

void calibration_resistor(void){
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
	if(relayLock == reFree){
 8002460:	4b08      	ldr	r3, [pc, #32]	@ (8002484 <calibration_resistor+0x28>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d10b      	bne.n	8002480 <calibration_resistor+0x24>
		relayLock = reLocked;
 8002468:	4b06      	ldr	r3, [pc, #24]	@ (8002484 <calibration_resistor+0x28>)
 800246a:	2201      	movs	r2, #1
 800246c:	701a      	strb	r2, [r3, #0]
		drive_relay(RELAY_K12_CAL_RES_GPIO_Port, RELAY_K12_CAL_RES_Pin, RELAY_ON_TIME); // SET relay k12
 800246e:	220a      	movs	r2, #10
 8002470:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002474:	4804      	ldr	r0, [pc, #16]	@ (8002488 <calibration_resistor+0x2c>)
 8002476:	f000 f90d 	bl	8002694 <drive_relay>
		relayLock = reFree;
 800247a:	4b02      	ldr	r3, [pc, #8]	@ (8002484 <calibration_resistor+0x28>)
 800247c:	2200      	movs	r2, #0
 800247e:	701a      	strb	r2, [r3, #0]
	}
}
 8002480:	bf00      	nop
 8002482:	bd80      	pop	{r7, pc}
 8002484:	20000155 	.word	0x20000155
 8002488:	40010800 	.word	0x40010800

0800248c <calibrate_on>:

void calibrate_on(void){
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
	if(relayLock == reFree){
 8002490:	4b08      	ldr	r3, [pc, #32]	@ (80024b4 <calibrate_on+0x28>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d10b      	bne.n	80024b0 <calibrate_on+0x24>
		relayLock = reLocked;
 8002498:	4b06      	ldr	r3, [pc, #24]	@ (80024b4 <calibrate_on+0x28>)
 800249a:	2201      	movs	r2, #1
 800249c:	701a      	strb	r2, [r3, #0]
		drive_relay(RELAY_K11_CAL_CONT_GPIO_Port, RELAY_K11_CAL_CONT_Pin, RELAY_ON_TIME); // SET relay k11
 800249e:	220a      	movs	r2, #10
 80024a0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80024a4:	4804      	ldr	r0, [pc, #16]	@ (80024b8 <calibrate_on+0x2c>)
 80024a6:	f000 f8f5 	bl	8002694 <drive_relay>
		relayLock = reFree;
 80024aa:	4b02      	ldr	r3, [pc, #8]	@ (80024b4 <calibrate_on+0x28>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	701a      	strb	r2, [r3, #0]
	}
}
 80024b0:	bf00      	nop
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	20000155 	.word	0x20000155
 80024b8:	40010800 	.word	0x40010800

080024bc <reset_relay>:

void reset_relay(void){
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
	if(relayLock == reFree){
 80024c0:	4b11      	ldr	r3, [pc, #68]	@ (8002508 <reset_relay+0x4c>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d11d      	bne.n	8002504 <reset_relay+0x48>
		relayLock = reLocked;
 80024c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002508 <reset_relay+0x4c>)
 80024ca:	2201      	movs	r2, #1
 80024cc:	701a      	strb	r2, [r3, #0]
		drive_relay(RELAY_RESET_1_GPIO_Port, RELAY_RESET_1_Pin, RELAY_ON_TIME); // RESET relay k1, k2, k3, k4, SSR1, SSR2, SSR3, SSR4
 80024ce:	220a      	movs	r2, #10
 80024d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80024d4:	480d      	ldr	r0, [pc, #52]	@ (800250c <reset_relay+0x50>)
 80024d6:	f000 f8dd 	bl	8002694 <drive_relay>
		HAL_Delay(RELAY_INTERVAL_TIME);
 80024da:	200a      	movs	r0, #10
 80024dc:	f001 f948 	bl	8003770 <HAL_Delay>
		drive_relay(RELAY_RESET_2_GPIO_Port, RELAY_RESET_2_Pin, RELAY_ON_TIME); // RESET relay k5, k6, k7, k8, SSR5, SSR6, SSR7, SSR8
 80024e0:	220a      	movs	r2, #10
 80024e2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80024e6:	480a      	ldr	r0, [pc, #40]	@ (8002510 <reset_relay+0x54>)
 80024e8:	f000 f8d4 	bl	8002694 <drive_relay>
		HAL_Delay(RELAY_INTERVAL_TIME);
 80024ec:	200a      	movs	r0, #10
 80024ee:	f001 f93f 	bl	8003770 <HAL_Delay>
		drive_relay(RELAY_RESET_3_GPIO_Port, RELAY_RESET_3_Pin, RELAY_ON_TIME); // RESET relay k9, k10, k11, k12 - This grounds ABC
 80024f2:	220a      	movs	r2, #10
 80024f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80024f8:	4805      	ldr	r0, [pc, #20]	@ (8002510 <reset_relay+0x54>)
 80024fa:	f000 f8cb 	bl	8002694 <drive_relay>
		relayLock = reFree;
 80024fe:	4b02      	ldr	r3, [pc, #8]	@ (8002508 <reset_relay+0x4c>)
 8002500:	2200      	movs	r2, #0
 8002502:	701a      	strb	r2, [r3, #0]
	}
}
 8002504:	bf00      	nop
 8002506:	bd80      	pop	{r7, pc}
 8002508:	20000155 	.word	0x20000155
 800250c:	40010c00 	.word	0x40010c00
 8002510:	40011000 	.word	0x40011000

08002514 <connect_xbt_pin>:

void connect_xbt_pin(uint8_t xbtNum){
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	4603      	mov	r3, r0
 800251c:	71fb      	strb	r3, [r7, #7]

	if(relayLock == reFree){
 800251e:	4b47      	ldr	r3, [pc, #284]	@ (800263c <connect_xbt_pin+0x128>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	2b00      	cmp	r3, #0
 8002524:	f040 8085 	bne.w	8002632 <connect_xbt_pin+0x11e>
		relayLock = reLocked;
 8002528:	4b44      	ldr	r3, [pc, #272]	@ (800263c <connect_xbt_pin+0x128>)
 800252a:	2201      	movs	r2, #1
 800252c:	701a      	strb	r2, [r3, #0]

		switch (xbtNum){
 800252e:	79fb      	ldrb	r3, [r7, #7]
 8002530:	3b01      	subs	r3, #1
 8002532:	2b07      	cmp	r3, #7
 8002534:	d874      	bhi.n	8002620 <connect_xbt_pin+0x10c>
 8002536:	a201      	add	r2, pc, #4	@ (adr r2, 800253c <connect_xbt_pin+0x28>)
 8002538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800253c:	0800255d 	.word	0x0800255d
 8002540:	08002577 	.word	0x08002577
 8002544:	08002591 	.word	0x08002591
 8002548:	080025a9 	.word	0x080025a9
 800254c:	080025c1 	.word	0x080025c1
 8002550:	080025d7 	.word	0x080025d7
 8002554:	080025ed 	.word	0x080025ed
 8002558:	08002607 	.word	0x08002607
		case 1:
			drive_relay(RELAY_K1_GPIO_Port, RELAY_K1_Pin, RELAY_ON_TIME); // SET relay k1
 800255c:	220a      	movs	r2, #10
 800255e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002562:	4837      	ldr	r0, [pc, #220]	@ (8002640 <connect_xbt_pin+0x12c>)
 8002564:	f000 f896 	bl	8002694 <drive_relay>
			drive_relay(SSR_1_GPIO_Port, SSR_1_Pin, 1); // SET SSR1
 8002568:	2201      	movs	r2, #1
 800256a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800256e:	4834      	ldr	r0, [pc, #208]	@ (8002640 <connect_xbt_pin+0x12c>)
 8002570:	f000 f890 	bl	8002694 <drive_relay>
			break;
 8002574:	e05a      	b.n	800262c <connect_xbt_pin+0x118>
		case 2:
			drive_relay(RELAY_K2_GPIO_Port, RELAY_K2_Pin, RELAY_ON_TIME); // SET relay k2
 8002576:	220a      	movs	r2, #10
 8002578:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800257c:	4830      	ldr	r0, [pc, #192]	@ (8002640 <connect_xbt_pin+0x12c>)
 800257e:	f000 f889 	bl	8002694 <drive_relay>
			drive_relay(SSR_2_GPIO_Port, SSR_2_Pin, 1); // SET SSR2
 8002582:	2201      	movs	r2, #1
 8002584:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002588:	482d      	ldr	r0, [pc, #180]	@ (8002640 <connect_xbt_pin+0x12c>)
 800258a:	f000 f883 	bl	8002694 <drive_relay>
			break;
 800258e:	e04d      	b.n	800262c <connect_xbt_pin+0x118>
		case 3:
			drive_relay(RELAY_K3_GPIO_Port, RELAY_K3_Pin, RELAY_ON_TIME); // SET relay k3
 8002590:	220a      	movs	r2, #10
 8002592:	2104      	movs	r1, #4
 8002594:	482b      	ldr	r0, [pc, #172]	@ (8002644 <connect_xbt_pin+0x130>)
 8002596:	f000 f87d 	bl	8002694 <drive_relay>
			drive_relay(SSR_3_GPIO_Port, SSR_3_Pin, 1); // SET SSR3
 800259a:	2201      	movs	r2, #1
 800259c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80025a0:	4827      	ldr	r0, [pc, #156]	@ (8002640 <connect_xbt_pin+0x12c>)
 80025a2:	f000 f877 	bl	8002694 <drive_relay>
			break;
 80025a6:	e041      	b.n	800262c <connect_xbt_pin+0x118>
		case 4:
			drive_relay(RELAY_K4_GPIO_Port, RELAY_K4_Pin, RELAY_ON_TIME); // SET relay k4
 80025a8:	220a      	movs	r2, #10
 80025aa:	2108      	movs	r1, #8
 80025ac:	4826      	ldr	r0, [pc, #152]	@ (8002648 <connect_xbt_pin+0x134>)
 80025ae:	f000 f871 	bl	8002694 <drive_relay>
			drive_relay(SSR_4_GPIO_Port, SSR_4_Pin, 1); // SET SSR4
 80025b2:	2201      	movs	r2, #1
 80025b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80025b8:	4823      	ldr	r0, [pc, #140]	@ (8002648 <connect_xbt_pin+0x134>)
 80025ba:	f000 f86b 	bl	8002694 <drive_relay>
			break;
 80025be:	e035      	b.n	800262c <connect_xbt_pin+0x118>
		case 5:
			drive_relay(RELAY_K5_GPIO_Port, RELAY_K5_Pin, RELAY_ON_TIME); // SET relay k5
 80025c0:	220a      	movs	r2, #10
 80025c2:	2110      	movs	r1, #16
 80025c4:	4820      	ldr	r0, [pc, #128]	@ (8002648 <connect_xbt_pin+0x134>)
 80025c6:	f000 f865 	bl	8002694 <drive_relay>
			drive_relay(SSR_5_GPIO_Port, SSR_5_Pin, 1); // SET SSR5
 80025ca:	2201      	movs	r2, #1
 80025cc:	2180      	movs	r1, #128	@ 0x80
 80025ce:	481c      	ldr	r0, [pc, #112]	@ (8002640 <connect_xbt_pin+0x12c>)
 80025d0:	f000 f860 	bl	8002694 <drive_relay>
			break;
 80025d4:	e02a      	b.n	800262c <connect_xbt_pin+0x118>
		case 6:
			drive_relay(RELAY_K6_GPIO_Port, RELAY_K6_Pin, RELAY_ON_TIME); // SET relay k6
 80025d6:	220a      	movs	r2, #10
 80025d8:	2120      	movs	r1, #32
 80025da:	481b      	ldr	r0, [pc, #108]	@ (8002648 <connect_xbt_pin+0x134>)
 80025dc:	f000 f85a 	bl	8002694 <drive_relay>
			drive_relay(SSR_6_GPIO_Port, SSR_6_Pin, 1); // SET SSR6
 80025e0:	2201      	movs	r2, #1
 80025e2:	2140      	movs	r1, #64	@ 0x40
 80025e4:	4816      	ldr	r0, [pc, #88]	@ (8002640 <connect_xbt_pin+0x12c>)
 80025e6:	f000 f855 	bl	8002694 <drive_relay>
			break;
 80025ea:	e01f      	b.n	800262c <connect_xbt_pin+0x118>
		case 7:
			drive_relay(RELAY_K7_GPIO_Port, RELAY_K7_Pin, RELAY_ON_TIME); // SET relay k7
 80025ec:	220a      	movs	r2, #10
 80025ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80025f2:	4813      	ldr	r0, [pc, #76]	@ (8002640 <connect_xbt_pin+0x12c>)
 80025f4:	f000 f84e 	bl	8002694 <drive_relay>
			drive_relay(SSR_7_GPIO_Port, SSR_7_Pin, 1); // SET SSR7
 80025f8:	2201      	movs	r2, #1
 80025fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80025fe:	4812      	ldr	r0, [pc, #72]	@ (8002648 <connect_xbt_pin+0x134>)
 8002600:	f000 f848 	bl	8002694 <drive_relay>
			break;
 8002604:	e012      	b.n	800262c <connect_xbt_pin+0x118>
		case 8:
			drive_relay(RELAY_K8_GPIO_Port, RELAY_K8_Pin, RELAY_ON_TIME); // SET relay k8
 8002606:	220a      	movs	r2, #10
 8002608:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800260c:	480f      	ldr	r0, [pc, #60]	@ (800264c <connect_xbt_pin+0x138>)
 800260e:	f000 f841 	bl	8002694 <drive_relay>
			drive_relay(SSR_8_GPIO_Port, SSR_8_Pin, 1); // SET SSR8
 8002612:	2201      	movs	r2, #1
 8002614:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002618:	480b      	ldr	r0, [pc, #44]	@ (8002648 <connect_xbt_pin+0x134>)
 800261a:	f000 f83b 	bl	8002694 <drive_relay>
			break;
 800261e:	e005      	b.n	800262c <connect_xbt_pin+0x118>
		default:
			printf("\r\n* ERROR: XBT %i relay not found *\r\n", xbtNum);
 8002620:	79fb      	ldrb	r3, [r7, #7]
 8002622:	4619      	mov	r1, r3
 8002624:	480a      	ldr	r0, [pc, #40]	@ (8002650 <connect_xbt_pin+0x13c>)
 8002626:	f006 f959 	bl	80088dc <iprintf>
			break;
 800262a:	bf00      	nop
		}
		relayLock = reFree;
 800262c:	4b03      	ldr	r3, [pc, #12]	@ (800263c <connect_xbt_pin+0x128>)
 800262e:	2200      	movs	r2, #0
 8002630:	701a      	strb	r2, [r3, #0]
	}
}
 8002632:	bf00      	nop
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20000155 	.word	0x20000155
 8002640:	40011000 	.word	0x40011000
 8002644:	40011400 	.word	0x40011400
 8002648:	40010c00 	.word	0x40010c00
 800264c:	40010800 	.word	0x40010800
 8002650:	0800a5d4 	.word	0x0800a5d4

08002654 <relay_init>:

void relay_init(void){
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
	drive_relay(RELAY_RESET_1_GPIO_Port, RELAY_RESET_1_Pin, RELAY_ON_TIME);  // RESET relay k1, k2, k3, k4, SSR1, SSR2, SSR3, SSR4
 8002658:	220a      	movs	r2, #10
 800265a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800265e:	480b      	ldr	r0, [pc, #44]	@ (800268c <relay_init+0x38>)
 8002660:	f000 f818 	bl	8002694 <drive_relay>
	HAL_Delay(RELAY_INTERVAL_TIME);
 8002664:	200a      	movs	r0, #10
 8002666:	f001 f883 	bl	8003770 <HAL_Delay>
	drive_relay(RELAY_RESET_2_GPIO_Port, RELAY_RESET_2_Pin, RELAY_ON_TIME); // RESET relay k5, k6, k7, k8, SSR5, SSR6, SSR7, SSR8
 800266a:	220a      	movs	r2, #10
 800266c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002670:	4807      	ldr	r0, [pc, #28]	@ (8002690 <relay_init+0x3c>)
 8002672:	f000 f80f 	bl	8002694 <drive_relay>
	HAL_Delay(RELAY_INTERVAL_TIME);
 8002676:	200a      	movs	r0, #10
 8002678:	f001 f87a 	bl	8003770 <HAL_Delay>
	drive_relay(RELAY_RESET_3_GPIO_Port, RELAY_RESET_3_Pin, RELAY_ON_TIME); // RESET relay k9, k10, k11, k12 (GND, calibration and continuity circuit)
 800267c:	220a      	movs	r2, #10
 800267e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002682:	4803      	ldr	r0, [pc, #12]	@ (8002690 <relay_init+0x3c>)
 8002684:	f000 f806 	bl	8002694 <drive_relay>
}
 8002688:	bf00      	nop
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40010c00 	.word	0x40010c00
 8002690:	40011000 	.word	0x40011000

08002694 <drive_relay>:


void drive_relay(GPIO_TypeDef * relayPort, uint16_t relayPin, uint8_t onTime){
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	460b      	mov	r3, r1
 800269e:	807b      	strh	r3, [r7, #2]
 80026a0:	4613      	mov	r3, r2
 80026a2:	707b      	strb	r3, [r7, #1]
	// SET relay k
	HAL_GPIO_WritePin(relayPort, relayPin, SET); // set
 80026a4:	887b      	ldrh	r3, [r7, #2]
 80026a6:	2201      	movs	r2, #1
 80026a8:	4619      	mov	r1, r3
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f002 fa74 	bl	8004b98 <HAL_GPIO_WritePin>
	HAL_Delay(onTime); // time coil is driven in ms
 80026b0:	787b      	ldrb	r3, [r7, #1]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f001 f85c 	bl	8003770 <HAL_Delay>
	HAL_GPIO_WritePin(relayPort, relayPin, RESET); // release
 80026b8:	887b      	ldrh	r3, [r7, #2]
 80026ba:	2200      	movs	r2, #0
 80026bc:	4619      	mov	r1, r3
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f002 fa6a 	bl	8004b98 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80026c4:	2002      	movs	r0, #2
 80026c6:	f001 f853 	bl	8003770 <HAL_Delay>
}
 80026ca:	bf00      	nop
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
	...

080026d4 <extend_all_pins>:

// ALV2 (previous firmware) had a sequence with 4 delays of 8 ms, repeated in 300 steps = 4 * 8 ms * 300 = 7200 ms

/* Extend all pins up to countLimit or eeprom.tubes, whichever is smaller
 * Parameter: countLimit, extend all pins up to this number */
void extend_all_pins(uint8_t countLimit){
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	4603      	mov	r3, r0
 80026dc:	71fb      	strb	r3, [r7, #7]
	if(countLimit > 0){
 80026de:	79fb      	ldrb	r3, [r7, #7]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d012      	beq.n	800270a <extend_all_pins+0x36>
		for(uint8_t i = 1; (i <= countLimit) && (i <= launcher.tubeCount); i++){
 80026e4:	2301      	movs	r3, #1
 80026e6:	73fb      	strb	r3, [r7, #15]
 80026e8:	e006      	b.n	80026f8 <extend_all_pins+0x24>
			extend_pin(i);
 80026ea:	7bfb      	ldrb	r3, [r7, #15]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f000 f835 	bl	800275c <extend_pin>
		for(uint8_t i = 1; (i <= countLimit) && (i <= launcher.tubeCount); i++){
 80026f2:	7bfb      	ldrb	r3, [r7, #15]
 80026f4:	3301      	adds	r3, #1
 80026f6:	73fb      	strb	r3, [r7, #15]
 80026f8:	7bfa      	ldrb	r2, [r7, #15]
 80026fa:	79fb      	ldrb	r3, [r7, #7]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d804      	bhi.n	800270a <extend_all_pins+0x36>
 8002700:	4b04      	ldr	r3, [pc, #16]	@ (8002714 <extend_all_pins+0x40>)
 8002702:	785b      	ldrb	r3, [r3, #1]
 8002704:	7bfa      	ldrb	r2, [r7, #15]
 8002706:	429a      	cmp	r2, r3
 8002708:	d9ef      	bls.n	80026ea <extend_all_pins+0x16>
		}
	}
}
 800270a:	bf00      	nop
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	20000158 	.word	0x20000158

08002718 <retract_all_pins>:

/* Retract all pins up to countLimit or eeprom.tubes, whichever is smaller
 * Parameter: countLimit, retract all pins up to this number */
void retract_all_pins(uint8_t countLimit){
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	4603      	mov	r3, r0
 8002720:	71fb      	strb	r3, [r7, #7]
	if(countLimit > 0){
 8002722:	79fb      	ldrb	r3, [r7, #7]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d012      	beq.n	800274e <retract_all_pins+0x36>
		for(uint8_t i = 1; (i <= countLimit) && (i <= launcher.tubeCount); i++){
 8002728:	2301      	movs	r3, #1
 800272a:	73fb      	strb	r3, [r7, #15]
 800272c:	e006      	b.n	800273c <retract_all_pins+0x24>
			retract_pin(i);
 800272e:	7bfb      	ldrb	r3, [r7, #15]
 8002730:	4618      	mov	r0, r3
 8002732:	f000 f821 	bl	8002778 <retract_pin>
		for(uint8_t i = 1; (i <= countLimit) && (i <= launcher.tubeCount); i++){
 8002736:	7bfb      	ldrb	r3, [r7, #15]
 8002738:	3301      	adds	r3, #1
 800273a:	73fb      	strb	r3, [r7, #15]
 800273c:	7bfa      	ldrb	r2, [r7, #15]
 800273e:	79fb      	ldrb	r3, [r7, #7]
 8002740:	429a      	cmp	r2, r3
 8002742:	d804      	bhi.n	800274e <retract_all_pins+0x36>
 8002744:	4b04      	ldr	r3, [pc, #16]	@ (8002758 <retract_all_pins+0x40>)
 8002746:	785b      	ldrb	r3, [r3, #1]
 8002748:	7bfa      	ldrb	r2, [r7, #15]
 800274a:	429a      	cmp	r2, r3
 800274c:	d9ef      	bls.n	800272e <retract_all_pins+0x16>
		}
	}
}
 800274e:	bf00      	nop
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	20000158 	.word	0x20000158

0800275c <extend_pin>:


/* Extend pin wrapper
 * Parameter: xbtNum [1-8] */
void extend_pin(uint8_t xbtNum){
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	4603      	mov	r3, r0
 8002764:	71fb      	strb	r3, [r7, #7]
	if (MOTOR_WIRING == 0){ // select spin direction based on wiring
		motor_select(xbtNum, CW);
 8002766:	79fb      	ldrb	r3, [r7, #7]
 8002768:	2101      	movs	r1, #1
 800276a:	4618      	mov	r0, r3
 800276c:	f000 f812 	bl	8002794 <motor_select>
	} else {
		motor_select(xbtNum, CCW);
	}
}
 8002770:	bf00      	nop
 8002772:	3708      	adds	r7, #8
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <retract_pin>:

/* Retract pin wrapper
 * Parameter: xbtNum [1-8] */
void retract_pin(uint8_t xbtNum){
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	71fb      	strb	r3, [r7, #7]
	if (MOTOR_WIRING == 0){ // select spin direction based on wiring
		motor_select(xbtNum, CCW);
 8002782:	79fb      	ldrb	r3, [r7, #7]
 8002784:	2100      	movs	r1, #0
 8002786:	4618      	mov	r0, r3
 8002788:	f000 f804 	bl	8002794 <motor_select>
	} else {
		motor_select(xbtNum, CW);
	}
}
 800278c:	bf00      	nop
 800278e:	3708      	adds	r7, #8
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <motor_select>:

/* Motor driver selector
 * direction to retract/extend may be different based on wiring
 * Parameters: XBT number, direction {CW,CCW} */
void motor_select(uint8_t xbtNum, motorDir_t dir){
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	4603      	mov	r3, r0
 800279c:	460a      	mov	r2, r1
 800279e:	71fb      	strb	r3, [r7, #7]
 80027a0:	4613      	mov	r3, r2
 80027a2:	71bb      	strb	r3, [r7, #6]
	uint16_t rtime = motor.runTime;
 80027a4:	4b3a      	ldr	r3, [pc, #232]	@ (8002890 <motor_select+0xfc>)
 80027a6:	881b      	ldrh	r3, [r3, #0]
 80027a8:	81fb      	strh	r3, [r7, #14]

	if((motor.runTime < MOTOR_RUNTIME_MIN) || (motor.runTime > MOTOR_RUNTIME_MAX)){
 80027aa:	4b39      	ldr	r3, [pc, #228]	@ (8002890 <motor_select+0xfc>)
 80027ac:	881b      	ldrh	r3, [r3, #0]
 80027ae:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80027b2:	d305      	bcc.n	80027c0 <motor_select+0x2c>
 80027b4:	4b36      	ldr	r3, [pc, #216]	@ (8002890 <motor_select+0xfc>)
 80027b6:	881b      	ldrh	r3, [r3, #0]
 80027b8:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80027bc:	4293      	cmp	r3, r2
 80027be:	d902      	bls.n	80027c6 <motor_select+0x32>
		rtime = MOTOR_RUNTIME_DEFAULT; // run with default runtime
 80027c0:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80027c4:	81fb      	strh	r3, [r7, #14]
	}

	if(motorLock == mFree){
 80027c6:	4b33      	ldr	r3, [pc, #204]	@ (8002894 <motor_select+0x100>)
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d15b      	bne.n	8002886 <motor_select+0xf2>
		motorLock = mLocked;
 80027ce:	4b31      	ldr	r3, [pc, #196]	@ (8002894 <motor_select+0x100>)
 80027d0:	2201      	movs	r2, #1
 80027d2:	701a      	strb	r2, [r3, #0]
		switch (xbtNum){
 80027d4:	79fb      	ldrb	r3, [r7, #7]
 80027d6:	3b01      	subs	r3, #1
 80027d8:	2b07      	cmp	r3, #7
 80027da:	d84b      	bhi.n	8002874 <motor_select+0xe0>
 80027dc:	a201      	add	r2, pc, #4	@ (adr r2, 80027e4 <motor_select+0x50>)
 80027de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027e2:	bf00      	nop
 80027e4:	08002805 	.word	0x08002805
 80027e8:	08002813 	.word	0x08002813
 80027ec:	08002821 	.word	0x08002821
 80027f0:	0800282f 	.word	0x0800282f
 80027f4:	0800283d 	.word	0x0800283d
 80027f8:	0800284b 	.word	0x0800284b
 80027fc:	08002859 	.word	0x08002859
 8002800:	08002867 	.word	0x08002867
		case 1:
			drive_motor(ENABLE_M1_GPIO_Port, ENABLE_M1_Pin, dir, rtime);
 8002804:	89fb      	ldrh	r3, [r7, #14]
 8002806:	79ba      	ldrb	r2, [r7, #6]
 8002808:	2104      	movs	r1, #4
 800280a:	4823      	ldr	r0, [pc, #140]	@ (8002898 <motor_select+0x104>)
 800280c:	f000 f880 	bl	8002910 <drive_motor>
			break;
 8002810:	e036      	b.n	8002880 <motor_select+0xec>
		case 2:
			drive_motor(ENABLE_M2_GPIO_Port, ENABLE_M2_Pin, dir, rtime);
 8002812:	89fb      	ldrh	r3, [r7, #14]
 8002814:	79ba      	ldrb	r2, [r7, #6]
 8002816:	2108      	movs	r1, #8
 8002818:	481f      	ldr	r0, [pc, #124]	@ (8002898 <motor_select+0x104>)
 800281a:	f000 f879 	bl	8002910 <drive_motor>
			break;
 800281e:	e02f      	b.n	8002880 <motor_select+0xec>
		case 3:
			drive_motor(ENABLE_M3_GPIO_Port, ENABLE_M3_Pin, dir, rtime);
 8002820:	89fb      	ldrh	r3, [r7, #14]
 8002822:	79ba      	ldrb	r2, [r7, #6]
 8002824:	2101      	movs	r1, #1
 8002826:	481d      	ldr	r0, [pc, #116]	@ (800289c <motor_select+0x108>)
 8002828:	f000 f872 	bl	8002910 <drive_motor>
			break;
 800282c:	e028      	b.n	8002880 <motor_select+0xec>
		case 4:
			drive_motor(ENABLE_M4_GPIO_Port, ENABLE_M4_Pin, dir, rtime);
 800282e:	89fb      	ldrh	r3, [r7, #14]
 8002830:	79ba      	ldrb	r2, [r7, #6]
 8002832:	2102      	movs	r1, #2
 8002834:	4819      	ldr	r0, [pc, #100]	@ (800289c <motor_select+0x108>)
 8002836:	f000 f86b 	bl	8002910 <drive_motor>
			break;
 800283a:	e021      	b.n	8002880 <motor_select+0xec>
		case 5:
			drive_motor(ENABLE_M5_GPIO_Port, ENABLE_M5_Pin, dir, rtime);
 800283c:	89fb      	ldrh	r3, [r7, #14]
 800283e:	79ba      	ldrb	r2, [r7, #6]
 8002840:	2110      	movs	r1, #16
 8002842:	4816      	ldr	r0, [pc, #88]	@ (800289c <motor_select+0x108>)
 8002844:	f000 f864 	bl	8002910 <drive_motor>
			break;
 8002848:	e01a      	b.n	8002880 <motor_select+0xec>
		case 6:
			drive_motor(ENABLE_M6_GPIO_Port, ENABLE_M6_Pin, dir, rtime);
 800284a:	89fb      	ldrh	r3, [r7, #14]
 800284c:	79ba      	ldrb	r2, [r7, #6]
 800284e:	2120      	movs	r1, #32
 8002850:	4812      	ldr	r0, [pc, #72]	@ (800289c <motor_select+0x108>)
 8002852:	f000 f85d 	bl	8002910 <drive_motor>
			break;
 8002856:	e013      	b.n	8002880 <motor_select+0xec>
		case 7:
			drive_motor(ENABLE_M7_GPIO_Port, ENABLE_M7_Pin, dir, rtime);
 8002858:	89fb      	ldrh	r3, [r7, #14]
 800285a:	79ba      	ldrb	r2, [r7, #6]
 800285c:	2140      	movs	r1, #64	@ 0x40
 800285e:	480f      	ldr	r0, [pc, #60]	@ (800289c <motor_select+0x108>)
 8002860:	f000 f856 	bl	8002910 <drive_motor>
			break;
 8002864:	e00c      	b.n	8002880 <motor_select+0xec>
		case 8:
			drive_motor(ENABLE_M8_GPIO_Port, ENABLE_M8_Pin, dir, rtime);
 8002866:	89fb      	ldrh	r3, [r7, #14]
 8002868:	79ba      	ldrb	r2, [r7, #6]
 800286a:	2180      	movs	r1, #128	@ 0x80
 800286c:	480b      	ldr	r0, [pc, #44]	@ (800289c <motor_select+0x108>)
 800286e:	f000 f84f 	bl	8002910 <drive_motor>
			break;
 8002872:	e005      	b.n	8002880 <motor_select+0xec>
		default:
			printf("\r\n* ERROR: XBT %i motor not found *\r\n", xbtNum);
 8002874:	79fb      	ldrb	r3, [r7, #7]
 8002876:	4619      	mov	r1, r3
 8002878:	4809      	ldr	r0, [pc, #36]	@ (80028a0 <motor_select+0x10c>)
 800287a:	f006 f82f 	bl	80088dc <iprintf>
			break;
 800287e:	bf00      	nop
		}
		motorLock = mFree;
 8002880:	4b04      	ldr	r3, [pc, #16]	@ (8002894 <motor_select+0x100>)
 8002882:	2200      	movs	r2, #0
 8002884:	701a      	strb	r2, [r3, #0]
	}
}
 8002886:	bf00      	nop
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	20000160 	.word	0x20000160
 8002894:	20000154 	.word	0x20000154
 8002898:	40011000 	.word	0x40011000
 800289c:	40010800 	.word	0x40010800
 80028a0:	0800a5fc 	.word	0x0800a5fc

080028a4 <motor_init>:


void motor_init(void){
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(ENABLE_M1_GPIO_Port, ENABLE_M1_Pin, RESET); // start disabled
 80028a8:	2200      	movs	r2, #0
 80028aa:	2104      	movs	r1, #4
 80028ac:	4815      	ldr	r0, [pc, #84]	@ (8002904 <motor_init+0x60>)
 80028ae:	f002 f973 	bl	8004b98 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M2_GPIO_Port, ENABLE_M2_Pin, RESET); // start disabled
 80028b2:	2200      	movs	r2, #0
 80028b4:	2108      	movs	r1, #8
 80028b6:	4813      	ldr	r0, [pc, #76]	@ (8002904 <motor_init+0x60>)
 80028b8:	f002 f96e 	bl	8004b98 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M3_GPIO_Port, ENABLE_M3_Pin, RESET); // start disabled
 80028bc:	2200      	movs	r2, #0
 80028be:	2101      	movs	r1, #1
 80028c0:	4811      	ldr	r0, [pc, #68]	@ (8002908 <motor_init+0x64>)
 80028c2:	f002 f969 	bl	8004b98 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M4_GPIO_Port, ENABLE_M4_Pin, RESET); // start disabled
 80028c6:	2200      	movs	r2, #0
 80028c8:	2102      	movs	r1, #2
 80028ca:	480f      	ldr	r0, [pc, #60]	@ (8002908 <motor_init+0x64>)
 80028cc:	f002 f964 	bl	8004b98 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M5_GPIO_Port, ENABLE_M5_Pin, RESET); // start disabled
 80028d0:	2200      	movs	r2, #0
 80028d2:	2110      	movs	r1, #16
 80028d4:	480c      	ldr	r0, [pc, #48]	@ (8002908 <motor_init+0x64>)
 80028d6:	f002 f95f 	bl	8004b98 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M6_GPIO_Port, ENABLE_M6_Pin, RESET); // start disabled
 80028da:	2200      	movs	r2, #0
 80028dc:	2120      	movs	r1, #32
 80028de:	480a      	ldr	r0, [pc, #40]	@ (8002908 <motor_init+0x64>)
 80028e0:	f002 f95a 	bl	8004b98 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M7_GPIO_Port, ENABLE_M7_Pin, RESET); // start disabled
 80028e4:	2200      	movs	r2, #0
 80028e6:	2140      	movs	r1, #64	@ 0x40
 80028e8:	4807      	ldr	r0, [pc, #28]	@ (8002908 <motor_init+0x64>)
 80028ea:	f002 f955 	bl	8004b98 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M8_GPIO_Port, ENABLE_M8_Pin, RESET); // start disabled
 80028ee:	2200      	movs	r2, #0
 80028f0:	2180      	movs	r1, #128	@ 0x80
 80028f2:	4805      	ldr	r0, [pc, #20]	@ (8002908 <motor_init+0x64>)
 80028f4:	f002 f950 	bl	8004b98 <HAL_GPIO_WritePin>

	  // calibrate ADC
	  HAL_ADCEx_Calibration_Start(&hadc1);
 80028f8:	4804      	ldr	r0, [pc, #16]	@ (800290c <motor_init+0x68>)
 80028fa:	f001 fb6b 	bl	8003fd4 <HAL_ADCEx_Calibration_Start>
}
 80028fe:	bf00      	nop
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	40011000 	.word	0x40011000
 8002908:	40010800 	.word	0x40010800
 800290c:	2000008c 	.word	0x2000008c

08002910 <drive_motor>:

void drive_motor(GPIO_TypeDef * motorPort, uint16_t motorPin, motorDir_t motorDirection, uint32_t runTime ){
 8002910:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002914:	b09b      	sub	sp, #108	@ 0x6c
 8002916:	af08      	add	r7, sp, #32
 8002918:	61f8      	str	r0, [r7, #28]
 800291a:	617b      	str	r3, [r7, #20]
 800291c:	460b      	mov	r3, r1
 800291e:	837b      	strh	r3, [r7, #26]
 8002920:	4613      	mov	r3, r2
 8002922:	767b      	strb	r3, [r7, #25]
//	float current = 0, voltage = 0, temperature = 0;
//	uint8_t current_dec = 0, voltage_dec = 0, temperature_dec = 0; // display 2 decimal values
//	const float AVG_SLOPE_avg = 4.3, AVG_SLOPE_min = 4.0, AVG_SLOPE_max = 4.6; // average slope [mV/C]
//	const float V25_avg = 1430, V25_min = 1340, V25_max = 1520 ; // Voltage at 25 degrees [mV]
//	const float AVG_SLOPE_avg = 4.3, V25_avg = 1430;
	uint16_t adcSampleCount = 0;
 8002924:	2300      	movs	r3, #0
 8002926:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	adcScan_t adcReading;

	// Initialize PWM
	HAL_GPIO_WritePin(motorPort, motorPin, RESET); // make sure driver pin is disabled
 800292a:	8b7b      	ldrh	r3, [r7, #26]
 800292c:	2200      	movs	r2, #0
 800292e:	4619      	mov	r1, r3
 8002930:	69f8      	ldr	r0, [r7, #28]
 8002932:	f002 f931 	bl	8004b98 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // initialize PWM pulses for DRV8826
 8002936:	2108      	movs	r1, #8
 8002938:	484f      	ldr	r0, [pc, #316]	@ (8002a78 <drive_motor+0x168>)
 800293a:	f003 ff9d 	bl	8006878 <HAL_TIM_PWM_Start>

	HAL_GPIO_WritePin(DIR_GPIO_Port,DIR_Pin, motorDirection); // set motor direction
 800293e:	7e7b      	ldrb	r3, [r7, #25]
 8002940:	461a      	mov	r2, r3
 8002942:	2110      	movs	r1, #16
 8002944:	484d      	ldr	r0, [pc, #308]	@ (8002a7c <drive_motor+0x16c>)
 8002946:	f002 f927 	bl	8004b98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motorPort, motorPin, SET); // enable driver to run motor
 800294a:	8b7b      	ldrh	r3, [r7, #26]
 800294c:	2201      	movs	r2, #1
 800294e:	4619      	mov	r1, r3
 8002950:	69f8      	ldr	r0, [r7, #28]
 8002952:	f002 f921 	bl	8004b98 <HAL_GPIO_WritePin>

	timeStart = HAL_GetTick(); // initial timer count using SysTick timer (32 bit variable uwTick incremented every 1 ms, MAX = 50 days)
 8002956:	f000 ff01 	bl	800375c <HAL_GetTick>
 800295a:	6438      	str	r0, [r7, #64]	@ 0x40

	// get 1 current, voltage, temp reading every 500 ms using TIM2 interrupts
	HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_4); // trigger adc conversions in DMA mode every x ms
 800295c:	210c      	movs	r1, #12
 800295e:	4848      	ldr	r0, [pc, #288]	@ (8002a80 <drive_motor+0x170>)
 8002960:	f004 f890 	bl	8006a84 <HAL_TIM_PWM_Start_IT>
	printf("\r\n");
 8002964:	4847      	ldr	r0, [pc, #284]	@ (8002a84 <drive_motor+0x174>)
 8002966:	f006 f821 	bl	80089ac <puts>

	while(1){
		// track motor runtime and break loop after desired time elapsed
		timeNow = HAL_GetTick();
 800296a:	f000 fef7 	bl	800375c <HAL_GetTick>
 800296e:	63f8      	str	r0, [r7, #60]	@ 0x3c
		if(timeNow >= timeStart){
 8002970:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002972:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002974:	429a      	cmp	r2, r3
 8002976:	d306      	bcc.n	8002986 <drive_motor+0x76>
			if((timeNow - timeStart) >= runTime) break;
 8002978:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800297a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	429a      	cmp	r2, r3
 8002982:	d807      	bhi.n	8002994 <drive_motor+0x84>
 8002984:	e064      	b.n	8002a50 <drive_motor+0x140>
		} else { // if timeNow < timeStart, this only happens when uwTick ~ 2^32 (50 days) and there was an overflow
			if( (HAL_MAX_DELAY - timeStart + timeNow) >= runTime) break;
 8002986:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002988:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	3b01      	subs	r3, #1
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	429a      	cmp	r2, r3
 8002992:	d95c      	bls.n	8002a4e <drive_motor+0x13e>
		}
		// check if user sent stop signal
		if(active == rxStatus){ // set to active with UART RX interrupt
 8002994:	4b3c      	ldr	r3, [pc, #240]	@ (8002a88 <drive_motor+0x178>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d10a      	bne.n	80029b2 <drive_motor+0xa2>
			rxStatus = idle;
 800299c:	4b3a      	ldr	r3, [pc, #232]	@ (8002a88 <drive_motor+0x178>)
 800299e:	2200      	movs	r2, #0
 80029a0:	701a      	strb	r2, [r3, #0]
			if(rxChar == '@'){
 80029a2:	4b3a      	ldr	r3, [pc, #232]	@ (8002a8c <drive_motor+0x17c>)
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	2b40      	cmp	r3, #64	@ 0x40
 80029a8:	d103      	bne.n	80029b2 <drive_motor+0xa2>
				printf("\r\n ** Motor Stopped by user! **\r\n");
 80029aa:	4839      	ldr	r0, [pc, #228]	@ (8002a90 <drive_motor+0x180>)
 80029ac:	f005 fffe 	bl	80089ac <puts>
				break;
 80029b0:	e04e      	b.n	8002a50 <drive_motor+0x140>
			}
		}
		if(adcTimerTrigger == 1){
 80029b2:	4b38      	ldr	r3, [pc, #224]	@ (8002a94 <drive_motor+0x184>)
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d1d7      	bne.n	800296a <drive_motor+0x5a>
			adcTimerTrigger = 0;
 80029ba:	4b36      	ldr	r3, [pc, #216]	@ (8002a94 <drive_motor+0x184>)
 80029bc:	2200      	movs	r2, #0
 80029be:	701a      	strb	r2, [r3, #0]
			adcReading = get_adc_values();
 80029c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029c4:	4618      	mov	r0, r3
 80029c6:	f000 f86b 	bl	8002aa0 <get_adc_values>
			// print
			printf("<%02i> Current [AD# %i]: %i.%i mA | Voltage [AD# %i]: %i.%i V | Temperature [AD# %i]: %i.%i C\r\n", (int)adcSampleCount,
 80029ca:	f8b7 4046 	ldrh.w	r4, [r7, #70]	@ 0x46
					 	 (int)adcReading.current.rawValue, (int)adcReading.current.realValue, get_decimal(adcReading.current.realValue, 1),
 80029ce:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
			printf("<%02i> Current [AD# %i]: %i.%i mA | Voltage [AD# %i]: %i.%i V | Temperature [AD# %i]: %i.%i C\r\n", (int)adcSampleCount,
 80029d0:	4699      	mov	r9, r3
					 	 (int)adcReading.current.rawValue, (int)adcReading.current.realValue, get_decimal(adcReading.current.realValue, 1),
 80029d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
			printf("<%02i> Current [AD# %i]: %i.%i mA | Voltage [AD# %i]: %i.%i V | Temperature [AD# %i]: %i.%i C\r\n", (int)adcSampleCount,
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7fe f99b 	bl	8000d10 <__aeabi_f2iz>
 80029da:	4680      	mov	r8, r0
					 	 (int)adcReading.current.rawValue, (int)adcReading.current.realValue, get_decimal(adcReading.current.realValue, 1),
 80029dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029de:	2101      	movs	r1, #1
 80029e0:	4618      	mov	r0, r3
 80029e2:	f000 f933 	bl	8002c4c <get_decimal>
 80029e6:	4603      	mov	r3, r0
			printf("<%02i> Current [AD# %i]: %i.%i mA | Voltage [AD# %i]: %i.%i V | Temperature [AD# %i]: %i.%i C\r\n", (int)adcSampleCount,
 80029e8:	613b      	str	r3, [r7, #16]
						 (int)adcReading.voltage.rawValue, (int)adcReading.voltage.realValue, get_decimal(adcReading.voltage.realValue, 1),
 80029ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
			printf("<%02i> Current [AD# %i]: %i.%i mA | Voltage [AD# %i]: %i.%i V | Temperature [AD# %i]: %i.%i C\r\n", (int)adcSampleCount,
 80029ec:	60fb      	str	r3, [r7, #12]
						 (int)adcReading.voltage.rawValue, (int)adcReading.voltage.realValue, get_decimal(adcReading.voltage.realValue, 1),
 80029ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
			printf("<%02i> Current [AD# %i]: %i.%i mA | Voltage [AD# %i]: %i.%i V | Temperature [AD# %i]: %i.%i C\r\n", (int)adcSampleCount,
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7fe f98d 	bl	8000d10 <__aeabi_f2iz>
 80029f6:	4605      	mov	r5, r0
						 (int)adcReading.voltage.rawValue, (int)adcReading.voltage.realValue, get_decimal(adcReading.voltage.realValue, 1),
 80029f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029fa:	2101      	movs	r1, #1
 80029fc:	4618      	mov	r0, r3
 80029fe:	f000 f925 	bl	8002c4c <get_decimal>
 8002a02:	4603      	mov	r3, r0
			printf("<%02i> Current [AD# %i]: %i.%i mA | Voltage [AD# %i]: %i.%i V | Temperature [AD# %i]: %i.%i C\r\n", (int)adcSampleCount,
 8002a04:	60bb      	str	r3, [r7, #8]
						 (int)adcReading.temperature.rawValue, (int)adcReading.voltage.realValue, get_decimal(adcReading.temperature.realValue, 1));
 8002a06:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
			printf("<%02i> Current [AD# %i]: %i.%i mA | Voltage [AD# %i]: %i.%i V | Temperature [AD# %i]: %i.%i C\r\n", (int)adcSampleCount,
 8002a08:	607b      	str	r3, [r7, #4]
						 (int)adcReading.temperature.rawValue, (int)adcReading.voltage.realValue, get_decimal(adcReading.temperature.realValue, 1));
 8002a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
			printf("<%02i> Current [AD# %i]: %i.%i mA | Voltage [AD# %i]: %i.%i V | Temperature [AD# %i]: %i.%i C\r\n", (int)adcSampleCount,
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7fe f97f 	bl	8000d10 <__aeabi_f2iz>
 8002a12:	4606      	mov	r6, r0
						 (int)adcReading.temperature.rawValue, (int)adcReading.voltage.realValue, get_decimal(adcReading.temperature.realValue, 1));
 8002a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a16:	2101      	movs	r1, #1
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f000 f917 	bl	8002c4c <get_decimal>
 8002a1e:	4603      	mov	r3, r0
			printf("<%02i> Current [AD# %i]: %i.%i mA | Voltage [AD# %i]: %i.%i V | Temperature [AD# %i]: %i.%i C\r\n", (int)adcSampleCount,
 8002a20:	9306      	str	r3, [sp, #24]
 8002a22:	9605      	str	r6, [sp, #20]
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	9204      	str	r2, [sp, #16]
 8002a28:	68ba      	ldr	r2, [r7, #8]
 8002a2a:	9203      	str	r2, [sp, #12]
 8002a2c:	9502      	str	r5, [sp, #8]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	9201      	str	r2, [sp, #4]
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	4643      	mov	r3, r8
 8002a38:	464a      	mov	r2, r9
 8002a3a:	4621      	mov	r1, r4
 8002a3c:	4816      	ldr	r0, [pc, #88]	@ (8002a98 <drive_motor+0x188>)
 8002a3e:	f005 ff4d 	bl	80088dc <iprintf>

			adcSampleCount++;
 8002a42:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002a46:	3301      	adds	r3, #1
 8002a48:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		timeNow = HAL_GetTick();
 8002a4c:	e78d      	b.n	800296a <drive_motor+0x5a>
			if( (HAL_MAX_DELAY - timeStart + timeNow) >= runTime) break;
 8002a4e:	bf00      	nop
//			// increase sample counter
//			adcSampleCount++;
//		}
	}

	HAL_GPIO_WritePin(motorPort, motorPin, RESET); // disable motor driver
 8002a50:	8b7b      	ldrh	r3, [r7, #26]
 8002a52:	2200      	movs	r2, #0
 8002a54:	4619      	mov	r1, r3
 8002a56:	69f8      	ldr	r0, [r7, #28]
 8002a58:	f002 f89e 	bl	8004b98 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3); // stop PWM signal to step the motor
 8002a5c:	2108      	movs	r1, #8
 8002a5e:	4806      	ldr	r0, [pc, #24]	@ (8002a78 <drive_motor+0x168>)
 8002a60:	f003 ffac 	bl	80069bc <HAL_TIM_PWM_Stop>
	//HAL_ADC_Stop_DMA(&hadc1); // stop ADC conversion if there was one triggered before exiting the while(1)
	HAL_TIM_PWM_Stop_IT(&htim4, TIM_CHANNEL_4); // stop timer triggering adc conversions
 8002a64:	210c      	movs	r1, #12
 8002a66:	4806      	ldr	r0, [pc, #24]	@ (8002a80 <drive_motor+0x170>)
 8002a68:	f004 f8fc 	bl	8006c64 <HAL_TIM_PWM_Stop_IT>
}
 8002a6c:	bf00      	nop
 8002a6e:	374c      	adds	r7, #76	@ 0x4c
 8002a70:	46bd      	mov	sp, r7
 8002a72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002a76:	bf00      	nop
 8002a78:	20000190 	.word	0x20000190
 8002a7c:	40011000 	.word	0x40011000
 8002a80:	200001d8 	.word	0x200001d8
 8002a84:	08009b1c 	.word	0x08009b1c
 8002a88:	20000156 	.word	0x20000156
 8002a8c:	20000185 	.word	0x20000185
 8002a90:	0800a624 	.word	0x0800a624
 8002a94:	20000187 	.word	0x20000187
 8002a98:	0800a648 	.word	0x0800a648
 8002a9c:	00000000 	.word	0x00000000

08002aa0 <get_adc_values>:


adcScan_t get_adc_values(void){
 8002aa0:	b5b0      	push	{r4, r5, r7, lr}
 8002aa2:	b094      	sub	sp, #80	@ 0x50
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
	//	const float AVG_SLOPE_avg = 4.3, AVG_SLOPE_min = 4.0, AVG_SLOPE_max = 4.6; // average slope [mV/C]
	//	const float V25_avg = 1430, V25_min = 1340, V25_max = 1520 ; // Voltage at 25 degrees [mV]
	const float AVG_SLOPE_avg = 4.3, V25_avg = 1430;
 8002aa8:	4b5f      	ldr	r3, [pc, #380]	@ (8002c28 <get_adc_values+0x188>)
 8002aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002aac:	4b5f      	ldr	r3, [pc, #380]	@ (8002c2c <get_adc_values+0x18c>)
 8002aae:	63bb      	str	r3, [r7, #56]	@ 0x38
	const float VOLT_SLOPE = 0.0083, VOLT_OFFSET = 0.3963;
 8002ab0:	4b5f      	ldr	r3, [pc, #380]	@ (8002c30 <get_adc_values+0x190>)
 8002ab2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ab4:	4b5f      	ldr	r3, [pc, #380]	@ (8002c34 <get_adc_values+0x194>)
 8002ab6:	633b      	str	r3, [r7, #48]	@ 0x30
	const float AMP_SLOPE = 0.163, AMP_OFFSET = 7.3581;
 8002ab8:	4b5f      	ldr	r3, [pc, #380]	@ (8002c38 <get_adc_values+0x198>)
 8002aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002abc:	4b5f      	ldr	r3, [pc, #380]	@ (8002c3c <get_adc_values+0x19c>)
 8002abe:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint16_t adcBuffer[ADC_BUFFER] = {'\0'}; // store 3 ADC measurements in DMA mode: [Vin0,Im0,TempInt0,Vin1,Im1,...]
 8002ac0:	f107 0320 	add.w	r3, r7, #32
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	809a      	strh	r2, [r3, #4]
	uint32_t vAccum = 0, iAccum = 0, tAccum = 0;
 8002aca:	2300      	movs	r3, #0
 8002acc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ace:	2300      	movs	r3, #0
 8002ad0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	647b      	str	r3, [r7, #68]	@ 0x44
	adcScan_t adc = {.current = {0,0}, .voltage = {0,0}, .temperature = {0,0} };
 8002ad6:	f107 0308 	add.w	r3, r7, #8
 8002ada:	2200      	movs	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	605a      	str	r2, [r3, #4]
 8002ae0:	609a      	str	r2, [r3, #8]
 8002ae2:	60da      	str	r2, [r3, #12]
 8002ae4:	611a      	str	r2, [r3, #16]
 8002ae6:	615a      	str	r2, [r3, #20]

	// Sample ADC scan and fill the DMA buffer (3 channels: AIN10, AIN11, TEMPINT)
	for(uint16_t j = 0; j < ADC_SAMPLES; j++){
 8002ae8:	2300      	movs	r3, #0
 8002aea:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002aee:	e01a      	b.n	8002b26 <get_adc_values+0x86>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcBuffer, ADC_BUFFER);
 8002af0:	f107 0320 	add.w	r3, r7, #32
 8002af4:	2203      	movs	r2, #3
 8002af6:	4619      	mov	r1, r3
 8002af8:	4851      	ldr	r0, [pc, #324]	@ (8002c40 <get_adc_values+0x1a0>)
 8002afa:	f000 ff35 	bl	8003968 <HAL_ADC_Start_DMA>
		vAccum += adcBuffer[0];
 8002afe:	8c3b      	ldrh	r3, [r7, #32]
 8002b00:	461a      	mov	r2, r3
 8002b02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b04:	4413      	add	r3, r2
 8002b06:	64fb      	str	r3, [r7, #76]	@ 0x4c
		iAccum += adcBuffer[1];
 8002b08:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b0e:	4413      	add	r3, r2
 8002b10:	64bb      	str	r3, [r7, #72]	@ 0x48
		tAccum += adcBuffer[2];
 8002b12:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002b14:	461a      	mov	r2, r3
 8002b16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b18:	4413      	add	r3, r2
 8002b1a:	647b      	str	r3, [r7, #68]	@ 0x44
	for(uint16_t j = 0; j < ADC_SAMPLES; j++){
 8002b1c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002b20:	3301      	adds	r3, #1
 8002b22:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002b26:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002b2a:	2b63      	cmp	r3, #99	@ 0x63
 8002b2c:	d9e0      	bls.n	8002af0 <get_adc_values+0x50>
//		HAL_Delay(1);
	}

	HAL_ADC_Stop_DMA(&hadc1); // stop ADC conversions
 8002b2e:	4844      	ldr	r0, [pc, #272]	@ (8002c40 <get_adc_values+0x1a0>)
 8002b30:	f000 fff8 	bl	8003b24 <HAL_ADC_Stop_DMA>
//		iAccum += adcBuffer[i+1];
//		tAccum += adcBuffer[i+2];
//	}
	// calculate averages and real values
	// voltage
	adc.voltage.rawValue = (uint16_t) ( vAccum / ADC_SAMPLES ); // ADC counts, divide by 3 num of buffer slots since each scan has 3 readings
 8002b34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b36:	4a43      	ldr	r2, [pc, #268]	@ (8002c44 <get_adc_values+0x1a4>)
 8002b38:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3c:	095b      	lsrs	r3, r3, #5
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	813b      	strh	r3, [r7, #8]
	adc.voltage.realValue = (float) adc.voltage.rawValue * VOLT_SLOPE + VOLT_OFFSET; // calibration coeff should be taken from eeprom
 8002b42:	893b      	ldrh	r3, [r7, #8]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7fe f88b 	bl	8000c60 <__aeabi_ui2f>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7fd fafe 	bl	8000150 <__aeabi_fmul>
 8002b54:	4603      	mov	r3, r0
 8002b56:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7fd ffd1 	bl	8000b00 <__addsf3>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	60fb      	str	r3, [r7, #12]
	// current
	adc.current.rawValue = (uint16_t) ( iAccum / ADC_SAMPLES ); // ADC counts
 8002b62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b64:	4a37      	ldr	r2, [pc, #220]	@ (8002c44 <get_adc_values+0x1a4>)
 8002b66:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6a:	095b      	lsrs	r3, r3, #5
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	823b      	strh	r3, [r7, #16]
	adc.current.realValue =  (float) adc.current.rawValue * AMP_SLOPE + AMP_OFFSET; // mA - opAmp G = 50, Rsense = 0.10 ohm
 8002b70:	8a3b      	ldrh	r3, [r7, #16]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fe f874 	bl	8000c60 <__aeabi_ui2f>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7fd fae7 	bl	8000150 <__aeabi_fmul>
 8002b82:	4603      	mov	r3, r0
 8002b84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7fd ffba 	bl	8000b00 <__addsf3>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	617b      	str	r3, [r7, #20]
	// internal temperature
	adc.temperature.rawValue = (uint16_t) ( tAccum / ADC_SAMPLES ); // ADC counts
 8002b90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b92:	4a2c      	ldr	r2, [pc, #176]	@ (8002c44 <get_adc_values+0x1a4>)
 8002b94:	fba2 2303 	umull	r2, r3, r2, r3
 8002b98:	095b      	lsrs	r3, r3, #5
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	833b      	strh	r3, [r7, #24]
	adc.temperature.realValue = ( (V25_avg - (adc.temperature.rawValue * (3300.0/4096.0) ) )  / AVG_SLOPE_avg) + 25.0 ;
 8002b9e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002ba0:	f7fd fcee 	bl	8000580 <__aeabi_f2d>
 8002ba4:	4604      	mov	r4, r0
 8002ba6:	460d      	mov	r5, r1
 8002ba8:	8b3b      	ldrh	r3, [r7, #24]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7fd fcd6 	bl	800055c <__aeabi_i2d>
 8002bb0:	a31b      	add	r3, pc, #108	@ (adr r3, 8002c20 <get_adc_values+0x180>)
 8002bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb6:	f7fd fd3b 	bl	8000630 <__aeabi_dmul>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	4620      	mov	r0, r4
 8002bc0:	4629      	mov	r1, r5
 8002bc2:	f7fd fb7d 	bl	80002c0 <__aeabi_dsub>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	4614      	mov	r4, r2
 8002bcc:	461d      	mov	r5, r3
 8002bce:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002bd0:	f7fd fcd6 	bl	8000580 <__aeabi_f2d>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	4620      	mov	r0, r4
 8002bda:	4629      	mov	r1, r5
 8002bdc:	f7fd fe52 	bl	8000884 <__aeabi_ddiv>
 8002be0:	4602      	mov	r2, r0
 8002be2:	460b      	mov	r3, r1
 8002be4:	4610      	mov	r0, r2
 8002be6:	4619      	mov	r1, r3
 8002be8:	f04f 0200 	mov.w	r2, #0
 8002bec:	4b16      	ldr	r3, [pc, #88]	@ (8002c48 <get_adc_values+0x1a8>)
 8002bee:	f7fd fb69 	bl	80002c4 <__adddf3>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	4610      	mov	r0, r2
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	f7fd ff2b 	bl	8000a54 <__aeabi_d2f>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	61fb      	str	r3, [r7, #28]

	return adc;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	461d      	mov	r5, r3
 8002c06:	f107 0408 	add.w	r4, r7, #8
 8002c0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c0e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c12:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	3750      	adds	r7, #80	@ 0x50
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bdb0      	pop	{r4, r5, r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	00000000 	.word	0x00000000
 8002c24:	3fe9c800 	.word	0x3fe9c800
 8002c28:	4089999a 	.word	0x4089999a
 8002c2c:	44b2c000 	.word	0x44b2c000
 8002c30:	3c07fcb9 	.word	0x3c07fcb9
 8002c34:	3ecae7d5 	.word	0x3ecae7d5
 8002c38:	3e26e979 	.word	0x3e26e979
 8002c3c:	40eb758e 	.word	0x40eb758e
 8002c40:	2000008c 	.word	0x2000008c
 8002c44:	51eb851f 	.word	0x51eb851f
 8002c48:	40390000 	.word	0x40390000

08002c4c <get_decimal>:

/* Returns the decimal digits of a float as an integer
 * Parameters: float number to retreive decimals, number of decimal digits */
uint8_t get_decimal(float value, uint8_t digits){
 8002c4c:	b590      	push	{r4, r7, lr}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	460b      	mov	r3, r1
 8002c56:	70fb      	strb	r3, [r7, #3]
	uint8_t dec;
	uint32_t exp = 1;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	60fb      	str	r3, [r7, #12]

	for(uint8_t i = 0; i < digits ; i++){
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	72fb      	strb	r3, [r7, #11]
 8002c60:	e008      	b.n	8002c74 <get_decimal+0x28>
		exp = exp * 10;
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	4613      	mov	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	4413      	add	r3, r2
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < digits ; i++){
 8002c6e:	7afb      	ldrb	r3, [r7, #11]
 8002c70:	3301      	adds	r3, #1
 8002c72:	72fb      	strb	r3, [r7, #11]
 8002c74:	7afa      	ldrb	r2, [r7, #11]
 8002c76:	78fb      	ldrb	r3, [r7, #3]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d3f2      	bcc.n	8002c62 <get_decimal+0x16>
	}
	dec = (value - (int)value) * exp;
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f7fe f847 	bl	8000d10 <__aeabi_f2iz>
 8002c82:	4603      	mov	r3, r0
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7fd ffef 	bl	8000c68 <__aeabi_i2f>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7fd ff34 	bl	8000afc <__aeabi_fsub>
 8002c94:	4603      	mov	r3, r0
 8002c96:	461c      	mov	r4, r3
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f7fd ffe1 	bl	8000c60 <__aeabi_ui2f>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	4620      	mov	r0, r4
 8002ca4:	f7fd fa54 	bl	8000150 <__aeabi_fmul>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7fe f856 	bl	8000d5c <__aeabi_f2uiz>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	72bb      	strb	r3, [r7, #10]
	return dec;
 8002cb4:	7abb      	ldrb	r3, [r7, #10]
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3714      	adds	r7, #20
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd90      	pop	{r4, r7, pc}
	...

08002cc0 <eeprom_write>:
 * Max freq 1 MHz, 1 Kbit memory (1024 bit), 128 x 8-bit block, 5 ms page write,
 * 8-Byte write pages, fixed device address 1010-xxxRW, 128 bytes memory range {00-7F} */

/* Write 1 byte in epprom
 * Parameters: memory address [0-127], 1 byte of data */
void eeprom_write(uint8_t memoryAddress, uint8_t dataByte){
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af02      	add	r7, sp, #8
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	460a      	mov	r2, r1
 8002cca:	71fb      	strb	r3, [r7, #7]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	71bb      	strb	r3, [r7, #6]
	uint8_t txBuff[2] = {memoryAddress, dataByte};
 8002cd0:	79fb      	ldrb	r3, [r7, #7]
 8002cd2:	733b      	strb	r3, [r7, #12]
 8002cd4:	79bb      	ldrb	r3, [r7, #6]
 8002cd6:	737b      	strb	r3, [r7, #13]
	if(memoryAddress <= eeprom.MAX_MEM_ADDRESS ){
 8002cd8:	79fb      	ldrb	r3, [r7, #7]
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	4b0e      	ldr	r3, [pc, #56]	@ (8002d18 <eeprom_write+0x58>)
 8002cde:	885b      	ldrh	r3, [r3, #2]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d80d      	bhi.n	8002d00 <eeprom_write+0x40>
		HAL_I2C_Master_Transmit(&hi2c1, EEPROM_BUS_ADDRESS , txBuff, 2, HAL_MAX_DELAY); // send word address, value
 8002ce4:	f107 020c 	add.w	r2, r7, #12
 8002ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8002cec:	9300      	str	r3, [sp, #0]
 8002cee:	2302      	movs	r3, #2
 8002cf0:	21a0      	movs	r1, #160	@ 0xa0
 8002cf2:	480a      	ldr	r0, [pc, #40]	@ (8002d1c <eeprom_write+0x5c>)
 8002cf4:	f002 f8ac 	bl	8004e50 <HAL_I2C_Master_Transmit>
		HAL_Delay(10); // wait for data to be written
 8002cf8:	200a      	movs	r0, #10
 8002cfa:	f000 fd39 	bl	8003770 <HAL_Delay>
	} else {
		printf("* ERROR: memory address %x out of range [0-%i] *\r\n", memoryAddress, eeprom.MAX_MEM_ADDRESS);
	}
}
 8002cfe:	e006      	b.n	8002d0e <eeprom_write+0x4e>
		printf("* ERROR: memory address %x out of range [0-%i] *\r\n", memoryAddress, eeprom.MAX_MEM_ADDRESS);
 8002d00:	79fb      	ldrb	r3, [r7, #7]
 8002d02:	4a05      	ldr	r2, [pc, #20]	@ (8002d18 <eeprom_write+0x58>)
 8002d04:	8852      	ldrh	r2, [r2, #2]
 8002d06:	4619      	mov	r1, r3
 8002d08:	4805      	ldr	r0, [pc, #20]	@ (8002d20 <eeprom_write+0x60>)
 8002d0a:	f005 fde7 	bl	80088dc <iprintf>
}
 8002d0e:	bf00      	nop
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	20000000 	.word	0x20000000
 8002d1c:	20000100 	.word	0x20000100
 8002d20:	0800a6a8 	.word	0x0800a6a8

08002d24 <eeprom_read>:

/* Read 1 byte from epprom
 * Parameters: memory address [0-127]
 * Returns 1 byte of data */
uint8_t eeprom_read(uint8_t memoryAddress){
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af02      	add	r7, sp, #8
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	71fb      	strb	r3, [r7, #7]
	uint8_t addressBuffer[1] = {memoryAddress};
 8002d2e:	79fb      	ldrb	r3, [r7, #7]
 8002d30:	733b      	strb	r3, [r7, #12]
	uint8_t rxBuff[1] = {0};
 8002d32:	2300      	movs	r3, #0
 8002d34:	723b      	strb	r3, [r7, #8]
	if(memoryAddress <= eeprom.MAX_MEM_ADDRESS ){
 8002d36:	79fb      	ldrb	r3, [r7, #7]
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	4b15      	ldr	r3, [pc, #84]	@ (8002d90 <eeprom_read+0x6c>)
 8002d3c:	885b      	ldrh	r3, [r3, #2]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d81a      	bhi.n	8002d78 <eeprom_read+0x54>
		HAL_I2C_Master_Transmit(&hi2c1, EEPROM_BUS_ADDRESS , addressBuffer, 1, HAL_MAX_DELAY); // dummy write to set pointer to desired memory address
 8002d42:	f107 020c 	add.w	r2, r7, #12
 8002d46:	f04f 33ff 	mov.w	r3, #4294967295
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	21a0      	movs	r1, #160	@ 0xa0
 8002d50:	4810      	ldr	r0, [pc, #64]	@ (8002d94 <eeprom_read+0x70>)
 8002d52:	f002 f87d 	bl	8004e50 <HAL_I2C_Master_Transmit>
		HAL_Delay(10);
 8002d56:	200a      	movs	r0, #10
 8002d58:	f000 fd0a 	bl	8003770 <HAL_Delay>
		HAL_I2C_Master_Receive(&hi2c1, EEPROM_BUS_ADDRESS, rxBuff, 1, HAL_MAX_DELAY); // send command to read 1 byte at current memory address pointer
 8002d5c:	f107 0208 	add.w	r2, r7, #8
 8002d60:	f04f 33ff 	mov.w	r3, #4294967295
 8002d64:	9300      	str	r3, [sp, #0]
 8002d66:	2301      	movs	r3, #1
 8002d68:	21a0      	movs	r1, #160	@ 0xa0
 8002d6a:	480a      	ldr	r0, [pc, #40]	@ (8002d94 <eeprom_read+0x70>)
 8002d6c:	f002 f96e 	bl	800504c <HAL_I2C_Master_Receive>
		HAL_Delay(10);
 8002d70:	200a      	movs	r0, #10
 8002d72:	f000 fcfd 	bl	8003770 <HAL_Delay>
 8002d76:	e006      	b.n	8002d86 <eeprom_read+0x62>
	} else {
		printf("* ERROR: memory address %x out of range [0-%i] *\r\n", memoryAddress, eeprom.MAX_MEM_ADDRESS);
 8002d78:	79fb      	ldrb	r3, [r7, #7]
 8002d7a:	4a05      	ldr	r2, [pc, #20]	@ (8002d90 <eeprom_read+0x6c>)
 8002d7c:	8852      	ldrh	r2, [r2, #2]
 8002d7e:	4619      	mov	r1, r3
 8002d80:	4805      	ldr	r0, [pc, #20]	@ (8002d98 <eeprom_read+0x74>)
 8002d82:	f005 fdab 	bl	80088dc <iprintf>
	}
	return ((uint8_t) rxBuff[0]);
 8002d86:	7a3b      	ldrb	r3, [r7, #8]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	20000000 	.word	0x20000000
 8002d94:	20000100 	.word	0x20000100
 8002d98:	0800a6a8 	.word	0x0800a6a8

08002d9c <eeprom_clear>:

/* Clear memory within a given range of addresses
 * Parameters: start address and end address (inclusive) [0-127]
 * Returns number of blocks cleared */
uint8_t eeprom_clear(uint8_t memoryStart, uint8_t memoryEnd){
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	4603      	mov	r3, r0
 8002da4:	460a      	mov	r2, r1
 8002da6:	71fb      	strb	r3, [r7, #7]
 8002da8:	4613      	mov	r3, r2
 8002daa:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	if( (memoryStart >= 0) && (memoryEnd <= eeprom.MAX_MEM_ADDRESS) ){
 8002dac:	79bb      	ldrb	r3, [r7, #6]
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	4b11      	ldr	r3, [pc, #68]	@ (8002df8 <eeprom_clear+0x5c>)
 8002db2:	885b      	ldrh	r3, [r3, #2]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d80f      	bhi.n	8002dd8 <eeprom_clear+0x3c>
		for(i = memoryStart ; i <= memoryEnd ; i++){
 8002db8:	79fb      	ldrb	r3, [r7, #7]
 8002dba:	73fb      	strb	r3, [r7, #15]
 8002dbc:	e007      	b.n	8002dce <eeprom_clear+0x32>
			eeprom_write(i, 0xFF);
 8002dbe:	7bfb      	ldrb	r3, [r7, #15]
 8002dc0:	21ff      	movs	r1, #255	@ 0xff
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7ff ff7c 	bl	8002cc0 <eeprom_write>
		for(i = memoryStart ; i <= memoryEnd ; i++){
 8002dc8:	7bfb      	ldrb	r3, [r7, #15]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	73fb      	strb	r3, [r7, #15]
 8002dce:	7bfa      	ldrb	r2, [r7, #15]
 8002dd0:	79bb      	ldrb	r3, [r7, #6]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d9f3      	bls.n	8002dbe <eeprom_clear+0x22>
 8002dd6:	e005      	b.n	8002de4 <eeprom_clear+0x48>
		}
	} else {
		printf("* ERROR: memory out of range [0-%i] *\r\n", eeprom.MAX_MEM_ADDRESS);
 8002dd8:	4b07      	ldr	r3, [pc, #28]	@ (8002df8 <eeprom_clear+0x5c>)
 8002dda:	885b      	ldrh	r3, [r3, #2]
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4807      	ldr	r0, [pc, #28]	@ (8002dfc <eeprom_clear+0x60>)
 8002de0:	f005 fd7c 	bl	80088dc <iprintf>
	}
	return (i-memoryStart+1);
 8002de4:	7bfa      	ldrb	r2, [r7, #15]
 8002de6:	79fb      	ldrb	r3, [r7, #7]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	3301      	adds	r3, #1
 8002dee:	b2db      	uxtb	r3, r3
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3710      	adds	r7, #16
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	20000000 	.word	0x20000000
 8002dfc:	0800a6dc 	.word	0x0800a6dc

08002e00 <eeprom_print_map>:

/* print memory map on eeprom
 * {AL_TUBECOUNT, AL_TYPE, AL_SN1, AL_SN2, AL_CONFIGED, M_RUNTIME } */
void eeprom_print_map(void){
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af04      	add	r7, sp, #16
	printf("\r\n");
 8002e06:	480f      	ldr	r0, [pc, #60]	@ (8002e44 <eeprom_print_map+0x44>)
 8002e08:	f005 fdd0 	bl	80089ac <puts>
	printf("|=======================================|\r\n");
 8002e0c:	480e      	ldr	r0, [pc, #56]	@ (8002e48 <eeprom_print_map+0x48>)
 8002e0e:	f005 fdcd 	bl	80089ac <puts>
	printf("|              MEMORY MAP               |\r\n");
 8002e12:	480e      	ldr	r0, [pc, #56]	@ (8002e4c <eeprom_print_map+0x4c>)
 8002e14:	f005 fdca 	bl	80089ac <puts>
	printf("|=======================================|\r\n");
 8002e18:	480b      	ldr	r0, [pc, #44]	@ (8002e48 <eeprom_print_map+0x48>)
 8002e1a:	f005 fdc7 	bl	80089ac <puts>
	printf("|[%03i]       AL_TUBECOUNT              |\r\n"
 8002e1e:	230b      	movs	r3, #11
 8002e20:	9302      	str	r3, [sp, #8]
 8002e22:	2308      	movs	r3, #8
 8002e24:	9301      	str	r3, [sp, #4]
 8002e26:	2303      	movs	r3, #3
 8002e28:	9300      	str	r3, [sp, #0]
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	2100      	movs	r1, #0
 8002e30:	4807      	ldr	r0, [pc, #28]	@ (8002e50 <eeprom_print_map+0x50>)
 8002e32:	f005 fd53 	bl	80088dc <iprintf>
		   "|[%03i]       AL_TYPE                   |\r\n"
		   "|[%03i]       AL_SN                     |\r\n"
		   "|[%03i]       AL_CONFIGED               |\r\n"
		   "|[%03i-%03i]  M_RUNTIME                 |\r\n", AL_TUBECOUNT1B, AL_TYPE1B, AL_SN1B, AL_CONFIGED1B, M_RUNTIME2B,M_RUNTIME2B+3);
	printf("|=======================================|\r\n");
 8002e36:	4804      	ldr	r0, [pc, #16]	@ (8002e48 <eeprom_print_map+0x48>)
 8002e38:	f005 fdb8 	bl	80089ac <puts>
}
 8002e3c:	bf00      	nop
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	08009b1c 	.word	0x08009b1c
 8002e48:	0800a704 	.word	0x0800a704
 8002e4c:	0800a730 	.word	0x0800a730
 8002e50:	0800a75c 	.word	0x0800a75c

08002e54 <eeprom_write_nbytes>:
}


/* Write N bytes to eeprom
 * Parameters: starting address on eeprom, number of bytes to write, pointer to data of any type */
void eeprom_write_nbytes(uint8_t baseAddress, uint8_t bytes, void * pData){
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	603a      	str	r2, [r7, #0]
 8002e5e:	71fb      	strb	r3, [r7, #7]
 8002e60:	460b      	mov	r3, r1
 8002e62:	71bb      	strb	r3, [r7, #6]
    uint8_t *ptr = 0;
 8002e64:	2300      	movs	r3, #0
 8002e66:	60bb      	str	r3, [r7, #8]
    //uint8_t data = 0;
 	for( uint8_t i = 0; i < bytes && i < 4; i++){
 8002e68:	2300      	movs	r3, #0
 8002e6a:	73fb      	strb	r3, [r7, #15]
 8002e6c:	e010      	b.n	8002e90 <eeprom_write_nbytes+0x3c>
		//uint8_t address = baseAddress+i;
 		ptr = pData+i; // cast to 1 byte before adding 1 to address
 8002e6e:	7bfb      	ldrb	r3, [r7, #15]
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	4413      	add	r3, r2
 8002e74:	60bb      	str	r3, [r7, #8]
		//data = *ptr;
		eeprom_write(baseAddress+i, *ptr);
 8002e76:	79fa      	ldrb	r2, [r7, #7]
 8002e78:	7bfb      	ldrb	r3, [r7, #15]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	b2da      	uxtb	r2, r3
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	4619      	mov	r1, r3
 8002e84:	4610      	mov	r0, r2
 8002e86:	f7ff ff1b 	bl	8002cc0 <eeprom_write>
 	for( uint8_t i = 0; i < bytes && i < 4; i++){
 8002e8a:	7bfb      	ldrb	r3, [r7, #15]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	73fb      	strb	r3, [r7, #15]
 8002e90:	7bfa      	ldrb	r2, [r7, #15]
 8002e92:	79bb      	ldrb	r3, [r7, #6]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d202      	bcs.n	8002e9e <eeprom_write_nbytes+0x4a>
 8002e98:	7bfb      	ldrb	r3, [r7, #15]
 8002e9a:	2b03      	cmp	r3, #3
 8002e9c:	d9e7      	bls.n	8002e6e <eeprom_write_nbytes+0x1a>
	}
}
 8002e9e:	bf00      	nop
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <eeprom_read_nbytes>:

/* Read N bytes from eeprom
 * Parameters: starting address on eeprom, number of bytes to read, pointer to store data of any type */
void eeprom_read_nbytes(uint8_t baseAddress, uint8_t bytes, void * pData){
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b084      	sub	sp, #16
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	4603      	mov	r3, r0
 8002eae:	603a      	str	r2, [r7, #0]
 8002eb0:	71fb      	strb	r3, [r7, #7]
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	71bb      	strb	r3, [r7, #6]
	uint8_t *ptr = 0;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60bb      	str	r3, [r7, #8]
 	for( uint8_t i = 0; i < bytes && i < 4; i++){
 8002eba:	2300      	movs	r3, #0
 8002ebc:	73fb      	strb	r3, [r7, #15]
 8002ebe:	e011      	b.n	8002ee4 <eeprom_read_nbytes+0x3e>
		//uint8_t address = baseAddress+i;
 		ptr = pData+i;
 8002ec0:	7bfb      	ldrb	r3, [r7, #15]
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	60bb      	str	r3, [r7, #8]
		//data = *ptr;
		*ptr = eeprom_read(baseAddress+i);
 8002ec8:	79fa      	ldrb	r2, [r7, #7]
 8002eca:	7bfb      	ldrb	r3, [r7, #15]
 8002ecc:	4413      	add	r3, r2
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff ff27 	bl	8002d24 <eeprom_read>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	461a      	mov	r2, r3
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	701a      	strb	r2, [r3, #0]
 	for( uint8_t i = 0; i < bytes && i < 4; i++){
 8002ede:	7bfb      	ldrb	r3, [r7, #15]
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	73fb      	strb	r3, [r7, #15]
 8002ee4:	7bfa      	ldrb	r2, [r7, #15]
 8002ee6:	79bb      	ldrb	r3, [r7, #6]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d202      	bcs.n	8002ef2 <eeprom_read_nbytes+0x4c>
 8002eec:	7bfb      	ldrb	r3, [r7, #15]
 8002eee:	2b03      	cmp	r3, #3
 8002ef0:	d9e6      	bls.n	8002ec0 <eeprom_read_nbytes+0x1a>
	}
}
 8002ef2:	bf00      	nop
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002efa:	b480      	push	{r7}
 8002efc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002efe:	b672      	cpsid	i
}
 8002f00:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f02:	bf00      	nop
 8002f04:	e7fd      	b.n	8002f02 <Error_Handler+0x8>
	...

08002f08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002f0e:	4b15      	ldr	r3, [pc, #84]	@ (8002f64 <HAL_MspInit+0x5c>)
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	4a14      	ldr	r2, [pc, #80]	@ (8002f64 <HAL_MspInit+0x5c>)
 8002f14:	f043 0301 	orr.w	r3, r3, #1
 8002f18:	6193      	str	r3, [r2, #24]
 8002f1a:	4b12      	ldr	r3, [pc, #72]	@ (8002f64 <HAL_MspInit+0x5c>)
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	60bb      	str	r3, [r7, #8]
 8002f24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f26:	4b0f      	ldr	r3, [pc, #60]	@ (8002f64 <HAL_MspInit+0x5c>)
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	4a0e      	ldr	r2, [pc, #56]	@ (8002f64 <HAL_MspInit+0x5c>)
 8002f2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f30:	61d3      	str	r3, [r2, #28]
 8002f32:	4b0c      	ldr	r3, [pc, #48]	@ (8002f64 <HAL_MspInit+0x5c>)
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f3a:	607b      	str	r3, [r7, #4]
 8002f3c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8002f68 <HAL_MspInit+0x60>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	60fb      	str	r3, [r7, #12]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f52:	60fb      	str	r3, [r7, #12]
 8002f54:	4a04      	ldr	r2, [pc, #16]	@ (8002f68 <HAL_MspInit+0x60>)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f5a:	bf00      	nop
 8002f5c:	3714      	adds	r7, #20
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bc80      	pop	{r7}
 8002f62:	4770      	bx	lr
 8002f64:	40021000 	.word	0x40021000
 8002f68:	40010000 	.word	0x40010000

08002f6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f70:	bf00      	nop
 8002f72:	e7fd      	b.n	8002f70 <NMI_Handler+0x4>

08002f74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f78:	bf00      	nop
 8002f7a:	e7fd      	b.n	8002f78 <HardFault_Handler+0x4>

08002f7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f80:	bf00      	nop
 8002f82:	e7fd      	b.n	8002f80 <MemManage_Handler+0x4>

08002f84 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f88:	bf00      	nop
 8002f8a:	e7fd      	b.n	8002f88 <BusFault_Handler+0x4>

08002f8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f90:	bf00      	nop
 8002f92:	e7fd      	b.n	8002f90 <UsageFault_Handler+0x4>

08002f94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f98:	bf00      	nop
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bc80      	pop	{r7}
 8002f9e:	4770      	bx	lr

08002fa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fa4:	bf00      	nop
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr

08002fac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fb0:	bf00      	nop
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bc80      	pop	{r7}
 8002fb6:	4770      	bx	lr

08002fb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fbc:	f000 fbbc 	bl	8003738 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fc0:	bf00      	nop
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002fc8:	4803      	ldr	r0, [pc, #12]	@ (8002fd8 <DMA1_Channel1_IRQHandler+0x14>)
 8002fca:	f001 fb2d 	bl	8004628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  adcDMAFull = 1;
 8002fce:	4b03      	ldr	r3, [pc, #12]	@ (8002fdc <DMA1_Channel1_IRQHandler+0x18>)
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002fd4:	bf00      	nop
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	200000bc 	.word	0x200000bc
 8002fdc:	20000188 	.word	0x20000188

08002fe0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002fe4:	4803      	ldr	r0, [pc, #12]	@ (8002ff4 <TIM4_IRQHandler+0x14>)
 8002fe6:	f003 feef 	bl	8006dc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  adcTimerTrigger = 1;
 8002fea:	4b03      	ldr	r3, [pc, #12]	@ (8002ff8 <TIM4_IRQHandler+0x18>)
 8002fec:	2201      	movs	r2, #1
 8002fee:	701a      	strb	r2, [r3, #0]
  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
  /* USER CODE END TIM4_IRQn 1 */
}
 8002ff0:	bf00      	nop
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	200001d8 	.word	0x200001d8
 8002ff8:	20000187 	.word	0x20000187

08002ffc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003000:	4802      	ldr	r0, [pc, #8]	@ (800300c <USART1_IRQHandler+0x10>)
 8003002:	f004 fe3f 	bl	8007c84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003006:	bf00      	nop
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	20000220 	.word	0x20000220

08003010 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003018:	f04f 33ff 	mov.w	r3, #4294967295
}
 800301c:	4618      	mov	r0, r3
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	bc80      	pop	{r7}
 8003024:	4770      	bx	lr

08003026 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003026:	b480      	push	{r7}
 8003028:	b083      	sub	sp, #12
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
 800302e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003036:	605a      	str	r2, [r3, #4]
  return 0;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	bc80      	pop	{r7}
 8003042:	4770      	bx	lr

08003044 <_isatty>:

int _isatty(int file)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800304c:	2301      	movs	r3, #1
}
 800304e:	4618      	mov	r0, r3
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	bc80      	pop	{r7}
 8003056:	4770      	bx	lr

08003058 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3714      	adds	r7, #20
 800306a:	46bd      	mov	sp, r7
 800306c:	bc80      	pop	{r7}
 800306e:	4770      	bx	lr

08003070 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003078:	4a14      	ldr	r2, [pc, #80]	@ (80030cc <_sbrk+0x5c>)
 800307a:	4b15      	ldr	r3, [pc, #84]	@ (80030d0 <_sbrk+0x60>)
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003084:	4b13      	ldr	r3, [pc, #76]	@ (80030d4 <_sbrk+0x64>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d102      	bne.n	8003092 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800308c:	4b11      	ldr	r3, [pc, #68]	@ (80030d4 <_sbrk+0x64>)
 800308e:	4a12      	ldr	r2, [pc, #72]	@ (80030d8 <_sbrk+0x68>)
 8003090:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003092:	4b10      	ldr	r3, [pc, #64]	@ (80030d4 <_sbrk+0x64>)
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4413      	add	r3, r2
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	429a      	cmp	r2, r3
 800309e:	d207      	bcs.n	80030b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030a0:	f005 fe66 	bl	8008d70 <__errno>
 80030a4:	4603      	mov	r3, r0
 80030a6:	220c      	movs	r2, #12
 80030a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030aa:	f04f 33ff 	mov.w	r3, #4294967295
 80030ae:	e009      	b.n	80030c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030b0:	4b08      	ldr	r3, [pc, #32]	@ (80030d4 <_sbrk+0x64>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030b6:	4b07      	ldr	r3, [pc, #28]	@ (80030d4 <_sbrk+0x64>)
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4413      	add	r3, r2
 80030be:	4a05      	ldr	r2, [pc, #20]	@ (80030d4 <_sbrk+0x64>)
 80030c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80030c2:	68fb      	ldr	r3, [r7, #12]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3718      	adds	r7, #24
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	20005000 	.word	0x20005000
 80030d0:	00000400 	.word	0x00000400
 80030d4:	2000018c 	.word	0x2000018c
 80030d8:	20000408 	.word	0x20000408

080030dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030e0:	bf00      	nop
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bc80      	pop	{r7}
 80030e6:	4770      	bx	lr

080030e8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b08e      	sub	sp, #56	@ 0x38
 80030ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80030f2:	2200      	movs	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	605a      	str	r2, [r3, #4]
 80030f8:	609a      	str	r2, [r3, #8]
 80030fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030fc:	f107 0320 	add.w	r3, r7, #32
 8003100:	2200      	movs	r2, #0
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003106:	1d3b      	adds	r3, r7, #4
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	605a      	str	r2, [r3, #4]
 800310e:	609a      	str	r2, [r3, #8]
 8003110:	60da      	str	r2, [r3, #12]
 8003112:	611a      	str	r2, [r3, #16]
 8003114:	615a      	str	r2, [r3, #20]
 8003116:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003118:	4b2d      	ldr	r3, [pc, #180]	@ (80031d0 <MX_TIM3_Init+0xe8>)
 800311a:	4a2e      	ldr	r2, [pc, #184]	@ (80031d4 <MX_TIM3_Init+0xec>)
 800311c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 800311e:	4b2c      	ldr	r3, [pc, #176]	@ (80031d0 <MX_TIM3_Init+0xe8>)
 8003120:	2207      	movs	r2, #7
 8003122:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003124:	4b2a      	ldr	r3, [pc, #168]	@ (80031d0 <MX_TIM3_Init+0xe8>)
 8003126:	2200      	movs	r2, #0
 8003128:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000-1;
 800312a:	4b29      	ldr	r3, [pc, #164]	@ (80031d0 <MX_TIM3_Init+0xe8>)
 800312c:	f241 3287 	movw	r2, #4999	@ 0x1387
 8003130:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003132:	4b27      	ldr	r3, [pc, #156]	@ (80031d0 <MX_TIM3_Init+0xe8>)
 8003134:	2200      	movs	r2, #0
 8003136:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003138:	4b25      	ldr	r3, [pc, #148]	@ (80031d0 <MX_TIM3_Init+0xe8>)
 800313a:	2280      	movs	r2, #128	@ 0x80
 800313c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800313e:	4824      	ldr	r0, [pc, #144]	@ (80031d0 <MX_TIM3_Init+0xe8>)
 8003140:	f003 faf2 	bl	8006728 <HAL_TIM_Base_Init>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800314a:	f7ff fed6 	bl	8002efa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800314e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003152:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003154:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003158:	4619      	mov	r1, r3
 800315a:	481d      	ldr	r0, [pc, #116]	@ (80031d0 <MX_TIM3_Init+0xe8>)
 800315c:	f003 ffe6 	bl	800712c <HAL_TIM_ConfigClockSource>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003166:	f7ff fec8 	bl	8002efa <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800316a:	4819      	ldr	r0, [pc, #100]	@ (80031d0 <MX_TIM3_Init+0xe8>)
 800316c:	f003 fb2b 	bl	80067c6 <HAL_TIM_PWM_Init>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003176:	f7ff fec0 	bl	8002efa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800317a:	2300      	movs	r3, #0
 800317c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800317e:	2300      	movs	r3, #0
 8003180:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003182:	f107 0320 	add.w	r3, r7, #32
 8003186:	4619      	mov	r1, r3
 8003188:	4811      	ldr	r0, [pc, #68]	@ (80031d0 <MX_TIM3_Init+0xe8>)
 800318a:	f004 fb73 	bl	8007874 <HAL_TIMEx_MasterConfigSynchronization>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003194:	f7ff feb1 	bl	8002efa <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003198:	2360      	movs	r3, #96	@ 0x60
 800319a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 4500-1;
 800319c:	f241 1393 	movw	r3, #4499	@ 0x1193
 80031a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80031a2:	2300      	movs	r3, #0
 80031a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80031a6:	2300      	movs	r3, #0
 80031a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80031aa:	1d3b      	adds	r3, r7, #4
 80031ac:	2208      	movs	r2, #8
 80031ae:	4619      	mov	r1, r3
 80031b0:	4807      	ldr	r0, [pc, #28]	@ (80031d0 <MX_TIM3_Init+0xe8>)
 80031b2:	f003 fef9 	bl	8006fa8 <HAL_TIM_PWM_ConfigChannel>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80031bc:	f7ff fe9d 	bl	8002efa <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80031c0:	4803      	ldr	r0, [pc, #12]	@ (80031d0 <MX_TIM3_Init+0xe8>)
 80031c2:	f000 f8b7 	bl	8003334 <HAL_TIM_MspPostInit>

}
 80031c6:	bf00      	nop
 80031c8:	3738      	adds	r7, #56	@ 0x38
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	20000190 	.word	0x20000190
 80031d4:	40000400 	.word	0x40000400

080031d8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b08e      	sub	sp, #56	@ 0x38
 80031dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80031e2:	2200      	movs	r2, #0
 80031e4:	601a      	str	r2, [r3, #0]
 80031e6:	605a      	str	r2, [r3, #4]
 80031e8:	609a      	str	r2, [r3, #8]
 80031ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031ec:	f107 0320 	add.w	r3, r7, #32
 80031f0:	2200      	movs	r2, #0
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031f6:	1d3b      	adds	r3, r7, #4
 80031f8:	2200      	movs	r2, #0
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	605a      	str	r2, [r3, #4]
 80031fe:	609a      	str	r2, [r3, #8]
 8003200:	60da      	str	r2, [r3, #12]
 8003202:	611a      	str	r2, [r3, #16]
 8003204:	615a      	str	r2, [r3, #20]
 8003206:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003208:	4b2b      	ldr	r3, [pc, #172]	@ (80032b8 <MX_TIM4_Init+0xe0>)
 800320a:	4a2c      	ldr	r2, [pc, #176]	@ (80032bc <MX_TIM4_Init+0xe4>)
 800320c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8000-1;
 800320e:	4b2a      	ldr	r3, [pc, #168]	@ (80032b8 <MX_TIM4_Init+0xe0>)
 8003210:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8003214:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003216:	4b28      	ldr	r3, [pc, #160]	@ (80032b8 <MX_TIM4_Init+0xe0>)
 8003218:	2200      	movs	r2, #0
 800321a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 500-1;
 800321c:	4b26      	ldr	r3, [pc, #152]	@ (80032b8 <MX_TIM4_Init+0xe0>)
 800321e:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8003222:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003224:	4b24      	ldr	r3, [pc, #144]	@ (80032b8 <MX_TIM4_Init+0xe0>)
 8003226:	2200      	movs	r2, #0
 8003228:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800322a:	4b23      	ldr	r3, [pc, #140]	@ (80032b8 <MX_TIM4_Init+0xe0>)
 800322c:	2200      	movs	r2, #0
 800322e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003230:	4821      	ldr	r0, [pc, #132]	@ (80032b8 <MX_TIM4_Init+0xe0>)
 8003232:	f003 fa79 	bl	8006728 <HAL_TIM_Base_Init>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800323c:	f7ff fe5d 	bl	8002efa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003240:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003244:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003246:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800324a:	4619      	mov	r1, r3
 800324c:	481a      	ldr	r0, [pc, #104]	@ (80032b8 <MX_TIM4_Init+0xe0>)
 800324e:	f003 ff6d 	bl	800712c <HAL_TIM_ConfigClockSource>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8003258:	f7ff fe4f 	bl	8002efa <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800325c:	4816      	ldr	r0, [pc, #88]	@ (80032b8 <MX_TIM4_Init+0xe0>)
 800325e:	f003 fab2 	bl	80067c6 <HAL_TIM_PWM_Init>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8003268:	f7ff fe47 	bl	8002efa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800326c:	2320      	movs	r3, #32
 800326e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003270:	2300      	movs	r3, #0
 8003272:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003274:	f107 0320 	add.w	r3, r7, #32
 8003278:	4619      	mov	r1, r3
 800327a:	480f      	ldr	r0, [pc, #60]	@ (80032b8 <MX_TIM4_Init+0xe0>)
 800327c:	f004 fafa 	bl	8007874 <HAL_TIMEx_MasterConfigSynchronization>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8003286:	f7ff fe38 	bl	8002efa <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800328a:	2360      	movs	r3, #96	@ 0x60
 800328c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 250-1;
 800328e:	23f9      	movs	r3, #249	@ 0xf9
 8003290:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003292:	2300      	movs	r3, #0
 8003294:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003296:	2300      	movs	r3, #0
 8003298:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800329a:	1d3b      	adds	r3, r7, #4
 800329c:	220c      	movs	r2, #12
 800329e:	4619      	mov	r1, r3
 80032a0:	4805      	ldr	r0, [pc, #20]	@ (80032b8 <MX_TIM4_Init+0xe0>)
 80032a2:	f003 fe81 	bl	8006fa8 <HAL_TIM_PWM_ConfigChannel>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80032ac:	f7ff fe25 	bl	8002efa <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80032b0:	bf00      	nop
 80032b2:	3738      	adds	r7, #56	@ 0x38
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	200001d8 	.word	0x200001d8
 80032bc:	40000800 	.word	0x40000800

080032c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a16      	ldr	r2, [pc, #88]	@ (8003328 <HAL_TIM_Base_MspInit+0x68>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d10c      	bne.n	80032ec <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032d2:	4b16      	ldr	r3, [pc, #88]	@ (800332c <HAL_TIM_Base_MspInit+0x6c>)
 80032d4:	69db      	ldr	r3, [r3, #28]
 80032d6:	4a15      	ldr	r2, [pc, #84]	@ (800332c <HAL_TIM_Base_MspInit+0x6c>)
 80032d8:	f043 0302 	orr.w	r3, r3, #2
 80032dc:	61d3      	str	r3, [r2, #28]
 80032de:	4b13      	ldr	r3, [pc, #76]	@ (800332c <HAL_TIM_Base_MspInit+0x6c>)
 80032e0:	69db      	ldr	r3, [r3, #28]
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80032ea:	e018      	b.n	800331e <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM4)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a0f      	ldr	r2, [pc, #60]	@ (8003330 <HAL_TIM_Base_MspInit+0x70>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d113      	bne.n	800331e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80032f6:	4b0d      	ldr	r3, [pc, #52]	@ (800332c <HAL_TIM_Base_MspInit+0x6c>)
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	4a0c      	ldr	r2, [pc, #48]	@ (800332c <HAL_TIM_Base_MspInit+0x6c>)
 80032fc:	f043 0304 	orr.w	r3, r3, #4
 8003300:	61d3      	str	r3, [r2, #28]
 8003302:	4b0a      	ldr	r3, [pc, #40]	@ (800332c <HAL_TIM_Base_MspInit+0x6c>)
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	f003 0304 	and.w	r3, r3, #4
 800330a:	60bb      	str	r3, [r7, #8]
 800330c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800330e:	2200      	movs	r2, #0
 8003310:	2100      	movs	r1, #0
 8003312:	201e      	movs	r0, #30
 8003314:	f000 ffe3 	bl	80042de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003318:	201e      	movs	r0, #30
 800331a:	f000 fffc 	bl	8004316 <HAL_NVIC_EnableIRQ>
}
 800331e:	bf00      	nop
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	40000400 	.word	0x40000400
 800332c:	40021000 	.word	0x40021000
 8003330:	40000800 	.word	0x40000800

08003334 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b088      	sub	sp, #32
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800333c:	f107 0310 	add.w	r3, r7, #16
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]
 8003344:	605a      	str	r2, [r3, #4]
 8003346:	609a      	str	r2, [r3, #8]
 8003348:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a0f      	ldr	r2, [pc, #60]	@ (800338c <HAL_TIM_MspPostInit+0x58>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d117      	bne.n	8003384 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003354:	4b0e      	ldr	r3, [pc, #56]	@ (8003390 <HAL_TIM_MspPostInit+0x5c>)
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	4a0d      	ldr	r2, [pc, #52]	@ (8003390 <HAL_TIM_MspPostInit+0x5c>)
 800335a:	f043 0308 	orr.w	r3, r3, #8
 800335e:	6193      	str	r3, [r2, #24]
 8003360:	4b0b      	ldr	r3, [pc, #44]	@ (8003390 <HAL_TIM_MspPostInit+0x5c>)
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	f003 0308 	and.w	r3, r3, #8
 8003368:	60fb      	str	r3, [r7, #12]
 800336a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_PWM_Pin;
 800336c:	2301      	movs	r3, #1
 800336e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003370:	2302      	movs	r3, #2
 8003372:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003374:	2302      	movs	r3, #2
 8003376:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOTOR_PWM_GPIO_Port, &GPIO_InitStruct);
 8003378:	f107 0310 	add.w	r3, r7, #16
 800337c:	4619      	mov	r1, r3
 800337e:	4805      	ldr	r0, [pc, #20]	@ (8003394 <HAL_TIM_MspPostInit+0x60>)
 8003380:	f001 fa86 	bl	8004890 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003384:	bf00      	nop
 8003386:	3720      	adds	r7, #32
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40000400 	.word	0x40000400
 8003390:	40021000 	.word	0x40021000
 8003394:	40010c00 	.word	0x40010c00

08003398 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800339c:	4b11      	ldr	r3, [pc, #68]	@ (80033e4 <MX_USART1_UART_Init+0x4c>)
 800339e:	4a12      	ldr	r2, [pc, #72]	@ (80033e8 <MX_USART1_UART_Init+0x50>)
 80033a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80033a2:	4b10      	ldr	r3, [pc, #64]	@ (80033e4 <MX_USART1_UART_Init+0x4c>)
 80033a4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80033a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80033aa:	4b0e      	ldr	r3, [pc, #56]	@ (80033e4 <MX_USART1_UART_Init+0x4c>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80033b0:	4b0c      	ldr	r3, [pc, #48]	@ (80033e4 <MX_USART1_UART_Init+0x4c>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80033b6:	4b0b      	ldr	r3, [pc, #44]	@ (80033e4 <MX_USART1_UART_Init+0x4c>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80033bc:	4b09      	ldr	r3, [pc, #36]	@ (80033e4 <MX_USART1_UART_Init+0x4c>)
 80033be:	220c      	movs	r2, #12
 80033c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033c2:	4b08      	ldr	r3, [pc, #32]	@ (80033e4 <MX_USART1_UART_Init+0x4c>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80033c8:	4b06      	ldr	r3, [pc, #24]	@ (80033e4 <MX_USART1_UART_Init+0x4c>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80033ce:	4805      	ldr	r0, [pc, #20]	@ (80033e4 <MX_USART1_UART_Init+0x4c>)
 80033d0:	f004 fac0 	bl	8007954 <HAL_UART_Init>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80033da:	f7ff fd8e 	bl	8002efa <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80033de:	bf00      	nop
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	20000220 	.word	0x20000220
 80033e8:	40013800 	.word	0x40013800

080033ec <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80033f0:	4b11      	ldr	r3, [pc, #68]	@ (8003438 <MX_USART3_UART_Init+0x4c>)
 80033f2:	4a12      	ldr	r2, [pc, #72]	@ (800343c <MX_USART3_UART_Init+0x50>)
 80033f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80033f6:	4b10      	ldr	r3, [pc, #64]	@ (8003438 <MX_USART3_UART_Init+0x4c>)
 80033f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80033fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80033fe:	4b0e      	ldr	r3, [pc, #56]	@ (8003438 <MX_USART3_UART_Init+0x4c>)
 8003400:	2200      	movs	r2, #0
 8003402:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003404:	4b0c      	ldr	r3, [pc, #48]	@ (8003438 <MX_USART3_UART_Init+0x4c>)
 8003406:	2200      	movs	r2, #0
 8003408:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800340a:	4b0b      	ldr	r3, [pc, #44]	@ (8003438 <MX_USART3_UART_Init+0x4c>)
 800340c:	2200      	movs	r2, #0
 800340e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003410:	4b09      	ldr	r3, [pc, #36]	@ (8003438 <MX_USART3_UART_Init+0x4c>)
 8003412:	220c      	movs	r2, #12
 8003414:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003416:	4b08      	ldr	r3, [pc, #32]	@ (8003438 <MX_USART3_UART_Init+0x4c>)
 8003418:	2200      	movs	r2, #0
 800341a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800341c:	4b06      	ldr	r3, [pc, #24]	@ (8003438 <MX_USART3_UART_Init+0x4c>)
 800341e:	2200      	movs	r2, #0
 8003420:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003422:	4805      	ldr	r0, [pc, #20]	@ (8003438 <MX_USART3_UART_Init+0x4c>)
 8003424:	f004 fa96 	bl	8007954 <HAL_UART_Init>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800342e:	f7ff fd64 	bl	8002efa <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003432:	bf00      	nop
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	20000268 	.word	0x20000268
 800343c:	40004800 	.word	0x40004800

08003440 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b08a      	sub	sp, #40	@ 0x28
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003448:	f107 0318 	add.w	r3, r7, #24
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	605a      	str	r2, [r3, #4]
 8003452:	609a      	str	r2, [r3, #8]
 8003454:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a3c      	ldr	r2, [pc, #240]	@ (800354c <HAL_UART_MspInit+0x10c>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d13a      	bne.n	80034d6 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003460:	4b3b      	ldr	r3, [pc, #236]	@ (8003550 <HAL_UART_MspInit+0x110>)
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	4a3a      	ldr	r2, [pc, #232]	@ (8003550 <HAL_UART_MspInit+0x110>)
 8003466:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800346a:	6193      	str	r3, [r2, #24]
 800346c:	4b38      	ldr	r3, [pc, #224]	@ (8003550 <HAL_UART_MspInit+0x110>)
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003474:	617b      	str	r3, [r7, #20]
 8003476:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003478:	4b35      	ldr	r3, [pc, #212]	@ (8003550 <HAL_UART_MspInit+0x110>)
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	4a34      	ldr	r2, [pc, #208]	@ (8003550 <HAL_UART_MspInit+0x110>)
 800347e:	f043 0304 	orr.w	r3, r3, #4
 8003482:	6193      	str	r3, [r2, #24]
 8003484:	4b32      	ldr	r3, [pc, #200]	@ (8003550 <HAL_UART_MspInit+0x110>)
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	f003 0304 	and.w	r3, r3, #4
 800348c:	613b      	str	r3, [r7, #16]
 800348e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003490:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003494:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003496:	2302      	movs	r3, #2
 8003498:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800349a:	2303      	movs	r3, #3
 800349c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800349e:	f107 0318 	add.w	r3, r7, #24
 80034a2:	4619      	mov	r1, r3
 80034a4:	482b      	ldr	r0, [pc, #172]	@ (8003554 <HAL_UART_MspInit+0x114>)
 80034a6:	f001 f9f3 	bl	8004890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80034aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80034ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034b0:	2300      	movs	r3, #0
 80034b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b4:	2300      	movs	r3, #0
 80034b6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034b8:	f107 0318 	add.w	r3, r7, #24
 80034bc:	4619      	mov	r1, r3
 80034be:	4825      	ldr	r0, [pc, #148]	@ (8003554 <HAL_UART_MspInit+0x114>)
 80034c0:	f001 f9e6 	bl	8004890 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80034c4:	2200      	movs	r2, #0
 80034c6:	2101      	movs	r1, #1
 80034c8:	2025      	movs	r0, #37	@ 0x25
 80034ca:	f000 ff08 	bl	80042de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80034ce:	2025      	movs	r0, #37	@ 0x25
 80034d0:	f000 ff21 	bl	8004316 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80034d4:	e036      	b.n	8003544 <HAL_UART_MspInit+0x104>
  else if(uartHandle->Instance==USART3)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a1f      	ldr	r2, [pc, #124]	@ (8003558 <HAL_UART_MspInit+0x118>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d131      	bne.n	8003544 <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 80034e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003550 <HAL_UART_MspInit+0x110>)
 80034e2:	69db      	ldr	r3, [r3, #28]
 80034e4:	4a1a      	ldr	r2, [pc, #104]	@ (8003550 <HAL_UART_MspInit+0x110>)
 80034e6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034ea:	61d3      	str	r3, [r2, #28]
 80034ec:	4b18      	ldr	r3, [pc, #96]	@ (8003550 <HAL_UART_MspInit+0x110>)
 80034ee:	69db      	ldr	r3, [r3, #28]
 80034f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034f4:	60fb      	str	r3, [r7, #12]
 80034f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034f8:	4b15      	ldr	r3, [pc, #84]	@ (8003550 <HAL_UART_MspInit+0x110>)
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	4a14      	ldr	r2, [pc, #80]	@ (8003550 <HAL_UART_MspInit+0x110>)
 80034fe:	f043 0308 	orr.w	r3, r3, #8
 8003502:	6193      	str	r3, [r2, #24]
 8003504:	4b12      	ldr	r3, [pc, #72]	@ (8003550 <HAL_UART_MspInit+0x110>)
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	f003 0308 	and.w	r3, r3, #8
 800350c:	60bb      	str	r3, [r7, #8]
 800350e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003510:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003516:	2302      	movs	r3, #2
 8003518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800351a:	2303      	movs	r3, #3
 800351c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800351e:	f107 0318 	add.w	r3, r7, #24
 8003522:	4619      	mov	r1, r3
 8003524:	480d      	ldr	r0, [pc, #52]	@ (800355c <HAL_UART_MspInit+0x11c>)
 8003526:	f001 f9b3 	bl	8004890 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800352a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800352e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003530:	2300      	movs	r3, #0
 8003532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003534:	2300      	movs	r3, #0
 8003536:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003538:	f107 0318 	add.w	r3, r7, #24
 800353c:	4619      	mov	r1, r3
 800353e:	4807      	ldr	r0, [pc, #28]	@ (800355c <HAL_UART_MspInit+0x11c>)
 8003540:	f001 f9a6 	bl	8004890 <HAL_GPIO_Init>
}
 8003544:	bf00      	nop
 8003546:	3728      	adds	r7, #40	@ 0x28
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	40013800 	.word	0x40013800
 8003550:	40021000 	.word	0x40021000
 8003554:	40010800 	.word	0x40010800
 8003558:	40004800 	.word	0x40004800
 800355c:	40010c00 	.word	0x40010c00

08003560 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003560:	f7ff fdbc 	bl	80030dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003564:	480b      	ldr	r0, [pc, #44]	@ (8003594 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003566:	490c      	ldr	r1, [pc, #48]	@ (8003598 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003568:	4a0c      	ldr	r2, [pc, #48]	@ (800359c <LoopFillZerobss+0x16>)
  movs r3, #0
 800356a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800356c:	e002      	b.n	8003574 <LoopCopyDataInit>

0800356e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800356e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003570:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003572:	3304      	adds	r3, #4

08003574 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003574:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003576:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003578:	d3f9      	bcc.n	800356e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800357a:	4a09      	ldr	r2, [pc, #36]	@ (80035a0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800357c:	4c09      	ldr	r4, [pc, #36]	@ (80035a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800357e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003580:	e001      	b.n	8003586 <LoopFillZerobss>

08003582 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003582:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003584:	3204      	adds	r2, #4

08003586 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003586:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003588:	d3fb      	bcc.n	8003582 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800358a:	f005 fbf7 	bl	8008d7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800358e:	f7fd fded 	bl	800116c <main>
  bx lr
 8003592:	4770      	bx	lr
  ldr r0, =_sdata
 8003594:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003598:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800359c:	0800a8b0 	.word	0x0800a8b0
  ldr r2, =_sbss
 80035a0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80035a4:	20000404 	.word	0x20000404

080035a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80035a8:	e7fe      	b.n	80035a8 <ADC1_2_IRQHandler>
	...

080035ac <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80035b4:	4a11      	ldr	r2, [pc, #68]	@ (80035fc <RetargetInit+0x50>)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80035ba:	4b11      	ldr	r3, [pc, #68]	@ (8003600 <RetargetInit+0x54>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6898      	ldr	r0, [r3, #8]
 80035c0:	2300      	movs	r3, #0
 80035c2:	2202      	movs	r2, #2
 80035c4:	2100      	movs	r1, #0
 80035c6:	f005 f9f9 	bl	80089bc <setvbuf>
  setvbuf(stdin, NULL, _IONBF, 0);
 80035ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003600 <RetargetInit+0x54>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	6858      	ldr	r0, [r3, #4]
 80035d0:	2300      	movs	r3, #0
 80035d2:	2202      	movs	r2, #2
 80035d4:	2100      	movs	r1, #0
 80035d6:	f005 f9f1 	bl	80089bc <setvbuf>
  __HAL_UART_CLEAR_OREFLAG(gHuart);
 80035da:	2300      	movs	r3, #0
 80035dc:	60fb      	str	r3, [r7, #12]
 80035de:	4b07      	ldr	r3, [pc, #28]	@ (80035fc <RetargetInit+0x50>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	60fb      	str	r3, [r7, #12]
 80035e8:	4b04      	ldr	r3, [pc, #16]	@ (80035fc <RetargetInit+0x50>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	60fb      	str	r3, [r7, #12]
 80035f2:	68fb      	ldr	r3, [r7, #12]

}
 80035f4:	bf00      	nop
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	200002b0 	.word	0x200002b0
 8003600:	20000020 	.word	0x20000020

08003604 <_write>:


int _write(int fd, char* ptr, int len) {
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d002      	beq.n	800361c <_write+0x18>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2b02      	cmp	r3, #2
 800361a:	d111      	bne.n	8003640 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 800361c:	4b0e      	ldr	r3, [pc, #56]	@ (8003658 <_write+0x54>)
 800361e:	6818      	ldr	r0, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	b29a      	uxth	r2, r3
 8003624:	f04f 33ff 	mov.w	r3, #4294967295
 8003628:	68b9      	ldr	r1, [r7, #8]
 800362a:	f004 f9e3 	bl	80079f4 <HAL_UART_Transmit>
 800362e:	4603      	mov	r3, r0
 8003630:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8003632:	7dfb      	ldrb	r3, [r7, #23]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d101      	bne.n	800363c <_write+0x38>
      return len;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	e008      	b.n	800364e <_write+0x4a>
    else
      return EIO;
 800363c:	2305      	movs	r3, #5
 800363e:	e006      	b.n	800364e <_write+0x4a>
  }
  errno = EBADF;
 8003640:	f005 fb96 	bl	8008d70 <__errno>
 8003644:	4603      	mov	r3, r0
 8003646:	2209      	movs	r2, #9
 8003648:	601a      	str	r2, [r3, #0]
  return -1;
 800364a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800364e:	4618      	mov	r0, r3
 8003650:	3718      	adds	r7, #24
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	200002b0 	.word	0x200002b0

0800365c <_read>:


int _read(int fd, char* ptr, int len) {
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d110      	bne.n	8003690 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800366e:	4b0e      	ldr	r3, [pc, #56]	@ (80036a8 <_read+0x4c>)
 8003670:	6818      	ldr	r0, [r3, #0]
 8003672:	f04f 33ff 	mov.w	r3, #4294967295
 8003676:	2201      	movs	r2, #1
 8003678:	68b9      	ldr	r1, [r7, #8]
 800367a:	f004 fa46 	bl	8007b0a <HAL_UART_Receive>
 800367e:	4603      	mov	r3, r0
 8003680:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8003682:	7dfb      	ldrb	r3, [r7, #23]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d101      	bne.n	800368c <_read+0x30>
      return 1;
 8003688:	2301      	movs	r3, #1
 800368a:	e008      	b.n	800369e <_read+0x42>
    else
      return EIO;
 800368c:	2305      	movs	r3, #5
 800368e:	e006      	b.n	800369e <_read+0x42>
  }
  errno = EBADF;
 8003690:	f005 fb6e 	bl	8008d70 <__errno>
 8003694:	4603      	mov	r3, r0
 8003696:	2209      	movs	r2, #9
 8003698:	601a      	str	r2, [r3, #0]
  return -1;
 800369a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3718      	adds	r7, #24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	200002b0 	.word	0x200002b0

080036ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036b0:	4b08      	ldr	r3, [pc, #32]	@ (80036d4 <HAL_Init+0x28>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a07      	ldr	r2, [pc, #28]	@ (80036d4 <HAL_Init+0x28>)
 80036b6:	f043 0310 	orr.w	r3, r3, #16
 80036ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036bc:	2003      	movs	r0, #3
 80036be:	f000 fe03 	bl	80042c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036c2:	2000      	movs	r0, #0
 80036c4:	f000 f808 	bl	80036d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036c8:	f7ff fc1e 	bl	8002f08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	40022000 	.word	0x40022000

080036d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036e0:	4b12      	ldr	r3, [pc, #72]	@ (800372c <HAL_InitTick+0x54>)
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	4b12      	ldr	r3, [pc, #72]	@ (8003730 <HAL_InitTick+0x58>)
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	4619      	mov	r1, r3
 80036ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80036ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80036f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f6:	4618      	mov	r0, r3
 80036f8:	f000 fe1b 	bl	8004332 <HAL_SYSTICK_Config>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e00e      	b.n	8003724 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2b0f      	cmp	r3, #15
 800370a:	d80a      	bhi.n	8003722 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800370c:	2200      	movs	r2, #0
 800370e:	6879      	ldr	r1, [r7, #4]
 8003710:	f04f 30ff 	mov.w	r0, #4294967295
 8003714:	f000 fde3 	bl	80042de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003718:	4a06      	ldr	r2, [pc, #24]	@ (8003734 <HAL_InitTick+0x5c>)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800371e:	2300      	movs	r3, #0
 8003720:	e000      	b.n	8003724 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
}
 8003724:	4618      	mov	r0, r3
 8003726:	3708      	adds	r7, #8
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	20000008 	.word	0x20000008
 8003730:	20000010 	.word	0x20000010
 8003734:	2000000c 	.word	0x2000000c

08003738 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800373c:	4b05      	ldr	r3, [pc, #20]	@ (8003754 <HAL_IncTick+0x1c>)
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	461a      	mov	r2, r3
 8003742:	4b05      	ldr	r3, [pc, #20]	@ (8003758 <HAL_IncTick+0x20>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4413      	add	r3, r2
 8003748:	4a03      	ldr	r2, [pc, #12]	@ (8003758 <HAL_IncTick+0x20>)
 800374a:	6013      	str	r3, [r2, #0]
}
 800374c:	bf00      	nop
 800374e:	46bd      	mov	sp, r7
 8003750:	bc80      	pop	{r7}
 8003752:	4770      	bx	lr
 8003754:	20000010 	.word	0x20000010
 8003758:	200002b4 	.word	0x200002b4

0800375c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
  return uwTick;
 8003760:	4b02      	ldr	r3, [pc, #8]	@ (800376c <HAL_GetTick+0x10>)
 8003762:	681b      	ldr	r3, [r3, #0]
}
 8003764:	4618      	mov	r0, r3
 8003766:	46bd      	mov	sp, r7
 8003768:	bc80      	pop	{r7}
 800376a:	4770      	bx	lr
 800376c:	200002b4 	.word	0x200002b4

08003770 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003778:	f7ff fff0 	bl	800375c <HAL_GetTick>
 800377c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003788:	d005      	beq.n	8003796 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800378a:	4b0a      	ldr	r3, [pc, #40]	@ (80037b4 <HAL_Delay+0x44>)
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	461a      	mov	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	4413      	add	r3, r2
 8003794:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003796:	bf00      	nop
 8003798:	f7ff ffe0 	bl	800375c <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d8f7      	bhi.n	8003798 <HAL_Delay+0x28>
  {
  }
}
 80037a8:	bf00      	nop
 80037aa:	bf00      	nop
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	20000010 	.word	0x20000010

080037b8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037c0:	2300      	movs	r3, #0
 80037c2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80037c4:	2300      	movs	r3, #0
 80037c6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80037c8:	2300      	movs	r3, #0
 80037ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80037cc:	2300      	movs	r3, #0
 80037ce:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e0be      	b.n	8003958 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d109      	bne.n	80037fc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7fd fb2c 	bl	8000e54 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 fb41 	bl	8003e84 <ADC_ConversionStop_Disable>
 8003802:	4603      	mov	r3, r0
 8003804:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800380a:	f003 0310 	and.w	r3, r3, #16
 800380e:	2b00      	cmp	r3, #0
 8003810:	f040 8099 	bne.w	8003946 <HAL_ADC_Init+0x18e>
 8003814:	7dfb      	ldrb	r3, [r7, #23]
 8003816:	2b00      	cmp	r3, #0
 8003818:	f040 8095 	bne.w	8003946 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003820:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003824:	f023 0302 	bic.w	r3, r3, #2
 8003828:	f043 0202 	orr.w	r2, r3, #2
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003838:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	7b1b      	ldrb	r3, [r3, #12]
 800383e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003840:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003842:	68ba      	ldr	r2, [r7, #8]
 8003844:	4313      	orrs	r3, r2
 8003846:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003850:	d003      	beq.n	800385a <HAL_ADC_Init+0xa2>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d102      	bne.n	8003860 <HAL_ADC_Init+0xa8>
 800385a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800385e:	e000      	b.n	8003862 <HAL_ADC_Init+0xaa>
 8003860:	2300      	movs	r3, #0
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	4313      	orrs	r3, r2
 8003866:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	7d1b      	ldrb	r3, [r3, #20]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d119      	bne.n	80038a4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	7b1b      	ldrb	r3, [r3, #12]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d109      	bne.n	800388c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	3b01      	subs	r3, #1
 800387e:	035a      	lsls	r2, r3, #13
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	4313      	orrs	r3, r2
 8003884:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003888:	613b      	str	r3, [r7, #16]
 800388a:	e00b      	b.n	80038a4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003890:	f043 0220 	orr.w	r2, r3, #32
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800389c:	f043 0201 	orr.w	r2, r3, #1
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	430a      	orrs	r2, r1
 80038b6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689a      	ldr	r2, [r3, #8]
 80038be:	4b28      	ldr	r3, [pc, #160]	@ (8003960 <HAL_ADC_Init+0x1a8>)
 80038c0:	4013      	ands	r3, r2
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6812      	ldr	r2, [r2, #0]
 80038c6:	68b9      	ldr	r1, [r7, #8]
 80038c8:	430b      	orrs	r3, r1
 80038ca:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038d4:	d003      	beq.n	80038de <HAL_ADC_Init+0x126>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d104      	bne.n	80038e8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	3b01      	subs	r3, #1
 80038e4:	051b      	lsls	r3, r3, #20
 80038e6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ee:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689a      	ldr	r2, [r3, #8]
 8003902:	4b18      	ldr	r3, [pc, #96]	@ (8003964 <HAL_ADC_Init+0x1ac>)
 8003904:	4013      	ands	r3, r2
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	429a      	cmp	r2, r3
 800390a:	d10b      	bne.n	8003924 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003916:	f023 0303 	bic.w	r3, r3, #3
 800391a:	f043 0201 	orr.w	r2, r3, #1
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003922:	e018      	b.n	8003956 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003928:	f023 0312 	bic.w	r3, r3, #18
 800392c:	f043 0210 	orr.w	r2, r3, #16
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003938:	f043 0201 	orr.w	r2, r3, #1
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003944:	e007      	b.n	8003956 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800394a:	f043 0210 	orr.w	r2, r3, #16
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003956:	7dfb      	ldrb	r3, [r7, #23]
}
 8003958:	4618      	mov	r0, r3
 800395a:	3718      	adds	r7, #24
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	ffe1f7fd 	.word	0xffe1f7fd
 8003964:	ff1f0efe 	.word	0xff1f0efe

08003968 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003974:	2300      	movs	r3, #0
 8003976:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a64      	ldr	r2, [pc, #400]	@ (8003b10 <HAL_ADC_Start_DMA+0x1a8>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d004      	beq.n	800398c <HAL_ADC_Start_DMA+0x24>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a63      	ldr	r2, [pc, #396]	@ (8003b14 <HAL_ADC_Start_DMA+0x1ac>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d106      	bne.n	800399a <HAL_ADC_Start_DMA+0x32>
 800398c:	4b60      	ldr	r3, [pc, #384]	@ (8003b10 <HAL_ADC_Start_DMA+0x1a8>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8003994:	2b00      	cmp	r3, #0
 8003996:	f040 80b3 	bne.w	8003b00 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d101      	bne.n	80039a8 <HAL_ADC_Start_DMA+0x40>
 80039a4:	2302      	movs	r3, #2
 80039a6:	e0ae      	b.n	8003b06 <HAL_ADC_Start_DMA+0x19e>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f000 fa0d 	bl	8003dd0 <ADC_Enable>
 80039b6:	4603      	mov	r3, r0
 80039b8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80039ba:	7dfb      	ldrb	r3, [r7, #23]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f040 809a 	bne.w	8003af6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80039ca:	f023 0301 	bic.w	r3, r3, #1
 80039ce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a4e      	ldr	r2, [pc, #312]	@ (8003b14 <HAL_ADC_Start_DMA+0x1ac>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d105      	bne.n	80039ec <HAL_ADC_Start_DMA+0x84>
 80039e0:	4b4b      	ldr	r3, [pc, #300]	@ (8003b10 <HAL_ADC_Start_DMA+0x1a8>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d115      	bne.n	8003a18 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039f0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d026      	beq.n	8003a54 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a0a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003a0e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003a16:	e01d      	b.n	8003a54 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a1c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a39      	ldr	r2, [pc, #228]	@ (8003b10 <HAL_ADC_Start_DMA+0x1a8>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d004      	beq.n	8003a38 <HAL_ADC_Start_DMA+0xd0>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a38      	ldr	r2, [pc, #224]	@ (8003b14 <HAL_ADC_Start_DMA+0x1ac>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d10d      	bne.n	8003a54 <HAL_ADC_Start_DMA+0xec>
 8003a38:	4b35      	ldr	r3, [pc, #212]	@ (8003b10 <HAL_ADC_Start_DMA+0x1a8>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d007      	beq.n	8003a54 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a48:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003a4c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d006      	beq.n	8003a6e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a64:	f023 0206 	bic.w	r2, r3, #6
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003a6c:	e002      	b.n	8003a74 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	4a25      	ldr	r2, [pc, #148]	@ (8003b18 <HAL_ADC_Start_DMA+0x1b0>)
 8003a82:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6a1b      	ldr	r3, [r3, #32]
 8003a88:	4a24      	ldr	r2, [pc, #144]	@ (8003b1c <HAL_ADC_Start_DMA+0x1b4>)
 8003a8a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	4a23      	ldr	r2, [pc, #140]	@ (8003b20 <HAL_ADC_Start_DMA+0x1b8>)
 8003a92:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f06f 0202 	mvn.w	r2, #2
 8003a9c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689a      	ldr	r2, [r3, #8]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003aac:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6a18      	ldr	r0, [r3, #32]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	334c      	adds	r3, #76	@ 0x4c
 8003ab8:	4619      	mov	r1, r3
 8003aba:	68ba      	ldr	r2, [r7, #8]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f000 fc9f 	bl	8004400 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003acc:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003ad0:	d108      	bne.n	8003ae4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	689a      	ldr	r2, [r3, #8]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8003ae0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003ae2:	e00f      	b.n	8003b04 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	689a      	ldr	r2, [r3, #8]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003af2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003af4:	e006      	b.n	8003b04 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8003afe:	e001      	b.n	8003b04 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003b04:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3718      	adds	r7, #24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	40012400 	.word	0x40012400
 8003b14:	40012800 	.word	0x40012800
 8003b18:	08003f07 	.word	0x08003f07
 8003b1c:	08003f83 	.word	0x08003f83
 8003b20:	08003f9f 	.word	0x08003f9f

08003b24 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d101      	bne.n	8003b3e <HAL_ADC_Stop_DMA+0x1a>
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	e03a      	b.n	8003bb4 <HAL_ADC_Stop_DMA+0x90>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f99c 	bl	8003e84 <ADC_ConversionStop_Disable>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003b50:	7bfb      	ldrb	r3, [r7, #15]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d129      	bne.n	8003baa <HAL_ADC_Stop_DMA+0x86>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b64:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d11a      	bne.n	8003baa <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a1b      	ldr	r3, [r3, #32]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f000 fca1 	bl	80044c0 <HAL_DMA_Abort>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8003b82:	7bfb      	ldrb	r3, [r7, #15]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d10a      	bne.n	8003b9e <HAL_ADC_Stop_DMA+0x7a>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b8c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003b90:	f023 0301 	bic.w	r3, r3, #1
 8003b94:	f043 0201 	orr.w	r2, r3, #1
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b9c:	e005      	b.n	8003baa <HAL_ADC_Stop_DMA+0x86>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ba2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8003bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bc80      	pop	{r7}
 8003bcc:	4770      	bx	lr

08003bce <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b083      	sub	sp, #12
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003bd6:	bf00      	nop
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bc80      	pop	{r7}
 8003bde:	4770      	bx	lr

08003be0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bea:	2300      	movs	r3, #0
 8003bec:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d101      	bne.n	8003c00 <HAL_ADC_ConfigChannel+0x20>
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	e0dc      	b.n	8003dba <HAL_ADC_ConfigChannel+0x1da>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	2b06      	cmp	r3, #6
 8003c0e:	d81c      	bhi.n	8003c4a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	685a      	ldr	r2, [r3, #4]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	4413      	add	r3, r2
 8003c20:	3b05      	subs	r3, #5
 8003c22:	221f      	movs	r2, #31
 8003c24:	fa02 f303 	lsl.w	r3, r2, r3
 8003c28:	43db      	mvns	r3, r3
 8003c2a:	4019      	ands	r1, r3
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	6818      	ldr	r0, [r3, #0]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	4613      	mov	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	4413      	add	r3, r2
 8003c3a:	3b05      	subs	r3, #5
 8003c3c:	fa00 f203 	lsl.w	r2, r0, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	635a      	str	r2, [r3, #52]	@ 0x34
 8003c48:	e03c      	b.n	8003cc4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	2b0c      	cmp	r3, #12
 8003c50:	d81c      	bhi.n	8003c8c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	4413      	add	r3, r2
 8003c62:	3b23      	subs	r3, #35	@ 0x23
 8003c64:	221f      	movs	r2, #31
 8003c66:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6a:	43db      	mvns	r3, r3
 8003c6c:	4019      	ands	r1, r3
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	6818      	ldr	r0, [r3, #0]
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	4613      	mov	r3, r2
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	4413      	add	r3, r2
 8003c7c:	3b23      	subs	r3, #35	@ 0x23
 8003c7e:	fa00 f203 	lsl.w	r2, r0, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	430a      	orrs	r2, r1
 8003c88:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c8a:	e01b      	b.n	8003cc4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	4613      	mov	r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	4413      	add	r3, r2
 8003c9c:	3b41      	subs	r3, #65	@ 0x41
 8003c9e:	221f      	movs	r2, #31
 8003ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca4:	43db      	mvns	r3, r3
 8003ca6:	4019      	ands	r1, r3
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	6818      	ldr	r0, [r3, #0]
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685a      	ldr	r2, [r3, #4]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	3b41      	subs	r3, #65	@ 0x41
 8003cb8:	fa00 f203 	lsl.w	r2, r0, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2b09      	cmp	r3, #9
 8003cca:	d91c      	bls.n	8003d06 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68d9      	ldr	r1, [r3, #12]
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	4413      	add	r3, r2
 8003cdc:	3b1e      	subs	r3, #30
 8003cde:	2207      	movs	r2, #7
 8003ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce4:	43db      	mvns	r3, r3
 8003ce6:	4019      	ands	r1, r3
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	6898      	ldr	r0, [r3, #8]
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	4413      	add	r3, r2
 8003cf6:	3b1e      	subs	r3, #30
 8003cf8:	fa00 f203 	lsl.w	r2, r0, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	430a      	orrs	r2, r1
 8003d02:	60da      	str	r2, [r3, #12]
 8003d04:	e019      	b.n	8003d3a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	6919      	ldr	r1, [r3, #16]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	4613      	mov	r3, r2
 8003d12:	005b      	lsls	r3, r3, #1
 8003d14:	4413      	add	r3, r2
 8003d16:	2207      	movs	r2, #7
 8003d18:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1c:	43db      	mvns	r3, r3
 8003d1e:	4019      	ands	r1, r3
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	6898      	ldr	r0, [r3, #8]
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	4413      	add	r3, r2
 8003d2e:	fa00 f203 	lsl.w	r2, r0, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	430a      	orrs	r2, r1
 8003d38:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2b10      	cmp	r3, #16
 8003d40:	d003      	beq.n	8003d4a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003d46:	2b11      	cmp	r3, #17
 8003d48:	d132      	bne.n	8003db0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a1d      	ldr	r2, [pc, #116]	@ (8003dc4 <HAL_ADC_ConfigChannel+0x1e4>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d125      	bne.n	8003da0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d126      	bne.n	8003db0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	689a      	ldr	r2, [r3, #8]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003d70:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2b10      	cmp	r3, #16
 8003d78:	d11a      	bne.n	8003db0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003d7a:	4b13      	ldr	r3, [pc, #76]	@ (8003dc8 <HAL_ADC_ConfigChannel+0x1e8>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a13      	ldr	r2, [pc, #76]	@ (8003dcc <HAL_ADC_ConfigChannel+0x1ec>)
 8003d80:	fba2 2303 	umull	r2, r3, r2, r3
 8003d84:	0c9a      	lsrs	r2, r3, #18
 8003d86:	4613      	mov	r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	4413      	add	r3, r2
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003d90:	e002      	b.n	8003d98 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	3b01      	subs	r3, #1
 8003d96:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1f9      	bne.n	8003d92 <HAL_ADC_ConfigChannel+0x1b2>
 8003d9e:	e007      	b.n	8003db0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da4:	f043 0220 	orr.w	r2, r3, #32
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3714      	adds	r7, #20
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bc80      	pop	{r7}
 8003dc2:	4770      	bx	lr
 8003dc4:	40012400 	.word	0x40012400
 8003dc8:	20000008 	.word	0x20000008
 8003dcc:	431bde83 	.word	0x431bde83

08003dd0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d040      	beq.n	8003e70 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f042 0201 	orr.w	r2, r2, #1
 8003dfc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003dfe:	4b1f      	ldr	r3, [pc, #124]	@ (8003e7c <ADC_Enable+0xac>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a1f      	ldr	r2, [pc, #124]	@ (8003e80 <ADC_Enable+0xb0>)
 8003e04:	fba2 2303 	umull	r2, r3, r2, r3
 8003e08:	0c9b      	lsrs	r3, r3, #18
 8003e0a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003e0c:	e002      	b.n	8003e14 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	3b01      	subs	r3, #1
 8003e12:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1f9      	bne.n	8003e0e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003e1a:	f7ff fc9f 	bl	800375c <HAL_GetTick>
 8003e1e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003e20:	e01f      	b.n	8003e62 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003e22:	f7ff fc9b 	bl	800375c <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d918      	bls.n	8003e62 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d011      	beq.n	8003e62 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e42:	f043 0210 	orr.w	r2, r3, #16
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e4e:	f043 0201 	orr.w	r2, r3, #1
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e007      	b.n	8003e72 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f003 0301 	and.w	r3, r3, #1
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d1d8      	bne.n	8003e22 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3710      	adds	r7, #16
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	20000008 	.word	0x20000008
 8003e80:	431bde83 	.word	0x431bde83

08003e84 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d12e      	bne.n	8003efc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 0201 	bic.w	r2, r2, #1
 8003eac:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003eae:	f7ff fc55 	bl	800375c <HAL_GetTick>
 8003eb2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003eb4:	e01b      	b.n	8003eee <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003eb6:	f7ff fc51 	bl	800375c <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d914      	bls.n	8003eee <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d10d      	bne.n	8003eee <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed6:	f043 0210 	orr.w	r2, r3, #16
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee2:	f043 0201 	orr.w	r2, r3, #1
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e007      	b.n	8003efe <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d0dc      	beq.n	8003eb6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3710      	adds	r7, #16
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b084      	sub	sp, #16
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f12:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d127      	bne.n	8003f70 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f24:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003f36:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003f3a:	d115      	bne.n	8003f68 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d111      	bne.n	8003f68 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f48:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d105      	bne.n	8003f68 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f60:	f043 0201 	orr.w	r2, r3, #1
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f7fe fa3b 	bl	80023e4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003f6e:	e004      	b.n	8003f7a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6a1b      	ldr	r3, [r3, #32]
 8003f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	4798      	blx	r3
}
 8003f7a:	bf00      	nop
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b084      	sub	sp, #16
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003f90:	68f8      	ldr	r0, [r7, #12]
 8003f92:	f7ff fe13 	bl	8003bbc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f96:	bf00      	nop
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b084      	sub	sp, #16
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003faa:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fbc:	f043 0204 	orr.w	r2, r3, #4
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f7ff fe02 	bl	8003bce <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003fca:	bf00      	nop
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
	...

08003fd4 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003fd4:	b590      	push	{r4, r7, lr}
 8003fd6:	b087      	sub	sp, #28
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d101      	bne.n	8003ff2 <HAL_ADCEx_Calibration_Start+0x1e>
 8003fee:	2302      	movs	r3, #2
 8003ff0:	e097      	b.n	8004122 <HAL_ADCEx_Calibration_Start+0x14e>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7ff ff42 	bl	8003e84 <ADC_ConversionStop_Disable>
 8004000:	4603      	mov	r3, r0
 8004002:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f7ff fee3 	bl	8003dd0 <ADC_Enable>
 800400a:	4603      	mov	r3, r0
 800400c:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 800400e:	7dfb      	ldrb	r3, [r7, #23]
 8004010:	2b00      	cmp	r3, #0
 8004012:	f040 8081 	bne.w	8004118 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800401a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800401e:	f023 0302 	bic.w	r3, r3, #2
 8004022:	f043 0202 	orr.w	r2, r3, #2
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800402a:	4b40      	ldr	r3, [pc, #256]	@ (800412c <HAL_ADCEx_Calibration_Start+0x158>)
 800402c:	681c      	ldr	r4, [r3, #0]
 800402e:	2002      	movs	r0, #2
 8004030:	f002 fac4 	bl	80065bc <HAL_RCCEx_GetPeriphCLKFreq>
 8004034:	4603      	mov	r3, r0
 8004036:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800403a:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 800403c:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800403e:	e002      	b.n	8004046 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	3b01      	subs	r3, #1
 8004044:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1f9      	bne.n	8004040 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	689a      	ldr	r2, [r3, #8]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f042 0208 	orr.w	r2, r2, #8
 800405a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800405c:	f7ff fb7e 	bl	800375c <HAL_GetTick>
 8004060:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004062:	e01b      	b.n	800409c <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004064:	f7ff fb7a 	bl	800375c <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b0a      	cmp	r3, #10
 8004070:	d914      	bls.n	800409c <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f003 0308 	and.w	r3, r3, #8
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00d      	beq.n	800409c <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004084:	f023 0312 	bic.w	r3, r3, #18
 8004088:	f043 0210 	orr.w	r2, r3, #16
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e042      	b.n	8004122 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f003 0308 	and.w	r3, r3, #8
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1dc      	bne.n	8004064 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	689a      	ldr	r2, [r3, #8]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f042 0204 	orr.w	r2, r2, #4
 80040b8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80040ba:	f7ff fb4f 	bl	800375c <HAL_GetTick>
 80040be:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80040c0:	e01b      	b.n	80040fa <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80040c2:	f7ff fb4b 	bl	800375c <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	2b0a      	cmp	r3, #10
 80040ce:	d914      	bls.n	80040fa <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f003 0304 	and.w	r3, r3, #4
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00d      	beq.n	80040fa <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e2:	f023 0312 	bic.w	r3, r3, #18
 80040e6:	f043 0210 	orr.w	r2, r3, #16
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e013      	b.n	8004122 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f003 0304 	and.w	r3, r3, #4
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1dc      	bne.n	80040c2 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800410c:	f023 0303 	bic.w	r3, r3, #3
 8004110:	f043 0201 	orr.w	r2, r3, #1
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004120:	7dfb      	ldrb	r3, [r7, #23]
}
 8004122:	4618      	mov	r0, r3
 8004124:	371c      	adds	r7, #28
 8004126:	46bd      	mov	sp, r7
 8004128:	bd90      	pop	{r4, r7, pc}
 800412a:	bf00      	nop
 800412c:	20000008 	.word	0x20000008

08004130 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f003 0307 	and.w	r3, r3, #7
 800413e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004140:	4b0c      	ldr	r3, [pc, #48]	@ (8004174 <__NVIC_SetPriorityGrouping+0x44>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004146:	68ba      	ldr	r2, [r7, #8]
 8004148:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800414c:	4013      	ands	r3, r2
 800414e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004158:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800415c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004162:	4a04      	ldr	r2, [pc, #16]	@ (8004174 <__NVIC_SetPriorityGrouping+0x44>)
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	60d3      	str	r3, [r2, #12]
}
 8004168:	bf00      	nop
 800416a:	3714      	adds	r7, #20
 800416c:	46bd      	mov	sp, r7
 800416e:	bc80      	pop	{r7}
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	e000ed00 	.word	0xe000ed00

08004178 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800417c:	4b04      	ldr	r3, [pc, #16]	@ (8004190 <__NVIC_GetPriorityGrouping+0x18>)
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	0a1b      	lsrs	r3, r3, #8
 8004182:	f003 0307 	and.w	r3, r3, #7
}
 8004186:	4618      	mov	r0, r3
 8004188:	46bd      	mov	sp, r7
 800418a:	bc80      	pop	{r7}
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	e000ed00 	.word	0xe000ed00

08004194 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	4603      	mov	r3, r0
 800419c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800419e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	db0b      	blt.n	80041be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041a6:	79fb      	ldrb	r3, [r7, #7]
 80041a8:	f003 021f 	and.w	r2, r3, #31
 80041ac:	4906      	ldr	r1, [pc, #24]	@ (80041c8 <__NVIC_EnableIRQ+0x34>)
 80041ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041b2:	095b      	lsrs	r3, r3, #5
 80041b4:	2001      	movs	r0, #1
 80041b6:	fa00 f202 	lsl.w	r2, r0, r2
 80041ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80041be:	bf00      	nop
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bc80      	pop	{r7}
 80041c6:	4770      	bx	lr
 80041c8:	e000e100 	.word	0xe000e100

080041cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	4603      	mov	r3, r0
 80041d4:	6039      	str	r1, [r7, #0]
 80041d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	db0a      	blt.n	80041f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	b2da      	uxtb	r2, r3
 80041e4:	490c      	ldr	r1, [pc, #48]	@ (8004218 <__NVIC_SetPriority+0x4c>)
 80041e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ea:	0112      	lsls	r2, r2, #4
 80041ec:	b2d2      	uxtb	r2, r2
 80041ee:	440b      	add	r3, r1
 80041f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041f4:	e00a      	b.n	800420c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	b2da      	uxtb	r2, r3
 80041fa:	4908      	ldr	r1, [pc, #32]	@ (800421c <__NVIC_SetPriority+0x50>)
 80041fc:	79fb      	ldrb	r3, [r7, #7]
 80041fe:	f003 030f 	and.w	r3, r3, #15
 8004202:	3b04      	subs	r3, #4
 8004204:	0112      	lsls	r2, r2, #4
 8004206:	b2d2      	uxtb	r2, r2
 8004208:	440b      	add	r3, r1
 800420a:	761a      	strb	r2, [r3, #24]
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	bc80      	pop	{r7}
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	e000e100 	.word	0xe000e100
 800421c:	e000ed00 	.word	0xe000ed00

08004220 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004220:	b480      	push	{r7}
 8004222:	b089      	sub	sp, #36	@ 0x24
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f003 0307 	and.w	r3, r3, #7
 8004232:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	f1c3 0307 	rsb	r3, r3, #7
 800423a:	2b04      	cmp	r3, #4
 800423c:	bf28      	it	cs
 800423e:	2304      	movcs	r3, #4
 8004240:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	3304      	adds	r3, #4
 8004246:	2b06      	cmp	r3, #6
 8004248:	d902      	bls.n	8004250 <NVIC_EncodePriority+0x30>
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	3b03      	subs	r3, #3
 800424e:	e000      	b.n	8004252 <NVIC_EncodePriority+0x32>
 8004250:	2300      	movs	r3, #0
 8004252:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004254:	f04f 32ff 	mov.w	r2, #4294967295
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	fa02 f303 	lsl.w	r3, r2, r3
 800425e:	43da      	mvns	r2, r3
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	401a      	ands	r2, r3
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004268:	f04f 31ff 	mov.w	r1, #4294967295
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	fa01 f303 	lsl.w	r3, r1, r3
 8004272:	43d9      	mvns	r1, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004278:	4313      	orrs	r3, r2
         );
}
 800427a:	4618      	mov	r0, r3
 800427c:	3724      	adds	r7, #36	@ 0x24
 800427e:	46bd      	mov	sp, r7
 8004280:	bc80      	pop	{r7}
 8004282:	4770      	bx	lr

08004284 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	3b01      	subs	r3, #1
 8004290:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004294:	d301      	bcc.n	800429a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004296:	2301      	movs	r3, #1
 8004298:	e00f      	b.n	80042ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800429a:	4a0a      	ldr	r2, [pc, #40]	@ (80042c4 <SysTick_Config+0x40>)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	3b01      	subs	r3, #1
 80042a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042a2:	210f      	movs	r1, #15
 80042a4:	f04f 30ff 	mov.w	r0, #4294967295
 80042a8:	f7ff ff90 	bl	80041cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042ac:	4b05      	ldr	r3, [pc, #20]	@ (80042c4 <SysTick_Config+0x40>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042b2:	4b04      	ldr	r3, [pc, #16]	@ (80042c4 <SysTick_Config+0x40>)
 80042b4:	2207      	movs	r2, #7
 80042b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3708      	adds	r7, #8
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	e000e010 	.word	0xe000e010

080042c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f7ff ff2d 	bl	8004130 <__NVIC_SetPriorityGrouping>
}
 80042d6:	bf00      	nop
 80042d8:	3708      	adds	r7, #8
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042de:	b580      	push	{r7, lr}
 80042e0:	b086      	sub	sp, #24
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	4603      	mov	r3, r0
 80042e6:	60b9      	str	r1, [r7, #8]
 80042e8:	607a      	str	r2, [r7, #4]
 80042ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80042ec:	2300      	movs	r3, #0
 80042ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80042f0:	f7ff ff42 	bl	8004178 <__NVIC_GetPriorityGrouping>
 80042f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	68b9      	ldr	r1, [r7, #8]
 80042fa:	6978      	ldr	r0, [r7, #20]
 80042fc:	f7ff ff90 	bl	8004220 <NVIC_EncodePriority>
 8004300:	4602      	mov	r2, r0
 8004302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004306:	4611      	mov	r1, r2
 8004308:	4618      	mov	r0, r3
 800430a:	f7ff ff5f 	bl	80041cc <__NVIC_SetPriority>
}
 800430e:	bf00      	nop
 8004310:	3718      	adds	r7, #24
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b082      	sub	sp, #8
 800431a:	af00      	add	r7, sp, #0
 800431c:	4603      	mov	r3, r0
 800431e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004324:	4618      	mov	r0, r3
 8004326:	f7ff ff35 	bl	8004194 <__NVIC_EnableIRQ>
}
 800432a:	bf00      	nop
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004332:	b580      	push	{r7, lr}
 8004334:	b082      	sub	sp, #8
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f7ff ffa2 	bl	8004284 <SysTick_Config>
 8004340:	4603      	mov	r3, r0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3708      	adds	r7, #8
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
	...

0800434c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004354:	2300      	movs	r3, #0
 8004356:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e043      	b.n	80043ea <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	461a      	mov	r2, r3
 8004368:	4b22      	ldr	r3, [pc, #136]	@ (80043f4 <HAL_DMA_Init+0xa8>)
 800436a:	4413      	add	r3, r2
 800436c:	4a22      	ldr	r2, [pc, #136]	@ (80043f8 <HAL_DMA_Init+0xac>)
 800436e:	fba2 2303 	umull	r2, r3, r2, r3
 8004372:	091b      	lsrs	r3, r3, #4
 8004374:	009a      	lsls	r2, r3, #2
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a1f      	ldr	r2, [pc, #124]	@ (80043fc <HAL_DMA_Init+0xb0>)
 800437e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2202      	movs	r2, #2
 8004384:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004396:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800439a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80043a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	69db      	ldr	r3, [r3, #28]
 80043c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3714      	adds	r7, #20
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bc80      	pop	{r7}
 80043f2:	4770      	bx	lr
 80043f4:	bffdfff8 	.word	0xbffdfff8
 80043f8:	cccccccd 	.word	0xcccccccd
 80043fc:	40020000 	.word	0x40020000

08004400 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
 800440c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800440e:	2300      	movs	r3, #0
 8004410:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d101      	bne.n	8004420 <HAL_DMA_Start_IT+0x20>
 800441c:	2302      	movs	r3, #2
 800441e:	e04b      	b.n	80044b8 <HAL_DMA_Start_IT+0xb8>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b01      	cmp	r3, #1
 8004432:	d13a      	bne.n	80044aa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2202      	movs	r2, #2
 8004438:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f022 0201 	bic.w	r2, r2, #1
 8004450:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	68b9      	ldr	r1, [r7, #8]
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f000 f9eb 	bl	8004834 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004462:	2b00      	cmp	r3, #0
 8004464:	d008      	beq.n	8004478 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f042 020e 	orr.w	r2, r2, #14
 8004474:	601a      	str	r2, [r3, #0]
 8004476:	e00f      	b.n	8004498 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f022 0204 	bic.w	r2, r2, #4
 8004486:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f042 020a 	orr.w	r2, r2, #10
 8004496:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f042 0201 	orr.w	r2, r2, #1
 80044a6:	601a      	str	r2, [r3, #0]
 80044a8:	e005      	b.n	80044b6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80044b2:	2302      	movs	r3, #2
 80044b4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80044b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3718      	adds	r7, #24
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b085      	sub	sp, #20
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044c8:	2300      	movs	r3, #0
 80044ca:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d008      	beq.n	80044ea <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2204      	movs	r2, #4
 80044dc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e020      	b.n	800452c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f022 020e 	bic.w	r2, r2, #14
 80044f8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f022 0201 	bic.w	r2, r2, #1
 8004508:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004512:	2101      	movs	r1, #1
 8004514:	fa01 f202 	lsl.w	r2, r1, r2
 8004518:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2201      	movs	r2, #1
 800451e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800452a:	7bfb      	ldrb	r3, [r7, #15]
}
 800452c:	4618      	mov	r0, r3
 800452e:	3714      	adds	r7, #20
 8004530:	46bd      	mov	sp, r7
 8004532:	bc80      	pop	{r7}
 8004534:	4770      	bx	lr
	...

08004538 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004540:	2300      	movs	r3, #0
 8004542:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800454a:	b2db      	uxtb	r3, r3
 800454c:	2b02      	cmp	r3, #2
 800454e:	d005      	beq.n	800455c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2204      	movs	r2, #4
 8004554:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	73fb      	strb	r3, [r7, #15]
 800455a:	e051      	b.n	8004600 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f022 020e 	bic.w	r2, r2, #14
 800456a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f022 0201 	bic.w	r2, r2, #1
 800457a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a22      	ldr	r2, [pc, #136]	@ (800460c <HAL_DMA_Abort_IT+0xd4>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d029      	beq.n	80045da <HAL_DMA_Abort_IT+0xa2>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a21      	ldr	r2, [pc, #132]	@ (8004610 <HAL_DMA_Abort_IT+0xd8>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d022      	beq.n	80045d6 <HAL_DMA_Abort_IT+0x9e>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a1f      	ldr	r2, [pc, #124]	@ (8004614 <HAL_DMA_Abort_IT+0xdc>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d01a      	beq.n	80045d0 <HAL_DMA_Abort_IT+0x98>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a1e      	ldr	r2, [pc, #120]	@ (8004618 <HAL_DMA_Abort_IT+0xe0>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d012      	beq.n	80045ca <HAL_DMA_Abort_IT+0x92>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a1c      	ldr	r2, [pc, #112]	@ (800461c <HAL_DMA_Abort_IT+0xe4>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d00a      	beq.n	80045c4 <HAL_DMA_Abort_IT+0x8c>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a1b      	ldr	r2, [pc, #108]	@ (8004620 <HAL_DMA_Abort_IT+0xe8>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d102      	bne.n	80045be <HAL_DMA_Abort_IT+0x86>
 80045b8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80045bc:	e00e      	b.n	80045dc <HAL_DMA_Abort_IT+0xa4>
 80045be:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80045c2:	e00b      	b.n	80045dc <HAL_DMA_Abort_IT+0xa4>
 80045c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80045c8:	e008      	b.n	80045dc <HAL_DMA_Abort_IT+0xa4>
 80045ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80045ce:	e005      	b.n	80045dc <HAL_DMA_Abort_IT+0xa4>
 80045d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80045d4:	e002      	b.n	80045dc <HAL_DMA_Abort_IT+0xa4>
 80045d6:	2310      	movs	r3, #16
 80045d8:	e000      	b.n	80045dc <HAL_DMA_Abort_IT+0xa4>
 80045da:	2301      	movs	r3, #1
 80045dc:	4a11      	ldr	r2, [pc, #68]	@ (8004624 <HAL_DMA_Abort_IT+0xec>)
 80045de:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d003      	beq.n	8004600 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	4798      	blx	r3
    } 
  }
  return status;
 8004600:	7bfb      	ldrb	r3, [r7, #15]
}
 8004602:	4618      	mov	r0, r3
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	40020008 	.word	0x40020008
 8004610:	4002001c 	.word	0x4002001c
 8004614:	40020030 	.word	0x40020030
 8004618:	40020044 	.word	0x40020044
 800461c:	40020058 	.word	0x40020058
 8004620:	4002006c 	.word	0x4002006c
 8004624:	40020000 	.word	0x40020000

08004628 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004644:	2204      	movs	r2, #4
 8004646:	409a      	lsls	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	4013      	ands	r3, r2
 800464c:	2b00      	cmp	r3, #0
 800464e:	d04f      	beq.n	80046f0 <HAL_DMA_IRQHandler+0xc8>
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	f003 0304 	and.w	r3, r3, #4
 8004656:	2b00      	cmp	r3, #0
 8004658:	d04a      	beq.n	80046f0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0320 	and.w	r3, r3, #32
 8004664:	2b00      	cmp	r3, #0
 8004666:	d107      	bne.n	8004678 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f022 0204 	bic.w	r2, r2, #4
 8004676:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a66      	ldr	r2, [pc, #408]	@ (8004818 <HAL_DMA_IRQHandler+0x1f0>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d029      	beq.n	80046d6 <HAL_DMA_IRQHandler+0xae>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a65      	ldr	r2, [pc, #404]	@ (800481c <HAL_DMA_IRQHandler+0x1f4>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d022      	beq.n	80046d2 <HAL_DMA_IRQHandler+0xaa>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a63      	ldr	r2, [pc, #396]	@ (8004820 <HAL_DMA_IRQHandler+0x1f8>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d01a      	beq.n	80046cc <HAL_DMA_IRQHandler+0xa4>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a62      	ldr	r2, [pc, #392]	@ (8004824 <HAL_DMA_IRQHandler+0x1fc>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d012      	beq.n	80046c6 <HAL_DMA_IRQHandler+0x9e>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a60      	ldr	r2, [pc, #384]	@ (8004828 <HAL_DMA_IRQHandler+0x200>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d00a      	beq.n	80046c0 <HAL_DMA_IRQHandler+0x98>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a5f      	ldr	r2, [pc, #380]	@ (800482c <HAL_DMA_IRQHandler+0x204>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d102      	bne.n	80046ba <HAL_DMA_IRQHandler+0x92>
 80046b4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80046b8:	e00e      	b.n	80046d8 <HAL_DMA_IRQHandler+0xb0>
 80046ba:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80046be:	e00b      	b.n	80046d8 <HAL_DMA_IRQHandler+0xb0>
 80046c0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80046c4:	e008      	b.n	80046d8 <HAL_DMA_IRQHandler+0xb0>
 80046c6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80046ca:	e005      	b.n	80046d8 <HAL_DMA_IRQHandler+0xb0>
 80046cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80046d0:	e002      	b.n	80046d8 <HAL_DMA_IRQHandler+0xb0>
 80046d2:	2340      	movs	r3, #64	@ 0x40
 80046d4:	e000      	b.n	80046d8 <HAL_DMA_IRQHandler+0xb0>
 80046d6:	2304      	movs	r3, #4
 80046d8:	4a55      	ldr	r2, [pc, #340]	@ (8004830 <HAL_DMA_IRQHandler+0x208>)
 80046da:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f000 8094 	beq.w	800480e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80046ee:	e08e      	b.n	800480e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f4:	2202      	movs	r2, #2
 80046f6:	409a      	lsls	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4013      	ands	r3, r2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d056      	beq.n	80047ae <HAL_DMA_IRQHandler+0x186>
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d051      	beq.n	80047ae <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0320 	and.w	r3, r3, #32
 8004714:	2b00      	cmp	r3, #0
 8004716:	d10b      	bne.n	8004730 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f022 020a 	bic.w	r2, r2, #10
 8004726:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a38      	ldr	r2, [pc, #224]	@ (8004818 <HAL_DMA_IRQHandler+0x1f0>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d029      	beq.n	800478e <HAL_DMA_IRQHandler+0x166>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a37      	ldr	r2, [pc, #220]	@ (800481c <HAL_DMA_IRQHandler+0x1f4>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d022      	beq.n	800478a <HAL_DMA_IRQHandler+0x162>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a35      	ldr	r2, [pc, #212]	@ (8004820 <HAL_DMA_IRQHandler+0x1f8>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d01a      	beq.n	8004784 <HAL_DMA_IRQHandler+0x15c>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a34      	ldr	r2, [pc, #208]	@ (8004824 <HAL_DMA_IRQHandler+0x1fc>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d012      	beq.n	800477e <HAL_DMA_IRQHandler+0x156>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a32      	ldr	r2, [pc, #200]	@ (8004828 <HAL_DMA_IRQHandler+0x200>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d00a      	beq.n	8004778 <HAL_DMA_IRQHandler+0x150>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a31      	ldr	r2, [pc, #196]	@ (800482c <HAL_DMA_IRQHandler+0x204>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d102      	bne.n	8004772 <HAL_DMA_IRQHandler+0x14a>
 800476c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004770:	e00e      	b.n	8004790 <HAL_DMA_IRQHandler+0x168>
 8004772:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004776:	e00b      	b.n	8004790 <HAL_DMA_IRQHandler+0x168>
 8004778:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800477c:	e008      	b.n	8004790 <HAL_DMA_IRQHandler+0x168>
 800477e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004782:	e005      	b.n	8004790 <HAL_DMA_IRQHandler+0x168>
 8004784:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004788:	e002      	b.n	8004790 <HAL_DMA_IRQHandler+0x168>
 800478a:	2320      	movs	r3, #32
 800478c:	e000      	b.n	8004790 <HAL_DMA_IRQHandler+0x168>
 800478e:	2302      	movs	r3, #2
 8004790:	4a27      	ldr	r2, [pc, #156]	@ (8004830 <HAL_DMA_IRQHandler+0x208>)
 8004792:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d034      	beq.n	800480e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80047ac:	e02f      	b.n	800480e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b2:	2208      	movs	r2, #8
 80047b4:	409a      	lsls	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	4013      	ands	r3, r2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d028      	beq.n	8004810 <HAL_DMA_IRQHandler+0x1e8>
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	f003 0308 	and.w	r3, r3, #8
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d023      	beq.n	8004810 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f022 020e 	bic.w	r2, r2, #14
 80047d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047e0:	2101      	movs	r1, #1
 80047e2:	fa01 f202 	lsl.w	r2, r1, r2
 80047e6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2201      	movs	r2, #1
 80047f2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004802:	2b00      	cmp	r3, #0
 8004804:	d004      	beq.n	8004810 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	4798      	blx	r3
    }
  }
  return;
 800480e:	bf00      	nop
 8004810:	bf00      	nop
}
 8004812:	3710      	adds	r7, #16
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	40020008 	.word	0x40020008
 800481c:	4002001c 	.word	0x4002001c
 8004820:	40020030 	.word	0x40020030
 8004824:	40020044 	.word	0x40020044
 8004828:	40020058 	.word	0x40020058
 800482c:	4002006c 	.word	0x4002006c
 8004830:	40020000 	.word	0x40020000

08004834 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
 8004840:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800484a:	2101      	movs	r1, #1
 800484c:	fa01 f202 	lsl.w	r2, r1, r2
 8004850:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	683a      	ldr	r2, [r7, #0]
 8004858:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	2b10      	cmp	r3, #16
 8004860:	d108      	bne.n	8004874 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004872:	e007      	b.n	8004884 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68ba      	ldr	r2, [r7, #8]
 800487a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	60da      	str	r2, [r3, #12]
}
 8004884:	bf00      	nop
 8004886:	3714      	adds	r7, #20
 8004888:	46bd      	mov	sp, r7
 800488a:	bc80      	pop	{r7}
 800488c:	4770      	bx	lr
	...

08004890 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004890:	b480      	push	{r7}
 8004892:	b08b      	sub	sp, #44	@ 0x2c
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800489a:	2300      	movs	r3, #0
 800489c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800489e:	2300      	movs	r3, #0
 80048a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048a2:	e169      	b.n	8004b78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80048a4:	2201      	movs	r2, #1
 80048a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	69fa      	ldr	r2, [r7, #28]
 80048b4:	4013      	ands	r3, r2
 80048b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	429a      	cmp	r2, r3
 80048be:	f040 8158 	bne.w	8004b72 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	4a9a      	ldr	r2, [pc, #616]	@ (8004b30 <HAL_GPIO_Init+0x2a0>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d05e      	beq.n	800498a <HAL_GPIO_Init+0xfa>
 80048cc:	4a98      	ldr	r2, [pc, #608]	@ (8004b30 <HAL_GPIO_Init+0x2a0>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d875      	bhi.n	80049be <HAL_GPIO_Init+0x12e>
 80048d2:	4a98      	ldr	r2, [pc, #608]	@ (8004b34 <HAL_GPIO_Init+0x2a4>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d058      	beq.n	800498a <HAL_GPIO_Init+0xfa>
 80048d8:	4a96      	ldr	r2, [pc, #600]	@ (8004b34 <HAL_GPIO_Init+0x2a4>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d86f      	bhi.n	80049be <HAL_GPIO_Init+0x12e>
 80048de:	4a96      	ldr	r2, [pc, #600]	@ (8004b38 <HAL_GPIO_Init+0x2a8>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d052      	beq.n	800498a <HAL_GPIO_Init+0xfa>
 80048e4:	4a94      	ldr	r2, [pc, #592]	@ (8004b38 <HAL_GPIO_Init+0x2a8>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d869      	bhi.n	80049be <HAL_GPIO_Init+0x12e>
 80048ea:	4a94      	ldr	r2, [pc, #592]	@ (8004b3c <HAL_GPIO_Init+0x2ac>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d04c      	beq.n	800498a <HAL_GPIO_Init+0xfa>
 80048f0:	4a92      	ldr	r2, [pc, #584]	@ (8004b3c <HAL_GPIO_Init+0x2ac>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d863      	bhi.n	80049be <HAL_GPIO_Init+0x12e>
 80048f6:	4a92      	ldr	r2, [pc, #584]	@ (8004b40 <HAL_GPIO_Init+0x2b0>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d046      	beq.n	800498a <HAL_GPIO_Init+0xfa>
 80048fc:	4a90      	ldr	r2, [pc, #576]	@ (8004b40 <HAL_GPIO_Init+0x2b0>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d85d      	bhi.n	80049be <HAL_GPIO_Init+0x12e>
 8004902:	2b12      	cmp	r3, #18
 8004904:	d82a      	bhi.n	800495c <HAL_GPIO_Init+0xcc>
 8004906:	2b12      	cmp	r3, #18
 8004908:	d859      	bhi.n	80049be <HAL_GPIO_Init+0x12e>
 800490a:	a201      	add	r2, pc, #4	@ (adr r2, 8004910 <HAL_GPIO_Init+0x80>)
 800490c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004910:	0800498b 	.word	0x0800498b
 8004914:	08004965 	.word	0x08004965
 8004918:	08004977 	.word	0x08004977
 800491c:	080049b9 	.word	0x080049b9
 8004920:	080049bf 	.word	0x080049bf
 8004924:	080049bf 	.word	0x080049bf
 8004928:	080049bf 	.word	0x080049bf
 800492c:	080049bf 	.word	0x080049bf
 8004930:	080049bf 	.word	0x080049bf
 8004934:	080049bf 	.word	0x080049bf
 8004938:	080049bf 	.word	0x080049bf
 800493c:	080049bf 	.word	0x080049bf
 8004940:	080049bf 	.word	0x080049bf
 8004944:	080049bf 	.word	0x080049bf
 8004948:	080049bf 	.word	0x080049bf
 800494c:	080049bf 	.word	0x080049bf
 8004950:	080049bf 	.word	0x080049bf
 8004954:	0800496d 	.word	0x0800496d
 8004958:	08004981 	.word	0x08004981
 800495c:	4a79      	ldr	r2, [pc, #484]	@ (8004b44 <HAL_GPIO_Init+0x2b4>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d013      	beq.n	800498a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004962:	e02c      	b.n	80049be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	623b      	str	r3, [r7, #32]
          break;
 800496a:	e029      	b.n	80049c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	3304      	adds	r3, #4
 8004972:	623b      	str	r3, [r7, #32]
          break;
 8004974:	e024      	b.n	80049c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	3308      	adds	r3, #8
 800497c:	623b      	str	r3, [r7, #32]
          break;
 800497e:	e01f      	b.n	80049c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	330c      	adds	r3, #12
 8004986:	623b      	str	r3, [r7, #32]
          break;
 8004988:	e01a      	b.n	80049c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d102      	bne.n	8004998 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004992:	2304      	movs	r3, #4
 8004994:	623b      	str	r3, [r7, #32]
          break;
 8004996:	e013      	b.n	80049c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d105      	bne.n	80049ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80049a0:	2308      	movs	r3, #8
 80049a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	69fa      	ldr	r2, [r7, #28]
 80049a8:	611a      	str	r2, [r3, #16]
          break;
 80049aa:	e009      	b.n	80049c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80049ac:	2308      	movs	r3, #8
 80049ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	69fa      	ldr	r2, [r7, #28]
 80049b4:	615a      	str	r2, [r3, #20]
          break;
 80049b6:	e003      	b.n	80049c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80049b8:	2300      	movs	r3, #0
 80049ba:	623b      	str	r3, [r7, #32]
          break;
 80049bc:	e000      	b.n	80049c0 <HAL_GPIO_Init+0x130>
          break;
 80049be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	2bff      	cmp	r3, #255	@ 0xff
 80049c4:	d801      	bhi.n	80049ca <HAL_GPIO_Init+0x13a>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	e001      	b.n	80049ce <HAL_GPIO_Init+0x13e>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	3304      	adds	r3, #4
 80049ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	2bff      	cmp	r3, #255	@ 0xff
 80049d4:	d802      	bhi.n	80049dc <HAL_GPIO_Init+0x14c>
 80049d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	e002      	b.n	80049e2 <HAL_GPIO_Init+0x152>
 80049dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049de:	3b08      	subs	r3, #8
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	210f      	movs	r1, #15
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	fa01 f303 	lsl.w	r3, r1, r3
 80049f0:	43db      	mvns	r3, r3
 80049f2:	401a      	ands	r2, r3
 80049f4:	6a39      	ldr	r1, [r7, #32]
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	fa01 f303 	lsl.w	r3, r1, r3
 80049fc:	431a      	orrs	r2, r3
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	f000 80b1 	beq.w	8004b72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004a10:	4b4d      	ldr	r3, [pc, #308]	@ (8004b48 <HAL_GPIO_Init+0x2b8>)
 8004a12:	699b      	ldr	r3, [r3, #24]
 8004a14:	4a4c      	ldr	r2, [pc, #304]	@ (8004b48 <HAL_GPIO_Init+0x2b8>)
 8004a16:	f043 0301 	orr.w	r3, r3, #1
 8004a1a:	6193      	str	r3, [r2, #24]
 8004a1c:	4b4a      	ldr	r3, [pc, #296]	@ (8004b48 <HAL_GPIO_Init+0x2b8>)
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	f003 0301 	and.w	r3, r3, #1
 8004a24:	60bb      	str	r3, [r7, #8]
 8004a26:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004a28:	4a48      	ldr	r2, [pc, #288]	@ (8004b4c <HAL_GPIO_Init+0x2bc>)
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2c:	089b      	lsrs	r3, r3, #2
 8004a2e:	3302      	adds	r3, #2
 8004a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a34:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a38:	f003 0303 	and.w	r3, r3, #3
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	220f      	movs	r2, #15
 8004a40:	fa02 f303 	lsl.w	r3, r2, r3
 8004a44:	43db      	mvns	r3, r3
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	4013      	ands	r3, r2
 8004a4a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a40      	ldr	r2, [pc, #256]	@ (8004b50 <HAL_GPIO_Init+0x2c0>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d013      	beq.n	8004a7c <HAL_GPIO_Init+0x1ec>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a3f      	ldr	r2, [pc, #252]	@ (8004b54 <HAL_GPIO_Init+0x2c4>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d00d      	beq.n	8004a78 <HAL_GPIO_Init+0x1e8>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a3e      	ldr	r2, [pc, #248]	@ (8004b58 <HAL_GPIO_Init+0x2c8>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d007      	beq.n	8004a74 <HAL_GPIO_Init+0x1e4>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a3d      	ldr	r2, [pc, #244]	@ (8004b5c <HAL_GPIO_Init+0x2cc>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d101      	bne.n	8004a70 <HAL_GPIO_Init+0x1e0>
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e006      	b.n	8004a7e <HAL_GPIO_Init+0x1ee>
 8004a70:	2304      	movs	r3, #4
 8004a72:	e004      	b.n	8004a7e <HAL_GPIO_Init+0x1ee>
 8004a74:	2302      	movs	r3, #2
 8004a76:	e002      	b.n	8004a7e <HAL_GPIO_Init+0x1ee>
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e000      	b.n	8004a7e <HAL_GPIO_Init+0x1ee>
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a80:	f002 0203 	and.w	r2, r2, #3
 8004a84:	0092      	lsls	r2, r2, #2
 8004a86:	4093      	lsls	r3, r2
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004a8e:	492f      	ldr	r1, [pc, #188]	@ (8004b4c <HAL_GPIO_Init+0x2bc>)
 8004a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a92:	089b      	lsrs	r3, r3, #2
 8004a94:	3302      	adds	r3, #2
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d006      	beq.n	8004ab6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004aa8:	4b2d      	ldr	r3, [pc, #180]	@ (8004b60 <HAL_GPIO_Init+0x2d0>)
 8004aaa:	689a      	ldr	r2, [r3, #8]
 8004aac:	492c      	ldr	r1, [pc, #176]	@ (8004b60 <HAL_GPIO_Init+0x2d0>)
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	608b      	str	r3, [r1, #8]
 8004ab4:	e006      	b.n	8004ac4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004ab6:	4b2a      	ldr	r3, [pc, #168]	@ (8004b60 <HAL_GPIO_Init+0x2d0>)
 8004ab8:	689a      	ldr	r2, [r3, #8]
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	43db      	mvns	r3, r3
 8004abe:	4928      	ldr	r1, [pc, #160]	@ (8004b60 <HAL_GPIO_Init+0x2d0>)
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d006      	beq.n	8004ade <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004ad0:	4b23      	ldr	r3, [pc, #140]	@ (8004b60 <HAL_GPIO_Init+0x2d0>)
 8004ad2:	68da      	ldr	r2, [r3, #12]
 8004ad4:	4922      	ldr	r1, [pc, #136]	@ (8004b60 <HAL_GPIO_Init+0x2d0>)
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	60cb      	str	r3, [r1, #12]
 8004adc:	e006      	b.n	8004aec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004ade:	4b20      	ldr	r3, [pc, #128]	@ (8004b60 <HAL_GPIO_Init+0x2d0>)
 8004ae0:	68da      	ldr	r2, [r3, #12]
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	43db      	mvns	r3, r3
 8004ae6:	491e      	ldr	r1, [pc, #120]	@ (8004b60 <HAL_GPIO_Init+0x2d0>)
 8004ae8:	4013      	ands	r3, r2
 8004aea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d006      	beq.n	8004b06 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004af8:	4b19      	ldr	r3, [pc, #100]	@ (8004b60 <HAL_GPIO_Init+0x2d0>)
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	4918      	ldr	r1, [pc, #96]	@ (8004b60 <HAL_GPIO_Init+0x2d0>)
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	604b      	str	r3, [r1, #4]
 8004b04:	e006      	b.n	8004b14 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004b06:	4b16      	ldr	r3, [pc, #88]	@ (8004b60 <HAL_GPIO_Init+0x2d0>)
 8004b08:	685a      	ldr	r2, [r3, #4]
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	43db      	mvns	r3, r3
 8004b0e:	4914      	ldr	r1, [pc, #80]	@ (8004b60 <HAL_GPIO_Init+0x2d0>)
 8004b10:	4013      	ands	r3, r2
 8004b12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d021      	beq.n	8004b64 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004b20:	4b0f      	ldr	r3, [pc, #60]	@ (8004b60 <HAL_GPIO_Init+0x2d0>)
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	490e      	ldr	r1, [pc, #56]	@ (8004b60 <HAL_GPIO_Init+0x2d0>)
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	600b      	str	r3, [r1, #0]
 8004b2c:	e021      	b.n	8004b72 <HAL_GPIO_Init+0x2e2>
 8004b2e:	bf00      	nop
 8004b30:	10320000 	.word	0x10320000
 8004b34:	10310000 	.word	0x10310000
 8004b38:	10220000 	.word	0x10220000
 8004b3c:	10210000 	.word	0x10210000
 8004b40:	10120000 	.word	0x10120000
 8004b44:	10110000 	.word	0x10110000
 8004b48:	40021000 	.word	0x40021000
 8004b4c:	40010000 	.word	0x40010000
 8004b50:	40010800 	.word	0x40010800
 8004b54:	40010c00 	.word	0x40010c00
 8004b58:	40011000 	.word	0x40011000
 8004b5c:	40011400 	.word	0x40011400
 8004b60:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004b64:	4b0b      	ldr	r3, [pc, #44]	@ (8004b94 <HAL_GPIO_Init+0x304>)
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	43db      	mvns	r3, r3
 8004b6c:	4909      	ldr	r1, [pc, #36]	@ (8004b94 <HAL_GPIO_Init+0x304>)
 8004b6e:	4013      	ands	r3, r2
 8004b70:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b74:	3301      	adds	r3, #1
 8004b76:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	f47f ae8e 	bne.w	80048a4 <HAL_GPIO_Init+0x14>
  }
}
 8004b88:	bf00      	nop
 8004b8a:	bf00      	nop
 8004b8c:	372c      	adds	r7, #44	@ 0x2c
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bc80      	pop	{r7}
 8004b92:	4770      	bx	lr
 8004b94:	40010400 	.word	0x40010400

08004b98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	807b      	strh	r3, [r7, #2]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ba8:	787b      	ldrb	r3, [r7, #1]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d003      	beq.n	8004bb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004bae:	887a      	ldrh	r2, [r7, #2]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004bb4:	e003      	b.n	8004bbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004bb6:	887b      	ldrh	r3, [r7, #2]
 8004bb8:	041a      	lsls	r2, r3, #16
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	611a      	str	r2, [r3, #16]
}
 8004bbe:	bf00      	nop
 8004bc0:	370c      	adds	r7, #12
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bc80      	pop	{r7}
 8004bc6:	4770      	bx	lr

08004bc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d101      	bne.n	8004bda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e12b      	b.n	8004e32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d106      	bne.n	8004bf4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f7fc fa7e 	bl	80010f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2224      	movs	r2, #36	@ 0x24
 8004bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 0201 	bic.w	r2, r2, #1
 8004c0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004c2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004c2c:	f001 fbca 	bl	80063c4 <HAL_RCC_GetPCLK1Freq>
 8004c30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	4a81      	ldr	r2, [pc, #516]	@ (8004e3c <HAL_I2C_Init+0x274>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d807      	bhi.n	8004c4c <HAL_I2C_Init+0x84>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	4a80      	ldr	r2, [pc, #512]	@ (8004e40 <HAL_I2C_Init+0x278>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	bf94      	ite	ls
 8004c44:	2301      	movls	r3, #1
 8004c46:	2300      	movhi	r3, #0
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	e006      	b.n	8004c5a <HAL_I2C_Init+0x92>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	4a7d      	ldr	r2, [pc, #500]	@ (8004e44 <HAL_I2C_Init+0x27c>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	bf94      	ite	ls
 8004c54:	2301      	movls	r3, #1
 8004c56:	2300      	movhi	r3, #0
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d001      	beq.n	8004c62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e0e7      	b.n	8004e32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	4a78      	ldr	r2, [pc, #480]	@ (8004e48 <HAL_I2C_Init+0x280>)
 8004c66:	fba2 2303 	umull	r2, r3, r2, r3
 8004c6a:	0c9b      	lsrs	r3, r3, #18
 8004c6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68ba      	ldr	r2, [r7, #8]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6a1b      	ldr	r3, [r3, #32]
 8004c88:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	4a6a      	ldr	r2, [pc, #424]	@ (8004e3c <HAL_I2C_Init+0x274>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d802      	bhi.n	8004c9c <HAL_I2C_Init+0xd4>
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	3301      	adds	r3, #1
 8004c9a:	e009      	b.n	8004cb0 <HAL_I2C_Init+0xe8>
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004ca2:	fb02 f303 	mul.w	r3, r2, r3
 8004ca6:	4a69      	ldr	r2, [pc, #420]	@ (8004e4c <HAL_I2C_Init+0x284>)
 8004ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cac:	099b      	lsrs	r3, r3, #6
 8004cae:	3301      	adds	r3, #1
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	6812      	ldr	r2, [r2, #0]
 8004cb4:	430b      	orrs	r3, r1
 8004cb6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004cc2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	495c      	ldr	r1, [pc, #368]	@ (8004e3c <HAL_I2C_Init+0x274>)
 8004ccc:	428b      	cmp	r3, r1
 8004cce:	d819      	bhi.n	8004d04 <HAL_I2C_Init+0x13c>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	1e59      	subs	r1, r3, #1
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	005b      	lsls	r3, r3, #1
 8004cda:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cde:	1c59      	adds	r1, r3, #1
 8004ce0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004ce4:	400b      	ands	r3, r1
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00a      	beq.n	8004d00 <HAL_I2C_Init+0x138>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	1e59      	subs	r1, r3, #1
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	005b      	lsls	r3, r3, #1
 8004cf4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cfe:	e051      	b.n	8004da4 <HAL_I2C_Init+0x1dc>
 8004d00:	2304      	movs	r3, #4
 8004d02:	e04f      	b.n	8004da4 <HAL_I2C_Init+0x1dc>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d111      	bne.n	8004d30 <HAL_I2C_Init+0x168>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	1e58      	subs	r0, r3, #1
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6859      	ldr	r1, [r3, #4]
 8004d14:	460b      	mov	r3, r1
 8004d16:	005b      	lsls	r3, r3, #1
 8004d18:	440b      	add	r3, r1
 8004d1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d1e:	3301      	adds	r3, #1
 8004d20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	bf0c      	ite	eq
 8004d28:	2301      	moveq	r3, #1
 8004d2a:	2300      	movne	r3, #0
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	e012      	b.n	8004d56 <HAL_I2C_Init+0x18e>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	1e58      	subs	r0, r3, #1
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6859      	ldr	r1, [r3, #4]
 8004d38:	460b      	mov	r3, r1
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	440b      	add	r3, r1
 8004d3e:	0099      	lsls	r1, r3, #2
 8004d40:	440b      	add	r3, r1
 8004d42:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d46:	3301      	adds	r3, #1
 8004d48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	bf0c      	ite	eq
 8004d50:	2301      	moveq	r3, #1
 8004d52:	2300      	movne	r3, #0
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <HAL_I2C_Init+0x196>
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e022      	b.n	8004da4 <HAL_I2C_Init+0x1dc>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10e      	bne.n	8004d84 <HAL_I2C_Init+0x1bc>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	1e58      	subs	r0, r3, #1
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6859      	ldr	r1, [r3, #4]
 8004d6e:	460b      	mov	r3, r1
 8004d70:	005b      	lsls	r3, r3, #1
 8004d72:	440b      	add	r3, r1
 8004d74:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d78:	3301      	adds	r3, #1
 8004d7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d82:	e00f      	b.n	8004da4 <HAL_I2C_Init+0x1dc>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	1e58      	subs	r0, r3, #1
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6859      	ldr	r1, [r3, #4]
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	440b      	add	r3, r1
 8004d92:	0099      	lsls	r1, r3, #2
 8004d94:	440b      	add	r3, r1
 8004d96:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004da0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004da4:	6879      	ldr	r1, [r7, #4]
 8004da6:	6809      	ldr	r1, [r1, #0]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	69da      	ldr	r2, [r3, #28]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004dd2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	6911      	ldr	r1, [r2, #16]
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	68d2      	ldr	r2, [r2, #12]
 8004dde:	4311      	orrs	r1, r2
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	6812      	ldr	r2, [r2, #0]
 8004de4:	430b      	orrs	r3, r1
 8004de6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	695a      	ldr	r2, [r3, #20]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	430a      	orrs	r2, r1
 8004e02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f042 0201 	orr.w	r2, r2, #1
 8004e12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	000186a0 	.word	0x000186a0
 8004e40:	001e847f 	.word	0x001e847f
 8004e44:	003d08ff 	.word	0x003d08ff
 8004e48:	431bde83 	.word	0x431bde83
 8004e4c:	10624dd3 	.word	0x10624dd3

08004e50 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b088      	sub	sp, #32
 8004e54:	af02      	add	r7, sp, #8
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	607a      	str	r2, [r7, #4]
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	817b      	strh	r3, [r7, #10]
 8004e60:	4613      	mov	r3, r2
 8004e62:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e64:	f7fe fc7a 	bl	800375c <HAL_GetTick>
 8004e68:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	2b20      	cmp	r3, #32
 8004e74:	f040 80e0 	bne.w	8005038 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	9300      	str	r3, [sp, #0]
 8004e7c:	2319      	movs	r3, #25
 8004e7e:	2201      	movs	r2, #1
 8004e80:	4970      	ldr	r1, [pc, #448]	@ (8005044 <HAL_I2C_Master_Transmit+0x1f4>)
 8004e82:	68f8      	ldr	r0, [r7, #12]
 8004e84:	f000 fc9e 	bl	80057c4 <I2C_WaitOnFlagUntilTimeout>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d001      	beq.n	8004e92 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004e8e:	2302      	movs	r3, #2
 8004e90:	e0d3      	b.n	800503a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d101      	bne.n	8004ea0 <HAL_I2C_Master_Transmit+0x50>
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	e0cc      	b.n	800503a <HAL_I2C_Master_Transmit+0x1ea>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d007      	beq.n	8004ec6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f042 0201 	orr.w	r2, r2, #1
 8004ec4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ed4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2221      	movs	r2, #33	@ 0x21
 8004eda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2210      	movs	r2, #16
 8004ee2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	893a      	ldrh	r2, [r7, #8]
 8004ef6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004efc:	b29a      	uxth	r2, r3
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	4a50      	ldr	r2, [pc, #320]	@ (8005048 <HAL_I2C_Master_Transmit+0x1f8>)
 8004f06:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004f08:	8979      	ldrh	r1, [r7, #10]
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	6a3a      	ldr	r2, [r7, #32]
 8004f0e:	68f8      	ldr	r0, [r7, #12]
 8004f10:	f000 fb08 	bl	8005524 <I2C_MasterRequestWrite>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d001      	beq.n	8004f1e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e08d      	b.n	800503a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f1e:	2300      	movs	r3, #0
 8004f20:	613b      	str	r3, [r7, #16]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	695b      	ldr	r3, [r3, #20]
 8004f28:	613b      	str	r3, [r7, #16]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	613b      	str	r3, [r7, #16]
 8004f32:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004f34:	e066      	b.n	8005004 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	6a39      	ldr	r1, [r7, #32]
 8004f3a:	68f8      	ldr	r0, [r7, #12]
 8004f3c:	f000 fd5c 	bl	80059f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00d      	beq.n	8004f62 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f4a:	2b04      	cmp	r3, #4
 8004f4c:	d107      	bne.n	8004f5e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f5c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e06b      	b.n	800503a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f66:	781a      	ldrb	r2, [r3, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f72:	1c5a      	adds	r2, r3, #1
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	695b      	ldr	r3, [r3, #20]
 8004f98:	f003 0304 	and.w	r3, r3, #4
 8004f9c:	2b04      	cmp	r3, #4
 8004f9e:	d11b      	bne.n	8004fd8 <HAL_I2C_Master_Transmit+0x188>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d017      	beq.n	8004fd8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fac:	781a      	ldrb	r2, [r3, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb8:	1c5a      	adds	r2, r3, #1
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	6a39      	ldr	r1, [r7, #32]
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f000 fd53 	bl	8005a88 <I2C_WaitOnBTFFlagUntilTimeout>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d00d      	beq.n	8005004 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fec:	2b04      	cmp	r3, #4
 8004fee:	d107      	bne.n	8005000 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ffe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e01a      	b.n	800503a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005008:	2b00      	cmp	r3, #0
 800500a:	d194      	bne.n	8004f36 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800501a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2220      	movs	r2, #32
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005034:	2300      	movs	r3, #0
 8005036:	e000      	b.n	800503a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005038:	2302      	movs	r3, #2
  }
}
 800503a:	4618      	mov	r0, r3
 800503c:	3718      	adds	r7, #24
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	00100002 	.word	0x00100002
 8005048:	ffff0000 	.word	0xffff0000

0800504c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b08c      	sub	sp, #48	@ 0x30
 8005050:	af02      	add	r7, sp, #8
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	607a      	str	r2, [r7, #4]
 8005056:	461a      	mov	r2, r3
 8005058:	460b      	mov	r3, r1
 800505a:	817b      	strh	r3, [r7, #10]
 800505c:	4613      	mov	r3, r2
 800505e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8005060:	2300      	movs	r3, #0
 8005062:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005064:	f7fe fb7a 	bl	800375c <HAL_GetTick>
 8005068:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005070:	b2db      	uxtb	r3, r3
 8005072:	2b20      	cmp	r3, #32
 8005074:	f040 824b 	bne.w	800550e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507a:	9300      	str	r3, [sp, #0]
 800507c:	2319      	movs	r3, #25
 800507e:	2201      	movs	r2, #1
 8005080:	497f      	ldr	r1, [pc, #508]	@ (8005280 <HAL_I2C_Master_Receive+0x234>)
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f000 fb9e 	bl	80057c4 <I2C_WaitOnFlagUntilTimeout>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d001      	beq.n	8005092 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800508e:	2302      	movs	r3, #2
 8005090:	e23e      	b.n	8005510 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005098:	2b01      	cmp	r3, #1
 800509a:	d101      	bne.n	80050a0 <HAL_I2C_Master_Receive+0x54>
 800509c:	2302      	movs	r3, #2
 800509e:	e237      	b.n	8005510 <HAL_I2C_Master_Receive+0x4c4>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d007      	beq.n	80050c6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f042 0201 	orr.w	r2, r2, #1
 80050c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80050d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2222      	movs	r2, #34	@ 0x22
 80050da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2210      	movs	r2, #16
 80050e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	893a      	ldrh	r2, [r7, #8]
 80050f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	4a5f      	ldr	r2, [pc, #380]	@ (8005284 <HAL_I2C_Master_Receive+0x238>)
 8005106:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005108:	8979      	ldrh	r1, [r7, #10]
 800510a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800510c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f000 fa8a 	bl	8005628 <I2C_MasterRequestRead>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d001      	beq.n	800511e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e1f8      	b.n	8005510 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005122:	2b00      	cmp	r3, #0
 8005124:	d113      	bne.n	800514e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005126:	2300      	movs	r3, #0
 8005128:	61fb      	str	r3, [r7, #28]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	695b      	ldr	r3, [r3, #20]
 8005130:	61fb      	str	r3, [r7, #28]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	61fb      	str	r3, [r7, #28]
 800513a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800514a:	601a      	str	r2, [r3, #0]
 800514c:	e1cc      	b.n	80054e8 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005152:	2b01      	cmp	r3, #1
 8005154:	d11e      	bne.n	8005194 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005164:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005166:	b672      	cpsid	i
}
 8005168:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800516a:	2300      	movs	r3, #0
 800516c:	61bb      	str	r3, [r7, #24]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	61bb      	str	r3, [r7, #24]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	61bb      	str	r3, [r7, #24]
 800517e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800518e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005190:	b662      	cpsie	i
}
 8005192:	e035      	b.n	8005200 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005198:	2b02      	cmp	r3, #2
 800519a:	d11e      	bne.n	80051da <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051aa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80051ac:	b672      	cpsid	i
}
 80051ae:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051b0:	2300      	movs	r3, #0
 80051b2:	617b      	str	r3, [r7, #20]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	617b      	str	r3, [r7, #20]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	617b      	str	r3, [r7, #20]
 80051c4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80051d6:	b662      	cpsie	i
}
 80051d8:	e012      	b.n	8005200 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80051e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051ea:	2300      	movs	r3, #0
 80051ec:	613b      	str	r3, [r7, #16]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	695b      	ldr	r3, [r3, #20]
 80051f4:	613b      	str	r3, [r7, #16]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	613b      	str	r3, [r7, #16]
 80051fe:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005200:	e172      	b.n	80054e8 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005206:	2b03      	cmp	r3, #3
 8005208:	f200 811f 	bhi.w	800544a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005210:	2b01      	cmp	r3, #1
 8005212:	d123      	bne.n	800525c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005214:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005216:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f000 fc7d 	bl	8005b18 <I2C_WaitOnRXNEFlagUntilTimeout>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d001      	beq.n	8005228 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e173      	b.n	8005510 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	691a      	ldr	r2, [r3, #16]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005232:	b2d2      	uxtb	r2, r2
 8005234:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800523a:	1c5a      	adds	r2, r3, #1
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005244:	3b01      	subs	r3, #1
 8005246:	b29a      	uxth	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005250:	b29b      	uxth	r3, r3
 8005252:	3b01      	subs	r3, #1
 8005254:	b29a      	uxth	r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800525a:	e145      	b.n	80054e8 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005260:	2b02      	cmp	r3, #2
 8005262:	d152      	bne.n	800530a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005266:	9300      	str	r3, [sp, #0]
 8005268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800526a:	2200      	movs	r2, #0
 800526c:	4906      	ldr	r1, [pc, #24]	@ (8005288 <HAL_I2C_Master_Receive+0x23c>)
 800526e:	68f8      	ldr	r0, [r7, #12]
 8005270:	f000 faa8 	bl	80057c4 <I2C_WaitOnFlagUntilTimeout>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d008      	beq.n	800528c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e148      	b.n	8005510 <HAL_I2C_Master_Receive+0x4c4>
 800527e:	bf00      	nop
 8005280:	00100002 	.word	0x00100002
 8005284:	ffff0000 	.word	0xffff0000
 8005288:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800528c:	b672      	cpsid	i
}
 800528e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800529e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	691a      	ldr	r2, [r3, #16]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052aa:	b2d2      	uxtb	r2, r2
 80052ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b2:	1c5a      	adds	r2, r3, #1
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052bc:	3b01      	subs	r3, #1
 80052be:	b29a      	uxth	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	3b01      	subs	r3, #1
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80052d2:	b662      	cpsie	i
}
 80052d4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	691a      	ldr	r2, [r3, #16]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e0:	b2d2      	uxtb	r2, r2
 80052e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e8:	1c5a      	adds	r2, r3, #1
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052f2:	3b01      	subs	r3, #1
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052fe:	b29b      	uxth	r3, r3
 8005300:	3b01      	subs	r3, #1
 8005302:	b29a      	uxth	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005308:	e0ee      	b.n	80054e8 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800530a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530c:	9300      	str	r3, [sp, #0]
 800530e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005310:	2200      	movs	r2, #0
 8005312:	4981      	ldr	r1, [pc, #516]	@ (8005518 <HAL_I2C_Master_Receive+0x4cc>)
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f000 fa55 	bl	80057c4 <I2C_WaitOnFlagUntilTimeout>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d001      	beq.n	8005324 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e0f5      	b.n	8005510 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005332:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005334:	b672      	cpsid	i
}
 8005336:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	691a      	ldr	r2, [r3, #16]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005342:	b2d2      	uxtb	r2, r2
 8005344:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800534a:	1c5a      	adds	r2, r3, #1
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005354:	3b01      	subs	r3, #1
 8005356:	b29a      	uxth	r2, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005360:	b29b      	uxth	r3, r3
 8005362:	3b01      	subs	r3, #1
 8005364:	b29a      	uxth	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800536a:	4b6c      	ldr	r3, [pc, #432]	@ (800551c <HAL_I2C_Master_Receive+0x4d0>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	08db      	lsrs	r3, r3, #3
 8005370:	4a6b      	ldr	r2, [pc, #428]	@ (8005520 <HAL_I2C_Master_Receive+0x4d4>)
 8005372:	fba2 2303 	umull	r2, r3, r2, r3
 8005376:	0a1a      	lsrs	r2, r3, #8
 8005378:	4613      	mov	r3, r2
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	4413      	add	r3, r2
 800537e:	00da      	lsls	r2, r3, #3
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005384:	6a3b      	ldr	r3, [r7, #32]
 8005386:	3b01      	subs	r3, #1
 8005388:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800538a:	6a3b      	ldr	r3, [r7, #32]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d118      	bne.n	80053c2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2220      	movs	r2, #32
 800539a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053aa:	f043 0220 	orr.w	r2, r3, #32
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80053b2:	b662      	cpsie	i
}
 80053b4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e0a6      	b.n	8005510 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	695b      	ldr	r3, [r3, #20]
 80053c8:	f003 0304 	and.w	r3, r3, #4
 80053cc:	2b04      	cmp	r3, #4
 80053ce:	d1d9      	bne.n	8005384 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	691a      	ldr	r2, [r3, #16]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ea:	b2d2      	uxtb	r2, r2
 80053ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f2:	1c5a      	adds	r2, r3, #1
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053fc:	3b01      	subs	r3, #1
 80053fe:	b29a      	uxth	r2, r3
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005408:	b29b      	uxth	r3, r3
 800540a:	3b01      	subs	r3, #1
 800540c:	b29a      	uxth	r2, r3
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005412:	b662      	cpsie	i
}
 8005414:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	691a      	ldr	r2, [r3, #16]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005420:	b2d2      	uxtb	r2, r2
 8005422:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005428:	1c5a      	adds	r2, r3, #1
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005432:	3b01      	subs	r3, #1
 8005434:	b29a      	uxth	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800543e:	b29b      	uxth	r3, r3
 8005440:	3b01      	subs	r3, #1
 8005442:	b29a      	uxth	r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005448:	e04e      	b.n	80054e8 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800544a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800544c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	f000 fb62 	bl	8005b18 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d001      	beq.n	800545e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e058      	b.n	8005510 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	691a      	ldr	r2, [r3, #16]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005468:	b2d2      	uxtb	r2, r2
 800546a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005470:	1c5a      	adds	r2, r3, #1
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800547a:	3b01      	subs	r3, #1
 800547c:	b29a      	uxth	r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005486:	b29b      	uxth	r3, r3
 8005488:	3b01      	subs	r3, #1
 800548a:	b29a      	uxth	r2, r3
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	f003 0304 	and.w	r3, r3, #4
 800549a:	2b04      	cmp	r3, #4
 800549c:	d124      	bne.n	80054e8 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054a2:	2b03      	cmp	r3, #3
 80054a4:	d107      	bne.n	80054b6 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054b4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	691a      	ldr	r2, [r3, #16]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c0:	b2d2      	uxtb	r2, r2
 80054c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c8:	1c5a      	adds	r2, r3, #1
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054d2:	3b01      	subs	r3, #1
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054de:	b29b      	uxth	r3, r3
 80054e0:	3b01      	subs	r3, #1
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f47f ae88 	bne.w	8005202 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2220      	movs	r2, #32
 80054f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800550a:	2300      	movs	r3, #0
 800550c:	e000      	b.n	8005510 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800550e:	2302      	movs	r3, #2
  }
}
 8005510:	4618      	mov	r0, r3
 8005512:	3728      	adds	r7, #40	@ 0x28
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	00010004 	.word	0x00010004
 800551c:	20000008 	.word	0x20000008
 8005520:	14f8b589 	.word	0x14f8b589

08005524 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b088      	sub	sp, #32
 8005528:	af02      	add	r7, sp, #8
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	607a      	str	r2, [r7, #4]
 800552e:	603b      	str	r3, [r7, #0]
 8005530:	460b      	mov	r3, r1
 8005532:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005538:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	2b08      	cmp	r3, #8
 800553e:	d006      	beq.n	800554e <I2C_MasterRequestWrite+0x2a>
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	2b01      	cmp	r3, #1
 8005544:	d003      	beq.n	800554e <I2C_MasterRequestWrite+0x2a>
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800554c:	d108      	bne.n	8005560 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800555c:	601a      	str	r2, [r3, #0]
 800555e:	e00b      	b.n	8005578 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005564:	2b12      	cmp	r3, #18
 8005566:	d107      	bne.n	8005578 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005576:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	9300      	str	r3, [sp, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005584:	68f8      	ldr	r0, [r7, #12]
 8005586:	f000 f91d 	bl	80057c4 <I2C_WaitOnFlagUntilTimeout>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00d      	beq.n	80055ac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800559a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800559e:	d103      	bne.n	80055a8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055a6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80055a8:	2303      	movs	r3, #3
 80055aa:	e035      	b.n	8005618 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80055b4:	d108      	bne.n	80055c8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80055b6:	897b      	ldrh	r3, [r7, #10]
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	461a      	mov	r2, r3
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80055c4:	611a      	str	r2, [r3, #16]
 80055c6:	e01b      	b.n	8005600 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80055c8:	897b      	ldrh	r3, [r7, #10]
 80055ca:	11db      	asrs	r3, r3, #7
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	f003 0306 	and.w	r3, r3, #6
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	f063 030f 	orn	r3, r3, #15
 80055d8:	b2da      	uxtb	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	490e      	ldr	r1, [pc, #56]	@ (8005620 <I2C_MasterRequestWrite+0xfc>)
 80055e6:	68f8      	ldr	r0, [r7, #12]
 80055e8:	f000 f966 	bl	80058b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d001      	beq.n	80055f6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e010      	b.n	8005618 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80055f6:	897b      	ldrh	r3, [r7, #10]
 80055f8:	b2da      	uxtb	r2, r3
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	4907      	ldr	r1, [pc, #28]	@ (8005624 <I2C_MasterRequestWrite+0x100>)
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f000 f956 	bl	80058b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d001      	beq.n	8005616 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e000      	b.n	8005618 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005616:	2300      	movs	r3, #0
}
 8005618:	4618      	mov	r0, r3
 800561a:	3718      	adds	r7, #24
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	00010008 	.word	0x00010008
 8005624:	00010002 	.word	0x00010002

08005628 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b088      	sub	sp, #32
 800562c:	af02      	add	r7, sp, #8
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	607a      	str	r2, [r7, #4]
 8005632:	603b      	str	r3, [r7, #0]
 8005634:	460b      	mov	r3, r1
 8005636:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800563c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800564c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	2b08      	cmp	r3, #8
 8005652:	d006      	beq.n	8005662 <I2C_MasterRequestRead+0x3a>
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	2b01      	cmp	r3, #1
 8005658:	d003      	beq.n	8005662 <I2C_MasterRequestRead+0x3a>
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005660:	d108      	bne.n	8005674 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005670:	601a      	str	r2, [r3, #0]
 8005672:	e00b      	b.n	800568c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005678:	2b11      	cmp	r3, #17
 800567a:	d107      	bne.n	800568c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800568a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	9300      	str	r3, [sp, #0]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f000 f893 	bl	80057c4 <I2C_WaitOnFlagUntilTimeout>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d00d      	beq.n	80056c0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056b2:	d103      	bne.n	80056bc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056ba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e079      	b.n	80057b4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056c8:	d108      	bne.n	80056dc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80056ca:	897b      	ldrh	r3, [r7, #10]
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	f043 0301 	orr.w	r3, r3, #1
 80056d2:	b2da      	uxtb	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	611a      	str	r2, [r3, #16]
 80056da:	e05f      	b.n	800579c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80056dc:	897b      	ldrh	r3, [r7, #10]
 80056de:	11db      	asrs	r3, r3, #7
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	f003 0306 	and.w	r3, r3, #6
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	f063 030f 	orn	r3, r3, #15
 80056ec:	b2da      	uxtb	r2, r3
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	4930      	ldr	r1, [pc, #192]	@ (80057bc <I2C_MasterRequestRead+0x194>)
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f000 f8dc 	bl	80058b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d001      	beq.n	800570a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e054      	b.n	80057b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800570a:	897b      	ldrh	r3, [r7, #10]
 800570c:	b2da      	uxtb	r2, r3
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	4929      	ldr	r1, [pc, #164]	@ (80057c0 <I2C_MasterRequestRead+0x198>)
 800571a:	68f8      	ldr	r0, [r7, #12]
 800571c:	f000 f8cc 	bl	80058b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d001      	beq.n	800572a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e044      	b.n	80057b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800572a:	2300      	movs	r3, #0
 800572c:	613b      	str	r3, [r7, #16]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	695b      	ldr	r3, [r3, #20]
 8005734:	613b      	str	r3, [r7, #16]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	613b      	str	r3, [r7, #16]
 800573e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800574e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	9300      	str	r3, [sp, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800575c:	68f8      	ldr	r0, [r7, #12]
 800575e:	f000 f831 	bl	80057c4 <I2C_WaitOnFlagUntilTimeout>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d00d      	beq.n	8005784 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005772:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005776:	d103      	bne.n	8005780 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800577e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8005780:	2303      	movs	r3, #3
 8005782:	e017      	b.n	80057b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005784:	897b      	ldrh	r3, [r7, #10]
 8005786:	11db      	asrs	r3, r3, #7
 8005788:	b2db      	uxtb	r3, r3
 800578a:	f003 0306 	and.w	r3, r3, #6
 800578e:	b2db      	uxtb	r3, r3
 8005790:	f063 030e 	orn	r3, r3, #14
 8005794:	b2da      	uxtb	r2, r3
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	4907      	ldr	r1, [pc, #28]	@ (80057c0 <I2C_MasterRequestRead+0x198>)
 80057a2:	68f8      	ldr	r0, [r7, #12]
 80057a4:	f000 f888 	bl	80058b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d001      	beq.n	80057b2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e000      	b.n	80057b4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3718      	adds	r7, #24
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	00010008 	.word	0x00010008
 80057c0:	00010002 	.word	0x00010002

080057c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	603b      	str	r3, [r7, #0]
 80057d0:	4613      	mov	r3, r2
 80057d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057d4:	e048      	b.n	8005868 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057dc:	d044      	beq.n	8005868 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057de:	f7fd ffbd 	bl	800375c <HAL_GetTick>
 80057e2:	4602      	mov	r2, r0
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	683a      	ldr	r2, [r7, #0]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d302      	bcc.n	80057f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d139      	bne.n	8005868 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	0c1b      	lsrs	r3, r3, #16
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d10d      	bne.n	800581a <I2C_WaitOnFlagUntilTimeout+0x56>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	695b      	ldr	r3, [r3, #20]
 8005804:	43da      	mvns	r2, r3
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	4013      	ands	r3, r2
 800580a:	b29b      	uxth	r3, r3
 800580c:	2b00      	cmp	r3, #0
 800580e:	bf0c      	ite	eq
 8005810:	2301      	moveq	r3, #1
 8005812:	2300      	movne	r3, #0
 8005814:	b2db      	uxtb	r3, r3
 8005816:	461a      	mov	r2, r3
 8005818:	e00c      	b.n	8005834 <I2C_WaitOnFlagUntilTimeout+0x70>
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	699b      	ldr	r3, [r3, #24]
 8005820:	43da      	mvns	r2, r3
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	4013      	ands	r3, r2
 8005826:	b29b      	uxth	r3, r3
 8005828:	2b00      	cmp	r3, #0
 800582a:	bf0c      	ite	eq
 800582c:	2301      	moveq	r3, #1
 800582e:	2300      	movne	r3, #0
 8005830:	b2db      	uxtb	r3, r3
 8005832:	461a      	mov	r2, r3
 8005834:	79fb      	ldrb	r3, [r7, #7]
 8005836:	429a      	cmp	r2, r3
 8005838:	d116      	bne.n	8005868 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2220      	movs	r2, #32
 8005844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005854:	f043 0220 	orr.w	r2, r3, #32
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e023      	b.n	80058b0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	0c1b      	lsrs	r3, r3, #16
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b01      	cmp	r3, #1
 8005870:	d10d      	bne.n	800588e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	695b      	ldr	r3, [r3, #20]
 8005878:	43da      	mvns	r2, r3
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	4013      	ands	r3, r2
 800587e:	b29b      	uxth	r3, r3
 8005880:	2b00      	cmp	r3, #0
 8005882:	bf0c      	ite	eq
 8005884:	2301      	moveq	r3, #1
 8005886:	2300      	movne	r3, #0
 8005888:	b2db      	uxtb	r3, r3
 800588a:	461a      	mov	r2, r3
 800588c:	e00c      	b.n	80058a8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	699b      	ldr	r3, [r3, #24]
 8005894:	43da      	mvns	r2, r3
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	4013      	ands	r3, r2
 800589a:	b29b      	uxth	r3, r3
 800589c:	2b00      	cmp	r3, #0
 800589e:	bf0c      	ite	eq
 80058a0:	2301      	moveq	r3, #1
 80058a2:	2300      	movne	r3, #0
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	461a      	mov	r2, r3
 80058a8:	79fb      	ldrb	r3, [r7, #7]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d093      	beq.n	80057d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3710      	adds	r7, #16
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	607a      	str	r2, [r7, #4]
 80058c4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80058c6:	e071      	b.n	80059ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058d6:	d123      	bne.n	8005920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058e6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80058f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2200      	movs	r2, #0
 80058f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2220      	movs	r2, #32
 80058fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800590c:	f043 0204 	orr.w	r2, r3, #4
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e067      	b.n	80059f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005926:	d041      	beq.n	80059ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005928:	f7fd ff18 	bl	800375c <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	429a      	cmp	r2, r3
 8005936:	d302      	bcc.n	800593e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d136      	bne.n	80059ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	0c1b      	lsrs	r3, r3, #16
 8005942:	b2db      	uxtb	r3, r3
 8005944:	2b01      	cmp	r3, #1
 8005946:	d10c      	bne.n	8005962 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	43da      	mvns	r2, r3
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	4013      	ands	r3, r2
 8005954:	b29b      	uxth	r3, r3
 8005956:	2b00      	cmp	r3, #0
 8005958:	bf14      	ite	ne
 800595a:	2301      	movne	r3, #1
 800595c:	2300      	moveq	r3, #0
 800595e:	b2db      	uxtb	r3, r3
 8005960:	e00b      	b.n	800597a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	43da      	mvns	r2, r3
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	4013      	ands	r3, r2
 800596e:	b29b      	uxth	r3, r3
 8005970:	2b00      	cmp	r3, #0
 8005972:	bf14      	ite	ne
 8005974:	2301      	movne	r3, #1
 8005976:	2300      	moveq	r3, #0
 8005978:	b2db      	uxtb	r3, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d016      	beq.n	80059ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2200      	movs	r2, #0
 8005982:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2220      	movs	r2, #32
 8005988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005998:	f043 0220 	orr.w	r2, r3, #32
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e021      	b.n	80059f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	0c1b      	lsrs	r3, r3, #16
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d10c      	bne.n	80059d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	695b      	ldr	r3, [r3, #20]
 80059bc:	43da      	mvns	r2, r3
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	4013      	ands	r3, r2
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	bf14      	ite	ne
 80059c8:	2301      	movne	r3, #1
 80059ca:	2300      	moveq	r3, #0
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	e00b      	b.n	80059e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	699b      	ldr	r3, [r3, #24]
 80059d6:	43da      	mvns	r2, r3
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	4013      	ands	r3, r2
 80059dc:	b29b      	uxth	r3, r3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	bf14      	ite	ne
 80059e2:	2301      	movne	r3, #1
 80059e4:	2300      	moveq	r3, #0
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f47f af6d 	bne.w	80058c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80059ee:	2300      	movs	r3, #0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3710      	adds	r7, #16
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a04:	e034      	b.n	8005a70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a06:	68f8      	ldr	r0, [r7, #12]
 8005a08:	f000 f8e3 	bl	8005bd2 <I2C_IsAcknowledgeFailed>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d001      	beq.n	8005a16 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e034      	b.n	8005a80 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a1c:	d028      	beq.n	8005a70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a1e:	f7fd fe9d 	bl	800375c <HAL_GetTick>
 8005a22:	4602      	mov	r2, r0
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	68ba      	ldr	r2, [r7, #8]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d302      	bcc.n	8005a34 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d11d      	bne.n	8005a70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a3e:	2b80      	cmp	r3, #128	@ 0x80
 8005a40:	d016      	beq.n	8005a70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2200      	movs	r2, #0
 8005a46:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2220      	movs	r2, #32
 8005a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a5c:	f043 0220 	orr.w	r2, r3, #32
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e007      	b.n	8005a80 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	695b      	ldr	r3, [r3, #20]
 8005a76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a7a:	2b80      	cmp	r3, #128	@ 0x80
 8005a7c:	d1c3      	bne.n	8005a06 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3710      	adds	r7, #16
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a94:	e034      	b.n	8005b00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a96:	68f8      	ldr	r0, [r7, #12]
 8005a98:	f000 f89b 	bl	8005bd2 <I2C_IsAcknowledgeFailed>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d001      	beq.n	8005aa6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e034      	b.n	8005b10 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aac:	d028      	beq.n	8005b00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aae:	f7fd fe55 	bl	800375c <HAL_GetTick>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	68ba      	ldr	r2, [r7, #8]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d302      	bcc.n	8005ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d11d      	bne.n	8005b00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	695b      	ldr	r3, [r3, #20]
 8005aca:	f003 0304 	and.w	r3, r3, #4
 8005ace:	2b04      	cmp	r3, #4
 8005ad0:	d016      	beq.n	8005b00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2220      	movs	r2, #32
 8005adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aec:	f043 0220 	orr.w	r2, r3, #32
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e007      	b.n	8005b10 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	695b      	ldr	r3, [r3, #20]
 8005b06:	f003 0304 	and.w	r3, r3, #4
 8005b0a:	2b04      	cmp	r3, #4
 8005b0c:	d1c3      	bne.n	8005a96 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3710      	adds	r7, #16
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b24:	e049      	b.n	8005bba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	695b      	ldr	r3, [r3, #20]
 8005b2c:	f003 0310 	and.w	r3, r3, #16
 8005b30:	2b10      	cmp	r3, #16
 8005b32:	d119      	bne.n	8005b68 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f06f 0210 	mvn.w	r2, #16
 8005b3c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2200      	movs	r2, #0
 8005b42:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2220      	movs	r2, #32
 8005b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e030      	b.n	8005bca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b68:	f7fd fdf8 	bl	800375c <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	68ba      	ldr	r2, [r7, #8]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d302      	bcc.n	8005b7e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d11d      	bne.n	8005bba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	695b      	ldr	r3, [r3, #20]
 8005b84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b88:	2b40      	cmp	r3, #64	@ 0x40
 8005b8a:	d016      	beq.n	8005bba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2220      	movs	r2, #32
 8005b96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ba6:	f043 0220 	orr.w	r2, r3, #32
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e007      	b.n	8005bca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	695b      	ldr	r3, [r3, #20]
 8005bc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bc4:	2b40      	cmp	r3, #64	@ 0x40
 8005bc6:	d1ae      	bne.n	8005b26 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3710      	adds	r7, #16
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005bd2:	b480      	push	{r7}
 8005bd4:	b083      	sub	sp, #12
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	695b      	ldr	r3, [r3, #20]
 8005be0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005be4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005be8:	d11b      	bne.n	8005c22 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005bf2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2220      	movs	r2, #32
 8005bfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c0e:	f043 0204 	orr.w	r2, r3, #4
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e000      	b.n	8005c24 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bc80      	pop	{r7}
 8005c2c:	4770      	bx	lr
	...

08005c30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b086      	sub	sp, #24
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e272      	b.n	8006128 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0301 	and.w	r3, r3, #1
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	f000 8087 	beq.w	8005d5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c50:	4b92      	ldr	r3, [pc, #584]	@ (8005e9c <HAL_RCC_OscConfig+0x26c>)
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	f003 030c 	and.w	r3, r3, #12
 8005c58:	2b04      	cmp	r3, #4
 8005c5a:	d00c      	beq.n	8005c76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005c5c:	4b8f      	ldr	r3, [pc, #572]	@ (8005e9c <HAL_RCC_OscConfig+0x26c>)
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	f003 030c 	and.w	r3, r3, #12
 8005c64:	2b08      	cmp	r3, #8
 8005c66:	d112      	bne.n	8005c8e <HAL_RCC_OscConfig+0x5e>
 8005c68:	4b8c      	ldr	r3, [pc, #560]	@ (8005e9c <HAL_RCC_OscConfig+0x26c>)
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c74:	d10b      	bne.n	8005c8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c76:	4b89      	ldr	r3, [pc, #548]	@ (8005e9c <HAL_RCC_OscConfig+0x26c>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d06c      	beq.n	8005d5c <HAL_RCC_OscConfig+0x12c>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d168      	bne.n	8005d5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e24c      	b.n	8006128 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c96:	d106      	bne.n	8005ca6 <HAL_RCC_OscConfig+0x76>
 8005c98:	4b80      	ldr	r3, [pc, #512]	@ (8005e9c <HAL_RCC_OscConfig+0x26c>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a7f      	ldr	r2, [pc, #508]	@ (8005e9c <HAL_RCC_OscConfig+0x26c>)
 8005c9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ca2:	6013      	str	r3, [r2, #0]
 8005ca4:	e02e      	b.n	8005d04 <HAL_RCC_OscConfig+0xd4>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d10c      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x98>
 8005cae:	4b7b      	ldr	r3, [pc, #492]	@ (8005e9c <HAL_RCC_OscConfig+0x26c>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a7a      	ldr	r2, [pc, #488]	@ (8005e9c <HAL_RCC_OscConfig+0x26c>)
 8005cb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cb8:	6013      	str	r3, [r2, #0]
 8005cba:	4b78      	ldr	r3, [pc, #480]	@ (8005e9c <HAL_RCC_OscConfig+0x26c>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a77      	ldr	r2, [pc, #476]	@ (8005e9c <HAL_RCC_OscConfig+0x26c>)
 8005cc0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005cc4:	6013      	str	r3, [r2, #0]
 8005cc6:	e01d      	b.n	8005d04 <HAL_RCC_OscConfig+0xd4>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005cd0:	d10c      	bne.n	8005cec <HAL_RCC_OscConfig+0xbc>
 8005cd2:	4b72      	ldr	r3, [pc, #456]	@ (8005e9c <HAL_RCC_OscConfig+0x26c>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a71      	ldr	r2, [pc, #452]	@ (8005e9c <HAL_RCC_OscConfig+0x26c>)
 8005cd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005cdc:	6013      	str	r3, [r2, #0]
 8005cde:	4b6f      	ldr	r3, [pc, #444]	@ (8005e9c <HAL_RCC_OscConfig+0x26c>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a6e      	ldr	r2, [pc, #440]	@ (8005e9c <HAL_RCC_OscConfig+0x26c>)
 8005ce4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ce8:	6013      	str	r3, [r2, #0]
 8005cea:	e00b      	b.n	8005d04 <HAL_RCC_OscConfig+0xd4>
 8005cec:	4b6b      	ldr	r3, [pc, #428]	@ (8005e9c <HAL_RCC_OscConfig+0x26c>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a6a      	ldr	r2, [pc, #424]	@ (8005e9c <HAL_RCC_OscConfig+0x26c>)
 8005cf2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cf6:	6013      	str	r3, [r2, #0]
 8005cf8:	4b68      	ldr	r3, [pc, #416]	@ (8005e9c <HAL_RCC_OscConfig+0x26c>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a67      	ldr	r2, [pc, #412]	@ (8005e9c <HAL_RCC_OscConfig+0x26c>)
 8005cfe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d013      	beq.n	8005d34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d0c:	f7fd fd26 	bl	800375c <HAL_GetTick>
 8005d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d12:	e008      	b.n	8005d26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d14:	f7fd fd22 	bl	800375c <HAL_GetTick>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	2b64      	cmp	r3, #100	@ 0x64
 8005d20:	d901      	bls.n	8005d26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e200      	b.n	8006128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d26:	4b5d      	ldr	r3, [pc, #372]	@ (8005e9c <HAL_RCC_OscConfig+0x26c>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d0f0      	beq.n	8005d14 <HAL_RCC_OscConfig+0xe4>
 8005d32:	e014      	b.n	8005d5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d34:	f7fd fd12 	bl	800375c <HAL_GetTick>
 8005d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d3a:	e008      	b.n	8005d4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d3c:	f7fd fd0e 	bl	800375c <HAL_GetTick>
 8005d40:	4602      	mov	r2, r0
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	2b64      	cmp	r3, #100	@ 0x64
 8005d48:	d901      	bls.n	8005d4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e1ec      	b.n	8006128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d4e:	4b53      	ldr	r3, [pc, #332]	@ (8005e9c <HAL_RCC_OscConfig+0x26c>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1f0      	bne.n	8005d3c <HAL_RCC_OscConfig+0x10c>
 8005d5a:	e000      	b.n	8005d5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 0302 	and.w	r3, r3, #2
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d063      	beq.n	8005e32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d6a:	4b4c      	ldr	r3, [pc, #304]	@ (8005e9c <HAL_RCC_OscConfig+0x26c>)
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	f003 030c 	and.w	r3, r3, #12
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00b      	beq.n	8005d8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005d76:	4b49      	ldr	r3, [pc, #292]	@ (8005e9c <HAL_RCC_OscConfig+0x26c>)
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	f003 030c 	and.w	r3, r3, #12
 8005d7e:	2b08      	cmp	r3, #8
 8005d80:	d11c      	bne.n	8005dbc <HAL_RCC_OscConfig+0x18c>
 8005d82:	4b46      	ldr	r3, [pc, #280]	@ (8005e9c <HAL_RCC_OscConfig+0x26c>)
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d116      	bne.n	8005dbc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d8e:	4b43      	ldr	r3, [pc, #268]	@ (8005e9c <HAL_RCC_OscConfig+0x26c>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 0302 	and.w	r3, r3, #2
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d005      	beq.n	8005da6 <HAL_RCC_OscConfig+0x176>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d001      	beq.n	8005da6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e1c0      	b.n	8006128 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005da6:	4b3d      	ldr	r3, [pc, #244]	@ (8005e9c <HAL_RCC_OscConfig+0x26c>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	00db      	lsls	r3, r3, #3
 8005db4:	4939      	ldr	r1, [pc, #228]	@ (8005e9c <HAL_RCC_OscConfig+0x26c>)
 8005db6:	4313      	orrs	r3, r2
 8005db8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dba:	e03a      	b.n	8005e32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d020      	beq.n	8005e06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005dc4:	4b36      	ldr	r3, [pc, #216]	@ (8005ea0 <HAL_RCC_OscConfig+0x270>)
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dca:	f7fd fcc7 	bl	800375c <HAL_GetTick>
 8005dce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dd0:	e008      	b.n	8005de4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005dd2:	f7fd fcc3 	bl	800375c <HAL_GetTick>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	d901      	bls.n	8005de4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	e1a1      	b.n	8006128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005de4:	4b2d      	ldr	r3, [pc, #180]	@ (8005e9c <HAL_RCC_OscConfig+0x26c>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0302 	and.w	r3, r3, #2
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d0f0      	beq.n	8005dd2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005df0:	4b2a      	ldr	r3, [pc, #168]	@ (8005e9c <HAL_RCC_OscConfig+0x26c>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	695b      	ldr	r3, [r3, #20]
 8005dfc:	00db      	lsls	r3, r3, #3
 8005dfe:	4927      	ldr	r1, [pc, #156]	@ (8005e9c <HAL_RCC_OscConfig+0x26c>)
 8005e00:	4313      	orrs	r3, r2
 8005e02:	600b      	str	r3, [r1, #0]
 8005e04:	e015      	b.n	8005e32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e06:	4b26      	ldr	r3, [pc, #152]	@ (8005ea0 <HAL_RCC_OscConfig+0x270>)
 8005e08:	2200      	movs	r2, #0
 8005e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e0c:	f7fd fca6 	bl	800375c <HAL_GetTick>
 8005e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e12:	e008      	b.n	8005e26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e14:	f7fd fca2 	bl	800375c <HAL_GetTick>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	d901      	bls.n	8005e26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005e22:	2303      	movs	r3, #3
 8005e24:	e180      	b.n	8006128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e26:	4b1d      	ldr	r3, [pc, #116]	@ (8005e9c <HAL_RCC_OscConfig+0x26c>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 0302 	and.w	r3, r3, #2
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d1f0      	bne.n	8005e14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 0308 	and.w	r3, r3, #8
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d03a      	beq.n	8005eb4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	699b      	ldr	r3, [r3, #24]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d019      	beq.n	8005e7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e46:	4b17      	ldr	r3, [pc, #92]	@ (8005ea4 <HAL_RCC_OscConfig+0x274>)
 8005e48:	2201      	movs	r2, #1
 8005e4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e4c:	f7fd fc86 	bl	800375c <HAL_GetTick>
 8005e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e52:	e008      	b.n	8005e66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e54:	f7fd fc82 	bl	800375c <HAL_GetTick>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	d901      	bls.n	8005e66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e160      	b.n	8006128 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e66:	4b0d      	ldr	r3, [pc, #52]	@ (8005e9c <HAL_RCC_OscConfig+0x26c>)
 8005e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e6a:	f003 0302 	and.w	r3, r3, #2
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d0f0      	beq.n	8005e54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005e72:	2001      	movs	r0, #1
 8005e74:	f000 face 	bl	8006414 <RCC_Delay>
 8005e78:	e01c      	b.n	8005eb4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8005ea4 <HAL_RCC_OscConfig+0x274>)
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e80:	f7fd fc6c 	bl	800375c <HAL_GetTick>
 8005e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e86:	e00f      	b.n	8005ea8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e88:	f7fd fc68 	bl	800375c <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d908      	bls.n	8005ea8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e146      	b.n	8006128 <HAL_RCC_OscConfig+0x4f8>
 8005e9a:	bf00      	nop
 8005e9c:	40021000 	.word	0x40021000
 8005ea0:	42420000 	.word	0x42420000
 8005ea4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ea8:	4b92      	ldr	r3, [pc, #584]	@ (80060f4 <HAL_RCC_OscConfig+0x4c4>)
 8005eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eac:	f003 0302 	and.w	r3, r3, #2
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d1e9      	bne.n	8005e88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 0304 	and.w	r3, r3, #4
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	f000 80a6 	beq.w	800600e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ec6:	4b8b      	ldr	r3, [pc, #556]	@ (80060f4 <HAL_RCC_OscConfig+0x4c4>)
 8005ec8:	69db      	ldr	r3, [r3, #28]
 8005eca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d10d      	bne.n	8005eee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ed2:	4b88      	ldr	r3, [pc, #544]	@ (80060f4 <HAL_RCC_OscConfig+0x4c4>)
 8005ed4:	69db      	ldr	r3, [r3, #28]
 8005ed6:	4a87      	ldr	r2, [pc, #540]	@ (80060f4 <HAL_RCC_OscConfig+0x4c4>)
 8005ed8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005edc:	61d3      	str	r3, [r2, #28]
 8005ede:	4b85      	ldr	r3, [pc, #532]	@ (80060f4 <HAL_RCC_OscConfig+0x4c4>)
 8005ee0:	69db      	ldr	r3, [r3, #28]
 8005ee2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ee6:	60bb      	str	r3, [r7, #8]
 8005ee8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005eea:	2301      	movs	r3, #1
 8005eec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005eee:	4b82      	ldr	r3, [pc, #520]	@ (80060f8 <HAL_RCC_OscConfig+0x4c8>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d118      	bne.n	8005f2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005efa:	4b7f      	ldr	r3, [pc, #508]	@ (80060f8 <HAL_RCC_OscConfig+0x4c8>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a7e      	ldr	r2, [pc, #504]	@ (80060f8 <HAL_RCC_OscConfig+0x4c8>)
 8005f00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f06:	f7fd fc29 	bl	800375c <HAL_GetTick>
 8005f0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f0c:	e008      	b.n	8005f20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f0e:	f7fd fc25 	bl	800375c <HAL_GetTick>
 8005f12:	4602      	mov	r2, r0
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	2b64      	cmp	r3, #100	@ 0x64
 8005f1a:	d901      	bls.n	8005f20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e103      	b.n	8006128 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f20:	4b75      	ldr	r3, [pc, #468]	@ (80060f8 <HAL_RCC_OscConfig+0x4c8>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d0f0      	beq.n	8005f0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d106      	bne.n	8005f42 <HAL_RCC_OscConfig+0x312>
 8005f34:	4b6f      	ldr	r3, [pc, #444]	@ (80060f4 <HAL_RCC_OscConfig+0x4c4>)
 8005f36:	6a1b      	ldr	r3, [r3, #32]
 8005f38:	4a6e      	ldr	r2, [pc, #440]	@ (80060f4 <HAL_RCC_OscConfig+0x4c4>)
 8005f3a:	f043 0301 	orr.w	r3, r3, #1
 8005f3e:	6213      	str	r3, [r2, #32]
 8005f40:	e02d      	b.n	8005f9e <HAL_RCC_OscConfig+0x36e>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d10c      	bne.n	8005f64 <HAL_RCC_OscConfig+0x334>
 8005f4a:	4b6a      	ldr	r3, [pc, #424]	@ (80060f4 <HAL_RCC_OscConfig+0x4c4>)
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	4a69      	ldr	r2, [pc, #420]	@ (80060f4 <HAL_RCC_OscConfig+0x4c4>)
 8005f50:	f023 0301 	bic.w	r3, r3, #1
 8005f54:	6213      	str	r3, [r2, #32]
 8005f56:	4b67      	ldr	r3, [pc, #412]	@ (80060f4 <HAL_RCC_OscConfig+0x4c4>)
 8005f58:	6a1b      	ldr	r3, [r3, #32]
 8005f5a:	4a66      	ldr	r2, [pc, #408]	@ (80060f4 <HAL_RCC_OscConfig+0x4c4>)
 8005f5c:	f023 0304 	bic.w	r3, r3, #4
 8005f60:	6213      	str	r3, [r2, #32]
 8005f62:	e01c      	b.n	8005f9e <HAL_RCC_OscConfig+0x36e>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	2b05      	cmp	r3, #5
 8005f6a:	d10c      	bne.n	8005f86 <HAL_RCC_OscConfig+0x356>
 8005f6c:	4b61      	ldr	r3, [pc, #388]	@ (80060f4 <HAL_RCC_OscConfig+0x4c4>)
 8005f6e:	6a1b      	ldr	r3, [r3, #32]
 8005f70:	4a60      	ldr	r2, [pc, #384]	@ (80060f4 <HAL_RCC_OscConfig+0x4c4>)
 8005f72:	f043 0304 	orr.w	r3, r3, #4
 8005f76:	6213      	str	r3, [r2, #32]
 8005f78:	4b5e      	ldr	r3, [pc, #376]	@ (80060f4 <HAL_RCC_OscConfig+0x4c4>)
 8005f7a:	6a1b      	ldr	r3, [r3, #32]
 8005f7c:	4a5d      	ldr	r2, [pc, #372]	@ (80060f4 <HAL_RCC_OscConfig+0x4c4>)
 8005f7e:	f043 0301 	orr.w	r3, r3, #1
 8005f82:	6213      	str	r3, [r2, #32]
 8005f84:	e00b      	b.n	8005f9e <HAL_RCC_OscConfig+0x36e>
 8005f86:	4b5b      	ldr	r3, [pc, #364]	@ (80060f4 <HAL_RCC_OscConfig+0x4c4>)
 8005f88:	6a1b      	ldr	r3, [r3, #32]
 8005f8a:	4a5a      	ldr	r2, [pc, #360]	@ (80060f4 <HAL_RCC_OscConfig+0x4c4>)
 8005f8c:	f023 0301 	bic.w	r3, r3, #1
 8005f90:	6213      	str	r3, [r2, #32]
 8005f92:	4b58      	ldr	r3, [pc, #352]	@ (80060f4 <HAL_RCC_OscConfig+0x4c4>)
 8005f94:	6a1b      	ldr	r3, [r3, #32]
 8005f96:	4a57      	ldr	r2, [pc, #348]	@ (80060f4 <HAL_RCC_OscConfig+0x4c4>)
 8005f98:	f023 0304 	bic.w	r3, r3, #4
 8005f9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d015      	beq.n	8005fd2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fa6:	f7fd fbd9 	bl	800375c <HAL_GetTick>
 8005faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fac:	e00a      	b.n	8005fc4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fae:	f7fd fbd5 	bl	800375c <HAL_GetTick>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d901      	bls.n	8005fc4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	e0b1      	b.n	8006128 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fc4:	4b4b      	ldr	r3, [pc, #300]	@ (80060f4 <HAL_RCC_OscConfig+0x4c4>)
 8005fc6:	6a1b      	ldr	r3, [r3, #32]
 8005fc8:	f003 0302 	and.w	r3, r3, #2
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d0ee      	beq.n	8005fae <HAL_RCC_OscConfig+0x37e>
 8005fd0:	e014      	b.n	8005ffc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fd2:	f7fd fbc3 	bl	800375c <HAL_GetTick>
 8005fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fd8:	e00a      	b.n	8005ff0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fda:	f7fd fbbf 	bl	800375c <HAL_GetTick>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d901      	bls.n	8005ff0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005fec:	2303      	movs	r3, #3
 8005fee:	e09b      	b.n	8006128 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ff0:	4b40      	ldr	r3, [pc, #256]	@ (80060f4 <HAL_RCC_OscConfig+0x4c4>)
 8005ff2:	6a1b      	ldr	r3, [r3, #32]
 8005ff4:	f003 0302 	and.w	r3, r3, #2
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1ee      	bne.n	8005fda <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005ffc:	7dfb      	ldrb	r3, [r7, #23]
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d105      	bne.n	800600e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006002:	4b3c      	ldr	r3, [pc, #240]	@ (80060f4 <HAL_RCC_OscConfig+0x4c4>)
 8006004:	69db      	ldr	r3, [r3, #28]
 8006006:	4a3b      	ldr	r2, [pc, #236]	@ (80060f4 <HAL_RCC_OscConfig+0x4c4>)
 8006008:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800600c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	69db      	ldr	r3, [r3, #28]
 8006012:	2b00      	cmp	r3, #0
 8006014:	f000 8087 	beq.w	8006126 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006018:	4b36      	ldr	r3, [pc, #216]	@ (80060f4 <HAL_RCC_OscConfig+0x4c4>)
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	f003 030c 	and.w	r3, r3, #12
 8006020:	2b08      	cmp	r3, #8
 8006022:	d061      	beq.n	80060e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	69db      	ldr	r3, [r3, #28]
 8006028:	2b02      	cmp	r3, #2
 800602a:	d146      	bne.n	80060ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800602c:	4b33      	ldr	r3, [pc, #204]	@ (80060fc <HAL_RCC_OscConfig+0x4cc>)
 800602e:	2200      	movs	r2, #0
 8006030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006032:	f7fd fb93 	bl	800375c <HAL_GetTick>
 8006036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006038:	e008      	b.n	800604c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800603a:	f7fd fb8f 	bl	800375c <HAL_GetTick>
 800603e:	4602      	mov	r2, r0
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	1ad3      	subs	r3, r2, r3
 8006044:	2b02      	cmp	r3, #2
 8006046:	d901      	bls.n	800604c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006048:	2303      	movs	r3, #3
 800604a:	e06d      	b.n	8006128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800604c:	4b29      	ldr	r3, [pc, #164]	@ (80060f4 <HAL_RCC_OscConfig+0x4c4>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006054:	2b00      	cmp	r3, #0
 8006056:	d1f0      	bne.n	800603a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6a1b      	ldr	r3, [r3, #32]
 800605c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006060:	d108      	bne.n	8006074 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006062:	4b24      	ldr	r3, [pc, #144]	@ (80060f4 <HAL_RCC_OscConfig+0x4c4>)
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	4921      	ldr	r1, [pc, #132]	@ (80060f4 <HAL_RCC_OscConfig+0x4c4>)
 8006070:	4313      	orrs	r3, r2
 8006072:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006074:	4b1f      	ldr	r3, [pc, #124]	@ (80060f4 <HAL_RCC_OscConfig+0x4c4>)
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a19      	ldr	r1, [r3, #32]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006084:	430b      	orrs	r3, r1
 8006086:	491b      	ldr	r1, [pc, #108]	@ (80060f4 <HAL_RCC_OscConfig+0x4c4>)
 8006088:	4313      	orrs	r3, r2
 800608a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800608c:	4b1b      	ldr	r3, [pc, #108]	@ (80060fc <HAL_RCC_OscConfig+0x4cc>)
 800608e:	2201      	movs	r2, #1
 8006090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006092:	f7fd fb63 	bl	800375c <HAL_GetTick>
 8006096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006098:	e008      	b.n	80060ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800609a:	f7fd fb5f 	bl	800375c <HAL_GetTick>
 800609e:	4602      	mov	r2, r0
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d901      	bls.n	80060ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80060a8:	2303      	movs	r3, #3
 80060aa:	e03d      	b.n	8006128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80060ac:	4b11      	ldr	r3, [pc, #68]	@ (80060f4 <HAL_RCC_OscConfig+0x4c4>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d0f0      	beq.n	800609a <HAL_RCC_OscConfig+0x46a>
 80060b8:	e035      	b.n	8006126 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060ba:	4b10      	ldr	r3, [pc, #64]	@ (80060fc <HAL_RCC_OscConfig+0x4cc>)
 80060bc:	2200      	movs	r2, #0
 80060be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060c0:	f7fd fb4c 	bl	800375c <HAL_GetTick>
 80060c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060c6:	e008      	b.n	80060da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060c8:	f7fd fb48 	bl	800375c <HAL_GetTick>
 80060cc:	4602      	mov	r2, r0
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d901      	bls.n	80060da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e026      	b.n	8006128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060da:	4b06      	ldr	r3, [pc, #24]	@ (80060f4 <HAL_RCC_OscConfig+0x4c4>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1f0      	bne.n	80060c8 <HAL_RCC_OscConfig+0x498>
 80060e6:	e01e      	b.n	8006126 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	69db      	ldr	r3, [r3, #28]
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d107      	bne.n	8006100 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e019      	b.n	8006128 <HAL_RCC_OscConfig+0x4f8>
 80060f4:	40021000 	.word	0x40021000
 80060f8:	40007000 	.word	0x40007000
 80060fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006100:	4b0b      	ldr	r3, [pc, #44]	@ (8006130 <HAL_RCC_OscConfig+0x500>)
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a1b      	ldr	r3, [r3, #32]
 8006110:	429a      	cmp	r2, r3
 8006112:	d106      	bne.n	8006122 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800611e:	429a      	cmp	r2, r3
 8006120:	d001      	beq.n	8006126 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e000      	b.n	8006128 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006126:	2300      	movs	r3, #0
}
 8006128:	4618      	mov	r0, r3
 800612a:	3718      	adds	r7, #24
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	40021000 	.word	0x40021000

08006134 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d101      	bne.n	8006148 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e0d0      	b.n	80062ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006148:	4b6a      	ldr	r3, [pc, #424]	@ (80062f4 <HAL_RCC_ClockConfig+0x1c0>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 0307 	and.w	r3, r3, #7
 8006150:	683a      	ldr	r2, [r7, #0]
 8006152:	429a      	cmp	r2, r3
 8006154:	d910      	bls.n	8006178 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006156:	4b67      	ldr	r3, [pc, #412]	@ (80062f4 <HAL_RCC_ClockConfig+0x1c0>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f023 0207 	bic.w	r2, r3, #7
 800615e:	4965      	ldr	r1, [pc, #404]	@ (80062f4 <HAL_RCC_ClockConfig+0x1c0>)
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	4313      	orrs	r3, r2
 8006164:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006166:	4b63      	ldr	r3, [pc, #396]	@ (80062f4 <HAL_RCC_ClockConfig+0x1c0>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 0307 	and.w	r3, r3, #7
 800616e:	683a      	ldr	r2, [r7, #0]
 8006170:	429a      	cmp	r2, r3
 8006172:	d001      	beq.n	8006178 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e0b8      	b.n	80062ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 0302 	and.w	r3, r3, #2
 8006180:	2b00      	cmp	r3, #0
 8006182:	d020      	beq.n	80061c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 0304 	and.w	r3, r3, #4
 800618c:	2b00      	cmp	r3, #0
 800618e:	d005      	beq.n	800619c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006190:	4b59      	ldr	r3, [pc, #356]	@ (80062f8 <HAL_RCC_ClockConfig+0x1c4>)
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	4a58      	ldr	r2, [pc, #352]	@ (80062f8 <HAL_RCC_ClockConfig+0x1c4>)
 8006196:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800619a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 0308 	and.w	r3, r3, #8
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d005      	beq.n	80061b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061a8:	4b53      	ldr	r3, [pc, #332]	@ (80062f8 <HAL_RCC_ClockConfig+0x1c4>)
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	4a52      	ldr	r2, [pc, #328]	@ (80062f8 <HAL_RCC_ClockConfig+0x1c4>)
 80061ae:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80061b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061b4:	4b50      	ldr	r3, [pc, #320]	@ (80062f8 <HAL_RCC_ClockConfig+0x1c4>)
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	494d      	ldr	r1, [pc, #308]	@ (80062f8 <HAL_RCC_ClockConfig+0x1c4>)
 80061c2:	4313      	orrs	r3, r2
 80061c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 0301 	and.w	r3, r3, #1
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d040      	beq.n	8006254 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d107      	bne.n	80061ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061da:	4b47      	ldr	r3, [pc, #284]	@ (80062f8 <HAL_RCC_ClockConfig+0x1c4>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d115      	bne.n	8006212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e07f      	b.n	80062ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d107      	bne.n	8006202 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061f2:	4b41      	ldr	r3, [pc, #260]	@ (80062f8 <HAL_RCC_ClockConfig+0x1c4>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d109      	bne.n	8006212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e073      	b.n	80062ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006202:	4b3d      	ldr	r3, [pc, #244]	@ (80062f8 <HAL_RCC_ClockConfig+0x1c4>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 0302 	and.w	r3, r3, #2
 800620a:	2b00      	cmp	r3, #0
 800620c:	d101      	bne.n	8006212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	e06b      	b.n	80062ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006212:	4b39      	ldr	r3, [pc, #228]	@ (80062f8 <HAL_RCC_ClockConfig+0x1c4>)
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	f023 0203 	bic.w	r2, r3, #3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	4936      	ldr	r1, [pc, #216]	@ (80062f8 <HAL_RCC_ClockConfig+0x1c4>)
 8006220:	4313      	orrs	r3, r2
 8006222:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006224:	f7fd fa9a 	bl	800375c <HAL_GetTick>
 8006228:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800622a:	e00a      	b.n	8006242 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800622c:	f7fd fa96 	bl	800375c <HAL_GetTick>
 8006230:	4602      	mov	r2, r0
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	1ad3      	subs	r3, r2, r3
 8006236:	f241 3288 	movw	r2, #5000	@ 0x1388
 800623a:	4293      	cmp	r3, r2
 800623c:	d901      	bls.n	8006242 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800623e:	2303      	movs	r3, #3
 8006240:	e053      	b.n	80062ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006242:	4b2d      	ldr	r3, [pc, #180]	@ (80062f8 <HAL_RCC_ClockConfig+0x1c4>)
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	f003 020c 	and.w	r2, r3, #12
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	429a      	cmp	r2, r3
 8006252:	d1eb      	bne.n	800622c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006254:	4b27      	ldr	r3, [pc, #156]	@ (80062f4 <HAL_RCC_ClockConfig+0x1c0>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 0307 	and.w	r3, r3, #7
 800625c:	683a      	ldr	r2, [r7, #0]
 800625e:	429a      	cmp	r2, r3
 8006260:	d210      	bcs.n	8006284 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006262:	4b24      	ldr	r3, [pc, #144]	@ (80062f4 <HAL_RCC_ClockConfig+0x1c0>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f023 0207 	bic.w	r2, r3, #7
 800626a:	4922      	ldr	r1, [pc, #136]	@ (80062f4 <HAL_RCC_ClockConfig+0x1c0>)
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	4313      	orrs	r3, r2
 8006270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006272:	4b20      	ldr	r3, [pc, #128]	@ (80062f4 <HAL_RCC_ClockConfig+0x1c0>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 0307 	and.w	r3, r3, #7
 800627a:	683a      	ldr	r2, [r7, #0]
 800627c:	429a      	cmp	r2, r3
 800627e:	d001      	beq.n	8006284 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	e032      	b.n	80062ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 0304 	and.w	r3, r3, #4
 800628c:	2b00      	cmp	r3, #0
 800628e:	d008      	beq.n	80062a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006290:	4b19      	ldr	r3, [pc, #100]	@ (80062f8 <HAL_RCC_ClockConfig+0x1c4>)
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	4916      	ldr	r1, [pc, #88]	@ (80062f8 <HAL_RCC_ClockConfig+0x1c4>)
 800629e:	4313      	orrs	r3, r2
 80062a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f003 0308 	and.w	r3, r3, #8
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d009      	beq.n	80062c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80062ae:	4b12      	ldr	r3, [pc, #72]	@ (80062f8 <HAL_RCC_ClockConfig+0x1c4>)
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	00db      	lsls	r3, r3, #3
 80062bc:	490e      	ldr	r1, [pc, #56]	@ (80062f8 <HAL_RCC_ClockConfig+0x1c4>)
 80062be:	4313      	orrs	r3, r2
 80062c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80062c2:	f000 f821 	bl	8006308 <HAL_RCC_GetSysClockFreq>
 80062c6:	4602      	mov	r2, r0
 80062c8:	4b0b      	ldr	r3, [pc, #44]	@ (80062f8 <HAL_RCC_ClockConfig+0x1c4>)
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	091b      	lsrs	r3, r3, #4
 80062ce:	f003 030f 	and.w	r3, r3, #15
 80062d2:	490a      	ldr	r1, [pc, #40]	@ (80062fc <HAL_RCC_ClockConfig+0x1c8>)
 80062d4:	5ccb      	ldrb	r3, [r1, r3]
 80062d6:	fa22 f303 	lsr.w	r3, r2, r3
 80062da:	4a09      	ldr	r2, [pc, #36]	@ (8006300 <HAL_RCC_ClockConfig+0x1cc>)
 80062dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80062de:	4b09      	ldr	r3, [pc, #36]	@ (8006304 <HAL_RCC_ClockConfig+0x1d0>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7fd f9f8 	bl	80036d8 <HAL_InitTick>

  return HAL_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3710      	adds	r7, #16
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	40022000 	.word	0x40022000
 80062f8:	40021000 	.word	0x40021000
 80062fc:	0800a834 	.word	0x0800a834
 8006300:	20000008 	.word	0x20000008
 8006304:	2000000c 	.word	0x2000000c

08006308 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006308:	b480      	push	{r7}
 800630a:	b087      	sub	sp, #28
 800630c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800630e:	2300      	movs	r3, #0
 8006310:	60fb      	str	r3, [r7, #12]
 8006312:	2300      	movs	r3, #0
 8006314:	60bb      	str	r3, [r7, #8]
 8006316:	2300      	movs	r3, #0
 8006318:	617b      	str	r3, [r7, #20]
 800631a:	2300      	movs	r3, #0
 800631c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800631e:	2300      	movs	r3, #0
 8006320:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006322:	4b1e      	ldr	r3, [pc, #120]	@ (800639c <HAL_RCC_GetSysClockFreq+0x94>)
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f003 030c 	and.w	r3, r3, #12
 800632e:	2b04      	cmp	r3, #4
 8006330:	d002      	beq.n	8006338 <HAL_RCC_GetSysClockFreq+0x30>
 8006332:	2b08      	cmp	r3, #8
 8006334:	d003      	beq.n	800633e <HAL_RCC_GetSysClockFreq+0x36>
 8006336:	e027      	b.n	8006388 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006338:	4b19      	ldr	r3, [pc, #100]	@ (80063a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800633a:	613b      	str	r3, [r7, #16]
      break;
 800633c:	e027      	b.n	800638e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	0c9b      	lsrs	r3, r3, #18
 8006342:	f003 030f 	and.w	r3, r3, #15
 8006346:	4a17      	ldr	r2, [pc, #92]	@ (80063a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006348:	5cd3      	ldrb	r3, [r2, r3]
 800634a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006352:	2b00      	cmp	r3, #0
 8006354:	d010      	beq.n	8006378 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006356:	4b11      	ldr	r3, [pc, #68]	@ (800639c <HAL_RCC_GetSysClockFreq+0x94>)
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	0c5b      	lsrs	r3, r3, #17
 800635c:	f003 0301 	and.w	r3, r3, #1
 8006360:	4a11      	ldr	r2, [pc, #68]	@ (80063a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006362:	5cd3      	ldrb	r3, [r2, r3]
 8006364:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a0d      	ldr	r2, [pc, #52]	@ (80063a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800636a:	fb03 f202 	mul.w	r2, r3, r2
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	fbb2 f3f3 	udiv	r3, r2, r3
 8006374:	617b      	str	r3, [r7, #20]
 8006376:	e004      	b.n	8006382 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a0c      	ldr	r2, [pc, #48]	@ (80063ac <HAL_RCC_GetSysClockFreq+0xa4>)
 800637c:	fb02 f303 	mul.w	r3, r2, r3
 8006380:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	613b      	str	r3, [r7, #16]
      break;
 8006386:	e002      	b.n	800638e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006388:	4b05      	ldr	r3, [pc, #20]	@ (80063a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800638a:	613b      	str	r3, [r7, #16]
      break;
 800638c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800638e:	693b      	ldr	r3, [r7, #16]
}
 8006390:	4618      	mov	r0, r3
 8006392:	371c      	adds	r7, #28
 8006394:	46bd      	mov	sp, r7
 8006396:	bc80      	pop	{r7}
 8006398:	4770      	bx	lr
 800639a:	bf00      	nop
 800639c:	40021000 	.word	0x40021000
 80063a0:	007a1200 	.word	0x007a1200
 80063a4:	0800a84c 	.word	0x0800a84c
 80063a8:	0800a85c 	.word	0x0800a85c
 80063ac:	003d0900 	.word	0x003d0900

080063b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063b0:	b480      	push	{r7}
 80063b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063b4:	4b02      	ldr	r3, [pc, #8]	@ (80063c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80063b6:	681b      	ldr	r3, [r3, #0]
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bc80      	pop	{r7}
 80063be:	4770      	bx	lr
 80063c0:	20000008 	.word	0x20000008

080063c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80063c8:	f7ff fff2 	bl	80063b0 <HAL_RCC_GetHCLKFreq>
 80063cc:	4602      	mov	r2, r0
 80063ce:	4b05      	ldr	r3, [pc, #20]	@ (80063e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	0a1b      	lsrs	r3, r3, #8
 80063d4:	f003 0307 	and.w	r3, r3, #7
 80063d8:	4903      	ldr	r1, [pc, #12]	@ (80063e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80063da:	5ccb      	ldrb	r3, [r1, r3]
 80063dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	40021000 	.word	0x40021000
 80063e8:	0800a844 	.word	0x0800a844

080063ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80063f0:	f7ff ffde 	bl	80063b0 <HAL_RCC_GetHCLKFreq>
 80063f4:	4602      	mov	r2, r0
 80063f6:	4b05      	ldr	r3, [pc, #20]	@ (800640c <HAL_RCC_GetPCLK2Freq+0x20>)
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	0adb      	lsrs	r3, r3, #11
 80063fc:	f003 0307 	and.w	r3, r3, #7
 8006400:	4903      	ldr	r1, [pc, #12]	@ (8006410 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006402:	5ccb      	ldrb	r3, [r1, r3]
 8006404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006408:	4618      	mov	r0, r3
 800640a:	bd80      	pop	{r7, pc}
 800640c:	40021000 	.word	0x40021000
 8006410:	0800a844 	.word	0x0800a844

08006414 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800641c:	4b0a      	ldr	r3, [pc, #40]	@ (8006448 <RCC_Delay+0x34>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a0a      	ldr	r2, [pc, #40]	@ (800644c <RCC_Delay+0x38>)
 8006422:	fba2 2303 	umull	r2, r3, r2, r3
 8006426:	0a5b      	lsrs	r3, r3, #9
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	fb02 f303 	mul.w	r3, r2, r3
 800642e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006430:	bf00      	nop
  }
  while (Delay --);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	1e5a      	subs	r2, r3, #1
 8006436:	60fa      	str	r2, [r7, #12]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d1f9      	bne.n	8006430 <RCC_Delay+0x1c>
}
 800643c:	bf00      	nop
 800643e:	bf00      	nop
 8006440:	3714      	adds	r7, #20
 8006442:	46bd      	mov	sp, r7
 8006444:	bc80      	pop	{r7}
 8006446:	4770      	bx	lr
 8006448:	20000008 	.word	0x20000008
 800644c:	10624dd3 	.word	0x10624dd3

08006450 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b086      	sub	sp, #24
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006458:	2300      	movs	r3, #0
 800645a:	613b      	str	r3, [r7, #16]
 800645c:	2300      	movs	r3, #0
 800645e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 0301 	and.w	r3, r3, #1
 8006468:	2b00      	cmp	r3, #0
 800646a:	d07d      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800646c:	2300      	movs	r3, #0
 800646e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006470:	4b4f      	ldr	r3, [pc, #316]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006472:	69db      	ldr	r3, [r3, #28]
 8006474:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006478:	2b00      	cmp	r3, #0
 800647a:	d10d      	bne.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800647c:	4b4c      	ldr	r3, [pc, #304]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800647e:	69db      	ldr	r3, [r3, #28]
 8006480:	4a4b      	ldr	r2, [pc, #300]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006482:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006486:	61d3      	str	r3, [r2, #28]
 8006488:	4b49      	ldr	r3, [pc, #292]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800648a:	69db      	ldr	r3, [r3, #28]
 800648c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006490:	60bb      	str	r3, [r7, #8]
 8006492:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006494:	2301      	movs	r3, #1
 8006496:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006498:	4b46      	ldr	r3, [pc, #280]	@ (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d118      	bne.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80064a4:	4b43      	ldr	r3, [pc, #268]	@ (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a42      	ldr	r2, [pc, #264]	@ (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80064aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064b0:	f7fd f954 	bl	800375c <HAL_GetTick>
 80064b4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064b6:	e008      	b.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064b8:	f7fd f950 	bl	800375c <HAL_GetTick>
 80064bc:	4602      	mov	r2, r0
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	2b64      	cmp	r3, #100	@ 0x64
 80064c4:	d901      	bls.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80064c6:	2303      	movs	r3, #3
 80064c8:	e06d      	b.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064ca:	4b3a      	ldr	r3, [pc, #232]	@ (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d0f0      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80064d6:	4b36      	ldr	r3, [pc, #216]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80064d8:	6a1b      	ldr	r3, [r3, #32]
 80064da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064de:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d02e      	beq.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d027      	beq.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80064f4:	4b2e      	ldr	r3, [pc, #184]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80064f6:	6a1b      	ldr	r3, [r3, #32]
 80064f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064fc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80064fe:	4b2e      	ldr	r3, [pc, #184]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006500:	2201      	movs	r2, #1
 8006502:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006504:	4b2c      	ldr	r3, [pc, #176]	@ (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006506:	2200      	movs	r2, #0
 8006508:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800650a:	4a29      	ldr	r2, [pc, #164]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f003 0301 	and.w	r3, r3, #1
 8006516:	2b00      	cmp	r3, #0
 8006518:	d014      	beq.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800651a:	f7fd f91f 	bl	800375c <HAL_GetTick>
 800651e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006520:	e00a      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006522:	f7fd f91b 	bl	800375c <HAL_GetTick>
 8006526:	4602      	mov	r2, r0
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	1ad3      	subs	r3, r2, r3
 800652c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006530:	4293      	cmp	r3, r2
 8006532:	d901      	bls.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006534:	2303      	movs	r3, #3
 8006536:	e036      	b.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006538:	4b1d      	ldr	r3, [pc, #116]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800653a:	6a1b      	ldr	r3, [r3, #32]
 800653c:	f003 0302 	and.w	r3, r3, #2
 8006540:	2b00      	cmp	r3, #0
 8006542:	d0ee      	beq.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006544:	4b1a      	ldr	r3, [pc, #104]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006546:	6a1b      	ldr	r3, [r3, #32]
 8006548:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	4917      	ldr	r1, [pc, #92]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006552:	4313      	orrs	r3, r2
 8006554:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006556:	7dfb      	ldrb	r3, [r7, #23]
 8006558:	2b01      	cmp	r3, #1
 800655a:	d105      	bne.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800655c:	4b14      	ldr	r3, [pc, #80]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800655e:	69db      	ldr	r3, [r3, #28]
 8006560:	4a13      	ldr	r2, [pc, #76]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006562:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006566:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0302 	and.w	r3, r3, #2
 8006570:	2b00      	cmp	r3, #0
 8006572:	d008      	beq.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006574:	4b0e      	ldr	r3, [pc, #56]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	490b      	ldr	r1, [pc, #44]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006582:	4313      	orrs	r3, r2
 8006584:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 0310 	and.w	r3, r3, #16
 800658e:	2b00      	cmp	r3, #0
 8006590:	d008      	beq.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006592:	4b07      	ldr	r3, [pc, #28]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	4904      	ldr	r1, [pc, #16]	@ (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065a0:	4313      	orrs	r3, r2
 80065a2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3718      	adds	r7, #24
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	40021000 	.word	0x40021000
 80065b4:	40007000 	.word	0x40007000
 80065b8:	42420440 	.word	0x42420440

080065bc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b088      	sub	sp, #32
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80065c4:	2300      	movs	r3, #0
 80065c6:	617b      	str	r3, [r7, #20]
 80065c8:	2300      	movs	r3, #0
 80065ca:	61fb      	str	r3, [r7, #28]
 80065cc:	2300      	movs	r3, #0
 80065ce:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80065d0:	2300      	movs	r3, #0
 80065d2:	60fb      	str	r3, [r7, #12]
 80065d4:	2300      	movs	r3, #0
 80065d6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2b10      	cmp	r3, #16
 80065dc:	d00a      	beq.n	80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2b10      	cmp	r3, #16
 80065e2:	f200 808a 	bhi.w	80066fa <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d045      	beq.n	8006678 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d075      	beq.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80065f2:	e082      	b.n	80066fa <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80065f4:	4b46      	ldr	r3, [pc, #280]	@ (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80065fa:	4b45      	ldr	r3, [pc, #276]	@ (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006602:	2b00      	cmp	r3, #0
 8006604:	d07b      	beq.n	80066fe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	0c9b      	lsrs	r3, r3, #18
 800660a:	f003 030f 	and.w	r3, r3, #15
 800660e:	4a41      	ldr	r2, [pc, #260]	@ (8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8006610:	5cd3      	ldrb	r3, [r2, r3]
 8006612:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d015      	beq.n	800664a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800661e:	4b3c      	ldr	r3, [pc, #240]	@ (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	0c5b      	lsrs	r3, r3, #17
 8006624:	f003 0301 	and.w	r3, r3, #1
 8006628:	4a3b      	ldr	r2, [pc, #236]	@ (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800662a:	5cd3      	ldrb	r3, [r2, r3]
 800662c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00d      	beq.n	8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006638:	4a38      	ldr	r2, [pc, #224]	@ (800671c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	fb02 f303 	mul.w	r3, r2, r3
 8006646:	61fb      	str	r3, [r7, #28]
 8006648:	e004      	b.n	8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	4a34      	ldr	r2, [pc, #208]	@ (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800664e:	fb02 f303 	mul.w	r3, r2, r3
 8006652:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006654:	4b2e      	ldr	r3, [pc, #184]	@ (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800665c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006660:	d102      	bne.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	61bb      	str	r3, [r7, #24]
      break;
 8006666:	e04a      	b.n	80066fe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8006668:	69fb      	ldr	r3, [r7, #28]
 800666a:	005b      	lsls	r3, r3, #1
 800666c:	4a2d      	ldr	r2, [pc, #180]	@ (8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800666e:	fba2 2303 	umull	r2, r3, r2, r3
 8006672:	085b      	lsrs	r3, r3, #1
 8006674:	61bb      	str	r3, [r7, #24]
      break;
 8006676:	e042      	b.n	80066fe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8006678:	4b25      	ldr	r3, [pc, #148]	@ (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800667a:	6a1b      	ldr	r3, [r3, #32]
 800667c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006684:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006688:	d108      	bne.n	800669c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f003 0302 	and.w	r3, r3, #2
 8006690:	2b00      	cmp	r3, #0
 8006692:	d003      	beq.n	800669c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8006694:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006698:	61bb      	str	r3, [r7, #24]
 800669a:	e01f      	b.n	80066dc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066a6:	d109      	bne.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80066a8:	4b19      	ldr	r3, [pc, #100]	@ (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80066aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ac:	f003 0302 	and.w	r3, r3, #2
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d003      	beq.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80066b4:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80066b8:	61bb      	str	r3, [r7, #24]
 80066ba:	e00f      	b.n	80066dc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066c6:	d11c      	bne.n	8006702 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80066c8:	4b11      	ldr	r3, [pc, #68]	@ (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d016      	beq.n	8006702 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80066d4:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80066d8:	61bb      	str	r3, [r7, #24]
      break;
 80066da:	e012      	b.n	8006702 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80066dc:	e011      	b.n	8006702 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80066de:	f7ff fe85 	bl	80063ec <HAL_RCC_GetPCLK2Freq>
 80066e2:	4602      	mov	r2, r0
 80066e4:	4b0a      	ldr	r3, [pc, #40]	@ (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	0b9b      	lsrs	r3, r3, #14
 80066ea:	f003 0303 	and.w	r3, r3, #3
 80066ee:	3301      	adds	r3, #1
 80066f0:	005b      	lsls	r3, r3, #1
 80066f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80066f6:	61bb      	str	r3, [r7, #24]
      break;
 80066f8:	e004      	b.n	8006704 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80066fa:	bf00      	nop
 80066fc:	e002      	b.n	8006704 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80066fe:	bf00      	nop
 8006700:	e000      	b.n	8006704 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8006702:	bf00      	nop
    }
  }
  return (frequency);
 8006704:	69bb      	ldr	r3, [r7, #24]
}
 8006706:	4618      	mov	r0, r3
 8006708:	3720      	adds	r7, #32
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	40021000 	.word	0x40021000
 8006714:	0800a860 	.word	0x0800a860
 8006718:	0800a870 	.word	0x0800a870
 800671c:	007a1200 	.word	0x007a1200
 8006720:	003d0900 	.word	0x003d0900
 8006724:	aaaaaaab 	.word	0xaaaaaaab

08006728 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d101      	bne.n	800673a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e041      	b.n	80067be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006740:	b2db      	uxtb	r3, r3
 8006742:	2b00      	cmp	r3, #0
 8006744:	d106      	bne.n	8006754 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f7fc fdb6 	bl	80032c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2202      	movs	r2, #2
 8006758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	3304      	adds	r3, #4
 8006764:	4619      	mov	r1, r3
 8006766:	4610      	mov	r0, r2
 8006768:	f000 fdd4 	bl	8007314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3708      	adds	r7, #8
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}

080067c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b082      	sub	sp, #8
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d101      	bne.n	80067d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	e041      	b.n	800685c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d106      	bne.n	80067f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 f839 	bl	8006864 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2202      	movs	r2, #2
 80067f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	3304      	adds	r3, #4
 8006802:	4619      	mov	r1, r3
 8006804:	4610      	mov	r0, r2
 8006806:	f000 fd85 	bl	8007314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2201      	movs	r2, #1
 800680e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2201      	movs	r2, #1
 8006816:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2201      	movs	r2, #1
 800681e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2201      	movs	r2, #1
 8006826:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2201      	movs	r2, #1
 800682e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2201      	movs	r2, #1
 8006836:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2201      	movs	r2, #1
 800683e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2201      	movs	r2, #1
 8006846:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2201      	movs	r2, #1
 8006856:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800685a:	2300      	movs	r3, #0
}
 800685c:	4618      	mov	r0, r3
 800685e:	3708      	adds	r7, #8
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800686c:	bf00      	nop
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	bc80      	pop	{r7}
 8006874:	4770      	bx	lr
	...

08006878 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d109      	bne.n	800689c <HAL_TIM_PWM_Start+0x24>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800688e:	b2db      	uxtb	r3, r3
 8006890:	2b01      	cmp	r3, #1
 8006892:	bf14      	ite	ne
 8006894:	2301      	movne	r3, #1
 8006896:	2300      	moveq	r3, #0
 8006898:	b2db      	uxtb	r3, r3
 800689a:	e022      	b.n	80068e2 <HAL_TIM_PWM_Start+0x6a>
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	2b04      	cmp	r3, #4
 80068a0:	d109      	bne.n	80068b6 <HAL_TIM_PWM_Start+0x3e>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	bf14      	ite	ne
 80068ae:	2301      	movne	r3, #1
 80068b0:	2300      	moveq	r3, #0
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	e015      	b.n	80068e2 <HAL_TIM_PWM_Start+0x6a>
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	2b08      	cmp	r3, #8
 80068ba:	d109      	bne.n	80068d0 <HAL_TIM_PWM_Start+0x58>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	bf14      	ite	ne
 80068c8:	2301      	movne	r3, #1
 80068ca:	2300      	moveq	r3, #0
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	e008      	b.n	80068e2 <HAL_TIM_PWM_Start+0x6a>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	2b01      	cmp	r3, #1
 80068da:	bf14      	ite	ne
 80068dc:	2301      	movne	r3, #1
 80068de:	2300      	moveq	r3, #0
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d001      	beq.n	80068ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e05e      	b.n	80069a8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d104      	bne.n	80068fa <HAL_TIM_PWM_Start+0x82>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2202      	movs	r2, #2
 80068f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80068f8:	e013      	b.n	8006922 <HAL_TIM_PWM_Start+0xaa>
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	2b04      	cmp	r3, #4
 80068fe:	d104      	bne.n	800690a <HAL_TIM_PWM_Start+0x92>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2202      	movs	r2, #2
 8006904:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006908:	e00b      	b.n	8006922 <HAL_TIM_PWM_Start+0xaa>
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	2b08      	cmp	r3, #8
 800690e:	d104      	bne.n	800691a <HAL_TIM_PWM_Start+0xa2>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2202      	movs	r2, #2
 8006914:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006918:	e003      	b.n	8006922 <HAL_TIM_PWM_Start+0xaa>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2202      	movs	r2, #2
 800691e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2201      	movs	r2, #1
 8006928:	6839      	ldr	r1, [r7, #0]
 800692a:	4618      	mov	r0, r3
 800692c:	f000 ff7e 	bl	800782c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a1e      	ldr	r2, [pc, #120]	@ (80069b0 <HAL_TIM_PWM_Start+0x138>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d107      	bne.n	800694a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006948:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a18      	ldr	r2, [pc, #96]	@ (80069b0 <HAL_TIM_PWM_Start+0x138>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d00e      	beq.n	8006972 <HAL_TIM_PWM_Start+0xfa>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800695c:	d009      	beq.n	8006972 <HAL_TIM_PWM_Start+0xfa>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a14      	ldr	r2, [pc, #80]	@ (80069b4 <HAL_TIM_PWM_Start+0x13c>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d004      	beq.n	8006972 <HAL_TIM_PWM_Start+0xfa>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a12      	ldr	r2, [pc, #72]	@ (80069b8 <HAL_TIM_PWM_Start+0x140>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d111      	bne.n	8006996 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	f003 0307 	and.w	r3, r3, #7
 800697c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2b06      	cmp	r3, #6
 8006982:	d010      	beq.n	80069a6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f042 0201 	orr.w	r2, r2, #1
 8006992:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006994:	e007      	b.n	80069a6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f042 0201 	orr.w	r2, r2, #1
 80069a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3710      	adds	r7, #16
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	40012c00 	.word	0x40012c00
 80069b4:	40000400 	.word	0x40000400
 80069b8:	40000800 	.word	0x40000800

080069bc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2200      	movs	r2, #0
 80069cc:	6839      	ldr	r1, [r7, #0]
 80069ce:	4618      	mov	r0, r3
 80069d0:	f000 ff2c 	bl	800782c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a29      	ldr	r2, [pc, #164]	@ (8006a80 <HAL_TIM_PWM_Stop+0xc4>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d117      	bne.n	8006a0e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	6a1a      	ldr	r2, [r3, #32]
 80069e4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80069e8:	4013      	ands	r3, r2
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d10f      	bne.n	8006a0e <HAL_TIM_PWM_Stop+0x52>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	6a1a      	ldr	r2, [r3, #32]
 80069f4:	f240 4344 	movw	r3, #1092	@ 0x444
 80069f8:	4013      	ands	r3, r2
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d107      	bne.n	8006a0e <HAL_TIM_PWM_Stop+0x52>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006a0c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	6a1a      	ldr	r2, [r3, #32]
 8006a14:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006a18:	4013      	ands	r3, r2
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d10f      	bne.n	8006a3e <HAL_TIM_PWM_Stop+0x82>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	6a1a      	ldr	r2, [r3, #32]
 8006a24:	f240 4344 	movw	r3, #1092	@ 0x444
 8006a28:	4013      	ands	r3, r2
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d107      	bne.n	8006a3e <HAL_TIM_PWM_Stop+0x82>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f022 0201 	bic.w	r2, r2, #1
 8006a3c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d104      	bne.n	8006a4e <HAL_TIM_PWM_Stop+0x92>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a4c:	e013      	b.n	8006a76 <HAL_TIM_PWM_Stop+0xba>
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	2b04      	cmp	r3, #4
 8006a52:	d104      	bne.n	8006a5e <HAL_TIM_PWM_Stop+0xa2>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a5c:	e00b      	b.n	8006a76 <HAL_TIM_PWM_Stop+0xba>
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	2b08      	cmp	r3, #8
 8006a62:	d104      	bne.n	8006a6e <HAL_TIM_PWM_Stop+0xb2>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a6c:	e003      	b.n	8006a76 <HAL_TIM_PWM_Stop+0xba>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2201      	movs	r2, #1
 8006a72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3708      	adds	r7, #8
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	40012c00 	.word	0x40012c00

08006a84 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d109      	bne.n	8006aac <HAL_TIM_PWM_Start_IT+0x28>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	bf14      	ite	ne
 8006aa4:	2301      	movne	r3, #1
 8006aa6:	2300      	moveq	r3, #0
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	e022      	b.n	8006af2 <HAL_TIM_PWM_Start_IT+0x6e>
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	2b04      	cmp	r3, #4
 8006ab0:	d109      	bne.n	8006ac6 <HAL_TIM_PWM_Start_IT+0x42>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	bf14      	ite	ne
 8006abe:	2301      	movne	r3, #1
 8006ac0:	2300      	moveq	r3, #0
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	e015      	b.n	8006af2 <HAL_TIM_PWM_Start_IT+0x6e>
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	2b08      	cmp	r3, #8
 8006aca:	d109      	bne.n	8006ae0 <HAL_TIM_PWM_Start_IT+0x5c>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	bf14      	ite	ne
 8006ad8:	2301      	movne	r3, #1
 8006ada:	2300      	moveq	r3, #0
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	e008      	b.n	8006af2 <HAL_TIM_PWM_Start_IT+0x6e>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	bf14      	ite	ne
 8006aec:	2301      	movne	r3, #1
 8006aee:	2300      	moveq	r3, #0
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d001      	beq.n	8006afa <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e0a9      	b.n	8006c4e <HAL_TIM_PWM_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d104      	bne.n	8006b0a <HAL_TIM_PWM_Start_IT+0x86>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2202      	movs	r2, #2
 8006b04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b08:	e013      	b.n	8006b32 <HAL_TIM_PWM_Start_IT+0xae>
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	2b04      	cmp	r3, #4
 8006b0e:	d104      	bne.n	8006b1a <HAL_TIM_PWM_Start_IT+0x96>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2202      	movs	r2, #2
 8006b14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b18:	e00b      	b.n	8006b32 <HAL_TIM_PWM_Start_IT+0xae>
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	2b08      	cmp	r3, #8
 8006b1e:	d104      	bne.n	8006b2a <HAL_TIM_PWM_Start_IT+0xa6>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2202      	movs	r2, #2
 8006b24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b28:	e003      	b.n	8006b32 <HAL_TIM_PWM_Start_IT+0xae>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2202      	movs	r2, #2
 8006b2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	2b0c      	cmp	r3, #12
 8006b36:	d841      	bhi.n	8006bbc <HAL_TIM_PWM_Start_IT+0x138>
 8006b38:	a201      	add	r2, pc, #4	@ (adr r2, 8006b40 <HAL_TIM_PWM_Start_IT+0xbc>)
 8006b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b3e:	bf00      	nop
 8006b40:	08006b75 	.word	0x08006b75
 8006b44:	08006bbd 	.word	0x08006bbd
 8006b48:	08006bbd 	.word	0x08006bbd
 8006b4c:	08006bbd 	.word	0x08006bbd
 8006b50:	08006b87 	.word	0x08006b87
 8006b54:	08006bbd 	.word	0x08006bbd
 8006b58:	08006bbd 	.word	0x08006bbd
 8006b5c:	08006bbd 	.word	0x08006bbd
 8006b60:	08006b99 	.word	0x08006b99
 8006b64:	08006bbd 	.word	0x08006bbd
 8006b68:	08006bbd 	.word	0x08006bbd
 8006b6c:	08006bbd 	.word	0x08006bbd
 8006b70:	08006bab 	.word	0x08006bab
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	68da      	ldr	r2, [r3, #12]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f042 0202 	orr.w	r2, r2, #2
 8006b82:	60da      	str	r2, [r3, #12]
      break;
 8006b84:	e01d      	b.n	8006bc2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	68da      	ldr	r2, [r3, #12]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f042 0204 	orr.w	r2, r2, #4
 8006b94:	60da      	str	r2, [r3, #12]
      break;
 8006b96:	e014      	b.n	8006bc2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68da      	ldr	r2, [r3, #12]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f042 0208 	orr.w	r2, r2, #8
 8006ba6:	60da      	str	r2, [r3, #12]
      break;
 8006ba8:	e00b      	b.n	8006bc2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	68da      	ldr	r2, [r3, #12]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f042 0210 	orr.w	r2, r2, #16
 8006bb8:	60da      	str	r2, [r3, #12]
      break;
 8006bba:	e002      	b.n	8006bc2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	73fb      	strb	r3, [r7, #15]
      break;
 8006bc0:	bf00      	nop
  }

  if (status == HAL_OK)
 8006bc2:	7bfb      	ldrb	r3, [r7, #15]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d141      	bne.n	8006c4c <HAL_TIM_PWM_Start_IT+0x1c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	6839      	ldr	r1, [r7, #0]
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f000 fe2b 	bl	800782c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a1f      	ldr	r2, [pc, #124]	@ (8006c58 <HAL_TIM_PWM_Start_IT+0x1d4>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d107      	bne.n	8006bf0 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006bee:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a18      	ldr	r2, [pc, #96]	@ (8006c58 <HAL_TIM_PWM_Start_IT+0x1d4>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d00e      	beq.n	8006c18 <HAL_TIM_PWM_Start_IT+0x194>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c02:	d009      	beq.n	8006c18 <HAL_TIM_PWM_Start_IT+0x194>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a14      	ldr	r2, [pc, #80]	@ (8006c5c <HAL_TIM_PWM_Start_IT+0x1d8>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d004      	beq.n	8006c18 <HAL_TIM_PWM_Start_IT+0x194>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a13      	ldr	r2, [pc, #76]	@ (8006c60 <HAL_TIM_PWM_Start_IT+0x1dc>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d111      	bne.n	8006c3c <HAL_TIM_PWM_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	f003 0307 	and.w	r3, r3, #7
 8006c22:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	2b06      	cmp	r3, #6
 8006c28:	d010      	beq.n	8006c4c <HAL_TIM_PWM_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f042 0201 	orr.w	r2, r2, #1
 8006c38:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c3a:	e007      	b.n	8006c4c <HAL_TIM_PWM_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f042 0201 	orr.w	r2, r2, #1
 8006c4a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3710      	adds	r7, #16
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	40012c00 	.word	0x40012c00
 8006c5c:	40000400 	.word	0x40000400
 8006c60:	40000800 	.word	0x40000800

08006c64 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	2b0c      	cmp	r3, #12
 8006c76:	d841      	bhi.n	8006cfc <HAL_TIM_PWM_Stop_IT+0x98>
 8006c78:	a201      	add	r2, pc, #4	@ (adr r2, 8006c80 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8006c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c7e:	bf00      	nop
 8006c80:	08006cb5 	.word	0x08006cb5
 8006c84:	08006cfd 	.word	0x08006cfd
 8006c88:	08006cfd 	.word	0x08006cfd
 8006c8c:	08006cfd 	.word	0x08006cfd
 8006c90:	08006cc7 	.word	0x08006cc7
 8006c94:	08006cfd 	.word	0x08006cfd
 8006c98:	08006cfd 	.word	0x08006cfd
 8006c9c:	08006cfd 	.word	0x08006cfd
 8006ca0:	08006cd9 	.word	0x08006cd9
 8006ca4:	08006cfd 	.word	0x08006cfd
 8006ca8:	08006cfd 	.word	0x08006cfd
 8006cac:	08006cfd 	.word	0x08006cfd
 8006cb0:	08006ceb 	.word	0x08006ceb
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68da      	ldr	r2, [r3, #12]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f022 0202 	bic.w	r2, r2, #2
 8006cc2:	60da      	str	r2, [r3, #12]
      break;
 8006cc4:	e01d      	b.n	8006d02 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	68da      	ldr	r2, [r3, #12]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f022 0204 	bic.w	r2, r2, #4
 8006cd4:	60da      	str	r2, [r3, #12]
      break;
 8006cd6:	e014      	b.n	8006d02 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	68da      	ldr	r2, [r3, #12]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f022 0208 	bic.w	r2, r2, #8
 8006ce6:	60da      	str	r2, [r3, #12]
      break;
 8006ce8:	e00b      	b.n	8006d02 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	68da      	ldr	r2, [r3, #12]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f022 0210 	bic.w	r2, r2, #16
 8006cf8:	60da      	str	r2, [r3, #12]
      break;
 8006cfa:	e002      	b.n	8006d02 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	73fb      	strb	r3, [r7, #15]
      break;
 8006d00:	bf00      	nop
  }

  if (status == HAL_OK)
 8006d02:	7bfb      	ldrb	r3, [r7, #15]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d157      	bne.n	8006db8 <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	6839      	ldr	r1, [r7, #0]
 8006d10:	4618      	mov	r0, r3
 8006d12:	f000 fd8b 	bl	800782c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a2a      	ldr	r2, [pc, #168]	@ (8006dc4 <HAL_TIM_PWM_Stop_IT+0x160>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d117      	bne.n	8006d50 <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	6a1a      	ldr	r2, [r3, #32]
 8006d26:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d10f      	bne.n	8006d50 <HAL_TIM_PWM_Stop_IT+0xec>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	6a1a      	ldr	r2, [r3, #32]
 8006d36:	f240 4344 	movw	r3, #1092	@ 0x444
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d107      	bne.n	8006d50 <HAL_TIM_PWM_Stop_IT+0xec>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006d4e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	6a1a      	ldr	r2, [r3, #32]
 8006d56:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d10f      	bne.n	8006d80 <HAL_TIM_PWM_Stop_IT+0x11c>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	6a1a      	ldr	r2, [r3, #32]
 8006d66:	f240 4344 	movw	r3, #1092	@ 0x444
 8006d6a:	4013      	ands	r3, r2
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d107      	bne.n	8006d80 <HAL_TIM_PWM_Stop_IT+0x11c>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f022 0201 	bic.w	r2, r2, #1
 8006d7e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d104      	bne.n	8006d90 <HAL_TIM_PWM_Stop_IT+0x12c>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006d8e:	e013      	b.n	8006db8 <HAL_TIM_PWM_Stop_IT+0x154>
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	2b04      	cmp	r3, #4
 8006d94:	d104      	bne.n	8006da0 <HAL_TIM_PWM_Stop_IT+0x13c>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006d9e:	e00b      	b.n	8006db8 <HAL_TIM_PWM_Stop_IT+0x154>
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	2b08      	cmp	r3, #8
 8006da4:	d104      	bne.n	8006db0 <HAL_TIM_PWM_Stop_IT+0x14c>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2201      	movs	r2, #1
 8006daa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006dae:	e003      	b.n	8006db8 <HAL_TIM_PWM_Stop_IT+0x154>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8006db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3710      	adds	r7, #16
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	40012c00 	.word	0x40012c00

08006dc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	691b      	ldr	r3, [r3, #16]
 8006dde:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	f003 0302 	and.w	r3, r3, #2
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d020      	beq.n	8006e2c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f003 0302 	and.w	r3, r3, #2
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d01b      	beq.n	8006e2c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f06f 0202 	mvn.w	r2, #2
 8006dfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2201      	movs	r2, #1
 8006e02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	f003 0303 	and.w	r3, r3, #3
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d003      	beq.n	8006e1a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 fa63 	bl	80072de <HAL_TIM_IC_CaptureCallback>
 8006e18:	e005      	b.n	8006e26 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 fa56 	bl	80072cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 fa65 	bl	80072f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	f003 0304 	and.w	r3, r3, #4
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d020      	beq.n	8006e78 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f003 0304 	and.w	r3, r3, #4
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d01b      	beq.n	8006e78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f06f 0204 	mvn.w	r2, #4
 8006e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2202      	movs	r2, #2
 8006e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	699b      	ldr	r3, [r3, #24]
 8006e56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d003      	beq.n	8006e66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 fa3d 	bl	80072de <HAL_TIM_IC_CaptureCallback>
 8006e64:	e005      	b.n	8006e72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 fa30 	bl	80072cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f000 fa3f 	bl	80072f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	f003 0308 	and.w	r3, r3, #8
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d020      	beq.n	8006ec4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f003 0308 	and.w	r3, r3, #8
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d01b      	beq.n	8006ec4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f06f 0208 	mvn.w	r2, #8
 8006e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2204      	movs	r2, #4
 8006e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	69db      	ldr	r3, [r3, #28]
 8006ea2:	f003 0303 	and.w	r3, r3, #3
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d003      	beq.n	8006eb2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 fa17 	bl	80072de <HAL_TIM_IC_CaptureCallback>
 8006eb0:	e005      	b.n	8006ebe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 fa0a 	bl	80072cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 fa19 	bl	80072f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	f003 0310 	and.w	r3, r3, #16
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d020      	beq.n	8006f10 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f003 0310 	and.w	r3, r3, #16
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d01b      	beq.n	8006f10 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f06f 0210 	mvn.w	r2, #16
 8006ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2208      	movs	r2, #8
 8006ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	69db      	ldr	r3, [r3, #28]
 8006eee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d003      	beq.n	8006efe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 f9f1 	bl	80072de <HAL_TIM_IC_CaptureCallback>
 8006efc:	e005      	b.n	8006f0a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 f9e4 	bl	80072cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 f9f3 	bl	80072f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	f003 0301 	and.w	r3, r3, #1
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d00c      	beq.n	8006f34 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f003 0301 	and.w	r3, r3, #1
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d007      	beq.n	8006f34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f06f 0201 	mvn.w	r2, #1
 8006f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 f9c3 	bl	80072ba <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00c      	beq.n	8006f58 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d007      	beq.n	8006f58 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 fcf5 	bl	8007942 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d00c      	beq.n	8006f7c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d007      	beq.n	8006f7c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 f9c3 	bl	8007302 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	f003 0320 	and.w	r3, r3, #32
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d00c      	beq.n	8006fa0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f003 0320 	and.w	r3, r3, #32
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d007      	beq.n	8006fa0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f06f 0220 	mvn.w	r2, #32
 8006f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 fcc8 	bl	8007930 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006fa0:	bf00      	nop
 8006fa2:	3710      	adds	r7, #16
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b086      	sub	sp, #24
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	60b9      	str	r1, [r7, #8]
 8006fb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d101      	bne.n	8006fc6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006fc2:	2302      	movs	r3, #2
 8006fc4:	e0ae      	b.n	8007124 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2201      	movs	r2, #1
 8006fca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2b0c      	cmp	r3, #12
 8006fd2:	f200 809f 	bhi.w	8007114 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006fd6:	a201      	add	r2, pc, #4	@ (adr r2, 8006fdc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fdc:	08007011 	.word	0x08007011
 8006fe0:	08007115 	.word	0x08007115
 8006fe4:	08007115 	.word	0x08007115
 8006fe8:	08007115 	.word	0x08007115
 8006fec:	08007051 	.word	0x08007051
 8006ff0:	08007115 	.word	0x08007115
 8006ff4:	08007115 	.word	0x08007115
 8006ff8:	08007115 	.word	0x08007115
 8006ffc:	08007093 	.word	0x08007093
 8007000:	08007115 	.word	0x08007115
 8007004:	08007115 	.word	0x08007115
 8007008:	08007115 	.word	0x08007115
 800700c:	080070d3 	.word	0x080070d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	68b9      	ldr	r1, [r7, #8]
 8007016:	4618      	mov	r0, r3
 8007018:	f000 f9ea 	bl	80073f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	699a      	ldr	r2, [r3, #24]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f042 0208 	orr.w	r2, r2, #8
 800702a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	699a      	ldr	r2, [r3, #24]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f022 0204 	bic.w	r2, r2, #4
 800703a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	6999      	ldr	r1, [r3, #24]
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	691a      	ldr	r2, [r3, #16]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	430a      	orrs	r2, r1
 800704c:	619a      	str	r2, [r3, #24]
      break;
 800704e:	e064      	b.n	800711a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	68b9      	ldr	r1, [r7, #8]
 8007056:	4618      	mov	r0, r3
 8007058:	f000 fa30 	bl	80074bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	699a      	ldr	r2, [r3, #24]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800706a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	699a      	ldr	r2, [r3, #24]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800707a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	6999      	ldr	r1, [r3, #24]
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	021a      	lsls	r2, r3, #8
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	430a      	orrs	r2, r1
 800708e:	619a      	str	r2, [r3, #24]
      break;
 8007090:	e043      	b.n	800711a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68b9      	ldr	r1, [r7, #8]
 8007098:	4618      	mov	r0, r3
 800709a:	f000 fa79 	bl	8007590 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	69da      	ldr	r2, [r3, #28]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f042 0208 	orr.w	r2, r2, #8
 80070ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	69da      	ldr	r2, [r3, #28]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f022 0204 	bic.w	r2, r2, #4
 80070bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	69d9      	ldr	r1, [r3, #28]
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	691a      	ldr	r2, [r3, #16]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	430a      	orrs	r2, r1
 80070ce:	61da      	str	r2, [r3, #28]
      break;
 80070d0:	e023      	b.n	800711a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	68b9      	ldr	r1, [r7, #8]
 80070d8:	4618      	mov	r0, r3
 80070da:	f000 fac3 	bl	8007664 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	69da      	ldr	r2, [r3, #28]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80070ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	69da      	ldr	r2, [r3, #28]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80070fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	69d9      	ldr	r1, [r3, #28]
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	691b      	ldr	r3, [r3, #16]
 8007108:	021a      	lsls	r2, r3, #8
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	430a      	orrs	r2, r1
 8007110:	61da      	str	r2, [r3, #28]
      break;
 8007112:	e002      	b.n	800711a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	75fb      	strb	r3, [r7, #23]
      break;
 8007118:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2200      	movs	r2, #0
 800711e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007122:	7dfb      	ldrb	r3, [r7, #23]
}
 8007124:	4618      	mov	r0, r3
 8007126:	3718      	adds	r7, #24
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b084      	sub	sp, #16
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007136:	2300      	movs	r3, #0
 8007138:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007140:	2b01      	cmp	r3, #1
 8007142:	d101      	bne.n	8007148 <HAL_TIM_ConfigClockSource+0x1c>
 8007144:	2302      	movs	r3, #2
 8007146:	e0b4      	b.n	80072b2 <HAL_TIM_ConfigClockSource+0x186>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2202      	movs	r2, #2
 8007154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007166:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800716e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68ba      	ldr	r2, [r7, #8]
 8007176:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007180:	d03e      	beq.n	8007200 <HAL_TIM_ConfigClockSource+0xd4>
 8007182:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007186:	f200 8087 	bhi.w	8007298 <HAL_TIM_ConfigClockSource+0x16c>
 800718a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800718e:	f000 8086 	beq.w	800729e <HAL_TIM_ConfigClockSource+0x172>
 8007192:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007196:	d87f      	bhi.n	8007298 <HAL_TIM_ConfigClockSource+0x16c>
 8007198:	2b70      	cmp	r3, #112	@ 0x70
 800719a:	d01a      	beq.n	80071d2 <HAL_TIM_ConfigClockSource+0xa6>
 800719c:	2b70      	cmp	r3, #112	@ 0x70
 800719e:	d87b      	bhi.n	8007298 <HAL_TIM_ConfigClockSource+0x16c>
 80071a0:	2b60      	cmp	r3, #96	@ 0x60
 80071a2:	d050      	beq.n	8007246 <HAL_TIM_ConfigClockSource+0x11a>
 80071a4:	2b60      	cmp	r3, #96	@ 0x60
 80071a6:	d877      	bhi.n	8007298 <HAL_TIM_ConfigClockSource+0x16c>
 80071a8:	2b50      	cmp	r3, #80	@ 0x50
 80071aa:	d03c      	beq.n	8007226 <HAL_TIM_ConfigClockSource+0xfa>
 80071ac:	2b50      	cmp	r3, #80	@ 0x50
 80071ae:	d873      	bhi.n	8007298 <HAL_TIM_ConfigClockSource+0x16c>
 80071b0:	2b40      	cmp	r3, #64	@ 0x40
 80071b2:	d058      	beq.n	8007266 <HAL_TIM_ConfigClockSource+0x13a>
 80071b4:	2b40      	cmp	r3, #64	@ 0x40
 80071b6:	d86f      	bhi.n	8007298 <HAL_TIM_ConfigClockSource+0x16c>
 80071b8:	2b30      	cmp	r3, #48	@ 0x30
 80071ba:	d064      	beq.n	8007286 <HAL_TIM_ConfigClockSource+0x15a>
 80071bc:	2b30      	cmp	r3, #48	@ 0x30
 80071be:	d86b      	bhi.n	8007298 <HAL_TIM_ConfigClockSource+0x16c>
 80071c0:	2b20      	cmp	r3, #32
 80071c2:	d060      	beq.n	8007286 <HAL_TIM_ConfigClockSource+0x15a>
 80071c4:	2b20      	cmp	r3, #32
 80071c6:	d867      	bhi.n	8007298 <HAL_TIM_ConfigClockSource+0x16c>
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d05c      	beq.n	8007286 <HAL_TIM_ConfigClockSource+0x15a>
 80071cc:	2b10      	cmp	r3, #16
 80071ce:	d05a      	beq.n	8007286 <HAL_TIM_ConfigClockSource+0x15a>
 80071d0:	e062      	b.n	8007298 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80071e2:	f000 fb04 	bl	80077ee <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80071f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	68ba      	ldr	r2, [r7, #8]
 80071fc:	609a      	str	r2, [r3, #8]
      break;
 80071fe:	e04f      	b.n	80072a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007210:	f000 faed 	bl	80077ee <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	689a      	ldr	r2, [r3, #8]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007222:	609a      	str	r2, [r3, #8]
      break;
 8007224:	e03c      	b.n	80072a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007232:	461a      	mov	r2, r3
 8007234:	f000 fa64 	bl	8007700 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	2150      	movs	r1, #80	@ 0x50
 800723e:	4618      	mov	r0, r3
 8007240:	f000 fabb 	bl	80077ba <TIM_ITRx_SetConfig>
      break;
 8007244:	e02c      	b.n	80072a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007252:	461a      	mov	r2, r3
 8007254:	f000 fa82 	bl	800775c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2160      	movs	r1, #96	@ 0x60
 800725e:	4618      	mov	r0, r3
 8007260:	f000 faab 	bl	80077ba <TIM_ITRx_SetConfig>
      break;
 8007264:	e01c      	b.n	80072a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007272:	461a      	mov	r2, r3
 8007274:	f000 fa44 	bl	8007700 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2140      	movs	r1, #64	@ 0x40
 800727e:	4618      	mov	r0, r3
 8007280:	f000 fa9b 	bl	80077ba <TIM_ITRx_SetConfig>
      break;
 8007284:	e00c      	b.n	80072a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4619      	mov	r1, r3
 8007290:	4610      	mov	r0, r2
 8007292:	f000 fa92 	bl	80077ba <TIM_ITRx_SetConfig>
      break;
 8007296:	e003      	b.n	80072a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	73fb      	strb	r3, [r7, #15]
      break;
 800729c:	e000      	b.n	80072a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800729e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80072b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3710      	adds	r7, #16
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}

080072ba <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80072ba:	b480      	push	{r7}
 80072bc:	b083      	sub	sp, #12
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80072c2:	bf00      	nop
 80072c4:	370c      	adds	r7, #12
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bc80      	pop	{r7}
 80072ca:	4770      	bx	lr

080072cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b083      	sub	sp, #12
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80072d4:	bf00      	nop
 80072d6:	370c      	adds	r7, #12
 80072d8:	46bd      	mov	sp, r7
 80072da:	bc80      	pop	{r7}
 80072dc:	4770      	bx	lr

080072de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80072de:	b480      	push	{r7}
 80072e0:	b083      	sub	sp, #12
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80072e6:	bf00      	nop
 80072e8:	370c      	adds	r7, #12
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bc80      	pop	{r7}
 80072ee:	4770      	bx	lr

080072f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80072f8:	bf00      	nop
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bc80      	pop	{r7}
 8007300:	4770      	bx	lr

08007302 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007302:	b480      	push	{r7}
 8007304:	b083      	sub	sp, #12
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800730a:	bf00      	nop
 800730c:	370c      	adds	r7, #12
 800730e:	46bd      	mov	sp, r7
 8007310:	bc80      	pop	{r7}
 8007312:	4770      	bx	lr

08007314 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007314:	b480      	push	{r7}
 8007316:	b085      	sub	sp, #20
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a2f      	ldr	r2, [pc, #188]	@ (80073e4 <TIM_Base_SetConfig+0xd0>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d00b      	beq.n	8007344 <TIM_Base_SetConfig+0x30>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007332:	d007      	beq.n	8007344 <TIM_Base_SetConfig+0x30>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	4a2c      	ldr	r2, [pc, #176]	@ (80073e8 <TIM_Base_SetConfig+0xd4>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d003      	beq.n	8007344 <TIM_Base_SetConfig+0x30>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	4a2b      	ldr	r2, [pc, #172]	@ (80073ec <TIM_Base_SetConfig+0xd8>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d108      	bne.n	8007356 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800734a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	68fa      	ldr	r2, [r7, #12]
 8007352:	4313      	orrs	r3, r2
 8007354:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	4a22      	ldr	r2, [pc, #136]	@ (80073e4 <TIM_Base_SetConfig+0xd0>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d00b      	beq.n	8007376 <TIM_Base_SetConfig+0x62>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007364:	d007      	beq.n	8007376 <TIM_Base_SetConfig+0x62>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4a1f      	ldr	r2, [pc, #124]	@ (80073e8 <TIM_Base_SetConfig+0xd4>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d003      	beq.n	8007376 <TIM_Base_SetConfig+0x62>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4a1e      	ldr	r2, [pc, #120]	@ (80073ec <TIM_Base_SetConfig+0xd8>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d108      	bne.n	8007388 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800737c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	68fa      	ldr	r2, [r7, #12]
 8007384:	4313      	orrs	r3, r2
 8007386:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	695b      	ldr	r3, [r3, #20]
 8007392:	4313      	orrs	r3, r2
 8007394:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	689a      	ldr	r2, [r3, #8]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	4a0d      	ldr	r2, [pc, #52]	@ (80073e4 <TIM_Base_SetConfig+0xd0>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d103      	bne.n	80073bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	691a      	ldr	r2, [r3, #16]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2201      	movs	r2, #1
 80073c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	691b      	ldr	r3, [r3, #16]
 80073c6:	f003 0301 	and.w	r3, r3, #1
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d005      	beq.n	80073da <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	f023 0201 	bic.w	r2, r3, #1
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	611a      	str	r2, [r3, #16]
  }
}
 80073da:	bf00      	nop
 80073dc:	3714      	adds	r7, #20
 80073de:	46bd      	mov	sp, r7
 80073e0:	bc80      	pop	{r7}
 80073e2:	4770      	bx	lr
 80073e4:	40012c00 	.word	0x40012c00
 80073e8:	40000400 	.word	0x40000400
 80073ec:	40000800 	.word	0x40000800

080073f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b087      	sub	sp, #28
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a1b      	ldr	r3, [r3, #32]
 80073fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6a1b      	ldr	r3, [r3, #32]
 8007404:	f023 0201 	bic.w	r2, r3, #1
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	699b      	ldr	r3, [r3, #24]
 8007416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800741e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f023 0303 	bic.w	r3, r3, #3
 8007426:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	68fa      	ldr	r2, [r7, #12]
 800742e:	4313      	orrs	r3, r2
 8007430:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	f023 0302 	bic.w	r3, r3, #2
 8007438:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	697a      	ldr	r2, [r7, #20]
 8007440:	4313      	orrs	r3, r2
 8007442:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	4a1c      	ldr	r2, [pc, #112]	@ (80074b8 <TIM_OC1_SetConfig+0xc8>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d10c      	bne.n	8007466 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	f023 0308 	bic.w	r3, r3, #8
 8007452:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	697a      	ldr	r2, [r7, #20]
 800745a:	4313      	orrs	r3, r2
 800745c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	f023 0304 	bic.w	r3, r3, #4
 8007464:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4a13      	ldr	r2, [pc, #76]	@ (80074b8 <TIM_OC1_SetConfig+0xc8>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d111      	bne.n	8007492 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007474:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800747c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	695b      	ldr	r3, [r3, #20]
 8007482:	693a      	ldr	r2, [r7, #16]
 8007484:	4313      	orrs	r3, r2
 8007486:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	699b      	ldr	r3, [r3, #24]
 800748c:	693a      	ldr	r2, [r7, #16]
 800748e:	4313      	orrs	r3, r2
 8007490:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	693a      	ldr	r2, [r7, #16]
 8007496:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	68fa      	ldr	r2, [r7, #12]
 800749c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	685a      	ldr	r2, [r3, #4]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	697a      	ldr	r2, [r7, #20]
 80074aa:	621a      	str	r2, [r3, #32]
}
 80074ac:	bf00      	nop
 80074ae:	371c      	adds	r7, #28
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bc80      	pop	{r7}
 80074b4:	4770      	bx	lr
 80074b6:	bf00      	nop
 80074b8:	40012c00 	.word	0x40012c00

080074bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074bc:	b480      	push	{r7}
 80074be:	b087      	sub	sp, #28
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6a1b      	ldr	r3, [r3, #32]
 80074ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6a1b      	ldr	r3, [r3, #32]
 80074d0:	f023 0210 	bic.w	r2, r3, #16
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	699b      	ldr	r3, [r3, #24]
 80074e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	021b      	lsls	r3, r3, #8
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	f023 0320 	bic.w	r3, r3, #32
 8007506:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	011b      	lsls	r3, r3, #4
 800750e:	697a      	ldr	r2, [r7, #20]
 8007510:	4313      	orrs	r3, r2
 8007512:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	4a1d      	ldr	r2, [pc, #116]	@ (800758c <TIM_OC2_SetConfig+0xd0>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d10d      	bne.n	8007538 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007522:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	68db      	ldr	r3, [r3, #12]
 8007528:	011b      	lsls	r3, r3, #4
 800752a:	697a      	ldr	r2, [r7, #20]
 800752c:	4313      	orrs	r3, r2
 800752e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007536:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a14      	ldr	r2, [pc, #80]	@ (800758c <TIM_OC2_SetConfig+0xd0>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d113      	bne.n	8007568 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007546:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800754e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	695b      	ldr	r3, [r3, #20]
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	693a      	ldr	r2, [r7, #16]
 8007558:	4313      	orrs	r3, r2
 800755a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	699b      	ldr	r3, [r3, #24]
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	693a      	ldr	r2, [r7, #16]
 8007564:	4313      	orrs	r3, r2
 8007566:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	693a      	ldr	r2, [r7, #16]
 800756c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	685a      	ldr	r2, [r3, #4]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	697a      	ldr	r2, [r7, #20]
 8007580:	621a      	str	r2, [r3, #32]
}
 8007582:	bf00      	nop
 8007584:	371c      	adds	r7, #28
 8007586:	46bd      	mov	sp, r7
 8007588:	bc80      	pop	{r7}
 800758a:	4770      	bx	lr
 800758c:	40012c00 	.word	0x40012c00

08007590 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007590:	b480      	push	{r7}
 8007592:	b087      	sub	sp, #28
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6a1b      	ldr	r3, [r3, #32]
 800759e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6a1b      	ldr	r3, [r3, #32]
 80075a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	69db      	ldr	r3, [r3, #28]
 80075b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f023 0303 	bic.w	r3, r3, #3
 80075c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	68fa      	ldr	r2, [r7, #12]
 80075ce:	4313      	orrs	r3, r2
 80075d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80075d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	021b      	lsls	r3, r3, #8
 80075e0:	697a      	ldr	r2, [r7, #20]
 80075e2:	4313      	orrs	r3, r2
 80075e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4a1d      	ldr	r2, [pc, #116]	@ (8007660 <TIM_OC3_SetConfig+0xd0>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d10d      	bne.n	800760a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80075f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	021b      	lsls	r3, r3, #8
 80075fc:	697a      	ldr	r2, [r7, #20]
 80075fe:	4313      	orrs	r3, r2
 8007600:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007608:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4a14      	ldr	r2, [pc, #80]	@ (8007660 <TIM_OC3_SetConfig+0xd0>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d113      	bne.n	800763a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007618:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007620:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	695b      	ldr	r3, [r3, #20]
 8007626:	011b      	lsls	r3, r3, #4
 8007628:	693a      	ldr	r2, [r7, #16]
 800762a:	4313      	orrs	r3, r2
 800762c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	699b      	ldr	r3, [r3, #24]
 8007632:	011b      	lsls	r3, r3, #4
 8007634:	693a      	ldr	r2, [r7, #16]
 8007636:	4313      	orrs	r3, r2
 8007638:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	693a      	ldr	r2, [r7, #16]
 800763e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	68fa      	ldr	r2, [r7, #12]
 8007644:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	685a      	ldr	r2, [r3, #4]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	697a      	ldr	r2, [r7, #20]
 8007652:	621a      	str	r2, [r3, #32]
}
 8007654:	bf00      	nop
 8007656:	371c      	adds	r7, #28
 8007658:	46bd      	mov	sp, r7
 800765a:	bc80      	pop	{r7}
 800765c:	4770      	bx	lr
 800765e:	bf00      	nop
 8007660:	40012c00 	.word	0x40012c00

08007664 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007664:	b480      	push	{r7}
 8007666:	b087      	sub	sp, #28
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6a1b      	ldr	r3, [r3, #32]
 8007672:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6a1b      	ldr	r3, [r3, #32]
 8007678:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	69db      	ldr	r3, [r3, #28]
 800768a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800769a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	021b      	lsls	r3, r3, #8
 80076a2:	68fa      	ldr	r2, [r7, #12]
 80076a4:	4313      	orrs	r3, r2
 80076a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80076ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	031b      	lsls	r3, r3, #12
 80076b6:	693a      	ldr	r2, [r7, #16]
 80076b8:	4313      	orrs	r3, r2
 80076ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	4a0f      	ldr	r2, [pc, #60]	@ (80076fc <TIM_OC4_SetConfig+0x98>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d109      	bne.n	80076d8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80076ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	695b      	ldr	r3, [r3, #20]
 80076d0:	019b      	lsls	r3, r3, #6
 80076d2:	697a      	ldr	r2, [r7, #20]
 80076d4:	4313      	orrs	r3, r2
 80076d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	697a      	ldr	r2, [r7, #20]
 80076dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	68fa      	ldr	r2, [r7, #12]
 80076e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	685a      	ldr	r2, [r3, #4]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	693a      	ldr	r2, [r7, #16]
 80076f0:	621a      	str	r2, [r3, #32]
}
 80076f2:	bf00      	nop
 80076f4:	371c      	adds	r7, #28
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bc80      	pop	{r7}
 80076fa:	4770      	bx	lr
 80076fc:	40012c00 	.word	0x40012c00

08007700 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007700:	b480      	push	{r7}
 8007702:	b087      	sub	sp, #28
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	6a1b      	ldr	r3, [r3, #32]
 8007710:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6a1b      	ldr	r3, [r3, #32]
 8007716:	f023 0201 	bic.w	r2, r3, #1
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	699b      	ldr	r3, [r3, #24]
 8007722:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800772a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	011b      	lsls	r3, r3, #4
 8007730:	693a      	ldr	r2, [r7, #16]
 8007732:	4313      	orrs	r3, r2
 8007734:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	f023 030a 	bic.w	r3, r3, #10
 800773c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800773e:	697a      	ldr	r2, [r7, #20]
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	4313      	orrs	r3, r2
 8007744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	693a      	ldr	r2, [r7, #16]
 800774a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	697a      	ldr	r2, [r7, #20]
 8007750:	621a      	str	r2, [r3, #32]
}
 8007752:	bf00      	nop
 8007754:	371c      	adds	r7, #28
 8007756:	46bd      	mov	sp, r7
 8007758:	bc80      	pop	{r7}
 800775a:	4770      	bx	lr

0800775c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800775c:	b480      	push	{r7}
 800775e:	b087      	sub	sp, #28
 8007760:	af00      	add	r7, sp, #0
 8007762:	60f8      	str	r0, [r7, #12]
 8007764:	60b9      	str	r1, [r7, #8]
 8007766:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	6a1b      	ldr	r3, [r3, #32]
 800776c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	6a1b      	ldr	r3, [r3, #32]
 8007772:	f023 0210 	bic.w	r2, r3, #16
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	699b      	ldr	r3, [r3, #24]
 800777e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007786:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	031b      	lsls	r3, r3, #12
 800778c:	693a      	ldr	r2, [r7, #16]
 800778e:	4313      	orrs	r3, r2
 8007790:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007798:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	011b      	lsls	r3, r3, #4
 800779e:	697a      	ldr	r2, [r7, #20]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	693a      	ldr	r2, [r7, #16]
 80077a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	697a      	ldr	r2, [r7, #20]
 80077ae:	621a      	str	r2, [r3, #32]
}
 80077b0:	bf00      	nop
 80077b2:	371c      	adds	r7, #28
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bc80      	pop	{r7}
 80077b8:	4770      	bx	lr

080077ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80077ba:	b480      	push	{r7}
 80077bc:	b085      	sub	sp, #20
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
 80077c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80077d2:	683a      	ldr	r2, [r7, #0]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	4313      	orrs	r3, r2
 80077d8:	f043 0307 	orr.w	r3, r3, #7
 80077dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	68fa      	ldr	r2, [r7, #12]
 80077e2:	609a      	str	r2, [r3, #8]
}
 80077e4:	bf00      	nop
 80077e6:	3714      	adds	r7, #20
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bc80      	pop	{r7}
 80077ec:	4770      	bx	lr

080077ee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80077ee:	b480      	push	{r7}
 80077f0:	b087      	sub	sp, #28
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	60f8      	str	r0, [r7, #12]
 80077f6:	60b9      	str	r1, [r7, #8]
 80077f8:	607a      	str	r2, [r7, #4]
 80077fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007808:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	021a      	lsls	r2, r3, #8
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	431a      	orrs	r2, r3
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	4313      	orrs	r3, r2
 8007816:	697a      	ldr	r2, [r7, #20]
 8007818:	4313      	orrs	r3, r2
 800781a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	697a      	ldr	r2, [r7, #20]
 8007820:	609a      	str	r2, [r3, #8]
}
 8007822:	bf00      	nop
 8007824:	371c      	adds	r7, #28
 8007826:	46bd      	mov	sp, r7
 8007828:	bc80      	pop	{r7}
 800782a:	4770      	bx	lr

0800782c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800782c:	b480      	push	{r7}
 800782e:	b087      	sub	sp, #28
 8007830:	af00      	add	r7, sp, #0
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	f003 031f 	and.w	r3, r3, #31
 800783e:	2201      	movs	r2, #1
 8007840:	fa02 f303 	lsl.w	r3, r2, r3
 8007844:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6a1a      	ldr	r2, [r3, #32]
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	43db      	mvns	r3, r3
 800784e:	401a      	ands	r2, r3
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6a1a      	ldr	r2, [r3, #32]
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	f003 031f 	and.w	r3, r3, #31
 800785e:	6879      	ldr	r1, [r7, #4]
 8007860:	fa01 f303 	lsl.w	r3, r1, r3
 8007864:	431a      	orrs	r2, r3
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	621a      	str	r2, [r3, #32]
}
 800786a:	bf00      	nop
 800786c:	371c      	adds	r7, #28
 800786e:	46bd      	mov	sp, r7
 8007870:	bc80      	pop	{r7}
 8007872:	4770      	bx	lr

08007874 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007874:	b480      	push	{r7}
 8007876:	b085      	sub	sp, #20
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007884:	2b01      	cmp	r3, #1
 8007886:	d101      	bne.n	800788c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007888:	2302      	movs	r3, #2
 800788a:	e046      	b.n	800791a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2201      	movs	r2, #1
 8007890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2202      	movs	r2, #2
 8007898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	68fa      	ldr	r2, [r7, #12]
 80078ba:	4313      	orrs	r3, r2
 80078bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	68fa      	ldr	r2, [r7, #12]
 80078c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a16      	ldr	r2, [pc, #88]	@ (8007924 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d00e      	beq.n	80078ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078d8:	d009      	beq.n	80078ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a12      	ldr	r2, [pc, #72]	@ (8007928 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d004      	beq.n	80078ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a10      	ldr	r2, [pc, #64]	@ (800792c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d10c      	bne.n	8007908 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80078f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	68ba      	ldr	r2, [r7, #8]
 80078fc:	4313      	orrs	r3, r2
 80078fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	68ba      	ldr	r2, [r7, #8]
 8007906:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2201      	movs	r2, #1
 800790c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007918:	2300      	movs	r3, #0
}
 800791a:	4618      	mov	r0, r3
 800791c:	3714      	adds	r7, #20
 800791e:	46bd      	mov	sp, r7
 8007920:	bc80      	pop	{r7}
 8007922:	4770      	bx	lr
 8007924:	40012c00 	.word	0x40012c00
 8007928:	40000400 	.word	0x40000400
 800792c:	40000800 	.word	0x40000800

08007930 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007938:	bf00      	nop
 800793a:	370c      	adds	r7, #12
 800793c:	46bd      	mov	sp, r7
 800793e:	bc80      	pop	{r7}
 8007940:	4770      	bx	lr

08007942 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007942:	b480      	push	{r7}
 8007944:	b083      	sub	sp, #12
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800794a:	bf00      	nop
 800794c:	370c      	adds	r7, #12
 800794e:	46bd      	mov	sp, r7
 8007950:	bc80      	pop	{r7}
 8007952:	4770      	bx	lr

08007954 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d101      	bne.n	8007966 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	e042      	b.n	80079ec <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800796c:	b2db      	uxtb	r3, r3
 800796e:	2b00      	cmp	r3, #0
 8007970:	d106      	bne.n	8007980 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f7fb fd60 	bl	8003440 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2224      	movs	r2, #36	@ 0x24
 8007984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	68da      	ldr	r2, [r3, #12]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007996:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 fe4f 	bl	800863c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	691a      	ldr	r2, [r3, #16]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80079ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	695a      	ldr	r2, [r3, #20]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80079bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	68da      	ldr	r2, [r3, #12]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80079cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2220      	movs	r2, #32
 80079d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2220      	movs	r2, #32
 80079e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80079ea:	2300      	movs	r3, #0
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3708      	adds	r7, #8
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b08a      	sub	sp, #40	@ 0x28
 80079f8:	af02      	add	r7, sp, #8
 80079fa:	60f8      	str	r0, [r7, #12]
 80079fc:	60b9      	str	r1, [r7, #8]
 80079fe:	603b      	str	r3, [r7, #0]
 8007a00:	4613      	mov	r3, r2
 8007a02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007a04:	2300      	movs	r3, #0
 8007a06:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	2b20      	cmp	r3, #32
 8007a12:	d175      	bne.n	8007b00 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d002      	beq.n	8007a20 <HAL_UART_Transmit+0x2c>
 8007a1a:	88fb      	ldrh	r3, [r7, #6]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d101      	bne.n	8007a24 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007a20:	2301      	movs	r3, #1
 8007a22:	e06e      	b.n	8007b02 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2200      	movs	r2, #0
 8007a28:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2221      	movs	r2, #33	@ 0x21
 8007a2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a32:	f7fb fe93 	bl	800375c <HAL_GetTick>
 8007a36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	88fa      	ldrh	r2, [r7, #6]
 8007a3c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	88fa      	ldrh	r2, [r7, #6]
 8007a42:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a4c:	d108      	bne.n	8007a60 <HAL_UART_Transmit+0x6c>
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d104      	bne.n	8007a60 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007a56:	2300      	movs	r3, #0
 8007a58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	61bb      	str	r3, [r7, #24]
 8007a5e:	e003      	b.n	8007a68 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a64:	2300      	movs	r3, #0
 8007a66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007a68:	e02e      	b.n	8007ac8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	9300      	str	r3, [sp, #0]
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	2200      	movs	r2, #0
 8007a72:	2180      	movs	r1, #128	@ 0x80
 8007a74:	68f8      	ldr	r0, [r7, #12]
 8007a76:	f000 fbb4 	bl	80081e2 <UART_WaitOnFlagUntilTimeout>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d005      	beq.n	8007a8c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2220      	movs	r2, #32
 8007a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007a88:	2303      	movs	r3, #3
 8007a8a:	e03a      	b.n	8007b02 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d10b      	bne.n	8007aaa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	881b      	ldrh	r3, [r3, #0]
 8007a96:	461a      	mov	r2, r3
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007aa0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	3302      	adds	r3, #2
 8007aa6:	61bb      	str	r3, [r7, #24]
 8007aa8:	e007      	b.n	8007aba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	781a      	ldrb	r2, [r3, #0]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007ab4:	69fb      	ldr	r3, [r7, #28]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	3b01      	subs	r3, #1
 8007ac2:	b29a      	uxth	r2, r3
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d1cb      	bne.n	8007a6a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	9300      	str	r3, [sp, #0]
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	2140      	movs	r1, #64	@ 0x40
 8007adc:	68f8      	ldr	r0, [r7, #12]
 8007ade:	f000 fb80 	bl	80081e2 <UART_WaitOnFlagUntilTimeout>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d005      	beq.n	8007af4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2220      	movs	r2, #32
 8007aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007af0:	2303      	movs	r3, #3
 8007af2:	e006      	b.n	8007b02 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2220      	movs	r2, #32
 8007af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007afc:	2300      	movs	r3, #0
 8007afe:	e000      	b.n	8007b02 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007b00:	2302      	movs	r3, #2
  }
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3720      	adds	r7, #32
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}

08007b0a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b0a:	b580      	push	{r7, lr}
 8007b0c:	b08a      	sub	sp, #40	@ 0x28
 8007b0e:	af02      	add	r7, sp, #8
 8007b10:	60f8      	str	r0, [r7, #12]
 8007b12:	60b9      	str	r1, [r7, #8]
 8007b14:	603b      	str	r3, [r7, #0]
 8007b16:	4613      	mov	r3, r2
 8007b18:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	2b20      	cmp	r3, #32
 8007b28:	f040 8081 	bne.w	8007c2e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d002      	beq.n	8007b38 <HAL_UART_Receive+0x2e>
 8007b32:	88fb      	ldrh	r3, [r7, #6]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d101      	bne.n	8007b3c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e079      	b.n	8007c30 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2222      	movs	r2, #34	@ 0x22
 8007b46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b50:	f7fb fe04 	bl	800375c <HAL_GetTick>
 8007b54:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	88fa      	ldrh	r2, [r7, #6]
 8007b5a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	88fa      	ldrh	r2, [r7, #6]
 8007b60:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b6a:	d108      	bne.n	8007b7e <HAL_UART_Receive+0x74>
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	691b      	ldr	r3, [r3, #16]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d104      	bne.n	8007b7e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8007b74:	2300      	movs	r3, #0
 8007b76:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	61bb      	str	r3, [r7, #24]
 8007b7c:	e003      	b.n	8007b86 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b82:	2300      	movs	r3, #0
 8007b84:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007b86:	e047      	b.n	8007c18 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	9300      	str	r3, [sp, #0]
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	2120      	movs	r1, #32
 8007b92:	68f8      	ldr	r0, [r7, #12]
 8007b94:	f000 fb25 	bl	80081e2 <UART_WaitOnFlagUntilTimeout>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d005      	beq.n	8007baa <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2220      	movs	r2, #32
 8007ba2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8007ba6:	2303      	movs	r3, #3
 8007ba8:	e042      	b.n	8007c30 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8007baa:	69fb      	ldr	r3, [r7, #28]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d10c      	bne.n	8007bca <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bbc:	b29a      	uxth	r2, r3
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007bc2:	69bb      	ldr	r3, [r7, #24]
 8007bc4:	3302      	adds	r3, #2
 8007bc6:	61bb      	str	r3, [r7, #24]
 8007bc8:	e01f      	b.n	8007c0a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bd2:	d007      	beq.n	8007be4 <HAL_UART_Receive+0xda>
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d10a      	bne.n	8007bf2 <HAL_UART_Receive+0xe8>
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	691b      	ldr	r3, [r3, #16]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d106      	bne.n	8007bf2 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	b2da      	uxtb	r2, r3
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	701a      	strb	r2, [r3, #0]
 8007bf0:	e008      	b.n	8007c04 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007bfe:	b2da      	uxtb	r2, r3
 8007c00:	69fb      	ldr	r3, [r7, #28]
 8007c02:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007c04:	69fb      	ldr	r3, [r7, #28]
 8007c06:	3301      	adds	r3, #1
 8007c08:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	3b01      	subs	r3, #1
 8007c12:	b29a      	uxth	r2, r3
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d1b2      	bne.n	8007b88 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2220      	movs	r2, #32
 8007c26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	e000      	b.n	8007c30 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8007c2e:	2302      	movs	r3, #2
  }
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3720      	adds	r7, #32
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	4613      	mov	r3, r2
 8007c44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	2b20      	cmp	r3, #32
 8007c50:	d112      	bne.n	8007c78 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d002      	beq.n	8007c5e <HAL_UART_Receive_IT+0x26>
 8007c58:	88fb      	ldrh	r3, [r7, #6]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d101      	bne.n	8007c62 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	e00b      	b.n	8007c7a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2200      	movs	r2, #0
 8007c66:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007c68:	88fb      	ldrh	r3, [r7, #6]
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	68b9      	ldr	r1, [r7, #8]
 8007c6e:	68f8      	ldr	r0, [r7, #12]
 8007c70:	f000 fb10 	bl	8008294 <UART_Start_Receive_IT>
 8007c74:	4603      	mov	r3, r0
 8007c76:	e000      	b.n	8007c7a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007c78:	2302      	movs	r3, #2
  }
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3710      	adds	r7, #16
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
	...

08007c84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b0ba      	sub	sp, #232	@ 0xe8
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	695b      	ldr	r3, [r3, #20]
 8007ca6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007caa:	2300      	movs	r3, #0
 8007cac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cba:	f003 030f 	and.w	r3, r3, #15
 8007cbe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007cc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d10f      	bne.n	8007cea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cce:	f003 0320 	and.w	r3, r3, #32
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d009      	beq.n	8007cea <HAL_UART_IRQHandler+0x66>
 8007cd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cda:	f003 0320 	and.w	r3, r3, #32
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d003      	beq.n	8007cea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 fbec 	bl	80084c0 <UART_Receive_IT>
      return;
 8007ce8:	e25b      	b.n	80081a2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007cea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	f000 80de 	beq.w	8007eb0 <HAL_UART_IRQHandler+0x22c>
 8007cf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007cf8:	f003 0301 	and.w	r3, r3, #1
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d106      	bne.n	8007d0e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d04:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	f000 80d1 	beq.w	8007eb0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d12:	f003 0301 	and.w	r3, r3, #1
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d00b      	beq.n	8007d32 <HAL_UART_IRQHandler+0xae>
 8007d1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d005      	beq.n	8007d32 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d2a:	f043 0201 	orr.w	r2, r3, #1
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d36:	f003 0304 	and.w	r3, r3, #4
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00b      	beq.n	8007d56 <HAL_UART_IRQHandler+0xd2>
 8007d3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d42:	f003 0301 	and.w	r3, r3, #1
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d005      	beq.n	8007d56 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d4e:	f043 0202 	orr.w	r2, r3, #2
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d5a:	f003 0302 	and.w	r3, r3, #2
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00b      	beq.n	8007d7a <HAL_UART_IRQHandler+0xf6>
 8007d62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d66:	f003 0301 	and.w	r3, r3, #1
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d005      	beq.n	8007d7a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d72:	f043 0204 	orr.w	r2, r3, #4
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d7e:	f003 0308 	and.w	r3, r3, #8
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d011      	beq.n	8007daa <HAL_UART_IRQHandler+0x126>
 8007d86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d8a:	f003 0320 	and.w	r3, r3, #32
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d105      	bne.n	8007d9e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007d92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d96:	f003 0301 	and.w	r3, r3, #1
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d005      	beq.n	8007daa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007da2:	f043 0208 	orr.w	r2, r3, #8
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	f000 81f2 	beq.w	8008198 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007db8:	f003 0320 	and.w	r3, r3, #32
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d008      	beq.n	8007dd2 <HAL_UART_IRQHandler+0x14e>
 8007dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007dc4:	f003 0320 	and.w	r3, r3, #32
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d002      	beq.n	8007dd2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 fb77 	bl	80084c0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	695b      	ldr	r3, [r3, #20]
 8007dd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	bf14      	ite	ne
 8007de0:	2301      	movne	r3, #1
 8007de2:	2300      	moveq	r3, #0
 8007de4:	b2db      	uxtb	r3, r3
 8007de6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dee:	f003 0308 	and.w	r3, r3, #8
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d103      	bne.n	8007dfe <HAL_UART_IRQHandler+0x17a>
 8007df6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d04f      	beq.n	8007e9e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 fa81 	bl	8008306 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	695b      	ldr	r3, [r3, #20]
 8007e0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d041      	beq.n	8007e96 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	3314      	adds	r3, #20
 8007e18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007e20:	e853 3f00 	ldrex	r3, [r3]
 8007e24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007e28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007e2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	3314      	adds	r3, #20
 8007e3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007e3e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007e42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007e4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007e4e:	e841 2300 	strex	r3, r2, [r1]
 8007e52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007e56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d1d9      	bne.n	8007e12 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d013      	beq.n	8007e8e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e6a:	4a7e      	ldr	r2, [pc, #504]	@ (8008064 <HAL_UART_IRQHandler+0x3e0>)
 8007e6c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7fc fb60 	bl	8004538 <HAL_DMA_Abort_IT>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d016      	beq.n	8007eac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007e88:	4610      	mov	r0, r2
 8007e8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e8c:	e00e      	b.n	8007eac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 f993 	bl	80081ba <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e94:	e00a      	b.n	8007eac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 f98f 	bl	80081ba <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e9c:	e006      	b.n	8007eac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 f98b 	bl	80081ba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007eaa:	e175      	b.n	8008198 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007eac:	bf00      	nop
    return;
 8007eae:	e173      	b.n	8008198 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	f040 814f 	bne.w	8008158 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ebe:	f003 0310 	and.w	r3, r3, #16
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	f000 8148 	beq.w	8008158 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ecc:	f003 0310 	and.w	r3, r3, #16
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	f000 8141 	beq.w	8008158 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	60bb      	str	r3, [r7, #8]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	60bb      	str	r3, [r7, #8]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	60bb      	str	r3, [r7, #8]
 8007eea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	695b      	ldr	r3, [r3, #20]
 8007ef2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	f000 80b6 	beq.w	8008068 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007f08:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	f000 8145 	beq.w	800819c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007f16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	f080 813e 	bcs.w	800819c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007f26:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f2c:	699b      	ldr	r3, [r3, #24]
 8007f2e:	2b20      	cmp	r3, #32
 8007f30:	f000 8088 	beq.w	8008044 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	330c      	adds	r3, #12
 8007f3a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007f42:	e853 3f00 	ldrex	r3, [r3]
 8007f46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007f4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007f4e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f52:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	330c      	adds	r3, #12
 8007f5c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007f60:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007f64:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f68:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007f6c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007f70:	e841 2300 	strex	r3, r2, [r1]
 8007f74:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007f78:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d1d9      	bne.n	8007f34 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	3314      	adds	r3, #20
 8007f86:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f88:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007f8a:	e853 3f00 	ldrex	r3, [r3]
 8007f8e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007f90:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007f92:	f023 0301 	bic.w	r3, r3, #1
 8007f96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	3314      	adds	r3, #20
 8007fa0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007fa4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007fa8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007faa:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007fac:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007fb0:	e841 2300 	strex	r3, r2, [r1]
 8007fb4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007fb6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d1e1      	bne.n	8007f80 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	3314      	adds	r3, #20
 8007fc2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007fc6:	e853 3f00 	ldrex	r3, [r3]
 8007fca:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007fcc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007fce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007fd2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	3314      	adds	r3, #20
 8007fdc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007fe0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007fe2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007fe6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007fe8:	e841 2300 	strex	r3, r2, [r1]
 8007fec:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007fee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d1e3      	bne.n	8007fbc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2220      	movs	r2, #32
 8007ff8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	330c      	adds	r3, #12
 8008008:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800800a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800800c:	e853 3f00 	ldrex	r3, [r3]
 8008010:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008012:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008014:	f023 0310 	bic.w	r3, r3, #16
 8008018:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	330c      	adds	r3, #12
 8008022:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008026:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008028:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800802a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800802c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800802e:	e841 2300 	strex	r3, r2, [r1]
 8008032:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008034:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008036:	2b00      	cmp	r3, #0
 8008038:	d1e3      	bne.n	8008002 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800803e:	4618      	mov	r0, r3
 8008040:	f7fc fa3e 	bl	80044c0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2202      	movs	r2, #2
 8008048:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008052:	b29b      	uxth	r3, r3
 8008054:	1ad3      	subs	r3, r2, r3
 8008056:	b29b      	uxth	r3, r3
 8008058:	4619      	mov	r1, r3
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 f8b6 	bl	80081cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008060:	e09c      	b.n	800819c <HAL_UART_IRQHandler+0x518>
 8008062:	bf00      	nop
 8008064:	080083cb 	.word	0x080083cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008070:	b29b      	uxth	r3, r3
 8008072:	1ad3      	subs	r3, r2, r3
 8008074:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800807c:	b29b      	uxth	r3, r3
 800807e:	2b00      	cmp	r3, #0
 8008080:	f000 808e 	beq.w	80081a0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008084:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008088:	2b00      	cmp	r3, #0
 800808a:	f000 8089 	beq.w	80081a0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	330c      	adds	r3, #12
 8008094:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008098:	e853 3f00 	ldrex	r3, [r3]
 800809c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800809e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80080a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	330c      	adds	r3, #12
 80080ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80080b2:	647a      	str	r2, [r7, #68]	@ 0x44
 80080b4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80080b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80080ba:	e841 2300 	strex	r3, r2, [r1]
 80080be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80080c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d1e3      	bne.n	800808e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	3314      	adds	r3, #20
 80080cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080d0:	e853 3f00 	ldrex	r3, [r3]
 80080d4:	623b      	str	r3, [r7, #32]
   return(result);
 80080d6:	6a3b      	ldr	r3, [r7, #32]
 80080d8:	f023 0301 	bic.w	r3, r3, #1
 80080dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	3314      	adds	r3, #20
 80080e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80080ea:	633a      	str	r2, [r7, #48]	@ 0x30
 80080ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80080f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080f2:	e841 2300 	strex	r3, r2, [r1]
 80080f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80080f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d1e3      	bne.n	80080c6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2220      	movs	r2, #32
 8008102:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	330c      	adds	r3, #12
 8008112:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	e853 3f00 	ldrex	r3, [r3]
 800811a:	60fb      	str	r3, [r7, #12]
   return(result);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f023 0310 	bic.w	r3, r3, #16
 8008122:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	330c      	adds	r3, #12
 800812c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008130:	61fa      	str	r2, [r7, #28]
 8008132:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008134:	69b9      	ldr	r1, [r7, #24]
 8008136:	69fa      	ldr	r2, [r7, #28]
 8008138:	e841 2300 	strex	r3, r2, [r1]
 800813c:	617b      	str	r3, [r7, #20]
   return(result);
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d1e3      	bne.n	800810c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2202      	movs	r2, #2
 8008148:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800814a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800814e:	4619      	mov	r1, r3
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 f83b 	bl	80081cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008156:	e023      	b.n	80081a0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800815c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008160:	2b00      	cmp	r3, #0
 8008162:	d009      	beq.n	8008178 <HAL_UART_IRQHandler+0x4f4>
 8008164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008168:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800816c:	2b00      	cmp	r3, #0
 800816e:	d003      	beq.n	8008178 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 f93e 	bl	80083f2 <UART_Transmit_IT>
    return;
 8008176:	e014      	b.n	80081a2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800817c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008180:	2b00      	cmp	r3, #0
 8008182:	d00e      	beq.n	80081a2 <HAL_UART_IRQHandler+0x51e>
 8008184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800818c:	2b00      	cmp	r3, #0
 800818e:	d008      	beq.n	80081a2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 f97d 	bl	8008490 <UART_EndTransmit_IT>
    return;
 8008196:	e004      	b.n	80081a2 <HAL_UART_IRQHandler+0x51e>
    return;
 8008198:	bf00      	nop
 800819a:	e002      	b.n	80081a2 <HAL_UART_IRQHandler+0x51e>
      return;
 800819c:	bf00      	nop
 800819e:	e000      	b.n	80081a2 <HAL_UART_IRQHandler+0x51e>
      return;
 80081a0:	bf00      	nop
  }
}
 80081a2:	37e8      	adds	r7, #232	@ 0xe8
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b083      	sub	sp, #12
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80081b0:	bf00      	nop
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bc80      	pop	{r7}
 80081b8:	4770      	bx	lr

080081ba <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80081ba:	b480      	push	{r7}
 80081bc:	b083      	sub	sp, #12
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80081c2:	bf00      	nop
 80081c4:	370c      	adds	r7, #12
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bc80      	pop	{r7}
 80081ca:	4770      	bx	lr

080081cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b083      	sub	sp, #12
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	460b      	mov	r3, r1
 80081d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80081d8:	bf00      	nop
 80081da:	370c      	adds	r7, #12
 80081dc:	46bd      	mov	sp, r7
 80081de:	bc80      	pop	{r7}
 80081e0:	4770      	bx	lr

080081e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80081e2:	b580      	push	{r7, lr}
 80081e4:	b086      	sub	sp, #24
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	60f8      	str	r0, [r7, #12]
 80081ea:	60b9      	str	r1, [r7, #8]
 80081ec:	603b      	str	r3, [r7, #0]
 80081ee:	4613      	mov	r3, r2
 80081f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081f2:	e03b      	b.n	800826c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081f4:	6a3b      	ldr	r3, [r7, #32]
 80081f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081fa:	d037      	beq.n	800826c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081fc:	f7fb faae 	bl	800375c <HAL_GetTick>
 8008200:	4602      	mov	r2, r0
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	1ad3      	subs	r3, r2, r3
 8008206:	6a3a      	ldr	r2, [r7, #32]
 8008208:	429a      	cmp	r2, r3
 800820a:	d302      	bcc.n	8008212 <UART_WaitOnFlagUntilTimeout+0x30>
 800820c:	6a3b      	ldr	r3, [r7, #32]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d101      	bne.n	8008216 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008212:	2303      	movs	r3, #3
 8008214:	e03a      	b.n	800828c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	f003 0304 	and.w	r3, r3, #4
 8008220:	2b00      	cmp	r3, #0
 8008222:	d023      	beq.n	800826c <UART_WaitOnFlagUntilTimeout+0x8a>
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	2b80      	cmp	r3, #128	@ 0x80
 8008228:	d020      	beq.n	800826c <UART_WaitOnFlagUntilTimeout+0x8a>
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	2b40      	cmp	r3, #64	@ 0x40
 800822e:	d01d      	beq.n	800826c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f003 0308 	and.w	r3, r3, #8
 800823a:	2b08      	cmp	r3, #8
 800823c:	d116      	bne.n	800826c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800823e:	2300      	movs	r3, #0
 8008240:	617b      	str	r3, [r7, #20]
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	617b      	str	r3, [r7, #20]
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	617b      	str	r3, [r7, #20]
 8008252:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008254:	68f8      	ldr	r0, [r7, #12]
 8008256:	f000 f856 	bl	8008306 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2208      	movs	r2, #8
 800825e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2200      	movs	r2, #0
 8008264:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008268:	2301      	movs	r3, #1
 800826a:	e00f      	b.n	800828c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	4013      	ands	r3, r2
 8008276:	68ba      	ldr	r2, [r7, #8]
 8008278:	429a      	cmp	r2, r3
 800827a:	bf0c      	ite	eq
 800827c:	2301      	moveq	r3, #1
 800827e:	2300      	movne	r3, #0
 8008280:	b2db      	uxtb	r3, r3
 8008282:	461a      	mov	r2, r3
 8008284:	79fb      	ldrb	r3, [r7, #7]
 8008286:	429a      	cmp	r2, r3
 8008288:	d0b4      	beq.n	80081f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800828a:	2300      	movs	r3, #0
}
 800828c:	4618      	mov	r0, r3
 800828e:	3718      	adds	r7, #24
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008294:	b480      	push	{r7}
 8008296:	b085      	sub	sp, #20
 8008298:	af00      	add	r7, sp, #0
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	4613      	mov	r3, r2
 80082a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	68ba      	ldr	r2, [r7, #8]
 80082a6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	88fa      	ldrh	r2, [r7, #6]
 80082ac:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	88fa      	ldrh	r2, [r7, #6]
 80082b2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2200      	movs	r2, #0
 80082b8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2222      	movs	r2, #34	@ 0x22
 80082be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	691b      	ldr	r3, [r3, #16]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d007      	beq.n	80082da <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	68da      	ldr	r2, [r3, #12]
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80082d8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	695a      	ldr	r2, [r3, #20]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f042 0201 	orr.w	r2, r2, #1
 80082e8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	68da      	ldr	r2, [r3, #12]
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f042 0220 	orr.w	r2, r2, #32
 80082f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80082fa:	2300      	movs	r3, #0
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3714      	adds	r7, #20
 8008300:	46bd      	mov	sp, r7
 8008302:	bc80      	pop	{r7}
 8008304:	4770      	bx	lr

08008306 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008306:	b480      	push	{r7}
 8008308:	b095      	sub	sp, #84	@ 0x54
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	330c      	adds	r3, #12
 8008314:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008316:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008318:	e853 3f00 	ldrex	r3, [r3]
 800831c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800831e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008320:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008324:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	330c      	adds	r3, #12
 800832c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800832e:	643a      	str	r2, [r7, #64]	@ 0x40
 8008330:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008332:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008334:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008336:	e841 2300 	strex	r3, r2, [r1]
 800833a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800833c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800833e:	2b00      	cmp	r3, #0
 8008340:	d1e5      	bne.n	800830e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	3314      	adds	r3, #20
 8008348:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800834a:	6a3b      	ldr	r3, [r7, #32]
 800834c:	e853 3f00 	ldrex	r3, [r3]
 8008350:	61fb      	str	r3, [r7, #28]
   return(result);
 8008352:	69fb      	ldr	r3, [r7, #28]
 8008354:	f023 0301 	bic.w	r3, r3, #1
 8008358:	64bb      	str	r3, [r7, #72]	@ 0x48
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	3314      	adds	r3, #20
 8008360:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008362:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008364:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008366:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008368:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800836a:	e841 2300 	strex	r3, r2, [r1]
 800836e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008372:	2b00      	cmp	r3, #0
 8008374:	d1e5      	bne.n	8008342 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800837a:	2b01      	cmp	r3, #1
 800837c:	d119      	bne.n	80083b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	330c      	adds	r3, #12
 8008384:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	e853 3f00 	ldrex	r3, [r3]
 800838c:	60bb      	str	r3, [r7, #8]
   return(result);
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	f023 0310 	bic.w	r3, r3, #16
 8008394:	647b      	str	r3, [r7, #68]	@ 0x44
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	330c      	adds	r3, #12
 800839c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800839e:	61ba      	str	r2, [r7, #24]
 80083a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a2:	6979      	ldr	r1, [r7, #20]
 80083a4:	69ba      	ldr	r2, [r7, #24]
 80083a6:	e841 2300 	strex	r3, r2, [r1]
 80083aa:	613b      	str	r3, [r7, #16]
   return(result);
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d1e5      	bne.n	800837e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2220      	movs	r2, #32
 80083b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2200      	movs	r2, #0
 80083be:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80083c0:	bf00      	nop
 80083c2:	3754      	adds	r7, #84	@ 0x54
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bc80      	pop	{r7}
 80083c8:	4770      	bx	lr

080083ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80083ca:	b580      	push	{r7, lr}
 80083cc:	b084      	sub	sp, #16
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2200      	movs	r2, #0
 80083dc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2200      	movs	r2, #0
 80083e2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80083e4:	68f8      	ldr	r0, [r7, #12]
 80083e6:	f7ff fee8 	bl	80081ba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083ea:	bf00      	nop
 80083ec:	3710      	adds	r7, #16
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}

080083f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80083f2:	b480      	push	{r7}
 80083f4:	b085      	sub	sp, #20
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008400:	b2db      	uxtb	r3, r3
 8008402:	2b21      	cmp	r3, #33	@ 0x21
 8008404:	d13e      	bne.n	8008484 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800840e:	d114      	bne.n	800843a <UART_Transmit_IT+0x48>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	691b      	ldr	r3, [r3, #16]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d110      	bne.n	800843a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6a1b      	ldr	r3, [r3, #32]
 800841c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	881b      	ldrh	r3, [r3, #0]
 8008422:	461a      	mov	r2, r3
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800842c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6a1b      	ldr	r3, [r3, #32]
 8008432:	1c9a      	adds	r2, r3, #2
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	621a      	str	r2, [r3, #32]
 8008438:	e008      	b.n	800844c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6a1b      	ldr	r3, [r3, #32]
 800843e:	1c59      	adds	r1, r3, #1
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	6211      	str	r1, [r2, #32]
 8008444:	781a      	ldrb	r2, [r3, #0]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008450:	b29b      	uxth	r3, r3
 8008452:	3b01      	subs	r3, #1
 8008454:	b29b      	uxth	r3, r3
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	4619      	mov	r1, r3
 800845a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800845c:	2b00      	cmp	r3, #0
 800845e:	d10f      	bne.n	8008480 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	68da      	ldr	r2, [r3, #12]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800846e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	68da      	ldr	r2, [r3, #12]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800847e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008480:	2300      	movs	r3, #0
 8008482:	e000      	b.n	8008486 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008484:	2302      	movs	r3, #2
  }
}
 8008486:	4618      	mov	r0, r3
 8008488:	3714      	adds	r7, #20
 800848a:	46bd      	mov	sp, r7
 800848c:	bc80      	pop	{r7}
 800848e:	4770      	bx	lr

08008490 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	68da      	ldr	r2, [r3, #12]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80084a6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2220      	movs	r2, #32
 80084ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f7ff fe79 	bl	80081a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80084b6:	2300      	movs	r3, #0
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3708      	adds	r7, #8
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b08c      	sub	sp, #48	@ 0x30
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	2b22      	cmp	r3, #34	@ 0x22
 80084d2:	f040 80ae 	bne.w	8008632 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	689b      	ldr	r3, [r3, #8]
 80084da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084de:	d117      	bne.n	8008510 <UART_Receive_IT+0x50>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	691b      	ldr	r3, [r3, #16]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d113      	bne.n	8008510 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80084e8:	2300      	movs	r3, #0
 80084ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084f0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084fe:	b29a      	uxth	r2, r3
 8008500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008502:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008508:	1c9a      	adds	r2, r3, #2
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	629a      	str	r2, [r3, #40]	@ 0x28
 800850e:	e026      	b.n	800855e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008514:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008516:	2300      	movs	r3, #0
 8008518:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	689b      	ldr	r3, [r3, #8]
 800851e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008522:	d007      	beq.n	8008534 <UART_Receive_IT+0x74>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d10a      	bne.n	8008542 <UART_Receive_IT+0x82>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	691b      	ldr	r3, [r3, #16]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d106      	bne.n	8008542 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	b2da      	uxtb	r2, r3
 800853c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800853e:	701a      	strb	r2, [r3, #0]
 8008540:	e008      	b.n	8008554 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	b2db      	uxtb	r3, r3
 800854a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800854e:	b2da      	uxtb	r2, r3
 8008550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008552:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008558:	1c5a      	adds	r2, r3, #1
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008562:	b29b      	uxth	r3, r3
 8008564:	3b01      	subs	r3, #1
 8008566:	b29b      	uxth	r3, r3
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	4619      	mov	r1, r3
 800856c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800856e:	2b00      	cmp	r3, #0
 8008570:	d15d      	bne.n	800862e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	68da      	ldr	r2, [r3, #12]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f022 0220 	bic.w	r2, r2, #32
 8008580:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	68da      	ldr	r2, [r3, #12]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008590:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	695a      	ldr	r2, [r3, #20]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f022 0201 	bic.w	r2, r2, #1
 80085a0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2220      	movs	r2, #32
 80085a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d135      	bne.n	8008624 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2200      	movs	r2, #0
 80085bc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	330c      	adds	r3, #12
 80085c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	e853 3f00 	ldrex	r3, [r3]
 80085cc:	613b      	str	r3, [r7, #16]
   return(result);
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	f023 0310 	bic.w	r3, r3, #16
 80085d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	330c      	adds	r3, #12
 80085dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085de:	623a      	str	r2, [r7, #32]
 80085e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e2:	69f9      	ldr	r1, [r7, #28]
 80085e4:	6a3a      	ldr	r2, [r7, #32]
 80085e6:	e841 2300 	strex	r3, r2, [r1]
 80085ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80085ec:	69bb      	ldr	r3, [r7, #24]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d1e5      	bne.n	80085be <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f003 0310 	and.w	r3, r3, #16
 80085fc:	2b10      	cmp	r3, #16
 80085fe:	d10a      	bne.n	8008616 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008600:	2300      	movs	r3, #0
 8008602:	60fb      	str	r3, [r7, #12]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	60fb      	str	r3, [r7, #12]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	60fb      	str	r3, [r7, #12]
 8008614:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800861a:	4619      	mov	r1, r3
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f7ff fdd5 	bl	80081cc <HAL_UARTEx_RxEventCallback>
 8008622:	e002      	b.n	800862a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f7f9 feb9 	bl	800239c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800862a:	2300      	movs	r3, #0
 800862c:	e002      	b.n	8008634 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800862e:	2300      	movs	r3, #0
 8008630:	e000      	b.n	8008634 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008632:	2302      	movs	r3, #2
  }
}
 8008634:	4618      	mov	r0, r3
 8008636:	3730      	adds	r7, #48	@ 0x30
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b084      	sub	sp, #16
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	691b      	ldr	r3, [r3, #16]
 800864a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	68da      	ldr	r2, [r3, #12]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	430a      	orrs	r2, r1
 8008658:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	689a      	ldr	r2, [r3, #8]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	691b      	ldr	r3, [r3, #16]
 8008662:	431a      	orrs	r2, r3
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	695b      	ldr	r3, [r3, #20]
 8008668:	4313      	orrs	r3, r2
 800866a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	68db      	ldr	r3, [r3, #12]
 8008672:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8008676:	f023 030c 	bic.w	r3, r3, #12
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	6812      	ldr	r2, [r2, #0]
 800867e:	68b9      	ldr	r1, [r7, #8]
 8008680:	430b      	orrs	r3, r1
 8008682:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	695b      	ldr	r3, [r3, #20]
 800868a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	699a      	ldr	r2, [r3, #24]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	430a      	orrs	r2, r1
 8008698:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a2c      	ldr	r2, [pc, #176]	@ (8008750 <UART_SetConfig+0x114>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d103      	bne.n	80086ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80086a4:	f7fd fea2 	bl	80063ec <HAL_RCC_GetPCLK2Freq>
 80086a8:	60f8      	str	r0, [r7, #12]
 80086aa:	e002      	b.n	80086b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80086ac:	f7fd fe8a 	bl	80063c4 <HAL_RCC_GetPCLK1Freq>
 80086b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80086b2:	68fa      	ldr	r2, [r7, #12]
 80086b4:	4613      	mov	r3, r2
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	4413      	add	r3, r2
 80086ba:	009a      	lsls	r2, r3, #2
 80086bc:	441a      	add	r2, r3
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80086c8:	4a22      	ldr	r2, [pc, #136]	@ (8008754 <UART_SetConfig+0x118>)
 80086ca:	fba2 2303 	umull	r2, r3, r2, r3
 80086ce:	095b      	lsrs	r3, r3, #5
 80086d0:	0119      	lsls	r1, r3, #4
 80086d2:	68fa      	ldr	r2, [r7, #12]
 80086d4:	4613      	mov	r3, r2
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	4413      	add	r3, r2
 80086da:	009a      	lsls	r2, r3, #2
 80086dc:	441a      	add	r2, r3
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80086e8:	4b1a      	ldr	r3, [pc, #104]	@ (8008754 <UART_SetConfig+0x118>)
 80086ea:	fba3 0302 	umull	r0, r3, r3, r2
 80086ee:	095b      	lsrs	r3, r3, #5
 80086f0:	2064      	movs	r0, #100	@ 0x64
 80086f2:	fb00 f303 	mul.w	r3, r0, r3
 80086f6:	1ad3      	subs	r3, r2, r3
 80086f8:	011b      	lsls	r3, r3, #4
 80086fa:	3332      	adds	r3, #50	@ 0x32
 80086fc:	4a15      	ldr	r2, [pc, #84]	@ (8008754 <UART_SetConfig+0x118>)
 80086fe:	fba2 2303 	umull	r2, r3, r2, r3
 8008702:	095b      	lsrs	r3, r3, #5
 8008704:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008708:	4419      	add	r1, r3
 800870a:	68fa      	ldr	r2, [r7, #12]
 800870c:	4613      	mov	r3, r2
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	4413      	add	r3, r2
 8008712:	009a      	lsls	r2, r3, #2
 8008714:	441a      	add	r2, r3
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	009b      	lsls	r3, r3, #2
 800871c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008720:	4b0c      	ldr	r3, [pc, #48]	@ (8008754 <UART_SetConfig+0x118>)
 8008722:	fba3 0302 	umull	r0, r3, r3, r2
 8008726:	095b      	lsrs	r3, r3, #5
 8008728:	2064      	movs	r0, #100	@ 0x64
 800872a:	fb00 f303 	mul.w	r3, r0, r3
 800872e:	1ad3      	subs	r3, r2, r3
 8008730:	011b      	lsls	r3, r3, #4
 8008732:	3332      	adds	r3, #50	@ 0x32
 8008734:	4a07      	ldr	r2, [pc, #28]	@ (8008754 <UART_SetConfig+0x118>)
 8008736:	fba2 2303 	umull	r2, r3, r2, r3
 800873a:	095b      	lsrs	r3, r3, #5
 800873c:	f003 020f 	and.w	r2, r3, #15
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	440a      	add	r2, r1
 8008746:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008748:	bf00      	nop
 800874a:	3710      	adds	r7, #16
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}
 8008750:	40013800 	.word	0x40013800
 8008754:	51eb851f 	.word	0x51eb851f

08008758 <std>:
 8008758:	2300      	movs	r3, #0
 800875a:	b510      	push	{r4, lr}
 800875c:	4604      	mov	r4, r0
 800875e:	e9c0 3300 	strd	r3, r3, [r0]
 8008762:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008766:	6083      	str	r3, [r0, #8]
 8008768:	8181      	strh	r1, [r0, #12]
 800876a:	6643      	str	r3, [r0, #100]	@ 0x64
 800876c:	81c2      	strh	r2, [r0, #14]
 800876e:	6183      	str	r3, [r0, #24]
 8008770:	4619      	mov	r1, r3
 8008772:	2208      	movs	r2, #8
 8008774:	305c      	adds	r0, #92	@ 0x5c
 8008776:	f000 faad 	bl	8008cd4 <memset>
 800877a:	4b0d      	ldr	r3, [pc, #52]	@ (80087b0 <std+0x58>)
 800877c:	6224      	str	r4, [r4, #32]
 800877e:	6263      	str	r3, [r4, #36]	@ 0x24
 8008780:	4b0c      	ldr	r3, [pc, #48]	@ (80087b4 <std+0x5c>)
 8008782:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008784:	4b0c      	ldr	r3, [pc, #48]	@ (80087b8 <std+0x60>)
 8008786:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008788:	4b0c      	ldr	r3, [pc, #48]	@ (80087bc <std+0x64>)
 800878a:	6323      	str	r3, [r4, #48]	@ 0x30
 800878c:	4b0c      	ldr	r3, [pc, #48]	@ (80087c0 <std+0x68>)
 800878e:	429c      	cmp	r4, r3
 8008790:	d006      	beq.n	80087a0 <std+0x48>
 8008792:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008796:	4294      	cmp	r4, r2
 8008798:	d002      	beq.n	80087a0 <std+0x48>
 800879a:	33d0      	adds	r3, #208	@ 0xd0
 800879c:	429c      	cmp	r4, r3
 800879e:	d105      	bne.n	80087ac <std+0x54>
 80087a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80087a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087a8:	f000 bb0c 	b.w	8008dc4 <__retarget_lock_init_recursive>
 80087ac:	bd10      	pop	{r4, pc}
 80087ae:	bf00      	nop
 80087b0:	08008b25 	.word	0x08008b25
 80087b4:	08008b47 	.word	0x08008b47
 80087b8:	08008b7f 	.word	0x08008b7f
 80087bc:	08008ba3 	.word	0x08008ba3
 80087c0:	200002b8 	.word	0x200002b8

080087c4 <stdio_exit_handler>:
 80087c4:	4a02      	ldr	r2, [pc, #8]	@ (80087d0 <stdio_exit_handler+0xc>)
 80087c6:	4903      	ldr	r1, [pc, #12]	@ (80087d4 <stdio_exit_handler+0x10>)
 80087c8:	4803      	ldr	r0, [pc, #12]	@ (80087d8 <stdio_exit_handler+0x14>)
 80087ca:	f000 b869 	b.w	80088a0 <_fwalk_sglue>
 80087ce:	bf00      	nop
 80087d0:	20000014 	.word	0x20000014
 80087d4:	08009689 	.word	0x08009689
 80087d8:	20000024 	.word	0x20000024

080087dc <cleanup_stdio>:
 80087dc:	6841      	ldr	r1, [r0, #4]
 80087de:	4b0c      	ldr	r3, [pc, #48]	@ (8008810 <cleanup_stdio+0x34>)
 80087e0:	b510      	push	{r4, lr}
 80087e2:	4299      	cmp	r1, r3
 80087e4:	4604      	mov	r4, r0
 80087e6:	d001      	beq.n	80087ec <cleanup_stdio+0x10>
 80087e8:	f000 ff4e 	bl	8009688 <_fflush_r>
 80087ec:	68a1      	ldr	r1, [r4, #8]
 80087ee:	4b09      	ldr	r3, [pc, #36]	@ (8008814 <cleanup_stdio+0x38>)
 80087f0:	4299      	cmp	r1, r3
 80087f2:	d002      	beq.n	80087fa <cleanup_stdio+0x1e>
 80087f4:	4620      	mov	r0, r4
 80087f6:	f000 ff47 	bl	8009688 <_fflush_r>
 80087fa:	68e1      	ldr	r1, [r4, #12]
 80087fc:	4b06      	ldr	r3, [pc, #24]	@ (8008818 <cleanup_stdio+0x3c>)
 80087fe:	4299      	cmp	r1, r3
 8008800:	d004      	beq.n	800880c <cleanup_stdio+0x30>
 8008802:	4620      	mov	r0, r4
 8008804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008808:	f000 bf3e 	b.w	8009688 <_fflush_r>
 800880c:	bd10      	pop	{r4, pc}
 800880e:	bf00      	nop
 8008810:	200002b8 	.word	0x200002b8
 8008814:	20000320 	.word	0x20000320
 8008818:	20000388 	.word	0x20000388

0800881c <global_stdio_init.part.0>:
 800881c:	b510      	push	{r4, lr}
 800881e:	4b0b      	ldr	r3, [pc, #44]	@ (800884c <global_stdio_init.part.0+0x30>)
 8008820:	4c0b      	ldr	r4, [pc, #44]	@ (8008850 <global_stdio_init.part.0+0x34>)
 8008822:	4a0c      	ldr	r2, [pc, #48]	@ (8008854 <global_stdio_init.part.0+0x38>)
 8008824:	4620      	mov	r0, r4
 8008826:	601a      	str	r2, [r3, #0]
 8008828:	2104      	movs	r1, #4
 800882a:	2200      	movs	r2, #0
 800882c:	f7ff ff94 	bl	8008758 <std>
 8008830:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008834:	2201      	movs	r2, #1
 8008836:	2109      	movs	r1, #9
 8008838:	f7ff ff8e 	bl	8008758 <std>
 800883c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008840:	2202      	movs	r2, #2
 8008842:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008846:	2112      	movs	r1, #18
 8008848:	f7ff bf86 	b.w	8008758 <std>
 800884c:	200003f0 	.word	0x200003f0
 8008850:	200002b8 	.word	0x200002b8
 8008854:	080087c5 	.word	0x080087c5

08008858 <__sfp_lock_acquire>:
 8008858:	4801      	ldr	r0, [pc, #4]	@ (8008860 <__sfp_lock_acquire+0x8>)
 800885a:	f000 bab4 	b.w	8008dc6 <__retarget_lock_acquire_recursive>
 800885e:	bf00      	nop
 8008860:	200003f9 	.word	0x200003f9

08008864 <__sfp_lock_release>:
 8008864:	4801      	ldr	r0, [pc, #4]	@ (800886c <__sfp_lock_release+0x8>)
 8008866:	f000 baaf 	b.w	8008dc8 <__retarget_lock_release_recursive>
 800886a:	bf00      	nop
 800886c:	200003f9 	.word	0x200003f9

08008870 <__sinit>:
 8008870:	b510      	push	{r4, lr}
 8008872:	4604      	mov	r4, r0
 8008874:	f7ff fff0 	bl	8008858 <__sfp_lock_acquire>
 8008878:	6a23      	ldr	r3, [r4, #32]
 800887a:	b11b      	cbz	r3, 8008884 <__sinit+0x14>
 800887c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008880:	f7ff bff0 	b.w	8008864 <__sfp_lock_release>
 8008884:	4b04      	ldr	r3, [pc, #16]	@ (8008898 <__sinit+0x28>)
 8008886:	6223      	str	r3, [r4, #32]
 8008888:	4b04      	ldr	r3, [pc, #16]	@ (800889c <__sinit+0x2c>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d1f5      	bne.n	800887c <__sinit+0xc>
 8008890:	f7ff ffc4 	bl	800881c <global_stdio_init.part.0>
 8008894:	e7f2      	b.n	800887c <__sinit+0xc>
 8008896:	bf00      	nop
 8008898:	080087dd 	.word	0x080087dd
 800889c:	200003f0 	.word	0x200003f0

080088a0 <_fwalk_sglue>:
 80088a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088a4:	4607      	mov	r7, r0
 80088a6:	4688      	mov	r8, r1
 80088a8:	4614      	mov	r4, r2
 80088aa:	2600      	movs	r6, #0
 80088ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80088b0:	f1b9 0901 	subs.w	r9, r9, #1
 80088b4:	d505      	bpl.n	80088c2 <_fwalk_sglue+0x22>
 80088b6:	6824      	ldr	r4, [r4, #0]
 80088b8:	2c00      	cmp	r4, #0
 80088ba:	d1f7      	bne.n	80088ac <_fwalk_sglue+0xc>
 80088bc:	4630      	mov	r0, r6
 80088be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088c2:	89ab      	ldrh	r3, [r5, #12]
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d907      	bls.n	80088d8 <_fwalk_sglue+0x38>
 80088c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80088cc:	3301      	adds	r3, #1
 80088ce:	d003      	beq.n	80088d8 <_fwalk_sglue+0x38>
 80088d0:	4629      	mov	r1, r5
 80088d2:	4638      	mov	r0, r7
 80088d4:	47c0      	blx	r8
 80088d6:	4306      	orrs	r6, r0
 80088d8:	3568      	adds	r5, #104	@ 0x68
 80088da:	e7e9      	b.n	80088b0 <_fwalk_sglue+0x10>

080088dc <iprintf>:
 80088dc:	b40f      	push	{r0, r1, r2, r3}
 80088de:	b507      	push	{r0, r1, r2, lr}
 80088e0:	4906      	ldr	r1, [pc, #24]	@ (80088fc <iprintf+0x20>)
 80088e2:	ab04      	add	r3, sp, #16
 80088e4:	6808      	ldr	r0, [r1, #0]
 80088e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80088ea:	6881      	ldr	r1, [r0, #8]
 80088ec:	9301      	str	r3, [sp, #4]
 80088ee:	f000 fba1 	bl	8009034 <_vfiprintf_r>
 80088f2:	b003      	add	sp, #12
 80088f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80088f8:	b004      	add	sp, #16
 80088fa:	4770      	bx	lr
 80088fc:	20000020 	.word	0x20000020

08008900 <_puts_r>:
 8008900:	6a03      	ldr	r3, [r0, #32]
 8008902:	b570      	push	{r4, r5, r6, lr}
 8008904:	4605      	mov	r5, r0
 8008906:	460e      	mov	r6, r1
 8008908:	6884      	ldr	r4, [r0, #8]
 800890a:	b90b      	cbnz	r3, 8008910 <_puts_r+0x10>
 800890c:	f7ff ffb0 	bl	8008870 <__sinit>
 8008910:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008912:	07db      	lsls	r3, r3, #31
 8008914:	d405      	bmi.n	8008922 <_puts_r+0x22>
 8008916:	89a3      	ldrh	r3, [r4, #12]
 8008918:	0598      	lsls	r0, r3, #22
 800891a:	d402      	bmi.n	8008922 <_puts_r+0x22>
 800891c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800891e:	f000 fa52 	bl	8008dc6 <__retarget_lock_acquire_recursive>
 8008922:	89a3      	ldrh	r3, [r4, #12]
 8008924:	0719      	lsls	r1, r3, #28
 8008926:	d502      	bpl.n	800892e <_puts_r+0x2e>
 8008928:	6923      	ldr	r3, [r4, #16]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d135      	bne.n	800899a <_puts_r+0x9a>
 800892e:	4621      	mov	r1, r4
 8008930:	4628      	mov	r0, r5
 8008932:	f000 f979 	bl	8008c28 <__swsetup_r>
 8008936:	b380      	cbz	r0, 800899a <_puts_r+0x9a>
 8008938:	f04f 35ff 	mov.w	r5, #4294967295
 800893c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800893e:	07da      	lsls	r2, r3, #31
 8008940:	d405      	bmi.n	800894e <_puts_r+0x4e>
 8008942:	89a3      	ldrh	r3, [r4, #12]
 8008944:	059b      	lsls	r3, r3, #22
 8008946:	d402      	bmi.n	800894e <_puts_r+0x4e>
 8008948:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800894a:	f000 fa3d 	bl	8008dc8 <__retarget_lock_release_recursive>
 800894e:	4628      	mov	r0, r5
 8008950:	bd70      	pop	{r4, r5, r6, pc}
 8008952:	2b00      	cmp	r3, #0
 8008954:	da04      	bge.n	8008960 <_puts_r+0x60>
 8008956:	69a2      	ldr	r2, [r4, #24]
 8008958:	429a      	cmp	r2, r3
 800895a:	dc17      	bgt.n	800898c <_puts_r+0x8c>
 800895c:	290a      	cmp	r1, #10
 800895e:	d015      	beq.n	800898c <_puts_r+0x8c>
 8008960:	6823      	ldr	r3, [r4, #0]
 8008962:	1c5a      	adds	r2, r3, #1
 8008964:	6022      	str	r2, [r4, #0]
 8008966:	7019      	strb	r1, [r3, #0]
 8008968:	68a3      	ldr	r3, [r4, #8]
 800896a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800896e:	3b01      	subs	r3, #1
 8008970:	60a3      	str	r3, [r4, #8]
 8008972:	2900      	cmp	r1, #0
 8008974:	d1ed      	bne.n	8008952 <_puts_r+0x52>
 8008976:	2b00      	cmp	r3, #0
 8008978:	da11      	bge.n	800899e <_puts_r+0x9e>
 800897a:	4622      	mov	r2, r4
 800897c:	210a      	movs	r1, #10
 800897e:	4628      	mov	r0, r5
 8008980:	f000 f913 	bl	8008baa <__swbuf_r>
 8008984:	3001      	adds	r0, #1
 8008986:	d0d7      	beq.n	8008938 <_puts_r+0x38>
 8008988:	250a      	movs	r5, #10
 800898a:	e7d7      	b.n	800893c <_puts_r+0x3c>
 800898c:	4622      	mov	r2, r4
 800898e:	4628      	mov	r0, r5
 8008990:	f000 f90b 	bl	8008baa <__swbuf_r>
 8008994:	3001      	adds	r0, #1
 8008996:	d1e7      	bne.n	8008968 <_puts_r+0x68>
 8008998:	e7ce      	b.n	8008938 <_puts_r+0x38>
 800899a:	3e01      	subs	r6, #1
 800899c:	e7e4      	b.n	8008968 <_puts_r+0x68>
 800899e:	6823      	ldr	r3, [r4, #0]
 80089a0:	1c5a      	adds	r2, r3, #1
 80089a2:	6022      	str	r2, [r4, #0]
 80089a4:	220a      	movs	r2, #10
 80089a6:	701a      	strb	r2, [r3, #0]
 80089a8:	e7ee      	b.n	8008988 <_puts_r+0x88>
	...

080089ac <puts>:
 80089ac:	4b02      	ldr	r3, [pc, #8]	@ (80089b8 <puts+0xc>)
 80089ae:	4601      	mov	r1, r0
 80089b0:	6818      	ldr	r0, [r3, #0]
 80089b2:	f7ff bfa5 	b.w	8008900 <_puts_r>
 80089b6:	bf00      	nop
 80089b8:	20000020 	.word	0x20000020

080089bc <setvbuf>:
 80089bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80089c0:	461d      	mov	r5, r3
 80089c2:	4b57      	ldr	r3, [pc, #348]	@ (8008b20 <setvbuf+0x164>)
 80089c4:	4604      	mov	r4, r0
 80089c6:	681f      	ldr	r7, [r3, #0]
 80089c8:	460e      	mov	r6, r1
 80089ca:	4690      	mov	r8, r2
 80089cc:	b127      	cbz	r7, 80089d8 <setvbuf+0x1c>
 80089ce:	6a3b      	ldr	r3, [r7, #32]
 80089d0:	b913      	cbnz	r3, 80089d8 <setvbuf+0x1c>
 80089d2:	4638      	mov	r0, r7
 80089d4:	f7ff ff4c 	bl	8008870 <__sinit>
 80089d8:	f1b8 0f02 	cmp.w	r8, #2
 80089dc:	d006      	beq.n	80089ec <setvbuf+0x30>
 80089de:	f1b8 0f01 	cmp.w	r8, #1
 80089e2:	f200 809a 	bhi.w	8008b1a <setvbuf+0x15e>
 80089e6:	2d00      	cmp	r5, #0
 80089e8:	f2c0 8097 	blt.w	8008b1a <setvbuf+0x15e>
 80089ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80089ee:	07d9      	lsls	r1, r3, #31
 80089f0:	d405      	bmi.n	80089fe <setvbuf+0x42>
 80089f2:	89a3      	ldrh	r3, [r4, #12]
 80089f4:	059a      	lsls	r2, r3, #22
 80089f6:	d402      	bmi.n	80089fe <setvbuf+0x42>
 80089f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80089fa:	f000 f9e4 	bl	8008dc6 <__retarget_lock_acquire_recursive>
 80089fe:	4621      	mov	r1, r4
 8008a00:	4638      	mov	r0, r7
 8008a02:	f000 fe41 	bl	8009688 <_fflush_r>
 8008a06:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a08:	b141      	cbz	r1, 8008a1c <setvbuf+0x60>
 8008a0a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a0e:	4299      	cmp	r1, r3
 8008a10:	d002      	beq.n	8008a18 <setvbuf+0x5c>
 8008a12:	4638      	mov	r0, r7
 8008a14:	f000 f9e8 	bl	8008de8 <_free_r>
 8008a18:	2300      	movs	r3, #0
 8008a1a:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	61a3      	str	r3, [r4, #24]
 8008a20:	6063      	str	r3, [r4, #4]
 8008a22:	89a3      	ldrh	r3, [r4, #12]
 8008a24:	061b      	lsls	r3, r3, #24
 8008a26:	d503      	bpl.n	8008a30 <setvbuf+0x74>
 8008a28:	4638      	mov	r0, r7
 8008a2a:	6921      	ldr	r1, [r4, #16]
 8008a2c:	f000 f9dc 	bl	8008de8 <_free_r>
 8008a30:	89a3      	ldrh	r3, [r4, #12]
 8008a32:	f1b8 0f02 	cmp.w	r8, #2
 8008a36:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8008a3a:	f023 0303 	bic.w	r3, r3, #3
 8008a3e:	81a3      	strh	r3, [r4, #12]
 8008a40:	d061      	beq.n	8008b06 <setvbuf+0x14a>
 8008a42:	ab01      	add	r3, sp, #4
 8008a44:	466a      	mov	r2, sp
 8008a46:	4621      	mov	r1, r4
 8008a48:	4638      	mov	r0, r7
 8008a4a:	f000 fe45 	bl	80096d8 <__swhatbuf_r>
 8008a4e:	89a3      	ldrh	r3, [r4, #12]
 8008a50:	4318      	orrs	r0, r3
 8008a52:	81a0      	strh	r0, [r4, #12]
 8008a54:	bb2d      	cbnz	r5, 8008aa2 <setvbuf+0xe6>
 8008a56:	9d00      	ldr	r5, [sp, #0]
 8008a58:	4628      	mov	r0, r5
 8008a5a:	f000 fa0d 	bl	8008e78 <malloc>
 8008a5e:	4606      	mov	r6, r0
 8008a60:	2800      	cmp	r0, #0
 8008a62:	d152      	bne.n	8008b0a <setvbuf+0x14e>
 8008a64:	f8dd 9000 	ldr.w	r9, [sp]
 8008a68:	45a9      	cmp	r9, r5
 8008a6a:	d140      	bne.n	8008aee <setvbuf+0x132>
 8008a6c:	f04f 35ff 	mov.w	r5, #4294967295
 8008a70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a74:	f043 0202 	orr.w	r2, r3, #2
 8008a78:	81a2      	strh	r2, [r4, #12]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	60a2      	str	r2, [r4, #8]
 8008a7e:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8008a82:	6022      	str	r2, [r4, #0]
 8008a84:	6122      	str	r2, [r4, #16]
 8008a86:	2201      	movs	r2, #1
 8008a88:	6162      	str	r2, [r4, #20]
 8008a8a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008a8c:	07d6      	lsls	r6, r2, #31
 8008a8e:	d404      	bmi.n	8008a9a <setvbuf+0xde>
 8008a90:	0598      	lsls	r0, r3, #22
 8008a92:	d402      	bmi.n	8008a9a <setvbuf+0xde>
 8008a94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a96:	f000 f997 	bl	8008dc8 <__retarget_lock_release_recursive>
 8008a9a:	4628      	mov	r0, r5
 8008a9c:	b003      	add	sp, #12
 8008a9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008aa2:	2e00      	cmp	r6, #0
 8008aa4:	d0d8      	beq.n	8008a58 <setvbuf+0x9c>
 8008aa6:	6a3b      	ldr	r3, [r7, #32]
 8008aa8:	b913      	cbnz	r3, 8008ab0 <setvbuf+0xf4>
 8008aaa:	4638      	mov	r0, r7
 8008aac:	f7ff fee0 	bl	8008870 <__sinit>
 8008ab0:	f1b8 0f01 	cmp.w	r8, #1
 8008ab4:	bf08      	it	eq
 8008ab6:	89a3      	ldrheq	r3, [r4, #12]
 8008ab8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8008abc:	bf04      	itt	eq
 8008abe:	f043 0301 	orreq.w	r3, r3, #1
 8008ac2:	81a3      	strheq	r3, [r4, #12]
 8008ac4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ac8:	6026      	str	r6, [r4, #0]
 8008aca:	f013 0208 	ands.w	r2, r3, #8
 8008ace:	d01e      	beq.n	8008b0e <setvbuf+0x152>
 8008ad0:	07d9      	lsls	r1, r3, #31
 8008ad2:	bf41      	itttt	mi
 8008ad4:	2200      	movmi	r2, #0
 8008ad6:	426d      	negmi	r5, r5
 8008ad8:	60a2      	strmi	r2, [r4, #8]
 8008ada:	61a5      	strmi	r5, [r4, #24]
 8008adc:	bf58      	it	pl
 8008ade:	60a5      	strpl	r5, [r4, #8]
 8008ae0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008ae2:	07d2      	lsls	r2, r2, #31
 8008ae4:	d401      	bmi.n	8008aea <setvbuf+0x12e>
 8008ae6:	059b      	lsls	r3, r3, #22
 8008ae8:	d513      	bpl.n	8008b12 <setvbuf+0x156>
 8008aea:	2500      	movs	r5, #0
 8008aec:	e7d5      	b.n	8008a9a <setvbuf+0xde>
 8008aee:	4648      	mov	r0, r9
 8008af0:	f000 f9c2 	bl	8008e78 <malloc>
 8008af4:	4606      	mov	r6, r0
 8008af6:	2800      	cmp	r0, #0
 8008af8:	d0b8      	beq.n	8008a6c <setvbuf+0xb0>
 8008afa:	89a3      	ldrh	r3, [r4, #12]
 8008afc:	464d      	mov	r5, r9
 8008afe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b02:	81a3      	strh	r3, [r4, #12]
 8008b04:	e7cf      	b.n	8008aa6 <setvbuf+0xea>
 8008b06:	2500      	movs	r5, #0
 8008b08:	e7b2      	b.n	8008a70 <setvbuf+0xb4>
 8008b0a:	46a9      	mov	r9, r5
 8008b0c:	e7f5      	b.n	8008afa <setvbuf+0x13e>
 8008b0e:	60a2      	str	r2, [r4, #8]
 8008b10:	e7e6      	b.n	8008ae0 <setvbuf+0x124>
 8008b12:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b14:	f000 f958 	bl	8008dc8 <__retarget_lock_release_recursive>
 8008b18:	e7e7      	b.n	8008aea <setvbuf+0x12e>
 8008b1a:	f04f 35ff 	mov.w	r5, #4294967295
 8008b1e:	e7bc      	b.n	8008a9a <setvbuf+0xde>
 8008b20:	20000020 	.word	0x20000020

08008b24 <__sread>:
 8008b24:	b510      	push	{r4, lr}
 8008b26:	460c      	mov	r4, r1
 8008b28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b2c:	f000 f8fc 	bl	8008d28 <_read_r>
 8008b30:	2800      	cmp	r0, #0
 8008b32:	bfab      	itete	ge
 8008b34:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008b36:	89a3      	ldrhlt	r3, [r4, #12]
 8008b38:	181b      	addge	r3, r3, r0
 8008b3a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008b3e:	bfac      	ite	ge
 8008b40:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008b42:	81a3      	strhlt	r3, [r4, #12]
 8008b44:	bd10      	pop	{r4, pc}

08008b46 <__swrite>:
 8008b46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b4a:	461f      	mov	r7, r3
 8008b4c:	898b      	ldrh	r3, [r1, #12]
 8008b4e:	4605      	mov	r5, r0
 8008b50:	05db      	lsls	r3, r3, #23
 8008b52:	460c      	mov	r4, r1
 8008b54:	4616      	mov	r6, r2
 8008b56:	d505      	bpl.n	8008b64 <__swrite+0x1e>
 8008b58:	2302      	movs	r3, #2
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b60:	f000 f8d0 	bl	8008d04 <_lseek_r>
 8008b64:	89a3      	ldrh	r3, [r4, #12]
 8008b66:	4632      	mov	r2, r6
 8008b68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008b6c:	81a3      	strh	r3, [r4, #12]
 8008b6e:	4628      	mov	r0, r5
 8008b70:	463b      	mov	r3, r7
 8008b72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b7a:	f000 b8e7 	b.w	8008d4c <_write_r>

08008b7e <__sseek>:
 8008b7e:	b510      	push	{r4, lr}
 8008b80:	460c      	mov	r4, r1
 8008b82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b86:	f000 f8bd 	bl	8008d04 <_lseek_r>
 8008b8a:	1c43      	adds	r3, r0, #1
 8008b8c:	89a3      	ldrh	r3, [r4, #12]
 8008b8e:	bf15      	itete	ne
 8008b90:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008b92:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008b96:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008b9a:	81a3      	strheq	r3, [r4, #12]
 8008b9c:	bf18      	it	ne
 8008b9e:	81a3      	strhne	r3, [r4, #12]
 8008ba0:	bd10      	pop	{r4, pc}

08008ba2 <__sclose>:
 8008ba2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ba6:	f000 b89d 	b.w	8008ce4 <_close_r>

08008baa <__swbuf_r>:
 8008baa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bac:	460e      	mov	r6, r1
 8008bae:	4614      	mov	r4, r2
 8008bb0:	4605      	mov	r5, r0
 8008bb2:	b118      	cbz	r0, 8008bbc <__swbuf_r+0x12>
 8008bb4:	6a03      	ldr	r3, [r0, #32]
 8008bb6:	b90b      	cbnz	r3, 8008bbc <__swbuf_r+0x12>
 8008bb8:	f7ff fe5a 	bl	8008870 <__sinit>
 8008bbc:	69a3      	ldr	r3, [r4, #24]
 8008bbe:	60a3      	str	r3, [r4, #8]
 8008bc0:	89a3      	ldrh	r3, [r4, #12]
 8008bc2:	071a      	lsls	r2, r3, #28
 8008bc4:	d501      	bpl.n	8008bca <__swbuf_r+0x20>
 8008bc6:	6923      	ldr	r3, [r4, #16]
 8008bc8:	b943      	cbnz	r3, 8008bdc <__swbuf_r+0x32>
 8008bca:	4621      	mov	r1, r4
 8008bcc:	4628      	mov	r0, r5
 8008bce:	f000 f82b 	bl	8008c28 <__swsetup_r>
 8008bd2:	b118      	cbz	r0, 8008bdc <__swbuf_r+0x32>
 8008bd4:	f04f 37ff 	mov.w	r7, #4294967295
 8008bd8:	4638      	mov	r0, r7
 8008bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bdc:	6823      	ldr	r3, [r4, #0]
 8008bde:	6922      	ldr	r2, [r4, #16]
 8008be0:	b2f6      	uxtb	r6, r6
 8008be2:	1a98      	subs	r0, r3, r2
 8008be4:	6963      	ldr	r3, [r4, #20]
 8008be6:	4637      	mov	r7, r6
 8008be8:	4283      	cmp	r3, r0
 8008bea:	dc05      	bgt.n	8008bf8 <__swbuf_r+0x4e>
 8008bec:	4621      	mov	r1, r4
 8008bee:	4628      	mov	r0, r5
 8008bf0:	f000 fd4a 	bl	8009688 <_fflush_r>
 8008bf4:	2800      	cmp	r0, #0
 8008bf6:	d1ed      	bne.n	8008bd4 <__swbuf_r+0x2a>
 8008bf8:	68a3      	ldr	r3, [r4, #8]
 8008bfa:	3b01      	subs	r3, #1
 8008bfc:	60a3      	str	r3, [r4, #8]
 8008bfe:	6823      	ldr	r3, [r4, #0]
 8008c00:	1c5a      	adds	r2, r3, #1
 8008c02:	6022      	str	r2, [r4, #0]
 8008c04:	701e      	strb	r6, [r3, #0]
 8008c06:	6962      	ldr	r2, [r4, #20]
 8008c08:	1c43      	adds	r3, r0, #1
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d004      	beq.n	8008c18 <__swbuf_r+0x6e>
 8008c0e:	89a3      	ldrh	r3, [r4, #12]
 8008c10:	07db      	lsls	r3, r3, #31
 8008c12:	d5e1      	bpl.n	8008bd8 <__swbuf_r+0x2e>
 8008c14:	2e0a      	cmp	r6, #10
 8008c16:	d1df      	bne.n	8008bd8 <__swbuf_r+0x2e>
 8008c18:	4621      	mov	r1, r4
 8008c1a:	4628      	mov	r0, r5
 8008c1c:	f000 fd34 	bl	8009688 <_fflush_r>
 8008c20:	2800      	cmp	r0, #0
 8008c22:	d0d9      	beq.n	8008bd8 <__swbuf_r+0x2e>
 8008c24:	e7d6      	b.n	8008bd4 <__swbuf_r+0x2a>
	...

08008c28 <__swsetup_r>:
 8008c28:	b538      	push	{r3, r4, r5, lr}
 8008c2a:	4b29      	ldr	r3, [pc, #164]	@ (8008cd0 <__swsetup_r+0xa8>)
 8008c2c:	4605      	mov	r5, r0
 8008c2e:	6818      	ldr	r0, [r3, #0]
 8008c30:	460c      	mov	r4, r1
 8008c32:	b118      	cbz	r0, 8008c3c <__swsetup_r+0x14>
 8008c34:	6a03      	ldr	r3, [r0, #32]
 8008c36:	b90b      	cbnz	r3, 8008c3c <__swsetup_r+0x14>
 8008c38:	f7ff fe1a 	bl	8008870 <__sinit>
 8008c3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c40:	0719      	lsls	r1, r3, #28
 8008c42:	d422      	bmi.n	8008c8a <__swsetup_r+0x62>
 8008c44:	06da      	lsls	r2, r3, #27
 8008c46:	d407      	bmi.n	8008c58 <__swsetup_r+0x30>
 8008c48:	2209      	movs	r2, #9
 8008c4a:	602a      	str	r2, [r5, #0]
 8008c4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c50:	f04f 30ff 	mov.w	r0, #4294967295
 8008c54:	81a3      	strh	r3, [r4, #12]
 8008c56:	e033      	b.n	8008cc0 <__swsetup_r+0x98>
 8008c58:	0758      	lsls	r0, r3, #29
 8008c5a:	d512      	bpl.n	8008c82 <__swsetup_r+0x5a>
 8008c5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c5e:	b141      	cbz	r1, 8008c72 <__swsetup_r+0x4a>
 8008c60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c64:	4299      	cmp	r1, r3
 8008c66:	d002      	beq.n	8008c6e <__swsetup_r+0x46>
 8008c68:	4628      	mov	r0, r5
 8008c6a:	f000 f8bd 	bl	8008de8 <_free_r>
 8008c6e:	2300      	movs	r3, #0
 8008c70:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c72:	89a3      	ldrh	r3, [r4, #12]
 8008c74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008c78:	81a3      	strh	r3, [r4, #12]
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	6063      	str	r3, [r4, #4]
 8008c7e:	6923      	ldr	r3, [r4, #16]
 8008c80:	6023      	str	r3, [r4, #0]
 8008c82:	89a3      	ldrh	r3, [r4, #12]
 8008c84:	f043 0308 	orr.w	r3, r3, #8
 8008c88:	81a3      	strh	r3, [r4, #12]
 8008c8a:	6923      	ldr	r3, [r4, #16]
 8008c8c:	b94b      	cbnz	r3, 8008ca2 <__swsetup_r+0x7a>
 8008c8e:	89a3      	ldrh	r3, [r4, #12]
 8008c90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008c94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c98:	d003      	beq.n	8008ca2 <__swsetup_r+0x7a>
 8008c9a:	4621      	mov	r1, r4
 8008c9c:	4628      	mov	r0, r5
 8008c9e:	f000 fd40 	bl	8009722 <__smakebuf_r>
 8008ca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ca6:	f013 0201 	ands.w	r2, r3, #1
 8008caa:	d00a      	beq.n	8008cc2 <__swsetup_r+0x9a>
 8008cac:	2200      	movs	r2, #0
 8008cae:	60a2      	str	r2, [r4, #8]
 8008cb0:	6962      	ldr	r2, [r4, #20]
 8008cb2:	4252      	negs	r2, r2
 8008cb4:	61a2      	str	r2, [r4, #24]
 8008cb6:	6922      	ldr	r2, [r4, #16]
 8008cb8:	b942      	cbnz	r2, 8008ccc <__swsetup_r+0xa4>
 8008cba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008cbe:	d1c5      	bne.n	8008c4c <__swsetup_r+0x24>
 8008cc0:	bd38      	pop	{r3, r4, r5, pc}
 8008cc2:	0799      	lsls	r1, r3, #30
 8008cc4:	bf58      	it	pl
 8008cc6:	6962      	ldrpl	r2, [r4, #20]
 8008cc8:	60a2      	str	r2, [r4, #8]
 8008cca:	e7f4      	b.n	8008cb6 <__swsetup_r+0x8e>
 8008ccc:	2000      	movs	r0, #0
 8008cce:	e7f7      	b.n	8008cc0 <__swsetup_r+0x98>
 8008cd0:	20000020 	.word	0x20000020

08008cd4 <memset>:
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	4402      	add	r2, r0
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d100      	bne.n	8008cde <memset+0xa>
 8008cdc:	4770      	bx	lr
 8008cde:	f803 1b01 	strb.w	r1, [r3], #1
 8008ce2:	e7f9      	b.n	8008cd8 <memset+0x4>

08008ce4 <_close_r>:
 8008ce4:	b538      	push	{r3, r4, r5, lr}
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	4d05      	ldr	r5, [pc, #20]	@ (8008d00 <_close_r+0x1c>)
 8008cea:	4604      	mov	r4, r0
 8008cec:	4608      	mov	r0, r1
 8008cee:	602b      	str	r3, [r5, #0]
 8008cf0:	f7fa f98e 	bl	8003010 <_close>
 8008cf4:	1c43      	adds	r3, r0, #1
 8008cf6:	d102      	bne.n	8008cfe <_close_r+0x1a>
 8008cf8:	682b      	ldr	r3, [r5, #0]
 8008cfa:	b103      	cbz	r3, 8008cfe <_close_r+0x1a>
 8008cfc:	6023      	str	r3, [r4, #0]
 8008cfe:	bd38      	pop	{r3, r4, r5, pc}
 8008d00:	200003f4 	.word	0x200003f4

08008d04 <_lseek_r>:
 8008d04:	b538      	push	{r3, r4, r5, lr}
 8008d06:	4604      	mov	r4, r0
 8008d08:	4608      	mov	r0, r1
 8008d0a:	4611      	mov	r1, r2
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	4d05      	ldr	r5, [pc, #20]	@ (8008d24 <_lseek_r+0x20>)
 8008d10:	602a      	str	r2, [r5, #0]
 8008d12:	461a      	mov	r2, r3
 8008d14:	f7fa f9a0 	bl	8003058 <_lseek>
 8008d18:	1c43      	adds	r3, r0, #1
 8008d1a:	d102      	bne.n	8008d22 <_lseek_r+0x1e>
 8008d1c:	682b      	ldr	r3, [r5, #0]
 8008d1e:	b103      	cbz	r3, 8008d22 <_lseek_r+0x1e>
 8008d20:	6023      	str	r3, [r4, #0]
 8008d22:	bd38      	pop	{r3, r4, r5, pc}
 8008d24:	200003f4 	.word	0x200003f4

08008d28 <_read_r>:
 8008d28:	b538      	push	{r3, r4, r5, lr}
 8008d2a:	4604      	mov	r4, r0
 8008d2c:	4608      	mov	r0, r1
 8008d2e:	4611      	mov	r1, r2
 8008d30:	2200      	movs	r2, #0
 8008d32:	4d05      	ldr	r5, [pc, #20]	@ (8008d48 <_read_r+0x20>)
 8008d34:	602a      	str	r2, [r5, #0]
 8008d36:	461a      	mov	r2, r3
 8008d38:	f7fa fc90 	bl	800365c <_read>
 8008d3c:	1c43      	adds	r3, r0, #1
 8008d3e:	d102      	bne.n	8008d46 <_read_r+0x1e>
 8008d40:	682b      	ldr	r3, [r5, #0]
 8008d42:	b103      	cbz	r3, 8008d46 <_read_r+0x1e>
 8008d44:	6023      	str	r3, [r4, #0]
 8008d46:	bd38      	pop	{r3, r4, r5, pc}
 8008d48:	200003f4 	.word	0x200003f4

08008d4c <_write_r>:
 8008d4c:	b538      	push	{r3, r4, r5, lr}
 8008d4e:	4604      	mov	r4, r0
 8008d50:	4608      	mov	r0, r1
 8008d52:	4611      	mov	r1, r2
 8008d54:	2200      	movs	r2, #0
 8008d56:	4d05      	ldr	r5, [pc, #20]	@ (8008d6c <_write_r+0x20>)
 8008d58:	602a      	str	r2, [r5, #0]
 8008d5a:	461a      	mov	r2, r3
 8008d5c:	f7fa fc52 	bl	8003604 <_write>
 8008d60:	1c43      	adds	r3, r0, #1
 8008d62:	d102      	bne.n	8008d6a <_write_r+0x1e>
 8008d64:	682b      	ldr	r3, [r5, #0]
 8008d66:	b103      	cbz	r3, 8008d6a <_write_r+0x1e>
 8008d68:	6023      	str	r3, [r4, #0]
 8008d6a:	bd38      	pop	{r3, r4, r5, pc}
 8008d6c:	200003f4 	.word	0x200003f4

08008d70 <__errno>:
 8008d70:	4b01      	ldr	r3, [pc, #4]	@ (8008d78 <__errno+0x8>)
 8008d72:	6818      	ldr	r0, [r3, #0]
 8008d74:	4770      	bx	lr
 8008d76:	bf00      	nop
 8008d78:	20000020 	.word	0x20000020

08008d7c <__libc_init_array>:
 8008d7c:	b570      	push	{r4, r5, r6, lr}
 8008d7e:	2600      	movs	r6, #0
 8008d80:	4d0c      	ldr	r5, [pc, #48]	@ (8008db4 <__libc_init_array+0x38>)
 8008d82:	4c0d      	ldr	r4, [pc, #52]	@ (8008db8 <__libc_init_array+0x3c>)
 8008d84:	1b64      	subs	r4, r4, r5
 8008d86:	10a4      	asrs	r4, r4, #2
 8008d88:	42a6      	cmp	r6, r4
 8008d8a:	d109      	bne.n	8008da0 <__libc_init_array+0x24>
 8008d8c:	f000 fd46 	bl	800981c <_init>
 8008d90:	2600      	movs	r6, #0
 8008d92:	4d0a      	ldr	r5, [pc, #40]	@ (8008dbc <__libc_init_array+0x40>)
 8008d94:	4c0a      	ldr	r4, [pc, #40]	@ (8008dc0 <__libc_init_array+0x44>)
 8008d96:	1b64      	subs	r4, r4, r5
 8008d98:	10a4      	asrs	r4, r4, #2
 8008d9a:	42a6      	cmp	r6, r4
 8008d9c:	d105      	bne.n	8008daa <__libc_init_array+0x2e>
 8008d9e:	bd70      	pop	{r4, r5, r6, pc}
 8008da0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008da4:	4798      	blx	r3
 8008da6:	3601      	adds	r6, #1
 8008da8:	e7ee      	b.n	8008d88 <__libc_init_array+0xc>
 8008daa:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dae:	4798      	blx	r3
 8008db0:	3601      	adds	r6, #1
 8008db2:	e7f2      	b.n	8008d9a <__libc_init_array+0x1e>
 8008db4:	0800a8a8 	.word	0x0800a8a8
 8008db8:	0800a8a8 	.word	0x0800a8a8
 8008dbc:	0800a8a8 	.word	0x0800a8a8
 8008dc0:	0800a8ac 	.word	0x0800a8ac

08008dc4 <__retarget_lock_init_recursive>:
 8008dc4:	4770      	bx	lr

08008dc6 <__retarget_lock_acquire_recursive>:
 8008dc6:	4770      	bx	lr

08008dc8 <__retarget_lock_release_recursive>:
 8008dc8:	4770      	bx	lr

08008dca <memcpy>:
 8008dca:	440a      	add	r2, r1
 8008dcc:	4291      	cmp	r1, r2
 8008dce:	f100 33ff 	add.w	r3, r0, #4294967295
 8008dd2:	d100      	bne.n	8008dd6 <memcpy+0xc>
 8008dd4:	4770      	bx	lr
 8008dd6:	b510      	push	{r4, lr}
 8008dd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ddc:	4291      	cmp	r1, r2
 8008dde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008de2:	d1f9      	bne.n	8008dd8 <memcpy+0xe>
 8008de4:	bd10      	pop	{r4, pc}
	...

08008de8 <_free_r>:
 8008de8:	b538      	push	{r3, r4, r5, lr}
 8008dea:	4605      	mov	r5, r0
 8008dec:	2900      	cmp	r1, #0
 8008dee:	d040      	beq.n	8008e72 <_free_r+0x8a>
 8008df0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008df4:	1f0c      	subs	r4, r1, #4
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	bfb8      	it	lt
 8008dfa:	18e4      	addlt	r4, r4, r3
 8008dfc:	f000 f8e6 	bl	8008fcc <__malloc_lock>
 8008e00:	4a1c      	ldr	r2, [pc, #112]	@ (8008e74 <_free_r+0x8c>)
 8008e02:	6813      	ldr	r3, [r2, #0]
 8008e04:	b933      	cbnz	r3, 8008e14 <_free_r+0x2c>
 8008e06:	6063      	str	r3, [r4, #4]
 8008e08:	6014      	str	r4, [r2, #0]
 8008e0a:	4628      	mov	r0, r5
 8008e0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e10:	f000 b8e2 	b.w	8008fd8 <__malloc_unlock>
 8008e14:	42a3      	cmp	r3, r4
 8008e16:	d908      	bls.n	8008e2a <_free_r+0x42>
 8008e18:	6820      	ldr	r0, [r4, #0]
 8008e1a:	1821      	adds	r1, r4, r0
 8008e1c:	428b      	cmp	r3, r1
 8008e1e:	bf01      	itttt	eq
 8008e20:	6819      	ldreq	r1, [r3, #0]
 8008e22:	685b      	ldreq	r3, [r3, #4]
 8008e24:	1809      	addeq	r1, r1, r0
 8008e26:	6021      	streq	r1, [r4, #0]
 8008e28:	e7ed      	b.n	8008e06 <_free_r+0x1e>
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	b10b      	cbz	r3, 8008e34 <_free_r+0x4c>
 8008e30:	42a3      	cmp	r3, r4
 8008e32:	d9fa      	bls.n	8008e2a <_free_r+0x42>
 8008e34:	6811      	ldr	r1, [r2, #0]
 8008e36:	1850      	adds	r0, r2, r1
 8008e38:	42a0      	cmp	r0, r4
 8008e3a:	d10b      	bne.n	8008e54 <_free_r+0x6c>
 8008e3c:	6820      	ldr	r0, [r4, #0]
 8008e3e:	4401      	add	r1, r0
 8008e40:	1850      	adds	r0, r2, r1
 8008e42:	4283      	cmp	r3, r0
 8008e44:	6011      	str	r1, [r2, #0]
 8008e46:	d1e0      	bne.n	8008e0a <_free_r+0x22>
 8008e48:	6818      	ldr	r0, [r3, #0]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	4408      	add	r0, r1
 8008e4e:	6010      	str	r0, [r2, #0]
 8008e50:	6053      	str	r3, [r2, #4]
 8008e52:	e7da      	b.n	8008e0a <_free_r+0x22>
 8008e54:	d902      	bls.n	8008e5c <_free_r+0x74>
 8008e56:	230c      	movs	r3, #12
 8008e58:	602b      	str	r3, [r5, #0]
 8008e5a:	e7d6      	b.n	8008e0a <_free_r+0x22>
 8008e5c:	6820      	ldr	r0, [r4, #0]
 8008e5e:	1821      	adds	r1, r4, r0
 8008e60:	428b      	cmp	r3, r1
 8008e62:	bf01      	itttt	eq
 8008e64:	6819      	ldreq	r1, [r3, #0]
 8008e66:	685b      	ldreq	r3, [r3, #4]
 8008e68:	1809      	addeq	r1, r1, r0
 8008e6a:	6021      	streq	r1, [r4, #0]
 8008e6c:	6063      	str	r3, [r4, #4]
 8008e6e:	6054      	str	r4, [r2, #4]
 8008e70:	e7cb      	b.n	8008e0a <_free_r+0x22>
 8008e72:	bd38      	pop	{r3, r4, r5, pc}
 8008e74:	20000400 	.word	0x20000400

08008e78 <malloc>:
 8008e78:	4b02      	ldr	r3, [pc, #8]	@ (8008e84 <malloc+0xc>)
 8008e7a:	4601      	mov	r1, r0
 8008e7c:	6818      	ldr	r0, [r3, #0]
 8008e7e:	f000 b825 	b.w	8008ecc <_malloc_r>
 8008e82:	bf00      	nop
 8008e84:	20000020 	.word	0x20000020

08008e88 <sbrk_aligned>:
 8008e88:	b570      	push	{r4, r5, r6, lr}
 8008e8a:	4e0f      	ldr	r6, [pc, #60]	@ (8008ec8 <sbrk_aligned+0x40>)
 8008e8c:	460c      	mov	r4, r1
 8008e8e:	6831      	ldr	r1, [r6, #0]
 8008e90:	4605      	mov	r5, r0
 8008e92:	b911      	cbnz	r1, 8008e9a <sbrk_aligned+0x12>
 8008e94:	f000 fca4 	bl	80097e0 <_sbrk_r>
 8008e98:	6030      	str	r0, [r6, #0]
 8008e9a:	4621      	mov	r1, r4
 8008e9c:	4628      	mov	r0, r5
 8008e9e:	f000 fc9f 	bl	80097e0 <_sbrk_r>
 8008ea2:	1c43      	adds	r3, r0, #1
 8008ea4:	d103      	bne.n	8008eae <sbrk_aligned+0x26>
 8008ea6:	f04f 34ff 	mov.w	r4, #4294967295
 8008eaa:	4620      	mov	r0, r4
 8008eac:	bd70      	pop	{r4, r5, r6, pc}
 8008eae:	1cc4      	adds	r4, r0, #3
 8008eb0:	f024 0403 	bic.w	r4, r4, #3
 8008eb4:	42a0      	cmp	r0, r4
 8008eb6:	d0f8      	beq.n	8008eaa <sbrk_aligned+0x22>
 8008eb8:	1a21      	subs	r1, r4, r0
 8008eba:	4628      	mov	r0, r5
 8008ebc:	f000 fc90 	bl	80097e0 <_sbrk_r>
 8008ec0:	3001      	adds	r0, #1
 8008ec2:	d1f2      	bne.n	8008eaa <sbrk_aligned+0x22>
 8008ec4:	e7ef      	b.n	8008ea6 <sbrk_aligned+0x1e>
 8008ec6:	bf00      	nop
 8008ec8:	200003fc 	.word	0x200003fc

08008ecc <_malloc_r>:
 8008ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ed0:	1ccd      	adds	r5, r1, #3
 8008ed2:	f025 0503 	bic.w	r5, r5, #3
 8008ed6:	3508      	adds	r5, #8
 8008ed8:	2d0c      	cmp	r5, #12
 8008eda:	bf38      	it	cc
 8008edc:	250c      	movcc	r5, #12
 8008ede:	2d00      	cmp	r5, #0
 8008ee0:	4606      	mov	r6, r0
 8008ee2:	db01      	blt.n	8008ee8 <_malloc_r+0x1c>
 8008ee4:	42a9      	cmp	r1, r5
 8008ee6:	d904      	bls.n	8008ef2 <_malloc_r+0x26>
 8008ee8:	230c      	movs	r3, #12
 8008eea:	6033      	str	r3, [r6, #0]
 8008eec:	2000      	movs	r0, #0
 8008eee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ef2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008fc8 <_malloc_r+0xfc>
 8008ef6:	f000 f869 	bl	8008fcc <__malloc_lock>
 8008efa:	f8d8 3000 	ldr.w	r3, [r8]
 8008efe:	461c      	mov	r4, r3
 8008f00:	bb44      	cbnz	r4, 8008f54 <_malloc_r+0x88>
 8008f02:	4629      	mov	r1, r5
 8008f04:	4630      	mov	r0, r6
 8008f06:	f7ff ffbf 	bl	8008e88 <sbrk_aligned>
 8008f0a:	1c43      	adds	r3, r0, #1
 8008f0c:	4604      	mov	r4, r0
 8008f0e:	d158      	bne.n	8008fc2 <_malloc_r+0xf6>
 8008f10:	f8d8 4000 	ldr.w	r4, [r8]
 8008f14:	4627      	mov	r7, r4
 8008f16:	2f00      	cmp	r7, #0
 8008f18:	d143      	bne.n	8008fa2 <_malloc_r+0xd6>
 8008f1a:	2c00      	cmp	r4, #0
 8008f1c:	d04b      	beq.n	8008fb6 <_malloc_r+0xea>
 8008f1e:	6823      	ldr	r3, [r4, #0]
 8008f20:	4639      	mov	r1, r7
 8008f22:	4630      	mov	r0, r6
 8008f24:	eb04 0903 	add.w	r9, r4, r3
 8008f28:	f000 fc5a 	bl	80097e0 <_sbrk_r>
 8008f2c:	4581      	cmp	r9, r0
 8008f2e:	d142      	bne.n	8008fb6 <_malloc_r+0xea>
 8008f30:	6821      	ldr	r1, [r4, #0]
 8008f32:	4630      	mov	r0, r6
 8008f34:	1a6d      	subs	r5, r5, r1
 8008f36:	4629      	mov	r1, r5
 8008f38:	f7ff ffa6 	bl	8008e88 <sbrk_aligned>
 8008f3c:	3001      	adds	r0, #1
 8008f3e:	d03a      	beq.n	8008fb6 <_malloc_r+0xea>
 8008f40:	6823      	ldr	r3, [r4, #0]
 8008f42:	442b      	add	r3, r5
 8008f44:	6023      	str	r3, [r4, #0]
 8008f46:	f8d8 3000 	ldr.w	r3, [r8]
 8008f4a:	685a      	ldr	r2, [r3, #4]
 8008f4c:	bb62      	cbnz	r2, 8008fa8 <_malloc_r+0xdc>
 8008f4e:	f8c8 7000 	str.w	r7, [r8]
 8008f52:	e00f      	b.n	8008f74 <_malloc_r+0xa8>
 8008f54:	6822      	ldr	r2, [r4, #0]
 8008f56:	1b52      	subs	r2, r2, r5
 8008f58:	d420      	bmi.n	8008f9c <_malloc_r+0xd0>
 8008f5a:	2a0b      	cmp	r2, #11
 8008f5c:	d917      	bls.n	8008f8e <_malloc_r+0xc2>
 8008f5e:	1961      	adds	r1, r4, r5
 8008f60:	42a3      	cmp	r3, r4
 8008f62:	6025      	str	r5, [r4, #0]
 8008f64:	bf18      	it	ne
 8008f66:	6059      	strne	r1, [r3, #4]
 8008f68:	6863      	ldr	r3, [r4, #4]
 8008f6a:	bf08      	it	eq
 8008f6c:	f8c8 1000 	streq.w	r1, [r8]
 8008f70:	5162      	str	r2, [r4, r5]
 8008f72:	604b      	str	r3, [r1, #4]
 8008f74:	4630      	mov	r0, r6
 8008f76:	f000 f82f 	bl	8008fd8 <__malloc_unlock>
 8008f7a:	f104 000b 	add.w	r0, r4, #11
 8008f7e:	1d23      	adds	r3, r4, #4
 8008f80:	f020 0007 	bic.w	r0, r0, #7
 8008f84:	1ac2      	subs	r2, r0, r3
 8008f86:	bf1c      	itt	ne
 8008f88:	1a1b      	subne	r3, r3, r0
 8008f8a:	50a3      	strne	r3, [r4, r2]
 8008f8c:	e7af      	b.n	8008eee <_malloc_r+0x22>
 8008f8e:	6862      	ldr	r2, [r4, #4]
 8008f90:	42a3      	cmp	r3, r4
 8008f92:	bf0c      	ite	eq
 8008f94:	f8c8 2000 	streq.w	r2, [r8]
 8008f98:	605a      	strne	r2, [r3, #4]
 8008f9a:	e7eb      	b.n	8008f74 <_malloc_r+0xa8>
 8008f9c:	4623      	mov	r3, r4
 8008f9e:	6864      	ldr	r4, [r4, #4]
 8008fa0:	e7ae      	b.n	8008f00 <_malloc_r+0x34>
 8008fa2:	463c      	mov	r4, r7
 8008fa4:	687f      	ldr	r7, [r7, #4]
 8008fa6:	e7b6      	b.n	8008f16 <_malloc_r+0x4a>
 8008fa8:	461a      	mov	r2, r3
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	42a3      	cmp	r3, r4
 8008fae:	d1fb      	bne.n	8008fa8 <_malloc_r+0xdc>
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	6053      	str	r3, [r2, #4]
 8008fb4:	e7de      	b.n	8008f74 <_malloc_r+0xa8>
 8008fb6:	230c      	movs	r3, #12
 8008fb8:	4630      	mov	r0, r6
 8008fba:	6033      	str	r3, [r6, #0]
 8008fbc:	f000 f80c 	bl	8008fd8 <__malloc_unlock>
 8008fc0:	e794      	b.n	8008eec <_malloc_r+0x20>
 8008fc2:	6005      	str	r5, [r0, #0]
 8008fc4:	e7d6      	b.n	8008f74 <_malloc_r+0xa8>
 8008fc6:	bf00      	nop
 8008fc8:	20000400 	.word	0x20000400

08008fcc <__malloc_lock>:
 8008fcc:	4801      	ldr	r0, [pc, #4]	@ (8008fd4 <__malloc_lock+0x8>)
 8008fce:	f7ff befa 	b.w	8008dc6 <__retarget_lock_acquire_recursive>
 8008fd2:	bf00      	nop
 8008fd4:	200003f8 	.word	0x200003f8

08008fd8 <__malloc_unlock>:
 8008fd8:	4801      	ldr	r0, [pc, #4]	@ (8008fe0 <__malloc_unlock+0x8>)
 8008fda:	f7ff bef5 	b.w	8008dc8 <__retarget_lock_release_recursive>
 8008fde:	bf00      	nop
 8008fe0:	200003f8 	.word	0x200003f8

08008fe4 <__sfputc_r>:
 8008fe4:	6893      	ldr	r3, [r2, #8]
 8008fe6:	b410      	push	{r4}
 8008fe8:	3b01      	subs	r3, #1
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	6093      	str	r3, [r2, #8]
 8008fee:	da07      	bge.n	8009000 <__sfputc_r+0x1c>
 8008ff0:	6994      	ldr	r4, [r2, #24]
 8008ff2:	42a3      	cmp	r3, r4
 8008ff4:	db01      	blt.n	8008ffa <__sfputc_r+0x16>
 8008ff6:	290a      	cmp	r1, #10
 8008ff8:	d102      	bne.n	8009000 <__sfputc_r+0x1c>
 8008ffa:	bc10      	pop	{r4}
 8008ffc:	f7ff bdd5 	b.w	8008baa <__swbuf_r>
 8009000:	6813      	ldr	r3, [r2, #0]
 8009002:	1c58      	adds	r0, r3, #1
 8009004:	6010      	str	r0, [r2, #0]
 8009006:	7019      	strb	r1, [r3, #0]
 8009008:	4608      	mov	r0, r1
 800900a:	bc10      	pop	{r4}
 800900c:	4770      	bx	lr

0800900e <__sfputs_r>:
 800900e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009010:	4606      	mov	r6, r0
 8009012:	460f      	mov	r7, r1
 8009014:	4614      	mov	r4, r2
 8009016:	18d5      	adds	r5, r2, r3
 8009018:	42ac      	cmp	r4, r5
 800901a:	d101      	bne.n	8009020 <__sfputs_r+0x12>
 800901c:	2000      	movs	r0, #0
 800901e:	e007      	b.n	8009030 <__sfputs_r+0x22>
 8009020:	463a      	mov	r2, r7
 8009022:	4630      	mov	r0, r6
 8009024:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009028:	f7ff ffdc 	bl	8008fe4 <__sfputc_r>
 800902c:	1c43      	adds	r3, r0, #1
 800902e:	d1f3      	bne.n	8009018 <__sfputs_r+0xa>
 8009030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009034 <_vfiprintf_r>:
 8009034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009038:	460d      	mov	r5, r1
 800903a:	4614      	mov	r4, r2
 800903c:	4698      	mov	r8, r3
 800903e:	4606      	mov	r6, r0
 8009040:	b09d      	sub	sp, #116	@ 0x74
 8009042:	b118      	cbz	r0, 800904c <_vfiprintf_r+0x18>
 8009044:	6a03      	ldr	r3, [r0, #32]
 8009046:	b90b      	cbnz	r3, 800904c <_vfiprintf_r+0x18>
 8009048:	f7ff fc12 	bl	8008870 <__sinit>
 800904c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800904e:	07d9      	lsls	r1, r3, #31
 8009050:	d405      	bmi.n	800905e <_vfiprintf_r+0x2a>
 8009052:	89ab      	ldrh	r3, [r5, #12]
 8009054:	059a      	lsls	r2, r3, #22
 8009056:	d402      	bmi.n	800905e <_vfiprintf_r+0x2a>
 8009058:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800905a:	f7ff feb4 	bl	8008dc6 <__retarget_lock_acquire_recursive>
 800905e:	89ab      	ldrh	r3, [r5, #12]
 8009060:	071b      	lsls	r3, r3, #28
 8009062:	d501      	bpl.n	8009068 <_vfiprintf_r+0x34>
 8009064:	692b      	ldr	r3, [r5, #16]
 8009066:	b99b      	cbnz	r3, 8009090 <_vfiprintf_r+0x5c>
 8009068:	4629      	mov	r1, r5
 800906a:	4630      	mov	r0, r6
 800906c:	f7ff fddc 	bl	8008c28 <__swsetup_r>
 8009070:	b170      	cbz	r0, 8009090 <_vfiprintf_r+0x5c>
 8009072:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009074:	07dc      	lsls	r4, r3, #31
 8009076:	d504      	bpl.n	8009082 <_vfiprintf_r+0x4e>
 8009078:	f04f 30ff 	mov.w	r0, #4294967295
 800907c:	b01d      	add	sp, #116	@ 0x74
 800907e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009082:	89ab      	ldrh	r3, [r5, #12]
 8009084:	0598      	lsls	r0, r3, #22
 8009086:	d4f7      	bmi.n	8009078 <_vfiprintf_r+0x44>
 8009088:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800908a:	f7ff fe9d 	bl	8008dc8 <__retarget_lock_release_recursive>
 800908e:	e7f3      	b.n	8009078 <_vfiprintf_r+0x44>
 8009090:	2300      	movs	r3, #0
 8009092:	9309      	str	r3, [sp, #36]	@ 0x24
 8009094:	2320      	movs	r3, #32
 8009096:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800909a:	2330      	movs	r3, #48	@ 0x30
 800909c:	f04f 0901 	mov.w	r9, #1
 80090a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80090a4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009250 <_vfiprintf_r+0x21c>
 80090a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80090ac:	4623      	mov	r3, r4
 80090ae:	469a      	mov	sl, r3
 80090b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090b4:	b10a      	cbz	r2, 80090ba <_vfiprintf_r+0x86>
 80090b6:	2a25      	cmp	r2, #37	@ 0x25
 80090b8:	d1f9      	bne.n	80090ae <_vfiprintf_r+0x7a>
 80090ba:	ebba 0b04 	subs.w	fp, sl, r4
 80090be:	d00b      	beq.n	80090d8 <_vfiprintf_r+0xa4>
 80090c0:	465b      	mov	r3, fp
 80090c2:	4622      	mov	r2, r4
 80090c4:	4629      	mov	r1, r5
 80090c6:	4630      	mov	r0, r6
 80090c8:	f7ff ffa1 	bl	800900e <__sfputs_r>
 80090cc:	3001      	adds	r0, #1
 80090ce:	f000 80a7 	beq.w	8009220 <_vfiprintf_r+0x1ec>
 80090d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090d4:	445a      	add	r2, fp
 80090d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80090d8:	f89a 3000 	ldrb.w	r3, [sl]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	f000 809f 	beq.w	8009220 <_vfiprintf_r+0x1ec>
 80090e2:	2300      	movs	r3, #0
 80090e4:	f04f 32ff 	mov.w	r2, #4294967295
 80090e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090ec:	f10a 0a01 	add.w	sl, sl, #1
 80090f0:	9304      	str	r3, [sp, #16]
 80090f2:	9307      	str	r3, [sp, #28]
 80090f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80090f8:	931a      	str	r3, [sp, #104]	@ 0x68
 80090fa:	4654      	mov	r4, sl
 80090fc:	2205      	movs	r2, #5
 80090fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009102:	4853      	ldr	r0, [pc, #332]	@ (8009250 <_vfiprintf_r+0x21c>)
 8009104:	f000 fb7c 	bl	8009800 <memchr>
 8009108:	9a04      	ldr	r2, [sp, #16]
 800910a:	b9d8      	cbnz	r0, 8009144 <_vfiprintf_r+0x110>
 800910c:	06d1      	lsls	r1, r2, #27
 800910e:	bf44      	itt	mi
 8009110:	2320      	movmi	r3, #32
 8009112:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009116:	0713      	lsls	r3, r2, #28
 8009118:	bf44      	itt	mi
 800911a:	232b      	movmi	r3, #43	@ 0x2b
 800911c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009120:	f89a 3000 	ldrb.w	r3, [sl]
 8009124:	2b2a      	cmp	r3, #42	@ 0x2a
 8009126:	d015      	beq.n	8009154 <_vfiprintf_r+0x120>
 8009128:	4654      	mov	r4, sl
 800912a:	2000      	movs	r0, #0
 800912c:	f04f 0c0a 	mov.w	ip, #10
 8009130:	9a07      	ldr	r2, [sp, #28]
 8009132:	4621      	mov	r1, r4
 8009134:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009138:	3b30      	subs	r3, #48	@ 0x30
 800913a:	2b09      	cmp	r3, #9
 800913c:	d94b      	bls.n	80091d6 <_vfiprintf_r+0x1a2>
 800913e:	b1b0      	cbz	r0, 800916e <_vfiprintf_r+0x13a>
 8009140:	9207      	str	r2, [sp, #28]
 8009142:	e014      	b.n	800916e <_vfiprintf_r+0x13a>
 8009144:	eba0 0308 	sub.w	r3, r0, r8
 8009148:	fa09 f303 	lsl.w	r3, r9, r3
 800914c:	4313      	orrs	r3, r2
 800914e:	46a2      	mov	sl, r4
 8009150:	9304      	str	r3, [sp, #16]
 8009152:	e7d2      	b.n	80090fa <_vfiprintf_r+0xc6>
 8009154:	9b03      	ldr	r3, [sp, #12]
 8009156:	1d19      	adds	r1, r3, #4
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	9103      	str	r1, [sp, #12]
 800915c:	2b00      	cmp	r3, #0
 800915e:	bfbb      	ittet	lt
 8009160:	425b      	neglt	r3, r3
 8009162:	f042 0202 	orrlt.w	r2, r2, #2
 8009166:	9307      	strge	r3, [sp, #28]
 8009168:	9307      	strlt	r3, [sp, #28]
 800916a:	bfb8      	it	lt
 800916c:	9204      	strlt	r2, [sp, #16]
 800916e:	7823      	ldrb	r3, [r4, #0]
 8009170:	2b2e      	cmp	r3, #46	@ 0x2e
 8009172:	d10a      	bne.n	800918a <_vfiprintf_r+0x156>
 8009174:	7863      	ldrb	r3, [r4, #1]
 8009176:	2b2a      	cmp	r3, #42	@ 0x2a
 8009178:	d132      	bne.n	80091e0 <_vfiprintf_r+0x1ac>
 800917a:	9b03      	ldr	r3, [sp, #12]
 800917c:	3402      	adds	r4, #2
 800917e:	1d1a      	adds	r2, r3, #4
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	9203      	str	r2, [sp, #12]
 8009184:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009188:	9305      	str	r3, [sp, #20]
 800918a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009254 <_vfiprintf_r+0x220>
 800918e:	2203      	movs	r2, #3
 8009190:	4650      	mov	r0, sl
 8009192:	7821      	ldrb	r1, [r4, #0]
 8009194:	f000 fb34 	bl	8009800 <memchr>
 8009198:	b138      	cbz	r0, 80091aa <_vfiprintf_r+0x176>
 800919a:	2240      	movs	r2, #64	@ 0x40
 800919c:	9b04      	ldr	r3, [sp, #16]
 800919e:	eba0 000a 	sub.w	r0, r0, sl
 80091a2:	4082      	lsls	r2, r0
 80091a4:	4313      	orrs	r3, r2
 80091a6:	3401      	adds	r4, #1
 80091a8:	9304      	str	r3, [sp, #16]
 80091aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091ae:	2206      	movs	r2, #6
 80091b0:	4829      	ldr	r0, [pc, #164]	@ (8009258 <_vfiprintf_r+0x224>)
 80091b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80091b6:	f000 fb23 	bl	8009800 <memchr>
 80091ba:	2800      	cmp	r0, #0
 80091bc:	d03f      	beq.n	800923e <_vfiprintf_r+0x20a>
 80091be:	4b27      	ldr	r3, [pc, #156]	@ (800925c <_vfiprintf_r+0x228>)
 80091c0:	bb1b      	cbnz	r3, 800920a <_vfiprintf_r+0x1d6>
 80091c2:	9b03      	ldr	r3, [sp, #12]
 80091c4:	3307      	adds	r3, #7
 80091c6:	f023 0307 	bic.w	r3, r3, #7
 80091ca:	3308      	adds	r3, #8
 80091cc:	9303      	str	r3, [sp, #12]
 80091ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091d0:	443b      	add	r3, r7
 80091d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80091d4:	e76a      	b.n	80090ac <_vfiprintf_r+0x78>
 80091d6:	460c      	mov	r4, r1
 80091d8:	2001      	movs	r0, #1
 80091da:	fb0c 3202 	mla	r2, ip, r2, r3
 80091de:	e7a8      	b.n	8009132 <_vfiprintf_r+0xfe>
 80091e0:	2300      	movs	r3, #0
 80091e2:	f04f 0c0a 	mov.w	ip, #10
 80091e6:	4619      	mov	r1, r3
 80091e8:	3401      	adds	r4, #1
 80091ea:	9305      	str	r3, [sp, #20]
 80091ec:	4620      	mov	r0, r4
 80091ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091f2:	3a30      	subs	r2, #48	@ 0x30
 80091f4:	2a09      	cmp	r2, #9
 80091f6:	d903      	bls.n	8009200 <_vfiprintf_r+0x1cc>
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d0c6      	beq.n	800918a <_vfiprintf_r+0x156>
 80091fc:	9105      	str	r1, [sp, #20]
 80091fe:	e7c4      	b.n	800918a <_vfiprintf_r+0x156>
 8009200:	4604      	mov	r4, r0
 8009202:	2301      	movs	r3, #1
 8009204:	fb0c 2101 	mla	r1, ip, r1, r2
 8009208:	e7f0      	b.n	80091ec <_vfiprintf_r+0x1b8>
 800920a:	ab03      	add	r3, sp, #12
 800920c:	9300      	str	r3, [sp, #0]
 800920e:	462a      	mov	r2, r5
 8009210:	4630      	mov	r0, r6
 8009212:	4b13      	ldr	r3, [pc, #76]	@ (8009260 <_vfiprintf_r+0x22c>)
 8009214:	a904      	add	r1, sp, #16
 8009216:	f3af 8000 	nop.w
 800921a:	4607      	mov	r7, r0
 800921c:	1c78      	adds	r0, r7, #1
 800921e:	d1d6      	bne.n	80091ce <_vfiprintf_r+0x19a>
 8009220:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009222:	07d9      	lsls	r1, r3, #31
 8009224:	d405      	bmi.n	8009232 <_vfiprintf_r+0x1fe>
 8009226:	89ab      	ldrh	r3, [r5, #12]
 8009228:	059a      	lsls	r2, r3, #22
 800922a:	d402      	bmi.n	8009232 <_vfiprintf_r+0x1fe>
 800922c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800922e:	f7ff fdcb 	bl	8008dc8 <__retarget_lock_release_recursive>
 8009232:	89ab      	ldrh	r3, [r5, #12]
 8009234:	065b      	lsls	r3, r3, #25
 8009236:	f53f af1f 	bmi.w	8009078 <_vfiprintf_r+0x44>
 800923a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800923c:	e71e      	b.n	800907c <_vfiprintf_r+0x48>
 800923e:	ab03      	add	r3, sp, #12
 8009240:	9300      	str	r3, [sp, #0]
 8009242:	462a      	mov	r2, r5
 8009244:	4630      	mov	r0, r6
 8009246:	4b06      	ldr	r3, [pc, #24]	@ (8009260 <_vfiprintf_r+0x22c>)
 8009248:	a904      	add	r1, sp, #16
 800924a:	f000 f87d 	bl	8009348 <_printf_i>
 800924e:	e7e4      	b.n	800921a <_vfiprintf_r+0x1e6>
 8009250:	0800a872 	.word	0x0800a872
 8009254:	0800a878 	.word	0x0800a878
 8009258:	0800a87c 	.word	0x0800a87c
 800925c:	00000000 	.word	0x00000000
 8009260:	0800900f 	.word	0x0800900f

08009264 <_printf_common>:
 8009264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009268:	4616      	mov	r6, r2
 800926a:	4698      	mov	r8, r3
 800926c:	688a      	ldr	r2, [r1, #8]
 800926e:	690b      	ldr	r3, [r1, #16]
 8009270:	4607      	mov	r7, r0
 8009272:	4293      	cmp	r3, r2
 8009274:	bfb8      	it	lt
 8009276:	4613      	movlt	r3, r2
 8009278:	6033      	str	r3, [r6, #0]
 800927a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800927e:	460c      	mov	r4, r1
 8009280:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009284:	b10a      	cbz	r2, 800928a <_printf_common+0x26>
 8009286:	3301      	adds	r3, #1
 8009288:	6033      	str	r3, [r6, #0]
 800928a:	6823      	ldr	r3, [r4, #0]
 800928c:	0699      	lsls	r1, r3, #26
 800928e:	bf42      	ittt	mi
 8009290:	6833      	ldrmi	r3, [r6, #0]
 8009292:	3302      	addmi	r3, #2
 8009294:	6033      	strmi	r3, [r6, #0]
 8009296:	6825      	ldr	r5, [r4, #0]
 8009298:	f015 0506 	ands.w	r5, r5, #6
 800929c:	d106      	bne.n	80092ac <_printf_common+0x48>
 800929e:	f104 0a19 	add.w	sl, r4, #25
 80092a2:	68e3      	ldr	r3, [r4, #12]
 80092a4:	6832      	ldr	r2, [r6, #0]
 80092a6:	1a9b      	subs	r3, r3, r2
 80092a8:	42ab      	cmp	r3, r5
 80092aa:	dc2b      	bgt.n	8009304 <_printf_common+0xa0>
 80092ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80092b0:	6822      	ldr	r2, [r4, #0]
 80092b2:	3b00      	subs	r3, #0
 80092b4:	bf18      	it	ne
 80092b6:	2301      	movne	r3, #1
 80092b8:	0692      	lsls	r2, r2, #26
 80092ba:	d430      	bmi.n	800931e <_printf_common+0xba>
 80092bc:	4641      	mov	r1, r8
 80092be:	4638      	mov	r0, r7
 80092c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80092c4:	47c8      	blx	r9
 80092c6:	3001      	adds	r0, #1
 80092c8:	d023      	beq.n	8009312 <_printf_common+0xae>
 80092ca:	6823      	ldr	r3, [r4, #0]
 80092cc:	6922      	ldr	r2, [r4, #16]
 80092ce:	f003 0306 	and.w	r3, r3, #6
 80092d2:	2b04      	cmp	r3, #4
 80092d4:	bf14      	ite	ne
 80092d6:	2500      	movne	r5, #0
 80092d8:	6833      	ldreq	r3, [r6, #0]
 80092da:	f04f 0600 	mov.w	r6, #0
 80092de:	bf08      	it	eq
 80092e0:	68e5      	ldreq	r5, [r4, #12]
 80092e2:	f104 041a 	add.w	r4, r4, #26
 80092e6:	bf08      	it	eq
 80092e8:	1aed      	subeq	r5, r5, r3
 80092ea:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80092ee:	bf08      	it	eq
 80092f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80092f4:	4293      	cmp	r3, r2
 80092f6:	bfc4      	itt	gt
 80092f8:	1a9b      	subgt	r3, r3, r2
 80092fa:	18ed      	addgt	r5, r5, r3
 80092fc:	42b5      	cmp	r5, r6
 80092fe:	d11a      	bne.n	8009336 <_printf_common+0xd2>
 8009300:	2000      	movs	r0, #0
 8009302:	e008      	b.n	8009316 <_printf_common+0xb2>
 8009304:	2301      	movs	r3, #1
 8009306:	4652      	mov	r2, sl
 8009308:	4641      	mov	r1, r8
 800930a:	4638      	mov	r0, r7
 800930c:	47c8      	blx	r9
 800930e:	3001      	adds	r0, #1
 8009310:	d103      	bne.n	800931a <_printf_common+0xb6>
 8009312:	f04f 30ff 	mov.w	r0, #4294967295
 8009316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800931a:	3501      	adds	r5, #1
 800931c:	e7c1      	b.n	80092a2 <_printf_common+0x3e>
 800931e:	2030      	movs	r0, #48	@ 0x30
 8009320:	18e1      	adds	r1, r4, r3
 8009322:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009326:	1c5a      	adds	r2, r3, #1
 8009328:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800932c:	4422      	add	r2, r4
 800932e:	3302      	adds	r3, #2
 8009330:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009334:	e7c2      	b.n	80092bc <_printf_common+0x58>
 8009336:	2301      	movs	r3, #1
 8009338:	4622      	mov	r2, r4
 800933a:	4641      	mov	r1, r8
 800933c:	4638      	mov	r0, r7
 800933e:	47c8      	blx	r9
 8009340:	3001      	adds	r0, #1
 8009342:	d0e6      	beq.n	8009312 <_printf_common+0xae>
 8009344:	3601      	adds	r6, #1
 8009346:	e7d9      	b.n	80092fc <_printf_common+0x98>

08009348 <_printf_i>:
 8009348:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800934c:	7e0f      	ldrb	r7, [r1, #24]
 800934e:	4691      	mov	r9, r2
 8009350:	2f78      	cmp	r7, #120	@ 0x78
 8009352:	4680      	mov	r8, r0
 8009354:	460c      	mov	r4, r1
 8009356:	469a      	mov	sl, r3
 8009358:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800935a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800935e:	d807      	bhi.n	8009370 <_printf_i+0x28>
 8009360:	2f62      	cmp	r7, #98	@ 0x62
 8009362:	d80a      	bhi.n	800937a <_printf_i+0x32>
 8009364:	2f00      	cmp	r7, #0
 8009366:	f000 80d3 	beq.w	8009510 <_printf_i+0x1c8>
 800936a:	2f58      	cmp	r7, #88	@ 0x58
 800936c:	f000 80ba 	beq.w	80094e4 <_printf_i+0x19c>
 8009370:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009374:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009378:	e03a      	b.n	80093f0 <_printf_i+0xa8>
 800937a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800937e:	2b15      	cmp	r3, #21
 8009380:	d8f6      	bhi.n	8009370 <_printf_i+0x28>
 8009382:	a101      	add	r1, pc, #4	@ (adr r1, 8009388 <_printf_i+0x40>)
 8009384:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009388:	080093e1 	.word	0x080093e1
 800938c:	080093f5 	.word	0x080093f5
 8009390:	08009371 	.word	0x08009371
 8009394:	08009371 	.word	0x08009371
 8009398:	08009371 	.word	0x08009371
 800939c:	08009371 	.word	0x08009371
 80093a0:	080093f5 	.word	0x080093f5
 80093a4:	08009371 	.word	0x08009371
 80093a8:	08009371 	.word	0x08009371
 80093ac:	08009371 	.word	0x08009371
 80093b0:	08009371 	.word	0x08009371
 80093b4:	080094f7 	.word	0x080094f7
 80093b8:	0800941f 	.word	0x0800941f
 80093bc:	080094b1 	.word	0x080094b1
 80093c0:	08009371 	.word	0x08009371
 80093c4:	08009371 	.word	0x08009371
 80093c8:	08009519 	.word	0x08009519
 80093cc:	08009371 	.word	0x08009371
 80093d0:	0800941f 	.word	0x0800941f
 80093d4:	08009371 	.word	0x08009371
 80093d8:	08009371 	.word	0x08009371
 80093dc:	080094b9 	.word	0x080094b9
 80093e0:	6833      	ldr	r3, [r6, #0]
 80093e2:	1d1a      	adds	r2, r3, #4
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	6032      	str	r2, [r6, #0]
 80093e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80093ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80093f0:	2301      	movs	r3, #1
 80093f2:	e09e      	b.n	8009532 <_printf_i+0x1ea>
 80093f4:	6833      	ldr	r3, [r6, #0]
 80093f6:	6820      	ldr	r0, [r4, #0]
 80093f8:	1d19      	adds	r1, r3, #4
 80093fa:	6031      	str	r1, [r6, #0]
 80093fc:	0606      	lsls	r6, r0, #24
 80093fe:	d501      	bpl.n	8009404 <_printf_i+0xbc>
 8009400:	681d      	ldr	r5, [r3, #0]
 8009402:	e003      	b.n	800940c <_printf_i+0xc4>
 8009404:	0645      	lsls	r5, r0, #25
 8009406:	d5fb      	bpl.n	8009400 <_printf_i+0xb8>
 8009408:	f9b3 5000 	ldrsh.w	r5, [r3]
 800940c:	2d00      	cmp	r5, #0
 800940e:	da03      	bge.n	8009418 <_printf_i+0xd0>
 8009410:	232d      	movs	r3, #45	@ 0x2d
 8009412:	426d      	negs	r5, r5
 8009414:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009418:	230a      	movs	r3, #10
 800941a:	4859      	ldr	r0, [pc, #356]	@ (8009580 <_printf_i+0x238>)
 800941c:	e011      	b.n	8009442 <_printf_i+0xfa>
 800941e:	6821      	ldr	r1, [r4, #0]
 8009420:	6833      	ldr	r3, [r6, #0]
 8009422:	0608      	lsls	r0, r1, #24
 8009424:	f853 5b04 	ldr.w	r5, [r3], #4
 8009428:	d402      	bmi.n	8009430 <_printf_i+0xe8>
 800942a:	0649      	lsls	r1, r1, #25
 800942c:	bf48      	it	mi
 800942e:	b2ad      	uxthmi	r5, r5
 8009430:	2f6f      	cmp	r7, #111	@ 0x6f
 8009432:	6033      	str	r3, [r6, #0]
 8009434:	bf14      	ite	ne
 8009436:	230a      	movne	r3, #10
 8009438:	2308      	moveq	r3, #8
 800943a:	4851      	ldr	r0, [pc, #324]	@ (8009580 <_printf_i+0x238>)
 800943c:	2100      	movs	r1, #0
 800943e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009442:	6866      	ldr	r6, [r4, #4]
 8009444:	2e00      	cmp	r6, #0
 8009446:	bfa8      	it	ge
 8009448:	6821      	ldrge	r1, [r4, #0]
 800944a:	60a6      	str	r6, [r4, #8]
 800944c:	bfa4      	itt	ge
 800944e:	f021 0104 	bicge.w	r1, r1, #4
 8009452:	6021      	strge	r1, [r4, #0]
 8009454:	b90d      	cbnz	r5, 800945a <_printf_i+0x112>
 8009456:	2e00      	cmp	r6, #0
 8009458:	d04b      	beq.n	80094f2 <_printf_i+0x1aa>
 800945a:	4616      	mov	r6, r2
 800945c:	fbb5 f1f3 	udiv	r1, r5, r3
 8009460:	fb03 5711 	mls	r7, r3, r1, r5
 8009464:	5dc7      	ldrb	r7, [r0, r7]
 8009466:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800946a:	462f      	mov	r7, r5
 800946c:	42bb      	cmp	r3, r7
 800946e:	460d      	mov	r5, r1
 8009470:	d9f4      	bls.n	800945c <_printf_i+0x114>
 8009472:	2b08      	cmp	r3, #8
 8009474:	d10b      	bne.n	800948e <_printf_i+0x146>
 8009476:	6823      	ldr	r3, [r4, #0]
 8009478:	07df      	lsls	r7, r3, #31
 800947a:	d508      	bpl.n	800948e <_printf_i+0x146>
 800947c:	6923      	ldr	r3, [r4, #16]
 800947e:	6861      	ldr	r1, [r4, #4]
 8009480:	4299      	cmp	r1, r3
 8009482:	bfde      	ittt	le
 8009484:	2330      	movle	r3, #48	@ 0x30
 8009486:	f806 3c01 	strble.w	r3, [r6, #-1]
 800948a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800948e:	1b92      	subs	r2, r2, r6
 8009490:	6122      	str	r2, [r4, #16]
 8009492:	464b      	mov	r3, r9
 8009494:	4621      	mov	r1, r4
 8009496:	4640      	mov	r0, r8
 8009498:	f8cd a000 	str.w	sl, [sp]
 800949c:	aa03      	add	r2, sp, #12
 800949e:	f7ff fee1 	bl	8009264 <_printf_common>
 80094a2:	3001      	adds	r0, #1
 80094a4:	d14a      	bne.n	800953c <_printf_i+0x1f4>
 80094a6:	f04f 30ff 	mov.w	r0, #4294967295
 80094aa:	b004      	add	sp, #16
 80094ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094b0:	6823      	ldr	r3, [r4, #0]
 80094b2:	f043 0320 	orr.w	r3, r3, #32
 80094b6:	6023      	str	r3, [r4, #0]
 80094b8:	2778      	movs	r7, #120	@ 0x78
 80094ba:	4832      	ldr	r0, [pc, #200]	@ (8009584 <_printf_i+0x23c>)
 80094bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80094c0:	6823      	ldr	r3, [r4, #0]
 80094c2:	6831      	ldr	r1, [r6, #0]
 80094c4:	061f      	lsls	r7, r3, #24
 80094c6:	f851 5b04 	ldr.w	r5, [r1], #4
 80094ca:	d402      	bmi.n	80094d2 <_printf_i+0x18a>
 80094cc:	065f      	lsls	r7, r3, #25
 80094ce:	bf48      	it	mi
 80094d0:	b2ad      	uxthmi	r5, r5
 80094d2:	6031      	str	r1, [r6, #0]
 80094d4:	07d9      	lsls	r1, r3, #31
 80094d6:	bf44      	itt	mi
 80094d8:	f043 0320 	orrmi.w	r3, r3, #32
 80094dc:	6023      	strmi	r3, [r4, #0]
 80094de:	b11d      	cbz	r5, 80094e8 <_printf_i+0x1a0>
 80094e0:	2310      	movs	r3, #16
 80094e2:	e7ab      	b.n	800943c <_printf_i+0xf4>
 80094e4:	4826      	ldr	r0, [pc, #152]	@ (8009580 <_printf_i+0x238>)
 80094e6:	e7e9      	b.n	80094bc <_printf_i+0x174>
 80094e8:	6823      	ldr	r3, [r4, #0]
 80094ea:	f023 0320 	bic.w	r3, r3, #32
 80094ee:	6023      	str	r3, [r4, #0]
 80094f0:	e7f6      	b.n	80094e0 <_printf_i+0x198>
 80094f2:	4616      	mov	r6, r2
 80094f4:	e7bd      	b.n	8009472 <_printf_i+0x12a>
 80094f6:	6833      	ldr	r3, [r6, #0]
 80094f8:	6825      	ldr	r5, [r4, #0]
 80094fa:	1d18      	adds	r0, r3, #4
 80094fc:	6961      	ldr	r1, [r4, #20]
 80094fe:	6030      	str	r0, [r6, #0]
 8009500:	062e      	lsls	r6, r5, #24
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	d501      	bpl.n	800950a <_printf_i+0x1c2>
 8009506:	6019      	str	r1, [r3, #0]
 8009508:	e002      	b.n	8009510 <_printf_i+0x1c8>
 800950a:	0668      	lsls	r0, r5, #25
 800950c:	d5fb      	bpl.n	8009506 <_printf_i+0x1be>
 800950e:	8019      	strh	r1, [r3, #0]
 8009510:	2300      	movs	r3, #0
 8009512:	4616      	mov	r6, r2
 8009514:	6123      	str	r3, [r4, #16]
 8009516:	e7bc      	b.n	8009492 <_printf_i+0x14a>
 8009518:	6833      	ldr	r3, [r6, #0]
 800951a:	2100      	movs	r1, #0
 800951c:	1d1a      	adds	r2, r3, #4
 800951e:	6032      	str	r2, [r6, #0]
 8009520:	681e      	ldr	r6, [r3, #0]
 8009522:	6862      	ldr	r2, [r4, #4]
 8009524:	4630      	mov	r0, r6
 8009526:	f000 f96b 	bl	8009800 <memchr>
 800952a:	b108      	cbz	r0, 8009530 <_printf_i+0x1e8>
 800952c:	1b80      	subs	r0, r0, r6
 800952e:	6060      	str	r0, [r4, #4]
 8009530:	6863      	ldr	r3, [r4, #4]
 8009532:	6123      	str	r3, [r4, #16]
 8009534:	2300      	movs	r3, #0
 8009536:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800953a:	e7aa      	b.n	8009492 <_printf_i+0x14a>
 800953c:	4632      	mov	r2, r6
 800953e:	4649      	mov	r1, r9
 8009540:	4640      	mov	r0, r8
 8009542:	6923      	ldr	r3, [r4, #16]
 8009544:	47d0      	blx	sl
 8009546:	3001      	adds	r0, #1
 8009548:	d0ad      	beq.n	80094a6 <_printf_i+0x15e>
 800954a:	6823      	ldr	r3, [r4, #0]
 800954c:	079b      	lsls	r3, r3, #30
 800954e:	d413      	bmi.n	8009578 <_printf_i+0x230>
 8009550:	68e0      	ldr	r0, [r4, #12]
 8009552:	9b03      	ldr	r3, [sp, #12]
 8009554:	4298      	cmp	r0, r3
 8009556:	bfb8      	it	lt
 8009558:	4618      	movlt	r0, r3
 800955a:	e7a6      	b.n	80094aa <_printf_i+0x162>
 800955c:	2301      	movs	r3, #1
 800955e:	4632      	mov	r2, r6
 8009560:	4649      	mov	r1, r9
 8009562:	4640      	mov	r0, r8
 8009564:	47d0      	blx	sl
 8009566:	3001      	adds	r0, #1
 8009568:	d09d      	beq.n	80094a6 <_printf_i+0x15e>
 800956a:	3501      	adds	r5, #1
 800956c:	68e3      	ldr	r3, [r4, #12]
 800956e:	9903      	ldr	r1, [sp, #12]
 8009570:	1a5b      	subs	r3, r3, r1
 8009572:	42ab      	cmp	r3, r5
 8009574:	dcf2      	bgt.n	800955c <_printf_i+0x214>
 8009576:	e7eb      	b.n	8009550 <_printf_i+0x208>
 8009578:	2500      	movs	r5, #0
 800957a:	f104 0619 	add.w	r6, r4, #25
 800957e:	e7f5      	b.n	800956c <_printf_i+0x224>
 8009580:	0800a883 	.word	0x0800a883
 8009584:	0800a894 	.word	0x0800a894

08009588 <__sflush_r>:
 8009588:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800958c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800958e:	0716      	lsls	r6, r2, #28
 8009590:	4605      	mov	r5, r0
 8009592:	460c      	mov	r4, r1
 8009594:	d454      	bmi.n	8009640 <__sflush_r+0xb8>
 8009596:	684b      	ldr	r3, [r1, #4]
 8009598:	2b00      	cmp	r3, #0
 800959a:	dc02      	bgt.n	80095a2 <__sflush_r+0x1a>
 800959c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800959e:	2b00      	cmp	r3, #0
 80095a0:	dd48      	ble.n	8009634 <__sflush_r+0xac>
 80095a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80095a4:	2e00      	cmp	r6, #0
 80095a6:	d045      	beq.n	8009634 <__sflush_r+0xac>
 80095a8:	2300      	movs	r3, #0
 80095aa:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80095ae:	682f      	ldr	r7, [r5, #0]
 80095b0:	6a21      	ldr	r1, [r4, #32]
 80095b2:	602b      	str	r3, [r5, #0]
 80095b4:	d030      	beq.n	8009618 <__sflush_r+0x90>
 80095b6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80095b8:	89a3      	ldrh	r3, [r4, #12]
 80095ba:	0759      	lsls	r1, r3, #29
 80095bc:	d505      	bpl.n	80095ca <__sflush_r+0x42>
 80095be:	6863      	ldr	r3, [r4, #4]
 80095c0:	1ad2      	subs	r2, r2, r3
 80095c2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80095c4:	b10b      	cbz	r3, 80095ca <__sflush_r+0x42>
 80095c6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80095c8:	1ad2      	subs	r2, r2, r3
 80095ca:	2300      	movs	r3, #0
 80095cc:	4628      	mov	r0, r5
 80095ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80095d0:	6a21      	ldr	r1, [r4, #32]
 80095d2:	47b0      	blx	r6
 80095d4:	1c43      	adds	r3, r0, #1
 80095d6:	89a3      	ldrh	r3, [r4, #12]
 80095d8:	d106      	bne.n	80095e8 <__sflush_r+0x60>
 80095da:	6829      	ldr	r1, [r5, #0]
 80095dc:	291d      	cmp	r1, #29
 80095de:	d82b      	bhi.n	8009638 <__sflush_r+0xb0>
 80095e0:	4a28      	ldr	r2, [pc, #160]	@ (8009684 <__sflush_r+0xfc>)
 80095e2:	410a      	asrs	r2, r1
 80095e4:	07d6      	lsls	r6, r2, #31
 80095e6:	d427      	bmi.n	8009638 <__sflush_r+0xb0>
 80095e8:	2200      	movs	r2, #0
 80095ea:	6062      	str	r2, [r4, #4]
 80095ec:	6922      	ldr	r2, [r4, #16]
 80095ee:	04d9      	lsls	r1, r3, #19
 80095f0:	6022      	str	r2, [r4, #0]
 80095f2:	d504      	bpl.n	80095fe <__sflush_r+0x76>
 80095f4:	1c42      	adds	r2, r0, #1
 80095f6:	d101      	bne.n	80095fc <__sflush_r+0x74>
 80095f8:	682b      	ldr	r3, [r5, #0]
 80095fa:	b903      	cbnz	r3, 80095fe <__sflush_r+0x76>
 80095fc:	6560      	str	r0, [r4, #84]	@ 0x54
 80095fe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009600:	602f      	str	r7, [r5, #0]
 8009602:	b1b9      	cbz	r1, 8009634 <__sflush_r+0xac>
 8009604:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009608:	4299      	cmp	r1, r3
 800960a:	d002      	beq.n	8009612 <__sflush_r+0x8a>
 800960c:	4628      	mov	r0, r5
 800960e:	f7ff fbeb 	bl	8008de8 <_free_r>
 8009612:	2300      	movs	r3, #0
 8009614:	6363      	str	r3, [r4, #52]	@ 0x34
 8009616:	e00d      	b.n	8009634 <__sflush_r+0xac>
 8009618:	2301      	movs	r3, #1
 800961a:	4628      	mov	r0, r5
 800961c:	47b0      	blx	r6
 800961e:	4602      	mov	r2, r0
 8009620:	1c50      	adds	r0, r2, #1
 8009622:	d1c9      	bne.n	80095b8 <__sflush_r+0x30>
 8009624:	682b      	ldr	r3, [r5, #0]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d0c6      	beq.n	80095b8 <__sflush_r+0x30>
 800962a:	2b1d      	cmp	r3, #29
 800962c:	d001      	beq.n	8009632 <__sflush_r+0xaa>
 800962e:	2b16      	cmp	r3, #22
 8009630:	d11d      	bne.n	800966e <__sflush_r+0xe6>
 8009632:	602f      	str	r7, [r5, #0]
 8009634:	2000      	movs	r0, #0
 8009636:	e021      	b.n	800967c <__sflush_r+0xf4>
 8009638:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800963c:	b21b      	sxth	r3, r3
 800963e:	e01a      	b.n	8009676 <__sflush_r+0xee>
 8009640:	690f      	ldr	r7, [r1, #16]
 8009642:	2f00      	cmp	r7, #0
 8009644:	d0f6      	beq.n	8009634 <__sflush_r+0xac>
 8009646:	0793      	lsls	r3, r2, #30
 8009648:	bf18      	it	ne
 800964a:	2300      	movne	r3, #0
 800964c:	680e      	ldr	r6, [r1, #0]
 800964e:	bf08      	it	eq
 8009650:	694b      	ldreq	r3, [r1, #20]
 8009652:	1bf6      	subs	r6, r6, r7
 8009654:	600f      	str	r7, [r1, #0]
 8009656:	608b      	str	r3, [r1, #8]
 8009658:	2e00      	cmp	r6, #0
 800965a:	ddeb      	ble.n	8009634 <__sflush_r+0xac>
 800965c:	4633      	mov	r3, r6
 800965e:	463a      	mov	r2, r7
 8009660:	4628      	mov	r0, r5
 8009662:	6a21      	ldr	r1, [r4, #32]
 8009664:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009668:	47e0      	blx	ip
 800966a:	2800      	cmp	r0, #0
 800966c:	dc07      	bgt.n	800967e <__sflush_r+0xf6>
 800966e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009672:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009676:	f04f 30ff 	mov.w	r0, #4294967295
 800967a:	81a3      	strh	r3, [r4, #12]
 800967c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800967e:	4407      	add	r7, r0
 8009680:	1a36      	subs	r6, r6, r0
 8009682:	e7e9      	b.n	8009658 <__sflush_r+0xd0>
 8009684:	dfbffffe 	.word	0xdfbffffe

08009688 <_fflush_r>:
 8009688:	b538      	push	{r3, r4, r5, lr}
 800968a:	690b      	ldr	r3, [r1, #16]
 800968c:	4605      	mov	r5, r0
 800968e:	460c      	mov	r4, r1
 8009690:	b913      	cbnz	r3, 8009698 <_fflush_r+0x10>
 8009692:	2500      	movs	r5, #0
 8009694:	4628      	mov	r0, r5
 8009696:	bd38      	pop	{r3, r4, r5, pc}
 8009698:	b118      	cbz	r0, 80096a2 <_fflush_r+0x1a>
 800969a:	6a03      	ldr	r3, [r0, #32]
 800969c:	b90b      	cbnz	r3, 80096a2 <_fflush_r+0x1a>
 800969e:	f7ff f8e7 	bl	8008870 <__sinit>
 80096a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d0f3      	beq.n	8009692 <_fflush_r+0xa>
 80096aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80096ac:	07d0      	lsls	r0, r2, #31
 80096ae:	d404      	bmi.n	80096ba <_fflush_r+0x32>
 80096b0:	0599      	lsls	r1, r3, #22
 80096b2:	d402      	bmi.n	80096ba <_fflush_r+0x32>
 80096b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80096b6:	f7ff fb86 	bl	8008dc6 <__retarget_lock_acquire_recursive>
 80096ba:	4628      	mov	r0, r5
 80096bc:	4621      	mov	r1, r4
 80096be:	f7ff ff63 	bl	8009588 <__sflush_r>
 80096c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80096c4:	4605      	mov	r5, r0
 80096c6:	07da      	lsls	r2, r3, #31
 80096c8:	d4e4      	bmi.n	8009694 <_fflush_r+0xc>
 80096ca:	89a3      	ldrh	r3, [r4, #12]
 80096cc:	059b      	lsls	r3, r3, #22
 80096ce:	d4e1      	bmi.n	8009694 <_fflush_r+0xc>
 80096d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80096d2:	f7ff fb79 	bl	8008dc8 <__retarget_lock_release_recursive>
 80096d6:	e7dd      	b.n	8009694 <_fflush_r+0xc>

080096d8 <__swhatbuf_r>:
 80096d8:	b570      	push	{r4, r5, r6, lr}
 80096da:	460c      	mov	r4, r1
 80096dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096e0:	4615      	mov	r5, r2
 80096e2:	2900      	cmp	r1, #0
 80096e4:	461e      	mov	r6, r3
 80096e6:	b096      	sub	sp, #88	@ 0x58
 80096e8:	da0c      	bge.n	8009704 <__swhatbuf_r+0x2c>
 80096ea:	89a3      	ldrh	r3, [r4, #12]
 80096ec:	2100      	movs	r1, #0
 80096ee:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80096f2:	bf14      	ite	ne
 80096f4:	2340      	movne	r3, #64	@ 0x40
 80096f6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80096fa:	2000      	movs	r0, #0
 80096fc:	6031      	str	r1, [r6, #0]
 80096fe:	602b      	str	r3, [r5, #0]
 8009700:	b016      	add	sp, #88	@ 0x58
 8009702:	bd70      	pop	{r4, r5, r6, pc}
 8009704:	466a      	mov	r2, sp
 8009706:	f000 f849 	bl	800979c <_fstat_r>
 800970a:	2800      	cmp	r0, #0
 800970c:	dbed      	blt.n	80096ea <__swhatbuf_r+0x12>
 800970e:	9901      	ldr	r1, [sp, #4]
 8009710:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009714:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009718:	4259      	negs	r1, r3
 800971a:	4159      	adcs	r1, r3
 800971c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009720:	e7eb      	b.n	80096fa <__swhatbuf_r+0x22>

08009722 <__smakebuf_r>:
 8009722:	898b      	ldrh	r3, [r1, #12]
 8009724:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009726:	079d      	lsls	r5, r3, #30
 8009728:	4606      	mov	r6, r0
 800972a:	460c      	mov	r4, r1
 800972c:	d507      	bpl.n	800973e <__smakebuf_r+0x1c>
 800972e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009732:	6023      	str	r3, [r4, #0]
 8009734:	6123      	str	r3, [r4, #16]
 8009736:	2301      	movs	r3, #1
 8009738:	6163      	str	r3, [r4, #20]
 800973a:	b003      	add	sp, #12
 800973c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800973e:	466a      	mov	r2, sp
 8009740:	ab01      	add	r3, sp, #4
 8009742:	f7ff ffc9 	bl	80096d8 <__swhatbuf_r>
 8009746:	9f00      	ldr	r7, [sp, #0]
 8009748:	4605      	mov	r5, r0
 800974a:	4639      	mov	r1, r7
 800974c:	4630      	mov	r0, r6
 800974e:	f7ff fbbd 	bl	8008ecc <_malloc_r>
 8009752:	b948      	cbnz	r0, 8009768 <__smakebuf_r+0x46>
 8009754:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009758:	059a      	lsls	r2, r3, #22
 800975a:	d4ee      	bmi.n	800973a <__smakebuf_r+0x18>
 800975c:	f023 0303 	bic.w	r3, r3, #3
 8009760:	f043 0302 	orr.w	r3, r3, #2
 8009764:	81a3      	strh	r3, [r4, #12]
 8009766:	e7e2      	b.n	800972e <__smakebuf_r+0xc>
 8009768:	89a3      	ldrh	r3, [r4, #12]
 800976a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800976e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009772:	81a3      	strh	r3, [r4, #12]
 8009774:	9b01      	ldr	r3, [sp, #4]
 8009776:	6020      	str	r0, [r4, #0]
 8009778:	b15b      	cbz	r3, 8009792 <__smakebuf_r+0x70>
 800977a:	4630      	mov	r0, r6
 800977c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009780:	f000 f81e 	bl	80097c0 <_isatty_r>
 8009784:	b128      	cbz	r0, 8009792 <__smakebuf_r+0x70>
 8009786:	89a3      	ldrh	r3, [r4, #12]
 8009788:	f023 0303 	bic.w	r3, r3, #3
 800978c:	f043 0301 	orr.w	r3, r3, #1
 8009790:	81a3      	strh	r3, [r4, #12]
 8009792:	89a3      	ldrh	r3, [r4, #12]
 8009794:	431d      	orrs	r5, r3
 8009796:	81a5      	strh	r5, [r4, #12]
 8009798:	e7cf      	b.n	800973a <__smakebuf_r+0x18>
	...

0800979c <_fstat_r>:
 800979c:	b538      	push	{r3, r4, r5, lr}
 800979e:	2300      	movs	r3, #0
 80097a0:	4d06      	ldr	r5, [pc, #24]	@ (80097bc <_fstat_r+0x20>)
 80097a2:	4604      	mov	r4, r0
 80097a4:	4608      	mov	r0, r1
 80097a6:	4611      	mov	r1, r2
 80097a8:	602b      	str	r3, [r5, #0]
 80097aa:	f7f9 fc3c 	bl	8003026 <_fstat>
 80097ae:	1c43      	adds	r3, r0, #1
 80097b0:	d102      	bne.n	80097b8 <_fstat_r+0x1c>
 80097b2:	682b      	ldr	r3, [r5, #0]
 80097b4:	b103      	cbz	r3, 80097b8 <_fstat_r+0x1c>
 80097b6:	6023      	str	r3, [r4, #0]
 80097b8:	bd38      	pop	{r3, r4, r5, pc}
 80097ba:	bf00      	nop
 80097bc:	200003f4 	.word	0x200003f4

080097c0 <_isatty_r>:
 80097c0:	b538      	push	{r3, r4, r5, lr}
 80097c2:	2300      	movs	r3, #0
 80097c4:	4d05      	ldr	r5, [pc, #20]	@ (80097dc <_isatty_r+0x1c>)
 80097c6:	4604      	mov	r4, r0
 80097c8:	4608      	mov	r0, r1
 80097ca:	602b      	str	r3, [r5, #0]
 80097cc:	f7f9 fc3a 	bl	8003044 <_isatty>
 80097d0:	1c43      	adds	r3, r0, #1
 80097d2:	d102      	bne.n	80097da <_isatty_r+0x1a>
 80097d4:	682b      	ldr	r3, [r5, #0]
 80097d6:	b103      	cbz	r3, 80097da <_isatty_r+0x1a>
 80097d8:	6023      	str	r3, [r4, #0]
 80097da:	bd38      	pop	{r3, r4, r5, pc}
 80097dc:	200003f4 	.word	0x200003f4

080097e0 <_sbrk_r>:
 80097e0:	b538      	push	{r3, r4, r5, lr}
 80097e2:	2300      	movs	r3, #0
 80097e4:	4d05      	ldr	r5, [pc, #20]	@ (80097fc <_sbrk_r+0x1c>)
 80097e6:	4604      	mov	r4, r0
 80097e8:	4608      	mov	r0, r1
 80097ea:	602b      	str	r3, [r5, #0]
 80097ec:	f7f9 fc40 	bl	8003070 <_sbrk>
 80097f0:	1c43      	adds	r3, r0, #1
 80097f2:	d102      	bne.n	80097fa <_sbrk_r+0x1a>
 80097f4:	682b      	ldr	r3, [r5, #0]
 80097f6:	b103      	cbz	r3, 80097fa <_sbrk_r+0x1a>
 80097f8:	6023      	str	r3, [r4, #0]
 80097fa:	bd38      	pop	{r3, r4, r5, pc}
 80097fc:	200003f4 	.word	0x200003f4

08009800 <memchr>:
 8009800:	4603      	mov	r3, r0
 8009802:	b510      	push	{r4, lr}
 8009804:	b2c9      	uxtb	r1, r1
 8009806:	4402      	add	r2, r0
 8009808:	4293      	cmp	r3, r2
 800980a:	4618      	mov	r0, r3
 800980c:	d101      	bne.n	8009812 <memchr+0x12>
 800980e:	2000      	movs	r0, #0
 8009810:	e003      	b.n	800981a <memchr+0x1a>
 8009812:	7804      	ldrb	r4, [r0, #0]
 8009814:	3301      	adds	r3, #1
 8009816:	428c      	cmp	r4, r1
 8009818:	d1f6      	bne.n	8009808 <memchr+0x8>
 800981a:	bd10      	pop	{r4, pc}

0800981c <_init>:
 800981c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800981e:	bf00      	nop
 8009820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009822:	bc08      	pop	{r3}
 8009824:	469e      	mov	lr, r3
 8009826:	4770      	bx	lr

08009828 <_fini>:
 8009828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800982a:	bf00      	nop
 800982c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800982e:	bc08      	pop	{r3}
 8009830:	469e      	mov	lr, r3
 8009832:	4770      	bx	lr
