
autolauncher_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a880  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d84  0800a990  0800a990  0000b990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c714  0800c714  0000e0a0  2**0
                  CONTENTS
  4 .ARM          00000000  0800c714  0800c714  0000e0a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c714  0800c714  0000e0a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c714  0800c714  0000d714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c718  0800c718  0000d718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  0800c71c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  200000a0  0800c7bc  0000e0a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000408  0800c7bc  0000e408  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e0a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014553  00000000  00000000  0000e0c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003252  00000000  00000000  0002261c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001390  00000000  00000000  00025870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f73  00000000  00000000  00026c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab3d  00000000  00000000  00027b73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001939f  00000000  00000000  000426b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095065  00000000  00000000  0005ba4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f0ab4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d9c  00000000  00000000  000f0af8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000f6894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000a0 	.word	0x200000a0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a978 	.word	0x0800a978

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000a4 	.word	0x200000a4
 800014c:	0800a978 	.word	0x0800a978

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001a2:	2afd      	cmp	r2, #253	@ 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	@ 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	@ 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__aeabi_d2uiz>:
 8000a54:	004a      	lsls	r2, r1, #1
 8000a56:	d211      	bcs.n	8000a7c <__aeabi_d2uiz+0x28>
 8000a58:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a5c:	d211      	bcs.n	8000a82 <__aeabi_d2uiz+0x2e>
 8000a5e:	d50d      	bpl.n	8000a7c <__aeabi_d2uiz+0x28>
 8000a60:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a64:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a68:	d40e      	bmi.n	8000a88 <__aeabi_d2uiz+0x34>
 8000a6a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a6e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a72:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a76:	fa23 f002 	lsr.w	r0, r3, r2
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d102      	bne.n	8000a8e <__aeabi_d2uiz+0x3a>
 8000a88:	f04f 30ff 	mov.w	r0, #4294967295
 8000a8c:	4770      	bx	lr
 8000a8e:	f04f 0000 	mov.w	r0, #0
 8000a92:	4770      	bx	lr

08000a94 <__aeabi_d2f>:
 8000a94:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a98:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a9c:	bf24      	itt	cs
 8000a9e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aa2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aa6:	d90d      	bls.n	8000ac4 <__aeabi_d2f+0x30>
 8000aa8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ab4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ab8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000abc:	bf08      	it	eq
 8000abe:	f020 0001 	biceq.w	r0, r0, #1
 8000ac2:	4770      	bx	lr
 8000ac4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ac8:	d121      	bne.n	8000b0e <__aeabi_d2f+0x7a>
 8000aca:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ace:	bfbc      	itt	lt
 8000ad0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ad4:	4770      	bxlt	lr
 8000ad6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ada:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ade:	f1c2 0218 	rsb	r2, r2, #24
 8000ae2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ae6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aea:	fa20 f002 	lsr.w	r0, r0, r2
 8000aee:	bf18      	it	ne
 8000af0:	f040 0001 	orrne.w	r0, r0, #1
 8000af4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000afc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b00:	ea40 000c 	orr.w	r0, r0, ip
 8000b04:	fa23 f302 	lsr.w	r3, r3, r2
 8000b08:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b0c:	e7cc      	b.n	8000aa8 <__aeabi_d2f+0x14>
 8000b0e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b12:	d107      	bne.n	8000b24 <__aeabi_d2f+0x90>
 8000b14:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b18:	bf1e      	ittt	ne
 8000b1a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b1e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b22:	4770      	bxne	lr
 8000b24:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b28:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop

08000b34 <__aeabi_frsub>:
 8000b34:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b38:	e002      	b.n	8000b40 <__addsf3>
 8000b3a:	bf00      	nop

08000b3c <__aeabi_fsub>:
 8000b3c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b40 <__addsf3>:
 8000b40:	0042      	lsls	r2, r0, #1
 8000b42:	bf1f      	itttt	ne
 8000b44:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b48:	ea92 0f03 	teqne	r2, r3
 8000b4c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b50:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b54:	d06a      	beq.n	8000c2c <__addsf3+0xec>
 8000b56:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b5a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b5e:	bfc1      	itttt	gt
 8000b60:	18d2      	addgt	r2, r2, r3
 8000b62:	4041      	eorgt	r1, r0
 8000b64:	4048      	eorgt	r0, r1
 8000b66:	4041      	eorgt	r1, r0
 8000b68:	bfb8      	it	lt
 8000b6a:	425b      	neglt	r3, r3
 8000b6c:	2b19      	cmp	r3, #25
 8000b6e:	bf88      	it	hi
 8000b70:	4770      	bxhi	lr
 8000b72:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b76:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b7e:	bf18      	it	ne
 8000b80:	4240      	negne	r0, r0
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b86:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b8a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b8e:	bf18      	it	ne
 8000b90:	4249      	negne	r1, r1
 8000b92:	ea92 0f03 	teq	r2, r3
 8000b96:	d03f      	beq.n	8000c18 <__addsf3+0xd8>
 8000b98:	f1a2 0201 	sub.w	r2, r2, #1
 8000b9c:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba0:	eb10 000c 	adds.w	r0, r0, ip
 8000ba4:	f1c3 0320 	rsb	r3, r3, #32
 8000ba8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bac:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bb0:	d502      	bpl.n	8000bb8 <__addsf3+0x78>
 8000bb2:	4249      	negs	r1, r1
 8000bb4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bb8:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bbc:	d313      	bcc.n	8000be6 <__addsf3+0xa6>
 8000bbe:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bc2:	d306      	bcc.n	8000bd2 <__addsf3+0x92>
 8000bc4:	0840      	lsrs	r0, r0, #1
 8000bc6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bca:	f102 0201 	add.w	r2, r2, #1
 8000bce:	2afe      	cmp	r2, #254	@ 0xfe
 8000bd0:	d251      	bcs.n	8000c76 <__addsf3+0x136>
 8000bd2:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bd6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bda:	bf08      	it	eq
 8000bdc:	f020 0001 	biceq.w	r0, r0, #1
 8000be0:	ea40 0003 	orr.w	r0, r0, r3
 8000be4:	4770      	bx	lr
 8000be6:	0049      	lsls	r1, r1, #1
 8000be8:	eb40 0000 	adc.w	r0, r0, r0
 8000bec:	3a01      	subs	r2, #1
 8000bee:	bf28      	it	cs
 8000bf0:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bf4:	d2ed      	bcs.n	8000bd2 <__addsf3+0x92>
 8000bf6:	fab0 fc80 	clz	ip, r0
 8000bfa:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bfe:	ebb2 020c 	subs.w	r2, r2, ip
 8000c02:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c06:	bfaa      	itet	ge
 8000c08:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c0c:	4252      	neglt	r2, r2
 8000c0e:	4318      	orrge	r0, r3
 8000c10:	bfbc      	itt	lt
 8000c12:	40d0      	lsrlt	r0, r2
 8000c14:	4318      	orrlt	r0, r3
 8000c16:	4770      	bx	lr
 8000c18:	f092 0f00 	teq	r2, #0
 8000c1c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c20:	bf06      	itte	eq
 8000c22:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c26:	3201      	addeq	r2, #1
 8000c28:	3b01      	subne	r3, #1
 8000c2a:	e7b5      	b.n	8000b98 <__addsf3+0x58>
 8000c2c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c30:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c34:	bf18      	it	ne
 8000c36:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c3a:	d021      	beq.n	8000c80 <__addsf3+0x140>
 8000c3c:	ea92 0f03 	teq	r2, r3
 8000c40:	d004      	beq.n	8000c4c <__addsf3+0x10c>
 8000c42:	f092 0f00 	teq	r2, #0
 8000c46:	bf08      	it	eq
 8000c48:	4608      	moveq	r0, r1
 8000c4a:	4770      	bx	lr
 8000c4c:	ea90 0f01 	teq	r0, r1
 8000c50:	bf1c      	itt	ne
 8000c52:	2000      	movne	r0, #0
 8000c54:	4770      	bxne	lr
 8000c56:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c5a:	d104      	bne.n	8000c66 <__addsf3+0x126>
 8000c5c:	0040      	lsls	r0, r0, #1
 8000c5e:	bf28      	it	cs
 8000c60:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c64:	4770      	bx	lr
 8000c66:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c6a:	bf3c      	itt	cc
 8000c6c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c70:	4770      	bxcc	lr
 8000c72:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c76:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c7a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c7e:	4770      	bx	lr
 8000c80:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c84:	bf16      	itet	ne
 8000c86:	4608      	movne	r0, r1
 8000c88:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c8c:	4601      	movne	r1, r0
 8000c8e:	0242      	lsls	r2, r0, #9
 8000c90:	bf06      	itte	eq
 8000c92:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c96:	ea90 0f01 	teqeq	r0, r1
 8000c9a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c9e:	4770      	bx	lr

08000ca0 <__aeabi_ui2f>:
 8000ca0:	f04f 0300 	mov.w	r3, #0
 8000ca4:	e004      	b.n	8000cb0 <__aeabi_i2f+0x8>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_i2f>:
 8000ca8:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cac:	bf48      	it	mi
 8000cae:	4240      	negmi	r0, r0
 8000cb0:	ea5f 0c00 	movs.w	ip, r0
 8000cb4:	bf08      	it	eq
 8000cb6:	4770      	bxeq	lr
 8000cb8:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cbc:	4601      	mov	r1, r0
 8000cbe:	f04f 0000 	mov.w	r0, #0
 8000cc2:	e01c      	b.n	8000cfe <__aeabi_l2f+0x2a>

08000cc4 <__aeabi_ul2f>:
 8000cc4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	e00a      	b.n	8000ce8 <__aeabi_l2f+0x14>
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_l2f>:
 8000cd4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000ce0:	d502      	bpl.n	8000ce8 <__aeabi_l2f+0x14>
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	ea5f 0c01 	movs.w	ip, r1
 8000cec:	bf02      	ittt	eq
 8000cee:	4684      	moveq	ip, r0
 8000cf0:	4601      	moveq	r1, r0
 8000cf2:	2000      	moveq	r0, #0
 8000cf4:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cf8:	bf08      	it	eq
 8000cfa:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cfe:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d02:	fabc f28c 	clz	r2, ip
 8000d06:	3a08      	subs	r2, #8
 8000d08:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d0c:	db10      	blt.n	8000d30 <__aeabi_l2f+0x5c>
 8000d0e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d12:	4463      	add	r3, ip
 8000d14:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d18:	f1c2 0220 	rsb	r2, r2, #32
 8000d1c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d20:	fa20 f202 	lsr.w	r2, r0, r2
 8000d24:	eb43 0002 	adc.w	r0, r3, r2
 8000d28:	bf08      	it	eq
 8000d2a:	f020 0001 	biceq.w	r0, r0, #1
 8000d2e:	4770      	bx	lr
 8000d30:	f102 0220 	add.w	r2, r2, #32
 8000d34:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d38:	f1c2 0220 	rsb	r2, r2, #32
 8000d3c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d40:	fa21 f202 	lsr.w	r2, r1, r2
 8000d44:	eb43 0002 	adc.w	r0, r3, r2
 8000d48:	bf08      	it	eq
 8000d4a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d4e:	4770      	bx	lr

08000d50 <__gesf2>:
 8000d50:	f04f 3cff 	mov.w	ip, #4294967295
 8000d54:	e006      	b.n	8000d64 <__cmpsf2+0x4>
 8000d56:	bf00      	nop

08000d58 <__lesf2>:
 8000d58:	f04f 0c01 	mov.w	ip, #1
 8000d5c:	e002      	b.n	8000d64 <__cmpsf2+0x4>
 8000d5e:	bf00      	nop

08000d60 <__cmpsf2>:
 8000d60:	f04f 0c01 	mov.w	ip, #1
 8000d64:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d68:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d6c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d70:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d74:	bf18      	it	ne
 8000d76:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d7a:	d011      	beq.n	8000da0 <__cmpsf2+0x40>
 8000d7c:	b001      	add	sp, #4
 8000d7e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d82:	bf18      	it	ne
 8000d84:	ea90 0f01 	teqne	r0, r1
 8000d88:	bf58      	it	pl
 8000d8a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d8e:	bf88      	it	hi
 8000d90:	17c8      	asrhi	r0, r1, #31
 8000d92:	bf38      	it	cc
 8000d94:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d98:	bf18      	it	ne
 8000d9a:	f040 0001 	orrne.w	r0, r0, #1
 8000d9e:	4770      	bx	lr
 8000da0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000da4:	d102      	bne.n	8000dac <__cmpsf2+0x4c>
 8000da6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000daa:	d105      	bne.n	8000db8 <__cmpsf2+0x58>
 8000dac:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000db0:	d1e4      	bne.n	8000d7c <__cmpsf2+0x1c>
 8000db2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000db6:	d0e1      	beq.n	8000d7c <__cmpsf2+0x1c>
 8000db8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop

08000dc0 <__aeabi_cfrcmple>:
 8000dc0:	4684      	mov	ip, r0
 8000dc2:	4608      	mov	r0, r1
 8000dc4:	4661      	mov	r1, ip
 8000dc6:	e7ff      	b.n	8000dc8 <__aeabi_cfcmpeq>

08000dc8 <__aeabi_cfcmpeq>:
 8000dc8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000dca:	f7ff ffc9 	bl	8000d60 <__cmpsf2>
 8000dce:	2800      	cmp	r0, #0
 8000dd0:	bf48      	it	mi
 8000dd2:	f110 0f00 	cmnmi.w	r0, #0
 8000dd6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000dd8 <__aeabi_fcmpeq>:
 8000dd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ddc:	f7ff fff4 	bl	8000dc8 <__aeabi_cfcmpeq>
 8000de0:	bf0c      	ite	eq
 8000de2:	2001      	moveq	r0, #1
 8000de4:	2000      	movne	r0, #0
 8000de6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dea:	bf00      	nop

08000dec <__aeabi_fcmplt>:
 8000dec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000df0:	f7ff ffea 	bl	8000dc8 <__aeabi_cfcmpeq>
 8000df4:	bf34      	ite	cc
 8000df6:	2001      	movcc	r0, #1
 8000df8:	2000      	movcs	r0, #0
 8000dfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dfe:	bf00      	nop

08000e00 <__aeabi_fcmple>:
 8000e00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e04:	f7ff ffe0 	bl	8000dc8 <__aeabi_cfcmpeq>
 8000e08:	bf94      	ite	ls
 8000e0a:	2001      	movls	r0, #1
 8000e0c:	2000      	movhi	r0, #0
 8000e0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e12:	bf00      	nop

08000e14 <__aeabi_fcmpge>:
 8000e14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e18:	f7ff ffd2 	bl	8000dc0 <__aeabi_cfrcmple>
 8000e1c:	bf94      	ite	ls
 8000e1e:	2001      	movls	r0, #1
 8000e20:	2000      	movhi	r0, #0
 8000e22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e26:	bf00      	nop

08000e28 <__aeabi_fcmpgt>:
 8000e28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e2c:	f7ff ffc8 	bl	8000dc0 <__aeabi_cfrcmple>
 8000e30:	bf34      	ite	cc
 8000e32:	2001      	movcc	r0, #1
 8000e34:	2000      	movcs	r0, #0
 8000e36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e3a:	bf00      	nop

08000e3c <__aeabi_f2iz>:
 8000e3c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e40:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000e44:	d30f      	bcc.n	8000e66 <__aeabi_f2iz+0x2a>
 8000e46:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000e4a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e4e:	d90d      	bls.n	8000e6c <__aeabi_f2iz+0x30>
 8000e50:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e54:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000e58:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000e5c:	fa23 f002 	lsr.w	r0, r3, r2
 8000e60:	bf18      	it	ne
 8000e62:	4240      	negne	r0, r0
 8000e64:	4770      	bx	lr
 8000e66:	f04f 0000 	mov.w	r0, #0
 8000e6a:	4770      	bx	lr
 8000e6c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000e70:	d101      	bne.n	8000e76 <__aeabi_f2iz+0x3a>
 8000e72:	0242      	lsls	r2, r0, #9
 8000e74:	d105      	bne.n	8000e82 <__aeabi_f2iz+0x46>
 8000e76:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000e7a:	bf08      	it	eq
 8000e7c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000e80:	4770      	bx	lr
 8000e82:	f04f 0000 	mov.w	r0, #0
 8000e86:	4770      	bx	lr

08000e88 <__aeabi_f2uiz>:
 8000e88:	0042      	lsls	r2, r0, #1
 8000e8a:	d20e      	bcs.n	8000eaa <__aeabi_f2uiz+0x22>
 8000e8c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000e90:	d30b      	bcc.n	8000eaa <__aeabi_f2uiz+0x22>
 8000e92:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000e96:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e9a:	d409      	bmi.n	8000eb0 <__aeabi_f2uiz+0x28>
 8000e9c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ea0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ea4:	fa23 f002 	lsr.w	r0, r3, r2
 8000ea8:	4770      	bx	lr
 8000eaa:	f04f 0000 	mov.w	r0, #0
 8000eae:	4770      	bx	lr
 8000eb0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000eb4:	d101      	bne.n	8000eba <__aeabi_f2uiz+0x32>
 8000eb6:	0242      	lsls	r2, r0, #9
 8000eb8:	d102      	bne.n	8000ec0 <__aeabi_f2uiz+0x38>
 8000eba:	f04f 30ff 	mov.w	r0, #4294967295
 8000ebe:	4770      	bx	lr
 8000ec0:	f04f 0000 	mov.w	r0, #0
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ece:	1d3b      	adds	r3, r7, #4
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ed8:	4b27      	ldr	r3, [pc, #156]	@ (8000f78 <MX_ADC1_Init+0xb0>)
 8000eda:	4a28      	ldr	r2, [pc, #160]	@ (8000f7c <MX_ADC1_Init+0xb4>)
 8000edc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ede:	4b26      	ldr	r3, [pc, #152]	@ (8000f78 <MX_ADC1_Init+0xb0>)
 8000ee0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ee4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ee6:	4b24      	ldr	r3, [pc, #144]	@ (8000f78 <MX_ADC1_Init+0xb0>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eec:	4b22      	ldr	r3, [pc, #136]	@ (8000f78 <MX_ADC1_Init+0xb0>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ef2:	4b21      	ldr	r3, [pc, #132]	@ (8000f78 <MX_ADC1_Init+0xb0>)
 8000ef4:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000ef8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000efa:	4b1f      	ldr	r3, [pc, #124]	@ (8000f78 <MX_ADC1_Init+0xb0>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8000f00:	4b1d      	ldr	r3, [pc, #116]	@ (8000f78 <MX_ADC1_Init+0xb0>)
 8000f02:	2203      	movs	r2, #3
 8000f04:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f06:	481c      	ldr	r0, [pc, #112]	@ (8000f78 <MX_ADC1_Init+0xb0>)
 8000f08:	f003 fb22 	bl	8004550 <HAL_ADC_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000f12:	f002 febe 	bl	8003c92 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f16:	230a      	movs	r3, #10
 8000f18:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000f1e:	2307      	movs	r3, #7
 8000f20:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	4619      	mov	r1, r3
 8000f26:	4814      	ldr	r0, [pc, #80]	@ (8000f78 <MX_ADC1_Init+0xb0>)
 8000f28:	f003 fd26 	bl	8004978 <HAL_ADC_ConfigChannel>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000f32:	f002 feae 	bl	8003c92 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f36:	230b      	movs	r3, #11
 8000f38:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	4619      	mov	r1, r3
 8000f42:	480d      	ldr	r0, [pc, #52]	@ (8000f78 <MX_ADC1_Init+0xb0>)
 8000f44:	f003 fd18 	bl	8004978 <HAL_ADC_ConfigChannel>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000f4e:	f002 fea0 	bl	8003c92 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000f52:	2310      	movs	r3, #16
 8000f54:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000f56:	2303      	movs	r3, #3
 8000f58:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4806      	ldr	r0, [pc, #24]	@ (8000f78 <MX_ADC1_Init+0xb0>)
 8000f60:	f003 fd0a 	bl	8004978 <HAL_ADC_ConfigChannel>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000f6a:	f002 fe92 	bl	8003c92 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	200000bc 	.word	0x200000bc
 8000f7c:	40012400 	.word	0x40012400

08000f80 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b088      	sub	sp, #32
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	f107 0310 	add.w	r3, r7, #16
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a28      	ldr	r2, [pc, #160]	@ (800103c <HAL_ADC_MspInit+0xbc>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d149      	bne.n	8001034 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fa0:	4b27      	ldr	r3, [pc, #156]	@ (8001040 <HAL_ADC_MspInit+0xc0>)
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	4a26      	ldr	r2, [pc, #152]	@ (8001040 <HAL_ADC_MspInit+0xc0>)
 8000fa6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000faa:	6193      	str	r3, [r2, #24]
 8000fac:	4b24      	ldr	r3, [pc, #144]	@ (8001040 <HAL_ADC_MspInit+0xc0>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb8:	4b21      	ldr	r3, [pc, #132]	@ (8001040 <HAL_ADC_MspInit+0xc0>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	4a20      	ldr	r2, [pc, #128]	@ (8001040 <HAL_ADC_MspInit+0xc0>)
 8000fbe:	f043 0310 	orr.w	r3, r3, #16
 8000fc2:	6193      	str	r3, [r2, #24]
 8000fc4:	4b1e      	ldr	r3, [pc, #120]	@ (8001040 <HAL_ADC_MspInit+0xc0>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	f003 0310 	and.w	r3, r3, #16
 8000fcc:	60bb      	str	r3, [r7, #8]
 8000fce:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = ADC_VOLT_Pin|ADC_AMP_Pin;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd8:	f107 0310 	add.w	r3, r7, #16
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4819      	ldr	r0, [pc, #100]	@ (8001044 <HAL_ADC_MspInit+0xc4>)
 8000fe0:	f004 fb22 	bl	8005628 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000fe4:	4b18      	ldr	r3, [pc, #96]	@ (8001048 <HAL_ADC_MspInit+0xc8>)
 8000fe6:	4a19      	ldr	r2, [pc, #100]	@ (800104c <HAL_ADC_MspInit+0xcc>)
 8000fe8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fea:	4b17      	ldr	r3, [pc, #92]	@ (8001048 <HAL_ADC_MspInit+0xc8>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ff0:	4b15      	ldr	r3, [pc, #84]	@ (8001048 <HAL_ADC_MspInit+0xc8>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ff6:	4b14      	ldr	r3, [pc, #80]	@ (8001048 <HAL_ADC_MspInit+0xc8>)
 8000ff8:	2280      	movs	r2, #128	@ 0x80
 8000ffa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ffc:	4b12      	ldr	r3, [pc, #72]	@ (8001048 <HAL_ADC_MspInit+0xc8>)
 8000ffe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001002:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001004:	4b10      	ldr	r3, [pc, #64]	@ (8001048 <HAL_ADC_MspInit+0xc8>)
 8001006:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800100a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800100c:	4b0e      	ldr	r3, [pc, #56]	@ (8001048 <HAL_ADC_MspInit+0xc8>)
 800100e:	2220      	movs	r2, #32
 8001010:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001012:	4b0d      	ldr	r3, [pc, #52]	@ (8001048 <HAL_ADC_MspInit+0xc8>)
 8001014:	2200      	movs	r2, #0
 8001016:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001018:	480b      	ldr	r0, [pc, #44]	@ (8001048 <HAL_ADC_MspInit+0xc8>)
 800101a:	f004 f863 	bl	80050e4 <HAL_DMA_Init>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001024:	f002 fe35 	bl	8003c92 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a07      	ldr	r2, [pc, #28]	@ (8001048 <HAL_ADC_MspInit+0xc8>)
 800102c:	621a      	str	r2, [r3, #32]
 800102e:	4a06      	ldr	r2, [pc, #24]	@ (8001048 <HAL_ADC_MspInit+0xc8>)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001034:	bf00      	nop
 8001036:	3720      	adds	r7, #32
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40012400 	.word	0x40012400
 8001040:	40021000 	.word	0x40021000
 8001044:	40011000 	.word	0x40011000
 8001048:	200000ec 	.word	0x200000ec
 800104c:	40020008 	.word	0x40020008

08001050 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001056:	4b0c      	ldr	r3, [pc, #48]	@ (8001088 <MX_DMA_Init+0x38>)
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	4a0b      	ldr	r2, [pc, #44]	@ (8001088 <MX_DMA_Init+0x38>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	6153      	str	r3, [r2, #20]
 8001062:	4b09      	ldr	r3, [pc, #36]	@ (8001088 <MX_DMA_Init+0x38>)
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2100      	movs	r1, #0
 8001072:	200b      	movs	r0, #11
 8001074:	f003 ffff 	bl	8005076 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001078:	200b      	movs	r0, #11
 800107a:	f004 f818 	bl	80050ae <HAL_NVIC_EnableIRQ>

}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40021000 	.word	0x40021000

0800108c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b088      	sub	sp, #32
 8001090:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001092:	f107 0310 	add.w	r3, r7, #16
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a0:	4b42      	ldr	r3, [pc, #264]	@ (80011ac <MX_GPIO_Init+0x120>)
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	4a41      	ldr	r2, [pc, #260]	@ (80011ac <MX_GPIO_Init+0x120>)
 80010a6:	f043 0310 	orr.w	r3, r3, #16
 80010aa:	6193      	str	r3, [r2, #24]
 80010ac:	4b3f      	ldr	r3, [pc, #252]	@ (80011ac <MX_GPIO_Init+0x120>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	f003 0310 	and.w	r3, r3, #16
 80010b4:	60fb      	str	r3, [r7, #12]
 80010b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b8:	4b3c      	ldr	r3, [pc, #240]	@ (80011ac <MX_GPIO_Init+0x120>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	4a3b      	ldr	r2, [pc, #236]	@ (80011ac <MX_GPIO_Init+0x120>)
 80010be:	f043 0304 	orr.w	r3, r3, #4
 80010c2:	6193      	str	r3, [r2, #24]
 80010c4:	4b39      	ldr	r3, [pc, #228]	@ (80011ac <MX_GPIO_Init+0x120>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	f003 0304 	and.w	r3, r3, #4
 80010cc:	60bb      	str	r3, [r7, #8]
 80010ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d0:	4b36      	ldr	r3, [pc, #216]	@ (80011ac <MX_GPIO_Init+0x120>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	4a35      	ldr	r2, [pc, #212]	@ (80011ac <MX_GPIO_Init+0x120>)
 80010d6:	f043 0308 	orr.w	r3, r3, #8
 80010da:	6193      	str	r3, [r2, #24]
 80010dc:	4b33      	ldr	r3, [pc, #204]	@ (80011ac <MX_GPIO_Init+0x120>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	f003 0308 	and.w	r3, r3, #8
 80010e4:	607b      	str	r3, [r7, #4]
 80010e6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010e8:	4b30      	ldr	r3, [pc, #192]	@ (80011ac <MX_GPIO_Init+0x120>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	4a2f      	ldr	r2, [pc, #188]	@ (80011ac <MX_GPIO_Init+0x120>)
 80010ee:	f043 0320 	orr.w	r3, r3, #32
 80010f2:	6193      	str	r3, [r2, #24]
 80010f4:	4b2d      	ldr	r3, [pc, #180]	@ (80011ac <MX_GPIO_Init+0x120>)
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	f003 0320 	and.w	r3, r3, #32
 80010fc:	603b      	str	r3, [r7, #0]
 80010fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SSR_3_Pin|SSR_2_Pin|SSR_1_Pin|ENABLE_M1_Pin
 8001100:	2200      	movs	r2, #0
 8001102:	f64f 71dc 	movw	r1, #65500	@ 0xffdc
 8001106:	482a      	ldr	r0, [pc, #168]	@ (80011b0 <MX_GPIO_Init+0x124>)
 8001108:	f004 fc12 	bl	8005930 <HAL_GPIO_WritePin>
                          |ENABLE_M2_Pin|DIR_Pin|SSR_6_Pin|SSR_5_Pin
                          |RELAY_RESET_3_Pin|RELAY_RESET_2_Pin|RELAY_K7_Pin|RELAY_K1_Pin
                          |RELAY_K2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENABLE_M3_Pin|ENABLE_M4_Pin|MUX_SELECT_Pin|ENABLE_M5_Pin
 800110c:	2200      	movs	r2, #0
 800110e:	f649 11f7 	movw	r1, #39415	@ 0x99f7
 8001112:	4828      	ldr	r0, [pc, #160]	@ (80011b4 <MX_GPIO_Init+0x128>)
 8001114:	f004 fc0c 	bl	8005930 <HAL_GPIO_WritePin>
                          |ENABLE_M6_Pin|ENABLE_M7_Pin|ENABLE_M8_Pin|RELAY_K12_CAL_RES_Pin
                          |RELAY_K11_CAL_CONT_Pin|RELAY_K9_K10_GND_COND_Pin|RELAY_K8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|SSR_8_Pin|SSR_7_Pin|RELAY_K4_Pin
 8001118:	2200      	movs	r2, #0
 800111a:	f24c 313a 	movw	r1, #49978	@ 0xc33a
 800111e:	4826      	ldr	r0, [pc, #152]	@ (80011b8 <MX_GPIO_Init+0x12c>)
 8001120:	f004 fc06 	bl	8005930 <HAL_GPIO_WritePin>
                          |RELAY_K5_Pin|RELAY_K6_Pin|RELAY_RESET_1_Pin|SSR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_K3_GPIO_Port, RELAY_K3_Pin, GPIO_PIN_RESET);
 8001124:	2200      	movs	r2, #0
 8001126:	2104      	movs	r1, #4
 8001128:	4824      	ldr	r0, [pc, #144]	@ (80011bc <MX_GPIO_Init+0x130>)
 800112a:	f004 fc01 	bl	8005930 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = SSR_3_Pin|SSR_2_Pin|SSR_1_Pin|ENABLE_M1_Pin
 800112e:	f64f 73dc 	movw	r3, #65500	@ 0xffdc
 8001132:	613b      	str	r3, [r7, #16]
                          |ENABLE_M2_Pin|DIR_Pin|SSR_6_Pin|SSR_5_Pin
                          |RELAY_RESET_3_Pin|RELAY_RESET_2_Pin|RELAY_K7_Pin|RELAY_K1_Pin
                          |RELAY_K2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001134:	2301      	movs	r3, #1
 8001136:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113c:	2302      	movs	r3, #2
 800113e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001140:	f107 0310 	add.w	r3, r7, #16
 8001144:	4619      	mov	r1, r3
 8001146:	481a      	ldr	r0, [pc, #104]	@ (80011b0 <MX_GPIO_Init+0x124>)
 8001148:	f004 fa6e 	bl	8005628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ENABLE_M3_Pin|ENABLE_M4_Pin|MUX_SELECT_Pin|ENABLE_M5_Pin
 800114c:	f649 13f7 	movw	r3, #39415	@ 0x99f7
 8001150:	613b      	str	r3, [r7, #16]
                          |ENABLE_M6_Pin|ENABLE_M7_Pin|ENABLE_M8_Pin|RELAY_K12_CAL_RES_Pin
                          |RELAY_K11_CAL_CONT_Pin|RELAY_K9_K10_GND_COND_Pin|RELAY_K8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001152:	2301      	movs	r3, #1
 8001154:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115a:	2302      	movs	r3, #2
 800115c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115e:	f107 0310 	add.w	r3, r7, #16
 8001162:	4619      	mov	r1, r3
 8001164:	4813      	ldr	r0, [pc, #76]	@ (80011b4 <MX_GPIO_Init+0x128>)
 8001166:	f004 fa5f 	bl	8005628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_Pin|SSR_8_Pin|SSR_7_Pin|RELAY_K4_Pin
 800116a:	f24c 333a 	movw	r3, #49978	@ 0xc33a
 800116e:	613b      	str	r3, [r7, #16]
                          |RELAY_K5_Pin|RELAY_K6_Pin|RELAY_RESET_1_Pin|SSR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001170:	2301      	movs	r3, #1
 8001172:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001178:	2302      	movs	r3, #2
 800117a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117c:	f107 0310 	add.w	r3, r7, #16
 8001180:	4619      	mov	r1, r3
 8001182:	480d      	ldr	r0, [pc, #52]	@ (80011b8 <MX_GPIO_Init+0x12c>)
 8001184:	f004 fa50 	bl	8005628 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RELAY_K3_Pin;
 8001188:	2304      	movs	r3, #4
 800118a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118c:	2301      	movs	r3, #1
 800118e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001194:	2302      	movs	r3, #2
 8001196:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RELAY_K3_GPIO_Port, &GPIO_InitStruct);
 8001198:	f107 0310 	add.w	r3, r7, #16
 800119c:	4619      	mov	r1, r3
 800119e:	4807      	ldr	r0, [pc, #28]	@ (80011bc <MX_GPIO_Init+0x130>)
 80011a0:	f004 fa42 	bl	8005628 <HAL_GPIO_Init>

}
 80011a4:	bf00      	nop
 80011a6:	3720      	adds	r7, #32
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40011000 	.word	0x40011000
 80011b4:	40010800 	.word	0x40010800
 80011b8:	40010c00 	.word	0x40010c00
 80011bc:	40011400 	.word	0x40011400

080011c0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011c4:	4b12      	ldr	r3, [pc, #72]	@ (8001210 <MX_I2C1_Init+0x50>)
 80011c6:	4a13      	ldr	r2, [pc, #76]	@ (8001214 <MX_I2C1_Init+0x54>)
 80011c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011ca:	4b11      	ldr	r3, [pc, #68]	@ (8001210 <MX_I2C1_Init+0x50>)
 80011cc:	4a12      	ldr	r2, [pc, #72]	@ (8001218 <MX_I2C1_Init+0x58>)
 80011ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001210 <MX_I2C1_Init+0x50>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001210 <MX_I2C1_Init+0x50>)
 80011d8:	2200      	movs	r2, #0
 80011da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001210 <MX_I2C1_Init+0x50>)
 80011de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001210 <MX_I2C1_Init+0x50>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011ea:	4b09      	ldr	r3, [pc, #36]	@ (8001210 <MX_I2C1_Init+0x50>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011f0:	4b07      	ldr	r3, [pc, #28]	@ (8001210 <MX_I2C1_Init+0x50>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011f6:	4b06      	ldr	r3, [pc, #24]	@ (8001210 <MX_I2C1_Init+0x50>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011fc:	4804      	ldr	r0, [pc, #16]	@ (8001210 <MX_I2C1_Init+0x50>)
 80011fe:	f004 fbc9 	bl	8005994 <HAL_I2C_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001208:	f002 fd43 	bl	8003c92 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000130 	.word	0x20000130
 8001214:	40005400 	.word	0x40005400
 8001218:	000186a0 	.word	0x000186a0

0800121c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b088      	sub	sp, #32
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 0310 	add.w	r3, r7, #16
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a15      	ldr	r2, [pc, #84]	@ (800128c <HAL_I2C_MspInit+0x70>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d123      	bne.n	8001284 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800123c:	4b14      	ldr	r3, [pc, #80]	@ (8001290 <HAL_I2C_MspInit+0x74>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	4a13      	ldr	r2, [pc, #76]	@ (8001290 <HAL_I2C_MspInit+0x74>)
 8001242:	f043 0308 	orr.w	r3, r3, #8
 8001246:	6193      	str	r3, [r2, #24]
 8001248:	4b11      	ldr	r3, [pc, #68]	@ (8001290 <HAL_I2C_MspInit+0x74>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	f003 0308 	and.w	r3, r3, #8
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001254:	23c0      	movs	r3, #192	@ 0xc0
 8001256:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001258:	2312      	movs	r3, #18
 800125a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800125c:	2303      	movs	r3, #3
 800125e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001260:	f107 0310 	add.w	r3, r7, #16
 8001264:	4619      	mov	r1, r3
 8001266:	480b      	ldr	r0, [pc, #44]	@ (8001294 <HAL_I2C_MspInit+0x78>)
 8001268:	f004 f9de 	bl	8005628 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800126c:	4b08      	ldr	r3, [pc, #32]	@ (8001290 <HAL_I2C_MspInit+0x74>)
 800126e:	69db      	ldr	r3, [r3, #28]
 8001270:	4a07      	ldr	r2, [pc, #28]	@ (8001290 <HAL_I2C_MspInit+0x74>)
 8001272:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001276:	61d3      	str	r3, [r2, #28]
 8001278:	4b05      	ldr	r3, [pc, #20]	@ (8001290 <HAL_I2C_MspInit+0x74>)
 800127a:	69db      	ldr	r3, [r3, #28]
 800127c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001284:	bf00      	nop
 8001286:	3720      	adds	r7, #32
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40005400 	.word	0x40005400
 8001290:	40021000 	.word	0x40021000
 8001294:	40010c00 	.word	0x40010c00

08001298 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800129c:	f003 f8d2 	bl	8004444 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012a0:	f000 f84c 	bl	800133c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a4:	f7ff fef2 	bl	800108c <MX_GPIO_Init>
  MX_DMA_Init();
 80012a8:	f7ff fed2 	bl	8001050 <MX_DMA_Init>
  MX_TIM3_Init();
 80012ac:	f002 fde8 	bl	8003e80 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80012b0:	f002 ff3e 	bl	8004130 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80012b4:	f7ff fe08 	bl	8000ec8 <MX_ADC1_Init>
  MX_I2C1_Init();
 80012b8:	f7ff ff82 	bl	80011c0 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80012bc:	f002 ff62 	bl	8004184 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 80012c0:	f002 fe56 	bl	8003f70 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  // Retarget IO stream to UART
  RetargetInit(&huart1);
 80012c4:	4818      	ldr	r0, [pc, #96]	@ (8001328 <main+0x90>)
 80012c6:	f003 f83d 	bl	8004344 <RetargetInit>
  // Initialize stepper motors
  motor_init();
 80012ca:	f002 f907 	bl	80034dc <motor_init>
  // initialize multiplexer
  multiplexer_set(MUX_STM32);
 80012ce:	2001      	movs	r0, #1
 80012d0:	f001 fcf6 	bl	8002cc0 <multiplexer_set>
  // Initialize relays
  relay_init();
 80012d4:	f001 fec4 	bl	8003060 <relay_init>
  // enable receive interrupt
  uartrx_interrupt_init();
 80012d8:	f001 fda0 	bl	8002e1c <uartrx_interrupt_init>
  // Initialize autolauncher parameters i.e. read eeprom
  parameter_init();
 80012dc:	f001 fd24 	bl	8002d28 <parameter_init>
  // display main menu at startup
  menu_main_print();
 80012e0:	f000 f87c 	bl	80013dc <menu_main_print>
  printf("\r\n> ");
 80012e4:	4811      	ldr	r0, [pc, #68]	@ (800132c <main+0x94>)
 80012e6:	f008 f9df 	bl	80096a8 <iprintf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // menu control loop
	  if(active == rxStatus){ // set to active with UART RX interrupt
 80012ea:	4b11      	ldr	r3, [pc, #68]	@ (8001330 <main+0x98>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d115      	bne.n	800131e <main+0x86>
		  rxStatus = idle;
 80012f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001330 <main+0x98>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	701a      	strb	r2, [r3, #0]
		  if( mainMenu == activeMenu){
 80012f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001334 <main+0x9c>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d105      	bne.n	800130c <main+0x74>
			  menu_main_process_input(rxChar); // go to main switch case menu
 8001300:	4b0d      	ldr	r3, [pc, #52]	@ (8001338 <main+0xa0>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f000 f905 	bl	8001514 <menu_main_process_input>
 800130a:	e008      	b.n	800131e <main+0x86>
		  } else if ( configMenu == activeMenu){
 800130c:	4b09      	ldr	r3, [pc, #36]	@ (8001334 <main+0x9c>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d104      	bne.n	800131e <main+0x86>
			  menu_config_process_input(rxChar);
 8001314:	4b08      	ldr	r3, [pc, #32]	@ (8001338 <main+0xa0>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	4618      	mov	r0, r3
 800131a:	f000 fbf9 	bl	8001b10 <menu_config_process_input>
		  }
	  }
	  // could monitor something routinely here
	  HAL_Delay(1); // needed to debug
 800131e:	2001      	movs	r0, #1
 8001320:	f003 f8f2 	bl	8004508 <HAL_Delay>
	  if(active == rxStatus){ // set to active with UART RX interrupt
 8001324:	e7e1      	b.n	80012ea <main+0x52>
 8001326:	bf00      	nop
 8001328:	20000224 	.word	0x20000224
 800132c:	0800a990 	.word	0x0800a990
 8001330:	20000186 	.word	0x20000186
 8001334:	20000187 	.word	0x20000187
 8001338:	20000189 	.word	0x20000189

0800133c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b094      	sub	sp, #80	@ 0x50
 8001340:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001342:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001346:	2228      	movs	r2, #40	@ 0x28
 8001348:	2100      	movs	r1, #0
 800134a:	4618      	mov	r0, r3
 800134c:	f008 fbc8 	bl	8009ae0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001360:	1d3b      	adds	r3, r7, #4
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800136c:	2302      	movs	r3, #2
 800136e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001370:	2301      	movs	r3, #1
 8001372:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001374:	2310      	movs	r3, #16
 8001376:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001378:	2300      	movs	r3, #0
 800137a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800137c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001380:	4618      	mov	r0, r3
 8001382:	f005 fb3b 	bl	80069fc <HAL_RCC_OscConfig>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800138c:	f002 fc81 	bl	8003c92 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001390:	230f      	movs	r3, #15
 8001392:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001394:	2300      	movs	r3, #0
 8001396:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001398:	2300      	movs	r3, #0
 800139a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800139c:	2300      	movs	r3, #0
 800139e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013a0:	2300      	movs	r3, #0
 80013a2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	2100      	movs	r1, #0
 80013aa:	4618      	mov	r0, r3
 80013ac:	f005 fda8 	bl	8006f00 <HAL_RCC_ClockConfig>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80013b6:	f002 fc6c 	bl	8003c92 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013ba:	2302      	movs	r3, #2
 80013bc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	4618      	mov	r0, r3
 80013c6:	f005 ff29 	bl	800721c <HAL_RCCEx_PeriphCLKConfig>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80013d0:	f002 fc5f 	bl	8003c92 <Error_Handler>
  }
}
 80013d4:	bf00      	nop
 80013d6:	3750      	adds	r7, #80	@ 0x50
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <menu_main_print>:


/********************************************** MENU FUNCTIONS **********************************************/

/* Print Main Menu options */
void menu_main_print(void) {
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
    printf("\r\n\n\r");
 80013e0:	4832      	ldr	r0, [pc, #200]	@ (80014ac <menu_main_print+0xd0>)
 80013e2:	f008 f961 	bl	80096a8 <iprintf>
    printf("|========================================|\n\r");
 80013e6:	4832      	ldr	r0, [pc, #200]	@ (80014b0 <menu_main_print+0xd4>)
 80013e8:	f008 f95e 	bl	80096a8 <iprintf>
    printf("|   AOML Autolauncher board version 3.0  |\n\r");
 80013ec:	4831      	ldr	r0, [pc, #196]	@ (80014b4 <menu_main_print+0xd8>)
 80013ee:	f008 f95b 	bl	80096a8 <iprintf>
    printf("|        Firmware version 2024.12.dd     |\n\r");
 80013f2:	4831      	ldr	r0, [pc, #196]	@ (80014b8 <menu_main_print+0xdc>)
 80013f4:	f008 f958 	bl	80096a8 <iprintf>
    printf("|========================================|\n\r");
 80013f8:	482d      	ldr	r0, [pc, #180]	@ (80014b0 <menu_main_print+0xd4>)
 80013fa:	f008 f955 	bl	80096a8 <iprintf>
    printf("|     Model #ALV3.0      S/N ");
 80013fe:	482f      	ldr	r0, [pc, #188]	@ (80014bc <menu_main_print+0xe0>)
 8001400:	f008 f952 	bl	80096a8 <iprintf>
    print_serial_number();
 8001404:	f001 fbfa 	bl	8002bfc <print_serial_number>
    printf("       |\n\r");
 8001408:	482d      	ldr	r0, [pc, #180]	@ (80014c0 <menu_main_print+0xe4>)
 800140a:	f008 f94d 	bl	80096a8 <iprintf>
    printf("|========================================|\n\r");
 800140e:	4828      	ldr	r0, [pc, #160]	@ (80014b0 <menu_main_print+0xd4>)
 8001410:	f008 f94a 	bl	80096a8 <iprintf>
    printf("|               COMMANDS                 |\r\n");
 8001414:	482b      	ldr	r0, [pc, #172]	@ (80014c4 <menu_main_print+0xe8>)
 8001416:	f008 f9af 	bl	8009778 <puts>
//    if (launcher.configured != 'Y') {
//        printf("| ERROR, NO SERIAL NUMBER ASSIGNED 	 |\n\r");
//    }
    printf("|========================================|\n\r");
 800141a:	4825      	ldr	r0, [pc, #148]	@ (80014b0 <menu_main_print+0xd4>)
 800141c:	f008 f944 	bl	80096a8 <iprintf>
    printf("| Connect  Cal Sim BT  	0                |\n\r");
 8001420:	4829      	ldr	r0, [pc, #164]	@ (80014c8 <menu_main_print+0xec>)
 8001422:	f008 f941 	bl	80096a8 <iprintf>
    if (launcher.tubeCount == '6') {
 8001426:	4b29      	ldr	r3, [pc, #164]	@ (80014cc <menu_main_print+0xf0>)
 8001428:	785b      	ldrb	r3, [r3, #1]
 800142a:	2b36      	cmp	r3, #54	@ 0x36
 800142c:	d109      	bne.n	8001442 <menu_main_print+0x66>
        printf("| Connect  XBT 1-6     1,2,3,4,5,6       |\n\r");
 800142e:	4828      	ldr	r0, [pc, #160]	@ (80014d0 <menu_main_print+0xf4>)
 8001430:	f008 f93a 	bl	80096a8 <iprintf>
        printf("| Extend   Pin 1-6     U,V,W,X,Y,Z       |\n\r");
 8001434:	4827      	ldr	r0, [pc, #156]	@ (80014d4 <menu_main_print+0xf8>)
 8001436:	f008 f937 	bl	80096a8 <iprintf>
        printf("| Retract  Pin 1-6     A,B,C,D,E,F       |\n\r");
 800143a:	4827      	ldr	r0, [pc, #156]	@ (80014d8 <menu_main_print+0xfc>)
 800143c:	f008 f934 	bl	80096a8 <iprintf>
 8001440:	e010      	b.n	8001464 <menu_main_print+0x88>
    } else if (launcher.tubeCount == '8') {
 8001442:	4b22      	ldr	r3, [pc, #136]	@ (80014cc <menu_main_print+0xf0>)
 8001444:	785b      	ldrb	r3, [r3, #1]
 8001446:	2b38      	cmp	r3, #56	@ 0x38
 8001448:	d109      	bne.n	800145e <menu_main_print+0x82>
        printf("| Connect  XBT 1-8      1,2,3,4,5,6,7,8  |\n\r");
 800144a:	4824      	ldr	r0, [pc, #144]	@ (80014dc <menu_main_print+0x100>)
 800144c:	f008 f92c 	bl	80096a8 <iprintf>
        printf("| Extend   Pin 1-8      U,V,W,X,Y,Z,S,T  |\n\r");
 8001450:	4823      	ldr	r0, [pc, #140]	@ (80014e0 <menu_main_print+0x104>)
 8001452:	f008 f929 	bl	80096a8 <iprintf>
        printf("| Retract  Pin 1-8      A,B,C,D,E,F,H,I  |\n\r");
 8001456:	4823      	ldr	r0, [pc, #140]	@ (80014e4 <menu_main_print+0x108>)
 8001458:	f008 f926 	bl	80096a8 <iprintf>
 800145c:	e002      	b.n	8001464 <menu_main_print+0x88>
    } else {
    	printf("| ERROR, NO TUBE COUNT!!                |\n\r");
 800145e:	4822      	ldr	r0, [pc, #136]	@ (80014e8 <menu_main_print+0x10c>)
 8001460:	f008 f922 	bl	80096a8 <iprintf>
    }
    printf("| Unground XBT         	G                |\n\r");
 8001464:	4821      	ldr	r0, [pc, #132]	@ (80014ec <menu_main_print+0x110>)
 8001466:	f008 f91f 	bl	80096a8 <iprintf>
    printf("| Calibrate ON         	K                |\n\r");
 800146a:	4821      	ldr	r0, [pc, #132]	@ (80014f0 <menu_main_print+0x114>)
 800146c:	f008 f91c 	bl	80096a8 <iprintf>
    printf("| Calibration resistor	L                |\n\r");
 8001470:	4820      	ldr	r0, [pc, #128]	@ (80014f4 <menu_main_print+0x118>)
 8001472:	f008 f919 	bl	80096a8 <iprintf>
    printf("| Reset all relays    	R                |\n\r");
 8001476:	4820      	ldr	r0, [pc, #128]	@ (80014f8 <menu_main_print+0x11c>)
 8001478:	f008 f916 	bl	80096a8 <iprintf>
    printf("| Print serial number  	s                |\n\r");
 800147c:	481f      	ldr	r0, [pc, #124]	@ (80014fc <menu_main_print+0x120>)
 800147e:	f008 f913 	bl	80096a8 <iprintf>
    printf("| This menu            	M                |\n\r");
 8001482:	481f      	ldr	r0, [pc, #124]	@ (8001500 <menu_main_print+0x124>)
 8001484:	f008 f910 	bl	80096a8 <iprintf>
    printf("| Read voltage & temp   P                |\n\r");
 8001488:	481e      	ldr	r0, [pc, #120]	@ (8001504 <menu_main_print+0x128>)
 800148a:	f008 f90d 	bl	80096a8 <iprintf>
    printf("| Set Tx to GPS         N                |\n\r");
 800148e:	481e      	ldr	r0, [pc, #120]	@ (8001508 <menu_main_print+0x12c>)
 8001490:	f008 f90a 	bl	80096a8 <iprintf>
    printf("| Set Tx to STM32       O                |\n\r");
 8001494:	481d      	ldr	r0, [pc, #116]	@ (800150c <menu_main_print+0x130>)
 8001496:	f008 f907 	bl	80096a8 <iprintf>
    printf("|========================================|\n\r");
 800149a:	4805      	ldr	r0, [pc, #20]	@ (80014b0 <menu_main_print+0xd4>)
 800149c:	f008 f904 	bl	80096a8 <iprintf>
    printf("\r\n");
 80014a0:	481b      	ldr	r0, [pc, #108]	@ (8001510 <menu_main_print+0x134>)
 80014a2:	f008 f969 	bl	8009778 <puts>
}//end status_message
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	0800a998 	.word	0x0800a998
 80014b0:	0800a9a0 	.word	0x0800a9a0
 80014b4:	0800a9d0 	.word	0x0800a9d0
 80014b8:	0800aa00 	.word	0x0800aa00
 80014bc:	0800aa30 	.word	0x0800aa30
 80014c0:	0800aa50 	.word	0x0800aa50
 80014c4:	0800aa5c 	.word	0x0800aa5c
 80014c8:	0800aa88 	.word	0x0800aa88
 80014cc:	20000000 	.word	0x20000000
 80014d0:	0800aab8 	.word	0x0800aab8
 80014d4:	0800aae8 	.word	0x0800aae8
 80014d8:	0800ab18 	.word	0x0800ab18
 80014dc:	0800ab48 	.word	0x0800ab48
 80014e0:	0800ab78 	.word	0x0800ab78
 80014e4:	0800aba8 	.word	0x0800aba8
 80014e8:	0800abd8 	.word	0x0800abd8
 80014ec:	0800ac04 	.word	0x0800ac04
 80014f0:	0800ac34 	.word	0x0800ac34
 80014f4:	0800ac64 	.word	0x0800ac64
 80014f8:	0800ac90 	.word	0x0800ac90
 80014fc:	0800acbc 	.word	0x0800acbc
 8001500:	0800acec 	.word	0x0800acec
 8001504:	0800ad1c 	.word	0x0800ad1c
 8001508:	0800ad4c 	.word	0x0800ad4c
 800150c:	0800ad7c 	.word	0x0800ad7c
 8001510:	0800adac 	.word	0x0800adac

08001514 <menu_main_process_input>:


/* Process char received while in Main menu state */
void menu_main_process_input(char option){
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
	printf("\r\n> Executing OPTION (%c) --> ", option);
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	4619      	mov	r1, r3
 8001522:	48cb      	ldr	r0, [pc, #812]	@ (8001850 <menu_main_process_input+0x33c>)
 8001524:	f008 f8c0 	bl	80096a8 <iprintf>

	switch (option){
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	3b30      	subs	r3, #48	@ 0x30
 800152c:	2b4e      	cmp	r3, #78	@ 0x4e
 800152e:	f200 8211 	bhi.w	8001954 <menu_main_process_input+0x440>
 8001532:	a201      	add	r2, pc, #4	@ (adr r2, 8001538 <menu_main_process_input+0x24>)
 8001534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001538:	08001675 	.word	0x08001675
 800153c:	08001689 	.word	0x08001689
 8001540:	08001697 	.word	0x08001697
 8001544:	080016a5 	.word	0x080016a5
 8001548:	080016b3 	.word	0x080016b3
 800154c:	080016c1 	.word	0x080016c1
 8001550:	080016cf 	.word	0x080016cf
 8001554:	080016dd 	.word	0x080016dd
 8001558:	080016fb 	.word	0x080016fb
 800155c:	08001955 	.word	0x08001955
 8001560:	08001955 	.word	0x08001955
 8001564:	08001955 	.word	0x08001955
 8001568:	08001955 	.word	0x08001955
 800156c:	08001955 	.word	0x08001955
 8001570:	08001955 	.word	0x08001955
 8001574:	08001955 	.word	0x08001955
 8001578:	08001955 	.word	0x08001955
 800157c:	080017a9 	.word	0x080017a9
 8001580:	080017b7 	.word	0x080017b7
 8001584:	080017c5 	.word	0x080017c5
 8001588:	080017d3 	.word	0x080017d3
 800158c:	080017e1 	.word	0x080017e1
 8001590:	080017ef 	.word	0x080017ef
 8001594:	080018e1 	.word	0x080018e1
 8001598:	080017fd 	.word	0x080017fd
 800159c:	0800181b 	.word	0x0800181b
 80015a0:	08001955 	.word	0x08001955
 80015a4:	08001839 	.word	0x08001839
 80015a8:	080018d5 	.word	0x080018d5
 80015ac:	080018ed 	.word	0x080018ed
 80015b0:	08001929 	.word	0x08001929
 80015b4:	0800193d 	.word	0x0800193d
 80015b8:	0800191d 	.word	0x0800191d
 80015bc:	08001955 	.word	0x08001955
 80015c0:	08001845 	.word	0x08001845
 80015c4:	0800176d 	.word	0x0800176d
 80015c8:	0800178b 	.word	0x0800178b
 80015cc:	08001719 	.word	0x08001719
 80015d0:	08001727 	.word	0x08001727
 80015d4:	08001735 	.word	0x08001735
 80015d8:	08001743 	.word	0x08001743
 80015dc:	08001751 	.word	0x08001751
 80015e0:	0800175f 	.word	0x0800175f
 80015e4:	08001955 	.word	0x08001955
 80015e8:	08001955 	.word	0x08001955
 80015ec:	08001955 	.word	0x08001955
 80015f0:	08001955 	.word	0x08001955
 80015f4:	08001955 	.word	0x08001955
 80015f8:	08001955 	.word	0x08001955
 80015fc:	08001955 	.word	0x08001955
 8001600:	08001955 	.word	0x08001955
 8001604:	08001955 	.word	0x08001955
 8001608:	08001955 	.word	0x08001955
 800160c:	08001955 	.word	0x08001955
 8001610:	08001955 	.word	0x08001955
 8001614:	08001955 	.word	0x08001955
 8001618:	08001955 	.word	0x08001955
 800161c:	08001955 	.word	0x08001955
 8001620:	08001955 	.word	0x08001955
 8001624:	08001955 	.word	0x08001955
 8001628:	08001955 	.word	0x08001955
 800162c:	08001955 	.word	0x08001955
 8001630:	08001955 	.word	0x08001955
 8001634:	08001955 	.word	0x08001955
 8001638:	08001955 	.word	0x08001955
 800163c:	08001955 	.word	0x08001955
 8001640:	08001955 	.word	0x08001955
 8001644:	08001905 	.word	0x08001905
 8001648:	08001955 	.word	0x08001955
 800164c:	08001955 	.word	0x08001955
 8001650:	08001955 	.word	0x08001955
 8001654:	08001955 	.word	0x08001955
 8001658:	08001955 	.word	0x08001955
 800165c:	08001955 	.word	0x08001955
 8001660:	08001955 	.word	0x08001955
 8001664:	08001955 	.word	0x08001955
 8001668:	08001955 	.word	0x08001955
 800166c:	08001955 	.word	0x08001955
 8001670:	080018f3 	.word	0x080018f3
		// Connect XBT pins
    case '0':
        //engage calibration resistor
    	printf("unground_xbt(), calibration_resistor(), calibrate_on()\r\n");
 8001674:	4877      	ldr	r0, [pc, #476]	@ (8001854 <menu_main_process_input+0x340>)
 8001676:	f008 f87f 	bl	8009778 <puts>
        unground_xbt();
 800167a:	f001 fbdd 	bl	8002e38 <unground_xbt>
        calibration_resistor();
 800167e:	f001 fbf3 	bl	8002e68 <calibration_resistor>
        calibrate_on();
 8001682:	f001 fc09 	bl	8002e98 <calibrate_on>
        break;
 8001686:	e169      	b.n	800195c <menu_main_process_input+0x448>
    case '1':
    	printf("connect_xbt_pin(1)\r\n");
 8001688:	4873      	ldr	r0, [pc, #460]	@ (8001858 <menu_main_process_input+0x344>)
 800168a:	f008 f875 	bl	8009778 <puts>
        connect_xbt_pin(1);
 800168e:	2001      	movs	r0, #1
 8001690:	f001 fc46 	bl	8002f20 <connect_xbt_pin>
        break;
 8001694:	e162      	b.n	800195c <menu_main_process_input+0x448>
    case '2':
        connect_xbt_pin(2);
 8001696:	2002      	movs	r0, #2
 8001698:	f001 fc42 	bl	8002f20 <connect_xbt_pin>
        printf("connect_xbt_pin(2)\r\n");
 800169c:	486f      	ldr	r0, [pc, #444]	@ (800185c <menu_main_process_input+0x348>)
 800169e:	f008 f86b 	bl	8009778 <puts>
        break;
 80016a2:	e15b      	b.n	800195c <menu_main_process_input+0x448>
    case '3':
        connect_xbt_pin(3);
 80016a4:	2003      	movs	r0, #3
 80016a6:	f001 fc3b 	bl	8002f20 <connect_xbt_pin>
        printf("connect_xbt_pin(3)\r\n");
 80016aa:	486d      	ldr	r0, [pc, #436]	@ (8001860 <menu_main_process_input+0x34c>)
 80016ac:	f008 f864 	bl	8009778 <puts>
        break;
 80016b0:	e154      	b.n	800195c <menu_main_process_input+0x448>
    case '4':
        connect_xbt_pin(4);
 80016b2:	2004      	movs	r0, #4
 80016b4:	f001 fc34 	bl	8002f20 <connect_xbt_pin>
        printf("connect_xbt_pin(4)\r\n");
 80016b8:	486a      	ldr	r0, [pc, #424]	@ (8001864 <menu_main_process_input+0x350>)
 80016ba:	f008 f85d 	bl	8009778 <puts>
        break;
 80016be:	e14d      	b.n	800195c <menu_main_process_input+0x448>
    case '5':
        connect_xbt_pin(5);
 80016c0:	2005      	movs	r0, #5
 80016c2:	f001 fc2d 	bl	8002f20 <connect_xbt_pin>
        printf("connect_xbt_pin(5)\r\n");
 80016c6:	4868      	ldr	r0, [pc, #416]	@ (8001868 <menu_main_process_input+0x354>)
 80016c8:	f008 f856 	bl	8009778 <puts>
        break;
 80016cc:	e146      	b.n	800195c <menu_main_process_input+0x448>
    case '6':
        connect_xbt_pin(6);
 80016ce:	2006      	movs	r0, #6
 80016d0:	f001 fc26 	bl	8002f20 <connect_xbt_pin>
        printf("connect_xbt_pin(6)\r\n");
 80016d4:	4865      	ldr	r0, [pc, #404]	@ (800186c <menu_main_process_input+0x358>)
 80016d6:	f008 f84f 	bl	8009778 <puts>
        break;
 80016da:	e13f      	b.n	800195c <menu_main_process_input+0x448>
    case '7':
        if (launcher.tubeCount == '8'){
 80016dc:	4b64      	ldr	r3, [pc, #400]	@ (8001870 <menu_main_process_input+0x35c>)
 80016de:	785b      	ldrb	r3, [r3, #1]
 80016e0:	2b38      	cmp	r3, #56	@ 0x38
 80016e2:	d106      	bne.n	80016f2 <menu_main_process_input+0x1de>
            connect_xbt_pin(7);
 80016e4:	2007      	movs	r0, #7
 80016e6:	f001 fc1b 	bl	8002f20 <connect_xbt_pin>
            printf("connect_xbt_pin(7)\r\n");
 80016ea:	4862      	ldr	r0, [pc, #392]	@ (8001874 <menu_main_process_input+0x360>)
 80016ec:	f008 f844 	bl	8009778 <puts>
        } else {
        	printf("\r\n* ERROR: tube 7 not available *\r\n");
        }
        break;
 80016f0:	e134      	b.n	800195c <menu_main_process_input+0x448>
        	printf("\r\n* ERROR: tube 7 not available *\r\n");
 80016f2:	4861      	ldr	r0, [pc, #388]	@ (8001878 <menu_main_process_input+0x364>)
 80016f4:	f008 f840 	bl	8009778 <puts>
        break;
 80016f8:	e130      	b.n	800195c <menu_main_process_input+0x448>
    case '8':
        if (launcher.tubeCount == '8'){
 80016fa:	4b5d      	ldr	r3, [pc, #372]	@ (8001870 <menu_main_process_input+0x35c>)
 80016fc:	785b      	ldrb	r3, [r3, #1]
 80016fe:	2b38      	cmp	r3, #56	@ 0x38
 8001700:	d106      	bne.n	8001710 <menu_main_process_input+0x1fc>
        	connect_xbt_pin(8);
 8001702:	2008      	movs	r0, #8
 8001704:	f001 fc0c 	bl	8002f20 <connect_xbt_pin>
        	printf("connect_xbt_pin(8)\r\n");
 8001708:	485c      	ldr	r0, [pc, #368]	@ (800187c <menu_main_process_input+0x368>)
 800170a:	f008 f835 	bl	8009778 <puts>
        } else {
        	printf("\r\n* ERROR: tube 8 not available *\r\n");
        }
        break;
 800170e:	e125      	b.n	800195c <menu_main_process_input+0x448>
        	printf("\r\n* ERROR: tube 8 not available *\r\n");
 8001710:	485b      	ldr	r0, [pc, #364]	@ (8001880 <menu_main_process_input+0x36c>)
 8001712:	f008 f831 	bl	8009778 <puts>
        break;
 8001716:	e121      	b.n	800195c <menu_main_process_input+0x448>
        //EXTEND PINS
    case 'U':
    	printf("extend_pin(1)\r\n");
 8001718:	485a      	ldr	r0, [pc, #360]	@ (8001884 <menu_main_process_input+0x370>)
 800171a:	f008 f82d 	bl	8009778 <puts>
    	extend_pin(1);
 800171e:	2001      	movs	r0, #1
 8001720:	f001 fda8 	bl	8003274 <extend_pin>
        break;
 8001724:	e11a      	b.n	800195c <menu_main_process_input+0x448>
    case 'V':
        printf("extend_pin(2)\r\n");
 8001726:	4858      	ldr	r0, [pc, #352]	@ (8001888 <menu_main_process_input+0x374>)
 8001728:	f008 f826 	bl	8009778 <puts>
        extend_pin(2);
 800172c:	2002      	movs	r0, #2
 800172e:	f001 fda1 	bl	8003274 <extend_pin>
        break;
 8001732:	e113      	b.n	800195c <menu_main_process_input+0x448>
    case 'W':
        printf("extend_pin(3)\r\n");
 8001734:	4855      	ldr	r0, [pc, #340]	@ (800188c <menu_main_process_input+0x378>)
 8001736:	f008 f81f 	bl	8009778 <puts>
        extend_pin(3);
 800173a:	2003      	movs	r0, #3
 800173c:	f001 fd9a 	bl	8003274 <extend_pin>
        break;
 8001740:	e10c      	b.n	800195c <menu_main_process_input+0x448>
    case 'X':
        printf("extend_pin(4)\r\n");
 8001742:	4853      	ldr	r0, [pc, #332]	@ (8001890 <menu_main_process_input+0x37c>)
 8001744:	f008 f818 	bl	8009778 <puts>
        extend_pin(4);
 8001748:	2004      	movs	r0, #4
 800174a:	f001 fd93 	bl	8003274 <extend_pin>
        break;
 800174e:	e105      	b.n	800195c <menu_main_process_input+0x448>
    case 'Y':
        printf("extend_pin(5)\r\n");
 8001750:	4850      	ldr	r0, [pc, #320]	@ (8001894 <menu_main_process_input+0x380>)
 8001752:	f008 f811 	bl	8009778 <puts>
        extend_pin(5);
 8001756:	2005      	movs	r0, #5
 8001758:	f001 fd8c 	bl	8003274 <extend_pin>
        break;
 800175c:	e0fe      	b.n	800195c <menu_main_process_input+0x448>
    case 'Z':
        printf("extend_pin(6)\r\n");
 800175e:	484e      	ldr	r0, [pc, #312]	@ (8001898 <menu_main_process_input+0x384>)
 8001760:	f008 f80a 	bl	8009778 <puts>
        extend_pin(6);
 8001764:	2006      	movs	r0, #6
 8001766:	f001 fd85 	bl	8003274 <extend_pin>
        break;
 800176a:	e0f7      	b.n	800195c <menu_main_process_input+0x448>
    case 'S':
        if (launcher.tubeCount == '8'){
 800176c:	4b40      	ldr	r3, [pc, #256]	@ (8001870 <menu_main_process_input+0x35c>)
 800176e:	785b      	ldrb	r3, [r3, #1]
 8001770:	2b38      	cmp	r3, #56	@ 0x38
 8001772:	d106      	bne.n	8001782 <menu_main_process_input+0x26e>
        	printf("extend_pin(7)\r\n");
 8001774:	4849      	ldr	r0, [pc, #292]	@ (800189c <menu_main_process_input+0x388>)
 8001776:	f007 ffff 	bl	8009778 <puts>
        	extend_pin(7);
 800177a:	2007      	movs	r0, #7
 800177c:	f001 fd7a 	bl	8003274 <extend_pin>
        } else {
        	printf("\r\n* ERROR: tube 7 not available *\r\n");
        }
        break;
 8001780:	e0ec      	b.n	800195c <menu_main_process_input+0x448>
        	printf("\r\n* ERROR: tube 7 not available *\r\n");
 8001782:	483d      	ldr	r0, [pc, #244]	@ (8001878 <menu_main_process_input+0x364>)
 8001784:	f007 fff8 	bl	8009778 <puts>
        break;
 8001788:	e0e8      	b.n	800195c <menu_main_process_input+0x448>
    case 'T':
        if (launcher.tubeCount == '8'){
 800178a:	4b39      	ldr	r3, [pc, #228]	@ (8001870 <menu_main_process_input+0x35c>)
 800178c:	785b      	ldrb	r3, [r3, #1]
 800178e:	2b38      	cmp	r3, #56	@ 0x38
 8001790:	d106      	bne.n	80017a0 <menu_main_process_input+0x28c>
        	printf("extend_pin(8)\r\n");
 8001792:	4843      	ldr	r0, [pc, #268]	@ (80018a0 <menu_main_process_input+0x38c>)
 8001794:	f007 fff0 	bl	8009778 <puts>
        	extend_pin(8);
 8001798:	2008      	movs	r0, #8
 800179a:	f001 fd6b 	bl	8003274 <extend_pin>
        } else {
        	printf("\r\n* ERROR: tube 8 not available *\r\n");
        }
        break;
 800179e:	e0dd      	b.n	800195c <menu_main_process_input+0x448>
        	printf("\r\n* ERROR: tube 8 not available *\r\n");
 80017a0:	4837      	ldr	r0, [pc, #220]	@ (8001880 <menu_main_process_input+0x36c>)
 80017a2:	f007 ffe9 	bl	8009778 <puts>
        break;
 80017a6:	e0d9      	b.n	800195c <menu_main_process_input+0x448>
        //RETRACT PINS
    case 'A':
    	printf("retract_pin(1)\r\n");
 80017a8:	483e      	ldr	r0, [pc, #248]	@ (80018a4 <menu_main_process_input+0x390>)
 80017aa:	f007 ffe5 	bl	8009778 <puts>
    	retract_pin(1);
 80017ae:	2001      	movs	r0, #1
 80017b0:	f001 fd7a 	bl	80032a8 <retract_pin>
        break;
 80017b4:	e0d2      	b.n	800195c <menu_main_process_input+0x448>
    case 'B':
        printf("retract_pin(2)\r\n");
 80017b6:	483c      	ldr	r0, [pc, #240]	@ (80018a8 <menu_main_process_input+0x394>)
 80017b8:	f007 ffde 	bl	8009778 <puts>
        retract_pin(2);
 80017bc:	2002      	movs	r0, #2
 80017be:	f001 fd73 	bl	80032a8 <retract_pin>
        break;
 80017c2:	e0cb      	b.n	800195c <menu_main_process_input+0x448>
    case 'C':
        printf("retract_pin(3)\r\n");
 80017c4:	4839      	ldr	r0, [pc, #228]	@ (80018ac <menu_main_process_input+0x398>)
 80017c6:	f007 ffd7 	bl	8009778 <puts>
        retract_pin(3);
 80017ca:	2003      	movs	r0, #3
 80017cc:	f001 fd6c 	bl	80032a8 <retract_pin>
        break;
 80017d0:	e0c4      	b.n	800195c <menu_main_process_input+0x448>
    case 'D':
        printf("retract_pin(4)\r\n");
 80017d2:	4837      	ldr	r0, [pc, #220]	@ (80018b0 <menu_main_process_input+0x39c>)
 80017d4:	f007 ffd0 	bl	8009778 <puts>
        retract_pin(4);
 80017d8:	2004      	movs	r0, #4
 80017da:	f001 fd65 	bl	80032a8 <retract_pin>
        break;
 80017de:	e0bd      	b.n	800195c <menu_main_process_input+0x448>
    case 'E':
        printf("retract_pin(5)\r\n");
 80017e0:	4834      	ldr	r0, [pc, #208]	@ (80018b4 <menu_main_process_input+0x3a0>)
 80017e2:	f007 ffc9 	bl	8009778 <puts>
        retract_pin(5);
 80017e6:	2005      	movs	r0, #5
 80017e8:	f001 fd5e 	bl	80032a8 <retract_pin>
        break;
 80017ec:	e0b6      	b.n	800195c <menu_main_process_input+0x448>
    case 'F':
        printf("retract_pin(6)\r\n");
 80017ee:	4832      	ldr	r0, [pc, #200]	@ (80018b8 <menu_main_process_input+0x3a4>)
 80017f0:	f007 ffc2 	bl	8009778 <puts>
        retract_pin(6);
 80017f4:	2006      	movs	r0, #6
 80017f6:	f001 fd57 	bl	80032a8 <retract_pin>
        break;
 80017fa:	e0af      	b.n	800195c <menu_main_process_input+0x448>
    case 'H':
        if (launcher.tubeCount == '8'){
 80017fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001870 <menu_main_process_input+0x35c>)
 80017fe:	785b      	ldrb	r3, [r3, #1]
 8001800:	2b38      	cmp	r3, #56	@ 0x38
 8001802:	d106      	bne.n	8001812 <menu_main_process_input+0x2fe>
        	printf("retract_pin(7)\r\n");
 8001804:	482d      	ldr	r0, [pc, #180]	@ (80018bc <menu_main_process_input+0x3a8>)
 8001806:	f007 ffb7 	bl	8009778 <puts>
        	retract_pin(7);
 800180a:	2007      	movs	r0, #7
 800180c:	f001 fd4c 	bl	80032a8 <retract_pin>
        } else {
        	printf("* ERROR: tube 7 not available *\r\n");
        }
        break;
 8001810:	e0a4      	b.n	800195c <menu_main_process_input+0x448>
        	printf("* ERROR: tube 7 not available *\r\n");
 8001812:	482b      	ldr	r0, [pc, #172]	@ (80018c0 <menu_main_process_input+0x3ac>)
 8001814:	f007 ffb0 	bl	8009778 <puts>
        break;
 8001818:	e0a0      	b.n	800195c <menu_main_process_input+0x448>
    case 'I':
        if (launcher.tubeCount == '8'){
 800181a:	4b15      	ldr	r3, [pc, #84]	@ (8001870 <menu_main_process_input+0x35c>)
 800181c:	785b      	ldrb	r3, [r3, #1]
 800181e:	2b38      	cmp	r3, #56	@ 0x38
 8001820:	d106      	bne.n	8001830 <menu_main_process_input+0x31c>
        	printf("retract_pin(8)\r\n");
 8001822:	4828      	ldr	r0, [pc, #160]	@ (80018c4 <menu_main_process_input+0x3b0>)
 8001824:	f007 ffa8 	bl	8009778 <puts>
        	retract_pin(8);
 8001828:	2008      	movs	r0, #8
 800182a:	f001 fd3d 	bl	80032a8 <retract_pin>
        } else {
        	printf("* ERROR: tube 8 not available *\r\n");
        }
        break;
 800182e:	e095      	b.n	800195c <menu_main_process_input+0x448>
        	printf("* ERROR: tube 8 not available *\r\n");
 8001830:	4825      	ldr	r0, [pc, #148]	@ (80018c8 <menu_main_process_input+0x3b4>)
 8001832:	f007 ffa1 	bl	8009778 <puts>
        break;
 8001836:	e091      	b.n	800195c <menu_main_process_input+0x448>
    case 'K':
    	printf("calibrate_on()\r\n");
 8001838:	4824      	ldr	r0, [pc, #144]	@ (80018cc <menu_main_process_input+0x3b8>)
 800183a:	f007 ff9d 	bl	8009778 <puts>
        calibrate_on();
 800183e:	f001 fb2b 	bl	8002e98 <calibrate_on>
        break;
 8001842:	e08b      	b.n	800195c <menu_main_process_input+0x448>
    case 'R':
    	printf("reset_relay(), ground XBT\r\n");
 8001844:	4822      	ldr	r0, [pc, #136]	@ (80018d0 <menu_main_process_input+0x3bc>)
 8001846:	f007 ff97 	bl	8009778 <puts>
        reset_relay();
 800184a:	f001 fb3d 	bl	8002ec8 <reset_relay>
        break;
 800184e:	e085      	b.n	800195c <menu_main_process_input+0x448>
 8001850:	0800adb0 	.word	0x0800adb0
 8001854:	0800add0 	.word	0x0800add0
 8001858:	0800ae08 	.word	0x0800ae08
 800185c:	0800ae1c 	.word	0x0800ae1c
 8001860:	0800ae30 	.word	0x0800ae30
 8001864:	0800ae44 	.word	0x0800ae44
 8001868:	0800ae58 	.word	0x0800ae58
 800186c:	0800ae6c 	.word	0x0800ae6c
 8001870:	20000000 	.word	0x20000000
 8001874:	0800ae80 	.word	0x0800ae80
 8001878:	0800ae94 	.word	0x0800ae94
 800187c:	0800aeb8 	.word	0x0800aeb8
 8001880:	0800aecc 	.word	0x0800aecc
 8001884:	0800aef0 	.word	0x0800aef0
 8001888:	0800af00 	.word	0x0800af00
 800188c:	0800af10 	.word	0x0800af10
 8001890:	0800af20 	.word	0x0800af20
 8001894:	0800af30 	.word	0x0800af30
 8001898:	0800af40 	.word	0x0800af40
 800189c:	0800af50 	.word	0x0800af50
 80018a0:	0800af60 	.word	0x0800af60
 80018a4:	0800af70 	.word	0x0800af70
 80018a8:	0800af80 	.word	0x0800af80
 80018ac:	0800af90 	.word	0x0800af90
 80018b0:	0800afa0 	.word	0x0800afa0
 80018b4:	0800afb0 	.word	0x0800afb0
 80018b8:	0800afc0 	.word	0x0800afc0
 80018bc:	0800afd0 	.word	0x0800afd0
 80018c0:	0800afe0 	.word	0x0800afe0
 80018c4:	0800b004 	.word	0x0800b004
 80018c8:	0800b014 	.word	0x0800b014
 80018cc:	0800b038 	.word	0x0800b038
 80018d0:	0800b048 	.word	0x0800b048
    case 'L':
    	printf("calibration_resistor()\r\n");
 80018d4:	4825      	ldr	r0, [pc, #148]	@ (800196c <menu_main_process_input+0x458>)
 80018d6:	f007 ff4f 	bl	8009778 <puts>
        calibration_resistor();
 80018da:	f001 fac5 	bl	8002e68 <calibration_resistor>
        break;
 80018de:	e03d      	b.n	800195c <menu_main_process_input+0x448>
    case 'G':
    	printf("unground_xbt()\r\n");
 80018e0:	4823      	ldr	r0, [pc, #140]	@ (8001970 <menu_main_process_input+0x45c>)
 80018e2:	f007 ff49 	bl	8009778 <puts>
        unground_xbt();
 80018e6:	f001 faa7 	bl	8002e38 <unground_xbt>
        break;
 80018ea:	e037      	b.n	800195c <menu_main_process_input+0x448>
    case 'M':
        menu_main_print();
 80018ec:	f7ff fd76 	bl	80013dc <menu_main_print>
        break;
 80018f0:	e034      	b.n	800195c <menu_main_process_input+0x448>
    case '~':
    	printf("menu_config_print()\r\n");
 80018f2:	4820      	ldr	r0, [pc, #128]	@ (8001974 <menu_main_process_input+0x460>)
 80018f4:	f007 ff40 	bl	8009778 <puts>
        menu_config_print();
 80018f8:	f000 f888 	bl	8001a0c <menu_config_print>
        activeMenu = configMenu; // set configuration menu flag
 80018fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001978 <menu_main_process_input+0x464>)
 80018fe:	2201      	movs	r2, #1
 8001900:	701a      	strb	r2, [r3, #0]
        break;
 8001902:	e02b      	b.n	800195c <menu_main_process_input+0x448>
    case 's':
    	printf("print_serial_number()\r\n");
 8001904:	481d      	ldr	r0, [pc, #116]	@ (800197c <menu_main_process_input+0x468>)
 8001906:	f007 ff37 	bl	8009778 <puts>
    	printf("AL Serial Number: ");
 800190a:	481d      	ldr	r0, [pc, #116]	@ (8001980 <menu_main_process_input+0x46c>)
 800190c:	f007 fecc 	bl	80096a8 <iprintf>
        print_serial_number();
 8001910:	f001 f974 	bl	8002bfc <print_serial_number>
        printf("\r\n");
 8001914:	481b      	ldr	r0, [pc, #108]	@ (8001984 <menu_main_process_input+0x470>)
 8001916:	f007 ff2f 	bl	8009778 <puts>
        break;
 800191a:	e01f      	b.n	800195c <menu_main_process_input+0x448>
    case 'P':
    	printf("menu_print_volt_temp()\r\n");
 800191c:	481a      	ldr	r0, [pc, #104]	@ (8001988 <menu_main_process_input+0x474>)
 800191e:	f007 ff2b 	bl	8009778 <puts>
    	// read input voltage and internal temp on autolauncher
    	menu_print_volt_temp();
 8001922:	f000 f83f 	bl	80019a4 <menu_print_volt_temp>
    	break;
 8001926:	e019      	b.n	800195c <menu_main_process_input+0x448>
    case 'N':
    	printf("multiplexer_set(MUX_GPS)\r\n");
 8001928:	4818      	ldr	r0, [pc, #96]	@ (800198c <menu_main_process_input+0x478>)
 800192a:	f007 ff25 	bl	8009778 <puts>
    	printf("\r\n** Data TX from local GPS --> press 'O' to set Tx to STM32 **\r\n\r\n");
 800192e:	4818      	ldr	r0, [pc, #96]	@ (8001990 <menu_main_process_input+0x47c>)
 8001930:	f007 ff22 	bl	8009778 <puts>
    	multiplexer_set(MUX_GPS);
 8001934:	2000      	movs	r0, #0
 8001936:	f001 f9c3 	bl	8002cc0 <multiplexer_set>
    	break;
 800193a:	e00f      	b.n	800195c <menu_main_process_input+0x448>
    case 'O':
    	printf("multiplexer_set(MUX_STM32)\r\n");
 800193c:	4815      	ldr	r0, [pc, #84]	@ (8001994 <menu_main_process_input+0x480>)
 800193e:	f007 ff1b 	bl	8009778 <puts>
    	printf("\r\n** Data TX from STM32 **\r\n");
 8001942:	4815      	ldr	r0, [pc, #84]	@ (8001998 <menu_main_process_input+0x484>)
 8001944:	f007 ff18 	bl	8009778 <puts>
    	multiplexer_set(MUX_STM32);
 8001948:	2001      	movs	r0, #1
 800194a:	f001 f9b9 	bl	8002cc0 <multiplexer_set>
    	menu_main_print();
 800194e:	f7ff fd45 	bl	80013dc <menu_main_print>
    	break;
 8001952:	e003      	b.n	800195c <menu_main_process_input+0x448>
    default:
        printf("\r\n** Unrecognized command!!** \r\n");
 8001954:	4811      	ldr	r0, [pc, #68]	@ (800199c <menu_main_process_input+0x488>)
 8001956:	f007 ff0f 	bl	8009778 <puts>
        break;
 800195a:	bf00      	nop
	}
	printf("\r\n> ");
 800195c:	4810      	ldr	r0, [pc, #64]	@ (80019a0 <menu_main_process_input+0x48c>)
 800195e:	f007 fea3 	bl	80096a8 <iprintf>
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	0800b064 	.word	0x0800b064
 8001970:	0800b07c 	.word	0x0800b07c
 8001974:	0800b08c 	.word	0x0800b08c
 8001978:	20000187 	.word	0x20000187
 800197c:	0800b0a4 	.word	0x0800b0a4
 8001980:	0800b0bc 	.word	0x0800b0bc
 8001984:	0800adac 	.word	0x0800adac
 8001988:	0800b0d0 	.word	0x0800b0d0
 800198c:	0800b0e8 	.word	0x0800b0e8
 8001990:	0800b104 	.word	0x0800b104
 8001994:	0800b148 	.word	0x0800b148
 8001998:	0800b164 	.word	0x0800b164
 800199c:	0800b180 	.word	0x0800b180
 80019a0:	0800a990 	.word	0x0800a990

080019a4 <menu_print_volt_temp>:

/* Prints Input voltage and STM32 chip internal temperature */
void menu_print_volt_temp(void){
 80019a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80019a8:	b08b      	sub	sp, #44	@ 0x2c
 80019aa:	af04      	add	r7, sp, #16
	adcScan_t adcReading = adc_get_values();
 80019ac:	463b      	mov	r3, r7
 80019ae:	4618      	mov	r0, r3
 80019b0:	f001 feae 	bl	8003710 <adc_get_values>
	printf("\r\n> Voltage [AD# %i]: %i.%i V | STM32 Temperature [AD# %i]: %i.%i C\r\n",
				 (int)adcReading.voltage.rawValue, (int)adcReading.voltage.realValue, get_decimal(adcReading.voltage.realValue, 1),
 80019b4:	883b      	ldrh	r3, [r7, #0]
	printf("\r\n> Voltage [AD# %i]: %i.%i V | STM32 Temperature [AD# %i]: %i.%i C\r\n",
 80019b6:	4698      	mov	r8, r3
				 (int)adcReading.voltage.rawValue, (int)adcReading.voltage.realValue, get_decimal(adcReading.voltage.realValue, 1),
 80019b8:	687b      	ldr	r3, [r7, #4]
	printf("\r\n> Voltage [AD# %i]: %i.%i V | STM32 Temperature [AD# %i]: %i.%i C\r\n",
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff fa3e 	bl	8000e3c <__aeabi_f2iz>
 80019c0:	4605      	mov	r5, r0
				 (int)adcReading.voltage.rawValue, (int)adcReading.voltage.realValue, get_decimal(adcReading.voltage.realValue, 1),
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2101      	movs	r1, #1
 80019c6:	4618      	mov	r0, r3
 80019c8:	f001 f940 	bl	8002c4c <get_decimal>
 80019cc:	4603      	mov	r3, r0
	printf("\r\n> Voltage [AD# %i]: %i.%i V | STM32 Temperature [AD# %i]: %i.%i C\r\n",
 80019ce:	4699      	mov	r9, r3
				 (int)adcReading.temperature.rawValue, (int)adcReading.temperature.realValue, get_decimal(adcReading.temperature.realValue, 1));
 80019d0:	8a3b      	ldrh	r3, [r7, #16]
	printf("\r\n> Voltage [AD# %i]: %i.%i V | STM32 Temperature [AD# %i]: %i.%i C\r\n",
 80019d2:	461e      	mov	r6, r3
				 (int)adcReading.temperature.rawValue, (int)adcReading.temperature.realValue, get_decimal(adcReading.temperature.realValue, 1));
 80019d4:	697b      	ldr	r3, [r7, #20]
	printf("\r\n> Voltage [AD# %i]: %i.%i V | STM32 Temperature [AD# %i]: %i.%i C\r\n",
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff fa30 	bl	8000e3c <__aeabi_f2iz>
 80019dc:	4604      	mov	r4, r0
				 (int)adcReading.temperature.rawValue, (int)adcReading.temperature.realValue, get_decimal(adcReading.temperature.realValue, 1));
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	2101      	movs	r1, #1
 80019e2:	4618      	mov	r0, r3
 80019e4:	f001 f932 	bl	8002c4c <get_decimal>
 80019e8:	4603      	mov	r3, r0
	printf("\r\n> Voltage [AD# %i]: %i.%i V | STM32 Temperature [AD# %i]: %i.%i C\r\n",
 80019ea:	9302      	str	r3, [sp, #8]
 80019ec:	9401      	str	r4, [sp, #4]
 80019ee:	9600      	str	r6, [sp, #0]
 80019f0:	464b      	mov	r3, r9
 80019f2:	462a      	mov	r2, r5
 80019f4:	4641      	mov	r1, r8
 80019f6:	4804      	ldr	r0, [pc, #16]	@ (8001a08 <menu_print_volt_temp+0x64>)
 80019f8:	f007 fe56 	bl	80096a8 <iprintf>
}
 80019fc:	bf00      	nop
 80019fe:	371c      	adds	r7, #28
 8001a00:	46bd      	mov	sp, r7
 8001a02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001a06:	bf00      	nop
 8001a08:	0800b1a0 	.word	0x0800b1a0

08001a0c <menu_config_print>:


/* Print secret configuration menu options
 * Access this menu with '~' */
void menu_config_print(void) {
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
    printf("\n\r");
 8001a10:	4828      	ldr	r0, [pc, #160]	@ (8001ab4 <menu_config_print+0xa8>)
 8001a12:	f007 fe49 	bl	80096a8 <iprintf>
    printf("=========================================\n\r");
 8001a16:	4828      	ldr	r0, [pc, #160]	@ (8001ab8 <menu_config_print+0xac>)
 8001a18:	f007 fe46 	bl	80096a8 <iprintf>
    printf("| AOML Autolauncher configuration menu	|\n\r");
 8001a1c:	4827      	ldr	r0, [pc, #156]	@ (8001abc <menu_config_print+0xb0>)
 8001a1e:	f007 fe43 	bl	80096a8 <iprintf>
    printf("=========================================\n\r");
 8001a22:	4825      	ldr	r0, [pc, #148]	@ (8001ab8 <menu_config_print+0xac>)
 8001a24:	f007 fe40 	bl	80096a8 <iprintf>
    printf("|    Model #ALV3.0      S/N ");
 8001a28:	4825      	ldr	r0, [pc, #148]	@ (8001ac0 <menu_config_print+0xb4>)
 8001a2a:	f007 fe3d 	bl	80096a8 <iprintf>
    print_serial_number();
 8001a2e:	f001 f8e5 	bl	8002bfc <print_serial_number>
    printf("       |\n\r");
 8001a32:	4824      	ldr	r0, [pc, #144]	@ (8001ac4 <menu_config_print+0xb8>)
 8001a34:	f007 fe38 	bl	80096a8 <iprintf>
    printf("|=======================================|\n\r");
 8001a38:	4823      	ldr	r0, [pc, #140]	@ (8001ac8 <menu_config_print+0xbc>)
 8001a3a:	f007 fe35 	bl	80096a8 <iprintf>
    printf("|               COMMANDS                |\n\r");
 8001a3e:	4823      	ldr	r0, [pc, #140]	@ (8001acc <menu_config_print+0xc0>)
 8001a40:	f007 fe32 	bl	80096a8 <iprintf>
    printf("|=======================================|\n\r");
 8001a44:	4820      	ldr	r0, [pc, #128]	@ (8001ac8 <menu_config_print+0xbc>)
 8001a46:	f007 fe2f 	bl	80096a8 <iprintf>
    printf("| <M> This Menu                         |\n\r");
 8001a4a:	4821      	ldr	r0, [pc, #132]	@ (8001ad0 <menu_config_print+0xc4>)
 8001a4c:	f007 fe2c 	bl	80096a8 <iprintf>
    printf("| <A> Set AL tubes, type & S/N          |\n\r");
 8001a50:	4820      	ldr	r0, [pc, #128]	@ (8001ad4 <menu_config_print+0xc8>)
 8001a52:	f007 fe29 	bl	80096a8 <iprintf>
    printf("| <S> Extend all pins                   |\n\r");
 8001a56:	4820      	ldr	r0, [pc, #128]	@ (8001ad8 <menu_config_print+0xcc>)
 8001a58:	f007 fe26 	bl	80096a8 <iprintf>
    printf("| <D> Retract all pins                  |\n\r");
 8001a5c:	481f      	ldr	r0, [pc, #124]	@ (8001adc <menu_config_print+0xd0>)
 8001a5e:	f007 fe23 	bl	80096a8 <iprintf>
    printf("| <F> Grease pins mode                  |\n\r");
 8001a62:	481f      	ldr	r0, [pc, #124]	@ (8001ae0 <menu_config_print+0xd4>)
 8001a64:	f007 fe20 	bl	80096a8 <iprintf>
    printf("| <G> Clear memory range                |\n\r");
 8001a68:	481e      	ldr	r0, [pc, #120]	@ (8001ae4 <menu_config_print+0xd8>)
 8001a6a:	f007 fe1d 	bl	80096a8 <iprintf>
    printf("| <H> Read motor statistics             |\n\r");
 8001a6e:	481e      	ldr	r0, [pc, #120]	@ (8001ae8 <menu_config_print+0xdc>)
 8001a70:	f007 fe1a 	bl	80096a8 <iprintf>
    printf("| <J> Set motor runtime                 |\n\r");
 8001a74:	481d      	ldr	r0, [pc, #116]	@ (8001aec <menu_config_print+0xe0>)
 8001a76:	f007 fe17 	bl	80096a8 <iprintf>
    printf("| <K> Set ADC sampling period           |\n\r");
 8001a7a:	481d      	ldr	r0, [pc, #116]	@ (8001af0 <menu_config_print+0xe4>)
 8001a7c:	f007 fe14 	bl	80096a8 <iprintf>
    printf("| <L> Set motor wiring mode             |\n\r");
 8001a80:	481c      	ldr	r0, [pc, #112]	@ (8001af4 <menu_config_print+0xe8>)
 8001a82:	f007 fe11 	bl	80096a8 <iprintf>
    printf("| <W> Set motor PWM frequency           |\n\r");
 8001a86:	481c      	ldr	r0, [pc, #112]	@ (8001af8 <menu_config_print+0xec>)
 8001a88:	f007 fe0e 	bl	80096a8 <iprintf>
    printf("| <E> Reset motor statistics            |\n\r");
 8001a8c:	481b      	ldr	r0, [pc, #108]	@ (8001afc <menu_config_print+0xf0>)
 8001a8e:	f007 fe0b 	bl	80096a8 <iprintf>
    printf("| <R> Read motor configuration          |\n\r");
 8001a92:	481b      	ldr	r0, [pc, #108]	@ (8001b00 <menu_config_print+0xf4>)
 8001a94:	f007 fe08 	bl	80096a8 <iprintf>
    printf("| <Z> Help                              |\n\r");
 8001a98:	481a      	ldr	r0, [pc, #104]	@ (8001b04 <menu_config_print+0xf8>)
 8001a9a:	f007 fe05 	bl	80096a8 <iprintf>
    printf("| <Q> QUIT to main menu                 |\n\r");
 8001a9e:	481a      	ldr	r0, [pc, #104]	@ (8001b08 <menu_config_print+0xfc>)
 8001aa0:	f007 fe02 	bl	80096a8 <iprintf>
    printf("|=======================================|\n\r");
 8001aa4:	4808      	ldr	r0, [pc, #32]	@ (8001ac8 <menu_config_print+0xbc>)
 8001aa6:	f007 fdff 	bl	80096a8 <iprintf>
    printf("\r\n");
 8001aaa:	4818      	ldr	r0, [pc, #96]	@ (8001b0c <menu_config_print+0x100>)
 8001aac:	f007 fe64 	bl	8009778 <puts>
}//end status_message
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	0800b1e8 	.word	0x0800b1e8
 8001ab8:	0800b1ec 	.word	0x0800b1ec
 8001abc:	0800b218 	.word	0x0800b218
 8001ac0:	0800b244 	.word	0x0800b244
 8001ac4:	0800aa50 	.word	0x0800aa50
 8001ac8:	0800b264 	.word	0x0800b264
 8001acc:	0800b290 	.word	0x0800b290
 8001ad0:	0800b2bc 	.word	0x0800b2bc
 8001ad4:	0800b2e8 	.word	0x0800b2e8
 8001ad8:	0800b314 	.word	0x0800b314
 8001adc:	0800b340 	.word	0x0800b340
 8001ae0:	0800b36c 	.word	0x0800b36c
 8001ae4:	0800b398 	.word	0x0800b398
 8001ae8:	0800b3c4 	.word	0x0800b3c4
 8001aec:	0800b3f0 	.word	0x0800b3f0
 8001af0:	0800b41c 	.word	0x0800b41c
 8001af4:	0800b448 	.word	0x0800b448
 8001af8:	0800b474 	.word	0x0800b474
 8001afc:	0800b4a0 	.word	0x0800b4a0
 8001b00:	0800b4cc 	.word	0x0800b4cc
 8001b04:	0800b4f8 	.word	0x0800b4f8
 8001b08:	0800b524 	.word	0x0800b524
 8001b0c:	0800adac 	.word	0x0800adac

08001b10 <menu_config_process_input>:


/* Process char received while in configuration menu */
void menu_config_process_input(char option){
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	71fb      	strb	r3, [r7, #7]
	printf("\r\n> Executing OPTION (%c) --> ", option);
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4863      	ldr	r0, [pc, #396]	@ (8001cac <menu_config_process_input+0x19c>)
 8001b20:	f007 fdc2 	bl	80096a8 <iprintf>

    switch (option) {
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	3b41      	subs	r3, #65	@ 0x41
 8001b28:	2b19      	cmp	r3, #25
 8001b2a:	f200 80b1 	bhi.w	8001c90 <menu_config_process_input+0x180>
 8001b2e:	a201      	add	r2, pc, #4	@ (adr r2, 8001b34 <menu_config_process_input+0x24>)
 8001b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b34:	08001bbb 	.word	0x08001bbb
 8001b38:	08001c91 	.word	0x08001c91
 8001b3c:	08001c91 	.word	0x08001c91
 8001b40:	08001bef 	.word	0x08001bef
 8001b44:	08001c6f 	.word	0x08001c6f
 8001b48:	08001c13 	.word	0x08001c13
 8001b4c:	08001c27 	.word	0x08001c27
 8001b50:	08001c33 	.word	0x08001c33
 8001b54:	08001c91 	.word	0x08001c91
 8001b58:	08001c3f 	.word	0x08001c3f
 8001b5c:	08001c4b 	.word	0x08001c4b
 8001b60:	08001c57 	.word	0x08001c57
 8001b64:	08001baf 	.word	0x08001baf
 8001b68:	08001c91 	.word	0x08001c91
 8001b6c:	08001c91 	.word	0x08001c91
 8001b70:	08001c91 	.word	0x08001c91
 8001b74:	08001b9d 	.word	0x08001b9d
 8001b78:	08001c7b 	.word	0x08001c7b
 8001b7c:	08001bcb 	.word	0x08001bcb
 8001b80:	08001c91 	.word	0x08001c91
 8001b84:	08001c91 	.word	0x08001c91
 8001b88:	08001c91 	.word	0x08001c91
 8001b8c:	08001c63 	.word	0x08001c63
 8001b90:	08001c91 	.word	0x08001c91
 8001b94:	08001c91 	.word	0x08001c91
 8001b98:	08001c87 	.word	0x08001c87
        case 'Q':
            printf("\n\r> Leaving Auto launcher configuration menu\n\r");
 8001b9c:	4844      	ldr	r0, [pc, #272]	@ (8001cb0 <menu_config_process_input+0x1a0>)
 8001b9e:	f007 fd83 	bl	80096a8 <iprintf>
            activeMenu = mainMenu; // set active menu flag to main menu
 8001ba2:	4b44      	ldr	r3, [pc, #272]	@ (8001cb4 <menu_config_process_input+0x1a4>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	701a      	strb	r2, [r3, #0]
            menu_main_print();
 8001ba8:	f7ff fc18 	bl	80013dc <menu_main_print>
            break;
 8001bac:	e077      	b.n	8001c9e <menu_config_process_input+0x18e>
        case 'M':
        	printf("menu_config_print()\r\n");
 8001bae:	4842      	ldr	r0, [pc, #264]	@ (8001cb8 <menu_config_process_input+0x1a8>)
 8001bb0:	f007 fde2 	bl	8009778 <puts>
            menu_config_print();
 8001bb4:	f7ff ff2a 	bl	8001a0c <menu_config_print>
            break;
 8001bb8:	e071      	b.n	8001c9e <menu_config_process_input+0x18e>
        case 'A':
        	printf("menu_config_tubes_type_serial()\r\n");
 8001bba:	4840      	ldr	r0, [pc, #256]	@ (8001cbc <menu_config_process_input+0x1ac>)
 8001bbc:	f007 fddc 	bl	8009778 <puts>
        	// get the autolauncher tube count
        	menu_config_tubes_type_serial();
 8001bc0:	f000 f89e 	bl	8001d00 <menu_config_tubes_type_serial>
            // print config menu again
            menu_config_print();
 8001bc4:	f7ff ff22 	bl	8001a0c <menu_config_print>
            break;
 8001bc8:	e069      	b.n	8001c9e <menu_config_process_input+0x18e>
        case 'S':
        	printf("extend_all_pins()\r\n");
 8001bca:	483d      	ldr	r0, [pc, #244]	@ (8001cc0 <menu_config_process_input+0x1b0>)
 8001bcc:	f007 fdd4 	bl	8009778 <puts>
        	if(launcher.tubeCount == '6')
 8001bd0:	4b3c      	ldr	r3, [pc, #240]	@ (8001cc4 <menu_config_process_input+0x1b4>)
 8001bd2:	785b      	ldrb	r3, [r3, #1]
 8001bd4:	2b36      	cmp	r3, #54	@ 0x36
 8001bd6:	d102      	bne.n	8001bde <menu_config_process_input+0xce>
        		extend_all_pins(6);
 8001bd8:	2006      	movs	r0, #6
 8001bda:	f001 fa81 	bl	80030e0 <extend_all_pins>
        	if(launcher.tubeCount == '8')
 8001bde:	4b39      	ldr	r3, [pc, #228]	@ (8001cc4 <menu_config_process_input+0x1b4>)
 8001be0:	785b      	ldrb	r3, [r3, #1]
 8001be2:	2b38      	cmp	r3, #56	@ 0x38
 8001be4:	d158      	bne.n	8001c98 <menu_config_process_input+0x188>
        		extend_all_pins(8);
 8001be6:	2008      	movs	r0, #8
 8001be8:	f001 fa7a 	bl	80030e0 <extend_all_pins>
            break;
 8001bec:	e054      	b.n	8001c98 <menu_config_process_input+0x188>
        case 'D':
        	printf("retract_all_pins()\r\n");
 8001bee:	4836      	ldr	r0, [pc, #216]	@ (8001cc8 <menu_config_process_input+0x1b8>)
 8001bf0:	f007 fdc2 	bl	8009778 <puts>
        	if(launcher.tubeCount == '6')
 8001bf4:	4b33      	ldr	r3, [pc, #204]	@ (8001cc4 <menu_config_process_input+0x1b4>)
 8001bf6:	785b      	ldrb	r3, [r3, #1]
 8001bf8:	2b36      	cmp	r3, #54	@ 0x36
 8001bfa:	d102      	bne.n	8001c02 <menu_config_process_input+0xf2>
        		retract_all_pins(6);
 8001bfc:	2006      	movs	r0, #6
 8001bfe:	f001 faa5 	bl	800314c <retract_all_pins>
        	if(launcher.tubeCount == '8')
 8001c02:	4b30      	ldr	r3, [pc, #192]	@ (8001cc4 <menu_config_process_input+0x1b4>)
 8001c04:	785b      	ldrb	r3, [r3, #1]
 8001c06:	2b38      	cmp	r3, #56	@ 0x38
 8001c08:	d148      	bne.n	8001c9c <menu_config_process_input+0x18c>
        		retract_all_pins(8);
 8001c0a:	2008      	movs	r0, #8
 8001c0c:	f001 fa9e 	bl	800314c <retract_all_pins>
            break;
 8001c10:	e044      	b.n	8001c9c <menu_config_process_input+0x18c>
        case 'F':
            printf("\n\rSend the \"@\" symbol repeatedly to exit grease pins mode\r\n");
 8001c12:	482e      	ldr	r0, [pc, #184]	@ (8001ccc <menu_config_process_input+0x1bc>)
 8001c14:	f007 fdb0 	bl	8009778 <puts>
            printf("grease_pins()\r\n");
 8001c18:	482d      	ldr	r0, [pc, #180]	@ (8001cd0 <menu_config_process_input+0x1c0>)
 8001c1a:	f007 fdad 	bl	8009778 <puts>
            grease_pins(MOTOR_GREASE_CYCLES);
 8001c1e:	2004      	movs	r0, #4
 8001c20:	f001 faca 	bl	80031b8 <grease_pins>
            break;
 8001c24:	e03b      	b.n	8001c9e <menu_config_process_input+0x18e>
        case 'G':
        	// clear range of eeprom memory blocks
        	printf("eeprom_clear_memory_range()\r\n");
 8001c26:	482b      	ldr	r0, [pc, #172]	@ (8001cd4 <menu_config_process_input+0x1c4>)
 8001c28:	f007 fda6 	bl	8009778 <puts>
        	eeprom_clear_memory_range();
 8001c2c:	f000 f98a 	bl	8001f44 <eeprom_clear_memory_range>
        	break;
 8001c30:	e035      	b.n	8001c9e <menu_config_process_input+0x18e>
        case 'H':
        	// read motor statistics (imax, count)
        	printf("motor_read_stats()");
 8001c32:	4829      	ldr	r0, [pc, #164]	@ (8001cd8 <menu_config_process_input+0x1c8>)
 8001c34:	f007 fd38 	bl	80096a8 <iprintf>
        	motor_read_stats();
 8001c38:	f000 faca 	bl	80021d0 <motor_read_stats>
        	break;
 8001c3c:	e02f      	b.n	8001c9e <menu_config_process_input+0x18e>
        case 'J':
        	// set motor runtime
        	printf("motor_set_runtime()");
 8001c3e:	4827      	ldr	r0, [pc, #156]	@ (8001cdc <menu_config_process_input+0x1cc>)
 8001c40:	f007 fd32 	bl	80096a8 <iprintf>
        	motor_set_runtime();
 8001c44:	f000 fb66 	bl	8002314 <motor_set_runtime>
    		break;
 8001c48:	e029      	b.n	8001c9e <menu_config_process_input+0x18e>
        case 'K':
        	// set sampling period for ADC when motor is running
        	printf("motor_set_sampling_period()");
 8001c4a:	4825      	ldr	r0, [pc, #148]	@ (8001ce0 <menu_config_process_input+0x1d0>)
 8001c4c:	f007 fd2c 	bl	80096a8 <iprintf>
        	motor_set_sampling_period();
 8001c50:	f000 fc12 	bl	8002478 <motor_set_sampling_period>
        	break;
 8001c54:	e023      	b.n	8001c9e <menu_config_process_input+0x18e>
        case 'L':
        	// set motor wiring type: 0 or 1. Based on value it'll change the direction the motor runs in CW/CCW
        	printf("motor_set_wiring()");
 8001c56:	4823      	ldr	r0, [pc, #140]	@ (8001ce4 <menu_config_process_input+0x1d4>)
 8001c58:	f007 fd26 	bl	80096a8 <iprintf>
        	motor_set_wiring();
 8001c5c:	f000 fe12 	bl	8002884 <motor_set_wiring>
        	break;
 8001c60:	e01d      	b.n	8001c9e <menu_config_process_input+0x18e>
        case 'W':
        	// set the motor step PWM freq for the DRV8826
        	printf("motor_set_pwm_freq()");
 8001c62:	4821      	ldr	r0, [pc, #132]	@ (8001ce8 <menu_config_process_input+0x1d8>)
 8001c64:	f007 fd20 	bl	80096a8 <iprintf>
        	motor_set_pwm_freq();
 8001c68:	f000 fcce 	bl	8002608 <motor_set_pwm_freq>
        	break;
 8001c6c:	e017      	b.n	8001c9e <menu_config_process_input+0x18e>
        case 'E':
        	// reset all motor statistics to 0
        	printf("motor_reset_stats()");
 8001c6e:	481f      	ldr	r0, [pc, #124]	@ (8001cec <menu_config_process_input+0x1dc>)
 8001c70:	f007 fd1a 	bl	80096a8 <iprintf>
        	motor_reset_stats();
 8001c74:	f000 fe7c 	bl	8002970 <motor_reset_stats>
        	break;
 8001c78:	e011      	b.n	8001c9e <menu_config_process_input+0x18e>
        case 'R':
        	// read all motor configuration parameters
        	printf("motor_read_parameters()");
 8001c7a:	481d      	ldr	r0, [pc, #116]	@ (8001cf0 <menu_config_process_input+0x1e0>)
 8001c7c:	f007 fd14 	bl	80096a8 <iprintf>
        	motor_read_parameters();
 8001c80:	f000 fe8e 	bl	80029a0 <motor_read_parameters>
        	break;
 8001c84:	e00b      	b.n	8001c9e <menu_config_process_input+0x18e>
        case 'Z':
        	// print help for config menu
        	printf("menu_help_print()");
 8001c86:	481b      	ldr	r0, [pc, #108]	@ (8001cf4 <menu_config_process_input+0x1e4>)
 8001c88:	f007 fd0e 	bl	80096a8 <iprintf>
        	menu_help_print();
 8001c8c:	f000 ff40 	bl	8002b10 <menu_help_print>
        default:
        	printf("\r\n** Unrecognized command!!** \r\n");
 8001c90:	4819      	ldr	r0, [pc, #100]	@ (8001cf8 <menu_config_process_input+0x1e8>)
 8001c92:	f007 fd71 	bl	8009778 <puts>
            break;
 8001c96:	e002      	b.n	8001c9e <menu_config_process_input+0x18e>
            break;
 8001c98:	bf00      	nop
 8001c9a:	e000      	b.n	8001c9e <menu_config_process_input+0x18e>
            break;
 8001c9c:	bf00      	nop
    }
    printf("\r\n> ");
 8001c9e:	4817      	ldr	r0, [pc, #92]	@ (8001cfc <menu_config_process_input+0x1ec>)
 8001ca0:	f007 fd02 	bl	80096a8 <iprintf>
}
 8001ca4:	bf00      	nop
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	0800adb0 	.word	0x0800adb0
 8001cb0:	0800b550 	.word	0x0800b550
 8001cb4:	20000187 	.word	0x20000187
 8001cb8:	0800b08c 	.word	0x0800b08c
 8001cbc:	0800b580 	.word	0x0800b580
 8001cc0:	0800b5a4 	.word	0x0800b5a4
 8001cc4:	20000000 	.word	0x20000000
 8001cc8:	0800b5b8 	.word	0x0800b5b8
 8001ccc:	0800b5cc 	.word	0x0800b5cc
 8001cd0:	0800b608 	.word	0x0800b608
 8001cd4:	0800b618 	.word	0x0800b618
 8001cd8:	0800b638 	.word	0x0800b638
 8001cdc:	0800b64c 	.word	0x0800b64c
 8001ce0:	0800b660 	.word	0x0800b660
 8001ce4:	0800b67c 	.word	0x0800b67c
 8001ce8:	0800b690 	.word	0x0800b690
 8001cec:	0800b6a8 	.word	0x0800b6a8
 8001cf0:	0800b6bc 	.word	0x0800b6bc
 8001cf4:	0800b6d4 	.word	0x0800b6d4
 8001cf8:	0800b180 	.word	0x0800b180
 8001cfc:	0800a990 	.word	0x0800a990

08001d00 <menu_config_tubes_type_serial>:


/* Configure autloauncher parameters for display
 * Tube count, serial number and type */
void menu_config_tubes_type_serial(void){
 8001d00:	b5b0      	push	{r4, r5, r7, lr}
 8001d02:	b0c2      	sub	sp, #264	@ 0x108
 8001d04:	af02      	add	r7, sp, #8
	printf("Current tube count: %c\r\n", launcher.tubeCount);
 8001d06:	4b7f      	ldr	r3, [pc, #508]	@ (8001f04 <menu_config_tubes_type_serial+0x204>)
 8001d08:	785b      	ldrb	r3, [r3, #1]
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	487e      	ldr	r0, [pc, #504]	@ (8001f08 <menu_config_tubes_type_serial+0x208>)
 8001d0e:	f007 fccb 	bl	80096a8 <iprintf>
	char tubes[1];
	char tubePrompt[] = "\r\nEnter AL tube count [6] or [8]: ";
 8001d12:	4b7e      	ldr	r3, [pc, #504]	@ (8001f0c <menu_config_tubes_type_serial+0x20c>)
 8001d14:	f107 04d8 	add.w	r4, r7, #216	@ 0xd8
 8001d18:	461d      	mov	r5, r3
 8001d1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d22:	682b      	ldr	r3, [r5, #0]
 8001d24:	461a      	mov	r2, r3
 8001d26:	8022      	strh	r2, [r4, #0]
 8001d28:	3402      	adds	r4, #2
 8001d2a:	0c1b      	lsrs	r3, r3, #16
 8001d2c:	7023      	strb	r3, [r4, #0]
	char tubeError[] = "\r\nERROR: Enter 6 or 8 !\r\n";
 8001d2e:	4b78      	ldr	r3, [pc, #480]	@ (8001f10 <menu_config_tubes_type_serial+0x210>)
 8001d30:	f107 04bc 	add.w	r4, r7, #188	@ 0xbc
 8001d34:	461d      	mov	r5, r3
 8001d36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d3a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d3e:	c403      	stmia	r4!, {r0, r1}
 8001d40:	8022      	strh	r2, [r4, #0]
	char tubeCheck[] = {'6','8'};
 8001d42:	f643 0336 	movw	r3, #14390	@ 0x3836
 8001d46:	f8a7 30b8 	strh.w	r3, [r7, #184]	@ 0xb8
	get_user_input(tubePrompt, tubeError, 1, tubeCheck, tubes);
 8001d4a:	f107 02b8 	add.w	r2, r7, #184	@ 0xb8
 8001d4e:	f107 01bc 	add.w	r1, r7, #188	@ 0xbc
 8001d52:	f107 00d8 	add.w	r0, r7, #216	@ 0xd8
 8001d56:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001d5a:	9300      	str	r3, [sp, #0]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f000 fedc 	bl	8002b1c <get_user_input>

    launcher.tubeCount = tubes[0];
 8001d64:	f897 20fc 	ldrb.w	r2, [r7, #252]	@ 0xfc
 8001d68:	4b66      	ldr	r3, [pc, #408]	@ (8001f04 <menu_config_tubes_type_serial+0x204>)
 8001d6a:	705a      	strb	r2, [r3, #1]
    // get the autolauncher type, R regular or X extended, only for 8 tube AL
    if(launcher.tubeCount == '8'){
 8001d6c:	4b65      	ldr	r3, [pc, #404]	@ (8001f04 <menu_config_tubes_type_serial+0x204>)
 8001d6e:	785b      	ldrb	r3, [r3, #1]
 8001d70:	2b38      	cmp	r3, #56	@ 0x38
 8001d72:	d130      	bne.n	8001dd6 <menu_config_tubes_type_serial+0xd6>
    	char type[1];
    	char typePrompt[] = "Enter launcher type, [X] extended or [R] regular: ";
 8001d74:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8001d78:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001d7c:	4a65      	ldr	r2, [pc, #404]	@ (8001f14 <menu_config_tubes_type_serial+0x214>)
 8001d7e:	461c      	mov	r4, r3
 8001d80:	4615      	mov	r5, r2
 8001d82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d8e:	682b      	ldr	r3, [r5, #0]
 8001d90:	461a      	mov	r2, r3
 8001d92:	8022      	strh	r2, [r4, #0]
 8001d94:	3402      	adds	r4, #2
 8001d96:	0c1b      	lsrs	r3, r3, #16
 8001d98:	7023      	strb	r3, [r4, #0]
    	char typeError[] = "\r\nERROR: Enter X or R !\r\n";
 8001d9a:	4b5f      	ldr	r3, [pc, #380]	@ (8001f18 <menu_config_tubes_type_serial+0x218>)
 8001d9c:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8001da0:	461d      	mov	r5, r3
 8001da2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001da4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001da6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001daa:	c403      	stmia	r4!, {r0, r1}
 8001dac:	8022      	strh	r2, [r4, #0]
    	char typeCheck[] = {'R','X'};
 8001dae:	f645 0352 	movw	r3, #22610	@ 0x5852
 8001db2:	86bb      	strh	r3, [r7, #52]	@ 0x34
    	get_user_input(typePrompt, typeError, 1, typeCheck, type);
 8001db4:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8001db8:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8001dbc:	4638      	mov	r0, r7
 8001dbe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f000 fea8 	bl	8002b1c <get_user_input>
    	launcher.type = type[0];
 8001dcc:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8001dd0:	4b4c      	ldr	r3, [pc, #304]	@ (8001f04 <menu_config_tubes_type_serial+0x204>)
 8001dd2:	709a      	strb	r2, [r3, #2]
 8001dd4:	e002      	b.n	8001ddc <menu_config_tubes_type_serial+0xdc>

    } else {
    	launcher.type = '0'; // if not 8 tubes, reset type to unknown
 8001dd6:	4b4b      	ldr	r3, [pc, #300]	@ (8001f04 <menu_config_tubes_type_serial+0x204>)
 8001dd8:	2230      	movs	r2, #48	@ 0x30
 8001dda:	709a      	strb	r2, [r3, #2]
    }
    printf("Current serial number: %c\r\n", launcher.serialNumber);
 8001ddc:	4b49      	ldr	r3, [pc, #292]	@ (8001f04 <menu_config_tubes_type_serial+0x204>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	4619      	mov	r1, r3
 8001de2:	484e      	ldr	r0, [pc, #312]	@ (8001f1c <menu_config_tubes_type_serial+0x21c>)
 8001de4:	f007 fc60 	bl	80096a8 <iprintf>
	char serial[2];
	char serialPrompt[] = "Enter a two-digit Autolauncher serial number [00-99]: ";
 8001de8:	4b4d      	ldr	r3, [pc, #308]	@ (8001f20 <menu_config_tubes_type_serial+0x220>)
 8001dea:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 8001dee:	461d      	mov	r5, r3
 8001df0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001df2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001df4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001df6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001df8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dfc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001e00:	6020      	str	r0, [r4, #0]
 8001e02:	3404      	adds	r4, #4
 8001e04:	8021      	strh	r1, [r4, #0]
 8001e06:	3402      	adds	r4, #2
 8001e08:	0c0b      	lsrs	r3, r1, #16
 8001e0a:	7023      	strb	r3, [r4, #0]
	char serialError[] = "\r\nEnter only numbers!\r\n";
 8001e0c:	4b45      	ldr	r3, [pc, #276]	@ (8001f24 <menu_config_tubes_type_serial+0x224>)
 8001e0e:	f107 0464 	add.w	r4, r7, #100	@ 0x64
 8001e12:	461d      	mov	r5, r3
 8001e14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e18:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001e1c:	e884 0003 	stmia.w	r4, {r0, r1}
	char serialCheck[] = {'0','1','2','3','4','5','6','7','8','9'};
 8001e20:	4a41      	ldr	r2, [pc, #260]	@ (8001f28 <menu_config_tubes_type_serial+0x228>)
 8001e22:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001e26:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e28:	c303      	stmia	r3!, {r0, r1}
 8001e2a:	801a      	strh	r2, [r3, #0]
	get_user_input(serialPrompt, serialError, 2, serialCheck, serial);
 8001e2c:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8001e30:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 8001e34:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 8001e38:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001e3c:	9300      	str	r3, [sp, #0]
 8001e3e:	4613      	mov	r3, r2
 8001e40:	2202      	movs	r2, #2
 8001e42:	f000 fe6b 	bl	8002b1c <get_user_input>
	launcher.serialNumber = (uint8_t) ( (serial[0] - '0') * 10 + (serial[1] - '0') ); // convert to number, subtract '0' (48 dec)
 8001e46:	f897 30b4 	ldrb.w	r3, [r7, #180]	@ 0xb4
 8001e4a:	3b30      	subs	r3, #48	@ 0x30
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	461a      	mov	r2, r3
 8001e50:	0092      	lsls	r2, r2, #2
 8001e52:	4413      	add	r3, r2
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	f897 30b5 	ldrb.w	r3, [r7, #181]	@ 0xb5
 8001e5c:	4413      	add	r3, r2
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	3b30      	subs	r3, #48	@ 0x30
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	4b27      	ldr	r3, [pc, #156]	@ (8001f04 <menu_config_tubes_type_serial+0x204>)
 8001e66:	701a      	strb	r2, [r3, #0]
    launcher.configured = 'Y';
 8001e68:	4b26      	ldr	r3, [pc, #152]	@ (8001f04 <menu_config_tubes_type_serial+0x204>)
 8001e6a:	2259      	movs	r2, #89	@ 0x59
 8001e6c:	711a      	strb	r2, [r3, #4]
    printf("\r\nTubes: %c | Type: %c | Serial: %i\r\n", launcher.tubeCount, launcher.type, launcher.serialNumber);
 8001e6e:	4b25      	ldr	r3, [pc, #148]	@ (8001f04 <menu_config_tubes_type_serial+0x204>)
 8001e70:	785b      	ldrb	r3, [r3, #1]
 8001e72:	4619      	mov	r1, r3
 8001e74:	4b23      	ldr	r3, [pc, #140]	@ (8001f04 <menu_config_tubes_type_serial+0x204>)
 8001e76:	789b      	ldrb	r3, [r3, #2]
 8001e78:	461a      	mov	r2, r3
 8001e7a:	4b22      	ldr	r3, [pc, #136]	@ (8001f04 <menu_config_tubes_type_serial+0x204>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	482b      	ldr	r0, [pc, #172]	@ (8001f2c <menu_config_tubes_type_serial+0x22c>)
 8001e80:	f007 fc12 	bl	80096a8 <iprintf>

    // store parameters in eeprom
    eeprom_write_nbytes(AL_TUBECOUNT1B, sizeof(launcher.tubeCount), &launcher.tubeCount);
 8001e84:	4a2a      	ldr	r2, [pc, #168]	@ (8001f30 <menu_config_tubes_type_serial+0x230>)
 8001e86:	2101      	movs	r1, #1
 8001e88:	2000      	movs	r0, #0
 8001e8a:	f001 feaf 	bl	8003bec <eeprom_write_nbytes>
    eeprom_write_nbytes(AL_TYPE1B, sizeof(launcher.type), &launcher.type);
 8001e8e:	4a29      	ldr	r2, [pc, #164]	@ (8001f34 <menu_config_tubes_type_serial+0x234>)
 8001e90:	2101      	movs	r1, #1
 8001e92:	2001      	movs	r0, #1
 8001e94:	f001 feaa 	bl	8003bec <eeprom_write_nbytes>
    eeprom_write_nbytes(AL_SN1B, sizeof(launcher.serialNumber), &launcher.serialNumber);
 8001e98:	4a1a      	ldr	r2, [pc, #104]	@ (8001f04 <menu_config_tubes_type_serial+0x204>)
 8001e9a:	2101      	movs	r1, #1
 8001e9c:	2002      	movs	r0, #2
 8001e9e:	f001 fea5 	bl	8003bec <eeprom_write_nbytes>
    eeprom_write_nbytes(AL_CONFIGED1B, sizeof(launcher.configured), &launcher.configured);
 8001ea2:	4a25      	ldr	r2, [pc, #148]	@ (8001f38 <menu_config_tubes_type_serial+0x238>)
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	2003      	movs	r0, #3
 8001ea8:	f001 fea0 	bl	8003bec <eeprom_write_nbytes>
    printf("Settings saved!");
 8001eac:	4823      	ldr	r0, [pc, #140]	@ (8001f3c <menu_config_tubes_type_serial+0x23c>)
 8001eae:	f007 fbfb 	bl	80096a8 <iprintf>
    // test eeprom memory
    eeprom_read_nbytes(AL_TUBECOUNT1B, sizeof(launcher.tubeCount), &launcher.tubeCount);
 8001eb2:	4a1f      	ldr	r2, [pc, #124]	@ (8001f30 <menu_config_tubes_type_serial+0x230>)
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	f001 fec1 	bl	8003c3e <eeprom_read_nbytes>
    eeprom_read_nbytes(AL_TYPE1B, sizeof(launcher.type), &launcher.type);
 8001ebc:	4a1d      	ldr	r2, [pc, #116]	@ (8001f34 <menu_config_tubes_type_serial+0x234>)
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	2001      	movs	r0, #1
 8001ec2:	f001 febc 	bl	8003c3e <eeprom_read_nbytes>
    eeprom_read_nbytes(AL_SN1B, sizeof(launcher.serialNumber), &launcher.serialNumber);
 8001ec6:	4a0f      	ldr	r2, [pc, #60]	@ (8001f04 <menu_config_tubes_type_serial+0x204>)
 8001ec8:	2101      	movs	r1, #1
 8001eca:	2002      	movs	r0, #2
 8001ecc:	f001 feb7 	bl	8003c3e <eeprom_read_nbytes>
    eeprom_read_nbytes(AL_CONFIGED1B, sizeof(launcher.configured), &launcher.configured);
 8001ed0:	4a19      	ldr	r2, [pc, #100]	@ (8001f38 <menu_config_tubes_type_serial+0x238>)
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	2003      	movs	r0, #3
 8001ed6:	f001 feb2 	bl	8003c3e <eeprom_read_nbytes>
    // print stored values
    printf("\r\nStored autolauncher configuration: Tubes: %c | Type: %c | Serial: %i | Configured: %c\r\n",
    		launcher.tubeCount, launcher.type, launcher.serialNumber, launcher.configured);
 8001eda:	4b0a      	ldr	r3, [pc, #40]	@ (8001f04 <menu_config_tubes_type_serial+0x204>)
 8001edc:	785b      	ldrb	r3, [r3, #1]
    printf("\r\nStored autolauncher configuration: Tubes: %c | Type: %c | Serial: %i | Configured: %c\r\n",
 8001ede:	4619      	mov	r1, r3
    		launcher.tubeCount, launcher.type, launcher.serialNumber, launcher.configured);
 8001ee0:	4b08      	ldr	r3, [pc, #32]	@ (8001f04 <menu_config_tubes_type_serial+0x204>)
 8001ee2:	789b      	ldrb	r3, [r3, #2]
    printf("\r\nStored autolauncher configuration: Tubes: %c | Type: %c | Serial: %i | Configured: %c\r\n",
 8001ee4:	461a      	mov	r2, r3
    		launcher.tubeCount, launcher.type, launcher.serialNumber, launcher.configured);
 8001ee6:	4b07      	ldr	r3, [pc, #28]	@ (8001f04 <menu_config_tubes_type_serial+0x204>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
    printf("\r\nStored autolauncher configuration: Tubes: %c | Type: %c | Serial: %i | Configured: %c\r\n",
 8001eea:	4618      	mov	r0, r3
    		launcher.tubeCount, launcher.type, launcher.serialNumber, launcher.configured);
 8001eec:	4b05      	ldr	r3, [pc, #20]	@ (8001f04 <menu_config_tubes_type_serial+0x204>)
 8001eee:	791b      	ldrb	r3, [r3, #4]
    printf("\r\nStored autolauncher configuration: Tubes: %c | Type: %c | Serial: %i | Configured: %c\r\n",
 8001ef0:	9300      	str	r3, [sp, #0]
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	4812      	ldr	r0, [pc, #72]	@ (8001f40 <menu_config_tubes_type_serial+0x240>)
 8001ef6:	f007 fbd7 	bl	80096a8 <iprintf>
}
 8001efa:	bf00      	nop
 8001efc:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bdb0      	pop	{r4, r5, r7, pc}
 8001f04:	20000000 	.word	0x20000000
 8001f08:	0800b6e8 	.word	0x0800b6e8
 8001f0c:	0800b7b4 	.word	0x0800b7b4
 8001f10:	0800b7d8 	.word	0x0800b7d8
 8001f14:	0800b7f4 	.word	0x0800b7f4
 8001f18:	0800b828 	.word	0x0800b828
 8001f1c:	0800b704 	.word	0x0800b704
 8001f20:	0800b844 	.word	0x0800b844
 8001f24:	0800b87c 	.word	0x0800b87c
 8001f28:	0800b894 	.word	0x0800b894
 8001f2c:	0800b720 	.word	0x0800b720
 8001f30:	20000001 	.word	0x20000001
 8001f34:	20000002 	.word	0x20000002
 8001f38:	20000004 	.word	0x20000004
 8001f3c:	0800b748 	.word	0x0800b748
 8001f40:	0800b758 	.word	0x0800b758

08001f44 <eeprom_clear_memory_range>:


/* Clear a range of the eeprom memory
 * It will write a 0 to the selected range of memory addresses [0-127]
 * To clear 1 byte memory start = end */
void eeprom_clear_memory_range(void){
 8001f44:	b5b0      	push	{r4, r5, r7, lr}
 8001f46:	b0c2      	sub	sp, #264	@ 0x108
 8001f48:	af02      	add	r7, sp, #8
	uint8_t memStart, memEnd;
	uint8_t mFlag; // valid memory value flag
	// print eeprom memory map
	eeprom_print_memory_map();
 8001f4a:	f001 fd89 	bl	8003a60 <eeprom_print_memory_map>
	// get the memory range to clear - start
	char mem[3]; // buffer to store digits
	char mStartPrompt[100];
	sprintf(mStartPrompt, "\r\n>Enter (3-digit) START memory address [%03i-%03i]: ", eeprom.MEMORY_MIN, eeprom.MEMORY_MAX);
 8001f4e:	4b8d      	ldr	r3, [pc, #564]	@ (8002184 <eeprom_clear_memory_range+0x240>)
 8001f50:	885b      	ldrh	r3, [r3, #2]
 8001f52:	461a      	mov	r2, r3
 8001f54:	4b8b      	ldr	r3, [pc, #556]	@ (8002184 <eeprom_clear_memory_range+0x240>)
 8001f56:	881b      	ldrh	r3, [r3, #0]
 8001f58:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 8001f5c:	498a      	ldr	r1, [pc, #552]	@ (8002188 <eeprom_clear_memory_range+0x244>)
 8001f5e:	f007 fcc7 	bl	80098f0 <siprintf>
	char mEndPrompt[100];
	sprintf(mEndPrompt, "\r\n>Enter (3-digit) END memory address [%03i-%03i]: ", eeprom.MEMORY_MIN, eeprom.MEMORY_MAX);
 8001f62:	4b88      	ldr	r3, [pc, #544]	@ (8002184 <eeprom_clear_memory_range+0x240>)
 8001f64:	885b      	ldrh	r3, [r3, #2]
 8001f66:	461a      	mov	r2, r3
 8001f68:	4b86      	ldr	r3, [pc, #536]	@ (8002184 <eeprom_clear_memory_range+0x240>)
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8001f70:	4986      	ldr	r1, [pc, #536]	@ (800218c <eeprom_clear_memory_range+0x248>)
 8001f72:	f007 fcbd 	bl	80098f0 <siprintf>
	char memError[] = "\r\n* ERROR: enter valid numbers *\r\n";
 8001f76:	4b86      	ldr	r3, [pc, #536]	@ (8002190 <eeprom_clear_memory_range+0x24c>)
 8001f78:	f107 040c 	add.w	r4, r7, #12
 8001f7c:	461d      	mov	r5, r3
 8001f7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f86:	682b      	ldr	r3, [r5, #0]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	8022      	strh	r2, [r4, #0]
 8001f8c:	3402      	adds	r4, #2
 8001f8e:	0c1b      	lsrs	r3, r3, #16
 8001f90:	7023      	strb	r3, [r4, #0]
	char memCheck[] = {'0','1','2','3','4','5','6','7','8','9'};
 8001f92:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8001f96:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001f9a:	4a7e      	ldr	r2, [pc, #504]	@ (8002194 <eeprom_clear_memory_range+0x250>)
 8001f9c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f9e:	c303      	stmia	r3!, {r0, r1}
 8001fa0:	801a      	strh	r2, [r3, #0]
	// get start address
	do{
		mFlag = 0;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
		get_user_input(mStartPrompt, memError, 3, memCheck, mem);
 8001fa8:	463a      	mov	r2, r7
 8001faa:	f107 010c 	add.w	r1, r7, #12
 8001fae:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 8001fb2:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8001fb6:	9300      	str	r3, [sp, #0]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	2203      	movs	r2, #3
 8001fbc:	f000 fdae 	bl	8002b1c <get_user_input>
		memStart = (uint8_t) ( (mem[0] - '0') * 100 + (mem[1] - '0') * 10 + (mem[2] - '0') ); // convert to number, subtract '0' (48 dec)
 8001fc0:	f897 30f8 	ldrb.w	r3, [r7, #248]	@ 0xf8
 8001fc4:	3b30      	subs	r3, #48	@ 0x30
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	461a      	mov	r2, r3
 8001fca:	0092      	lsls	r2, r2, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	461a      	mov	r2, r3
 8001fd0:	0091      	lsls	r1, r2, #2
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	4413      	add	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	f897 30f9 	ldrb.w	r3, [r7, #249]	@ 0xf9
 8001fe0:	3b30      	subs	r3, #48	@ 0x30
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	0089      	lsls	r1, r1, #2
 8001fe8:	440b      	add	r3, r1
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	4413      	add	r3, r2
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	f897 30fa 	ldrb.w	r3, [r7, #250]	@ 0xfa
 8001ff6:	4413      	add	r3, r2
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	3b30      	subs	r3, #48	@ 0x30
 8001ffc:	f887 30fe 	strb.w	r3, [r7, #254]	@ 0xfe
		if((memStart >= eeprom.MEMORY_MIN) && (memStart <= eeprom.MEMORY_MAX)){
 8002000:	f897 30fe 	ldrb.w	r3, [r7, #254]	@ 0xfe
 8002004:	b29a      	uxth	r2, r3
 8002006:	4b5f      	ldr	r3, [pc, #380]	@ (8002184 <eeprom_clear_memory_range+0x240>)
 8002008:	885b      	ldrh	r3, [r3, #2]
 800200a:	429a      	cmp	r2, r3
 800200c:	d30a      	bcc.n	8002024 <eeprom_clear_memory_range+0xe0>
 800200e:	f897 30fe 	ldrb.w	r3, [r7, #254]	@ 0xfe
 8002012:	b29a      	uxth	r2, r3
 8002014:	4b5b      	ldr	r3, [pc, #364]	@ (8002184 <eeprom_clear_memory_range+0x240>)
 8002016:	881b      	ldrh	r3, [r3, #0]
 8002018:	429a      	cmp	r2, r3
 800201a:	d803      	bhi.n	8002024 <eeprom_clear_memory_range+0xe0>
			mFlag = 1;
 800201c:	2301      	movs	r3, #1
 800201e:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
 8002022:	e002      	b.n	800202a <eeprom_clear_memory_range+0xe6>
		} else {
			printf("\r\n** Memory out of range! **\r\n");
 8002024:	485c      	ldr	r0, [pc, #368]	@ (8002198 <eeprom_clear_memory_range+0x254>)
 8002026:	f007 fba7 	bl	8009778 <puts>
		}
	} while ( !mFlag );
 800202a:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800202e:	2b00      	cmp	r3, #0
 8002030:	d0b7      	beq.n	8001fa2 <eeprom_clear_memory_range+0x5e>
	// get end address
	//mem[0] = '\0', mem[1] = '\0' , mem[2] = '\0'; // reet values
	do{
		mFlag = 0;
 8002032:	2300      	movs	r3, #0
 8002034:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
		get_user_input(mEndPrompt, memError, 3, memCheck, mem);
 8002038:	463a      	mov	r2, r7
 800203a:	f107 010c 	add.w	r1, r7, #12
 800203e:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8002042:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	4613      	mov	r3, r2
 800204a:	2203      	movs	r2, #3
 800204c:	f000 fd66 	bl	8002b1c <get_user_input>
		memEnd = (uint8_t)( (mem[0] - '0') * 100 + (mem[1] - '0') * 10 + (mem[2] - '0') ); // convert to number, subtract '0' (48 dec)
 8002050:	f897 30f8 	ldrb.w	r3, [r7, #248]	@ 0xf8
 8002054:	3b30      	subs	r3, #48	@ 0x30
 8002056:	b2db      	uxtb	r3, r3
 8002058:	461a      	mov	r2, r3
 800205a:	0092      	lsls	r2, r2, #2
 800205c:	4413      	add	r3, r2
 800205e:	461a      	mov	r2, r3
 8002060:	0091      	lsls	r1, r2, #2
 8002062:	461a      	mov	r2, r3
 8002064:	460b      	mov	r3, r1
 8002066:	4413      	add	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	b2da      	uxtb	r2, r3
 800206c:	f897 30f9 	ldrb.w	r3, [r7, #249]	@ 0xf9
 8002070:	3b30      	subs	r3, #48	@ 0x30
 8002072:	b2db      	uxtb	r3, r3
 8002074:	4619      	mov	r1, r3
 8002076:	0089      	lsls	r1, r1, #2
 8002078:	440b      	add	r3, r1
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	b2db      	uxtb	r3, r3
 800207e:	4413      	add	r3, r2
 8002080:	b2da      	uxtb	r2, r3
 8002082:	f897 30fa 	ldrb.w	r3, [r7, #250]	@ 0xfa
 8002086:	4413      	add	r3, r2
 8002088:	b2db      	uxtb	r3, r3
 800208a:	3b30      	subs	r3, #48	@ 0x30
 800208c:	f887 30fd 	strb.w	r3, [r7, #253]	@ 0xfd
		if((memEnd >= eeprom.MEMORY_MIN) && (memEnd <= eeprom.MEMORY_MAX) && memStart <= memEnd){
 8002090:	f897 30fd 	ldrb.w	r3, [r7, #253]	@ 0xfd
 8002094:	b29a      	uxth	r2, r3
 8002096:	4b3b      	ldr	r3, [pc, #236]	@ (8002184 <eeprom_clear_memory_range+0x240>)
 8002098:	885b      	ldrh	r3, [r3, #2]
 800209a:	429a      	cmp	r2, r3
 800209c:	d310      	bcc.n	80020c0 <eeprom_clear_memory_range+0x17c>
 800209e:	f897 30fd 	ldrb.w	r3, [r7, #253]	@ 0xfd
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	4b37      	ldr	r3, [pc, #220]	@ (8002184 <eeprom_clear_memory_range+0x240>)
 80020a6:	881b      	ldrh	r3, [r3, #0]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d809      	bhi.n	80020c0 <eeprom_clear_memory_range+0x17c>
 80020ac:	f897 20fe 	ldrb.w	r2, [r7, #254]	@ 0xfe
 80020b0:	f897 30fd 	ldrb.w	r3, [r7, #253]	@ 0xfd
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d803      	bhi.n	80020c0 <eeprom_clear_memory_range+0x17c>
			mFlag = 1;
 80020b8:	2301      	movs	r3, #1
 80020ba:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
 80020be:	e002      	b.n	80020c6 <eeprom_clear_memory_range+0x182>
		} else {
			printf("\r\n** Memory out of range or start>end **\r\n");
 80020c0:	4836      	ldr	r0, [pc, #216]	@ (800219c <eeprom_clear_memory_range+0x258>)
 80020c2:	f007 fb59 	bl	8009778 <puts>
		}
	} while ( !mFlag );
 80020c6:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d0b1      	beq.n	8002032 <eeprom_clear_memory_range+0xee>
	printf("> %i block/s cleared!\r\n", eeprom_clear(memStart, memEnd));
 80020ce:	f897 20fd 	ldrb.w	r2, [r7, #253]	@ 0xfd
 80020d2:	f897 30fe 	ldrb.w	r3, [r7, #254]	@ 0xfe
 80020d6:	4611      	mov	r1, r2
 80020d8:	4618      	mov	r0, r3
 80020da:	f001 fc83 	bl	80039e4 <eeprom_clear>
 80020de:	4603      	mov	r3, r0
 80020e0:	4619      	mov	r1, r3
 80020e2:	482f      	ldr	r0, [pc, #188]	@ (80021a0 <eeprom_clear_memory_range+0x25c>)
 80020e4:	f007 fae0 	bl	80096a8 <iprintf>
	// update variables with new stored values
	// read launcher config
	eeprom_read_nbytes(AL_TUBECOUNT1B, sizeof(launcher.tubeCount), &launcher.tubeCount);
 80020e8:	4a2e      	ldr	r2, [pc, #184]	@ (80021a4 <eeprom_clear_memory_range+0x260>)
 80020ea:	2101      	movs	r1, #1
 80020ec:	2000      	movs	r0, #0
 80020ee:	f001 fda6 	bl	8003c3e <eeprom_read_nbytes>
	eeprom_read_nbytes(AL_TYPE1B, sizeof(launcher.type), &launcher.type);
 80020f2:	4a2d      	ldr	r2, [pc, #180]	@ (80021a8 <eeprom_clear_memory_range+0x264>)
 80020f4:	2101      	movs	r1, #1
 80020f6:	2001      	movs	r0, #1
 80020f8:	f001 fda1 	bl	8003c3e <eeprom_read_nbytes>
	eeprom_read_nbytes(AL_SN1B, sizeof(launcher.serialNumber), &launcher.serialNumber);
 80020fc:	4a2b      	ldr	r2, [pc, #172]	@ (80021ac <eeprom_clear_memory_range+0x268>)
 80020fe:	2101      	movs	r1, #1
 8002100:	2002      	movs	r0, #2
 8002102:	f001 fd9c 	bl	8003c3e <eeprom_read_nbytes>
	eeprom_read_nbytes(AL_CONFIGED1B, sizeof(launcher.configured), &launcher.configured);
 8002106:	4a2a      	ldr	r2, [pc, #168]	@ (80021b0 <eeprom_clear_memory_range+0x26c>)
 8002108:	2101      	movs	r1, #1
 800210a:	2003      	movs	r0, #3
 800210c:	f001 fd97 	bl	8003c3e <eeprom_read_nbytes>
	// read motor config
	eeprom_read_nbytes(M_RUNTIME2B, sizeof(motor.runTime), &motor.runTime);
 8002110:	4a28      	ldr	r2, [pc, #160]	@ (80021b4 <eeprom_clear_memory_range+0x270>)
 8002112:	2102      	movs	r1, #2
 8002114:	2008      	movs	r0, #8
 8002116:	f001 fd92 	bl	8003c3e <eeprom_read_nbytes>
	eeprom_read_nbytes(M_PWM_FREQ2B, sizeof(motor.pwmFreq), &motor.pwmFreq);
 800211a:	4a27      	ldr	r2, [pc, #156]	@ (80021b8 <eeprom_clear_memory_range+0x274>)
 800211c:	2102      	movs	r1, #2
 800211e:	200a      	movs	r0, #10
 8002120:	f001 fd8d 	bl	8003c3e <eeprom_read_nbytes>
	eeprom_read_nbytes(M_SAMPLEPERIOD2B, sizeof(motor.samplePeriod), &motor.samplePeriod);
 8002124:	4a25      	ldr	r2, [pc, #148]	@ (80021bc <eeprom_clear_memory_range+0x278>)
 8002126:	2102      	movs	r1, #2
 8002128:	200c      	movs	r0, #12
 800212a:	f001 fd88 	bl	8003c3e <eeprom_read_nbytes>
	eeprom_read_nbytes(M_WIRING1B, sizeof(motor.wiring), &motor.wiring);
 800212e:	4a24      	ldr	r2, [pc, #144]	@ (80021c0 <eeprom_clear_memory_range+0x27c>)
 8002130:	2101      	movs	r1, #1
 8002132:	200e      	movs	r0, #14
 8002134:	f001 fd83 	bl	8003c3e <eeprom_read_nbytes>
	// print new values
	printf("\r\n<EEPROM>\r\n");
 8002138:	4822      	ldr	r0, [pc, #136]	@ (80021c4 <eeprom_clear_memory_range+0x280>)
 800213a:	f007 fb1d 	bl	8009778 <puts>
	printf("<AL> Tubes: %c | Type: %c | Serial: %i\r\n", launcher.tubeCount, launcher.type, launcher.serialNumber);
 800213e:	4b1b      	ldr	r3, [pc, #108]	@ (80021ac <eeprom_clear_memory_range+0x268>)
 8002140:	785b      	ldrb	r3, [r3, #1]
 8002142:	4619      	mov	r1, r3
 8002144:	4b19      	ldr	r3, [pc, #100]	@ (80021ac <eeprom_clear_memory_range+0x268>)
 8002146:	789b      	ldrb	r3, [r3, #2]
 8002148:	461a      	mov	r2, r3
 800214a:	4b18      	ldr	r3, [pc, #96]	@ (80021ac <eeprom_clear_memory_range+0x268>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	481e      	ldr	r0, [pc, #120]	@ (80021c8 <eeprom_clear_memory_range+0x284>)
 8002150:	f007 faaa 	bl	80096a8 <iprintf>
	printf("<MOTOR> Runtime: %i ms | PWM Frequency: %i Hz | Sample Period: %i ms | Wiring: %i\r\n",
			(int)motor.runTime, (int)motor.pwmFreq, (int)motor.samplePeriod, (int)motor.wiring);
 8002154:	4b17      	ldr	r3, [pc, #92]	@ (80021b4 <eeprom_clear_memory_range+0x270>)
 8002156:	881b      	ldrh	r3, [r3, #0]
	printf("<MOTOR> Runtime: %i ms | PWM Frequency: %i Hz | Sample Period: %i ms | Wiring: %i\r\n",
 8002158:	4619      	mov	r1, r3
			(int)motor.runTime, (int)motor.pwmFreq, (int)motor.samplePeriod, (int)motor.wiring);
 800215a:	4b16      	ldr	r3, [pc, #88]	@ (80021b4 <eeprom_clear_memory_range+0x270>)
 800215c:	889b      	ldrh	r3, [r3, #4]
	printf("<MOTOR> Runtime: %i ms | PWM Frequency: %i Hz | Sample Period: %i ms | Wiring: %i\r\n",
 800215e:	461a      	mov	r2, r3
			(int)motor.runTime, (int)motor.pwmFreq, (int)motor.samplePeriod, (int)motor.wiring);
 8002160:	4b14      	ldr	r3, [pc, #80]	@ (80021b4 <eeprom_clear_memory_range+0x270>)
 8002162:	885b      	ldrh	r3, [r3, #2]
	printf("<MOTOR> Runtime: %i ms | PWM Frequency: %i Hz | Sample Period: %i ms | Wiring: %i\r\n",
 8002164:	4618      	mov	r0, r3
			(int)motor.runTime, (int)motor.pwmFreq, (int)motor.samplePeriod, (int)motor.wiring);
 8002166:	4b13      	ldr	r3, [pc, #76]	@ (80021b4 <eeprom_clear_memory_range+0x270>)
 8002168:	799b      	ldrb	r3, [r3, #6]
	printf("<MOTOR> Runtime: %i ms | PWM Frequency: %i Hz | Sample Period: %i ms | Wiring: %i\r\n",
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	4603      	mov	r3, r0
 800216e:	4817      	ldr	r0, [pc, #92]	@ (80021cc <eeprom_clear_memory_range+0x288>)
 8002170:	f007 fa9a 	bl	80096a8 <iprintf>
	motor_read_stats();
 8002174:	f000 f82c 	bl	80021d0 <motor_read_stats>
}
 8002178:	bf00      	nop
 800217a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800217e:	46bd      	mov	sp, r7
 8002180:	bdb0      	pop	{r4, r5, r7, pc}
 8002182:	bf00      	nop
 8002184:	20000008 	.word	0x20000008
 8002188:	0800b8a0 	.word	0x0800b8a0
 800218c:	0800b8d8 	.word	0x0800b8d8
 8002190:	0800b9fc 	.word	0x0800b9fc
 8002194:	0800b894 	.word	0x0800b894
 8002198:	0800b90c 	.word	0x0800b90c
 800219c:	0800b92c 	.word	0x0800b92c
 80021a0:	0800b958 	.word	0x0800b958
 80021a4:	20000001 	.word	0x20000001
 80021a8:	20000002 	.word	0x20000002
 80021ac:	20000000 	.word	0x20000000
 80021b0:	20000004 	.word	0x20000004
 80021b4:	20000010 	.word	0x20000010
 80021b8:	20000014 	.word	0x20000014
 80021bc:	20000012 	.word	0x20000012
 80021c0:	20000016 	.word	0x20000016
 80021c4:	0800b970 	.word	0x0800b970
 80021c8:	0800b97c 	.word	0x0800b97c
 80021cc:	0800b9a8 	.word	0x0800b9a8

080021d0 <motor_read_stats>:



/* Read motor use count and Imax stored in eeprom memory */
void motor_read_stats(void){
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
	// use count
	eeprom_read_nbytes(M_1COUNT2B, sizeof(motor.count[0]), &motor.count[0]);
 80021d6:	4a3b      	ldr	r2, [pc, #236]	@ (80022c4 <motor_read_stats+0xf4>)
 80021d8:	2102      	movs	r1, #2
 80021da:	2010      	movs	r0, #16
 80021dc:	f001 fd2f 	bl	8003c3e <eeprom_read_nbytes>
	eeprom_read_nbytes(M_2COUNT2B, sizeof(motor.count[1]), &motor.count[1]);
 80021e0:	4a39      	ldr	r2, [pc, #228]	@ (80022c8 <motor_read_stats+0xf8>)
 80021e2:	2102      	movs	r1, #2
 80021e4:	2012      	movs	r0, #18
 80021e6:	f001 fd2a 	bl	8003c3e <eeprom_read_nbytes>
	eeprom_read_nbytes(M_3COUNT2B, sizeof(motor.count[2]), &motor.count[2]);
 80021ea:	4a38      	ldr	r2, [pc, #224]	@ (80022cc <motor_read_stats+0xfc>)
 80021ec:	2102      	movs	r1, #2
 80021ee:	2014      	movs	r0, #20
 80021f0:	f001 fd25 	bl	8003c3e <eeprom_read_nbytes>
	eeprom_read_nbytes(M_4COUNT2B, sizeof(motor.count[3]), &motor.count[3]);
 80021f4:	4a36      	ldr	r2, [pc, #216]	@ (80022d0 <motor_read_stats+0x100>)
 80021f6:	2102      	movs	r1, #2
 80021f8:	2016      	movs	r0, #22
 80021fa:	f001 fd20 	bl	8003c3e <eeprom_read_nbytes>
	eeprom_read_nbytes(M_5COUNT2B, sizeof(motor.count[4]), &motor.count[4]);
 80021fe:	4a35      	ldr	r2, [pc, #212]	@ (80022d4 <motor_read_stats+0x104>)
 8002200:	2102      	movs	r1, #2
 8002202:	2018      	movs	r0, #24
 8002204:	f001 fd1b 	bl	8003c3e <eeprom_read_nbytes>
	eeprom_read_nbytes(M_6COUNT2B, sizeof(motor.count[5]), &motor.count[5]);
 8002208:	4a33      	ldr	r2, [pc, #204]	@ (80022d8 <motor_read_stats+0x108>)
 800220a:	2102      	movs	r1, #2
 800220c:	201a      	movs	r0, #26
 800220e:	f001 fd16 	bl	8003c3e <eeprom_read_nbytes>
	eeprom_read_nbytes(M_7COUNT2B, sizeof(motor.count[6]), &motor.count[6]);
 8002212:	4a32      	ldr	r2, [pc, #200]	@ (80022dc <motor_read_stats+0x10c>)
 8002214:	2102      	movs	r1, #2
 8002216:	201c      	movs	r0, #28
 8002218:	f001 fd11 	bl	8003c3e <eeprom_read_nbytes>
	eeprom_read_nbytes(M_8COUNT2B, sizeof(motor.count[7]), &motor.count[7]);
 800221c:	4a30      	ldr	r2, [pc, #192]	@ (80022e0 <motor_read_stats+0x110>)
 800221e:	2102      	movs	r1, #2
 8002220:	201e      	movs	r0, #30
 8002222:	f001 fd0c 	bl	8003c3e <eeprom_read_nbytes>
	// max current logged
	eeprom_read_nbytes(M_1MXAMP2B, sizeof(motor.imax[0]), &motor.imax[0]);
 8002226:	4a2f      	ldr	r2, [pc, #188]	@ (80022e4 <motor_read_stats+0x114>)
 8002228:	2102      	movs	r1, #2
 800222a:	2020      	movs	r0, #32
 800222c:	f001 fd07 	bl	8003c3e <eeprom_read_nbytes>
	eeprom_read_nbytes(M_2MXAMP2B, sizeof(motor.imax[1]), &motor.imax[1]);
 8002230:	4a2d      	ldr	r2, [pc, #180]	@ (80022e8 <motor_read_stats+0x118>)
 8002232:	2102      	movs	r1, #2
 8002234:	2022      	movs	r0, #34	@ 0x22
 8002236:	f001 fd02 	bl	8003c3e <eeprom_read_nbytes>
	eeprom_read_nbytes(M_3MXAMP2B, sizeof(motor.imax[2]), &motor.imax[2]);
 800223a:	4a2c      	ldr	r2, [pc, #176]	@ (80022ec <motor_read_stats+0x11c>)
 800223c:	2102      	movs	r1, #2
 800223e:	2024      	movs	r0, #36	@ 0x24
 8002240:	f001 fcfd 	bl	8003c3e <eeprom_read_nbytes>
	eeprom_read_nbytes(M_4MXAMP2B, sizeof(motor.imax[3]), &motor.imax[3]);
 8002244:	4a2a      	ldr	r2, [pc, #168]	@ (80022f0 <motor_read_stats+0x120>)
 8002246:	2102      	movs	r1, #2
 8002248:	2026      	movs	r0, #38	@ 0x26
 800224a:	f001 fcf8 	bl	8003c3e <eeprom_read_nbytes>
	eeprom_read_nbytes(M_5MXAMP2B, sizeof(motor.imax[4]), &motor.imax[4]);
 800224e:	4a29      	ldr	r2, [pc, #164]	@ (80022f4 <motor_read_stats+0x124>)
 8002250:	2102      	movs	r1, #2
 8002252:	2028      	movs	r0, #40	@ 0x28
 8002254:	f001 fcf3 	bl	8003c3e <eeprom_read_nbytes>
	eeprom_read_nbytes(M_6MXAMP2B, sizeof(motor.imax[5]), &motor.imax[5]);
 8002258:	4a27      	ldr	r2, [pc, #156]	@ (80022f8 <motor_read_stats+0x128>)
 800225a:	2102      	movs	r1, #2
 800225c:	202a      	movs	r0, #42	@ 0x2a
 800225e:	f001 fcee 	bl	8003c3e <eeprom_read_nbytes>
	eeprom_read_nbytes(M_7MXAMP2B, sizeof(motor.imax[6]), &motor.imax[6]);
 8002262:	4a26      	ldr	r2, [pc, #152]	@ (80022fc <motor_read_stats+0x12c>)
 8002264:	2102      	movs	r1, #2
 8002266:	202c      	movs	r0, #44	@ 0x2c
 8002268:	f001 fce9 	bl	8003c3e <eeprom_read_nbytes>
	eeprom_read_nbytes(M_8MXAMP2B, sizeof(motor.imax[7]), &motor.imax[7]);
 800226c:	4a24      	ldr	r2, [pc, #144]	@ (8002300 <motor_read_stats+0x130>)
 800226e:	2102      	movs	r1, #2
 8002270:	202e      	movs	r0, #46	@ 0x2e
 8002272:	f001 fce4 	bl	8003c3e <eeprom_read_nbytes>
	// print stats
	printf("\r\n\r\n|        STEPPER MOTOR STATS          |\r\n");
 8002276:	4823      	ldr	r0, [pc, #140]	@ (8002304 <motor_read_stats+0x134>)
 8002278:	f007 fa7e 	bl	8009778 <puts>
	printf("|=====================================|\r\n");
 800227c:	4822      	ldr	r0, [pc, #136]	@ (8002308 <motor_read_stats+0x138>)
 800227e:	f007 fa7b 	bl	8009778 <puts>
	for(uint8_t i = 0; i < 8; i++){
 8002282:	2300      	movs	r3, #0
 8002284:	71fb      	strb	r3, [r7, #7]
 8002286:	e013      	b.n	80022b0 <motor_read_stats+0xe0>
		printf("| [M%i] IMAX= %03i mA, USE_COUNT= %05i |\r\n", i+1 ,(int)motor.imax[i], (int)motor.count[i]);
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	1c59      	adds	r1, r3, #1
 800228c:	79fb      	ldrb	r3, [r7, #7]
 800228e:	4a1f      	ldr	r2, [pc, #124]	@ (800230c <motor_read_stats+0x13c>)
 8002290:	3304      	adds	r3, #4
 8002292:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002296:	4618      	mov	r0, r3
 8002298:	79fb      	ldrb	r3, [r7, #7]
 800229a:	4a1c      	ldr	r2, [pc, #112]	@ (800230c <motor_read_stats+0x13c>)
 800229c:	330c      	adds	r3, #12
 800229e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022a2:	4602      	mov	r2, r0
 80022a4:	481a      	ldr	r0, [pc, #104]	@ (8002310 <motor_read_stats+0x140>)
 80022a6:	f007 f9ff 	bl	80096a8 <iprintf>
	for(uint8_t i = 0; i < 8; i++){
 80022aa:	79fb      	ldrb	r3, [r7, #7]
 80022ac:	3301      	adds	r3, #1
 80022ae:	71fb      	strb	r3, [r7, #7]
 80022b0:	79fb      	ldrb	r3, [r7, #7]
 80022b2:	2b07      	cmp	r3, #7
 80022b4:	d9e8      	bls.n	8002288 <motor_read_stats+0xb8>
	}
	printf("|=====================================|\r\n");
 80022b6:	4814      	ldr	r0, [pc, #80]	@ (8002308 <motor_read_stats+0x138>)
 80022b8:	f007 fa5e 	bl	8009778 <puts>
}
 80022bc:	bf00      	nop
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	20000028 	.word	0x20000028
 80022c8:	2000002a 	.word	0x2000002a
 80022cc:	2000002c 	.word	0x2000002c
 80022d0:	2000002e 	.word	0x2000002e
 80022d4:	20000030 	.word	0x20000030
 80022d8:	20000032 	.word	0x20000032
 80022dc:	20000034 	.word	0x20000034
 80022e0:	20000036 	.word	0x20000036
 80022e4:	20000018 	.word	0x20000018
 80022e8:	2000001a 	.word	0x2000001a
 80022ec:	2000001c 	.word	0x2000001c
 80022f0:	2000001e 	.word	0x2000001e
 80022f4:	20000020 	.word	0x20000020
 80022f8:	20000022 	.word	0x20000022
 80022fc:	20000024 	.word	0x20000024
 8002300:	20000026 	.word	0x20000026
 8002304:	0800ba20 	.word	0x0800ba20
 8002308:	0800ba50 	.word	0x0800ba50
 800230c:	20000010 	.word	0x20000010
 8002310:	0800ba7c 	.word	0x0800ba7c

08002314 <motor_set_runtime>:


/* Set the runtime for the stepper motors */
void motor_set_runtime(void){
 8002314:	b5b0      	push	{r4, r5, r7, lr}
 8002316:	b0aa      	sub	sp, #168	@ 0xa8
 8002318:	af02      	add	r7, sp, #8
	printf("\r\n>Current runtime: %i ms [default=%i]\r\n", motor.runTime, MOTOR_RUNTIME_DEFAULT);
 800231a:	4b4e      	ldr	r3, [pc, #312]	@ (8002454 <motor_set_runtime+0x140>)
 800231c:	881b      	ldrh	r3, [r3, #0]
 800231e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8002322:	4619      	mov	r1, r3
 8002324:	484c      	ldr	r0, [pc, #304]	@ (8002458 <motor_set_runtime+0x144>)
 8002326:	f007 f9bf 	bl	80096a8 <iprintf>
	char runtime[5];
	char runtimePrompt[100];
	sprintf(runtimePrompt, ">[exit=%05i]Enter motor runtime (5-digits) in milliseconds [%05i-%05i]: ", 0, MOTOR_RUNTIME_MIN, MOTOR_RUNTIME_MAX);
 800232a:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 800232e:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8002332:	9300      	str	r3, [sp, #0]
 8002334:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002338:	2200      	movs	r2, #0
 800233a:	4948      	ldr	r1, [pc, #288]	@ (800245c <motor_set_runtime+0x148>)
 800233c:	f007 fad8 	bl	80098f0 <siprintf>
	char runtimeError[] = "\r\n** Enter only numbers! **\r\n";
 8002340:	4b47      	ldr	r3, [pc, #284]	@ (8002460 <motor_set_runtime+0x14c>)
 8002342:	f107 040c 	add.w	r4, r7, #12
 8002346:	461d      	mov	r5, r3
 8002348:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800234a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800234c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002350:	c407      	stmia	r4!, {r0, r1, r2}
 8002352:	8023      	strh	r3, [r4, #0]
	char runtimeCheck[] = {'0','1','2','3','4','5','6','7','8','9'};
 8002354:	4a43      	ldr	r2, [pc, #268]	@ (8002464 <motor_set_runtime+0x150>)
 8002356:	463b      	mov	r3, r7
 8002358:	ca07      	ldmia	r2, {r0, r1, r2}
 800235a:	c303      	stmia	r3!, {r0, r1}
 800235c:	801a      	strh	r2, [r3, #0]
	uint8_t rtFlag, exitFlag = 0;
 800235e:	2300      	movs	r3, #0
 8002360:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
	// loop until a good value is set or 0 to exit
	do{
		rtFlag = 0;
 8002364:	2300      	movs	r3, #0
 8002366:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
		get_user_input(runtimePrompt, runtimeError, 5, runtimeCheck, runtime);
 800236a:	463a      	mov	r2, r7
 800236c:	f107 010c 	add.w	r1, r7, #12
 8002370:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8002374:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	4613      	mov	r3, r2
 800237c:	2205      	movs	r2, #5
 800237e:	f000 fbcd 	bl	8002b1c <get_user_input>
		uint32_t rt = ( (runtime[0] - '0') * 10000 + (runtime[1] - '0') * 1000 + (runtime[2] - '0') * 100 + (runtime[3] - '0') * 10 + (runtime[4] - '0') );
 8002382:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 8002386:	3b30      	subs	r3, #48	@ 0x30
 8002388:	f242 7210 	movw	r2, #10000	@ 0x2710
 800238c:	fb03 f202 	mul.w	r2, r3, r2
 8002390:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 8002394:	3b30      	subs	r3, #48	@ 0x30
 8002396:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800239a:	fb01 f303 	mul.w	r3, r1, r3
 800239e:	441a      	add	r2, r3
 80023a0:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 80023a4:	3b30      	subs	r3, #48	@ 0x30
 80023a6:	2164      	movs	r1, #100	@ 0x64
 80023a8:	fb01 f303 	mul.w	r3, r1, r3
 80023ac:	18d1      	adds	r1, r2, r3
 80023ae:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 80023b2:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80023b6:	4613      	mov	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4413      	add	r3, r2
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	18ca      	adds	r2, r1, r3
 80023c0:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 80023c4:	3b30      	subs	r3, #48	@ 0x30
 80023c6:	4413      	add	r3, r2
 80023c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		if(rt == 0){
 80023cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d106      	bne.n	80023e2 <motor_set_runtime+0xce>
			printf("\r\n** Exit **\r\n");
 80023d4:	4824      	ldr	r0, [pc, #144]	@ (8002468 <motor_set_runtime+0x154>)
 80023d6:	f007 f9cf 	bl	8009778 <puts>
			exitFlag = 1;
 80023da:	2301      	movs	r3, #1
 80023dc:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
			break;
 80023e0:	e01a      	b.n	8002418 <motor_set_runtime+0x104>
		}
		// check values are within range
		if((rt >= MOTOR_RUNTIME_MIN) && (rt <= MOTOR_RUNTIME_MAX)){
 80023e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80023e6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80023ea:	d30e      	bcc.n	800240a <motor_set_runtime+0xf6>
 80023ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80023f0:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d808      	bhi.n	800240a <motor_set_runtime+0xf6>
			motor.runTime = (uint16_t) rt;
 80023f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	4b15      	ldr	r3, [pc, #84]	@ (8002454 <motor_set_runtime+0x140>)
 8002400:	801a      	strh	r2, [r3, #0]
			rtFlag = 1;
 8002402:	2301      	movs	r3, #1
 8002404:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 8002408:	e002      	b.n	8002410 <motor_set_runtime+0xfc>
		} else {
			printf("\r\n** Value out of range! **\r\n");
 800240a:	4818      	ldr	r0, [pc, #96]	@ (800246c <motor_set_runtime+0x158>)
 800240c:	f007 f9b4 	bl	8009778 <puts>
		}
	} while( !rtFlag);
 8002410:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0a5      	beq.n	8002364 <motor_set_runtime+0x50>
	// store variables if it was not an exit
	if(exitFlag == 0){
 8002418:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 800241c:	2b00      	cmp	r3, #0
 800241e:	d115      	bne.n	800244c <motor_set_runtime+0x138>
		// Print all inputs
		printf(">Motor Runtime: %i ms\r\n", (int)motor.runTime);
 8002420:	4b0c      	ldr	r3, [pc, #48]	@ (8002454 <motor_set_runtime+0x140>)
 8002422:	881b      	ldrh	r3, [r3, #0]
 8002424:	4619      	mov	r1, r3
 8002426:	4812      	ldr	r0, [pc, #72]	@ (8002470 <motor_set_runtime+0x15c>)
 8002428:	f007 f93e 	bl	80096a8 <iprintf>
		// store in eeprom
		eeprom_write_nbytes(M_RUNTIME2B, sizeof(motor.runTime), &motor.runTime);
 800242c:	4a09      	ldr	r2, [pc, #36]	@ (8002454 <motor_set_runtime+0x140>)
 800242e:	2102      	movs	r1, #2
 8002430:	2008      	movs	r0, #8
 8002432:	f001 fbdb 	bl	8003bec <eeprom_write_nbytes>
		// test memory
		eeprom_read_nbytes(M_RUNTIME2B, sizeof(motor.runTime), &motor.runTime);
 8002436:	4a07      	ldr	r2, [pc, #28]	@ (8002454 <motor_set_runtime+0x140>)
 8002438:	2102      	movs	r1, #2
 800243a:	2008      	movs	r0, #8
 800243c:	f001 fbff 	bl	8003c3e <eeprom_read_nbytes>
		printf(">Setting saved! Runtime: %i\r\n\r\n", (int)motor.runTime);
 8002440:	4b04      	ldr	r3, [pc, #16]	@ (8002454 <motor_set_runtime+0x140>)
 8002442:	881b      	ldrh	r3, [r3, #0]
 8002444:	4619      	mov	r1, r3
 8002446:	480b      	ldr	r0, [pc, #44]	@ (8002474 <motor_set_runtime+0x160>)
 8002448:	f007 f92e 	bl	80096a8 <iprintf>
	}
}
 800244c:	bf00      	nop
 800244e:	37a0      	adds	r7, #160	@ 0xa0
 8002450:	46bd      	mov	sp, r7
 8002452:	bdb0      	pop	{r4, r5, r7, pc}
 8002454:	20000010 	.word	0x20000010
 8002458:	0800baa8 	.word	0x0800baa8
 800245c:	0800bad4 	.word	0x0800bad4
 8002460:	0800bb88 	.word	0x0800bb88
 8002464:	0800b894 	.word	0x0800b894
 8002468:	0800bb20 	.word	0x0800bb20
 800246c:	0800bb30 	.word	0x0800bb30
 8002470:	0800bb50 	.word	0x0800bb50
 8002474:	0800bb68 	.word	0x0800bb68

08002478 <motor_set_sampling_period>:

/* Set the ADC sampling period while motor is running
 * This time should be shorter than motor runtime
 * The ADC will take a sample of Vin, motor I and chip temperature every x ms */
void motor_set_sampling_period(void){
 8002478:	b5b0      	push	{r4, r5, r7, lr}
 800247a:	b0aa      	sub	sp, #168	@ 0xa8
 800247c:	af02      	add	r7, sp, #8
	printf("\r\n>Current ADC sampling period: %i ms [default=%i]\r\n", motor.samplePeriod, MOTOR_SAMPLE_PERIOD_DEFAULT);
 800247e:	4b57      	ldr	r3, [pc, #348]	@ (80025dc <motor_set_sampling_period+0x164>)
 8002480:	885b      	ldrh	r3, [r3, #2]
 8002482:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002486:	4619      	mov	r1, r3
 8002488:	4855      	ldr	r0, [pc, #340]	@ (80025e0 <motor_set_sampling_period+0x168>)
 800248a:	f007 f90d 	bl	80096a8 <iprintf>
	char sPeriod[4];
	char sPeriodPrompt[100];
	sprintf(sPeriodPrompt, ">[exit=%04i]Enter ADC sampling time (4-digits) in milliseconds [%04i-%04i]: ", 0, MOTOR_SAMPLE_PERIOD_MIN, MOTOR_SAMPLE_PERIOD_MAX);
 800248e:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8002492:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002496:	9300      	str	r3, [sp, #0]
 8002498:	2364      	movs	r3, #100	@ 0x64
 800249a:	2200      	movs	r2, #0
 800249c:	4951      	ldr	r1, [pc, #324]	@ (80025e4 <motor_set_sampling_period+0x16c>)
 800249e:	f007 fa27 	bl	80098f0 <siprintf>
	char sPeriodError[] = "\r\n** Enter only numbers! **\r\n";
 80024a2:	4b51      	ldr	r3, [pc, #324]	@ (80025e8 <motor_set_sampling_period+0x170>)
 80024a4:	f107 0410 	add.w	r4, r7, #16
 80024a8:	461d      	mov	r5, r3
 80024aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024ae:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80024b2:	c407      	stmia	r4!, {r0, r1, r2}
 80024b4:	8023      	strh	r3, [r4, #0]
	char sPeriodCheck[] = {'0','1','2','3','4','5','6','7','8','9'};
 80024b6:	4a4d      	ldr	r2, [pc, #308]	@ (80025ec <motor_set_sampling_period+0x174>)
 80024b8:	1d3b      	adds	r3, r7, #4
 80024ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80024bc:	c303      	stmia	r3!, {r0, r1}
 80024be:	801a      	strh	r2, [r3, #0]
	uint8_t spFlag, exitFlag = 0;
 80024c0:	2300      	movs	r3, #0
 80024c2:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
	do{
		spFlag = 0;
 80024c6:	2300      	movs	r3, #0
 80024c8:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
		get_user_input(sPeriodPrompt, sPeriodError, 4, sPeriodCheck, sPeriod);
 80024cc:	1d3a      	adds	r2, r7, #4
 80024ce:	f107 0110 	add.w	r1, r7, #16
 80024d2:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80024d6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	4613      	mov	r3, r2
 80024de:	2204      	movs	r2, #4
 80024e0:	f000 fb1c 	bl	8002b1c <get_user_input>
		uint32_t sp = ( (sPeriod[0] - '0') * 1000 + (sPeriod[1] - '0') * 100 + (sPeriod[2] - '0') * 10 + (sPeriod[3] - '0') );
 80024e4:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 80024e8:	3b30      	subs	r3, #48	@ 0x30
 80024ea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80024ee:	fb03 f202 	mul.w	r2, r3, r2
 80024f2:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 80024f6:	3b30      	subs	r3, #48	@ 0x30
 80024f8:	2164      	movs	r1, #100	@ 0x64
 80024fa:	fb01 f303 	mul.w	r3, r1, r3
 80024fe:	18d1      	adds	r1, r2, r3
 8002500:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8002504:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8002508:	4613      	mov	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4413      	add	r3, r2
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	18ca      	adds	r2, r1, r3
 8002512:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8002516:	3b30      	subs	r3, #48	@ 0x30
 8002518:	4413      	add	r3, r2
 800251a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		// check to exit
		if(sp == 0){
 800251e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002522:	2b00      	cmp	r3, #0
 8002524:	d106      	bne.n	8002534 <motor_set_sampling_period+0xbc>
			printf("\r\n** Exit **\r\n");
 8002526:	4832      	ldr	r0, [pc, #200]	@ (80025f0 <motor_set_sampling_period+0x178>)
 8002528:	f007 f926 	bl	8009778 <puts>
			exitFlag = 1;
 800252c:	2301      	movs	r3, #1
 800252e:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
			break;
 8002532:	e01f      	b.n	8002574 <motor_set_sampling_period+0xfc>
		}
		// check if values are valid
		if(( sp >= MOTOR_SAMPLE_PERIOD_MIN) && (sp <= MOTOR_SAMPLE_PERIOD_MAX) && sp < motor.runTime){
 8002534:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002538:	2b63      	cmp	r3, #99	@ 0x63
 800253a:	d914      	bls.n	8002566 <motor_set_sampling_period+0xee>
 800253c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002540:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002544:	d80f      	bhi.n	8002566 <motor_set_sampling_period+0xee>
 8002546:	4b25      	ldr	r3, [pc, #148]	@ (80025dc <motor_set_sampling_period+0x164>)
 8002548:	881b      	ldrh	r3, [r3, #0]
 800254a:	461a      	mov	r2, r3
 800254c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002550:	4293      	cmp	r3, r2
 8002552:	d208      	bcs.n	8002566 <motor_set_sampling_period+0xee>
			motor.samplePeriod = (uint16_t) sp;
 8002554:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002558:	b29a      	uxth	r2, r3
 800255a:	4b20      	ldr	r3, [pc, #128]	@ (80025dc <motor_set_sampling_period+0x164>)
 800255c:	805a      	strh	r2, [r3, #2]
			spFlag = 1;
 800255e:	2301      	movs	r3, #1
 8002560:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 8002564:	e002      	b.n	800256c <motor_set_sampling_period+0xf4>
		} else {
			printf("\r\n** Value out of range or greater than runtime! **\r\n");
 8002566:	4823      	ldr	r0, [pc, #140]	@ (80025f4 <motor_set_sampling_period+0x17c>)
 8002568:	f007 f906 	bl	8009778 <puts>
		}
	} while( !spFlag);
 800256c:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0a8      	beq.n	80024c6 <motor_set_sampling_period+0x4e>
	// update values if it was not an exit
	if(!exitFlag){
 8002574:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8002578:	2b00      	cmp	r3, #0
 800257a:	d12b      	bne.n	80025d4 <motor_set_sampling_period+0x15c>
		// Print all inputs
		printf(">Motor ADC Sample Period: %i ms\r\n", (int)motor.samplePeriod);
 800257c:	4b17      	ldr	r3, [pc, #92]	@ (80025dc <motor_set_sampling_period+0x164>)
 800257e:	885b      	ldrh	r3, [r3, #2]
 8002580:	4619      	mov	r1, r3
 8002582:	481d      	ldr	r0, [pc, #116]	@ (80025f8 <motor_set_sampling_period+0x180>)
 8002584:	f007 f890 	bl	80096a8 <iprintf>
		// store in eeprom
		eeprom_write_nbytes(M_SAMPLEPERIOD2B, sizeof(motor.samplePeriod), &motor.samplePeriod);
 8002588:	4a1c      	ldr	r2, [pc, #112]	@ (80025fc <motor_set_sampling_period+0x184>)
 800258a:	2102      	movs	r1, #2
 800258c:	200c      	movs	r0, #12
 800258e:	f001 fb2d 	bl	8003bec <eeprom_write_nbytes>
		// test memory
		eeprom_read_nbytes(M_SAMPLEPERIOD2B, sizeof(motor.samplePeriod), &motor.samplePeriod);
 8002592:	4a1a      	ldr	r2, [pc, #104]	@ (80025fc <motor_set_sampling_period+0x184>)
 8002594:	2102      	movs	r1, #2
 8002596:	200c      	movs	r0, #12
 8002598:	f001 fb51 	bl	8003c3e <eeprom_read_nbytes>
		printf(">Setting saved! Sample Period: %i\r\n\r\n", (int)motor.samplePeriod);
 800259c:	4b0f      	ldr	r3, [pc, #60]	@ (80025dc <motor_set_sampling_period+0x164>)
 800259e:	885b      	ldrh	r3, [r3, #2]
 80025a0:	4619      	mov	r1, r3
 80025a2:	4817      	ldr	r0, [pc, #92]	@ (8002600 <motor_set_sampling_period+0x188>)
 80025a4:	f007 f880 	bl	80096a8 <iprintf>
		// verify value read is ok
		if( !(motor.samplePeriod >= MOTOR_SAMPLE_PERIOD_MIN && motor.samplePeriod <= MOTOR_SAMPLE_PERIOD_MAX)){
 80025a8:	4b0c      	ldr	r3, [pc, #48]	@ (80025dc <motor_set_sampling_period+0x164>)
 80025aa:	885b      	ldrh	r3, [r3, #2]
 80025ac:	2b63      	cmp	r3, #99	@ 0x63
 80025ae:	d904      	bls.n	80025ba <motor_set_sampling_period+0x142>
 80025b0:	4b0a      	ldr	r3, [pc, #40]	@ (80025dc <motor_set_sampling_period+0x164>)
 80025b2:	885b      	ldrh	r3, [r3, #2]
 80025b4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80025b8:	d903      	bls.n	80025c2 <motor_set_sampling_period+0x14a>
			motor.samplePeriod = MOTOR_SAMPLE_PERIOD_DEFAULT;
 80025ba:	4b08      	ldr	r3, [pc, #32]	@ (80025dc <motor_set_sampling_period+0x164>)
 80025bc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80025c0:	805a      	strh	r2, [r3, #2]
		}
		// update timer PWM registers
		update_timer(&htim4, motor.samplePeriod, 4, 0.5);
 80025c2:	4b06      	ldr	r3, [pc, #24]	@ (80025dc <motor_set_sampling_period+0x164>)
 80025c4:	885b      	ldrh	r3, [r3, #2]
 80025c6:	4619      	mov	r1, r3
 80025c8:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 80025cc:	2204      	movs	r2, #4
 80025ce:	480d      	ldr	r0, [pc, #52]	@ (8002604 <motor_set_sampling_period+0x18c>)
 80025d0:	f000 f8f4 	bl	80027bc <update_timer>
	}
}
 80025d4:	bf00      	nop
 80025d6:	37a0      	adds	r7, #160	@ 0xa0
 80025d8:	46bd      	mov	sp, r7
 80025da:	bdb0      	pop	{r4, r5, r7, pc}
 80025dc:	20000010 	.word	0x20000010
 80025e0:	0800bba8 	.word	0x0800bba8
 80025e4:	0800bbe0 	.word	0x0800bbe0
 80025e8:	0800bb88 	.word	0x0800bb88
 80025ec:	0800b894 	.word	0x0800b894
 80025f0:	0800bb20 	.word	0x0800bb20
 80025f4:	0800bc30 	.word	0x0800bc30
 80025f8:	0800bc68 	.word	0x0800bc68
 80025fc:	20000012 	.word	0x20000012
 8002600:	0800bc8c 	.word	0x0800bc8c
 8002604:	200001dc 	.word	0x200001dc

08002608 <motor_set_pwm_freq>:


/* Set motor PWM frequency Hz to drive DRV8826 STEP pin */
void motor_set_pwm_freq(void){
 8002608:	b5b0      	push	{r4, r5, r7, lr}
 800260a:	b0aa      	sub	sp, #168	@ 0xa8
 800260c:	af02      	add	r7, sp, #8
	printf("\r\n>Current PWM frequency: %i Hz [default=%i]\r\n", motor.pwmFreq, MOTOR_PWM_FREQ_DEFAULT);
 800260e:	4b60      	ldr	r3, [pc, #384]	@ (8002790 <motor_set_pwm_freq+0x188>)
 8002610:	889b      	ldrh	r3, [r3, #4]
 8002612:	22c8      	movs	r2, #200	@ 0xc8
 8002614:	4619      	mov	r1, r3
 8002616:	485f      	ldr	r0, [pc, #380]	@ (8002794 <motor_set_pwm_freq+0x18c>)
 8002618:	f007 f846 	bl	80096a8 <iprintf>
	char pwmf[4];
	char pwmfPrompt[100];
	sprintf(pwmfPrompt, ">[exit=%04i]Enter PWM frequency (4-digits) in Hz [%04i-%04i]: ", 0 ,MOTOR_PWM_FREQ_MIN, MOTOR_PWM_FREQ_MAX);
 800261c:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8002620:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	2332      	movs	r3, #50	@ 0x32
 8002628:	2200      	movs	r2, #0
 800262a:	495b      	ldr	r1, [pc, #364]	@ (8002798 <motor_set_pwm_freq+0x190>)
 800262c:	f007 f960 	bl	80098f0 <siprintf>
	char pwmfError[] = "\r\n** Enter only numbers! **\r\n";
 8002630:	4b5a      	ldr	r3, [pc, #360]	@ (800279c <motor_set_pwm_freq+0x194>)
 8002632:	f107 040c 	add.w	r4, r7, #12
 8002636:	461d      	mov	r5, r3
 8002638:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800263a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800263c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002640:	c407      	stmia	r4!, {r0, r1, r2}
 8002642:	8023      	strh	r3, [r4, #0]
	char pwmfCheck[] = {'0','1','2','3','4','5','6','7','8','9'};
 8002644:	4a56      	ldr	r2, [pc, #344]	@ (80027a0 <motor_set_pwm_freq+0x198>)
 8002646:	463b      	mov	r3, r7
 8002648:	ca07      	ldmia	r2, {r0, r1, r2}
 800264a:	c303      	stmia	r3!, {r0, r1}
 800264c:	801a      	strh	r2, [r3, #0]
	uint8_t pwmfFlag, exitFlag = 0;
 800264e:	2300      	movs	r3, #0
 8002650:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
	do{
		pwmfFlag = 0;
 8002654:	2300      	movs	r3, #0
 8002656:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
		get_user_input(pwmfPrompt, pwmfError, 4, pwmfCheck, pwmf);
 800265a:	463a      	mov	r2, r7
 800265c:	f107 010c 	add.w	r1, r7, #12
 8002660:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8002664:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	4613      	mov	r3, r2
 800266c:	2204      	movs	r2, #4
 800266e:	f000 fa55 	bl	8002b1c <get_user_input>
		uint32_t f = ( (pwmf[0] - '0') * 1000 + (pwmf[1] - '0') * 100 + (pwmf[2] - '0') * 10 + (pwmf[3] - '0') );
 8002672:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 8002676:	3b30      	subs	r3, #48	@ 0x30
 8002678:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800267c:	fb03 f202 	mul.w	r2, r3, r2
 8002680:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 8002684:	3b30      	subs	r3, #48	@ 0x30
 8002686:	2164      	movs	r1, #100	@ 0x64
 8002688:	fb01 f303 	mul.w	r3, r1, r3
 800268c:	18d1      	adds	r1, r2, r3
 800268e:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 8002692:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8002696:	4613      	mov	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4413      	add	r3, r2
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	18ca      	adds	r2, r1, r3
 80026a0:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 80026a4:	3b30      	subs	r3, #48	@ 0x30
 80026a6:	4413      	add	r3, r2
 80026a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		// exit if user entered 0
		if(f == 0){
 80026ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d106      	bne.n	80026c2 <motor_set_pwm_freq+0xba>
			printf("\r\n** Exit **\r\n");
 80026b4:	483b      	ldr	r0, [pc, #236]	@ (80027a4 <motor_set_pwm_freq+0x19c>)
 80026b6:	f007 f85f 	bl	8009778 <puts>
			exitFlag = 1;
 80026ba:	2301      	movs	r3, #1
 80026bc:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
			break;
 80026c0:	e018      	b.n	80026f4 <motor_set_pwm_freq+0xec>
		}
		if(( f >= MOTOR_PWM_FREQ_MIN) && (f <= MOTOR_PWM_FREQ_MAX)){
 80026c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80026c6:	2b31      	cmp	r3, #49	@ 0x31
 80026c8:	d90d      	bls.n	80026e6 <motor_set_pwm_freq+0xde>
 80026ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80026ce:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80026d2:	d808      	bhi.n	80026e6 <motor_set_pwm_freq+0xde>
			motor.pwmFreq = (uint16_t) f;
 80026d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80026d8:	b29a      	uxth	r2, r3
 80026da:	4b2d      	ldr	r3, [pc, #180]	@ (8002790 <motor_set_pwm_freq+0x188>)
 80026dc:	809a      	strh	r2, [r3, #4]
			pwmfFlag = 1;
 80026de:	2301      	movs	r3, #1
 80026e0:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 80026e4:	e002      	b.n	80026ec <motor_set_pwm_freq+0xe4>
		} else {
			printf("\r\n** Value out of range! **\r\n");
 80026e6:	4830      	ldr	r0, [pc, #192]	@ (80027a8 <motor_set_pwm_freq+0x1a0>)
 80026e8:	f007 f846 	bl	8009778 <puts>
		}
	} while(!pwmfFlag);
 80026ec:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0af      	beq.n	8002654 <motor_set_pwm_freq+0x4c>
	// update values if it was not an exit
	if(!exitFlag){
 80026f4:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d13e      	bne.n	800277a <motor_set_pwm_freq+0x172>
		// Print all inputs
		printf(">Motor PWM frequency: %i Hz\r\n", (int)motor.pwmFreq);
 80026fc:	4b24      	ldr	r3, [pc, #144]	@ (8002790 <motor_set_pwm_freq+0x188>)
 80026fe:	889b      	ldrh	r3, [r3, #4]
 8002700:	4619      	mov	r1, r3
 8002702:	482a      	ldr	r0, [pc, #168]	@ (80027ac <motor_set_pwm_freq+0x1a4>)
 8002704:	f006 ffd0 	bl	80096a8 <iprintf>
		// store in eeprom
		eeprom_write_nbytes(M_PWM_FREQ2B, sizeof(motor.pwmFreq), &motor.pwmFreq);
 8002708:	4a29      	ldr	r2, [pc, #164]	@ (80027b0 <motor_set_pwm_freq+0x1a8>)
 800270a:	2102      	movs	r1, #2
 800270c:	200a      	movs	r0, #10
 800270e:	f001 fa6d 	bl	8003bec <eeprom_write_nbytes>
		// test memory
		eeprom_read_nbytes(M_PWM_FREQ2B, sizeof(motor.pwmFreq), &motor.pwmFreq);
 8002712:	4a27      	ldr	r2, [pc, #156]	@ (80027b0 <motor_set_pwm_freq+0x1a8>)
 8002714:	2102      	movs	r1, #2
 8002716:	200a      	movs	r0, #10
 8002718:	f001 fa91 	bl	8003c3e <eeprom_read_nbytes>
		printf(">Setting saved! PWM Freq: %i\r\n\r\n", (int)motor.pwmFreq);
 800271c:	4b1c      	ldr	r3, [pc, #112]	@ (8002790 <motor_set_pwm_freq+0x188>)
 800271e:	889b      	ldrh	r3, [r3, #4]
 8002720:	4619      	mov	r1, r3
 8002722:	4824      	ldr	r0, [pc, #144]	@ (80027b4 <motor_set_pwm_freq+0x1ac>)
 8002724:	f006 ffc0 	bl	80096a8 <iprintf>
		// verify value read is ok
		if( !(motor.pwmFreq >= MOTOR_PWM_FREQ_MIN && motor.pwmFreq <= MOTOR_PWM_FREQ_MAX)){
 8002728:	4b19      	ldr	r3, [pc, #100]	@ (8002790 <motor_set_pwm_freq+0x188>)
 800272a:	889b      	ldrh	r3, [r3, #4]
 800272c:	2b31      	cmp	r3, #49	@ 0x31
 800272e:	d904      	bls.n	800273a <motor_set_pwm_freq+0x132>
 8002730:	4b17      	ldr	r3, [pc, #92]	@ (8002790 <motor_set_pwm_freq+0x188>)
 8002732:	889b      	ldrh	r3, [r3, #4]
 8002734:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002738:	d902      	bls.n	8002740 <motor_set_pwm_freq+0x138>
			motor.pwmFreq = MOTOR_PWM_FREQ_DEFAULT;
 800273a:	4b15      	ldr	r3, [pc, #84]	@ (8002790 <motor_set_pwm_freq+0x188>)
 800273c:	22c8      	movs	r2, #200	@ 0xc8
 800273e:	809a      	strh	r2, [r3, #4]
		}
		// get period from frequency
		uint32_t pwmPeriod = 1E6/motor.pwmFreq; // PWM period in us -> 1E6/200 Hz = 5000 us
 8002740:	4b13      	ldr	r3, [pc, #76]	@ (8002790 <motor_set_pwm_freq+0x188>)
 8002742:	889b      	ldrh	r3, [r3, #4]
 8002744:	4618      	mov	r0, r3
 8002746:	f7fd ff09 	bl	800055c <__aeabi_i2d>
 800274a:	4602      	mov	r2, r0
 800274c:	460b      	mov	r3, r1
 800274e:	a10e      	add	r1, pc, #56	@ (adr r1, 8002788 <motor_set_pwm_freq+0x180>)
 8002750:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002754:	f7fe f896 	bl	8000884 <__aeabi_ddiv>
 8002758:	4602      	mov	r2, r0
 800275a:	460b      	mov	r3, r1
 800275c:	4610      	mov	r0, r2
 800275e:	4619      	mov	r1, r3
 8002760:	f7fe f978 	bl	8000a54 <__aeabi_d2uiz>
 8002764:	4603      	mov	r3, r0
 8002766:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		// update timer PWM registers
		update_timer(&htim3, pwmPeriod, 3, 0.5);
 800276a:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 800276e:	2203      	movs	r2, #3
 8002770:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8002774:	4810      	ldr	r0, [pc, #64]	@ (80027b8 <motor_set_pwm_freq+0x1b0>)
 8002776:	f000 f821 	bl	80027bc <update_timer>
	}
}
 800277a:	bf00      	nop
 800277c:	37a0      	adds	r7, #160	@ 0xa0
 800277e:	46bd      	mov	sp, r7
 8002780:	bdb0      	pop	{r4, r5, r7, pc}
 8002782:	bf00      	nop
 8002784:	f3af 8000 	nop.w
 8002788:	00000000 	.word	0x00000000
 800278c:	412e8480 	.word	0x412e8480
 8002790:	20000010 	.word	0x20000010
 8002794:	0800bcb4 	.word	0x0800bcb4
 8002798:	0800bce4 	.word	0x0800bce4
 800279c:	0800bb88 	.word	0x0800bb88
 80027a0:	0800b894 	.word	0x0800b894
 80027a4:	0800bb20 	.word	0x0800bb20
 80027a8:	0800bb30 	.word	0x0800bb30
 80027ac:	0800bd24 	.word	0x0800bd24
 80027b0:	20000014 	.word	0x20000014
 80027b4:	0800bd44 	.word	0x0800bd44
 80027b8:	20000194 	.word	0x20000194

080027bc <update_timer>:

/* update timer Pulse (CCRx) and Period (ARR) registers */
void update_timer(TIM_HandleTypeDef * htim, uint32_t period, uint8_t channel , float dutyCycle){
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	603b      	str	r3, [r7, #0]
 80027c8:	4613      	mov	r3, r2
 80027ca:	71fb      	strb	r3, [r7, #7]
	// update timer registers with period and duty cycle See TIM_TypeDef definition
	// Example: Prescaler is 8, so  TIMER CLK = 8 MHz/8-> PWM f = 1 MHz  -> 1 cycle/1 us -> 1 rising edge / 1 us
	// ARR Auto Reload Register, counter Period: 5000-1 (5 ms)
	// CCR3 Capture Compare Register, channel 3 Pulse: 2500-1 (PWM mode 1 -> 0-2500 off, 2500-4999 on) 50% Duty cycle
	if( channel >= 1 && channel <= 4 && dutyCycle < 1 && dutyCycle > 0){
 80027cc:	79fb      	ldrb	r3, [r7, #7]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d04e      	beq.n	8002870 <update_timer+0xb4>
 80027d2:	79fb      	ldrb	r3, [r7, #7]
 80027d4:	2b04      	cmp	r3, #4
 80027d6:	d84b      	bhi.n	8002870 <update_timer+0xb4>
 80027d8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80027dc:	6838      	ldr	r0, [r7, #0]
 80027de:	f7fe fb05 	bl	8000dec <__aeabi_fcmplt>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d043      	beq.n	8002870 <update_timer+0xb4>
 80027e8:	f04f 0100 	mov.w	r1, #0
 80027ec:	6838      	ldr	r0, [r7, #0]
 80027ee:	f7fe fb1b 	bl	8000e28 <__aeabi_fcmpgt>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d03b      	beq.n	8002870 <update_timer+0xb4>
		uint32_t pulse = (uint32_t) ((float)period * dutyCycle);
 80027f8:	68b8      	ldr	r0, [r7, #8]
 80027fa:	f7fe fa51 	bl	8000ca0 <__aeabi_ui2f>
 80027fe:	4603      	mov	r3, r0
 8002800:	6839      	ldr	r1, [r7, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f7fd fca4 	bl	8000150 <__aeabi_fmul>
 8002808:	4603      	mov	r3, r0
 800280a:	4618      	mov	r0, r3
 800280c:	f7fe fb3c 	bl	8000e88 <__aeabi_f2uiz>
 8002810:	4603      	mov	r3, r0
 8002812:	617b      	str	r3, [r7, #20]
		htim->Instance->ARR = (uint32_t) (period - 1);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68ba      	ldr	r2, [r7, #8]
 800281a:	3a01      	subs	r2, #1
 800281c:	62da      	str	r2, [r3, #44]	@ 0x2c

		switch (channel){
 800281e:	79fb      	ldrb	r3, [r7, #7]
 8002820:	3b01      	subs	r3, #1
 8002822:	2b03      	cmp	r3, #3
 8002824:	d822      	bhi.n	800286c <update_timer+0xb0>
 8002826:	a201      	add	r2, pc, #4	@ (adr r2, 800282c <update_timer+0x70>)
 8002828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800282c:	0800283d 	.word	0x0800283d
 8002830:	08002849 	.word	0x08002849
 8002834:	08002855 	.word	0x08002855
 8002838:	08002861 	.word	0x08002861
		case 1:
			htim->Instance->CCR1 = pulse - 1;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	697a      	ldr	r2, [r7, #20]
 8002842:	3a01      	subs	r2, #1
 8002844:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 8002846:	e012      	b.n	800286e <update_timer+0xb2>
		case 2:
			htim->Instance->CCR2 = pulse - 1;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	697a      	ldr	r2, [r7, #20]
 800284e:	3a01      	subs	r2, #1
 8002850:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 8002852:	e00c      	b.n	800286e <update_timer+0xb2>
		case 3:
			htim->Instance->CCR3 = pulse - 1;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	697a      	ldr	r2, [r7, #20]
 800285a:	3a01      	subs	r2, #1
 800285c:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 800285e:	e006      	b.n	800286e <update_timer+0xb2>
		case 4:
			htim->Instance->CCR4 = pulse - 1;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	697a      	ldr	r2, [r7, #20]
 8002866:	3a01      	subs	r2, #1
 8002868:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 800286a:	e000      	b.n	800286e <update_timer+0xb2>
		default:
			break;
 800286c:	bf00      	nop
	if( channel >= 1 && channel <= 4 && dutyCycle < 1 && dutyCycle > 0){
 800286e:	e003      	b.n	8002878 <update_timer+0xbc>
		}
	} else {
		printf("\r\n** Timer registers could not be updated! **\r\n");
 8002870:	4803      	ldr	r0, [pc, #12]	@ (8002880 <update_timer+0xc4>)
 8002872:	f006 ff81 	bl	8009778 <puts>
	}
}
 8002876:	bf00      	nop
 8002878:	bf00      	nop
 800287a:	3718      	adds	r7, #24
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	0800bd68 	.word	0x0800bd68

08002884 <motor_set_wiring>:


/* Set the motor wiring mode according to the color sequence crimped
 * This will change the behavior of the retract/extend functions
 * cable sequence: blue, gren, black, red will make motor extend pin in CW direction with wiring mode = 0 */
void motor_set_wiring(void){
 8002884:	b5b0      	push	{r4, r5, r7, lr}
 8002886:	b09c      	sub	sp, #112	@ 0x70
 8002888:	af02      	add	r7, sp, #8
	printf("\r\n>Current motor wiring: %i [default=%i]\r\n", motor.wiring, MOTOR_WIRING_DEFAULT);
 800288a:	4b31      	ldr	r3, [pc, #196]	@ (8002950 <motor_set_wiring+0xcc>)
 800288c:	799b      	ldrb	r3, [r3, #6]
 800288e:	2200      	movs	r2, #0
 8002890:	4619      	mov	r1, r3
 8002892:	4830      	ldr	r0, [pc, #192]	@ (8002954 <motor_set_wiring+0xd0>)
 8002894:	f006 ff08 	bl	80096a8 <iprintf>
	char mw[1];
	char mwPrompt[] = ">Enter motor wiring code (1-digit number) [0-1]: ";
 8002898:	4b2f      	ldr	r3, [pc, #188]	@ (8002958 <motor_set_wiring+0xd4>)
 800289a:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800289e:	461d      	mov	r5, r3
 80028a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028ac:	682b      	ldr	r3, [r5, #0]
 80028ae:	8023      	strh	r3, [r4, #0]
	char mwError[] = "\r\n** Enter only numbers! **\r\n";
 80028b0:	4b2a      	ldr	r3, [pc, #168]	@ (800295c <motor_set_wiring+0xd8>)
 80028b2:	f107 0408 	add.w	r4, r7, #8
 80028b6:	461d      	mov	r5, r3
 80028b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80028c0:	c407      	stmia	r4!, {r0, r1, r2}
 80028c2:	8023      	strh	r3, [r4, #0]
	char mwCheck[] = {'0','1'};
 80028c4:	f243 1330 	movw	r3, #12592	@ 0x3130
 80028c8:	80bb      	strh	r3, [r7, #4]
	uint8_t mwFlag;
	do{
		mwFlag = 0;
 80028ca:	2300      	movs	r3, #0
 80028cc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		get_user_input(mwPrompt, mwError, 1, mwCheck, mw);
 80028d0:	1d3a      	adds	r2, r7, #4
 80028d2:	f107 0108 	add.w	r1, r7, #8
 80028d6:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80028da:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	4613      	mov	r3, r2
 80028e2:	2201      	movs	r2, #1
 80028e4:	f000 f91a 	bl	8002b1c <get_user_input>
		uint32_t w = (mw[0] - '0');
 80028e8:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 80028ec:	3b30      	subs	r3, #48	@ 0x30
 80028ee:	663b      	str	r3, [r7, #96]	@ 0x60
		if( w == 1 || w == 0){
 80028f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d002      	beq.n	80028fc <motor_set_wiring+0x78>
 80028f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d107      	bne.n	800290c <motor_set_wiring+0x88>
			motor.wiring = (uint8_t) w;
 80028fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80028fe:	b2da      	uxtb	r2, r3
 8002900:	4b13      	ldr	r3, [pc, #76]	@ (8002950 <motor_set_wiring+0xcc>)
 8002902:	719a      	strb	r2, [r3, #6]
			mwFlag = 1;
 8002904:	2301      	movs	r3, #1
 8002906:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800290a:	e002      	b.n	8002912 <motor_set_wiring+0x8e>
		} else {
			printf("\r\n** Value out of range! **\r\n");
 800290c:	4814      	ldr	r0, [pc, #80]	@ (8002960 <motor_set_wiring+0xdc>)
 800290e:	f006 ff33 	bl	8009778 <puts>
		}
	} while(!mwFlag);
 8002912:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0d7      	beq.n	80028ca <motor_set_wiring+0x46>
	// Print all inputs
	printf(">Motor wiring code: %i\r\n", (int)motor.wiring);
 800291a:	4b0d      	ldr	r3, [pc, #52]	@ (8002950 <motor_set_wiring+0xcc>)
 800291c:	799b      	ldrb	r3, [r3, #6]
 800291e:	4619      	mov	r1, r3
 8002920:	4810      	ldr	r0, [pc, #64]	@ (8002964 <motor_set_wiring+0xe0>)
 8002922:	f006 fec1 	bl	80096a8 <iprintf>
	// store in eeprom
	eeprom_write_nbytes(M_WIRING1B, sizeof(motor.wiring), &motor.wiring);
 8002926:	4a10      	ldr	r2, [pc, #64]	@ (8002968 <motor_set_wiring+0xe4>)
 8002928:	2101      	movs	r1, #1
 800292a:	200e      	movs	r0, #14
 800292c:	f001 f95e 	bl	8003bec <eeprom_write_nbytes>
	// test memory
	eeprom_read_nbytes(M_WIRING1B, sizeof(motor.wiring), &motor.wiring);
 8002930:	4a0d      	ldr	r2, [pc, #52]	@ (8002968 <motor_set_wiring+0xe4>)
 8002932:	2101      	movs	r1, #1
 8002934:	200e      	movs	r0, #14
 8002936:	f001 f982 	bl	8003c3e <eeprom_read_nbytes>
	printf(">Setting saved! Motor wiring: %i\r\n\r\n", (int)motor.wiring);
 800293a:	4b05      	ldr	r3, [pc, #20]	@ (8002950 <motor_set_wiring+0xcc>)
 800293c:	799b      	ldrb	r3, [r3, #6]
 800293e:	4619      	mov	r1, r3
 8002940:	480a      	ldr	r0, [pc, #40]	@ (800296c <motor_set_wiring+0xe8>)
 8002942:	f006 feb1 	bl	80096a8 <iprintf>
}
 8002946:	bf00      	nop
 8002948:	3768      	adds	r7, #104	@ 0x68
 800294a:	46bd      	mov	sp, r7
 800294c:	bdb0      	pop	{r4, r5, r7, pc}
 800294e:	bf00      	nop
 8002950:	20000010 	.word	0x20000010
 8002954:	0800bd98 	.word	0x0800bd98
 8002958:	0800be08 	.word	0x0800be08
 800295c:	0800bb88 	.word	0x0800bb88
 8002960:	0800bb30 	.word	0x0800bb30
 8002964:	0800bdc4 	.word	0x0800bdc4
 8002968:	20000016 	.word	0x20000016
 800296c:	0800bde0 	.word	0x0800bde0

08002970 <motor_reset_stats>:

/* Cleare the memory locations corresponding to motor count and Imax for ALL motors */
void motor_reset_stats(void){
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
	uint8_t slots = eeprom_clear(M_1COUNT2B, M_8MXAMP2B+2);
 8002976:	2130      	movs	r1, #48	@ 0x30
 8002978:	2010      	movs	r0, #16
 800297a:	f001 f833 	bl	80039e4 <eeprom_clear>
 800297e:	4603      	mov	r3, r0
 8002980:	71fb      	strb	r3, [r7, #7]
	printf("\r\n>%i bytes cleared\r\n", slots);
 8002982:	79fb      	ldrb	r3, [r7, #7]
 8002984:	4619      	mov	r1, r3
 8002986:	4804      	ldr	r0, [pc, #16]	@ (8002998 <motor_reset_stats+0x28>)
 8002988:	f006 fe8e 	bl	80096a8 <iprintf>
	motor_read_stats();
 800298c:	f7ff fc20 	bl	80021d0 <motor_read_stats>
}
 8002990:	bf00      	nop
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	0800be3c 	.word	0x0800be3c
 800299c:	00000000 	.word	0x00000000

080029a0 <motor_read_parameters>:

/* Read all motor configuration parameters
 * And display if the program is using values from memory or defaults */
void motor_read_parameters(void){
 80029a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029a2:	b093      	sub	sp, #76	@ 0x4c
 80029a4:	af06      	add	r7, sp, #24
	// read motor parameters from eeprom
	motor_t tempMotor;
	eeprom_read_nbytes(M_RUNTIME2B, sizeof(tempMotor.runTime), &tempMotor.runTime);
 80029a6:	463b      	mov	r3, r7
 80029a8:	461a      	mov	r2, r3
 80029aa:	2102      	movs	r1, #2
 80029ac:	2008      	movs	r0, #8
 80029ae:	f001 f946 	bl	8003c3e <eeprom_read_nbytes>
	eeprom_read_nbytes(M_SAMPLEPERIOD2B, sizeof(tempMotor.samplePeriod), &tempMotor.samplePeriod);
 80029b2:	463b      	mov	r3, r7
 80029b4:	3302      	adds	r3, #2
 80029b6:	461a      	mov	r2, r3
 80029b8:	2102      	movs	r1, #2
 80029ba:	200c      	movs	r0, #12
 80029bc:	f001 f93f 	bl	8003c3e <eeprom_read_nbytes>
	eeprom_read_nbytes(M_PWM_FREQ2B, sizeof(tempMotor.pwmFreq), &tempMotor.pwmFreq);
 80029c0:	463b      	mov	r3, r7
 80029c2:	3304      	adds	r3, #4
 80029c4:	461a      	mov	r2, r3
 80029c6:	2102      	movs	r1, #2
 80029c8:	200a      	movs	r0, #10
 80029ca:	f001 f938 	bl	8003c3e <eeprom_read_nbytes>
	eeprom_read_nbytes(M_WIRING1B, sizeof(tempMotor.wiring), &tempMotor.wiring);
 80029ce:	463b      	mov	r3, r7
 80029d0:	3306      	adds	r3, #6
 80029d2:	461a      	mov	r2, r3
 80029d4:	2101      	movs	r1, #1
 80029d6:	200e      	movs	r0, #14
 80029d8:	f001 f931 	bl	8003c3e <eeprom_read_nbytes>
	// check values are within range or use defaults {flag = 'N'}
	char rtFlag = 'D', spFlag = 'D', pfFlag = 'D', wFlag = 'D'; // using default values?
 80029dc:	2344      	movs	r3, #68	@ 0x44
 80029de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80029e2:	2344      	movs	r3, #68	@ 0x44
 80029e4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80029e8:	2344      	movs	r3, #68	@ 0x44
 80029ea:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80029ee:	2344      	movs	r3, #68	@ 0x44
 80029f0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	if(tempMotor.runTime >= MOTOR_RUNTIME_MIN && tempMotor.runTime <= MOTOR_RUNTIME_MAX){
 80029f4:	883b      	ldrh	r3, [r7, #0]
 80029f6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80029fa:	d30a      	bcc.n	8002a12 <motor_read_parameters+0x72>
 80029fc:	883b      	ldrh	r3, [r7, #0]
 80029fe:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d805      	bhi.n	8002a12 <motor_read_parameters+0x72>
		motor.runTime = tempMotor.runTime;
 8002a06:	883a      	ldrh	r2, [r7, #0]
 8002a08:	4b3d      	ldr	r3, [pc, #244]	@ (8002b00 <motor_read_parameters+0x160>)
 8002a0a:	801a      	strh	r2, [r3, #0]
		rtFlag = 'M';
 8002a0c:	234d      	movs	r3, #77	@ 0x4d
 8002a0e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	}
	if(tempMotor.samplePeriod >= MOTOR_SAMPLE_PERIOD_MIN && tempMotor.samplePeriod <= MOTOR_SAMPLE_PERIOD_MAX && tempMotor.samplePeriod <= motor.runTime){
 8002a12:	887b      	ldrh	r3, [r7, #2]
 8002a14:	2b63      	cmp	r3, #99	@ 0x63
 8002a16:	d90e      	bls.n	8002a36 <motor_read_parameters+0x96>
 8002a18:	887b      	ldrh	r3, [r7, #2]
 8002a1a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002a1e:	d80a      	bhi.n	8002a36 <motor_read_parameters+0x96>
 8002a20:	887a      	ldrh	r2, [r7, #2]
 8002a22:	4b37      	ldr	r3, [pc, #220]	@ (8002b00 <motor_read_parameters+0x160>)
 8002a24:	881b      	ldrh	r3, [r3, #0]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d805      	bhi.n	8002a36 <motor_read_parameters+0x96>
		motor.samplePeriod = tempMotor.samplePeriod;
 8002a2a:	887a      	ldrh	r2, [r7, #2]
 8002a2c:	4b34      	ldr	r3, [pc, #208]	@ (8002b00 <motor_read_parameters+0x160>)
 8002a2e:	805a      	strh	r2, [r3, #2]
		spFlag = 'M';
 8002a30:	234d      	movs	r3, #77	@ 0x4d
 8002a32:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	}
	if(tempMotor.pwmFreq >= MOTOR_PWM_FREQ_MIN && tempMotor.pwmFreq <= MOTOR_PWM_FREQ_MAX){
 8002a36:	88bb      	ldrh	r3, [r7, #4]
 8002a38:	2b31      	cmp	r3, #49	@ 0x31
 8002a3a:	d909      	bls.n	8002a50 <motor_read_parameters+0xb0>
 8002a3c:	88bb      	ldrh	r3, [r7, #4]
 8002a3e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002a42:	d805      	bhi.n	8002a50 <motor_read_parameters+0xb0>
		motor.pwmFreq = tempMotor.pwmFreq;
 8002a44:	88ba      	ldrh	r2, [r7, #4]
 8002a46:	4b2e      	ldr	r3, [pc, #184]	@ (8002b00 <motor_read_parameters+0x160>)
 8002a48:	809a      	strh	r2, [r3, #4]
		pfFlag = 'M';
 8002a4a:	234d      	movs	r3, #77	@ 0x4d
 8002a4c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	}
	if(tempMotor.wiring == 0 || tempMotor.wiring == 1){
 8002a50:	79bb      	ldrb	r3, [r7, #6]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d002      	beq.n	8002a5c <motor_read_parameters+0xbc>
 8002a56:	79bb      	ldrb	r3, [r7, #6]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d105      	bne.n	8002a68 <motor_read_parameters+0xc8>
		motor.wiring = tempMotor.wiring;
 8002a5c:	79ba      	ldrb	r2, [r7, #6]
 8002a5e:	4b28      	ldr	r3, [pc, #160]	@ (8002b00 <motor_read_parameters+0x160>)
 8002a60:	719a      	strb	r2, [r3, #6]
		wFlag = 'M';
 8002a62:	234d      	movs	r3, #77	@ 0x4d
 8002a64:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	}
	// update timer registers
	uint32_t pwmPeriod = 1E6/motor.pwmFreq; // PWM period in us -> 1E6/200 Hz = 5000 us
 8002a68:	4b25      	ldr	r3, [pc, #148]	@ (8002b00 <motor_read_parameters+0x160>)
 8002a6a:	889b      	ldrh	r3, [r3, #4]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7fd fd75 	bl	800055c <__aeabi_i2d>
 8002a72:	4602      	mov	r2, r0
 8002a74:	460b      	mov	r3, r1
 8002a76:	a120      	add	r1, pc, #128	@ (adr r1, 8002af8 <motor_read_parameters+0x158>)
 8002a78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a7c:	f7fd ff02 	bl	8000884 <__aeabi_ddiv>
 8002a80:	4602      	mov	r2, r0
 8002a82:	460b      	mov	r3, r1
 8002a84:	4610      	mov	r0, r2
 8002a86:	4619      	mov	r1, r3
 8002a88:	f7fd ffe4 	bl	8000a54 <__aeabi_d2uiz>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
	update_timer(&htim3, pwmPeriod, 3, 0.5); // timer 3 motor PWM steps
 8002a90:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8002a94:	2203      	movs	r2, #3
 8002a96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a98:	481a      	ldr	r0, [pc, #104]	@ (8002b04 <motor_read_parameters+0x164>)
 8002a9a:	f7ff fe8f 	bl	80027bc <update_timer>
	update_timer(&htim4, motor.samplePeriod, 4, 0.5); // tiemr 4 ADC sampling period
 8002a9e:	4b18      	ldr	r3, [pc, #96]	@ (8002b00 <motor_read_parameters+0x160>)
 8002aa0:	885b      	ldrh	r3, [r3, #2]
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8002aa8:	2204      	movs	r2, #4
 8002aaa:	4817      	ldr	r0, [pc, #92]	@ (8002b08 <motor_read_parameters+0x168>)
 8002aac:	f7ff fe86 	bl	80027bc <update_timer>
	// print all parameters
	printf("\r\n>Non-Volatile Memory {M} OR Default {D}\r\n<MOTOR> Runtime: %i ms {%c} | PWM Frequency: %i Hz {%c} | Sample Period: %i ms {%c} | Wiring: %i {%c} \r\n",
			 (int)motor.runTime, rtFlag, (int)motor.pwmFreq, spFlag, (int)motor.samplePeriod, pfFlag,  (int)motor.wiring, wFlag);
 8002ab0:	4b13      	ldr	r3, [pc, #76]	@ (8002b00 <motor_read_parameters+0x160>)
 8002ab2:	881b      	ldrh	r3, [r3, #0]
	printf("\r\n>Non-Volatile Memory {M} OR Default {D}\r\n<MOTOR> Runtime: %i ms {%c} | PWM Frequency: %i Hz {%c} | Sample Period: %i ms {%c} | Wiring: %i {%c} \r\n",
 8002ab4:	461e      	mov	r6, r3
 8002ab6:	f897 002f 	ldrb.w	r0, [r7, #47]	@ 0x2f
			 (int)motor.runTime, rtFlag, (int)motor.pwmFreq, spFlag, (int)motor.samplePeriod, pfFlag,  (int)motor.wiring, wFlag);
 8002aba:	4b11      	ldr	r3, [pc, #68]	@ (8002b00 <motor_read_parameters+0x160>)
 8002abc:	889b      	ldrh	r3, [r3, #4]
	printf("\r\n>Non-Volatile Memory {M} OR Default {D}\r\n<MOTOR> Runtime: %i ms {%c} | PWM Frequency: %i Hz {%c} | Sample Period: %i ms {%c} | Wiring: %i {%c} \r\n",
 8002abe:	469c      	mov	ip, r3
 8002ac0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
			 (int)motor.runTime, rtFlag, (int)motor.pwmFreq, spFlag, (int)motor.samplePeriod, pfFlag,  (int)motor.wiring, wFlag);
 8002ac4:	4a0e      	ldr	r2, [pc, #56]	@ (8002b00 <motor_read_parameters+0x160>)
 8002ac6:	8852      	ldrh	r2, [r2, #2]
	printf("\r\n>Non-Volatile Memory {M} OR Default {D}\r\n<MOTOR> Runtime: %i ms {%c} | PWM Frequency: %i Hz {%c} | Sample Period: %i ms {%c} | Wiring: %i {%c} \r\n",
 8002ac8:	4614      	mov	r4, r2
 8002aca:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
			 (int)motor.runTime, rtFlag, (int)motor.pwmFreq, spFlag, (int)motor.samplePeriod, pfFlag,  (int)motor.wiring, wFlag);
 8002ace:	490c      	ldr	r1, [pc, #48]	@ (8002b00 <motor_read_parameters+0x160>)
 8002ad0:	7989      	ldrb	r1, [r1, #6]
	printf("\r\n>Non-Volatile Memory {M} OR Default {D}\r\n<MOTOR> Runtime: %i ms {%c} | PWM Frequency: %i Hz {%c} | Sample Period: %i ms {%c} | Wiring: %i {%c} \r\n",
 8002ad2:	460d      	mov	r5, r1
 8002ad4:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8002ad8:	9104      	str	r1, [sp, #16]
 8002ada:	9503      	str	r5, [sp, #12]
 8002adc:	9202      	str	r2, [sp, #8]
 8002ade:	9401      	str	r4, [sp, #4]
 8002ae0:	9300      	str	r3, [sp, #0]
 8002ae2:	4663      	mov	r3, ip
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	4631      	mov	r1, r6
 8002ae8:	4808      	ldr	r0, [pc, #32]	@ (8002b0c <motor_read_parameters+0x16c>)
 8002aea:	f006 fddd 	bl	80096a8 <iprintf>
}
 8002aee:	bf00      	nop
 8002af0:	3734      	adds	r7, #52	@ 0x34
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002af6:	bf00      	nop
 8002af8:	00000000 	.word	0x00000000
 8002afc:	412e8480 	.word	0x412e8480
 8002b00:	20000010 	.word	0x20000010
 8002b04:	20000194 	.word	0x20000194
 8002b08:	200001dc 	.word	0x200001dc
 8002b0c:	0800be54 	.word	0x0800be54

08002b10 <menu_help_print>:


/* Print instructions on how to use configuration menu */
void menu_help_print(void){
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0

}
 8002b14:	bf00      	nop
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr

08002b1c <get_user_input>:
 * - Message prompt to direct the user what to do
 * - Message in case of error
 * - Count of character to be entered by the user
 * - A check list to limit the char input from the user to values in this list only
 * - Pointer to the list of characters entered */
void get_user_input(char promptMsg[], char errorMsg[], uint8_t count, char checkList[], char * output){
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	603b      	str	r3, [r7, #0]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	71fb      	strb	r3, [r7, #7]
	//const uint8_t checkListSize = 10;
	print_inline(promptMsg);
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f000 f8d9 	bl	8002ce4 <print_inline>
    for(uint8_t i = 0; i < count; i++){
 8002b32:	2300      	movs	r3, #0
 8002b34:	75fb      	strb	r3, [r7, #23]
 8002b36:	e03d      	b.n	8002bb4 <get_user_input+0x98>
		while(1){
			HAL_Delay(1); // needed to debug, remove
 8002b38:	2001      	movs	r0, #1
 8002b3a:	f001 fce5 	bl	8004508 <HAL_Delay>
			if(rxStatus == active){
 8002b3e:	4b23      	ldr	r3, [pc, #140]	@ (8002bcc <get_user_input+0xb0>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d1f8      	bne.n	8002b38 <get_user_input+0x1c>
				rxStatus = idle;
 8002b46:	4b21      	ldr	r3, [pc, #132]	@ (8002bcc <get_user_input+0xb0>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	701a      	strb	r2, [r3, #0]
				print_char(rxChar);
 8002b4c:	4b20      	ldr	r3, [pc, #128]	@ (8002bd0 <get_user_input+0xb4>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f000 f841 	bl	8002bd8 <print_char>
				uint8_t checkFlag = 0;
 8002b56:	2300      	movs	r3, #0
 8002b58:	75bb      	strb	r3, [r7, #22]
				// check that belongs to the checkList
				for(uint8_t j = 0; j < MAX_CHECKLIST_SIZE; j++){
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	757b      	strb	r3, [r7, #21]
 8002b5e:	e013      	b.n	8002b88 <get_user_input+0x6c>
					// if there is a match, set flag, store value and break
					if(rxChar == checkList[j]){
 8002b60:	7d7b      	ldrb	r3, [r7, #21]
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	4413      	add	r3, r2
 8002b66:	781a      	ldrb	r2, [r3, #0]
 8002b68:	4b19      	ldr	r3, [pc, #100]	@ (8002bd0 <get_user_input+0xb4>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d108      	bne.n	8002b82 <get_user_input+0x66>
						checkFlag = 1;
 8002b70:	2301      	movs	r3, #1
 8002b72:	75bb      	strb	r3, [r7, #22]
						output[i] = rxChar;// store the value
 8002b74:	7dfb      	ldrb	r3, [r7, #23]
 8002b76:	6a3a      	ldr	r2, [r7, #32]
 8002b78:	4413      	add	r3, r2
 8002b7a:	4a15      	ldr	r2, [pc, #84]	@ (8002bd0 <get_user_input+0xb4>)
 8002b7c:	7812      	ldrb	r2, [r2, #0]
 8002b7e:	701a      	strb	r2, [r3, #0]
						break;
 8002b80:	e005      	b.n	8002b8e <get_user_input+0x72>
				for(uint8_t j = 0; j < MAX_CHECKLIST_SIZE; j++){
 8002b82:	7d7b      	ldrb	r3, [r7, #21]
 8002b84:	3301      	adds	r3, #1
 8002b86:	757b      	strb	r3, [r7, #21]
 8002b88:	7d7b      	ldrb	r3, [r7, #21]
 8002b8a:	2b09      	cmp	r3, #9
 8002b8c:	d9e8      	bls.n	8002b60 <get_user_input+0x44>
					}
				} // if no match, flag is 0
				if(checkFlag == 0){
 8002b8e:	7dbb      	ldrb	r3, [r7, #22]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d107      	bne.n	8002ba4 <get_user_input+0x88>
					printf(errorMsg);
 8002b94:	68b8      	ldr	r0, [r7, #8]
 8002b96:	f006 fd87 	bl	80096a8 <iprintf>
					print_inline(promptMsg);
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f000 f8a2 	bl	8002ce4 <print_inline>
					i = 0; // reinitialize counter to start over
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	75fb      	strb	r3, [r7, #23]
				}
				// break while loop if value is good
				if(checkFlag == 1) break;
 8002ba4:	7dbb      	ldrb	r3, [r7, #22]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d000      	beq.n	8002bac <get_user_input+0x90>
			HAL_Delay(1); // needed to debug, remove
 8002baa:	e7c5      	b.n	8002b38 <get_user_input+0x1c>
				if(checkFlag == 1) break;
 8002bac:	bf00      	nop
    for(uint8_t i = 0; i < count; i++){
 8002bae:	7dfb      	ldrb	r3, [r7, #23]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	75fb      	strb	r3, [r7, #23]
 8002bb4:	7dfa      	ldrb	r2, [r7, #23]
 8002bb6:	79fb      	ldrb	r3, [r7, #7]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d3bd      	bcc.n	8002b38 <get_user_input+0x1c>
			}
		}
    }
    printf("\r\n");
 8002bbc:	4805      	ldr	r0, [pc, #20]	@ (8002bd4 <get_user_input+0xb8>)
 8002bbe:	f006 fddb 	bl	8009778 <puts>
}
 8002bc2:	bf00      	nop
 8002bc4:	3718      	adds	r7, #24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	20000186 	.word	0x20000186
 8002bd0:	20000189 	.word	0x20000189
 8002bd4:	0800adac 	.word	0x0800adac

08002bd8 <print_char>:


/* Print a single character for echo in line */
void print_char(uint8_t ch){
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	4603      	mov	r3, r0
 8002be0:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, 10);
 8002be2:	1df9      	adds	r1, r7, #7
 8002be4:	230a      	movs	r3, #10
 8002be6:	2201      	movs	r2, #1
 8002be8:	4803      	ldr	r0, [pc, #12]	@ (8002bf8 <print_char+0x20>)
 8002bea:	f005 fde9 	bl	80087c0 <HAL_UART_Transmit>
}
 8002bee:	bf00      	nop
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	20000224 	.word	0x20000224

08002bfc <print_serial_number>:


/* Print serial number based on AL configuration saved */
void print_serial_number(void){
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
	//printf( "AL%c%s", launcher.type[0], launcher.serialNumber);
    if(launcher.configured == 'Y'){
 8002c00:	4b0e      	ldr	r3, [pc, #56]	@ (8002c3c <print_serial_number+0x40>)
 8002c02:	791b      	ldrb	r3, [r3, #4]
 8002c04:	2b59      	cmp	r3, #89	@ 0x59
 8002c06:	d114      	bne.n	8002c32 <print_serial_number+0x36>
    	if(launcher.tubeCount == '6'){
 8002c08:	4b0c      	ldr	r3, [pc, #48]	@ (8002c3c <print_serial_number+0x40>)
 8002c0a:	785b      	ldrb	r3, [r3, #1]
 8002c0c:	2b36      	cmp	r3, #54	@ 0x36
 8002c0e:	d106      	bne.n	8002c1e <print_serial_number+0x22>
    		printf( "AL%i ", launcher.serialNumber);
 8002c10:	4b0a      	ldr	r3, [pc, #40]	@ (8002c3c <print_serial_number+0x40>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	4619      	mov	r1, r3
 8002c16:	480a      	ldr	r0, [pc, #40]	@ (8002c40 <print_serial_number+0x44>)
 8002c18:	f006 fd46 	bl	80096a8 <iprintf>
    		printf( "AL%c%i", launcher.type, launcher.serialNumber);
    	}
    } else {
    	printf( "AL000");
    }
}
 8002c1c:	e00c      	b.n	8002c38 <print_serial_number+0x3c>
    		printf( "AL%c%i", launcher.type, launcher.serialNumber);
 8002c1e:	4b07      	ldr	r3, [pc, #28]	@ (8002c3c <print_serial_number+0x40>)
 8002c20:	789b      	ldrb	r3, [r3, #2]
 8002c22:	4619      	mov	r1, r3
 8002c24:	4b05      	ldr	r3, [pc, #20]	@ (8002c3c <print_serial_number+0x40>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	461a      	mov	r2, r3
 8002c2a:	4806      	ldr	r0, [pc, #24]	@ (8002c44 <print_serial_number+0x48>)
 8002c2c:	f006 fd3c 	bl	80096a8 <iprintf>
}
 8002c30:	e002      	b.n	8002c38 <print_serial_number+0x3c>
    	printf( "AL000");
 8002c32:	4805      	ldr	r0, [pc, #20]	@ (8002c48 <print_serial_number+0x4c>)
 8002c34:	f006 fd38 	bl	80096a8 <iprintf>
}
 8002c38:	bf00      	nop
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	20000000 	.word	0x20000000
 8002c40:	0800bee8 	.word	0x0800bee8
 8002c44:	0800bef0 	.word	0x0800bef0
 8002c48:	0800bef8 	.word	0x0800bef8

08002c4c <get_decimal>:
}


/* Returns the decimal digits of a float as an integer
 * Parameters: float number to retreive decimals, number of decimal digits */
uint8_t get_decimal(float value, uint8_t digits){
 8002c4c:	b590      	push	{r4, r7, lr}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	460b      	mov	r3, r1
 8002c56:	70fb      	strb	r3, [r7, #3]
	uint8_t dec;
	uint32_t exp = 1;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	60fb      	str	r3, [r7, #12]

	for(uint8_t i = 0; i < digits ; i++){
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	72fb      	strb	r3, [r7, #11]
 8002c60:	e008      	b.n	8002c74 <get_decimal+0x28>
		exp = exp * 10;
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	4613      	mov	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	4413      	add	r3, r2
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < digits ; i++){
 8002c6e:	7afb      	ldrb	r3, [r7, #11]
 8002c70:	3301      	adds	r3, #1
 8002c72:	72fb      	strb	r3, [r7, #11]
 8002c74:	7afa      	ldrb	r2, [r7, #11]
 8002c76:	78fb      	ldrb	r3, [r7, #3]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d3f2      	bcc.n	8002c62 <get_decimal+0x16>
	}
	dec = (value - (int)value) * exp;
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f7fe f8dd 	bl	8000e3c <__aeabi_f2iz>
 8002c82:	4603      	mov	r3, r0
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7fe f80f 	bl	8000ca8 <__aeabi_i2f>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7fd ff54 	bl	8000b3c <__aeabi_fsub>
 8002c94:	4603      	mov	r3, r0
 8002c96:	461c      	mov	r4, r3
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f7fe f801 	bl	8000ca0 <__aeabi_ui2f>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	4620      	mov	r0, r4
 8002ca4:	f7fd fa54 	bl	8000150 <__aeabi_fmul>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7fe f8ec 	bl	8000e88 <__aeabi_f2uiz>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	72bb      	strb	r3, [r7, #10]
	return dec;
 8002cb4:	7abb      	ldrb	r3, [r7, #10]
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3714      	adds	r7, #20
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd90      	pop	{r4, r7, pc}
	...

08002cc0 <multiplexer_set>:


/* Select the source of RS232
 * Parameters: select {MUX_GPS, MUX_STM32} */
void multiplexer_set(mux_t select){
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(MUX_SELECT_GPIO_Port, MUX_SELECT_Pin, select); // SET = UART-tx / RESET = Din from GPS
 8002cca:	79fb      	ldrb	r3, [r7, #7]
 8002ccc:	461a      	mov	r2, r3
 8002cce:	2104      	movs	r1, #4
 8002cd0:	4803      	ldr	r0, [pc, #12]	@ (8002ce0 <multiplexer_set+0x20>)
 8002cd2:	f002 fe2d 	bl	8005930 <HAL_GPIO_WritePin>
}
 8002cd6:	bf00      	nop
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	40010800 	.word	0x40010800

08002ce4 <print_inline>:


/* Print line without a '\n' newline at the end
 * Use for data entry prompts or partial text inline */
void print_inline(char * text){
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
	char temp = ' ';
 8002cec:	2320      	movs	r3, #32
 8002cee:	73bb      	strb	r3, [r7, #14]
	for(uint8_t i = 0; i<=255 && temp!= '\0' ; i++){
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	73fb      	strb	r3, [r7, #15]
 8002cf4:	e00e      	b.n	8002d14 <print_inline+0x30>
		temp = text[i];
 8002cf6:	7bfb      	ldrb	r3, [r7, #15]
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	73bb      	strb	r3, [r7, #14]
		HAL_UART_Transmit(&huart1, (uint8_t *) &temp, 1, 100);
 8002d00:	f107 010e 	add.w	r1, r7, #14
 8002d04:	2364      	movs	r3, #100	@ 0x64
 8002d06:	2201      	movs	r2, #1
 8002d08:	4806      	ldr	r0, [pc, #24]	@ (8002d24 <print_inline+0x40>)
 8002d0a:	f005 fd59 	bl	80087c0 <HAL_UART_Transmit>
	for(uint8_t i = 0; i<=255 && temp!= '\0' ; i++){
 8002d0e:	7bfb      	ldrb	r3, [r7, #15]
 8002d10:	3301      	adds	r3, #1
 8002d12:	73fb      	strb	r3, [r7, #15]
 8002d14:	7bbb      	ldrb	r3, [r7, #14]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1ed      	bne.n	8002cf6 <print_inline+0x12>
	}
}
 8002d1a:	bf00      	nop
 8002d1c:	bf00      	nop
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	20000224 	.word	0x20000224

08002d28 <parameter_init>:


/* Initialize autolauncher parameters from memory or defaults */
void parameter_init(void){
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
	// get parameters from eeprom or assign default values
	eeprom_read_nbytes(AL_CONFIGED1B, sizeof(launcher.configured), &launcher.configured);
 8002d2c:	4a17      	ldr	r2, [pc, #92]	@ (8002d8c <parameter_init+0x64>)
 8002d2e:	2101      	movs	r1, #1
 8002d30:	2003      	movs	r0, #3
 8002d32:	f000 ff84 	bl	8003c3e <eeprom_read_nbytes>
	// read values if they were configured previously
	if(launcher.configured == 'Y'){
 8002d36:	4b16      	ldr	r3, [pc, #88]	@ (8002d90 <parameter_init+0x68>)
 8002d38:	791b      	ldrb	r3, [r3, #4]
 8002d3a:	2b59      	cmp	r3, #89	@ 0x59
 8002d3c:	d11d      	bne.n	8002d7a <parameter_init+0x52>
		printf("\r\n** AL configuration found in memory **\r\n");
 8002d3e:	4815      	ldr	r0, [pc, #84]	@ (8002d94 <parameter_init+0x6c>)
 8002d40:	f006 fd1a 	bl	8009778 <puts>
		eeprom_read_nbytes(AL_TUBECOUNT1B, sizeof(launcher.tubeCount), &launcher.tubeCount);
 8002d44:	4a14      	ldr	r2, [pc, #80]	@ (8002d98 <parameter_init+0x70>)
 8002d46:	2101      	movs	r1, #1
 8002d48:	2000      	movs	r0, #0
 8002d4a:	f000 ff78 	bl	8003c3e <eeprom_read_nbytes>
		eeprom_read_nbytes(AL_TYPE1B, sizeof(launcher.type), &launcher.type);
 8002d4e:	4a13      	ldr	r2, [pc, #76]	@ (8002d9c <parameter_init+0x74>)
 8002d50:	2101      	movs	r1, #1
 8002d52:	2001      	movs	r0, #1
 8002d54:	f000 ff73 	bl	8003c3e <eeprom_read_nbytes>
		eeprom_read_nbytes(AL_SN1B, sizeof(launcher.serialNumber), &launcher.serialNumber);
 8002d58:	4a0d      	ldr	r2, [pc, #52]	@ (8002d90 <parameter_init+0x68>)
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	2002      	movs	r0, #2
 8002d5e:	f000 ff6e 	bl	8003c3e <eeprom_read_nbytes>
		printf("\r\n<AL> Tubes: %c | Type: %c | Serial: %03i <AL>\r\n", launcher.tubeCount, launcher.type, launcher.serialNumber);
 8002d62:	4b0b      	ldr	r3, [pc, #44]	@ (8002d90 <parameter_init+0x68>)
 8002d64:	785b      	ldrb	r3, [r3, #1]
 8002d66:	4619      	mov	r1, r3
 8002d68:	4b09      	ldr	r3, [pc, #36]	@ (8002d90 <parameter_init+0x68>)
 8002d6a:	789b      	ldrb	r3, [r3, #2]
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	4b08      	ldr	r3, [pc, #32]	@ (8002d90 <parameter_init+0x68>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	480b      	ldr	r0, [pc, #44]	@ (8002da0 <parameter_init+0x78>)
 8002d74:	f006 fc98 	bl	80096a8 <iprintf>
 8002d78:	e002      	b.n	8002d80 <parameter_init+0x58>
	} else {
		printf("\r\n** AL Configuration NOT found in memory **\r\n");
 8002d7a:	480a      	ldr	r0, [pc, #40]	@ (8002da4 <parameter_init+0x7c>)
 8002d7c:	f006 fcfc 	bl	8009778 <puts>
	}
	// read motor parameters from eeprom
	motor_read_parameters();
 8002d80:	f7ff fe0e 	bl	80029a0 <motor_read_parameters>
	// Read motor stats
	motor_read_stats();
 8002d84:	f7ff fa24 	bl	80021d0 <motor_read_stats>
}
 8002d88:	bf00      	nop
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	20000004 	.word	0x20000004
 8002d90:	20000000 	.word	0x20000000
 8002d94:	0800bf00 	.word	0x0800bf00
 8002d98:	20000001 	.word	0x20000001
 8002d9c:	20000002 	.word	0x20000002
 8002da0:	0800bf2c 	.word	0x0800bf2c
 8002da4:	0800bf60 	.word	0x0800bf60

08002da8 <HAL_UART_RxCpltCallback>:


/* UART Receive complete interrupt callback, set rxStatus flag for new char received
 * re-enable uart rx interrupt */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
	// check that uart1 triggered the interrupt callback
	if(huart->Instance == USART1){
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a09      	ldr	r2, [pc, #36]	@ (8002ddc <HAL_UART_RxCpltCallback+0x34>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d10b      	bne.n	8002dd2 <HAL_UART_RxCpltCallback+0x2a>
		rxChar = rxBuffer[0]; // store the only element in buffer to a char for easier variable handling
 8002dba:	4b09      	ldr	r3, [pc, #36]	@ (8002de0 <HAL_UART_RxCpltCallback+0x38>)
 8002dbc:	781a      	ldrb	r2, [r3, #0]
 8002dbe:	4b09      	ldr	r3, [pc, #36]	@ (8002de4 <HAL_UART_RxCpltCallback+0x3c>)
 8002dc0:	701a      	strb	r2, [r3, #0]
		rxStatus = active; // set flag to enter main menu char processing
 8002dc2:	4b09      	ldr	r3, [pc, #36]	@ (8002de8 <HAL_UART_RxCpltCallback+0x40>)
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, (uint8_t *) rxBuffer, 1); // reactivate rx interrupt
 8002dc8:	2201      	movs	r2, #1
 8002dca:	4905      	ldr	r1, [pc, #20]	@ (8002de0 <HAL_UART_RxCpltCallback+0x38>)
 8002dcc:	4807      	ldr	r0, [pc, #28]	@ (8002dec <HAL_UART_RxCpltCallback+0x44>)
 8002dce:	f005 fe19 	bl	8008a04 <HAL_UART_Receive_IT>
	}
}
 8002dd2:	bf00      	nop
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40013800 	.word	0x40013800
 8002de0:	20000188 	.word	0x20000188
 8002de4:	20000189 	.word	0x20000189
 8002de8:	20000186 	.word	0x20000186
 8002dec:	20000224 	.word	0x20000224

08002df0 <HAL_ADC_ConvCpltCallback>:


/* When the ADC conversion in DMA mode is complete (all samples in adc scan), set flag
 * Then the IRQ calls this function */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
	//HAL_ADC_Stop_DMA(&hadc1);
	if(hadc->Instance == ADC1){
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a05      	ldr	r2, [pc, #20]	@ (8002e14 <HAL_ADC_ConvCpltCallback+0x24>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d102      	bne.n	8002e08 <HAL_ADC_ConvCpltCallback+0x18>
		adcComplete = 1;
 8002e02:	4b05      	ldr	r3, [pc, #20]	@ (8002e18 <HAL_ADC_ConvCpltCallback+0x28>)
 8002e04:	2201      	movs	r2, #1
 8002e06:	701a      	strb	r2, [r3, #0]
	}
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bc80      	pop	{r7}
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	40012400 	.word	0x40012400
 8002e18:	2000018a 	.word	0x2000018a

08002e1c <uartrx_interrupt_init>:


/* Wrapper for 1st uart_rx call
 * The interrupt is enabled for rx after this function is called, and then disabled until called again */
void uartrx_interrupt_init(void){
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, (uint8_t *) rxBuffer, 1); // enable UART receive interrupt, store received char in rxChar buffer
 8002e20:	2201      	movs	r2, #1
 8002e22:	4903      	ldr	r1, [pc, #12]	@ (8002e30 <uartrx_interrupt_init+0x14>)
 8002e24:	4803      	ldr	r0, [pc, #12]	@ (8002e34 <uartrx_interrupt_init+0x18>)
 8002e26:	f005 fded 	bl	8008a04 <HAL_UART_Receive_IT>
}
 8002e2a:	bf00      	nop
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	20000188 	.word	0x20000188
 8002e34:	20000224 	.word	0x20000224

08002e38 <unground_xbt>:

/* Disconnect the XBT ABC pins from ground
 * 3 relays can be used as ground when SET, or ground when RESET based on jumpers JP6-7-8
 * If 1-2 pads are soldered, SET relays to unground, RESET relays to ground
 * Note: reset signal 3 is tied to other relays: CAL cont & CAL res */
void unground_xbt(void){
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
	if(relayLock == reFree){
 8002e3c:	4b08      	ldr	r3, [pc, #32]	@ (8002e60 <unground_xbt+0x28>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d10b      	bne.n	8002e5c <unground_xbt+0x24>
		relayLock = reLocked;
 8002e44:	4b06      	ldr	r3, [pc, #24]	@ (8002e60 <unground_xbt+0x28>)
 8002e46:	2201      	movs	r2, #1
 8002e48:	701a      	strb	r2, [r3, #0]
		drive_relay(RELAY_RESET_3_GPIO_Port, RELAY_RESET_3_Pin, 10); // RESET relay k9, k10, k11, k12
 8002e4a:	220a      	movs	r2, #10
 8002e4c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e50:	4804      	ldr	r0, [pc, #16]	@ (8002e64 <unground_xbt+0x2c>)
 8002e52:	f000 f925 	bl	80030a0 <drive_relay>
		relayLock = reFree;
 8002e56:	4b02      	ldr	r3, [pc, #8]	@ (8002e60 <unground_xbt+0x28>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	701a      	strb	r2, [r3, #0]
	}
}
 8002e5c:	bf00      	nop
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	20000185 	.word	0x20000185
 8002e64:	40011000 	.word	0x40011000

08002e68 <calibration_resistor>:

void calibration_resistor(void){
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
	if(relayLock == reFree){
 8002e6c:	4b08      	ldr	r3, [pc, #32]	@ (8002e90 <calibration_resistor+0x28>)
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d10b      	bne.n	8002e8c <calibration_resistor+0x24>
		relayLock = reLocked;
 8002e74:	4b06      	ldr	r3, [pc, #24]	@ (8002e90 <calibration_resistor+0x28>)
 8002e76:	2201      	movs	r2, #1
 8002e78:	701a      	strb	r2, [r3, #0]
		drive_relay(RELAY_K12_CAL_RES_GPIO_Port, RELAY_K12_CAL_RES_Pin, RELAY_ON_TIME); // SET relay k12
 8002e7a:	220a      	movs	r2, #10
 8002e7c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e80:	4804      	ldr	r0, [pc, #16]	@ (8002e94 <calibration_resistor+0x2c>)
 8002e82:	f000 f90d 	bl	80030a0 <drive_relay>
		relayLock = reFree;
 8002e86:	4b02      	ldr	r3, [pc, #8]	@ (8002e90 <calibration_resistor+0x28>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	701a      	strb	r2, [r3, #0]
	}
}
 8002e8c:	bf00      	nop
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	20000185 	.word	0x20000185
 8002e94:	40010800 	.word	0x40010800

08002e98 <calibrate_on>:

void calibrate_on(void){
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
	if(relayLock == reFree){
 8002e9c:	4b08      	ldr	r3, [pc, #32]	@ (8002ec0 <calibrate_on+0x28>)
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d10b      	bne.n	8002ebc <calibrate_on+0x24>
		relayLock = reLocked;
 8002ea4:	4b06      	ldr	r3, [pc, #24]	@ (8002ec0 <calibrate_on+0x28>)
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	701a      	strb	r2, [r3, #0]
		drive_relay(RELAY_K11_CAL_CONT_GPIO_Port, RELAY_K11_CAL_CONT_Pin, RELAY_ON_TIME); // SET relay k11
 8002eaa:	220a      	movs	r2, #10
 8002eac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002eb0:	4804      	ldr	r0, [pc, #16]	@ (8002ec4 <calibrate_on+0x2c>)
 8002eb2:	f000 f8f5 	bl	80030a0 <drive_relay>
		relayLock = reFree;
 8002eb6:	4b02      	ldr	r3, [pc, #8]	@ (8002ec0 <calibrate_on+0x28>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	701a      	strb	r2, [r3, #0]
	}
}
 8002ebc:	bf00      	nop
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	20000185 	.word	0x20000185
 8002ec4:	40010800 	.word	0x40010800

08002ec8 <reset_relay>:

void reset_relay(void){
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
	if(relayLock == reFree){
 8002ecc:	4b11      	ldr	r3, [pc, #68]	@ (8002f14 <reset_relay+0x4c>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d11d      	bne.n	8002f10 <reset_relay+0x48>
		relayLock = reLocked;
 8002ed4:	4b0f      	ldr	r3, [pc, #60]	@ (8002f14 <reset_relay+0x4c>)
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	701a      	strb	r2, [r3, #0]
		drive_relay(RELAY_RESET_1_GPIO_Port, RELAY_RESET_1_Pin, RELAY_ON_TIME); // RESET relay k1, k2, k3, k4, SSR1, SSR2, SSR3, SSR4
 8002eda:	220a      	movs	r2, #10
 8002edc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002ee0:	480d      	ldr	r0, [pc, #52]	@ (8002f18 <reset_relay+0x50>)
 8002ee2:	f000 f8dd 	bl	80030a0 <drive_relay>
		HAL_Delay(RELAY_INTERVAL_TIME);
 8002ee6:	200a      	movs	r0, #10
 8002ee8:	f001 fb0e 	bl	8004508 <HAL_Delay>
		drive_relay(RELAY_RESET_2_GPIO_Port, RELAY_RESET_2_Pin, RELAY_ON_TIME); // RESET relay k5, k6, k7, k8, SSR5, SSR6, SSR7, SSR8
 8002eec:	220a      	movs	r2, #10
 8002eee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002ef2:	480a      	ldr	r0, [pc, #40]	@ (8002f1c <reset_relay+0x54>)
 8002ef4:	f000 f8d4 	bl	80030a0 <drive_relay>
		HAL_Delay(RELAY_INTERVAL_TIME);
 8002ef8:	200a      	movs	r0, #10
 8002efa:	f001 fb05 	bl	8004508 <HAL_Delay>
		drive_relay(RELAY_RESET_3_GPIO_Port, RELAY_RESET_3_Pin, RELAY_ON_TIME); // RESET relay k9, k10, k11, k12 - This grounds ABC
 8002efe:	220a      	movs	r2, #10
 8002f00:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002f04:	4805      	ldr	r0, [pc, #20]	@ (8002f1c <reset_relay+0x54>)
 8002f06:	f000 f8cb 	bl	80030a0 <drive_relay>
		relayLock = reFree;
 8002f0a:	4b02      	ldr	r3, [pc, #8]	@ (8002f14 <reset_relay+0x4c>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	701a      	strb	r2, [r3, #0]
	}
}
 8002f10:	bf00      	nop
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	20000185 	.word	0x20000185
 8002f18:	40010c00 	.word	0x40010c00
 8002f1c:	40011000 	.word	0x40011000

08002f20 <connect_xbt_pin>:

void connect_xbt_pin(uint8_t xbtNum){
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	4603      	mov	r3, r0
 8002f28:	71fb      	strb	r3, [r7, #7]

	if(relayLock == reFree){
 8002f2a:	4b47      	ldr	r3, [pc, #284]	@ (8003048 <connect_xbt_pin+0x128>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f040 8085 	bne.w	800303e <connect_xbt_pin+0x11e>
		relayLock = reLocked;
 8002f34:	4b44      	ldr	r3, [pc, #272]	@ (8003048 <connect_xbt_pin+0x128>)
 8002f36:	2201      	movs	r2, #1
 8002f38:	701a      	strb	r2, [r3, #0]

		switch (xbtNum){
 8002f3a:	79fb      	ldrb	r3, [r7, #7]
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	2b07      	cmp	r3, #7
 8002f40:	d874      	bhi.n	800302c <connect_xbt_pin+0x10c>
 8002f42:	a201      	add	r2, pc, #4	@ (adr r2, 8002f48 <connect_xbt_pin+0x28>)
 8002f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f48:	08002f69 	.word	0x08002f69
 8002f4c:	08002f83 	.word	0x08002f83
 8002f50:	08002f9d 	.word	0x08002f9d
 8002f54:	08002fb5 	.word	0x08002fb5
 8002f58:	08002fcd 	.word	0x08002fcd
 8002f5c:	08002fe3 	.word	0x08002fe3
 8002f60:	08002ff9 	.word	0x08002ff9
 8002f64:	08003013 	.word	0x08003013
		case 1:
			drive_relay(RELAY_K1_GPIO_Port, RELAY_K1_Pin, RELAY_ON_TIME); // SET relay k1
 8002f68:	220a      	movs	r2, #10
 8002f6a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002f6e:	4837      	ldr	r0, [pc, #220]	@ (800304c <connect_xbt_pin+0x12c>)
 8002f70:	f000 f896 	bl	80030a0 <drive_relay>
			drive_relay(SSR_1_GPIO_Port, SSR_1_Pin, 1); // SET SSR1
 8002f74:	2201      	movs	r2, #1
 8002f76:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002f7a:	4834      	ldr	r0, [pc, #208]	@ (800304c <connect_xbt_pin+0x12c>)
 8002f7c:	f000 f890 	bl	80030a0 <drive_relay>
			break;
 8002f80:	e05a      	b.n	8003038 <connect_xbt_pin+0x118>
		case 2:
			drive_relay(RELAY_K2_GPIO_Port, RELAY_K2_Pin, RELAY_ON_TIME); // SET relay k2
 8002f82:	220a      	movs	r2, #10
 8002f84:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002f88:	4830      	ldr	r0, [pc, #192]	@ (800304c <connect_xbt_pin+0x12c>)
 8002f8a:	f000 f889 	bl	80030a0 <drive_relay>
			drive_relay(SSR_2_GPIO_Port, SSR_2_Pin, 1); // SET SSR2
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002f94:	482d      	ldr	r0, [pc, #180]	@ (800304c <connect_xbt_pin+0x12c>)
 8002f96:	f000 f883 	bl	80030a0 <drive_relay>
			break;
 8002f9a:	e04d      	b.n	8003038 <connect_xbt_pin+0x118>
		case 3:
			drive_relay(RELAY_K3_GPIO_Port, RELAY_K3_Pin, RELAY_ON_TIME); // SET relay k3
 8002f9c:	220a      	movs	r2, #10
 8002f9e:	2104      	movs	r1, #4
 8002fa0:	482b      	ldr	r0, [pc, #172]	@ (8003050 <connect_xbt_pin+0x130>)
 8002fa2:	f000 f87d 	bl	80030a0 <drive_relay>
			drive_relay(SSR_3_GPIO_Port, SSR_3_Pin, 1); // SET SSR3
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002fac:	4827      	ldr	r0, [pc, #156]	@ (800304c <connect_xbt_pin+0x12c>)
 8002fae:	f000 f877 	bl	80030a0 <drive_relay>
			break;
 8002fb2:	e041      	b.n	8003038 <connect_xbt_pin+0x118>
		case 4:
			drive_relay(RELAY_K4_GPIO_Port, RELAY_K4_Pin, RELAY_ON_TIME); // SET relay k4
 8002fb4:	220a      	movs	r2, #10
 8002fb6:	2108      	movs	r1, #8
 8002fb8:	4826      	ldr	r0, [pc, #152]	@ (8003054 <connect_xbt_pin+0x134>)
 8002fba:	f000 f871 	bl	80030a0 <drive_relay>
			drive_relay(SSR_4_GPIO_Port, SSR_4_Pin, 1); // SET SSR4
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002fc4:	4823      	ldr	r0, [pc, #140]	@ (8003054 <connect_xbt_pin+0x134>)
 8002fc6:	f000 f86b 	bl	80030a0 <drive_relay>
			break;
 8002fca:	e035      	b.n	8003038 <connect_xbt_pin+0x118>
		case 5:
			drive_relay(RELAY_K5_GPIO_Port, RELAY_K5_Pin, RELAY_ON_TIME); // SET relay k5
 8002fcc:	220a      	movs	r2, #10
 8002fce:	2110      	movs	r1, #16
 8002fd0:	4820      	ldr	r0, [pc, #128]	@ (8003054 <connect_xbt_pin+0x134>)
 8002fd2:	f000 f865 	bl	80030a0 <drive_relay>
			drive_relay(SSR_5_GPIO_Port, SSR_5_Pin, 1); // SET SSR5
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	2180      	movs	r1, #128	@ 0x80
 8002fda:	481c      	ldr	r0, [pc, #112]	@ (800304c <connect_xbt_pin+0x12c>)
 8002fdc:	f000 f860 	bl	80030a0 <drive_relay>
			break;
 8002fe0:	e02a      	b.n	8003038 <connect_xbt_pin+0x118>
		case 6:
			drive_relay(RELAY_K6_GPIO_Port, RELAY_K6_Pin, RELAY_ON_TIME); // SET relay k6
 8002fe2:	220a      	movs	r2, #10
 8002fe4:	2120      	movs	r1, #32
 8002fe6:	481b      	ldr	r0, [pc, #108]	@ (8003054 <connect_xbt_pin+0x134>)
 8002fe8:	f000 f85a 	bl	80030a0 <drive_relay>
			drive_relay(SSR_6_GPIO_Port, SSR_6_Pin, 1); // SET SSR6
 8002fec:	2201      	movs	r2, #1
 8002fee:	2140      	movs	r1, #64	@ 0x40
 8002ff0:	4816      	ldr	r0, [pc, #88]	@ (800304c <connect_xbt_pin+0x12c>)
 8002ff2:	f000 f855 	bl	80030a0 <drive_relay>
			break;
 8002ff6:	e01f      	b.n	8003038 <connect_xbt_pin+0x118>
		case 7:
			drive_relay(RELAY_K7_GPIO_Port, RELAY_K7_Pin, RELAY_ON_TIME); // SET relay k7
 8002ff8:	220a      	movs	r2, #10
 8002ffa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002ffe:	4813      	ldr	r0, [pc, #76]	@ (800304c <connect_xbt_pin+0x12c>)
 8003000:	f000 f84e 	bl	80030a0 <drive_relay>
			drive_relay(SSR_7_GPIO_Port, SSR_7_Pin, 1); // SET SSR7
 8003004:	2201      	movs	r2, #1
 8003006:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800300a:	4812      	ldr	r0, [pc, #72]	@ (8003054 <connect_xbt_pin+0x134>)
 800300c:	f000 f848 	bl	80030a0 <drive_relay>
			break;
 8003010:	e012      	b.n	8003038 <connect_xbt_pin+0x118>
		case 8:
			drive_relay(RELAY_K8_GPIO_Port, RELAY_K8_Pin, RELAY_ON_TIME); // SET relay k8
 8003012:	220a      	movs	r2, #10
 8003014:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003018:	480f      	ldr	r0, [pc, #60]	@ (8003058 <connect_xbt_pin+0x138>)
 800301a:	f000 f841 	bl	80030a0 <drive_relay>
			drive_relay(SSR_8_GPIO_Port, SSR_8_Pin, 1); // SET SSR8
 800301e:	2201      	movs	r2, #1
 8003020:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003024:	480b      	ldr	r0, [pc, #44]	@ (8003054 <connect_xbt_pin+0x134>)
 8003026:	f000 f83b 	bl	80030a0 <drive_relay>
			break;
 800302a:	e005      	b.n	8003038 <connect_xbt_pin+0x118>
		default:
			printf("\r\n** ERROR: XBT %i relay not found **\r\n", xbtNum);
 800302c:	79fb      	ldrb	r3, [r7, #7]
 800302e:	4619      	mov	r1, r3
 8003030:	480a      	ldr	r0, [pc, #40]	@ (800305c <connect_xbt_pin+0x13c>)
 8003032:	f006 fb39 	bl	80096a8 <iprintf>
			break;
 8003036:	bf00      	nop
		}
		relayLock = reFree;
 8003038:	4b03      	ldr	r3, [pc, #12]	@ (8003048 <connect_xbt_pin+0x128>)
 800303a:	2200      	movs	r2, #0
 800303c:	701a      	strb	r2, [r3, #0]
	}
}
 800303e:	bf00      	nop
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	20000185 	.word	0x20000185
 800304c:	40011000 	.word	0x40011000
 8003050:	40011400 	.word	0x40011400
 8003054:	40010c00 	.word	0x40010c00
 8003058:	40010800 	.word	0x40010800
 800305c:	0800bf90 	.word	0x0800bf90

08003060 <relay_init>:

void relay_init(void){
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
	drive_relay(RELAY_RESET_1_GPIO_Port, RELAY_RESET_1_Pin, RELAY_ON_TIME);  // RESET relay k1, k2, k3, k4, SSR1, SSR2, SSR3, SSR4
 8003064:	220a      	movs	r2, #10
 8003066:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800306a:	480b      	ldr	r0, [pc, #44]	@ (8003098 <relay_init+0x38>)
 800306c:	f000 f818 	bl	80030a0 <drive_relay>
	HAL_Delay(RELAY_INTERVAL_TIME);
 8003070:	200a      	movs	r0, #10
 8003072:	f001 fa49 	bl	8004508 <HAL_Delay>
	drive_relay(RELAY_RESET_2_GPIO_Port, RELAY_RESET_2_Pin, RELAY_ON_TIME); // RESET relay k5, k6, k7, k8, SSR5, SSR6, SSR7, SSR8
 8003076:	220a      	movs	r2, #10
 8003078:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800307c:	4807      	ldr	r0, [pc, #28]	@ (800309c <relay_init+0x3c>)
 800307e:	f000 f80f 	bl	80030a0 <drive_relay>
	HAL_Delay(RELAY_INTERVAL_TIME);
 8003082:	200a      	movs	r0, #10
 8003084:	f001 fa40 	bl	8004508 <HAL_Delay>
	drive_relay(RELAY_RESET_3_GPIO_Port, RELAY_RESET_3_Pin, RELAY_ON_TIME); // RESET relay k9, k10, k11, k12 (GND, calibration and continuity circuit)
 8003088:	220a      	movs	r2, #10
 800308a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800308e:	4803      	ldr	r0, [pc, #12]	@ (800309c <relay_init+0x3c>)
 8003090:	f000 f806 	bl	80030a0 <drive_relay>
}
 8003094:	bf00      	nop
 8003096:	bd80      	pop	{r7, pc}
 8003098:	40010c00 	.word	0x40010c00
 800309c:	40011000 	.word	0x40011000

080030a0 <drive_relay>:


void drive_relay(GPIO_TypeDef * relayPort, uint16_t relayPin, uint8_t onTime){
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	460b      	mov	r3, r1
 80030aa:	807b      	strh	r3, [r7, #2]
 80030ac:	4613      	mov	r3, r2
 80030ae:	707b      	strb	r3, [r7, #1]
	// SET relay k
	HAL_GPIO_WritePin(relayPort, relayPin, SET); // set
 80030b0:	887b      	ldrh	r3, [r7, #2]
 80030b2:	2201      	movs	r2, #1
 80030b4:	4619      	mov	r1, r3
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f002 fc3a 	bl	8005930 <HAL_GPIO_WritePin>
	HAL_Delay(onTime); // time coil is driven in ms
 80030bc:	787b      	ldrb	r3, [r7, #1]
 80030be:	4618      	mov	r0, r3
 80030c0:	f001 fa22 	bl	8004508 <HAL_Delay>
	HAL_GPIO_WritePin(relayPort, relayPin, RESET); // release
 80030c4:	887b      	ldrh	r3, [r7, #2]
 80030c6:	2200      	movs	r2, #0
 80030c8:	4619      	mov	r1, r3
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f002 fc30 	bl	8005930 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80030d0:	2002      	movs	r0, #2
 80030d2:	f001 fa19 	bl	8004508 <HAL_Delay>
}
 80030d6:	bf00      	nop
 80030d8:	3708      	adds	r7, #8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
	...

080030e0 <extend_all_pins>:

// ALV2 (previous firmware) had a sequence with 4 delays of 8 ms, repeated in 300 steps = 4 * 8 ms * 300 = 7200 ms

/* Extend all pins up to countLimit or eeprom.tubes, whichever is smaller
 * Parameter: countLimit, extend all pins up to this number */
void extend_all_pins(uint8_t countLimit){
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	4603      	mov	r3, r0
 80030e8:	71fb      	strb	r3, [r7, #7]
	if(countLimit > 0){
 80030ea:	79fb      	ldrb	r3, [r7, #7]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d020      	beq.n	8003132 <extend_all_pins+0x52>
		for(uint8_t i = 1; (i <= countLimit) && (i <= launcher.tubeCount); i++){
 80030f0:	2301      	movs	r3, #1
 80030f2:	73fb      	strb	r3, [r7, #15]
 80030f4:	e014      	b.n	8003120 <extend_all_pins+0x40>
			printf("\r\n> Extending pin %i\r\n", i);
 80030f6:	7bfb      	ldrb	r3, [r7, #15]
 80030f8:	4619      	mov	r1, r3
 80030fa:	4810      	ldr	r0, [pc, #64]	@ (800313c <extend_all_pins+0x5c>)
 80030fc:	f006 fad4 	bl	80096a8 <iprintf>
			extend_pin(i);
 8003100:	7bfb      	ldrb	r3, [r7, #15]
 8003102:	4618      	mov	r0, r3
 8003104:	f000 f8b6 	bl	8003274 <extend_pin>
			if(rxChar == '@'){
 8003108:	4b0d      	ldr	r3, [pc, #52]	@ (8003140 <extend_all_pins+0x60>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	2b40      	cmp	r3, #64	@ 0x40
 800310e:	d104      	bne.n	800311a <extend_all_pins+0x3a>
				printf("\r\n** Process finished by user **\r\n");
 8003110:	480c      	ldr	r0, [pc, #48]	@ (8003144 <extend_all_pins+0x64>)
 8003112:	f006 fb31 	bl	8009778 <puts>
				break;
 8003116:	bf00      	nop
			}
		}
	}
}
 8003118:	e00b      	b.n	8003132 <extend_all_pins+0x52>
		for(uint8_t i = 1; (i <= countLimit) && (i <= launcher.tubeCount); i++){
 800311a:	7bfb      	ldrb	r3, [r7, #15]
 800311c:	3301      	adds	r3, #1
 800311e:	73fb      	strb	r3, [r7, #15]
 8003120:	7bfa      	ldrb	r2, [r7, #15]
 8003122:	79fb      	ldrb	r3, [r7, #7]
 8003124:	429a      	cmp	r2, r3
 8003126:	d804      	bhi.n	8003132 <extend_all_pins+0x52>
 8003128:	4b07      	ldr	r3, [pc, #28]	@ (8003148 <extend_all_pins+0x68>)
 800312a:	785b      	ldrb	r3, [r3, #1]
 800312c:	7bfa      	ldrb	r2, [r7, #15]
 800312e:	429a      	cmp	r2, r3
 8003130:	d9e1      	bls.n	80030f6 <extend_all_pins+0x16>
}
 8003132:	bf00      	nop
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	0800bfb8 	.word	0x0800bfb8
 8003140:	20000189 	.word	0x20000189
 8003144:	0800bfd0 	.word	0x0800bfd0
 8003148:	20000000 	.word	0x20000000

0800314c <retract_all_pins>:

/* Retract all pins up to countLimit or eeprom.tubes, whichever is smaller
 * Parameter: countLimit, retract all pins up to this number */
void retract_all_pins(uint8_t countLimit){
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	4603      	mov	r3, r0
 8003154:	71fb      	strb	r3, [r7, #7]
	if(countLimit > 0){
 8003156:	79fb      	ldrb	r3, [r7, #7]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d020      	beq.n	800319e <retract_all_pins+0x52>
		for(uint8_t i = 1; (i <= countLimit) && (i <= launcher.tubeCount); i++){
 800315c:	2301      	movs	r3, #1
 800315e:	73fb      	strb	r3, [r7, #15]
 8003160:	e014      	b.n	800318c <retract_all_pins+0x40>
			printf("\r\n> Retracting pin %i\r\n", i);
 8003162:	7bfb      	ldrb	r3, [r7, #15]
 8003164:	4619      	mov	r1, r3
 8003166:	4810      	ldr	r0, [pc, #64]	@ (80031a8 <retract_all_pins+0x5c>)
 8003168:	f006 fa9e 	bl	80096a8 <iprintf>
			retract_pin(i);
 800316c:	7bfb      	ldrb	r3, [r7, #15]
 800316e:	4618      	mov	r0, r3
 8003170:	f000 f89a 	bl	80032a8 <retract_pin>
			if(rxChar == '@'){
 8003174:	4b0d      	ldr	r3, [pc, #52]	@ (80031ac <retract_all_pins+0x60>)
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	2b40      	cmp	r3, #64	@ 0x40
 800317a:	d104      	bne.n	8003186 <retract_all_pins+0x3a>
				printf("\r\n** Retract all process finished by user **\r\n");
 800317c:	480c      	ldr	r0, [pc, #48]	@ (80031b0 <retract_all_pins+0x64>)
 800317e:	f006 fafb 	bl	8009778 <puts>
				break;
 8003182:	bf00      	nop
			}
		}
	}
}
 8003184:	e00b      	b.n	800319e <retract_all_pins+0x52>
		for(uint8_t i = 1; (i <= countLimit) && (i <= launcher.tubeCount); i++){
 8003186:	7bfb      	ldrb	r3, [r7, #15]
 8003188:	3301      	adds	r3, #1
 800318a:	73fb      	strb	r3, [r7, #15]
 800318c:	7bfa      	ldrb	r2, [r7, #15]
 800318e:	79fb      	ldrb	r3, [r7, #7]
 8003190:	429a      	cmp	r2, r3
 8003192:	d804      	bhi.n	800319e <retract_all_pins+0x52>
 8003194:	4b07      	ldr	r3, [pc, #28]	@ (80031b4 <retract_all_pins+0x68>)
 8003196:	785b      	ldrb	r3, [r3, #1]
 8003198:	7bfa      	ldrb	r2, [r7, #15]
 800319a:	429a      	cmp	r2, r3
 800319c:	d9e1      	bls.n	8003162 <retract_all_pins+0x16>
}
 800319e:	bf00      	nop
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	0800bff4 	.word	0x0800bff4
 80031ac:	20000189 	.word	0x20000189
 80031b0:	0800c00c 	.word	0x0800c00c
 80031b4:	20000000 	.word	0x20000000

080031b8 <grease_pins>:

void grease_pins(uint8_t cycles){
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	4603      	mov	r3, r0
 80031c0:	71fb      	strb	r3, [r7, #7]
	uint8_t stopFlag = 0;
 80031c2:	2300      	movs	r3, #0
 80031c4:	73fb      	strb	r3, [r7, #15]

	printf("\r\n> Greasing pins ...\r\n");
 80031c6:	4825      	ldr	r0, [pc, #148]	@ (800325c <grease_pins+0xa4>)
 80031c8:	f006 fad6 	bl	8009778 <puts>
	for(uint8_t j = 0; j < cycles && j < 20 ; j++){
 80031cc:	2300      	movs	r3, #0
 80031ce:	73bb      	strb	r3, [r7, #14]
 80031d0:	e030      	b.n	8003234 <grease_pins+0x7c>
		for(uint8_t k = 1; k <= launcher.tubeCount; k++){
 80031d2:	2301      	movs	r3, #1
 80031d4:	737b      	strb	r3, [r7, #13]
 80031d6:	e022      	b.n	800321e <grease_pins+0x66>
			printf("\r\n> Retracting pin %i\r\n", k);
 80031d8:	7b7b      	ldrb	r3, [r7, #13]
 80031da:	4619      	mov	r1, r3
 80031dc:	4820      	ldr	r0, [pc, #128]	@ (8003260 <grease_pins+0xa8>)
 80031de:	f006 fa63 	bl	80096a8 <iprintf>
			retract_pin(k);
 80031e2:	7b7b      	ldrb	r3, [r7, #13]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f000 f85f 	bl	80032a8 <retract_pin>
			if(rxChar == '@'){
 80031ea:	4b1e      	ldr	r3, [pc, #120]	@ (8003264 <grease_pins+0xac>)
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	2b40      	cmp	r3, #64	@ 0x40
 80031f0:	d102      	bne.n	80031f8 <grease_pins+0x40>
				stopFlag = 1;
 80031f2:	2301      	movs	r3, #1
 80031f4:	73fb      	strb	r3, [r7, #15]
				break;
 80031f6:	e017      	b.n	8003228 <grease_pins+0x70>
			}
			printf("\r\n> Extending pin %i\r\n", k);
 80031f8:	7b7b      	ldrb	r3, [r7, #13]
 80031fa:	4619      	mov	r1, r3
 80031fc:	481a      	ldr	r0, [pc, #104]	@ (8003268 <grease_pins+0xb0>)
 80031fe:	f006 fa53 	bl	80096a8 <iprintf>
			extend_pin(k);
 8003202:	7b7b      	ldrb	r3, [r7, #13]
 8003204:	4618      	mov	r0, r3
 8003206:	f000 f835 	bl	8003274 <extend_pin>
			if(rxChar == '@'){
 800320a:	4b16      	ldr	r3, [pc, #88]	@ (8003264 <grease_pins+0xac>)
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	2b40      	cmp	r3, #64	@ 0x40
 8003210:	d102      	bne.n	8003218 <grease_pins+0x60>
				stopFlag = 1;
 8003212:	2301      	movs	r3, #1
 8003214:	73fb      	strb	r3, [r7, #15]
				break;
 8003216:	e007      	b.n	8003228 <grease_pins+0x70>
		for(uint8_t k = 1; k <= launcher.tubeCount; k++){
 8003218:	7b7b      	ldrb	r3, [r7, #13]
 800321a:	3301      	adds	r3, #1
 800321c:	737b      	strb	r3, [r7, #13]
 800321e:	4b13      	ldr	r3, [pc, #76]	@ (800326c <grease_pins+0xb4>)
 8003220:	785b      	ldrb	r3, [r3, #1]
 8003222:	7b7a      	ldrb	r2, [r7, #13]
 8003224:	429a      	cmp	r2, r3
 8003226:	d9d7      	bls.n	80031d8 <grease_pins+0x20>
			}
		}
		if(stopFlag) break;
 8003228:	7bfb      	ldrb	r3, [r7, #15]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d10a      	bne.n	8003244 <grease_pins+0x8c>
	for(uint8_t j = 0; j < cycles && j < 20 ; j++){
 800322e:	7bbb      	ldrb	r3, [r7, #14]
 8003230:	3301      	adds	r3, #1
 8003232:	73bb      	strb	r3, [r7, #14]
 8003234:	7bba      	ldrb	r2, [r7, #14]
 8003236:	79fb      	ldrb	r3, [r7, #7]
 8003238:	429a      	cmp	r2, r3
 800323a:	d204      	bcs.n	8003246 <grease_pins+0x8e>
 800323c:	7bbb      	ldrb	r3, [r7, #14]
 800323e:	2b13      	cmp	r3, #19
 8003240:	d9c7      	bls.n	80031d2 <grease_pins+0x1a>
 8003242:	e000      	b.n	8003246 <grease_pins+0x8e>
		if(stopFlag) break;
 8003244:	bf00      	nop
	}
	if(stopFlag){
 8003246:	7bfb      	ldrb	r3, [r7, #15]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d002      	beq.n	8003252 <grease_pins+0x9a>
		printf("\r\n** Grease process finished by user **\r\n");
 800324c:	4808      	ldr	r0, [pc, #32]	@ (8003270 <grease_pins+0xb8>)
 800324e:	f006 fa93 	bl	8009778 <puts>
	}
}
 8003252:	bf00      	nop
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	0800c03c 	.word	0x0800c03c
 8003260:	0800bff4 	.word	0x0800bff4
 8003264:	20000189 	.word	0x20000189
 8003268:	0800bfb8 	.word	0x0800bfb8
 800326c:	20000000 	.word	0x20000000
 8003270:	0800c054 	.word	0x0800c054

08003274 <extend_pin>:


/* Extend pin wrapper
 * Parameter: xbtNum [1-8] */
void extend_pin(uint8_t xbtNum){
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	4603      	mov	r3, r0
 800327c:	71fb      	strb	r3, [r7, #7]
	if (motor.wiring == 0){ // select spin direction based on wiring
 800327e:	4b09      	ldr	r3, [pc, #36]	@ (80032a4 <extend_pin+0x30>)
 8003280:	799b      	ldrb	r3, [r3, #6]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d105      	bne.n	8003292 <extend_pin+0x1e>
		motor_select(xbtNum, CW);
 8003286:	79fb      	ldrb	r3, [r7, #7]
 8003288:	2101      	movs	r1, #1
 800328a:	4618      	mov	r0, r3
 800328c:	f000 f826 	bl	80032dc <motor_select>
	} else {
		motor_select(xbtNum, CCW);
	}
}
 8003290:	e004      	b.n	800329c <extend_pin+0x28>
		motor_select(xbtNum, CCW);
 8003292:	79fb      	ldrb	r3, [r7, #7]
 8003294:	2100      	movs	r1, #0
 8003296:	4618      	mov	r0, r3
 8003298:	f000 f820 	bl	80032dc <motor_select>
}
 800329c:	bf00      	nop
 800329e:	3708      	adds	r7, #8
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	20000010 	.word	0x20000010

080032a8 <retract_pin>:

/* Retract pin wrapper
 * Parameter: xbtNum [1-8] */
void retract_pin(uint8_t xbtNum){
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	4603      	mov	r3, r0
 80032b0:	71fb      	strb	r3, [r7, #7]
	if (motor.wiring == 0){ // select spin direction based on wiring
 80032b2:	4b09      	ldr	r3, [pc, #36]	@ (80032d8 <retract_pin+0x30>)
 80032b4:	799b      	ldrb	r3, [r3, #6]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d105      	bne.n	80032c6 <retract_pin+0x1e>
		motor_select(xbtNum, CCW);
 80032ba:	79fb      	ldrb	r3, [r7, #7]
 80032bc:	2100      	movs	r1, #0
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 f80c 	bl	80032dc <motor_select>
	} else {
		motor_select(xbtNum, CW);
	}
}
 80032c4:	e004      	b.n	80032d0 <retract_pin+0x28>
		motor_select(xbtNum, CW);
 80032c6:	79fb      	ldrb	r3, [r7, #7]
 80032c8:	2101      	movs	r1, #1
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 f806 	bl	80032dc <motor_select>
}
 80032d0:	bf00      	nop
 80032d2:	3708      	adds	r7, #8
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	20000010 	.word	0x20000010

080032dc <motor_select>:

/* Motor driver selector
 * direction to retract/extend may be different based on wiring
 * Parameters: XBT number, direction {CW,CCW} */
void motor_select(uint8_t xbtNum, motorDir_t dir){
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	4603      	mov	r3, r0
 80032e4:	460a      	mov	r2, r1
 80032e6:	71fb      	strb	r3, [r7, #7]
 80032e8:	4613      	mov	r3, r2
 80032ea:	71bb      	strb	r3, [r7, #6]
	uint16_t rtime = motor.runTime;
 80032ec:	4b4b      	ldr	r3, [pc, #300]	@ (800341c <motor_select+0x140>)
 80032ee:	881b      	ldrh	r3, [r3, #0]
 80032f0:	81fb      	strh	r3, [r7, #14]
	uint16_t imax = 0;
 80032f2:	2300      	movs	r3, #0
 80032f4:	81bb      	strh	r3, [r7, #12]

	if( !(motor.runTime >= MOTOR_RUNTIME_MIN && motor.runTime <= MOTOR_RUNTIME_MAX) ){
 80032f6:	4b49      	ldr	r3, [pc, #292]	@ (800341c <motor_select+0x140>)
 80032f8:	881b      	ldrh	r3, [r3, #0]
 80032fa:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80032fe:	d305      	bcc.n	800330c <motor_select+0x30>
 8003300:	4b46      	ldr	r3, [pc, #280]	@ (800341c <motor_select+0x140>)
 8003302:	881b      	ldrh	r3, [r3, #0]
 8003304:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8003308:	4293      	cmp	r3, r2
 800330a:	d902      	bls.n	8003312 <motor_select+0x36>
		rtime = MOTOR_RUNTIME_DEFAULT; // run with default runtime
 800330c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8003310:	81fb      	strh	r3, [r7, #14]
	}

	if(motorLock == mFree){
 8003312:	4b43      	ldr	r3, [pc, #268]	@ (8003420 <motor_select+0x144>)
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d17b      	bne.n	8003412 <motor_select+0x136>
		motorLock = mLocked;
 800331a:	4b41      	ldr	r3, [pc, #260]	@ (8003420 <motor_select+0x144>)
 800331c:	2201      	movs	r2, #1
 800331e:	701a      	strb	r2, [r3, #0]
		switch (xbtNum){
 8003320:	79fb      	ldrb	r3, [r7, #7]
 8003322:	3b01      	subs	r3, #1
 8003324:	2b07      	cmp	r3, #7
 8003326:	d85b      	bhi.n	80033e0 <motor_select+0x104>
 8003328:	a201      	add	r2, pc, #4	@ (adr r2, 8003330 <motor_select+0x54>)
 800332a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332e:	bf00      	nop
 8003330:	08003351 	.word	0x08003351
 8003334:	08003363 	.word	0x08003363
 8003338:	08003375 	.word	0x08003375
 800333c:	08003387 	.word	0x08003387
 8003340:	08003399 	.word	0x08003399
 8003344:	080033ab 	.word	0x080033ab
 8003348:	080033bd 	.word	0x080033bd
 800334c:	080033cf 	.word	0x080033cf
		case 1:
			imax = motor_drive(ENABLE_M1_GPIO_Port, ENABLE_M1_Pin, dir, rtime);
 8003350:	89fb      	ldrh	r3, [r7, #14]
 8003352:	79ba      	ldrb	r2, [r7, #6]
 8003354:	2104      	movs	r1, #4
 8003356:	4833      	ldr	r0, [pc, #204]	@ (8003424 <motor_select+0x148>)
 8003358:	f000 f8f6 	bl	8003548 <motor_drive>
 800335c:	4603      	mov	r3, r0
 800335e:	81bb      	strh	r3, [r7, #12]
			break;
 8003360:	e044      	b.n	80033ec <motor_select+0x110>
		case 2:
			imax = motor_drive(ENABLE_M2_GPIO_Port, ENABLE_M2_Pin, dir, rtime);
 8003362:	89fb      	ldrh	r3, [r7, #14]
 8003364:	79ba      	ldrb	r2, [r7, #6]
 8003366:	2108      	movs	r1, #8
 8003368:	482e      	ldr	r0, [pc, #184]	@ (8003424 <motor_select+0x148>)
 800336a:	f000 f8ed 	bl	8003548 <motor_drive>
 800336e:	4603      	mov	r3, r0
 8003370:	81bb      	strh	r3, [r7, #12]
			break;
 8003372:	e03b      	b.n	80033ec <motor_select+0x110>
		case 3:
			imax = motor_drive(ENABLE_M3_GPIO_Port, ENABLE_M3_Pin, dir, rtime);
 8003374:	89fb      	ldrh	r3, [r7, #14]
 8003376:	79ba      	ldrb	r2, [r7, #6]
 8003378:	2101      	movs	r1, #1
 800337a:	482b      	ldr	r0, [pc, #172]	@ (8003428 <motor_select+0x14c>)
 800337c:	f000 f8e4 	bl	8003548 <motor_drive>
 8003380:	4603      	mov	r3, r0
 8003382:	81bb      	strh	r3, [r7, #12]
			break;
 8003384:	e032      	b.n	80033ec <motor_select+0x110>
		case 4:
			imax = motor_drive(ENABLE_M4_GPIO_Port, ENABLE_M4_Pin, dir, rtime);
 8003386:	89fb      	ldrh	r3, [r7, #14]
 8003388:	79ba      	ldrb	r2, [r7, #6]
 800338a:	2102      	movs	r1, #2
 800338c:	4826      	ldr	r0, [pc, #152]	@ (8003428 <motor_select+0x14c>)
 800338e:	f000 f8db 	bl	8003548 <motor_drive>
 8003392:	4603      	mov	r3, r0
 8003394:	81bb      	strh	r3, [r7, #12]
			break;
 8003396:	e029      	b.n	80033ec <motor_select+0x110>
		case 5:
			imax = motor_drive(ENABLE_M5_GPIO_Port, ENABLE_M5_Pin, dir, rtime);
 8003398:	89fb      	ldrh	r3, [r7, #14]
 800339a:	79ba      	ldrb	r2, [r7, #6]
 800339c:	2110      	movs	r1, #16
 800339e:	4822      	ldr	r0, [pc, #136]	@ (8003428 <motor_select+0x14c>)
 80033a0:	f000 f8d2 	bl	8003548 <motor_drive>
 80033a4:	4603      	mov	r3, r0
 80033a6:	81bb      	strh	r3, [r7, #12]
			break;
 80033a8:	e020      	b.n	80033ec <motor_select+0x110>
		case 6:
			imax = motor_drive(ENABLE_M6_GPIO_Port, ENABLE_M6_Pin, dir, rtime);
 80033aa:	89fb      	ldrh	r3, [r7, #14]
 80033ac:	79ba      	ldrb	r2, [r7, #6]
 80033ae:	2120      	movs	r1, #32
 80033b0:	481d      	ldr	r0, [pc, #116]	@ (8003428 <motor_select+0x14c>)
 80033b2:	f000 f8c9 	bl	8003548 <motor_drive>
 80033b6:	4603      	mov	r3, r0
 80033b8:	81bb      	strh	r3, [r7, #12]
			break;
 80033ba:	e017      	b.n	80033ec <motor_select+0x110>
		case 7:
			imax = motor_drive(ENABLE_M7_GPIO_Port, ENABLE_M7_Pin, dir, rtime);
 80033bc:	89fb      	ldrh	r3, [r7, #14]
 80033be:	79ba      	ldrb	r2, [r7, #6]
 80033c0:	2140      	movs	r1, #64	@ 0x40
 80033c2:	4819      	ldr	r0, [pc, #100]	@ (8003428 <motor_select+0x14c>)
 80033c4:	f000 f8c0 	bl	8003548 <motor_drive>
 80033c8:	4603      	mov	r3, r0
 80033ca:	81bb      	strh	r3, [r7, #12]
			break;
 80033cc:	e00e      	b.n	80033ec <motor_select+0x110>
		case 8:
			imax = motor_drive(ENABLE_M8_GPIO_Port, ENABLE_M8_Pin, dir, rtime);
 80033ce:	89fb      	ldrh	r3, [r7, #14]
 80033d0:	79ba      	ldrb	r2, [r7, #6]
 80033d2:	2180      	movs	r1, #128	@ 0x80
 80033d4:	4814      	ldr	r0, [pc, #80]	@ (8003428 <motor_select+0x14c>)
 80033d6:	f000 f8b7 	bl	8003548 <motor_drive>
 80033da:	4603      	mov	r3, r0
 80033dc:	81bb      	strh	r3, [r7, #12]
			break;
 80033de:	e005      	b.n	80033ec <motor_select+0x110>
		default:
			printf("\r\n** ERROR: XBT %i motor not found **\r\n", xbtNum);
 80033e0:	79fb      	ldrb	r3, [r7, #7]
 80033e2:	4619      	mov	r1, r3
 80033e4:	4811      	ldr	r0, [pc, #68]	@ (800342c <motor_select+0x150>)
 80033e6:	f006 f95f 	bl	80096a8 <iprintf>
			break;
 80033ea:	bf00      	nop
		}
		// release motor lock
		motorLock = mFree;
 80033ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003420 <motor_select+0x144>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	701a      	strb	r2, [r3, #0]
		// update motor stats
		if(xbtNum >= 1 && xbtNum <= 8 ){
 80033f2:	79fb      	ldrb	r3, [r7, #7]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00c      	beq.n	8003412 <motor_select+0x136>
 80033f8:	79fb      	ldrb	r3, [r7, #7]
 80033fa:	2b08      	cmp	r3, #8
 80033fc:	d809      	bhi.n	8003412 <motor_select+0x136>
			// store use count
			motor_count_update(xbtNum);
 80033fe:	79fb      	ldrb	r3, [r7, #7]
 8003400:	4618      	mov	r0, r3
 8003402:	f000 f815 	bl	8003430 <motor_count_update>
			// store Imax if new max is found
			motor_imax_update(xbtNum, imax);
 8003406:	89ba      	ldrh	r2, [r7, #12]
 8003408:	79fb      	ldrb	r3, [r7, #7]
 800340a:	4611      	mov	r1, r2
 800340c:	4618      	mov	r0, r3
 800340e:	f000 f837 	bl	8003480 <motor_imax_update>
		}
	}
}
 8003412:	bf00      	nop
 8003414:	3710      	adds	r7, #16
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	20000010 	.word	0x20000010
 8003420:	20000184 	.word	0x20000184
 8003424:	40011000 	.word	0x40011000
 8003428:	40010800 	.word	0x40010800
 800342c:	0800c080 	.word	0x0800c080

08003430 <motor_count_update>:

/* Update the stepper motor use count
 * Parameter: xbt tube used
 * Warning: The EEPROM memory locations for motor.count[i] must be cleared to 0,
 * otherwise values present from factory will be 0xFFFF (65535) */
void motor_count_update(uint8_t xbtNum){
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	4603      	mov	r3, r0
 8003438:	71fb      	strb	r3, [r7, #7]
	motor.count[xbtNum-1]++;
 800343a:	79fb      	ldrb	r3, [r7, #7]
 800343c:	3b01      	subs	r3, #1
 800343e:	490f      	ldr	r1, [pc, #60]	@ (800347c <motor_count_update+0x4c>)
 8003440:	f103 020c 	add.w	r2, r3, #12
 8003444:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003448:	3201      	adds	r2, #1
 800344a:	b291      	uxth	r1, r2
 800344c:	4a0b      	ldr	r2, [pc, #44]	@ (800347c <motor_count_update+0x4c>)
 800344e:	330c      	adds	r3, #12
 8003450:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	eeprom_write_nbytes(M_1COUNT2B + (xbtNum-1)*2, sizeof(motor.count[xbtNum-1]), &motor.count[xbtNum-1]);
 8003454:	79fb      	ldrb	r3, [r7, #7]
 8003456:	3307      	adds	r3, #7
 8003458:	b2db      	uxtb	r3, r3
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	b2d8      	uxtb	r0, r3
 800345e:	79fb      	ldrb	r3, [r7, #7]
 8003460:	3b01      	subs	r3, #1
 8003462:	330c      	adds	r3, #12
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	4a05      	ldr	r2, [pc, #20]	@ (800347c <motor_count_update+0x4c>)
 8003468:	4413      	add	r3, r2
 800346a:	461a      	mov	r2, r3
 800346c:	2102      	movs	r1, #2
 800346e:	f000 fbbd 	bl	8003bec <eeprom_write_nbytes>
}
 8003472:	bf00      	nop
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	20000010 	.word	0x20000010

08003480 <motor_imax_update>:


/* Update the maximum logged current for each stepper, if applicable
 * Warning: The EEPROM memory locations for motor.imax[i] must be cleared to 0,
 * otherwise values present from factory will be 0xFFFF (65535) >> any imax */
void motor_imax_update(uint8_t xbtNum, uint16_t imax){
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	4603      	mov	r3, r0
 8003488:	460a      	mov	r2, r1
 800348a:	71fb      	strb	r3, [r7, #7]
 800348c:	4613      	mov	r3, r2
 800348e:	80bb      	strh	r3, [r7, #4]
	if( motor.imax[xbtNum-1] < imax){
 8003490:	79fb      	ldrb	r3, [r7, #7]
 8003492:	3b01      	subs	r3, #1
 8003494:	4a10      	ldr	r2, [pc, #64]	@ (80034d8 <motor_imax_update+0x58>)
 8003496:	3304      	adds	r3, #4
 8003498:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800349c:	88ba      	ldrh	r2, [r7, #4]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d915      	bls.n	80034ce <motor_imax_update+0x4e>
		motor.imax[xbtNum-1] = imax;
 80034a2:	79fb      	ldrb	r3, [r7, #7]
 80034a4:	3b01      	subs	r3, #1
 80034a6:	490c      	ldr	r1, [pc, #48]	@ (80034d8 <motor_imax_update+0x58>)
 80034a8:	3304      	adds	r3, #4
 80034aa:	88ba      	ldrh	r2, [r7, #4]
 80034ac:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		eeprom_write_nbytes(M_1MXAMP2B + (xbtNum-1)*2, sizeof(motor.imax[xbtNum-1]), &motor.imax[xbtNum-1]);
 80034b0:	79fb      	ldrb	r3, [r7, #7]
 80034b2:	330f      	adds	r3, #15
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	b2d8      	uxtb	r0, r3
 80034ba:	79fb      	ldrb	r3, [r7, #7]
 80034bc:	3b01      	subs	r3, #1
 80034be:	3304      	adds	r3, #4
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	4a05      	ldr	r2, [pc, #20]	@ (80034d8 <motor_imax_update+0x58>)
 80034c4:	4413      	add	r3, r2
 80034c6:	461a      	mov	r2, r3
 80034c8:	2102      	movs	r1, #2
 80034ca:	f000 fb8f 	bl	8003bec <eeprom_write_nbytes>
	}
}
 80034ce:	bf00      	nop
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	20000010 	.word	0x20000010

080034dc <motor_init>:

/* Initialize all motor drivers in disabled mode */
void motor_init(void){
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(ENABLE_M1_GPIO_Port, ENABLE_M1_Pin, RESET); // start disabled
 80034e0:	2200      	movs	r2, #0
 80034e2:	2104      	movs	r1, #4
 80034e4:	4815      	ldr	r0, [pc, #84]	@ (800353c <motor_init+0x60>)
 80034e6:	f002 fa23 	bl	8005930 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M2_GPIO_Port, ENABLE_M2_Pin, RESET); // start disabled
 80034ea:	2200      	movs	r2, #0
 80034ec:	2108      	movs	r1, #8
 80034ee:	4813      	ldr	r0, [pc, #76]	@ (800353c <motor_init+0x60>)
 80034f0:	f002 fa1e 	bl	8005930 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M3_GPIO_Port, ENABLE_M3_Pin, RESET); // start disabled
 80034f4:	2200      	movs	r2, #0
 80034f6:	2101      	movs	r1, #1
 80034f8:	4811      	ldr	r0, [pc, #68]	@ (8003540 <motor_init+0x64>)
 80034fa:	f002 fa19 	bl	8005930 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M4_GPIO_Port, ENABLE_M4_Pin, RESET); // start disabled
 80034fe:	2200      	movs	r2, #0
 8003500:	2102      	movs	r1, #2
 8003502:	480f      	ldr	r0, [pc, #60]	@ (8003540 <motor_init+0x64>)
 8003504:	f002 fa14 	bl	8005930 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M5_GPIO_Port, ENABLE_M5_Pin, RESET); // start disabled
 8003508:	2200      	movs	r2, #0
 800350a:	2110      	movs	r1, #16
 800350c:	480c      	ldr	r0, [pc, #48]	@ (8003540 <motor_init+0x64>)
 800350e:	f002 fa0f 	bl	8005930 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M6_GPIO_Port, ENABLE_M6_Pin, RESET); // start disabled
 8003512:	2200      	movs	r2, #0
 8003514:	2120      	movs	r1, #32
 8003516:	480a      	ldr	r0, [pc, #40]	@ (8003540 <motor_init+0x64>)
 8003518:	f002 fa0a 	bl	8005930 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M7_GPIO_Port, ENABLE_M7_Pin, RESET); // start disabled
 800351c:	2200      	movs	r2, #0
 800351e:	2140      	movs	r1, #64	@ 0x40
 8003520:	4807      	ldr	r0, [pc, #28]	@ (8003540 <motor_init+0x64>)
 8003522:	f002 fa05 	bl	8005930 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M8_GPIO_Port, ENABLE_M8_Pin, RESET); // start disabled
 8003526:	2200      	movs	r2, #0
 8003528:	2180      	movs	r1, #128	@ 0x80
 800352a:	4805      	ldr	r0, [pc, #20]	@ (8003540 <motor_init+0x64>)
 800352c:	f002 fa00 	bl	8005930 <HAL_GPIO_WritePin>
	  // calibrate ADC
	  HAL_ADCEx_Calibration_Start(&hadc1);
 8003530:	4804      	ldr	r0, [pc, #16]	@ (8003544 <motor_init+0x68>)
 8003532:	f001 fc1b 	bl	8004d6c <HAL_ADCEx_Calibration_Start>
}
 8003536:	bf00      	nop
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	40011000 	.word	0x40011000
 8003540:	40010800 	.word	0x40010800
 8003544:	200000bc 	.word	0x200000bc

08003548 <motor_drive>:
 * Parameters:
 * - Motor enable port and pin
 * - Motor direction CW/CCW
 * - Motor runtime in ms
 * Return: max current logged in mA */
uint16_t motor_drive(GPIO_TypeDef * motorPort, uint16_t motorPin, motorDir_t motorDirection, uint32_t runTime ){
 8003548:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800354c:	b09b      	sub	sp, #108	@ 0x6c
 800354e:	af08      	add	r7, sp, #32
 8003550:	61f8      	str	r0, [r7, #28]
 8003552:	617b      	str	r3, [r7, #20]
 8003554:	460b      	mov	r3, r1
 8003556:	837b      	strh	r3, [r7, #26]
 8003558:	4613      	mov	r3, r2
 800355a:	767b      	strb	r3, [r7, #25]
	uint16_t imax = 0;
 800355c:	2300      	movs	r3, #0
 800355e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	uint32_t timeStart, timeNow;
	uint16_t adcSampleCount = 0;
 8003562:	2300      	movs	r3, #0
 8003564:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
	adcScan_t adcReading;
	// Initialize PWM
	HAL_GPIO_WritePin(motorPort, motorPin, RESET); // make sure driver pin is disabled
 8003568:	8b7b      	ldrh	r3, [r7, #26]
 800356a:	2200      	movs	r2, #0
 800356c:	4619      	mov	r1, r3
 800356e:	69f8      	ldr	r0, [r7, #28]
 8003570:	f002 f9de 	bl	8005930 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // initialize PWM pulses for DRV8826
 8003574:	2108      	movs	r1, #8
 8003576:	485b      	ldr	r0, [pc, #364]	@ (80036e4 <motor_drive+0x19c>)
 8003578:	f004 f864 	bl	8007644 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(DIR_GPIO_Port,DIR_Pin, motorDirection); // set motor direction
 800357c:	7e7b      	ldrb	r3, [r7, #25]
 800357e:	461a      	mov	r2, r3
 8003580:	2110      	movs	r1, #16
 8003582:	4859      	ldr	r0, [pc, #356]	@ (80036e8 <motor_drive+0x1a0>)
 8003584:	f002 f9d4 	bl	8005930 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motorPort, motorPin, SET); // enable driver to run motor
 8003588:	8b7b      	ldrh	r3, [r7, #26]
 800358a:	2201      	movs	r2, #1
 800358c:	4619      	mov	r1, r3
 800358e:	69f8      	ldr	r0, [r7, #28]
 8003590:	f002 f9ce 	bl	8005930 <HAL_GPIO_WritePin>
	// initial timer count using SysTick timer (32 bit variable uwTick incremented every 1 ms, MAX = 50 days)
	timeStart = HAL_GetTick();
 8003594:	f000 ffae 	bl	80044f4 <HAL_GetTick>
 8003598:	6438      	str	r0, [r7, #64]	@ 0x40
	// get 1 current, voltage, temp reading every samplePeriod ms using TIM4 events
	HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_4); // trigger adc conversions in DMA mode every x ms
 800359a:	210c      	movs	r1, #12
 800359c:	4853      	ldr	r0, [pc, #332]	@ (80036ec <motor_drive+0x1a4>)
 800359e:	f004 f957 	bl	8007850 <HAL_TIM_PWM_Start_IT>
	printf("\r\nMotor Running (Stop with '@') ...\r\n");
 80035a2:	4853      	ldr	r0, [pc, #332]	@ (80036f0 <motor_drive+0x1a8>)
 80035a4:	f006 f8e8 	bl	8009778 <puts>
	// Run motor checking Systick time against runtime, sample ADC values and stop if '@' is received
	while(1){
		// track motor runtime and break loop after desired time elapsed
		timeNow = HAL_GetTick();
 80035a8:	f000 ffa4 	bl	80044f4 <HAL_GetTick>
 80035ac:	63f8      	str	r0, [r7, #60]	@ 0x3c
		if(timeNow >= timeStart){
 80035ae:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80035b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d306      	bcc.n	80035c4 <motor_drive+0x7c>
			if((timeNow - timeStart) >= runTime) break;
 80035b6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80035b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d807      	bhi.n	80035d2 <motor_drive+0x8a>
 80035c2:	e079      	b.n	80036b8 <motor_drive+0x170>
		} else { // if timeNow < timeStart, this only happens when uwTick ~ 2^32 (50 days) and there was an overflow
			if( (HAL_MAX_DELAY - timeStart + timeNow) >= runTime) break;
 80035c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80035c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	3b01      	subs	r3, #1
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d971      	bls.n	80036b6 <motor_drive+0x16e>
		}
		// check if user sent stop signal
		if(active == rxStatus){ // set to active with UART RX interrupt
 80035d2:	4b48      	ldr	r3, [pc, #288]	@ (80036f4 <motor_drive+0x1ac>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d10a      	bne.n	80035f0 <motor_drive+0xa8>
			rxStatus = idle;
 80035da:	4b46      	ldr	r3, [pc, #280]	@ (80036f4 <motor_drive+0x1ac>)
 80035dc:	2200      	movs	r2, #0
 80035de:	701a      	strb	r2, [r3, #0]
			if(rxChar == '@'){
 80035e0:	4b45      	ldr	r3, [pc, #276]	@ (80036f8 <motor_drive+0x1b0>)
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	2b40      	cmp	r3, #64	@ 0x40
 80035e6:	d103      	bne.n	80035f0 <motor_drive+0xa8>
				printf("\r\n** Motor stopped by user! **\r\n");
 80035e8:	4844      	ldr	r0, [pc, #272]	@ (80036fc <motor_drive+0x1b4>)
 80035ea:	f006 f8c5 	bl	8009778 <puts>
				break;
 80035ee:	e063      	b.n	80036b8 <motor_drive+0x170>
			}
		}
		// Print ADC values when flag is set in TIM4_IRQHandler (stm32f1xx_it.c)
		if(adcTimerTrigger == 1){
 80035f0:	4b43      	ldr	r3, [pc, #268]	@ (8003700 <motor_drive+0x1b8>)
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d1d7      	bne.n	80035a8 <motor_drive+0x60>
			// toggle led if control flag is set by user
			if(MOTOR_TOGGLE_LED == 1){
				HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80035f8:	2102      	movs	r1, #2
 80035fa:	4842      	ldr	r0, [pc, #264]	@ (8003704 <motor_drive+0x1bc>)
 80035fc:	f002 f9b0 	bl	8005960 <HAL_GPIO_TogglePin>
			}
			// reset adc timer flag
			adcTimerTrigger = 0;
 8003600:	4b3f      	ldr	r3, [pc, #252]	@ (8003700 <motor_drive+0x1b8>)
 8003602:	2200      	movs	r2, #0
 8003604:	701a      	strb	r2, [r3, #0]
			// average all values and get conversions
			adcReading = adc_get_values();
 8003606:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800360a:	4618      	mov	r0, r3
 800360c:	f000 f880 	bl	8003710 <adc_get_values>
			// print values read
			printf("<%02i> Current [AD# %i]: %i.%i mA | Voltage [AD# %i]: %i.%i V | Temperature [AD# %i]: %i.%i C\r\n", (int)adcSampleCount,
 8003610:	f8b7 4044 	ldrh.w	r4, [r7, #68]	@ 0x44
					 	 (int)adcReading.current.rawValue, (int)adcReading.current.realValue, get_decimal(adcReading.current.realValue, 1),
 8003614:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
			printf("<%02i> Current [AD# %i]: %i.%i mA | Voltage [AD# %i]: %i.%i V | Temperature [AD# %i]: %i.%i C\r\n", (int)adcSampleCount,
 8003616:	4699      	mov	r9, r3
					 	 (int)adcReading.current.rawValue, (int)adcReading.current.realValue, get_decimal(adcReading.current.realValue, 1),
 8003618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
			printf("<%02i> Current [AD# %i]: %i.%i mA | Voltage [AD# %i]: %i.%i V | Temperature [AD# %i]: %i.%i C\r\n", (int)adcSampleCount,
 800361a:	4618      	mov	r0, r3
 800361c:	f7fd fc0e 	bl	8000e3c <__aeabi_f2iz>
 8003620:	4680      	mov	r8, r0
					 	 (int)adcReading.current.rawValue, (int)adcReading.current.realValue, get_decimal(adcReading.current.realValue, 1),
 8003622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003624:	2101      	movs	r1, #1
 8003626:	4618      	mov	r0, r3
 8003628:	f7ff fb10 	bl	8002c4c <get_decimal>
 800362c:	4603      	mov	r3, r0
			printf("<%02i> Current [AD# %i]: %i.%i mA | Voltage [AD# %i]: %i.%i V | Temperature [AD# %i]: %i.%i C\r\n", (int)adcSampleCount,
 800362e:	613b      	str	r3, [r7, #16]
						 (int)adcReading.voltage.rawValue, (int)adcReading.voltage.realValue, get_decimal(adcReading.voltage.realValue, 1),
 8003630:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
			printf("<%02i> Current [AD# %i]: %i.%i mA | Voltage [AD# %i]: %i.%i V | Temperature [AD# %i]: %i.%i C\r\n", (int)adcSampleCount,
 8003632:	60fb      	str	r3, [r7, #12]
						 (int)adcReading.voltage.rawValue, (int)adcReading.voltage.realValue, get_decimal(adcReading.voltage.realValue, 1),
 8003634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
			printf("<%02i> Current [AD# %i]: %i.%i mA | Voltage [AD# %i]: %i.%i V | Temperature [AD# %i]: %i.%i C\r\n", (int)adcSampleCount,
 8003636:	4618      	mov	r0, r3
 8003638:	f7fd fc00 	bl	8000e3c <__aeabi_f2iz>
 800363c:	4605      	mov	r5, r0
						 (int)adcReading.voltage.rawValue, (int)adcReading.voltage.realValue, get_decimal(adcReading.voltage.realValue, 1),
 800363e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003640:	2101      	movs	r1, #1
 8003642:	4618      	mov	r0, r3
 8003644:	f7ff fb02 	bl	8002c4c <get_decimal>
 8003648:	4603      	mov	r3, r0
			printf("<%02i> Current [AD# %i]: %i.%i mA | Voltage [AD# %i]: %i.%i V | Temperature [AD# %i]: %i.%i C\r\n", (int)adcSampleCount,
 800364a:	60bb      	str	r3, [r7, #8]
						 (int)adcReading.temperature.rawValue, (int)adcReading.temperature.realValue, get_decimal(adcReading.temperature.realValue, 1));
 800364c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
			printf("<%02i> Current [AD# %i]: %i.%i mA | Voltage [AD# %i]: %i.%i V | Temperature [AD# %i]: %i.%i C\r\n", (int)adcSampleCount,
 800364e:	607b      	str	r3, [r7, #4]
						 (int)adcReading.temperature.rawValue, (int)adcReading.temperature.realValue, get_decimal(adcReading.temperature.realValue, 1));
 8003650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
			printf("<%02i> Current [AD# %i]: %i.%i mA | Voltage [AD# %i]: %i.%i V | Temperature [AD# %i]: %i.%i C\r\n", (int)adcSampleCount,
 8003652:	4618      	mov	r0, r3
 8003654:	f7fd fbf2 	bl	8000e3c <__aeabi_f2iz>
 8003658:	4606      	mov	r6, r0
						 (int)adcReading.temperature.rawValue, (int)adcReading.temperature.realValue, get_decimal(adcReading.temperature.realValue, 1));
 800365a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800365c:	2101      	movs	r1, #1
 800365e:	4618      	mov	r0, r3
 8003660:	f7ff faf4 	bl	8002c4c <get_decimal>
 8003664:	4603      	mov	r3, r0
			printf("<%02i> Current [AD# %i]: %i.%i mA | Voltage [AD# %i]: %i.%i V | Temperature [AD# %i]: %i.%i C\r\n", (int)adcSampleCount,
 8003666:	9306      	str	r3, [sp, #24]
 8003668:	9605      	str	r6, [sp, #20]
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	9204      	str	r2, [sp, #16]
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	9203      	str	r2, [sp, #12]
 8003672:	9502      	str	r5, [sp, #8]
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	9201      	str	r2, [sp, #4]
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	9300      	str	r3, [sp, #0]
 800367c:	4643      	mov	r3, r8
 800367e:	464a      	mov	r2, r9
 8003680:	4621      	mov	r1, r4
 8003682:	4821      	ldr	r0, [pc, #132]	@ (8003708 <motor_drive+0x1c0>)
 8003684:	f006 f810 	bl	80096a8 <iprintf>
			adcSampleCount++;
 8003688:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800368c:	3301      	adds	r3, #1
 800368e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
			// update imax
			if(imax < (uint16_t)adcReading.current.realValue){ // if previous imax is less than new one, replace it
 8003692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003694:	4618      	mov	r0, r3
 8003696:	f7fd fbf7 	bl	8000e88 <__aeabi_f2uiz>
 800369a:	4603      	mov	r3, r0
 800369c:	b29b      	uxth	r3, r3
 800369e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d280      	bcs.n	80035a8 <motor_drive+0x60>
				imax = (uint16_t)adcReading.current.realValue;
 80036a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7fd fbed 	bl	8000e88 <__aeabi_f2uiz>
 80036ae:	4603      	mov	r3, r0
 80036b0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		timeNow = HAL_GetTick();
 80036b4:	e778      	b.n	80035a8 <motor_drive+0x60>
			if( (HAL_MAX_DELAY - timeStart + timeNow) >= runTime) break;
 80036b6:	bf00      	nop
			}
		}
	}
	// stop PWM and ADC sample timers
	HAL_GPIO_WritePin(motorPort, motorPin, RESET); // disable motor driver
 80036b8:	8b7b      	ldrh	r3, [r7, #26]
 80036ba:	2200      	movs	r2, #0
 80036bc:	4619      	mov	r1, r3
 80036be:	69f8      	ldr	r0, [r7, #28]
 80036c0:	f002 f936 	bl	8005930 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3); // stop PWM signal to step the motor
 80036c4:	2108      	movs	r1, #8
 80036c6:	4807      	ldr	r0, [pc, #28]	@ (80036e4 <motor_drive+0x19c>)
 80036c8:	f004 f85e 	bl	8007788 <HAL_TIM_PWM_Stop>
	//HAL_ADC_Stop_DMA(&hadc1); // stop ADC conversion if there was one triggered before exiting the while(1)
	HAL_TIM_PWM_Stop_IT(&htim4, TIM_CHANNEL_4); // stop timer triggering adc conversions
 80036cc:	210c      	movs	r1, #12
 80036ce:	4807      	ldr	r0, [pc, #28]	@ (80036ec <motor_drive+0x1a4>)
 80036d0:	f004 f9ae 	bl	8007a30 <HAL_TIM_PWM_Stop_IT>

	return imax;
 80036d4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
}
 80036d8:	4618      	mov	r0, r3
 80036da:	374c      	adds	r7, #76	@ 0x4c
 80036dc:	46bd      	mov	sp, r7
 80036de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80036e2:	bf00      	nop
 80036e4:	20000194 	.word	0x20000194
 80036e8:	40011000 	.word	0x40011000
 80036ec:	200001dc 	.word	0x200001dc
 80036f0:	0800c0a8 	.word	0x0800c0a8
 80036f4:	20000186 	.word	0x20000186
 80036f8:	20000189 	.word	0x20000189
 80036fc:	0800c0d0 	.word	0x0800c0d0
 8003700:	2000018b 	.word	0x2000018b
 8003704:	40010c00 	.word	0x40010c00
 8003708:	0800c0f0 	.word	0x0800c0f0
 800370c:	00000000 	.word	0x00000000

08003710 <adc_get_values>:
/*************************************** ADC CONTROL FUNCTIONS ***************************************/

/* Read voltage, current and internal STM32 temperature
 * Average a number of readings defined in ADC_SAMPLES and converts them to real values
 * Returns a struct with AD counts and physical values */
adcScan_t adc_get_values(void){
 8003710:	b5b0      	push	{r4, r5, r7, lr}
 8003712:	b08e      	sub	sp, #56	@ 0x38
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
	uint16_t adcBuffer[ADC_BUFFER] = {'\0'}; // store 3 ADC measurements in DMA mode: [Vin0,Im0,TempInt0,Vin1,Im1,...]
 8003718:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	809a      	strh	r2, [r3, #4]
	uint32_t vAccum = 0, iAccum = 0, tAccum = 0;
 8003722:	2300      	movs	r3, #0
 8003724:	637b      	str	r3, [r7, #52]	@ 0x34
 8003726:	2300      	movs	r3, #0
 8003728:	633b      	str	r3, [r7, #48]	@ 0x30
 800372a:	2300      	movs	r3, #0
 800372c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	adcScan_t adc = {.current = {0,0}, .voltage = {0,0}, .temperature = {0,0} };
 800372e:	f107 030c 	add.w	r3, r7, #12
 8003732:	2200      	movs	r2, #0
 8003734:	601a      	str	r2, [r3, #0]
 8003736:	605a      	str	r2, [r3, #4]
 8003738:	609a      	str	r2, [r3, #8]
 800373a:	60da      	str	r2, [r3, #12]
 800373c:	611a      	str	r2, [r3, #16]
 800373e:	615a      	str	r2, [r3, #20]

	// Sample ADC scan and fill the DMA buffer (3 channels: AIN10, AIN11, TEMPINT)
	for(uint16_t j = 0; j < ADC_SAMPLES; j++){
 8003740:	2300      	movs	r3, #0
 8003742:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8003744:	e018      	b.n	8003778 <adc_get_values+0x68>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcBuffer, ADC_BUFFER);
 8003746:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800374a:	2203      	movs	r2, #3
 800374c:	4619      	mov	r1, r3
 800374e:	4860      	ldr	r0, [pc, #384]	@ (80038d0 <adc_get_values+0x1c0>)
 8003750:	f000 ffd6 	bl	8004700 <HAL_ADC_Start_DMA>
		vAccum += adcBuffer[0];
 8003754:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003756:	461a      	mov	r2, r3
 8003758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800375a:	4413      	add	r3, r2
 800375c:	637b      	str	r3, [r7, #52]	@ 0x34
		iAccum += adcBuffer[1];
 800375e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003760:	461a      	mov	r2, r3
 8003762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003764:	4413      	add	r3, r2
 8003766:	633b      	str	r3, [r7, #48]	@ 0x30
		tAccum += adcBuffer[2];
 8003768:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800376a:	461a      	mov	r2, r3
 800376c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800376e:	4413      	add	r3, r2
 8003770:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for(uint16_t j = 0; j < ADC_SAMPLES; j++){
 8003772:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003774:	3301      	adds	r3, #1
 8003776:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8003778:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800377a:	2b63      	cmp	r3, #99	@ 0x63
 800377c:	d9e3      	bls.n	8003746 <adc_get_values+0x36>
//		HAL_Delay(1); // needed for debugging
	}
	HAL_ADC_Stop_DMA(&hadc1); // stop ADC conversions
 800377e:	4854      	ldr	r0, [pc, #336]	@ (80038d0 <adc_get_values+0x1c0>)
 8003780:	f001 f89c 	bl	80048bc <HAL_ADC_Stop_DMA>
	// calculate averages and real values
	// voltage
	adc.voltage.rawValue = (uint16_t) ( vAccum / ADC_SAMPLES ); // ADC counts, divide by 3 num of buffer slots since each scan has 3 readings
 8003784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003786:	4a53      	ldr	r2, [pc, #332]	@ (80038d4 <adc_get_values+0x1c4>)
 8003788:	fba2 2303 	umull	r2, r3, r2, r3
 800378c:	095b      	lsrs	r3, r3, #5
 800378e:	b29b      	uxth	r3, r3
 8003790:	81bb      	strh	r3, [r7, #12]
	adc.voltage.realValue = (float) adc.voltage.rawValue * ADC_V_SLOPE + ADC_V_OFFSET; // calibration coeff should be taken from eeprom
 8003792:	89bb      	ldrh	r3, [r7, #12]
 8003794:	4618      	mov	r0, r3
 8003796:	f7fd fa83 	bl	8000ca0 <__aeabi_ui2f>
 800379a:	4603      	mov	r3, r0
 800379c:	4618      	mov	r0, r3
 800379e:	f7fc feef 	bl	8000580 <__aeabi_f2d>
 80037a2:	a33d      	add	r3, pc, #244	@ (adr r3, 8003898 <adc_get_values+0x188>)
 80037a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a8:	f7fc ff42 	bl	8000630 <__aeabi_dmul>
 80037ac:	4602      	mov	r2, r0
 80037ae:	460b      	mov	r3, r1
 80037b0:	4610      	mov	r0, r2
 80037b2:	4619      	mov	r1, r3
 80037b4:	a33a      	add	r3, pc, #232	@ (adr r3, 80038a0 <adc_get_values+0x190>)
 80037b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ba:	f7fc fd83 	bl	80002c4 <__adddf3>
 80037be:	4602      	mov	r2, r0
 80037c0:	460b      	mov	r3, r1
 80037c2:	4610      	mov	r0, r2
 80037c4:	4619      	mov	r1, r3
 80037c6:	f7fd f965 	bl	8000a94 <__aeabi_d2f>
 80037ca:	4603      	mov	r3, r0
 80037cc:	613b      	str	r3, [r7, #16]
	// current
	adc.current.rawValue = (uint16_t) ( iAccum / ADC_SAMPLES ); // ADC counts
 80037ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d0:	4a40      	ldr	r2, [pc, #256]	@ (80038d4 <adc_get_values+0x1c4>)
 80037d2:	fba2 2303 	umull	r2, r3, r2, r3
 80037d6:	095b      	lsrs	r3, r3, #5
 80037d8:	b29b      	uxth	r3, r3
 80037da:	82bb      	strh	r3, [r7, #20]
	adc.current.realValue =  (float) adc.current.rawValue * ADC_I_SLOPE + ADC_I_OFFSET; // mA - opAmp G = 50, Rsense = 0.10 ohm
 80037dc:	8abb      	ldrh	r3, [r7, #20]
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fd fa5e 	bl	8000ca0 <__aeabi_ui2f>
 80037e4:	4603      	mov	r3, r0
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fc feca 	bl	8000580 <__aeabi_f2d>
 80037ec:	a32e      	add	r3, pc, #184	@ (adr r3, 80038a8 <adc_get_values+0x198>)
 80037ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f2:	f7fc ff1d 	bl	8000630 <__aeabi_dmul>
 80037f6:	4602      	mov	r2, r0
 80037f8:	460b      	mov	r3, r1
 80037fa:	4610      	mov	r0, r2
 80037fc:	4619      	mov	r1, r3
 80037fe:	a32c      	add	r3, pc, #176	@ (adr r3, 80038b0 <adc_get_values+0x1a0>)
 8003800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003804:	f7fc fd5e 	bl	80002c4 <__adddf3>
 8003808:	4602      	mov	r2, r0
 800380a:	460b      	mov	r3, r1
 800380c:	4610      	mov	r0, r2
 800380e:	4619      	mov	r1, r3
 8003810:	f7fd f940 	bl	8000a94 <__aeabi_d2f>
 8003814:	4603      	mov	r3, r0
 8003816:	61bb      	str	r3, [r7, #24]
	// internal temperature
	adc.temperature.rawValue = (uint16_t) ( tAccum / ADC_SAMPLES ); // ADC counts
 8003818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800381a:	4a2e      	ldr	r2, [pc, #184]	@ (80038d4 <adc_get_values+0x1c4>)
 800381c:	fba2 2303 	umull	r2, r3, r2, r3
 8003820:	095b      	lsrs	r3, r3, #5
 8003822:	b29b      	uxth	r3, r3
 8003824:	83bb      	strh	r3, [r7, #28]
	adc.temperature.realValue = ( (ADC_T_V25_OFFSET - (adc.temperature.rawValue * (3300.0/4096.0) ) )  / ADC_T_SLOPE) + 25.0 ;
 8003826:	8bbb      	ldrh	r3, [r7, #28]
 8003828:	4618      	mov	r0, r3
 800382a:	f7fc fe97 	bl	800055c <__aeabi_i2d>
 800382e:	a322      	add	r3, pc, #136	@ (adr r3, 80038b8 <adc_get_values+0x1a8>)
 8003830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003834:	f7fc fefc 	bl	8000630 <__aeabi_dmul>
 8003838:	4602      	mov	r2, r0
 800383a:	460b      	mov	r3, r1
 800383c:	a120      	add	r1, pc, #128	@ (adr r1, 80038c0 <adc_get_values+0x1b0>)
 800383e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003842:	f7fc fd3d 	bl	80002c0 <__aeabi_dsub>
 8003846:	4602      	mov	r2, r0
 8003848:	460b      	mov	r3, r1
 800384a:	4610      	mov	r0, r2
 800384c:	4619      	mov	r1, r3
 800384e:	a31e      	add	r3, pc, #120	@ (adr r3, 80038c8 <adc_get_values+0x1b8>)
 8003850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003854:	f7fd f816 	bl	8000884 <__aeabi_ddiv>
 8003858:	4602      	mov	r2, r0
 800385a:	460b      	mov	r3, r1
 800385c:	4610      	mov	r0, r2
 800385e:	4619      	mov	r1, r3
 8003860:	f04f 0200 	mov.w	r2, #0
 8003864:	4b1c      	ldr	r3, [pc, #112]	@ (80038d8 <adc_get_values+0x1c8>)
 8003866:	f7fc fd2d 	bl	80002c4 <__adddf3>
 800386a:	4602      	mov	r2, r0
 800386c:	460b      	mov	r3, r1
 800386e:	4610      	mov	r0, r2
 8003870:	4619      	mov	r1, r3
 8003872:	f7fd f90f 	bl	8000a94 <__aeabi_d2f>
 8003876:	4603      	mov	r3, r0
 8003878:	623b      	str	r3, [r7, #32]

	return adc;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	461d      	mov	r5, r3
 800387e:	f107 040c 	add.w	r4, r7, #12
 8003882:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003884:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003886:	e894 0003 	ldmia.w	r4, {r0, r1}
 800388a:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	3738      	adds	r7, #56	@ 0x38
 8003892:	46bd      	mov	sp, r7
 8003894:	bdb0      	pop	{r4, r5, r7, pc}
 8003896:	bf00      	nop
 8003898:	2474538f 	.word	0x2474538f
 800389c:	3f80ff97 	.word	0x3f80ff97
 80038a0:	acd9e83e 	.word	0xacd9e83e
 80038a4:	3fd95cfa 	.word	0x3fd95cfa
 80038a8:	1a9fbe77 	.word	0x1a9fbe77
 80038ac:	3fc4dd2f 	.word	0x3fc4dd2f
 80038b0:	c432ca58 	.word	0xc432ca58
 80038b4:	401d6eb1 	.word	0x401d6eb1
 80038b8:	00000000 	.word	0x00000000
 80038bc:	3fe9c800 	.word	0x3fe9c800
 80038c0:	00000000 	.word	0x00000000
 80038c4:	40965800 	.word	0x40965800
 80038c8:	33333333 	.word	0x33333333
 80038cc:	40113333 	.word	0x40113333
 80038d0:	200000bc 	.word	0x200000bc
 80038d4:	51eb851f 	.word	0x51eb851f
 80038d8:	40390000 	.word	0x40390000

080038dc <eeprom_write>:
 * Max freq 1 MHz, 1 Kbit memory (1024 bit), 128 x 8-bit block, 5 ms page write,
 * 8-Byte write pages, fixed device address 1010-xxxRW, 128 bytes memory range {00-7F} */

/* Write 1 byte in epprom
 * Parameters: memory address [0-127], 1 byte of data */
void eeprom_write(uint8_t memoryAddress, uint8_t dataByte){
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af02      	add	r7, sp, #8
 80038e2:	4603      	mov	r3, r0
 80038e4:	460a      	mov	r2, r1
 80038e6:	71fb      	strb	r3, [r7, #7]
 80038e8:	4613      	mov	r3, r2
 80038ea:	71bb      	strb	r3, [r7, #6]
	uint8_t txBuff[2] = {memoryAddress, dataByte};
 80038ec:	79fb      	ldrb	r3, [r7, #7]
 80038ee:	733b      	strb	r3, [r7, #12]
 80038f0:	79bb      	ldrb	r3, [r7, #6]
 80038f2:	737b      	strb	r3, [r7, #13]
	if( memoryAddress >= eeprom.MEMORY_MIN && memoryAddress <= eeprom.MEMORY_MAX ){
 80038f4:	79fb      	ldrb	r3, [r7, #7]
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	4b13      	ldr	r3, [pc, #76]	@ (8003948 <eeprom_write+0x6c>)
 80038fa:	885b      	ldrh	r3, [r3, #2]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d315      	bcc.n	800392c <eeprom_write+0x50>
 8003900:	79fb      	ldrb	r3, [r7, #7]
 8003902:	b29a      	uxth	r2, r3
 8003904:	4b10      	ldr	r3, [pc, #64]	@ (8003948 <eeprom_write+0x6c>)
 8003906:	881b      	ldrh	r3, [r3, #0]
 8003908:	429a      	cmp	r2, r3
 800390a:	d80f      	bhi.n	800392c <eeprom_write+0x50>
		HAL_I2C_Master_Transmit(&hi2c1, EEPROM_BUS_ADDRESS , txBuff, 2, HAL_MAX_DELAY); // send word address, value
 800390c:	f107 020c 	add.w	r2, r7, #12
 8003910:	f04f 33ff 	mov.w	r3, #4294967295
 8003914:	9300      	str	r3, [sp, #0]
 8003916:	2302      	movs	r3, #2
 8003918:	21a0      	movs	r1, #160	@ 0xa0
 800391a:	480c      	ldr	r0, [pc, #48]	@ (800394c <eeprom_write+0x70>)
 800391c:	f002 f97e 	bl	8005c1c <HAL_I2C_Master_Transmit>
		HAL_Delay(eeprom.WAIT); // wait for data to be written
 8003920:	4b09      	ldr	r3, [pc, #36]	@ (8003948 <eeprom_write+0x6c>)
 8003922:	795b      	ldrb	r3, [r3, #5]
 8003924:	4618      	mov	r0, r3
 8003926:	f000 fdef 	bl	8004508 <HAL_Delay>
 800392a:	e009      	b.n	8003940 <eeprom_write+0x64>
	} else {
		printf("** ERROR: memory address %i out of range [%i-%i] **\r\n", memoryAddress, eeprom.MEMORY_MIN, eeprom.MEMORY_MAX);
 800392c:	79f9      	ldrb	r1, [r7, #7]
 800392e:	4b06      	ldr	r3, [pc, #24]	@ (8003948 <eeprom_write+0x6c>)
 8003930:	885b      	ldrh	r3, [r3, #2]
 8003932:	461a      	mov	r2, r3
 8003934:	4b04      	ldr	r3, [pc, #16]	@ (8003948 <eeprom_write+0x6c>)
 8003936:	881b      	ldrh	r3, [r3, #0]
 8003938:	4805      	ldr	r0, [pc, #20]	@ (8003950 <eeprom_write+0x74>)
 800393a:	f005 feb5 	bl	80096a8 <iprintf>
	}
}
 800393e:	bf00      	nop
 8003940:	bf00      	nop
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	20000008 	.word	0x20000008
 800394c:	20000130 	.word	0x20000130
 8003950:	0800c150 	.word	0x0800c150

08003954 <eeprom_read>:

/* Read 1 byte from epprom
 * Parameters: memory address [0-127]
 * Returns 1 byte of data */
uint8_t eeprom_read(uint8_t memoryAddress){
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af02      	add	r7, sp, #8
 800395a:	4603      	mov	r3, r0
 800395c:	71fb      	strb	r3, [r7, #7]
	uint8_t addressBuffer[1] = {memoryAddress};
 800395e:	79fb      	ldrb	r3, [r7, #7]
 8003960:	733b      	strb	r3, [r7, #12]
	uint8_t rxBuff[1] = {0};
 8003962:	2300      	movs	r3, #0
 8003964:	723b      	strb	r3, [r7, #8]
	if( memoryAddress >= eeprom.MEMORY_MIN && memoryAddress <= eeprom.MEMORY_MAX ){
 8003966:	79fb      	ldrb	r3, [r7, #7]
 8003968:	b29a      	uxth	r2, r3
 800396a:	4b1b      	ldr	r3, [pc, #108]	@ (80039d8 <eeprom_read+0x84>)
 800396c:	885b      	ldrh	r3, [r3, #2]
 800396e:	429a      	cmp	r2, r3
 8003970:	d324      	bcc.n	80039bc <eeprom_read+0x68>
 8003972:	79fb      	ldrb	r3, [r7, #7]
 8003974:	b29a      	uxth	r2, r3
 8003976:	4b18      	ldr	r3, [pc, #96]	@ (80039d8 <eeprom_read+0x84>)
 8003978:	881b      	ldrh	r3, [r3, #0]
 800397a:	429a      	cmp	r2, r3
 800397c:	d81e      	bhi.n	80039bc <eeprom_read+0x68>
		HAL_I2C_Master_Transmit(&hi2c1, EEPROM_BUS_ADDRESS , addressBuffer, 1, HAL_MAX_DELAY); // dummy write to set pointer to desired memory address
 800397e:	f107 020c 	add.w	r2, r7, #12
 8003982:	f04f 33ff 	mov.w	r3, #4294967295
 8003986:	9300      	str	r3, [sp, #0]
 8003988:	2301      	movs	r3, #1
 800398a:	21a0      	movs	r1, #160	@ 0xa0
 800398c:	4813      	ldr	r0, [pc, #76]	@ (80039dc <eeprom_read+0x88>)
 800398e:	f002 f945 	bl	8005c1c <HAL_I2C_Master_Transmit>
		HAL_Delay(eeprom.WAIT);
 8003992:	4b11      	ldr	r3, [pc, #68]	@ (80039d8 <eeprom_read+0x84>)
 8003994:	795b      	ldrb	r3, [r3, #5]
 8003996:	4618      	mov	r0, r3
 8003998:	f000 fdb6 	bl	8004508 <HAL_Delay>
		HAL_I2C_Master_Receive(&hi2c1, EEPROM_BUS_ADDRESS, rxBuff, 1, HAL_MAX_DELAY); // send command to read 1 byte at current memory address pointer
 800399c:	f107 0208 	add.w	r2, r7, #8
 80039a0:	f04f 33ff 	mov.w	r3, #4294967295
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	2301      	movs	r3, #1
 80039a8:	21a0      	movs	r1, #160	@ 0xa0
 80039aa:	480c      	ldr	r0, [pc, #48]	@ (80039dc <eeprom_read+0x88>)
 80039ac:	f002 fa34 	bl	8005e18 <HAL_I2C_Master_Receive>
		HAL_Delay(eeprom.WAIT);
 80039b0:	4b09      	ldr	r3, [pc, #36]	@ (80039d8 <eeprom_read+0x84>)
 80039b2:	795b      	ldrb	r3, [r3, #5]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f000 fda7 	bl	8004508 <HAL_Delay>
 80039ba:	e008      	b.n	80039ce <eeprom_read+0x7a>
	} else {
		printf("** ERROR: memory address %i out of range [%i-%i] **\r\n", memoryAddress, eeprom.MEMORY_MIN, eeprom.MEMORY_MAX);
 80039bc:	79f9      	ldrb	r1, [r7, #7]
 80039be:	4b06      	ldr	r3, [pc, #24]	@ (80039d8 <eeprom_read+0x84>)
 80039c0:	885b      	ldrh	r3, [r3, #2]
 80039c2:	461a      	mov	r2, r3
 80039c4:	4b04      	ldr	r3, [pc, #16]	@ (80039d8 <eeprom_read+0x84>)
 80039c6:	881b      	ldrh	r3, [r3, #0]
 80039c8:	4805      	ldr	r0, [pc, #20]	@ (80039e0 <eeprom_read+0x8c>)
 80039ca:	f005 fe6d 	bl	80096a8 <iprintf>
	}
	return ((uint8_t) rxBuff[0]);
 80039ce:	7a3b      	ldrb	r3, [r7, #8]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3710      	adds	r7, #16
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	20000008 	.word	0x20000008
 80039dc:	20000130 	.word	0x20000130
 80039e0:	0800c150 	.word	0x0800c150

080039e4 <eeprom_clear>:

/* Clear memory within a given range of addresses
 * Parameters: start address and end address (inclusive) [0-127]
 * Returns number of blocks cleared */
uint8_t eeprom_clear(uint8_t memoryStart, uint8_t memoryEnd){
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	4603      	mov	r3, r0
 80039ec:	460a      	mov	r2, r1
 80039ee:	71fb      	strb	r3, [r7, #7]
 80039f0:	4613      	mov	r3, r2
 80039f2:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	if( memoryStart >= eeprom.MEMORY_MIN && memoryEnd <= eeprom.MEMORY_MAX && memoryStart <= memoryEnd ){
 80039f4:	79fb      	ldrb	r3, [r7, #7]
 80039f6:	b29a      	uxth	r2, r3
 80039f8:	4b17      	ldr	r3, [pc, #92]	@ (8003a58 <eeprom_clear+0x74>)
 80039fa:	885b      	ldrh	r3, [r3, #2]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d319      	bcc.n	8003a34 <eeprom_clear+0x50>
 8003a00:	79bb      	ldrb	r3, [r7, #6]
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	4b14      	ldr	r3, [pc, #80]	@ (8003a58 <eeprom_clear+0x74>)
 8003a06:	881b      	ldrh	r3, [r3, #0]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d813      	bhi.n	8003a34 <eeprom_clear+0x50>
 8003a0c:	79fa      	ldrb	r2, [r7, #7]
 8003a0e:	79bb      	ldrb	r3, [r7, #6]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d80f      	bhi.n	8003a34 <eeprom_clear+0x50>
		for(i = memoryStart ; i <= memoryEnd ; i++){
 8003a14:	79fb      	ldrb	r3, [r7, #7]
 8003a16:	73fb      	strb	r3, [r7, #15]
 8003a18:	e007      	b.n	8003a2a <eeprom_clear+0x46>
			eeprom_write(i, 0); // write 0 to corresponding byte
 8003a1a:	7bfb      	ldrb	r3, [r7, #15]
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff ff5c 	bl	80038dc <eeprom_write>
		for(i = memoryStart ; i <= memoryEnd ; i++){
 8003a24:	7bfb      	ldrb	r3, [r7, #15]
 8003a26:	3301      	adds	r3, #1
 8003a28:	73fb      	strb	r3, [r7, #15]
 8003a2a:	7bfa      	ldrb	r2, [r7, #15]
 8003a2c:	79bb      	ldrb	r3, [r7, #6]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d9f3      	bls.n	8003a1a <eeprom_clear+0x36>
	if( memoryStart >= eeprom.MEMORY_MIN && memoryEnd <= eeprom.MEMORY_MAX && memoryStart <= memoryEnd ){
 8003a32:	e008      	b.n	8003a46 <eeprom_clear+0x62>
		}
	} else {
		printf("** ERROR: incorrect memory range [%i-%i] or start > end **\r\n", eeprom.MEMORY_MIN , eeprom.MEMORY_MAX);
 8003a34:	4b08      	ldr	r3, [pc, #32]	@ (8003a58 <eeprom_clear+0x74>)
 8003a36:	885b      	ldrh	r3, [r3, #2]
 8003a38:	4619      	mov	r1, r3
 8003a3a:	4b07      	ldr	r3, [pc, #28]	@ (8003a58 <eeprom_clear+0x74>)
 8003a3c:	881b      	ldrh	r3, [r3, #0]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	4806      	ldr	r0, [pc, #24]	@ (8003a5c <eeprom_clear+0x78>)
 8003a42:	f005 fe31 	bl	80096a8 <iprintf>
	}
	return (i-memoryStart);
 8003a46:	7bfa      	ldrb	r2, [r7, #15]
 8003a48:	79fb      	ldrb	r3, [r7, #7]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	b2db      	uxtb	r3, r3
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	20000008 	.word	0x20000008
 8003a5c:	0800c188 	.word	0x0800c188

08003a60 <eeprom_print_memory_map>:

/* print memory map on eeprom */
void eeprom_print_memory_map(void){
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
	printf("\r\n");
 8003a64:	4846      	ldr	r0, [pc, #280]	@ (8003b80 <eeprom_print_memory_map+0x120>)
 8003a66:	f005 fe87 	bl	8009778 <puts>
	printf("|========================================|\r\n");
 8003a6a:	4846      	ldr	r0, [pc, #280]	@ (8003b84 <eeprom_print_memory_map+0x124>)
 8003a6c:	f005 fe84 	bl	8009778 <puts>
	printf("|              MEMORY MAP                |\r\n");
 8003a70:	4845      	ldr	r0, [pc, #276]	@ (8003b88 <eeprom_print_memory_map+0x128>)
 8003a72:	f005 fe81 	bl	8009778 <puts>
	printf("|========================================|\r\n");
 8003a76:	4843      	ldr	r0, [pc, #268]	@ (8003b84 <eeprom_print_memory_map+0x124>)
 8003a78:	f005 fe7e 	bl	8009778 <puts>
	// autolauncher aprameters
	printf("| [%03i]        AL_TUBECOUNT              |\r\n", AL_TUBECOUNT1B);
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	4843      	ldr	r0, [pc, #268]	@ (8003b8c <eeprom_print_memory_map+0x12c>)
 8003a80:	f005 fe12 	bl	80096a8 <iprintf>
	printf("| [%03i]        AL_TYPE                   |\r\n", AL_TYPE1B);
 8003a84:	2101      	movs	r1, #1
 8003a86:	4842      	ldr	r0, [pc, #264]	@ (8003b90 <eeprom_print_memory_map+0x130>)
 8003a88:	f005 fe0e 	bl	80096a8 <iprintf>
	printf("| [%03i]        AL_SN                     |\r\n", AL_SN1B);
 8003a8c:	2102      	movs	r1, #2
 8003a8e:	4841      	ldr	r0, [pc, #260]	@ (8003b94 <eeprom_print_memory_map+0x134>)
 8003a90:	f005 fe0a 	bl	80096a8 <iprintf>
	printf("| [%03i]        AL_CONFIGED               |\r\n", AL_CONFIGED1B);
 8003a94:	2103      	movs	r1, #3
 8003a96:	4840      	ldr	r0, [pc, #256]	@ (8003b98 <eeprom_print_memory_map+0x138>)
 8003a98:	f005 fe06 	bl	80096a8 <iprintf>
	printf("|========================================|\r\n");
 8003a9c:	4839      	ldr	r0, [pc, #228]	@ (8003b84 <eeprom_print_memory_map+0x124>)
 8003a9e:	f005 fe6b 	bl	8009778 <puts>
	// motor parameters
	printf("| [%03i-%03i]    M_RUNTIME               |\r\n", M_RUNTIME2B,M_RUNTIME2B+1);
 8003aa2:	2209      	movs	r2, #9
 8003aa4:	2108      	movs	r1, #8
 8003aa6:	483d      	ldr	r0, [pc, #244]	@ (8003b9c <eeprom_print_memory_map+0x13c>)
 8003aa8:	f005 fdfe 	bl	80096a8 <iprintf>
	printf("| [%03i-%03i]    M_PWM_FREQ              |\r\n", M_PWM_FREQ2B, M_PWM_FREQ2B+1);
 8003aac:	220b      	movs	r2, #11
 8003aae:	210a      	movs	r1, #10
 8003ab0:	483b      	ldr	r0, [pc, #236]	@ (8003ba0 <eeprom_print_memory_map+0x140>)
 8003ab2:	f005 fdf9 	bl	80096a8 <iprintf>
	printf("| [%03i-%03i]    M_SAMPLEPERIOD          |\r\n", M_SAMPLEPERIOD2B, M_SAMPLEPERIOD2B+1);
 8003ab6:	220d      	movs	r2, #13
 8003ab8:	210c      	movs	r1, #12
 8003aba:	483a      	ldr	r0, [pc, #232]	@ (8003ba4 <eeprom_print_memory_map+0x144>)
 8003abc:	f005 fdf4 	bl	80096a8 <iprintf>
	printf("| [%03i-%03i]    M_WIRING1B              |\r\n", M_WIRING1B, M_WIRING1B+1);
 8003ac0:	220f      	movs	r2, #15
 8003ac2:	210e      	movs	r1, #14
 8003ac4:	4838      	ldr	r0, [pc, #224]	@ (8003ba8 <eeprom_print_memory_map+0x148>)
 8003ac6:	f005 fdef 	bl	80096a8 <iprintf>
	printf("|========================================|\r\n");
 8003aca:	482e      	ldr	r0, [pc, #184]	@ (8003b84 <eeprom_print_memory_map+0x124>)
 8003acc:	f005 fe54 	bl	8009778 <puts>
	// use count
	printf("| [%03i-%03i]    M_1COUNT                  |\r\n", M_1COUNT2B, M_1COUNT2B+1);
 8003ad0:	2211      	movs	r2, #17
 8003ad2:	2110      	movs	r1, #16
 8003ad4:	4835      	ldr	r0, [pc, #212]	@ (8003bac <eeprom_print_memory_map+0x14c>)
 8003ad6:	f005 fde7 	bl	80096a8 <iprintf>
	printf("| [%03i-%03i]    M_2COUNT                  |\r\n", M_2COUNT2B, M_2COUNT2B+1);
 8003ada:	2213      	movs	r2, #19
 8003adc:	2112      	movs	r1, #18
 8003ade:	4834      	ldr	r0, [pc, #208]	@ (8003bb0 <eeprom_print_memory_map+0x150>)
 8003ae0:	f005 fde2 	bl	80096a8 <iprintf>
	printf("| [%03i-%03i]    M_3COUNT                  |\r\n", M_3COUNT2B, M_3COUNT2B+1);
 8003ae4:	2215      	movs	r2, #21
 8003ae6:	2114      	movs	r1, #20
 8003ae8:	4832      	ldr	r0, [pc, #200]	@ (8003bb4 <eeprom_print_memory_map+0x154>)
 8003aea:	f005 fddd 	bl	80096a8 <iprintf>
	printf("| [%03i-%03i]    M_4COUNT                  |\r\n", M_4COUNT2B, M_4COUNT2B+1);
 8003aee:	2217      	movs	r2, #23
 8003af0:	2116      	movs	r1, #22
 8003af2:	4831      	ldr	r0, [pc, #196]	@ (8003bb8 <eeprom_print_memory_map+0x158>)
 8003af4:	f005 fdd8 	bl	80096a8 <iprintf>
	printf("| [%03i-%03i]    M_5COUNT                  |\r\n", M_5COUNT2B, M_5COUNT2B+1);
 8003af8:	2219      	movs	r2, #25
 8003afa:	2118      	movs	r1, #24
 8003afc:	482f      	ldr	r0, [pc, #188]	@ (8003bbc <eeprom_print_memory_map+0x15c>)
 8003afe:	f005 fdd3 	bl	80096a8 <iprintf>
	printf("| [%03i-%03i]    M_6COUNT                  |\r\n", M_6COUNT2B, M_6COUNT2B+1);
 8003b02:	221b      	movs	r2, #27
 8003b04:	211a      	movs	r1, #26
 8003b06:	482e      	ldr	r0, [pc, #184]	@ (8003bc0 <eeprom_print_memory_map+0x160>)
 8003b08:	f005 fdce 	bl	80096a8 <iprintf>
	printf("| [%03i-%03i]    M_7COUNT                  |\r\n", M_7COUNT2B, M_7COUNT2B+1);
 8003b0c:	221d      	movs	r2, #29
 8003b0e:	211c      	movs	r1, #28
 8003b10:	482c      	ldr	r0, [pc, #176]	@ (8003bc4 <eeprom_print_memory_map+0x164>)
 8003b12:	f005 fdc9 	bl	80096a8 <iprintf>
	printf("| [%03i-%03i]    M_8COUNT                  |\r\n", M_8COUNT2B, M_8COUNT2B+1);
 8003b16:	221f      	movs	r2, #31
 8003b18:	211e      	movs	r1, #30
 8003b1a:	482b      	ldr	r0, [pc, #172]	@ (8003bc8 <eeprom_print_memory_map+0x168>)
 8003b1c:	f005 fdc4 	bl	80096a8 <iprintf>
	printf("|========================================|\r\n");
 8003b20:	4818      	ldr	r0, [pc, #96]	@ (8003b84 <eeprom_print_memory_map+0x124>)
 8003b22:	f005 fe29 	bl	8009778 <puts>
	// Max current
	printf("| [%03i-%03i]    M_1MXAMP                  |\r\n", M_1MXAMP2B, M_1MXAMP2B+1);
 8003b26:	2221      	movs	r2, #33	@ 0x21
 8003b28:	2120      	movs	r1, #32
 8003b2a:	4828      	ldr	r0, [pc, #160]	@ (8003bcc <eeprom_print_memory_map+0x16c>)
 8003b2c:	f005 fdbc 	bl	80096a8 <iprintf>
	printf("| [%03i-%03i]    M_2MXAMP                  |\r\n", M_2MXAMP2B, M_2MXAMP2B+1);
 8003b30:	2223      	movs	r2, #35	@ 0x23
 8003b32:	2122      	movs	r1, #34	@ 0x22
 8003b34:	4826      	ldr	r0, [pc, #152]	@ (8003bd0 <eeprom_print_memory_map+0x170>)
 8003b36:	f005 fdb7 	bl	80096a8 <iprintf>
	printf("| [%03i-%03i]    M_3MXAMP                  |\r\n", M_3MXAMP2B, M_3MXAMP2B+1);
 8003b3a:	2225      	movs	r2, #37	@ 0x25
 8003b3c:	2124      	movs	r1, #36	@ 0x24
 8003b3e:	4825      	ldr	r0, [pc, #148]	@ (8003bd4 <eeprom_print_memory_map+0x174>)
 8003b40:	f005 fdb2 	bl	80096a8 <iprintf>
	printf("| [%03i-%03i]    M_4MXAMP                  |\r\n", M_4MXAMP2B, M_4MXAMP2B+1);
 8003b44:	2227      	movs	r2, #39	@ 0x27
 8003b46:	2126      	movs	r1, #38	@ 0x26
 8003b48:	4823      	ldr	r0, [pc, #140]	@ (8003bd8 <eeprom_print_memory_map+0x178>)
 8003b4a:	f005 fdad 	bl	80096a8 <iprintf>
	printf("| [%03i-%03i]    M_5MXAMP                  |\r\n", M_5MXAMP2B, M_5MXAMP2B+1);
 8003b4e:	2229      	movs	r2, #41	@ 0x29
 8003b50:	2128      	movs	r1, #40	@ 0x28
 8003b52:	4822      	ldr	r0, [pc, #136]	@ (8003bdc <eeprom_print_memory_map+0x17c>)
 8003b54:	f005 fda8 	bl	80096a8 <iprintf>
	printf("| [%03i-%03i]    M_6MXAMP                  |\r\n", M_6MXAMP2B, M_6MXAMP2B+1);
 8003b58:	222b      	movs	r2, #43	@ 0x2b
 8003b5a:	212a      	movs	r1, #42	@ 0x2a
 8003b5c:	4820      	ldr	r0, [pc, #128]	@ (8003be0 <eeprom_print_memory_map+0x180>)
 8003b5e:	f005 fda3 	bl	80096a8 <iprintf>
	printf("| [%03i-%03i]    M_7MXAMP                  |\r\n", M_7MXAMP2B, M_7MXAMP2B+1);
 8003b62:	222d      	movs	r2, #45	@ 0x2d
 8003b64:	212c      	movs	r1, #44	@ 0x2c
 8003b66:	481f      	ldr	r0, [pc, #124]	@ (8003be4 <eeprom_print_memory_map+0x184>)
 8003b68:	f005 fd9e 	bl	80096a8 <iprintf>
	printf("| [%03i-%03i]    M_8MXAMP                  |\r\n", M_8MXAMP2B, M_8MXAMP2B+1);
 8003b6c:	222f      	movs	r2, #47	@ 0x2f
 8003b6e:	212e      	movs	r1, #46	@ 0x2e
 8003b70:	481d      	ldr	r0, [pc, #116]	@ (8003be8 <eeprom_print_memory_map+0x188>)
 8003b72:	f005 fd99 	bl	80096a8 <iprintf>
	printf("|========================================|\r\n");
 8003b76:	4803      	ldr	r0, [pc, #12]	@ (8003b84 <eeprom_print_memory_map+0x124>)
 8003b78:	f005 fdfe 	bl	8009778 <puts>
}
 8003b7c:	bf00      	nop
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	0800adac 	.word	0x0800adac
 8003b84:	0800c1c8 	.word	0x0800c1c8
 8003b88:	0800c1f4 	.word	0x0800c1f4
 8003b8c:	0800c220 	.word	0x0800c220
 8003b90:	0800c250 	.word	0x0800c250
 8003b94:	0800c280 	.word	0x0800c280
 8003b98:	0800c2b0 	.word	0x0800c2b0
 8003b9c:	0800c2e0 	.word	0x0800c2e0
 8003ba0:	0800c310 	.word	0x0800c310
 8003ba4:	0800c340 	.word	0x0800c340
 8003ba8:	0800c370 	.word	0x0800c370
 8003bac:	0800c3a0 	.word	0x0800c3a0
 8003bb0:	0800c3d0 	.word	0x0800c3d0
 8003bb4:	0800c400 	.word	0x0800c400
 8003bb8:	0800c430 	.word	0x0800c430
 8003bbc:	0800c460 	.word	0x0800c460
 8003bc0:	0800c490 	.word	0x0800c490
 8003bc4:	0800c4c0 	.word	0x0800c4c0
 8003bc8:	0800c4f0 	.word	0x0800c4f0
 8003bcc:	0800c520 	.word	0x0800c520
 8003bd0:	0800c550 	.word	0x0800c550
 8003bd4:	0800c580 	.word	0x0800c580
 8003bd8:	0800c5b0 	.word	0x0800c5b0
 8003bdc:	0800c5e0 	.word	0x0800c5e0
 8003be0:	0800c610 	.word	0x0800c610
 8003be4:	0800c640 	.word	0x0800c640
 8003be8:	0800c670 	.word	0x0800c670

08003bec <eeprom_write_nbytes>:


/* Write N bytes to eeprom
 * Parameters: starting address on eeprom, number of bytes to write, pointer to data of any type */
void eeprom_write_nbytes(uint8_t baseAddress, uint8_t bytes, void * pData){
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	603a      	str	r2, [r7, #0]
 8003bf6:	71fb      	strb	r3, [r7, #7]
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	71bb      	strb	r3, [r7, #6]
    uint8_t *ptr = 0;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	60bb      	str	r3, [r7, #8]
    //uint8_t data = 0;
 	for( uint8_t i = 0; i < bytes && i < 4; i++){
 8003c00:	2300      	movs	r3, #0
 8003c02:	73fb      	strb	r3, [r7, #15]
 8003c04:	e010      	b.n	8003c28 <eeprom_write_nbytes+0x3c>
		//uint8_t address = baseAddress+i;
 		ptr = pData+i; // cast to 1 byte before adding 1 to address
 8003c06:	7bfb      	ldrb	r3, [r7, #15]
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	60bb      	str	r3, [r7, #8]
		//data = *ptr;
		eeprom_write(baseAddress+i, *ptr);
 8003c0e:	79fa      	ldrb	r2, [r7, #7]
 8003c10:	7bfb      	ldrb	r3, [r7, #15]
 8003c12:	4413      	add	r3, r2
 8003c14:	b2da      	uxtb	r2, r3
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	4610      	mov	r0, r2
 8003c1e:	f7ff fe5d 	bl	80038dc <eeprom_write>
 	for( uint8_t i = 0; i < bytes && i < 4; i++){
 8003c22:	7bfb      	ldrb	r3, [r7, #15]
 8003c24:	3301      	adds	r3, #1
 8003c26:	73fb      	strb	r3, [r7, #15]
 8003c28:	7bfa      	ldrb	r2, [r7, #15]
 8003c2a:	79bb      	ldrb	r3, [r7, #6]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d202      	bcs.n	8003c36 <eeprom_write_nbytes+0x4a>
 8003c30:	7bfb      	ldrb	r3, [r7, #15]
 8003c32:	2b03      	cmp	r3, #3
 8003c34:	d9e7      	bls.n	8003c06 <eeprom_write_nbytes+0x1a>
	}
}
 8003c36:	bf00      	nop
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <eeprom_read_nbytes>:


/* Read N bytes from eeprom
 * Parameters: starting address on eeprom, number of bytes to read, pointer to store data of any type */
void eeprom_read_nbytes(uint8_t baseAddress, uint8_t bytes, void * pData){
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b084      	sub	sp, #16
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	4603      	mov	r3, r0
 8003c46:	603a      	str	r2, [r7, #0]
 8003c48:	71fb      	strb	r3, [r7, #7]
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	71bb      	strb	r3, [r7, #6]
	uint8_t *ptr = 0;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	60bb      	str	r3, [r7, #8]
 	for( uint8_t i = 0; i < bytes && i < 4; i++){
 8003c52:	2300      	movs	r3, #0
 8003c54:	73fb      	strb	r3, [r7, #15]
 8003c56:	e011      	b.n	8003c7c <eeprom_read_nbytes+0x3e>
		//uint8_t address = baseAddress+i;
 		ptr = pData+i;
 8003c58:	7bfb      	ldrb	r3, [r7, #15]
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	60bb      	str	r3, [r7, #8]
		//data = *ptr;
		*ptr = eeprom_read(baseAddress+i);
 8003c60:	79fa      	ldrb	r2, [r7, #7]
 8003c62:	7bfb      	ldrb	r3, [r7, #15]
 8003c64:	4413      	add	r3, r2
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7ff fe73 	bl	8003954 <eeprom_read>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	461a      	mov	r2, r3
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	701a      	strb	r2, [r3, #0]
 	for( uint8_t i = 0; i < bytes && i < 4; i++){
 8003c76:	7bfb      	ldrb	r3, [r7, #15]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	73fb      	strb	r3, [r7, #15]
 8003c7c:	7bfa      	ldrb	r2, [r7, #15]
 8003c7e:	79bb      	ldrb	r3, [r7, #6]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d202      	bcs.n	8003c8a <eeprom_read_nbytes+0x4c>
 8003c84:	7bfb      	ldrb	r3, [r7, #15]
 8003c86:	2b03      	cmp	r3, #3
 8003c88:	d9e6      	bls.n	8003c58 <eeprom_read_nbytes+0x1a>
	}
}
 8003c8a:	bf00      	nop
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c92:	b480      	push	{r7}
 8003c94:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c96:	b672      	cpsid	i
}
 8003c98:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003c9a:	bf00      	nop
 8003c9c:	e7fd      	b.n	8003c9a <Error_Handler+0x8>
	...

08003ca0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003ca6:	4b15      	ldr	r3, [pc, #84]	@ (8003cfc <HAL_MspInit+0x5c>)
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	4a14      	ldr	r2, [pc, #80]	@ (8003cfc <HAL_MspInit+0x5c>)
 8003cac:	f043 0301 	orr.w	r3, r3, #1
 8003cb0:	6193      	str	r3, [r2, #24]
 8003cb2:	4b12      	ldr	r3, [pc, #72]	@ (8003cfc <HAL_MspInit+0x5c>)
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	60bb      	str	r3, [r7, #8]
 8003cbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cbe:	4b0f      	ldr	r3, [pc, #60]	@ (8003cfc <HAL_MspInit+0x5c>)
 8003cc0:	69db      	ldr	r3, [r3, #28]
 8003cc2:	4a0e      	ldr	r2, [pc, #56]	@ (8003cfc <HAL_MspInit+0x5c>)
 8003cc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cc8:	61d3      	str	r3, [r2, #28]
 8003cca:	4b0c      	ldr	r3, [pc, #48]	@ (8003cfc <HAL_MspInit+0x5c>)
 8003ccc:	69db      	ldr	r3, [r3, #28]
 8003cce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cd2:	607b      	str	r3, [r7, #4]
 8003cd4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8003d00 <HAL_MspInit+0x60>)
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	60fb      	str	r3, [r7, #12]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003ce2:	60fb      	str	r3, [r7, #12]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	4a04      	ldr	r2, [pc, #16]	@ (8003d00 <HAL_MspInit+0x60>)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cf2:	bf00      	nop
 8003cf4:	3714      	adds	r7, #20
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bc80      	pop	{r7}
 8003cfa:	4770      	bx	lr
 8003cfc:	40021000 	.word	0x40021000
 8003d00:	40010000 	.word	0x40010000

08003d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d08:	bf00      	nop
 8003d0a:	e7fd      	b.n	8003d08 <NMI_Handler+0x4>

08003d0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d10:	bf00      	nop
 8003d12:	e7fd      	b.n	8003d10 <HardFault_Handler+0x4>

08003d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d18:	bf00      	nop
 8003d1a:	e7fd      	b.n	8003d18 <MemManage_Handler+0x4>

08003d1c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d20:	bf00      	nop
 8003d22:	e7fd      	b.n	8003d20 <BusFault_Handler+0x4>

08003d24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d28:	bf00      	nop
 8003d2a:	e7fd      	b.n	8003d28 <UsageFault_Handler+0x4>

08003d2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d30:	bf00      	nop
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bc80      	pop	{r7}
 8003d36:	4770      	bx	lr

08003d38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d3c:	bf00      	nop
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bc80      	pop	{r7}
 8003d42:	4770      	bx	lr

08003d44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d44:	b480      	push	{r7}
 8003d46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d48:	bf00      	nop
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bc80      	pop	{r7}
 8003d4e:	4770      	bx	lr

08003d50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d54:	f000 fbbc 	bl	80044d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d58:	bf00      	nop
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003d60:	4803      	ldr	r0, [pc, #12]	@ (8003d70 <DMA1_Channel1_IRQHandler+0x14>)
 8003d62:	f001 fb2d 	bl	80053c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  adcDMAFull = 1;
 8003d66:	4b03      	ldr	r3, [pc, #12]	@ (8003d74 <DMA1_Channel1_IRQHandler+0x18>)
 8003d68:	2201      	movs	r2, #1
 8003d6a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003d6c:	bf00      	nop
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	200000ec 	.word	0x200000ec
 8003d74:	2000018c 	.word	0x2000018c

08003d78 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003d7c:	4803      	ldr	r0, [pc, #12]	@ (8003d8c <TIM4_IRQHandler+0x14>)
 8003d7e:	f003 ff09 	bl	8007b94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  adcTimerTrigger = 1;
 8003d82:	4b03      	ldr	r3, [pc, #12]	@ (8003d90 <TIM4_IRQHandler+0x18>)
 8003d84:	2201      	movs	r2, #1
 8003d86:	701a      	strb	r2, [r3, #0]
  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
  /* USER CODE END TIM4_IRQn 1 */
}
 8003d88:	bf00      	nop
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	200001dc 	.word	0x200001dc
 8003d90:	2000018b 	.word	0x2000018b

08003d94 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003d98:	4802      	ldr	r0, [pc, #8]	@ (8003da4 <USART1_IRQHandler+0x10>)
 8003d9a:	f004 fe59 	bl	8008a50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003d9e:	bf00      	nop
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	20000224 	.word	0x20000224

08003da8 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003db0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bc80      	pop	{r7}
 8003dbc:	4770      	bx	lr

08003dbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b083      	sub	sp, #12
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
 8003dc6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003dce:	605a      	str	r2, [r3, #4]
  return 0;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bc80      	pop	{r7}
 8003dda:	4770      	bx	lr

08003ddc <_isatty>:

int _isatty(int file)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003de4:	2301      	movs	r3, #1
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bc80      	pop	{r7}
 8003dee:	4770      	bx	lr

08003df0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3714      	adds	r7, #20
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bc80      	pop	{r7}
 8003e06:	4770      	bx	lr

08003e08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e10:	4a14      	ldr	r2, [pc, #80]	@ (8003e64 <_sbrk+0x5c>)
 8003e12:	4b15      	ldr	r3, [pc, #84]	@ (8003e68 <_sbrk+0x60>)
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e1c:	4b13      	ldr	r3, [pc, #76]	@ (8003e6c <_sbrk+0x64>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d102      	bne.n	8003e2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e24:	4b11      	ldr	r3, [pc, #68]	@ (8003e6c <_sbrk+0x64>)
 8003e26:	4a12      	ldr	r2, [pc, #72]	@ (8003e70 <_sbrk+0x68>)
 8003e28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e2a:	4b10      	ldr	r3, [pc, #64]	@ (8003e6c <_sbrk+0x64>)
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4413      	add	r3, r2
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d207      	bcs.n	8003e48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e38:	f005 fea0 	bl	8009b7c <__errno>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	220c      	movs	r2, #12
 8003e40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e42:	f04f 33ff 	mov.w	r3, #4294967295
 8003e46:	e009      	b.n	8003e5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e48:	4b08      	ldr	r3, [pc, #32]	@ (8003e6c <_sbrk+0x64>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e4e:	4b07      	ldr	r3, [pc, #28]	@ (8003e6c <_sbrk+0x64>)
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4413      	add	r3, r2
 8003e56:	4a05      	ldr	r2, [pc, #20]	@ (8003e6c <_sbrk+0x64>)
 8003e58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3718      	adds	r7, #24
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	20005000 	.word	0x20005000
 8003e68:	00000400 	.word	0x00000400
 8003e6c:	20000190 	.word	0x20000190
 8003e70:	20000408 	.word	0x20000408

08003e74 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e78:	bf00      	nop
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bc80      	pop	{r7}
 8003e7e:	4770      	bx	lr

08003e80 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b08e      	sub	sp, #56	@ 0x38
 8003e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e86:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	601a      	str	r2, [r3, #0]
 8003e8e:	605a      	str	r2, [r3, #4]
 8003e90:	609a      	str	r2, [r3, #8]
 8003e92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e94:	f107 0320 	add.w	r3, r7, #32
 8003e98:	2200      	movs	r2, #0
 8003e9a:	601a      	str	r2, [r3, #0]
 8003e9c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e9e:	1d3b      	adds	r3, r7, #4
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	601a      	str	r2, [r3, #0]
 8003ea4:	605a      	str	r2, [r3, #4]
 8003ea6:	609a      	str	r2, [r3, #8]
 8003ea8:	60da      	str	r2, [r3, #12]
 8003eaa:	611a      	str	r2, [r3, #16]
 8003eac:	615a      	str	r2, [r3, #20]
 8003eae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003eb0:	4b2d      	ldr	r3, [pc, #180]	@ (8003f68 <MX_TIM3_Init+0xe8>)
 8003eb2:	4a2e      	ldr	r2, [pc, #184]	@ (8003f6c <MX_TIM3_Init+0xec>)
 8003eb4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 8003eb6:	4b2c      	ldr	r3, [pc, #176]	@ (8003f68 <MX_TIM3_Init+0xe8>)
 8003eb8:	2207      	movs	r2, #7
 8003eba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ebc:	4b2a      	ldr	r3, [pc, #168]	@ (8003f68 <MX_TIM3_Init+0xe8>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000-1;
 8003ec2:	4b29      	ldr	r3, [pc, #164]	@ (8003f68 <MX_TIM3_Init+0xe8>)
 8003ec4:	f241 3287 	movw	r2, #4999	@ 0x1387
 8003ec8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003eca:	4b27      	ldr	r3, [pc, #156]	@ (8003f68 <MX_TIM3_Init+0xe8>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003ed0:	4b25      	ldr	r3, [pc, #148]	@ (8003f68 <MX_TIM3_Init+0xe8>)
 8003ed2:	2280      	movs	r2, #128	@ 0x80
 8003ed4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003ed6:	4824      	ldr	r0, [pc, #144]	@ (8003f68 <MX_TIM3_Init+0xe8>)
 8003ed8:	f003 fb0c 	bl	80074f4 <HAL_TIM_Base_Init>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003ee2:	f7ff fed6 	bl	8003c92 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ee6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003eea:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003eec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	481d      	ldr	r0, [pc, #116]	@ (8003f68 <MX_TIM3_Init+0xe8>)
 8003ef4:	f004 f800 	bl	8007ef8 <HAL_TIM_ConfigClockSource>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003efe:	f7ff fec8 	bl	8003c92 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003f02:	4819      	ldr	r0, [pc, #100]	@ (8003f68 <MX_TIM3_Init+0xe8>)
 8003f04:	f003 fb45 	bl	8007592 <HAL_TIM_PWM_Init>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003f0e:	f7ff fec0 	bl	8003c92 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f12:	2300      	movs	r3, #0
 8003f14:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f16:	2300      	movs	r3, #0
 8003f18:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003f1a:	f107 0320 	add.w	r3, r7, #32
 8003f1e:	4619      	mov	r1, r3
 8003f20:	4811      	ldr	r0, [pc, #68]	@ (8003f68 <MX_TIM3_Init+0xe8>)
 8003f22:	f004 fb8d 	bl	8008640 <HAL_TIMEx_MasterConfigSynchronization>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d001      	beq.n	8003f30 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003f2c:	f7ff feb1 	bl	8003c92 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f30:	2360      	movs	r3, #96	@ 0x60
 8003f32:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 4500-1;
 8003f34:	f241 1393 	movw	r3, #4499	@ 0x1193
 8003f38:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003f42:	1d3b      	adds	r3, r7, #4
 8003f44:	2208      	movs	r2, #8
 8003f46:	4619      	mov	r1, r3
 8003f48:	4807      	ldr	r0, [pc, #28]	@ (8003f68 <MX_TIM3_Init+0xe8>)
 8003f4a:	f003 ff13 	bl	8007d74 <HAL_TIM_PWM_ConfigChannel>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d001      	beq.n	8003f58 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003f54:	f7ff fe9d 	bl	8003c92 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003f58:	4803      	ldr	r0, [pc, #12]	@ (8003f68 <MX_TIM3_Init+0xe8>)
 8003f5a:	f000 f8b7 	bl	80040cc <HAL_TIM_MspPostInit>

}
 8003f5e:	bf00      	nop
 8003f60:	3738      	adds	r7, #56	@ 0x38
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	20000194 	.word	0x20000194
 8003f6c:	40000400 	.word	0x40000400

08003f70 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b08e      	sub	sp, #56	@ 0x38
 8003f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f76:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	601a      	str	r2, [r3, #0]
 8003f7e:	605a      	str	r2, [r3, #4]
 8003f80:	609a      	str	r2, [r3, #8]
 8003f82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f84:	f107 0320 	add.w	r3, r7, #32
 8003f88:	2200      	movs	r2, #0
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f8e:	1d3b      	adds	r3, r7, #4
 8003f90:	2200      	movs	r2, #0
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	605a      	str	r2, [r3, #4]
 8003f96:	609a      	str	r2, [r3, #8]
 8003f98:	60da      	str	r2, [r3, #12]
 8003f9a:	611a      	str	r2, [r3, #16]
 8003f9c:	615a      	str	r2, [r3, #20]
 8003f9e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003fa0:	4b2b      	ldr	r3, [pc, #172]	@ (8004050 <MX_TIM4_Init+0xe0>)
 8003fa2:	4a2c      	ldr	r2, [pc, #176]	@ (8004054 <MX_TIM4_Init+0xe4>)
 8003fa4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8000-1;
 8003fa6:	4b2a      	ldr	r3, [pc, #168]	@ (8004050 <MX_TIM4_Init+0xe0>)
 8003fa8:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8003fac:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fae:	4b28      	ldr	r3, [pc, #160]	@ (8004050 <MX_TIM4_Init+0xe0>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 500-1;
 8003fb4:	4b26      	ldr	r3, [pc, #152]	@ (8004050 <MX_TIM4_Init+0xe0>)
 8003fb6:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8003fba:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fbc:	4b24      	ldr	r3, [pc, #144]	@ (8004050 <MX_TIM4_Init+0xe0>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fc2:	4b23      	ldr	r3, [pc, #140]	@ (8004050 <MX_TIM4_Init+0xe0>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003fc8:	4821      	ldr	r0, [pc, #132]	@ (8004050 <MX_TIM4_Init+0xe0>)
 8003fca:	f003 fa93 	bl	80074f4 <HAL_TIM_Base_Init>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d001      	beq.n	8003fd8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8003fd4:	f7ff fe5d 	bl	8003c92 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003fd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003fde:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	481a      	ldr	r0, [pc, #104]	@ (8004050 <MX_TIM4_Init+0xe0>)
 8003fe6:	f003 ff87 	bl	8007ef8 <HAL_TIM_ConfigClockSource>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8003ff0:	f7ff fe4f 	bl	8003c92 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003ff4:	4816      	ldr	r0, [pc, #88]	@ (8004050 <MX_TIM4_Init+0xe0>)
 8003ff6:	f003 facc 	bl	8007592 <HAL_TIM_PWM_Init>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d001      	beq.n	8004004 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8004000:	f7ff fe47 	bl	8003c92 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004004:	2320      	movs	r3, #32
 8004006:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004008:	2300      	movs	r3, #0
 800400a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800400c:	f107 0320 	add.w	r3, r7, #32
 8004010:	4619      	mov	r1, r3
 8004012:	480f      	ldr	r0, [pc, #60]	@ (8004050 <MX_TIM4_Init+0xe0>)
 8004014:	f004 fb14 	bl	8008640 <HAL_TIMEx_MasterConfigSynchronization>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800401e:	f7ff fe38 	bl	8003c92 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004022:	2360      	movs	r3, #96	@ 0x60
 8004024:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 250-1;
 8004026:	23f9      	movs	r3, #249	@ 0xf9
 8004028:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800402a:	2300      	movs	r3, #0
 800402c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800402e:	2300      	movs	r3, #0
 8004030:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004032:	1d3b      	adds	r3, r7, #4
 8004034:	220c      	movs	r2, #12
 8004036:	4619      	mov	r1, r3
 8004038:	4805      	ldr	r0, [pc, #20]	@ (8004050 <MX_TIM4_Init+0xe0>)
 800403a:	f003 fe9b 	bl	8007d74 <HAL_TIM_PWM_ConfigChannel>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d001      	beq.n	8004048 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8004044:	f7ff fe25 	bl	8003c92 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004048:	bf00      	nop
 800404a:	3738      	adds	r7, #56	@ 0x38
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	200001dc 	.word	0x200001dc
 8004054:	40000800 	.word	0x40000800

08004058 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a16      	ldr	r2, [pc, #88]	@ (80040c0 <HAL_TIM_Base_MspInit+0x68>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d10c      	bne.n	8004084 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800406a:	4b16      	ldr	r3, [pc, #88]	@ (80040c4 <HAL_TIM_Base_MspInit+0x6c>)
 800406c:	69db      	ldr	r3, [r3, #28]
 800406e:	4a15      	ldr	r2, [pc, #84]	@ (80040c4 <HAL_TIM_Base_MspInit+0x6c>)
 8004070:	f043 0302 	orr.w	r3, r3, #2
 8004074:	61d3      	str	r3, [r2, #28]
 8004076:	4b13      	ldr	r3, [pc, #76]	@ (80040c4 <HAL_TIM_Base_MspInit+0x6c>)
 8004078:	69db      	ldr	r3, [r3, #28]
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	60fb      	str	r3, [r7, #12]
 8004080:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8004082:	e018      	b.n	80040b6 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM4)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a0f      	ldr	r2, [pc, #60]	@ (80040c8 <HAL_TIM_Base_MspInit+0x70>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d113      	bne.n	80040b6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800408e:	4b0d      	ldr	r3, [pc, #52]	@ (80040c4 <HAL_TIM_Base_MspInit+0x6c>)
 8004090:	69db      	ldr	r3, [r3, #28]
 8004092:	4a0c      	ldr	r2, [pc, #48]	@ (80040c4 <HAL_TIM_Base_MspInit+0x6c>)
 8004094:	f043 0304 	orr.w	r3, r3, #4
 8004098:	61d3      	str	r3, [r2, #28]
 800409a:	4b0a      	ldr	r3, [pc, #40]	@ (80040c4 <HAL_TIM_Base_MspInit+0x6c>)
 800409c:	69db      	ldr	r3, [r3, #28]
 800409e:	f003 0304 	and.w	r3, r3, #4
 80040a2:	60bb      	str	r3, [r7, #8]
 80040a4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80040a6:	2200      	movs	r2, #0
 80040a8:	2100      	movs	r1, #0
 80040aa:	201e      	movs	r0, #30
 80040ac:	f000 ffe3 	bl	8005076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80040b0:	201e      	movs	r0, #30
 80040b2:	f000 fffc 	bl	80050ae <HAL_NVIC_EnableIRQ>
}
 80040b6:	bf00      	nop
 80040b8:	3710      	adds	r7, #16
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	40000400 	.word	0x40000400
 80040c4:	40021000 	.word	0x40021000
 80040c8:	40000800 	.word	0x40000800

080040cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b088      	sub	sp, #32
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040d4:	f107 0310 	add.w	r3, r7, #16
 80040d8:	2200      	movs	r2, #0
 80040da:	601a      	str	r2, [r3, #0]
 80040dc:	605a      	str	r2, [r3, #4]
 80040de:	609a      	str	r2, [r3, #8]
 80040e0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a0f      	ldr	r2, [pc, #60]	@ (8004124 <HAL_TIM_MspPostInit+0x58>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d117      	bne.n	800411c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040ec:	4b0e      	ldr	r3, [pc, #56]	@ (8004128 <HAL_TIM_MspPostInit+0x5c>)
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	4a0d      	ldr	r2, [pc, #52]	@ (8004128 <HAL_TIM_MspPostInit+0x5c>)
 80040f2:	f043 0308 	orr.w	r3, r3, #8
 80040f6:	6193      	str	r3, [r2, #24]
 80040f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004128 <HAL_TIM_MspPostInit+0x5c>)
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	f003 0308 	and.w	r3, r3, #8
 8004100:	60fb      	str	r3, [r7, #12]
 8004102:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_PWM_Pin;
 8004104:	2301      	movs	r3, #1
 8004106:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004108:	2302      	movs	r3, #2
 800410a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800410c:	2302      	movs	r3, #2
 800410e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOTOR_PWM_GPIO_Port, &GPIO_InitStruct);
 8004110:	f107 0310 	add.w	r3, r7, #16
 8004114:	4619      	mov	r1, r3
 8004116:	4805      	ldr	r0, [pc, #20]	@ (800412c <HAL_TIM_MspPostInit+0x60>)
 8004118:	f001 fa86 	bl	8005628 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800411c:	bf00      	nop
 800411e:	3720      	adds	r7, #32
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	40000400 	.word	0x40000400
 8004128:	40021000 	.word	0x40021000
 800412c:	40010c00 	.word	0x40010c00

08004130 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004134:	4b11      	ldr	r3, [pc, #68]	@ (800417c <MX_USART1_UART_Init+0x4c>)
 8004136:	4a12      	ldr	r2, [pc, #72]	@ (8004180 <MX_USART1_UART_Init+0x50>)
 8004138:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800413a:	4b10      	ldr	r3, [pc, #64]	@ (800417c <MX_USART1_UART_Init+0x4c>)
 800413c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8004140:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004142:	4b0e      	ldr	r3, [pc, #56]	@ (800417c <MX_USART1_UART_Init+0x4c>)
 8004144:	2200      	movs	r2, #0
 8004146:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004148:	4b0c      	ldr	r3, [pc, #48]	@ (800417c <MX_USART1_UART_Init+0x4c>)
 800414a:	2200      	movs	r2, #0
 800414c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800414e:	4b0b      	ldr	r3, [pc, #44]	@ (800417c <MX_USART1_UART_Init+0x4c>)
 8004150:	2200      	movs	r2, #0
 8004152:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004154:	4b09      	ldr	r3, [pc, #36]	@ (800417c <MX_USART1_UART_Init+0x4c>)
 8004156:	220c      	movs	r2, #12
 8004158:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800415a:	4b08      	ldr	r3, [pc, #32]	@ (800417c <MX_USART1_UART_Init+0x4c>)
 800415c:	2200      	movs	r2, #0
 800415e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004160:	4b06      	ldr	r3, [pc, #24]	@ (800417c <MX_USART1_UART_Init+0x4c>)
 8004162:	2200      	movs	r2, #0
 8004164:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004166:	4805      	ldr	r0, [pc, #20]	@ (800417c <MX_USART1_UART_Init+0x4c>)
 8004168:	f004 fada 	bl	8008720 <HAL_UART_Init>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d001      	beq.n	8004176 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004172:	f7ff fd8e 	bl	8003c92 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004176:	bf00      	nop
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	20000224 	.word	0x20000224
 8004180:	40013800 	.word	0x40013800

08004184 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004188:	4b11      	ldr	r3, [pc, #68]	@ (80041d0 <MX_USART3_UART_Init+0x4c>)
 800418a:	4a12      	ldr	r2, [pc, #72]	@ (80041d4 <MX_USART3_UART_Init+0x50>)
 800418c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800418e:	4b10      	ldr	r3, [pc, #64]	@ (80041d0 <MX_USART3_UART_Init+0x4c>)
 8004190:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004194:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004196:	4b0e      	ldr	r3, [pc, #56]	@ (80041d0 <MX_USART3_UART_Init+0x4c>)
 8004198:	2200      	movs	r2, #0
 800419a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800419c:	4b0c      	ldr	r3, [pc, #48]	@ (80041d0 <MX_USART3_UART_Init+0x4c>)
 800419e:	2200      	movs	r2, #0
 80041a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80041a2:	4b0b      	ldr	r3, [pc, #44]	@ (80041d0 <MX_USART3_UART_Init+0x4c>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80041a8:	4b09      	ldr	r3, [pc, #36]	@ (80041d0 <MX_USART3_UART_Init+0x4c>)
 80041aa:	220c      	movs	r2, #12
 80041ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041ae:	4b08      	ldr	r3, [pc, #32]	@ (80041d0 <MX_USART3_UART_Init+0x4c>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80041b4:	4b06      	ldr	r3, [pc, #24]	@ (80041d0 <MX_USART3_UART_Init+0x4c>)
 80041b6:	2200      	movs	r2, #0
 80041b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80041ba:	4805      	ldr	r0, [pc, #20]	@ (80041d0 <MX_USART3_UART_Init+0x4c>)
 80041bc:	f004 fab0 	bl	8008720 <HAL_UART_Init>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d001      	beq.n	80041ca <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80041c6:	f7ff fd64 	bl	8003c92 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80041ca:	bf00      	nop
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	2000026c 	.word	0x2000026c
 80041d4:	40004800 	.word	0x40004800

080041d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b08a      	sub	sp, #40	@ 0x28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041e0:	f107 0318 	add.w	r3, r7, #24
 80041e4:	2200      	movs	r2, #0
 80041e6:	601a      	str	r2, [r3, #0]
 80041e8:	605a      	str	r2, [r3, #4]
 80041ea:	609a      	str	r2, [r3, #8]
 80041ec:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a3c      	ldr	r2, [pc, #240]	@ (80042e4 <HAL_UART_MspInit+0x10c>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d13a      	bne.n	800426e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80041f8:	4b3b      	ldr	r3, [pc, #236]	@ (80042e8 <HAL_UART_MspInit+0x110>)
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	4a3a      	ldr	r2, [pc, #232]	@ (80042e8 <HAL_UART_MspInit+0x110>)
 80041fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004202:	6193      	str	r3, [r2, #24]
 8004204:	4b38      	ldr	r3, [pc, #224]	@ (80042e8 <HAL_UART_MspInit+0x110>)
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800420c:	617b      	str	r3, [r7, #20]
 800420e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004210:	4b35      	ldr	r3, [pc, #212]	@ (80042e8 <HAL_UART_MspInit+0x110>)
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	4a34      	ldr	r2, [pc, #208]	@ (80042e8 <HAL_UART_MspInit+0x110>)
 8004216:	f043 0304 	orr.w	r3, r3, #4
 800421a:	6193      	str	r3, [r2, #24]
 800421c:	4b32      	ldr	r3, [pc, #200]	@ (80042e8 <HAL_UART_MspInit+0x110>)
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	f003 0304 	and.w	r3, r3, #4
 8004224:	613b      	str	r3, [r7, #16]
 8004226:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004228:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800422c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800422e:	2302      	movs	r3, #2
 8004230:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004232:	2303      	movs	r3, #3
 8004234:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004236:	f107 0318 	add.w	r3, r7, #24
 800423a:	4619      	mov	r1, r3
 800423c:	482b      	ldr	r0, [pc, #172]	@ (80042ec <HAL_UART_MspInit+0x114>)
 800423e:	f001 f9f3 	bl	8005628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004242:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004246:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004248:	2300      	movs	r3, #0
 800424a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800424c:	2300      	movs	r3, #0
 800424e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004250:	f107 0318 	add.w	r3, r7, #24
 8004254:	4619      	mov	r1, r3
 8004256:	4825      	ldr	r0, [pc, #148]	@ (80042ec <HAL_UART_MspInit+0x114>)
 8004258:	f001 f9e6 	bl	8005628 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800425c:	2200      	movs	r2, #0
 800425e:	2101      	movs	r1, #1
 8004260:	2025      	movs	r0, #37	@ 0x25
 8004262:	f000 ff08 	bl	8005076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004266:	2025      	movs	r0, #37	@ 0x25
 8004268:	f000 ff21 	bl	80050ae <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800426c:	e036      	b.n	80042dc <HAL_UART_MspInit+0x104>
  else if(uartHandle->Instance==USART3)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a1f      	ldr	r2, [pc, #124]	@ (80042f0 <HAL_UART_MspInit+0x118>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d131      	bne.n	80042dc <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004278:	4b1b      	ldr	r3, [pc, #108]	@ (80042e8 <HAL_UART_MspInit+0x110>)
 800427a:	69db      	ldr	r3, [r3, #28]
 800427c:	4a1a      	ldr	r2, [pc, #104]	@ (80042e8 <HAL_UART_MspInit+0x110>)
 800427e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004282:	61d3      	str	r3, [r2, #28]
 8004284:	4b18      	ldr	r3, [pc, #96]	@ (80042e8 <HAL_UART_MspInit+0x110>)
 8004286:	69db      	ldr	r3, [r3, #28]
 8004288:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800428c:	60fb      	str	r3, [r7, #12]
 800428e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004290:	4b15      	ldr	r3, [pc, #84]	@ (80042e8 <HAL_UART_MspInit+0x110>)
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	4a14      	ldr	r2, [pc, #80]	@ (80042e8 <HAL_UART_MspInit+0x110>)
 8004296:	f043 0308 	orr.w	r3, r3, #8
 800429a:	6193      	str	r3, [r2, #24]
 800429c:	4b12      	ldr	r3, [pc, #72]	@ (80042e8 <HAL_UART_MspInit+0x110>)
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	f003 0308 	and.w	r3, r3, #8
 80042a4:	60bb      	str	r3, [r7, #8]
 80042a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80042a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80042ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ae:	2302      	movs	r3, #2
 80042b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80042b2:	2303      	movs	r3, #3
 80042b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042b6:	f107 0318 	add.w	r3, r7, #24
 80042ba:	4619      	mov	r1, r3
 80042bc:	480d      	ldr	r0, [pc, #52]	@ (80042f4 <HAL_UART_MspInit+0x11c>)
 80042be:	f001 f9b3 	bl	8005628 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80042c2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80042c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80042c8:	2300      	movs	r3, #0
 80042ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042cc:	2300      	movs	r3, #0
 80042ce:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042d0:	f107 0318 	add.w	r3, r7, #24
 80042d4:	4619      	mov	r1, r3
 80042d6:	4807      	ldr	r0, [pc, #28]	@ (80042f4 <HAL_UART_MspInit+0x11c>)
 80042d8:	f001 f9a6 	bl	8005628 <HAL_GPIO_Init>
}
 80042dc:	bf00      	nop
 80042de:	3728      	adds	r7, #40	@ 0x28
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	40013800 	.word	0x40013800
 80042e8:	40021000 	.word	0x40021000
 80042ec:	40010800 	.word	0x40010800
 80042f0:	40004800 	.word	0x40004800
 80042f4:	40010c00 	.word	0x40010c00

080042f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80042f8:	f7ff fdbc 	bl	8003e74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80042fc:	480b      	ldr	r0, [pc, #44]	@ (800432c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80042fe:	490c      	ldr	r1, [pc, #48]	@ (8004330 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004300:	4a0c      	ldr	r2, [pc, #48]	@ (8004334 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004302:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004304:	e002      	b.n	800430c <LoopCopyDataInit>

08004306 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004306:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004308:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800430a:	3304      	adds	r3, #4

0800430c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800430c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800430e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004310:	d3f9      	bcc.n	8004306 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004312:	4a09      	ldr	r2, [pc, #36]	@ (8004338 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004314:	4c09      	ldr	r4, [pc, #36]	@ (800433c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004316:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004318:	e001      	b.n	800431e <LoopFillZerobss>

0800431a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800431a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800431c:	3204      	adds	r2, #4

0800431e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800431e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004320:	d3fb      	bcc.n	800431a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004322:	f005 fc31 	bl	8009b88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004326:	f7fc ffb7 	bl	8001298 <main>
  bx lr
 800432a:	4770      	bx	lr
  ldr r0, =_sdata
 800432c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004330:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8004334:	0800c71c 	.word	0x0800c71c
  ldr r2, =_sbss
 8004338:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 800433c:	20000408 	.word	0x20000408

08004340 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004340:	e7fe      	b.n	8004340 <ADC1_2_IRQHandler>
	...

08004344 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 800434c:	4a11      	ldr	r2, [pc, #68]	@ (8004394 <RetargetInit+0x50>)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8004352:	4b11      	ldr	r3, [pc, #68]	@ (8004398 <RetargetInit+0x54>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	6898      	ldr	r0, [r3, #8]
 8004358:	2300      	movs	r3, #0
 800435a:	2202      	movs	r2, #2
 800435c:	2100      	movs	r1, #0
 800435e:	f005 fa13 	bl	8009788 <setvbuf>
  setvbuf(stdin, NULL, _IONBF, 0);
 8004362:	4b0d      	ldr	r3, [pc, #52]	@ (8004398 <RetargetInit+0x54>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	6858      	ldr	r0, [r3, #4]
 8004368:	2300      	movs	r3, #0
 800436a:	2202      	movs	r2, #2
 800436c:	2100      	movs	r1, #0
 800436e:	f005 fa0b 	bl	8009788 <setvbuf>
  __HAL_UART_CLEAR_OREFLAG(gHuart);
 8004372:	2300      	movs	r3, #0
 8004374:	60fb      	str	r3, [r7, #12]
 8004376:	4b07      	ldr	r3, [pc, #28]	@ (8004394 <RetargetInit+0x50>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	60fb      	str	r3, [r7, #12]
 8004380:	4b04      	ldr	r3, [pc, #16]	@ (8004394 <RetargetInit+0x50>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	60fb      	str	r3, [r7, #12]
 800438a:	68fb      	ldr	r3, [r7, #12]

}
 800438c:	bf00      	nop
 800438e:	3710      	adds	r7, #16
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	200002b4 	.word	0x200002b4
 8004398:	20000050 	.word	0x20000050

0800439c <_write>:


int _write(int fd, char* ptr, int len) {
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d002      	beq.n	80043b4 <_write+0x18>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d111      	bne.n	80043d8 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80043b4:	4b0e      	ldr	r3, [pc, #56]	@ (80043f0 <_write+0x54>)
 80043b6:	6818      	ldr	r0, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	f04f 33ff 	mov.w	r3, #4294967295
 80043c0:	68b9      	ldr	r1, [r7, #8]
 80043c2:	f004 f9fd 	bl	80087c0 <HAL_UART_Transmit>
 80043c6:	4603      	mov	r3, r0
 80043c8:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80043ca:	7dfb      	ldrb	r3, [r7, #23]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d101      	bne.n	80043d4 <_write+0x38>
      return len;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	e008      	b.n	80043e6 <_write+0x4a>
    else
      return EIO;
 80043d4:	2305      	movs	r3, #5
 80043d6:	e006      	b.n	80043e6 <_write+0x4a>
  }
  errno = EBADF;
 80043d8:	f005 fbd0 	bl	8009b7c <__errno>
 80043dc:	4603      	mov	r3, r0
 80043de:	2209      	movs	r2, #9
 80043e0:	601a      	str	r2, [r3, #0]
  return -1;
 80043e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3718      	adds	r7, #24
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	200002b4 	.word	0x200002b4

080043f4 <_read>:


int _read(int fd, char* ptr, int len) {
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d110      	bne.n	8004428 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8004406:	4b0e      	ldr	r3, [pc, #56]	@ (8004440 <_read+0x4c>)
 8004408:	6818      	ldr	r0, [r3, #0]
 800440a:	f04f 33ff 	mov.w	r3, #4294967295
 800440e:	2201      	movs	r2, #1
 8004410:	68b9      	ldr	r1, [r7, #8]
 8004412:	f004 fa60 	bl	80088d6 <HAL_UART_Receive>
 8004416:	4603      	mov	r3, r0
 8004418:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800441a:	7dfb      	ldrb	r3, [r7, #23]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d101      	bne.n	8004424 <_read+0x30>
      return 1;
 8004420:	2301      	movs	r3, #1
 8004422:	e008      	b.n	8004436 <_read+0x42>
    else
      return EIO;
 8004424:	2305      	movs	r3, #5
 8004426:	e006      	b.n	8004436 <_read+0x42>
  }
  errno = EBADF;
 8004428:	f005 fba8 	bl	8009b7c <__errno>
 800442c:	4603      	mov	r3, r0
 800442e:	2209      	movs	r2, #9
 8004430:	601a      	str	r2, [r3, #0]
  return -1;
 8004432:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004436:	4618      	mov	r0, r3
 8004438:	3718      	adds	r7, #24
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	200002b4 	.word	0x200002b4

08004444 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004448:	4b08      	ldr	r3, [pc, #32]	@ (800446c <HAL_Init+0x28>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a07      	ldr	r2, [pc, #28]	@ (800446c <HAL_Init+0x28>)
 800444e:	f043 0310 	orr.w	r3, r3, #16
 8004452:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004454:	2003      	movs	r0, #3
 8004456:	f000 fe03 	bl	8005060 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800445a:	2000      	movs	r0, #0
 800445c:	f000 f808 	bl	8004470 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004460:	f7ff fc1e 	bl	8003ca0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	40022000 	.word	0x40022000

08004470 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004478:	4b12      	ldr	r3, [pc, #72]	@ (80044c4 <HAL_InitTick+0x54>)
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	4b12      	ldr	r3, [pc, #72]	@ (80044c8 <HAL_InitTick+0x58>)
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	4619      	mov	r1, r3
 8004482:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004486:	fbb3 f3f1 	udiv	r3, r3, r1
 800448a:	fbb2 f3f3 	udiv	r3, r2, r3
 800448e:	4618      	mov	r0, r3
 8004490:	f000 fe1b 	bl	80050ca <HAL_SYSTICK_Config>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e00e      	b.n	80044bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b0f      	cmp	r3, #15
 80044a2:	d80a      	bhi.n	80044ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80044a4:	2200      	movs	r2, #0
 80044a6:	6879      	ldr	r1, [r7, #4]
 80044a8:	f04f 30ff 	mov.w	r0, #4294967295
 80044ac:	f000 fde3 	bl	8005076 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80044b0:	4a06      	ldr	r2, [pc, #24]	@ (80044cc <HAL_InitTick+0x5c>)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
 80044b8:	e000      	b.n	80044bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3708      	adds	r7, #8
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	20000038 	.word	0x20000038
 80044c8:	20000040 	.word	0x20000040
 80044cc:	2000003c 	.word	0x2000003c

080044d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044d0:	b480      	push	{r7}
 80044d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80044d4:	4b05      	ldr	r3, [pc, #20]	@ (80044ec <HAL_IncTick+0x1c>)
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	461a      	mov	r2, r3
 80044da:	4b05      	ldr	r3, [pc, #20]	@ (80044f0 <HAL_IncTick+0x20>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4413      	add	r3, r2
 80044e0:	4a03      	ldr	r2, [pc, #12]	@ (80044f0 <HAL_IncTick+0x20>)
 80044e2:	6013      	str	r3, [r2, #0]
}
 80044e4:	bf00      	nop
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bc80      	pop	{r7}
 80044ea:	4770      	bx	lr
 80044ec:	20000040 	.word	0x20000040
 80044f0:	200002b8 	.word	0x200002b8

080044f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044f4:	b480      	push	{r7}
 80044f6:	af00      	add	r7, sp, #0
  return uwTick;
 80044f8:	4b02      	ldr	r3, [pc, #8]	@ (8004504 <HAL_GetTick+0x10>)
 80044fa:	681b      	ldr	r3, [r3, #0]
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	46bd      	mov	sp, r7
 8004500:	bc80      	pop	{r7}
 8004502:	4770      	bx	lr
 8004504:	200002b8 	.word	0x200002b8

08004508 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004510:	f7ff fff0 	bl	80044f4 <HAL_GetTick>
 8004514:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004520:	d005      	beq.n	800452e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004522:	4b0a      	ldr	r3, [pc, #40]	@ (800454c <HAL_Delay+0x44>)
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	461a      	mov	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	4413      	add	r3, r2
 800452c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800452e:	bf00      	nop
 8004530:	f7ff ffe0 	bl	80044f4 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	429a      	cmp	r2, r3
 800453e:	d8f7      	bhi.n	8004530 <HAL_Delay+0x28>
  {
  }
}
 8004540:	bf00      	nop
 8004542:	bf00      	nop
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	20000040 	.word	0x20000040

08004550 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004558:	2300      	movs	r3, #0
 800455a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800455c:	2300      	movs	r3, #0
 800455e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004560:	2300      	movs	r3, #0
 8004562:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004564:	2300      	movs	r3, #0
 8004566:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e0be      	b.n	80046f0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800457c:	2b00      	cmp	r3, #0
 800457e:	d109      	bne.n	8004594 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7fc fcf6 	bl	8000f80 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 fb41 	bl	8004c1c <ADC_ConversionStop_Disable>
 800459a:	4603      	mov	r3, r0
 800459c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045a2:	f003 0310 	and.w	r3, r3, #16
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f040 8099 	bne.w	80046de <HAL_ADC_Init+0x18e>
 80045ac:	7dfb      	ldrb	r3, [r7, #23]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	f040 8095 	bne.w	80046de <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045b8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80045bc:	f023 0302 	bic.w	r3, r3, #2
 80045c0:	f043 0202 	orr.w	r2, r3, #2
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80045d0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	7b1b      	ldrb	r3, [r3, #12]
 80045d6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80045d8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	4313      	orrs	r3, r2
 80045de:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045e8:	d003      	beq.n	80045f2 <HAL_ADC_Init+0xa2>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d102      	bne.n	80045f8 <HAL_ADC_Init+0xa8>
 80045f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80045f6:	e000      	b.n	80045fa <HAL_ADC_Init+0xaa>
 80045f8:	2300      	movs	r3, #0
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	7d1b      	ldrb	r3, [r3, #20]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d119      	bne.n	800463c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	7b1b      	ldrb	r3, [r3, #12]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d109      	bne.n	8004624 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	699b      	ldr	r3, [r3, #24]
 8004614:	3b01      	subs	r3, #1
 8004616:	035a      	lsls	r2, r3, #13
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	4313      	orrs	r3, r2
 800461c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004620:	613b      	str	r3, [r7, #16]
 8004622:	e00b      	b.n	800463c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004628:	f043 0220 	orr.w	r2, r3, #32
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004634:	f043 0201 	orr.w	r2, r3, #1
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	430a      	orrs	r2, r1
 800464e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	689a      	ldr	r2, [r3, #8]
 8004656:	4b28      	ldr	r3, [pc, #160]	@ (80046f8 <HAL_ADC_Init+0x1a8>)
 8004658:	4013      	ands	r3, r2
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	6812      	ldr	r2, [r2, #0]
 800465e:	68b9      	ldr	r1, [r7, #8]
 8004660:	430b      	orrs	r3, r1
 8004662:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800466c:	d003      	beq.n	8004676 <HAL_ADC_Init+0x126>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d104      	bne.n	8004680 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	3b01      	subs	r3, #1
 800467c:	051b      	lsls	r3, r3, #20
 800467e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004686:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	430a      	orrs	r2, r1
 8004692:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	689a      	ldr	r2, [r3, #8]
 800469a:	4b18      	ldr	r3, [pc, #96]	@ (80046fc <HAL_ADC_Init+0x1ac>)
 800469c:	4013      	ands	r3, r2
 800469e:	68ba      	ldr	r2, [r7, #8]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d10b      	bne.n	80046bc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ae:	f023 0303 	bic.w	r3, r3, #3
 80046b2:	f043 0201 	orr.w	r2, r3, #1
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80046ba:	e018      	b.n	80046ee <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c0:	f023 0312 	bic.w	r3, r3, #18
 80046c4:	f043 0210 	orr.w	r2, r3, #16
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046d0:	f043 0201 	orr.w	r2, r3, #1
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80046dc:	e007      	b.n	80046ee <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046e2:	f043 0210 	orr.w	r2, r3, #16
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80046ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3718      	adds	r7, #24
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	ffe1f7fd 	.word	0xffe1f7fd
 80046fc:	ff1f0efe 	.word	0xff1f0efe

08004700 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800470c:	2300      	movs	r3, #0
 800470e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a64      	ldr	r2, [pc, #400]	@ (80048a8 <HAL_ADC_Start_DMA+0x1a8>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d004      	beq.n	8004724 <HAL_ADC_Start_DMA+0x24>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a63      	ldr	r2, [pc, #396]	@ (80048ac <HAL_ADC_Start_DMA+0x1ac>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d106      	bne.n	8004732 <HAL_ADC_Start_DMA+0x32>
 8004724:	4b60      	ldr	r3, [pc, #384]	@ (80048a8 <HAL_ADC_Start_DMA+0x1a8>)
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800472c:	2b00      	cmp	r3, #0
 800472e:	f040 80b3 	bne.w	8004898 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004738:	2b01      	cmp	r3, #1
 800473a:	d101      	bne.n	8004740 <HAL_ADC_Start_DMA+0x40>
 800473c:	2302      	movs	r3, #2
 800473e:	e0ae      	b.n	800489e <HAL_ADC_Start_DMA+0x19e>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004748:	68f8      	ldr	r0, [r7, #12]
 800474a:	f000 fa0d 	bl	8004b68 <ADC_Enable>
 800474e:	4603      	mov	r3, r0
 8004750:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004752:	7dfb      	ldrb	r3, [r7, #23]
 8004754:	2b00      	cmp	r3, #0
 8004756:	f040 809a 	bne.w	800488e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800475e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004762:	f023 0301 	bic.w	r3, r3, #1
 8004766:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a4e      	ldr	r2, [pc, #312]	@ (80048ac <HAL_ADC_Start_DMA+0x1ac>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d105      	bne.n	8004784 <HAL_ADC_Start_DMA+0x84>
 8004778:	4b4b      	ldr	r3, [pc, #300]	@ (80048a8 <HAL_ADC_Start_DMA+0x1a8>)
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d115      	bne.n	80047b0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004788:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800479a:	2b00      	cmp	r3, #0
 800479c:	d026      	beq.n	80047ec <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80047a6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80047ae:	e01d      	b.n	80047ec <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a39      	ldr	r2, [pc, #228]	@ (80048a8 <HAL_ADC_Start_DMA+0x1a8>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d004      	beq.n	80047d0 <HAL_ADC_Start_DMA+0xd0>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a38      	ldr	r2, [pc, #224]	@ (80048ac <HAL_ADC_Start_DMA+0x1ac>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d10d      	bne.n	80047ec <HAL_ADC_Start_DMA+0xec>
 80047d0:	4b35      	ldr	r3, [pc, #212]	@ (80048a8 <HAL_ADC_Start_DMA+0x1a8>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d007      	beq.n	80047ec <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80047e4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d006      	beq.n	8004806 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047fc:	f023 0206 	bic.w	r2, r3, #6
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004804:	e002      	b.n	800480c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6a1b      	ldr	r3, [r3, #32]
 8004818:	4a25      	ldr	r2, [pc, #148]	@ (80048b0 <HAL_ADC_Start_DMA+0x1b0>)
 800481a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6a1b      	ldr	r3, [r3, #32]
 8004820:	4a24      	ldr	r2, [pc, #144]	@ (80048b4 <HAL_ADC_Start_DMA+0x1b4>)
 8004822:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	4a23      	ldr	r2, [pc, #140]	@ (80048b8 <HAL_ADC_Start_DMA+0x1b8>)
 800482a:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f06f 0202 	mvn.w	r2, #2
 8004834:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	689a      	ldr	r2, [r3, #8]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004844:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6a18      	ldr	r0, [r3, #32]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	334c      	adds	r3, #76	@ 0x4c
 8004850:	4619      	mov	r1, r3
 8004852:	68ba      	ldr	r2, [r7, #8]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f000 fc9f 	bl	8005198 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8004864:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8004868:	d108      	bne.n	800487c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689a      	ldr	r2, [r3, #8]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8004878:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800487a:	e00f      	b.n	800489c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	689a      	ldr	r2, [r3, #8]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800488a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800488c:	e006      	b.n	800489c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8004896:	e001      	b.n	800489c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800489c:	7dfb      	ldrb	r3, [r7, #23]
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3718      	adds	r7, #24
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	40012400 	.word	0x40012400
 80048ac:	40012800 	.word	0x40012800
 80048b0:	08004c9f 	.word	0x08004c9f
 80048b4:	08004d1b 	.word	0x08004d1b
 80048b8:	08004d37 	.word	0x08004d37

080048bc <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048c4:	2300      	movs	r3, #0
 80048c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d101      	bne.n	80048d6 <HAL_ADC_Stop_DMA+0x1a>
 80048d2:	2302      	movs	r3, #2
 80048d4:	e03a      	b.n	800494c <HAL_ADC_Stop_DMA+0x90>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 f99c 	bl	8004c1c <ADC_ConversionStop_Disable>
 80048e4:	4603      	mov	r3, r0
 80048e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80048e8:	7bfb      	ldrb	r3, [r7, #15]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d129      	bne.n	8004942 <HAL_ADC_Stop_DMA+0x86>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	689a      	ldr	r2, [r3, #8]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048fc:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b02      	cmp	r3, #2
 800490a:	d11a      	bne.n	8004942 <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a1b      	ldr	r3, [r3, #32]
 8004910:	4618      	mov	r0, r3
 8004912:	f000 fca1 	bl	8005258 <HAL_DMA_Abort>
 8004916:	4603      	mov	r3, r0
 8004918:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 800491a:	7bfb      	ldrb	r3, [r7, #15]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d10a      	bne.n	8004936 <HAL_ADC_Stop_DMA+0x7a>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004924:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004928:	f023 0301 	bic.w	r3, r3, #1
 800492c:	f043 0201 	orr.w	r2, r3, #1
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	629a      	str	r2, [r3, #40]	@ 0x28
 8004934:	e005      	b.n	8004942 <HAL_ADC_Stop_DMA+0x86>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800493a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Return function status */
  return tmp_hal_status;
 800494a:	7bfb      	ldrb	r3, [r7, #15]
}
 800494c:	4618      	mov	r0, r3
 800494e:	3710      	adds	r7, #16
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800495c:	bf00      	nop
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	bc80      	pop	{r7}
 8004964:	4770      	bx	lr

08004966 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004966:	b480      	push	{r7}
 8004968:	b083      	sub	sp, #12
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800496e:	bf00      	nop
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	bc80      	pop	{r7}
 8004976:	4770      	bx	lr

08004978 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004982:	2300      	movs	r3, #0
 8004984:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004986:	2300      	movs	r3, #0
 8004988:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004990:	2b01      	cmp	r3, #1
 8004992:	d101      	bne.n	8004998 <HAL_ADC_ConfigChannel+0x20>
 8004994:	2302      	movs	r3, #2
 8004996:	e0dc      	b.n	8004b52 <HAL_ADC_ConfigChannel+0x1da>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	2b06      	cmp	r3, #6
 80049a6:	d81c      	bhi.n	80049e2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	685a      	ldr	r2, [r3, #4]
 80049b2:	4613      	mov	r3, r2
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	4413      	add	r3, r2
 80049b8:	3b05      	subs	r3, #5
 80049ba:	221f      	movs	r2, #31
 80049bc:	fa02 f303 	lsl.w	r3, r2, r3
 80049c0:	43db      	mvns	r3, r3
 80049c2:	4019      	ands	r1, r3
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	6818      	ldr	r0, [r3, #0]
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	685a      	ldr	r2, [r3, #4]
 80049cc:	4613      	mov	r3, r2
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	4413      	add	r3, r2
 80049d2:	3b05      	subs	r3, #5
 80049d4:	fa00 f203 	lsl.w	r2, r0, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	430a      	orrs	r2, r1
 80049de:	635a      	str	r2, [r3, #52]	@ 0x34
 80049e0:	e03c      	b.n	8004a5c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	2b0c      	cmp	r3, #12
 80049e8:	d81c      	bhi.n	8004a24 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	685a      	ldr	r2, [r3, #4]
 80049f4:	4613      	mov	r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	4413      	add	r3, r2
 80049fa:	3b23      	subs	r3, #35	@ 0x23
 80049fc:	221f      	movs	r2, #31
 80049fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004a02:	43db      	mvns	r3, r3
 8004a04:	4019      	ands	r1, r3
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	6818      	ldr	r0, [r3, #0]
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	685a      	ldr	r2, [r3, #4]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	4413      	add	r3, r2
 8004a14:	3b23      	subs	r3, #35	@ 0x23
 8004a16:	fa00 f203 	lsl.w	r2, r0, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	631a      	str	r2, [r3, #48]	@ 0x30
 8004a22:	e01b      	b.n	8004a5c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	4413      	add	r3, r2
 8004a34:	3b41      	subs	r3, #65	@ 0x41
 8004a36:	221f      	movs	r2, #31
 8004a38:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3c:	43db      	mvns	r3, r3
 8004a3e:	4019      	ands	r1, r3
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	6818      	ldr	r0, [r3, #0]
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	685a      	ldr	r2, [r3, #4]
 8004a48:	4613      	mov	r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	4413      	add	r3, r2
 8004a4e:	3b41      	subs	r3, #65	@ 0x41
 8004a50:	fa00 f203 	lsl.w	r2, r0, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	430a      	orrs	r2, r1
 8004a5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2b09      	cmp	r3, #9
 8004a62:	d91c      	bls.n	8004a9e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68d9      	ldr	r1, [r3, #12]
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	005b      	lsls	r3, r3, #1
 8004a72:	4413      	add	r3, r2
 8004a74:	3b1e      	subs	r3, #30
 8004a76:	2207      	movs	r2, #7
 8004a78:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7c:	43db      	mvns	r3, r3
 8004a7e:	4019      	ands	r1, r3
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	6898      	ldr	r0, [r3, #8]
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	4613      	mov	r3, r2
 8004a8a:	005b      	lsls	r3, r3, #1
 8004a8c:	4413      	add	r3, r2
 8004a8e:	3b1e      	subs	r3, #30
 8004a90:	fa00 f203 	lsl.w	r2, r0, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	60da      	str	r2, [r3, #12]
 8004a9c:	e019      	b.n	8004ad2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	6919      	ldr	r1, [r3, #16]
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	005b      	lsls	r3, r3, #1
 8004aac:	4413      	add	r3, r2
 8004aae:	2207      	movs	r2, #7
 8004ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab4:	43db      	mvns	r3, r3
 8004ab6:	4019      	ands	r1, r3
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	6898      	ldr	r0, [r3, #8]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	005b      	lsls	r3, r3, #1
 8004ac4:	4413      	add	r3, r2
 8004ac6:	fa00 f203 	lsl.w	r2, r0, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2b10      	cmp	r3, #16
 8004ad8:	d003      	beq.n	8004ae2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004ade:	2b11      	cmp	r3, #17
 8004ae0:	d132      	bne.n	8004b48 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a1d      	ldr	r2, [pc, #116]	@ (8004b5c <HAL_ADC_ConfigChannel+0x1e4>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d125      	bne.n	8004b38 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d126      	bne.n	8004b48 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	689a      	ldr	r2, [r3, #8]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8004b08:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2b10      	cmp	r3, #16
 8004b10:	d11a      	bne.n	8004b48 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004b12:	4b13      	ldr	r3, [pc, #76]	@ (8004b60 <HAL_ADC_ConfigChannel+0x1e8>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a13      	ldr	r2, [pc, #76]	@ (8004b64 <HAL_ADC_ConfigChannel+0x1ec>)
 8004b18:	fba2 2303 	umull	r2, r3, r2, r3
 8004b1c:	0c9a      	lsrs	r2, r3, #18
 8004b1e:	4613      	mov	r3, r2
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	4413      	add	r3, r2
 8004b24:	005b      	lsls	r3, r3, #1
 8004b26:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004b28:	e002      	b.n	8004b30 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1f9      	bne.n	8004b2a <HAL_ADC_ConfigChannel+0x1b2>
 8004b36:	e007      	b.n	8004b48 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b3c:	f043 0220 	orr.w	r2, r3, #32
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3714      	adds	r7, #20
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bc80      	pop	{r7}
 8004b5a:	4770      	bx	lr
 8004b5c:	40012400 	.word	0x40012400
 8004b60:	20000038 	.word	0x20000038
 8004b64:	431bde83 	.word	0x431bde83

08004b68 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b70:	2300      	movs	r3, #0
 8004b72:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004b74:	2300      	movs	r3, #0
 8004b76:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d040      	beq.n	8004c08 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f042 0201 	orr.w	r2, r2, #1
 8004b94:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004b96:	4b1f      	ldr	r3, [pc, #124]	@ (8004c14 <ADC_Enable+0xac>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a1f      	ldr	r2, [pc, #124]	@ (8004c18 <ADC_Enable+0xb0>)
 8004b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba0:	0c9b      	lsrs	r3, r3, #18
 8004ba2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004ba4:	e002      	b.n	8004bac <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1f9      	bne.n	8004ba6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004bb2:	f7ff fc9f 	bl	80044f4 <HAL_GetTick>
 8004bb6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004bb8:	e01f      	b.n	8004bfa <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004bba:	f7ff fc9b 	bl	80044f4 <HAL_GetTick>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d918      	bls.n	8004bfa <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f003 0301 	and.w	r3, r3, #1
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d011      	beq.n	8004bfa <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bda:	f043 0210 	orr.w	r2, r3, #16
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004be6:	f043 0201 	orr.w	r2, r3, #1
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e007      	b.n	8004c0a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d1d8      	bne.n	8004bba <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	20000038 	.word	0x20000038
 8004c18:	431bde83 	.word	0x431bde83

08004c1c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c24:	2300      	movs	r3, #0
 8004c26:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d12e      	bne.n	8004c94 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	689a      	ldr	r2, [r3, #8]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f022 0201 	bic.w	r2, r2, #1
 8004c44:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004c46:	f7ff fc55 	bl	80044f4 <HAL_GetTick>
 8004c4a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004c4c:	e01b      	b.n	8004c86 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004c4e:	f7ff fc51 	bl	80044f4 <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d914      	bls.n	8004c86 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f003 0301 	and.w	r3, r3, #1
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d10d      	bne.n	8004c86 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c6e:	f043 0210 	orr.w	r2, r3, #16
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c7a:	f043 0201 	orr.w	r2, r3, #1
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e007      	b.n	8004c96 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f003 0301 	and.w	r3, r3, #1
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d0dc      	beq.n	8004c4e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b084      	sub	sp, #16
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004caa:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d127      	bne.n	8004d08 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cbc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8004cce:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8004cd2:	d115      	bne.n	8004d00 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d111      	bne.n	8004d00 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ce0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d105      	bne.n	8004d00 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cf8:	f043 0201 	orr.w	r2, r3, #1
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f7fe f875 	bl	8002df0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8004d06:	e004      	b.n	8004d12 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6a1b      	ldr	r3, [r3, #32]
 8004d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	4798      	blx	r3
}
 8004d12:	bf00      	nop
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b084      	sub	sp, #16
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d26:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004d28:	68f8      	ldr	r0, [r7, #12]
 8004d2a:	f7ff fe13 	bl	8004954 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d2e:	bf00      	nop
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b084      	sub	sp, #16
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d42:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d48:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d54:	f043 0204 	orr.w	r2, r3, #4
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	f7ff fe02 	bl	8004966 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d62:	bf00      	nop
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
	...

08004d6c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8004d6c:	b590      	push	{r4, r7, lr}
 8004d6e:	b087      	sub	sp, #28
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d74:	2300      	movs	r3, #0
 8004d76:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d101      	bne.n	8004d8a <HAL_ADCEx_Calibration_Start+0x1e>
 8004d86:	2302      	movs	r3, #2
 8004d88:	e097      	b.n	8004eba <HAL_ADCEx_Calibration_Start+0x14e>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f7ff ff42 	bl	8004c1c <ADC_ConversionStop_Disable>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f7ff fee3 	bl	8004b68 <ADC_Enable>
 8004da2:	4603      	mov	r3, r0
 8004da4:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8004da6:	7dfb      	ldrb	r3, [r7, #23]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f040 8081 	bne.w	8004eb0 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004db6:	f023 0302 	bic.w	r3, r3, #2
 8004dba:	f043 0202 	orr.w	r2, r3, #2
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8004dc2:	4b40      	ldr	r3, [pc, #256]	@ (8004ec4 <HAL_ADCEx_Calibration_Start+0x158>)
 8004dc4:	681c      	ldr	r4, [r3, #0]
 8004dc6:	2002      	movs	r0, #2
 8004dc8:	f002 fade 	bl	8007388 <HAL_RCCEx_GetPeriphCLKFreq>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8004dd2:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8004dd4:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8004dd6:	e002      	b.n	8004dde <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1f9      	bne.n	8004dd8 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	689a      	ldr	r2, [r3, #8]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f042 0208 	orr.w	r2, r2, #8
 8004df2:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8004df4:	f7ff fb7e 	bl	80044f4 <HAL_GetTick>
 8004df8:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004dfa:	e01b      	b.n	8004e34 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004dfc:	f7ff fb7a 	bl	80044f4 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b0a      	cmp	r3, #10
 8004e08:	d914      	bls.n	8004e34 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f003 0308 	and.w	r3, r3, #8
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00d      	beq.n	8004e34 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e1c:	f023 0312 	bic.w	r3, r3, #18
 8004e20:	f043 0210 	orr.w	r2, r3, #16
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e042      	b.n	8004eba <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f003 0308 	and.w	r3, r3, #8
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1dc      	bne.n	8004dfc <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	689a      	ldr	r2, [r3, #8]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f042 0204 	orr.w	r2, r2, #4
 8004e50:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8004e52:	f7ff fb4f 	bl	80044f4 <HAL_GetTick>
 8004e56:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004e58:	e01b      	b.n	8004e92 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004e5a:	f7ff fb4b 	bl	80044f4 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	2b0a      	cmp	r3, #10
 8004e66:	d914      	bls.n	8004e92 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f003 0304 	and.w	r3, r3, #4
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00d      	beq.n	8004e92 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e7a:	f023 0312 	bic.w	r3, r3, #18
 8004e7e:	f043 0210 	orr.w	r2, r3, #16
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e013      	b.n	8004eba <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f003 0304 	and.w	r3, r3, #4
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1dc      	bne.n	8004e5a <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ea4:	f023 0303 	bic.w	r3, r3, #3
 8004ea8:	f043 0201 	orr.w	r2, r3, #1
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004eb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	371c      	adds	r7, #28
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd90      	pop	{r4, r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	20000038 	.word	0x20000038

08004ec8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f003 0307 	and.w	r3, r3, #7
 8004ed6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8004f0c <__NVIC_SetPriorityGrouping+0x44>)
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ef0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004ef4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004efa:	4a04      	ldr	r2, [pc, #16]	@ (8004f0c <__NVIC_SetPriorityGrouping+0x44>)
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	60d3      	str	r3, [r2, #12]
}
 8004f00:	bf00      	nop
 8004f02:	3714      	adds	r7, #20
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bc80      	pop	{r7}
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	e000ed00 	.word	0xe000ed00

08004f10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f10:	b480      	push	{r7}
 8004f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f14:	4b04      	ldr	r3, [pc, #16]	@ (8004f28 <__NVIC_GetPriorityGrouping+0x18>)
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	0a1b      	lsrs	r3, r3, #8
 8004f1a:	f003 0307 	and.w	r3, r3, #7
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bc80      	pop	{r7}
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	e000ed00 	.word	0xe000ed00

08004f2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	4603      	mov	r3, r0
 8004f34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	db0b      	blt.n	8004f56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f3e:	79fb      	ldrb	r3, [r7, #7]
 8004f40:	f003 021f 	and.w	r2, r3, #31
 8004f44:	4906      	ldr	r1, [pc, #24]	@ (8004f60 <__NVIC_EnableIRQ+0x34>)
 8004f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f4a:	095b      	lsrs	r3, r3, #5
 8004f4c:	2001      	movs	r0, #1
 8004f4e:	fa00 f202 	lsl.w	r2, r0, r2
 8004f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004f56:	bf00      	nop
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bc80      	pop	{r7}
 8004f5e:	4770      	bx	lr
 8004f60:	e000e100 	.word	0xe000e100

08004f64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	6039      	str	r1, [r7, #0]
 8004f6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	db0a      	blt.n	8004f8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	b2da      	uxtb	r2, r3
 8004f7c:	490c      	ldr	r1, [pc, #48]	@ (8004fb0 <__NVIC_SetPriority+0x4c>)
 8004f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f82:	0112      	lsls	r2, r2, #4
 8004f84:	b2d2      	uxtb	r2, r2
 8004f86:	440b      	add	r3, r1
 8004f88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f8c:	e00a      	b.n	8004fa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	b2da      	uxtb	r2, r3
 8004f92:	4908      	ldr	r1, [pc, #32]	@ (8004fb4 <__NVIC_SetPriority+0x50>)
 8004f94:	79fb      	ldrb	r3, [r7, #7]
 8004f96:	f003 030f 	and.w	r3, r3, #15
 8004f9a:	3b04      	subs	r3, #4
 8004f9c:	0112      	lsls	r2, r2, #4
 8004f9e:	b2d2      	uxtb	r2, r2
 8004fa0:	440b      	add	r3, r1
 8004fa2:	761a      	strb	r2, [r3, #24]
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bc80      	pop	{r7}
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop
 8004fb0:	e000e100 	.word	0xe000e100
 8004fb4:	e000ed00 	.word	0xe000ed00

08004fb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b089      	sub	sp, #36	@ 0x24
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f003 0307 	and.w	r3, r3, #7
 8004fca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	f1c3 0307 	rsb	r3, r3, #7
 8004fd2:	2b04      	cmp	r3, #4
 8004fd4:	bf28      	it	cs
 8004fd6:	2304      	movcs	r3, #4
 8004fd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	3304      	adds	r3, #4
 8004fde:	2b06      	cmp	r3, #6
 8004fe0:	d902      	bls.n	8004fe8 <NVIC_EncodePriority+0x30>
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	3b03      	subs	r3, #3
 8004fe6:	e000      	b.n	8004fea <NVIC_EncodePriority+0x32>
 8004fe8:	2300      	movs	r3, #0
 8004fea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fec:	f04f 32ff 	mov.w	r2, #4294967295
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff6:	43da      	mvns	r2, r3
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	401a      	ands	r2, r3
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005000:	f04f 31ff 	mov.w	r1, #4294967295
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	fa01 f303 	lsl.w	r3, r1, r3
 800500a:	43d9      	mvns	r1, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005010:	4313      	orrs	r3, r2
         );
}
 8005012:	4618      	mov	r0, r3
 8005014:	3724      	adds	r7, #36	@ 0x24
 8005016:	46bd      	mov	sp, r7
 8005018:	bc80      	pop	{r7}
 800501a:	4770      	bx	lr

0800501c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	3b01      	subs	r3, #1
 8005028:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800502c:	d301      	bcc.n	8005032 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800502e:	2301      	movs	r3, #1
 8005030:	e00f      	b.n	8005052 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005032:	4a0a      	ldr	r2, [pc, #40]	@ (800505c <SysTick_Config+0x40>)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	3b01      	subs	r3, #1
 8005038:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800503a:	210f      	movs	r1, #15
 800503c:	f04f 30ff 	mov.w	r0, #4294967295
 8005040:	f7ff ff90 	bl	8004f64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005044:	4b05      	ldr	r3, [pc, #20]	@ (800505c <SysTick_Config+0x40>)
 8005046:	2200      	movs	r2, #0
 8005048:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800504a:	4b04      	ldr	r3, [pc, #16]	@ (800505c <SysTick_Config+0x40>)
 800504c:	2207      	movs	r2, #7
 800504e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3708      	adds	r7, #8
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	e000e010 	.word	0xe000e010

08005060 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f7ff ff2d 	bl	8004ec8 <__NVIC_SetPriorityGrouping>
}
 800506e:	bf00      	nop
 8005070:	3708      	adds	r7, #8
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}

08005076 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005076:	b580      	push	{r7, lr}
 8005078:	b086      	sub	sp, #24
 800507a:	af00      	add	r7, sp, #0
 800507c:	4603      	mov	r3, r0
 800507e:	60b9      	str	r1, [r7, #8]
 8005080:	607a      	str	r2, [r7, #4]
 8005082:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005084:	2300      	movs	r3, #0
 8005086:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005088:	f7ff ff42 	bl	8004f10 <__NVIC_GetPriorityGrouping>
 800508c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	68b9      	ldr	r1, [r7, #8]
 8005092:	6978      	ldr	r0, [r7, #20]
 8005094:	f7ff ff90 	bl	8004fb8 <NVIC_EncodePriority>
 8005098:	4602      	mov	r2, r0
 800509a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800509e:	4611      	mov	r1, r2
 80050a0:	4618      	mov	r0, r3
 80050a2:	f7ff ff5f 	bl	8004f64 <__NVIC_SetPriority>
}
 80050a6:	bf00      	nop
 80050a8:	3718      	adds	r7, #24
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b082      	sub	sp, #8
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	4603      	mov	r3, r0
 80050b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80050b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050bc:	4618      	mov	r0, r3
 80050be:	f7ff ff35 	bl	8004f2c <__NVIC_EnableIRQ>
}
 80050c2:	bf00      	nop
 80050c4:	3708      	adds	r7, #8
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b082      	sub	sp, #8
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f7ff ffa2 	bl	800501c <SysTick_Config>
 80050d8:	4603      	mov	r3, r0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3708      	adds	r7, #8
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
	...

080050e4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80050ec:	2300      	movs	r3, #0
 80050ee:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d101      	bne.n	80050fa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e043      	b.n	8005182 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	461a      	mov	r2, r3
 8005100:	4b22      	ldr	r3, [pc, #136]	@ (800518c <HAL_DMA_Init+0xa8>)
 8005102:	4413      	add	r3, r2
 8005104:	4a22      	ldr	r2, [pc, #136]	@ (8005190 <HAL_DMA_Init+0xac>)
 8005106:	fba2 2303 	umull	r2, r3, r2, r3
 800510a:	091b      	lsrs	r3, r3, #4
 800510c:	009a      	lsls	r2, r3, #2
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a1f      	ldr	r2, [pc, #124]	@ (8005194 <HAL_DMA_Init+0xb0>)
 8005116:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2202      	movs	r2, #2
 800511c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800512e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8005132:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800513c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005148:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005154:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	69db      	ldr	r3, [r3, #28]
 800515a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	4313      	orrs	r3, r2
 8005160:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3714      	adds	r7, #20
 8005186:	46bd      	mov	sp, r7
 8005188:	bc80      	pop	{r7}
 800518a:	4770      	bx	lr
 800518c:	bffdfff8 	.word	0xbffdfff8
 8005190:	cccccccd 	.word	0xcccccccd
 8005194:	40020000 	.word	0x40020000

08005198 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b086      	sub	sp, #24
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
 80051a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051a6:	2300      	movs	r3, #0
 80051a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d101      	bne.n	80051b8 <HAL_DMA_Start_IT+0x20>
 80051b4:	2302      	movs	r3, #2
 80051b6:	e04b      	b.n	8005250 <HAL_DMA_Start_IT+0xb8>
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d13a      	bne.n	8005242 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2202      	movs	r2, #2
 80051d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2200      	movs	r2, #0
 80051d8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f022 0201 	bic.w	r2, r2, #1
 80051e8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	68b9      	ldr	r1, [r7, #8]
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	f000 f9eb 	bl	80055cc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d008      	beq.n	8005210 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f042 020e 	orr.w	r2, r2, #14
 800520c:	601a      	str	r2, [r3, #0]
 800520e:	e00f      	b.n	8005230 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f022 0204 	bic.w	r2, r2, #4
 800521e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f042 020a 	orr.w	r2, r2, #10
 800522e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f042 0201 	orr.w	r2, r2, #1
 800523e:	601a      	str	r2, [r3, #0]
 8005240:	e005      	b.n	800524e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800524a:	2302      	movs	r3, #2
 800524c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800524e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005250:	4618      	mov	r0, r3
 8005252:	3718      	adds	r7, #24
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005260:	2300      	movs	r3, #0
 8005262:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800526a:	b2db      	uxtb	r3, r3
 800526c:	2b02      	cmp	r3, #2
 800526e:	d008      	beq.n	8005282 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2204      	movs	r2, #4
 8005274:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e020      	b.n	80052c4 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f022 020e 	bic.w	r2, r2, #14
 8005290:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f022 0201 	bic.w	r2, r2, #1
 80052a0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052aa:	2101      	movs	r1, #1
 80052ac:	fa01 f202 	lsl.w	r2, r1, r2
 80052b0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2201      	movs	r2, #1
 80052b6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80052c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3714      	adds	r7, #20
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bc80      	pop	{r7}
 80052cc:	4770      	bx	lr
	...

080052d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052d8:	2300      	movs	r3, #0
 80052da:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d005      	beq.n	80052f4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2204      	movs	r2, #4
 80052ec:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	73fb      	strb	r3, [r7, #15]
 80052f2:	e051      	b.n	8005398 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f022 020e 	bic.w	r2, r2, #14
 8005302:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f022 0201 	bic.w	r2, r2, #1
 8005312:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a22      	ldr	r2, [pc, #136]	@ (80053a4 <HAL_DMA_Abort_IT+0xd4>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d029      	beq.n	8005372 <HAL_DMA_Abort_IT+0xa2>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a21      	ldr	r2, [pc, #132]	@ (80053a8 <HAL_DMA_Abort_IT+0xd8>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d022      	beq.n	800536e <HAL_DMA_Abort_IT+0x9e>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a1f      	ldr	r2, [pc, #124]	@ (80053ac <HAL_DMA_Abort_IT+0xdc>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d01a      	beq.n	8005368 <HAL_DMA_Abort_IT+0x98>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a1e      	ldr	r2, [pc, #120]	@ (80053b0 <HAL_DMA_Abort_IT+0xe0>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d012      	beq.n	8005362 <HAL_DMA_Abort_IT+0x92>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a1c      	ldr	r2, [pc, #112]	@ (80053b4 <HAL_DMA_Abort_IT+0xe4>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d00a      	beq.n	800535c <HAL_DMA_Abort_IT+0x8c>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a1b      	ldr	r2, [pc, #108]	@ (80053b8 <HAL_DMA_Abort_IT+0xe8>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d102      	bne.n	8005356 <HAL_DMA_Abort_IT+0x86>
 8005350:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005354:	e00e      	b.n	8005374 <HAL_DMA_Abort_IT+0xa4>
 8005356:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800535a:	e00b      	b.n	8005374 <HAL_DMA_Abort_IT+0xa4>
 800535c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005360:	e008      	b.n	8005374 <HAL_DMA_Abort_IT+0xa4>
 8005362:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005366:	e005      	b.n	8005374 <HAL_DMA_Abort_IT+0xa4>
 8005368:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800536c:	e002      	b.n	8005374 <HAL_DMA_Abort_IT+0xa4>
 800536e:	2310      	movs	r3, #16
 8005370:	e000      	b.n	8005374 <HAL_DMA_Abort_IT+0xa4>
 8005372:	2301      	movs	r3, #1
 8005374:	4a11      	ldr	r2, [pc, #68]	@ (80053bc <HAL_DMA_Abort_IT+0xec>)
 8005376:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800538c:	2b00      	cmp	r3, #0
 800538e:	d003      	beq.n	8005398 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	4798      	blx	r3
    } 
  }
  return status;
 8005398:	7bfb      	ldrb	r3, [r7, #15]
}
 800539a:	4618      	mov	r0, r3
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	40020008 	.word	0x40020008
 80053a8:	4002001c 	.word	0x4002001c
 80053ac:	40020030 	.word	0x40020030
 80053b0:	40020044 	.word	0x40020044
 80053b4:	40020058 	.word	0x40020058
 80053b8:	4002006c 	.word	0x4002006c
 80053bc:	40020000 	.word	0x40020000

080053c0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053dc:	2204      	movs	r2, #4
 80053de:	409a      	lsls	r2, r3
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	4013      	ands	r3, r2
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d04f      	beq.n	8005488 <HAL_DMA_IRQHandler+0xc8>
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	f003 0304 	and.w	r3, r3, #4
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d04a      	beq.n	8005488 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0320 	and.w	r3, r3, #32
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d107      	bne.n	8005410 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f022 0204 	bic.w	r2, r2, #4
 800540e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a66      	ldr	r2, [pc, #408]	@ (80055b0 <HAL_DMA_IRQHandler+0x1f0>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d029      	beq.n	800546e <HAL_DMA_IRQHandler+0xae>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a65      	ldr	r2, [pc, #404]	@ (80055b4 <HAL_DMA_IRQHandler+0x1f4>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d022      	beq.n	800546a <HAL_DMA_IRQHandler+0xaa>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a63      	ldr	r2, [pc, #396]	@ (80055b8 <HAL_DMA_IRQHandler+0x1f8>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d01a      	beq.n	8005464 <HAL_DMA_IRQHandler+0xa4>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a62      	ldr	r2, [pc, #392]	@ (80055bc <HAL_DMA_IRQHandler+0x1fc>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d012      	beq.n	800545e <HAL_DMA_IRQHandler+0x9e>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a60      	ldr	r2, [pc, #384]	@ (80055c0 <HAL_DMA_IRQHandler+0x200>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d00a      	beq.n	8005458 <HAL_DMA_IRQHandler+0x98>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a5f      	ldr	r2, [pc, #380]	@ (80055c4 <HAL_DMA_IRQHandler+0x204>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d102      	bne.n	8005452 <HAL_DMA_IRQHandler+0x92>
 800544c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005450:	e00e      	b.n	8005470 <HAL_DMA_IRQHandler+0xb0>
 8005452:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8005456:	e00b      	b.n	8005470 <HAL_DMA_IRQHandler+0xb0>
 8005458:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800545c:	e008      	b.n	8005470 <HAL_DMA_IRQHandler+0xb0>
 800545e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005462:	e005      	b.n	8005470 <HAL_DMA_IRQHandler+0xb0>
 8005464:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005468:	e002      	b.n	8005470 <HAL_DMA_IRQHandler+0xb0>
 800546a:	2340      	movs	r3, #64	@ 0x40
 800546c:	e000      	b.n	8005470 <HAL_DMA_IRQHandler+0xb0>
 800546e:	2304      	movs	r3, #4
 8005470:	4a55      	ldr	r2, [pc, #340]	@ (80055c8 <HAL_DMA_IRQHandler+0x208>)
 8005472:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005478:	2b00      	cmp	r3, #0
 800547a:	f000 8094 	beq.w	80055a6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8005486:	e08e      	b.n	80055a6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800548c:	2202      	movs	r2, #2
 800548e:	409a      	lsls	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	4013      	ands	r3, r2
 8005494:	2b00      	cmp	r3, #0
 8005496:	d056      	beq.n	8005546 <HAL_DMA_IRQHandler+0x186>
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	f003 0302 	and.w	r3, r3, #2
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d051      	beq.n	8005546 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0320 	and.w	r3, r3, #32
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d10b      	bne.n	80054c8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f022 020a 	bic.w	r2, r2, #10
 80054be:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a38      	ldr	r2, [pc, #224]	@ (80055b0 <HAL_DMA_IRQHandler+0x1f0>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d029      	beq.n	8005526 <HAL_DMA_IRQHandler+0x166>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a37      	ldr	r2, [pc, #220]	@ (80055b4 <HAL_DMA_IRQHandler+0x1f4>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d022      	beq.n	8005522 <HAL_DMA_IRQHandler+0x162>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a35      	ldr	r2, [pc, #212]	@ (80055b8 <HAL_DMA_IRQHandler+0x1f8>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d01a      	beq.n	800551c <HAL_DMA_IRQHandler+0x15c>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a34      	ldr	r2, [pc, #208]	@ (80055bc <HAL_DMA_IRQHandler+0x1fc>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d012      	beq.n	8005516 <HAL_DMA_IRQHandler+0x156>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a32      	ldr	r2, [pc, #200]	@ (80055c0 <HAL_DMA_IRQHandler+0x200>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d00a      	beq.n	8005510 <HAL_DMA_IRQHandler+0x150>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a31      	ldr	r2, [pc, #196]	@ (80055c4 <HAL_DMA_IRQHandler+0x204>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d102      	bne.n	800550a <HAL_DMA_IRQHandler+0x14a>
 8005504:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005508:	e00e      	b.n	8005528 <HAL_DMA_IRQHandler+0x168>
 800550a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800550e:	e00b      	b.n	8005528 <HAL_DMA_IRQHandler+0x168>
 8005510:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005514:	e008      	b.n	8005528 <HAL_DMA_IRQHandler+0x168>
 8005516:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800551a:	e005      	b.n	8005528 <HAL_DMA_IRQHandler+0x168>
 800551c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005520:	e002      	b.n	8005528 <HAL_DMA_IRQHandler+0x168>
 8005522:	2320      	movs	r3, #32
 8005524:	e000      	b.n	8005528 <HAL_DMA_IRQHandler+0x168>
 8005526:	2302      	movs	r3, #2
 8005528:	4a27      	ldr	r2, [pc, #156]	@ (80055c8 <HAL_DMA_IRQHandler+0x208>)
 800552a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005538:	2b00      	cmp	r3, #0
 800553a:	d034      	beq.n	80055a6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005544:	e02f      	b.n	80055a6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800554a:	2208      	movs	r2, #8
 800554c:	409a      	lsls	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	4013      	ands	r3, r2
 8005552:	2b00      	cmp	r3, #0
 8005554:	d028      	beq.n	80055a8 <HAL_DMA_IRQHandler+0x1e8>
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	f003 0308 	and.w	r3, r3, #8
 800555c:	2b00      	cmp	r3, #0
 800555e:	d023      	beq.n	80055a8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f022 020e 	bic.w	r2, r2, #14
 800556e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005578:	2101      	movs	r1, #1
 800557a:	fa01 f202 	lsl.w	r2, r1, r2
 800557e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800559a:	2b00      	cmp	r3, #0
 800559c:	d004      	beq.n	80055a8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	4798      	blx	r3
    }
  }
  return;
 80055a6:	bf00      	nop
 80055a8:	bf00      	nop
}
 80055aa:	3710      	adds	r7, #16
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	40020008 	.word	0x40020008
 80055b4:	4002001c 	.word	0x4002001c
 80055b8:	40020030 	.word	0x40020030
 80055bc:	40020044 	.word	0x40020044
 80055c0:	40020058 	.word	0x40020058
 80055c4:	4002006c 	.word	0x4002006c
 80055c8:	40020000 	.word	0x40020000

080055cc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	607a      	str	r2, [r7, #4]
 80055d8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055e2:	2101      	movs	r1, #1
 80055e4:	fa01 f202 	lsl.w	r2, r1, r2
 80055e8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	683a      	ldr	r2, [r7, #0]
 80055f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	2b10      	cmp	r3, #16
 80055f8:	d108      	bne.n	800560c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68ba      	ldr	r2, [r7, #8]
 8005608:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800560a:	e007      	b.n	800561c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68ba      	ldr	r2, [r7, #8]
 8005612:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	60da      	str	r2, [r3, #12]
}
 800561c:	bf00      	nop
 800561e:	3714      	adds	r7, #20
 8005620:	46bd      	mov	sp, r7
 8005622:	bc80      	pop	{r7}
 8005624:	4770      	bx	lr
	...

08005628 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005628:	b480      	push	{r7}
 800562a:	b08b      	sub	sp, #44	@ 0x2c
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005632:	2300      	movs	r3, #0
 8005634:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005636:	2300      	movs	r3, #0
 8005638:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800563a:	e169      	b.n	8005910 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800563c:	2201      	movs	r2, #1
 800563e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005640:	fa02 f303 	lsl.w	r3, r2, r3
 8005644:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	69fa      	ldr	r2, [r7, #28]
 800564c:	4013      	ands	r3, r2
 800564e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005650:	69ba      	ldr	r2, [r7, #24]
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	429a      	cmp	r2, r3
 8005656:	f040 8158 	bne.w	800590a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	4a9a      	ldr	r2, [pc, #616]	@ (80058c8 <HAL_GPIO_Init+0x2a0>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d05e      	beq.n	8005722 <HAL_GPIO_Init+0xfa>
 8005664:	4a98      	ldr	r2, [pc, #608]	@ (80058c8 <HAL_GPIO_Init+0x2a0>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d875      	bhi.n	8005756 <HAL_GPIO_Init+0x12e>
 800566a:	4a98      	ldr	r2, [pc, #608]	@ (80058cc <HAL_GPIO_Init+0x2a4>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d058      	beq.n	8005722 <HAL_GPIO_Init+0xfa>
 8005670:	4a96      	ldr	r2, [pc, #600]	@ (80058cc <HAL_GPIO_Init+0x2a4>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d86f      	bhi.n	8005756 <HAL_GPIO_Init+0x12e>
 8005676:	4a96      	ldr	r2, [pc, #600]	@ (80058d0 <HAL_GPIO_Init+0x2a8>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d052      	beq.n	8005722 <HAL_GPIO_Init+0xfa>
 800567c:	4a94      	ldr	r2, [pc, #592]	@ (80058d0 <HAL_GPIO_Init+0x2a8>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d869      	bhi.n	8005756 <HAL_GPIO_Init+0x12e>
 8005682:	4a94      	ldr	r2, [pc, #592]	@ (80058d4 <HAL_GPIO_Init+0x2ac>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d04c      	beq.n	8005722 <HAL_GPIO_Init+0xfa>
 8005688:	4a92      	ldr	r2, [pc, #584]	@ (80058d4 <HAL_GPIO_Init+0x2ac>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d863      	bhi.n	8005756 <HAL_GPIO_Init+0x12e>
 800568e:	4a92      	ldr	r2, [pc, #584]	@ (80058d8 <HAL_GPIO_Init+0x2b0>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d046      	beq.n	8005722 <HAL_GPIO_Init+0xfa>
 8005694:	4a90      	ldr	r2, [pc, #576]	@ (80058d8 <HAL_GPIO_Init+0x2b0>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d85d      	bhi.n	8005756 <HAL_GPIO_Init+0x12e>
 800569a:	2b12      	cmp	r3, #18
 800569c:	d82a      	bhi.n	80056f4 <HAL_GPIO_Init+0xcc>
 800569e:	2b12      	cmp	r3, #18
 80056a0:	d859      	bhi.n	8005756 <HAL_GPIO_Init+0x12e>
 80056a2:	a201      	add	r2, pc, #4	@ (adr r2, 80056a8 <HAL_GPIO_Init+0x80>)
 80056a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a8:	08005723 	.word	0x08005723
 80056ac:	080056fd 	.word	0x080056fd
 80056b0:	0800570f 	.word	0x0800570f
 80056b4:	08005751 	.word	0x08005751
 80056b8:	08005757 	.word	0x08005757
 80056bc:	08005757 	.word	0x08005757
 80056c0:	08005757 	.word	0x08005757
 80056c4:	08005757 	.word	0x08005757
 80056c8:	08005757 	.word	0x08005757
 80056cc:	08005757 	.word	0x08005757
 80056d0:	08005757 	.word	0x08005757
 80056d4:	08005757 	.word	0x08005757
 80056d8:	08005757 	.word	0x08005757
 80056dc:	08005757 	.word	0x08005757
 80056e0:	08005757 	.word	0x08005757
 80056e4:	08005757 	.word	0x08005757
 80056e8:	08005757 	.word	0x08005757
 80056ec:	08005705 	.word	0x08005705
 80056f0:	08005719 	.word	0x08005719
 80056f4:	4a79      	ldr	r2, [pc, #484]	@ (80058dc <HAL_GPIO_Init+0x2b4>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d013      	beq.n	8005722 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80056fa:	e02c      	b.n	8005756 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	623b      	str	r3, [r7, #32]
          break;
 8005702:	e029      	b.n	8005758 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	3304      	adds	r3, #4
 800570a:	623b      	str	r3, [r7, #32]
          break;
 800570c:	e024      	b.n	8005758 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	3308      	adds	r3, #8
 8005714:	623b      	str	r3, [r7, #32]
          break;
 8005716:	e01f      	b.n	8005758 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	330c      	adds	r3, #12
 800571e:	623b      	str	r3, [r7, #32]
          break;
 8005720:	e01a      	b.n	8005758 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d102      	bne.n	8005730 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800572a:	2304      	movs	r3, #4
 800572c:	623b      	str	r3, [r7, #32]
          break;
 800572e:	e013      	b.n	8005758 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d105      	bne.n	8005744 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005738:	2308      	movs	r3, #8
 800573a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	69fa      	ldr	r2, [r7, #28]
 8005740:	611a      	str	r2, [r3, #16]
          break;
 8005742:	e009      	b.n	8005758 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005744:	2308      	movs	r3, #8
 8005746:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	69fa      	ldr	r2, [r7, #28]
 800574c:	615a      	str	r2, [r3, #20]
          break;
 800574e:	e003      	b.n	8005758 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005750:	2300      	movs	r3, #0
 8005752:	623b      	str	r3, [r7, #32]
          break;
 8005754:	e000      	b.n	8005758 <HAL_GPIO_Init+0x130>
          break;
 8005756:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	2bff      	cmp	r3, #255	@ 0xff
 800575c:	d801      	bhi.n	8005762 <HAL_GPIO_Init+0x13a>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	e001      	b.n	8005766 <HAL_GPIO_Init+0x13e>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	3304      	adds	r3, #4
 8005766:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	2bff      	cmp	r3, #255	@ 0xff
 800576c:	d802      	bhi.n	8005774 <HAL_GPIO_Init+0x14c>
 800576e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	e002      	b.n	800577a <HAL_GPIO_Init+0x152>
 8005774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005776:	3b08      	subs	r3, #8
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	210f      	movs	r1, #15
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	fa01 f303 	lsl.w	r3, r1, r3
 8005788:	43db      	mvns	r3, r3
 800578a:	401a      	ands	r2, r3
 800578c:	6a39      	ldr	r1, [r7, #32]
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	fa01 f303 	lsl.w	r3, r1, r3
 8005794:	431a      	orrs	r2, r3
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	f000 80b1 	beq.w	800590a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80057a8:	4b4d      	ldr	r3, [pc, #308]	@ (80058e0 <HAL_GPIO_Init+0x2b8>)
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	4a4c      	ldr	r2, [pc, #304]	@ (80058e0 <HAL_GPIO_Init+0x2b8>)
 80057ae:	f043 0301 	orr.w	r3, r3, #1
 80057b2:	6193      	str	r3, [r2, #24]
 80057b4:	4b4a      	ldr	r3, [pc, #296]	@ (80058e0 <HAL_GPIO_Init+0x2b8>)
 80057b6:	699b      	ldr	r3, [r3, #24]
 80057b8:	f003 0301 	and.w	r3, r3, #1
 80057bc:	60bb      	str	r3, [r7, #8]
 80057be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80057c0:	4a48      	ldr	r2, [pc, #288]	@ (80058e4 <HAL_GPIO_Init+0x2bc>)
 80057c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c4:	089b      	lsrs	r3, r3, #2
 80057c6:	3302      	adds	r3, #2
 80057c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80057ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d0:	f003 0303 	and.w	r3, r3, #3
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	220f      	movs	r2, #15
 80057d8:	fa02 f303 	lsl.w	r3, r2, r3
 80057dc:	43db      	mvns	r3, r3
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	4013      	ands	r3, r2
 80057e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a40      	ldr	r2, [pc, #256]	@ (80058e8 <HAL_GPIO_Init+0x2c0>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d013      	beq.n	8005814 <HAL_GPIO_Init+0x1ec>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a3f      	ldr	r2, [pc, #252]	@ (80058ec <HAL_GPIO_Init+0x2c4>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d00d      	beq.n	8005810 <HAL_GPIO_Init+0x1e8>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a3e      	ldr	r2, [pc, #248]	@ (80058f0 <HAL_GPIO_Init+0x2c8>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d007      	beq.n	800580c <HAL_GPIO_Init+0x1e4>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a3d      	ldr	r2, [pc, #244]	@ (80058f4 <HAL_GPIO_Init+0x2cc>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d101      	bne.n	8005808 <HAL_GPIO_Init+0x1e0>
 8005804:	2303      	movs	r3, #3
 8005806:	e006      	b.n	8005816 <HAL_GPIO_Init+0x1ee>
 8005808:	2304      	movs	r3, #4
 800580a:	e004      	b.n	8005816 <HAL_GPIO_Init+0x1ee>
 800580c:	2302      	movs	r3, #2
 800580e:	e002      	b.n	8005816 <HAL_GPIO_Init+0x1ee>
 8005810:	2301      	movs	r3, #1
 8005812:	e000      	b.n	8005816 <HAL_GPIO_Init+0x1ee>
 8005814:	2300      	movs	r3, #0
 8005816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005818:	f002 0203 	and.w	r2, r2, #3
 800581c:	0092      	lsls	r2, r2, #2
 800581e:	4093      	lsls	r3, r2
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	4313      	orrs	r3, r2
 8005824:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005826:	492f      	ldr	r1, [pc, #188]	@ (80058e4 <HAL_GPIO_Init+0x2bc>)
 8005828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800582a:	089b      	lsrs	r3, r3, #2
 800582c:	3302      	adds	r3, #2
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d006      	beq.n	800584e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005840:	4b2d      	ldr	r3, [pc, #180]	@ (80058f8 <HAL_GPIO_Init+0x2d0>)
 8005842:	689a      	ldr	r2, [r3, #8]
 8005844:	492c      	ldr	r1, [pc, #176]	@ (80058f8 <HAL_GPIO_Init+0x2d0>)
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	4313      	orrs	r3, r2
 800584a:	608b      	str	r3, [r1, #8]
 800584c:	e006      	b.n	800585c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800584e:	4b2a      	ldr	r3, [pc, #168]	@ (80058f8 <HAL_GPIO_Init+0x2d0>)
 8005850:	689a      	ldr	r2, [r3, #8]
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	43db      	mvns	r3, r3
 8005856:	4928      	ldr	r1, [pc, #160]	@ (80058f8 <HAL_GPIO_Init+0x2d0>)
 8005858:	4013      	ands	r3, r2
 800585a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d006      	beq.n	8005876 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005868:	4b23      	ldr	r3, [pc, #140]	@ (80058f8 <HAL_GPIO_Init+0x2d0>)
 800586a:	68da      	ldr	r2, [r3, #12]
 800586c:	4922      	ldr	r1, [pc, #136]	@ (80058f8 <HAL_GPIO_Init+0x2d0>)
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	4313      	orrs	r3, r2
 8005872:	60cb      	str	r3, [r1, #12]
 8005874:	e006      	b.n	8005884 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005876:	4b20      	ldr	r3, [pc, #128]	@ (80058f8 <HAL_GPIO_Init+0x2d0>)
 8005878:	68da      	ldr	r2, [r3, #12]
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	43db      	mvns	r3, r3
 800587e:	491e      	ldr	r1, [pc, #120]	@ (80058f8 <HAL_GPIO_Init+0x2d0>)
 8005880:	4013      	ands	r3, r2
 8005882:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d006      	beq.n	800589e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005890:	4b19      	ldr	r3, [pc, #100]	@ (80058f8 <HAL_GPIO_Init+0x2d0>)
 8005892:	685a      	ldr	r2, [r3, #4]
 8005894:	4918      	ldr	r1, [pc, #96]	@ (80058f8 <HAL_GPIO_Init+0x2d0>)
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	4313      	orrs	r3, r2
 800589a:	604b      	str	r3, [r1, #4]
 800589c:	e006      	b.n	80058ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800589e:	4b16      	ldr	r3, [pc, #88]	@ (80058f8 <HAL_GPIO_Init+0x2d0>)
 80058a0:	685a      	ldr	r2, [r3, #4]
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	43db      	mvns	r3, r3
 80058a6:	4914      	ldr	r1, [pc, #80]	@ (80058f8 <HAL_GPIO_Init+0x2d0>)
 80058a8:	4013      	ands	r3, r2
 80058aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d021      	beq.n	80058fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80058b8:	4b0f      	ldr	r3, [pc, #60]	@ (80058f8 <HAL_GPIO_Init+0x2d0>)
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	490e      	ldr	r1, [pc, #56]	@ (80058f8 <HAL_GPIO_Init+0x2d0>)
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	600b      	str	r3, [r1, #0]
 80058c4:	e021      	b.n	800590a <HAL_GPIO_Init+0x2e2>
 80058c6:	bf00      	nop
 80058c8:	10320000 	.word	0x10320000
 80058cc:	10310000 	.word	0x10310000
 80058d0:	10220000 	.word	0x10220000
 80058d4:	10210000 	.word	0x10210000
 80058d8:	10120000 	.word	0x10120000
 80058dc:	10110000 	.word	0x10110000
 80058e0:	40021000 	.word	0x40021000
 80058e4:	40010000 	.word	0x40010000
 80058e8:	40010800 	.word	0x40010800
 80058ec:	40010c00 	.word	0x40010c00
 80058f0:	40011000 	.word	0x40011000
 80058f4:	40011400 	.word	0x40011400
 80058f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80058fc:	4b0b      	ldr	r3, [pc, #44]	@ (800592c <HAL_GPIO_Init+0x304>)
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	43db      	mvns	r3, r3
 8005904:	4909      	ldr	r1, [pc, #36]	@ (800592c <HAL_GPIO_Init+0x304>)
 8005906:	4013      	ands	r3, r2
 8005908:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800590a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800590c:	3301      	adds	r3, #1
 800590e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005916:	fa22 f303 	lsr.w	r3, r2, r3
 800591a:	2b00      	cmp	r3, #0
 800591c:	f47f ae8e 	bne.w	800563c <HAL_GPIO_Init+0x14>
  }
}
 8005920:	bf00      	nop
 8005922:	bf00      	nop
 8005924:	372c      	adds	r7, #44	@ 0x2c
 8005926:	46bd      	mov	sp, r7
 8005928:	bc80      	pop	{r7}
 800592a:	4770      	bx	lr
 800592c:	40010400 	.word	0x40010400

08005930 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	460b      	mov	r3, r1
 800593a:	807b      	strh	r3, [r7, #2]
 800593c:	4613      	mov	r3, r2
 800593e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005940:	787b      	ldrb	r3, [r7, #1]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d003      	beq.n	800594e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005946:	887a      	ldrh	r2, [r7, #2]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800594c:	e003      	b.n	8005956 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800594e:	887b      	ldrh	r3, [r7, #2]
 8005950:	041a      	lsls	r2, r3, #16
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	611a      	str	r2, [r3, #16]
}
 8005956:	bf00      	nop
 8005958:	370c      	adds	r7, #12
 800595a:	46bd      	mov	sp, r7
 800595c:	bc80      	pop	{r7}
 800595e:	4770      	bx	lr

08005960 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	460b      	mov	r3, r1
 800596a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005972:	887a      	ldrh	r2, [r7, #2]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	4013      	ands	r3, r2
 8005978:	041a      	lsls	r2, r3, #16
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	43d9      	mvns	r1, r3
 800597e:	887b      	ldrh	r3, [r7, #2]
 8005980:	400b      	ands	r3, r1
 8005982:	431a      	orrs	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	611a      	str	r2, [r3, #16]
}
 8005988:	bf00      	nop
 800598a:	3714      	adds	r7, #20
 800598c:	46bd      	mov	sp, r7
 800598e:	bc80      	pop	{r7}
 8005990:	4770      	bx	lr
	...

08005994 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d101      	bne.n	80059a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e12b      	b.n	8005bfe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d106      	bne.n	80059c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f7fb fc2e 	bl	800121c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2224      	movs	r2, #36	@ 0x24
 80059c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f022 0201 	bic.w	r2, r2, #1
 80059d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80059e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80059f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80059f8:	f001 fbca 	bl	8007190 <HAL_RCC_GetPCLK1Freq>
 80059fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	4a81      	ldr	r2, [pc, #516]	@ (8005c08 <HAL_I2C_Init+0x274>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d807      	bhi.n	8005a18 <HAL_I2C_Init+0x84>
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	4a80      	ldr	r2, [pc, #512]	@ (8005c0c <HAL_I2C_Init+0x278>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	bf94      	ite	ls
 8005a10:	2301      	movls	r3, #1
 8005a12:	2300      	movhi	r3, #0
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	e006      	b.n	8005a26 <HAL_I2C_Init+0x92>
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	4a7d      	ldr	r2, [pc, #500]	@ (8005c10 <HAL_I2C_Init+0x27c>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	bf94      	ite	ls
 8005a20:	2301      	movls	r3, #1
 8005a22:	2300      	movhi	r3, #0
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d001      	beq.n	8005a2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e0e7      	b.n	8005bfe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	4a78      	ldr	r2, [pc, #480]	@ (8005c14 <HAL_I2C_Init+0x280>)
 8005a32:	fba2 2303 	umull	r2, r3, r2, r3
 8005a36:	0c9b      	lsrs	r3, r3, #18
 8005a38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68ba      	ldr	r2, [r7, #8]
 8005a4a:	430a      	orrs	r2, r1
 8005a4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	6a1b      	ldr	r3, [r3, #32]
 8005a54:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	4a6a      	ldr	r2, [pc, #424]	@ (8005c08 <HAL_I2C_Init+0x274>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d802      	bhi.n	8005a68 <HAL_I2C_Init+0xd4>
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	3301      	adds	r3, #1
 8005a66:	e009      	b.n	8005a7c <HAL_I2C_Init+0xe8>
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005a6e:	fb02 f303 	mul.w	r3, r2, r3
 8005a72:	4a69      	ldr	r2, [pc, #420]	@ (8005c18 <HAL_I2C_Init+0x284>)
 8005a74:	fba2 2303 	umull	r2, r3, r2, r3
 8005a78:	099b      	lsrs	r3, r3, #6
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	6812      	ldr	r2, [r2, #0]
 8005a80:	430b      	orrs	r3, r1
 8005a82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	69db      	ldr	r3, [r3, #28]
 8005a8a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005a8e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	495c      	ldr	r1, [pc, #368]	@ (8005c08 <HAL_I2C_Init+0x274>)
 8005a98:	428b      	cmp	r3, r1
 8005a9a:	d819      	bhi.n	8005ad0 <HAL_I2C_Init+0x13c>
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	1e59      	subs	r1, r3, #1
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	005b      	lsls	r3, r3, #1
 8005aa6:	fbb1 f3f3 	udiv	r3, r1, r3
 8005aaa:	1c59      	adds	r1, r3, #1
 8005aac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005ab0:	400b      	ands	r3, r1
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00a      	beq.n	8005acc <HAL_I2C_Init+0x138>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	1e59      	subs	r1, r3, #1
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	005b      	lsls	r3, r3, #1
 8005ac0:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005aca:	e051      	b.n	8005b70 <HAL_I2C_Init+0x1dc>
 8005acc:	2304      	movs	r3, #4
 8005ace:	e04f      	b.n	8005b70 <HAL_I2C_Init+0x1dc>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d111      	bne.n	8005afc <HAL_I2C_Init+0x168>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	1e58      	subs	r0, r3, #1
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6859      	ldr	r1, [r3, #4]
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	005b      	lsls	r3, r3, #1
 8005ae4:	440b      	add	r3, r1
 8005ae6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005aea:	3301      	adds	r3, #1
 8005aec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	bf0c      	ite	eq
 8005af4:	2301      	moveq	r3, #1
 8005af6:	2300      	movne	r3, #0
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	e012      	b.n	8005b22 <HAL_I2C_Init+0x18e>
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	1e58      	subs	r0, r3, #1
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6859      	ldr	r1, [r3, #4]
 8005b04:	460b      	mov	r3, r1
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	440b      	add	r3, r1
 8005b0a:	0099      	lsls	r1, r3, #2
 8005b0c:	440b      	add	r3, r1
 8005b0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b12:	3301      	adds	r3, #1
 8005b14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	bf0c      	ite	eq
 8005b1c:	2301      	moveq	r3, #1
 8005b1e:	2300      	movne	r3, #0
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d001      	beq.n	8005b2a <HAL_I2C_Init+0x196>
 8005b26:	2301      	movs	r3, #1
 8005b28:	e022      	b.n	8005b70 <HAL_I2C_Init+0x1dc>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d10e      	bne.n	8005b50 <HAL_I2C_Init+0x1bc>
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	1e58      	subs	r0, r3, #1
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6859      	ldr	r1, [r3, #4]
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	005b      	lsls	r3, r3, #1
 8005b3e:	440b      	add	r3, r1
 8005b40:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b44:	3301      	adds	r3, #1
 8005b46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b4e:	e00f      	b.n	8005b70 <HAL_I2C_Init+0x1dc>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	1e58      	subs	r0, r3, #1
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6859      	ldr	r1, [r3, #4]
 8005b58:	460b      	mov	r3, r1
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	440b      	add	r3, r1
 8005b5e:	0099      	lsls	r1, r3, #2
 8005b60:	440b      	add	r3, r1
 8005b62:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b66:	3301      	adds	r3, #1
 8005b68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b6c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005b70:	6879      	ldr	r1, [r7, #4]
 8005b72:	6809      	ldr	r1, [r1, #0]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	69da      	ldr	r2, [r3, #28]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	431a      	orrs	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	430a      	orrs	r2, r1
 8005b92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005b9e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	6911      	ldr	r1, [r2, #16]
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	68d2      	ldr	r2, [r2, #12]
 8005baa:	4311      	orrs	r1, r2
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	6812      	ldr	r2, [r2, #0]
 8005bb0:	430b      	orrs	r3, r1
 8005bb2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	695a      	ldr	r2, [r3, #20]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	431a      	orrs	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	430a      	orrs	r2, r1
 8005bce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f042 0201 	orr.w	r2, r2, #1
 8005bde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2220      	movs	r2, #32
 8005bea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	000186a0 	.word	0x000186a0
 8005c0c:	001e847f 	.word	0x001e847f
 8005c10:	003d08ff 	.word	0x003d08ff
 8005c14:	431bde83 	.word	0x431bde83
 8005c18:	10624dd3 	.word	0x10624dd3

08005c1c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b088      	sub	sp, #32
 8005c20:	af02      	add	r7, sp, #8
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	607a      	str	r2, [r7, #4]
 8005c26:	461a      	mov	r2, r3
 8005c28:	460b      	mov	r3, r1
 8005c2a:	817b      	strh	r3, [r7, #10]
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005c30:	f7fe fc60 	bl	80044f4 <HAL_GetTick>
 8005c34:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	2b20      	cmp	r3, #32
 8005c40:	f040 80e0 	bne.w	8005e04 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	9300      	str	r3, [sp, #0]
 8005c48:	2319      	movs	r3, #25
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	4970      	ldr	r1, [pc, #448]	@ (8005e10 <HAL_I2C_Master_Transmit+0x1f4>)
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f000 fc9e 	bl	8006590 <I2C_WaitOnFlagUntilTimeout>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d001      	beq.n	8005c5e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005c5a:	2302      	movs	r3, #2
 8005c5c:	e0d3      	b.n	8005e06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d101      	bne.n	8005c6c <HAL_I2C_Master_Transmit+0x50>
 8005c68:	2302      	movs	r3, #2
 8005c6a:	e0cc      	b.n	8005e06 <HAL_I2C_Master_Transmit+0x1ea>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0301 	and.w	r3, r3, #1
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d007      	beq.n	8005c92 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f042 0201 	orr.w	r2, r2, #1
 8005c90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ca0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2221      	movs	r2, #33	@ 0x21
 8005ca6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2210      	movs	r2, #16
 8005cae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	893a      	ldrh	r2, [r7, #8]
 8005cc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	4a50      	ldr	r2, [pc, #320]	@ (8005e14 <HAL_I2C_Master_Transmit+0x1f8>)
 8005cd2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005cd4:	8979      	ldrh	r1, [r7, #10]
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	6a3a      	ldr	r2, [r7, #32]
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	f000 fb08 	bl	80062f0 <I2C_MasterRequestWrite>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d001      	beq.n	8005cea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e08d      	b.n	8005e06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cea:	2300      	movs	r3, #0
 8005cec:	613b      	str	r3, [r7, #16]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	695b      	ldr	r3, [r3, #20]
 8005cf4:	613b      	str	r3, [r7, #16]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	613b      	str	r3, [r7, #16]
 8005cfe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005d00:	e066      	b.n	8005dd0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	6a39      	ldr	r1, [r7, #32]
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	f000 fd5c 	bl	80067c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00d      	beq.n	8005d2e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d16:	2b04      	cmp	r3, #4
 8005d18:	d107      	bne.n	8005d2a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e06b      	b.n	8005e06 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d32:	781a      	ldrb	r2, [r3, #0]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d3e:	1c5a      	adds	r2, r3, #1
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d56:	3b01      	subs	r3, #1
 8005d58:	b29a      	uxth	r2, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	695b      	ldr	r3, [r3, #20]
 8005d64:	f003 0304 	and.w	r3, r3, #4
 8005d68:	2b04      	cmp	r3, #4
 8005d6a:	d11b      	bne.n	8005da4 <HAL_I2C_Master_Transmit+0x188>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d017      	beq.n	8005da4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d78:	781a      	ldrb	r2, [r3, #0]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d84:	1c5a      	adds	r2, r3, #1
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	3b01      	subs	r3, #1
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	b29a      	uxth	r2, r3
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	6a39      	ldr	r1, [r7, #32]
 8005da8:	68f8      	ldr	r0, [r7, #12]
 8005daa:	f000 fd53 	bl	8006854 <I2C_WaitOnBTFFlagUntilTimeout>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d00d      	beq.n	8005dd0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005db8:	2b04      	cmp	r3, #4
 8005dba:	d107      	bne.n	8005dcc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005dca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e01a      	b.n	8005e06 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d194      	bne.n	8005d02 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005de6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2220      	movs	r2, #32
 8005dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005e00:	2300      	movs	r3, #0
 8005e02:	e000      	b.n	8005e06 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005e04:	2302      	movs	r3, #2
  }
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3718      	adds	r7, #24
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	00100002 	.word	0x00100002
 8005e14:	ffff0000 	.word	0xffff0000

08005e18 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b08c      	sub	sp, #48	@ 0x30
 8005e1c:	af02      	add	r7, sp, #8
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	607a      	str	r2, [r7, #4]
 8005e22:	461a      	mov	r2, r3
 8005e24:	460b      	mov	r3, r1
 8005e26:	817b      	strh	r3, [r7, #10]
 8005e28:	4613      	mov	r3, r2
 8005e2a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005e30:	f7fe fb60 	bl	80044f4 <HAL_GetTick>
 8005e34:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b20      	cmp	r3, #32
 8005e40:	f040 824b 	bne.w	80062da <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e46:	9300      	str	r3, [sp, #0]
 8005e48:	2319      	movs	r3, #25
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	497f      	ldr	r1, [pc, #508]	@ (800604c <HAL_I2C_Master_Receive+0x234>)
 8005e4e:	68f8      	ldr	r0, [r7, #12]
 8005e50:	f000 fb9e 	bl	8006590 <I2C_WaitOnFlagUntilTimeout>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d001      	beq.n	8005e5e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8005e5a:	2302      	movs	r3, #2
 8005e5c:	e23e      	b.n	80062dc <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d101      	bne.n	8005e6c <HAL_I2C_Master_Receive+0x54>
 8005e68:	2302      	movs	r3, #2
 8005e6a:	e237      	b.n	80062dc <HAL_I2C_Master_Receive+0x4c4>
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0301 	and.w	r3, r3, #1
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d007      	beq.n	8005e92 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f042 0201 	orr.w	r2, r2, #1
 8005e90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ea0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2222      	movs	r2, #34	@ 0x22
 8005ea6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2210      	movs	r2, #16
 8005eae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	893a      	ldrh	r2, [r7, #8]
 8005ec2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ec8:	b29a      	uxth	r2, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	4a5f      	ldr	r2, [pc, #380]	@ (8006050 <HAL_I2C_Master_Receive+0x238>)
 8005ed2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005ed4:	8979      	ldrh	r1, [r7, #10]
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005eda:	68f8      	ldr	r0, [r7, #12]
 8005edc:	f000 fa8a 	bl	80063f4 <I2C_MasterRequestRead>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d001      	beq.n	8005eea <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e1f8      	b.n	80062dc <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d113      	bne.n	8005f1a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	61fb      	str	r3, [r7, #28]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	695b      	ldr	r3, [r3, #20]
 8005efc:	61fb      	str	r3, [r7, #28]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	699b      	ldr	r3, [r3, #24]
 8005f04:	61fb      	str	r3, [r7, #28]
 8005f06:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f16:	601a      	str	r2, [r3, #0]
 8005f18:	e1cc      	b.n	80062b4 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d11e      	bne.n	8005f60 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f30:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005f32:	b672      	cpsid	i
}
 8005f34:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f36:	2300      	movs	r3, #0
 8005f38:	61bb      	str	r3, [r7, #24]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	695b      	ldr	r3, [r3, #20]
 8005f40:	61bb      	str	r3, [r7, #24]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	699b      	ldr	r3, [r3, #24]
 8005f48:	61bb      	str	r3, [r7, #24]
 8005f4a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f5a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005f5c:	b662      	cpsie	i
}
 8005f5e:	e035      	b.n	8005fcc <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d11e      	bne.n	8005fa6 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f76:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005f78:	b672      	cpsid	i
}
 8005f7a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	617b      	str	r3, [r7, #20]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	695b      	ldr	r3, [r3, #20]
 8005f86:	617b      	str	r3, [r7, #20]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	699b      	ldr	r3, [r3, #24]
 8005f8e:	617b      	str	r3, [r7, #20]
 8005f90:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fa0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005fa2:	b662      	cpsie	i
}
 8005fa4:	e012      	b.n	8005fcc <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005fb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	613b      	str	r3, [r7, #16]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	695b      	ldr	r3, [r3, #20]
 8005fc0:	613b      	str	r3, [r7, #16]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	699b      	ldr	r3, [r3, #24]
 8005fc8:	613b      	str	r3, [r7, #16]
 8005fca:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005fcc:	e172      	b.n	80062b4 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fd2:	2b03      	cmp	r3, #3
 8005fd4:	f200 811f 	bhi.w	8006216 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d123      	bne.n	8006028 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fe0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fe2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f000 fc7d 	bl	80068e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d001      	beq.n	8005ff4 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e173      	b.n	80062dc <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	691a      	ldr	r2, [r3, #16]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ffe:	b2d2      	uxtb	r2, r2
 8006000:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006006:	1c5a      	adds	r2, r3, #1
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006010:	3b01      	subs	r3, #1
 8006012:	b29a      	uxth	r2, r3
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800601c:	b29b      	uxth	r3, r3
 800601e:	3b01      	subs	r3, #1
 8006020:	b29a      	uxth	r2, r3
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006026:	e145      	b.n	80062b4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800602c:	2b02      	cmp	r3, #2
 800602e:	d152      	bne.n	80060d6 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006032:	9300      	str	r3, [sp, #0]
 8006034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006036:	2200      	movs	r2, #0
 8006038:	4906      	ldr	r1, [pc, #24]	@ (8006054 <HAL_I2C_Master_Receive+0x23c>)
 800603a:	68f8      	ldr	r0, [r7, #12]
 800603c:	f000 faa8 	bl	8006590 <I2C_WaitOnFlagUntilTimeout>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d008      	beq.n	8006058 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e148      	b.n	80062dc <HAL_I2C_Master_Receive+0x4c4>
 800604a:	bf00      	nop
 800604c:	00100002 	.word	0x00100002
 8006050:	ffff0000 	.word	0xffff0000
 8006054:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8006058:	b672      	cpsid	i
}
 800605a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800606a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	691a      	ldr	r2, [r3, #16]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006076:	b2d2      	uxtb	r2, r2
 8006078:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800607e:	1c5a      	adds	r2, r3, #1
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006088:	3b01      	subs	r3, #1
 800608a:	b29a      	uxth	r2, r3
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006094:	b29b      	uxth	r3, r3
 8006096:	3b01      	subs	r3, #1
 8006098:	b29a      	uxth	r2, r3
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800609e:	b662      	cpsie	i
}
 80060a0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	691a      	ldr	r2, [r3, #16]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ac:	b2d2      	uxtb	r2, r2
 80060ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060b4:	1c5a      	adds	r2, r3, #1
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060be:	3b01      	subs	r3, #1
 80060c0:	b29a      	uxth	r2, r3
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	3b01      	subs	r3, #1
 80060ce:	b29a      	uxth	r2, r3
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80060d4:	e0ee      	b.n	80062b4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80060d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d8:	9300      	str	r3, [sp, #0]
 80060da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060dc:	2200      	movs	r2, #0
 80060de:	4981      	ldr	r1, [pc, #516]	@ (80062e4 <HAL_I2C_Master_Receive+0x4cc>)
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f000 fa55 	bl	8006590 <I2C_WaitOnFlagUntilTimeout>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d001      	beq.n	80060f0 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e0f5      	b.n	80062dc <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006100:	b672      	cpsid	i
}
 8006102:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	691a      	ldr	r2, [r3, #16]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800610e:	b2d2      	uxtb	r2, r2
 8006110:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006116:	1c5a      	adds	r2, r3, #1
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006120:	3b01      	subs	r3, #1
 8006122:	b29a      	uxth	r2, r3
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800612c:	b29b      	uxth	r3, r3
 800612e:	3b01      	subs	r3, #1
 8006130:	b29a      	uxth	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006136:	4b6c      	ldr	r3, [pc, #432]	@ (80062e8 <HAL_I2C_Master_Receive+0x4d0>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	08db      	lsrs	r3, r3, #3
 800613c:	4a6b      	ldr	r2, [pc, #428]	@ (80062ec <HAL_I2C_Master_Receive+0x4d4>)
 800613e:	fba2 2303 	umull	r2, r3, r2, r3
 8006142:	0a1a      	lsrs	r2, r3, #8
 8006144:	4613      	mov	r3, r2
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	4413      	add	r3, r2
 800614a:	00da      	lsls	r2, r3, #3
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8006150:	6a3b      	ldr	r3, [r7, #32]
 8006152:	3b01      	subs	r3, #1
 8006154:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8006156:	6a3b      	ldr	r3, [r7, #32]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d118      	bne.n	800618e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2220      	movs	r2, #32
 8006166:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006176:	f043 0220 	orr.w	r2, r3, #32
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800617e:	b662      	cpsie	i
}
 8006180:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	e0a6      	b.n	80062dc <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	695b      	ldr	r3, [r3, #20]
 8006194:	f003 0304 	and.w	r3, r3, #4
 8006198:	2b04      	cmp	r3, #4
 800619a:	d1d9      	bne.n	8006150 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	691a      	ldr	r2, [r3, #16]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b6:	b2d2      	uxtb	r2, r2
 80061b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061be:	1c5a      	adds	r2, r3, #1
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061c8:	3b01      	subs	r3, #1
 80061ca:	b29a      	uxth	r2, r3
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	3b01      	subs	r3, #1
 80061d8:	b29a      	uxth	r2, r3
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80061de:	b662      	cpsie	i
}
 80061e0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	691a      	ldr	r2, [r3, #16]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ec:	b2d2      	uxtb	r2, r2
 80061ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f4:	1c5a      	adds	r2, r3, #1
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061fe:	3b01      	subs	r3, #1
 8006200:	b29a      	uxth	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800620a:	b29b      	uxth	r3, r3
 800620c:	3b01      	subs	r3, #1
 800620e:	b29a      	uxth	r2, r3
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006214:	e04e      	b.n	80062b4 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006216:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006218:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800621a:	68f8      	ldr	r0, [r7, #12]
 800621c:	f000 fb62 	bl	80068e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d001      	beq.n	800622a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e058      	b.n	80062dc <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	691a      	ldr	r2, [r3, #16]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006234:	b2d2      	uxtb	r2, r2
 8006236:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800623c:	1c5a      	adds	r2, r3, #1
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006246:	3b01      	subs	r3, #1
 8006248:	b29a      	uxth	r2, r3
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006252:	b29b      	uxth	r3, r3
 8006254:	3b01      	subs	r3, #1
 8006256:	b29a      	uxth	r2, r3
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	695b      	ldr	r3, [r3, #20]
 8006262:	f003 0304 	and.w	r3, r3, #4
 8006266:	2b04      	cmp	r3, #4
 8006268:	d124      	bne.n	80062b4 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800626e:	2b03      	cmp	r3, #3
 8006270:	d107      	bne.n	8006282 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006280:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	691a      	ldr	r2, [r3, #16]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800628c:	b2d2      	uxtb	r2, r2
 800628e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006294:	1c5a      	adds	r2, r3, #1
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800629e:	3b01      	subs	r3, #1
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	3b01      	subs	r3, #1
 80062ae:	b29a      	uxth	r2, r3
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	f47f ae88 	bne.w	8005fce <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2220      	movs	r2, #32
 80062c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80062d6:	2300      	movs	r3, #0
 80062d8:	e000      	b.n	80062dc <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80062da:	2302      	movs	r3, #2
  }
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3728      	adds	r7, #40	@ 0x28
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	00010004 	.word	0x00010004
 80062e8:	20000038 	.word	0x20000038
 80062ec:	14f8b589 	.word	0x14f8b589

080062f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b088      	sub	sp, #32
 80062f4:	af02      	add	r7, sp, #8
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	607a      	str	r2, [r7, #4]
 80062fa:	603b      	str	r3, [r7, #0]
 80062fc:	460b      	mov	r3, r1
 80062fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006304:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	2b08      	cmp	r3, #8
 800630a:	d006      	beq.n	800631a <I2C_MasterRequestWrite+0x2a>
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	2b01      	cmp	r3, #1
 8006310:	d003      	beq.n	800631a <I2C_MasterRequestWrite+0x2a>
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006318:	d108      	bne.n	800632c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006328:	601a      	str	r2, [r3, #0]
 800632a:	e00b      	b.n	8006344 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006330:	2b12      	cmp	r3, #18
 8006332:	d107      	bne.n	8006344 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006342:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	9300      	str	r3, [sp, #0]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006350:	68f8      	ldr	r0, [r7, #12]
 8006352:	f000 f91d 	bl	8006590 <I2C_WaitOnFlagUntilTimeout>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00d      	beq.n	8006378 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006366:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800636a:	d103      	bne.n	8006374 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006372:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006374:	2303      	movs	r3, #3
 8006376:	e035      	b.n	80063e4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006380:	d108      	bne.n	8006394 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006382:	897b      	ldrh	r3, [r7, #10]
 8006384:	b2db      	uxtb	r3, r3
 8006386:	461a      	mov	r2, r3
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006390:	611a      	str	r2, [r3, #16]
 8006392:	e01b      	b.n	80063cc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006394:	897b      	ldrh	r3, [r7, #10]
 8006396:	11db      	asrs	r3, r3, #7
 8006398:	b2db      	uxtb	r3, r3
 800639a:	f003 0306 	and.w	r3, r3, #6
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	f063 030f 	orn	r3, r3, #15
 80063a4:	b2da      	uxtb	r2, r3
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	490e      	ldr	r1, [pc, #56]	@ (80063ec <I2C_MasterRequestWrite+0xfc>)
 80063b2:	68f8      	ldr	r0, [r7, #12]
 80063b4:	f000 f966 	bl	8006684 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d001      	beq.n	80063c2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	e010      	b.n	80063e4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80063c2:	897b      	ldrh	r3, [r7, #10]
 80063c4:	b2da      	uxtb	r2, r3
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	4907      	ldr	r1, [pc, #28]	@ (80063f0 <I2C_MasterRequestWrite+0x100>)
 80063d2:	68f8      	ldr	r0, [r7, #12]
 80063d4:	f000 f956 	bl	8006684 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d001      	beq.n	80063e2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e000      	b.n	80063e4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3718      	adds	r7, #24
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	00010008 	.word	0x00010008
 80063f0:	00010002 	.word	0x00010002

080063f4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b088      	sub	sp, #32
 80063f8:	af02      	add	r7, sp, #8
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	607a      	str	r2, [r7, #4]
 80063fe:	603b      	str	r3, [r7, #0]
 8006400:	460b      	mov	r3, r1
 8006402:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006408:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006418:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	2b08      	cmp	r3, #8
 800641e:	d006      	beq.n	800642e <I2C_MasterRequestRead+0x3a>
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	2b01      	cmp	r3, #1
 8006424:	d003      	beq.n	800642e <I2C_MasterRequestRead+0x3a>
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800642c:	d108      	bne.n	8006440 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800643c:	601a      	str	r2, [r3, #0]
 800643e:	e00b      	b.n	8006458 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006444:	2b11      	cmp	r3, #17
 8006446:	d107      	bne.n	8006458 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006456:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	9300      	str	r3, [sp, #0]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006464:	68f8      	ldr	r0, [r7, #12]
 8006466:	f000 f893 	bl	8006590 <I2C_WaitOnFlagUntilTimeout>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00d      	beq.n	800648c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800647a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800647e:	d103      	bne.n	8006488 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006486:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006488:	2303      	movs	r3, #3
 800648a:	e079      	b.n	8006580 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006494:	d108      	bne.n	80064a8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006496:	897b      	ldrh	r3, [r7, #10]
 8006498:	b2db      	uxtb	r3, r3
 800649a:	f043 0301 	orr.w	r3, r3, #1
 800649e:	b2da      	uxtb	r2, r3
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	611a      	str	r2, [r3, #16]
 80064a6:	e05f      	b.n	8006568 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80064a8:	897b      	ldrh	r3, [r7, #10]
 80064aa:	11db      	asrs	r3, r3, #7
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	f003 0306 	and.w	r3, r3, #6
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	f063 030f 	orn	r3, r3, #15
 80064b8:	b2da      	uxtb	r2, r3
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	4930      	ldr	r1, [pc, #192]	@ (8006588 <I2C_MasterRequestRead+0x194>)
 80064c6:	68f8      	ldr	r0, [r7, #12]
 80064c8:	f000 f8dc 	bl	8006684 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d001      	beq.n	80064d6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e054      	b.n	8006580 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80064d6:	897b      	ldrh	r3, [r7, #10]
 80064d8:	b2da      	uxtb	r2, r3
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	4929      	ldr	r1, [pc, #164]	@ (800658c <I2C_MasterRequestRead+0x198>)
 80064e6:	68f8      	ldr	r0, [r7, #12]
 80064e8:	f000 f8cc 	bl	8006684 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d001      	beq.n	80064f6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e044      	b.n	8006580 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064f6:	2300      	movs	r3, #0
 80064f8:	613b      	str	r3, [r7, #16]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	695b      	ldr	r3, [r3, #20]
 8006500:	613b      	str	r3, [r7, #16]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	699b      	ldr	r3, [r3, #24]
 8006508:	613b      	str	r3, [r7, #16]
 800650a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800651a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	9300      	str	r3, [sp, #0]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006528:	68f8      	ldr	r0, [r7, #12]
 800652a:	f000 f831 	bl	8006590 <I2C_WaitOnFlagUntilTimeout>
 800652e:	4603      	mov	r3, r0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00d      	beq.n	8006550 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800653e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006542:	d103      	bne.n	800654c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800654a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800654c:	2303      	movs	r3, #3
 800654e:	e017      	b.n	8006580 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006550:	897b      	ldrh	r3, [r7, #10]
 8006552:	11db      	asrs	r3, r3, #7
 8006554:	b2db      	uxtb	r3, r3
 8006556:	f003 0306 	and.w	r3, r3, #6
 800655a:	b2db      	uxtb	r3, r3
 800655c:	f063 030e 	orn	r3, r3, #14
 8006560:	b2da      	uxtb	r2, r3
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	4907      	ldr	r1, [pc, #28]	@ (800658c <I2C_MasterRequestRead+0x198>)
 800656e:	68f8      	ldr	r0, [r7, #12]
 8006570:	f000 f888 	bl	8006684 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d001      	beq.n	800657e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	e000      	b.n	8006580 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800657e:	2300      	movs	r3, #0
}
 8006580:	4618      	mov	r0, r3
 8006582:	3718      	adds	r7, #24
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}
 8006588:	00010008 	.word	0x00010008
 800658c:	00010002 	.word	0x00010002

08006590 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	603b      	str	r3, [r7, #0]
 800659c:	4613      	mov	r3, r2
 800659e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80065a0:	e048      	b.n	8006634 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a8:	d044      	beq.n	8006634 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065aa:	f7fd ffa3 	bl	80044f4 <HAL_GetTick>
 80065ae:	4602      	mov	r2, r0
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	1ad3      	subs	r3, r2, r3
 80065b4:	683a      	ldr	r2, [r7, #0]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d302      	bcc.n	80065c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d139      	bne.n	8006634 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	0c1b      	lsrs	r3, r3, #16
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d10d      	bne.n	80065e6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	695b      	ldr	r3, [r3, #20]
 80065d0:	43da      	mvns	r2, r3
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	4013      	ands	r3, r2
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	2b00      	cmp	r3, #0
 80065da:	bf0c      	ite	eq
 80065dc:	2301      	moveq	r3, #1
 80065de:	2300      	movne	r3, #0
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	461a      	mov	r2, r3
 80065e4:	e00c      	b.n	8006600 <I2C_WaitOnFlagUntilTimeout+0x70>
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	43da      	mvns	r2, r3
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	4013      	ands	r3, r2
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	bf0c      	ite	eq
 80065f8:	2301      	moveq	r3, #1
 80065fa:	2300      	movne	r3, #0
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	461a      	mov	r2, r3
 8006600:	79fb      	ldrb	r3, [r7, #7]
 8006602:	429a      	cmp	r2, r3
 8006604:	d116      	bne.n	8006634 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2200      	movs	r2, #0
 800660a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2220      	movs	r2, #32
 8006610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2200      	movs	r2, #0
 8006618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006620:	f043 0220 	orr.w	r2, r3, #32
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e023      	b.n	800667c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	0c1b      	lsrs	r3, r3, #16
 8006638:	b2db      	uxtb	r3, r3
 800663a:	2b01      	cmp	r3, #1
 800663c:	d10d      	bne.n	800665a <I2C_WaitOnFlagUntilTimeout+0xca>
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	695b      	ldr	r3, [r3, #20]
 8006644:	43da      	mvns	r2, r3
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	4013      	ands	r3, r2
 800664a:	b29b      	uxth	r3, r3
 800664c:	2b00      	cmp	r3, #0
 800664e:	bf0c      	ite	eq
 8006650:	2301      	moveq	r3, #1
 8006652:	2300      	movne	r3, #0
 8006654:	b2db      	uxtb	r3, r3
 8006656:	461a      	mov	r2, r3
 8006658:	e00c      	b.n	8006674 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	699b      	ldr	r3, [r3, #24]
 8006660:	43da      	mvns	r2, r3
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	4013      	ands	r3, r2
 8006666:	b29b      	uxth	r3, r3
 8006668:	2b00      	cmp	r3, #0
 800666a:	bf0c      	ite	eq
 800666c:	2301      	moveq	r3, #1
 800666e:	2300      	movne	r3, #0
 8006670:	b2db      	uxtb	r3, r3
 8006672:	461a      	mov	r2, r3
 8006674:	79fb      	ldrb	r3, [r7, #7]
 8006676:	429a      	cmp	r2, r3
 8006678:	d093      	beq.n	80065a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800667a:	2300      	movs	r3, #0
}
 800667c:	4618      	mov	r0, r3
 800667e:	3710      	adds	r7, #16
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	607a      	str	r2, [r7, #4]
 8006690:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006692:	e071      	b.n	8006778 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	695b      	ldr	r3, [r3, #20]
 800669a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800669e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066a2:	d123      	bne.n	80066ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066b2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80066bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2200      	movs	r2, #0
 80066c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2220      	movs	r2, #32
 80066c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066d8:	f043 0204 	orr.w	r2, r3, #4
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e067      	b.n	80067bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066f2:	d041      	beq.n	8006778 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066f4:	f7fd fefe 	bl	80044f4 <HAL_GetTick>
 80066f8:	4602      	mov	r2, r0
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	429a      	cmp	r2, r3
 8006702:	d302      	bcc.n	800670a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d136      	bne.n	8006778 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	0c1b      	lsrs	r3, r3, #16
 800670e:	b2db      	uxtb	r3, r3
 8006710:	2b01      	cmp	r3, #1
 8006712:	d10c      	bne.n	800672e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	695b      	ldr	r3, [r3, #20]
 800671a:	43da      	mvns	r2, r3
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	4013      	ands	r3, r2
 8006720:	b29b      	uxth	r3, r3
 8006722:	2b00      	cmp	r3, #0
 8006724:	bf14      	ite	ne
 8006726:	2301      	movne	r3, #1
 8006728:	2300      	moveq	r3, #0
 800672a:	b2db      	uxtb	r3, r3
 800672c:	e00b      	b.n	8006746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	699b      	ldr	r3, [r3, #24]
 8006734:	43da      	mvns	r2, r3
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	4013      	ands	r3, r2
 800673a:	b29b      	uxth	r3, r3
 800673c:	2b00      	cmp	r3, #0
 800673e:	bf14      	ite	ne
 8006740:	2301      	movne	r3, #1
 8006742:	2300      	moveq	r3, #0
 8006744:	b2db      	uxtb	r3, r3
 8006746:	2b00      	cmp	r3, #0
 8006748:	d016      	beq.n	8006778 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2200      	movs	r2, #0
 800674e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2220      	movs	r2, #32
 8006754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006764:	f043 0220 	orr.w	r2, r3, #32
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	e021      	b.n	80067bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	0c1b      	lsrs	r3, r3, #16
 800677c:	b2db      	uxtb	r3, r3
 800677e:	2b01      	cmp	r3, #1
 8006780:	d10c      	bne.n	800679c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	695b      	ldr	r3, [r3, #20]
 8006788:	43da      	mvns	r2, r3
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	4013      	ands	r3, r2
 800678e:	b29b      	uxth	r3, r3
 8006790:	2b00      	cmp	r3, #0
 8006792:	bf14      	ite	ne
 8006794:	2301      	movne	r3, #1
 8006796:	2300      	moveq	r3, #0
 8006798:	b2db      	uxtb	r3, r3
 800679a:	e00b      	b.n	80067b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	43da      	mvns	r2, r3
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	4013      	ands	r3, r2
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	bf14      	ite	ne
 80067ae:	2301      	movne	r3, #1
 80067b0:	2300      	moveq	r3, #0
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	f47f af6d 	bne.w	8006694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3710      	adds	r7, #16
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80067d0:	e034      	b.n	800683c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80067d2:	68f8      	ldr	r0, [r7, #12]
 80067d4:	f000 f8e3 	bl	800699e <I2C_IsAcknowledgeFailed>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d001      	beq.n	80067e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e034      	b.n	800684c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e8:	d028      	beq.n	800683c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067ea:	f7fd fe83 	bl	80044f4 <HAL_GetTick>
 80067ee:	4602      	mov	r2, r0
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	68ba      	ldr	r2, [r7, #8]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d302      	bcc.n	8006800 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d11d      	bne.n	800683c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	695b      	ldr	r3, [r3, #20]
 8006806:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800680a:	2b80      	cmp	r3, #128	@ 0x80
 800680c:	d016      	beq.n	800683c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2220      	movs	r2, #32
 8006818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2200      	movs	r2, #0
 8006820:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006828:	f043 0220 	orr.w	r2, r3, #32
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2200      	movs	r2, #0
 8006834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	e007      	b.n	800684c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	695b      	ldr	r3, [r3, #20]
 8006842:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006846:	2b80      	cmp	r3, #128	@ 0x80
 8006848:	d1c3      	bne.n	80067d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800684a:	2300      	movs	r3, #0
}
 800684c:	4618      	mov	r0, r3
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006860:	e034      	b.n	80068cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006862:	68f8      	ldr	r0, [r7, #12]
 8006864:	f000 f89b 	bl	800699e <I2C_IsAcknowledgeFailed>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d001      	beq.n	8006872 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e034      	b.n	80068dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006878:	d028      	beq.n	80068cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800687a:	f7fd fe3b 	bl	80044f4 <HAL_GetTick>
 800687e:	4602      	mov	r2, r0
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	1ad3      	subs	r3, r2, r3
 8006884:	68ba      	ldr	r2, [r7, #8]
 8006886:	429a      	cmp	r2, r3
 8006888:	d302      	bcc.n	8006890 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d11d      	bne.n	80068cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	695b      	ldr	r3, [r3, #20]
 8006896:	f003 0304 	and.w	r3, r3, #4
 800689a:	2b04      	cmp	r3, #4
 800689c:	d016      	beq.n	80068cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2200      	movs	r2, #0
 80068a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2220      	movs	r2, #32
 80068a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068b8:	f043 0220 	orr.w	r2, r3, #32
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	e007      	b.n	80068dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	695b      	ldr	r3, [r3, #20]
 80068d2:	f003 0304 	and.w	r3, r3, #4
 80068d6:	2b04      	cmp	r3, #4
 80068d8:	d1c3      	bne.n	8006862 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3710      	adds	r7, #16
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	60b9      	str	r1, [r7, #8]
 80068ee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80068f0:	e049      	b.n	8006986 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	695b      	ldr	r3, [r3, #20]
 80068f8:	f003 0310 	and.w	r3, r3, #16
 80068fc:	2b10      	cmp	r3, #16
 80068fe:	d119      	bne.n	8006934 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f06f 0210 	mvn.w	r2, #16
 8006908:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2200      	movs	r2, #0
 800690e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2220      	movs	r2, #32
 8006914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2200      	movs	r2, #0
 800691c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2200      	movs	r2, #0
 800692c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e030      	b.n	8006996 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006934:	f7fd fdde 	bl	80044f4 <HAL_GetTick>
 8006938:	4602      	mov	r2, r0
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	68ba      	ldr	r2, [r7, #8]
 8006940:	429a      	cmp	r2, r3
 8006942:	d302      	bcc.n	800694a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d11d      	bne.n	8006986 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	695b      	ldr	r3, [r3, #20]
 8006950:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006954:	2b40      	cmp	r3, #64	@ 0x40
 8006956:	d016      	beq.n	8006986 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2200      	movs	r2, #0
 800695c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2220      	movs	r2, #32
 8006962:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006972:	f043 0220 	orr.w	r2, r3, #32
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2200      	movs	r2, #0
 800697e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e007      	b.n	8006996 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	695b      	ldr	r3, [r3, #20]
 800698c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006990:	2b40      	cmp	r3, #64	@ 0x40
 8006992:	d1ae      	bne.n	80068f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	3710      	adds	r7, #16
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}

0800699e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800699e:	b480      	push	{r7}
 80069a0:	b083      	sub	sp, #12
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	695b      	ldr	r3, [r3, #20]
 80069ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069b4:	d11b      	bne.n	80069ee <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80069be:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2220      	movs	r2, #32
 80069ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069da:	f043 0204 	orr.w	r2, r3, #4
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e000      	b.n	80069f0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80069ee:	2300      	movs	r3, #0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	370c      	adds	r7, #12
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bc80      	pop	{r7}
 80069f8:	4770      	bx	lr
	...

080069fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b086      	sub	sp, #24
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d101      	bne.n	8006a0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e272      	b.n	8006ef4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f003 0301 	and.w	r3, r3, #1
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	f000 8087 	beq.w	8006b2a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006a1c:	4b92      	ldr	r3, [pc, #584]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	f003 030c 	and.w	r3, r3, #12
 8006a24:	2b04      	cmp	r3, #4
 8006a26:	d00c      	beq.n	8006a42 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006a28:	4b8f      	ldr	r3, [pc, #572]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	f003 030c 	and.w	r3, r3, #12
 8006a30:	2b08      	cmp	r3, #8
 8006a32:	d112      	bne.n	8006a5a <HAL_RCC_OscConfig+0x5e>
 8006a34:	4b8c      	ldr	r3, [pc, #560]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a40:	d10b      	bne.n	8006a5a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a42:	4b89      	ldr	r3, [pc, #548]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d06c      	beq.n	8006b28 <HAL_RCC_OscConfig+0x12c>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d168      	bne.n	8006b28 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e24c      	b.n	8006ef4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a62:	d106      	bne.n	8006a72 <HAL_RCC_OscConfig+0x76>
 8006a64:	4b80      	ldr	r3, [pc, #512]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a7f      	ldr	r2, [pc, #508]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006a6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a6e:	6013      	str	r3, [r2, #0]
 8006a70:	e02e      	b.n	8006ad0 <HAL_RCC_OscConfig+0xd4>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d10c      	bne.n	8006a94 <HAL_RCC_OscConfig+0x98>
 8006a7a:	4b7b      	ldr	r3, [pc, #492]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a7a      	ldr	r2, [pc, #488]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006a80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a84:	6013      	str	r3, [r2, #0]
 8006a86:	4b78      	ldr	r3, [pc, #480]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a77      	ldr	r2, [pc, #476]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006a8c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a90:	6013      	str	r3, [r2, #0]
 8006a92:	e01d      	b.n	8006ad0 <HAL_RCC_OscConfig+0xd4>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006a9c:	d10c      	bne.n	8006ab8 <HAL_RCC_OscConfig+0xbc>
 8006a9e:	4b72      	ldr	r3, [pc, #456]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a71      	ldr	r2, [pc, #452]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006aa4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006aa8:	6013      	str	r3, [r2, #0]
 8006aaa:	4b6f      	ldr	r3, [pc, #444]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a6e      	ldr	r2, [pc, #440]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006ab0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ab4:	6013      	str	r3, [r2, #0]
 8006ab6:	e00b      	b.n	8006ad0 <HAL_RCC_OscConfig+0xd4>
 8006ab8:	4b6b      	ldr	r3, [pc, #428]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a6a      	ldr	r2, [pc, #424]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006abe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ac2:	6013      	str	r3, [r2, #0]
 8006ac4:	4b68      	ldr	r3, [pc, #416]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a67      	ldr	r2, [pc, #412]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006aca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006ace:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d013      	beq.n	8006b00 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ad8:	f7fd fd0c 	bl	80044f4 <HAL_GetTick>
 8006adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ade:	e008      	b.n	8006af2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ae0:	f7fd fd08 	bl	80044f4 <HAL_GetTick>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	2b64      	cmp	r3, #100	@ 0x64
 8006aec:	d901      	bls.n	8006af2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006aee:	2303      	movs	r3, #3
 8006af0:	e200      	b.n	8006ef4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006af2:	4b5d      	ldr	r3, [pc, #372]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d0f0      	beq.n	8006ae0 <HAL_RCC_OscConfig+0xe4>
 8006afe:	e014      	b.n	8006b2a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b00:	f7fd fcf8 	bl	80044f4 <HAL_GetTick>
 8006b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b06:	e008      	b.n	8006b1a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b08:	f7fd fcf4 	bl	80044f4 <HAL_GetTick>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	2b64      	cmp	r3, #100	@ 0x64
 8006b14:	d901      	bls.n	8006b1a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006b16:	2303      	movs	r3, #3
 8006b18:	e1ec      	b.n	8006ef4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b1a:	4b53      	ldr	r3, [pc, #332]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d1f0      	bne.n	8006b08 <HAL_RCC_OscConfig+0x10c>
 8006b26:	e000      	b.n	8006b2a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 0302 	and.w	r3, r3, #2
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d063      	beq.n	8006bfe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006b36:	4b4c      	ldr	r3, [pc, #304]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	f003 030c 	and.w	r3, r3, #12
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d00b      	beq.n	8006b5a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006b42:	4b49      	ldr	r3, [pc, #292]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	f003 030c 	and.w	r3, r3, #12
 8006b4a:	2b08      	cmp	r3, #8
 8006b4c:	d11c      	bne.n	8006b88 <HAL_RCC_OscConfig+0x18c>
 8006b4e:	4b46      	ldr	r3, [pc, #280]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d116      	bne.n	8006b88 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b5a:	4b43      	ldr	r3, [pc, #268]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 0302 	and.w	r3, r3, #2
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d005      	beq.n	8006b72 <HAL_RCC_OscConfig+0x176>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d001      	beq.n	8006b72 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e1c0      	b.n	8006ef4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b72:	4b3d      	ldr	r3, [pc, #244]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	695b      	ldr	r3, [r3, #20]
 8006b7e:	00db      	lsls	r3, r3, #3
 8006b80:	4939      	ldr	r1, [pc, #228]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006b82:	4313      	orrs	r3, r2
 8006b84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b86:	e03a      	b.n	8006bfe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	691b      	ldr	r3, [r3, #16]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d020      	beq.n	8006bd2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b90:	4b36      	ldr	r3, [pc, #216]	@ (8006c6c <HAL_RCC_OscConfig+0x270>)
 8006b92:	2201      	movs	r2, #1
 8006b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b96:	f7fd fcad 	bl	80044f4 <HAL_GetTick>
 8006b9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b9c:	e008      	b.n	8006bb0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b9e:	f7fd fca9 	bl	80044f4 <HAL_GetTick>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	1ad3      	subs	r3, r2, r3
 8006ba8:	2b02      	cmp	r3, #2
 8006baa:	d901      	bls.n	8006bb0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006bac:	2303      	movs	r3, #3
 8006bae:	e1a1      	b.n	8006ef4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bb0:	4b2d      	ldr	r3, [pc, #180]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 0302 	and.w	r3, r3, #2
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d0f0      	beq.n	8006b9e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bbc:	4b2a      	ldr	r3, [pc, #168]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	695b      	ldr	r3, [r3, #20]
 8006bc8:	00db      	lsls	r3, r3, #3
 8006bca:	4927      	ldr	r1, [pc, #156]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	600b      	str	r3, [r1, #0]
 8006bd0:	e015      	b.n	8006bfe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006bd2:	4b26      	ldr	r3, [pc, #152]	@ (8006c6c <HAL_RCC_OscConfig+0x270>)
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bd8:	f7fd fc8c 	bl	80044f4 <HAL_GetTick>
 8006bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bde:	e008      	b.n	8006bf2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006be0:	f7fd fc88 	bl	80044f4 <HAL_GetTick>
 8006be4:	4602      	mov	r2, r0
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	2b02      	cmp	r3, #2
 8006bec:	d901      	bls.n	8006bf2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006bee:	2303      	movs	r3, #3
 8006bf0:	e180      	b.n	8006ef4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bf2:	4b1d      	ldr	r3, [pc, #116]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 0302 	and.w	r3, r3, #2
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d1f0      	bne.n	8006be0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f003 0308 	and.w	r3, r3, #8
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d03a      	beq.n	8006c80 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d019      	beq.n	8006c46 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c12:	4b17      	ldr	r3, [pc, #92]	@ (8006c70 <HAL_RCC_OscConfig+0x274>)
 8006c14:	2201      	movs	r2, #1
 8006c16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c18:	f7fd fc6c 	bl	80044f4 <HAL_GetTick>
 8006c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c1e:	e008      	b.n	8006c32 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c20:	f7fd fc68 	bl	80044f4 <HAL_GetTick>
 8006c24:	4602      	mov	r2, r0
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	2b02      	cmp	r3, #2
 8006c2c:	d901      	bls.n	8006c32 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e160      	b.n	8006ef4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c32:	4b0d      	ldr	r3, [pc, #52]	@ (8006c68 <HAL_RCC_OscConfig+0x26c>)
 8006c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c36:	f003 0302 	and.w	r3, r3, #2
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d0f0      	beq.n	8006c20 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006c3e:	2001      	movs	r0, #1
 8006c40:	f000 face 	bl	80071e0 <RCC_Delay>
 8006c44:	e01c      	b.n	8006c80 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c46:	4b0a      	ldr	r3, [pc, #40]	@ (8006c70 <HAL_RCC_OscConfig+0x274>)
 8006c48:	2200      	movs	r2, #0
 8006c4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c4c:	f7fd fc52 	bl	80044f4 <HAL_GetTick>
 8006c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c52:	e00f      	b.n	8006c74 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c54:	f7fd fc4e 	bl	80044f4 <HAL_GetTick>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	d908      	bls.n	8006c74 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006c62:	2303      	movs	r3, #3
 8006c64:	e146      	b.n	8006ef4 <HAL_RCC_OscConfig+0x4f8>
 8006c66:	bf00      	nop
 8006c68:	40021000 	.word	0x40021000
 8006c6c:	42420000 	.word	0x42420000
 8006c70:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c74:	4b92      	ldr	r3, [pc, #584]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c78:	f003 0302 	and.w	r3, r3, #2
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d1e9      	bne.n	8006c54 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 0304 	and.w	r3, r3, #4
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	f000 80a6 	beq.w	8006dda <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c92:	4b8b      	ldr	r3, [pc, #556]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006c94:	69db      	ldr	r3, [r3, #28]
 8006c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d10d      	bne.n	8006cba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c9e:	4b88      	ldr	r3, [pc, #544]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006ca0:	69db      	ldr	r3, [r3, #28]
 8006ca2:	4a87      	ldr	r2, [pc, #540]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006ca4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ca8:	61d3      	str	r3, [r2, #28]
 8006caa:	4b85      	ldr	r3, [pc, #532]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006cac:	69db      	ldr	r3, [r3, #28]
 8006cae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006cb2:	60bb      	str	r3, [r7, #8]
 8006cb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cba:	4b82      	ldr	r3, [pc, #520]	@ (8006ec4 <HAL_RCC_OscConfig+0x4c8>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d118      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006cc6:	4b7f      	ldr	r3, [pc, #508]	@ (8006ec4 <HAL_RCC_OscConfig+0x4c8>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a7e      	ldr	r2, [pc, #504]	@ (8006ec4 <HAL_RCC_OscConfig+0x4c8>)
 8006ccc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006cd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006cd2:	f7fd fc0f 	bl	80044f4 <HAL_GetTick>
 8006cd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cd8:	e008      	b.n	8006cec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cda:	f7fd fc0b 	bl	80044f4 <HAL_GetTick>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	1ad3      	subs	r3, r2, r3
 8006ce4:	2b64      	cmp	r3, #100	@ 0x64
 8006ce6:	d901      	bls.n	8006cec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	e103      	b.n	8006ef4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cec:	4b75      	ldr	r3, [pc, #468]	@ (8006ec4 <HAL_RCC_OscConfig+0x4c8>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d0f0      	beq.n	8006cda <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d106      	bne.n	8006d0e <HAL_RCC_OscConfig+0x312>
 8006d00:	4b6f      	ldr	r3, [pc, #444]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006d02:	6a1b      	ldr	r3, [r3, #32]
 8006d04:	4a6e      	ldr	r2, [pc, #440]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006d06:	f043 0301 	orr.w	r3, r3, #1
 8006d0a:	6213      	str	r3, [r2, #32]
 8006d0c:	e02d      	b.n	8006d6a <HAL_RCC_OscConfig+0x36e>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d10c      	bne.n	8006d30 <HAL_RCC_OscConfig+0x334>
 8006d16:	4b6a      	ldr	r3, [pc, #424]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006d18:	6a1b      	ldr	r3, [r3, #32]
 8006d1a:	4a69      	ldr	r2, [pc, #420]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006d1c:	f023 0301 	bic.w	r3, r3, #1
 8006d20:	6213      	str	r3, [r2, #32]
 8006d22:	4b67      	ldr	r3, [pc, #412]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006d24:	6a1b      	ldr	r3, [r3, #32]
 8006d26:	4a66      	ldr	r2, [pc, #408]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006d28:	f023 0304 	bic.w	r3, r3, #4
 8006d2c:	6213      	str	r3, [r2, #32]
 8006d2e:	e01c      	b.n	8006d6a <HAL_RCC_OscConfig+0x36e>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	2b05      	cmp	r3, #5
 8006d36:	d10c      	bne.n	8006d52 <HAL_RCC_OscConfig+0x356>
 8006d38:	4b61      	ldr	r3, [pc, #388]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006d3a:	6a1b      	ldr	r3, [r3, #32]
 8006d3c:	4a60      	ldr	r2, [pc, #384]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006d3e:	f043 0304 	orr.w	r3, r3, #4
 8006d42:	6213      	str	r3, [r2, #32]
 8006d44:	4b5e      	ldr	r3, [pc, #376]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006d46:	6a1b      	ldr	r3, [r3, #32]
 8006d48:	4a5d      	ldr	r2, [pc, #372]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006d4a:	f043 0301 	orr.w	r3, r3, #1
 8006d4e:	6213      	str	r3, [r2, #32]
 8006d50:	e00b      	b.n	8006d6a <HAL_RCC_OscConfig+0x36e>
 8006d52:	4b5b      	ldr	r3, [pc, #364]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006d54:	6a1b      	ldr	r3, [r3, #32]
 8006d56:	4a5a      	ldr	r2, [pc, #360]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006d58:	f023 0301 	bic.w	r3, r3, #1
 8006d5c:	6213      	str	r3, [r2, #32]
 8006d5e:	4b58      	ldr	r3, [pc, #352]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006d60:	6a1b      	ldr	r3, [r3, #32]
 8006d62:	4a57      	ldr	r2, [pc, #348]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006d64:	f023 0304 	bic.w	r3, r3, #4
 8006d68:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d015      	beq.n	8006d9e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d72:	f7fd fbbf 	bl	80044f4 <HAL_GetTick>
 8006d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d78:	e00a      	b.n	8006d90 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d7a:	f7fd fbbb 	bl	80044f4 <HAL_GetTick>
 8006d7e:	4602      	mov	r2, r0
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	1ad3      	subs	r3, r2, r3
 8006d84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d901      	bls.n	8006d90 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	e0b1      	b.n	8006ef4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d90:	4b4b      	ldr	r3, [pc, #300]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006d92:	6a1b      	ldr	r3, [r3, #32]
 8006d94:	f003 0302 	and.w	r3, r3, #2
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d0ee      	beq.n	8006d7a <HAL_RCC_OscConfig+0x37e>
 8006d9c:	e014      	b.n	8006dc8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d9e:	f7fd fba9 	bl	80044f4 <HAL_GetTick>
 8006da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006da4:	e00a      	b.n	8006dbc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006da6:	f7fd fba5 	bl	80044f4 <HAL_GetTick>
 8006daa:	4602      	mov	r2, r0
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	1ad3      	subs	r3, r2, r3
 8006db0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d901      	bls.n	8006dbc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006db8:	2303      	movs	r3, #3
 8006dba:	e09b      	b.n	8006ef4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006dbc:	4b40      	ldr	r3, [pc, #256]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006dbe:	6a1b      	ldr	r3, [r3, #32]
 8006dc0:	f003 0302 	and.w	r3, r3, #2
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d1ee      	bne.n	8006da6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006dc8:	7dfb      	ldrb	r3, [r7, #23]
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d105      	bne.n	8006dda <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006dce:	4b3c      	ldr	r3, [pc, #240]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006dd0:	69db      	ldr	r3, [r3, #28]
 8006dd2:	4a3b      	ldr	r2, [pc, #236]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006dd4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006dd8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	69db      	ldr	r3, [r3, #28]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	f000 8087 	beq.w	8006ef2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006de4:	4b36      	ldr	r3, [pc, #216]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	f003 030c 	and.w	r3, r3, #12
 8006dec:	2b08      	cmp	r3, #8
 8006dee:	d061      	beq.n	8006eb4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	69db      	ldr	r3, [r3, #28]
 8006df4:	2b02      	cmp	r3, #2
 8006df6:	d146      	bne.n	8006e86 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006df8:	4b33      	ldr	r3, [pc, #204]	@ (8006ec8 <HAL_RCC_OscConfig+0x4cc>)
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dfe:	f7fd fb79 	bl	80044f4 <HAL_GetTick>
 8006e02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e04:	e008      	b.n	8006e18 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e06:	f7fd fb75 	bl	80044f4 <HAL_GetTick>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	1ad3      	subs	r3, r2, r3
 8006e10:	2b02      	cmp	r3, #2
 8006e12:	d901      	bls.n	8006e18 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006e14:	2303      	movs	r3, #3
 8006e16:	e06d      	b.n	8006ef4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e18:	4b29      	ldr	r3, [pc, #164]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d1f0      	bne.n	8006e06 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6a1b      	ldr	r3, [r3, #32]
 8006e28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e2c:	d108      	bne.n	8006e40 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006e2e:	4b24      	ldr	r3, [pc, #144]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	4921      	ldr	r1, [pc, #132]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e40:	4b1f      	ldr	r3, [pc, #124]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6a19      	ldr	r1, [r3, #32]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e50:	430b      	orrs	r3, r1
 8006e52:	491b      	ldr	r1, [pc, #108]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006e54:	4313      	orrs	r3, r2
 8006e56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e58:	4b1b      	ldr	r3, [pc, #108]	@ (8006ec8 <HAL_RCC_OscConfig+0x4cc>)
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e5e:	f7fd fb49 	bl	80044f4 <HAL_GetTick>
 8006e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006e64:	e008      	b.n	8006e78 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e66:	f7fd fb45 	bl	80044f4 <HAL_GetTick>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	1ad3      	subs	r3, r2, r3
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d901      	bls.n	8006e78 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006e74:	2303      	movs	r3, #3
 8006e76:	e03d      	b.n	8006ef4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006e78:	4b11      	ldr	r3, [pc, #68]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d0f0      	beq.n	8006e66 <HAL_RCC_OscConfig+0x46a>
 8006e84:	e035      	b.n	8006ef2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e86:	4b10      	ldr	r3, [pc, #64]	@ (8006ec8 <HAL_RCC_OscConfig+0x4cc>)
 8006e88:	2200      	movs	r2, #0
 8006e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e8c:	f7fd fb32 	bl	80044f4 <HAL_GetTick>
 8006e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e92:	e008      	b.n	8006ea6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e94:	f7fd fb2e 	bl	80044f4 <HAL_GetTick>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	1ad3      	subs	r3, r2, r3
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	d901      	bls.n	8006ea6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	e026      	b.n	8006ef4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ea6:	4b06      	ldr	r3, [pc, #24]	@ (8006ec0 <HAL_RCC_OscConfig+0x4c4>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d1f0      	bne.n	8006e94 <HAL_RCC_OscConfig+0x498>
 8006eb2:	e01e      	b.n	8006ef2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	69db      	ldr	r3, [r3, #28]
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d107      	bne.n	8006ecc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e019      	b.n	8006ef4 <HAL_RCC_OscConfig+0x4f8>
 8006ec0:	40021000 	.word	0x40021000
 8006ec4:	40007000 	.word	0x40007000
 8006ec8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8006efc <HAL_RCC_OscConfig+0x500>)
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6a1b      	ldr	r3, [r3, #32]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d106      	bne.n	8006eee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d001      	beq.n	8006ef2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e000      	b.n	8006ef4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3718      	adds	r7, #24
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	40021000 	.word	0x40021000

08006f00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d101      	bne.n	8006f14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	e0d0      	b.n	80070b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006f14:	4b6a      	ldr	r3, [pc, #424]	@ (80070c0 <HAL_RCC_ClockConfig+0x1c0>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 0307 	and.w	r3, r3, #7
 8006f1c:	683a      	ldr	r2, [r7, #0]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d910      	bls.n	8006f44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f22:	4b67      	ldr	r3, [pc, #412]	@ (80070c0 <HAL_RCC_ClockConfig+0x1c0>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f023 0207 	bic.w	r2, r3, #7
 8006f2a:	4965      	ldr	r1, [pc, #404]	@ (80070c0 <HAL_RCC_ClockConfig+0x1c0>)
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f32:	4b63      	ldr	r3, [pc, #396]	@ (80070c0 <HAL_RCC_ClockConfig+0x1c0>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 0307 	and.w	r3, r3, #7
 8006f3a:	683a      	ldr	r2, [r7, #0]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d001      	beq.n	8006f44 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	e0b8      	b.n	80070b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 0302 	and.w	r3, r3, #2
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d020      	beq.n	8006f92 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 0304 	and.w	r3, r3, #4
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d005      	beq.n	8006f68 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f5c:	4b59      	ldr	r3, [pc, #356]	@ (80070c4 <HAL_RCC_ClockConfig+0x1c4>)
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	4a58      	ldr	r2, [pc, #352]	@ (80070c4 <HAL_RCC_ClockConfig+0x1c4>)
 8006f62:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006f66:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f003 0308 	and.w	r3, r3, #8
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d005      	beq.n	8006f80 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006f74:	4b53      	ldr	r3, [pc, #332]	@ (80070c4 <HAL_RCC_ClockConfig+0x1c4>)
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	4a52      	ldr	r2, [pc, #328]	@ (80070c4 <HAL_RCC_ClockConfig+0x1c4>)
 8006f7a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8006f7e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f80:	4b50      	ldr	r3, [pc, #320]	@ (80070c4 <HAL_RCC_ClockConfig+0x1c4>)
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	494d      	ldr	r1, [pc, #308]	@ (80070c4 <HAL_RCC_ClockConfig+0x1c4>)
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 0301 	and.w	r3, r3, #1
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d040      	beq.n	8007020 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d107      	bne.n	8006fb6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fa6:	4b47      	ldr	r3, [pc, #284]	@ (80070c4 <HAL_RCC_ClockConfig+0x1c4>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d115      	bne.n	8006fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e07f      	b.n	80070b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	2b02      	cmp	r3, #2
 8006fbc:	d107      	bne.n	8006fce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fbe:	4b41      	ldr	r3, [pc, #260]	@ (80070c4 <HAL_RCC_ClockConfig+0x1c4>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d109      	bne.n	8006fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e073      	b.n	80070b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fce:	4b3d      	ldr	r3, [pc, #244]	@ (80070c4 <HAL_RCC_ClockConfig+0x1c4>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f003 0302 	and.w	r3, r3, #2
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d101      	bne.n	8006fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e06b      	b.n	80070b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006fde:	4b39      	ldr	r3, [pc, #228]	@ (80070c4 <HAL_RCC_ClockConfig+0x1c4>)
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	f023 0203 	bic.w	r2, r3, #3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	4936      	ldr	r1, [pc, #216]	@ (80070c4 <HAL_RCC_ClockConfig+0x1c4>)
 8006fec:	4313      	orrs	r3, r2
 8006fee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ff0:	f7fd fa80 	bl	80044f4 <HAL_GetTick>
 8006ff4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ff6:	e00a      	b.n	800700e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ff8:	f7fd fa7c 	bl	80044f4 <HAL_GetTick>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	1ad3      	subs	r3, r2, r3
 8007002:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007006:	4293      	cmp	r3, r2
 8007008:	d901      	bls.n	800700e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800700a:	2303      	movs	r3, #3
 800700c:	e053      	b.n	80070b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800700e:	4b2d      	ldr	r3, [pc, #180]	@ (80070c4 <HAL_RCC_ClockConfig+0x1c4>)
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	f003 020c 	and.w	r2, r3, #12
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	429a      	cmp	r2, r3
 800701e:	d1eb      	bne.n	8006ff8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007020:	4b27      	ldr	r3, [pc, #156]	@ (80070c0 <HAL_RCC_ClockConfig+0x1c0>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f003 0307 	and.w	r3, r3, #7
 8007028:	683a      	ldr	r2, [r7, #0]
 800702a:	429a      	cmp	r2, r3
 800702c:	d210      	bcs.n	8007050 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800702e:	4b24      	ldr	r3, [pc, #144]	@ (80070c0 <HAL_RCC_ClockConfig+0x1c0>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f023 0207 	bic.w	r2, r3, #7
 8007036:	4922      	ldr	r1, [pc, #136]	@ (80070c0 <HAL_RCC_ClockConfig+0x1c0>)
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	4313      	orrs	r3, r2
 800703c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800703e:	4b20      	ldr	r3, [pc, #128]	@ (80070c0 <HAL_RCC_ClockConfig+0x1c0>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 0307 	and.w	r3, r3, #7
 8007046:	683a      	ldr	r2, [r7, #0]
 8007048:	429a      	cmp	r2, r3
 800704a:	d001      	beq.n	8007050 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	e032      	b.n	80070b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 0304 	and.w	r3, r3, #4
 8007058:	2b00      	cmp	r3, #0
 800705a:	d008      	beq.n	800706e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800705c:	4b19      	ldr	r3, [pc, #100]	@ (80070c4 <HAL_RCC_ClockConfig+0x1c4>)
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	4916      	ldr	r1, [pc, #88]	@ (80070c4 <HAL_RCC_ClockConfig+0x1c4>)
 800706a:	4313      	orrs	r3, r2
 800706c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f003 0308 	and.w	r3, r3, #8
 8007076:	2b00      	cmp	r3, #0
 8007078:	d009      	beq.n	800708e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800707a:	4b12      	ldr	r3, [pc, #72]	@ (80070c4 <HAL_RCC_ClockConfig+0x1c4>)
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	00db      	lsls	r3, r3, #3
 8007088:	490e      	ldr	r1, [pc, #56]	@ (80070c4 <HAL_RCC_ClockConfig+0x1c4>)
 800708a:	4313      	orrs	r3, r2
 800708c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800708e:	f000 f821 	bl	80070d4 <HAL_RCC_GetSysClockFreq>
 8007092:	4602      	mov	r2, r0
 8007094:	4b0b      	ldr	r3, [pc, #44]	@ (80070c4 <HAL_RCC_ClockConfig+0x1c4>)
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	091b      	lsrs	r3, r3, #4
 800709a:	f003 030f 	and.w	r3, r3, #15
 800709e:	490a      	ldr	r1, [pc, #40]	@ (80070c8 <HAL_RCC_ClockConfig+0x1c8>)
 80070a0:	5ccb      	ldrb	r3, [r1, r3]
 80070a2:	fa22 f303 	lsr.w	r3, r2, r3
 80070a6:	4a09      	ldr	r2, [pc, #36]	@ (80070cc <HAL_RCC_ClockConfig+0x1cc>)
 80070a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80070aa:	4b09      	ldr	r3, [pc, #36]	@ (80070d0 <HAL_RCC_ClockConfig+0x1d0>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4618      	mov	r0, r3
 80070b0:	f7fd f9de 	bl	8004470 <HAL_InitTick>

  return HAL_OK;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3710      	adds	r7, #16
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop
 80070c0:	40022000 	.word	0x40022000
 80070c4:	40021000 	.word	0x40021000
 80070c8:	0800c6a0 	.word	0x0800c6a0
 80070cc:	20000038 	.word	0x20000038
 80070d0:	2000003c 	.word	0x2000003c

080070d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b087      	sub	sp, #28
 80070d8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80070da:	2300      	movs	r3, #0
 80070dc:	60fb      	str	r3, [r7, #12]
 80070de:	2300      	movs	r3, #0
 80070e0:	60bb      	str	r3, [r7, #8]
 80070e2:	2300      	movs	r3, #0
 80070e4:	617b      	str	r3, [r7, #20]
 80070e6:	2300      	movs	r3, #0
 80070e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80070ea:	2300      	movs	r3, #0
 80070ec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80070ee:	4b1e      	ldr	r3, [pc, #120]	@ (8007168 <HAL_RCC_GetSysClockFreq+0x94>)
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f003 030c 	and.w	r3, r3, #12
 80070fa:	2b04      	cmp	r3, #4
 80070fc:	d002      	beq.n	8007104 <HAL_RCC_GetSysClockFreq+0x30>
 80070fe:	2b08      	cmp	r3, #8
 8007100:	d003      	beq.n	800710a <HAL_RCC_GetSysClockFreq+0x36>
 8007102:	e027      	b.n	8007154 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007104:	4b19      	ldr	r3, [pc, #100]	@ (800716c <HAL_RCC_GetSysClockFreq+0x98>)
 8007106:	613b      	str	r3, [r7, #16]
      break;
 8007108:	e027      	b.n	800715a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	0c9b      	lsrs	r3, r3, #18
 800710e:	f003 030f 	and.w	r3, r3, #15
 8007112:	4a17      	ldr	r2, [pc, #92]	@ (8007170 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007114:	5cd3      	ldrb	r3, [r2, r3]
 8007116:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800711e:	2b00      	cmp	r3, #0
 8007120:	d010      	beq.n	8007144 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007122:	4b11      	ldr	r3, [pc, #68]	@ (8007168 <HAL_RCC_GetSysClockFreq+0x94>)
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	0c5b      	lsrs	r3, r3, #17
 8007128:	f003 0301 	and.w	r3, r3, #1
 800712c:	4a11      	ldr	r2, [pc, #68]	@ (8007174 <HAL_RCC_GetSysClockFreq+0xa0>)
 800712e:	5cd3      	ldrb	r3, [r2, r3]
 8007130:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4a0d      	ldr	r2, [pc, #52]	@ (800716c <HAL_RCC_GetSysClockFreq+0x98>)
 8007136:	fb03 f202 	mul.w	r2, r3, r2
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007140:	617b      	str	r3, [r7, #20]
 8007142:	e004      	b.n	800714e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a0c      	ldr	r2, [pc, #48]	@ (8007178 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007148:	fb02 f303 	mul.w	r3, r2, r3
 800714c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	613b      	str	r3, [r7, #16]
      break;
 8007152:	e002      	b.n	800715a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007154:	4b05      	ldr	r3, [pc, #20]	@ (800716c <HAL_RCC_GetSysClockFreq+0x98>)
 8007156:	613b      	str	r3, [r7, #16]
      break;
 8007158:	bf00      	nop
    }
  }
  return sysclockfreq;
 800715a:	693b      	ldr	r3, [r7, #16]
}
 800715c:	4618      	mov	r0, r3
 800715e:	371c      	adds	r7, #28
 8007160:	46bd      	mov	sp, r7
 8007162:	bc80      	pop	{r7}
 8007164:	4770      	bx	lr
 8007166:	bf00      	nop
 8007168:	40021000 	.word	0x40021000
 800716c:	007a1200 	.word	0x007a1200
 8007170:	0800c6b8 	.word	0x0800c6b8
 8007174:	0800c6c8 	.word	0x0800c6c8
 8007178:	003d0900 	.word	0x003d0900

0800717c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800717c:	b480      	push	{r7}
 800717e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007180:	4b02      	ldr	r3, [pc, #8]	@ (800718c <HAL_RCC_GetHCLKFreq+0x10>)
 8007182:	681b      	ldr	r3, [r3, #0]
}
 8007184:	4618      	mov	r0, r3
 8007186:	46bd      	mov	sp, r7
 8007188:	bc80      	pop	{r7}
 800718a:	4770      	bx	lr
 800718c:	20000038 	.word	0x20000038

08007190 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007194:	f7ff fff2 	bl	800717c <HAL_RCC_GetHCLKFreq>
 8007198:	4602      	mov	r2, r0
 800719a:	4b05      	ldr	r3, [pc, #20]	@ (80071b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	0a1b      	lsrs	r3, r3, #8
 80071a0:	f003 0307 	and.w	r3, r3, #7
 80071a4:	4903      	ldr	r1, [pc, #12]	@ (80071b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80071a6:	5ccb      	ldrb	r3, [r1, r3]
 80071a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	40021000 	.word	0x40021000
 80071b4:	0800c6b0 	.word	0x0800c6b0

080071b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80071bc:	f7ff ffde 	bl	800717c <HAL_RCC_GetHCLKFreq>
 80071c0:	4602      	mov	r2, r0
 80071c2:	4b05      	ldr	r3, [pc, #20]	@ (80071d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	0adb      	lsrs	r3, r3, #11
 80071c8:	f003 0307 	and.w	r3, r3, #7
 80071cc:	4903      	ldr	r1, [pc, #12]	@ (80071dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80071ce:	5ccb      	ldrb	r3, [r1, r3]
 80071d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	bd80      	pop	{r7, pc}
 80071d8:	40021000 	.word	0x40021000
 80071dc:	0800c6b0 	.word	0x0800c6b0

080071e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b085      	sub	sp, #20
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80071e8:	4b0a      	ldr	r3, [pc, #40]	@ (8007214 <RCC_Delay+0x34>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a0a      	ldr	r2, [pc, #40]	@ (8007218 <RCC_Delay+0x38>)
 80071ee:	fba2 2303 	umull	r2, r3, r2, r3
 80071f2:	0a5b      	lsrs	r3, r3, #9
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	fb02 f303 	mul.w	r3, r2, r3
 80071fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80071fc:	bf00      	nop
  }
  while (Delay --);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	1e5a      	subs	r2, r3, #1
 8007202:	60fa      	str	r2, [r7, #12]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d1f9      	bne.n	80071fc <RCC_Delay+0x1c>
}
 8007208:	bf00      	nop
 800720a:	bf00      	nop
 800720c:	3714      	adds	r7, #20
 800720e:	46bd      	mov	sp, r7
 8007210:	bc80      	pop	{r7}
 8007212:	4770      	bx	lr
 8007214:	20000038 	.word	0x20000038
 8007218:	10624dd3 	.word	0x10624dd3

0800721c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b086      	sub	sp, #24
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007224:	2300      	movs	r3, #0
 8007226:	613b      	str	r3, [r7, #16]
 8007228:	2300      	movs	r3, #0
 800722a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 0301 	and.w	r3, r3, #1
 8007234:	2b00      	cmp	r3, #0
 8007236:	d07d      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007238:	2300      	movs	r3, #0
 800723a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800723c:	4b4f      	ldr	r3, [pc, #316]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800723e:	69db      	ldr	r3, [r3, #28]
 8007240:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007244:	2b00      	cmp	r3, #0
 8007246:	d10d      	bne.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007248:	4b4c      	ldr	r3, [pc, #304]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800724a:	69db      	ldr	r3, [r3, #28]
 800724c:	4a4b      	ldr	r2, [pc, #300]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800724e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007252:	61d3      	str	r3, [r2, #28]
 8007254:	4b49      	ldr	r3, [pc, #292]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007256:	69db      	ldr	r3, [r3, #28]
 8007258:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800725c:	60bb      	str	r3, [r7, #8]
 800725e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007260:	2301      	movs	r3, #1
 8007262:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007264:	4b46      	ldr	r3, [pc, #280]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800726c:	2b00      	cmp	r3, #0
 800726e:	d118      	bne.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007270:	4b43      	ldr	r3, [pc, #268]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a42      	ldr	r2, [pc, #264]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007276:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800727a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800727c:	f7fd f93a 	bl	80044f4 <HAL_GetTick>
 8007280:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007282:	e008      	b.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007284:	f7fd f936 	bl	80044f4 <HAL_GetTick>
 8007288:	4602      	mov	r2, r0
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	1ad3      	subs	r3, r2, r3
 800728e:	2b64      	cmp	r3, #100	@ 0x64
 8007290:	d901      	bls.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007292:	2303      	movs	r3, #3
 8007294:	e06d      	b.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007296:	4b3a      	ldr	r3, [pc, #232]	@ (8007380 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d0f0      	beq.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80072a2:	4b36      	ldr	r3, [pc, #216]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072a4:	6a1b      	ldr	r3, [r3, #32]
 80072a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072aa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d02e      	beq.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072ba:	68fa      	ldr	r2, [r7, #12]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d027      	beq.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80072c0:	4b2e      	ldr	r3, [pc, #184]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072c2:	6a1b      	ldr	r3, [r3, #32]
 80072c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072c8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80072ca:	4b2e      	ldr	r3, [pc, #184]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80072cc:	2201      	movs	r2, #1
 80072ce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80072d0:	4b2c      	ldr	r3, [pc, #176]	@ (8007384 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80072d2:	2200      	movs	r2, #0
 80072d4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80072d6:	4a29      	ldr	r2, [pc, #164]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f003 0301 	and.w	r3, r3, #1
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d014      	beq.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072e6:	f7fd f905 	bl	80044f4 <HAL_GetTick>
 80072ea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072ec:	e00a      	b.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072ee:	f7fd f901 	bl	80044f4 <HAL_GetTick>
 80072f2:	4602      	mov	r2, r0
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	1ad3      	subs	r3, r2, r3
 80072f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d901      	bls.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007300:	2303      	movs	r3, #3
 8007302:	e036      	b.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007304:	4b1d      	ldr	r3, [pc, #116]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007306:	6a1b      	ldr	r3, [r3, #32]
 8007308:	f003 0302 	and.w	r3, r3, #2
 800730c:	2b00      	cmp	r3, #0
 800730e:	d0ee      	beq.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007310:	4b1a      	ldr	r3, [pc, #104]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007312:	6a1b      	ldr	r3, [r3, #32]
 8007314:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	4917      	ldr	r1, [pc, #92]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800731e:	4313      	orrs	r3, r2
 8007320:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007322:	7dfb      	ldrb	r3, [r7, #23]
 8007324:	2b01      	cmp	r3, #1
 8007326:	d105      	bne.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007328:	4b14      	ldr	r3, [pc, #80]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800732a:	69db      	ldr	r3, [r3, #28]
 800732c:	4a13      	ldr	r2, [pc, #76]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800732e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007332:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f003 0302 	and.w	r3, r3, #2
 800733c:	2b00      	cmp	r3, #0
 800733e:	d008      	beq.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007340:	4b0e      	ldr	r3, [pc, #56]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	490b      	ldr	r1, [pc, #44]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800734e:	4313      	orrs	r3, r2
 8007350:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f003 0310 	and.w	r3, r3, #16
 800735a:	2b00      	cmp	r3, #0
 800735c:	d008      	beq.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800735e:	4b07      	ldr	r3, [pc, #28]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	4904      	ldr	r1, [pc, #16]	@ (800737c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800736c:	4313      	orrs	r3, r2
 800736e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3718      	adds	r7, #24
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	40021000 	.word	0x40021000
 8007380:	40007000 	.word	0x40007000
 8007384:	42420440 	.word	0x42420440

08007388 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b088      	sub	sp, #32
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8007390:	2300      	movs	r3, #0
 8007392:	617b      	str	r3, [r7, #20]
 8007394:	2300      	movs	r3, #0
 8007396:	61fb      	str	r3, [r7, #28]
 8007398:	2300      	movs	r3, #0
 800739a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800739c:	2300      	movs	r3, #0
 800739e:	60fb      	str	r3, [r7, #12]
 80073a0:	2300      	movs	r3, #0
 80073a2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2b10      	cmp	r3, #16
 80073a8:	d00a      	beq.n	80073c0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2b10      	cmp	r3, #16
 80073ae:	f200 808a 	bhi.w	80074c6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d045      	beq.n	8007444 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2b02      	cmp	r3, #2
 80073bc:	d075      	beq.n	80074aa <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80073be:	e082      	b.n	80074c6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80073c0:	4b46      	ldr	r3, [pc, #280]	@ (80074dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80073c6:	4b45      	ldr	r3, [pc, #276]	@ (80074dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d07b      	beq.n	80074ca <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	0c9b      	lsrs	r3, r3, #18
 80073d6:	f003 030f 	and.w	r3, r3, #15
 80073da:	4a41      	ldr	r2, [pc, #260]	@ (80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80073dc:	5cd3      	ldrb	r3, [r2, r3]
 80073de:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d015      	beq.n	8007416 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80073ea:	4b3c      	ldr	r3, [pc, #240]	@ (80074dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	0c5b      	lsrs	r3, r3, #17
 80073f0:	f003 0301 	and.w	r3, r3, #1
 80073f4:	4a3b      	ldr	r2, [pc, #236]	@ (80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80073f6:	5cd3      	ldrb	r3, [r2, r3]
 80073f8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00d      	beq.n	8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8007404:	4a38      	ldr	r2, [pc, #224]	@ (80074e8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	fbb2 f2f3 	udiv	r2, r2, r3
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	fb02 f303 	mul.w	r3, r2, r3
 8007412:	61fb      	str	r3, [r7, #28]
 8007414:	e004      	b.n	8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	4a34      	ldr	r2, [pc, #208]	@ (80074ec <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800741a:	fb02 f303 	mul.w	r3, r2, r3
 800741e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8007420:	4b2e      	ldr	r3, [pc, #184]	@ (80074dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007428:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800742c:	d102      	bne.n	8007434 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800742e:	69fb      	ldr	r3, [r7, #28]
 8007430:	61bb      	str	r3, [r7, #24]
      break;
 8007432:	e04a      	b.n	80074ca <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	005b      	lsls	r3, r3, #1
 8007438:	4a2d      	ldr	r2, [pc, #180]	@ (80074f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800743a:	fba2 2303 	umull	r2, r3, r2, r3
 800743e:	085b      	lsrs	r3, r3, #1
 8007440:	61bb      	str	r3, [r7, #24]
      break;
 8007442:	e042      	b.n	80074ca <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8007444:	4b25      	ldr	r3, [pc, #148]	@ (80074dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007446:	6a1b      	ldr	r3, [r3, #32]
 8007448:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007450:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007454:	d108      	bne.n	8007468 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f003 0302 	and.w	r3, r3, #2
 800745c:	2b00      	cmp	r3, #0
 800745e:	d003      	beq.n	8007468 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8007460:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007464:	61bb      	str	r3, [r7, #24]
 8007466:	e01f      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800746e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007472:	d109      	bne.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8007474:	4b19      	ldr	r3, [pc, #100]	@ (80074dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007478:	f003 0302 	and.w	r3, r3, #2
 800747c:	2b00      	cmp	r3, #0
 800747e:	d003      	beq.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8007480:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8007484:	61bb      	str	r3, [r7, #24]
 8007486:	e00f      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800748e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007492:	d11c      	bne.n	80074ce <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8007494:	4b11      	ldr	r3, [pc, #68]	@ (80074dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800749c:	2b00      	cmp	r3, #0
 800749e:	d016      	beq.n	80074ce <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80074a0:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80074a4:	61bb      	str	r3, [r7, #24]
      break;
 80074a6:	e012      	b.n	80074ce <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80074a8:	e011      	b.n	80074ce <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80074aa:	f7ff fe85 	bl	80071b8 <HAL_RCC_GetPCLK2Freq>
 80074ae:	4602      	mov	r2, r0
 80074b0:	4b0a      	ldr	r3, [pc, #40]	@ (80074dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	0b9b      	lsrs	r3, r3, #14
 80074b6:	f003 0303 	and.w	r3, r3, #3
 80074ba:	3301      	adds	r3, #1
 80074bc:	005b      	lsls	r3, r3, #1
 80074be:	fbb2 f3f3 	udiv	r3, r2, r3
 80074c2:	61bb      	str	r3, [r7, #24]
      break;
 80074c4:	e004      	b.n	80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80074c6:	bf00      	nop
 80074c8:	e002      	b.n	80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80074ca:	bf00      	nop
 80074cc:	e000      	b.n	80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80074ce:	bf00      	nop
    }
  }
  return (frequency);
 80074d0:	69bb      	ldr	r3, [r7, #24]
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3720      	adds	r7, #32
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	40021000 	.word	0x40021000
 80074e0:	0800c6cc 	.word	0x0800c6cc
 80074e4:	0800c6dc 	.word	0x0800c6dc
 80074e8:	007a1200 	.word	0x007a1200
 80074ec:	003d0900 	.word	0x003d0900
 80074f0:	aaaaaaab 	.word	0xaaaaaaab

080074f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b082      	sub	sp, #8
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d101      	bne.n	8007506 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	e041      	b.n	800758a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800750c:	b2db      	uxtb	r3, r3
 800750e:	2b00      	cmp	r3, #0
 8007510:	d106      	bne.n	8007520 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f7fc fd9c 	bl	8004058 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2202      	movs	r2, #2
 8007524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	3304      	adds	r3, #4
 8007530:	4619      	mov	r1, r3
 8007532:	4610      	mov	r0, r2
 8007534:	f000 fdd4 	bl	80080e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2201      	movs	r2, #1
 800753c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2201      	movs	r2, #1
 8007544:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2201      	movs	r2, #1
 800754c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2201      	movs	r2, #1
 8007554:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2201      	movs	r2, #1
 800755c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2201      	movs	r2, #1
 8007564:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2201      	movs	r2, #1
 8007574:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007588:	2300      	movs	r3, #0
}
 800758a:	4618      	mov	r0, r3
 800758c:	3708      	adds	r7, #8
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}

08007592 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007592:	b580      	push	{r7, lr}
 8007594:	b082      	sub	sp, #8
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d101      	bne.n	80075a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	e041      	b.n	8007628 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d106      	bne.n	80075be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 f839 	bl	8007630 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2202      	movs	r2, #2
 80075c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	3304      	adds	r3, #4
 80075ce:	4619      	mov	r1, r3
 80075d0:	4610      	mov	r0, r2
 80075d2:	f000 fd85 	bl	80080e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2201      	movs	r2, #1
 80075da:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2201      	movs	r2, #1
 80075e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2201      	movs	r2, #1
 80075ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2201      	movs	r2, #1
 80075f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2201      	movs	r2, #1
 80075fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2201      	movs	r2, #1
 8007602:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2201      	movs	r2, #1
 800760a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2201      	movs	r2, #1
 8007612:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2201      	movs	r2, #1
 800761a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2201      	movs	r2, #1
 8007622:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007626:	2300      	movs	r3, #0
}
 8007628:	4618      	mov	r0, r3
 800762a:	3708      	adds	r7, #8
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007630:	b480      	push	{r7}
 8007632:	b083      	sub	sp, #12
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007638:	bf00      	nop
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	bc80      	pop	{r7}
 8007640:	4770      	bx	lr
	...

08007644 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d109      	bne.n	8007668 <HAL_TIM_PWM_Start+0x24>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800765a:	b2db      	uxtb	r3, r3
 800765c:	2b01      	cmp	r3, #1
 800765e:	bf14      	ite	ne
 8007660:	2301      	movne	r3, #1
 8007662:	2300      	moveq	r3, #0
 8007664:	b2db      	uxtb	r3, r3
 8007666:	e022      	b.n	80076ae <HAL_TIM_PWM_Start+0x6a>
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	2b04      	cmp	r3, #4
 800766c:	d109      	bne.n	8007682 <HAL_TIM_PWM_Start+0x3e>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007674:	b2db      	uxtb	r3, r3
 8007676:	2b01      	cmp	r3, #1
 8007678:	bf14      	ite	ne
 800767a:	2301      	movne	r3, #1
 800767c:	2300      	moveq	r3, #0
 800767e:	b2db      	uxtb	r3, r3
 8007680:	e015      	b.n	80076ae <HAL_TIM_PWM_Start+0x6a>
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	2b08      	cmp	r3, #8
 8007686:	d109      	bne.n	800769c <HAL_TIM_PWM_Start+0x58>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800768e:	b2db      	uxtb	r3, r3
 8007690:	2b01      	cmp	r3, #1
 8007692:	bf14      	ite	ne
 8007694:	2301      	movne	r3, #1
 8007696:	2300      	moveq	r3, #0
 8007698:	b2db      	uxtb	r3, r3
 800769a:	e008      	b.n	80076ae <HAL_TIM_PWM_Start+0x6a>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076a2:	b2db      	uxtb	r3, r3
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	bf14      	ite	ne
 80076a8:	2301      	movne	r3, #1
 80076aa:	2300      	moveq	r3, #0
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d001      	beq.n	80076b6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	e05e      	b.n	8007774 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d104      	bne.n	80076c6 <HAL_TIM_PWM_Start+0x82>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2202      	movs	r2, #2
 80076c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076c4:	e013      	b.n	80076ee <HAL_TIM_PWM_Start+0xaa>
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	2b04      	cmp	r3, #4
 80076ca:	d104      	bne.n	80076d6 <HAL_TIM_PWM_Start+0x92>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2202      	movs	r2, #2
 80076d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80076d4:	e00b      	b.n	80076ee <HAL_TIM_PWM_Start+0xaa>
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	2b08      	cmp	r3, #8
 80076da:	d104      	bne.n	80076e6 <HAL_TIM_PWM_Start+0xa2>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2202      	movs	r2, #2
 80076e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80076e4:	e003      	b.n	80076ee <HAL_TIM_PWM_Start+0xaa>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2202      	movs	r2, #2
 80076ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	2201      	movs	r2, #1
 80076f4:	6839      	ldr	r1, [r7, #0]
 80076f6:	4618      	mov	r0, r3
 80076f8:	f000 ff7e 	bl	80085f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a1e      	ldr	r2, [pc, #120]	@ (800777c <HAL_TIM_PWM_Start+0x138>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d107      	bne.n	8007716 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007714:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a18      	ldr	r2, [pc, #96]	@ (800777c <HAL_TIM_PWM_Start+0x138>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d00e      	beq.n	800773e <HAL_TIM_PWM_Start+0xfa>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007728:	d009      	beq.n	800773e <HAL_TIM_PWM_Start+0xfa>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a14      	ldr	r2, [pc, #80]	@ (8007780 <HAL_TIM_PWM_Start+0x13c>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d004      	beq.n	800773e <HAL_TIM_PWM_Start+0xfa>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a12      	ldr	r2, [pc, #72]	@ (8007784 <HAL_TIM_PWM_Start+0x140>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d111      	bne.n	8007762 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	f003 0307 	and.w	r3, r3, #7
 8007748:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2b06      	cmp	r3, #6
 800774e:	d010      	beq.n	8007772 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f042 0201 	orr.w	r2, r2, #1
 800775e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007760:	e007      	b.n	8007772 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f042 0201 	orr.w	r2, r2, #1
 8007770:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007772:	2300      	movs	r3, #0
}
 8007774:	4618      	mov	r0, r3
 8007776:	3710      	adds	r7, #16
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}
 800777c:	40012c00 	.word	0x40012c00
 8007780:	40000400 	.word	0x40000400
 8007784:	40000800 	.word	0x40000800

08007788 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	2200      	movs	r2, #0
 8007798:	6839      	ldr	r1, [r7, #0]
 800779a:	4618      	mov	r0, r3
 800779c:	f000 ff2c 	bl	80085f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a29      	ldr	r2, [pc, #164]	@ (800784c <HAL_TIM_PWM_Stop+0xc4>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d117      	bne.n	80077da <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	6a1a      	ldr	r2, [r3, #32]
 80077b0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80077b4:	4013      	ands	r3, r2
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d10f      	bne.n	80077da <HAL_TIM_PWM_Stop+0x52>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	6a1a      	ldr	r2, [r3, #32]
 80077c0:	f240 4344 	movw	r3, #1092	@ 0x444
 80077c4:	4013      	ands	r3, r2
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d107      	bne.n	80077da <HAL_TIM_PWM_Stop+0x52>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80077d8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	6a1a      	ldr	r2, [r3, #32]
 80077e0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80077e4:	4013      	ands	r3, r2
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d10f      	bne.n	800780a <HAL_TIM_PWM_Stop+0x82>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	6a1a      	ldr	r2, [r3, #32]
 80077f0:	f240 4344 	movw	r3, #1092	@ 0x444
 80077f4:	4013      	ands	r3, r2
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d107      	bne.n	800780a <HAL_TIM_PWM_Stop+0x82>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f022 0201 	bic.w	r2, r2, #1
 8007808:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d104      	bne.n	800781a <HAL_TIM_PWM_Stop+0x92>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2201      	movs	r2, #1
 8007814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007818:	e013      	b.n	8007842 <HAL_TIM_PWM_Stop+0xba>
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	2b04      	cmp	r3, #4
 800781e:	d104      	bne.n	800782a <HAL_TIM_PWM_Stop+0xa2>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007828:	e00b      	b.n	8007842 <HAL_TIM_PWM_Stop+0xba>
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	2b08      	cmp	r3, #8
 800782e:	d104      	bne.n	800783a <HAL_TIM_PWM_Stop+0xb2>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007838:	e003      	b.n	8007842 <HAL_TIM_PWM_Stop+0xba>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2201      	movs	r2, #1
 800783e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8007842:	2300      	movs	r3, #0
}
 8007844:	4618      	mov	r0, r3
 8007846:	3708      	adds	r7, #8
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}
 800784c:	40012c00 	.word	0x40012c00

08007850 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800785a:	2300      	movs	r3, #0
 800785c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d109      	bne.n	8007878 <HAL_TIM_PWM_Start_IT+0x28>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800786a:	b2db      	uxtb	r3, r3
 800786c:	2b01      	cmp	r3, #1
 800786e:	bf14      	ite	ne
 8007870:	2301      	movne	r3, #1
 8007872:	2300      	moveq	r3, #0
 8007874:	b2db      	uxtb	r3, r3
 8007876:	e022      	b.n	80078be <HAL_TIM_PWM_Start_IT+0x6e>
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	2b04      	cmp	r3, #4
 800787c:	d109      	bne.n	8007892 <HAL_TIM_PWM_Start_IT+0x42>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007884:	b2db      	uxtb	r3, r3
 8007886:	2b01      	cmp	r3, #1
 8007888:	bf14      	ite	ne
 800788a:	2301      	movne	r3, #1
 800788c:	2300      	moveq	r3, #0
 800788e:	b2db      	uxtb	r3, r3
 8007890:	e015      	b.n	80078be <HAL_TIM_PWM_Start_IT+0x6e>
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	2b08      	cmp	r3, #8
 8007896:	d109      	bne.n	80078ac <HAL_TIM_PWM_Start_IT+0x5c>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	bf14      	ite	ne
 80078a4:	2301      	movne	r3, #1
 80078a6:	2300      	moveq	r3, #0
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	e008      	b.n	80078be <HAL_TIM_PWM_Start_IT+0x6e>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	bf14      	ite	ne
 80078b8:	2301      	movne	r3, #1
 80078ba:	2300      	moveq	r3, #0
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d001      	beq.n	80078c6 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	e0a9      	b.n	8007a1a <HAL_TIM_PWM_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d104      	bne.n	80078d6 <HAL_TIM_PWM_Start_IT+0x86>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2202      	movs	r2, #2
 80078d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80078d4:	e013      	b.n	80078fe <HAL_TIM_PWM_Start_IT+0xae>
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	2b04      	cmp	r3, #4
 80078da:	d104      	bne.n	80078e6 <HAL_TIM_PWM_Start_IT+0x96>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2202      	movs	r2, #2
 80078e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80078e4:	e00b      	b.n	80078fe <HAL_TIM_PWM_Start_IT+0xae>
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	2b08      	cmp	r3, #8
 80078ea:	d104      	bne.n	80078f6 <HAL_TIM_PWM_Start_IT+0xa6>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2202      	movs	r2, #2
 80078f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80078f4:	e003      	b.n	80078fe <HAL_TIM_PWM_Start_IT+0xae>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2202      	movs	r2, #2
 80078fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	2b0c      	cmp	r3, #12
 8007902:	d841      	bhi.n	8007988 <HAL_TIM_PWM_Start_IT+0x138>
 8007904:	a201      	add	r2, pc, #4	@ (adr r2, 800790c <HAL_TIM_PWM_Start_IT+0xbc>)
 8007906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800790a:	bf00      	nop
 800790c:	08007941 	.word	0x08007941
 8007910:	08007989 	.word	0x08007989
 8007914:	08007989 	.word	0x08007989
 8007918:	08007989 	.word	0x08007989
 800791c:	08007953 	.word	0x08007953
 8007920:	08007989 	.word	0x08007989
 8007924:	08007989 	.word	0x08007989
 8007928:	08007989 	.word	0x08007989
 800792c:	08007965 	.word	0x08007965
 8007930:	08007989 	.word	0x08007989
 8007934:	08007989 	.word	0x08007989
 8007938:	08007989 	.word	0x08007989
 800793c:	08007977 	.word	0x08007977
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	68da      	ldr	r2, [r3, #12]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f042 0202 	orr.w	r2, r2, #2
 800794e:	60da      	str	r2, [r3, #12]
      break;
 8007950:	e01d      	b.n	800798e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	68da      	ldr	r2, [r3, #12]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f042 0204 	orr.w	r2, r2, #4
 8007960:	60da      	str	r2, [r3, #12]
      break;
 8007962:	e014      	b.n	800798e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	68da      	ldr	r2, [r3, #12]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f042 0208 	orr.w	r2, r2, #8
 8007972:	60da      	str	r2, [r3, #12]
      break;
 8007974:	e00b      	b.n	800798e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	68da      	ldr	r2, [r3, #12]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f042 0210 	orr.w	r2, r2, #16
 8007984:	60da      	str	r2, [r3, #12]
      break;
 8007986:	e002      	b.n	800798e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8007988:	2301      	movs	r3, #1
 800798a:	73fb      	strb	r3, [r7, #15]
      break;
 800798c:	bf00      	nop
  }

  if (status == HAL_OK)
 800798e:	7bfb      	ldrb	r3, [r7, #15]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d141      	bne.n	8007a18 <HAL_TIM_PWM_Start_IT+0x1c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	2201      	movs	r2, #1
 800799a:	6839      	ldr	r1, [r7, #0]
 800799c:	4618      	mov	r0, r3
 800799e:	f000 fe2b 	bl	80085f8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a1f      	ldr	r2, [pc, #124]	@ (8007a24 <HAL_TIM_PWM_Start_IT+0x1d4>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d107      	bne.n	80079bc <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80079ba:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a18      	ldr	r2, [pc, #96]	@ (8007a24 <HAL_TIM_PWM_Start_IT+0x1d4>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d00e      	beq.n	80079e4 <HAL_TIM_PWM_Start_IT+0x194>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079ce:	d009      	beq.n	80079e4 <HAL_TIM_PWM_Start_IT+0x194>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a14      	ldr	r2, [pc, #80]	@ (8007a28 <HAL_TIM_PWM_Start_IT+0x1d8>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d004      	beq.n	80079e4 <HAL_TIM_PWM_Start_IT+0x194>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a13      	ldr	r2, [pc, #76]	@ (8007a2c <HAL_TIM_PWM_Start_IT+0x1dc>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d111      	bne.n	8007a08 <HAL_TIM_PWM_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	f003 0307 	and.w	r3, r3, #7
 80079ee:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	2b06      	cmp	r3, #6
 80079f4:	d010      	beq.n	8007a18 <HAL_TIM_PWM_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f042 0201 	orr.w	r2, r2, #1
 8007a04:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a06:	e007      	b.n	8007a18 <HAL_TIM_PWM_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f042 0201 	orr.w	r2, r2, #1
 8007a16:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3710      	adds	r7, #16
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	40012c00 	.word	0x40012c00
 8007a28:	40000400 	.word	0x40000400
 8007a2c:	40000800 	.word	0x40000800

08007a30 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	2b0c      	cmp	r3, #12
 8007a42:	d841      	bhi.n	8007ac8 <HAL_TIM_PWM_Stop_IT+0x98>
 8007a44:	a201      	add	r2, pc, #4	@ (adr r2, 8007a4c <HAL_TIM_PWM_Stop_IT+0x1c>)
 8007a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a4a:	bf00      	nop
 8007a4c:	08007a81 	.word	0x08007a81
 8007a50:	08007ac9 	.word	0x08007ac9
 8007a54:	08007ac9 	.word	0x08007ac9
 8007a58:	08007ac9 	.word	0x08007ac9
 8007a5c:	08007a93 	.word	0x08007a93
 8007a60:	08007ac9 	.word	0x08007ac9
 8007a64:	08007ac9 	.word	0x08007ac9
 8007a68:	08007ac9 	.word	0x08007ac9
 8007a6c:	08007aa5 	.word	0x08007aa5
 8007a70:	08007ac9 	.word	0x08007ac9
 8007a74:	08007ac9 	.word	0x08007ac9
 8007a78:	08007ac9 	.word	0x08007ac9
 8007a7c:	08007ab7 	.word	0x08007ab7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	68da      	ldr	r2, [r3, #12]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f022 0202 	bic.w	r2, r2, #2
 8007a8e:	60da      	str	r2, [r3, #12]
      break;
 8007a90:	e01d      	b.n	8007ace <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	68da      	ldr	r2, [r3, #12]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f022 0204 	bic.w	r2, r2, #4
 8007aa0:	60da      	str	r2, [r3, #12]
      break;
 8007aa2:	e014      	b.n	8007ace <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	68da      	ldr	r2, [r3, #12]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f022 0208 	bic.w	r2, r2, #8
 8007ab2:	60da      	str	r2, [r3, #12]
      break;
 8007ab4:	e00b      	b.n	8007ace <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	68da      	ldr	r2, [r3, #12]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f022 0210 	bic.w	r2, r2, #16
 8007ac4:	60da      	str	r2, [r3, #12]
      break;
 8007ac6:	e002      	b.n	8007ace <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	73fb      	strb	r3, [r7, #15]
      break;
 8007acc:	bf00      	nop
  }

  if (status == HAL_OK)
 8007ace:	7bfb      	ldrb	r3, [r7, #15]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d157      	bne.n	8007b84 <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	6839      	ldr	r1, [r7, #0]
 8007adc:	4618      	mov	r0, r3
 8007ade:	f000 fd8b 	bl	80085f8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a2a      	ldr	r2, [pc, #168]	@ (8007b90 <HAL_TIM_PWM_Stop_IT+0x160>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d117      	bne.n	8007b1c <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	6a1a      	ldr	r2, [r3, #32]
 8007af2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007af6:	4013      	ands	r3, r2
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d10f      	bne.n	8007b1c <HAL_TIM_PWM_Stop_IT+0xec>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	6a1a      	ldr	r2, [r3, #32]
 8007b02:	f240 4344 	movw	r3, #1092	@ 0x444
 8007b06:	4013      	ands	r3, r2
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d107      	bne.n	8007b1c <HAL_TIM_PWM_Stop_IT+0xec>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007b1a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	6a1a      	ldr	r2, [r3, #32]
 8007b22:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007b26:	4013      	ands	r3, r2
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d10f      	bne.n	8007b4c <HAL_TIM_PWM_Stop_IT+0x11c>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	6a1a      	ldr	r2, [r3, #32]
 8007b32:	f240 4344 	movw	r3, #1092	@ 0x444
 8007b36:	4013      	ands	r3, r2
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d107      	bne.n	8007b4c <HAL_TIM_PWM_Stop_IT+0x11c>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f022 0201 	bic.w	r2, r2, #1
 8007b4a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d104      	bne.n	8007b5c <HAL_TIM_PWM_Stop_IT+0x12c>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2201      	movs	r2, #1
 8007b56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b5a:	e013      	b.n	8007b84 <HAL_TIM_PWM_Stop_IT+0x154>
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	2b04      	cmp	r3, #4
 8007b60:	d104      	bne.n	8007b6c <HAL_TIM_PWM_Stop_IT+0x13c>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2201      	movs	r2, #1
 8007b66:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b6a:	e00b      	b.n	8007b84 <HAL_TIM_PWM_Stop_IT+0x154>
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	2b08      	cmp	r3, #8
 8007b70:	d104      	bne.n	8007b7c <HAL_TIM_PWM_Stop_IT+0x14c>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2201      	movs	r2, #1
 8007b76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b7a:	e003      	b.n	8007b84 <HAL_TIM_PWM_Stop_IT+0x154>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8007b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3710      	adds	r7, #16
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	40012c00 	.word	0x40012c00

08007b94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	691b      	ldr	r3, [r3, #16]
 8007baa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	f003 0302 	and.w	r3, r3, #2
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d020      	beq.n	8007bf8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f003 0302 	and.w	r3, r3, #2
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d01b      	beq.n	8007bf8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f06f 0202 	mvn.w	r2, #2
 8007bc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2201      	movs	r2, #1
 8007bce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	699b      	ldr	r3, [r3, #24]
 8007bd6:	f003 0303 	and.w	r3, r3, #3
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d003      	beq.n	8007be6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 fa63 	bl	80080aa <HAL_TIM_IC_CaptureCallback>
 8007be4:	e005      	b.n	8007bf2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 fa56 	bl	8008098 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 fa65 	bl	80080bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	f003 0304 	and.w	r3, r3, #4
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d020      	beq.n	8007c44 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f003 0304 	and.w	r3, r3, #4
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d01b      	beq.n	8007c44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f06f 0204 	mvn.w	r2, #4
 8007c14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2202      	movs	r2, #2
 8007c1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	699b      	ldr	r3, [r3, #24]
 8007c22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d003      	beq.n	8007c32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 fa3d 	bl	80080aa <HAL_TIM_IC_CaptureCallback>
 8007c30:	e005      	b.n	8007c3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 fa30 	bl	8008098 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 fa3f 	bl	80080bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	f003 0308 	and.w	r3, r3, #8
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d020      	beq.n	8007c90 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f003 0308 	and.w	r3, r3, #8
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d01b      	beq.n	8007c90 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f06f 0208 	mvn.w	r2, #8
 8007c60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2204      	movs	r2, #4
 8007c66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	69db      	ldr	r3, [r3, #28]
 8007c6e:	f003 0303 	and.w	r3, r3, #3
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d003      	beq.n	8007c7e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 fa17 	bl	80080aa <HAL_TIM_IC_CaptureCallback>
 8007c7c:	e005      	b.n	8007c8a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 fa0a 	bl	8008098 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 fa19 	bl	80080bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	f003 0310 	and.w	r3, r3, #16
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d020      	beq.n	8007cdc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f003 0310 	and.w	r3, r3, #16
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d01b      	beq.n	8007cdc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f06f 0210 	mvn.w	r2, #16
 8007cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2208      	movs	r2, #8
 8007cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	69db      	ldr	r3, [r3, #28]
 8007cba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d003      	beq.n	8007cca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 f9f1 	bl	80080aa <HAL_TIM_IC_CaptureCallback>
 8007cc8:	e005      	b.n	8007cd6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 f9e4 	bl	8008098 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 f9f3 	bl	80080bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	f003 0301 	and.w	r3, r3, #1
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d00c      	beq.n	8007d00 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f003 0301 	and.w	r3, r3, #1
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d007      	beq.n	8007d00 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f06f 0201 	mvn.w	r2, #1
 8007cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 f9c3 	bl	8008086 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00c      	beq.n	8007d24 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d007      	beq.n	8007d24 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 fcf5 	bl	800870e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d00c      	beq.n	8007d48 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d007      	beq.n	8007d48 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 f9c3 	bl	80080ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	f003 0320 	and.w	r3, r3, #32
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d00c      	beq.n	8007d6c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	f003 0320 	and.w	r3, r3, #32
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d007      	beq.n	8007d6c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f06f 0220 	mvn.w	r2, #32
 8007d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 fcc8 	bl	80086fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d6c:	bf00      	nop
 8007d6e:	3710      	adds	r7, #16
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b086      	sub	sp, #24
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d80:	2300      	movs	r3, #0
 8007d82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d101      	bne.n	8007d92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007d8e:	2302      	movs	r3, #2
 8007d90:	e0ae      	b.n	8007ef0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2201      	movs	r2, #1
 8007d96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2b0c      	cmp	r3, #12
 8007d9e:	f200 809f 	bhi.w	8007ee0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007da2:	a201      	add	r2, pc, #4	@ (adr r2, 8007da8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da8:	08007ddd 	.word	0x08007ddd
 8007dac:	08007ee1 	.word	0x08007ee1
 8007db0:	08007ee1 	.word	0x08007ee1
 8007db4:	08007ee1 	.word	0x08007ee1
 8007db8:	08007e1d 	.word	0x08007e1d
 8007dbc:	08007ee1 	.word	0x08007ee1
 8007dc0:	08007ee1 	.word	0x08007ee1
 8007dc4:	08007ee1 	.word	0x08007ee1
 8007dc8:	08007e5f 	.word	0x08007e5f
 8007dcc:	08007ee1 	.word	0x08007ee1
 8007dd0:	08007ee1 	.word	0x08007ee1
 8007dd4:	08007ee1 	.word	0x08007ee1
 8007dd8:	08007e9f 	.word	0x08007e9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	68b9      	ldr	r1, [r7, #8]
 8007de2:	4618      	mov	r0, r3
 8007de4:	f000 f9ea 	bl	80081bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	699a      	ldr	r2, [r3, #24]
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f042 0208 	orr.w	r2, r2, #8
 8007df6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	699a      	ldr	r2, [r3, #24]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f022 0204 	bic.w	r2, r2, #4
 8007e06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	6999      	ldr	r1, [r3, #24]
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	691a      	ldr	r2, [r3, #16]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	430a      	orrs	r2, r1
 8007e18:	619a      	str	r2, [r3, #24]
      break;
 8007e1a:	e064      	b.n	8007ee6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	68b9      	ldr	r1, [r7, #8]
 8007e22:	4618      	mov	r0, r3
 8007e24:	f000 fa30 	bl	8008288 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	699a      	ldr	r2, [r3, #24]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	699a      	ldr	r2, [r3, #24]
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	6999      	ldr	r1, [r3, #24]
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	691b      	ldr	r3, [r3, #16]
 8007e52:	021a      	lsls	r2, r3, #8
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	430a      	orrs	r2, r1
 8007e5a:	619a      	str	r2, [r3, #24]
      break;
 8007e5c:	e043      	b.n	8007ee6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	68b9      	ldr	r1, [r7, #8]
 8007e64:	4618      	mov	r0, r3
 8007e66:	f000 fa79 	bl	800835c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	69da      	ldr	r2, [r3, #28]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f042 0208 	orr.w	r2, r2, #8
 8007e78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	69da      	ldr	r2, [r3, #28]
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f022 0204 	bic.w	r2, r2, #4
 8007e88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	69d9      	ldr	r1, [r3, #28]
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	691a      	ldr	r2, [r3, #16]
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	430a      	orrs	r2, r1
 8007e9a:	61da      	str	r2, [r3, #28]
      break;
 8007e9c:	e023      	b.n	8007ee6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	68b9      	ldr	r1, [r7, #8]
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f000 fac3 	bl	8008430 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	69da      	ldr	r2, [r3, #28]
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007eb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	69da      	ldr	r2, [r3, #28]
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ec8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	69d9      	ldr	r1, [r3, #28]
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	691b      	ldr	r3, [r3, #16]
 8007ed4:	021a      	lsls	r2, r3, #8
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	430a      	orrs	r2, r1
 8007edc:	61da      	str	r2, [r3, #28]
      break;
 8007ede:	e002      	b.n	8007ee6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	75fb      	strb	r3, [r7, #23]
      break;
 8007ee4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007eee:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3718      	adds	r7, #24
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f02:	2300      	movs	r3, #0
 8007f04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d101      	bne.n	8007f14 <HAL_TIM_ConfigClockSource+0x1c>
 8007f10:	2302      	movs	r3, #2
 8007f12:	e0b4      	b.n	800807e <HAL_TIM_ConfigClockSource+0x186>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2202      	movs	r2, #2
 8007f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007f32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007f3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	68ba      	ldr	r2, [r7, #8]
 8007f42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f4c:	d03e      	beq.n	8007fcc <HAL_TIM_ConfigClockSource+0xd4>
 8007f4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f52:	f200 8087 	bhi.w	8008064 <HAL_TIM_ConfigClockSource+0x16c>
 8007f56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f5a:	f000 8086 	beq.w	800806a <HAL_TIM_ConfigClockSource+0x172>
 8007f5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f62:	d87f      	bhi.n	8008064 <HAL_TIM_ConfigClockSource+0x16c>
 8007f64:	2b70      	cmp	r3, #112	@ 0x70
 8007f66:	d01a      	beq.n	8007f9e <HAL_TIM_ConfigClockSource+0xa6>
 8007f68:	2b70      	cmp	r3, #112	@ 0x70
 8007f6a:	d87b      	bhi.n	8008064 <HAL_TIM_ConfigClockSource+0x16c>
 8007f6c:	2b60      	cmp	r3, #96	@ 0x60
 8007f6e:	d050      	beq.n	8008012 <HAL_TIM_ConfigClockSource+0x11a>
 8007f70:	2b60      	cmp	r3, #96	@ 0x60
 8007f72:	d877      	bhi.n	8008064 <HAL_TIM_ConfigClockSource+0x16c>
 8007f74:	2b50      	cmp	r3, #80	@ 0x50
 8007f76:	d03c      	beq.n	8007ff2 <HAL_TIM_ConfigClockSource+0xfa>
 8007f78:	2b50      	cmp	r3, #80	@ 0x50
 8007f7a:	d873      	bhi.n	8008064 <HAL_TIM_ConfigClockSource+0x16c>
 8007f7c:	2b40      	cmp	r3, #64	@ 0x40
 8007f7e:	d058      	beq.n	8008032 <HAL_TIM_ConfigClockSource+0x13a>
 8007f80:	2b40      	cmp	r3, #64	@ 0x40
 8007f82:	d86f      	bhi.n	8008064 <HAL_TIM_ConfigClockSource+0x16c>
 8007f84:	2b30      	cmp	r3, #48	@ 0x30
 8007f86:	d064      	beq.n	8008052 <HAL_TIM_ConfigClockSource+0x15a>
 8007f88:	2b30      	cmp	r3, #48	@ 0x30
 8007f8a:	d86b      	bhi.n	8008064 <HAL_TIM_ConfigClockSource+0x16c>
 8007f8c:	2b20      	cmp	r3, #32
 8007f8e:	d060      	beq.n	8008052 <HAL_TIM_ConfigClockSource+0x15a>
 8007f90:	2b20      	cmp	r3, #32
 8007f92:	d867      	bhi.n	8008064 <HAL_TIM_ConfigClockSource+0x16c>
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d05c      	beq.n	8008052 <HAL_TIM_ConfigClockSource+0x15a>
 8007f98:	2b10      	cmp	r3, #16
 8007f9a:	d05a      	beq.n	8008052 <HAL_TIM_ConfigClockSource+0x15a>
 8007f9c:	e062      	b.n	8008064 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007fae:	f000 fb04 	bl	80085ba <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	689b      	ldr	r3, [r3, #8]
 8007fb8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007fc0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	68ba      	ldr	r2, [r7, #8]
 8007fc8:	609a      	str	r2, [r3, #8]
      break;
 8007fca:	e04f      	b.n	800806c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007fdc:	f000 faed 	bl	80085ba <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	689a      	ldr	r2, [r3, #8]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007fee:	609a      	str	r2, [r3, #8]
      break;
 8007ff0:	e03c      	b.n	800806c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ffe:	461a      	mov	r2, r3
 8008000:	f000 fa64 	bl	80084cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	2150      	movs	r1, #80	@ 0x50
 800800a:	4618      	mov	r0, r3
 800800c:	f000 fabb 	bl	8008586 <TIM_ITRx_SetConfig>
      break;
 8008010:	e02c      	b.n	800806c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800801e:	461a      	mov	r2, r3
 8008020:	f000 fa82 	bl	8008528 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	2160      	movs	r1, #96	@ 0x60
 800802a:	4618      	mov	r0, r3
 800802c:	f000 faab 	bl	8008586 <TIM_ITRx_SetConfig>
      break;
 8008030:	e01c      	b.n	800806c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800803e:	461a      	mov	r2, r3
 8008040:	f000 fa44 	bl	80084cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2140      	movs	r1, #64	@ 0x40
 800804a:	4618      	mov	r0, r3
 800804c:	f000 fa9b 	bl	8008586 <TIM_ITRx_SetConfig>
      break;
 8008050:	e00c      	b.n	800806c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4619      	mov	r1, r3
 800805c:	4610      	mov	r0, r2
 800805e:	f000 fa92 	bl	8008586 <TIM_ITRx_SetConfig>
      break;
 8008062:	e003      	b.n	800806c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008064:	2301      	movs	r3, #1
 8008066:	73fb      	strb	r3, [r7, #15]
      break;
 8008068:	e000      	b.n	800806c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800806a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2201      	movs	r2, #1
 8008070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800807c:	7bfb      	ldrb	r3, [r7, #15]
}
 800807e:	4618      	mov	r0, r3
 8008080:	3710      	adds	r7, #16
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}

08008086 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008086:	b480      	push	{r7}
 8008088:	b083      	sub	sp, #12
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800808e:	bf00      	nop
 8008090:	370c      	adds	r7, #12
 8008092:	46bd      	mov	sp, r7
 8008094:	bc80      	pop	{r7}
 8008096:	4770      	bx	lr

08008098 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80080a0:	bf00      	nop
 80080a2:	370c      	adds	r7, #12
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bc80      	pop	{r7}
 80080a8:	4770      	bx	lr

080080aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80080aa:	b480      	push	{r7}
 80080ac:	b083      	sub	sp, #12
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80080b2:	bf00      	nop
 80080b4:	370c      	adds	r7, #12
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bc80      	pop	{r7}
 80080ba:	4770      	bx	lr

080080bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80080bc:	b480      	push	{r7}
 80080be:	b083      	sub	sp, #12
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80080c4:	bf00      	nop
 80080c6:	370c      	adds	r7, #12
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bc80      	pop	{r7}
 80080cc:	4770      	bx	lr

080080ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80080ce:	b480      	push	{r7}
 80080d0:	b083      	sub	sp, #12
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80080d6:	bf00      	nop
 80080d8:	370c      	adds	r7, #12
 80080da:	46bd      	mov	sp, r7
 80080dc:	bc80      	pop	{r7}
 80080de:	4770      	bx	lr

080080e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b085      	sub	sp, #20
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4a2f      	ldr	r2, [pc, #188]	@ (80081b0 <TIM_Base_SetConfig+0xd0>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d00b      	beq.n	8008110 <TIM_Base_SetConfig+0x30>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080fe:	d007      	beq.n	8008110 <TIM_Base_SetConfig+0x30>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	4a2c      	ldr	r2, [pc, #176]	@ (80081b4 <TIM_Base_SetConfig+0xd4>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d003      	beq.n	8008110 <TIM_Base_SetConfig+0x30>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	4a2b      	ldr	r2, [pc, #172]	@ (80081b8 <TIM_Base_SetConfig+0xd8>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d108      	bne.n	8008122 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008116:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	68fa      	ldr	r2, [r7, #12]
 800811e:	4313      	orrs	r3, r2
 8008120:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	4a22      	ldr	r2, [pc, #136]	@ (80081b0 <TIM_Base_SetConfig+0xd0>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d00b      	beq.n	8008142 <TIM_Base_SetConfig+0x62>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008130:	d007      	beq.n	8008142 <TIM_Base_SetConfig+0x62>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a1f      	ldr	r2, [pc, #124]	@ (80081b4 <TIM_Base_SetConfig+0xd4>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d003      	beq.n	8008142 <TIM_Base_SetConfig+0x62>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4a1e      	ldr	r2, [pc, #120]	@ (80081b8 <TIM_Base_SetConfig+0xd8>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d108      	bne.n	8008154 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008148:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	68db      	ldr	r3, [r3, #12]
 800814e:	68fa      	ldr	r2, [r7, #12]
 8008150:	4313      	orrs	r3, r2
 8008152:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	695b      	ldr	r3, [r3, #20]
 800815e:	4313      	orrs	r3, r2
 8008160:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	68fa      	ldr	r2, [r7, #12]
 8008166:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	689a      	ldr	r2, [r3, #8]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	681a      	ldr	r2, [r3, #0]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	4a0d      	ldr	r2, [pc, #52]	@ (80081b0 <TIM_Base_SetConfig+0xd0>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d103      	bne.n	8008188 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	691a      	ldr	r2, [r3, #16]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2201      	movs	r2, #1
 800818c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	691b      	ldr	r3, [r3, #16]
 8008192:	f003 0301 	and.w	r3, r3, #1
 8008196:	2b00      	cmp	r3, #0
 8008198:	d005      	beq.n	80081a6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	691b      	ldr	r3, [r3, #16]
 800819e:	f023 0201 	bic.w	r2, r3, #1
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	611a      	str	r2, [r3, #16]
  }
}
 80081a6:	bf00      	nop
 80081a8:	3714      	adds	r7, #20
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bc80      	pop	{r7}
 80081ae:	4770      	bx	lr
 80081b0:	40012c00 	.word	0x40012c00
 80081b4:	40000400 	.word	0x40000400
 80081b8:	40000800 	.word	0x40000800

080081bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081bc:	b480      	push	{r7}
 80081be:	b087      	sub	sp, #28
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6a1b      	ldr	r3, [r3, #32]
 80081ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6a1b      	ldr	r3, [r3, #32]
 80081d0:	f023 0201 	bic.w	r2, r3, #1
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	699b      	ldr	r3, [r3, #24]
 80081e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f023 0303 	bic.w	r3, r3, #3
 80081f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	68fa      	ldr	r2, [r7, #12]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	f023 0302 	bic.w	r3, r3, #2
 8008204:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	697a      	ldr	r2, [r7, #20]
 800820c:	4313      	orrs	r3, r2
 800820e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	4a1c      	ldr	r2, [pc, #112]	@ (8008284 <TIM_OC1_SetConfig+0xc8>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d10c      	bne.n	8008232 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	f023 0308 	bic.w	r3, r3, #8
 800821e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	68db      	ldr	r3, [r3, #12]
 8008224:	697a      	ldr	r2, [r7, #20]
 8008226:	4313      	orrs	r3, r2
 8008228:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	f023 0304 	bic.w	r3, r3, #4
 8008230:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	4a13      	ldr	r2, [pc, #76]	@ (8008284 <TIM_OC1_SetConfig+0xc8>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d111      	bne.n	800825e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008240:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008248:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	695b      	ldr	r3, [r3, #20]
 800824e:	693a      	ldr	r2, [r7, #16]
 8008250:	4313      	orrs	r3, r2
 8008252:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	699b      	ldr	r3, [r3, #24]
 8008258:	693a      	ldr	r2, [r7, #16]
 800825a:	4313      	orrs	r3, r2
 800825c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	693a      	ldr	r2, [r7, #16]
 8008262:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	68fa      	ldr	r2, [r7, #12]
 8008268:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	685a      	ldr	r2, [r3, #4]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	697a      	ldr	r2, [r7, #20]
 8008276:	621a      	str	r2, [r3, #32]
}
 8008278:	bf00      	nop
 800827a:	371c      	adds	r7, #28
 800827c:	46bd      	mov	sp, r7
 800827e:	bc80      	pop	{r7}
 8008280:	4770      	bx	lr
 8008282:	bf00      	nop
 8008284:	40012c00 	.word	0x40012c00

08008288 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008288:	b480      	push	{r7}
 800828a:	b087      	sub	sp, #28
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6a1b      	ldr	r3, [r3, #32]
 8008296:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6a1b      	ldr	r3, [r3, #32]
 800829c:	f023 0210 	bic.w	r2, r3, #16
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	699b      	ldr	r3, [r3, #24]
 80082ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	021b      	lsls	r3, r3, #8
 80082c6:	68fa      	ldr	r2, [r7, #12]
 80082c8:	4313      	orrs	r3, r2
 80082ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	f023 0320 	bic.w	r3, r3, #32
 80082d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	689b      	ldr	r3, [r3, #8]
 80082d8:	011b      	lsls	r3, r3, #4
 80082da:	697a      	ldr	r2, [r7, #20]
 80082dc:	4313      	orrs	r3, r2
 80082de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	4a1d      	ldr	r2, [pc, #116]	@ (8008358 <TIM_OC2_SetConfig+0xd0>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d10d      	bne.n	8008304 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80082ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	68db      	ldr	r3, [r3, #12]
 80082f4:	011b      	lsls	r3, r3, #4
 80082f6:	697a      	ldr	r2, [r7, #20]
 80082f8:	4313      	orrs	r3, r2
 80082fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008302:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4a14      	ldr	r2, [pc, #80]	@ (8008358 <TIM_OC2_SetConfig+0xd0>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d113      	bne.n	8008334 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008312:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800831a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	695b      	ldr	r3, [r3, #20]
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	693a      	ldr	r2, [r7, #16]
 8008324:	4313      	orrs	r3, r2
 8008326:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	699b      	ldr	r3, [r3, #24]
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	693a      	ldr	r2, [r7, #16]
 8008330:	4313      	orrs	r3, r2
 8008332:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	693a      	ldr	r2, [r7, #16]
 8008338:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	68fa      	ldr	r2, [r7, #12]
 800833e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	685a      	ldr	r2, [r3, #4]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	697a      	ldr	r2, [r7, #20]
 800834c:	621a      	str	r2, [r3, #32]
}
 800834e:	bf00      	nop
 8008350:	371c      	adds	r7, #28
 8008352:	46bd      	mov	sp, r7
 8008354:	bc80      	pop	{r7}
 8008356:	4770      	bx	lr
 8008358:	40012c00 	.word	0x40012c00

0800835c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800835c:	b480      	push	{r7}
 800835e:	b087      	sub	sp, #28
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6a1b      	ldr	r3, [r3, #32]
 800836a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6a1b      	ldr	r3, [r3, #32]
 8008370:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	69db      	ldr	r3, [r3, #28]
 8008382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800838a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f023 0303 	bic.w	r3, r3, #3
 8008392:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	68fa      	ldr	r2, [r7, #12]
 800839a:	4313      	orrs	r3, r2
 800839c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80083a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	021b      	lsls	r3, r3, #8
 80083ac:	697a      	ldr	r2, [r7, #20]
 80083ae:	4313      	orrs	r3, r2
 80083b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	4a1d      	ldr	r2, [pc, #116]	@ (800842c <TIM_OC3_SetConfig+0xd0>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d10d      	bne.n	80083d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80083c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	68db      	ldr	r3, [r3, #12]
 80083c6:	021b      	lsls	r3, r3, #8
 80083c8:	697a      	ldr	r2, [r7, #20]
 80083ca:	4313      	orrs	r3, r2
 80083cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80083d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	4a14      	ldr	r2, [pc, #80]	@ (800842c <TIM_OC3_SetConfig+0xd0>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d113      	bne.n	8008406 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80083e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80083ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	695b      	ldr	r3, [r3, #20]
 80083f2:	011b      	lsls	r3, r3, #4
 80083f4:	693a      	ldr	r2, [r7, #16]
 80083f6:	4313      	orrs	r3, r2
 80083f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	699b      	ldr	r3, [r3, #24]
 80083fe:	011b      	lsls	r3, r3, #4
 8008400:	693a      	ldr	r2, [r7, #16]
 8008402:	4313      	orrs	r3, r2
 8008404:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	693a      	ldr	r2, [r7, #16]
 800840a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	68fa      	ldr	r2, [r7, #12]
 8008410:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	685a      	ldr	r2, [r3, #4]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	697a      	ldr	r2, [r7, #20]
 800841e:	621a      	str	r2, [r3, #32]
}
 8008420:	bf00      	nop
 8008422:	371c      	adds	r7, #28
 8008424:	46bd      	mov	sp, r7
 8008426:	bc80      	pop	{r7}
 8008428:	4770      	bx	lr
 800842a:	bf00      	nop
 800842c:	40012c00 	.word	0x40012c00

08008430 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008430:	b480      	push	{r7}
 8008432:	b087      	sub	sp, #28
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6a1b      	ldr	r3, [r3, #32]
 800843e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6a1b      	ldr	r3, [r3, #32]
 8008444:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	69db      	ldr	r3, [r3, #28]
 8008456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800845e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008466:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	021b      	lsls	r3, r3, #8
 800846e:	68fa      	ldr	r2, [r7, #12]
 8008470:	4313      	orrs	r3, r2
 8008472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800847a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	689b      	ldr	r3, [r3, #8]
 8008480:	031b      	lsls	r3, r3, #12
 8008482:	693a      	ldr	r2, [r7, #16]
 8008484:	4313      	orrs	r3, r2
 8008486:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	4a0f      	ldr	r2, [pc, #60]	@ (80084c8 <TIM_OC4_SetConfig+0x98>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d109      	bne.n	80084a4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008496:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	695b      	ldr	r3, [r3, #20]
 800849c:	019b      	lsls	r3, r3, #6
 800849e:	697a      	ldr	r2, [r7, #20]
 80084a0:	4313      	orrs	r3, r2
 80084a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	697a      	ldr	r2, [r7, #20]
 80084a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	68fa      	ldr	r2, [r7, #12]
 80084ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	685a      	ldr	r2, [r3, #4]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	693a      	ldr	r2, [r7, #16]
 80084bc:	621a      	str	r2, [r3, #32]
}
 80084be:	bf00      	nop
 80084c0:	371c      	adds	r7, #28
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bc80      	pop	{r7}
 80084c6:	4770      	bx	lr
 80084c8:	40012c00 	.word	0x40012c00

080084cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b087      	sub	sp, #28
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	60b9      	str	r1, [r7, #8]
 80084d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	6a1b      	ldr	r3, [r3, #32]
 80084dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	6a1b      	ldr	r3, [r3, #32]
 80084e2:	f023 0201 	bic.w	r2, r3, #1
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	699b      	ldr	r3, [r3, #24]
 80084ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80084f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	011b      	lsls	r3, r3, #4
 80084fc:	693a      	ldr	r2, [r7, #16]
 80084fe:	4313      	orrs	r3, r2
 8008500:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	f023 030a 	bic.w	r3, r3, #10
 8008508:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800850a:	697a      	ldr	r2, [r7, #20]
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	4313      	orrs	r3, r2
 8008510:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	693a      	ldr	r2, [r7, #16]
 8008516:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	697a      	ldr	r2, [r7, #20]
 800851c:	621a      	str	r2, [r3, #32]
}
 800851e:	bf00      	nop
 8008520:	371c      	adds	r7, #28
 8008522:	46bd      	mov	sp, r7
 8008524:	bc80      	pop	{r7}
 8008526:	4770      	bx	lr

08008528 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008528:	b480      	push	{r7}
 800852a:	b087      	sub	sp, #28
 800852c:	af00      	add	r7, sp, #0
 800852e:	60f8      	str	r0, [r7, #12]
 8008530:	60b9      	str	r1, [r7, #8]
 8008532:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	6a1b      	ldr	r3, [r3, #32]
 8008538:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	6a1b      	ldr	r3, [r3, #32]
 800853e:	f023 0210 	bic.w	r2, r3, #16
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	699b      	ldr	r3, [r3, #24]
 800854a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008552:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	031b      	lsls	r3, r3, #12
 8008558:	693a      	ldr	r2, [r7, #16]
 800855a:	4313      	orrs	r3, r2
 800855c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008564:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	011b      	lsls	r3, r3, #4
 800856a:	697a      	ldr	r2, [r7, #20]
 800856c:	4313      	orrs	r3, r2
 800856e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	693a      	ldr	r2, [r7, #16]
 8008574:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	697a      	ldr	r2, [r7, #20]
 800857a:	621a      	str	r2, [r3, #32]
}
 800857c:	bf00      	nop
 800857e:	371c      	adds	r7, #28
 8008580:	46bd      	mov	sp, r7
 8008582:	bc80      	pop	{r7}
 8008584:	4770      	bx	lr

08008586 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008586:	b480      	push	{r7}
 8008588:	b085      	sub	sp, #20
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
 800858e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800859c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800859e:	683a      	ldr	r2, [r7, #0]
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	4313      	orrs	r3, r2
 80085a4:	f043 0307 	orr.w	r3, r3, #7
 80085a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	68fa      	ldr	r2, [r7, #12]
 80085ae:	609a      	str	r2, [r3, #8]
}
 80085b0:	bf00      	nop
 80085b2:	3714      	adds	r7, #20
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bc80      	pop	{r7}
 80085b8:	4770      	bx	lr

080085ba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80085ba:	b480      	push	{r7}
 80085bc:	b087      	sub	sp, #28
 80085be:	af00      	add	r7, sp, #0
 80085c0:	60f8      	str	r0, [r7, #12]
 80085c2:	60b9      	str	r1, [r7, #8]
 80085c4:	607a      	str	r2, [r7, #4]
 80085c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80085d4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	021a      	lsls	r2, r3, #8
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	431a      	orrs	r2, r3
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	4313      	orrs	r3, r2
 80085e2:	697a      	ldr	r2, [r7, #20]
 80085e4:	4313      	orrs	r3, r2
 80085e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	697a      	ldr	r2, [r7, #20]
 80085ec:	609a      	str	r2, [r3, #8]
}
 80085ee:	bf00      	nop
 80085f0:	371c      	adds	r7, #28
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bc80      	pop	{r7}
 80085f6:	4770      	bx	lr

080085f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b087      	sub	sp, #28
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	f003 031f 	and.w	r3, r3, #31
 800860a:	2201      	movs	r2, #1
 800860c:	fa02 f303 	lsl.w	r3, r2, r3
 8008610:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	6a1a      	ldr	r2, [r3, #32]
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	43db      	mvns	r3, r3
 800861a:	401a      	ands	r2, r3
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	6a1a      	ldr	r2, [r3, #32]
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	f003 031f 	and.w	r3, r3, #31
 800862a:	6879      	ldr	r1, [r7, #4]
 800862c:	fa01 f303 	lsl.w	r3, r1, r3
 8008630:	431a      	orrs	r2, r3
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	621a      	str	r2, [r3, #32]
}
 8008636:	bf00      	nop
 8008638:	371c      	adds	r7, #28
 800863a:	46bd      	mov	sp, r7
 800863c:	bc80      	pop	{r7}
 800863e:	4770      	bx	lr

08008640 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008640:	b480      	push	{r7}
 8008642:	b085      	sub	sp, #20
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008650:	2b01      	cmp	r3, #1
 8008652:	d101      	bne.n	8008658 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008654:	2302      	movs	r3, #2
 8008656:	e046      	b.n	80086e6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2201      	movs	r2, #1
 800865c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2202      	movs	r2, #2
 8008664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	689b      	ldr	r3, [r3, #8]
 8008676:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800867e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	68fa      	ldr	r2, [r7, #12]
 8008686:	4313      	orrs	r3, r2
 8008688:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	68fa      	ldr	r2, [r7, #12]
 8008690:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a16      	ldr	r2, [pc, #88]	@ (80086f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d00e      	beq.n	80086ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086a4:	d009      	beq.n	80086ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a12      	ldr	r2, [pc, #72]	@ (80086f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d004      	beq.n	80086ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a10      	ldr	r2, [pc, #64]	@ (80086f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d10c      	bne.n	80086d4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80086c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	68ba      	ldr	r2, [r7, #8]
 80086c8:	4313      	orrs	r3, r2
 80086ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	68ba      	ldr	r2, [r7, #8]
 80086d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2201      	movs	r2, #1
 80086d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2200      	movs	r2, #0
 80086e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80086e4:	2300      	movs	r3, #0
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3714      	adds	r7, #20
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bc80      	pop	{r7}
 80086ee:	4770      	bx	lr
 80086f0:	40012c00 	.word	0x40012c00
 80086f4:	40000400 	.word	0x40000400
 80086f8:	40000800 	.word	0x40000800

080086fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008704:	bf00      	nop
 8008706:	370c      	adds	r7, #12
 8008708:	46bd      	mov	sp, r7
 800870a:	bc80      	pop	{r7}
 800870c:	4770      	bx	lr

0800870e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800870e:	b480      	push	{r7}
 8008710:	b083      	sub	sp, #12
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008716:	bf00      	nop
 8008718:	370c      	adds	r7, #12
 800871a:	46bd      	mov	sp, r7
 800871c:	bc80      	pop	{r7}
 800871e:	4770      	bx	lr

08008720 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d101      	bne.n	8008732 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800872e:	2301      	movs	r3, #1
 8008730:	e042      	b.n	80087b8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008738:	b2db      	uxtb	r3, r3
 800873a:	2b00      	cmp	r3, #0
 800873c:	d106      	bne.n	800874c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2200      	movs	r2, #0
 8008742:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f7fb fd46 	bl	80041d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2224      	movs	r2, #36	@ 0x24
 8008750:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	68da      	ldr	r2, [r3, #12]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008762:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 fe4f 	bl	8009408 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	691a      	ldr	r2, [r3, #16]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008778:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	695a      	ldr	r2, [r3, #20]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008788:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	68da      	ldr	r2, [r3, #12]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008798:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2200      	movs	r2, #0
 800879e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2220      	movs	r2, #32
 80087a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2220      	movs	r2, #32
 80087ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80087b6:	2300      	movs	r3, #0
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3708      	adds	r7, #8
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b08a      	sub	sp, #40	@ 0x28
 80087c4:	af02      	add	r7, sp, #8
 80087c6:	60f8      	str	r0, [r7, #12]
 80087c8:	60b9      	str	r1, [r7, #8]
 80087ca:	603b      	str	r3, [r7, #0]
 80087cc:	4613      	mov	r3, r2
 80087ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80087d0:	2300      	movs	r3, #0
 80087d2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	2b20      	cmp	r3, #32
 80087de:	d175      	bne.n	80088cc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d002      	beq.n	80087ec <HAL_UART_Transmit+0x2c>
 80087e6:	88fb      	ldrh	r3, [r7, #6]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d101      	bne.n	80087f0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	e06e      	b.n	80088ce <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2200      	movs	r2, #0
 80087f4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2221      	movs	r2, #33	@ 0x21
 80087fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80087fe:	f7fb fe79 	bl	80044f4 <HAL_GetTick>
 8008802:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	88fa      	ldrh	r2, [r7, #6]
 8008808:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	88fa      	ldrh	r2, [r7, #6]
 800880e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008818:	d108      	bne.n	800882c <HAL_UART_Transmit+0x6c>
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	691b      	ldr	r3, [r3, #16]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d104      	bne.n	800882c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008822:	2300      	movs	r3, #0
 8008824:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	61bb      	str	r3, [r7, #24]
 800882a:	e003      	b.n	8008834 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008830:	2300      	movs	r3, #0
 8008832:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008834:	e02e      	b.n	8008894 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	9300      	str	r3, [sp, #0]
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	2200      	movs	r2, #0
 800883e:	2180      	movs	r1, #128	@ 0x80
 8008840:	68f8      	ldr	r0, [r7, #12]
 8008842:	f000 fbb4 	bl	8008fae <UART_WaitOnFlagUntilTimeout>
 8008846:	4603      	mov	r3, r0
 8008848:	2b00      	cmp	r3, #0
 800884a:	d005      	beq.n	8008858 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2220      	movs	r2, #32
 8008850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008854:	2303      	movs	r3, #3
 8008856:	e03a      	b.n	80088ce <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008858:	69fb      	ldr	r3, [r7, #28]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d10b      	bne.n	8008876 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800885e:	69bb      	ldr	r3, [r7, #24]
 8008860:	881b      	ldrh	r3, [r3, #0]
 8008862:	461a      	mov	r2, r3
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800886c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800886e:	69bb      	ldr	r3, [r7, #24]
 8008870:	3302      	adds	r3, #2
 8008872:	61bb      	str	r3, [r7, #24]
 8008874:	e007      	b.n	8008886 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008876:	69fb      	ldr	r3, [r7, #28]
 8008878:	781a      	ldrb	r2, [r3, #0]
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008880:	69fb      	ldr	r3, [r7, #28]
 8008882:	3301      	adds	r3, #1
 8008884:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800888a:	b29b      	uxth	r3, r3
 800888c:	3b01      	subs	r3, #1
 800888e:	b29a      	uxth	r2, r3
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008898:	b29b      	uxth	r3, r3
 800889a:	2b00      	cmp	r3, #0
 800889c:	d1cb      	bne.n	8008836 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	9300      	str	r3, [sp, #0]
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	2200      	movs	r2, #0
 80088a6:	2140      	movs	r1, #64	@ 0x40
 80088a8:	68f8      	ldr	r0, [r7, #12]
 80088aa:	f000 fb80 	bl	8008fae <UART_WaitOnFlagUntilTimeout>
 80088ae:	4603      	mov	r3, r0
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d005      	beq.n	80088c0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2220      	movs	r2, #32
 80088b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80088bc:	2303      	movs	r3, #3
 80088be:	e006      	b.n	80088ce <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2220      	movs	r2, #32
 80088c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80088c8:	2300      	movs	r3, #0
 80088ca:	e000      	b.n	80088ce <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80088cc:	2302      	movs	r3, #2
  }
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3720      	adds	r7, #32
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088d6:	b580      	push	{r7, lr}
 80088d8:	b08a      	sub	sp, #40	@ 0x28
 80088da:	af02      	add	r7, sp, #8
 80088dc:	60f8      	str	r0, [r7, #12]
 80088de:	60b9      	str	r1, [r7, #8]
 80088e0:	603b      	str	r3, [r7, #0]
 80088e2:	4613      	mov	r3, r2
 80088e4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80088e6:	2300      	movs	r3, #0
 80088e8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	2b20      	cmp	r3, #32
 80088f4:	f040 8081 	bne.w	80089fa <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d002      	beq.n	8008904 <HAL_UART_Receive+0x2e>
 80088fe:	88fb      	ldrh	r3, [r7, #6]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d101      	bne.n	8008908 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008904:	2301      	movs	r3, #1
 8008906:	e079      	b.n	80089fc <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2200      	movs	r2, #0
 800890c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2222      	movs	r2, #34	@ 0x22
 8008912:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2200      	movs	r2, #0
 800891a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800891c:	f7fb fdea 	bl	80044f4 <HAL_GetTick>
 8008920:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	88fa      	ldrh	r2, [r7, #6]
 8008926:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	88fa      	ldrh	r2, [r7, #6]
 800892c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	689b      	ldr	r3, [r3, #8]
 8008932:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008936:	d108      	bne.n	800894a <HAL_UART_Receive+0x74>
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	691b      	ldr	r3, [r3, #16]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d104      	bne.n	800894a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8008940:	2300      	movs	r3, #0
 8008942:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	61bb      	str	r3, [r7, #24]
 8008948:	e003      	b.n	8008952 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800894e:	2300      	movs	r3, #0
 8008950:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008952:	e047      	b.n	80089e4 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	9300      	str	r3, [sp, #0]
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	2200      	movs	r2, #0
 800895c:	2120      	movs	r1, #32
 800895e:	68f8      	ldr	r0, [r7, #12]
 8008960:	f000 fb25 	bl	8008fae <UART_WaitOnFlagUntilTimeout>
 8008964:	4603      	mov	r3, r0
 8008966:	2b00      	cmp	r3, #0
 8008968:	d005      	beq.n	8008976 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2220      	movs	r2, #32
 800896e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8008972:	2303      	movs	r3, #3
 8008974:	e042      	b.n	80089fc <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8008976:	69fb      	ldr	r3, [r7, #28]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d10c      	bne.n	8008996 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	b29b      	uxth	r3, r3
 8008984:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008988:	b29a      	uxth	r2, r3
 800898a:	69bb      	ldr	r3, [r7, #24]
 800898c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800898e:	69bb      	ldr	r3, [r7, #24]
 8008990:	3302      	adds	r3, #2
 8008992:	61bb      	str	r3, [r7, #24]
 8008994:	e01f      	b.n	80089d6 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800899e:	d007      	beq.n	80089b0 <HAL_UART_Receive+0xda>
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	689b      	ldr	r3, [r3, #8]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d10a      	bne.n	80089be <HAL_UART_Receive+0xe8>
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	691b      	ldr	r3, [r3, #16]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d106      	bne.n	80089be <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	b2da      	uxtb	r2, r3
 80089b8:	69fb      	ldr	r3, [r7, #28]
 80089ba:	701a      	strb	r2, [r3, #0]
 80089bc:	e008      	b.n	80089d0 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089ca:	b2da      	uxtb	r2, r3
 80089cc:	69fb      	ldr	r3, [r7, #28]
 80089ce:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80089d0:	69fb      	ldr	r3, [r7, #28]
 80089d2:	3301      	adds	r3, #1
 80089d4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80089da:	b29b      	uxth	r3, r3
 80089dc:	3b01      	subs	r3, #1
 80089de:	b29a      	uxth	r2, r3
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d1b2      	bne.n	8008954 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2220      	movs	r2, #32
 80089f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80089f6:	2300      	movs	r3, #0
 80089f8:	e000      	b.n	80089fc <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80089fa:	2302      	movs	r3, #2
  }
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3720      	adds	r7, #32
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b084      	sub	sp, #16
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	60f8      	str	r0, [r7, #12]
 8008a0c:	60b9      	str	r1, [r7, #8]
 8008a0e:	4613      	mov	r3, r2
 8008a10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	2b20      	cmp	r3, #32
 8008a1c:	d112      	bne.n	8008a44 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d002      	beq.n	8008a2a <HAL_UART_Receive_IT+0x26>
 8008a24:	88fb      	ldrh	r3, [r7, #6]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d101      	bne.n	8008a2e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	e00b      	b.n	8008a46 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2200      	movs	r2, #0
 8008a32:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008a34:	88fb      	ldrh	r3, [r7, #6]
 8008a36:	461a      	mov	r2, r3
 8008a38:	68b9      	ldr	r1, [r7, #8]
 8008a3a:	68f8      	ldr	r0, [r7, #12]
 8008a3c:	f000 fb10 	bl	8009060 <UART_Start_Receive_IT>
 8008a40:	4603      	mov	r3, r0
 8008a42:	e000      	b.n	8008a46 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008a44:	2302      	movs	r3, #2
  }
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3710      	adds	r7, #16
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
	...

08008a50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b0ba      	sub	sp, #232	@ 0xe8
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	68db      	ldr	r3, [r3, #12]
 8008a68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	695b      	ldr	r3, [r3, #20]
 8008a72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008a76:	2300      	movs	r3, #0
 8008a78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a86:	f003 030f 	and.w	r3, r3, #15
 8008a8a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008a8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d10f      	bne.n	8008ab6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a9a:	f003 0320 	and.w	r3, r3, #32
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d009      	beq.n	8008ab6 <HAL_UART_IRQHandler+0x66>
 8008aa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008aa6:	f003 0320 	and.w	r3, r3, #32
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d003      	beq.n	8008ab6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 fbec 	bl	800928c <UART_Receive_IT>
      return;
 8008ab4:	e25b      	b.n	8008f6e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008ab6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	f000 80de 	beq.w	8008c7c <HAL_UART_IRQHandler+0x22c>
 8008ac0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ac4:	f003 0301 	and.w	r3, r3, #1
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d106      	bne.n	8008ada <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008acc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ad0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	f000 80d1 	beq.w	8008c7c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ade:	f003 0301 	and.w	r3, r3, #1
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d00b      	beq.n	8008afe <HAL_UART_IRQHandler+0xae>
 8008ae6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008aea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d005      	beq.n	8008afe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008af6:	f043 0201 	orr.w	r2, r3, #1
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b02:	f003 0304 	and.w	r3, r3, #4
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d00b      	beq.n	8008b22 <HAL_UART_IRQHandler+0xd2>
 8008b0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b0e:	f003 0301 	and.w	r3, r3, #1
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d005      	beq.n	8008b22 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b1a:	f043 0202 	orr.w	r2, r3, #2
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b26:	f003 0302 	and.w	r3, r3, #2
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d00b      	beq.n	8008b46 <HAL_UART_IRQHandler+0xf6>
 8008b2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b32:	f003 0301 	and.w	r3, r3, #1
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d005      	beq.n	8008b46 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b3e:	f043 0204 	orr.w	r2, r3, #4
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b4a:	f003 0308 	and.w	r3, r3, #8
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d011      	beq.n	8008b76 <HAL_UART_IRQHandler+0x126>
 8008b52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b56:	f003 0320 	and.w	r3, r3, #32
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d105      	bne.n	8008b6a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008b5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b62:	f003 0301 	and.w	r3, r3, #1
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d005      	beq.n	8008b76 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b6e:	f043 0208 	orr.w	r2, r3, #8
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	f000 81f2 	beq.w	8008f64 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b84:	f003 0320 	and.w	r3, r3, #32
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d008      	beq.n	8008b9e <HAL_UART_IRQHandler+0x14e>
 8008b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b90:	f003 0320 	and.w	r3, r3, #32
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d002      	beq.n	8008b9e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 fb77 	bl	800928c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	695b      	ldr	r3, [r3, #20]
 8008ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	bf14      	ite	ne
 8008bac:	2301      	movne	r3, #1
 8008bae:	2300      	moveq	r3, #0
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bba:	f003 0308 	and.w	r3, r3, #8
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d103      	bne.n	8008bca <HAL_UART_IRQHandler+0x17a>
 8008bc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d04f      	beq.n	8008c6a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 fa81 	bl	80090d2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	695b      	ldr	r3, [r3, #20]
 8008bd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d041      	beq.n	8008c62 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	3314      	adds	r3, #20
 8008be4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008bec:	e853 3f00 	ldrex	r3, [r3]
 8008bf0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008bf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008bf8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008bfc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	3314      	adds	r3, #20
 8008c06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008c0a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008c0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008c16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008c1a:	e841 2300 	strex	r3, r2, [r1]
 8008c1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008c22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d1d9      	bne.n	8008bde <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d013      	beq.n	8008c5a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c36:	4a7e      	ldr	r2, [pc, #504]	@ (8008e30 <HAL_UART_IRQHandler+0x3e0>)
 8008c38:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f7fc fb46 	bl	80052d0 <HAL_DMA_Abort_IT>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d016      	beq.n	8008c78 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c50:	687a      	ldr	r2, [r7, #4]
 8008c52:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008c54:	4610      	mov	r0, r2
 8008c56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c58:	e00e      	b.n	8008c78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 f993 	bl	8008f86 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c60:	e00a      	b.n	8008c78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 f98f 	bl	8008f86 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c68:	e006      	b.n	8008c78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 f98b 	bl	8008f86 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008c76:	e175      	b.n	8008f64 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c78:	bf00      	nop
    return;
 8008c7a:	e173      	b.n	8008f64 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	f040 814f 	bne.w	8008f24 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c8a:	f003 0310 	and.w	r3, r3, #16
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	f000 8148 	beq.w	8008f24 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008c94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c98:	f003 0310 	and.w	r3, r3, #16
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	f000 8141 	beq.w	8008f24 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	60bb      	str	r3, [r7, #8]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	60bb      	str	r3, [r7, #8]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	60bb      	str	r3, [r7, #8]
 8008cb6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	695b      	ldr	r3, [r3, #20]
 8008cbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	f000 80b6 	beq.w	8008e34 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008cd4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	f000 8145 	beq.w	8008f68 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008ce2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008ce6:	429a      	cmp	r2, r3
 8008ce8:	f080 813e 	bcs.w	8008f68 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008cf2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cf8:	699b      	ldr	r3, [r3, #24]
 8008cfa:	2b20      	cmp	r3, #32
 8008cfc:	f000 8088 	beq.w	8008e10 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	330c      	adds	r3, #12
 8008d06:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008d0e:	e853 3f00 	ldrex	r3, [r3]
 8008d12:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008d16:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008d1a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d1e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	330c      	adds	r3, #12
 8008d28:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008d2c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008d30:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d34:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008d38:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008d3c:	e841 2300 	strex	r3, r2, [r1]
 8008d40:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008d44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d1d9      	bne.n	8008d00 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	3314      	adds	r3, #20
 8008d52:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008d56:	e853 3f00 	ldrex	r3, [r3]
 8008d5a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008d5c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008d5e:	f023 0301 	bic.w	r3, r3, #1
 8008d62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	3314      	adds	r3, #20
 8008d6c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008d70:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008d74:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d76:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008d78:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008d7c:	e841 2300 	strex	r3, r2, [r1]
 8008d80:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008d82:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d1e1      	bne.n	8008d4c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	3314      	adds	r3, #20
 8008d8e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d92:	e853 3f00 	ldrex	r3, [r3]
 8008d96:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008d98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	3314      	adds	r3, #20
 8008da8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008dac:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008dae:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008db2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008db4:	e841 2300 	strex	r3, r2, [r1]
 8008db8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008dba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d1e3      	bne.n	8008d88 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2220      	movs	r2, #32
 8008dc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	330c      	adds	r3, #12
 8008dd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008dd8:	e853 3f00 	ldrex	r3, [r3]
 8008ddc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008dde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008de0:	f023 0310 	bic.w	r3, r3, #16
 8008de4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	330c      	adds	r3, #12
 8008dee:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008df2:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008df4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008df8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008dfa:	e841 2300 	strex	r3, r2, [r1]
 8008dfe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008e00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d1e3      	bne.n	8008dce <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7fc fa24 	bl	8005258 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2202      	movs	r2, #2
 8008e14:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008e1e:	b29b      	uxth	r3, r3
 8008e20:	1ad3      	subs	r3, r2, r3
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	4619      	mov	r1, r3
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 f8b6 	bl	8008f98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008e2c:	e09c      	b.n	8008f68 <HAL_UART_IRQHandler+0x518>
 8008e2e:	bf00      	nop
 8008e30:	08009197 	.word	0x08009197
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	1ad3      	subs	r3, r2, r3
 8008e40:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	f000 808e 	beq.w	8008f6c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008e50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	f000 8089 	beq.w	8008f6c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	330c      	adds	r3, #12
 8008e60:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e64:	e853 3f00 	ldrex	r3, [r3]
 8008e68:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008e6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e70:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	330c      	adds	r3, #12
 8008e7a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008e7e:	647a      	str	r2, [r7, #68]	@ 0x44
 8008e80:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e82:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008e84:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008e86:	e841 2300 	strex	r3, r2, [r1]
 8008e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008e8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d1e3      	bne.n	8008e5a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	3314      	adds	r3, #20
 8008e98:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e9c:	e853 3f00 	ldrex	r3, [r3]
 8008ea0:	623b      	str	r3, [r7, #32]
   return(result);
 8008ea2:	6a3b      	ldr	r3, [r7, #32]
 8008ea4:	f023 0301 	bic.w	r3, r3, #1
 8008ea8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	3314      	adds	r3, #20
 8008eb2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008eb6:	633a      	str	r2, [r7, #48]	@ 0x30
 8008eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ebc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ebe:	e841 2300 	strex	r3, r2, [r1]
 8008ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d1e3      	bne.n	8008e92 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2220      	movs	r2, #32
 8008ece:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	330c      	adds	r3, #12
 8008ede:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	e853 3f00 	ldrex	r3, [r3]
 8008ee6:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f023 0310 	bic.w	r3, r3, #16
 8008eee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	330c      	adds	r3, #12
 8008ef8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008efc:	61fa      	str	r2, [r7, #28]
 8008efe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f00:	69b9      	ldr	r1, [r7, #24]
 8008f02:	69fa      	ldr	r2, [r7, #28]
 8008f04:	e841 2300 	strex	r3, r2, [r1]
 8008f08:	617b      	str	r3, [r7, #20]
   return(result);
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d1e3      	bne.n	8008ed8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2202      	movs	r2, #2
 8008f14:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008f16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 f83b 	bl	8008f98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008f22:	e023      	b.n	8008f6c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008f24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d009      	beq.n	8008f44 <HAL_UART_IRQHandler+0x4f4>
 8008f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d003      	beq.n	8008f44 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 f93e 	bl	80091be <UART_Transmit_IT>
    return;
 8008f42:	e014      	b.n	8008f6e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008f44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d00e      	beq.n	8008f6e <HAL_UART_IRQHandler+0x51e>
 8008f50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d008      	beq.n	8008f6e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f000 f97d 	bl	800925c <UART_EndTransmit_IT>
    return;
 8008f62:	e004      	b.n	8008f6e <HAL_UART_IRQHandler+0x51e>
    return;
 8008f64:	bf00      	nop
 8008f66:	e002      	b.n	8008f6e <HAL_UART_IRQHandler+0x51e>
      return;
 8008f68:	bf00      	nop
 8008f6a:	e000      	b.n	8008f6e <HAL_UART_IRQHandler+0x51e>
      return;
 8008f6c:	bf00      	nop
  }
}
 8008f6e:	37e8      	adds	r7, #232	@ 0xe8
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008f74:	b480      	push	{r7}
 8008f76:	b083      	sub	sp, #12
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008f7c:	bf00      	nop
 8008f7e:	370c      	adds	r7, #12
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bc80      	pop	{r7}
 8008f84:	4770      	bx	lr

08008f86 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008f86:	b480      	push	{r7}
 8008f88:	b083      	sub	sp, #12
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008f8e:	bf00      	nop
 8008f90:	370c      	adds	r7, #12
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bc80      	pop	{r7}
 8008f96:	4770      	bx	lr

08008f98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b083      	sub	sp, #12
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	460b      	mov	r3, r1
 8008fa2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008fa4:	bf00      	nop
 8008fa6:	370c      	adds	r7, #12
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bc80      	pop	{r7}
 8008fac:	4770      	bx	lr

08008fae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008fae:	b580      	push	{r7, lr}
 8008fb0:	b086      	sub	sp, #24
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	60f8      	str	r0, [r7, #12]
 8008fb6:	60b9      	str	r1, [r7, #8]
 8008fb8:	603b      	str	r3, [r7, #0]
 8008fba:	4613      	mov	r3, r2
 8008fbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fbe:	e03b      	b.n	8009038 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008fc0:	6a3b      	ldr	r3, [r7, #32]
 8008fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fc6:	d037      	beq.n	8009038 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fc8:	f7fb fa94 	bl	80044f4 <HAL_GetTick>
 8008fcc:	4602      	mov	r2, r0
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	1ad3      	subs	r3, r2, r3
 8008fd2:	6a3a      	ldr	r2, [r7, #32]
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d302      	bcc.n	8008fde <UART_WaitOnFlagUntilTimeout+0x30>
 8008fd8:	6a3b      	ldr	r3, [r7, #32]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d101      	bne.n	8008fe2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008fde:	2303      	movs	r3, #3
 8008fe0:	e03a      	b.n	8009058 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	68db      	ldr	r3, [r3, #12]
 8008fe8:	f003 0304 	and.w	r3, r3, #4
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d023      	beq.n	8009038 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	2b80      	cmp	r3, #128	@ 0x80
 8008ff4:	d020      	beq.n	8009038 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	2b40      	cmp	r3, #64	@ 0x40
 8008ffa:	d01d      	beq.n	8009038 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f003 0308 	and.w	r3, r3, #8
 8009006:	2b08      	cmp	r3, #8
 8009008:	d116      	bne.n	8009038 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800900a:	2300      	movs	r3, #0
 800900c:	617b      	str	r3, [r7, #20]
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	617b      	str	r3, [r7, #20]
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	617b      	str	r3, [r7, #20]
 800901e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009020:	68f8      	ldr	r0, [r7, #12]
 8009022:	f000 f856 	bl	80090d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2208      	movs	r2, #8
 800902a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2200      	movs	r2, #0
 8009030:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009034:	2301      	movs	r3, #1
 8009036:	e00f      	b.n	8009058 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	681a      	ldr	r2, [r3, #0]
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	4013      	ands	r3, r2
 8009042:	68ba      	ldr	r2, [r7, #8]
 8009044:	429a      	cmp	r2, r3
 8009046:	bf0c      	ite	eq
 8009048:	2301      	moveq	r3, #1
 800904a:	2300      	movne	r3, #0
 800904c:	b2db      	uxtb	r3, r3
 800904e:	461a      	mov	r2, r3
 8009050:	79fb      	ldrb	r3, [r7, #7]
 8009052:	429a      	cmp	r2, r3
 8009054:	d0b4      	beq.n	8008fc0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009056:	2300      	movs	r3, #0
}
 8009058:	4618      	mov	r0, r3
 800905a:	3718      	adds	r7, #24
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009060:	b480      	push	{r7}
 8009062:	b085      	sub	sp, #20
 8009064:	af00      	add	r7, sp, #0
 8009066:	60f8      	str	r0, [r7, #12]
 8009068:	60b9      	str	r1, [r7, #8]
 800906a:	4613      	mov	r3, r2
 800906c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	68ba      	ldr	r2, [r7, #8]
 8009072:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	88fa      	ldrh	r2, [r7, #6]
 8009078:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	88fa      	ldrh	r2, [r7, #6]
 800907e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2200      	movs	r2, #0
 8009084:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2222      	movs	r2, #34	@ 0x22
 800908a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	691b      	ldr	r3, [r3, #16]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d007      	beq.n	80090a6 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	68da      	ldr	r2, [r3, #12]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80090a4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	695a      	ldr	r2, [r3, #20]
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f042 0201 	orr.w	r2, r2, #1
 80090b4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	68da      	ldr	r2, [r3, #12]
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f042 0220 	orr.w	r2, r2, #32
 80090c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80090c6:	2300      	movs	r3, #0
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3714      	adds	r7, #20
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bc80      	pop	{r7}
 80090d0:	4770      	bx	lr

080090d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80090d2:	b480      	push	{r7}
 80090d4:	b095      	sub	sp, #84	@ 0x54
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	330c      	adds	r3, #12
 80090e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090e4:	e853 3f00 	ldrex	r3, [r3]
 80090e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80090ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80090f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	330c      	adds	r3, #12
 80090f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80090fa:	643a      	str	r2, [r7, #64]	@ 0x40
 80090fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009100:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009102:	e841 2300 	strex	r3, r2, [r1]
 8009106:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800910a:	2b00      	cmp	r3, #0
 800910c:	d1e5      	bne.n	80090da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	3314      	adds	r3, #20
 8009114:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009116:	6a3b      	ldr	r3, [r7, #32]
 8009118:	e853 3f00 	ldrex	r3, [r3]
 800911c:	61fb      	str	r3, [r7, #28]
   return(result);
 800911e:	69fb      	ldr	r3, [r7, #28]
 8009120:	f023 0301 	bic.w	r3, r3, #1
 8009124:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	3314      	adds	r3, #20
 800912c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800912e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009130:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009132:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009134:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009136:	e841 2300 	strex	r3, r2, [r1]
 800913a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800913c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800913e:	2b00      	cmp	r3, #0
 8009140:	d1e5      	bne.n	800910e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009146:	2b01      	cmp	r3, #1
 8009148:	d119      	bne.n	800917e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	330c      	adds	r3, #12
 8009150:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	e853 3f00 	ldrex	r3, [r3]
 8009158:	60bb      	str	r3, [r7, #8]
   return(result);
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	f023 0310 	bic.w	r3, r3, #16
 8009160:	647b      	str	r3, [r7, #68]	@ 0x44
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	330c      	adds	r3, #12
 8009168:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800916a:	61ba      	str	r2, [r7, #24]
 800916c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800916e:	6979      	ldr	r1, [r7, #20]
 8009170:	69ba      	ldr	r2, [r7, #24]
 8009172:	e841 2300 	strex	r3, r2, [r1]
 8009176:	613b      	str	r3, [r7, #16]
   return(result);
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d1e5      	bne.n	800914a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2220      	movs	r2, #32
 8009182:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2200      	movs	r2, #0
 800918a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800918c:	bf00      	nop
 800918e:	3754      	adds	r7, #84	@ 0x54
 8009190:	46bd      	mov	sp, r7
 8009192:	bc80      	pop	{r7}
 8009194:	4770      	bx	lr

08009196 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009196:	b580      	push	{r7, lr}
 8009198:	b084      	sub	sp, #16
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2200      	movs	r2, #0
 80091a8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2200      	movs	r2, #0
 80091ae:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80091b0:	68f8      	ldr	r0, [r7, #12]
 80091b2:	f7ff fee8 	bl	8008f86 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091b6:	bf00      	nop
 80091b8:	3710      	adds	r7, #16
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}

080091be <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80091be:	b480      	push	{r7}
 80091c0:	b085      	sub	sp, #20
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80091cc:	b2db      	uxtb	r3, r3
 80091ce:	2b21      	cmp	r3, #33	@ 0x21
 80091d0:	d13e      	bne.n	8009250 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	689b      	ldr	r3, [r3, #8]
 80091d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091da:	d114      	bne.n	8009206 <UART_Transmit_IT+0x48>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	691b      	ldr	r3, [r3, #16]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d110      	bne.n	8009206 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6a1b      	ldr	r3, [r3, #32]
 80091e8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	881b      	ldrh	r3, [r3, #0]
 80091ee:	461a      	mov	r2, r3
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80091f8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6a1b      	ldr	r3, [r3, #32]
 80091fe:	1c9a      	adds	r2, r3, #2
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	621a      	str	r2, [r3, #32]
 8009204:	e008      	b.n	8009218 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6a1b      	ldr	r3, [r3, #32]
 800920a:	1c59      	adds	r1, r3, #1
 800920c:	687a      	ldr	r2, [r7, #4]
 800920e:	6211      	str	r1, [r2, #32]
 8009210:	781a      	ldrb	r2, [r3, #0]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800921c:	b29b      	uxth	r3, r3
 800921e:	3b01      	subs	r3, #1
 8009220:	b29b      	uxth	r3, r3
 8009222:	687a      	ldr	r2, [r7, #4]
 8009224:	4619      	mov	r1, r3
 8009226:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009228:	2b00      	cmp	r3, #0
 800922a:	d10f      	bne.n	800924c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	68da      	ldr	r2, [r3, #12]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800923a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	68da      	ldr	r2, [r3, #12]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800924a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800924c:	2300      	movs	r3, #0
 800924e:	e000      	b.n	8009252 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009250:	2302      	movs	r3, #2
  }
}
 8009252:	4618      	mov	r0, r3
 8009254:	3714      	adds	r7, #20
 8009256:	46bd      	mov	sp, r7
 8009258:	bc80      	pop	{r7}
 800925a:	4770      	bx	lr

0800925c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b082      	sub	sp, #8
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	68da      	ldr	r2, [r3, #12]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009272:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2220      	movs	r2, #32
 8009278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f7ff fe79 	bl	8008f74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009282:	2300      	movs	r3, #0
}
 8009284:	4618      	mov	r0, r3
 8009286:	3708      	adds	r7, #8
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b08c      	sub	sp, #48	@ 0x30
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800929a:	b2db      	uxtb	r3, r3
 800929c:	2b22      	cmp	r3, #34	@ 0x22
 800929e:	f040 80ae 	bne.w	80093fe <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	689b      	ldr	r3, [r3, #8]
 80092a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092aa:	d117      	bne.n	80092dc <UART_Receive_IT+0x50>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	691b      	ldr	r3, [r3, #16]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d113      	bne.n	80092dc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80092b4:	2300      	movs	r3, #0
 80092b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092bc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	b29b      	uxth	r3, r3
 80092c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092ca:	b29a      	uxth	r2, r3
 80092cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092d4:	1c9a      	adds	r2, r3, #2
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80092da:	e026      	b.n	800932a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80092e2:	2300      	movs	r3, #0
 80092e4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	689b      	ldr	r3, [r3, #8]
 80092ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092ee:	d007      	beq.n	8009300 <UART_Receive_IT+0x74>
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	689b      	ldr	r3, [r3, #8]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d10a      	bne.n	800930e <UART_Receive_IT+0x82>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	691b      	ldr	r3, [r3, #16]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d106      	bne.n	800930e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	b2da      	uxtb	r2, r3
 8009308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800930a:	701a      	strb	r2, [r3, #0]
 800930c:	e008      	b.n	8009320 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	685b      	ldr	r3, [r3, #4]
 8009314:	b2db      	uxtb	r3, r3
 8009316:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800931a:	b2da      	uxtb	r2, r3
 800931c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800931e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009324:	1c5a      	adds	r2, r3, #1
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800932e:	b29b      	uxth	r3, r3
 8009330:	3b01      	subs	r3, #1
 8009332:	b29b      	uxth	r3, r3
 8009334:	687a      	ldr	r2, [r7, #4]
 8009336:	4619      	mov	r1, r3
 8009338:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800933a:	2b00      	cmp	r3, #0
 800933c:	d15d      	bne.n	80093fa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	68da      	ldr	r2, [r3, #12]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f022 0220 	bic.w	r2, r2, #32
 800934c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	68da      	ldr	r2, [r3, #12]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800935c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	695a      	ldr	r2, [r3, #20]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f022 0201 	bic.w	r2, r2, #1
 800936c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2220      	movs	r2, #32
 8009372:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2200      	movs	r2, #0
 800937a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009380:	2b01      	cmp	r3, #1
 8009382:	d135      	bne.n	80093f0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2200      	movs	r2, #0
 8009388:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	330c      	adds	r3, #12
 8009390:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	e853 3f00 	ldrex	r3, [r3]
 8009398:	613b      	str	r3, [r7, #16]
   return(result);
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	f023 0310 	bic.w	r3, r3, #16
 80093a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	330c      	adds	r3, #12
 80093a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093aa:	623a      	str	r2, [r7, #32]
 80093ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ae:	69f9      	ldr	r1, [r7, #28]
 80093b0:	6a3a      	ldr	r2, [r7, #32]
 80093b2:	e841 2300 	strex	r3, r2, [r1]
 80093b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80093b8:	69bb      	ldr	r3, [r7, #24]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d1e5      	bne.n	800938a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f003 0310 	and.w	r3, r3, #16
 80093c8:	2b10      	cmp	r3, #16
 80093ca:	d10a      	bne.n	80093e2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80093cc:	2300      	movs	r3, #0
 80093ce:	60fb      	str	r3, [r7, #12]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	60fb      	str	r3, [r7, #12]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	60fb      	str	r3, [r7, #12]
 80093e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80093e6:	4619      	mov	r1, r3
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f7ff fdd5 	bl	8008f98 <HAL_UARTEx_RxEventCallback>
 80093ee:	e002      	b.n	80093f6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f7f9 fcd9 	bl	8002da8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80093f6:	2300      	movs	r3, #0
 80093f8:	e002      	b.n	8009400 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80093fa:	2300      	movs	r3, #0
 80093fc:	e000      	b.n	8009400 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80093fe:	2302      	movs	r3, #2
  }
}
 8009400:	4618      	mov	r0, r3
 8009402:	3730      	adds	r7, #48	@ 0x30
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b084      	sub	sp, #16
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	691b      	ldr	r3, [r3, #16]
 8009416:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	68da      	ldr	r2, [r3, #12]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	430a      	orrs	r2, r1
 8009424:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	689a      	ldr	r2, [r3, #8]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	691b      	ldr	r3, [r3, #16]
 800942e:	431a      	orrs	r2, r3
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	695b      	ldr	r3, [r3, #20]
 8009434:	4313      	orrs	r3, r2
 8009436:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	68db      	ldr	r3, [r3, #12]
 800943e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8009442:	f023 030c 	bic.w	r3, r3, #12
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	6812      	ldr	r2, [r2, #0]
 800944a:	68b9      	ldr	r1, [r7, #8]
 800944c:	430b      	orrs	r3, r1
 800944e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	695b      	ldr	r3, [r3, #20]
 8009456:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	699a      	ldr	r2, [r3, #24]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	430a      	orrs	r2, r1
 8009464:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	4a2c      	ldr	r2, [pc, #176]	@ (800951c <UART_SetConfig+0x114>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d103      	bne.n	8009478 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009470:	f7fd fea2 	bl	80071b8 <HAL_RCC_GetPCLK2Freq>
 8009474:	60f8      	str	r0, [r7, #12]
 8009476:	e002      	b.n	800947e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009478:	f7fd fe8a 	bl	8007190 <HAL_RCC_GetPCLK1Freq>
 800947c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800947e:	68fa      	ldr	r2, [r7, #12]
 8009480:	4613      	mov	r3, r2
 8009482:	009b      	lsls	r3, r3, #2
 8009484:	4413      	add	r3, r2
 8009486:	009a      	lsls	r2, r3, #2
 8009488:	441a      	add	r2, r3
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	009b      	lsls	r3, r3, #2
 8009490:	fbb2 f3f3 	udiv	r3, r2, r3
 8009494:	4a22      	ldr	r2, [pc, #136]	@ (8009520 <UART_SetConfig+0x118>)
 8009496:	fba2 2303 	umull	r2, r3, r2, r3
 800949a:	095b      	lsrs	r3, r3, #5
 800949c:	0119      	lsls	r1, r3, #4
 800949e:	68fa      	ldr	r2, [r7, #12]
 80094a0:	4613      	mov	r3, r2
 80094a2:	009b      	lsls	r3, r3, #2
 80094a4:	4413      	add	r3, r2
 80094a6:	009a      	lsls	r2, r3, #2
 80094a8:	441a      	add	r2, r3
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	009b      	lsls	r3, r3, #2
 80094b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80094b4:	4b1a      	ldr	r3, [pc, #104]	@ (8009520 <UART_SetConfig+0x118>)
 80094b6:	fba3 0302 	umull	r0, r3, r3, r2
 80094ba:	095b      	lsrs	r3, r3, #5
 80094bc:	2064      	movs	r0, #100	@ 0x64
 80094be:	fb00 f303 	mul.w	r3, r0, r3
 80094c2:	1ad3      	subs	r3, r2, r3
 80094c4:	011b      	lsls	r3, r3, #4
 80094c6:	3332      	adds	r3, #50	@ 0x32
 80094c8:	4a15      	ldr	r2, [pc, #84]	@ (8009520 <UART_SetConfig+0x118>)
 80094ca:	fba2 2303 	umull	r2, r3, r2, r3
 80094ce:	095b      	lsrs	r3, r3, #5
 80094d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80094d4:	4419      	add	r1, r3
 80094d6:	68fa      	ldr	r2, [r7, #12]
 80094d8:	4613      	mov	r3, r2
 80094da:	009b      	lsls	r3, r3, #2
 80094dc:	4413      	add	r3, r2
 80094de:	009a      	lsls	r2, r3, #2
 80094e0:	441a      	add	r2, r3
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	009b      	lsls	r3, r3, #2
 80094e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80094ec:	4b0c      	ldr	r3, [pc, #48]	@ (8009520 <UART_SetConfig+0x118>)
 80094ee:	fba3 0302 	umull	r0, r3, r3, r2
 80094f2:	095b      	lsrs	r3, r3, #5
 80094f4:	2064      	movs	r0, #100	@ 0x64
 80094f6:	fb00 f303 	mul.w	r3, r0, r3
 80094fa:	1ad3      	subs	r3, r2, r3
 80094fc:	011b      	lsls	r3, r3, #4
 80094fe:	3332      	adds	r3, #50	@ 0x32
 8009500:	4a07      	ldr	r2, [pc, #28]	@ (8009520 <UART_SetConfig+0x118>)
 8009502:	fba2 2303 	umull	r2, r3, r2, r3
 8009506:	095b      	lsrs	r3, r3, #5
 8009508:	f003 020f 	and.w	r2, r3, #15
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	440a      	add	r2, r1
 8009512:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009514:	bf00      	nop
 8009516:	3710      	adds	r7, #16
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}
 800951c:	40013800 	.word	0x40013800
 8009520:	51eb851f 	.word	0x51eb851f

08009524 <std>:
 8009524:	2300      	movs	r3, #0
 8009526:	b510      	push	{r4, lr}
 8009528:	4604      	mov	r4, r0
 800952a:	e9c0 3300 	strd	r3, r3, [r0]
 800952e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009532:	6083      	str	r3, [r0, #8]
 8009534:	8181      	strh	r1, [r0, #12]
 8009536:	6643      	str	r3, [r0, #100]	@ 0x64
 8009538:	81c2      	strh	r2, [r0, #14]
 800953a:	6183      	str	r3, [r0, #24]
 800953c:	4619      	mov	r1, r3
 800953e:	2208      	movs	r2, #8
 8009540:	305c      	adds	r0, #92	@ 0x5c
 8009542:	f000 facd 	bl	8009ae0 <memset>
 8009546:	4b0d      	ldr	r3, [pc, #52]	@ (800957c <std+0x58>)
 8009548:	6224      	str	r4, [r4, #32]
 800954a:	6263      	str	r3, [r4, #36]	@ 0x24
 800954c:	4b0c      	ldr	r3, [pc, #48]	@ (8009580 <std+0x5c>)
 800954e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009550:	4b0c      	ldr	r3, [pc, #48]	@ (8009584 <std+0x60>)
 8009552:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009554:	4b0c      	ldr	r3, [pc, #48]	@ (8009588 <std+0x64>)
 8009556:	6323      	str	r3, [r4, #48]	@ 0x30
 8009558:	4b0c      	ldr	r3, [pc, #48]	@ (800958c <std+0x68>)
 800955a:	429c      	cmp	r4, r3
 800955c:	d006      	beq.n	800956c <std+0x48>
 800955e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009562:	4294      	cmp	r4, r2
 8009564:	d002      	beq.n	800956c <std+0x48>
 8009566:	33d0      	adds	r3, #208	@ 0xd0
 8009568:	429c      	cmp	r4, r3
 800956a:	d105      	bne.n	8009578 <std+0x54>
 800956c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009574:	f000 bb2c 	b.w	8009bd0 <__retarget_lock_init_recursive>
 8009578:	bd10      	pop	{r4, pc}
 800957a:	bf00      	nop
 800957c:	08009931 	.word	0x08009931
 8009580:	08009953 	.word	0x08009953
 8009584:	0800998b 	.word	0x0800998b
 8009588:	080099af 	.word	0x080099af
 800958c:	200002bc 	.word	0x200002bc

08009590 <stdio_exit_handler>:
 8009590:	4a02      	ldr	r2, [pc, #8]	@ (800959c <stdio_exit_handler+0xc>)
 8009592:	4903      	ldr	r1, [pc, #12]	@ (80095a0 <stdio_exit_handler+0x10>)
 8009594:	4803      	ldr	r0, [pc, #12]	@ (80095a4 <stdio_exit_handler+0x14>)
 8009596:	f000 b869 	b.w	800966c <_fwalk_sglue>
 800959a:	bf00      	nop
 800959c:	20000044 	.word	0x20000044
 80095a0:	0800a729 	.word	0x0800a729
 80095a4:	20000054 	.word	0x20000054

080095a8 <cleanup_stdio>:
 80095a8:	6841      	ldr	r1, [r0, #4]
 80095aa:	4b0c      	ldr	r3, [pc, #48]	@ (80095dc <cleanup_stdio+0x34>)
 80095ac:	b510      	push	{r4, lr}
 80095ae:	4299      	cmp	r1, r3
 80095b0:	4604      	mov	r4, r0
 80095b2:	d001      	beq.n	80095b8 <cleanup_stdio+0x10>
 80095b4:	f001 f8b8 	bl	800a728 <_fflush_r>
 80095b8:	68a1      	ldr	r1, [r4, #8]
 80095ba:	4b09      	ldr	r3, [pc, #36]	@ (80095e0 <cleanup_stdio+0x38>)
 80095bc:	4299      	cmp	r1, r3
 80095be:	d002      	beq.n	80095c6 <cleanup_stdio+0x1e>
 80095c0:	4620      	mov	r0, r4
 80095c2:	f001 f8b1 	bl	800a728 <_fflush_r>
 80095c6:	68e1      	ldr	r1, [r4, #12]
 80095c8:	4b06      	ldr	r3, [pc, #24]	@ (80095e4 <cleanup_stdio+0x3c>)
 80095ca:	4299      	cmp	r1, r3
 80095cc:	d004      	beq.n	80095d8 <cleanup_stdio+0x30>
 80095ce:	4620      	mov	r0, r4
 80095d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095d4:	f001 b8a8 	b.w	800a728 <_fflush_r>
 80095d8:	bd10      	pop	{r4, pc}
 80095da:	bf00      	nop
 80095dc:	200002bc 	.word	0x200002bc
 80095e0:	20000324 	.word	0x20000324
 80095e4:	2000038c 	.word	0x2000038c

080095e8 <global_stdio_init.part.0>:
 80095e8:	b510      	push	{r4, lr}
 80095ea:	4b0b      	ldr	r3, [pc, #44]	@ (8009618 <global_stdio_init.part.0+0x30>)
 80095ec:	4c0b      	ldr	r4, [pc, #44]	@ (800961c <global_stdio_init.part.0+0x34>)
 80095ee:	4a0c      	ldr	r2, [pc, #48]	@ (8009620 <global_stdio_init.part.0+0x38>)
 80095f0:	4620      	mov	r0, r4
 80095f2:	601a      	str	r2, [r3, #0]
 80095f4:	2104      	movs	r1, #4
 80095f6:	2200      	movs	r2, #0
 80095f8:	f7ff ff94 	bl	8009524 <std>
 80095fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009600:	2201      	movs	r2, #1
 8009602:	2109      	movs	r1, #9
 8009604:	f7ff ff8e 	bl	8009524 <std>
 8009608:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800960c:	2202      	movs	r2, #2
 800960e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009612:	2112      	movs	r1, #18
 8009614:	f7ff bf86 	b.w	8009524 <std>
 8009618:	200003f4 	.word	0x200003f4
 800961c:	200002bc 	.word	0x200002bc
 8009620:	08009591 	.word	0x08009591

08009624 <__sfp_lock_acquire>:
 8009624:	4801      	ldr	r0, [pc, #4]	@ (800962c <__sfp_lock_acquire+0x8>)
 8009626:	f000 bad4 	b.w	8009bd2 <__retarget_lock_acquire_recursive>
 800962a:	bf00      	nop
 800962c:	200003fd 	.word	0x200003fd

08009630 <__sfp_lock_release>:
 8009630:	4801      	ldr	r0, [pc, #4]	@ (8009638 <__sfp_lock_release+0x8>)
 8009632:	f000 bacf 	b.w	8009bd4 <__retarget_lock_release_recursive>
 8009636:	bf00      	nop
 8009638:	200003fd 	.word	0x200003fd

0800963c <__sinit>:
 800963c:	b510      	push	{r4, lr}
 800963e:	4604      	mov	r4, r0
 8009640:	f7ff fff0 	bl	8009624 <__sfp_lock_acquire>
 8009644:	6a23      	ldr	r3, [r4, #32]
 8009646:	b11b      	cbz	r3, 8009650 <__sinit+0x14>
 8009648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800964c:	f7ff bff0 	b.w	8009630 <__sfp_lock_release>
 8009650:	4b04      	ldr	r3, [pc, #16]	@ (8009664 <__sinit+0x28>)
 8009652:	6223      	str	r3, [r4, #32]
 8009654:	4b04      	ldr	r3, [pc, #16]	@ (8009668 <__sinit+0x2c>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d1f5      	bne.n	8009648 <__sinit+0xc>
 800965c:	f7ff ffc4 	bl	80095e8 <global_stdio_init.part.0>
 8009660:	e7f2      	b.n	8009648 <__sinit+0xc>
 8009662:	bf00      	nop
 8009664:	080095a9 	.word	0x080095a9
 8009668:	200003f4 	.word	0x200003f4

0800966c <_fwalk_sglue>:
 800966c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009670:	4607      	mov	r7, r0
 8009672:	4688      	mov	r8, r1
 8009674:	4614      	mov	r4, r2
 8009676:	2600      	movs	r6, #0
 8009678:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800967c:	f1b9 0901 	subs.w	r9, r9, #1
 8009680:	d505      	bpl.n	800968e <_fwalk_sglue+0x22>
 8009682:	6824      	ldr	r4, [r4, #0]
 8009684:	2c00      	cmp	r4, #0
 8009686:	d1f7      	bne.n	8009678 <_fwalk_sglue+0xc>
 8009688:	4630      	mov	r0, r6
 800968a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800968e:	89ab      	ldrh	r3, [r5, #12]
 8009690:	2b01      	cmp	r3, #1
 8009692:	d907      	bls.n	80096a4 <_fwalk_sglue+0x38>
 8009694:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009698:	3301      	adds	r3, #1
 800969a:	d003      	beq.n	80096a4 <_fwalk_sglue+0x38>
 800969c:	4629      	mov	r1, r5
 800969e:	4638      	mov	r0, r7
 80096a0:	47c0      	blx	r8
 80096a2:	4306      	orrs	r6, r0
 80096a4:	3568      	adds	r5, #104	@ 0x68
 80096a6:	e7e9      	b.n	800967c <_fwalk_sglue+0x10>

080096a8 <iprintf>:
 80096a8:	b40f      	push	{r0, r1, r2, r3}
 80096aa:	b507      	push	{r0, r1, r2, lr}
 80096ac:	4906      	ldr	r1, [pc, #24]	@ (80096c8 <iprintf+0x20>)
 80096ae:	ab04      	add	r3, sp, #16
 80096b0:	6808      	ldr	r0, [r1, #0]
 80096b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80096b6:	6881      	ldr	r1, [r0, #8]
 80096b8:	9301      	str	r3, [sp, #4]
 80096ba:	f000 fd0b 	bl	800a0d4 <_vfiprintf_r>
 80096be:	b003      	add	sp, #12
 80096c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80096c4:	b004      	add	sp, #16
 80096c6:	4770      	bx	lr
 80096c8:	20000050 	.word	0x20000050

080096cc <_puts_r>:
 80096cc:	6a03      	ldr	r3, [r0, #32]
 80096ce:	b570      	push	{r4, r5, r6, lr}
 80096d0:	4605      	mov	r5, r0
 80096d2:	460e      	mov	r6, r1
 80096d4:	6884      	ldr	r4, [r0, #8]
 80096d6:	b90b      	cbnz	r3, 80096dc <_puts_r+0x10>
 80096d8:	f7ff ffb0 	bl	800963c <__sinit>
 80096dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80096de:	07db      	lsls	r3, r3, #31
 80096e0:	d405      	bmi.n	80096ee <_puts_r+0x22>
 80096e2:	89a3      	ldrh	r3, [r4, #12]
 80096e4:	0598      	lsls	r0, r3, #22
 80096e6:	d402      	bmi.n	80096ee <_puts_r+0x22>
 80096e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80096ea:	f000 fa72 	bl	8009bd2 <__retarget_lock_acquire_recursive>
 80096ee:	89a3      	ldrh	r3, [r4, #12]
 80096f0:	0719      	lsls	r1, r3, #28
 80096f2:	d502      	bpl.n	80096fa <_puts_r+0x2e>
 80096f4:	6923      	ldr	r3, [r4, #16]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d135      	bne.n	8009766 <_puts_r+0x9a>
 80096fa:	4621      	mov	r1, r4
 80096fc:	4628      	mov	r0, r5
 80096fe:	f000 f999 	bl	8009a34 <__swsetup_r>
 8009702:	b380      	cbz	r0, 8009766 <_puts_r+0x9a>
 8009704:	f04f 35ff 	mov.w	r5, #4294967295
 8009708:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800970a:	07da      	lsls	r2, r3, #31
 800970c:	d405      	bmi.n	800971a <_puts_r+0x4e>
 800970e:	89a3      	ldrh	r3, [r4, #12]
 8009710:	059b      	lsls	r3, r3, #22
 8009712:	d402      	bmi.n	800971a <_puts_r+0x4e>
 8009714:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009716:	f000 fa5d 	bl	8009bd4 <__retarget_lock_release_recursive>
 800971a:	4628      	mov	r0, r5
 800971c:	bd70      	pop	{r4, r5, r6, pc}
 800971e:	2b00      	cmp	r3, #0
 8009720:	da04      	bge.n	800972c <_puts_r+0x60>
 8009722:	69a2      	ldr	r2, [r4, #24]
 8009724:	429a      	cmp	r2, r3
 8009726:	dc17      	bgt.n	8009758 <_puts_r+0x8c>
 8009728:	290a      	cmp	r1, #10
 800972a:	d015      	beq.n	8009758 <_puts_r+0x8c>
 800972c:	6823      	ldr	r3, [r4, #0]
 800972e:	1c5a      	adds	r2, r3, #1
 8009730:	6022      	str	r2, [r4, #0]
 8009732:	7019      	strb	r1, [r3, #0]
 8009734:	68a3      	ldr	r3, [r4, #8]
 8009736:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800973a:	3b01      	subs	r3, #1
 800973c:	60a3      	str	r3, [r4, #8]
 800973e:	2900      	cmp	r1, #0
 8009740:	d1ed      	bne.n	800971e <_puts_r+0x52>
 8009742:	2b00      	cmp	r3, #0
 8009744:	da11      	bge.n	800976a <_puts_r+0x9e>
 8009746:	4622      	mov	r2, r4
 8009748:	210a      	movs	r1, #10
 800974a:	4628      	mov	r0, r5
 800974c:	f000 f933 	bl	80099b6 <__swbuf_r>
 8009750:	3001      	adds	r0, #1
 8009752:	d0d7      	beq.n	8009704 <_puts_r+0x38>
 8009754:	250a      	movs	r5, #10
 8009756:	e7d7      	b.n	8009708 <_puts_r+0x3c>
 8009758:	4622      	mov	r2, r4
 800975a:	4628      	mov	r0, r5
 800975c:	f000 f92b 	bl	80099b6 <__swbuf_r>
 8009760:	3001      	adds	r0, #1
 8009762:	d1e7      	bne.n	8009734 <_puts_r+0x68>
 8009764:	e7ce      	b.n	8009704 <_puts_r+0x38>
 8009766:	3e01      	subs	r6, #1
 8009768:	e7e4      	b.n	8009734 <_puts_r+0x68>
 800976a:	6823      	ldr	r3, [r4, #0]
 800976c:	1c5a      	adds	r2, r3, #1
 800976e:	6022      	str	r2, [r4, #0]
 8009770:	220a      	movs	r2, #10
 8009772:	701a      	strb	r2, [r3, #0]
 8009774:	e7ee      	b.n	8009754 <_puts_r+0x88>
	...

08009778 <puts>:
 8009778:	4b02      	ldr	r3, [pc, #8]	@ (8009784 <puts+0xc>)
 800977a:	4601      	mov	r1, r0
 800977c:	6818      	ldr	r0, [r3, #0]
 800977e:	f7ff bfa5 	b.w	80096cc <_puts_r>
 8009782:	bf00      	nop
 8009784:	20000050 	.word	0x20000050

08009788 <setvbuf>:
 8009788:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800978c:	461d      	mov	r5, r3
 800978e:	4b57      	ldr	r3, [pc, #348]	@ (80098ec <setvbuf+0x164>)
 8009790:	4604      	mov	r4, r0
 8009792:	681f      	ldr	r7, [r3, #0]
 8009794:	460e      	mov	r6, r1
 8009796:	4690      	mov	r8, r2
 8009798:	b127      	cbz	r7, 80097a4 <setvbuf+0x1c>
 800979a:	6a3b      	ldr	r3, [r7, #32]
 800979c:	b913      	cbnz	r3, 80097a4 <setvbuf+0x1c>
 800979e:	4638      	mov	r0, r7
 80097a0:	f7ff ff4c 	bl	800963c <__sinit>
 80097a4:	f1b8 0f02 	cmp.w	r8, #2
 80097a8:	d006      	beq.n	80097b8 <setvbuf+0x30>
 80097aa:	f1b8 0f01 	cmp.w	r8, #1
 80097ae:	f200 809a 	bhi.w	80098e6 <setvbuf+0x15e>
 80097b2:	2d00      	cmp	r5, #0
 80097b4:	f2c0 8097 	blt.w	80098e6 <setvbuf+0x15e>
 80097b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80097ba:	07d9      	lsls	r1, r3, #31
 80097bc:	d405      	bmi.n	80097ca <setvbuf+0x42>
 80097be:	89a3      	ldrh	r3, [r4, #12]
 80097c0:	059a      	lsls	r2, r3, #22
 80097c2:	d402      	bmi.n	80097ca <setvbuf+0x42>
 80097c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80097c6:	f000 fa04 	bl	8009bd2 <__retarget_lock_acquire_recursive>
 80097ca:	4621      	mov	r1, r4
 80097cc:	4638      	mov	r0, r7
 80097ce:	f000 ffab 	bl	800a728 <_fflush_r>
 80097d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80097d4:	b141      	cbz	r1, 80097e8 <setvbuf+0x60>
 80097d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80097da:	4299      	cmp	r1, r3
 80097dc:	d002      	beq.n	80097e4 <setvbuf+0x5c>
 80097de:	4638      	mov	r0, r7
 80097e0:	f000 f9fa 	bl	8009bd8 <_free_r>
 80097e4:	2300      	movs	r3, #0
 80097e6:	6363      	str	r3, [r4, #52]	@ 0x34
 80097e8:	2300      	movs	r3, #0
 80097ea:	61a3      	str	r3, [r4, #24]
 80097ec:	6063      	str	r3, [r4, #4]
 80097ee:	89a3      	ldrh	r3, [r4, #12]
 80097f0:	061b      	lsls	r3, r3, #24
 80097f2:	d503      	bpl.n	80097fc <setvbuf+0x74>
 80097f4:	4638      	mov	r0, r7
 80097f6:	6921      	ldr	r1, [r4, #16]
 80097f8:	f000 f9ee 	bl	8009bd8 <_free_r>
 80097fc:	89a3      	ldrh	r3, [r4, #12]
 80097fe:	f1b8 0f02 	cmp.w	r8, #2
 8009802:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8009806:	f023 0303 	bic.w	r3, r3, #3
 800980a:	81a3      	strh	r3, [r4, #12]
 800980c:	d061      	beq.n	80098d2 <setvbuf+0x14a>
 800980e:	ab01      	add	r3, sp, #4
 8009810:	466a      	mov	r2, sp
 8009812:	4621      	mov	r1, r4
 8009814:	4638      	mov	r0, r7
 8009816:	f000 ffaf 	bl	800a778 <__swhatbuf_r>
 800981a:	89a3      	ldrh	r3, [r4, #12]
 800981c:	4318      	orrs	r0, r3
 800981e:	81a0      	strh	r0, [r4, #12]
 8009820:	bb2d      	cbnz	r5, 800986e <setvbuf+0xe6>
 8009822:	9d00      	ldr	r5, [sp, #0]
 8009824:	4628      	mov	r0, r5
 8009826:	f000 fa1f 	bl	8009c68 <malloc>
 800982a:	4606      	mov	r6, r0
 800982c:	2800      	cmp	r0, #0
 800982e:	d152      	bne.n	80098d6 <setvbuf+0x14e>
 8009830:	f8dd 9000 	ldr.w	r9, [sp]
 8009834:	45a9      	cmp	r9, r5
 8009836:	d140      	bne.n	80098ba <setvbuf+0x132>
 8009838:	f04f 35ff 	mov.w	r5, #4294967295
 800983c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009840:	f043 0202 	orr.w	r2, r3, #2
 8009844:	81a2      	strh	r2, [r4, #12]
 8009846:	2200      	movs	r2, #0
 8009848:	60a2      	str	r2, [r4, #8]
 800984a:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800984e:	6022      	str	r2, [r4, #0]
 8009850:	6122      	str	r2, [r4, #16]
 8009852:	2201      	movs	r2, #1
 8009854:	6162      	str	r2, [r4, #20]
 8009856:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009858:	07d6      	lsls	r6, r2, #31
 800985a:	d404      	bmi.n	8009866 <setvbuf+0xde>
 800985c:	0598      	lsls	r0, r3, #22
 800985e:	d402      	bmi.n	8009866 <setvbuf+0xde>
 8009860:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009862:	f000 f9b7 	bl	8009bd4 <__retarget_lock_release_recursive>
 8009866:	4628      	mov	r0, r5
 8009868:	b003      	add	sp, #12
 800986a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800986e:	2e00      	cmp	r6, #0
 8009870:	d0d8      	beq.n	8009824 <setvbuf+0x9c>
 8009872:	6a3b      	ldr	r3, [r7, #32]
 8009874:	b913      	cbnz	r3, 800987c <setvbuf+0xf4>
 8009876:	4638      	mov	r0, r7
 8009878:	f7ff fee0 	bl	800963c <__sinit>
 800987c:	f1b8 0f01 	cmp.w	r8, #1
 8009880:	bf08      	it	eq
 8009882:	89a3      	ldrheq	r3, [r4, #12]
 8009884:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8009888:	bf04      	itt	eq
 800988a:	f043 0301 	orreq.w	r3, r3, #1
 800988e:	81a3      	strheq	r3, [r4, #12]
 8009890:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009894:	6026      	str	r6, [r4, #0]
 8009896:	f013 0208 	ands.w	r2, r3, #8
 800989a:	d01e      	beq.n	80098da <setvbuf+0x152>
 800989c:	07d9      	lsls	r1, r3, #31
 800989e:	bf41      	itttt	mi
 80098a0:	2200      	movmi	r2, #0
 80098a2:	426d      	negmi	r5, r5
 80098a4:	60a2      	strmi	r2, [r4, #8]
 80098a6:	61a5      	strmi	r5, [r4, #24]
 80098a8:	bf58      	it	pl
 80098aa:	60a5      	strpl	r5, [r4, #8]
 80098ac:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80098ae:	07d2      	lsls	r2, r2, #31
 80098b0:	d401      	bmi.n	80098b6 <setvbuf+0x12e>
 80098b2:	059b      	lsls	r3, r3, #22
 80098b4:	d513      	bpl.n	80098de <setvbuf+0x156>
 80098b6:	2500      	movs	r5, #0
 80098b8:	e7d5      	b.n	8009866 <setvbuf+0xde>
 80098ba:	4648      	mov	r0, r9
 80098bc:	f000 f9d4 	bl	8009c68 <malloc>
 80098c0:	4606      	mov	r6, r0
 80098c2:	2800      	cmp	r0, #0
 80098c4:	d0b8      	beq.n	8009838 <setvbuf+0xb0>
 80098c6:	89a3      	ldrh	r3, [r4, #12]
 80098c8:	464d      	mov	r5, r9
 80098ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098ce:	81a3      	strh	r3, [r4, #12]
 80098d0:	e7cf      	b.n	8009872 <setvbuf+0xea>
 80098d2:	2500      	movs	r5, #0
 80098d4:	e7b2      	b.n	800983c <setvbuf+0xb4>
 80098d6:	46a9      	mov	r9, r5
 80098d8:	e7f5      	b.n	80098c6 <setvbuf+0x13e>
 80098da:	60a2      	str	r2, [r4, #8]
 80098dc:	e7e6      	b.n	80098ac <setvbuf+0x124>
 80098de:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80098e0:	f000 f978 	bl	8009bd4 <__retarget_lock_release_recursive>
 80098e4:	e7e7      	b.n	80098b6 <setvbuf+0x12e>
 80098e6:	f04f 35ff 	mov.w	r5, #4294967295
 80098ea:	e7bc      	b.n	8009866 <setvbuf+0xde>
 80098ec:	20000050 	.word	0x20000050

080098f0 <siprintf>:
 80098f0:	b40e      	push	{r1, r2, r3}
 80098f2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80098f6:	b500      	push	{lr}
 80098f8:	b09c      	sub	sp, #112	@ 0x70
 80098fa:	ab1d      	add	r3, sp, #116	@ 0x74
 80098fc:	9002      	str	r0, [sp, #8]
 80098fe:	9006      	str	r0, [sp, #24]
 8009900:	9107      	str	r1, [sp, #28]
 8009902:	9104      	str	r1, [sp, #16]
 8009904:	4808      	ldr	r0, [pc, #32]	@ (8009928 <siprintf+0x38>)
 8009906:	4909      	ldr	r1, [pc, #36]	@ (800992c <siprintf+0x3c>)
 8009908:	f853 2b04 	ldr.w	r2, [r3], #4
 800990c:	9105      	str	r1, [sp, #20]
 800990e:	6800      	ldr	r0, [r0, #0]
 8009910:	a902      	add	r1, sp, #8
 8009912:	9301      	str	r3, [sp, #4]
 8009914:	f000 faba 	bl	8009e8c <_svfiprintf_r>
 8009918:	2200      	movs	r2, #0
 800991a:	9b02      	ldr	r3, [sp, #8]
 800991c:	701a      	strb	r2, [r3, #0]
 800991e:	b01c      	add	sp, #112	@ 0x70
 8009920:	f85d eb04 	ldr.w	lr, [sp], #4
 8009924:	b003      	add	sp, #12
 8009926:	4770      	bx	lr
 8009928:	20000050 	.word	0x20000050
 800992c:	ffff0208 	.word	0xffff0208

08009930 <__sread>:
 8009930:	b510      	push	{r4, lr}
 8009932:	460c      	mov	r4, r1
 8009934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009938:	f000 f8fc 	bl	8009b34 <_read_r>
 800993c:	2800      	cmp	r0, #0
 800993e:	bfab      	itete	ge
 8009940:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009942:	89a3      	ldrhlt	r3, [r4, #12]
 8009944:	181b      	addge	r3, r3, r0
 8009946:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800994a:	bfac      	ite	ge
 800994c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800994e:	81a3      	strhlt	r3, [r4, #12]
 8009950:	bd10      	pop	{r4, pc}

08009952 <__swrite>:
 8009952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009956:	461f      	mov	r7, r3
 8009958:	898b      	ldrh	r3, [r1, #12]
 800995a:	4605      	mov	r5, r0
 800995c:	05db      	lsls	r3, r3, #23
 800995e:	460c      	mov	r4, r1
 8009960:	4616      	mov	r6, r2
 8009962:	d505      	bpl.n	8009970 <__swrite+0x1e>
 8009964:	2302      	movs	r3, #2
 8009966:	2200      	movs	r2, #0
 8009968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800996c:	f000 f8d0 	bl	8009b10 <_lseek_r>
 8009970:	89a3      	ldrh	r3, [r4, #12]
 8009972:	4632      	mov	r2, r6
 8009974:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009978:	81a3      	strh	r3, [r4, #12]
 800997a:	4628      	mov	r0, r5
 800997c:	463b      	mov	r3, r7
 800997e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009982:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009986:	f000 b8e7 	b.w	8009b58 <_write_r>

0800998a <__sseek>:
 800998a:	b510      	push	{r4, lr}
 800998c:	460c      	mov	r4, r1
 800998e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009992:	f000 f8bd 	bl	8009b10 <_lseek_r>
 8009996:	1c43      	adds	r3, r0, #1
 8009998:	89a3      	ldrh	r3, [r4, #12]
 800999a:	bf15      	itete	ne
 800999c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800999e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80099a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80099a6:	81a3      	strheq	r3, [r4, #12]
 80099a8:	bf18      	it	ne
 80099aa:	81a3      	strhne	r3, [r4, #12]
 80099ac:	bd10      	pop	{r4, pc}

080099ae <__sclose>:
 80099ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099b2:	f000 b89d 	b.w	8009af0 <_close_r>

080099b6 <__swbuf_r>:
 80099b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099b8:	460e      	mov	r6, r1
 80099ba:	4614      	mov	r4, r2
 80099bc:	4605      	mov	r5, r0
 80099be:	b118      	cbz	r0, 80099c8 <__swbuf_r+0x12>
 80099c0:	6a03      	ldr	r3, [r0, #32]
 80099c2:	b90b      	cbnz	r3, 80099c8 <__swbuf_r+0x12>
 80099c4:	f7ff fe3a 	bl	800963c <__sinit>
 80099c8:	69a3      	ldr	r3, [r4, #24]
 80099ca:	60a3      	str	r3, [r4, #8]
 80099cc:	89a3      	ldrh	r3, [r4, #12]
 80099ce:	071a      	lsls	r2, r3, #28
 80099d0:	d501      	bpl.n	80099d6 <__swbuf_r+0x20>
 80099d2:	6923      	ldr	r3, [r4, #16]
 80099d4:	b943      	cbnz	r3, 80099e8 <__swbuf_r+0x32>
 80099d6:	4621      	mov	r1, r4
 80099d8:	4628      	mov	r0, r5
 80099da:	f000 f82b 	bl	8009a34 <__swsetup_r>
 80099de:	b118      	cbz	r0, 80099e8 <__swbuf_r+0x32>
 80099e0:	f04f 37ff 	mov.w	r7, #4294967295
 80099e4:	4638      	mov	r0, r7
 80099e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099e8:	6823      	ldr	r3, [r4, #0]
 80099ea:	6922      	ldr	r2, [r4, #16]
 80099ec:	b2f6      	uxtb	r6, r6
 80099ee:	1a98      	subs	r0, r3, r2
 80099f0:	6963      	ldr	r3, [r4, #20]
 80099f2:	4637      	mov	r7, r6
 80099f4:	4283      	cmp	r3, r0
 80099f6:	dc05      	bgt.n	8009a04 <__swbuf_r+0x4e>
 80099f8:	4621      	mov	r1, r4
 80099fa:	4628      	mov	r0, r5
 80099fc:	f000 fe94 	bl	800a728 <_fflush_r>
 8009a00:	2800      	cmp	r0, #0
 8009a02:	d1ed      	bne.n	80099e0 <__swbuf_r+0x2a>
 8009a04:	68a3      	ldr	r3, [r4, #8]
 8009a06:	3b01      	subs	r3, #1
 8009a08:	60a3      	str	r3, [r4, #8]
 8009a0a:	6823      	ldr	r3, [r4, #0]
 8009a0c:	1c5a      	adds	r2, r3, #1
 8009a0e:	6022      	str	r2, [r4, #0]
 8009a10:	701e      	strb	r6, [r3, #0]
 8009a12:	6962      	ldr	r2, [r4, #20]
 8009a14:	1c43      	adds	r3, r0, #1
 8009a16:	429a      	cmp	r2, r3
 8009a18:	d004      	beq.n	8009a24 <__swbuf_r+0x6e>
 8009a1a:	89a3      	ldrh	r3, [r4, #12]
 8009a1c:	07db      	lsls	r3, r3, #31
 8009a1e:	d5e1      	bpl.n	80099e4 <__swbuf_r+0x2e>
 8009a20:	2e0a      	cmp	r6, #10
 8009a22:	d1df      	bne.n	80099e4 <__swbuf_r+0x2e>
 8009a24:	4621      	mov	r1, r4
 8009a26:	4628      	mov	r0, r5
 8009a28:	f000 fe7e 	bl	800a728 <_fflush_r>
 8009a2c:	2800      	cmp	r0, #0
 8009a2e:	d0d9      	beq.n	80099e4 <__swbuf_r+0x2e>
 8009a30:	e7d6      	b.n	80099e0 <__swbuf_r+0x2a>
	...

08009a34 <__swsetup_r>:
 8009a34:	b538      	push	{r3, r4, r5, lr}
 8009a36:	4b29      	ldr	r3, [pc, #164]	@ (8009adc <__swsetup_r+0xa8>)
 8009a38:	4605      	mov	r5, r0
 8009a3a:	6818      	ldr	r0, [r3, #0]
 8009a3c:	460c      	mov	r4, r1
 8009a3e:	b118      	cbz	r0, 8009a48 <__swsetup_r+0x14>
 8009a40:	6a03      	ldr	r3, [r0, #32]
 8009a42:	b90b      	cbnz	r3, 8009a48 <__swsetup_r+0x14>
 8009a44:	f7ff fdfa 	bl	800963c <__sinit>
 8009a48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a4c:	0719      	lsls	r1, r3, #28
 8009a4e:	d422      	bmi.n	8009a96 <__swsetup_r+0x62>
 8009a50:	06da      	lsls	r2, r3, #27
 8009a52:	d407      	bmi.n	8009a64 <__swsetup_r+0x30>
 8009a54:	2209      	movs	r2, #9
 8009a56:	602a      	str	r2, [r5, #0]
 8009a58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a60:	81a3      	strh	r3, [r4, #12]
 8009a62:	e033      	b.n	8009acc <__swsetup_r+0x98>
 8009a64:	0758      	lsls	r0, r3, #29
 8009a66:	d512      	bpl.n	8009a8e <__swsetup_r+0x5a>
 8009a68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009a6a:	b141      	cbz	r1, 8009a7e <__swsetup_r+0x4a>
 8009a6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009a70:	4299      	cmp	r1, r3
 8009a72:	d002      	beq.n	8009a7a <__swsetup_r+0x46>
 8009a74:	4628      	mov	r0, r5
 8009a76:	f000 f8af 	bl	8009bd8 <_free_r>
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	6363      	str	r3, [r4, #52]	@ 0x34
 8009a7e:	89a3      	ldrh	r3, [r4, #12]
 8009a80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009a84:	81a3      	strh	r3, [r4, #12]
 8009a86:	2300      	movs	r3, #0
 8009a88:	6063      	str	r3, [r4, #4]
 8009a8a:	6923      	ldr	r3, [r4, #16]
 8009a8c:	6023      	str	r3, [r4, #0]
 8009a8e:	89a3      	ldrh	r3, [r4, #12]
 8009a90:	f043 0308 	orr.w	r3, r3, #8
 8009a94:	81a3      	strh	r3, [r4, #12]
 8009a96:	6923      	ldr	r3, [r4, #16]
 8009a98:	b94b      	cbnz	r3, 8009aae <__swsetup_r+0x7a>
 8009a9a:	89a3      	ldrh	r3, [r4, #12]
 8009a9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009aa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009aa4:	d003      	beq.n	8009aae <__swsetup_r+0x7a>
 8009aa6:	4621      	mov	r1, r4
 8009aa8:	4628      	mov	r0, r5
 8009aaa:	f000 fe8a 	bl	800a7c2 <__smakebuf_r>
 8009aae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ab2:	f013 0201 	ands.w	r2, r3, #1
 8009ab6:	d00a      	beq.n	8009ace <__swsetup_r+0x9a>
 8009ab8:	2200      	movs	r2, #0
 8009aba:	60a2      	str	r2, [r4, #8]
 8009abc:	6962      	ldr	r2, [r4, #20]
 8009abe:	4252      	negs	r2, r2
 8009ac0:	61a2      	str	r2, [r4, #24]
 8009ac2:	6922      	ldr	r2, [r4, #16]
 8009ac4:	b942      	cbnz	r2, 8009ad8 <__swsetup_r+0xa4>
 8009ac6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009aca:	d1c5      	bne.n	8009a58 <__swsetup_r+0x24>
 8009acc:	bd38      	pop	{r3, r4, r5, pc}
 8009ace:	0799      	lsls	r1, r3, #30
 8009ad0:	bf58      	it	pl
 8009ad2:	6962      	ldrpl	r2, [r4, #20]
 8009ad4:	60a2      	str	r2, [r4, #8]
 8009ad6:	e7f4      	b.n	8009ac2 <__swsetup_r+0x8e>
 8009ad8:	2000      	movs	r0, #0
 8009ada:	e7f7      	b.n	8009acc <__swsetup_r+0x98>
 8009adc:	20000050 	.word	0x20000050

08009ae0 <memset>:
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	4402      	add	r2, r0
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d100      	bne.n	8009aea <memset+0xa>
 8009ae8:	4770      	bx	lr
 8009aea:	f803 1b01 	strb.w	r1, [r3], #1
 8009aee:	e7f9      	b.n	8009ae4 <memset+0x4>

08009af0 <_close_r>:
 8009af0:	b538      	push	{r3, r4, r5, lr}
 8009af2:	2300      	movs	r3, #0
 8009af4:	4d05      	ldr	r5, [pc, #20]	@ (8009b0c <_close_r+0x1c>)
 8009af6:	4604      	mov	r4, r0
 8009af8:	4608      	mov	r0, r1
 8009afa:	602b      	str	r3, [r5, #0]
 8009afc:	f7fa f954 	bl	8003da8 <_close>
 8009b00:	1c43      	adds	r3, r0, #1
 8009b02:	d102      	bne.n	8009b0a <_close_r+0x1a>
 8009b04:	682b      	ldr	r3, [r5, #0]
 8009b06:	b103      	cbz	r3, 8009b0a <_close_r+0x1a>
 8009b08:	6023      	str	r3, [r4, #0]
 8009b0a:	bd38      	pop	{r3, r4, r5, pc}
 8009b0c:	200003f8 	.word	0x200003f8

08009b10 <_lseek_r>:
 8009b10:	b538      	push	{r3, r4, r5, lr}
 8009b12:	4604      	mov	r4, r0
 8009b14:	4608      	mov	r0, r1
 8009b16:	4611      	mov	r1, r2
 8009b18:	2200      	movs	r2, #0
 8009b1a:	4d05      	ldr	r5, [pc, #20]	@ (8009b30 <_lseek_r+0x20>)
 8009b1c:	602a      	str	r2, [r5, #0]
 8009b1e:	461a      	mov	r2, r3
 8009b20:	f7fa f966 	bl	8003df0 <_lseek>
 8009b24:	1c43      	adds	r3, r0, #1
 8009b26:	d102      	bne.n	8009b2e <_lseek_r+0x1e>
 8009b28:	682b      	ldr	r3, [r5, #0]
 8009b2a:	b103      	cbz	r3, 8009b2e <_lseek_r+0x1e>
 8009b2c:	6023      	str	r3, [r4, #0]
 8009b2e:	bd38      	pop	{r3, r4, r5, pc}
 8009b30:	200003f8 	.word	0x200003f8

08009b34 <_read_r>:
 8009b34:	b538      	push	{r3, r4, r5, lr}
 8009b36:	4604      	mov	r4, r0
 8009b38:	4608      	mov	r0, r1
 8009b3a:	4611      	mov	r1, r2
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	4d05      	ldr	r5, [pc, #20]	@ (8009b54 <_read_r+0x20>)
 8009b40:	602a      	str	r2, [r5, #0]
 8009b42:	461a      	mov	r2, r3
 8009b44:	f7fa fc56 	bl	80043f4 <_read>
 8009b48:	1c43      	adds	r3, r0, #1
 8009b4a:	d102      	bne.n	8009b52 <_read_r+0x1e>
 8009b4c:	682b      	ldr	r3, [r5, #0]
 8009b4e:	b103      	cbz	r3, 8009b52 <_read_r+0x1e>
 8009b50:	6023      	str	r3, [r4, #0]
 8009b52:	bd38      	pop	{r3, r4, r5, pc}
 8009b54:	200003f8 	.word	0x200003f8

08009b58 <_write_r>:
 8009b58:	b538      	push	{r3, r4, r5, lr}
 8009b5a:	4604      	mov	r4, r0
 8009b5c:	4608      	mov	r0, r1
 8009b5e:	4611      	mov	r1, r2
 8009b60:	2200      	movs	r2, #0
 8009b62:	4d05      	ldr	r5, [pc, #20]	@ (8009b78 <_write_r+0x20>)
 8009b64:	602a      	str	r2, [r5, #0]
 8009b66:	461a      	mov	r2, r3
 8009b68:	f7fa fc18 	bl	800439c <_write>
 8009b6c:	1c43      	adds	r3, r0, #1
 8009b6e:	d102      	bne.n	8009b76 <_write_r+0x1e>
 8009b70:	682b      	ldr	r3, [r5, #0]
 8009b72:	b103      	cbz	r3, 8009b76 <_write_r+0x1e>
 8009b74:	6023      	str	r3, [r4, #0]
 8009b76:	bd38      	pop	{r3, r4, r5, pc}
 8009b78:	200003f8 	.word	0x200003f8

08009b7c <__errno>:
 8009b7c:	4b01      	ldr	r3, [pc, #4]	@ (8009b84 <__errno+0x8>)
 8009b7e:	6818      	ldr	r0, [r3, #0]
 8009b80:	4770      	bx	lr
 8009b82:	bf00      	nop
 8009b84:	20000050 	.word	0x20000050

08009b88 <__libc_init_array>:
 8009b88:	b570      	push	{r4, r5, r6, lr}
 8009b8a:	2600      	movs	r6, #0
 8009b8c:	4d0c      	ldr	r5, [pc, #48]	@ (8009bc0 <__libc_init_array+0x38>)
 8009b8e:	4c0d      	ldr	r4, [pc, #52]	@ (8009bc4 <__libc_init_array+0x3c>)
 8009b90:	1b64      	subs	r4, r4, r5
 8009b92:	10a4      	asrs	r4, r4, #2
 8009b94:	42a6      	cmp	r6, r4
 8009b96:	d109      	bne.n	8009bac <__libc_init_array+0x24>
 8009b98:	f000 feee 	bl	800a978 <_init>
 8009b9c:	2600      	movs	r6, #0
 8009b9e:	4d0a      	ldr	r5, [pc, #40]	@ (8009bc8 <__libc_init_array+0x40>)
 8009ba0:	4c0a      	ldr	r4, [pc, #40]	@ (8009bcc <__libc_init_array+0x44>)
 8009ba2:	1b64      	subs	r4, r4, r5
 8009ba4:	10a4      	asrs	r4, r4, #2
 8009ba6:	42a6      	cmp	r6, r4
 8009ba8:	d105      	bne.n	8009bb6 <__libc_init_array+0x2e>
 8009baa:	bd70      	pop	{r4, r5, r6, pc}
 8009bac:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bb0:	4798      	blx	r3
 8009bb2:	3601      	adds	r6, #1
 8009bb4:	e7ee      	b.n	8009b94 <__libc_init_array+0xc>
 8009bb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bba:	4798      	blx	r3
 8009bbc:	3601      	adds	r6, #1
 8009bbe:	e7f2      	b.n	8009ba6 <__libc_init_array+0x1e>
 8009bc0:	0800c714 	.word	0x0800c714
 8009bc4:	0800c714 	.word	0x0800c714
 8009bc8:	0800c714 	.word	0x0800c714
 8009bcc:	0800c718 	.word	0x0800c718

08009bd0 <__retarget_lock_init_recursive>:
 8009bd0:	4770      	bx	lr

08009bd2 <__retarget_lock_acquire_recursive>:
 8009bd2:	4770      	bx	lr

08009bd4 <__retarget_lock_release_recursive>:
 8009bd4:	4770      	bx	lr
	...

08009bd8 <_free_r>:
 8009bd8:	b538      	push	{r3, r4, r5, lr}
 8009bda:	4605      	mov	r5, r0
 8009bdc:	2900      	cmp	r1, #0
 8009bde:	d040      	beq.n	8009c62 <_free_r+0x8a>
 8009be0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009be4:	1f0c      	subs	r4, r1, #4
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	bfb8      	it	lt
 8009bea:	18e4      	addlt	r4, r4, r3
 8009bec:	f000 f8e6 	bl	8009dbc <__malloc_lock>
 8009bf0:	4a1c      	ldr	r2, [pc, #112]	@ (8009c64 <_free_r+0x8c>)
 8009bf2:	6813      	ldr	r3, [r2, #0]
 8009bf4:	b933      	cbnz	r3, 8009c04 <_free_r+0x2c>
 8009bf6:	6063      	str	r3, [r4, #4]
 8009bf8:	6014      	str	r4, [r2, #0]
 8009bfa:	4628      	mov	r0, r5
 8009bfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c00:	f000 b8e2 	b.w	8009dc8 <__malloc_unlock>
 8009c04:	42a3      	cmp	r3, r4
 8009c06:	d908      	bls.n	8009c1a <_free_r+0x42>
 8009c08:	6820      	ldr	r0, [r4, #0]
 8009c0a:	1821      	adds	r1, r4, r0
 8009c0c:	428b      	cmp	r3, r1
 8009c0e:	bf01      	itttt	eq
 8009c10:	6819      	ldreq	r1, [r3, #0]
 8009c12:	685b      	ldreq	r3, [r3, #4]
 8009c14:	1809      	addeq	r1, r1, r0
 8009c16:	6021      	streq	r1, [r4, #0]
 8009c18:	e7ed      	b.n	8009bf6 <_free_r+0x1e>
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	685b      	ldr	r3, [r3, #4]
 8009c1e:	b10b      	cbz	r3, 8009c24 <_free_r+0x4c>
 8009c20:	42a3      	cmp	r3, r4
 8009c22:	d9fa      	bls.n	8009c1a <_free_r+0x42>
 8009c24:	6811      	ldr	r1, [r2, #0]
 8009c26:	1850      	adds	r0, r2, r1
 8009c28:	42a0      	cmp	r0, r4
 8009c2a:	d10b      	bne.n	8009c44 <_free_r+0x6c>
 8009c2c:	6820      	ldr	r0, [r4, #0]
 8009c2e:	4401      	add	r1, r0
 8009c30:	1850      	adds	r0, r2, r1
 8009c32:	4283      	cmp	r3, r0
 8009c34:	6011      	str	r1, [r2, #0]
 8009c36:	d1e0      	bne.n	8009bfa <_free_r+0x22>
 8009c38:	6818      	ldr	r0, [r3, #0]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	4408      	add	r0, r1
 8009c3e:	6010      	str	r0, [r2, #0]
 8009c40:	6053      	str	r3, [r2, #4]
 8009c42:	e7da      	b.n	8009bfa <_free_r+0x22>
 8009c44:	d902      	bls.n	8009c4c <_free_r+0x74>
 8009c46:	230c      	movs	r3, #12
 8009c48:	602b      	str	r3, [r5, #0]
 8009c4a:	e7d6      	b.n	8009bfa <_free_r+0x22>
 8009c4c:	6820      	ldr	r0, [r4, #0]
 8009c4e:	1821      	adds	r1, r4, r0
 8009c50:	428b      	cmp	r3, r1
 8009c52:	bf01      	itttt	eq
 8009c54:	6819      	ldreq	r1, [r3, #0]
 8009c56:	685b      	ldreq	r3, [r3, #4]
 8009c58:	1809      	addeq	r1, r1, r0
 8009c5a:	6021      	streq	r1, [r4, #0]
 8009c5c:	6063      	str	r3, [r4, #4]
 8009c5e:	6054      	str	r4, [r2, #4]
 8009c60:	e7cb      	b.n	8009bfa <_free_r+0x22>
 8009c62:	bd38      	pop	{r3, r4, r5, pc}
 8009c64:	20000404 	.word	0x20000404

08009c68 <malloc>:
 8009c68:	4b02      	ldr	r3, [pc, #8]	@ (8009c74 <malloc+0xc>)
 8009c6a:	4601      	mov	r1, r0
 8009c6c:	6818      	ldr	r0, [r3, #0]
 8009c6e:	f000 b825 	b.w	8009cbc <_malloc_r>
 8009c72:	bf00      	nop
 8009c74:	20000050 	.word	0x20000050

08009c78 <sbrk_aligned>:
 8009c78:	b570      	push	{r4, r5, r6, lr}
 8009c7a:	4e0f      	ldr	r6, [pc, #60]	@ (8009cb8 <sbrk_aligned+0x40>)
 8009c7c:	460c      	mov	r4, r1
 8009c7e:	6831      	ldr	r1, [r6, #0]
 8009c80:	4605      	mov	r5, r0
 8009c82:	b911      	cbnz	r1, 8009c8a <sbrk_aligned+0x12>
 8009c84:	f000 fe16 	bl	800a8b4 <_sbrk_r>
 8009c88:	6030      	str	r0, [r6, #0]
 8009c8a:	4621      	mov	r1, r4
 8009c8c:	4628      	mov	r0, r5
 8009c8e:	f000 fe11 	bl	800a8b4 <_sbrk_r>
 8009c92:	1c43      	adds	r3, r0, #1
 8009c94:	d103      	bne.n	8009c9e <sbrk_aligned+0x26>
 8009c96:	f04f 34ff 	mov.w	r4, #4294967295
 8009c9a:	4620      	mov	r0, r4
 8009c9c:	bd70      	pop	{r4, r5, r6, pc}
 8009c9e:	1cc4      	adds	r4, r0, #3
 8009ca0:	f024 0403 	bic.w	r4, r4, #3
 8009ca4:	42a0      	cmp	r0, r4
 8009ca6:	d0f8      	beq.n	8009c9a <sbrk_aligned+0x22>
 8009ca8:	1a21      	subs	r1, r4, r0
 8009caa:	4628      	mov	r0, r5
 8009cac:	f000 fe02 	bl	800a8b4 <_sbrk_r>
 8009cb0:	3001      	adds	r0, #1
 8009cb2:	d1f2      	bne.n	8009c9a <sbrk_aligned+0x22>
 8009cb4:	e7ef      	b.n	8009c96 <sbrk_aligned+0x1e>
 8009cb6:	bf00      	nop
 8009cb8:	20000400 	.word	0x20000400

08009cbc <_malloc_r>:
 8009cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cc0:	1ccd      	adds	r5, r1, #3
 8009cc2:	f025 0503 	bic.w	r5, r5, #3
 8009cc6:	3508      	adds	r5, #8
 8009cc8:	2d0c      	cmp	r5, #12
 8009cca:	bf38      	it	cc
 8009ccc:	250c      	movcc	r5, #12
 8009cce:	2d00      	cmp	r5, #0
 8009cd0:	4606      	mov	r6, r0
 8009cd2:	db01      	blt.n	8009cd8 <_malloc_r+0x1c>
 8009cd4:	42a9      	cmp	r1, r5
 8009cd6:	d904      	bls.n	8009ce2 <_malloc_r+0x26>
 8009cd8:	230c      	movs	r3, #12
 8009cda:	6033      	str	r3, [r6, #0]
 8009cdc:	2000      	movs	r0, #0
 8009cde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ce2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009db8 <_malloc_r+0xfc>
 8009ce6:	f000 f869 	bl	8009dbc <__malloc_lock>
 8009cea:	f8d8 3000 	ldr.w	r3, [r8]
 8009cee:	461c      	mov	r4, r3
 8009cf0:	bb44      	cbnz	r4, 8009d44 <_malloc_r+0x88>
 8009cf2:	4629      	mov	r1, r5
 8009cf4:	4630      	mov	r0, r6
 8009cf6:	f7ff ffbf 	bl	8009c78 <sbrk_aligned>
 8009cfa:	1c43      	adds	r3, r0, #1
 8009cfc:	4604      	mov	r4, r0
 8009cfe:	d158      	bne.n	8009db2 <_malloc_r+0xf6>
 8009d00:	f8d8 4000 	ldr.w	r4, [r8]
 8009d04:	4627      	mov	r7, r4
 8009d06:	2f00      	cmp	r7, #0
 8009d08:	d143      	bne.n	8009d92 <_malloc_r+0xd6>
 8009d0a:	2c00      	cmp	r4, #0
 8009d0c:	d04b      	beq.n	8009da6 <_malloc_r+0xea>
 8009d0e:	6823      	ldr	r3, [r4, #0]
 8009d10:	4639      	mov	r1, r7
 8009d12:	4630      	mov	r0, r6
 8009d14:	eb04 0903 	add.w	r9, r4, r3
 8009d18:	f000 fdcc 	bl	800a8b4 <_sbrk_r>
 8009d1c:	4581      	cmp	r9, r0
 8009d1e:	d142      	bne.n	8009da6 <_malloc_r+0xea>
 8009d20:	6821      	ldr	r1, [r4, #0]
 8009d22:	4630      	mov	r0, r6
 8009d24:	1a6d      	subs	r5, r5, r1
 8009d26:	4629      	mov	r1, r5
 8009d28:	f7ff ffa6 	bl	8009c78 <sbrk_aligned>
 8009d2c:	3001      	adds	r0, #1
 8009d2e:	d03a      	beq.n	8009da6 <_malloc_r+0xea>
 8009d30:	6823      	ldr	r3, [r4, #0]
 8009d32:	442b      	add	r3, r5
 8009d34:	6023      	str	r3, [r4, #0]
 8009d36:	f8d8 3000 	ldr.w	r3, [r8]
 8009d3a:	685a      	ldr	r2, [r3, #4]
 8009d3c:	bb62      	cbnz	r2, 8009d98 <_malloc_r+0xdc>
 8009d3e:	f8c8 7000 	str.w	r7, [r8]
 8009d42:	e00f      	b.n	8009d64 <_malloc_r+0xa8>
 8009d44:	6822      	ldr	r2, [r4, #0]
 8009d46:	1b52      	subs	r2, r2, r5
 8009d48:	d420      	bmi.n	8009d8c <_malloc_r+0xd0>
 8009d4a:	2a0b      	cmp	r2, #11
 8009d4c:	d917      	bls.n	8009d7e <_malloc_r+0xc2>
 8009d4e:	1961      	adds	r1, r4, r5
 8009d50:	42a3      	cmp	r3, r4
 8009d52:	6025      	str	r5, [r4, #0]
 8009d54:	bf18      	it	ne
 8009d56:	6059      	strne	r1, [r3, #4]
 8009d58:	6863      	ldr	r3, [r4, #4]
 8009d5a:	bf08      	it	eq
 8009d5c:	f8c8 1000 	streq.w	r1, [r8]
 8009d60:	5162      	str	r2, [r4, r5]
 8009d62:	604b      	str	r3, [r1, #4]
 8009d64:	4630      	mov	r0, r6
 8009d66:	f000 f82f 	bl	8009dc8 <__malloc_unlock>
 8009d6a:	f104 000b 	add.w	r0, r4, #11
 8009d6e:	1d23      	adds	r3, r4, #4
 8009d70:	f020 0007 	bic.w	r0, r0, #7
 8009d74:	1ac2      	subs	r2, r0, r3
 8009d76:	bf1c      	itt	ne
 8009d78:	1a1b      	subne	r3, r3, r0
 8009d7a:	50a3      	strne	r3, [r4, r2]
 8009d7c:	e7af      	b.n	8009cde <_malloc_r+0x22>
 8009d7e:	6862      	ldr	r2, [r4, #4]
 8009d80:	42a3      	cmp	r3, r4
 8009d82:	bf0c      	ite	eq
 8009d84:	f8c8 2000 	streq.w	r2, [r8]
 8009d88:	605a      	strne	r2, [r3, #4]
 8009d8a:	e7eb      	b.n	8009d64 <_malloc_r+0xa8>
 8009d8c:	4623      	mov	r3, r4
 8009d8e:	6864      	ldr	r4, [r4, #4]
 8009d90:	e7ae      	b.n	8009cf0 <_malloc_r+0x34>
 8009d92:	463c      	mov	r4, r7
 8009d94:	687f      	ldr	r7, [r7, #4]
 8009d96:	e7b6      	b.n	8009d06 <_malloc_r+0x4a>
 8009d98:	461a      	mov	r2, r3
 8009d9a:	685b      	ldr	r3, [r3, #4]
 8009d9c:	42a3      	cmp	r3, r4
 8009d9e:	d1fb      	bne.n	8009d98 <_malloc_r+0xdc>
 8009da0:	2300      	movs	r3, #0
 8009da2:	6053      	str	r3, [r2, #4]
 8009da4:	e7de      	b.n	8009d64 <_malloc_r+0xa8>
 8009da6:	230c      	movs	r3, #12
 8009da8:	4630      	mov	r0, r6
 8009daa:	6033      	str	r3, [r6, #0]
 8009dac:	f000 f80c 	bl	8009dc8 <__malloc_unlock>
 8009db0:	e794      	b.n	8009cdc <_malloc_r+0x20>
 8009db2:	6005      	str	r5, [r0, #0]
 8009db4:	e7d6      	b.n	8009d64 <_malloc_r+0xa8>
 8009db6:	bf00      	nop
 8009db8:	20000404 	.word	0x20000404

08009dbc <__malloc_lock>:
 8009dbc:	4801      	ldr	r0, [pc, #4]	@ (8009dc4 <__malloc_lock+0x8>)
 8009dbe:	f7ff bf08 	b.w	8009bd2 <__retarget_lock_acquire_recursive>
 8009dc2:	bf00      	nop
 8009dc4:	200003fc 	.word	0x200003fc

08009dc8 <__malloc_unlock>:
 8009dc8:	4801      	ldr	r0, [pc, #4]	@ (8009dd0 <__malloc_unlock+0x8>)
 8009dca:	f7ff bf03 	b.w	8009bd4 <__retarget_lock_release_recursive>
 8009dce:	bf00      	nop
 8009dd0:	200003fc 	.word	0x200003fc

08009dd4 <__ssputs_r>:
 8009dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dd8:	461f      	mov	r7, r3
 8009dda:	688e      	ldr	r6, [r1, #8]
 8009ddc:	4682      	mov	sl, r0
 8009dde:	42be      	cmp	r6, r7
 8009de0:	460c      	mov	r4, r1
 8009de2:	4690      	mov	r8, r2
 8009de4:	680b      	ldr	r3, [r1, #0]
 8009de6:	d82d      	bhi.n	8009e44 <__ssputs_r+0x70>
 8009de8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009dec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009df0:	d026      	beq.n	8009e40 <__ssputs_r+0x6c>
 8009df2:	6965      	ldr	r5, [r4, #20]
 8009df4:	6909      	ldr	r1, [r1, #16]
 8009df6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009dfa:	eba3 0901 	sub.w	r9, r3, r1
 8009dfe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009e02:	1c7b      	adds	r3, r7, #1
 8009e04:	444b      	add	r3, r9
 8009e06:	106d      	asrs	r5, r5, #1
 8009e08:	429d      	cmp	r5, r3
 8009e0a:	bf38      	it	cc
 8009e0c:	461d      	movcc	r5, r3
 8009e0e:	0553      	lsls	r3, r2, #21
 8009e10:	d527      	bpl.n	8009e62 <__ssputs_r+0x8e>
 8009e12:	4629      	mov	r1, r5
 8009e14:	f7ff ff52 	bl	8009cbc <_malloc_r>
 8009e18:	4606      	mov	r6, r0
 8009e1a:	b360      	cbz	r0, 8009e76 <__ssputs_r+0xa2>
 8009e1c:	464a      	mov	r2, r9
 8009e1e:	6921      	ldr	r1, [r4, #16]
 8009e20:	f000 fd66 	bl	800a8f0 <memcpy>
 8009e24:	89a3      	ldrh	r3, [r4, #12]
 8009e26:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009e2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e2e:	81a3      	strh	r3, [r4, #12]
 8009e30:	6126      	str	r6, [r4, #16]
 8009e32:	444e      	add	r6, r9
 8009e34:	6026      	str	r6, [r4, #0]
 8009e36:	463e      	mov	r6, r7
 8009e38:	6165      	str	r5, [r4, #20]
 8009e3a:	eba5 0509 	sub.w	r5, r5, r9
 8009e3e:	60a5      	str	r5, [r4, #8]
 8009e40:	42be      	cmp	r6, r7
 8009e42:	d900      	bls.n	8009e46 <__ssputs_r+0x72>
 8009e44:	463e      	mov	r6, r7
 8009e46:	4632      	mov	r2, r6
 8009e48:	4641      	mov	r1, r8
 8009e4a:	6820      	ldr	r0, [r4, #0]
 8009e4c:	f000 fcf5 	bl	800a83a <memmove>
 8009e50:	2000      	movs	r0, #0
 8009e52:	68a3      	ldr	r3, [r4, #8]
 8009e54:	1b9b      	subs	r3, r3, r6
 8009e56:	60a3      	str	r3, [r4, #8]
 8009e58:	6823      	ldr	r3, [r4, #0]
 8009e5a:	4433      	add	r3, r6
 8009e5c:	6023      	str	r3, [r4, #0]
 8009e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e62:	462a      	mov	r2, r5
 8009e64:	f000 fd52 	bl	800a90c <_realloc_r>
 8009e68:	4606      	mov	r6, r0
 8009e6a:	2800      	cmp	r0, #0
 8009e6c:	d1e0      	bne.n	8009e30 <__ssputs_r+0x5c>
 8009e6e:	4650      	mov	r0, sl
 8009e70:	6921      	ldr	r1, [r4, #16]
 8009e72:	f7ff feb1 	bl	8009bd8 <_free_r>
 8009e76:	230c      	movs	r3, #12
 8009e78:	f8ca 3000 	str.w	r3, [sl]
 8009e7c:	89a3      	ldrh	r3, [r4, #12]
 8009e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8009e82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e86:	81a3      	strh	r3, [r4, #12]
 8009e88:	e7e9      	b.n	8009e5e <__ssputs_r+0x8a>
	...

08009e8c <_svfiprintf_r>:
 8009e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e90:	4698      	mov	r8, r3
 8009e92:	898b      	ldrh	r3, [r1, #12]
 8009e94:	4607      	mov	r7, r0
 8009e96:	061b      	lsls	r3, r3, #24
 8009e98:	460d      	mov	r5, r1
 8009e9a:	4614      	mov	r4, r2
 8009e9c:	b09d      	sub	sp, #116	@ 0x74
 8009e9e:	d510      	bpl.n	8009ec2 <_svfiprintf_r+0x36>
 8009ea0:	690b      	ldr	r3, [r1, #16]
 8009ea2:	b973      	cbnz	r3, 8009ec2 <_svfiprintf_r+0x36>
 8009ea4:	2140      	movs	r1, #64	@ 0x40
 8009ea6:	f7ff ff09 	bl	8009cbc <_malloc_r>
 8009eaa:	6028      	str	r0, [r5, #0]
 8009eac:	6128      	str	r0, [r5, #16]
 8009eae:	b930      	cbnz	r0, 8009ebe <_svfiprintf_r+0x32>
 8009eb0:	230c      	movs	r3, #12
 8009eb2:	603b      	str	r3, [r7, #0]
 8009eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8009eb8:	b01d      	add	sp, #116	@ 0x74
 8009eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ebe:	2340      	movs	r3, #64	@ 0x40
 8009ec0:	616b      	str	r3, [r5, #20]
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ec6:	2320      	movs	r3, #32
 8009ec8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009ecc:	2330      	movs	r3, #48	@ 0x30
 8009ece:	f04f 0901 	mov.w	r9, #1
 8009ed2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ed6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800a070 <_svfiprintf_r+0x1e4>
 8009eda:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009ede:	4623      	mov	r3, r4
 8009ee0:	469a      	mov	sl, r3
 8009ee2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ee6:	b10a      	cbz	r2, 8009eec <_svfiprintf_r+0x60>
 8009ee8:	2a25      	cmp	r2, #37	@ 0x25
 8009eea:	d1f9      	bne.n	8009ee0 <_svfiprintf_r+0x54>
 8009eec:	ebba 0b04 	subs.w	fp, sl, r4
 8009ef0:	d00b      	beq.n	8009f0a <_svfiprintf_r+0x7e>
 8009ef2:	465b      	mov	r3, fp
 8009ef4:	4622      	mov	r2, r4
 8009ef6:	4629      	mov	r1, r5
 8009ef8:	4638      	mov	r0, r7
 8009efa:	f7ff ff6b 	bl	8009dd4 <__ssputs_r>
 8009efe:	3001      	adds	r0, #1
 8009f00:	f000 80a7 	beq.w	800a052 <_svfiprintf_r+0x1c6>
 8009f04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f06:	445a      	add	r2, fp
 8009f08:	9209      	str	r2, [sp, #36]	@ 0x24
 8009f0a:	f89a 3000 	ldrb.w	r3, [sl]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	f000 809f 	beq.w	800a052 <_svfiprintf_r+0x1c6>
 8009f14:	2300      	movs	r3, #0
 8009f16:	f04f 32ff 	mov.w	r2, #4294967295
 8009f1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f1e:	f10a 0a01 	add.w	sl, sl, #1
 8009f22:	9304      	str	r3, [sp, #16]
 8009f24:	9307      	str	r3, [sp, #28]
 8009f26:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009f2a:	931a      	str	r3, [sp, #104]	@ 0x68
 8009f2c:	4654      	mov	r4, sl
 8009f2e:	2205      	movs	r2, #5
 8009f30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f34:	484e      	ldr	r0, [pc, #312]	@ (800a070 <_svfiprintf_r+0x1e4>)
 8009f36:	f000 fccd 	bl	800a8d4 <memchr>
 8009f3a:	9a04      	ldr	r2, [sp, #16]
 8009f3c:	b9d8      	cbnz	r0, 8009f76 <_svfiprintf_r+0xea>
 8009f3e:	06d0      	lsls	r0, r2, #27
 8009f40:	bf44      	itt	mi
 8009f42:	2320      	movmi	r3, #32
 8009f44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f48:	0711      	lsls	r1, r2, #28
 8009f4a:	bf44      	itt	mi
 8009f4c:	232b      	movmi	r3, #43	@ 0x2b
 8009f4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f52:	f89a 3000 	ldrb.w	r3, [sl]
 8009f56:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f58:	d015      	beq.n	8009f86 <_svfiprintf_r+0xfa>
 8009f5a:	4654      	mov	r4, sl
 8009f5c:	2000      	movs	r0, #0
 8009f5e:	f04f 0c0a 	mov.w	ip, #10
 8009f62:	9a07      	ldr	r2, [sp, #28]
 8009f64:	4621      	mov	r1, r4
 8009f66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f6a:	3b30      	subs	r3, #48	@ 0x30
 8009f6c:	2b09      	cmp	r3, #9
 8009f6e:	d94b      	bls.n	800a008 <_svfiprintf_r+0x17c>
 8009f70:	b1b0      	cbz	r0, 8009fa0 <_svfiprintf_r+0x114>
 8009f72:	9207      	str	r2, [sp, #28]
 8009f74:	e014      	b.n	8009fa0 <_svfiprintf_r+0x114>
 8009f76:	eba0 0308 	sub.w	r3, r0, r8
 8009f7a:	fa09 f303 	lsl.w	r3, r9, r3
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	46a2      	mov	sl, r4
 8009f82:	9304      	str	r3, [sp, #16]
 8009f84:	e7d2      	b.n	8009f2c <_svfiprintf_r+0xa0>
 8009f86:	9b03      	ldr	r3, [sp, #12]
 8009f88:	1d19      	adds	r1, r3, #4
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	9103      	str	r1, [sp, #12]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	bfbb      	ittet	lt
 8009f92:	425b      	neglt	r3, r3
 8009f94:	f042 0202 	orrlt.w	r2, r2, #2
 8009f98:	9307      	strge	r3, [sp, #28]
 8009f9a:	9307      	strlt	r3, [sp, #28]
 8009f9c:	bfb8      	it	lt
 8009f9e:	9204      	strlt	r2, [sp, #16]
 8009fa0:	7823      	ldrb	r3, [r4, #0]
 8009fa2:	2b2e      	cmp	r3, #46	@ 0x2e
 8009fa4:	d10a      	bne.n	8009fbc <_svfiprintf_r+0x130>
 8009fa6:	7863      	ldrb	r3, [r4, #1]
 8009fa8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009faa:	d132      	bne.n	800a012 <_svfiprintf_r+0x186>
 8009fac:	9b03      	ldr	r3, [sp, #12]
 8009fae:	3402      	adds	r4, #2
 8009fb0:	1d1a      	adds	r2, r3, #4
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	9203      	str	r2, [sp, #12]
 8009fb6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009fba:	9305      	str	r3, [sp, #20]
 8009fbc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a074 <_svfiprintf_r+0x1e8>
 8009fc0:	2203      	movs	r2, #3
 8009fc2:	4650      	mov	r0, sl
 8009fc4:	7821      	ldrb	r1, [r4, #0]
 8009fc6:	f000 fc85 	bl	800a8d4 <memchr>
 8009fca:	b138      	cbz	r0, 8009fdc <_svfiprintf_r+0x150>
 8009fcc:	2240      	movs	r2, #64	@ 0x40
 8009fce:	9b04      	ldr	r3, [sp, #16]
 8009fd0:	eba0 000a 	sub.w	r0, r0, sl
 8009fd4:	4082      	lsls	r2, r0
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	3401      	adds	r4, #1
 8009fda:	9304      	str	r3, [sp, #16]
 8009fdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fe0:	2206      	movs	r2, #6
 8009fe2:	4825      	ldr	r0, [pc, #148]	@ (800a078 <_svfiprintf_r+0x1ec>)
 8009fe4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009fe8:	f000 fc74 	bl	800a8d4 <memchr>
 8009fec:	2800      	cmp	r0, #0
 8009fee:	d036      	beq.n	800a05e <_svfiprintf_r+0x1d2>
 8009ff0:	4b22      	ldr	r3, [pc, #136]	@ (800a07c <_svfiprintf_r+0x1f0>)
 8009ff2:	bb1b      	cbnz	r3, 800a03c <_svfiprintf_r+0x1b0>
 8009ff4:	9b03      	ldr	r3, [sp, #12]
 8009ff6:	3307      	adds	r3, #7
 8009ff8:	f023 0307 	bic.w	r3, r3, #7
 8009ffc:	3308      	adds	r3, #8
 8009ffe:	9303      	str	r3, [sp, #12]
 800a000:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a002:	4433      	add	r3, r6
 800a004:	9309      	str	r3, [sp, #36]	@ 0x24
 800a006:	e76a      	b.n	8009ede <_svfiprintf_r+0x52>
 800a008:	460c      	mov	r4, r1
 800a00a:	2001      	movs	r0, #1
 800a00c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a010:	e7a8      	b.n	8009f64 <_svfiprintf_r+0xd8>
 800a012:	2300      	movs	r3, #0
 800a014:	f04f 0c0a 	mov.w	ip, #10
 800a018:	4619      	mov	r1, r3
 800a01a:	3401      	adds	r4, #1
 800a01c:	9305      	str	r3, [sp, #20]
 800a01e:	4620      	mov	r0, r4
 800a020:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a024:	3a30      	subs	r2, #48	@ 0x30
 800a026:	2a09      	cmp	r2, #9
 800a028:	d903      	bls.n	800a032 <_svfiprintf_r+0x1a6>
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d0c6      	beq.n	8009fbc <_svfiprintf_r+0x130>
 800a02e:	9105      	str	r1, [sp, #20]
 800a030:	e7c4      	b.n	8009fbc <_svfiprintf_r+0x130>
 800a032:	4604      	mov	r4, r0
 800a034:	2301      	movs	r3, #1
 800a036:	fb0c 2101 	mla	r1, ip, r1, r2
 800a03a:	e7f0      	b.n	800a01e <_svfiprintf_r+0x192>
 800a03c:	ab03      	add	r3, sp, #12
 800a03e:	9300      	str	r3, [sp, #0]
 800a040:	462a      	mov	r2, r5
 800a042:	4638      	mov	r0, r7
 800a044:	4b0e      	ldr	r3, [pc, #56]	@ (800a080 <_svfiprintf_r+0x1f4>)
 800a046:	a904      	add	r1, sp, #16
 800a048:	f3af 8000 	nop.w
 800a04c:	1c42      	adds	r2, r0, #1
 800a04e:	4606      	mov	r6, r0
 800a050:	d1d6      	bne.n	800a000 <_svfiprintf_r+0x174>
 800a052:	89ab      	ldrh	r3, [r5, #12]
 800a054:	065b      	lsls	r3, r3, #25
 800a056:	f53f af2d 	bmi.w	8009eb4 <_svfiprintf_r+0x28>
 800a05a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a05c:	e72c      	b.n	8009eb8 <_svfiprintf_r+0x2c>
 800a05e:	ab03      	add	r3, sp, #12
 800a060:	9300      	str	r3, [sp, #0]
 800a062:	462a      	mov	r2, r5
 800a064:	4638      	mov	r0, r7
 800a066:	4b06      	ldr	r3, [pc, #24]	@ (800a080 <_svfiprintf_r+0x1f4>)
 800a068:	a904      	add	r1, sp, #16
 800a06a:	f000 f9bd 	bl	800a3e8 <_printf_i>
 800a06e:	e7ed      	b.n	800a04c <_svfiprintf_r+0x1c0>
 800a070:	0800c6de 	.word	0x0800c6de
 800a074:	0800c6e4 	.word	0x0800c6e4
 800a078:	0800c6e8 	.word	0x0800c6e8
 800a07c:	00000000 	.word	0x00000000
 800a080:	08009dd5 	.word	0x08009dd5

0800a084 <__sfputc_r>:
 800a084:	6893      	ldr	r3, [r2, #8]
 800a086:	b410      	push	{r4}
 800a088:	3b01      	subs	r3, #1
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	6093      	str	r3, [r2, #8]
 800a08e:	da07      	bge.n	800a0a0 <__sfputc_r+0x1c>
 800a090:	6994      	ldr	r4, [r2, #24]
 800a092:	42a3      	cmp	r3, r4
 800a094:	db01      	blt.n	800a09a <__sfputc_r+0x16>
 800a096:	290a      	cmp	r1, #10
 800a098:	d102      	bne.n	800a0a0 <__sfputc_r+0x1c>
 800a09a:	bc10      	pop	{r4}
 800a09c:	f7ff bc8b 	b.w	80099b6 <__swbuf_r>
 800a0a0:	6813      	ldr	r3, [r2, #0]
 800a0a2:	1c58      	adds	r0, r3, #1
 800a0a4:	6010      	str	r0, [r2, #0]
 800a0a6:	7019      	strb	r1, [r3, #0]
 800a0a8:	4608      	mov	r0, r1
 800a0aa:	bc10      	pop	{r4}
 800a0ac:	4770      	bx	lr

0800a0ae <__sfputs_r>:
 800a0ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0b0:	4606      	mov	r6, r0
 800a0b2:	460f      	mov	r7, r1
 800a0b4:	4614      	mov	r4, r2
 800a0b6:	18d5      	adds	r5, r2, r3
 800a0b8:	42ac      	cmp	r4, r5
 800a0ba:	d101      	bne.n	800a0c0 <__sfputs_r+0x12>
 800a0bc:	2000      	movs	r0, #0
 800a0be:	e007      	b.n	800a0d0 <__sfputs_r+0x22>
 800a0c0:	463a      	mov	r2, r7
 800a0c2:	4630      	mov	r0, r6
 800a0c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0c8:	f7ff ffdc 	bl	800a084 <__sfputc_r>
 800a0cc:	1c43      	adds	r3, r0, #1
 800a0ce:	d1f3      	bne.n	800a0b8 <__sfputs_r+0xa>
 800a0d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a0d4 <_vfiprintf_r>:
 800a0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0d8:	460d      	mov	r5, r1
 800a0da:	4614      	mov	r4, r2
 800a0dc:	4698      	mov	r8, r3
 800a0de:	4606      	mov	r6, r0
 800a0e0:	b09d      	sub	sp, #116	@ 0x74
 800a0e2:	b118      	cbz	r0, 800a0ec <_vfiprintf_r+0x18>
 800a0e4:	6a03      	ldr	r3, [r0, #32]
 800a0e6:	b90b      	cbnz	r3, 800a0ec <_vfiprintf_r+0x18>
 800a0e8:	f7ff faa8 	bl	800963c <__sinit>
 800a0ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a0ee:	07d9      	lsls	r1, r3, #31
 800a0f0:	d405      	bmi.n	800a0fe <_vfiprintf_r+0x2a>
 800a0f2:	89ab      	ldrh	r3, [r5, #12]
 800a0f4:	059a      	lsls	r2, r3, #22
 800a0f6:	d402      	bmi.n	800a0fe <_vfiprintf_r+0x2a>
 800a0f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a0fa:	f7ff fd6a 	bl	8009bd2 <__retarget_lock_acquire_recursive>
 800a0fe:	89ab      	ldrh	r3, [r5, #12]
 800a100:	071b      	lsls	r3, r3, #28
 800a102:	d501      	bpl.n	800a108 <_vfiprintf_r+0x34>
 800a104:	692b      	ldr	r3, [r5, #16]
 800a106:	b99b      	cbnz	r3, 800a130 <_vfiprintf_r+0x5c>
 800a108:	4629      	mov	r1, r5
 800a10a:	4630      	mov	r0, r6
 800a10c:	f7ff fc92 	bl	8009a34 <__swsetup_r>
 800a110:	b170      	cbz	r0, 800a130 <_vfiprintf_r+0x5c>
 800a112:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a114:	07dc      	lsls	r4, r3, #31
 800a116:	d504      	bpl.n	800a122 <_vfiprintf_r+0x4e>
 800a118:	f04f 30ff 	mov.w	r0, #4294967295
 800a11c:	b01d      	add	sp, #116	@ 0x74
 800a11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a122:	89ab      	ldrh	r3, [r5, #12]
 800a124:	0598      	lsls	r0, r3, #22
 800a126:	d4f7      	bmi.n	800a118 <_vfiprintf_r+0x44>
 800a128:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a12a:	f7ff fd53 	bl	8009bd4 <__retarget_lock_release_recursive>
 800a12e:	e7f3      	b.n	800a118 <_vfiprintf_r+0x44>
 800a130:	2300      	movs	r3, #0
 800a132:	9309      	str	r3, [sp, #36]	@ 0x24
 800a134:	2320      	movs	r3, #32
 800a136:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a13a:	2330      	movs	r3, #48	@ 0x30
 800a13c:	f04f 0901 	mov.w	r9, #1
 800a140:	f8cd 800c 	str.w	r8, [sp, #12]
 800a144:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800a2f0 <_vfiprintf_r+0x21c>
 800a148:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a14c:	4623      	mov	r3, r4
 800a14e:	469a      	mov	sl, r3
 800a150:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a154:	b10a      	cbz	r2, 800a15a <_vfiprintf_r+0x86>
 800a156:	2a25      	cmp	r2, #37	@ 0x25
 800a158:	d1f9      	bne.n	800a14e <_vfiprintf_r+0x7a>
 800a15a:	ebba 0b04 	subs.w	fp, sl, r4
 800a15e:	d00b      	beq.n	800a178 <_vfiprintf_r+0xa4>
 800a160:	465b      	mov	r3, fp
 800a162:	4622      	mov	r2, r4
 800a164:	4629      	mov	r1, r5
 800a166:	4630      	mov	r0, r6
 800a168:	f7ff ffa1 	bl	800a0ae <__sfputs_r>
 800a16c:	3001      	adds	r0, #1
 800a16e:	f000 80a7 	beq.w	800a2c0 <_vfiprintf_r+0x1ec>
 800a172:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a174:	445a      	add	r2, fp
 800a176:	9209      	str	r2, [sp, #36]	@ 0x24
 800a178:	f89a 3000 	ldrb.w	r3, [sl]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	f000 809f 	beq.w	800a2c0 <_vfiprintf_r+0x1ec>
 800a182:	2300      	movs	r3, #0
 800a184:	f04f 32ff 	mov.w	r2, #4294967295
 800a188:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a18c:	f10a 0a01 	add.w	sl, sl, #1
 800a190:	9304      	str	r3, [sp, #16]
 800a192:	9307      	str	r3, [sp, #28]
 800a194:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a198:	931a      	str	r3, [sp, #104]	@ 0x68
 800a19a:	4654      	mov	r4, sl
 800a19c:	2205      	movs	r2, #5
 800a19e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1a2:	4853      	ldr	r0, [pc, #332]	@ (800a2f0 <_vfiprintf_r+0x21c>)
 800a1a4:	f000 fb96 	bl	800a8d4 <memchr>
 800a1a8:	9a04      	ldr	r2, [sp, #16]
 800a1aa:	b9d8      	cbnz	r0, 800a1e4 <_vfiprintf_r+0x110>
 800a1ac:	06d1      	lsls	r1, r2, #27
 800a1ae:	bf44      	itt	mi
 800a1b0:	2320      	movmi	r3, #32
 800a1b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a1b6:	0713      	lsls	r3, r2, #28
 800a1b8:	bf44      	itt	mi
 800a1ba:	232b      	movmi	r3, #43	@ 0x2b
 800a1bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a1c0:	f89a 3000 	ldrb.w	r3, [sl]
 800a1c4:	2b2a      	cmp	r3, #42	@ 0x2a
 800a1c6:	d015      	beq.n	800a1f4 <_vfiprintf_r+0x120>
 800a1c8:	4654      	mov	r4, sl
 800a1ca:	2000      	movs	r0, #0
 800a1cc:	f04f 0c0a 	mov.w	ip, #10
 800a1d0:	9a07      	ldr	r2, [sp, #28]
 800a1d2:	4621      	mov	r1, r4
 800a1d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1d8:	3b30      	subs	r3, #48	@ 0x30
 800a1da:	2b09      	cmp	r3, #9
 800a1dc:	d94b      	bls.n	800a276 <_vfiprintf_r+0x1a2>
 800a1de:	b1b0      	cbz	r0, 800a20e <_vfiprintf_r+0x13a>
 800a1e0:	9207      	str	r2, [sp, #28]
 800a1e2:	e014      	b.n	800a20e <_vfiprintf_r+0x13a>
 800a1e4:	eba0 0308 	sub.w	r3, r0, r8
 800a1e8:	fa09 f303 	lsl.w	r3, r9, r3
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	46a2      	mov	sl, r4
 800a1f0:	9304      	str	r3, [sp, #16]
 800a1f2:	e7d2      	b.n	800a19a <_vfiprintf_r+0xc6>
 800a1f4:	9b03      	ldr	r3, [sp, #12]
 800a1f6:	1d19      	adds	r1, r3, #4
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	9103      	str	r1, [sp, #12]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	bfbb      	ittet	lt
 800a200:	425b      	neglt	r3, r3
 800a202:	f042 0202 	orrlt.w	r2, r2, #2
 800a206:	9307      	strge	r3, [sp, #28]
 800a208:	9307      	strlt	r3, [sp, #28]
 800a20a:	bfb8      	it	lt
 800a20c:	9204      	strlt	r2, [sp, #16]
 800a20e:	7823      	ldrb	r3, [r4, #0]
 800a210:	2b2e      	cmp	r3, #46	@ 0x2e
 800a212:	d10a      	bne.n	800a22a <_vfiprintf_r+0x156>
 800a214:	7863      	ldrb	r3, [r4, #1]
 800a216:	2b2a      	cmp	r3, #42	@ 0x2a
 800a218:	d132      	bne.n	800a280 <_vfiprintf_r+0x1ac>
 800a21a:	9b03      	ldr	r3, [sp, #12]
 800a21c:	3402      	adds	r4, #2
 800a21e:	1d1a      	adds	r2, r3, #4
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	9203      	str	r2, [sp, #12]
 800a224:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a228:	9305      	str	r3, [sp, #20]
 800a22a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800a2f4 <_vfiprintf_r+0x220>
 800a22e:	2203      	movs	r2, #3
 800a230:	4650      	mov	r0, sl
 800a232:	7821      	ldrb	r1, [r4, #0]
 800a234:	f000 fb4e 	bl	800a8d4 <memchr>
 800a238:	b138      	cbz	r0, 800a24a <_vfiprintf_r+0x176>
 800a23a:	2240      	movs	r2, #64	@ 0x40
 800a23c:	9b04      	ldr	r3, [sp, #16]
 800a23e:	eba0 000a 	sub.w	r0, r0, sl
 800a242:	4082      	lsls	r2, r0
 800a244:	4313      	orrs	r3, r2
 800a246:	3401      	adds	r4, #1
 800a248:	9304      	str	r3, [sp, #16]
 800a24a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a24e:	2206      	movs	r2, #6
 800a250:	4829      	ldr	r0, [pc, #164]	@ (800a2f8 <_vfiprintf_r+0x224>)
 800a252:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a256:	f000 fb3d 	bl	800a8d4 <memchr>
 800a25a:	2800      	cmp	r0, #0
 800a25c:	d03f      	beq.n	800a2de <_vfiprintf_r+0x20a>
 800a25e:	4b27      	ldr	r3, [pc, #156]	@ (800a2fc <_vfiprintf_r+0x228>)
 800a260:	bb1b      	cbnz	r3, 800a2aa <_vfiprintf_r+0x1d6>
 800a262:	9b03      	ldr	r3, [sp, #12]
 800a264:	3307      	adds	r3, #7
 800a266:	f023 0307 	bic.w	r3, r3, #7
 800a26a:	3308      	adds	r3, #8
 800a26c:	9303      	str	r3, [sp, #12]
 800a26e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a270:	443b      	add	r3, r7
 800a272:	9309      	str	r3, [sp, #36]	@ 0x24
 800a274:	e76a      	b.n	800a14c <_vfiprintf_r+0x78>
 800a276:	460c      	mov	r4, r1
 800a278:	2001      	movs	r0, #1
 800a27a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a27e:	e7a8      	b.n	800a1d2 <_vfiprintf_r+0xfe>
 800a280:	2300      	movs	r3, #0
 800a282:	f04f 0c0a 	mov.w	ip, #10
 800a286:	4619      	mov	r1, r3
 800a288:	3401      	adds	r4, #1
 800a28a:	9305      	str	r3, [sp, #20]
 800a28c:	4620      	mov	r0, r4
 800a28e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a292:	3a30      	subs	r2, #48	@ 0x30
 800a294:	2a09      	cmp	r2, #9
 800a296:	d903      	bls.n	800a2a0 <_vfiprintf_r+0x1cc>
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d0c6      	beq.n	800a22a <_vfiprintf_r+0x156>
 800a29c:	9105      	str	r1, [sp, #20]
 800a29e:	e7c4      	b.n	800a22a <_vfiprintf_r+0x156>
 800a2a0:	4604      	mov	r4, r0
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2a8:	e7f0      	b.n	800a28c <_vfiprintf_r+0x1b8>
 800a2aa:	ab03      	add	r3, sp, #12
 800a2ac:	9300      	str	r3, [sp, #0]
 800a2ae:	462a      	mov	r2, r5
 800a2b0:	4630      	mov	r0, r6
 800a2b2:	4b13      	ldr	r3, [pc, #76]	@ (800a300 <_vfiprintf_r+0x22c>)
 800a2b4:	a904      	add	r1, sp, #16
 800a2b6:	f3af 8000 	nop.w
 800a2ba:	4607      	mov	r7, r0
 800a2bc:	1c78      	adds	r0, r7, #1
 800a2be:	d1d6      	bne.n	800a26e <_vfiprintf_r+0x19a>
 800a2c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a2c2:	07d9      	lsls	r1, r3, #31
 800a2c4:	d405      	bmi.n	800a2d2 <_vfiprintf_r+0x1fe>
 800a2c6:	89ab      	ldrh	r3, [r5, #12]
 800a2c8:	059a      	lsls	r2, r3, #22
 800a2ca:	d402      	bmi.n	800a2d2 <_vfiprintf_r+0x1fe>
 800a2cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a2ce:	f7ff fc81 	bl	8009bd4 <__retarget_lock_release_recursive>
 800a2d2:	89ab      	ldrh	r3, [r5, #12]
 800a2d4:	065b      	lsls	r3, r3, #25
 800a2d6:	f53f af1f 	bmi.w	800a118 <_vfiprintf_r+0x44>
 800a2da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a2dc:	e71e      	b.n	800a11c <_vfiprintf_r+0x48>
 800a2de:	ab03      	add	r3, sp, #12
 800a2e0:	9300      	str	r3, [sp, #0]
 800a2e2:	462a      	mov	r2, r5
 800a2e4:	4630      	mov	r0, r6
 800a2e6:	4b06      	ldr	r3, [pc, #24]	@ (800a300 <_vfiprintf_r+0x22c>)
 800a2e8:	a904      	add	r1, sp, #16
 800a2ea:	f000 f87d 	bl	800a3e8 <_printf_i>
 800a2ee:	e7e4      	b.n	800a2ba <_vfiprintf_r+0x1e6>
 800a2f0:	0800c6de 	.word	0x0800c6de
 800a2f4:	0800c6e4 	.word	0x0800c6e4
 800a2f8:	0800c6e8 	.word	0x0800c6e8
 800a2fc:	00000000 	.word	0x00000000
 800a300:	0800a0af 	.word	0x0800a0af

0800a304 <_printf_common>:
 800a304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a308:	4616      	mov	r6, r2
 800a30a:	4698      	mov	r8, r3
 800a30c:	688a      	ldr	r2, [r1, #8]
 800a30e:	690b      	ldr	r3, [r1, #16]
 800a310:	4607      	mov	r7, r0
 800a312:	4293      	cmp	r3, r2
 800a314:	bfb8      	it	lt
 800a316:	4613      	movlt	r3, r2
 800a318:	6033      	str	r3, [r6, #0]
 800a31a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a31e:	460c      	mov	r4, r1
 800a320:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a324:	b10a      	cbz	r2, 800a32a <_printf_common+0x26>
 800a326:	3301      	adds	r3, #1
 800a328:	6033      	str	r3, [r6, #0]
 800a32a:	6823      	ldr	r3, [r4, #0]
 800a32c:	0699      	lsls	r1, r3, #26
 800a32e:	bf42      	ittt	mi
 800a330:	6833      	ldrmi	r3, [r6, #0]
 800a332:	3302      	addmi	r3, #2
 800a334:	6033      	strmi	r3, [r6, #0]
 800a336:	6825      	ldr	r5, [r4, #0]
 800a338:	f015 0506 	ands.w	r5, r5, #6
 800a33c:	d106      	bne.n	800a34c <_printf_common+0x48>
 800a33e:	f104 0a19 	add.w	sl, r4, #25
 800a342:	68e3      	ldr	r3, [r4, #12]
 800a344:	6832      	ldr	r2, [r6, #0]
 800a346:	1a9b      	subs	r3, r3, r2
 800a348:	42ab      	cmp	r3, r5
 800a34a:	dc2b      	bgt.n	800a3a4 <_printf_common+0xa0>
 800a34c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a350:	6822      	ldr	r2, [r4, #0]
 800a352:	3b00      	subs	r3, #0
 800a354:	bf18      	it	ne
 800a356:	2301      	movne	r3, #1
 800a358:	0692      	lsls	r2, r2, #26
 800a35a:	d430      	bmi.n	800a3be <_printf_common+0xba>
 800a35c:	4641      	mov	r1, r8
 800a35e:	4638      	mov	r0, r7
 800a360:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a364:	47c8      	blx	r9
 800a366:	3001      	adds	r0, #1
 800a368:	d023      	beq.n	800a3b2 <_printf_common+0xae>
 800a36a:	6823      	ldr	r3, [r4, #0]
 800a36c:	6922      	ldr	r2, [r4, #16]
 800a36e:	f003 0306 	and.w	r3, r3, #6
 800a372:	2b04      	cmp	r3, #4
 800a374:	bf14      	ite	ne
 800a376:	2500      	movne	r5, #0
 800a378:	6833      	ldreq	r3, [r6, #0]
 800a37a:	f04f 0600 	mov.w	r6, #0
 800a37e:	bf08      	it	eq
 800a380:	68e5      	ldreq	r5, [r4, #12]
 800a382:	f104 041a 	add.w	r4, r4, #26
 800a386:	bf08      	it	eq
 800a388:	1aed      	subeq	r5, r5, r3
 800a38a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a38e:	bf08      	it	eq
 800a390:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a394:	4293      	cmp	r3, r2
 800a396:	bfc4      	itt	gt
 800a398:	1a9b      	subgt	r3, r3, r2
 800a39a:	18ed      	addgt	r5, r5, r3
 800a39c:	42b5      	cmp	r5, r6
 800a39e:	d11a      	bne.n	800a3d6 <_printf_common+0xd2>
 800a3a0:	2000      	movs	r0, #0
 800a3a2:	e008      	b.n	800a3b6 <_printf_common+0xb2>
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	4652      	mov	r2, sl
 800a3a8:	4641      	mov	r1, r8
 800a3aa:	4638      	mov	r0, r7
 800a3ac:	47c8      	blx	r9
 800a3ae:	3001      	adds	r0, #1
 800a3b0:	d103      	bne.n	800a3ba <_printf_common+0xb6>
 800a3b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a3b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3ba:	3501      	adds	r5, #1
 800a3bc:	e7c1      	b.n	800a342 <_printf_common+0x3e>
 800a3be:	2030      	movs	r0, #48	@ 0x30
 800a3c0:	18e1      	adds	r1, r4, r3
 800a3c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a3c6:	1c5a      	adds	r2, r3, #1
 800a3c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a3cc:	4422      	add	r2, r4
 800a3ce:	3302      	adds	r3, #2
 800a3d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a3d4:	e7c2      	b.n	800a35c <_printf_common+0x58>
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	4622      	mov	r2, r4
 800a3da:	4641      	mov	r1, r8
 800a3dc:	4638      	mov	r0, r7
 800a3de:	47c8      	blx	r9
 800a3e0:	3001      	adds	r0, #1
 800a3e2:	d0e6      	beq.n	800a3b2 <_printf_common+0xae>
 800a3e4:	3601      	adds	r6, #1
 800a3e6:	e7d9      	b.n	800a39c <_printf_common+0x98>

0800a3e8 <_printf_i>:
 800a3e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a3ec:	7e0f      	ldrb	r7, [r1, #24]
 800a3ee:	4691      	mov	r9, r2
 800a3f0:	2f78      	cmp	r7, #120	@ 0x78
 800a3f2:	4680      	mov	r8, r0
 800a3f4:	460c      	mov	r4, r1
 800a3f6:	469a      	mov	sl, r3
 800a3f8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a3fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a3fe:	d807      	bhi.n	800a410 <_printf_i+0x28>
 800a400:	2f62      	cmp	r7, #98	@ 0x62
 800a402:	d80a      	bhi.n	800a41a <_printf_i+0x32>
 800a404:	2f00      	cmp	r7, #0
 800a406:	f000 80d3 	beq.w	800a5b0 <_printf_i+0x1c8>
 800a40a:	2f58      	cmp	r7, #88	@ 0x58
 800a40c:	f000 80ba 	beq.w	800a584 <_printf_i+0x19c>
 800a410:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a414:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a418:	e03a      	b.n	800a490 <_printf_i+0xa8>
 800a41a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a41e:	2b15      	cmp	r3, #21
 800a420:	d8f6      	bhi.n	800a410 <_printf_i+0x28>
 800a422:	a101      	add	r1, pc, #4	@ (adr r1, 800a428 <_printf_i+0x40>)
 800a424:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a428:	0800a481 	.word	0x0800a481
 800a42c:	0800a495 	.word	0x0800a495
 800a430:	0800a411 	.word	0x0800a411
 800a434:	0800a411 	.word	0x0800a411
 800a438:	0800a411 	.word	0x0800a411
 800a43c:	0800a411 	.word	0x0800a411
 800a440:	0800a495 	.word	0x0800a495
 800a444:	0800a411 	.word	0x0800a411
 800a448:	0800a411 	.word	0x0800a411
 800a44c:	0800a411 	.word	0x0800a411
 800a450:	0800a411 	.word	0x0800a411
 800a454:	0800a597 	.word	0x0800a597
 800a458:	0800a4bf 	.word	0x0800a4bf
 800a45c:	0800a551 	.word	0x0800a551
 800a460:	0800a411 	.word	0x0800a411
 800a464:	0800a411 	.word	0x0800a411
 800a468:	0800a5b9 	.word	0x0800a5b9
 800a46c:	0800a411 	.word	0x0800a411
 800a470:	0800a4bf 	.word	0x0800a4bf
 800a474:	0800a411 	.word	0x0800a411
 800a478:	0800a411 	.word	0x0800a411
 800a47c:	0800a559 	.word	0x0800a559
 800a480:	6833      	ldr	r3, [r6, #0]
 800a482:	1d1a      	adds	r2, r3, #4
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	6032      	str	r2, [r6, #0]
 800a488:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a48c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a490:	2301      	movs	r3, #1
 800a492:	e09e      	b.n	800a5d2 <_printf_i+0x1ea>
 800a494:	6833      	ldr	r3, [r6, #0]
 800a496:	6820      	ldr	r0, [r4, #0]
 800a498:	1d19      	adds	r1, r3, #4
 800a49a:	6031      	str	r1, [r6, #0]
 800a49c:	0606      	lsls	r6, r0, #24
 800a49e:	d501      	bpl.n	800a4a4 <_printf_i+0xbc>
 800a4a0:	681d      	ldr	r5, [r3, #0]
 800a4a2:	e003      	b.n	800a4ac <_printf_i+0xc4>
 800a4a4:	0645      	lsls	r5, r0, #25
 800a4a6:	d5fb      	bpl.n	800a4a0 <_printf_i+0xb8>
 800a4a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a4ac:	2d00      	cmp	r5, #0
 800a4ae:	da03      	bge.n	800a4b8 <_printf_i+0xd0>
 800a4b0:	232d      	movs	r3, #45	@ 0x2d
 800a4b2:	426d      	negs	r5, r5
 800a4b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a4b8:	230a      	movs	r3, #10
 800a4ba:	4859      	ldr	r0, [pc, #356]	@ (800a620 <_printf_i+0x238>)
 800a4bc:	e011      	b.n	800a4e2 <_printf_i+0xfa>
 800a4be:	6821      	ldr	r1, [r4, #0]
 800a4c0:	6833      	ldr	r3, [r6, #0]
 800a4c2:	0608      	lsls	r0, r1, #24
 800a4c4:	f853 5b04 	ldr.w	r5, [r3], #4
 800a4c8:	d402      	bmi.n	800a4d0 <_printf_i+0xe8>
 800a4ca:	0649      	lsls	r1, r1, #25
 800a4cc:	bf48      	it	mi
 800a4ce:	b2ad      	uxthmi	r5, r5
 800a4d0:	2f6f      	cmp	r7, #111	@ 0x6f
 800a4d2:	6033      	str	r3, [r6, #0]
 800a4d4:	bf14      	ite	ne
 800a4d6:	230a      	movne	r3, #10
 800a4d8:	2308      	moveq	r3, #8
 800a4da:	4851      	ldr	r0, [pc, #324]	@ (800a620 <_printf_i+0x238>)
 800a4dc:	2100      	movs	r1, #0
 800a4de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a4e2:	6866      	ldr	r6, [r4, #4]
 800a4e4:	2e00      	cmp	r6, #0
 800a4e6:	bfa8      	it	ge
 800a4e8:	6821      	ldrge	r1, [r4, #0]
 800a4ea:	60a6      	str	r6, [r4, #8]
 800a4ec:	bfa4      	itt	ge
 800a4ee:	f021 0104 	bicge.w	r1, r1, #4
 800a4f2:	6021      	strge	r1, [r4, #0]
 800a4f4:	b90d      	cbnz	r5, 800a4fa <_printf_i+0x112>
 800a4f6:	2e00      	cmp	r6, #0
 800a4f8:	d04b      	beq.n	800a592 <_printf_i+0x1aa>
 800a4fa:	4616      	mov	r6, r2
 800a4fc:	fbb5 f1f3 	udiv	r1, r5, r3
 800a500:	fb03 5711 	mls	r7, r3, r1, r5
 800a504:	5dc7      	ldrb	r7, [r0, r7]
 800a506:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a50a:	462f      	mov	r7, r5
 800a50c:	42bb      	cmp	r3, r7
 800a50e:	460d      	mov	r5, r1
 800a510:	d9f4      	bls.n	800a4fc <_printf_i+0x114>
 800a512:	2b08      	cmp	r3, #8
 800a514:	d10b      	bne.n	800a52e <_printf_i+0x146>
 800a516:	6823      	ldr	r3, [r4, #0]
 800a518:	07df      	lsls	r7, r3, #31
 800a51a:	d508      	bpl.n	800a52e <_printf_i+0x146>
 800a51c:	6923      	ldr	r3, [r4, #16]
 800a51e:	6861      	ldr	r1, [r4, #4]
 800a520:	4299      	cmp	r1, r3
 800a522:	bfde      	ittt	le
 800a524:	2330      	movle	r3, #48	@ 0x30
 800a526:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a52a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a52e:	1b92      	subs	r2, r2, r6
 800a530:	6122      	str	r2, [r4, #16]
 800a532:	464b      	mov	r3, r9
 800a534:	4621      	mov	r1, r4
 800a536:	4640      	mov	r0, r8
 800a538:	f8cd a000 	str.w	sl, [sp]
 800a53c:	aa03      	add	r2, sp, #12
 800a53e:	f7ff fee1 	bl	800a304 <_printf_common>
 800a542:	3001      	adds	r0, #1
 800a544:	d14a      	bne.n	800a5dc <_printf_i+0x1f4>
 800a546:	f04f 30ff 	mov.w	r0, #4294967295
 800a54a:	b004      	add	sp, #16
 800a54c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a550:	6823      	ldr	r3, [r4, #0]
 800a552:	f043 0320 	orr.w	r3, r3, #32
 800a556:	6023      	str	r3, [r4, #0]
 800a558:	2778      	movs	r7, #120	@ 0x78
 800a55a:	4832      	ldr	r0, [pc, #200]	@ (800a624 <_printf_i+0x23c>)
 800a55c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a560:	6823      	ldr	r3, [r4, #0]
 800a562:	6831      	ldr	r1, [r6, #0]
 800a564:	061f      	lsls	r7, r3, #24
 800a566:	f851 5b04 	ldr.w	r5, [r1], #4
 800a56a:	d402      	bmi.n	800a572 <_printf_i+0x18a>
 800a56c:	065f      	lsls	r7, r3, #25
 800a56e:	bf48      	it	mi
 800a570:	b2ad      	uxthmi	r5, r5
 800a572:	6031      	str	r1, [r6, #0]
 800a574:	07d9      	lsls	r1, r3, #31
 800a576:	bf44      	itt	mi
 800a578:	f043 0320 	orrmi.w	r3, r3, #32
 800a57c:	6023      	strmi	r3, [r4, #0]
 800a57e:	b11d      	cbz	r5, 800a588 <_printf_i+0x1a0>
 800a580:	2310      	movs	r3, #16
 800a582:	e7ab      	b.n	800a4dc <_printf_i+0xf4>
 800a584:	4826      	ldr	r0, [pc, #152]	@ (800a620 <_printf_i+0x238>)
 800a586:	e7e9      	b.n	800a55c <_printf_i+0x174>
 800a588:	6823      	ldr	r3, [r4, #0]
 800a58a:	f023 0320 	bic.w	r3, r3, #32
 800a58e:	6023      	str	r3, [r4, #0]
 800a590:	e7f6      	b.n	800a580 <_printf_i+0x198>
 800a592:	4616      	mov	r6, r2
 800a594:	e7bd      	b.n	800a512 <_printf_i+0x12a>
 800a596:	6833      	ldr	r3, [r6, #0]
 800a598:	6825      	ldr	r5, [r4, #0]
 800a59a:	1d18      	adds	r0, r3, #4
 800a59c:	6961      	ldr	r1, [r4, #20]
 800a59e:	6030      	str	r0, [r6, #0]
 800a5a0:	062e      	lsls	r6, r5, #24
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	d501      	bpl.n	800a5aa <_printf_i+0x1c2>
 800a5a6:	6019      	str	r1, [r3, #0]
 800a5a8:	e002      	b.n	800a5b0 <_printf_i+0x1c8>
 800a5aa:	0668      	lsls	r0, r5, #25
 800a5ac:	d5fb      	bpl.n	800a5a6 <_printf_i+0x1be>
 800a5ae:	8019      	strh	r1, [r3, #0]
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	4616      	mov	r6, r2
 800a5b4:	6123      	str	r3, [r4, #16]
 800a5b6:	e7bc      	b.n	800a532 <_printf_i+0x14a>
 800a5b8:	6833      	ldr	r3, [r6, #0]
 800a5ba:	2100      	movs	r1, #0
 800a5bc:	1d1a      	adds	r2, r3, #4
 800a5be:	6032      	str	r2, [r6, #0]
 800a5c0:	681e      	ldr	r6, [r3, #0]
 800a5c2:	6862      	ldr	r2, [r4, #4]
 800a5c4:	4630      	mov	r0, r6
 800a5c6:	f000 f985 	bl	800a8d4 <memchr>
 800a5ca:	b108      	cbz	r0, 800a5d0 <_printf_i+0x1e8>
 800a5cc:	1b80      	subs	r0, r0, r6
 800a5ce:	6060      	str	r0, [r4, #4]
 800a5d0:	6863      	ldr	r3, [r4, #4]
 800a5d2:	6123      	str	r3, [r4, #16]
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a5da:	e7aa      	b.n	800a532 <_printf_i+0x14a>
 800a5dc:	4632      	mov	r2, r6
 800a5de:	4649      	mov	r1, r9
 800a5e0:	4640      	mov	r0, r8
 800a5e2:	6923      	ldr	r3, [r4, #16]
 800a5e4:	47d0      	blx	sl
 800a5e6:	3001      	adds	r0, #1
 800a5e8:	d0ad      	beq.n	800a546 <_printf_i+0x15e>
 800a5ea:	6823      	ldr	r3, [r4, #0]
 800a5ec:	079b      	lsls	r3, r3, #30
 800a5ee:	d413      	bmi.n	800a618 <_printf_i+0x230>
 800a5f0:	68e0      	ldr	r0, [r4, #12]
 800a5f2:	9b03      	ldr	r3, [sp, #12]
 800a5f4:	4298      	cmp	r0, r3
 800a5f6:	bfb8      	it	lt
 800a5f8:	4618      	movlt	r0, r3
 800a5fa:	e7a6      	b.n	800a54a <_printf_i+0x162>
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	4632      	mov	r2, r6
 800a600:	4649      	mov	r1, r9
 800a602:	4640      	mov	r0, r8
 800a604:	47d0      	blx	sl
 800a606:	3001      	adds	r0, #1
 800a608:	d09d      	beq.n	800a546 <_printf_i+0x15e>
 800a60a:	3501      	adds	r5, #1
 800a60c:	68e3      	ldr	r3, [r4, #12]
 800a60e:	9903      	ldr	r1, [sp, #12]
 800a610:	1a5b      	subs	r3, r3, r1
 800a612:	42ab      	cmp	r3, r5
 800a614:	dcf2      	bgt.n	800a5fc <_printf_i+0x214>
 800a616:	e7eb      	b.n	800a5f0 <_printf_i+0x208>
 800a618:	2500      	movs	r5, #0
 800a61a:	f104 0619 	add.w	r6, r4, #25
 800a61e:	e7f5      	b.n	800a60c <_printf_i+0x224>
 800a620:	0800c6ef 	.word	0x0800c6ef
 800a624:	0800c700 	.word	0x0800c700

0800a628 <__sflush_r>:
 800a628:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a62e:	0716      	lsls	r6, r2, #28
 800a630:	4605      	mov	r5, r0
 800a632:	460c      	mov	r4, r1
 800a634:	d454      	bmi.n	800a6e0 <__sflush_r+0xb8>
 800a636:	684b      	ldr	r3, [r1, #4]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	dc02      	bgt.n	800a642 <__sflush_r+0x1a>
 800a63c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a63e:	2b00      	cmp	r3, #0
 800a640:	dd48      	ble.n	800a6d4 <__sflush_r+0xac>
 800a642:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a644:	2e00      	cmp	r6, #0
 800a646:	d045      	beq.n	800a6d4 <__sflush_r+0xac>
 800a648:	2300      	movs	r3, #0
 800a64a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a64e:	682f      	ldr	r7, [r5, #0]
 800a650:	6a21      	ldr	r1, [r4, #32]
 800a652:	602b      	str	r3, [r5, #0]
 800a654:	d030      	beq.n	800a6b8 <__sflush_r+0x90>
 800a656:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a658:	89a3      	ldrh	r3, [r4, #12]
 800a65a:	0759      	lsls	r1, r3, #29
 800a65c:	d505      	bpl.n	800a66a <__sflush_r+0x42>
 800a65e:	6863      	ldr	r3, [r4, #4]
 800a660:	1ad2      	subs	r2, r2, r3
 800a662:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a664:	b10b      	cbz	r3, 800a66a <__sflush_r+0x42>
 800a666:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a668:	1ad2      	subs	r2, r2, r3
 800a66a:	2300      	movs	r3, #0
 800a66c:	4628      	mov	r0, r5
 800a66e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a670:	6a21      	ldr	r1, [r4, #32]
 800a672:	47b0      	blx	r6
 800a674:	1c43      	adds	r3, r0, #1
 800a676:	89a3      	ldrh	r3, [r4, #12]
 800a678:	d106      	bne.n	800a688 <__sflush_r+0x60>
 800a67a:	6829      	ldr	r1, [r5, #0]
 800a67c:	291d      	cmp	r1, #29
 800a67e:	d82b      	bhi.n	800a6d8 <__sflush_r+0xb0>
 800a680:	4a28      	ldr	r2, [pc, #160]	@ (800a724 <__sflush_r+0xfc>)
 800a682:	410a      	asrs	r2, r1
 800a684:	07d6      	lsls	r6, r2, #31
 800a686:	d427      	bmi.n	800a6d8 <__sflush_r+0xb0>
 800a688:	2200      	movs	r2, #0
 800a68a:	6062      	str	r2, [r4, #4]
 800a68c:	6922      	ldr	r2, [r4, #16]
 800a68e:	04d9      	lsls	r1, r3, #19
 800a690:	6022      	str	r2, [r4, #0]
 800a692:	d504      	bpl.n	800a69e <__sflush_r+0x76>
 800a694:	1c42      	adds	r2, r0, #1
 800a696:	d101      	bne.n	800a69c <__sflush_r+0x74>
 800a698:	682b      	ldr	r3, [r5, #0]
 800a69a:	b903      	cbnz	r3, 800a69e <__sflush_r+0x76>
 800a69c:	6560      	str	r0, [r4, #84]	@ 0x54
 800a69e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a6a0:	602f      	str	r7, [r5, #0]
 800a6a2:	b1b9      	cbz	r1, 800a6d4 <__sflush_r+0xac>
 800a6a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a6a8:	4299      	cmp	r1, r3
 800a6aa:	d002      	beq.n	800a6b2 <__sflush_r+0x8a>
 800a6ac:	4628      	mov	r0, r5
 800a6ae:	f7ff fa93 	bl	8009bd8 <_free_r>
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	6363      	str	r3, [r4, #52]	@ 0x34
 800a6b6:	e00d      	b.n	800a6d4 <__sflush_r+0xac>
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	4628      	mov	r0, r5
 800a6bc:	47b0      	blx	r6
 800a6be:	4602      	mov	r2, r0
 800a6c0:	1c50      	adds	r0, r2, #1
 800a6c2:	d1c9      	bne.n	800a658 <__sflush_r+0x30>
 800a6c4:	682b      	ldr	r3, [r5, #0]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d0c6      	beq.n	800a658 <__sflush_r+0x30>
 800a6ca:	2b1d      	cmp	r3, #29
 800a6cc:	d001      	beq.n	800a6d2 <__sflush_r+0xaa>
 800a6ce:	2b16      	cmp	r3, #22
 800a6d0:	d11d      	bne.n	800a70e <__sflush_r+0xe6>
 800a6d2:	602f      	str	r7, [r5, #0]
 800a6d4:	2000      	movs	r0, #0
 800a6d6:	e021      	b.n	800a71c <__sflush_r+0xf4>
 800a6d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a6dc:	b21b      	sxth	r3, r3
 800a6de:	e01a      	b.n	800a716 <__sflush_r+0xee>
 800a6e0:	690f      	ldr	r7, [r1, #16]
 800a6e2:	2f00      	cmp	r7, #0
 800a6e4:	d0f6      	beq.n	800a6d4 <__sflush_r+0xac>
 800a6e6:	0793      	lsls	r3, r2, #30
 800a6e8:	bf18      	it	ne
 800a6ea:	2300      	movne	r3, #0
 800a6ec:	680e      	ldr	r6, [r1, #0]
 800a6ee:	bf08      	it	eq
 800a6f0:	694b      	ldreq	r3, [r1, #20]
 800a6f2:	1bf6      	subs	r6, r6, r7
 800a6f4:	600f      	str	r7, [r1, #0]
 800a6f6:	608b      	str	r3, [r1, #8]
 800a6f8:	2e00      	cmp	r6, #0
 800a6fa:	ddeb      	ble.n	800a6d4 <__sflush_r+0xac>
 800a6fc:	4633      	mov	r3, r6
 800a6fe:	463a      	mov	r2, r7
 800a700:	4628      	mov	r0, r5
 800a702:	6a21      	ldr	r1, [r4, #32]
 800a704:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a708:	47e0      	blx	ip
 800a70a:	2800      	cmp	r0, #0
 800a70c:	dc07      	bgt.n	800a71e <__sflush_r+0xf6>
 800a70e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a712:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a716:	f04f 30ff 	mov.w	r0, #4294967295
 800a71a:	81a3      	strh	r3, [r4, #12]
 800a71c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a71e:	4407      	add	r7, r0
 800a720:	1a36      	subs	r6, r6, r0
 800a722:	e7e9      	b.n	800a6f8 <__sflush_r+0xd0>
 800a724:	dfbffffe 	.word	0xdfbffffe

0800a728 <_fflush_r>:
 800a728:	b538      	push	{r3, r4, r5, lr}
 800a72a:	690b      	ldr	r3, [r1, #16]
 800a72c:	4605      	mov	r5, r0
 800a72e:	460c      	mov	r4, r1
 800a730:	b913      	cbnz	r3, 800a738 <_fflush_r+0x10>
 800a732:	2500      	movs	r5, #0
 800a734:	4628      	mov	r0, r5
 800a736:	bd38      	pop	{r3, r4, r5, pc}
 800a738:	b118      	cbz	r0, 800a742 <_fflush_r+0x1a>
 800a73a:	6a03      	ldr	r3, [r0, #32]
 800a73c:	b90b      	cbnz	r3, 800a742 <_fflush_r+0x1a>
 800a73e:	f7fe ff7d 	bl	800963c <__sinit>
 800a742:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d0f3      	beq.n	800a732 <_fflush_r+0xa>
 800a74a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a74c:	07d0      	lsls	r0, r2, #31
 800a74e:	d404      	bmi.n	800a75a <_fflush_r+0x32>
 800a750:	0599      	lsls	r1, r3, #22
 800a752:	d402      	bmi.n	800a75a <_fflush_r+0x32>
 800a754:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a756:	f7ff fa3c 	bl	8009bd2 <__retarget_lock_acquire_recursive>
 800a75a:	4628      	mov	r0, r5
 800a75c:	4621      	mov	r1, r4
 800a75e:	f7ff ff63 	bl	800a628 <__sflush_r>
 800a762:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a764:	4605      	mov	r5, r0
 800a766:	07da      	lsls	r2, r3, #31
 800a768:	d4e4      	bmi.n	800a734 <_fflush_r+0xc>
 800a76a:	89a3      	ldrh	r3, [r4, #12]
 800a76c:	059b      	lsls	r3, r3, #22
 800a76e:	d4e1      	bmi.n	800a734 <_fflush_r+0xc>
 800a770:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a772:	f7ff fa2f 	bl	8009bd4 <__retarget_lock_release_recursive>
 800a776:	e7dd      	b.n	800a734 <_fflush_r+0xc>

0800a778 <__swhatbuf_r>:
 800a778:	b570      	push	{r4, r5, r6, lr}
 800a77a:	460c      	mov	r4, r1
 800a77c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a780:	4615      	mov	r5, r2
 800a782:	2900      	cmp	r1, #0
 800a784:	461e      	mov	r6, r3
 800a786:	b096      	sub	sp, #88	@ 0x58
 800a788:	da0c      	bge.n	800a7a4 <__swhatbuf_r+0x2c>
 800a78a:	89a3      	ldrh	r3, [r4, #12]
 800a78c:	2100      	movs	r1, #0
 800a78e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a792:	bf14      	ite	ne
 800a794:	2340      	movne	r3, #64	@ 0x40
 800a796:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a79a:	2000      	movs	r0, #0
 800a79c:	6031      	str	r1, [r6, #0]
 800a79e:	602b      	str	r3, [r5, #0]
 800a7a0:	b016      	add	sp, #88	@ 0x58
 800a7a2:	bd70      	pop	{r4, r5, r6, pc}
 800a7a4:	466a      	mov	r2, sp
 800a7a6:	f000 f863 	bl	800a870 <_fstat_r>
 800a7aa:	2800      	cmp	r0, #0
 800a7ac:	dbed      	blt.n	800a78a <__swhatbuf_r+0x12>
 800a7ae:	9901      	ldr	r1, [sp, #4]
 800a7b0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a7b4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a7b8:	4259      	negs	r1, r3
 800a7ba:	4159      	adcs	r1, r3
 800a7bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a7c0:	e7eb      	b.n	800a79a <__swhatbuf_r+0x22>

0800a7c2 <__smakebuf_r>:
 800a7c2:	898b      	ldrh	r3, [r1, #12]
 800a7c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a7c6:	079d      	lsls	r5, r3, #30
 800a7c8:	4606      	mov	r6, r0
 800a7ca:	460c      	mov	r4, r1
 800a7cc:	d507      	bpl.n	800a7de <__smakebuf_r+0x1c>
 800a7ce:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a7d2:	6023      	str	r3, [r4, #0]
 800a7d4:	6123      	str	r3, [r4, #16]
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	6163      	str	r3, [r4, #20]
 800a7da:	b003      	add	sp, #12
 800a7dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7de:	466a      	mov	r2, sp
 800a7e0:	ab01      	add	r3, sp, #4
 800a7e2:	f7ff ffc9 	bl	800a778 <__swhatbuf_r>
 800a7e6:	9f00      	ldr	r7, [sp, #0]
 800a7e8:	4605      	mov	r5, r0
 800a7ea:	4639      	mov	r1, r7
 800a7ec:	4630      	mov	r0, r6
 800a7ee:	f7ff fa65 	bl	8009cbc <_malloc_r>
 800a7f2:	b948      	cbnz	r0, 800a808 <__smakebuf_r+0x46>
 800a7f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7f8:	059a      	lsls	r2, r3, #22
 800a7fa:	d4ee      	bmi.n	800a7da <__smakebuf_r+0x18>
 800a7fc:	f023 0303 	bic.w	r3, r3, #3
 800a800:	f043 0302 	orr.w	r3, r3, #2
 800a804:	81a3      	strh	r3, [r4, #12]
 800a806:	e7e2      	b.n	800a7ce <__smakebuf_r+0xc>
 800a808:	89a3      	ldrh	r3, [r4, #12]
 800a80a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a80e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a812:	81a3      	strh	r3, [r4, #12]
 800a814:	9b01      	ldr	r3, [sp, #4]
 800a816:	6020      	str	r0, [r4, #0]
 800a818:	b15b      	cbz	r3, 800a832 <__smakebuf_r+0x70>
 800a81a:	4630      	mov	r0, r6
 800a81c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a820:	f000 f838 	bl	800a894 <_isatty_r>
 800a824:	b128      	cbz	r0, 800a832 <__smakebuf_r+0x70>
 800a826:	89a3      	ldrh	r3, [r4, #12]
 800a828:	f023 0303 	bic.w	r3, r3, #3
 800a82c:	f043 0301 	orr.w	r3, r3, #1
 800a830:	81a3      	strh	r3, [r4, #12]
 800a832:	89a3      	ldrh	r3, [r4, #12]
 800a834:	431d      	orrs	r5, r3
 800a836:	81a5      	strh	r5, [r4, #12]
 800a838:	e7cf      	b.n	800a7da <__smakebuf_r+0x18>

0800a83a <memmove>:
 800a83a:	4288      	cmp	r0, r1
 800a83c:	b510      	push	{r4, lr}
 800a83e:	eb01 0402 	add.w	r4, r1, r2
 800a842:	d902      	bls.n	800a84a <memmove+0x10>
 800a844:	4284      	cmp	r4, r0
 800a846:	4623      	mov	r3, r4
 800a848:	d807      	bhi.n	800a85a <memmove+0x20>
 800a84a:	1e43      	subs	r3, r0, #1
 800a84c:	42a1      	cmp	r1, r4
 800a84e:	d008      	beq.n	800a862 <memmove+0x28>
 800a850:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a854:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a858:	e7f8      	b.n	800a84c <memmove+0x12>
 800a85a:	4601      	mov	r1, r0
 800a85c:	4402      	add	r2, r0
 800a85e:	428a      	cmp	r2, r1
 800a860:	d100      	bne.n	800a864 <memmove+0x2a>
 800a862:	bd10      	pop	{r4, pc}
 800a864:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a868:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a86c:	e7f7      	b.n	800a85e <memmove+0x24>
	...

0800a870 <_fstat_r>:
 800a870:	b538      	push	{r3, r4, r5, lr}
 800a872:	2300      	movs	r3, #0
 800a874:	4d06      	ldr	r5, [pc, #24]	@ (800a890 <_fstat_r+0x20>)
 800a876:	4604      	mov	r4, r0
 800a878:	4608      	mov	r0, r1
 800a87a:	4611      	mov	r1, r2
 800a87c:	602b      	str	r3, [r5, #0]
 800a87e:	f7f9 fa9e 	bl	8003dbe <_fstat>
 800a882:	1c43      	adds	r3, r0, #1
 800a884:	d102      	bne.n	800a88c <_fstat_r+0x1c>
 800a886:	682b      	ldr	r3, [r5, #0]
 800a888:	b103      	cbz	r3, 800a88c <_fstat_r+0x1c>
 800a88a:	6023      	str	r3, [r4, #0]
 800a88c:	bd38      	pop	{r3, r4, r5, pc}
 800a88e:	bf00      	nop
 800a890:	200003f8 	.word	0x200003f8

0800a894 <_isatty_r>:
 800a894:	b538      	push	{r3, r4, r5, lr}
 800a896:	2300      	movs	r3, #0
 800a898:	4d05      	ldr	r5, [pc, #20]	@ (800a8b0 <_isatty_r+0x1c>)
 800a89a:	4604      	mov	r4, r0
 800a89c:	4608      	mov	r0, r1
 800a89e:	602b      	str	r3, [r5, #0]
 800a8a0:	f7f9 fa9c 	bl	8003ddc <_isatty>
 800a8a4:	1c43      	adds	r3, r0, #1
 800a8a6:	d102      	bne.n	800a8ae <_isatty_r+0x1a>
 800a8a8:	682b      	ldr	r3, [r5, #0]
 800a8aa:	b103      	cbz	r3, 800a8ae <_isatty_r+0x1a>
 800a8ac:	6023      	str	r3, [r4, #0]
 800a8ae:	bd38      	pop	{r3, r4, r5, pc}
 800a8b0:	200003f8 	.word	0x200003f8

0800a8b4 <_sbrk_r>:
 800a8b4:	b538      	push	{r3, r4, r5, lr}
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	4d05      	ldr	r5, [pc, #20]	@ (800a8d0 <_sbrk_r+0x1c>)
 800a8ba:	4604      	mov	r4, r0
 800a8bc:	4608      	mov	r0, r1
 800a8be:	602b      	str	r3, [r5, #0]
 800a8c0:	f7f9 faa2 	bl	8003e08 <_sbrk>
 800a8c4:	1c43      	adds	r3, r0, #1
 800a8c6:	d102      	bne.n	800a8ce <_sbrk_r+0x1a>
 800a8c8:	682b      	ldr	r3, [r5, #0]
 800a8ca:	b103      	cbz	r3, 800a8ce <_sbrk_r+0x1a>
 800a8cc:	6023      	str	r3, [r4, #0]
 800a8ce:	bd38      	pop	{r3, r4, r5, pc}
 800a8d0:	200003f8 	.word	0x200003f8

0800a8d4 <memchr>:
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	b510      	push	{r4, lr}
 800a8d8:	b2c9      	uxtb	r1, r1
 800a8da:	4402      	add	r2, r0
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	4618      	mov	r0, r3
 800a8e0:	d101      	bne.n	800a8e6 <memchr+0x12>
 800a8e2:	2000      	movs	r0, #0
 800a8e4:	e003      	b.n	800a8ee <memchr+0x1a>
 800a8e6:	7804      	ldrb	r4, [r0, #0]
 800a8e8:	3301      	adds	r3, #1
 800a8ea:	428c      	cmp	r4, r1
 800a8ec:	d1f6      	bne.n	800a8dc <memchr+0x8>
 800a8ee:	bd10      	pop	{r4, pc}

0800a8f0 <memcpy>:
 800a8f0:	440a      	add	r2, r1
 800a8f2:	4291      	cmp	r1, r2
 800a8f4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a8f8:	d100      	bne.n	800a8fc <memcpy+0xc>
 800a8fa:	4770      	bx	lr
 800a8fc:	b510      	push	{r4, lr}
 800a8fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a902:	4291      	cmp	r1, r2
 800a904:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a908:	d1f9      	bne.n	800a8fe <memcpy+0xe>
 800a90a:	bd10      	pop	{r4, pc}

0800a90c <_realloc_r>:
 800a90c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a910:	4680      	mov	r8, r0
 800a912:	4615      	mov	r5, r2
 800a914:	460c      	mov	r4, r1
 800a916:	b921      	cbnz	r1, 800a922 <_realloc_r+0x16>
 800a918:	4611      	mov	r1, r2
 800a91a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a91e:	f7ff b9cd 	b.w	8009cbc <_malloc_r>
 800a922:	b92a      	cbnz	r2, 800a930 <_realloc_r+0x24>
 800a924:	f7ff f958 	bl	8009bd8 <_free_r>
 800a928:	2400      	movs	r4, #0
 800a92a:	4620      	mov	r0, r4
 800a92c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a930:	f000 f81a 	bl	800a968 <_malloc_usable_size_r>
 800a934:	4285      	cmp	r5, r0
 800a936:	4606      	mov	r6, r0
 800a938:	d802      	bhi.n	800a940 <_realloc_r+0x34>
 800a93a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a93e:	d8f4      	bhi.n	800a92a <_realloc_r+0x1e>
 800a940:	4629      	mov	r1, r5
 800a942:	4640      	mov	r0, r8
 800a944:	f7ff f9ba 	bl	8009cbc <_malloc_r>
 800a948:	4607      	mov	r7, r0
 800a94a:	2800      	cmp	r0, #0
 800a94c:	d0ec      	beq.n	800a928 <_realloc_r+0x1c>
 800a94e:	42b5      	cmp	r5, r6
 800a950:	462a      	mov	r2, r5
 800a952:	4621      	mov	r1, r4
 800a954:	bf28      	it	cs
 800a956:	4632      	movcs	r2, r6
 800a958:	f7ff ffca 	bl	800a8f0 <memcpy>
 800a95c:	4621      	mov	r1, r4
 800a95e:	4640      	mov	r0, r8
 800a960:	f7ff f93a 	bl	8009bd8 <_free_r>
 800a964:	463c      	mov	r4, r7
 800a966:	e7e0      	b.n	800a92a <_realloc_r+0x1e>

0800a968 <_malloc_usable_size_r>:
 800a968:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a96c:	1f18      	subs	r0, r3, #4
 800a96e:	2b00      	cmp	r3, #0
 800a970:	bfbc      	itt	lt
 800a972:	580b      	ldrlt	r3, [r1, r0]
 800a974:	18c0      	addlt	r0, r0, r3
 800a976:	4770      	bx	lr

0800a978 <_init>:
 800a978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a97a:	bf00      	nop
 800a97c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a97e:	bc08      	pop	{r3}
 800a980:	469e      	mov	lr, r3
 800a982:	4770      	bx	lr

0800a984 <_fini>:
 800a984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a986:	bf00      	nop
 800a988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a98a:	bc08      	pop	{r3}
 800a98c:	469e      	mov	lr, r3
 800a98e:	4770      	bx	lr
