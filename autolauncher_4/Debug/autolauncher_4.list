
autolauncher_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009448  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f78  08009558  08009558  0000a558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4d0  0800a4d0  0000c098  2**0
                  CONTENTS
  4 .ARM          00000000  0800a4d0  0800a4d0  0000c098  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a4d0  0800a4d0  0000c098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4d0  0800a4d0  0000b4d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a4d4  0800a4d4  0000b4d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800a4d8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  20000098  0800a570  0000c098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003fc  0800a570  0000c3fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001389c  00000000  00000000  0000c0c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000300a  00000000  00000000  0001f95d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001290  00000000  00000000  00022968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e8b  00000000  00000000  00023bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a910  00000000  00000000  00024a83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018255  00000000  00000000  0003f393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000949d3  00000000  00000000  000575e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ebfbb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056f4  00000000  00000000  000ec000  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000f16f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000098 	.word	0x20000098
 800012c:	00000000 	.word	0x00000000
 8000130:	08009540 	.word	0x08009540

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000009c 	.word	0x2000009c
 800014c:	08009540 	.word	0x08009540

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001a2:	2afd      	cmp	r2, #253	@ 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	@ 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	@ 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__aeabi_d2uiz>:
 8000a54:	004a      	lsls	r2, r1, #1
 8000a56:	d211      	bcs.n	8000a7c <__aeabi_d2uiz+0x28>
 8000a58:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a5c:	d211      	bcs.n	8000a82 <__aeabi_d2uiz+0x2e>
 8000a5e:	d50d      	bpl.n	8000a7c <__aeabi_d2uiz+0x28>
 8000a60:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a64:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a68:	d40e      	bmi.n	8000a88 <__aeabi_d2uiz+0x34>
 8000a6a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a6e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a72:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a76:	fa23 f002 	lsr.w	r0, r3, r2
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d102      	bne.n	8000a8e <__aeabi_d2uiz+0x3a>
 8000a88:	f04f 30ff 	mov.w	r0, #4294967295
 8000a8c:	4770      	bx	lr
 8000a8e:	f04f 0000 	mov.w	r0, #0
 8000a92:	4770      	bx	lr

08000a94 <__aeabi_d2f>:
 8000a94:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a98:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a9c:	bf24      	itt	cs
 8000a9e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aa2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aa6:	d90d      	bls.n	8000ac4 <__aeabi_d2f+0x30>
 8000aa8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ab4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ab8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000abc:	bf08      	it	eq
 8000abe:	f020 0001 	biceq.w	r0, r0, #1
 8000ac2:	4770      	bx	lr
 8000ac4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ac8:	d121      	bne.n	8000b0e <__aeabi_d2f+0x7a>
 8000aca:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ace:	bfbc      	itt	lt
 8000ad0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ad4:	4770      	bxlt	lr
 8000ad6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ada:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ade:	f1c2 0218 	rsb	r2, r2, #24
 8000ae2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ae6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aea:	fa20 f002 	lsr.w	r0, r0, r2
 8000aee:	bf18      	it	ne
 8000af0:	f040 0001 	orrne.w	r0, r0, #1
 8000af4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000afc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b00:	ea40 000c 	orr.w	r0, r0, ip
 8000b04:	fa23 f302 	lsr.w	r3, r3, r2
 8000b08:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b0c:	e7cc      	b.n	8000aa8 <__aeabi_d2f+0x14>
 8000b0e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b12:	d107      	bne.n	8000b24 <__aeabi_d2f+0x90>
 8000b14:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b18:	bf1e      	ittt	ne
 8000b1a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b1e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b22:	4770      	bxne	lr
 8000b24:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b28:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop

08000b34 <__aeabi_frsub>:
 8000b34:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b38:	e002      	b.n	8000b40 <__addsf3>
 8000b3a:	bf00      	nop

08000b3c <__aeabi_fsub>:
 8000b3c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b40 <__addsf3>:
 8000b40:	0042      	lsls	r2, r0, #1
 8000b42:	bf1f      	itttt	ne
 8000b44:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b48:	ea92 0f03 	teqne	r2, r3
 8000b4c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b50:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b54:	d06a      	beq.n	8000c2c <__addsf3+0xec>
 8000b56:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b5a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b5e:	bfc1      	itttt	gt
 8000b60:	18d2      	addgt	r2, r2, r3
 8000b62:	4041      	eorgt	r1, r0
 8000b64:	4048      	eorgt	r0, r1
 8000b66:	4041      	eorgt	r1, r0
 8000b68:	bfb8      	it	lt
 8000b6a:	425b      	neglt	r3, r3
 8000b6c:	2b19      	cmp	r3, #25
 8000b6e:	bf88      	it	hi
 8000b70:	4770      	bxhi	lr
 8000b72:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b76:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b7e:	bf18      	it	ne
 8000b80:	4240      	negne	r0, r0
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b86:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b8a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b8e:	bf18      	it	ne
 8000b90:	4249      	negne	r1, r1
 8000b92:	ea92 0f03 	teq	r2, r3
 8000b96:	d03f      	beq.n	8000c18 <__addsf3+0xd8>
 8000b98:	f1a2 0201 	sub.w	r2, r2, #1
 8000b9c:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba0:	eb10 000c 	adds.w	r0, r0, ip
 8000ba4:	f1c3 0320 	rsb	r3, r3, #32
 8000ba8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bac:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bb0:	d502      	bpl.n	8000bb8 <__addsf3+0x78>
 8000bb2:	4249      	negs	r1, r1
 8000bb4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bb8:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bbc:	d313      	bcc.n	8000be6 <__addsf3+0xa6>
 8000bbe:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bc2:	d306      	bcc.n	8000bd2 <__addsf3+0x92>
 8000bc4:	0840      	lsrs	r0, r0, #1
 8000bc6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bca:	f102 0201 	add.w	r2, r2, #1
 8000bce:	2afe      	cmp	r2, #254	@ 0xfe
 8000bd0:	d251      	bcs.n	8000c76 <__addsf3+0x136>
 8000bd2:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bd6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bda:	bf08      	it	eq
 8000bdc:	f020 0001 	biceq.w	r0, r0, #1
 8000be0:	ea40 0003 	orr.w	r0, r0, r3
 8000be4:	4770      	bx	lr
 8000be6:	0049      	lsls	r1, r1, #1
 8000be8:	eb40 0000 	adc.w	r0, r0, r0
 8000bec:	3a01      	subs	r2, #1
 8000bee:	bf28      	it	cs
 8000bf0:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bf4:	d2ed      	bcs.n	8000bd2 <__addsf3+0x92>
 8000bf6:	fab0 fc80 	clz	ip, r0
 8000bfa:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bfe:	ebb2 020c 	subs.w	r2, r2, ip
 8000c02:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c06:	bfaa      	itet	ge
 8000c08:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c0c:	4252      	neglt	r2, r2
 8000c0e:	4318      	orrge	r0, r3
 8000c10:	bfbc      	itt	lt
 8000c12:	40d0      	lsrlt	r0, r2
 8000c14:	4318      	orrlt	r0, r3
 8000c16:	4770      	bx	lr
 8000c18:	f092 0f00 	teq	r2, #0
 8000c1c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c20:	bf06      	itte	eq
 8000c22:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c26:	3201      	addeq	r2, #1
 8000c28:	3b01      	subne	r3, #1
 8000c2a:	e7b5      	b.n	8000b98 <__addsf3+0x58>
 8000c2c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c30:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c34:	bf18      	it	ne
 8000c36:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c3a:	d021      	beq.n	8000c80 <__addsf3+0x140>
 8000c3c:	ea92 0f03 	teq	r2, r3
 8000c40:	d004      	beq.n	8000c4c <__addsf3+0x10c>
 8000c42:	f092 0f00 	teq	r2, #0
 8000c46:	bf08      	it	eq
 8000c48:	4608      	moveq	r0, r1
 8000c4a:	4770      	bx	lr
 8000c4c:	ea90 0f01 	teq	r0, r1
 8000c50:	bf1c      	itt	ne
 8000c52:	2000      	movne	r0, #0
 8000c54:	4770      	bxne	lr
 8000c56:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c5a:	d104      	bne.n	8000c66 <__addsf3+0x126>
 8000c5c:	0040      	lsls	r0, r0, #1
 8000c5e:	bf28      	it	cs
 8000c60:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c64:	4770      	bx	lr
 8000c66:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c6a:	bf3c      	itt	cc
 8000c6c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c70:	4770      	bxcc	lr
 8000c72:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c76:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c7a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c7e:	4770      	bx	lr
 8000c80:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c84:	bf16      	itet	ne
 8000c86:	4608      	movne	r0, r1
 8000c88:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c8c:	4601      	movne	r1, r0
 8000c8e:	0242      	lsls	r2, r0, #9
 8000c90:	bf06      	itte	eq
 8000c92:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c96:	ea90 0f01 	teqeq	r0, r1
 8000c9a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c9e:	4770      	bx	lr

08000ca0 <__aeabi_ui2f>:
 8000ca0:	f04f 0300 	mov.w	r3, #0
 8000ca4:	e004      	b.n	8000cb0 <__aeabi_i2f+0x8>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_i2f>:
 8000ca8:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cac:	bf48      	it	mi
 8000cae:	4240      	negmi	r0, r0
 8000cb0:	ea5f 0c00 	movs.w	ip, r0
 8000cb4:	bf08      	it	eq
 8000cb6:	4770      	bxeq	lr
 8000cb8:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cbc:	4601      	mov	r1, r0
 8000cbe:	f04f 0000 	mov.w	r0, #0
 8000cc2:	e01c      	b.n	8000cfe <__aeabi_l2f+0x2a>

08000cc4 <__aeabi_ul2f>:
 8000cc4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	e00a      	b.n	8000ce8 <__aeabi_l2f+0x14>
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_l2f>:
 8000cd4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000ce0:	d502      	bpl.n	8000ce8 <__aeabi_l2f+0x14>
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	ea5f 0c01 	movs.w	ip, r1
 8000cec:	bf02      	ittt	eq
 8000cee:	4684      	moveq	ip, r0
 8000cf0:	4601      	moveq	r1, r0
 8000cf2:	2000      	moveq	r0, #0
 8000cf4:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cf8:	bf08      	it	eq
 8000cfa:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cfe:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d02:	fabc f28c 	clz	r2, ip
 8000d06:	3a08      	subs	r2, #8
 8000d08:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d0c:	db10      	blt.n	8000d30 <__aeabi_l2f+0x5c>
 8000d0e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d12:	4463      	add	r3, ip
 8000d14:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d18:	f1c2 0220 	rsb	r2, r2, #32
 8000d1c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d20:	fa20 f202 	lsr.w	r2, r0, r2
 8000d24:	eb43 0002 	adc.w	r0, r3, r2
 8000d28:	bf08      	it	eq
 8000d2a:	f020 0001 	biceq.w	r0, r0, #1
 8000d2e:	4770      	bx	lr
 8000d30:	f102 0220 	add.w	r2, r2, #32
 8000d34:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d38:	f1c2 0220 	rsb	r2, r2, #32
 8000d3c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d40:	fa21 f202 	lsr.w	r2, r1, r2
 8000d44:	eb43 0002 	adc.w	r0, r3, r2
 8000d48:	bf08      	it	eq
 8000d4a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d4e:	4770      	bx	lr

08000d50 <__aeabi_f2iz>:
 8000d50:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d54:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000d58:	d30f      	bcc.n	8000d7a <__aeabi_f2iz+0x2a>
 8000d5a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000d5e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d62:	d90d      	bls.n	8000d80 <__aeabi_f2iz+0x30>
 8000d64:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d68:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000d6c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d70:	fa23 f002 	lsr.w	r0, r3, r2
 8000d74:	bf18      	it	ne
 8000d76:	4240      	negne	r0, r0
 8000d78:	4770      	bx	lr
 8000d7a:	f04f 0000 	mov.w	r0, #0
 8000d7e:	4770      	bx	lr
 8000d80:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000d84:	d101      	bne.n	8000d8a <__aeabi_f2iz+0x3a>
 8000d86:	0242      	lsls	r2, r0, #9
 8000d88:	d105      	bne.n	8000d96 <__aeabi_f2iz+0x46>
 8000d8a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000d8e:	bf08      	it	eq
 8000d90:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000d94:	4770      	bx	lr
 8000d96:	f04f 0000 	mov.w	r0, #0
 8000d9a:	4770      	bx	lr

08000d9c <__aeabi_f2uiz>:
 8000d9c:	0042      	lsls	r2, r0, #1
 8000d9e:	d20e      	bcs.n	8000dbe <__aeabi_f2uiz+0x22>
 8000da0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000da4:	d30b      	bcc.n	8000dbe <__aeabi_f2uiz+0x22>
 8000da6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000daa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000dae:	d409      	bmi.n	8000dc4 <__aeabi_f2uiz+0x28>
 8000db0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000db4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000db8:	fa23 f002 	lsr.w	r0, r3, r2
 8000dbc:	4770      	bx	lr
 8000dbe:	f04f 0000 	mov.w	r0, #0
 8000dc2:	4770      	bx	lr
 8000dc4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000dc8:	d101      	bne.n	8000dce <__aeabi_f2uiz+0x32>
 8000dca:	0242      	lsls	r2, r0, #9
 8000dcc:	d102      	bne.n	8000dd4 <__aeabi_f2uiz+0x38>
 8000dce:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd2:	4770      	bx	lr
 8000dd4:	f04f 0000 	mov.w	r0, #0
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop

08000ddc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000dec:	4b27      	ldr	r3, [pc, #156]	@ (8000e8c <MX_ADC1_Init+0xb0>)
 8000dee:	4a28      	ldr	r2, [pc, #160]	@ (8000e90 <MX_ADC1_Init+0xb4>)
 8000df0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000df2:	4b26      	ldr	r3, [pc, #152]	@ (8000e8c <MX_ADC1_Init+0xb0>)
 8000df4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000df8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dfa:	4b24      	ldr	r3, [pc, #144]	@ (8000e8c <MX_ADC1_Init+0xb0>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e00:	4b22      	ldr	r3, [pc, #136]	@ (8000e8c <MX_ADC1_Init+0xb0>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e06:	4b21      	ldr	r3, [pc, #132]	@ (8000e8c <MX_ADC1_Init+0xb0>)
 8000e08:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000e0c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e0e:	4b1f      	ldr	r3, [pc, #124]	@ (8000e8c <MX_ADC1_Init+0xb0>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8000e14:	4b1d      	ldr	r3, [pc, #116]	@ (8000e8c <MX_ADC1_Init+0xb0>)
 8000e16:	2203      	movs	r2, #3
 8000e18:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e1a:	481c      	ldr	r0, [pc, #112]	@ (8000e8c <MX_ADC1_Init+0xb0>)
 8000e1c:	f002 fc9e 	bl	800375c <HAL_ADC_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000e26:	f002 f834 	bl	8002e92 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000e2a:	230a      	movs	r3, #10
 8000e2c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000e32:	2302      	movs	r3, #2
 8000e34:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4814      	ldr	r0, [pc, #80]	@ (8000e8c <MX_ADC1_Init+0xb0>)
 8000e3c:	f002 feac 	bl	8003b98 <HAL_ADC_ConfigChannel>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000e46:	f002 f824 	bl	8002e92 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000e4a:	230b      	movs	r3, #11
 8000e4c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	4619      	mov	r1, r3
 8000e56:	480d      	ldr	r0, [pc, #52]	@ (8000e8c <MX_ADC1_Init+0xb0>)
 8000e58:	f002 fe9e 	bl	8003b98 <HAL_ADC_ConfigChannel>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000e62:	f002 f816 	bl	8002e92 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000e66:	2310      	movs	r3, #16
 8000e68:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	4619      	mov	r1, r3
 8000e72:	4806      	ldr	r0, [pc, #24]	@ (8000e8c <MX_ADC1_Init+0xb0>)
 8000e74:	f002 fe90 	bl	8003b98 <HAL_ADC_ConfigChannel>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000e7e:	f002 f808 	bl	8002e92 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e82:	bf00      	nop
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	200000b4 	.word	0x200000b4
 8000e90:	40012400 	.word	0x40012400

08000e94 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b088      	sub	sp, #32
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9c:	f107 0310 	add.w	r3, r7, #16
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a28      	ldr	r2, [pc, #160]	@ (8000f50 <HAL_ADC_MspInit+0xbc>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d149      	bne.n	8000f48 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000eb4:	4b27      	ldr	r3, [pc, #156]	@ (8000f54 <HAL_ADC_MspInit+0xc0>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	4a26      	ldr	r2, [pc, #152]	@ (8000f54 <HAL_ADC_MspInit+0xc0>)
 8000eba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ebe:	6193      	str	r3, [r2, #24]
 8000ec0:	4b24      	ldr	r3, [pc, #144]	@ (8000f54 <HAL_ADC_MspInit+0xc0>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ecc:	4b21      	ldr	r3, [pc, #132]	@ (8000f54 <HAL_ADC_MspInit+0xc0>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	4a20      	ldr	r2, [pc, #128]	@ (8000f54 <HAL_ADC_MspInit+0xc0>)
 8000ed2:	f043 0310 	orr.w	r3, r3, #16
 8000ed6:	6193      	str	r3, [r2, #24]
 8000ed8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f54 <HAL_ADC_MspInit+0xc0>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	f003 0310 	and.w	r3, r3, #16
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = ADC_VOLT_Pin|ADC_AMP_Pin;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eec:	f107 0310 	add.w	r3, r7, #16
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4819      	ldr	r0, [pc, #100]	@ (8000f58 <HAL_ADC_MspInit+0xc4>)
 8000ef4:	f003 fbfa 	bl	80046ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000ef8:	4b18      	ldr	r3, [pc, #96]	@ (8000f5c <HAL_ADC_MspInit+0xc8>)
 8000efa:	4a19      	ldr	r2, [pc, #100]	@ (8000f60 <HAL_ADC_MspInit+0xcc>)
 8000efc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000efe:	4b17      	ldr	r3, [pc, #92]	@ (8000f5c <HAL_ADC_MspInit+0xc8>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f04:	4b15      	ldr	r3, [pc, #84]	@ (8000f5c <HAL_ADC_MspInit+0xc8>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f0a:	4b14      	ldr	r3, [pc, #80]	@ (8000f5c <HAL_ADC_MspInit+0xc8>)
 8000f0c:	2280      	movs	r2, #128	@ 0x80
 8000f0e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f10:	4b12      	ldr	r3, [pc, #72]	@ (8000f5c <HAL_ADC_MspInit+0xc8>)
 8000f12:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f16:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f18:	4b10      	ldr	r3, [pc, #64]	@ (8000f5c <HAL_ADC_MspInit+0xc8>)
 8000f1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f1e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f20:	4b0e      	ldr	r3, [pc, #56]	@ (8000f5c <HAL_ADC_MspInit+0xc8>)
 8000f22:	2220      	movs	r2, #32
 8000f24:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f26:	4b0d      	ldr	r3, [pc, #52]	@ (8000f5c <HAL_ADC_MspInit+0xc8>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f2c:	480b      	ldr	r0, [pc, #44]	@ (8000f5c <HAL_ADC_MspInit+0xc8>)
 8000f2e:	f003 f93b 	bl	80041a8 <HAL_DMA_Init>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000f38:	f001 ffab 	bl	8002e92 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a07      	ldr	r2, [pc, #28]	@ (8000f5c <HAL_ADC_MspInit+0xc8>)
 8000f40:	621a      	str	r2, [r3, #32]
 8000f42:	4a06      	ldr	r2, [pc, #24]	@ (8000f5c <HAL_ADC_MspInit+0xc8>)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f48:	bf00      	nop
 8000f4a:	3720      	adds	r7, #32
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40012400 	.word	0x40012400
 8000f54:	40021000 	.word	0x40021000
 8000f58:	40011000 	.word	0x40011000
 8000f5c:	200000e4 	.word	0x200000e4
 8000f60:	40020008 	.word	0x40020008

08000f64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f9c <MX_DMA_Init+0x38>)
 8000f6c:	695b      	ldr	r3, [r3, #20]
 8000f6e:	4a0b      	ldr	r2, [pc, #44]	@ (8000f9c <MX_DMA_Init+0x38>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	6153      	str	r3, [r2, #20]
 8000f76:	4b09      	ldr	r3, [pc, #36]	@ (8000f9c <MX_DMA_Init+0x38>)
 8000f78:	695b      	ldr	r3, [r3, #20]
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2100      	movs	r1, #0
 8000f86:	200b      	movs	r0, #11
 8000f88:	f003 f8d7 	bl	800413a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f8c:	200b      	movs	r0, #11
 8000f8e:	f003 f8f0 	bl	8004172 <HAL_NVIC_EnableIRQ>

}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40021000 	.word	0x40021000

08000fa0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b088      	sub	sp, #32
 8000fa4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa6:	f107 0310 	add.w	r3, r7, #16
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb4:	4b42      	ldr	r3, [pc, #264]	@ (80010c0 <MX_GPIO_Init+0x120>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	4a41      	ldr	r2, [pc, #260]	@ (80010c0 <MX_GPIO_Init+0x120>)
 8000fba:	f043 0310 	orr.w	r3, r3, #16
 8000fbe:	6193      	str	r3, [r2, #24]
 8000fc0:	4b3f      	ldr	r3, [pc, #252]	@ (80010c0 <MX_GPIO_Init+0x120>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	f003 0310 	and.w	r3, r3, #16
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fcc:	4b3c      	ldr	r3, [pc, #240]	@ (80010c0 <MX_GPIO_Init+0x120>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	4a3b      	ldr	r2, [pc, #236]	@ (80010c0 <MX_GPIO_Init+0x120>)
 8000fd2:	f043 0304 	orr.w	r3, r3, #4
 8000fd6:	6193      	str	r3, [r2, #24]
 8000fd8:	4b39      	ldr	r3, [pc, #228]	@ (80010c0 <MX_GPIO_Init+0x120>)
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	f003 0304 	and.w	r3, r3, #4
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe4:	4b36      	ldr	r3, [pc, #216]	@ (80010c0 <MX_GPIO_Init+0x120>)
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	4a35      	ldr	r2, [pc, #212]	@ (80010c0 <MX_GPIO_Init+0x120>)
 8000fea:	f043 0308 	orr.w	r3, r3, #8
 8000fee:	6193      	str	r3, [r2, #24]
 8000ff0:	4b33      	ldr	r3, [pc, #204]	@ (80010c0 <MX_GPIO_Init+0x120>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	f003 0308 	and.w	r3, r3, #8
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ffc:	4b30      	ldr	r3, [pc, #192]	@ (80010c0 <MX_GPIO_Init+0x120>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	4a2f      	ldr	r2, [pc, #188]	@ (80010c0 <MX_GPIO_Init+0x120>)
 8001002:	f043 0320 	orr.w	r3, r3, #32
 8001006:	6193      	str	r3, [r2, #24]
 8001008:	4b2d      	ldr	r3, [pc, #180]	@ (80010c0 <MX_GPIO_Init+0x120>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	f003 0320 	and.w	r3, r3, #32
 8001010:	603b      	str	r3, [r7, #0]
 8001012:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SSR_3_Pin|SSR_2_Pin|SSR_1_Pin|ENABLE_M1_Pin
 8001014:	2200      	movs	r2, #0
 8001016:	f64f 71dc 	movw	r1, #65500	@ 0xffdc
 800101a:	482a      	ldr	r0, [pc, #168]	@ (80010c4 <MX_GPIO_Init+0x124>)
 800101c:	f003 fcea 	bl	80049f4 <HAL_GPIO_WritePin>
                          |ENABLE_M2_Pin|DIR_Pin|SSR_6_Pin|SSR_5_Pin
                          |RELAY_RESET_3_Pin|RELAY_RESET_2_Pin|RELAY_K7_Pin|RELAY_K1_Pin
                          |RELAY_K2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENABLE_M3_Pin|ENABLE_M4_Pin|MUX_SELECT_Pin|ENABLE_M5_Pin
 8001020:	2200      	movs	r2, #0
 8001022:	f649 11f7 	movw	r1, #39415	@ 0x99f7
 8001026:	4828      	ldr	r0, [pc, #160]	@ (80010c8 <MX_GPIO_Init+0x128>)
 8001028:	f003 fce4 	bl	80049f4 <HAL_GPIO_WritePin>
                          |ENABLE_M6_Pin|ENABLE_M7_Pin|ENABLE_M8_Pin|RELAY_K12_CAL_RES_Pin
                          |RELAY_K11_CAL_CONT_Pin|RELAY_K9_K10_GND_COND_Pin|RELAY_K8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|SSR_8_Pin|SSR_7_Pin|RELAY_K4_Pin
 800102c:	2200      	movs	r2, #0
 800102e:	f24c 313a 	movw	r1, #49978	@ 0xc33a
 8001032:	4826      	ldr	r0, [pc, #152]	@ (80010cc <MX_GPIO_Init+0x12c>)
 8001034:	f003 fcde 	bl	80049f4 <HAL_GPIO_WritePin>
                          |RELAY_K5_Pin|RELAY_K6_Pin|RELAY_RESET_1_Pin|SSR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_K3_GPIO_Port, RELAY_K3_Pin, GPIO_PIN_RESET);
 8001038:	2200      	movs	r2, #0
 800103a:	2104      	movs	r1, #4
 800103c:	4824      	ldr	r0, [pc, #144]	@ (80010d0 <MX_GPIO_Init+0x130>)
 800103e:	f003 fcd9 	bl	80049f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = SSR_3_Pin|SSR_2_Pin|SSR_1_Pin|ENABLE_M1_Pin
 8001042:	f64f 73dc 	movw	r3, #65500	@ 0xffdc
 8001046:	613b      	str	r3, [r7, #16]
                          |ENABLE_M2_Pin|DIR_Pin|SSR_6_Pin|SSR_5_Pin
                          |RELAY_RESET_3_Pin|RELAY_RESET_2_Pin|RELAY_K7_Pin|RELAY_K1_Pin
                          |RELAY_K2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001048:	2301      	movs	r3, #1
 800104a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001050:	2302      	movs	r3, #2
 8001052:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001054:	f107 0310 	add.w	r3, r7, #16
 8001058:	4619      	mov	r1, r3
 800105a:	481a      	ldr	r0, [pc, #104]	@ (80010c4 <MX_GPIO_Init+0x124>)
 800105c:	f003 fb46 	bl	80046ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ENABLE_M3_Pin|ENABLE_M4_Pin|MUX_SELECT_Pin|ENABLE_M5_Pin
 8001060:	f649 13f7 	movw	r3, #39415	@ 0x99f7
 8001064:	613b      	str	r3, [r7, #16]
                          |ENABLE_M6_Pin|ENABLE_M7_Pin|ENABLE_M8_Pin|RELAY_K12_CAL_RES_Pin
                          |RELAY_K11_CAL_CONT_Pin|RELAY_K9_K10_GND_COND_Pin|RELAY_K8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001066:	2301      	movs	r3, #1
 8001068:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106e:	2302      	movs	r3, #2
 8001070:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001072:	f107 0310 	add.w	r3, r7, #16
 8001076:	4619      	mov	r1, r3
 8001078:	4813      	ldr	r0, [pc, #76]	@ (80010c8 <MX_GPIO_Init+0x128>)
 800107a:	f003 fb37 	bl	80046ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_Pin|SSR_8_Pin|SSR_7_Pin|RELAY_K4_Pin
 800107e:	f24c 333a 	movw	r3, #49978	@ 0xc33a
 8001082:	613b      	str	r3, [r7, #16]
                          |RELAY_K5_Pin|RELAY_K6_Pin|RELAY_RESET_1_Pin|SSR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001084:	2301      	movs	r3, #1
 8001086:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108c:	2302      	movs	r3, #2
 800108e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001090:	f107 0310 	add.w	r3, r7, #16
 8001094:	4619      	mov	r1, r3
 8001096:	480d      	ldr	r0, [pc, #52]	@ (80010cc <MX_GPIO_Init+0x12c>)
 8001098:	f003 fb28 	bl	80046ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RELAY_K3_Pin;
 800109c:	2304      	movs	r3, #4
 800109e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a0:	2301      	movs	r3, #1
 80010a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a8:	2302      	movs	r3, #2
 80010aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RELAY_K3_GPIO_Port, &GPIO_InitStruct);
 80010ac:	f107 0310 	add.w	r3, r7, #16
 80010b0:	4619      	mov	r1, r3
 80010b2:	4807      	ldr	r0, [pc, #28]	@ (80010d0 <MX_GPIO_Init+0x130>)
 80010b4:	f003 fb1a 	bl	80046ec <HAL_GPIO_Init>

}
 80010b8:	bf00      	nop
 80010ba:	3720      	adds	r7, #32
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40021000 	.word	0x40021000
 80010c4:	40011000 	.word	0x40011000
 80010c8:	40010800 	.word	0x40010800
 80010cc:	40010c00 	.word	0x40010c00
 80010d0:	40011400 	.word	0x40011400

080010d4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010d8:	4b12      	ldr	r3, [pc, #72]	@ (8001124 <MX_I2C1_Init+0x50>)
 80010da:	4a13      	ldr	r2, [pc, #76]	@ (8001128 <MX_I2C1_Init+0x54>)
 80010dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010de:	4b11      	ldr	r3, [pc, #68]	@ (8001124 <MX_I2C1_Init+0x50>)
 80010e0:	4a12      	ldr	r2, [pc, #72]	@ (800112c <MX_I2C1_Init+0x58>)
 80010e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001124 <MX_I2C1_Init+0x50>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001124 <MX_I2C1_Init+0x50>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001124 <MX_I2C1_Init+0x50>)
 80010f2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001124 <MX_I2C1_Init+0x50>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010fe:	4b09      	ldr	r3, [pc, #36]	@ (8001124 <MX_I2C1_Init+0x50>)
 8001100:	2200      	movs	r2, #0
 8001102:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001104:	4b07      	ldr	r3, [pc, #28]	@ (8001124 <MX_I2C1_Init+0x50>)
 8001106:	2200      	movs	r2, #0
 8001108:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800110a:	4b06      	ldr	r3, [pc, #24]	@ (8001124 <MX_I2C1_Init+0x50>)
 800110c:	2200      	movs	r2, #0
 800110e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001110:	4804      	ldr	r0, [pc, #16]	@ (8001124 <MX_I2C1_Init+0x50>)
 8001112:	f003 fca1 	bl	8004a58 <HAL_I2C_Init>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800111c:	f001 feb9 	bl	8002e92 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000128 	.word	0x20000128
 8001128:	40005400 	.word	0x40005400
 800112c:	000186a0 	.word	0x000186a0

08001130 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b088      	sub	sp, #32
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 0310 	add.w	r3, r7, #16
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a15      	ldr	r2, [pc, #84]	@ (80011a0 <HAL_I2C_MspInit+0x70>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d123      	bne.n	8001198 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001150:	4b14      	ldr	r3, [pc, #80]	@ (80011a4 <HAL_I2C_MspInit+0x74>)
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	4a13      	ldr	r2, [pc, #76]	@ (80011a4 <HAL_I2C_MspInit+0x74>)
 8001156:	f043 0308 	orr.w	r3, r3, #8
 800115a:	6193      	str	r3, [r2, #24]
 800115c:	4b11      	ldr	r3, [pc, #68]	@ (80011a4 <HAL_I2C_MspInit+0x74>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	f003 0308 	and.w	r3, r3, #8
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001168:	23c0      	movs	r3, #192	@ 0xc0
 800116a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800116c:	2312      	movs	r3, #18
 800116e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001170:	2303      	movs	r3, #3
 8001172:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001174:	f107 0310 	add.w	r3, r7, #16
 8001178:	4619      	mov	r1, r3
 800117a:	480b      	ldr	r0, [pc, #44]	@ (80011a8 <HAL_I2C_MspInit+0x78>)
 800117c:	f003 fab6 	bl	80046ec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001180:	4b08      	ldr	r3, [pc, #32]	@ (80011a4 <HAL_I2C_MspInit+0x74>)
 8001182:	69db      	ldr	r3, [r3, #28]
 8001184:	4a07      	ldr	r2, [pc, #28]	@ (80011a4 <HAL_I2C_MspInit+0x74>)
 8001186:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800118a:	61d3      	str	r3, [r2, #28]
 800118c:	4b05      	ldr	r3, [pc, #20]	@ (80011a4 <HAL_I2C_MspInit+0x74>)
 800118e:	69db      	ldr	r3, [r3, #28]
 8001190:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001198:	bf00      	nop
 800119a:	3720      	adds	r7, #32
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40005400 	.word	0x40005400
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40010c00 	.word	0x40010c00

080011ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011b0:	f002 fa4e 	bl	8003650 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011b4:	f000 f846 	bl	8001244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011b8:	f7ff fef2 	bl	8000fa0 <MX_GPIO_Init>
  MX_DMA_Init();
 80011bc:	f7ff fed2 	bl	8000f64 <MX_DMA_Init>
  MX_TIM3_Init();
 80011c0:	f001 ff64 	bl	800308c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80011c4:	f002 f8ba 	bl	800333c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80011c8:	f7ff fe08 	bl	8000ddc <MX_ADC1_Init>
  MX_I2C1_Init();
 80011cc:	f7ff ff82 	bl	80010d4 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80011d0:	f002 f8de 	bl	8003390 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 80011d4:	f001 ffd2 	bl	800317c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  // Retarget IO stream to UART
  RetargetInit(&huart1);
 80011d8:	4816      	ldr	r0, [pc, #88]	@ (8001234 <main+0x88>)
 80011da:	f002 f9b9 	bl	8003550 <RetargetInit>
  // Initialize stepper motors
  motor_init();
 80011de:	f001 fa3f 	bl	8002660 <motor_init>
  // initialize multiplexer
  multiplexer_set(MUX_STM32);
 80011e2:	2001      	movs	r0, #1
 80011e4:	f000 ff44 	bl	8002070 <multiplexer_set>
  // Initialize relays
  relay_init();
 80011e8:	f001 f91c 	bl	8002424 <relay_init>
  // enable receive interrupt
  uartrx_interrupt_init();
 80011ec:	f000 fff8 	bl	80021e0 <uartrx_interrupt_init>
  // Initialize autolauncher parameters i.e. read eeprom
  parameter_init();
 80011f0:	f000 ff72 	bl	80020d8 <parameter_init>
  // display main menu at startup
  menu_main();
 80011f4:	f000 fda6 	bl	8001d44 <menu_main>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // menu control loop
	  if(active == rxStatus){ // set to active with UART RX interrupt
 80011f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001238 <main+0x8c>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d115      	bne.n	800122c <main+0x80>
		  rxStatus = idle;
 8001200:	4b0d      	ldr	r3, [pc, #52]	@ (8001238 <main+0x8c>)
 8001202:	2200      	movs	r2, #0
 8001204:	701a      	strb	r2, [r3, #0]
		  if( mainMenu == activeMenu){
 8001206:	4b0d      	ldr	r3, [pc, #52]	@ (800123c <main+0x90>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d105      	bne.n	800121a <main+0x6e>
			  main_process_input(rxChar); // go to main switch case menu
 800120e:	4b0c      	ldr	r3, [pc, #48]	@ (8001240 <main+0x94>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	4618      	mov	r0, r3
 8001214:	f000 f866 	bl	80012e4 <main_process_input>
 8001218:	e008      	b.n	800122c <main+0x80>
		  } else if ( configMenu == activeMenu){
 800121a:	4b08      	ldr	r3, [pc, #32]	@ (800123c <main+0x90>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d104      	bne.n	800122c <main+0x80>
			  config_process_input(rxChar);
 8001222:	4b07      	ldr	r3, [pc, #28]	@ (8001240 <main+0x94>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	4618      	mov	r0, r3
 8001228:	f000 fa6a 	bl	8001700 <config_process_input>
		  }
	  }
	  // monitor voltage and send alarm if it's below a threshold
	  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	  HAL_Delay(1); // needed to debug, remove
 800122c:	2001      	movs	r0, #1
 800122e:	f002 fa71 	bl	8003714 <HAL_Delay>
	  if(active == rxStatus){ // set to active with UART RX interrupt
 8001232:	e7e1      	b.n	80011f8 <main+0x4c>
 8001234:	20000218 	.word	0x20000218
 8001238:	2000017e 	.word	0x2000017e
 800123c:	2000017f 	.word	0x2000017f
 8001240:	20000181 	.word	0x20000181

08001244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b094      	sub	sp, #80	@ 0x50
 8001248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800124a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800124e:	2228      	movs	r2, #40	@ 0x28
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f007 fbd0 	bl	80089f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001268:	1d3b      	adds	r3, r7, #4
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001274:	2302      	movs	r3, #2
 8001276:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001278:	2301      	movs	r3, #1
 800127a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800127c:	2310      	movs	r3, #16
 800127e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001280:	2300      	movs	r3, #0
 8001282:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001284:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001288:	4618      	mov	r0, r3
 800128a:	f004 fc19 	bl	8005ac0 <HAL_RCC_OscConfig>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001294:	f001 fdfd 	bl	8002e92 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001298:	230f      	movs	r3, #15
 800129a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800129c:	2300      	movs	r3, #0
 800129e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012a0:	2300      	movs	r3, #0
 80012a2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012a4:	2300      	movs	r3, #0
 80012a6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012a8:	2300      	movs	r3, #0
 80012aa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	2100      	movs	r1, #0
 80012b2:	4618      	mov	r0, r3
 80012b4:	f004 fe86 	bl	8005fc4 <HAL_RCC_ClockConfig>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80012be:	f001 fde8 	bl	8002e92 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80012c2:	2302      	movs	r3, #2
 80012c4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012ca:	1d3b      	adds	r3, r7, #4
 80012cc:	4618      	mov	r0, r3
 80012ce:	f005 f807 	bl	80062e0 <HAL_RCCEx_PeriphCLKConfig>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80012d8:	f001 fddb 	bl	8002e92 <Error_Handler>
  }
}
 80012dc:	bf00      	nop
 80012de:	3750      	adds	r7, #80	@ 0x50
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <main_process_input>:




/* Process char received while in Main menu */
void main_process_input(char option){
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
	printf("\r\n> Executing OPTION (%c) --> ", option);
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	4619      	mov	r1, r3
 80012f2:	48cb      	ldr	r0, [pc, #812]	@ (8001620 <main_process_input+0x33c>)
 80012f4:	f007 f984 	bl	8008600 <iprintf>

	switch (option){
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	3b30      	subs	r3, #48	@ 0x30
 80012fc:	2b4e      	cmp	r3, #78	@ 0x4e
 80012fe:	f200 81ec 	bhi.w	80016da <main_process_input+0x3f6>
 8001302:	a201      	add	r2, pc, #4	@ (adr r2, 8001308 <main_process_input+0x24>)
 8001304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001308:	08001445 	.word	0x08001445
 800130c:	08001459 	.word	0x08001459
 8001310:	08001467 	.word	0x08001467
 8001314:	08001475 	.word	0x08001475
 8001318:	08001483 	.word	0x08001483
 800131c:	08001491 	.word	0x08001491
 8001320:	0800149f 	.word	0x0800149f
 8001324:	080014ad 	.word	0x080014ad
 8001328:	080014cb 	.word	0x080014cb
 800132c:	080016db 	.word	0x080016db
 8001330:	080016db 	.word	0x080016db
 8001334:	080016db 	.word	0x080016db
 8001338:	080016db 	.word	0x080016db
 800133c:	080016db 	.word	0x080016db
 8001340:	080016db 	.word	0x080016db
 8001344:	080016db 	.word	0x080016db
 8001348:	080016db 	.word	0x080016db
 800134c:	08001579 	.word	0x08001579
 8001350:	08001587 	.word	0x08001587
 8001354:	08001595 	.word	0x08001595
 8001358:	080015a3 	.word	0x080015a3
 800135c:	080015b1 	.word	0x080015b1
 8001360:	080015bf 	.word	0x080015bf
 8001364:	080016b1 	.word	0x080016b1
 8001368:	080015cd 	.word	0x080015cd
 800136c:	080015eb 	.word	0x080015eb
 8001370:	080016db 	.word	0x080016db
 8001374:	08001609 	.word	0x08001609
 8001378:	080016a5 	.word	0x080016a5
 800137c:	080016bd 	.word	0x080016bd
 8001380:	080016db 	.word	0x080016db
 8001384:	080016db 	.word	0x080016db
 8001388:	080016e3 	.word	0x080016e3
 800138c:	080016db 	.word	0x080016db
 8001390:	08001615 	.word	0x08001615
 8001394:	0800153d 	.word	0x0800153d
 8001398:	0800155b 	.word	0x0800155b
 800139c:	080014e9 	.word	0x080014e9
 80013a0:	080014f7 	.word	0x080014f7
 80013a4:	08001505 	.word	0x08001505
 80013a8:	08001513 	.word	0x08001513
 80013ac:	08001521 	.word	0x08001521
 80013b0:	0800152f 	.word	0x0800152f
 80013b4:	080016db 	.word	0x080016db
 80013b8:	080016db 	.word	0x080016db
 80013bc:	080016db 	.word	0x080016db
 80013c0:	080016db 	.word	0x080016db
 80013c4:	080016db 	.word	0x080016db
 80013c8:	080016db 	.word	0x080016db
 80013cc:	080016db 	.word	0x080016db
 80013d0:	080016db 	.word	0x080016db
 80013d4:	080016db 	.word	0x080016db
 80013d8:	080016db 	.word	0x080016db
 80013dc:	080016db 	.word	0x080016db
 80013e0:	080016db 	.word	0x080016db
 80013e4:	080016db 	.word	0x080016db
 80013e8:	080016db 	.word	0x080016db
 80013ec:	080016db 	.word	0x080016db
 80013f0:	080016db 	.word	0x080016db
 80013f4:	080016db 	.word	0x080016db
 80013f8:	080016db 	.word	0x080016db
 80013fc:	080016db 	.word	0x080016db
 8001400:	080016db 	.word	0x080016db
 8001404:	080016db 	.word	0x080016db
 8001408:	080016db 	.word	0x080016db
 800140c:	080016db 	.word	0x080016db
 8001410:	080016db 	.word	0x080016db
 8001414:	080016cf 	.word	0x080016cf
 8001418:	080016db 	.word	0x080016db
 800141c:	080016db 	.word	0x080016db
 8001420:	080016db 	.word	0x080016db
 8001424:	080016db 	.word	0x080016db
 8001428:	080016db 	.word	0x080016db
 800142c:	080016db 	.word	0x080016db
 8001430:	080016db 	.word	0x080016db
 8001434:	080016db 	.word	0x080016db
 8001438:	080016db 	.word	0x080016db
 800143c:	080016db 	.word	0x080016db
 8001440:	080016c3 	.word	0x080016c3
		// Connect XBT pins
    case '0':
        //engage calibration resistor
    	printf("unground_xbt(), calibration_resistor(), calibrate_on()\r\n");
 8001444:	4877      	ldr	r0, [pc, #476]	@ (8001624 <main_process_input+0x340>)
 8001446:	f007 f943 	bl	80086d0 <puts>
        unground_xbt();
 800144a:	f000 fed7 	bl	80021fc <unground_xbt>
        calibration_resistor();
 800144e:	f000 feed 	bl	800222c <calibration_resistor>
        calibrate_on();
 8001452:	f000 ff03 	bl	800225c <calibrate_on>
        break;
 8001456:	e145      	b.n	80016e4 <main_process_input+0x400>
    case '1':
    	printf("connect_xbt_pin(1)\r\n");
 8001458:	4873      	ldr	r0, [pc, #460]	@ (8001628 <main_process_input+0x344>)
 800145a:	f007 f939 	bl	80086d0 <puts>
        connect_xbt_pin(1);
 800145e:	2001      	movs	r0, #1
 8001460:	f000 ff40 	bl	80022e4 <connect_xbt_pin>
        break;
 8001464:	e13e      	b.n	80016e4 <main_process_input+0x400>
    case '2':
        connect_xbt_pin(2);
 8001466:	2002      	movs	r0, #2
 8001468:	f000 ff3c 	bl	80022e4 <connect_xbt_pin>
        printf("connect_xbt_pin(2)\r\n");
 800146c:	486f      	ldr	r0, [pc, #444]	@ (800162c <main_process_input+0x348>)
 800146e:	f007 f92f 	bl	80086d0 <puts>
        break;
 8001472:	e137      	b.n	80016e4 <main_process_input+0x400>
    case '3':
        connect_xbt_pin(3);
 8001474:	2003      	movs	r0, #3
 8001476:	f000 ff35 	bl	80022e4 <connect_xbt_pin>
        printf("connect_xbt_pin(3)\r\n");
 800147a:	486d      	ldr	r0, [pc, #436]	@ (8001630 <main_process_input+0x34c>)
 800147c:	f007 f928 	bl	80086d0 <puts>
        break;
 8001480:	e130      	b.n	80016e4 <main_process_input+0x400>
    case '4':
        connect_xbt_pin(4);
 8001482:	2004      	movs	r0, #4
 8001484:	f000 ff2e 	bl	80022e4 <connect_xbt_pin>
        printf("connect_xbt_pin(4)\r\n");
 8001488:	486a      	ldr	r0, [pc, #424]	@ (8001634 <main_process_input+0x350>)
 800148a:	f007 f921 	bl	80086d0 <puts>
        break;
 800148e:	e129      	b.n	80016e4 <main_process_input+0x400>
    case '5':
        connect_xbt_pin(5);
 8001490:	2005      	movs	r0, #5
 8001492:	f000 ff27 	bl	80022e4 <connect_xbt_pin>
        printf("connect_xbt_pin(5)\r\n");
 8001496:	4868      	ldr	r0, [pc, #416]	@ (8001638 <main_process_input+0x354>)
 8001498:	f007 f91a 	bl	80086d0 <puts>
        break;
 800149c:	e122      	b.n	80016e4 <main_process_input+0x400>
    case '6':
        connect_xbt_pin(6);
 800149e:	2006      	movs	r0, #6
 80014a0:	f000 ff20 	bl	80022e4 <connect_xbt_pin>
        printf("connect_xbt_pin(6)\r\n");
 80014a4:	4865      	ldr	r0, [pc, #404]	@ (800163c <main_process_input+0x358>)
 80014a6:	f007 f913 	bl	80086d0 <puts>
        break;
 80014aa:	e11b      	b.n	80016e4 <main_process_input+0x400>
    case '7':
        if (launcher.tubeCount == '8'){
 80014ac:	4b64      	ldr	r3, [pc, #400]	@ (8001640 <main_process_input+0x35c>)
 80014ae:	785b      	ldrb	r3, [r3, #1]
 80014b0:	2b38      	cmp	r3, #56	@ 0x38
 80014b2:	d106      	bne.n	80014c2 <main_process_input+0x1de>
            connect_xbt_pin(7);
 80014b4:	2007      	movs	r0, #7
 80014b6:	f000 ff15 	bl	80022e4 <connect_xbt_pin>
            printf("connect_xbt_pin(7)\r\n");
 80014ba:	4862      	ldr	r0, [pc, #392]	@ (8001644 <main_process_input+0x360>)
 80014bc:	f007 f908 	bl	80086d0 <puts>
        } else {
        	printf("\r\n* ERROR: tube 7 not available *\r\n");
        }
        break;
 80014c0:	e110      	b.n	80016e4 <main_process_input+0x400>
        	printf("\r\n* ERROR: tube 7 not available *\r\n");
 80014c2:	4861      	ldr	r0, [pc, #388]	@ (8001648 <main_process_input+0x364>)
 80014c4:	f007 f904 	bl	80086d0 <puts>
        break;
 80014c8:	e10c      	b.n	80016e4 <main_process_input+0x400>
    case '8':
        if (launcher.tubeCount == '8'){
 80014ca:	4b5d      	ldr	r3, [pc, #372]	@ (8001640 <main_process_input+0x35c>)
 80014cc:	785b      	ldrb	r3, [r3, #1]
 80014ce:	2b38      	cmp	r3, #56	@ 0x38
 80014d0:	d106      	bne.n	80014e0 <main_process_input+0x1fc>
        	connect_xbt_pin(8);
 80014d2:	2008      	movs	r0, #8
 80014d4:	f000 ff06 	bl	80022e4 <connect_xbt_pin>
        	printf("connect_xbt_pin(8)\r\n");
 80014d8:	485c      	ldr	r0, [pc, #368]	@ (800164c <main_process_input+0x368>)
 80014da:	f007 f8f9 	bl	80086d0 <puts>
        } else {
        	printf("\r\n* ERROR: tube 8 not available *\r\n");
        }
        break;
 80014de:	e101      	b.n	80016e4 <main_process_input+0x400>
        	printf("\r\n* ERROR: tube 8 not available *\r\n");
 80014e0:	485b      	ldr	r0, [pc, #364]	@ (8001650 <main_process_input+0x36c>)
 80014e2:	f007 f8f5 	bl	80086d0 <puts>
        break;
 80014e6:	e0fd      	b.n	80016e4 <main_process_input+0x400>
        //EXTEND PINS
    case 'U':
    	printf("extend_pin(1)\r\n");
 80014e8:	485a      	ldr	r0, [pc, #360]	@ (8001654 <main_process_input+0x370>)
 80014ea:	f007 f8f1 	bl	80086d0 <puts>
    	extend_pin(1);
 80014ee:	2001      	movs	r0, #1
 80014f0:	f001 f81c 	bl	800252c <extend_pin>
        break;
 80014f4:	e0f6      	b.n	80016e4 <main_process_input+0x400>
    case 'V':
        printf("extend_pin(2)\r\n");
 80014f6:	4858      	ldr	r0, [pc, #352]	@ (8001658 <main_process_input+0x374>)
 80014f8:	f007 f8ea 	bl	80086d0 <puts>
        extend_pin(2);
 80014fc:	2002      	movs	r0, #2
 80014fe:	f001 f815 	bl	800252c <extend_pin>
        break;
 8001502:	e0ef      	b.n	80016e4 <main_process_input+0x400>
    case 'W':
        printf("extend_pin(3)\r\n");
 8001504:	4855      	ldr	r0, [pc, #340]	@ (800165c <main_process_input+0x378>)
 8001506:	f007 f8e3 	bl	80086d0 <puts>
        extend_pin(3);
 800150a:	2003      	movs	r0, #3
 800150c:	f001 f80e 	bl	800252c <extend_pin>
        break;
 8001510:	e0e8      	b.n	80016e4 <main_process_input+0x400>
    case 'X':
        printf("extend_pin(4)\r\n");
 8001512:	4853      	ldr	r0, [pc, #332]	@ (8001660 <main_process_input+0x37c>)
 8001514:	f007 f8dc 	bl	80086d0 <puts>
        extend_pin(4);
 8001518:	2004      	movs	r0, #4
 800151a:	f001 f807 	bl	800252c <extend_pin>
        break;
 800151e:	e0e1      	b.n	80016e4 <main_process_input+0x400>
    case 'Y':
        printf("extend_pin(5)\r\n");
 8001520:	4850      	ldr	r0, [pc, #320]	@ (8001664 <main_process_input+0x380>)
 8001522:	f007 f8d5 	bl	80086d0 <puts>
        extend_pin(5);
 8001526:	2005      	movs	r0, #5
 8001528:	f001 f800 	bl	800252c <extend_pin>
        break;
 800152c:	e0da      	b.n	80016e4 <main_process_input+0x400>
    case 'Z':
        printf("extend_pin(6)\r\n");
 800152e:	484e      	ldr	r0, [pc, #312]	@ (8001668 <main_process_input+0x384>)
 8001530:	f007 f8ce 	bl	80086d0 <puts>
        extend_pin(6);
 8001534:	2006      	movs	r0, #6
 8001536:	f000 fff9 	bl	800252c <extend_pin>
        break;
 800153a:	e0d3      	b.n	80016e4 <main_process_input+0x400>
    case 'S':
        if (launcher.tubeCount == '8'){
 800153c:	4b40      	ldr	r3, [pc, #256]	@ (8001640 <main_process_input+0x35c>)
 800153e:	785b      	ldrb	r3, [r3, #1]
 8001540:	2b38      	cmp	r3, #56	@ 0x38
 8001542:	d106      	bne.n	8001552 <main_process_input+0x26e>
        	printf("extend_pin(7)\r\n");
 8001544:	4849      	ldr	r0, [pc, #292]	@ (800166c <main_process_input+0x388>)
 8001546:	f007 f8c3 	bl	80086d0 <puts>
        	extend_pin(7);
 800154a:	2007      	movs	r0, #7
 800154c:	f000 ffee 	bl	800252c <extend_pin>
        } else {
        	printf("\r\n* ERROR: tube 7 not available *\r\n");
        }
        break;
 8001550:	e0c8      	b.n	80016e4 <main_process_input+0x400>
        	printf("\r\n* ERROR: tube 7 not available *\r\n");
 8001552:	483d      	ldr	r0, [pc, #244]	@ (8001648 <main_process_input+0x364>)
 8001554:	f007 f8bc 	bl	80086d0 <puts>
        break;
 8001558:	e0c4      	b.n	80016e4 <main_process_input+0x400>
    case 'T':
        if (launcher.tubeCount == '8'){
 800155a:	4b39      	ldr	r3, [pc, #228]	@ (8001640 <main_process_input+0x35c>)
 800155c:	785b      	ldrb	r3, [r3, #1]
 800155e:	2b38      	cmp	r3, #56	@ 0x38
 8001560:	d106      	bne.n	8001570 <main_process_input+0x28c>
        	printf("extend_pin(8)\r\n");
 8001562:	4843      	ldr	r0, [pc, #268]	@ (8001670 <main_process_input+0x38c>)
 8001564:	f007 f8b4 	bl	80086d0 <puts>
        	extend_pin(8);
 8001568:	2008      	movs	r0, #8
 800156a:	f000 ffdf 	bl	800252c <extend_pin>
        } else {
        	printf("\r\n* ERROR: tube 8 not available *\r\n");
        }
        break;
 800156e:	e0b9      	b.n	80016e4 <main_process_input+0x400>
        	printf("\r\n* ERROR: tube 8 not available *\r\n");
 8001570:	4837      	ldr	r0, [pc, #220]	@ (8001650 <main_process_input+0x36c>)
 8001572:	f007 f8ad 	bl	80086d0 <puts>
        break;
 8001576:	e0b5      	b.n	80016e4 <main_process_input+0x400>
        //RETRACT PINS
    case 'A':
    	printf("retract_pin(1)\r\n");
 8001578:	483e      	ldr	r0, [pc, #248]	@ (8001674 <main_process_input+0x390>)
 800157a:	f007 f8a9 	bl	80086d0 <puts>
    	retract_pin(1);
 800157e:	2001      	movs	r0, #1
 8001580:	f000 ffe2 	bl	8002548 <retract_pin>
        break;
 8001584:	e0ae      	b.n	80016e4 <main_process_input+0x400>
    case 'B':
        printf("retract_pin(2)\r\n");
 8001586:	483c      	ldr	r0, [pc, #240]	@ (8001678 <main_process_input+0x394>)
 8001588:	f007 f8a2 	bl	80086d0 <puts>
        retract_pin(2);
 800158c:	2002      	movs	r0, #2
 800158e:	f000 ffdb 	bl	8002548 <retract_pin>
        break;
 8001592:	e0a7      	b.n	80016e4 <main_process_input+0x400>
    case 'C':
        printf("retract_pin(3)\r\n");
 8001594:	4839      	ldr	r0, [pc, #228]	@ (800167c <main_process_input+0x398>)
 8001596:	f007 f89b 	bl	80086d0 <puts>
        retract_pin(3);
 800159a:	2003      	movs	r0, #3
 800159c:	f000 ffd4 	bl	8002548 <retract_pin>
        break;
 80015a0:	e0a0      	b.n	80016e4 <main_process_input+0x400>
    case 'D':
        printf("retract_pin(4)\r\n");
 80015a2:	4837      	ldr	r0, [pc, #220]	@ (8001680 <main_process_input+0x39c>)
 80015a4:	f007 f894 	bl	80086d0 <puts>
        retract_pin(4);
 80015a8:	2004      	movs	r0, #4
 80015aa:	f000 ffcd 	bl	8002548 <retract_pin>
        break;
 80015ae:	e099      	b.n	80016e4 <main_process_input+0x400>
    case 'E':
        printf("retract_pin(5)\r\n");
 80015b0:	4834      	ldr	r0, [pc, #208]	@ (8001684 <main_process_input+0x3a0>)
 80015b2:	f007 f88d 	bl	80086d0 <puts>
        retract_pin(5);
 80015b6:	2005      	movs	r0, #5
 80015b8:	f000 ffc6 	bl	8002548 <retract_pin>
        break;
 80015bc:	e092      	b.n	80016e4 <main_process_input+0x400>
    case 'F':
        printf("retract_pin(6)\r\n");
 80015be:	4832      	ldr	r0, [pc, #200]	@ (8001688 <main_process_input+0x3a4>)
 80015c0:	f007 f886 	bl	80086d0 <puts>
        retract_pin(6);
 80015c4:	2006      	movs	r0, #6
 80015c6:	f000 ffbf 	bl	8002548 <retract_pin>
        break;
 80015ca:	e08b      	b.n	80016e4 <main_process_input+0x400>
    case 'H':
        if (launcher.tubeCount == '8'){
 80015cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001640 <main_process_input+0x35c>)
 80015ce:	785b      	ldrb	r3, [r3, #1]
 80015d0:	2b38      	cmp	r3, #56	@ 0x38
 80015d2:	d106      	bne.n	80015e2 <main_process_input+0x2fe>
        	printf("retract_pin(7)\r\n");
 80015d4:	482d      	ldr	r0, [pc, #180]	@ (800168c <main_process_input+0x3a8>)
 80015d6:	f007 f87b 	bl	80086d0 <puts>
        	retract_pin(7);
 80015da:	2007      	movs	r0, #7
 80015dc:	f000 ffb4 	bl	8002548 <retract_pin>
        } else {
        	printf("* ERROR: tube 7 not available *\r\n");
        }
        break;
 80015e0:	e080      	b.n	80016e4 <main_process_input+0x400>
        	printf("* ERROR: tube 7 not available *\r\n");
 80015e2:	482b      	ldr	r0, [pc, #172]	@ (8001690 <main_process_input+0x3ac>)
 80015e4:	f007 f874 	bl	80086d0 <puts>
        break;
 80015e8:	e07c      	b.n	80016e4 <main_process_input+0x400>
    case 'I':
        if (launcher.tubeCount == '8'){
 80015ea:	4b15      	ldr	r3, [pc, #84]	@ (8001640 <main_process_input+0x35c>)
 80015ec:	785b      	ldrb	r3, [r3, #1]
 80015ee:	2b38      	cmp	r3, #56	@ 0x38
 80015f0:	d106      	bne.n	8001600 <main_process_input+0x31c>
        	printf("retract_pin(8)\r\n");
 80015f2:	4828      	ldr	r0, [pc, #160]	@ (8001694 <main_process_input+0x3b0>)
 80015f4:	f007 f86c 	bl	80086d0 <puts>
        	retract_pin(8);
 80015f8:	2008      	movs	r0, #8
 80015fa:	f000 ffa5 	bl	8002548 <retract_pin>
        } else {
        	printf("* ERROR: tube 8 not available *\r\n");
        }
        break;
 80015fe:	e071      	b.n	80016e4 <main_process_input+0x400>
        	printf("* ERROR: tube 8 not available *\r\n");
 8001600:	4825      	ldr	r0, [pc, #148]	@ (8001698 <main_process_input+0x3b4>)
 8001602:	f007 f865 	bl	80086d0 <puts>
        break;
 8001606:	e06d      	b.n	80016e4 <main_process_input+0x400>
    case 'K':
    	printf("calibrate_on()\r\n");
 8001608:	4824      	ldr	r0, [pc, #144]	@ (800169c <main_process_input+0x3b8>)
 800160a:	f007 f861 	bl	80086d0 <puts>
        calibrate_on();
 800160e:	f000 fe25 	bl	800225c <calibrate_on>
        break;
 8001612:	e067      	b.n	80016e4 <main_process_input+0x400>
    case 'R':
    	printf("reset_relay()\r\n");
 8001614:	4822      	ldr	r0, [pc, #136]	@ (80016a0 <main_process_input+0x3bc>)
 8001616:	f007 f85b 	bl	80086d0 <puts>
        reset_relay();
 800161a:	f000 fe37 	bl	800228c <reset_relay>
        break;
 800161e:	e061      	b.n	80016e4 <main_process_input+0x400>
 8001620:	08009558 	.word	0x08009558
 8001624:	08009578 	.word	0x08009578
 8001628:	080095b0 	.word	0x080095b0
 800162c:	080095c4 	.word	0x080095c4
 8001630:	080095d8 	.word	0x080095d8
 8001634:	080095ec 	.word	0x080095ec
 8001638:	08009600 	.word	0x08009600
 800163c:	08009614 	.word	0x08009614
 8001640:	20000000 	.word	0x20000000
 8001644:	08009628 	.word	0x08009628
 8001648:	0800963c 	.word	0x0800963c
 800164c:	08009660 	.word	0x08009660
 8001650:	08009674 	.word	0x08009674
 8001654:	08009698 	.word	0x08009698
 8001658:	080096a8 	.word	0x080096a8
 800165c:	080096b8 	.word	0x080096b8
 8001660:	080096c8 	.word	0x080096c8
 8001664:	080096d8 	.word	0x080096d8
 8001668:	080096e8 	.word	0x080096e8
 800166c:	080096f8 	.word	0x080096f8
 8001670:	08009708 	.word	0x08009708
 8001674:	08009718 	.word	0x08009718
 8001678:	08009728 	.word	0x08009728
 800167c:	08009738 	.word	0x08009738
 8001680:	08009748 	.word	0x08009748
 8001684:	08009758 	.word	0x08009758
 8001688:	08009768 	.word	0x08009768
 800168c:	08009778 	.word	0x08009778
 8001690:	08009788 	.word	0x08009788
 8001694:	080097ac 	.word	0x080097ac
 8001698:	080097bc 	.word	0x080097bc
 800169c:	080097e0 	.word	0x080097e0
 80016a0:	080097f0 	.word	0x080097f0
    case 'L':
    	printf("calibration_resistor()\r\n");
 80016a4:	4811      	ldr	r0, [pc, #68]	@ (80016ec <main_process_input+0x408>)
 80016a6:	f007 f813 	bl	80086d0 <puts>
        calibration_resistor();
 80016aa:	f000 fdbf 	bl	800222c <calibration_resistor>
        break;
 80016ae:	e019      	b.n	80016e4 <main_process_input+0x400>
    case 'G':
    	printf("unground_xbt()\r\n");
 80016b0:	480f      	ldr	r0, [pc, #60]	@ (80016f0 <main_process_input+0x40c>)
 80016b2:	f007 f80d 	bl	80086d0 <puts>
        unground_xbt();
 80016b6:	f000 fda1 	bl	80021fc <unground_xbt>
        break;
 80016ba:	e013      	b.n	80016e4 <main_process_input+0x400>
    case 'M':
        menu_main();
 80016bc:	f000 fb42 	bl	8001d44 <menu_main>
        break;
 80016c0:	e010      	b.n	80016e4 <main_process_input+0x400>
    case '~':
        menu_config();
 80016c2:	f000 fbdb 	bl	8001e7c <menu_config>
        activeMenu = configMenu; // set configuration menu flag
 80016c6:	4b0b      	ldr	r3, [pc, #44]	@ (80016f4 <main_process_input+0x410>)
 80016c8:	2201      	movs	r2, #1
 80016ca:	701a      	strb	r2, [r3, #0]
        break;
 80016cc:	e00a      	b.n	80016e4 <main_process_input+0x400>
    case 's':
        print_serial_number();
 80016ce:	f000 fca5 	bl	800201c <print_serial_number>
        printf("\r\n");
 80016d2:	4809      	ldr	r0, [pc, #36]	@ (80016f8 <main_process_input+0x414>)
 80016d4:	f006 fffc 	bl	80086d0 <puts>
        break;
 80016d8:	e004      	b.n	80016e4 <main_process_input+0x400>
    	// read input voltage on autolauncher
    	//analog_t vin = voltage_read(VOLTAGE_READ_SAMPLES);
    	//printf("[AD# %i] Vin= %i.%i V\r\n", vin.adcReading,(uint8_t)vin.realValue, (uint8_t)(vin.realValue * 10 - ((uint8_t)vin.realValue * 10)) );
    	break;
    default:
        printf("\r\n** Unrecognized command!!** \r\n");
 80016da:	4808      	ldr	r0, [pc, #32]	@ (80016fc <main_process_input+0x418>)
 80016dc:	f006 fff8 	bl	80086d0 <puts>
        break;
 80016e0:	e000      	b.n	80016e4 <main_process_input+0x400>
    	break;
 80016e2:	bf00      	nop
	}
}
 80016e4:	bf00      	nop
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	08009800 	.word	0x08009800
 80016f0:	08009818 	.word	0x08009818
 80016f4:	2000017f 	.word	0x2000017f
 80016f8:	08009828 	.word	0x08009828
 80016fc:	0800982c 	.word	0x0800982c

08001700 <config_process_input>:

/* Process char received while in configuration menu */
void config_process_input(char option){
 8001700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001702:	b0d7      	sub	sp, #348	@ 0x15c
 8001704:	af02      	add	r7, sp, #8
 8001706:	4602      	mov	r2, r0
 8001708:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800170c:	f2a3 1349 	subw	r3, r3, #329	@ 0x149
 8001710:	701a      	strb	r2, [r3, #0]
    switch (option) {
 8001712:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001716:	f2a3 1349 	subw	r3, r3, #329	@ 0x149
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	3b31      	subs	r3, #49	@ 0x31
 800171e:	2b23      	cmp	r3, #35	@ 0x23
 8001720:	f200 82e9 	bhi.w	8001cf6 <config_process_input+0x5f6>
 8001724:	a201      	add	r2, pc, #4	@ (adr r2, 800172c <config_process_input+0x2c>)
 8001726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800172a:	bf00      	nop
 800172c:	080017d5 	.word	0x080017d5
 8001730:	08001cf7 	.word	0x08001cf7
 8001734:	08001cf7 	.word	0x08001cf7
 8001738:	08001cf7 	.word	0x08001cf7
 800173c:	08001cf7 	.word	0x08001cf7
 8001740:	08001cf7 	.word	0x08001cf7
 8001744:	08001cf7 	.word	0x08001cf7
 8001748:	08001cf7 	.word	0x08001cf7
 800174c:	08001cf7 	.word	0x08001cf7
 8001750:	08001cf7 	.word	0x08001cf7
 8001754:	08001cf7 	.word	0x08001cf7
 8001758:	08001cf7 	.word	0x08001cf7
 800175c:	08001cf7 	.word	0x08001cf7
 8001760:	08001cf7 	.word	0x08001cf7
 8001764:	08001cf7 	.word	0x08001cf7
 8001768:	08001cf7 	.word	0x08001cf7
 800176c:	08001cf7 	.word	0x08001cf7
 8001770:	08001cf7 	.word	0x08001cf7
 8001774:	08001a41 	.word	0x08001a41
 8001778:	08001cf7 	.word	0x08001cf7
 800177c:	08001cf7 	.word	0x08001cf7
 8001780:	08001cf7 	.word	0x08001cf7
 8001784:	080019eb 	.word	0x080019eb
 8001788:	08001cf7 	.word	0x08001cf7
 800178c:	08001cf7 	.word	0x08001cf7
 8001790:	080019ab 	.word	0x080019ab
 8001794:	08001cf7 	.word	0x08001cf7
 8001798:	08001cf7 	.word	0x08001cf7
 800179c:	080017cf 	.word	0x080017cf
 80017a0:	080019cb 	.word	0x080019cb
 80017a4:	08001cf7 	.word	0x08001cf7
 80017a8:	08001cf7 	.word	0x08001cf7
 80017ac:	080017bd 	.word	0x080017bd
 80017b0:	08001cf7 	.word	0x08001cf7
 80017b4:	08001cf7 	.word	0x08001cf7
 80017b8:	08001c35 	.word	0x08001c35
        case 'Q':
            printf("\n\rLeaving Auto launcher configuration menu\n\r");
 80017bc:	488e      	ldr	r0, [pc, #568]	@ (80019f8 <config_process_input+0x2f8>)
 80017be:	f006 ff1f 	bl	8008600 <iprintf>
            activeMenu = mainMenu; // set active menu flag to main menu
 80017c2:	4b8e      	ldr	r3, [pc, #568]	@ (80019fc <config_process_input+0x2fc>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	701a      	strb	r2, [r3, #0]
            menu_main();
 80017c8:	f000 fabc 	bl	8001d44 <menu_main>
            break;
 80017cc:	e297      	b.n	8001cfe <config_process_input+0x5fe>
        case 'M':
            menu_config();
 80017ce:	f000 fb55 	bl	8001e7c <menu_config>
            break;
 80017d2:	e294      	b.n	8001cfe <config_process_input+0x5fe>
        case '1':
        	// get the autolauncher tube count
        	char tubes[1];
        	char tubePrompt[] = "\r\nEnter AL tube count [6] or [8]: ";
 80017d4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80017d8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80017dc:	4a88      	ldr	r2, [pc, #544]	@ (8001a00 <config_process_input+0x300>)
 80017de:	461c      	mov	r4, r3
 80017e0:	4615      	mov	r5, r2
 80017e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017ea:	682b      	ldr	r3, [r5, #0]
 80017ec:	461a      	mov	r2, r3
 80017ee:	8022      	strh	r2, [r4, #0]
 80017f0:	3402      	adds	r4, #2
 80017f2:	0c1b      	lsrs	r3, r3, #16
 80017f4:	7023      	strb	r3, [r4, #0]
        	char tubeError[] = "\r\nERROR: Enter 6 or 8 !\r\n";
 80017f6:	4b83      	ldr	r3, [pc, #524]	@ (8001a04 <config_process_input+0x304>)
 80017f8:	f507 7498 	add.w	r4, r7, #304	@ 0x130
 80017fc:	461d      	mov	r5, r3
 80017fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001800:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001802:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001806:	c403      	stmia	r4!, {r0, r1}
 8001808:	8022      	strh	r2, [r4, #0]
        	char tubeCheck[] = {'6','8'};
 800180a:	f643 0336 	movw	r3, #14390	@ 0x3836
 800180e:	f8a7 312c 	strh.w	r3, [r7, #300]	@ 0x12c
        	get_user_input(tubePrompt, tubeError, 1, tubeCheck, tubes);
 8001812:	f507 7296 	add.w	r2, r7, #300	@ 0x12c
 8001816:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 800181a:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 800181e:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 8001822:	9300      	str	r3, [sp, #0]
 8001824:	4613      	mov	r3, r2
 8001826:	2201      	movs	r2, #1
 8001828:	f000 fb8a 	bl	8001f40 <get_user_input>

            launcher.tubeCount = tubes[0];
 800182c:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8001830:	4b75      	ldr	r3, [pc, #468]	@ (8001a08 <config_process_input+0x308>)
 8001832:	705a      	strb	r2, [r3, #1]
            // get the autolauncher type, R regular or X extended, only for 8 tube AL
            if(launcher.tubeCount == '8'){
 8001834:	4b74      	ldr	r3, [pc, #464]	@ (8001a08 <config_process_input+0x308>)
 8001836:	785b      	ldrb	r3, [r3, #1]
 8001838:	2b38      	cmp	r3, #56	@ 0x38
 800183a:	d12f      	bne.n	800189c <config_process_input+0x19c>
            	char type[1];
            	char typePrompt[] = "Enter launcher type, [X] extended or [R] regular: ";
 800183c:	4b73      	ldr	r3, [pc, #460]	@ (8001a0c <config_process_input+0x30c>)
 800183e:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 8001842:	461d      	mov	r5, r3
 8001844:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001846:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001848:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800184a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800184c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800184e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001850:	682b      	ldr	r3, [r5, #0]
 8001852:	461a      	mov	r2, r3
 8001854:	8022      	strh	r2, [r4, #0]
 8001856:	3402      	adds	r4, #2
 8001858:	0c1b      	lsrs	r3, r3, #16
 800185a:	7023      	strb	r3, [r4, #0]
            	char typeError[] = "\r\nERROR: Enter X or R !\r\n";
 800185c:	4b6c      	ldr	r3, [pc, #432]	@ (8001a10 <config_process_input+0x310>)
 800185e:	f107 04a8 	add.w	r4, r7, #168	@ 0xa8
 8001862:	461d      	mov	r5, r3
 8001864:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001866:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001868:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800186c:	c403      	stmia	r4!, {r0, r1}
 800186e:	8022      	strh	r2, [r4, #0]
            	char typeCheck[] = {'R','X'};
 8001870:	f645 0352 	movw	r3, #22610	@ 0x5852
 8001874:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
            	get_user_input(typePrompt, typeError, 1, typeCheck, type);
 8001878:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 800187c:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8001880:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 8001884:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001888:	9300      	str	r3, [sp, #0]
 800188a:	4613      	mov	r3, r2
 800188c:	2201      	movs	r2, #1
 800188e:	f000 fb57 	bl	8001f40 <get_user_input>
            	launcher.type = type[0];
 8001892:	f897 20c4 	ldrb.w	r2, [r7, #196]	@ 0xc4
 8001896:	4b5c      	ldr	r3, [pc, #368]	@ (8001a08 <config_process_input+0x308>)
 8001898:	709a      	strb	r2, [r3, #2]
 800189a:	e002      	b.n	80018a2 <config_process_input+0x1a2>

            } else {
            	launcher.type = '?'; // if not 8 tubes, reset type to unknown
 800189c:	4b5a      	ldr	r3, [pc, #360]	@ (8001a08 <config_process_input+0x308>)
 800189e:	223f      	movs	r2, #63	@ 0x3f
 80018a0:	709a      	strb	r2, [r3, #2]
            }
            //launcher.serialNumber = 55;
        	char serial[2];
        	char serialPrompt[] = "Enter a two-digit autolauncher serial number [00-99]: ";
 80018a2:	4b5c      	ldr	r3, [pc, #368]	@ (8001a14 <config_process_input+0x314>)
 80018a4:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 80018a8:	461d      	mov	r5, r3
 80018aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018b6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80018ba:	6020      	str	r0, [r4, #0]
 80018bc:	3404      	adds	r4, #4
 80018be:	8021      	strh	r1, [r4, #0]
 80018c0:	3402      	adds	r4, #2
 80018c2:	0c0b      	lsrs	r3, r1, #16
 80018c4:	7023      	strb	r3, [r4, #0]
        	char serialError[] = "\r\nEnter only numbers!\r\n";
 80018c6:	4b54      	ldr	r3, [pc, #336]	@ (8001a18 <config_process_input+0x318>)
 80018c8:	f507 7488 	add.w	r4, r7, #272	@ 0x110
 80018cc:	461d      	mov	r5, r3
 80018ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018d2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80018d6:	e884 0003 	stmia.w	r4, {r0, r1}
        	char serialCheck[] = {'0','1','2','3','4','5','6','7','8','9'};
 80018da:	4a50      	ldr	r2, [pc, #320]	@ (8001a1c <config_process_input+0x31c>)
 80018dc:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80018e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80018e2:	c303      	stmia	r3!, {r0, r1}
 80018e4:	801a      	strh	r2, [r3, #0]
        	get_user_input(serialPrompt, serialError, 2, serialCheck, serial);
 80018e6:	f507 7282 	add.w	r2, r7, #260	@ 0x104
 80018ea:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80018ee:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 80018f2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	4613      	mov	r3, r2
 80018fa:	2202      	movs	r2, #2
 80018fc:	f000 fb20 	bl	8001f40 <get_user_input>
        	launcher.serialNumber = (uint8_t)(serial[0] - '0') * 10 + (serial[1] - '0'); // convert to number, subtract '0' (48 dec)
 8001900:	f897 3128 	ldrb.w	r3, [r7, #296]	@ 0x128
 8001904:	461a      	mov	r2, r3
 8001906:	0092      	lsls	r2, r2, #2
 8001908:	4413      	add	r3, r2
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	b2da      	uxtb	r2, r3
 800190e:	f897 3129 	ldrb.w	r3, [r7, #297]	@ 0x129
 8001912:	4413      	add	r3, r2
 8001914:	b2db      	uxtb	r3, r3
 8001916:	3b10      	subs	r3, #16
 8001918:	b2da      	uxtb	r2, r3
 800191a:	4b3b      	ldr	r3, [pc, #236]	@ (8001a08 <config_process_input+0x308>)
 800191c:	701a      	strb	r2, [r3, #0]
            eeprom.configured = '|';
 800191e:	4b40      	ldr	r3, [pc, #256]	@ (8001a20 <config_process_input+0x320>)
 8001920:	227c      	movs	r2, #124	@ 0x7c
 8001922:	715a      	strb	r2, [r3, #5]
            printf("\r\nTubes: %c | Type: %c | Serial: %i\r\n", launcher.tubeCount, launcher.type, launcher.serialNumber);
 8001924:	4b38      	ldr	r3, [pc, #224]	@ (8001a08 <config_process_input+0x308>)
 8001926:	785b      	ldrb	r3, [r3, #1]
 8001928:	4619      	mov	r1, r3
 800192a:	4b37      	ldr	r3, [pc, #220]	@ (8001a08 <config_process_input+0x308>)
 800192c:	789b      	ldrb	r3, [r3, #2]
 800192e:	461a      	mov	r2, r3
 8001930:	4b35      	ldr	r3, [pc, #212]	@ (8001a08 <config_process_input+0x308>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	483b      	ldr	r0, [pc, #236]	@ (8001a24 <config_process_input+0x324>)
 8001936:	f006 fe63 	bl	8008600 <iprintf>

            // store parameters in eeprom
            eeprom_write(AL_TUBECOUNT, launcher.tubeCount);
 800193a:	4b33      	ldr	r3, [pc, #204]	@ (8001a08 <config_process_input+0x308>)
 800193c:	785b      	ldrb	r3, [r3, #1]
 800193e:	4619      	mov	r1, r3
 8001940:	2000      	movs	r0, #0
 8001942:	f001 f97f 	bl	8002c44 <eeprom_write>
            eeprom_write(AL_TYPE, launcher.type);
 8001946:	4b30      	ldr	r3, [pc, #192]	@ (8001a08 <config_process_input+0x308>)
 8001948:	789b      	ldrb	r3, [r3, #2]
 800194a:	4619      	mov	r1, r3
 800194c:	2001      	movs	r0, #1
 800194e:	f001 f979 	bl	8002c44 <eeprom_write>
            eeprom_write(AL_SN, launcher.serialNumber);
 8001952:	4b2d      	ldr	r3, [pc, #180]	@ (8001a08 <config_process_input+0x308>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	4619      	mov	r1, r3
 8001958:	2002      	movs	r0, #2
 800195a:	f001 f973 	bl	8002c44 <eeprom_write>
            eeprom_write(AL_CONFIGED, eeprom.configured);
 800195e:	4b30      	ldr	r3, [pc, #192]	@ (8001a20 <config_process_input+0x320>)
 8001960:	795b      	ldrb	r3, [r3, #5]
 8001962:	4619      	mov	r1, r3
 8001964:	2003      	movs	r0, #3
 8001966:	f001 f96d 	bl	8002c44 <eeprom_write>
            printf("Settings saved!");
 800196a:	482f      	ldr	r0, [pc, #188]	@ (8001a28 <config_process_input+0x328>)
 800196c:	f006 fe48 	bl	8008600 <iprintf>
            printf("\r\nNew autolauncher configuration: Tubes: %c | Type: %c | Serial: %i | configed: %c\r\n", eeprom_read(AL_TUBECOUNT), eeprom_read(AL_TYPE), eeprom_read(AL_SN), eeprom_read(AL_CONFIGED));
 8001970:	2000      	movs	r0, #0
 8001972:	f001 f999 	bl	8002ca8 <eeprom_read>
 8001976:	4603      	mov	r3, r0
 8001978:	461c      	mov	r4, r3
 800197a:	2001      	movs	r0, #1
 800197c:	f001 f994 	bl	8002ca8 <eeprom_read>
 8001980:	4603      	mov	r3, r0
 8001982:	461d      	mov	r5, r3
 8001984:	2002      	movs	r0, #2
 8001986:	f001 f98f 	bl	8002ca8 <eeprom_read>
 800198a:	4603      	mov	r3, r0
 800198c:	461e      	mov	r6, r3
 800198e:	2003      	movs	r0, #3
 8001990:	f001 f98a 	bl	8002ca8 <eeprom_read>
 8001994:	4603      	mov	r3, r0
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	4633      	mov	r3, r6
 800199a:	462a      	mov	r2, r5
 800199c:	4621      	mov	r1, r4
 800199e:	4823      	ldr	r0, [pc, #140]	@ (8001a2c <config_process_input+0x32c>)
 80019a0:	f006 fe2e 	bl	8008600 <iprintf>

            menu_config();
 80019a4:	f000 fa6a 	bl	8001e7c <menu_config>
            break;
 80019a8:	e1a9      	b.n	8001cfe <config_process_input+0x5fe>
        case 'J':
        	printf("extend_all_pins()\r\n");
 80019aa:	4821      	ldr	r0, [pc, #132]	@ (8001a30 <config_process_input+0x330>)
 80019ac:	f006 fe90 	bl	80086d0 <puts>
        	if(launcher.tubeCount = '6')
 80019b0:	4b15      	ldr	r3, [pc, #84]	@ (8001a08 <config_process_input+0x308>)
 80019b2:	2236      	movs	r2, #54	@ 0x36
 80019b4:	705a      	strb	r2, [r3, #1]
        		extend_all_pins(6);
 80019b6:	2006      	movs	r0, #6
 80019b8:	f000 fd74 	bl	80024a4 <extend_all_pins>
        	if(launcher.tubeCount = '8')
 80019bc:	4b12      	ldr	r3, [pc, #72]	@ (8001a08 <config_process_input+0x308>)
 80019be:	2238      	movs	r2, #56	@ 0x38
 80019c0:	705a      	strb	r2, [r3, #1]
        		extend_all_pins(8);
 80019c2:	2008      	movs	r0, #8
 80019c4:	f000 fd6e 	bl	80024a4 <extend_all_pins>
            break;
 80019c8:	e199      	b.n	8001cfe <config_process_input+0x5fe>
        case 'N':
        	printf("retract_all_pins()\r\n");
 80019ca:	481a      	ldr	r0, [pc, #104]	@ (8001a34 <config_process_input+0x334>)
 80019cc:	f006 fe80 	bl	80086d0 <puts>
        	if(launcher.tubeCount = '6')
 80019d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001a08 <config_process_input+0x308>)
 80019d2:	2236      	movs	r2, #54	@ 0x36
 80019d4:	705a      	strb	r2, [r3, #1]
        		retract_all_pins(6);
 80019d6:	2006      	movs	r0, #6
 80019d8:	f000 fd86 	bl	80024e8 <retract_all_pins>
        	if(launcher.tubeCount = '8')
 80019dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001a08 <config_process_input+0x308>)
 80019de:	2238      	movs	r2, #56	@ 0x38
 80019e0:	705a      	strb	r2, [r3, #1]
        		retract_all_pins(8);
 80019e2:	2008      	movs	r0, #8
 80019e4:	f000 fd80 	bl	80024e8 <retract_all_pins>
            break;
 80019e8:	e189      	b.n	8001cfe <config_process_input+0x5fe>
        case 'G':
            printf("\n\rSend the \"@\" symbol repeatedly to exit grease pins mode\r\n");
 80019ea:	4813      	ldr	r0, [pc, #76]	@ (8001a38 <config_process_input+0x338>)
 80019ec:	f006 fe70 	bl	80086d0 <puts>
            printf("grease_pins();");
 80019f0:	4812      	ldr	r0, [pc, #72]	@ (8001a3c <config_process_input+0x33c>)
 80019f2:	f006 fe05 	bl	8008600 <iprintf>
            //grease_pins();
            break;
 80019f6:	e182      	b.n	8001cfe <config_process_input+0x5fe>
 80019f8:	0800984c 	.word	0x0800984c
 80019fc:	2000017f 	.word	0x2000017f
 8001a00:	08009a18 	.word	0x08009a18
 8001a04:	08009a3c 	.word	0x08009a3c
 8001a08:	20000000 	.word	0x20000000
 8001a0c:	08009a58 	.word	0x08009a58
 8001a10:	08009a8c 	.word	0x08009a8c
 8001a14:	08009aa8 	.word	0x08009aa8
 8001a18:	08009ae0 	.word	0x08009ae0
 8001a1c:	08009af8 	.word	0x08009af8
 8001a20:	20000004 	.word	0x20000004
 8001a24:	0800987c 	.word	0x0800987c
 8001a28:	080098a4 	.word	0x080098a4
 8001a2c:	080098b4 	.word	0x080098b4
 8001a30:	0800990c 	.word	0x0800990c
 8001a34:	08009920 	.word	0x08009920
 8001a38:	08009934 	.word	0x08009934
 8001a3c:	08009970 	.word	0x08009970
        case 'C':
        	uint8_t memStart, memEnd;
        	eeprom_print_map(); // print memory map
 8001a40:	f001 f9a0 	bl	8002d84 <eeprom_print_map>
        	// get the memory range to clear - start
        	uint8_t validMemory = 0; // valid memory value flag
 8001a44:	2300      	movs	r3, #0
 8001a46:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
			char mem[3]; // buffer to store digits
			char mStartPrompt[] = "\r\nEnter 3 digit START memory address [000-127]: ";
 8001a4a:	4baf      	ldr	r3, [pc, #700]	@ (8001d08 <config_process_input+0x608>)
 8001a4c:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 8001a50:	461d      	mov	r5, r3
 8001a52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a5e:	682b      	ldr	r3, [r5, #0]
 8001a60:	7023      	strb	r3, [r4, #0]
			char mEndPrompt[] = "\r\nEnter 3 digit END memory address [000-127]: ";
 8001a62:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001a66:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001a6a:	4aa8      	ldr	r2, [pc, #672]	@ (8001d0c <config_process_input+0x60c>)
 8001a6c:	461c      	mov	r4, r3
 8001a6e:	4615      	mov	r5, r2
 8001a70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a78:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001a7c:	c407      	stmia	r4!, {r0, r1, r2}
 8001a7e:	8023      	strh	r3, [r4, #0]
 8001a80:	3402      	adds	r4, #2
 8001a82:	0c1b      	lsrs	r3, r3, #16
 8001a84:	7023      	strb	r3, [r4, #0]
			char memError[] = "\r\n* ERROR: enter valid numbers *\r\n";
 8001a86:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001a8a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001a8e:	4aa0      	ldr	r2, [pc, #640]	@ (8001d10 <config_process_input+0x610>)
 8001a90:	461c      	mov	r4, r3
 8001a92:	4615      	mov	r5, r2
 8001a94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a9c:	682b      	ldr	r3, [r5, #0]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	8022      	strh	r2, [r4, #0]
 8001aa2:	3402      	adds	r4, #2
 8001aa4:	0c1b      	lsrs	r3, r3, #16
 8001aa6:	7023      	strb	r3, [r4, #0]
			char memCheck[] = {'0','1','2','3','4','5','6','7','8','9'};
 8001aa8:	4a9a      	ldr	r2, [pc, #616]	@ (8001d14 <config_process_input+0x614>)
 8001aaa:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001aae:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ab0:	c303      	stmia	r3!, {r0, r1}
 8001ab2:	801a      	strh	r2, [r3, #0]
			// get start address
        	do{
				get_user_input(mStartPrompt, memError, 3, memCheck, mem);
 8001ab4:	f107 02f4 	add.w	r2, r7, #244	@ 0xf4
 8001ab8:	f107 0108 	add.w	r1, r7, #8
 8001abc:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 8001ac0:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	2203      	movs	r2, #3
 8001aca:	f000 fa39 	bl	8001f40 <get_user_input>
				memStart = (uint8_t)(mem[0] - '0') * 100 + (mem[1] - '0') * 10 + (mem[2] - '0'); // convert to number, subtract '0' (48 dec)
 8001ace:	f897 3100 	ldrb.w	r3, [r7, #256]	@ 0x100
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	0092      	lsls	r2, r2, #2
 8001ad6:	4413      	add	r3, r2
 8001ad8:	461a      	mov	r2, r3
 8001ada:	0091      	lsls	r1, r2, #2
 8001adc:	461a      	mov	r2, r3
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4413      	add	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	b2da      	uxtb	r2, r3
 8001ae6:	f897 3101 	ldrb.w	r3, [r7, #257]	@ 0x101
 8001aea:	3b30      	subs	r3, #48	@ 0x30
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	4619      	mov	r1, r3
 8001af0:	0089      	lsls	r1, r1, #2
 8001af2:	440b      	add	r3, r1
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	4413      	add	r3, r2
 8001afa:	b2da      	uxtb	r2, r3
 8001afc:	f897 3102 	ldrb.w	r3, [r7, #258]	@ 0x102
 8001b00:	4413      	add	r3, r2
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	3310      	adds	r3, #16
 8001b06:	f887 314e 	strb.w	r3, [r7, #334]	@ 0x14e
				if((memStart >= 0) && (memStart <= 127)){
 8001b0a:	f997 314e 	ldrsb.w	r3, [r7, #334]	@ 0x14e
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	db03      	blt.n	8001b1a <config_process_input+0x41a>
					validMemory = 1;
 8001b12:	2301      	movs	r3, #1
 8001b14:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
 8001b18:	e002      	b.n	8001b20 <config_process_input+0x420>
				} else {
					printf("Memory out of range!\r\n");
 8001b1a:	487f      	ldr	r0, [pc, #508]	@ (8001d18 <config_process_input+0x618>)
 8001b1c:	f006 fdd8 	bl	80086d0 <puts>
				}
        	} while ( validMemory == 0 );
 8001b20:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0c5      	beq.n	8001ab4 <config_process_input+0x3b4>
        	// get end address
        	validMemory = 0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
        	do{
				mem[0] = '\0', mem[1] = '\0' , mem[2] = '\0';
 8001b2e:	2300      	movs	r3, #0
 8001b30:	f887 3100 	strb.w	r3, [r7, #256]	@ 0x100
 8001b34:	2300      	movs	r3, #0
 8001b36:	f887 3101 	strb.w	r3, [r7, #257]	@ 0x101
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102

				get_user_input(mEndPrompt, memError, 3, memCheck, mem);
 8001b40:	f107 02f4 	add.w	r2, r7, #244	@ 0xf4
 8001b44:	f107 0108 	add.w	r1, r7, #8
 8001b48:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001b4c:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8001b50:	9300      	str	r3, [sp, #0]
 8001b52:	4613      	mov	r3, r2
 8001b54:	2203      	movs	r2, #3
 8001b56:	f000 f9f3 	bl	8001f40 <get_user_input>
				memEnd = (uint8_t)(mem[0] - '0') * 100 + (mem[1] - '0') * 10 + (mem[2] - '0'); // convert to number, subtract '0' (48 dec)
 8001b5a:	f897 3100 	ldrb.w	r3, [r7, #256]	@ 0x100
 8001b5e:	461a      	mov	r2, r3
 8001b60:	0092      	lsls	r2, r2, #2
 8001b62:	4413      	add	r3, r2
 8001b64:	461a      	mov	r2, r3
 8001b66:	0091      	lsls	r1, r2, #2
 8001b68:	461a      	mov	r2, r3
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4413      	add	r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	f897 3101 	ldrb.w	r3, [r7, #257]	@ 0x101
 8001b76:	3b30      	subs	r3, #48	@ 0x30
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	0089      	lsls	r1, r1, #2
 8001b7e:	440b      	add	r3, r1
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	4413      	add	r3, r2
 8001b86:	b2da      	uxtb	r2, r3
 8001b88:	f897 3102 	ldrb.w	r3, [r7, #258]	@ 0x102
 8001b8c:	4413      	add	r3, r2
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	3310      	adds	r3, #16
 8001b92:	f887 314d 	strb.w	r3, [r7, #333]	@ 0x14d
				if((memEnd >= 0) && (memEnd <= 127)){
 8001b96:	f997 314d 	ldrsb.w	r3, [r7, #333]	@ 0x14d
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	db03      	blt.n	8001ba6 <config_process_input+0x4a6>
					validMemory = 1;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
 8001ba4:	e002      	b.n	8001bac <config_process_input+0x4ac>
				} else {
					printf("Memory out of range!\r\n");
 8001ba6:	485c      	ldr	r0, [pc, #368]	@ (8001d18 <config_process_input+0x618>)
 8001ba8:	f006 fd92 	bl	80086d0 <puts>
				}
        	} while ( validMemory == 0 );
 8001bac:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d0bc      	beq.n	8001b2e <config_process_input+0x42e>
        	printf("%i blocks cleared\r\n", eeprom_clear(memStart, memEnd));
 8001bb4:	f897 214d 	ldrb.w	r2, [r7, #333]	@ 0x14d
 8001bb8:	f897 314e 	ldrb.w	r3, [r7, #334]	@ 0x14e
 8001bbc:	4611      	mov	r1, r2
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f001 f8ae 	bl	8002d20 <eeprom_clear>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4854      	ldr	r0, [pc, #336]	@ (8001d1c <config_process_input+0x61c>)
 8001bca:	f006 fd19 	bl	8008600 <iprintf>
        	// update variables with new stored values
    		launcher.tubeCount = eeprom_read(AL_TUBECOUNT);
 8001bce:	2000      	movs	r0, #0
 8001bd0:	f001 f86a 	bl	8002ca8 <eeprom_read>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	4b51      	ldr	r3, [pc, #324]	@ (8001d20 <config_process_input+0x620>)
 8001bda:	705a      	strb	r2, [r3, #1]
    		launcher.type = eeprom_read(AL_TYPE);
 8001bdc:	2001      	movs	r0, #1
 8001bde:	f001 f863 	bl	8002ca8 <eeprom_read>
 8001be2:	4603      	mov	r3, r0
 8001be4:	461a      	mov	r2, r3
 8001be6:	4b4e      	ldr	r3, [pc, #312]	@ (8001d20 <config_process_input+0x620>)
 8001be8:	709a      	strb	r2, [r3, #2]
    		launcher.serialNumber = eeprom_read(AL_SN);
 8001bea:	2002      	movs	r0, #2
 8001bec:	f001 f85c 	bl	8002ca8 <eeprom_read>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	4b4a      	ldr	r3, [pc, #296]	@ (8001d20 <config_process_input+0x620>)
 8001bf6:	701a      	strb	r2, [r3, #0]
    		eeprom.configured = eeprom_read(AL_CONFIGED);
 8001bf8:	2003      	movs	r0, #3
 8001bfa:	f001 f855 	bl	8002ca8 <eeprom_read>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	461a      	mov	r2, r3
 8001c02:	4b48      	ldr	r3, [pc, #288]	@ (8001d24 <config_process_input+0x624>)
 8001c04:	715a      	strb	r2, [r3, #5]
    		motor.runTime = eeprom_read_uint32(M_RUNTIME);
 8001c06:	2008      	movs	r0, #8
 8001c08:	f001 f916 	bl	8002e38 <eeprom_read_uint32>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	4a46      	ldr	r2, [pc, #280]	@ (8001d28 <config_process_input+0x628>)
 8001c10:	6013      	str	r3, [r2, #0]
    		printf("\r\nTubes: %c | Type: %c | Serial: %i | Runtime: %i\r\n", launcher.tubeCount, launcher.type, launcher.serialNumber, (int)motor.runTime);
 8001c12:	4b43      	ldr	r3, [pc, #268]	@ (8001d20 <config_process_input+0x620>)
 8001c14:	785b      	ldrb	r3, [r3, #1]
 8001c16:	4619      	mov	r1, r3
 8001c18:	4b41      	ldr	r3, [pc, #260]	@ (8001d20 <config_process_input+0x620>)
 8001c1a:	789b      	ldrb	r3, [r3, #2]
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	4b40      	ldr	r3, [pc, #256]	@ (8001d20 <config_process_input+0x620>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	4b40      	ldr	r3, [pc, #256]	@ (8001d28 <config_process_input+0x628>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	9300      	str	r3, [sp, #0]
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	483f      	ldr	r0, [pc, #252]	@ (8001d2c <config_process_input+0x62c>)
 8001c2e:	f006 fce7 	bl	8008600 <iprintf>

        	break;
 8001c32:	e064      	b.n	8001cfe <config_process_input+0x5fe>
        case 'T':
        	char mot[5];
        	char motorPrompt[] = "Enter motor runtime (5-digit number) in milliseconds [02000-15000]: ";
 8001c34:	4a3e      	ldr	r2, [pc, #248]	@ (8001d30 <config_process_input+0x630>)
 8001c36:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001c3a:	4611      	mov	r1, r2
 8001c3c:	2245      	movs	r2, #69	@ 0x45
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f006 ff55 	bl	8008aee <memcpy>
        	char motorError[] = "\r\nEnter only numbers!\r\n";
 8001c44:	4b3b      	ldr	r3, [pc, #236]	@ (8001d34 <config_process_input+0x634>)
 8001c46:	f107 04d4 	add.w	r4, r7, #212	@ 0xd4
 8001c4a:	461d      	mov	r5, r3
 8001c4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c50:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c54:	e884 0003 	stmia.w	r4, {r0, r1}
        	char motorCheck[] = {'0','1','2','3','4','5','6','7','8','9'};
 8001c58:	4a2e      	ldr	r2, [pc, #184]	@ (8001d14 <config_process_input+0x614>)
 8001c5a:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8001c5e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c60:	c303      	stmia	r3!, {r0, r1}
 8001c62:	801a      	strh	r2, [r3, #0]
        	get_user_input(motorPrompt, motorError, 5, motorCheck, mot);
 8001c64:	f107 02c8 	add.w	r2, r7, #200	@ 0xc8
 8001c68:	f107 01d4 	add.w	r1, r7, #212	@ 0xd4
 8001c6c:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 8001c70:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001c74:	9300      	str	r3, [sp, #0]
 8001c76:	4613      	mov	r3, r2
 8001c78:	2205      	movs	r2, #5
 8001c7a:	f000 f961 	bl	8001f40 <get_user_input>
        	motor.runTime = (uint32_t)(mot[0] - '0') * 10000 + (mot[1] - '0') * 1000 + (mot[2] - '0') * 100 + (mot[3] - '0') * 10 + (mot[4] - '0');
 8001c7e:	f897 30ec 	ldrb.w	r3, [r7, #236]	@ 0xec
 8001c82:	3b30      	subs	r3, #48	@ 0x30
 8001c84:	461a      	mov	r2, r3
 8001c86:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001c8a:	fb02 f303 	mul.w	r3, r2, r3
 8001c8e:	f897 20ed 	ldrb.w	r2, [r7, #237]	@ 0xed
 8001c92:	3a30      	subs	r2, #48	@ 0x30
 8001c94:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001c98:	fb01 f202 	mul.w	r2, r1, r2
 8001c9c:	1899      	adds	r1, r3, r2
 8001c9e:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 8001ca2:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	4413      	add	r3, r2
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f897 30ee 	ldrb.w	r3, [r7, #238]	@ 0xee
 8001cb4:	3b30      	subs	r3, #48	@ 0x30
 8001cb6:	2264      	movs	r2, #100	@ 0x64
 8001cb8:	fb02 f303 	mul.w	r3, r2, r3
 8001cbc:	4403      	add	r3, r0
 8001cbe:	440b      	add	r3, r1
 8001cc0:	f897 20f0 	ldrb.w	r2, [r7, #240]	@ 0xf0
 8001cc4:	4413      	add	r3, r2
 8001cc6:	3b30      	subs	r3, #48	@ 0x30
 8001cc8:	4a17      	ldr	r2, [pc, #92]	@ (8001d28 <config_process_input+0x628>)
 8001cca:	6013      	str	r3, [r2, #0]

    		printf("Motor ON time: %i ms\r\n", (int)motor.runTime);
 8001ccc:	4b16      	ldr	r3, [pc, #88]	@ (8001d28 <config_process_input+0x628>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4819      	ldr	r0, [pc, #100]	@ (8001d38 <config_process_input+0x638>)
 8001cd4:	f006 fc94 	bl	8008600 <iprintf>
    		eeprom_write_uint32(M_RUNTIME, motor.runTime);
 8001cd8:	4b13      	ldr	r3, [pc, #76]	@ (8001d28 <config_process_input+0x628>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4619      	mov	r1, r3
 8001cde:	2008      	movs	r0, #8
 8001ce0:	f001 f87a 	bl	8002dd8 <eeprom_write_uint32>
    		printf("Setting saved! Runtime: %i\r\n\r\n", (int)eeprom_read_uint32(M_RUNTIME));
 8001ce4:	2008      	movs	r0, #8
 8001ce6:	f001 f8a7 	bl	8002e38 <eeprom_read_uint32>
 8001cea:	4603      	mov	r3, r0
 8001cec:	4619      	mov	r1, r3
 8001cee:	4813      	ldr	r0, [pc, #76]	@ (8001d3c <config_process_input+0x63c>)
 8001cf0:	f006 fc86 	bl	8008600 <iprintf>

        	break;
 8001cf4:	e003      	b.n	8001cfe <config_process_input+0x5fe>
        default:
        	printf("\r\n** Unrecognized command!!** \r\n");
 8001cf6:	4812      	ldr	r0, [pc, #72]	@ (8001d40 <config_process_input+0x640>)
 8001cf8:	f006 fcea 	bl	80086d0 <puts>
            break;
 8001cfc:	bf00      	nop
    }
}
 8001cfe:	bf00      	nop
 8001d00:	f507 77aa 	add.w	r7, r7, #340	@ 0x154
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d08:	08009b04 	.word	0x08009b04
 8001d0c:	08009b38 	.word	0x08009b38
 8001d10:	08009b68 	.word	0x08009b68
 8001d14:	08009af8 	.word	0x08009af8
 8001d18:	08009980 	.word	0x08009980
 8001d1c:	08009998 	.word	0x08009998
 8001d20:	20000000 	.word	0x20000000
 8001d24:	20000004 	.word	0x20000004
 8001d28:	2000000c 	.word	0x2000000c
 8001d2c:	080099ac 	.word	0x080099ac
 8001d30:	08009b8c 	.word	0x08009b8c
 8001d34:	08009ae0 	.word	0x08009ae0
 8001d38:	080099e0 	.word	0x080099e0
 8001d3c:	080099f8 	.word	0x080099f8
 8001d40:	0800982c 	.word	0x0800982c

08001d44 <menu_main>:


void menu_main(void) {
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
    printf("\r\n\n\r");
 8001d48:	4832      	ldr	r0, [pc, #200]	@ (8001e14 <menu_main+0xd0>)
 8001d4a:	f006 fc59 	bl	8008600 <iprintf>
    printf("=========================================\n\r");
 8001d4e:	4832      	ldr	r0, [pc, #200]	@ (8001e18 <menu_main+0xd4>)
 8001d50:	f006 fc56 	bl	8008600 <iprintf>
    printf("|  AOML auto launcher board version 3.0 |\n\r");
 8001d54:	4831      	ldr	r0, [pc, #196]	@ (8001e1c <menu_main+0xd8>)
 8001d56:	f006 fc53 	bl	8008600 <iprintf>
    printf("|  Firmware version 2024.mm.dd.hhmm     |\n\r");
 8001d5a:	4831      	ldr	r0, [pc, #196]	@ (8001e20 <menu_main+0xdc>)
 8001d5c:	f006 fc50 	bl	8008600 <iprintf>
    printf("=========================================\n\r");
 8001d60:	482d      	ldr	r0, [pc, #180]	@ (8001e18 <menu_main+0xd4>)
 8001d62:	f006 fc4d 	bl	8008600 <iprintf>
    printf("|    Model #ALV3.0      S/N ");
 8001d66:	482f      	ldr	r0, [pc, #188]	@ (8001e24 <menu_main+0xe0>)
 8001d68:	f006 fc4a 	bl	8008600 <iprintf>
    print_serial_number();
 8001d6c:	f000 f956 	bl	800201c <print_serial_number>
    printf("       |\n\r");
 8001d70:	482d      	ldr	r0, [pc, #180]	@ (8001e28 <menu_main+0xe4>)
 8001d72:	f006 fc45 	bl	8008600 <iprintf>
    printf("=========================================\n\r");
 8001d76:	4828      	ldr	r0, [pc, #160]	@ (8001e18 <menu_main+0xd4>)
 8001d78:	f006 fc42 	bl	8008600 <iprintf>
    printf("|               COMMANDS                |\n\r");
 8001d7c:	482b      	ldr	r0, [pc, #172]	@ (8001e2c <menu_main+0xe8>)
 8001d7e:	f006 fc3f 	bl	8008600 <iprintf>
    if (eeprom.configured != '|') {
 8001d82:	4b2b      	ldr	r3, [pc, #172]	@ (8001e30 <menu_main+0xec>)
 8001d84:	795b      	ldrb	r3, [r3, #5]
 8001d86:	2b7c      	cmp	r3, #124	@ 0x7c
 8001d88:	d002      	beq.n	8001d90 <menu_main+0x4c>
        printf("| ERROR, NO SERIAL NUMBER ASSIGNED  |\n\r");
 8001d8a:	482a      	ldr	r0, [pc, #168]	@ (8001e34 <menu_main+0xf0>)
 8001d8c:	f006 fc38 	bl	8008600 <iprintf>
    }
    printf("=========================================\n\r");
 8001d90:	4821      	ldr	r0, [pc, #132]	@ (8001e18 <menu_main+0xd4>)
 8001d92:	f006 fc35 	bl	8008600 <iprintf>
    printf("| Connect  cal Sim BT  0                |\n\r");
 8001d96:	4828      	ldr	r0, [pc, #160]	@ (8001e38 <menu_main+0xf4>)
 8001d98:	f006 fc32 	bl	8008600 <iprintf>
    if (launcher.tubeCount == '6') {
 8001d9c:	4b27      	ldr	r3, [pc, #156]	@ (8001e3c <menu_main+0xf8>)
 8001d9e:	785b      	ldrb	r3, [r3, #1]
 8001da0:	2b36      	cmp	r3, #54	@ 0x36
 8001da2:	d109      	bne.n	8001db8 <menu_main+0x74>
        printf("| Connect  XBT 1-6     1,2,3,4,5,6      |\n\r");
 8001da4:	4826      	ldr	r0, [pc, #152]	@ (8001e40 <menu_main+0xfc>)
 8001da6:	f006 fc2b 	bl	8008600 <iprintf>
        printf("| Extend   Pin 1-6     U,V,W,X,Y,Z      |\n\r");
 8001daa:	4826      	ldr	r0, [pc, #152]	@ (8001e44 <menu_main+0x100>)
 8001dac:	f006 fc28 	bl	8008600 <iprintf>
        printf("| Retract  Pin 1-6     A,B,C,D,E,F      |\n\r");
 8001db0:	4825      	ldr	r0, [pc, #148]	@ (8001e48 <menu_main+0x104>)
 8001db2:	f006 fc25 	bl	8008600 <iprintf>
 8001db6:	e010      	b.n	8001dda <menu_main+0x96>
    } else if (launcher.tubeCount == '8') {
 8001db8:	4b20      	ldr	r3, [pc, #128]	@ (8001e3c <menu_main+0xf8>)
 8001dba:	785b      	ldrb	r3, [r3, #1]
 8001dbc:	2b38      	cmp	r3, #56	@ 0x38
 8001dbe:	d109      	bne.n	8001dd4 <menu_main+0x90>

        printf("| Connect  XBT 1-8     1,2,3,4,5,6,7,8  |\n\r");
 8001dc0:	4822      	ldr	r0, [pc, #136]	@ (8001e4c <menu_main+0x108>)
 8001dc2:	f006 fc1d 	bl	8008600 <iprintf>
        printf("| Extend   Pin 1-8     U,V,W,X,Y,Z,S,T  |\n\r");
 8001dc6:	4822      	ldr	r0, [pc, #136]	@ (8001e50 <menu_main+0x10c>)
 8001dc8:	f006 fc1a 	bl	8008600 <iprintf>
        printf("| Retract  Pin 1-8     A,B,C,D,E,F,H,I  |\n\r");
 8001dcc:	4821      	ldr	r0, [pc, #132]	@ (8001e54 <menu_main+0x110>)
 8001dce:	f006 fc17 	bl	8008600 <iprintf>
 8001dd2:	e002      	b.n	8001dda <menu_main+0x96>
    } else {
    	printf("| ERROR, NO TUBE COUNT!!     	        |\n\r");
 8001dd4:	4820      	ldr	r0, [pc, #128]	@ (8001e58 <menu_main+0x114>)
 8001dd6:	f006 fc13 	bl	8008600 <iprintf>
    }
    printf("| Unground XBT         G                |\n\r");
 8001dda:	4820      	ldr	r0, [pc, #128]	@ (8001e5c <menu_main+0x118>)
 8001ddc:	f006 fc10 	bl	8008600 <iprintf>
    printf("| Calibrate On         K                |\n\r");
 8001de0:	481f      	ldr	r0, [pc, #124]	@ (8001e60 <menu_main+0x11c>)
 8001de2:	f006 fc0d 	bl	8008600 <iprintf>
    printf("| Cal Resistor         L                |\n\r");
 8001de6:	481f      	ldr	r0, [pc, #124]	@ (8001e64 <menu_main+0x120>)
 8001de8:	f006 fc0a 	bl	8008600 <iprintf>
    printf("| Reset Relays         R                |\n\r");
 8001dec:	481e      	ldr	r0, [pc, #120]	@ (8001e68 <menu_main+0x124>)
 8001dee:	f006 fc07 	bl	8008600 <iprintf>
    printf("| Print Serial Number  s                |\n\r");
 8001df2:	481e      	ldr	r0, [pc, #120]	@ (8001e6c <menu_main+0x128>)
 8001df4:	f006 fc04 	bl	8008600 <iprintf>
    printf("| This Menu            M                |\n\r");
 8001df8:	481d      	ldr	r0, [pc, #116]	@ (8001e70 <menu_main+0x12c>)
 8001dfa:	f006 fc01 	bl	8008600 <iprintf>
    printf("| Read Voltage         P                |\n\r");
 8001dfe:	481d      	ldr	r0, [pc, #116]	@ (8001e74 <menu_main+0x130>)
 8001e00:	f006 fbfe 	bl	8008600 <iprintf>
    printf("=========================================\n\r");
 8001e04:	4804      	ldr	r0, [pc, #16]	@ (8001e18 <menu_main+0xd4>)
 8001e06:	f006 fbfb 	bl	8008600 <iprintf>
    printf("\r\n");
 8001e0a:	481b      	ldr	r0, [pc, #108]	@ (8001e78 <menu_main+0x134>)
 8001e0c:	f006 fc60 	bl	80086d0 <puts>
}//end status_message
 8001e10:	bf00      	nop
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	08009bd4 	.word	0x08009bd4
 8001e18:	08009bdc 	.word	0x08009bdc
 8001e1c:	08009c08 	.word	0x08009c08
 8001e20:	08009c34 	.word	0x08009c34
 8001e24:	08009c60 	.word	0x08009c60
 8001e28:	08009c80 	.word	0x08009c80
 8001e2c:	08009c8c 	.word	0x08009c8c
 8001e30:	20000004 	.word	0x20000004
 8001e34:	08009cb8 	.word	0x08009cb8
 8001e38:	08009ce0 	.word	0x08009ce0
 8001e3c:	20000000 	.word	0x20000000
 8001e40:	08009d0c 	.word	0x08009d0c
 8001e44:	08009d38 	.word	0x08009d38
 8001e48:	08009d64 	.word	0x08009d64
 8001e4c:	08009d90 	.word	0x08009d90
 8001e50:	08009dbc 	.word	0x08009dbc
 8001e54:	08009de8 	.word	0x08009de8
 8001e58:	08009e14 	.word	0x08009e14
 8001e5c:	08009e40 	.word	0x08009e40
 8001e60:	08009e6c 	.word	0x08009e6c
 8001e64:	08009e98 	.word	0x08009e98
 8001e68:	08009ec4 	.word	0x08009ec4
 8001e6c:	08009ef0 	.word	0x08009ef0
 8001e70:	08009f1c 	.word	0x08009f1c
 8001e74:	08009f48 	.word	0x08009f48
 8001e78:	08009828 	.word	0x08009828

08001e7c <menu_config>:


void menu_config(void) {
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
    printf("\n\r");
 8001e80:	481f      	ldr	r0, [pc, #124]	@ (8001f00 <menu_config+0x84>)
 8001e82:	f006 fbbd 	bl	8008600 <iprintf>
    printf("=========================================\n\r");
 8001e86:	481f      	ldr	r0, [pc, #124]	@ (8001f04 <menu_config+0x88>)
 8001e88:	f006 fbba 	bl	8008600 <iprintf>
    printf("|  AOML auto launcher config menu       |\n\r");
 8001e8c:	481e      	ldr	r0, [pc, #120]	@ (8001f08 <menu_config+0x8c>)
 8001e8e:	f006 fbb7 	bl	8008600 <iprintf>
    printf("=========================================\n\r");
 8001e92:	481c      	ldr	r0, [pc, #112]	@ (8001f04 <menu_config+0x88>)
 8001e94:	f006 fbb4 	bl	8008600 <iprintf>
    printf("|    Model #ALV3.0      S/N ");
 8001e98:	481c      	ldr	r0, [pc, #112]	@ (8001f0c <menu_config+0x90>)
 8001e9a:	f006 fbb1 	bl	8008600 <iprintf>
    print_serial_number();
 8001e9e:	f000 f8bd 	bl	800201c <print_serial_number>
    printf("       |\n\r");
 8001ea2:	481b      	ldr	r0, [pc, #108]	@ (8001f10 <menu_config+0x94>)
 8001ea4:	f006 fbac 	bl	8008600 <iprintf>
    printf("=========================================\n\r");
 8001ea8:	4816      	ldr	r0, [pc, #88]	@ (8001f04 <menu_config+0x88>)
 8001eaa:	f006 fba9 	bl	8008600 <iprintf>
    printf("|               COMMANDS                |\n\r");
 8001eae:	4819      	ldr	r0, [pc, #100]	@ (8001f14 <menu_config+0x98>)
 8001eb0:	f006 fba6 	bl	8008600 <iprintf>
    printf("=========================================\n\r");
 8001eb4:	4813      	ldr	r0, [pc, #76]	@ (8001f04 <menu_config+0x88>)
 8001eb6:	f006 fba3 	bl	8008600 <iprintf>
    printf("| Set tubes & S/N      1                |\n\r");
 8001eba:	4817      	ldr	r0, [pc, #92]	@ (8001f18 <menu_config+0x9c>)
 8001ebc:	f006 fba0 	bl	8008600 <iprintf>
    printf("| This Menu            M                |\n\r");
 8001ec0:	4816      	ldr	r0, [pc, #88]	@ (8001f1c <menu_config+0xa0>)
 8001ec2:	f006 fb9d 	bl	8008600 <iprintf>
    printf("| Extend all pins      J                |\n\r");
 8001ec6:	4816      	ldr	r0, [pc, #88]	@ (8001f20 <menu_config+0xa4>)
 8001ec8:	f006 fb9a 	bl	8008600 <iprintf>
    printf("| Retract all pins     N                |\n\r");
 8001ecc:	4815      	ldr	r0, [pc, #84]	@ (8001f24 <menu_config+0xa8>)
 8001ece:	f006 fb97 	bl	8008600 <iprintf>
    printf("| Grease pins  mode    G                |\n\r");
 8001ed2:	4815      	ldr	r0, [pc, #84]	@ (8001f28 <menu_config+0xac>)
 8001ed4:	f006 fb94 	bl	8008600 <iprintf>
    printf("| Clear memory range   C                |\n\r");
 8001ed8:	4814      	ldr	r0, [pc, #80]	@ (8001f2c <menu_config+0xb0>)
 8001eda:	f006 fb91 	bl	8008600 <iprintf>
    printf("| Read motor stats     S                |\n\r");
 8001ede:	4814      	ldr	r0, [pc, #80]	@ (8001f30 <menu_config+0xb4>)
 8001ee0:	f006 fb8e 	bl	8008600 <iprintf>
    printf("| Set motor runtime    T                |\n\r");
 8001ee4:	4813      	ldr	r0, [pc, #76]	@ (8001f34 <menu_config+0xb8>)
 8001ee6:	f006 fb8b 	bl	8008600 <iprintf>
    printf("| Quit config menu     Q                |\n\r");
 8001eea:	4813      	ldr	r0, [pc, #76]	@ (8001f38 <menu_config+0xbc>)
 8001eec:	f006 fb88 	bl	8008600 <iprintf>
    printf("=========================================\n\r");
 8001ef0:	4804      	ldr	r0, [pc, #16]	@ (8001f04 <menu_config+0x88>)
 8001ef2:	f006 fb85 	bl	8008600 <iprintf>
    printf("\r\n");
 8001ef6:	4811      	ldr	r0, [pc, #68]	@ (8001f3c <menu_config+0xc0>)
 8001ef8:	f006 fbea 	bl	80086d0 <puts>
}//end status_message
 8001efc:	bf00      	nop
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	08009f74 	.word	0x08009f74
 8001f04:	08009bdc 	.word	0x08009bdc
 8001f08:	08009f78 	.word	0x08009f78
 8001f0c:	08009c60 	.word	0x08009c60
 8001f10:	08009c80 	.word	0x08009c80
 8001f14:	08009c8c 	.word	0x08009c8c
 8001f18:	08009fa4 	.word	0x08009fa4
 8001f1c:	08009f1c 	.word	0x08009f1c
 8001f20:	08009fd0 	.word	0x08009fd0
 8001f24:	08009ffc 	.word	0x08009ffc
 8001f28:	0800a028 	.word	0x0800a028
 8001f2c:	0800a054 	.word	0x0800a054
 8001f30:	0800a080 	.word	0x0800a080
 8001f34:	0800a0ac 	.word	0x0800a0ac
 8001f38:	0800a0d8 	.word	0x0800a0d8
 8001f3c:	08009828 	.word	0x08009828

08001f40 <get_user_input>:


/*********************** AUXILIAR FUNCTIONS ***********************/

void get_user_input(char promptMsg[], char errorMsg[], uint8_t count, char checkList[], char * output){
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	603b      	str	r3, [r7, #0]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	71fb      	strb	r3, [r7, #7]
	//const uint8_t checkListSize = 10;
	print_inline(promptMsg);
 8001f50:	68f8      	ldr	r0, [r7, #12]
 8001f52:	f000 f89f 	bl	8002094 <print_inline>
    for(uint8_t i = 0; i < count; i++){
 8001f56:	2300      	movs	r3, #0
 8001f58:	75fb      	strb	r3, [r7, #23]
 8001f5a:	e03d      	b.n	8001fd8 <get_user_input+0x98>
		while(1){
			HAL_Delay(5); // needed to debug, remove
 8001f5c:	2005      	movs	r0, #5
 8001f5e:	f001 fbd9 	bl	8003714 <HAL_Delay>
			if(rxStatus == active){
 8001f62:	4b23      	ldr	r3, [pc, #140]	@ (8001ff0 <get_user_input+0xb0>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d1f8      	bne.n	8001f5c <get_user_input+0x1c>
				rxStatus = idle;
 8001f6a:	4b21      	ldr	r3, [pc, #132]	@ (8001ff0 <get_user_input+0xb0>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	701a      	strb	r2, [r3, #0]
				print_char(rxChar);
 8001f70:	4b20      	ldr	r3, [pc, #128]	@ (8001ff4 <get_user_input+0xb4>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f000 f841 	bl	8001ffc <print_char>
				uint8_t checkFlag = 0;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	75bb      	strb	r3, [r7, #22]
				// check that belongs to the checkList
				for(uint8_t j = 0; j < MAX_CHECKLIST_SIZE; j++){
 8001f7e:	2300      	movs	r3, #0
 8001f80:	757b      	strb	r3, [r7, #21]
 8001f82:	e013      	b.n	8001fac <get_user_input+0x6c>
					// if there is a match, set flag, store value and break
					if(rxChar == checkList[j]){
 8001f84:	7d7b      	ldrb	r3, [r7, #21]
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	4413      	add	r3, r2
 8001f8a:	781a      	ldrb	r2, [r3, #0]
 8001f8c:	4b19      	ldr	r3, [pc, #100]	@ (8001ff4 <get_user_input+0xb4>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d108      	bne.n	8001fa6 <get_user_input+0x66>
						checkFlag = 1;
 8001f94:	2301      	movs	r3, #1
 8001f96:	75bb      	strb	r3, [r7, #22]
						output[i] = rxChar;// store the value
 8001f98:	7dfb      	ldrb	r3, [r7, #23]
 8001f9a:	6a3a      	ldr	r2, [r7, #32]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	4a15      	ldr	r2, [pc, #84]	@ (8001ff4 <get_user_input+0xb4>)
 8001fa0:	7812      	ldrb	r2, [r2, #0]
 8001fa2:	701a      	strb	r2, [r3, #0]
						break;
 8001fa4:	e005      	b.n	8001fb2 <get_user_input+0x72>
				for(uint8_t j = 0; j < MAX_CHECKLIST_SIZE; j++){
 8001fa6:	7d7b      	ldrb	r3, [r7, #21]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	757b      	strb	r3, [r7, #21]
 8001fac:	7d7b      	ldrb	r3, [r7, #21]
 8001fae:	2b09      	cmp	r3, #9
 8001fb0:	d9e8      	bls.n	8001f84 <get_user_input+0x44>
					}
				} // if no match, flag is 0
				if(checkFlag == 0){
 8001fb2:	7dbb      	ldrb	r3, [r7, #22]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d107      	bne.n	8001fc8 <get_user_input+0x88>
					printf(errorMsg);
 8001fb8:	68b8      	ldr	r0, [r7, #8]
 8001fba:	f006 fb21 	bl	8008600 <iprintf>
					print_inline(promptMsg);
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f000 f868 	bl	8002094 <print_inline>
					i = 0; // reinitialize counter to start over
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	75fb      	strb	r3, [r7, #23]
				}
				// break while loop if value is good
				if(checkFlag == 1) break;
 8001fc8:	7dbb      	ldrb	r3, [r7, #22]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d000      	beq.n	8001fd0 <get_user_input+0x90>
			HAL_Delay(5); // needed to debug, remove
 8001fce:	e7c5      	b.n	8001f5c <get_user_input+0x1c>
				if(checkFlag == 1) break;
 8001fd0:	bf00      	nop
    for(uint8_t i = 0; i < count; i++){
 8001fd2:	7dfb      	ldrb	r3, [r7, #23]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	75fb      	strb	r3, [r7, #23]
 8001fd8:	7dfa      	ldrb	r2, [r7, #23]
 8001fda:	79fb      	ldrb	r3, [r7, #7]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d3bd      	bcc.n	8001f5c <get_user_input+0x1c>
			}
		}
    }
    printf("\r\n");
 8001fe0:	4805      	ldr	r0, [pc, #20]	@ (8001ff8 <get_user_input+0xb8>)
 8001fe2:	f006 fb75 	bl	80086d0 <puts>
}
 8001fe6:	bf00      	nop
 8001fe8:	3718      	adds	r7, #24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	2000017e 	.word	0x2000017e
 8001ff4:	20000181 	.word	0x20000181
 8001ff8:	08009828 	.word	0x08009828

08001ffc <print_char>:

/* Print a single character for echo in line */
void print_char(uint8_t * ch){
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, 10);
 8002004:	1d39      	adds	r1, r7, #4
 8002006:	230a      	movs	r3, #10
 8002008:	2201      	movs	r2, #1
 800200a:	4803      	ldr	r0, [pc, #12]	@ (8002018 <print_char+0x1c>)
 800200c:	f005 fb84 	bl	8007718 <HAL_UART_Transmit>
}
 8002010:	bf00      	nop
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	20000218 	.word	0x20000218

0800201c <print_serial_number>:

/* Print serial number based on AL configuration saved */
void print_serial_number(void){
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
	//printf( "AL%c%s", launcher.type[0], launcher.serialNumber);
    if(eeprom.configured == '|'){
 8002020:	4b0e      	ldr	r3, [pc, #56]	@ (800205c <print_serial_number+0x40>)
 8002022:	795b      	ldrb	r3, [r3, #5]
 8002024:	2b7c      	cmp	r3, #124	@ 0x7c
 8002026:	d114      	bne.n	8002052 <print_serial_number+0x36>
    	if(launcher.tubeCount == '6'){
 8002028:	4b0d      	ldr	r3, [pc, #52]	@ (8002060 <print_serial_number+0x44>)
 800202a:	785b      	ldrb	r3, [r3, #1]
 800202c:	2b36      	cmp	r3, #54	@ 0x36
 800202e:	d106      	bne.n	800203e <print_serial_number+0x22>
    		printf( "AL%i ", launcher.serialNumber);
 8002030:	4b0b      	ldr	r3, [pc, #44]	@ (8002060 <print_serial_number+0x44>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	4619      	mov	r1, r3
 8002036:	480b      	ldr	r0, [pc, #44]	@ (8002064 <print_serial_number+0x48>)
 8002038:	f006 fae2 	bl	8008600 <iprintf>
    		printf( "AL%c%i", launcher.type, launcher.serialNumber);
    	}
    } else {
    	printf( "AL???");
    }
}
 800203c:	e00c      	b.n	8002058 <print_serial_number+0x3c>
    		printf( "AL%c%i", launcher.type, launcher.serialNumber);
 800203e:	4b08      	ldr	r3, [pc, #32]	@ (8002060 <print_serial_number+0x44>)
 8002040:	789b      	ldrb	r3, [r3, #2]
 8002042:	4619      	mov	r1, r3
 8002044:	4b06      	ldr	r3, [pc, #24]	@ (8002060 <print_serial_number+0x44>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	461a      	mov	r2, r3
 800204a:	4807      	ldr	r0, [pc, #28]	@ (8002068 <print_serial_number+0x4c>)
 800204c:	f006 fad8 	bl	8008600 <iprintf>
}
 8002050:	e002      	b.n	8002058 <print_serial_number+0x3c>
    	printf( "AL???");
 8002052:	4806      	ldr	r0, [pc, #24]	@ (800206c <print_serial_number+0x50>)
 8002054:	f006 fad4 	bl	8008600 <iprintf>
}
 8002058:	bf00      	nop
 800205a:	bd80      	pop	{r7, pc}
 800205c:	20000004 	.word	0x20000004
 8002060:	20000000 	.word	0x20000000
 8002064:	0800a104 	.word	0x0800a104
 8002068:	0800a10c 	.word	0x0800a10c
 800206c:	0800a114 	.word	0x0800a114

08002070 <multiplexer_set>:
}


/* Select the source of RS232
 * Parameters: select {MUX_GPS, MUX_STM32} */
void multiplexer_set(mux_t select){
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(MUX_SELECT_GPIO_Port, MUX_SELECT_Pin, select); // SET = UART-tx / RESET = Din from GPS
 800207a:	79fb      	ldrb	r3, [r7, #7]
 800207c:	461a      	mov	r2, r3
 800207e:	2104      	movs	r1, #4
 8002080:	4803      	ldr	r0, [pc, #12]	@ (8002090 <multiplexer_set+0x20>)
 8002082:	f002 fcb7 	bl	80049f4 <HAL_GPIO_WritePin>
}
 8002086:	bf00      	nop
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40010800 	.word	0x40010800

08002094 <print_inline>:

/* Print line without a '\n' newline at the end
 * Use for data entry prompts or partial text inline */
void print_inline(char * text){
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
	char temp = ' ';
 800209c:	2320      	movs	r3, #32
 800209e:	73bb      	strb	r3, [r7, #14]
	for(uint8_t i = 0; i<=255 && temp!= '\0' ; i++){
 80020a0:	2300      	movs	r3, #0
 80020a2:	73fb      	strb	r3, [r7, #15]
 80020a4:	e00e      	b.n	80020c4 <print_inline+0x30>
		temp = text[i];
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	4413      	add	r3, r2
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	73bb      	strb	r3, [r7, #14]
		HAL_UART_Transmit(&huart1, (uint8_t *) &temp, 1, 100);
 80020b0:	f107 010e 	add.w	r1, r7, #14
 80020b4:	2364      	movs	r3, #100	@ 0x64
 80020b6:	2201      	movs	r2, #1
 80020b8:	4806      	ldr	r0, [pc, #24]	@ (80020d4 <print_inline+0x40>)
 80020ba:	f005 fb2d 	bl	8007718 <HAL_UART_Transmit>
	for(uint8_t i = 0; i<=255 && temp!= '\0' ; i++){
 80020be:	7bfb      	ldrb	r3, [r7, #15]
 80020c0:	3301      	adds	r3, #1
 80020c2:	73fb      	strb	r3, [r7, #15]
 80020c4:	7bbb      	ldrb	r3, [r7, #14]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1ed      	bne.n	80020a6 <print_inline+0x12>
	}
}
 80020ca:	bf00      	nop
 80020cc:	bf00      	nop
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	20000218 	.word	0x20000218

080020d8 <parameter_init>:


/* Initialize autolauncher parameters */
void parameter_init(void){
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af02      	add	r7, sp, #8
	// get parameters from eeprom or assign default values
	eeprom.configured = eeprom_read(AL_CONFIGED);
 80020de:	2003      	movs	r0, #3
 80020e0:	f000 fde2 	bl	8002ca8 <eeprom_read>
 80020e4:	4603      	mov	r3, r0
 80020e6:	461a      	mov	r2, r3
 80020e8:	4b25      	ldr	r3, [pc, #148]	@ (8002180 <parameter_init+0xa8>)
 80020ea:	715a      	strb	r2, [r3, #5]
	if(eeprom.configured == '|'){
 80020ec:	4b24      	ldr	r3, [pc, #144]	@ (8002180 <parameter_init+0xa8>)
 80020ee:	795b      	ldrb	r3, [r3, #5]
 80020f0:	2b7c      	cmp	r3, #124	@ 0x7c
 80020f2:	d13d      	bne.n	8002170 <parameter_init+0x98>
		printf("\r\n... Configuration found in memory ... \r\n");
 80020f4:	4823      	ldr	r0, [pc, #140]	@ (8002184 <parameter_init+0xac>)
 80020f6:	f006 faeb 	bl	80086d0 <puts>
		launcher.tubeCount = eeprom_read(AL_TUBECOUNT);
 80020fa:	2000      	movs	r0, #0
 80020fc:	f000 fdd4 	bl	8002ca8 <eeprom_read>
 8002100:	4603      	mov	r3, r0
 8002102:	461a      	mov	r2, r3
 8002104:	4b20      	ldr	r3, [pc, #128]	@ (8002188 <parameter_init+0xb0>)
 8002106:	705a      	strb	r2, [r3, #1]
		launcher.type = eeprom_read(AL_TYPE);
 8002108:	2001      	movs	r0, #1
 800210a:	f000 fdcd 	bl	8002ca8 <eeprom_read>
 800210e:	4603      	mov	r3, r0
 8002110:	461a      	mov	r2, r3
 8002112:	4b1d      	ldr	r3, [pc, #116]	@ (8002188 <parameter_init+0xb0>)
 8002114:	709a      	strb	r2, [r3, #2]
		launcher.serialNumber = eeprom_read(AL_SN);
 8002116:	2002      	movs	r0, #2
 8002118:	f000 fdc6 	bl	8002ca8 <eeprom_read>
 800211c:	4603      	mov	r3, r0
 800211e:	461a      	mov	r2, r3
 8002120:	4b19      	ldr	r3, [pc, #100]	@ (8002188 <parameter_init+0xb0>)
 8002122:	701a      	strb	r2, [r3, #0]
		// read motor runtime and assign a default value if out of range
		uint32_t rt = eeprom_read_uint32(M_RUNTIME);
 8002124:	2008      	movs	r0, #8
 8002126:	f000 fe87 	bl	8002e38 <eeprom_read_uint32>
 800212a:	6078      	str	r0, [r7, #4]
		if(rt > MOTOR_RUNTIME_MIN && rt < MOTOR_RUNTIME_MAX)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002132:	d908      	bls.n	8002146 <parameter_init+0x6e>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800213a:	4293      	cmp	r3, r2
 800213c:	d803      	bhi.n	8002146 <parameter_init+0x6e>
			motor.runTime = rt;
 800213e:	4a13      	ldr	r2, [pc, #76]	@ (800218c <parameter_init+0xb4>)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6013      	str	r3, [r2, #0]
 8002144:	e003      	b.n	800214e <parameter_init+0x76>
		else
			motor.runTime = MOTOR_RUNTIME;
 8002146:	4b11      	ldr	r3, [pc, #68]	@ (800218c <parameter_init+0xb4>)
 8002148:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800214c:	601a      	str	r2, [r3, #0]
		//launcher.serialNumber[1] = eeprom_read(AL_SN2);
		printf("\r\nTubes: %c | Type: %c | Serial: %i | Runtime: %i\r\n", launcher.tubeCount, launcher.type, launcher.serialNumber, (int)motor.runTime);
 800214e:	4b0e      	ldr	r3, [pc, #56]	@ (8002188 <parameter_init+0xb0>)
 8002150:	785b      	ldrb	r3, [r3, #1]
 8002152:	4619      	mov	r1, r3
 8002154:	4b0c      	ldr	r3, [pc, #48]	@ (8002188 <parameter_init+0xb0>)
 8002156:	789b      	ldrb	r3, [r3, #2]
 8002158:	461a      	mov	r2, r3
 800215a:	4b0b      	ldr	r3, [pc, #44]	@ (8002188 <parameter_init+0xb0>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	4b0a      	ldr	r3, [pc, #40]	@ (800218c <parameter_init+0xb4>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	4603      	mov	r3, r0
 8002168:	4809      	ldr	r0, [pc, #36]	@ (8002190 <parameter_init+0xb8>)
 800216a:	f006 fa49 	bl	8008600 <iprintf>
	} else {
		printf("\r\n... Configuration NOT found in memory ... \r\n");
	}
}
 800216e:	e002      	b.n	8002176 <parameter_init+0x9e>
		printf("\r\n... Configuration NOT found in memory ... \r\n");
 8002170:	4808      	ldr	r0, [pc, #32]	@ (8002194 <parameter_init+0xbc>)
 8002172:	f006 faad 	bl	80086d0 <puts>
}
 8002176:	bf00      	nop
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	20000004 	.word	0x20000004
 8002184:	0800a11c 	.word	0x0800a11c
 8002188:	20000000 	.word	0x20000000
 800218c:	2000000c 	.word	0x2000000c
 8002190:	080099ac 	.word	0x080099ac
 8002194:	0800a148 	.word	0x0800a148

08002198 <HAL_UART_RxCpltCallback>:

/* UART Receive complete interrupt callback, set rxStatus flag for new char received
 * re-enable uart rx interrupt */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
	// check that uart1 triggered the interrupt callback
	if(huart->Instance == USART1){
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a09      	ldr	r2, [pc, #36]	@ (80021cc <HAL_UART_RxCpltCallback+0x34>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d10b      	bne.n	80021c2 <HAL_UART_RxCpltCallback+0x2a>
		rxChar = rxBuffer[0]; // store the only element in buffer to a char for easier variable handling
 80021aa:	4b09      	ldr	r3, [pc, #36]	@ (80021d0 <HAL_UART_RxCpltCallback+0x38>)
 80021ac:	781a      	ldrb	r2, [r3, #0]
 80021ae:	4b09      	ldr	r3, [pc, #36]	@ (80021d4 <HAL_UART_RxCpltCallback+0x3c>)
 80021b0:	701a      	strb	r2, [r3, #0]
		rxStatus = active; // set flag to enter main menu char processing
 80021b2:	4b09      	ldr	r3, [pc, #36]	@ (80021d8 <HAL_UART_RxCpltCallback+0x40>)
 80021b4:	2201      	movs	r2, #1
 80021b6:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, (uint8_t *) rxBuffer, 1); // reactivate rx interrupt
 80021b8:	2201      	movs	r2, #1
 80021ba:	4905      	ldr	r1, [pc, #20]	@ (80021d0 <HAL_UART_RxCpltCallback+0x38>)
 80021bc:	4807      	ldr	r0, [pc, #28]	@ (80021dc <HAL_UART_RxCpltCallback+0x44>)
 80021be:	f005 fbcd 	bl	800795c <HAL_UART_Receive_IT>
	}
}
 80021c2:	bf00      	nop
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40013800 	.word	0x40013800
 80021d0:	20000180 	.word	0x20000180
 80021d4:	20000181 	.word	0x20000181
 80021d8:	2000017e 	.word	0x2000017e
 80021dc:	20000218 	.word	0x20000218

080021e0 <uartrx_interrupt_init>:



/* Wrapper for 1st uart_rx call
 * The interrupt is enabled for rx after this function is called, and then disabled until called again */
void uartrx_interrupt_init(void){
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, (uint8_t *) rxBuffer, 1); // enable UART receive interrupt, store received char in rxChar buffer
 80021e4:	2201      	movs	r2, #1
 80021e6:	4903      	ldr	r1, [pc, #12]	@ (80021f4 <uartrx_interrupt_init+0x14>)
 80021e8:	4803      	ldr	r0, [pc, #12]	@ (80021f8 <uartrx_interrupt_init+0x18>)
 80021ea:	f005 fbb7 	bl	800795c <HAL_UART_Receive_IT>
}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	20000180 	.word	0x20000180
 80021f8:	20000218 	.word	0x20000218

080021fc <unground_xbt>:

/* Disconnect the XBT ABC pins from ground
 * 3 relays can be used as ground when SET, or ground when RESET based on jumpers JP6-7-8
 * If 1-2 pads are soldered, SET relays to unground, RESET relays to ground
 * Note: reset signal 3 is tied to other relays: CAL cont & CAL res */
void unground_xbt(void){
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
	if(relayLock == reFree){
 8002200:	4b08      	ldr	r3, [pc, #32]	@ (8002224 <unground_xbt+0x28>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d10b      	bne.n	8002220 <unground_xbt+0x24>
		relayLock = reLocked;
 8002208:	4b06      	ldr	r3, [pc, #24]	@ (8002224 <unground_xbt+0x28>)
 800220a:	2201      	movs	r2, #1
 800220c:	701a      	strb	r2, [r3, #0]
		drive_relay(RELAY_RESET_3_GPIO_Port, RELAY_RESET_3_Pin, 10); // RESET relay k9, k10, k11, k12
 800220e:	220a      	movs	r2, #10
 8002210:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002214:	4804      	ldr	r0, [pc, #16]	@ (8002228 <unground_xbt+0x2c>)
 8002216:	f000 f925 	bl	8002464 <drive_relay>
		relayLock = reFree;
 800221a:	4b02      	ldr	r3, [pc, #8]	@ (8002224 <unground_xbt+0x28>)
 800221c:	2200      	movs	r2, #0
 800221e:	701a      	strb	r2, [r3, #0]
	}
}
 8002220:	bf00      	nop
 8002222:	bd80      	pop	{r7, pc}
 8002224:	2000017d 	.word	0x2000017d
 8002228:	40011000 	.word	0x40011000

0800222c <calibration_resistor>:

void calibration_resistor(void){
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
	if(relayLock == reFree){
 8002230:	4b08      	ldr	r3, [pc, #32]	@ (8002254 <calibration_resistor+0x28>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d10b      	bne.n	8002250 <calibration_resistor+0x24>
		relayLock = reLocked;
 8002238:	4b06      	ldr	r3, [pc, #24]	@ (8002254 <calibration_resistor+0x28>)
 800223a:	2201      	movs	r2, #1
 800223c:	701a      	strb	r2, [r3, #0]
		drive_relay(RELAY_K12_CAL_RES_GPIO_Port, RELAY_K12_CAL_RES_Pin, RELAY_ON_TIME); // SET relay k12
 800223e:	220a      	movs	r2, #10
 8002240:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002244:	4804      	ldr	r0, [pc, #16]	@ (8002258 <calibration_resistor+0x2c>)
 8002246:	f000 f90d 	bl	8002464 <drive_relay>
		relayLock = reFree;
 800224a:	4b02      	ldr	r3, [pc, #8]	@ (8002254 <calibration_resistor+0x28>)
 800224c:	2200      	movs	r2, #0
 800224e:	701a      	strb	r2, [r3, #0]
	}
}
 8002250:	bf00      	nop
 8002252:	bd80      	pop	{r7, pc}
 8002254:	2000017d 	.word	0x2000017d
 8002258:	40010800 	.word	0x40010800

0800225c <calibrate_on>:

void calibrate_on(void){
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
	if(relayLock == reFree){
 8002260:	4b08      	ldr	r3, [pc, #32]	@ (8002284 <calibrate_on+0x28>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d10b      	bne.n	8002280 <calibrate_on+0x24>
		relayLock = reLocked;
 8002268:	4b06      	ldr	r3, [pc, #24]	@ (8002284 <calibrate_on+0x28>)
 800226a:	2201      	movs	r2, #1
 800226c:	701a      	strb	r2, [r3, #0]
		drive_relay(RELAY_K11_CAL_CONT_GPIO_Port, RELAY_K11_CAL_CONT_Pin, RELAY_ON_TIME); // SET relay k11
 800226e:	220a      	movs	r2, #10
 8002270:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002274:	4804      	ldr	r0, [pc, #16]	@ (8002288 <calibrate_on+0x2c>)
 8002276:	f000 f8f5 	bl	8002464 <drive_relay>
		relayLock = reFree;
 800227a:	4b02      	ldr	r3, [pc, #8]	@ (8002284 <calibrate_on+0x28>)
 800227c:	2200      	movs	r2, #0
 800227e:	701a      	strb	r2, [r3, #0]
	}
}
 8002280:	bf00      	nop
 8002282:	bd80      	pop	{r7, pc}
 8002284:	2000017d 	.word	0x2000017d
 8002288:	40010800 	.word	0x40010800

0800228c <reset_relay>:

void reset_relay(void){
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
	if(relayLock == reFree){
 8002290:	4b11      	ldr	r3, [pc, #68]	@ (80022d8 <reset_relay+0x4c>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d11d      	bne.n	80022d4 <reset_relay+0x48>
		relayLock = reLocked;
 8002298:	4b0f      	ldr	r3, [pc, #60]	@ (80022d8 <reset_relay+0x4c>)
 800229a:	2201      	movs	r2, #1
 800229c:	701a      	strb	r2, [r3, #0]
		drive_relay(RELAY_RESET_1_GPIO_Port, RELAY_RESET_1_Pin, RELAY_ON_TIME); // RESET relay k1, k2, k3, k4, SSR1, SSR2, SSR3, SSR4
 800229e:	220a      	movs	r2, #10
 80022a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022a4:	480d      	ldr	r0, [pc, #52]	@ (80022dc <reset_relay+0x50>)
 80022a6:	f000 f8dd 	bl	8002464 <drive_relay>
		HAL_Delay(RELAY_INTERVAL_TIME);
 80022aa:	200a      	movs	r0, #10
 80022ac:	f001 fa32 	bl	8003714 <HAL_Delay>
		drive_relay(RELAY_RESET_2_GPIO_Port, RELAY_RESET_2_Pin, RELAY_ON_TIME); // RESET relay k5, k6, k7, k8, SSR5, SSR6, SSR7, SSR8
 80022b0:	220a      	movs	r2, #10
 80022b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80022b6:	480a      	ldr	r0, [pc, #40]	@ (80022e0 <reset_relay+0x54>)
 80022b8:	f000 f8d4 	bl	8002464 <drive_relay>
		HAL_Delay(RELAY_INTERVAL_TIME);
 80022bc:	200a      	movs	r0, #10
 80022be:	f001 fa29 	bl	8003714 <HAL_Delay>
		drive_relay(RELAY_RESET_3_GPIO_Port, RELAY_RESET_3_Pin, RELAY_ON_TIME); // RESET relay k9, k10, k11, k12 - This grounds ABC
 80022c2:	220a      	movs	r2, #10
 80022c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022c8:	4805      	ldr	r0, [pc, #20]	@ (80022e0 <reset_relay+0x54>)
 80022ca:	f000 f8cb 	bl	8002464 <drive_relay>
		relayLock = reFree;
 80022ce:	4b02      	ldr	r3, [pc, #8]	@ (80022d8 <reset_relay+0x4c>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	701a      	strb	r2, [r3, #0]
	}
}
 80022d4:	bf00      	nop
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	2000017d 	.word	0x2000017d
 80022dc:	40010c00 	.word	0x40010c00
 80022e0:	40011000 	.word	0x40011000

080022e4 <connect_xbt_pin>:

void connect_xbt_pin(uint8_t xbtNum){
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	71fb      	strb	r3, [r7, #7]

	if(relayLock == reFree){
 80022ee:	4b47      	ldr	r3, [pc, #284]	@ (800240c <connect_xbt_pin+0x128>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f040 8085 	bne.w	8002402 <connect_xbt_pin+0x11e>
		relayLock = reLocked;
 80022f8:	4b44      	ldr	r3, [pc, #272]	@ (800240c <connect_xbt_pin+0x128>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	701a      	strb	r2, [r3, #0]

		switch (xbtNum){
 80022fe:	79fb      	ldrb	r3, [r7, #7]
 8002300:	3b01      	subs	r3, #1
 8002302:	2b07      	cmp	r3, #7
 8002304:	d874      	bhi.n	80023f0 <connect_xbt_pin+0x10c>
 8002306:	a201      	add	r2, pc, #4	@ (adr r2, 800230c <connect_xbt_pin+0x28>)
 8002308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800230c:	0800232d 	.word	0x0800232d
 8002310:	08002347 	.word	0x08002347
 8002314:	08002361 	.word	0x08002361
 8002318:	08002379 	.word	0x08002379
 800231c:	08002391 	.word	0x08002391
 8002320:	080023a7 	.word	0x080023a7
 8002324:	080023bd 	.word	0x080023bd
 8002328:	080023d7 	.word	0x080023d7
		case 1:
			drive_relay(RELAY_K1_GPIO_Port, RELAY_K1_Pin, RELAY_ON_TIME); // SET relay k1
 800232c:	220a      	movs	r2, #10
 800232e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002332:	4837      	ldr	r0, [pc, #220]	@ (8002410 <connect_xbt_pin+0x12c>)
 8002334:	f000 f896 	bl	8002464 <drive_relay>
			drive_relay(SSR_1_GPIO_Port, SSR_1_Pin, 1); // SET SSR1
 8002338:	2201      	movs	r2, #1
 800233a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800233e:	4834      	ldr	r0, [pc, #208]	@ (8002410 <connect_xbt_pin+0x12c>)
 8002340:	f000 f890 	bl	8002464 <drive_relay>
			break;
 8002344:	e05a      	b.n	80023fc <connect_xbt_pin+0x118>
		case 2:
			drive_relay(RELAY_K2_GPIO_Port, RELAY_K2_Pin, RELAY_ON_TIME); // SET relay k2
 8002346:	220a      	movs	r2, #10
 8002348:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800234c:	4830      	ldr	r0, [pc, #192]	@ (8002410 <connect_xbt_pin+0x12c>)
 800234e:	f000 f889 	bl	8002464 <drive_relay>
			drive_relay(SSR_2_GPIO_Port, SSR_2_Pin, 1); // SET SSR2
 8002352:	2201      	movs	r2, #1
 8002354:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002358:	482d      	ldr	r0, [pc, #180]	@ (8002410 <connect_xbt_pin+0x12c>)
 800235a:	f000 f883 	bl	8002464 <drive_relay>
			break;
 800235e:	e04d      	b.n	80023fc <connect_xbt_pin+0x118>
		case 3:
			drive_relay(RELAY_K3_GPIO_Port, RELAY_K3_Pin, RELAY_ON_TIME); // SET relay k3
 8002360:	220a      	movs	r2, #10
 8002362:	2104      	movs	r1, #4
 8002364:	482b      	ldr	r0, [pc, #172]	@ (8002414 <connect_xbt_pin+0x130>)
 8002366:	f000 f87d 	bl	8002464 <drive_relay>
			drive_relay(SSR_3_GPIO_Port, SSR_3_Pin, 1); // SET SSR3
 800236a:	2201      	movs	r2, #1
 800236c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002370:	4827      	ldr	r0, [pc, #156]	@ (8002410 <connect_xbt_pin+0x12c>)
 8002372:	f000 f877 	bl	8002464 <drive_relay>
			break;
 8002376:	e041      	b.n	80023fc <connect_xbt_pin+0x118>
		case 4:
			drive_relay(RELAY_K4_GPIO_Port, RELAY_K4_Pin, RELAY_ON_TIME); // SET relay k4
 8002378:	220a      	movs	r2, #10
 800237a:	2108      	movs	r1, #8
 800237c:	4826      	ldr	r0, [pc, #152]	@ (8002418 <connect_xbt_pin+0x134>)
 800237e:	f000 f871 	bl	8002464 <drive_relay>
			drive_relay(SSR_4_GPIO_Port, SSR_4_Pin, 1); // SET SSR4
 8002382:	2201      	movs	r2, #1
 8002384:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002388:	4823      	ldr	r0, [pc, #140]	@ (8002418 <connect_xbt_pin+0x134>)
 800238a:	f000 f86b 	bl	8002464 <drive_relay>
			break;
 800238e:	e035      	b.n	80023fc <connect_xbt_pin+0x118>
		case 5:
			drive_relay(RELAY_K5_GPIO_Port, RELAY_K5_Pin, RELAY_ON_TIME); // SET relay k5
 8002390:	220a      	movs	r2, #10
 8002392:	2110      	movs	r1, #16
 8002394:	4820      	ldr	r0, [pc, #128]	@ (8002418 <connect_xbt_pin+0x134>)
 8002396:	f000 f865 	bl	8002464 <drive_relay>
			drive_relay(SSR_5_GPIO_Port, SSR_5_Pin, 1); // SET SSR5
 800239a:	2201      	movs	r2, #1
 800239c:	2180      	movs	r1, #128	@ 0x80
 800239e:	481c      	ldr	r0, [pc, #112]	@ (8002410 <connect_xbt_pin+0x12c>)
 80023a0:	f000 f860 	bl	8002464 <drive_relay>
			break;
 80023a4:	e02a      	b.n	80023fc <connect_xbt_pin+0x118>
		case 6:
			drive_relay(RELAY_K6_GPIO_Port, RELAY_K6_Pin, RELAY_ON_TIME); // SET relay k6
 80023a6:	220a      	movs	r2, #10
 80023a8:	2120      	movs	r1, #32
 80023aa:	481b      	ldr	r0, [pc, #108]	@ (8002418 <connect_xbt_pin+0x134>)
 80023ac:	f000 f85a 	bl	8002464 <drive_relay>
			drive_relay(SSR_6_GPIO_Port, SSR_6_Pin, 1); // SET SSR6
 80023b0:	2201      	movs	r2, #1
 80023b2:	2140      	movs	r1, #64	@ 0x40
 80023b4:	4816      	ldr	r0, [pc, #88]	@ (8002410 <connect_xbt_pin+0x12c>)
 80023b6:	f000 f855 	bl	8002464 <drive_relay>
			break;
 80023ba:	e01f      	b.n	80023fc <connect_xbt_pin+0x118>
		case 7:
			drive_relay(RELAY_K7_GPIO_Port, RELAY_K7_Pin, RELAY_ON_TIME); // SET relay k7
 80023bc:	220a      	movs	r2, #10
 80023be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80023c2:	4813      	ldr	r0, [pc, #76]	@ (8002410 <connect_xbt_pin+0x12c>)
 80023c4:	f000 f84e 	bl	8002464 <drive_relay>
			drive_relay(SSR_7_GPIO_Port, SSR_7_Pin, 1); // SET SSR7
 80023c8:	2201      	movs	r2, #1
 80023ca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80023ce:	4812      	ldr	r0, [pc, #72]	@ (8002418 <connect_xbt_pin+0x134>)
 80023d0:	f000 f848 	bl	8002464 <drive_relay>
			break;
 80023d4:	e012      	b.n	80023fc <connect_xbt_pin+0x118>
		case 8:
			drive_relay(RELAY_K8_GPIO_Port, RELAY_K8_Pin, RELAY_ON_TIME); // SET relay k8
 80023d6:	220a      	movs	r2, #10
 80023d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80023dc:	480f      	ldr	r0, [pc, #60]	@ (800241c <connect_xbt_pin+0x138>)
 80023de:	f000 f841 	bl	8002464 <drive_relay>
			drive_relay(SSR_8_GPIO_Port, SSR_8_Pin, 1); // SET SSR8
 80023e2:	2201      	movs	r2, #1
 80023e4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80023e8:	480b      	ldr	r0, [pc, #44]	@ (8002418 <connect_xbt_pin+0x134>)
 80023ea:	f000 f83b 	bl	8002464 <drive_relay>
			break;
 80023ee:	e005      	b.n	80023fc <connect_xbt_pin+0x118>
		default:
			printf("\r\n* ERROR: XBT %i relay not found *\r\n", xbtNum);
 80023f0:	79fb      	ldrb	r3, [r7, #7]
 80023f2:	4619      	mov	r1, r3
 80023f4:	480a      	ldr	r0, [pc, #40]	@ (8002420 <connect_xbt_pin+0x13c>)
 80023f6:	f006 f903 	bl	8008600 <iprintf>
			break;
 80023fa:	bf00      	nop
		}
		relayLock = reFree;
 80023fc:	4b03      	ldr	r3, [pc, #12]	@ (800240c <connect_xbt_pin+0x128>)
 80023fe:	2200      	movs	r2, #0
 8002400:	701a      	strb	r2, [r3, #0]
	}
}
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	2000017d 	.word	0x2000017d
 8002410:	40011000 	.word	0x40011000
 8002414:	40011400 	.word	0x40011400
 8002418:	40010c00 	.word	0x40010c00
 800241c:	40010800 	.word	0x40010800
 8002420:	0800a178 	.word	0x0800a178

08002424 <relay_init>:

void relay_init(void){
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
	drive_relay(RELAY_RESET_1_GPIO_Port, RELAY_RESET_1_Pin, RELAY_ON_TIME);  // RESET relay k1, k2, k3, k4, SSR1, SSR2, SSR3, SSR4
 8002428:	220a      	movs	r2, #10
 800242a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800242e:	480b      	ldr	r0, [pc, #44]	@ (800245c <relay_init+0x38>)
 8002430:	f000 f818 	bl	8002464 <drive_relay>
	HAL_Delay(RELAY_INTERVAL_TIME);
 8002434:	200a      	movs	r0, #10
 8002436:	f001 f96d 	bl	8003714 <HAL_Delay>
	drive_relay(RELAY_RESET_2_GPIO_Port, RELAY_RESET_2_Pin, RELAY_ON_TIME); // RESET relay k5, k6, k7, k8, SSR5, SSR6, SSR7, SSR8
 800243a:	220a      	movs	r2, #10
 800243c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002440:	4807      	ldr	r0, [pc, #28]	@ (8002460 <relay_init+0x3c>)
 8002442:	f000 f80f 	bl	8002464 <drive_relay>
	HAL_Delay(RELAY_INTERVAL_TIME);
 8002446:	200a      	movs	r0, #10
 8002448:	f001 f964 	bl	8003714 <HAL_Delay>
	drive_relay(RELAY_RESET_3_GPIO_Port, RELAY_RESET_3_Pin, RELAY_ON_TIME); // RESET relay k9, k10, k11, k12 (GND, calibration and continuity circuit)
 800244c:	220a      	movs	r2, #10
 800244e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002452:	4803      	ldr	r0, [pc, #12]	@ (8002460 <relay_init+0x3c>)
 8002454:	f000 f806 	bl	8002464 <drive_relay>
}
 8002458:	bf00      	nop
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40010c00 	.word	0x40010c00
 8002460:	40011000 	.word	0x40011000

08002464 <drive_relay>:


void drive_relay(GPIO_TypeDef * relayPort, uint16_t relayPin, uint8_t onTime){
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	460b      	mov	r3, r1
 800246e:	807b      	strh	r3, [r7, #2]
 8002470:	4613      	mov	r3, r2
 8002472:	707b      	strb	r3, [r7, #1]
	// SET relay k
	HAL_GPIO_WritePin(relayPort, relayPin, SET); // set
 8002474:	887b      	ldrh	r3, [r7, #2]
 8002476:	2201      	movs	r2, #1
 8002478:	4619      	mov	r1, r3
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f002 faba 	bl	80049f4 <HAL_GPIO_WritePin>
	HAL_Delay(onTime); // time coil is driven in ms
 8002480:	787b      	ldrb	r3, [r7, #1]
 8002482:	4618      	mov	r0, r3
 8002484:	f001 f946 	bl	8003714 <HAL_Delay>
	HAL_GPIO_WritePin(relayPort, relayPin, RESET); // release
 8002488:	887b      	ldrh	r3, [r7, #2]
 800248a:	2200      	movs	r2, #0
 800248c:	4619      	mov	r1, r3
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f002 fab0 	bl	80049f4 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8002494:	2002      	movs	r0, #2
 8002496:	f001 f93d 	bl	8003714 <HAL_Delay>
}
 800249a:	bf00      	nop
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
	...

080024a4 <extend_all_pins>:

// ALV2 (previous firmware) had a sequence with 4 delays of 8 ms, repeated in 300 steps = 4 * 8 ms * 300 = 7200 ms

/* Extend all pins up to countLimit or eeprom.tubes, whichever is smaller
 * Parameter: countLimit, extend all pins up to this number */
void extend_all_pins(uint8_t countLimit){
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	71fb      	strb	r3, [r7, #7]
	if(countLimit > 0){
 80024ae:	79fb      	ldrb	r3, [r7, #7]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d012      	beq.n	80024da <extend_all_pins+0x36>
		for(uint8_t i = 1; (i <= countLimit) && (i <= launcher.tubeCount); i++){
 80024b4:	2301      	movs	r3, #1
 80024b6:	73fb      	strb	r3, [r7, #15]
 80024b8:	e006      	b.n	80024c8 <extend_all_pins+0x24>
			extend_pin(i);
 80024ba:	7bfb      	ldrb	r3, [r7, #15]
 80024bc:	4618      	mov	r0, r3
 80024be:	f000 f835 	bl	800252c <extend_pin>
		for(uint8_t i = 1; (i <= countLimit) && (i <= launcher.tubeCount); i++){
 80024c2:	7bfb      	ldrb	r3, [r7, #15]
 80024c4:	3301      	adds	r3, #1
 80024c6:	73fb      	strb	r3, [r7, #15]
 80024c8:	7bfa      	ldrb	r2, [r7, #15]
 80024ca:	79fb      	ldrb	r3, [r7, #7]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d804      	bhi.n	80024da <extend_all_pins+0x36>
 80024d0:	4b04      	ldr	r3, [pc, #16]	@ (80024e4 <extend_all_pins+0x40>)
 80024d2:	785b      	ldrb	r3, [r3, #1]
 80024d4:	7bfa      	ldrb	r2, [r7, #15]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d9ef      	bls.n	80024ba <extend_all_pins+0x16>
		}
	}
}
 80024da:	bf00      	nop
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	20000000 	.word	0x20000000

080024e8 <retract_all_pins>:

/* Retract all pins up to countLimit or eeprom.tubes, whichever is smaller
 * Parameter: countLimit, retract all pins up to this number */
void retract_all_pins(uint8_t countLimit){
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	4603      	mov	r3, r0
 80024f0:	71fb      	strb	r3, [r7, #7]
	if(countLimit > 0){
 80024f2:	79fb      	ldrb	r3, [r7, #7]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d012      	beq.n	800251e <retract_all_pins+0x36>
		for(uint8_t i = 1; (i <= countLimit) && (i <= launcher.tubeCount); i++){
 80024f8:	2301      	movs	r3, #1
 80024fa:	73fb      	strb	r3, [r7, #15]
 80024fc:	e006      	b.n	800250c <retract_all_pins+0x24>
			retract_pin(i);
 80024fe:	7bfb      	ldrb	r3, [r7, #15]
 8002500:	4618      	mov	r0, r3
 8002502:	f000 f821 	bl	8002548 <retract_pin>
		for(uint8_t i = 1; (i <= countLimit) && (i <= launcher.tubeCount); i++){
 8002506:	7bfb      	ldrb	r3, [r7, #15]
 8002508:	3301      	adds	r3, #1
 800250a:	73fb      	strb	r3, [r7, #15]
 800250c:	7bfa      	ldrb	r2, [r7, #15]
 800250e:	79fb      	ldrb	r3, [r7, #7]
 8002510:	429a      	cmp	r2, r3
 8002512:	d804      	bhi.n	800251e <retract_all_pins+0x36>
 8002514:	4b04      	ldr	r3, [pc, #16]	@ (8002528 <retract_all_pins+0x40>)
 8002516:	785b      	ldrb	r3, [r3, #1]
 8002518:	7bfa      	ldrb	r2, [r7, #15]
 800251a:	429a      	cmp	r2, r3
 800251c:	d9ef      	bls.n	80024fe <retract_all_pins+0x16>
		}
	}
}
 800251e:	bf00      	nop
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	20000000 	.word	0x20000000

0800252c <extend_pin>:


/* Extend pin wrapper
 * Parameter: xbtNum [1-8] */
void extend_pin(uint8_t xbtNum){
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	71fb      	strb	r3, [r7, #7]
	if (MOTOR_WIRING == 0){ // select spin direction based on wiring
		motor_select(xbtNum, CW);
 8002536:	79fb      	ldrb	r3, [r7, #7]
 8002538:	2101      	movs	r1, #1
 800253a:	4618      	mov	r0, r3
 800253c:	f000 f812 	bl	8002564 <motor_select>
	} else {
		motor_select(xbtNum, CCW);
	}
}
 8002540:	bf00      	nop
 8002542:	3708      	adds	r7, #8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <retract_pin>:

/* Retract pin wrapper
 * Parameter: xbtNum [1-8] */
void retract_pin(uint8_t xbtNum){
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	4603      	mov	r3, r0
 8002550:	71fb      	strb	r3, [r7, #7]
	if (MOTOR_WIRING == 0){ // select spin direction based on wiring
		motor_select(xbtNum, CCW);
 8002552:	79fb      	ldrb	r3, [r7, #7]
 8002554:	2100      	movs	r1, #0
 8002556:	4618      	mov	r0, r3
 8002558:	f000 f804 	bl	8002564 <motor_select>
	} else {
		motor_select(xbtNum, CW);
	}
}
 800255c:	bf00      	nop
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <motor_select>:

/* Motor driver selector
 * direction to retract/extend may be different based on wiring
 * Parameters: XBT number, direction {CW,CCW} */
void motor_select(uint8_t xbtNum, motorDir_t dir){
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	4603      	mov	r3, r0
 800256c:	460a      	mov	r2, r1
 800256e:	71fb      	strb	r3, [r7, #7]
 8002570:	4613      	mov	r3, r2
 8002572:	71bb      	strb	r3, [r7, #6]
	if(motorLock == mFree){
 8002574:	4b35      	ldr	r3, [pc, #212]	@ (800264c <motor_select+0xe8>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d162      	bne.n	8002642 <motor_select+0xde>
		motorLock = mLocked;
 800257c:	4b33      	ldr	r3, [pc, #204]	@ (800264c <motor_select+0xe8>)
 800257e:	2201      	movs	r2, #1
 8002580:	701a      	strb	r2, [r3, #0]
		switch (xbtNum){
 8002582:	79fb      	ldrb	r3, [r7, #7]
 8002584:	3b01      	subs	r3, #1
 8002586:	2b07      	cmp	r3, #7
 8002588:	d852      	bhi.n	8002630 <motor_select+0xcc>
 800258a:	a201      	add	r2, pc, #4	@ (adr r2, 8002590 <motor_select+0x2c>)
 800258c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002590:	080025b1 	.word	0x080025b1
 8002594:	080025c1 	.word	0x080025c1
 8002598:	080025d1 	.word	0x080025d1
 800259c:	080025e1 	.word	0x080025e1
 80025a0:	080025f1 	.word	0x080025f1
 80025a4:	08002601 	.word	0x08002601
 80025a8:	08002611 	.word	0x08002611
 80025ac:	08002621 	.word	0x08002621
		case 1:
			drive_motor(ENABLE_M1_GPIO_Port, ENABLE_M1_Pin, dir, motor.runTime);
 80025b0:	4b27      	ldr	r3, [pc, #156]	@ (8002650 <motor_select+0xec>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	79ba      	ldrb	r2, [r7, #6]
 80025b6:	2104      	movs	r1, #4
 80025b8:	4826      	ldr	r0, [pc, #152]	@ (8002654 <motor_select+0xf0>)
 80025ba:	f000 f881 	bl	80026c0 <drive_motor>
			break;
 80025be:	e03d      	b.n	800263c <motor_select+0xd8>
		case 2:
			drive_motor(ENABLE_M2_GPIO_Port, ENABLE_M2_Pin, dir, motor.runTime);
 80025c0:	4b23      	ldr	r3, [pc, #140]	@ (8002650 <motor_select+0xec>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	79ba      	ldrb	r2, [r7, #6]
 80025c6:	2108      	movs	r1, #8
 80025c8:	4822      	ldr	r0, [pc, #136]	@ (8002654 <motor_select+0xf0>)
 80025ca:	f000 f879 	bl	80026c0 <drive_motor>
			break;
 80025ce:	e035      	b.n	800263c <motor_select+0xd8>
		case 3:
			drive_motor(ENABLE_M3_GPIO_Port, ENABLE_M3_Pin, dir, motor.runTime);
 80025d0:	4b1f      	ldr	r3, [pc, #124]	@ (8002650 <motor_select+0xec>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	79ba      	ldrb	r2, [r7, #6]
 80025d6:	2101      	movs	r1, #1
 80025d8:	481f      	ldr	r0, [pc, #124]	@ (8002658 <motor_select+0xf4>)
 80025da:	f000 f871 	bl	80026c0 <drive_motor>
			break;
 80025de:	e02d      	b.n	800263c <motor_select+0xd8>
		case 4:
			drive_motor(ENABLE_M4_GPIO_Port, ENABLE_M4_Pin, dir, motor.runTime);
 80025e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002650 <motor_select+0xec>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	79ba      	ldrb	r2, [r7, #6]
 80025e6:	2102      	movs	r1, #2
 80025e8:	481b      	ldr	r0, [pc, #108]	@ (8002658 <motor_select+0xf4>)
 80025ea:	f000 f869 	bl	80026c0 <drive_motor>
			break;
 80025ee:	e025      	b.n	800263c <motor_select+0xd8>
		case 5:
			drive_motor(ENABLE_M5_GPIO_Port, ENABLE_M5_Pin, dir, motor.runTime);
 80025f0:	4b17      	ldr	r3, [pc, #92]	@ (8002650 <motor_select+0xec>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	79ba      	ldrb	r2, [r7, #6]
 80025f6:	2110      	movs	r1, #16
 80025f8:	4817      	ldr	r0, [pc, #92]	@ (8002658 <motor_select+0xf4>)
 80025fa:	f000 f861 	bl	80026c0 <drive_motor>
			break;
 80025fe:	e01d      	b.n	800263c <motor_select+0xd8>
		case 6:
			drive_motor(ENABLE_M6_GPIO_Port, ENABLE_M6_Pin, dir, motor.runTime);
 8002600:	4b13      	ldr	r3, [pc, #76]	@ (8002650 <motor_select+0xec>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	79ba      	ldrb	r2, [r7, #6]
 8002606:	2120      	movs	r1, #32
 8002608:	4813      	ldr	r0, [pc, #76]	@ (8002658 <motor_select+0xf4>)
 800260a:	f000 f859 	bl	80026c0 <drive_motor>
			break;
 800260e:	e015      	b.n	800263c <motor_select+0xd8>
		case 7:
			drive_motor(ENABLE_M7_GPIO_Port, ENABLE_M7_Pin, dir, motor.runTime);
 8002610:	4b0f      	ldr	r3, [pc, #60]	@ (8002650 <motor_select+0xec>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	79ba      	ldrb	r2, [r7, #6]
 8002616:	2140      	movs	r1, #64	@ 0x40
 8002618:	480f      	ldr	r0, [pc, #60]	@ (8002658 <motor_select+0xf4>)
 800261a:	f000 f851 	bl	80026c0 <drive_motor>
			break;
 800261e:	e00d      	b.n	800263c <motor_select+0xd8>
		case 8:
			drive_motor(ENABLE_M8_GPIO_Port, ENABLE_M8_Pin, dir, motor.runTime);
 8002620:	4b0b      	ldr	r3, [pc, #44]	@ (8002650 <motor_select+0xec>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	79ba      	ldrb	r2, [r7, #6]
 8002626:	2180      	movs	r1, #128	@ 0x80
 8002628:	480b      	ldr	r0, [pc, #44]	@ (8002658 <motor_select+0xf4>)
 800262a:	f000 f849 	bl	80026c0 <drive_motor>
			break;
 800262e:	e005      	b.n	800263c <motor_select+0xd8>
		default:
			printf("\r\n* ERROR: XBT %i motor not found *\r\n", xbtNum);
 8002630:	79fb      	ldrb	r3, [r7, #7]
 8002632:	4619      	mov	r1, r3
 8002634:	4809      	ldr	r0, [pc, #36]	@ (800265c <motor_select+0xf8>)
 8002636:	f005 ffe3 	bl	8008600 <iprintf>
			break;
 800263a:	bf00      	nop
		}
		motorLock = mFree;
 800263c:	4b03      	ldr	r3, [pc, #12]	@ (800264c <motor_select+0xe8>)
 800263e:	2200      	movs	r2, #0
 8002640:	701a      	strb	r2, [r3, #0]
	}
}
 8002642:	bf00      	nop
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	2000017c 	.word	0x2000017c
 8002650:	2000000c 	.word	0x2000000c
 8002654:	40011000 	.word	0x40011000
 8002658:	40010800 	.word	0x40010800
 800265c:	0800a1a0 	.word	0x0800a1a0

08002660 <motor_init>:


void motor_init(void){
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(ENABLE_M1_GPIO_Port, ENABLE_M1_Pin, RESET); // start disabled
 8002664:	2200      	movs	r2, #0
 8002666:	2104      	movs	r1, #4
 8002668:	4813      	ldr	r0, [pc, #76]	@ (80026b8 <motor_init+0x58>)
 800266a:	f002 f9c3 	bl	80049f4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M2_GPIO_Port, ENABLE_M2_Pin, RESET); // start disabled
 800266e:	2200      	movs	r2, #0
 8002670:	2108      	movs	r1, #8
 8002672:	4811      	ldr	r0, [pc, #68]	@ (80026b8 <motor_init+0x58>)
 8002674:	f002 f9be 	bl	80049f4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M3_GPIO_Port, ENABLE_M3_Pin, RESET); // start disabled
 8002678:	2200      	movs	r2, #0
 800267a:	2101      	movs	r1, #1
 800267c:	480f      	ldr	r0, [pc, #60]	@ (80026bc <motor_init+0x5c>)
 800267e:	f002 f9b9 	bl	80049f4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M4_GPIO_Port, ENABLE_M4_Pin, RESET); // start disabled
 8002682:	2200      	movs	r2, #0
 8002684:	2102      	movs	r1, #2
 8002686:	480d      	ldr	r0, [pc, #52]	@ (80026bc <motor_init+0x5c>)
 8002688:	f002 f9b4 	bl	80049f4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M5_GPIO_Port, ENABLE_M5_Pin, RESET); // start disabled
 800268c:	2200      	movs	r2, #0
 800268e:	2110      	movs	r1, #16
 8002690:	480a      	ldr	r0, [pc, #40]	@ (80026bc <motor_init+0x5c>)
 8002692:	f002 f9af 	bl	80049f4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M6_GPIO_Port, ENABLE_M6_Pin, RESET); // start disabled
 8002696:	2200      	movs	r2, #0
 8002698:	2120      	movs	r1, #32
 800269a:	4808      	ldr	r0, [pc, #32]	@ (80026bc <motor_init+0x5c>)
 800269c:	f002 f9aa 	bl	80049f4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M7_GPIO_Port, ENABLE_M7_Pin, RESET); // start disabled
 80026a0:	2200      	movs	r2, #0
 80026a2:	2140      	movs	r1, #64	@ 0x40
 80026a4:	4805      	ldr	r0, [pc, #20]	@ (80026bc <motor_init+0x5c>)
 80026a6:	f002 f9a5 	bl	80049f4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ENABLE_M8_GPIO_Port, ENABLE_M8_Pin, RESET); // start disabled
 80026aa:	2200      	movs	r2, #0
 80026ac:	2180      	movs	r1, #128	@ 0x80
 80026ae:	4803      	ldr	r0, [pc, #12]	@ (80026bc <motor_init+0x5c>)
 80026b0:	f002 f9a0 	bl	80049f4 <HAL_GPIO_WritePin>
}
 80026b4:	bf00      	nop
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40011000 	.word	0x40011000
 80026bc:	40010800 	.word	0x40010800

080026c0 <drive_motor>:

void drive_motor(GPIO_TypeDef * motorPort, uint16_t motorPin, motorDir_t motorDirection, uint32_t runTime ){
 80026c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026c4:	f5ad 7d30 	sub.w	sp, sp, #704	@ 0x2c0
 80026c8:	af08      	add	r7, sp, #32
 80026ca:	f507 7428 	add.w	r4, r7, #672	@ 0x2a0
 80026ce:	f5a4 7425 	sub.w	r4, r4, #660	@ 0x294
 80026d2:	6020      	str	r0, [r4, #0]
 80026d4:	4608      	mov	r0, r1
 80026d6:	4611      	mov	r1, r2
 80026d8:	f507 7228 	add.w	r2, r7, #672	@ 0x2a0
 80026dc:	f5a2 7227 	sub.w	r2, r2, #668	@ 0x29c
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 80026e6:	f2a3 2396 	subw	r3, r3, #662	@ 0x296
 80026ea:	4602      	mov	r2, r0
 80026ec:	801a      	strh	r2, [r3, #0]
 80026ee:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 80026f2:	f2a3 2397 	subw	r3, r3, #663	@ 0x297
 80026f6:	460a      	mov	r2, r1
 80026f8:	701a      	strb	r2, [r3, #0]
	uint32_t timeStart, timeNow, adcReading = 0;
 80026fa:	2300      	movs	r3, #0
 80026fc:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
	uint16_t adcBuffer[ADC_BUFFER_SAMPLES] = {'\0'}; // store 3 ADC measurements in DMA mode: [Vin0,Im0,TempInt0,Vin1,Im1,...]
 8002700:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 8002704:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8002708:	4618      	mov	r0, r3
 800270a:	f44f 7316 	mov.w	r3, #600	@ 0x258
 800270e:	461a      	mov	r2, r3
 8002710:	2100      	movs	r1, #0
 8002712:	f006 f971 	bl	80089f8 <memset>
	uint32_t rawCurrent = 0, rawVoltage = 0, rawTemperature = 0;
 8002716:	2300      	movs	r3, #0
 8002718:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 800271c:	2300      	movs	r3, #0
 800271e:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
 8002722:	2300      	movs	r3, #0
 8002724:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
	float current = 0, voltage = 0, temperature = 0;
 8002728:	f04f 0300 	mov.w	r3, #0
 800272c:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 8002730:	f04f 0300 	mov.w	r3, #0
 8002734:	f8c7 3280 	str.w	r3, [r7, #640]	@ 0x280
 8002738:	f04f 0300 	mov.w	r3, #0
 800273c:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
	uint8_t current_dec = 0, voltage_dec = 0, temperature_dec = 0; // display 2 decimal values
 8002740:	2300      	movs	r3, #0
 8002742:	f887 327b 	strb.w	r3, [r7, #635]	@ 0x27b
 8002746:	2300      	movs	r3, #0
 8002748:	f887 327a 	strb.w	r3, [r7, #634]	@ 0x27a
 800274c:	2300      	movs	r3, #0
 800274e:	f887 3279 	strb.w	r3, [r7, #633]	@ 0x279
//	const float AVG_SLOPE_avg = 4.3, AVG_SLOPE_min = 4.0, AVG_SLOPE_max = 4.6; // average slope [mV/C]
//	const float V25_avg = 1430, V25_min = 1340, V25_max = 1520 ; // Voltage at 25 degrees [mV]
	const float AVG_SLOPE_avg = 4.3, V25_avg = 1430;
 8002752:	4b4b      	ldr	r3, [pc, #300]	@ (8002880 <drive_motor+0x1c0>)
 8002754:	f8c7 3274 	str.w	r3, [r7, #628]	@ 0x274
 8002758:	4b4a      	ldr	r3, [pc, #296]	@ (8002884 <drive_motor+0x1c4>)
 800275a:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
	uint16_t adcSampleCount = 0;
 800275e:	2300      	movs	r3, #0
 8002760:	f8a7 3292 	strh.w	r3, [r7, #658]	@ 0x292
//	char adcmsg[50];

	// Initialize PWM
	// HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_3 ); // Start STEP signal >> counter to toggle every 20/1000 sec = 50hz
	HAL_GPIO_WritePin(motorPort, motorPin, RESET); // make sure driver pin is disabled
 8002764:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 8002768:	f2a3 2396 	subw	r3, r3, #662	@ 0x296
 800276c:	8819      	ldrh	r1, [r3, #0]
 800276e:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 8002772:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8002776:	2200      	movs	r2, #0
 8002778:	6818      	ldr	r0, [r3, #0]
 800277a:	f002 f93b 	bl	80049f4 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // initialize PWM pulses for DRV8826
 800277e:	2108      	movs	r1, #8
 8002780:	4841      	ldr	r0, [pc, #260]	@ (8002888 <drive_motor+0x1c8>)
 8002782:	f003 ff0b 	bl	800659c <HAL_TIM_PWM_Start>
	//HAL_Delay(10); // wait for the motor to stop
	HAL_GPIO_WritePin(DIR_GPIO_Port,DIR_Pin, motorDirection); // set motor direction
 8002786:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 800278a:	f2a3 2397 	subw	r3, r3, #663	@ 0x297
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	461a      	mov	r2, r3
 8002792:	2110      	movs	r1, #16
 8002794:	483d      	ldr	r0, [pc, #244]	@ (800288c <drive_motor+0x1cc>)
 8002796:	f002 f92d 	bl	80049f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motorPort, motorPin, SET); // enable driver to run motor
 800279a:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 800279e:	f2a3 2396 	subw	r3, r3, #662	@ 0x296
 80027a2:	8819      	ldrh	r1, [r3, #0]
 80027a4:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 80027a8:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 80027ac:	2201      	movs	r2, #1
 80027ae:	6818      	ldr	r0, [r3, #0]
 80027b0:	f002 f920 	bl	80049f4 <HAL_GPIO_WritePin>

	timeStart = HAL_GetTick(); // initial timer count using SysTick timer (32 bit variable uwTick incremented every 1 ms, MAX = 50 days)
 80027b4:	f000 ffa4 	bl	8003700 <HAL_GetTick>
 80027b8:	f8c7 026c 	str.w	r0, [r7, #620]	@ 0x26c

	// get 1 current, voltage, temp reading every 500 ms using TIM2 interrupts
	//HAL_TIM_Base_Start_IT(&htim4); // generates 1 interrupt every 500 ms
	//HAL_ADC_Start_DMA(&hadc1, adcBuffer, 3); // take first sample at motor startup
	HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_4); // trigger adc conversions in DMA mode every x ms
 80027bc:	210c      	movs	r1, #12
 80027be:	4834      	ldr	r0, [pc, #208]	@ (8002890 <drive_motor+0x1d0>)
 80027c0:	f003 fff2 	bl	80067a8 <HAL_TIM_PWM_Start_IT>

	while(1){
		// track motor runtime and break loop after desired time elapsed
		timeNow = HAL_GetTick();
 80027c4:	f000 ff9c 	bl	8003700 <HAL_GetTick>
 80027c8:	f8c7 0268 	str.w	r0, [r7, #616]	@ 0x268
		if(timeNow >= timeStart){
 80027cc:	f8d7 2268 	ldr.w	r2, [r7, #616]	@ 0x268
 80027d0:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d30c      	bcc.n	80027f2 <drive_motor+0x132>
			if((timeNow - timeStart) >= runTime) break;
 80027d8:	f8d7 2268 	ldr.w	r2, [r7, #616]	@ 0x268
 80027dc:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	f507 7228 	add.w	r2, r7, #672	@ 0x2a0
 80027e6:	f5a2 7227 	sub.w	r2, r2, #668	@ 0x29c
 80027ea:	6812      	ldr	r2, [r2, #0]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d80e      	bhi.n	800280e <drive_motor+0x14e>
 80027f0:	e1e5      	b.n	8002bbe <drive_motor+0x4fe>
		} else { // if timeNow < timeStart, this only happens when uwTick ~ 2^32 (50 days) and there was an overflow
			if( (HAL_MAX_DELAY - timeStart + timeNow) >= runTime) break;
 80027f2:	f8d7 2268 	ldr.w	r2, [r7, #616]	@ 0x268
 80027f6:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	3b01      	subs	r3, #1
 80027fe:	f507 7228 	add.w	r2, r7, #672	@ 0x2a0
 8002802:	f5a2 7227 	sub.w	r2, r2, #668	@ 0x29c
 8002806:	6812      	ldr	r2, [r2, #0]
 8002808:	429a      	cmp	r2, r3
 800280a:	f240 81d7 	bls.w	8002bbc <drive_motor+0x4fc>
		}
		// check if user sent stop signal
		if(active == rxStatus){ // set to active with UART RX interrupt
 800280e:	4b21      	ldr	r3, [pc, #132]	@ (8002894 <drive_motor+0x1d4>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d10a      	bne.n	800282c <drive_motor+0x16c>
			rxStatus = idle;
 8002816:	4b1f      	ldr	r3, [pc, #124]	@ (8002894 <drive_motor+0x1d4>)
 8002818:	2200      	movs	r2, #0
 800281a:	701a      	strb	r2, [r3, #0]
			if(rxChar == '@'){
 800281c:	4b1e      	ldr	r3, [pc, #120]	@ (8002898 <drive_motor+0x1d8>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	2b40      	cmp	r3, #64	@ 0x40
 8002822:	d103      	bne.n	800282c <drive_motor+0x16c>
				printf("Motor Stopped by user!\r\n");
 8002824:	481d      	ldr	r0, [pc, #116]	@ (800289c <drive_motor+0x1dc>)
 8002826:	f005 ff53 	bl	80086d0 <puts>
				break;
 800282a:	e1c8      	b.n	8002bbe <drive_motor+0x4fe>
//			adcTimerTrigger = 0;
//			HAL_ADC_Start_DMA(&hadc1, adcBuffer, ADC_BUFFER_SAMPLES); // start conversion scan
//		}

		// when timer 4 sets the flag, take samples, average and print
		if(adcTimerTrigger == 1){
 800282c:	4b1c      	ldr	r3, [pc, #112]	@ (80028a0 <drive_motor+0x1e0>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d1c7      	bne.n	80027c4 <drive_motor+0x104>
			// reset flag
			adcTimerTrigger = 0;
 8002834:	4b1a      	ldr	r3, [pc, #104]	@ (80028a0 <drive_motor+0x1e0>)
 8002836:	2200      	movs	r2, #0
 8002838:	701a      	strb	r2, [r3, #0]
			// Sample ADC scan (3 channels)
			for(uint16_t j = 0; j < ADC_BUFFER_SAMPLES/3; j++){
 800283a:	2300      	movs	r3, #0
 800283c:	f8a7 3290 	strh.w	r3, [r7, #656]	@ 0x290
 8002840:	e00c      	b.n	800285c <drive_motor+0x19c>
				HAL_ADC_Start_DMA(&hadc1, adcBuffer, ADC_BUFFER_SAMPLES);
 8002842:	f107 0310 	add.w	r3, r7, #16
 8002846:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800284a:	4619      	mov	r1, r3
 800284c:	4815      	ldr	r0, [pc, #84]	@ (80028a4 <drive_motor+0x1e4>)
 800284e:	f001 f85d 	bl	800390c <HAL_ADC_Start_DMA>
			for(uint16_t j = 0; j < ADC_BUFFER_SAMPLES/3; j++){
 8002852:	f8b7 3290 	ldrh.w	r3, [r7, #656]	@ 0x290
 8002856:	3301      	adds	r3, #1
 8002858:	f8a7 3290 	strh.w	r3, [r7, #656]	@ 0x290
 800285c:	f8b7 3290 	ldrh.w	r3, [r7, #656]	@ 0x290
 8002860:	2b63      	cmp	r3, #99	@ 0x63
 8002862:	d9ee      	bls.n	8002842 <drive_motor+0x182>
			}

			// reset accumulators
			rawCurrent = 0;
 8002864:	2300      	movs	r3, #0
 8002866:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
			rawVoltage = 0;
 800286a:	2300      	movs	r3, #0
 800286c:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
			rawTemperature = 0;
 8002870:	2300      	movs	r3, #0
 8002872:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
			// average
			for(uint16_t i = 0; i < ADC_BUFFER_SAMPLES; i=i+3){
 8002876:	2300      	movs	r3, #0
 8002878:	f8a7 328e 	strh.w	r3, [r7, #654]	@ 0x28e
 800287c:	e045      	b.n	800290a <drive_motor+0x24a>
 800287e:	bf00      	nop
 8002880:	4089999a 	.word	0x4089999a
 8002884:	44b2c000 	.word	0x44b2c000
 8002888:	20000188 	.word	0x20000188
 800288c:	40011000 	.word	0x40011000
 8002890:	200001d0 	.word	0x200001d0
 8002894:	2000017e 	.word	0x2000017e
 8002898:	20000181 	.word	0x20000181
 800289c:	0800a1c8 	.word	0x0800a1c8
 80028a0:	20000182 	.word	0x20000182
 80028a4:	200000b4 	.word	0x200000b4
				rawVoltage += adcBuffer[i];
 80028a8:	f8b7 228e 	ldrh.w	r2, [r7, #654]	@ 0x28e
 80028ac:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 80028b0:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 80028b4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80028b8:	461a      	mov	r2, r3
 80028ba:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 80028be:	4413      	add	r3, r2
 80028c0:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
				rawCurrent += adcBuffer[i+1];
 80028c4:	f8b7 328e 	ldrh.w	r3, [r7, #654]	@ 0x28e
 80028c8:	1c5a      	adds	r2, r3, #1
 80028ca:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 80028ce:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 80028d2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80028d6:	461a      	mov	r2, r3
 80028d8:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 80028dc:	4413      	add	r3, r2
 80028de:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
				rawTemperature += adcBuffer[i+2];
 80028e2:	f8b7 328e 	ldrh.w	r3, [r7, #654]	@ 0x28e
 80028e6:	1c9a      	adds	r2, r3, #2
 80028e8:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 80028ec:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 80028f0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80028f4:	461a      	mov	r2, r3
 80028f6:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 80028fa:	4413      	add	r3, r2
 80028fc:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
			for(uint16_t i = 0; i < ADC_BUFFER_SAMPLES; i=i+3){
 8002900:	f8b7 328e 	ldrh.w	r3, [r7, #654]	@ 0x28e
 8002904:	3303      	adds	r3, #3
 8002906:	f8a7 328e 	strh.w	r3, [r7, #654]	@ 0x28e
 800290a:	f8b7 328e 	ldrh.w	r3, [r7, #654]	@ 0x28e
 800290e:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8002912:	d3c9      	bcc.n	80028a8 <drive_motor+0x1e8>
			}
			// calculate averages and real values
			// voltage
			rawVoltage = (uint32_t) ((float) rawVoltage) / ((float) ADC_BUFFER_SAMPLES / 3.0); // ADC counts, divide by 3 num of buffer slots since each scan has 3 readings
 8002914:	f8d7 0298 	ldr.w	r0, [r7, #664]	@ 0x298
 8002918:	f7fe f9c2 	bl	8000ca0 <__aeabi_ui2f>
 800291c:	4603      	mov	r3, r0
 800291e:	4618      	mov	r0, r3
 8002920:	f7fe fa3c 	bl	8000d9c <__aeabi_f2uiz>
 8002924:	4603      	mov	r3, r0
 8002926:	4618      	mov	r0, r3
 8002928:	f7fd fe08 	bl	800053c <__aeabi_ui2d>
 800292c:	f04f 0200 	mov.w	r2, #0
 8002930:	4bbd      	ldr	r3, [pc, #756]	@ (8002c28 <drive_motor+0x568>)
 8002932:	f7fd ffa7 	bl	8000884 <__aeabi_ddiv>
 8002936:	4602      	mov	r2, r0
 8002938:	460b      	mov	r3, r1
 800293a:	4610      	mov	r0, r2
 800293c:	4619      	mov	r1, r3
 800293e:	f7fe f889 	bl	8000a54 <__aeabi_d2uiz>
 8002942:	4603      	mov	r3, r0
 8002944:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
			voltage = (float) rawVoltage * 0.0083 + 0.3963; // calibration coeff should be taken from eeprom
 8002948:	f8d7 0298 	ldr.w	r0, [r7, #664]	@ 0x298
 800294c:	f7fe f9a8 	bl	8000ca0 <__aeabi_ui2f>
 8002950:	4603      	mov	r3, r0
 8002952:	4618      	mov	r0, r3
 8002954:	f7fd fe14 	bl	8000580 <__aeabi_f2d>
 8002958:	a3a9      	add	r3, pc, #676	@ (adr r3, 8002c00 <drive_motor+0x540>)
 800295a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800295e:	f7fd fe67 	bl	8000630 <__aeabi_dmul>
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
 8002966:	4610      	mov	r0, r2
 8002968:	4619      	mov	r1, r3
 800296a:	a3a7      	add	r3, pc, #668	@ (adr r3, 8002c08 <drive_motor+0x548>)
 800296c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002970:	f7fd fca8 	bl	80002c4 <__adddf3>
 8002974:	4602      	mov	r2, r0
 8002976:	460b      	mov	r3, r1
 8002978:	4610      	mov	r0, r2
 800297a:	4619      	mov	r1, r3
 800297c:	f7fe f88a 	bl	8000a94 <__aeabi_d2f>
 8002980:	4603      	mov	r3, r0
 8002982:	f8c7 3280 	str.w	r3, [r7, #640]	@ 0x280
			voltage_dec = (uint8_t)(voltage * 10 - ((uint8_t)voltage * 10)); // ex. 15.3 = 15 . (153 - 150)
 8002986:	49a9      	ldr	r1, [pc, #676]	@ (8002c2c <drive_motor+0x56c>)
 8002988:	f8d7 0280 	ldr.w	r0, [r7, #640]	@ 0x280
 800298c:	f7fd fbe0 	bl	8000150 <__aeabi_fmul>
 8002990:	4603      	mov	r3, r0
 8002992:	461c      	mov	r4, r3
 8002994:	f8d7 0280 	ldr.w	r0, [r7, #640]	@ 0x280
 8002998:	f7fe fa00 	bl	8000d9c <__aeabi_f2uiz>
 800299c:	4603      	mov	r3, r0
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	461a      	mov	r2, r3
 80029a2:	4613      	mov	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4413      	add	r3, r2
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7fe f97c 	bl	8000ca8 <__aeabi_i2f>
 80029b0:	4603      	mov	r3, r0
 80029b2:	4619      	mov	r1, r3
 80029b4:	4620      	mov	r0, r4
 80029b6:	f7fe f8c1 	bl	8000b3c <__aeabi_fsub>
 80029ba:	4603      	mov	r3, r0
 80029bc:	4618      	mov	r0, r3
 80029be:	f7fe f9ed 	bl	8000d9c <__aeabi_f2uiz>
 80029c2:	4603      	mov	r3, r0
 80029c4:	f887 327a 	strb.w	r3, [r7, #634]	@ 0x27a
			// current
			rawCurrent = (uint32_t) ((float) rawCurrent) / ((float) ADC_BUFFER_SAMPLES / 3.0); // ADC counts
 80029c8:	f8d7 029c 	ldr.w	r0, [r7, #668]	@ 0x29c
 80029cc:	f7fe f968 	bl	8000ca0 <__aeabi_ui2f>
 80029d0:	4603      	mov	r3, r0
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7fe f9e2 	bl	8000d9c <__aeabi_f2uiz>
 80029d8:	4603      	mov	r3, r0
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fd fdae 	bl	800053c <__aeabi_ui2d>
 80029e0:	f04f 0200 	mov.w	r2, #0
 80029e4:	4b90      	ldr	r3, [pc, #576]	@ (8002c28 <drive_motor+0x568>)
 80029e6:	f7fd ff4d 	bl	8000884 <__aeabi_ddiv>
 80029ea:	4602      	mov	r2, r0
 80029ec:	460b      	mov	r3, r1
 80029ee:	4610      	mov	r0, r2
 80029f0:	4619      	mov	r1, r3
 80029f2:	f7fe f82f 	bl	8000a54 <__aeabi_d2uiz>
 80029f6:	4603      	mov	r3, r0
 80029f8:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
			current =  (float) rawCurrent * 0.163 + 7.3581; // mA - opAmp G = 50, Rsense = 0.10 ohm
 80029fc:	f8d7 029c 	ldr.w	r0, [r7, #668]	@ 0x29c
 8002a00:	f7fe f94e 	bl	8000ca0 <__aeabi_ui2f>
 8002a04:	4603      	mov	r3, r0
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7fd fdba 	bl	8000580 <__aeabi_f2d>
 8002a0c:	a380      	add	r3, pc, #512	@ (adr r3, 8002c10 <drive_motor+0x550>)
 8002a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a12:	f7fd fe0d 	bl	8000630 <__aeabi_dmul>
 8002a16:	4602      	mov	r2, r0
 8002a18:	460b      	mov	r3, r1
 8002a1a:	4610      	mov	r0, r2
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	a37e      	add	r3, pc, #504	@ (adr r3, 8002c18 <drive_motor+0x558>)
 8002a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a24:	f7fd fc4e 	bl	80002c4 <__adddf3>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	4610      	mov	r0, r2
 8002a2e:	4619      	mov	r1, r3
 8002a30:	f7fe f830 	bl	8000a94 <__aeabi_d2f>
 8002a34:	4603      	mov	r3, r0
 8002a36:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
			current_dec = (uint8_t)(current * 10 - ((uint8_t)current * 10));
 8002a3a:	497c      	ldr	r1, [pc, #496]	@ (8002c2c <drive_motor+0x56c>)
 8002a3c:	f8d7 0284 	ldr.w	r0, [r7, #644]	@ 0x284
 8002a40:	f7fd fb86 	bl	8000150 <__aeabi_fmul>
 8002a44:	4603      	mov	r3, r0
 8002a46:	461c      	mov	r4, r3
 8002a48:	f8d7 0284 	ldr.w	r0, [r7, #644]	@ 0x284
 8002a4c:	f7fe f9a6 	bl	8000d9c <__aeabi_f2uiz>
 8002a50:	4603      	mov	r3, r0
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	461a      	mov	r2, r3
 8002a56:	4613      	mov	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7fe f922 	bl	8000ca8 <__aeabi_i2f>
 8002a64:	4603      	mov	r3, r0
 8002a66:	4619      	mov	r1, r3
 8002a68:	4620      	mov	r0, r4
 8002a6a:	f7fe f867 	bl	8000b3c <__aeabi_fsub>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7fe f993 	bl	8000d9c <__aeabi_f2uiz>
 8002a76:	4603      	mov	r3, r0
 8002a78:	f887 327b 	strb.w	r3, [r7, #635]	@ 0x27b
			// internal temperature
			rawTemperature = (uint32_t) ((float) rawTemperature) / ((float) ADC_BUFFER_SAMPLES / 3.0); // ADC counts
 8002a7c:	f8d7 0294 	ldr.w	r0, [r7, #660]	@ 0x294
 8002a80:	f7fe f90e 	bl	8000ca0 <__aeabi_ui2f>
 8002a84:	4603      	mov	r3, r0
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7fe f988 	bl	8000d9c <__aeabi_f2uiz>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7fd fd54 	bl	800053c <__aeabi_ui2d>
 8002a94:	f04f 0200 	mov.w	r2, #0
 8002a98:	4b63      	ldr	r3, [pc, #396]	@ (8002c28 <drive_motor+0x568>)
 8002a9a:	f7fd fef3 	bl	8000884 <__aeabi_ddiv>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	4610      	mov	r0, r2
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	f7fd ffd5 	bl	8000a54 <__aeabi_d2uiz>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
			temperature = ( (V25_avg - (rawTemperature * (3300.0/4096.0) ) )  / AVG_SLOPE_avg) + 25.0 ;
 8002ab0:	f8d7 0270 	ldr.w	r0, [r7, #624]	@ 0x270
 8002ab4:	f7fd fd64 	bl	8000580 <__aeabi_f2d>
 8002ab8:	4604      	mov	r4, r0
 8002aba:	460d      	mov	r5, r1
 8002abc:	f8d7 0294 	ldr.w	r0, [r7, #660]	@ 0x294
 8002ac0:	f7fd fd3c 	bl	800053c <__aeabi_ui2d>
 8002ac4:	a356      	add	r3, pc, #344	@ (adr r3, 8002c20 <drive_motor+0x560>)
 8002ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aca:	f7fd fdb1 	bl	8000630 <__aeabi_dmul>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	4620      	mov	r0, r4
 8002ad4:	4629      	mov	r1, r5
 8002ad6:	f7fd fbf3 	bl	80002c0 <__aeabi_dsub>
 8002ada:	4602      	mov	r2, r0
 8002adc:	460b      	mov	r3, r1
 8002ade:	4614      	mov	r4, r2
 8002ae0:	461d      	mov	r5, r3
 8002ae2:	f8d7 0274 	ldr.w	r0, [r7, #628]	@ 0x274
 8002ae6:	f7fd fd4b 	bl	8000580 <__aeabi_f2d>
 8002aea:	4602      	mov	r2, r0
 8002aec:	460b      	mov	r3, r1
 8002aee:	4620      	mov	r0, r4
 8002af0:	4629      	mov	r1, r5
 8002af2:	f7fd fec7 	bl	8000884 <__aeabi_ddiv>
 8002af6:	4602      	mov	r2, r0
 8002af8:	460b      	mov	r3, r1
 8002afa:	4610      	mov	r0, r2
 8002afc:	4619      	mov	r1, r3
 8002afe:	f04f 0200 	mov.w	r2, #0
 8002b02:	4b4b      	ldr	r3, [pc, #300]	@ (8002c30 <drive_motor+0x570>)
 8002b04:	f7fd fbde 	bl	80002c4 <__adddf3>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	4610      	mov	r0, r2
 8002b0e:	4619      	mov	r1, r3
 8002b10:	f7fd ffc0 	bl	8000a94 <__aeabi_d2f>
 8002b14:	4603      	mov	r3, r0
 8002b16:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
			temperature_dec = (uint8_t)(temperature * 10 - ((uint8_t)temperature * 10));
 8002b1a:	4944      	ldr	r1, [pc, #272]	@ (8002c2c <drive_motor+0x56c>)
 8002b1c:	f8d7 027c 	ldr.w	r0, [r7, #636]	@ 0x27c
 8002b20:	f7fd fb16 	bl	8000150 <__aeabi_fmul>
 8002b24:	4603      	mov	r3, r0
 8002b26:	461c      	mov	r4, r3
 8002b28:	f8d7 027c 	ldr.w	r0, [r7, #636]	@ 0x27c
 8002b2c:	f7fe f936 	bl	8000d9c <__aeabi_f2uiz>
 8002b30:	4603      	mov	r3, r0
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	461a      	mov	r2, r3
 8002b36:	4613      	mov	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4413      	add	r3, r2
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7fe f8b2 	bl	8000ca8 <__aeabi_i2f>
 8002b44:	4603      	mov	r3, r0
 8002b46:	4619      	mov	r1, r3
 8002b48:	4620      	mov	r0, r4
 8002b4a:	f7fd fff7 	bl	8000b3c <__aeabi_fsub>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7fe f923 	bl	8000d9c <__aeabi_f2uiz>
 8002b56:	4603      	mov	r3, r0
 8002b58:	f887 3279 	strb.w	r3, [r7, #633]	@ 0x279

			// print
			printf("<%i> CURRENT[AD# %d]: %i.%i mA | VOLTAGE_IN[AD# %i]: %i.%i V | INT TEMP[AD# %i]: %i.%i C\r\n"
 8002b5c:	f8b7 6292 	ldrh.w	r6, [r7, #658]	@ 0x292
 8002b60:	f8d7 0284 	ldr.w	r0, [r7, #644]	@ 0x284
 8002b64:	f7fe f8f4 	bl	8000d50 <__aeabi_f2iz>
 8002b68:	4680      	mov	r8, r0
 8002b6a:	f897 427b 	ldrb.w	r4, [r7, #635]	@ 0x27b
 8002b6e:	f8d7 0280 	ldr.w	r0, [r7, #640]	@ 0x280
 8002b72:	f7fe f8ed 	bl	8000d50 <__aeabi_f2iz>
 8002b76:	6038      	str	r0, [r7, #0]
 8002b78:	f897 527a 	ldrb.w	r5, [r7, #634]	@ 0x27a
 8002b7c:	f8d7 027c 	ldr.w	r0, [r7, #636]	@ 0x27c
 8002b80:	f7fe f8e6 	bl	8000d50 <__aeabi_f2iz>
 8002b84:	4602      	mov	r2, r0
 8002b86:	f897 3279 	ldrb.w	r3, [r7, #633]	@ 0x279
 8002b8a:	9306      	str	r3, [sp, #24]
 8002b8c:	9205      	str	r2, [sp, #20]
 8002b8e:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8002b92:	9304      	str	r3, [sp, #16]
 8002b94:	9503      	str	r5, [sp, #12]
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	9302      	str	r3, [sp, #8]
 8002b9a:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 8002b9e:	9301      	str	r3, [sp, #4]
 8002ba0:	9400      	str	r4, [sp, #0]
 8002ba2:	4643      	mov	r3, r8
 8002ba4:	f8d7 229c 	ldr.w	r2, [r7, #668]	@ 0x29c
 8002ba8:	4631      	mov	r1, r6
 8002baa:	4822      	ldr	r0, [pc, #136]	@ (8002c34 <drive_motor+0x574>)
 8002bac:	f005 fd28 	bl	8008600 <iprintf>
					, (int)adcSampleCount, rawCurrent, (int)current, (int)current_dec, rawVoltage, (int)voltage, (int)voltage_dec, rawTemperature, (int)temperature, (int)temperature_dec);

			// increase sample counter
			adcSampleCount++;
 8002bb0:	f8b7 3292 	ldrh.w	r3, [r7, #658]	@ 0x292
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	f8a7 3292 	strh.w	r3, [r7, #658]	@ 0x292
		timeNow = HAL_GetTick();
 8002bba:	e603      	b.n	80027c4 <drive_motor+0x104>
			if( (HAL_MAX_DELAY - timeStart + timeNow) >= runTime) break;
 8002bbc:	bf00      	nop
		}

	}


	HAL_GPIO_WritePin(motorPort, motorPin, RESET); // disable motor driver
 8002bbe:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 8002bc2:	f2a3 2396 	subw	r3, r3, #662	@ 0x296
 8002bc6:	8819      	ldrh	r1, [r3, #0]
 8002bc8:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 8002bcc:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	6818      	ldr	r0, [r3, #0]
 8002bd4:	f001 ff0e 	bl	80049f4 <HAL_GPIO_WritePin>
	//HAL_TIM_Base_Stop_IT(&htim4); // stop timer interrupts for ADC conversions
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3); // stop PWM signal to step the motor
 8002bd8:	2108      	movs	r1, #8
 8002bda:	4817      	ldr	r0, [pc, #92]	@ (8002c38 <drive_motor+0x578>)
 8002bdc:	f003 fd80 	bl	80066e0 <HAL_TIM_PWM_Stop>

	HAL_ADC_Stop_DMA(&hadc1); // stop ADC conversion if there was one triggered before exiting the while(1)
 8002be0:	4816      	ldr	r0, [pc, #88]	@ (8002c3c <drive_motor+0x57c>)
 8002be2:	f000 ff71 	bl	8003ac8 <HAL_ADC_Stop_DMA>
	HAL_TIM_PWM_Stop_IT(&htim4, TIM_CHANNEL_4); // stop timer triggering adc conversions
 8002be6:	210c      	movs	r1, #12
 8002be8:	4815      	ldr	r0, [pc, #84]	@ (8002c40 <drive_motor+0x580>)
 8002bea:	f003 fecd 	bl	8006988 <HAL_TIM_PWM_Stop_IT>
//		if((HAL_GetTick() - runStart) > runtime) break;
//	}
//	HAL_GPIO_WritePin(motorPort, motorPin, RESET); // disable driver
//	HAL_TIM_OC_Stop(&htim3, TIM_CHANNEL_3 );

}
 8002bee:	bf00      	nop
 8002bf0:	f507 7728 	add.w	r7, r7, #672	@ 0x2a0
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002bfa:	bf00      	nop
 8002bfc:	f3af 8000 	nop.w
 8002c00:	2474538f 	.word	0x2474538f
 8002c04:	3f80ff97 	.word	0x3f80ff97
 8002c08:	acd9e83e 	.word	0xacd9e83e
 8002c0c:	3fd95cfa 	.word	0x3fd95cfa
 8002c10:	1a9fbe77 	.word	0x1a9fbe77
 8002c14:	3fc4dd2f 	.word	0x3fc4dd2f
 8002c18:	c432ca58 	.word	0xc432ca58
 8002c1c:	401d6eb1 	.word	0x401d6eb1
 8002c20:	00000000 	.word	0x00000000
 8002c24:	3fe9c800 	.word	0x3fe9c800
 8002c28:	40590000 	.word	0x40590000
 8002c2c:	41200000 	.word	0x41200000
 8002c30:	40390000 	.word	0x40390000
 8002c34:	0800a1e0 	.word	0x0800a1e0
 8002c38:	20000188 	.word	0x20000188
 8002c3c:	200000b4 	.word	0x200000b4
 8002c40:	200001d0 	.word	0x200001d0

08002c44 <eeprom_write>:
 * Max freq 1 MHz, 1 Kbit memory (1024 bit), 128 x 8-bit block, 5 ms page write,
 * 8-Byte write pages, fixed device address 1010-xxxRW, 128 bytes memory range {00-7F} */

/* Write 1 byte in epprom
 * Parameters: memory address [0-127], 1 byte of data */
void eeprom_write(uint8_t memoryAddress, uint8_t dataByte){
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af02      	add	r7, sp, #8
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	460a      	mov	r2, r1
 8002c4e:	71fb      	strb	r3, [r7, #7]
 8002c50:	4613      	mov	r3, r2
 8002c52:	71bb      	strb	r3, [r7, #6]
	uint8_t txBuff[2] = {memoryAddress, dataByte};
 8002c54:	79fb      	ldrb	r3, [r7, #7]
 8002c56:	733b      	strb	r3, [r7, #12]
 8002c58:	79bb      	ldrb	r3, [r7, #6]
 8002c5a:	737b      	strb	r3, [r7, #13]
	if(memoryAddress <= eeprom.MAX_MEM_ADDRESS ){
 8002c5c:	79fb      	ldrb	r3, [r7, #7]
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	4b0e      	ldr	r3, [pc, #56]	@ (8002c9c <eeprom_write+0x58>)
 8002c62:	885b      	ldrh	r3, [r3, #2]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d80d      	bhi.n	8002c84 <eeprom_write+0x40>
		HAL_I2C_Master_Transmit(&hi2c1, EEPROM_BUS_ADDRESS , txBuff, 2, HAL_MAX_DELAY); // send word address, value
 8002c68:	f107 020c 	add.w	r2, r7, #12
 8002c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	2302      	movs	r3, #2
 8002c74:	21a0      	movs	r1, #160	@ 0xa0
 8002c76:	480a      	ldr	r0, [pc, #40]	@ (8002ca0 <eeprom_write+0x5c>)
 8002c78:	f002 f832 	bl	8004ce0 <HAL_I2C_Master_Transmit>
		HAL_Delay(10); // wait for data to be written
 8002c7c:	200a      	movs	r0, #10
 8002c7e:	f000 fd49 	bl	8003714 <HAL_Delay>
	} else {
		printf("* ERROR: memory address %x out of range [0-%i] *\r\n", memoryAddress, eeprom.MAX_MEM_ADDRESS);
	}
}
 8002c82:	e006      	b.n	8002c92 <eeprom_write+0x4e>
		printf("* ERROR: memory address %x out of range [0-%i] *\r\n", memoryAddress, eeprom.MAX_MEM_ADDRESS);
 8002c84:	79fb      	ldrb	r3, [r7, #7]
 8002c86:	4a05      	ldr	r2, [pc, #20]	@ (8002c9c <eeprom_write+0x58>)
 8002c88:	8852      	ldrh	r2, [r2, #2]
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	4805      	ldr	r0, [pc, #20]	@ (8002ca4 <eeprom_write+0x60>)
 8002c8e:	f005 fcb7 	bl	8008600 <iprintf>
}
 8002c92:	bf00      	nop
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	20000004 	.word	0x20000004
 8002ca0:	20000128 	.word	0x20000128
 8002ca4:	0800a23c 	.word	0x0800a23c

08002ca8 <eeprom_read>:

/* Read 1 byte from epprom
 * Parameters: memory address [0-127]
 * Returns 1 byte of data */
uint8_t eeprom_read(uint8_t memoryAddress){
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af02      	add	r7, sp, #8
 8002cae:	4603      	mov	r3, r0
 8002cb0:	71fb      	strb	r3, [r7, #7]
	uint8_t addressBuffer[1] = {memoryAddress};
 8002cb2:	79fb      	ldrb	r3, [r7, #7]
 8002cb4:	733b      	strb	r3, [r7, #12]
	uint8_t rxBuff[1] = {0};
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	723b      	strb	r3, [r7, #8]
	if(memoryAddress <= eeprom.MAX_MEM_ADDRESS ){
 8002cba:	79fb      	ldrb	r3, [r7, #7]
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	4b15      	ldr	r3, [pc, #84]	@ (8002d14 <eeprom_read+0x6c>)
 8002cc0:	885b      	ldrh	r3, [r3, #2]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d81a      	bhi.n	8002cfc <eeprom_read+0x54>
		HAL_I2C_Master_Transmit(&hi2c1, EEPROM_BUS_ADDRESS , addressBuffer, 1, HAL_MAX_DELAY); // dummy write to set pointer to desired memory address
 8002cc6:	f107 020c 	add.w	r2, r7, #12
 8002cca:	f04f 33ff 	mov.w	r3, #4294967295
 8002cce:	9300      	str	r3, [sp, #0]
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	21a0      	movs	r1, #160	@ 0xa0
 8002cd4:	4810      	ldr	r0, [pc, #64]	@ (8002d18 <eeprom_read+0x70>)
 8002cd6:	f002 f803 	bl	8004ce0 <HAL_I2C_Master_Transmit>
		HAL_Delay(10);
 8002cda:	200a      	movs	r0, #10
 8002cdc:	f000 fd1a 	bl	8003714 <HAL_Delay>
		HAL_I2C_Master_Receive(&hi2c1, EEPROM_BUS_ADDRESS, rxBuff, 1, HAL_MAX_DELAY); // send command to read 1 byte at current memory address pointer
 8002ce0:	f107 0208 	add.w	r2, r7, #8
 8002ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	2301      	movs	r3, #1
 8002cec:	21a0      	movs	r1, #160	@ 0xa0
 8002cee:	480a      	ldr	r0, [pc, #40]	@ (8002d18 <eeprom_read+0x70>)
 8002cf0:	f002 f8f4 	bl	8004edc <HAL_I2C_Master_Receive>
		HAL_Delay(10);
 8002cf4:	200a      	movs	r0, #10
 8002cf6:	f000 fd0d 	bl	8003714 <HAL_Delay>
 8002cfa:	e006      	b.n	8002d0a <eeprom_read+0x62>
	} else {
		printf("* ERROR: memory address %x out of range [0-%i] *\r\n", memoryAddress, eeprom.MAX_MEM_ADDRESS);
 8002cfc:	79fb      	ldrb	r3, [r7, #7]
 8002cfe:	4a05      	ldr	r2, [pc, #20]	@ (8002d14 <eeprom_read+0x6c>)
 8002d00:	8852      	ldrh	r2, [r2, #2]
 8002d02:	4619      	mov	r1, r3
 8002d04:	4805      	ldr	r0, [pc, #20]	@ (8002d1c <eeprom_read+0x74>)
 8002d06:	f005 fc7b 	bl	8008600 <iprintf>
	}
	return ((uint8_t) rxBuff[0]);
 8002d0a:	7a3b      	ldrb	r3, [r7, #8]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	20000004 	.word	0x20000004
 8002d18:	20000128 	.word	0x20000128
 8002d1c:	0800a23c 	.word	0x0800a23c

08002d20 <eeprom_clear>:

/* Clear memory within a given range of addresses
 * Parameters: start address and end address (inclusive) [0-127]
 * Returns number of blocks cleared */
uint8_t eeprom_clear(uint8_t memoryStart, uint8_t memoryEnd){
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	4603      	mov	r3, r0
 8002d28:	460a      	mov	r2, r1
 8002d2a:	71fb      	strb	r3, [r7, #7]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	if( (memoryStart >= 0) && (memoryEnd <= eeprom.MAX_MEM_ADDRESS) ){
 8002d30:	79bb      	ldrb	r3, [r7, #6]
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	4b11      	ldr	r3, [pc, #68]	@ (8002d7c <eeprom_clear+0x5c>)
 8002d36:	885b      	ldrh	r3, [r3, #2]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d80f      	bhi.n	8002d5c <eeprom_clear+0x3c>
		for(i = memoryStart ; i <= memoryEnd ; i++){
 8002d3c:	79fb      	ldrb	r3, [r7, #7]
 8002d3e:	73fb      	strb	r3, [r7, #15]
 8002d40:	e007      	b.n	8002d52 <eeprom_clear+0x32>
			eeprom_write(i, 0xFF);
 8002d42:	7bfb      	ldrb	r3, [r7, #15]
 8002d44:	21ff      	movs	r1, #255	@ 0xff
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7ff ff7c 	bl	8002c44 <eeprom_write>
		for(i = memoryStart ; i <= memoryEnd ; i++){
 8002d4c:	7bfb      	ldrb	r3, [r7, #15]
 8002d4e:	3301      	adds	r3, #1
 8002d50:	73fb      	strb	r3, [r7, #15]
 8002d52:	7bfa      	ldrb	r2, [r7, #15]
 8002d54:	79bb      	ldrb	r3, [r7, #6]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d9f3      	bls.n	8002d42 <eeprom_clear+0x22>
 8002d5a:	e005      	b.n	8002d68 <eeprom_clear+0x48>
		}
	} else {
		printf("* ERROR: memory out of range [0-%i] *\r\n", eeprom.MAX_MEM_ADDRESS);
 8002d5c:	4b07      	ldr	r3, [pc, #28]	@ (8002d7c <eeprom_clear+0x5c>)
 8002d5e:	885b      	ldrh	r3, [r3, #2]
 8002d60:	4619      	mov	r1, r3
 8002d62:	4807      	ldr	r0, [pc, #28]	@ (8002d80 <eeprom_clear+0x60>)
 8002d64:	f005 fc4c 	bl	8008600 <iprintf>
	}
	return (i-memoryStart+1);
 8002d68:	7bfa      	ldrb	r2, [r7, #15]
 8002d6a:	79fb      	ldrb	r3, [r7, #7]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	3301      	adds	r3, #1
 8002d72:	b2db      	uxtb	r3, r3
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	20000004 	.word	0x20000004
 8002d80:	0800a270 	.word	0x0800a270

08002d84 <eeprom_print_map>:

/* print memory map on eeprom
 * {AL_TUBECOUNT, AL_TYPE, AL_SN1, AL_SN2, AL_CONFIGED, M_RUNTIME } */
void eeprom_print_map(void){
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af04      	add	r7, sp, #16
	printf("\r\n");
 8002d8a:	480f      	ldr	r0, [pc, #60]	@ (8002dc8 <eeprom_print_map+0x44>)
 8002d8c:	f005 fca0 	bl	80086d0 <puts>
	printf("|=======================================|\r\n");
 8002d90:	480e      	ldr	r0, [pc, #56]	@ (8002dcc <eeprom_print_map+0x48>)
 8002d92:	f005 fc9d 	bl	80086d0 <puts>
	printf("|              MEMORY MAP               |\r\n");
 8002d96:	480e      	ldr	r0, [pc, #56]	@ (8002dd0 <eeprom_print_map+0x4c>)
 8002d98:	f005 fc9a 	bl	80086d0 <puts>
	printf("|=======================================|\r\n");
 8002d9c:	480b      	ldr	r0, [pc, #44]	@ (8002dcc <eeprom_print_map+0x48>)
 8002d9e:	f005 fc97 	bl	80086d0 <puts>
	printf("|[%03i]       AL_TUBECOUNT              |\r\n"
 8002da2:	230b      	movs	r3, #11
 8002da4:	9302      	str	r3, [sp, #8]
 8002da6:	2308      	movs	r3, #8
 8002da8:	9301      	str	r3, [sp, #4]
 8002daa:	2303      	movs	r3, #3
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	2302      	movs	r3, #2
 8002db0:	2201      	movs	r2, #1
 8002db2:	2100      	movs	r1, #0
 8002db4:	4807      	ldr	r0, [pc, #28]	@ (8002dd4 <eeprom_print_map+0x50>)
 8002db6:	f005 fc23 	bl	8008600 <iprintf>
		   "|[%03i]       AL_TYPE                   |\r\n"
		   "|[%03i]       AL_SN                     |\r\n"
		   "|[%03i]       AL_CONFIGED               |\r\n"
		   "|[%03i-%03i]  M_RUNTIME                 |\r\n", AL_TUBECOUNT, AL_TYPE, AL_SN, AL_CONFIGED, M_RUNTIME,M_RUNTIME+3);
	printf("|=======================================|\r\n");
 8002dba:	4804      	ldr	r0, [pc, #16]	@ (8002dcc <eeprom_print_map+0x48>)
 8002dbc:	f005 fc88 	bl	80086d0 <puts>
}
 8002dc0:	bf00      	nop
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	08009828 	.word	0x08009828
 8002dcc:	0800a298 	.word	0x0800a298
 8002dd0:	0800a2c4 	.word	0x0800a2c4
 8002dd4:	0800a2f0 	.word	0x0800a2f0

08002dd8 <eeprom_write_uint32>:

/* Writes a 32-bit number to memory [0-65535]
 * or any 4-byte value (float) */
void eeprom_write_uint32(uint8_t memoryStart, uint32_t data){
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	4603      	mov	r3, r0
 8002de0:	6039      	str	r1, [r7, #0]
 8002de2:	71fb      	strb	r3, [r7, #7]
	//[byte0][byte1][byte2][byte3] = 32 bit data
	uint8_t dataByte[4] = {(data>>0), (data>>8), (data>>16), (data>>24)}; // break up each byte of the 32 bit number
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	723b      	strb	r3, [r7, #8]
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	0a1b      	lsrs	r3, r3, #8
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	727b      	strb	r3, [r7, #9]
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	0c1b      	lsrs	r3, r3, #16
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	72bb      	strb	r3, [r7, #10]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	0e1b      	lsrs	r3, r3, #24
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	72fb      	strb	r3, [r7, #11]
	for(uint8_t i = 0; i < 4; i++){
 8002e02:	2300      	movs	r3, #0
 8002e04:	73fb      	strb	r3, [r7, #15]
 8002e06:	e00f      	b.n	8002e28 <eeprom_write_uint32+0x50>
		eeprom_write(memoryStart+i, dataByte[i]);
 8002e08:	79fa      	ldrb	r2, [r7, #7]
 8002e0a:	7bfb      	ldrb	r3, [r7, #15]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	b2da      	uxtb	r2, r3
 8002e10:	7bfb      	ldrb	r3, [r7, #15]
 8002e12:	3310      	adds	r3, #16
 8002e14:	443b      	add	r3, r7
 8002e16:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4610      	mov	r0, r2
 8002e1e:	f7ff ff11 	bl	8002c44 <eeprom_write>
	for(uint8_t i = 0; i < 4; i++){
 8002e22:	7bfb      	ldrb	r3, [r7, #15]
 8002e24:	3301      	adds	r3, #1
 8002e26:	73fb      	strb	r3, [r7, #15]
 8002e28:	7bfb      	ldrb	r3, [r7, #15]
 8002e2a:	2b03      	cmp	r3, #3
 8002e2c:	d9ec      	bls.n	8002e08 <eeprom_write_uint32+0x30>
	}

}
 8002e2e:	bf00      	nop
 8002e30:	bf00      	nop
 8002e32:	3710      	adds	r7, #16
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <eeprom_read_uint32>:

/* Reads a 32-bit number from memory [0-65535]*/
uint32_t eeprom_read_uint32(uint8_t memoryStart){
 8002e38:	b590      	push	{r4, r7, lr}
 8002e3a:	b087      	sub	sp, #28
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	4603      	mov	r3, r0
 8002e40:	71fb      	strb	r3, [r7, #7]
	//[byte0][byte1][byte2][byte3] = 32 bit data
	uint8_t dataByte[4];
	uint32_t number;
	for(uint8_t i = 0; i < 4; i++){
 8002e42:	2300      	movs	r3, #0
 8002e44:	75fb      	strb	r3, [r7, #23]
 8002e46:	e011      	b.n	8002e6c <eeprom_read_uint32+0x34>
		dataByte[i] = eeprom_read(memoryStart+i);
 8002e48:	79fa      	ldrb	r2, [r7, #7]
 8002e4a:	7dfb      	ldrb	r3, [r7, #23]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	7dfc      	ldrb	r4, [r7, #23]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff ff28 	bl	8002ca8 <eeprom_read>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	f104 0318 	add.w	r3, r4, #24
 8002e60:	443b      	add	r3, r7
 8002e62:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t i = 0; i < 4; i++){
 8002e66:	7dfb      	ldrb	r3, [r7, #23]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	75fb      	strb	r3, [r7, #23]
 8002e6c:	7dfb      	ldrb	r3, [r7, #23]
 8002e6e:	2b03      	cmp	r3, #3
 8002e70:	d9ea      	bls.n	8002e48 <eeprom_read_uint32+0x10>
	}
	number = (dataByte[3]<<24) + (dataByte[2]<<16) + (dataByte[1]<<8) + dataByte[0]; // put back the 32 bit number [byte0]+[byte1]+[byte2]+[byte3]
 8002e72:	7bfb      	ldrb	r3, [r7, #15]
 8002e74:	061a      	lsls	r2, r3, #24
 8002e76:	7bbb      	ldrb	r3, [r7, #14]
 8002e78:	041b      	lsls	r3, r3, #16
 8002e7a:	441a      	add	r2, r3
 8002e7c:	7b7b      	ldrb	r3, [r7, #13]
 8002e7e:	021b      	lsls	r3, r3, #8
 8002e80:	4413      	add	r3, r2
 8002e82:	7b3a      	ldrb	r2, [r7, #12]
 8002e84:	4413      	add	r3, r2
 8002e86:	613b      	str	r3, [r7, #16]

	return number;
 8002e88:	693b      	ldr	r3, [r7, #16]
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	371c      	adds	r7, #28
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd90      	pop	{r4, r7, pc}

08002e92 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e92:	b480      	push	{r7}
 8002e94:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e96:	b672      	cpsid	i
}
 8002e98:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e9a:	bf00      	nop
 8002e9c:	e7fd      	b.n	8002e9a <Error_Handler+0x8>
	...

08002ea0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002ea6:	4b15      	ldr	r3, [pc, #84]	@ (8002efc <HAL_MspInit+0x5c>)
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	4a14      	ldr	r2, [pc, #80]	@ (8002efc <HAL_MspInit+0x5c>)
 8002eac:	f043 0301 	orr.w	r3, r3, #1
 8002eb0:	6193      	str	r3, [r2, #24]
 8002eb2:	4b12      	ldr	r3, [pc, #72]	@ (8002efc <HAL_MspInit+0x5c>)
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	60bb      	str	r3, [r7, #8]
 8002ebc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ebe:	4b0f      	ldr	r3, [pc, #60]	@ (8002efc <HAL_MspInit+0x5c>)
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	4a0e      	ldr	r2, [pc, #56]	@ (8002efc <HAL_MspInit+0x5c>)
 8002ec4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ec8:	61d3      	str	r3, [r2, #28]
 8002eca:	4b0c      	ldr	r3, [pc, #48]	@ (8002efc <HAL_MspInit+0x5c>)
 8002ecc:	69db      	ldr	r3, [r3, #28]
 8002ece:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ed2:	607b      	str	r3, [r7, #4]
 8002ed4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8002f00 <HAL_MspInit+0x60>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	60fb      	str	r3, [r7, #12]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	4a04      	ldr	r2, [pc, #16]	@ (8002f00 <HAL_MspInit+0x60>)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ef2:	bf00      	nop
 8002ef4:	3714      	adds	r7, #20
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bc80      	pop	{r7}
 8002efa:	4770      	bx	lr
 8002efc:	40021000 	.word	0x40021000
 8002f00:	40010000 	.word	0x40010000

08002f04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f08:	bf00      	nop
 8002f0a:	e7fd      	b.n	8002f08 <NMI_Handler+0x4>

08002f0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f10:	bf00      	nop
 8002f12:	e7fd      	b.n	8002f10 <HardFault_Handler+0x4>

08002f14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f18:	bf00      	nop
 8002f1a:	e7fd      	b.n	8002f18 <MemManage_Handler+0x4>

08002f1c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f20:	bf00      	nop
 8002f22:	e7fd      	b.n	8002f20 <BusFault_Handler+0x4>

08002f24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f28:	bf00      	nop
 8002f2a:	e7fd      	b.n	8002f28 <UsageFault_Handler+0x4>

08002f2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f30:	bf00      	nop
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bc80      	pop	{r7}
 8002f36:	4770      	bx	lr

08002f38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f3c:	bf00      	nop
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bc80      	pop	{r7}
 8002f42:	4770      	bx	lr

08002f44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f48:	bf00      	nop
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bc80      	pop	{r7}
 8002f4e:	4770      	bx	lr

08002f50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f54:	f000 fbc2 	bl	80036dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f58:	bf00      	nop
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002f60:	4803      	ldr	r0, [pc, #12]	@ (8002f70 <DMA1_Channel1_IRQHandler+0x14>)
 8002f62:	f001 fa8f 	bl	8004484 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  adcDMAFull = 1;
 8002f66:	4b03      	ldr	r3, [pc, #12]	@ (8002f74 <DMA1_Channel1_IRQHandler+0x18>)
 8002f68:	2201      	movs	r2, #1
 8002f6a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002f6c:	bf00      	nop
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	200000e4 	.word	0x200000e4
 8002f74:	20000183 	.word	0x20000183

08002f78 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002f7c:	4805      	ldr	r0, [pc, #20]	@ (8002f94 <TIM4_IRQHandler+0x1c>)
 8002f7e:	f003 fdb5 	bl	8006aec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  adcTimerTrigger = 1;
 8002f82:	4b05      	ldr	r3, [pc, #20]	@ (8002f98 <TIM4_IRQHandler+0x20>)
 8002f84:	2201      	movs	r2, #1
 8002f86:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002f88:	2102      	movs	r1, #2
 8002f8a:	4804      	ldr	r0, [pc, #16]	@ (8002f9c <TIM4_IRQHandler+0x24>)
 8002f8c:	f001 fd4a 	bl	8004a24 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM4_IRQn 1 */
}
 8002f90:	bf00      	nop
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	200001d0 	.word	0x200001d0
 8002f98:	20000182 	.word	0x20000182
 8002f9c:	40010c00 	.word	0x40010c00

08002fa0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002fa4:	4802      	ldr	r0, [pc, #8]	@ (8002fb0 <USART1_IRQHandler+0x10>)
 8002fa6:	f004 fcff 	bl	80079a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002faa:	bf00      	nop
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	20000218 	.word	0x20000218

08002fb4 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002fbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bc80      	pop	{r7}
 8002fc8:	4770      	bx	lr

08002fca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	b083      	sub	sp, #12
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
 8002fd2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002fda:	605a      	str	r2, [r3, #4]
  return 0;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bc80      	pop	{r7}
 8002fe6:	4770      	bx	lr

08002fe8 <_isatty>:

int _isatty(int file)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ff0:	2301      	movs	r3, #1
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bc80      	pop	{r7}
 8002ffa:	4770      	bx	lr

08002ffc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3714      	adds	r7, #20
 800300e:	46bd      	mov	sp, r7
 8003010:	bc80      	pop	{r7}
 8003012:	4770      	bx	lr

08003014 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800301c:	4a14      	ldr	r2, [pc, #80]	@ (8003070 <_sbrk+0x5c>)
 800301e:	4b15      	ldr	r3, [pc, #84]	@ (8003074 <_sbrk+0x60>)
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003028:	4b13      	ldr	r3, [pc, #76]	@ (8003078 <_sbrk+0x64>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d102      	bne.n	8003036 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003030:	4b11      	ldr	r3, [pc, #68]	@ (8003078 <_sbrk+0x64>)
 8003032:	4a12      	ldr	r2, [pc, #72]	@ (800307c <_sbrk+0x68>)
 8003034:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003036:	4b10      	ldr	r3, [pc, #64]	@ (8003078 <_sbrk+0x64>)
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4413      	add	r3, r2
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	429a      	cmp	r2, r3
 8003042:	d207      	bcs.n	8003054 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003044:	f005 fd26 	bl	8008a94 <__errno>
 8003048:	4603      	mov	r3, r0
 800304a:	220c      	movs	r2, #12
 800304c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800304e:	f04f 33ff 	mov.w	r3, #4294967295
 8003052:	e009      	b.n	8003068 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003054:	4b08      	ldr	r3, [pc, #32]	@ (8003078 <_sbrk+0x64>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800305a:	4b07      	ldr	r3, [pc, #28]	@ (8003078 <_sbrk+0x64>)
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4413      	add	r3, r2
 8003062:	4a05      	ldr	r2, [pc, #20]	@ (8003078 <_sbrk+0x64>)
 8003064:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003066:	68fb      	ldr	r3, [r7, #12]
}
 8003068:	4618      	mov	r0, r3
 800306a:	3718      	adds	r7, #24
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	20005000 	.word	0x20005000
 8003074:	00000400 	.word	0x00000400
 8003078:	20000184 	.word	0x20000184
 800307c:	20000400 	.word	0x20000400

08003080 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003084:	bf00      	nop
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr

0800308c <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b08e      	sub	sp, #56	@ 0x38
 8003090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003092:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003096:	2200      	movs	r2, #0
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	605a      	str	r2, [r3, #4]
 800309c:	609a      	str	r2, [r3, #8]
 800309e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030a0:	f107 0320 	add.w	r3, r7, #32
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80030aa:	1d3b      	adds	r3, r7, #4
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	605a      	str	r2, [r3, #4]
 80030b2:	609a      	str	r2, [r3, #8]
 80030b4:	60da      	str	r2, [r3, #12]
 80030b6:	611a      	str	r2, [r3, #16]
 80030b8:	615a      	str	r2, [r3, #20]
 80030ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80030bc:	4b2d      	ldr	r3, [pc, #180]	@ (8003174 <MX_TIM3_Init+0xe8>)
 80030be:	4a2e      	ldr	r2, [pc, #184]	@ (8003178 <MX_TIM3_Init+0xec>)
 80030c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 80030c2:	4b2c      	ldr	r3, [pc, #176]	@ (8003174 <MX_TIM3_Init+0xe8>)
 80030c4:	2207      	movs	r2, #7
 80030c6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030c8:	4b2a      	ldr	r3, [pc, #168]	@ (8003174 <MX_TIM3_Init+0xe8>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000-1;
 80030ce:	4b29      	ldr	r3, [pc, #164]	@ (8003174 <MX_TIM3_Init+0xe8>)
 80030d0:	f241 3287 	movw	r2, #4999	@ 0x1387
 80030d4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030d6:	4b27      	ldr	r3, [pc, #156]	@ (8003174 <MX_TIM3_Init+0xe8>)
 80030d8:	2200      	movs	r2, #0
 80030da:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80030dc:	4b25      	ldr	r3, [pc, #148]	@ (8003174 <MX_TIM3_Init+0xe8>)
 80030de:	2280      	movs	r2, #128	@ 0x80
 80030e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80030e2:	4824      	ldr	r0, [pc, #144]	@ (8003174 <MX_TIM3_Init+0xe8>)
 80030e4:	f003 f9b2 	bl	800644c <HAL_TIM_Base_Init>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80030ee:	f7ff fed0 	bl	8002e92 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80030f8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80030fc:	4619      	mov	r1, r3
 80030fe:	481d      	ldr	r0, [pc, #116]	@ (8003174 <MX_TIM3_Init+0xe8>)
 8003100:	f003 fea6 	bl	8006e50 <HAL_TIM_ConfigClockSource>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800310a:	f7ff fec2 	bl	8002e92 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800310e:	4819      	ldr	r0, [pc, #100]	@ (8003174 <MX_TIM3_Init+0xe8>)
 8003110:	f003 f9eb 	bl	80064ea <HAL_TIM_PWM_Init>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800311a:	f7ff feba 	bl	8002e92 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800311e:	2300      	movs	r3, #0
 8003120:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003122:	2300      	movs	r3, #0
 8003124:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003126:	f107 0320 	add.w	r3, r7, #32
 800312a:	4619      	mov	r1, r3
 800312c:	4811      	ldr	r0, [pc, #68]	@ (8003174 <MX_TIM3_Init+0xe8>)
 800312e:	f004 fa33 	bl	8007598 <HAL_TIMEx_MasterConfigSynchronization>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003138:	f7ff feab 	bl	8002e92 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800313c:	2360      	movs	r3, #96	@ 0x60
 800313e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 4500-1;
 8003140:	f241 1393 	movw	r3, #4499	@ 0x1193
 8003144:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003146:	2300      	movs	r3, #0
 8003148:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800314a:	2300      	movs	r3, #0
 800314c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800314e:	1d3b      	adds	r3, r7, #4
 8003150:	2208      	movs	r2, #8
 8003152:	4619      	mov	r1, r3
 8003154:	4807      	ldr	r0, [pc, #28]	@ (8003174 <MX_TIM3_Init+0xe8>)
 8003156:	f003 fdb9 	bl	8006ccc <HAL_TIM_PWM_ConfigChannel>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003160:	f7ff fe97 	bl	8002e92 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003164:	4803      	ldr	r0, [pc, #12]	@ (8003174 <MX_TIM3_Init+0xe8>)
 8003166:	f000 f8b7 	bl	80032d8 <HAL_TIM_MspPostInit>

}
 800316a:	bf00      	nop
 800316c:	3738      	adds	r7, #56	@ 0x38
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	20000188 	.word	0x20000188
 8003178:	40000400 	.word	0x40000400

0800317c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b08e      	sub	sp, #56	@ 0x38
 8003180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003182:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003186:	2200      	movs	r2, #0
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	605a      	str	r2, [r3, #4]
 800318c:	609a      	str	r2, [r3, #8]
 800318e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003190:	f107 0320 	add.w	r3, r7, #32
 8003194:	2200      	movs	r2, #0
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800319a:	1d3b      	adds	r3, r7, #4
 800319c:	2200      	movs	r2, #0
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	605a      	str	r2, [r3, #4]
 80031a2:	609a      	str	r2, [r3, #8]
 80031a4:	60da      	str	r2, [r3, #12]
 80031a6:	611a      	str	r2, [r3, #16]
 80031a8:	615a      	str	r2, [r3, #20]
 80031aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80031ac:	4b2b      	ldr	r3, [pc, #172]	@ (800325c <MX_TIM4_Init+0xe0>)
 80031ae:	4a2c      	ldr	r2, [pc, #176]	@ (8003260 <MX_TIM4_Init+0xe4>)
 80031b0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8000-1;
 80031b2:	4b2a      	ldr	r3, [pc, #168]	@ (800325c <MX_TIM4_Init+0xe0>)
 80031b4:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80031b8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031ba:	4b28      	ldr	r3, [pc, #160]	@ (800325c <MX_TIM4_Init+0xe0>)
 80031bc:	2200      	movs	r2, #0
 80031be:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 500-1;
 80031c0:	4b26      	ldr	r3, [pc, #152]	@ (800325c <MX_TIM4_Init+0xe0>)
 80031c2:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80031c6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031c8:	4b24      	ldr	r3, [pc, #144]	@ (800325c <MX_TIM4_Init+0xe0>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031ce:	4b23      	ldr	r3, [pc, #140]	@ (800325c <MX_TIM4_Init+0xe0>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80031d4:	4821      	ldr	r0, [pc, #132]	@ (800325c <MX_TIM4_Init+0xe0>)
 80031d6:	f003 f939 	bl	800644c <HAL_TIM_Base_Init>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80031e0:	f7ff fe57 	bl	8002e92 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80031e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80031ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80031ee:	4619      	mov	r1, r3
 80031f0:	481a      	ldr	r0, [pc, #104]	@ (800325c <MX_TIM4_Init+0xe0>)
 80031f2:	f003 fe2d 	bl	8006e50 <HAL_TIM_ConfigClockSource>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80031fc:	f7ff fe49 	bl	8002e92 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003200:	4816      	ldr	r0, [pc, #88]	@ (800325c <MX_TIM4_Init+0xe0>)
 8003202:	f003 f972 	bl	80064ea <HAL_TIM_PWM_Init>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800320c:	f7ff fe41 	bl	8002e92 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003210:	2320      	movs	r3, #32
 8003212:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003214:	2300      	movs	r3, #0
 8003216:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003218:	f107 0320 	add.w	r3, r7, #32
 800321c:	4619      	mov	r1, r3
 800321e:	480f      	ldr	r0, [pc, #60]	@ (800325c <MX_TIM4_Init+0xe0>)
 8003220:	f004 f9ba 	bl	8007598 <HAL_TIMEx_MasterConfigSynchronization>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800322a:	f7ff fe32 	bl	8002e92 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800322e:	2360      	movs	r3, #96	@ 0x60
 8003230:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 250-1;
 8003232:	23f9      	movs	r3, #249	@ 0xf9
 8003234:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003236:	2300      	movs	r3, #0
 8003238:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800323a:	2300      	movs	r3, #0
 800323c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800323e:	1d3b      	adds	r3, r7, #4
 8003240:	220c      	movs	r2, #12
 8003242:	4619      	mov	r1, r3
 8003244:	4805      	ldr	r0, [pc, #20]	@ (800325c <MX_TIM4_Init+0xe0>)
 8003246:	f003 fd41 	bl	8006ccc <HAL_TIM_PWM_ConfigChannel>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8003250:	f7ff fe1f 	bl	8002e92 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003254:	bf00      	nop
 8003256:	3738      	adds	r7, #56	@ 0x38
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	200001d0 	.word	0x200001d0
 8003260:	40000800 	.word	0x40000800

08003264 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a16      	ldr	r2, [pc, #88]	@ (80032cc <HAL_TIM_Base_MspInit+0x68>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d10c      	bne.n	8003290 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003276:	4b16      	ldr	r3, [pc, #88]	@ (80032d0 <HAL_TIM_Base_MspInit+0x6c>)
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	4a15      	ldr	r2, [pc, #84]	@ (80032d0 <HAL_TIM_Base_MspInit+0x6c>)
 800327c:	f043 0302 	orr.w	r3, r3, #2
 8003280:	61d3      	str	r3, [r2, #28]
 8003282:	4b13      	ldr	r3, [pc, #76]	@ (80032d0 <HAL_TIM_Base_MspInit+0x6c>)
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	60fb      	str	r3, [r7, #12]
 800328c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800328e:	e018      	b.n	80032c2 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM4)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a0f      	ldr	r2, [pc, #60]	@ (80032d4 <HAL_TIM_Base_MspInit+0x70>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d113      	bne.n	80032c2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800329a:	4b0d      	ldr	r3, [pc, #52]	@ (80032d0 <HAL_TIM_Base_MspInit+0x6c>)
 800329c:	69db      	ldr	r3, [r3, #28]
 800329e:	4a0c      	ldr	r2, [pc, #48]	@ (80032d0 <HAL_TIM_Base_MspInit+0x6c>)
 80032a0:	f043 0304 	orr.w	r3, r3, #4
 80032a4:	61d3      	str	r3, [r2, #28]
 80032a6:	4b0a      	ldr	r3, [pc, #40]	@ (80032d0 <HAL_TIM_Base_MspInit+0x6c>)
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	f003 0304 	and.w	r3, r3, #4
 80032ae:	60bb      	str	r3, [r7, #8]
 80032b0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80032b2:	2200      	movs	r2, #0
 80032b4:	2100      	movs	r1, #0
 80032b6:	201e      	movs	r0, #30
 80032b8:	f000 ff3f 	bl	800413a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80032bc:	201e      	movs	r0, #30
 80032be:	f000 ff58 	bl	8004172 <HAL_NVIC_EnableIRQ>
}
 80032c2:	bf00      	nop
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40000400 	.word	0x40000400
 80032d0:	40021000 	.word	0x40021000
 80032d4:	40000800 	.word	0x40000800

080032d8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b088      	sub	sp, #32
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032e0:	f107 0310 	add.w	r3, r7, #16
 80032e4:	2200      	movs	r2, #0
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	605a      	str	r2, [r3, #4]
 80032ea:	609a      	str	r2, [r3, #8]
 80032ec:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a0f      	ldr	r2, [pc, #60]	@ (8003330 <HAL_TIM_MspPostInit+0x58>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d117      	bne.n	8003328 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032f8:	4b0e      	ldr	r3, [pc, #56]	@ (8003334 <HAL_TIM_MspPostInit+0x5c>)
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	4a0d      	ldr	r2, [pc, #52]	@ (8003334 <HAL_TIM_MspPostInit+0x5c>)
 80032fe:	f043 0308 	orr.w	r3, r3, #8
 8003302:	6193      	str	r3, [r2, #24]
 8003304:	4b0b      	ldr	r3, [pc, #44]	@ (8003334 <HAL_TIM_MspPostInit+0x5c>)
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	f003 0308 	and.w	r3, r3, #8
 800330c:	60fb      	str	r3, [r7, #12]
 800330e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_PWM_Pin;
 8003310:	2301      	movs	r3, #1
 8003312:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003314:	2302      	movs	r3, #2
 8003316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003318:	2302      	movs	r3, #2
 800331a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOTOR_PWM_GPIO_Port, &GPIO_InitStruct);
 800331c:	f107 0310 	add.w	r3, r7, #16
 8003320:	4619      	mov	r1, r3
 8003322:	4805      	ldr	r0, [pc, #20]	@ (8003338 <HAL_TIM_MspPostInit+0x60>)
 8003324:	f001 f9e2 	bl	80046ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003328:	bf00      	nop
 800332a:	3720      	adds	r7, #32
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	40000400 	.word	0x40000400
 8003334:	40021000 	.word	0x40021000
 8003338:	40010c00 	.word	0x40010c00

0800333c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003340:	4b11      	ldr	r3, [pc, #68]	@ (8003388 <MX_USART1_UART_Init+0x4c>)
 8003342:	4a12      	ldr	r2, [pc, #72]	@ (800338c <MX_USART1_UART_Init+0x50>)
 8003344:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003346:	4b10      	ldr	r3, [pc, #64]	@ (8003388 <MX_USART1_UART_Init+0x4c>)
 8003348:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800334c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800334e:	4b0e      	ldr	r3, [pc, #56]	@ (8003388 <MX_USART1_UART_Init+0x4c>)
 8003350:	2200      	movs	r2, #0
 8003352:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003354:	4b0c      	ldr	r3, [pc, #48]	@ (8003388 <MX_USART1_UART_Init+0x4c>)
 8003356:	2200      	movs	r2, #0
 8003358:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800335a:	4b0b      	ldr	r3, [pc, #44]	@ (8003388 <MX_USART1_UART_Init+0x4c>)
 800335c:	2200      	movs	r2, #0
 800335e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003360:	4b09      	ldr	r3, [pc, #36]	@ (8003388 <MX_USART1_UART_Init+0x4c>)
 8003362:	220c      	movs	r2, #12
 8003364:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003366:	4b08      	ldr	r3, [pc, #32]	@ (8003388 <MX_USART1_UART_Init+0x4c>)
 8003368:	2200      	movs	r2, #0
 800336a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800336c:	4b06      	ldr	r3, [pc, #24]	@ (8003388 <MX_USART1_UART_Init+0x4c>)
 800336e:	2200      	movs	r2, #0
 8003370:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003372:	4805      	ldr	r0, [pc, #20]	@ (8003388 <MX_USART1_UART_Init+0x4c>)
 8003374:	f004 f980 	bl	8007678 <HAL_UART_Init>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800337e:	f7ff fd88 	bl	8002e92 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003382:	bf00      	nop
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	20000218 	.word	0x20000218
 800338c:	40013800 	.word	0x40013800

08003390 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003394:	4b11      	ldr	r3, [pc, #68]	@ (80033dc <MX_USART3_UART_Init+0x4c>)
 8003396:	4a12      	ldr	r2, [pc, #72]	@ (80033e0 <MX_USART3_UART_Init+0x50>)
 8003398:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800339a:	4b10      	ldr	r3, [pc, #64]	@ (80033dc <MX_USART3_UART_Init+0x4c>)
 800339c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80033a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80033a2:	4b0e      	ldr	r3, [pc, #56]	@ (80033dc <MX_USART3_UART_Init+0x4c>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80033a8:	4b0c      	ldr	r3, [pc, #48]	@ (80033dc <MX_USART3_UART_Init+0x4c>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80033ae:	4b0b      	ldr	r3, [pc, #44]	@ (80033dc <MX_USART3_UART_Init+0x4c>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80033b4:	4b09      	ldr	r3, [pc, #36]	@ (80033dc <MX_USART3_UART_Init+0x4c>)
 80033b6:	220c      	movs	r2, #12
 80033b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033ba:	4b08      	ldr	r3, [pc, #32]	@ (80033dc <MX_USART3_UART_Init+0x4c>)
 80033bc:	2200      	movs	r2, #0
 80033be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80033c0:	4b06      	ldr	r3, [pc, #24]	@ (80033dc <MX_USART3_UART_Init+0x4c>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80033c6:	4805      	ldr	r0, [pc, #20]	@ (80033dc <MX_USART3_UART_Init+0x4c>)
 80033c8:	f004 f956 	bl	8007678 <HAL_UART_Init>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80033d2:	f7ff fd5e 	bl	8002e92 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80033d6:	bf00      	nop
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	20000260 	.word	0x20000260
 80033e0:	40004800 	.word	0x40004800

080033e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b08a      	sub	sp, #40	@ 0x28
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ec:	f107 0318 	add.w	r3, r7, #24
 80033f0:	2200      	movs	r2, #0
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	605a      	str	r2, [r3, #4]
 80033f6:	609a      	str	r2, [r3, #8]
 80033f8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a3c      	ldr	r2, [pc, #240]	@ (80034f0 <HAL_UART_MspInit+0x10c>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d13a      	bne.n	800347a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003404:	4b3b      	ldr	r3, [pc, #236]	@ (80034f4 <HAL_UART_MspInit+0x110>)
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	4a3a      	ldr	r2, [pc, #232]	@ (80034f4 <HAL_UART_MspInit+0x110>)
 800340a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800340e:	6193      	str	r3, [r2, #24]
 8003410:	4b38      	ldr	r3, [pc, #224]	@ (80034f4 <HAL_UART_MspInit+0x110>)
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003418:	617b      	str	r3, [r7, #20]
 800341a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800341c:	4b35      	ldr	r3, [pc, #212]	@ (80034f4 <HAL_UART_MspInit+0x110>)
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	4a34      	ldr	r2, [pc, #208]	@ (80034f4 <HAL_UART_MspInit+0x110>)
 8003422:	f043 0304 	orr.w	r3, r3, #4
 8003426:	6193      	str	r3, [r2, #24]
 8003428:	4b32      	ldr	r3, [pc, #200]	@ (80034f4 <HAL_UART_MspInit+0x110>)
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	f003 0304 	and.w	r3, r3, #4
 8003430:	613b      	str	r3, [r7, #16]
 8003432:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003434:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003438:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800343a:	2302      	movs	r3, #2
 800343c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800343e:	2303      	movs	r3, #3
 8003440:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003442:	f107 0318 	add.w	r3, r7, #24
 8003446:	4619      	mov	r1, r3
 8003448:	482b      	ldr	r0, [pc, #172]	@ (80034f8 <HAL_UART_MspInit+0x114>)
 800344a:	f001 f94f 	bl	80046ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800344e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003452:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003454:	2300      	movs	r3, #0
 8003456:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003458:	2300      	movs	r3, #0
 800345a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800345c:	f107 0318 	add.w	r3, r7, #24
 8003460:	4619      	mov	r1, r3
 8003462:	4825      	ldr	r0, [pc, #148]	@ (80034f8 <HAL_UART_MspInit+0x114>)
 8003464:	f001 f942 	bl	80046ec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8003468:	2200      	movs	r2, #0
 800346a:	2101      	movs	r1, #1
 800346c:	2025      	movs	r0, #37	@ 0x25
 800346e:	f000 fe64 	bl	800413a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003472:	2025      	movs	r0, #37	@ 0x25
 8003474:	f000 fe7d 	bl	8004172 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003478:	e036      	b.n	80034e8 <HAL_UART_MspInit+0x104>
  else if(uartHandle->Instance==USART3)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a1f      	ldr	r2, [pc, #124]	@ (80034fc <HAL_UART_MspInit+0x118>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d131      	bne.n	80034e8 <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003484:	4b1b      	ldr	r3, [pc, #108]	@ (80034f4 <HAL_UART_MspInit+0x110>)
 8003486:	69db      	ldr	r3, [r3, #28]
 8003488:	4a1a      	ldr	r2, [pc, #104]	@ (80034f4 <HAL_UART_MspInit+0x110>)
 800348a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800348e:	61d3      	str	r3, [r2, #28]
 8003490:	4b18      	ldr	r3, [pc, #96]	@ (80034f4 <HAL_UART_MspInit+0x110>)
 8003492:	69db      	ldr	r3, [r3, #28]
 8003494:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003498:	60fb      	str	r3, [r7, #12]
 800349a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800349c:	4b15      	ldr	r3, [pc, #84]	@ (80034f4 <HAL_UART_MspInit+0x110>)
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	4a14      	ldr	r2, [pc, #80]	@ (80034f4 <HAL_UART_MspInit+0x110>)
 80034a2:	f043 0308 	orr.w	r3, r3, #8
 80034a6:	6193      	str	r3, [r2, #24]
 80034a8:	4b12      	ldr	r3, [pc, #72]	@ (80034f4 <HAL_UART_MspInit+0x110>)
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	f003 0308 	and.w	r3, r3, #8
 80034b0:	60bb      	str	r3, [r7, #8]
 80034b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80034b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80034b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ba:	2302      	movs	r3, #2
 80034bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034be:	2303      	movs	r3, #3
 80034c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034c2:	f107 0318 	add.w	r3, r7, #24
 80034c6:	4619      	mov	r1, r3
 80034c8:	480d      	ldr	r0, [pc, #52]	@ (8003500 <HAL_UART_MspInit+0x11c>)
 80034ca:	f001 f90f 	bl	80046ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80034ce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80034d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034d4:	2300      	movs	r3, #0
 80034d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d8:	2300      	movs	r3, #0
 80034da:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034dc:	f107 0318 	add.w	r3, r7, #24
 80034e0:	4619      	mov	r1, r3
 80034e2:	4807      	ldr	r0, [pc, #28]	@ (8003500 <HAL_UART_MspInit+0x11c>)
 80034e4:	f001 f902 	bl	80046ec <HAL_GPIO_Init>
}
 80034e8:	bf00      	nop
 80034ea:	3728      	adds	r7, #40	@ 0x28
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40013800 	.word	0x40013800
 80034f4:	40021000 	.word	0x40021000
 80034f8:	40010800 	.word	0x40010800
 80034fc:	40004800 	.word	0x40004800
 8003500:	40010c00 	.word	0x40010c00

08003504 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003504:	f7ff fdbc 	bl	8003080 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003508:	480b      	ldr	r0, [pc, #44]	@ (8003538 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800350a:	490c      	ldr	r1, [pc, #48]	@ (800353c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800350c:	4a0c      	ldr	r2, [pc, #48]	@ (8003540 <LoopFillZerobss+0x16>)
  movs r3, #0
 800350e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003510:	e002      	b.n	8003518 <LoopCopyDataInit>

08003512 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003512:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003514:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003516:	3304      	adds	r3, #4

08003518 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003518:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800351a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800351c:	d3f9      	bcc.n	8003512 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800351e:	4a09      	ldr	r2, [pc, #36]	@ (8003544 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003520:	4c09      	ldr	r4, [pc, #36]	@ (8003548 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003522:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003524:	e001      	b.n	800352a <LoopFillZerobss>

08003526 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003526:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003528:	3204      	adds	r2, #4

0800352a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800352a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800352c:	d3fb      	bcc.n	8003526 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800352e:	f005 fab7 	bl	8008aa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003532:	f7fd fe3b 	bl	80011ac <main>
  bx lr
 8003536:	4770      	bx	lr
  ldr r0, =_sdata
 8003538:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800353c:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8003540:	0800a4d8 	.word	0x0800a4d8
  ldr r2, =_sbss
 8003544:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8003548:	200003fc 	.word	0x200003fc

0800354c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800354c:	e7fe      	b.n	800354c <ADC1_2_IRQHandler>
	...

08003550 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8003558:	4a11      	ldr	r2, [pc, #68]	@ (80035a0 <RetargetInit+0x50>)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800355e:	4b11      	ldr	r3, [pc, #68]	@ (80035a4 <RetargetInit+0x54>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	6898      	ldr	r0, [r3, #8]
 8003564:	2300      	movs	r3, #0
 8003566:	2202      	movs	r2, #2
 8003568:	2100      	movs	r1, #0
 800356a:	f005 f8b9 	bl	80086e0 <setvbuf>
  setvbuf(stdin, NULL, _IONBF, 0);
 800356e:	4b0d      	ldr	r3, [pc, #52]	@ (80035a4 <RetargetInit+0x54>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6858      	ldr	r0, [r3, #4]
 8003574:	2300      	movs	r3, #0
 8003576:	2202      	movs	r2, #2
 8003578:	2100      	movs	r1, #0
 800357a:	f005 f8b1 	bl	80086e0 <setvbuf>
  __HAL_UART_CLEAR_OREFLAG(gHuart);
 800357e:	2300      	movs	r3, #0
 8003580:	60fb      	str	r3, [r7, #12]
 8003582:	4b07      	ldr	r3, [pc, #28]	@ (80035a0 <RetargetInit+0x50>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	60fb      	str	r3, [r7, #12]
 800358c:	4b04      	ldr	r3, [pc, #16]	@ (80035a0 <RetargetInit+0x50>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	60fb      	str	r3, [r7, #12]
 8003596:	68fb      	ldr	r3, [r7, #12]

}
 8003598:	bf00      	nop
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	200002a8 	.word	0x200002a8
 80035a4:	20000048 	.word	0x20000048

080035a8 <_write>:


int _write(int fd, char* ptr, int len) {
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d002      	beq.n	80035c0 <_write+0x18>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d111      	bne.n	80035e4 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80035c0:	4b0e      	ldr	r3, [pc, #56]	@ (80035fc <_write+0x54>)
 80035c2:	6818      	ldr	r0, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	f04f 33ff 	mov.w	r3, #4294967295
 80035cc:	68b9      	ldr	r1, [r7, #8]
 80035ce:	f004 f8a3 	bl	8007718 <HAL_UART_Transmit>
 80035d2:	4603      	mov	r3, r0
 80035d4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80035d6:	7dfb      	ldrb	r3, [r7, #23]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <_write+0x38>
      return len;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	e008      	b.n	80035f2 <_write+0x4a>
    else
      return EIO;
 80035e0:	2305      	movs	r3, #5
 80035e2:	e006      	b.n	80035f2 <_write+0x4a>
  }
  errno = EBADF;
 80035e4:	f005 fa56 	bl	8008a94 <__errno>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2209      	movs	r2, #9
 80035ec:	601a      	str	r2, [r3, #0]
  return -1;
 80035ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3718      	adds	r7, #24
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	200002a8 	.word	0x200002a8

08003600 <_read>:


int _read(int fd, char* ptr, int len) {
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d110      	bne.n	8003634 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8003612:	4b0e      	ldr	r3, [pc, #56]	@ (800364c <_read+0x4c>)
 8003614:	6818      	ldr	r0, [r3, #0]
 8003616:	f04f 33ff 	mov.w	r3, #4294967295
 800361a:	2201      	movs	r2, #1
 800361c:	68b9      	ldr	r1, [r7, #8]
 800361e:	f004 f906 	bl	800782e <HAL_UART_Receive>
 8003622:	4603      	mov	r3, r0
 8003624:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8003626:	7dfb      	ldrb	r3, [r7, #23]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d101      	bne.n	8003630 <_read+0x30>
      return 1;
 800362c:	2301      	movs	r3, #1
 800362e:	e008      	b.n	8003642 <_read+0x42>
    else
      return EIO;
 8003630:	2305      	movs	r3, #5
 8003632:	e006      	b.n	8003642 <_read+0x42>
  }
  errno = EBADF;
 8003634:	f005 fa2e 	bl	8008a94 <__errno>
 8003638:	4603      	mov	r3, r0
 800363a:	2209      	movs	r2, #9
 800363c:	601a      	str	r2, [r3, #0]
  return -1;
 800363e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003642:	4618      	mov	r0, r3
 8003644:	3718      	adds	r7, #24
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	200002a8 	.word	0x200002a8

08003650 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003654:	4b08      	ldr	r3, [pc, #32]	@ (8003678 <HAL_Init+0x28>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a07      	ldr	r2, [pc, #28]	@ (8003678 <HAL_Init+0x28>)
 800365a:	f043 0310 	orr.w	r3, r3, #16
 800365e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003660:	2003      	movs	r0, #3
 8003662:	f000 fd5f 	bl	8004124 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003666:	2000      	movs	r0, #0
 8003668:	f000 f808 	bl	800367c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800366c:	f7ff fc18 	bl	8002ea0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	40022000 	.word	0x40022000

0800367c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003684:	4b12      	ldr	r3, [pc, #72]	@ (80036d0 <HAL_InitTick+0x54>)
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	4b12      	ldr	r3, [pc, #72]	@ (80036d4 <HAL_InitTick+0x58>)
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	4619      	mov	r1, r3
 800368e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003692:	fbb3 f3f1 	udiv	r3, r3, r1
 8003696:	fbb2 f3f3 	udiv	r3, r2, r3
 800369a:	4618      	mov	r0, r3
 800369c:	f000 fd77 	bl	800418e <HAL_SYSTICK_Config>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e00e      	b.n	80036c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2b0f      	cmp	r3, #15
 80036ae:	d80a      	bhi.n	80036c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036b0:	2200      	movs	r2, #0
 80036b2:	6879      	ldr	r1, [r7, #4]
 80036b4:	f04f 30ff 	mov.w	r0, #4294967295
 80036b8:	f000 fd3f 	bl	800413a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036bc:	4a06      	ldr	r2, [pc, #24]	@ (80036d8 <HAL_InitTick+0x5c>)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
 80036c4:	e000      	b.n	80036c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3708      	adds	r7, #8
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	20000030 	.word	0x20000030
 80036d4:	20000038 	.word	0x20000038
 80036d8:	20000034 	.word	0x20000034

080036dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036e0:	4b05      	ldr	r3, [pc, #20]	@ (80036f8 <HAL_IncTick+0x1c>)
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	461a      	mov	r2, r3
 80036e6:	4b05      	ldr	r3, [pc, #20]	@ (80036fc <HAL_IncTick+0x20>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4413      	add	r3, r2
 80036ec:	4a03      	ldr	r2, [pc, #12]	@ (80036fc <HAL_IncTick+0x20>)
 80036ee:	6013      	str	r3, [r2, #0]
}
 80036f0:	bf00      	nop
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bc80      	pop	{r7}
 80036f6:	4770      	bx	lr
 80036f8:	20000038 	.word	0x20000038
 80036fc:	200002ac 	.word	0x200002ac

08003700 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0
  return uwTick;
 8003704:	4b02      	ldr	r3, [pc, #8]	@ (8003710 <HAL_GetTick+0x10>)
 8003706:	681b      	ldr	r3, [r3, #0]
}
 8003708:	4618      	mov	r0, r3
 800370a:	46bd      	mov	sp, r7
 800370c:	bc80      	pop	{r7}
 800370e:	4770      	bx	lr
 8003710:	200002ac 	.word	0x200002ac

08003714 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800371c:	f7ff fff0 	bl	8003700 <HAL_GetTick>
 8003720:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800372c:	d005      	beq.n	800373a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800372e:	4b0a      	ldr	r3, [pc, #40]	@ (8003758 <HAL_Delay+0x44>)
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	461a      	mov	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	4413      	add	r3, r2
 8003738:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800373a:	bf00      	nop
 800373c:	f7ff ffe0 	bl	8003700 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	429a      	cmp	r2, r3
 800374a:	d8f7      	bhi.n	800373c <HAL_Delay+0x28>
  {
  }
}
 800374c:	bf00      	nop
 800374e:	bf00      	nop
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	20000038 	.word	0x20000038

0800375c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b086      	sub	sp, #24
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003764:	2300      	movs	r3, #0
 8003766:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003768:	2300      	movs	r3, #0
 800376a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800376c:	2300      	movs	r3, #0
 800376e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003770:	2300      	movs	r3, #0
 8003772:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e0be      	b.n	80038fc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003788:	2b00      	cmp	r3, #0
 800378a:	d109      	bne.n	80037a0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7fd fb7a 	bl	8000e94 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 fb4b 	bl	8003e3c <ADC_ConversionStop_Disable>
 80037a6:	4603      	mov	r3, r0
 80037a8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ae:	f003 0310 	and.w	r3, r3, #16
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f040 8099 	bne.w	80038ea <HAL_ADC_Init+0x18e>
 80037b8:	7dfb      	ldrb	r3, [r7, #23]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f040 8095 	bne.w	80038ea <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037c4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80037c8:	f023 0302 	bic.w	r3, r3, #2
 80037cc:	f043 0202 	orr.w	r2, r3, #2
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80037dc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	7b1b      	ldrb	r3, [r3, #12]
 80037e2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80037e4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037f4:	d003      	beq.n	80037fe <HAL_ADC_Init+0xa2>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d102      	bne.n	8003804 <HAL_ADC_Init+0xa8>
 80037fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003802:	e000      	b.n	8003806 <HAL_ADC_Init+0xaa>
 8003804:	2300      	movs	r3, #0
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	4313      	orrs	r3, r2
 800380a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	7d1b      	ldrb	r3, [r3, #20]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d119      	bne.n	8003848 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	7b1b      	ldrb	r3, [r3, #12]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d109      	bne.n	8003830 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	3b01      	subs	r3, #1
 8003822:	035a      	lsls	r2, r3, #13
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	4313      	orrs	r3, r2
 8003828:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800382c:	613b      	str	r3, [r7, #16]
 800382e:	e00b      	b.n	8003848 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003834:	f043 0220 	orr.w	r2, r3, #32
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003840:	f043 0201 	orr.w	r2, r3, #1
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	430a      	orrs	r2, r1
 800385a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689a      	ldr	r2, [r3, #8]
 8003862:	4b28      	ldr	r3, [pc, #160]	@ (8003904 <HAL_ADC_Init+0x1a8>)
 8003864:	4013      	ands	r3, r2
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	6812      	ldr	r2, [r2, #0]
 800386a:	68b9      	ldr	r1, [r7, #8]
 800386c:	430b      	orrs	r3, r1
 800386e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003878:	d003      	beq.n	8003882 <HAL_ADC_Init+0x126>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d104      	bne.n	800388c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	3b01      	subs	r3, #1
 8003888:	051b      	lsls	r3, r3, #20
 800388a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003892:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	430a      	orrs	r2, r1
 800389e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689a      	ldr	r2, [r3, #8]
 80038a6:	4b18      	ldr	r3, [pc, #96]	@ (8003908 <HAL_ADC_Init+0x1ac>)
 80038a8:	4013      	ands	r3, r2
 80038aa:	68ba      	ldr	r2, [r7, #8]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d10b      	bne.n	80038c8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ba:	f023 0303 	bic.w	r3, r3, #3
 80038be:	f043 0201 	orr.w	r2, r3, #1
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80038c6:	e018      	b.n	80038fa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038cc:	f023 0312 	bic.w	r3, r3, #18
 80038d0:	f043 0210 	orr.w	r2, r3, #16
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038dc:	f043 0201 	orr.w	r2, r3, #1
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80038e8:	e007      	b.n	80038fa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ee:	f043 0210 	orr.w	r2, r3, #16
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80038fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3718      	adds	r7, #24
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	ffe1f7fd 	.word	0xffe1f7fd
 8003908:	ff1f0efe 	.word	0xff1f0efe

0800390c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003918:	2300      	movs	r3, #0
 800391a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a64      	ldr	r2, [pc, #400]	@ (8003ab4 <HAL_ADC_Start_DMA+0x1a8>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d004      	beq.n	8003930 <HAL_ADC_Start_DMA+0x24>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a63      	ldr	r2, [pc, #396]	@ (8003ab8 <HAL_ADC_Start_DMA+0x1ac>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d106      	bne.n	800393e <HAL_ADC_Start_DMA+0x32>
 8003930:	4b60      	ldr	r3, [pc, #384]	@ (8003ab4 <HAL_ADC_Start_DMA+0x1a8>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8003938:	2b00      	cmp	r3, #0
 800393a:	f040 80b3 	bne.w	8003aa4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003944:	2b01      	cmp	r3, #1
 8003946:	d101      	bne.n	800394c <HAL_ADC_Start_DMA+0x40>
 8003948:	2302      	movs	r3, #2
 800394a:	e0ae      	b.n	8003aaa <HAL_ADC_Start_DMA+0x19e>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f000 fa17 	bl	8003d88 <ADC_Enable>
 800395a:	4603      	mov	r3, r0
 800395c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800395e:	7dfb      	ldrb	r3, [r7, #23]
 8003960:	2b00      	cmp	r3, #0
 8003962:	f040 809a 	bne.w	8003a9a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800396a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800396e:	f023 0301 	bic.w	r3, r3, #1
 8003972:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a4e      	ldr	r2, [pc, #312]	@ (8003ab8 <HAL_ADC_Start_DMA+0x1ac>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d105      	bne.n	8003990 <HAL_ADC_Start_DMA+0x84>
 8003984:	4b4b      	ldr	r3, [pc, #300]	@ (8003ab4 <HAL_ADC_Start_DMA+0x1a8>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d115      	bne.n	80039bc <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003994:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d026      	beq.n	80039f8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ae:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80039b2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80039ba:	e01d      	b.n	80039f8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a39      	ldr	r2, [pc, #228]	@ (8003ab4 <HAL_ADC_Start_DMA+0x1a8>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d004      	beq.n	80039dc <HAL_ADC_Start_DMA+0xd0>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a38      	ldr	r2, [pc, #224]	@ (8003ab8 <HAL_ADC_Start_DMA+0x1ac>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d10d      	bne.n	80039f8 <HAL_ADC_Start_DMA+0xec>
 80039dc:	4b35      	ldr	r3, [pc, #212]	@ (8003ab4 <HAL_ADC_Start_DMA+0x1a8>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d007      	beq.n	80039f8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ec:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80039f0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d006      	beq.n	8003a12 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a08:	f023 0206 	bic.w	r2, r3, #6
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003a10:	e002      	b.n	8003a18 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	4a25      	ldr	r2, [pc, #148]	@ (8003abc <HAL_ADC_Start_DMA+0x1b0>)
 8003a26:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	4a24      	ldr	r2, [pc, #144]	@ (8003ac0 <HAL_ADC_Start_DMA+0x1b4>)
 8003a2e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	4a23      	ldr	r2, [pc, #140]	@ (8003ac4 <HAL_ADC_Start_DMA+0x1b8>)
 8003a36:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f06f 0202 	mvn.w	r2, #2
 8003a40:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	689a      	ldr	r2, [r3, #8]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a50:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6a18      	ldr	r0, [r3, #32]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	334c      	adds	r3, #76	@ 0x4c
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	68ba      	ldr	r2, [r7, #8]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f000 fbfb 	bl	800425c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003a70:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003a74:	d108      	bne.n	8003a88 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8003a84:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003a86:	e00f      	b.n	8003aa8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689a      	ldr	r2, [r3, #8]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003a96:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003a98:	e006      	b.n	8003aa8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8003aa2:	e001      	b.n	8003aa8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003aa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3718      	adds	r7, #24
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	40012400 	.word	0x40012400
 8003ab8:	40012800 	.word	0x40012800
 8003abc:	08003ebf 	.word	0x08003ebf
 8003ac0:	08003f3b 	.word	0x08003f3b
 8003ac4:	08003f57 	.word	0x08003f57

08003ac8 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d101      	bne.n	8003ae2 <HAL_ADC_Stop_DMA+0x1a>
 8003ade:	2302      	movs	r3, #2
 8003ae0:	e03a      	b.n	8003b58 <HAL_ADC_Stop_DMA+0x90>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f9a6 	bl	8003e3c <ADC_ConversionStop_Disable>
 8003af0:	4603      	mov	r3, r0
 8003af2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003af4:	7bfb      	ldrb	r3, [r7, #15]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d129      	bne.n	8003b4e <HAL_ADC_Stop_DMA+0x86>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689a      	ldr	r2, [r3, #8]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b08:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d11a      	bne.n	8003b4e <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a1b      	ldr	r3, [r3, #32]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f000 fbfd 	bl	800431c <HAL_DMA_Abort>
 8003b22:	4603      	mov	r3, r0
 8003b24:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8003b26:	7bfb      	ldrb	r3, [r7, #15]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10a      	bne.n	8003b42 <HAL_ADC_Stop_DMA+0x7a>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b30:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003b34:	f023 0301 	bic.w	r3, r3, #1
 8003b38:	f043 0201 	orr.w	r2, r3, #1
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b40:	e005      	b.n	8003b4e <HAL_ADC_Stop_DMA+0x86>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b46:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8003b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3710      	adds	r7, #16
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bc80      	pop	{r7}
 8003b70:	4770      	bx	lr

08003b72 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003b72:	b480      	push	{r7}
 8003b74:	b083      	sub	sp, #12
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003b7a:	bf00      	nop
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bc80      	pop	{r7}
 8003b82:	4770      	bx	lr

08003b84 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bc80      	pop	{r7}
 8003b94:	4770      	bx	lr
	...

08003b98 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d101      	bne.n	8003bb8 <HAL_ADC_ConfigChannel+0x20>
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	e0dc      	b.n	8003d72 <HAL_ADC_ConfigChannel+0x1da>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	2b06      	cmp	r3, #6
 8003bc6:	d81c      	bhi.n	8003c02 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4413      	add	r3, r2
 8003bd8:	3b05      	subs	r3, #5
 8003bda:	221f      	movs	r2, #31
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	43db      	mvns	r3, r3
 8003be2:	4019      	ands	r1, r3
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	6818      	ldr	r0, [r3, #0]
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685a      	ldr	r2, [r3, #4]
 8003bec:	4613      	mov	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4413      	add	r3, r2
 8003bf2:	3b05      	subs	r3, #5
 8003bf4:	fa00 f203 	lsl.w	r2, r0, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	635a      	str	r2, [r3, #52]	@ 0x34
 8003c00:	e03c      	b.n	8003c7c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	2b0c      	cmp	r3, #12
 8003c08:	d81c      	bhi.n	8003c44 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685a      	ldr	r2, [r3, #4]
 8003c14:	4613      	mov	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	4413      	add	r3, r2
 8003c1a:	3b23      	subs	r3, #35	@ 0x23
 8003c1c:	221f      	movs	r2, #31
 8003c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c22:	43db      	mvns	r3, r3
 8003c24:	4019      	ands	r1, r3
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	6818      	ldr	r0, [r3, #0]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	4413      	add	r3, r2
 8003c34:	3b23      	subs	r3, #35	@ 0x23
 8003c36:	fa00 f203 	lsl.w	r2, r0, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c42:	e01b      	b.n	8003c7c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685a      	ldr	r2, [r3, #4]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	4413      	add	r3, r2
 8003c54:	3b41      	subs	r3, #65	@ 0x41
 8003c56:	221f      	movs	r2, #31
 8003c58:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5c:	43db      	mvns	r3, r3
 8003c5e:	4019      	ands	r1, r3
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	6818      	ldr	r0, [r3, #0]
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4413      	add	r3, r2
 8003c6e:	3b41      	subs	r3, #65	@ 0x41
 8003c70:	fa00 f203 	lsl.w	r2, r0, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	430a      	orrs	r2, r1
 8003c7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2b09      	cmp	r3, #9
 8003c82:	d91c      	bls.n	8003cbe <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68d9      	ldr	r1, [r3, #12]
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	4413      	add	r3, r2
 8003c94:	3b1e      	subs	r3, #30
 8003c96:	2207      	movs	r2, #7
 8003c98:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9c:	43db      	mvns	r3, r3
 8003c9e:	4019      	ands	r1, r3
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	6898      	ldr	r0, [r3, #8]
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	4413      	add	r3, r2
 8003cae:	3b1e      	subs	r3, #30
 8003cb0:	fa00 f203 	lsl.w	r2, r0, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	60da      	str	r2, [r3, #12]
 8003cbc:	e019      	b.n	8003cf2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	6919      	ldr	r1, [r3, #16]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	4413      	add	r3, r2
 8003cce:	2207      	movs	r2, #7
 8003cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd4:	43db      	mvns	r3, r3
 8003cd6:	4019      	ands	r1, r3
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	6898      	ldr	r0, [r3, #8]
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	4413      	add	r3, r2
 8003ce6:	fa00 f203 	lsl.w	r2, r0, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2b10      	cmp	r3, #16
 8003cf8:	d003      	beq.n	8003d02 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003cfe:	2b11      	cmp	r3, #17
 8003d00:	d132      	bne.n	8003d68 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a1d      	ldr	r2, [pc, #116]	@ (8003d7c <HAL_ADC_ConfigChannel+0x1e4>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d125      	bne.n	8003d58 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d126      	bne.n	8003d68 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689a      	ldr	r2, [r3, #8]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003d28:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2b10      	cmp	r3, #16
 8003d30:	d11a      	bne.n	8003d68 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003d32:	4b13      	ldr	r3, [pc, #76]	@ (8003d80 <HAL_ADC_ConfigChannel+0x1e8>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a13      	ldr	r2, [pc, #76]	@ (8003d84 <HAL_ADC_ConfigChannel+0x1ec>)
 8003d38:	fba2 2303 	umull	r2, r3, r2, r3
 8003d3c:	0c9a      	lsrs	r2, r3, #18
 8003d3e:	4613      	mov	r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	4413      	add	r3, r2
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003d48:	e002      	b.n	8003d50 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1f9      	bne.n	8003d4a <HAL_ADC_ConfigChannel+0x1b2>
 8003d56:	e007      	b.n	8003d68 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d5c:	f043 0220 	orr.w	r2, r3, #32
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bc80      	pop	{r7}
 8003d7a:	4770      	bx	lr
 8003d7c:	40012400 	.word	0x40012400
 8003d80:	20000030 	.word	0x20000030
 8003d84:	431bde83 	.word	0x431bde83

08003d88 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d90:	2300      	movs	r3, #0
 8003d92:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003d94:	2300      	movs	r3, #0
 8003d96:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d040      	beq.n	8003e28 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	689a      	ldr	r2, [r3, #8]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f042 0201 	orr.w	r2, r2, #1
 8003db4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003db6:	4b1f      	ldr	r3, [pc, #124]	@ (8003e34 <ADC_Enable+0xac>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a1f      	ldr	r2, [pc, #124]	@ (8003e38 <ADC_Enable+0xb0>)
 8003dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc0:	0c9b      	lsrs	r3, r3, #18
 8003dc2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003dc4:	e002      	b.n	8003dcc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1f9      	bne.n	8003dc6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003dd2:	f7ff fc95 	bl	8003700 <HAL_GetTick>
 8003dd6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003dd8:	e01f      	b.n	8003e1a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003dda:	f7ff fc91 	bl	8003700 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d918      	bls.n	8003e1a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d011      	beq.n	8003e1a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dfa:	f043 0210 	orr.w	r2, r3, #16
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e06:	f043 0201 	orr.w	r2, r3, #1
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e007      	b.n	8003e2a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d1d8      	bne.n	8003dda <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	20000030 	.word	0x20000030
 8003e38:	431bde83 	.word	0x431bde83

08003e3c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e44:	2300      	movs	r3, #0
 8003e46:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d12e      	bne.n	8003eb4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	689a      	ldr	r2, [r3, #8]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f022 0201 	bic.w	r2, r2, #1
 8003e64:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003e66:	f7ff fc4b 	bl	8003700 <HAL_GetTick>
 8003e6a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003e6c:	e01b      	b.n	8003ea6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003e6e:	f7ff fc47 	bl	8003700 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d914      	bls.n	8003ea6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d10d      	bne.n	8003ea6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e8e:	f043 0210 	orr.w	r2, r3, #16
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e9a:	f043 0201 	orr.w	r2, r3, #1
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e007      	b.n	8003eb6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d0dc      	beq.n	8003e6e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b084      	sub	sp, #16
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eca:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d127      	bne.n	8003f28 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003edc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003eee:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003ef2:	d115      	bne.n	8003f20 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d111      	bne.n	8003f20 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f00:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d105      	bne.n	8003f20 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f18:	f043 0201 	orr.w	r2, r3, #1
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003f20:	68f8      	ldr	r0, [r7, #12]
 8003f22:	f7ff fe1d 	bl	8003b60 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003f26:	e004      	b.n	8003f32 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6a1b      	ldr	r3, [r3, #32]
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	4798      	blx	r3
}
 8003f32:	bf00      	nop
 8003f34:	3710      	adds	r7, #16
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b084      	sub	sp, #16
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f46:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f7ff fe12 	bl	8003b72 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f4e:	bf00      	nop
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b084      	sub	sp, #16
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f62:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f68:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f74:	f043 0204 	orr.w	r2, r3, #4
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f7ff fe01 	bl	8003b84 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f82:	bf00      	nop
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
	...

08003f8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f003 0307 	and.w	r3, r3, #7
 8003f9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8003fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003fa8:	4013      	ands	r3, r2
 8003faa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fb4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003fb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fbe:	4a04      	ldr	r2, [pc, #16]	@ (8003fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	60d3      	str	r3, [r2, #12]
}
 8003fc4:	bf00      	nop
 8003fc6:	3714      	adds	r7, #20
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bc80      	pop	{r7}
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	e000ed00 	.word	0xe000ed00

08003fd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fd8:	4b04      	ldr	r3, [pc, #16]	@ (8003fec <__NVIC_GetPriorityGrouping+0x18>)
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	0a1b      	lsrs	r3, r3, #8
 8003fde:	f003 0307 	and.w	r3, r3, #7
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bc80      	pop	{r7}
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	e000ed00 	.word	0xe000ed00

08003ff0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	db0b      	blt.n	800401a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004002:	79fb      	ldrb	r3, [r7, #7]
 8004004:	f003 021f 	and.w	r2, r3, #31
 8004008:	4906      	ldr	r1, [pc, #24]	@ (8004024 <__NVIC_EnableIRQ+0x34>)
 800400a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800400e:	095b      	lsrs	r3, r3, #5
 8004010:	2001      	movs	r0, #1
 8004012:	fa00 f202 	lsl.w	r2, r0, r2
 8004016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800401a:	bf00      	nop
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	bc80      	pop	{r7}
 8004022:	4770      	bx	lr
 8004024:	e000e100 	.word	0xe000e100

08004028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	4603      	mov	r3, r0
 8004030:	6039      	str	r1, [r7, #0]
 8004032:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004038:	2b00      	cmp	r3, #0
 800403a:	db0a      	blt.n	8004052 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	b2da      	uxtb	r2, r3
 8004040:	490c      	ldr	r1, [pc, #48]	@ (8004074 <__NVIC_SetPriority+0x4c>)
 8004042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004046:	0112      	lsls	r2, r2, #4
 8004048:	b2d2      	uxtb	r2, r2
 800404a:	440b      	add	r3, r1
 800404c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004050:	e00a      	b.n	8004068 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	b2da      	uxtb	r2, r3
 8004056:	4908      	ldr	r1, [pc, #32]	@ (8004078 <__NVIC_SetPriority+0x50>)
 8004058:	79fb      	ldrb	r3, [r7, #7]
 800405a:	f003 030f 	and.w	r3, r3, #15
 800405e:	3b04      	subs	r3, #4
 8004060:	0112      	lsls	r2, r2, #4
 8004062:	b2d2      	uxtb	r2, r2
 8004064:	440b      	add	r3, r1
 8004066:	761a      	strb	r2, [r3, #24]
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	bc80      	pop	{r7}
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	e000e100 	.word	0xe000e100
 8004078:	e000ed00 	.word	0xe000ed00

0800407c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800407c:	b480      	push	{r7}
 800407e:	b089      	sub	sp, #36	@ 0x24
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f003 0307 	and.w	r3, r3, #7
 800408e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	f1c3 0307 	rsb	r3, r3, #7
 8004096:	2b04      	cmp	r3, #4
 8004098:	bf28      	it	cs
 800409a:	2304      	movcs	r3, #4
 800409c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	3304      	adds	r3, #4
 80040a2:	2b06      	cmp	r3, #6
 80040a4:	d902      	bls.n	80040ac <NVIC_EncodePriority+0x30>
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	3b03      	subs	r3, #3
 80040aa:	e000      	b.n	80040ae <NVIC_EncodePriority+0x32>
 80040ac:	2300      	movs	r3, #0
 80040ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040b0:	f04f 32ff 	mov.w	r2, #4294967295
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ba:	43da      	mvns	r2, r3
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	401a      	ands	r2, r3
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040c4:	f04f 31ff 	mov.w	r1, #4294967295
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	fa01 f303 	lsl.w	r3, r1, r3
 80040ce:	43d9      	mvns	r1, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040d4:	4313      	orrs	r3, r2
         );
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3724      	adds	r7, #36	@ 0x24
 80040da:	46bd      	mov	sp, r7
 80040dc:	bc80      	pop	{r7}
 80040de:	4770      	bx	lr

080040e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	3b01      	subs	r3, #1
 80040ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040f0:	d301      	bcc.n	80040f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040f2:	2301      	movs	r3, #1
 80040f4:	e00f      	b.n	8004116 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040f6:	4a0a      	ldr	r2, [pc, #40]	@ (8004120 <SysTick_Config+0x40>)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	3b01      	subs	r3, #1
 80040fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040fe:	210f      	movs	r1, #15
 8004100:	f04f 30ff 	mov.w	r0, #4294967295
 8004104:	f7ff ff90 	bl	8004028 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004108:	4b05      	ldr	r3, [pc, #20]	@ (8004120 <SysTick_Config+0x40>)
 800410a:	2200      	movs	r2, #0
 800410c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800410e:	4b04      	ldr	r3, [pc, #16]	@ (8004120 <SysTick_Config+0x40>)
 8004110:	2207      	movs	r2, #7
 8004112:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	e000e010 	.word	0xe000e010

08004124 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f7ff ff2d 	bl	8003f8c <__NVIC_SetPriorityGrouping>
}
 8004132:	bf00      	nop
 8004134:	3708      	adds	r7, #8
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800413a:	b580      	push	{r7, lr}
 800413c:	b086      	sub	sp, #24
 800413e:	af00      	add	r7, sp, #0
 8004140:	4603      	mov	r3, r0
 8004142:	60b9      	str	r1, [r7, #8]
 8004144:	607a      	str	r2, [r7, #4]
 8004146:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004148:	2300      	movs	r3, #0
 800414a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800414c:	f7ff ff42 	bl	8003fd4 <__NVIC_GetPriorityGrouping>
 8004150:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	68b9      	ldr	r1, [r7, #8]
 8004156:	6978      	ldr	r0, [r7, #20]
 8004158:	f7ff ff90 	bl	800407c <NVIC_EncodePriority>
 800415c:	4602      	mov	r2, r0
 800415e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004162:	4611      	mov	r1, r2
 8004164:	4618      	mov	r0, r3
 8004166:	f7ff ff5f 	bl	8004028 <__NVIC_SetPriority>
}
 800416a:	bf00      	nop
 800416c:	3718      	adds	r7, #24
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004172:	b580      	push	{r7, lr}
 8004174:	b082      	sub	sp, #8
 8004176:	af00      	add	r7, sp, #0
 8004178:	4603      	mov	r3, r0
 800417a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800417c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004180:	4618      	mov	r0, r3
 8004182:	f7ff ff35 	bl	8003ff0 <__NVIC_EnableIRQ>
}
 8004186:	bf00      	nop
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b082      	sub	sp, #8
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f7ff ffa2 	bl	80040e0 <SysTick_Config>
 800419c:	4603      	mov	r3, r0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3708      	adds	r7, #8
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
	...

080041a8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80041b0:	2300      	movs	r3, #0
 80041b2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e043      	b.n	8004246 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	461a      	mov	r2, r3
 80041c4:	4b22      	ldr	r3, [pc, #136]	@ (8004250 <HAL_DMA_Init+0xa8>)
 80041c6:	4413      	add	r3, r2
 80041c8:	4a22      	ldr	r2, [pc, #136]	@ (8004254 <HAL_DMA_Init+0xac>)
 80041ca:	fba2 2303 	umull	r2, r3, r2, r3
 80041ce:	091b      	lsrs	r3, r3, #4
 80041d0:	009a      	lsls	r2, r3, #2
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a1f      	ldr	r2, [pc, #124]	@ (8004258 <HAL_DMA_Init+0xb0>)
 80041da:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2202      	movs	r2, #2
 80041e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80041f2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80041f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004200:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800420c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004218:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	4313      	orrs	r3, r2
 8004224:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3714      	adds	r7, #20
 800424a:	46bd      	mov	sp, r7
 800424c:	bc80      	pop	{r7}
 800424e:	4770      	bx	lr
 8004250:	bffdfff8 	.word	0xbffdfff8
 8004254:	cccccccd 	.word	0xcccccccd
 8004258:	40020000 	.word	0x40020000

0800425c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
 8004268:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800426a:	2300      	movs	r3, #0
 800426c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d101      	bne.n	800427c <HAL_DMA_Start_IT+0x20>
 8004278:	2302      	movs	r3, #2
 800427a:	e04b      	b.n	8004314 <HAL_DMA_Start_IT+0xb8>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800428a:	b2db      	uxtb	r3, r3
 800428c:	2b01      	cmp	r3, #1
 800428e:	d13a      	bne.n	8004306 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2202      	movs	r2, #2
 8004294:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f022 0201 	bic.w	r2, r2, #1
 80042ac:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	68b9      	ldr	r1, [r7, #8]
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f000 f9eb 	bl	8004690 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d008      	beq.n	80042d4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f042 020e 	orr.w	r2, r2, #14
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	e00f      	b.n	80042f4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f022 0204 	bic.w	r2, r2, #4
 80042e2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f042 020a 	orr.w	r2, r2, #10
 80042f2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f042 0201 	orr.w	r2, r2, #1
 8004302:	601a      	str	r2, [r3, #0]
 8004304:	e005      	b.n	8004312 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800430e:	2302      	movs	r3, #2
 8004310:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004312:	7dfb      	ldrb	r3, [r7, #23]
}
 8004314:	4618      	mov	r0, r3
 8004316:	3718      	adds	r7, #24
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004324:	2300      	movs	r3, #0
 8004326:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d008      	beq.n	8004346 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2204      	movs	r2, #4
 8004338:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e020      	b.n	8004388 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 020e 	bic.w	r2, r2, #14
 8004354:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f022 0201 	bic.w	r2, r2, #1
 8004364:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800436e:	2101      	movs	r1, #1
 8004370:	fa01 f202 	lsl.w	r2, r1, r2
 8004374:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004386:	7bfb      	ldrb	r3, [r7, #15]
}
 8004388:	4618      	mov	r0, r3
 800438a:	3714      	adds	r7, #20
 800438c:	46bd      	mov	sp, r7
 800438e:	bc80      	pop	{r7}
 8004390:	4770      	bx	lr
	...

08004394 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800439c:	2300      	movs	r3, #0
 800439e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d005      	beq.n	80043b8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2204      	movs	r2, #4
 80043b0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	73fb      	strb	r3, [r7, #15]
 80043b6:	e051      	b.n	800445c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 020e 	bic.w	r2, r2, #14
 80043c6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f022 0201 	bic.w	r2, r2, #1
 80043d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a22      	ldr	r2, [pc, #136]	@ (8004468 <HAL_DMA_Abort_IT+0xd4>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d029      	beq.n	8004436 <HAL_DMA_Abort_IT+0xa2>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a21      	ldr	r2, [pc, #132]	@ (800446c <HAL_DMA_Abort_IT+0xd8>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d022      	beq.n	8004432 <HAL_DMA_Abort_IT+0x9e>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a1f      	ldr	r2, [pc, #124]	@ (8004470 <HAL_DMA_Abort_IT+0xdc>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d01a      	beq.n	800442c <HAL_DMA_Abort_IT+0x98>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a1e      	ldr	r2, [pc, #120]	@ (8004474 <HAL_DMA_Abort_IT+0xe0>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d012      	beq.n	8004426 <HAL_DMA_Abort_IT+0x92>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a1c      	ldr	r2, [pc, #112]	@ (8004478 <HAL_DMA_Abort_IT+0xe4>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d00a      	beq.n	8004420 <HAL_DMA_Abort_IT+0x8c>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a1b      	ldr	r2, [pc, #108]	@ (800447c <HAL_DMA_Abort_IT+0xe8>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d102      	bne.n	800441a <HAL_DMA_Abort_IT+0x86>
 8004414:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004418:	e00e      	b.n	8004438 <HAL_DMA_Abort_IT+0xa4>
 800441a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800441e:	e00b      	b.n	8004438 <HAL_DMA_Abort_IT+0xa4>
 8004420:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004424:	e008      	b.n	8004438 <HAL_DMA_Abort_IT+0xa4>
 8004426:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800442a:	e005      	b.n	8004438 <HAL_DMA_Abort_IT+0xa4>
 800442c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004430:	e002      	b.n	8004438 <HAL_DMA_Abort_IT+0xa4>
 8004432:	2310      	movs	r3, #16
 8004434:	e000      	b.n	8004438 <HAL_DMA_Abort_IT+0xa4>
 8004436:	2301      	movs	r3, #1
 8004438:	4a11      	ldr	r2, [pc, #68]	@ (8004480 <HAL_DMA_Abort_IT+0xec>)
 800443a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004450:	2b00      	cmp	r3, #0
 8004452:	d003      	beq.n	800445c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	4798      	blx	r3
    } 
  }
  return status;
 800445c:	7bfb      	ldrb	r3, [r7, #15]
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	40020008 	.word	0x40020008
 800446c:	4002001c 	.word	0x4002001c
 8004470:	40020030 	.word	0x40020030
 8004474:	40020044 	.word	0x40020044
 8004478:	40020058 	.word	0x40020058
 800447c:	4002006c 	.word	0x4002006c
 8004480:	40020000 	.word	0x40020000

08004484 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a0:	2204      	movs	r2, #4
 80044a2:	409a      	lsls	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	4013      	ands	r3, r2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d04f      	beq.n	800454c <HAL_DMA_IRQHandler+0xc8>
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	f003 0304 	and.w	r3, r3, #4
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d04a      	beq.n	800454c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0320 	and.w	r3, r3, #32
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d107      	bne.n	80044d4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 0204 	bic.w	r2, r2, #4
 80044d2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a66      	ldr	r2, [pc, #408]	@ (8004674 <HAL_DMA_IRQHandler+0x1f0>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d029      	beq.n	8004532 <HAL_DMA_IRQHandler+0xae>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a65      	ldr	r2, [pc, #404]	@ (8004678 <HAL_DMA_IRQHandler+0x1f4>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d022      	beq.n	800452e <HAL_DMA_IRQHandler+0xaa>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a63      	ldr	r2, [pc, #396]	@ (800467c <HAL_DMA_IRQHandler+0x1f8>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d01a      	beq.n	8004528 <HAL_DMA_IRQHandler+0xa4>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a62      	ldr	r2, [pc, #392]	@ (8004680 <HAL_DMA_IRQHandler+0x1fc>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d012      	beq.n	8004522 <HAL_DMA_IRQHandler+0x9e>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a60      	ldr	r2, [pc, #384]	@ (8004684 <HAL_DMA_IRQHandler+0x200>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d00a      	beq.n	800451c <HAL_DMA_IRQHandler+0x98>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a5f      	ldr	r2, [pc, #380]	@ (8004688 <HAL_DMA_IRQHandler+0x204>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d102      	bne.n	8004516 <HAL_DMA_IRQHandler+0x92>
 8004510:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004514:	e00e      	b.n	8004534 <HAL_DMA_IRQHandler+0xb0>
 8004516:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800451a:	e00b      	b.n	8004534 <HAL_DMA_IRQHandler+0xb0>
 800451c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004520:	e008      	b.n	8004534 <HAL_DMA_IRQHandler+0xb0>
 8004522:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004526:	e005      	b.n	8004534 <HAL_DMA_IRQHandler+0xb0>
 8004528:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800452c:	e002      	b.n	8004534 <HAL_DMA_IRQHandler+0xb0>
 800452e:	2340      	movs	r3, #64	@ 0x40
 8004530:	e000      	b.n	8004534 <HAL_DMA_IRQHandler+0xb0>
 8004532:	2304      	movs	r3, #4
 8004534:	4a55      	ldr	r2, [pc, #340]	@ (800468c <HAL_DMA_IRQHandler+0x208>)
 8004536:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 8094 	beq.w	800466a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800454a:	e08e      	b.n	800466a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004550:	2202      	movs	r2, #2
 8004552:	409a      	lsls	r2, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	4013      	ands	r3, r2
 8004558:	2b00      	cmp	r3, #0
 800455a:	d056      	beq.n	800460a <HAL_DMA_IRQHandler+0x186>
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d051      	beq.n	800460a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0320 	and.w	r3, r3, #32
 8004570:	2b00      	cmp	r3, #0
 8004572:	d10b      	bne.n	800458c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f022 020a 	bic.w	r2, r2, #10
 8004582:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a38      	ldr	r2, [pc, #224]	@ (8004674 <HAL_DMA_IRQHandler+0x1f0>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d029      	beq.n	80045ea <HAL_DMA_IRQHandler+0x166>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a37      	ldr	r2, [pc, #220]	@ (8004678 <HAL_DMA_IRQHandler+0x1f4>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d022      	beq.n	80045e6 <HAL_DMA_IRQHandler+0x162>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a35      	ldr	r2, [pc, #212]	@ (800467c <HAL_DMA_IRQHandler+0x1f8>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d01a      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x15c>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a34      	ldr	r2, [pc, #208]	@ (8004680 <HAL_DMA_IRQHandler+0x1fc>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d012      	beq.n	80045da <HAL_DMA_IRQHandler+0x156>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a32      	ldr	r2, [pc, #200]	@ (8004684 <HAL_DMA_IRQHandler+0x200>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d00a      	beq.n	80045d4 <HAL_DMA_IRQHandler+0x150>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a31      	ldr	r2, [pc, #196]	@ (8004688 <HAL_DMA_IRQHandler+0x204>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d102      	bne.n	80045ce <HAL_DMA_IRQHandler+0x14a>
 80045c8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80045cc:	e00e      	b.n	80045ec <HAL_DMA_IRQHandler+0x168>
 80045ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80045d2:	e00b      	b.n	80045ec <HAL_DMA_IRQHandler+0x168>
 80045d4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80045d8:	e008      	b.n	80045ec <HAL_DMA_IRQHandler+0x168>
 80045da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80045de:	e005      	b.n	80045ec <HAL_DMA_IRQHandler+0x168>
 80045e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80045e4:	e002      	b.n	80045ec <HAL_DMA_IRQHandler+0x168>
 80045e6:	2320      	movs	r3, #32
 80045e8:	e000      	b.n	80045ec <HAL_DMA_IRQHandler+0x168>
 80045ea:	2302      	movs	r3, #2
 80045ec:	4a27      	ldr	r2, [pc, #156]	@ (800468c <HAL_DMA_IRQHandler+0x208>)
 80045ee:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d034      	beq.n	800466a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004608:	e02f      	b.n	800466a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460e:	2208      	movs	r2, #8
 8004610:	409a      	lsls	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	4013      	ands	r3, r2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d028      	beq.n	800466c <HAL_DMA_IRQHandler+0x1e8>
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	f003 0308 	and.w	r3, r3, #8
 8004620:	2b00      	cmp	r3, #0
 8004622:	d023      	beq.n	800466c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f022 020e 	bic.w	r2, r2, #14
 8004632:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800463c:	2101      	movs	r1, #1
 800463e:	fa01 f202 	lsl.w	r2, r1, r2
 8004642:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800465e:	2b00      	cmp	r3, #0
 8004660:	d004      	beq.n	800466c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	4798      	blx	r3
    }
  }
  return;
 800466a:	bf00      	nop
 800466c:	bf00      	nop
}
 800466e:	3710      	adds	r7, #16
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	40020008 	.word	0x40020008
 8004678:	4002001c 	.word	0x4002001c
 800467c:	40020030 	.word	0x40020030
 8004680:	40020044 	.word	0x40020044
 8004684:	40020058 	.word	0x40020058
 8004688:	4002006c 	.word	0x4002006c
 800468c:	40020000 	.word	0x40020000

08004690 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
 800469c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046a6:	2101      	movs	r1, #1
 80046a8:	fa01 f202 	lsl.w	r2, r1, r2
 80046ac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	683a      	ldr	r2, [r7, #0]
 80046b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	2b10      	cmp	r3, #16
 80046bc:	d108      	bne.n	80046d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68ba      	ldr	r2, [r7, #8]
 80046cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80046ce:	e007      	b.n	80046e0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68ba      	ldr	r2, [r7, #8]
 80046d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	60da      	str	r2, [r3, #12]
}
 80046e0:	bf00      	nop
 80046e2:	3714      	adds	r7, #20
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bc80      	pop	{r7}
 80046e8:	4770      	bx	lr
	...

080046ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b08b      	sub	sp, #44	@ 0x2c
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80046f6:	2300      	movs	r3, #0
 80046f8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80046fa:	2300      	movs	r3, #0
 80046fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046fe:	e169      	b.n	80049d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004700:	2201      	movs	r2, #1
 8004702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004704:	fa02 f303 	lsl.w	r3, r2, r3
 8004708:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	69fa      	ldr	r2, [r7, #28]
 8004710:	4013      	ands	r3, r2
 8004712:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004714:	69ba      	ldr	r2, [r7, #24]
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	429a      	cmp	r2, r3
 800471a:	f040 8158 	bne.w	80049ce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	4a9a      	ldr	r2, [pc, #616]	@ (800498c <HAL_GPIO_Init+0x2a0>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d05e      	beq.n	80047e6 <HAL_GPIO_Init+0xfa>
 8004728:	4a98      	ldr	r2, [pc, #608]	@ (800498c <HAL_GPIO_Init+0x2a0>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d875      	bhi.n	800481a <HAL_GPIO_Init+0x12e>
 800472e:	4a98      	ldr	r2, [pc, #608]	@ (8004990 <HAL_GPIO_Init+0x2a4>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d058      	beq.n	80047e6 <HAL_GPIO_Init+0xfa>
 8004734:	4a96      	ldr	r2, [pc, #600]	@ (8004990 <HAL_GPIO_Init+0x2a4>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d86f      	bhi.n	800481a <HAL_GPIO_Init+0x12e>
 800473a:	4a96      	ldr	r2, [pc, #600]	@ (8004994 <HAL_GPIO_Init+0x2a8>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d052      	beq.n	80047e6 <HAL_GPIO_Init+0xfa>
 8004740:	4a94      	ldr	r2, [pc, #592]	@ (8004994 <HAL_GPIO_Init+0x2a8>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d869      	bhi.n	800481a <HAL_GPIO_Init+0x12e>
 8004746:	4a94      	ldr	r2, [pc, #592]	@ (8004998 <HAL_GPIO_Init+0x2ac>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d04c      	beq.n	80047e6 <HAL_GPIO_Init+0xfa>
 800474c:	4a92      	ldr	r2, [pc, #584]	@ (8004998 <HAL_GPIO_Init+0x2ac>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d863      	bhi.n	800481a <HAL_GPIO_Init+0x12e>
 8004752:	4a92      	ldr	r2, [pc, #584]	@ (800499c <HAL_GPIO_Init+0x2b0>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d046      	beq.n	80047e6 <HAL_GPIO_Init+0xfa>
 8004758:	4a90      	ldr	r2, [pc, #576]	@ (800499c <HAL_GPIO_Init+0x2b0>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d85d      	bhi.n	800481a <HAL_GPIO_Init+0x12e>
 800475e:	2b12      	cmp	r3, #18
 8004760:	d82a      	bhi.n	80047b8 <HAL_GPIO_Init+0xcc>
 8004762:	2b12      	cmp	r3, #18
 8004764:	d859      	bhi.n	800481a <HAL_GPIO_Init+0x12e>
 8004766:	a201      	add	r2, pc, #4	@ (adr r2, 800476c <HAL_GPIO_Init+0x80>)
 8004768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800476c:	080047e7 	.word	0x080047e7
 8004770:	080047c1 	.word	0x080047c1
 8004774:	080047d3 	.word	0x080047d3
 8004778:	08004815 	.word	0x08004815
 800477c:	0800481b 	.word	0x0800481b
 8004780:	0800481b 	.word	0x0800481b
 8004784:	0800481b 	.word	0x0800481b
 8004788:	0800481b 	.word	0x0800481b
 800478c:	0800481b 	.word	0x0800481b
 8004790:	0800481b 	.word	0x0800481b
 8004794:	0800481b 	.word	0x0800481b
 8004798:	0800481b 	.word	0x0800481b
 800479c:	0800481b 	.word	0x0800481b
 80047a0:	0800481b 	.word	0x0800481b
 80047a4:	0800481b 	.word	0x0800481b
 80047a8:	0800481b 	.word	0x0800481b
 80047ac:	0800481b 	.word	0x0800481b
 80047b0:	080047c9 	.word	0x080047c9
 80047b4:	080047dd 	.word	0x080047dd
 80047b8:	4a79      	ldr	r2, [pc, #484]	@ (80049a0 <HAL_GPIO_Init+0x2b4>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d013      	beq.n	80047e6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80047be:	e02c      	b.n	800481a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	623b      	str	r3, [r7, #32]
          break;
 80047c6:	e029      	b.n	800481c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	3304      	adds	r3, #4
 80047ce:	623b      	str	r3, [r7, #32]
          break;
 80047d0:	e024      	b.n	800481c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	3308      	adds	r3, #8
 80047d8:	623b      	str	r3, [r7, #32]
          break;
 80047da:	e01f      	b.n	800481c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	330c      	adds	r3, #12
 80047e2:	623b      	str	r3, [r7, #32]
          break;
 80047e4:	e01a      	b.n	800481c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d102      	bne.n	80047f4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80047ee:	2304      	movs	r3, #4
 80047f0:	623b      	str	r3, [r7, #32]
          break;
 80047f2:	e013      	b.n	800481c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d105      	bne.n	8004808 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80047fc:	2308      	movs	r3, #8
 80047fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	69fa      	ldr	r2, [r7, #28]
 8004804:	611a      	str	r2, [r3, #16]
          break;
 8004806:	e009      	b.n	800481c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004808:	2308      	movs	r3, #8
 800480a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	69fa      	ldr	r2, [r7, #28]
 8004810:	615a      	str	r2, [r3, #20]
          break;
 8004812:	e003      	b.n	800481c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004814:	2300      	movs	r3, #0
 8004816:	623b      	str	r3, [r7, #32]
          break;
 8004818:	e000      	b.n	800481c <HAL_GPIO_Init+0x130>
          break;
 800481a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	2bff      	cmp	r3, #255	@ 0xff
 8004820:	d801      	bhi.n	8004826 <HAL_GPIO_Init+0x13a>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	e001      	b.n	800482a <HAL_GPIO_Init+0x13e>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	3304      	adds	r3, #4
 800482a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	2bff      	cmp	r3, #255	@ 0xff
 8004830:	d802      	bhi.n	8004838 <HAL_GPIO_Init+0x14c>
 8004832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	e002      	b.n	800483e <HAL_GPIO_Init+0x152>
 8004838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483a:	3b08      	subs	r3, #8
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	210f      	movs	r1, #15
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	fa01 f303 	lsl.w	r3, r1, r3
 800484c:	43db      	mvns	r3, r3
 800484e:	401a      	ands	r2, r3
 8004850:	6a39      	ldr	r1, [r7, #32]
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	fa01 f303 	lsl.w	r3, r1, r3
 8004858:	431a      	orrs	r2, r3
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004866:	2b00      	cmp	r3, #0
 8004868:	f000 80b1 	beq.w	80049ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800486c:	4b4d      	ldr	r3, [pc, #308]	@ (80049a4 <HAL_GPIO_Init+0x2b8>)
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	4a4c      	ldr	r2, [pc, #304]	@ (80049a4 <HAL_GPIO_Init+0x2b8>)
 8004872:	f043 0301 	orr.w	r3, r3, #1
 8004876:	6193      	str	r3, [r2, #24]
 8004878:	4b4a      	ldr	r3, [pc, #296]	@ (80049a4 <HAL_GPIO_Init+0x2b8>)
 800487a:	699b      	ldr	r3, [r3, #24]
 800487c:	f003 0301 	and.w	r3, r3, #1
 8004880:	60bb      	str	r3, [r7, #8]
 8004882:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004884:	4a48      	ldr	r2, [pc, #288]	@ (80049a8 <HAL_GPIO_Init+0x2bc>)
 8004886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004888:	089b      	lsrs	r3, r3, #2
 800488a:	3302      	adds	r3, #2
 800488c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004890:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004894:	f003 0303 	and.w	r3, r3, #3
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	220f      	movs	r2, #15
 800489c:	fa02 f303 	lsl.w	r3, r2, r3
 80048a0:	43db      	mvns	r3, r3
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	4013      	ands	r3, r2
 80048a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a40      	ldr	r2, [pc, #256]	@ (80049ac <HAL_GPIO_Init+0x2c0>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d013      	beq.n	80048d8 <HAL_GPIO_Init+0x1ec>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a3f      	ldr	r2, [pc, #252]	@ (80049b0 <HAL_GPIO_Init+0x2c4>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d00d      	beq.n	80048d4 <HAL_GPIO_Init+0x1e8>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a3e      	ldr	r2, [pc, #248]	@ (80049b4 <HAL_GPIO_Init+0x2c8>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d007      	beq.n	80048d0 <HAL_GPIO_Init+0x1e4>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a3d      	ldr	r2, [pc, #244]	@ (80049b8 <HAL_GPIO_Init+0x2cc>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d101      	bne.n	80048cc <HAL_GPIO_Init+0x1e0>
 80048c8:	2303      	movs	r3, #3
 80048ca:	e006      	b.n	80048da <HAL_GPIO_Init+0x1ee>
 80048cc:	2304      	movs	r3, #4
 80048ce:	e004      	b.n	80048da <HAL_GPIO_Init+0x1ee>
 80048d0:	2302      	movs	r3, #2
 80048d2:	e002      	b.n	80048da <HAL_GPIO_Init+0x1ee>
 80048d4:	2301      	movs	r3, #1
 80048d6:	e000      	b.n	80048da <HAL_GPIO_Init+0x1ee>
 80048d8:	2300      	movs	r3, #0
 80048da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048dc:	f002 0203 	and.w	r2, r2, #3
 80048e0:	0092      	lsls	r2, r2, #2
 80048e2:	4093      	lsls	r3, r2
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80048ea:	492f      	ldr	r1, [pc, #188]	@ (80049a8 <HAL_GPIO_Init+0x2bc>)
 80048ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ee:	089b      	lsrs	r3, r3, #2
 80048f0:	3302      	adds	r3, #2
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d006      	beq.n	8004912 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004904:	4b2d      	ldr	r3, [pc, #180]	@ (80049bc <HAL_GPIO_Init+0x2d0>)
 8004906:	689a      	ldr	r2, [r3, #8]
 8004908:	492c      	ldr	r1, [pc, #176]	@ (80049bc <HAL_GPIO_Init+0x2d0>)
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	4313      	orrs	r3, r2
 800490e:	608b      	str	r3, [r1, #8]
 8004910:	e006      	b.n	8004920 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004912:	4b2a      	ldr	r3, [pc, #168]	@ (80049bc <HAL_GPIO_Init+0x2d0>)
 8004914:	689a      	ldr	r2, [r3, #8]
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	43db      	mvns	r3, r3
 800491a:	4928      	ldr	r1, [pc, #160]	@ (80049bc <HAL_GPIO_Init+0x2d0>)
 800491c:	4013      	ands	r3, r2
 800491e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d006      	beq.n	800493a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800492c:	4b23      	ldr	r3, [pc, #140]	@ (80049bc <HAL_GPIO_Init+0x2d0>)
 800492e:	68da      	ldr	r2, [r3, #12]
 8004930:	4922      	ldr	r1, [pc, #136]	@ (80049bc <HAL_GPIO_Init+0x2d0>)
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	4313      	orrs	r3, r2
 8004936:	60cb      	str	r3, [r1, #12]
 8004938:	e006      	b.n	8004948 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800493a:	4b20      	ldr	r3, [pc, #128]	@ (80049bc <HAL_GPIO_Init+0x2d0>)
 800493c:	68da      	ldr	r2, [r3, #12]
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	43db      	mvns	r3, r3
 8004942:	491e      	ldr	r1, [pc, #120]	@ (80049bc <HAL_GPIO_Init+0x2d0>)
 8004944:	4013      	ands	r3, r2
 8004946:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d006      	beq.n	8004962 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004954:	4b19      	ldr	r3, [pc, #100]	@ (80049bc <HAL_GPIO_Init+0x2d0>)
 8004956:	685a      	ldr	r2, [r3, #4]
 8004958:	4918      	ldr	r1, [pc, #96]	@ (80049bc <HAL_GPIO_Init+0x2d0>)
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	4313      	orrs	r3, r2
 800495e:	604b      	str	r3, [r1, #4]
 8004960:	e006      	b.n	8004970 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004962:	4b16      	ldr	r3, [pc, #88]	@ (80049bc <HAL_GPIO_Init+0x2d0>)
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	43db      	mvns	r3, r3
 800496a:	4914      	ldr	r1, [pc, #80]	@ (80049bc <HAL_GPIO_Init+0x2d0>)
 800496c:	4013      	ands	r3, r2
 800496e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d021      	beq.n	80049c0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800497c:	4b0f      	ldr	r3, [pc, #60]	@ (80049bc <HAL_GPIO_Init+0x2d0>)
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	490e      	ldr	r1, [pc, #56]	@ (80049bc <HAL_GPIO_Init+0x2d0>)
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	4313      	orrs	r3, r2
 8004986:	600b      	str	r3, [r1, #0]
 8004988:	e021      	b.n	80049ce <HAL_GPIO_Init+0x2e2>
 800498a:	bf00      	nop
 800498c:	10320000 	.word	0x10320000
 8004990:	10310000 	.word	0x10310000
 8004994:	10220000 	.word	0x10220000
 8004998:	10210000 	.word	0x10210000
 800499c:	10120000 	.word	0x10120000
 80049a0:	10110000 	.word	0x10110000
 80049a4:	40021000 	.word	0x40021000
 80049a8:	40010000 	.word	0x40010000
 80049ac:	40010800 	.word	0x40010800
 80049b0:	40010c00 	.word	0x40010c00
 80049b4:	40011000 	.word	0x40011000
 80049b8:	40011400 	.word	0x40011400
 80049bc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80049c0:	4b0b      	ldr	r3, [pc, #44]	@ (80049f0 <HAL_GPIO_Init+0x304>)
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	43db      	mvns	r3, r3
 80049c8:	4909      	ldr	r1, [pc, #36]	@ (80049f0 <HAL_GPIO_Init+0x304>)
 80049ca:	4013      	ands	r3, r2
 80049cc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80049ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d0:	3301      	adds	r3, #1
 80049d2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049da:	fa22 f303 	lsr.w	r3, r2, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f47f ae8e 	bne.w	8004700 <HAL_GPIO_Init+0x14>
  }
}
 80049e4:	bf00      	nop
 80049e6:	bf00      	nop
 80049e8:	372c      	adds	r7, #44	@ 0x2c
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bc80      	pop	{r7}
 80049ee:	4770      	bx	lr
 80049f0:	40010400 	.word	0x40010400

080049f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	460b      	mov	r3, r1
 80049fe:	807b      	strh	r3, [r7, #2]
 8004a00:	4613      	mov	r3, r2
 8004a02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a04:	787b      	ldrb	r3, [r7, #1]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d003      	beq.n	8004a12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a0a:	887a      	ldrh	r2, [r7, #2]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004a10:	e003      	b.n	8004a1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a12:	887b      	ldrh	r3, [r7, #2]
 8004a14:	041a      	lsls	r2, r3, #16
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	611a      	str	r2, [r3, #16]
}
 8004a1a:	bf00      	nop
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bc80      	pop	{r7}
 8004a22:	4770      	bx	lr

08004a24 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004a36:	887a      	ldrh	r2, [r7, #2]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	041a      	lsls	r2, r3, #16
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	43d9      	mvns	r1, r3
 8004a42:	887b      	ldrh	r3, [r7, #2]
 8004a44:	400b      	ands	r3, r1
 8004a46:	431a      	orrs	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	611a      	str	r2, [r3, #16]
}
 8004a4c:	bf00      	nop
 8004a4e:	3714      	adds	r7, #20
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bc80      	pop	{r7}
 8004a54:	4770      	bx	lr
	...

08004a58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d101      	bne.n	8004a6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e12b      	b.n	8004cc2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d106      	bne.n	8004a84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f7fc fb56 	bl	8001130 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2224      	movs	r2, #36	@ 0x24
 8004a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f022 0201 	bic.w	r2, r2, #1
 8004a9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004aaa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004aba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004abc:	f001 fbca 	bl	8006254 <HAL_RCC_GetPCLK1Freq>
 8004ac0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	4a81      	ldr	r2, [pc, #516]	@ (8004ccc <HAL_I2C_Init+0x274>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d807      	bhi.n	8004adc <HAL_I2C_Init+0x84>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	4a80      	ldr	r2, [pc, #512]	@ (8004cd0 <HAL_I2C_Init+0x278>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	bf94      	ite	ls
 8004ad4:	2301      	movls	r3, #1
 8004ad6:	2300      	movhi	r3, #0
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	e006      	b.n	8004aea <HAL_I2C_Init+0x92>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	4a7d      	ldr	r2, [pc, #500]	@ (8004cd4 <HAL_I2C_Init+0x27c>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	bf94      	ite	ls
 8004ae4:	2301      	movls	r3, #1
 8004ae6:	2300      	movhi	r3, #0
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e0e7      	b.n	8004cc2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	4a78      	ldr	r2, [pc, #480]	@ (8004cd8 <HAL_I2C_Init+0x280>)
 8004af6:	fba2 2303 	umull	r2, r3, r2, r3
 8004afa:	0c9b      	lsrs	r3, r3, #18
 8004afc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	6a1b      	ldr	r3, [r3, #32]
 8004b18:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	4a6a      	ldr	r2, [pc, #424]	@ (8004ccc <HAL_I2C_Init+0x274>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d802      	bhi.n	8004b2c <HAL_I2C_Init+0xd4>
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	3301      	adds	r3, #1
 8004b2a:	e009      	b.n	8004b40 <HAL_I2C_Init+0xe8>
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004b32:	fb02 f303 	mul.w	r3, r2, r3
 8004b36:	4a69      	ldr	r2, [pc, #420]	@ (8004cdc <HAL_I2C_Init+0x284>)
 8004b38:	fba2 2303 	umull	r2, r3, r2, r3
 8004b3c:	099b      	lsrs	r3, r3, #6
 8004b3e:	3301      	adds	r3, #1
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	6812      	ldr	r2, [r2, #0]
 8004b44:	430b      	orrs	r3, r1
 8004b46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	69db      	ldr	r3, [r3, #28]
 8004b4e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004b52:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	495c      	ldr	r1, [pc, #368]	@ (8004ccc <HAL_I2C_Init+0x274>)
 8004b5c:	428b      	cmp	r3, r1
 8004b5e:	d819      	bhi.n	8004b94 <HAL_I2C_Init+0x13c>
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	1e59      	subs	r1, r3, #1
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b6e:	1c59      	adds	r1, r3, #1
 8004b70:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004b74:	400b      	ands	r3, r1
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00a      	beq.n	8004b90 <HAL_I2C_Init+0x138>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	1e59      	subs	r1, r3, #1
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	005b      	lsls	r3, r3, #1
 8004b84:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b88:	3301      	adds	r3, #1
 8004b8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b8e:	e051      	b.n	8004c34 <HAL_I2C_Init+0x1dc>
 8004b90:	2304      	movs	r3, #4
 8004b92:	e04f      	b.n	8004c34 <HAL_I2C_Init+0x1dc>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d111      	bne.n	8004bc0 <HAL_I2C_Init+0x168>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	1e58      	subs	r0, r3, #1
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6859      	ldr	r1, [r3, #4]
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	005b      	lsls	r3, r3, #1
 8004ba8:	440b      	add	r3, r1
 8004baa:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bae:	3301      	adds	r3, #1
 8004bb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	bf0c      	ite	eq
 8004bb8:	2301      	moveq	r3, #1
 8004bba:	2300      	movne	r3, #0
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	e012      	b.n	8004be6 <HAL_I2C_Init+0x18e>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	1e58      	subs	r0, r3, #1
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6859      	ldr	r1, [r3, #4]
 8004bc8:	460b      	mov	r3, r1
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	440b      	add	r3, r1
 8004bce:	0099      	lsls	r1, r3, #2
 8004bd0:	440b      	add	r3, r1
 8004bd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	bf0c      	ite	eq
 8004be0:	2301      	moveq	r3, #1
 8004be2:	2300      	movne	r3, #0
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d001      	beq.n	8004bee <HAL_I2C_Init+0x196>
 8004bea:	2301      	movs	r3, #1
 8004bec:	e022      	b.n	8004c34 <HAL_I2C_Init+0x1dc>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10e      	bne.n	8004c14 <HAL_I2C_Init+0x1bc>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	1e58      	subs	r0, r3, #1
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6859      	ldr	r1, [r3, #4]
 8004bfe:	460b      	mov	r3, r1
 8004c00:	005b      	lsls	r3, r3, #1
 8004c02:	440b      	add	r3, r1
 8004c04:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c08:	3301      	adds	r3, #1
 8004c0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c12:	e00f      	b.n	8004c34 <HAL_I2C_Init+0x1dc>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	1e58      	subs	r0, r3, #1
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6859      	ldr	r1, [r3, #4]
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	440b      	add	r3, r1
 8004c22:	0099      	lsls	r1, r3, #2
 8004c24:	440b      	add	r3, r1
 8004c26:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c30:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c34:	6879      	ldr	r1, [r7, #4]
 8004c36:	6809      	ldr	r1, [r1, #0]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	69da      	ldr	r2, [r3, #28]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	431a      	orrs	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	430a      	orrs	r2, r1
 8004c56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004c62:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	6911      	ldr	r1, [r2, #16]
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	68d2      	ldr	r2, [r2, #12]
 8004c6e:	4311      	orrs	r1, r2
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	6812      	ldr	r2, [r2, #0]
 8004c74:	430b      	orrs	r3, r1
 8004c76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	695a      	ldr	r2, [r3, #20]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	431a      	orrs	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	430a      	orrs	r2, r1
 8004c92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f042 0201 	orr.w	r2, r2, #1
 8004ca2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2220      	movs	r2, #32
 8004cae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	000186a0 	.word	0x000186a0
 8004cd0:	001e847f 	.word	0x001e847f
 8004cd4:	003d08ff 	.word	0x003d08ff
 8004cd8:	431bde83 	.word	0x431bde83
 8004cdc:	10624dd3 	.word	0x10624dd3

08004ce0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b088      	sub	sp, #32
 8004ce4:	af02      	add	r7, sp, #8
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	607a      	str	r2, [r7, #4]
 8004cea:	461a      	mov	r2, r3
 8004cec:	460b      	mov	r3, r1
 8004cee:	817b      	strh	r3, [r7, #10]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004cf4:	f7fe fd04 	bl	8003700 <HAL_GetTick>
 8004cf8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b20      	cmp	r3, #32
 8004d04:	f040 80e0 	bne.w	8004ec8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	9300      	str	r3, [sp, #0]
 8004d0c:	2319      	movs	r3, #25
 8004d0e:	2201      	movs	r2, #1
 8004d10:	4970      	ldr	r1, [pc, #448]	@ (8004ed4 <HAL_I2C_Master_Transmit+0x1f4>)
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f000 fc9e 	bl	8005654 <I2C_WaitOnFlagUntilTimeout>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d001      	beq.n	8004d22 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004d1e:	2302      	movs	r3, #2
 8004d20:	e0d3      	b.n	8004eca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d101      	bne.n	8004d30 <HAL_I2C_Master_Transmit+0x50>
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	e0cc      	b.n	8004eca <HAL_I2C_Master_Transmit+0x1ea>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d007      	beq.n	8004d56 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f042 0201 	orr.w	r2, r2, #1
 8004d54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d64:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2221      	movs	r2, #33	@ 0x21
 8004d6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2210      	movs	r2, #16
 8004d72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	893a      	ldrh	r2, [r7, #8]
 8004d86:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	4a50      	ldr	r2, [pc, #320]	@ (8004ed8 <HAL_I2C_Master_Transmit+0x1f8>)
 8004d96:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004d98:	8979      	ldrh	r1, [r7, #10]
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	6a3a      	ldr	r2, [r7, #32]
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f000 fb08 	bl	80053b4 <I2C_MasterRequestWrite>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d001      	beq.n	8004dae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e08d      	b.n	8004eca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dae:	2300      	movs	r3, #0
 8004db0:	613b      	str	r3, [r7, #16]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	695b      	ldr	r3, [r3, #20]
 8004db8:	613b      	str	r3, [r7, #16]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	613b      	str	r3, [r7, #16]
 8004dc2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004dc4:	e066      	b.n	8004e94 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	6a39      	ldr	r1, [r7, #32]
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	f000 fd5c 	bl	8005888 <I2C_WaitOnTXEFlagUntilTimeout>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00d      	beq.n	8004df2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dda:	2b04      	cmp	r3, #4
 8004ddc:	d107      	bne.n	8004dee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e06b      	b.n	8004eca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df6:	781a      	ldrb	r2, [r3, #0]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e02:	1c5a      	adds	r2, r3, #1
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	695b      	ldr	r3, [r3, #20]
 8004e28:	f003 0304 	and.w	r3, r3, #4
 8004e2c:	2b04      	cmp	r3, #4
 8004e2e:	d11b      	bne.n	8004e68 <HAL_I2C_Master_Transmit+0x188>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d017      	beq.n	8004e68 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e3c:	781a      	ldrb	r2, [r3, #0]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e48:	1c5a      	adds	r2, r3, #1
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	3b01      	subs	r3, #1
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e60:	3b01      	subs	r3, #1
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	6a39      	ldr	r1, [r7, #32]
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	f000 fd53 	bl	8005918 <I2C_WaitOnBTFFlagUntilTimeout>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d00d      	beq.n	8004e94 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e7c:	2b04      	cmp	r3, #4
 8004e7e:	d107      	bne.n	8004e90 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e8e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e01a      	b.n	8004eca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d194      	bne.n	8004dc6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004eaa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2220      	movs	r2, #32
 8004eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	e000      	b.n	8004eca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004ec8:	2302      	movs	r3, #2
  }
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3718      	adds	r7, #24
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	00100002 	.word	0x00100002
 8004ed8:	ffff0000 	.word	0xffff0000

08004edc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b08c      	sub	sp, #48	@ 0x30
 8004ee0:	af02      	add	r7, sp, #8
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	607a      	str	r2, [r7, #4]
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	460b      	mov	r3, r1
 8004eea:	817b      	strh	r3, [r7, #10]
 8004eec:	4613      	mov	r3, r2
 8004eee:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ef4:	f7fe fc04 	bl	8003700 <HAL_GetTick>
 8004ef8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b20      	cmp	r3, #32
 8004f04:	f040 824b 	bne.w	800539e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f0a:	9300      	str	r3, [sp, #0]
 8004f0c:	2319      	movs	r3, #25
 8004f0e:	2201      	movs	r2, #1
 8004f10:	497f      	ldr	r1, [pc, #508]	@ (8005110 <HAL_I2C_Master_Receive+0x234>)
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f000 fb9e 	bl	8005654 <I2C_WaitOnFlagUntilTimeout>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d001      	beq.n	8004f22 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8004f1e:	2302      	movs	r3, #2
 8004f20:	e23e      	b.n	80053a0 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d101      	bne.n	8004f30 <HAL_I2C_Master_Receive+0x54>
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	e237      	b.n	80053a0 <HAL_I2C_Master_Receive+0x4c4>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d007      	beq.n	8004f56 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f042 0201 	orr.w	r2, r2, #1
 8004f54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f64:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2222      	movs	r2, #34	@ 0x22
 8004f6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2210      	movs	r2, #16
 8004f72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	893a      	ldrh	r2, [r7, #8]
 8004f86:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	4a5f      	ldr	r2, [pc, #380]	@ (8005114 <HAL_I2C_Master_Receive+0x238>)
 8004f96:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004f98:	8979      	ldrh	r1, [r7, #10]
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f9e:	68f8      	ldr	r0, [r7, #12]
 8004fa0:	f000 fa8a 	bl	80054b8 <I2C_MasterRequestRead>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d001      	beq.n	8004fae <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e1f8      	b.n	80053a0 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d113      	bne.n	8004fde <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	61fb      	str	r3, [r7, #28]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	695b      	ldr	r3, [r3, #20]
 8004fc0:	61fb      	str	r3, [r7, #28]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	61fb      	str	r3, [r7, #28]
 8004fca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fda:	601a      	str	r2, [r3, #0]
 8004fdc:	e1cc      	b.n	8005378 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d11e      	bne.n	8005024 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ff4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004ff6:	b672      	cpsid	i
}
 8004ff8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	61bb      	str	r3, [r7, #24]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	695b      	ldr	r3, [r3, #20]
 8005004:	61bb      	str	r3, [r7, #24]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	61bb      	str	r3, [r7, #24]
 800500e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800501e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005020:	b662      	cpsie	i
}
 8005022:	e035      	b.n	8005090 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005028:	2b02      	cmp	r3, #2
 800502a:	d11e      	bne.n	800506a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800503a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800503c:	b672      	cpsid	i
}
 800503e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005040:	2300      	movs	r3, #0
 8005042:	617b      	str	r3, [r7, #20]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	617b      	str	r3, [r7, #20]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	617b      	str	r3, [r7, #20]
 8005054:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005064:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005066:	b662      	cpsie	i
}
 8005068:	e012      	b.n	8005090 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005078:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800507a:	2300      	movs	r3, #0
 800507c:	613b      	str	r3, [r7, #16]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	695b      	ldr	r3, [r3, #20]
 8005084:	613b      	str	r3, [r7, #16]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	613b      	str	r3, [r7, #16]
 800508e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005090:	e172      	b.n	8005378 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005096:	2b03      	cmp	r3, #3
 8005098:	f200 811f 	bhi.w	80052da <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d123      	bne.n	80050ec <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050a6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f000 fc7d 	bl	80059a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d001      	beq.n	80050b8 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e173      	b.n	80053a0 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	691a      	ldr	r2, [r3, #16]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050c2:	b2d2      	uxtb	r2, r2
 80050c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ca:	1c5a      	adds	r2, r3, #1
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050d4:	3b01      	subs	r3, #1
 80050d6:	b29a      	uxth	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	3b01      	subs	r3, #1
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80050ea:	e145      	b.n	8005378 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d152      	bne.n	800519a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050fa:	2200      	movs	r2, #0
 80050fc:	4906      	ldr	r1, [pc, #24]	@ (8005118 <HAL_I2C_Master_Receive+0x23c>)
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f000 faa8 	bl	8005654 <I2C_WaitOnFlagUntilTimeout>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d008      	beq.n	800511c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e148      	b.n	80053a0 <HAL_I2C_Master_Receive+0x4c4>
 800510e:	bf00      	nop
 8005110:	00100002 	.word	0x00100002
 8005114:	ffff0000 	.word	0xffff0000
 8005118:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800511c:	b672      	cpsid	i
}
 800511e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800512e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	691a      	ldr	r2, [r3, #16]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513a:	b2d2      	uxtb	r2, r2
 800513c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005142:	1c5a      	adds	r2, r3, #1
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800514c:	3b01      	subs	r3, #1
 800514e:	b29a      	uxth	r2, r3
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005158:	b29b      	uxth	r3, r3
 800515a:	3b01      	subs	r3, #1
 800515c:	b29a      	uxth	r2, r3
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005162:	b662      	cpsie	i
}
 8005164:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	691a      	ldr	r2, [r3, #16]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005170:	b2d2      	uxtb	r2, r2
 8005172:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005178:	1c5a      	adds	r2, r3, #1
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005182:	3b01      	subs	r3, #1
 8005184:	b29a      	uxth	r2, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800518e:	b29b      	uxth	r3, r3
 8005190:	3b01      	subs	r3, #1
 8005192:	b29a      	uxth	r2, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005198:	e0ee      	b.n	8005378 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800519a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519c:	9300      	str	r3, [sp, #0]
 800519e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a0:	2200      	movs	r2, #0
 80051a2:	4981      	ldr	r1, [pc, #516]	@ (80053a8 <HAL_I2C_Master_Receive+0x4cc>)
 80051a4:	68f8      	ldr	r0, [r7, #12]
 80051a6:	f000 fa55 	bl	8005654 <I2C_WaitOnFlagUntilTimeout>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d001      	beq.n	80051b4 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e0f5      	b.n	80053a0 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80051c4:	b672      	cpsid	i
}
 80051c6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	691a      	ldr	r2, [r3, #16]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d2:	b2d2      	uxtb	r2, r2
 80051d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051da:	1c5a      	adds	r2, r3, #1
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051e4:	3b01      	subs	r3, #1
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	3b01      	subs	r3, #1
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80051fa:	4b6c      	ldr	r3, [pc, #432]	@ (80053ac <HAL_I2C_Master_Receive+0x4d0>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	08db      	lsrs	r3, r3, #3
 8005200:	4a6b      	ldr	r2, [pc, #428]	@ (80053b0 <HAL_I2C_Master_Receive+0x4d4>)
 8005202:	fba2 2303 	umull	r2, r3, r2, r3
 8005206:	0a1a      	lsrs	r2, r3, #8
 8005208:	4613      	mov	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4413      	add	r3, r2
 800520e:	00da      	lsls	r2, r3, #3
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005214:	6a3b      	ldr	r3, [r7, #32]
 8005216:	3b01      	subs	r3, #1
 8005218:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800521a:	6a3b      	ldr	r3, [r7, #32]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d118      	bne.n	8005252 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2220      	movs	r2, #32
 800522a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800523a:	f043 0220 	orr.w	r2, r3, #32
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005242:	b662      	cpsie	i
}
 8005244:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e0a6      	b.n	80053a0 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	695b      	ldr	r3, [r3, #20]
 8005258:	f003 0304 	and.w	r3, r3, #4
 800525c:	2b04      	cmp	r3, #4
 800525e:	d1d9      	bne.n	8005214 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800526e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	691a      	ldr	r2, [r3, #16]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800527a:	b2d2      	uxtb	r2, r2
 800527c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005282:	1c5a      	adds	r2, r3, #1
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800528c:	3b01      	subs	r3, #1
 800528e:	b29a      	uxth	r2, r3
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005298:	b29b      	uxth	r3, r3
 800529a:	3b01      	subs	r3, #1
 800529c:	b29a      	uxth	r2, r3
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80052a2:	b662      	cpsie	i
}
 80052a4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	691a      	ldr	r2, [r3, #16]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b0:	b2d2      	uxtb	r2, r2
 80052b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b8:	1c5a      	adds	r2, r3, #1
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052c2:	3b01      	subs	r3, #1
 80052c4:	b29a      	uxth	r2, r3
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	3b01      	subs	r3, #1
 80052d2:	b29a      	uxth	r2, r3
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80052d8:	e04e      	b.n	8005378 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052dc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80052de:	68f8      	ldr	r0, [r7, #12]
 80052e0:	f000 fb62 	bl	80059a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d001      	beq.n	80052ee <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e058      	b.n	80053a0 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	691a      	ldr	r2, [r3, #16]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f8:	b2d2      	uxtb	r2, r2
 80052fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005300:	1c5a      	adds	r2, r3, #1
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800530a:	3b01      	subs	r3, #1
 800530c:	b29a      	uxth	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005316:	b29b      	uxth	r3, r3
 8005318:	3b01      	subs	r3, #1
 800531a:	b29a      	uxth	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	f003 0304 	and.w	r3, r3, #4
 800532a:	2b04      	cmp	r3, #4
 800532c:	d124      	bne.n	8005378 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005332:	2b03      	cmp	r3, #3
 8005334:	d107      	bne.n	8005346 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005344:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	691a      	ldr	r2, [r3, #16]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005350:	b2d2      	uxtb	r2, r2
 8005352:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005358:	1c5a      	adds	r2, r3, #1
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005362:	3b01      	subs	r3, #1
 8005364:	b29a      	uxth	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800536e:	b29b      	uxth	r3, r3
 8005370:	3b01      	subs	r3, #1
 8005372:	b29a      	uxth	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800537c:	2b00      	cmp	r3, #0
 800537e:	f47f ae88 	bne.w	8005092 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2220      	movs	r2, #32
 8005386:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800539a:	2300      	movs	r3, #0
 800539c:	e000      	b.n	80053a0 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800539e:	2302      	movs	r3, #2
  }
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3728      	adds	r7, #40	@ 0x28
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	00010004 	.word	0x00010004
 80053ac:	20000030 	.word	0x20000030
 80053b0:	14f8b589 	.word	0x14f8b589

080053b4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b088      	sub	sp, #32
 80053b8:	af02      	add	r7, sp, #8
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	607a      	str	r2, [r7, #4]
 80053be:	603b      	str	r3, [r7, #0]
 80053c0:	460b      	mov	r3, r1
 80053c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053c8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	2b08      	cmp	r3, #8
 80053ce:	d006      	beq.n	80053de <I2C_MasterRequestWrite+0x2a>
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d003      	beq.n	80053de <I2C_MasterRequestWrite+0x2a>
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80053dc:	d108      	bne.n	80053f0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80053ec:	601a      	str	r2, [r3, #0]
 80053ee:	e00b      	b.n	8005408 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053f4:	2b12      	cmp	r3, #18
 80053f6:	d107      	bne.n	8005408 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005406:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	9300      	str	r3, [sp, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f000 f91d 	bl	8005654 <I2C_WaitOnFlagUntilTimeout>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00d      	beq.n	800543c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800542a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800542e:	d103      	bne.n	8005438 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005436:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e035      	b.n	80054a8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005444:	d108      	bne.n	8005458 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005446:	897b      	ldrh	r3, [r7, #10]
 8005448:	b2db      	uxtb	r3, r3
 800544a:	461a      	mov	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005454:	611a      	str	r2, [r3, #16]
 8005456:	e01b      	b.n	8005490 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005458:	897b      	ldrh	r3, [r7, #10]
 800545a:	11db      	asrs	r3, r3, #7
 800545c:	b2db      	uxtb	r3, r3
 800545e:	f003 0306 	and.w	r3, r3, #6
 8005462:	b2db      	uxtb	r3, r3
 8005464:	f063 030f 	orn	r3, r3, #15
 8005468:	b2da      	uxtb	r2, r3
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	490e      	ldr	r1, [pc, #56]	@ (80054b0 <I2C_MasterRequestWrite+0xfc>)
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	f000 f966 	bl	8005748 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d001      	beq.n	8005486 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e010      	b.n	80054a8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005486:	897b      	ldrh	r3, [r7, #10]
 8005488:	b2da      	uxtb	r2, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	4907      	ldr	r1, [pc, #28]	@ (80054b4 <I2C_MasterRequestWrite+0x100>)
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f000 f956 	bl	8005748 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d001      	beq.n	80054a6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e000      	b.n	80054a8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80054a6:	2300      	movs	r3, #0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3718      	adds	r7, #24
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	00010008 	.word	0x00010008
 80054b4:	00010002 	.word	0x00010002

080054b8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b088      	sub	sp, #32
 80054bc:	af02      	add	r7, sp, #8
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	607a      	str	r2, [r7, #4]
 80054c2:	603b      	str	r3, [r7, #0]
 80054c4:	460b      	mov	r3, r1
 80054c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054cc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80054dc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	2b08      	cmp	r3, #8
 80054e2:	d006      	beq.n	80054f2 <I2C_MasterRequestRead+0x3a>
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d003      	beq.n	80054f2 <I2C_MasterRequestRead+0x3a>
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80054f0:	d108      	bne.n	8005504 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005500:	601a      	str	r2, [r3, #0]
 8005502:	e00b      	b.n	800551c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005508:	2b11      	cmp	r3, #17
 800550a:	d107      	bne.n	800551c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800551a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	9300      	str	r3, [sp, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	f000 f893 	bl	8005654 <I2C_WaitOnFlagUntilTimeout>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00d      	beq.n	8005550 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800553e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005542:	d103      	bne.n	800554c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800554a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	e079      	b.n	8005644 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005558:	d108      	bne.n	800556c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800555a:	897b      	ldrh	r3, [r7, #10]
 800555c:	b2db      	uxtb	r3, r3
 800555e:	f043 0301 	orr.w	r3, r3, #1
 8005562:	b2da      	uxtb	r2, r3
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	611a      	str	r2, [r3, #16]
 800556a:	e05f      	b.n	800562c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800556c:	897b      	ldrh	r3, [r7, #10]
 800556e:	11db      	asrs	r3, r3, #7
 8005570:	b2db      	uxtb	r3, r3
 8005572:	f003 0306 	and.w	r3, r3, #6
 8005576:	b2db      	uxtb	r3, r3
 8005578:	f063 030f 	orn	r3, r3, #15
 800557c:	b2da      	uxtb	r2, r3
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	4930      	ldr	r1, [pc, #192]	@ (800564c <I2C_MasterRequestRead+0x194>)
 800558a:	68f8      	ldr	r0, [r7, #12]
 800558c:	f000 f8dc 	bl	8005748 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d001      	beq.n	800559a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e054      	b.n	8005644 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800559a:	897b      	ldrh	r3, [r7, #10]
 800559c:	b2da      	uxtb	r2, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	4929      	ldr	r1, [pc, #164]	@ (8005650 <I2C_MasterRequestRead+0x198>)
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f000 f8cc 	bl	8005748 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d001      	beq.n	80055ba <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e044      	b.n	8005644 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055ba:	2300      	movs	r3, #0
 80055bc:	613b      	str	r3, [r7, #16]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	695b      	ldr	r3, [r3, #20]
 80055c4:	613b      	str	r3, [r7, #16]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	613b      	str	r3, [r7, #16]
 80055ce:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055de:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	9300      	str	r3, [sp, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80055ec:	68f8      	ldr	r0, [r7, #12]
 80055ee:	f000 f831 	bl	8005654 <I2C_WaitOnFlagUntilTimeout>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d00d      	beq.n	8005614 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005602:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005606:	d103      	bne.n	8005610 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800560e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e017      	b.n	8005644 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005614:	897b      	ldrh	r3, [r7, #10]
 8005616:	11db      	asrs	r3, r3, #7
 8005618:	b2db      	uxtb	r3, r3
 800561a:	f003 0306 	and.w	r3, r3, #6
 800561e:	b2db      	uxtb	r3, r3
 8005620:	f063 030e 	orn	r3, r3, #14
 8005624:	b2da      	uxtb	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	4907      	ldr	r1, [pc, #28]	@ (8005650 <I2C_MasterRequestRead+0x198>)
 8005632:	68f8      	ldr	r0, [r7, #12]
 8005634:	f000 f888 	bl	8005748 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d001      	beq.n	8005642 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e000      	b.n	8005644 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3718      	adds	r7, #24
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	00010008 	.word	0x00010008
 8005650:	00010002 	.word	0x00010002

08005654 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	603b      	str	r3, [r7, #0]
 8005660:	4613      	mov	r3, r2
 8005662:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005664:	e048      	b.n	80056f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800566c:	d044      	beq.n	80056f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800566e:	f7fe f847 	bl	8003700 <HAL_GetTick>
 8005672:	4602      	mov	r2, r0
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	683a      	ldr	r2, [r7, #0]
 800567a:	429a      	cmp	r2, r3
 800567c:	d302      	bcc.n	8005684 <I2C_WaitOnFlagUntilTimeout+0x30>
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d139      	bne.n	80056f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	0c1b      	lsrs	r3, r3, #16
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b01      	cmp	r3, #1
 800568c:	d10d      	bne.n	80056aa <I2C_WaitOnFlagUntilTimeout+0x56>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	695b      	ldr	r3, [r3, #20]
 8005694:	43da      	mvns	r2, r3
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	4013      	ands	r3, r2
 800569a:	b29b      	uxth	r3, r3
 800569c:	2b00      	cmp	r3, #0
 800569e:	bf0c      	ite	eq
 80056a0:	2301      	moveq	r3, #1
 80056a2:	2300      	movne	r3, #0
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	461a      	mov	r2, r3
 80056a8:	e00c      	b.n	80056c4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	43da      	mvns	r2, r3
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	4013      	ands	r3, r2
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	bf0c      	ite	eq
 80056bc:	2301      	moveq	r3, #1
 80056be:	2300      	movne	r3, #0
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	461a      	mov	r2, r3
 80056c4:	79fb      	ldrb	r3, [r7, #7]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d116      	bne.n	80056f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2220      	movs	r2, #32
 80056d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056e4:	f043 0220 	orr.w	r2, r3, #32
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e023      	b.n	8005740 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	0c1b      	lsrs	r3, r3, #16
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d10d      	bne.n	800571e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	695b      	ldr	r3, [r3, #20]
 8005708:	43da      	mvns	r2, r3
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	4013      	ands	r3, r2
 800570e:	b29b      	uxth	r3, r3
 8005710:	2b00      	cmp	r3, #0
 8005712:	bf0c      	ite	eq
 8005714:	2301      	moveq	r3, #1
 8005716:	2300      	movne	r3, #0
 8005718:	b2db      	uxtb	r3, r3
 800571a:	461a      	mov	r2, r3
 800571c:	e00c      	b.n	8005738 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	699b      	ldr	r3, [r3, #24]
 8005724:	43da      	mvns	r2, r3
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	4013      	ands	r3, r2
 800572a:	b29b      	uxth	r3, r3
 800572c:	2b00      	cmp	r3, #0
 800572e:	bf0c      	ite	eq
 8005730:	2301      	moveq	r3, #1
 8005732:	2300      	movne	r3, #0
 8005734:	b2db      	uxtb	r3, r3
 8005736:	461a      	mov	r2, r3
 8005738:	79fb      	ldrb	r3, [r7, #7]
 800573a:	429a      	cmp	r2, r3
 800573c:	d093      	beq.n	8005666 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800573e:	2300      	movs	r3, #0
}
 8005740:	4618      	mov	r0, r3
 8005742:	3710      	adds	r7, #16
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]
 8005754:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005756:	e071      	b.n	800583c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005762:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005766:	d123      	bne.n	80057b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005776:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005780:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2220      	movs	r2, #32
 800578c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800579c:	f043 0204 	orr.w	r2, r3, #4
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e067      	b.n	8005880 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b6:	d041      	beq.n	800583c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057b8:	f7fd ffa2 	bl	8003700 <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d302      	bcc.n	80057ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d136      	bne.n	800583c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	0c1b      	lsrs	r3, r3, #16
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d10c      	bne.n	80057f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	695b      	ldr	r3, [r3, #20]
 80057de:	43da      	mvns	r2, r3
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	4013      	ands	r3, r2
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	bf14      	ite	ne
 80057ea:	2301      	movne	r3, #1
 80057ec:	2300      	moveq	r3, #0
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	e00b      	b.n	800580a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	699b      	ldr	r3, [r3, #24]
 80057f8:	43da      	mvns	r2, r3
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	4013      	ands	r3, r2
 80057fe:	b29b      	uxth	r3, r3
 8005800:	2b00      	cmp	r3, #0
 8005802:	bf14      	ite	ne
 8005804:	2301      	movne	r3, #1
 8005806:	2300      	moveq	r3, #0
 8005808:	b2db      	uxtb	r3, r3
 800580a:	2b00      	cmp	r3, #0
 800580c:	d016      	beq.n	800583c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2220      	movs	r2, #32
 8005818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005828:	f043 0220 	orr.w	r2, r3, #32
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e021      	b.n	8005880 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	0c1b      	lsrs	r3, r3, #16
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b01      	cmp	r3, #1
 8005844:	d10c      	bne.n	8005860 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	695b      	ldr	r3, [r3, #20]
 800584c:	43da      	mvns	r2, r3
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	4013      	ands	r3, r2
 8005852:	b29b      	uxth	r3, r3
 8005854:	2b00      	cmp	r3, #0
 8005856:	bf14      	ite	ne
 8005858:	2301      	movne	r3, #1
 800585a:	2300      	moveq	r3, #0
 800585c:	b2db      	uxtb	r3, r3
 800585e:	e00b      	b.n	8005878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	43da      	mvns	r2, r3
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	4013      	ands	r3, r2
 800586c:	b29b      	uxth	r3, r3
 800586e:	2b00      	cmp	r3, #0
 8005870:	bf14      	ite	ne
 8005872:	2301      	movne	r3, #1
 8005874:	2300      	moveq	r3, #0
 8005876:	b2db      	uxtb	r3, r3
 8005878:	2b00      	cmp	r3, #0
 800587a:	f47f af6d 	bne.w	8005758 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3710      	adds	r7, #16
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005894:	e034      	b.n	8005900 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005896:	68f8      	ldr	r0, [r7, #12]
 8005898:	f000 f8e3 	bl	8005a62 <I2C_IsAcknowledgeFailed>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d001      	beq.n	80058a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e034      	b.n	8005910 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ac:	d028      	beq.n	8005900 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058ae:	f7fd ff27 	bl	8003700 <HAL_GetTick>
 80058b2:	4602      	mov	r2, r0
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	68ba      	ldr	r2, [r7, #8]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d302      	bcc.n	80058c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d11d      	bne.n	8005900 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	695b      	ldr	r3, [r3, #20]
 80058ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058ce:	2b80      	cmp	r3, #128	@ 0x80
 80058d0:	d016      	beq.n	8005900 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2220      	movs	r2, #32
 80058dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ec:	f043 0220 	orr.w	r2, r3, #32
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e007      	b.n	8005910 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800590a:	2b80      	cmp	r3, #128	@ 0x80
 800590c:	d1c3      	bne.n	8005896 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800590e:	2300      	movs	r3, #0
}
 8005910:	4618      	mov	r0, r3
 8005912:	3710      	adds	r7, #16
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005924:	e034      	b.n	8005990 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	f000 f89b 	bl	8005a62 <I2C_IsAcknowledgeFailed>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d001      	beq.n	8005936 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e034      	b.n	80059a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800593c:	d028      	beq.n	8005990 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800593e:	f7fd fedf 	bl	8003700 <HAL_GetTick>
 8005942:	4602      	mov	r2, r0
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	68ba      	ldr	r2, [r7, #8]
 800594a:	429a      	cmp	r2, r3
 800594c:	d302      	bcc.n	8005954 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d11d      	bne.n	8005990 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	f003 0304 	and.w	r3, r3, #4
 800595e:	2b04      	cmp	r3, #4
 8005960:	d016      	beq.n	8005990 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2200      	movs	r2, #0
 8005966:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2220      	movs	r2, #32
 800596c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2200      	movs	r2, #0
 8005974:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800597c:	f043 0220 	orr.w	r2, r3, #32
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e007      	b.n	80059a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	f003 0304 	and.w	r3, r3, #4
 800599a:	2b04      	cmp	r3, #4
 800599c:	d1c3      	bne.n	8005926 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3710      	adds	r7, #16
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059b4:	e049      	b.n	8005a4a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	695b      	ldr	r3, [r3, #20]
 80059bc:	f003 0310 	and.w	r3, r3, #16
 80059c0:	2b10      	cmp	r3, #16
 80059c2:	d119      	bne.n	80059f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f06f 0210 	mvn.w	r2, #16
 80059cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2200      	movs	r2, #0
 80059d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2220      	movs	r2, #32
 80059d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e030      	b.n	8005a5a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059f8:	f7fd fe82 	bl	8003700 <HAL_GetTick>
 80059fc:	4602      	mov	r2, r0
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	68ba      	ldr	r2, [r7, #8]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d302      	bcc.n	8005a0e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d11d      	bne.n	8005a4a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	695b      	ldr	r3, [r3, #20]
 8005a14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a18:	2b40      	cmp	r3, #64	@ 0x40
 8005a1a:	d016      	beq.n	8005a4a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2220      	movs	r2, #32
 8005a26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a36:	f043 0220 	orr.w	r2, r3, #32
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e007      	b.n	8005a5a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	695b      	ldr	r3, [r3, #20]
 8005a50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a54:	2b40      	cmp	r3, #64	@ 0x40
 8005a56:	d1ae      	bne.n	80059b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3710      	adds	r7, #16
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}

08005a62 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a62:	b480      	push	{r7}
 8005a64:	b083      	sub	sp, #12
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	695b      	ldr	r3, [r3, #20]
 8005a70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a78:	d11b      	bne.n	8005ab2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005a82:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2220      	movs	r2, #32
 8005a8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a9e:	f043 0204 	orr.w	r2, r3, #4
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e000      	b.n	8005ab4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	370c      	adds	r7, #12
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bc80      	pop	{r7}
 8005abc:	4770      	bx	lr
	...

08005ac0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b086      	sub	sp, #24
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d101      	bne.n	8005ad2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e272      	b.n	8005fb8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0301 	and.w	r3, r3, #1
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	f000 8087 	beq.w	8005bee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ae0:	4b92      	ldr	r3, [pc, #584]	@ (8005d2c <HAL_RCC_OscConfig+0x26c>)
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	f003 030c 	and.w	r3, r3, #12
 8005ae8:	2b04      	cmp	r3, #4
 8005aea:	d00c      	beq.n	8005b06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005aec:	4b8f      	ldr	r3, [pc, #572]	@ (8005d2c <HAL_RCC_OscConfig+0x26c>)
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f003 030c 	and.w	r3, r3, #12
 8005af4:	2b08      	cmp	r3, #8
 8005af6:	d112      	bne.n	8005b1e <HAL_RCC_OscConfig+0x5e>
 8005af8:	4b8c      	ldr	r3, [pc, #560]	@ (8005d2c <HAL_RCC_OscConfig+0x26c>)
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b04:	d10b      	bne.n	8005b1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b06:	4b89      	ldr	r3, [pc, #548]	@ (8005d2c <HAL_RCC_OscConfig+0x26c>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d06c      	beq.n	8005bec <HAL_RCC_OscConfig+0x12c>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d168      	bne.n	8005bec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e24c      	b.n	8005fb8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b26:	d106      	bne.n	8005b36 <HAL_RCC_OscConfig+0x76>
 8005b28:	4b80      	ldr	r3, [pc, #512]	@ (8005d2c <HAL_RCC_OscConfig+0x26c>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a7f      	ldr	r2, [pc, #508]	@ (8005d2c <HAL_RCC_OscConfig+0x26c>)
 8005b2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b32:	6013      	str	r3, [r2, #0]
 8005b34:	e02e      	b.n	8005b94 <HAL_RCC_OscConfig+0xd4>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d10c      	bne.n	8005b58 <HAL_RCC_OscConfig+0x98>
 8005b3e:	4b7b      	ldr	r3, [pc, #492]	@ (8005d2c <HAL_RCC_OscConfig+0x26c>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a7a      	ldr	r2, [pc, #488]	@ (8005d2c <HAL_RCC_OscConfig+0x26c>)
 8005b44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b48:	6013      	str	r3, [r2, #0]
 8005b4a:	4b78      	ldr	r3, [pc, #480]	@ (8005d2c <HAL_RCC_OscConfig+0x26c>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a77      	ldr	r2, [pc, #476]	@ (8005d2c <HAL_RCC_OscConfig+0x26c>)
 8005b50:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b54:	6013      	str	r3, [r2, #0]
 8005b56:	e01d      	b.n	8005b94 <HAL_RCC_OscConfig+0xd4>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b60:	d10c      	bne.n	8005b7c <HAL_RCC_OscConfig+0xbc>
 8005b62:	4b72      	ldr	r3, [pc, #456]	@ (8005d2c <HAL_RCC_OscConfig+0x26c>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a71      	ldr	r2, [pc, #452]	@ (8005d2c <HAL_RCC_OscConfig+0x26c>)
 8005b68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005b6c:	6013      	str	r3, [r2, #0]
 8005b6e:	4b6f      	ldr	r3, [pc, #444]	@ (8005d2c <HAL_RCC_OscConfig+0x26c>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a6e      	ldr	r2, [pc, #440]	@ (8005d2c <HAL_RCC_OscConfig+0x26c>)
 8005b74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b78:	6013      	str	r3, [r2, #0]
 8005b7a:	e00b      	b.n	8005b94 <HAL_RCC_OscConfig+0xd4>
 8005b7c:	4b6b      	ldr	r3, [pc, #428]	@ (8005d2c <HAL_RCC_OscConfig+0x26c>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a6a      	ldr	r2, [pc, #424]	@ (8005d2c <HAL_RCC_OscConfig+0x26c>)
 8005b82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b86:	6013      	str	r3, [r2, #0]
 8005b88:	4b68      	ldr	r3, [pc, #416]	@ (8005d2c <HAL_RCC_OscConfig+0x26c>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a67      	ldr	r2, [pc, #412]	@ (8005d2c <HAL_RCC_OscConfig+0x26c>)
 8005b8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d013      	beq.n	8005bc4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b9c:	f7fd fdb0 	bl	8003700 <HAL_GetTick>
 8005ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ba2:	e008      	b.n	8005bb6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ba4:	f7fd fdac 	bl	8003700 <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	2b64      	cmp	r3, #100	@ 0x64
 8005bb0:	d901      	bls.n	8005bb6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e200      	b.n	8005fb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bb6:	4b5d      	ldr	r3, [pc, #372]	@ (8005d2c <HAL_RCC_OscConfig+0x26c>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d0f0      	beq.n	8005ba4 <HAL_RCC_OscConfig+0xe4>
 8005bc2:	e014      	b.n	8005bee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bc4:	f7fd fd9c 	bl	8003700 <HAL_GetTick>
 8005bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bca:	e008      	b.n	8005bde <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bcc:	f7fd fd98 	bl	8003700 <HAL_GetTick>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	2b64      	cmp	r3, #100	@ 0x64
 8005bd8:	d901      	bls.n	8005bde <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e1ec      	b.n	8005fb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bde:	4b53      	ldr	r3, [pc, #332]	@ (8005d2c <HAL_RCC_OscConfig+0x26c>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1f0      	bne.n	8005bcc <HAL_RCC_OscConfig+0x10c>
 8005bea:	e000      	b.n	8005bee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0302 	and.w	r3, r3, #2
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d063      	beq.n	8005cc2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005bfa:	4b4c      	ldr	r3, [pc, #304]	@ (8005d2c <HAL_RCC_OscConfig+0x26c>)
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f003 030c 	and.w	r3, r3, #12
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00b      	beq.n	8005c1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005c06:	4b49      	ldr	r3, [pc, #292]	@ (8005d2c <HAL_RCC_OscConfig+0x26c>)
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	f003 030c 	and.w	r3, r3, #12
 8005c0e:	2b08      	cmp	r3, #8
 8005c10:	d11c      	bne.n	8005c4c <HAL_RCC_OscConfig+0x18c>
 8005c12:	4b46      	ldr	r3, [pc, #280]	@ (8005d2c <HAL_RCC_OscConfig+0x26c>)
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d116      	bne.n	8005c4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c1e:	4b43      	ldr	r3, [pc, #268]	@ (8005d2c <HAL_RCC_OscConfig+0x26c>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 0302 	and.w	r3, r3, #2
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d005      	beq.n	8005c36 <HAL_RCC_OscConfig+0x176>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d001      	beq.n	8005c36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e1c0      	b.n	8005fb8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c36:	4b3d      	ldr	r3, [pc, #244]	@ (8005d2c <HAL_RCC_OscConfig+0x26c>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	00db      	lsls	r3, r3, #3
 8005c44:	4939      	ldr	r1, [pc, #228]	@ (8005d2c <HAL_RCC_OscConfig+0x26c>)
 8005c46:	4313      	orrs	r3, r2
 8005c48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c4a:	e03a      	b.n	8005cc2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d020      	beq.n	8005c96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c54:	4b36      	ldr	r3, [pc, #216]	@ (8005d30 <HAL_RCC_OscConfig+0x270>)
 8005c56:	2201      	movs	r2, #1
 8005c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c5a:	f7fd fd51 	bl	8003700 <HAL_GetTick>
 8005c5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c60:	e008      	b.n	8005c74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c62:	f7fd fd4d 	bl	8003700 <HAL_GetTick>
 8005c66:	4602      	mov	r2, r0
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d901      	bls.n	8005c74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	e1a1      	b.n	8005fb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c74:	4b2d      	ldr	r3, [pc, #180]	@ (8005d2c <HAL_RCC_OscConfig+0x26c>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0302 	and.w	r3, r3, #2
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d0f0      	beq.n	8005c62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c80:	4b2a      	ldr	r3, [pc, #168]	@ (8005d2c <HAL_RCC_OscConfig+0x26c>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	695b      	ldr	r3, [r3, #20]
 8005c8c:	00db      	lsls	r3, r3, #3
 8005c8e:	4927      	ldr	r1, [pc, #156]	@ (8005d2c <HAL_RCC_OscConfig+0x26c>)
 8005c90:	4313      	orrs	r3, r2
 8005c92:	600b      	str	r3, [r1, #0]
 8005c94:	e015      	b.n	8005cc2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c96:	4b26      	ldr	r3, [pc, #152]	@ (8005d30 <HAL_RCC_OscConfig+0x270>)
 8005c98:	2200      	movs	r2, #0
 8005c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c9c:	f7fd fd30 	bl	8003700 <HAL_GetTick>
 8005ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ca2:	e008      	b.n	8005cb6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ca4:	f7fd fd2c 	bl	8003700 <HAL_GetTick>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d901      	bls.n	8005cb6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e180      	b.n	8005fb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cb6:	4b1d      	ldr	r3, [pc, #116]	@ (8005d2c <HAL_RCC_OscConfig+0x26c>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0302 	and.w	r3, r3, #2
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1f0      	bne.n	8005ca4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0308 	and.w	r3, r3, #8
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d03a      	beq.n	8005d44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	699b      	ldr	r3, [r3, #24]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d019      	beq.n	8005d0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cd6:	4b17      	ldr	r3, [pc, #92]	@ (8005d34 <HAL_RCC_OscConfig+0x274>)
 8005cd8:	2201      	movs	r2, #1
 8005cda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cdc:	f7fd fd10 	bl	8003700 <HAL_GetTick>
 8005ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ce2:	e008      	b.n	8005cf6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ce4:	f7fd fd0c 	bl	8003700 <HAL_GetTick>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d901      	bls.n	8005cf6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e160      	b.n	8005fb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8005d2c <HAL_RCC_OscConfig+0x26c>)
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cfa:	f003 0302 	and.w	r3, r3, #2
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d0f0      	beq.n	8005ce4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005d02:	2001      	movs	r0, #1
 8005d04:	f000 face 	bl	80062a4 <RCC_Delay>
 8005d08:	e01c      	b.n	8005d44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8005d34 <HAL_RCC_OscConfig+0x274>)
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d10:	f7fd fcf6 	bl	8003700 <HAL_GetTick>
 8005d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d16:	e00f      	b.n	8005d38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d18:	f7fd fcf2 	bl	8003700 <HAL_GetTick>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d908      	bls.n	8005d38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	e146      	b.n	8005fb8 <HAL_RCC_OscConfig+0x4f8>
 8005d2a:	bf00      	nop
 8005d2c:	40021000 	.word	0x40021000
 8005d30:	42420000 	.word	0x42420000
 8005d34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d38:	4b92      	ldr	r3, [pc, #584]	@ (8005f84 <HAL_RCC_OscConfig+0x4c4>)
 8005d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d3c:	f003 0302 	and.w	r3, r3, #2
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1e9      	bne.n	8005d18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0304 	and.w	r3, r3, #4
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f000 80a6 	beq.w	8005e9e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d52:	2300      	movs	r3, #0
 8005d54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d56:	4b8b      	ldr	r3, [pc, #556]	@ (8005f84 <HAL_RCC_OscConfig+0x4c4>)
 8005d58:	69db      	ldr	r3, [r3, #28]
 8005d5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d10d      	bne.n	8005d7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d62:	4b88      	ldr	r3, [pc, #544]	@ (8005f84 <HAL_RCC_OscConfig+0x4c4>)
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	4a87      	ldr	r2, [pc, #540]	@ (8005f84 <HAL_RCC_OscConfig+0x4c4>)
 8005d68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d6c:	61d3      	str	r3, [r2, #28]
 8005d6e:	4b85      	ldr	r3, [pc, #532]	@ (8005f84 <HAL_RCC_OscConfig+0x4c4>)
 8005d70:	69db      	ldr	r3, [r3, #28]
 8005d72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d76:	60bb      	str	r3, [r7, #8]
 8005d78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d7e:	4b82      	ldr	r3, [pc, #520]	@ (8005f88 <HAL_RCC_OscConfig+0x4c8>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d118      	bne.n	8005dbc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d8a:	4b7f      	ldr	r3, [pc, #508]	@ (8005f88 <HAL_RCC_OscConfig+0x4c8>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a7e      	ldr	r2, [pc, #504]	@ (8005f88 <HAL_RCC_OscConfig+0x4c8>)
 8005d90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d96:	f7fd fcb3 	bl	8003700 <HAL_GetTick>
 8005d9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d9c:	e008      	b.n	8005db0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d9e:	f7fd fcaf 	bl	8003700 <HAL_GetTick>
 8005da2:	4602      	mov	r2, r0
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	2b64      	cmp	r3, #100	@ 0x64
 8005daa:	d901      	bls.n	8005db0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e103      	b.n	8005fb8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005db0:	4b75      	ldr	r3, [pc, #468]	@ (8005f88 <HAL_RCC_OscConfig+0x4c8>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d0f0      	beq.n	8005d9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d106      	bne.n	8005dd2 <HAL_RCC_OscConfig+0x312>
 8005dc4:	4b6f      	ldr	r3, [pc, #444]	@ (8005f84 <HAL_RCC_OscConfig+0x4c4>)
 8005dc6:	6a1b      	ldr	r3, [r3, #32]
 8005dc8:	4a6e      	ldr	r2, [pc, #440]	@ (8005f84 <HAL_RCC_OscConfig+0x4c4>)
 8005dca:	f043 0301 	orr.w	r3, r3, #1
 8005dce:	6213      	str	r3, [r2, #32]
 8005dd0:	e02d      	b.n	8005e2e <HAL_RCC_OscConfig+0x36e>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d10c      	bne.n	8005df4 <HAL_RCC_OscConfig+0x334>
 8005dda:	4b6a      	ldr	r3, [pc, #424]	@ (8005f84 <HAL_RCC_OscConfig+0x4c4>)
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	4a69      	ldr	r2, [pc, #420]	@ (8005f84 <HAL_RCC_OscConfig+0x4c4>)
 8005de0:	f023 0301 	bic.w	r3, r3, #1
 8005de4:	6213      	str	r3, [r2, #32]
 8005de6:	4b67      	ldr	r3, [pc, #412]	@ (8005f84 <HAL_RCC_OscConfig+0x4c4>)
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	4a66      	ldr	r2, [pc, #408]	@ (8005f84 <HAL_RCC_OscConfig+0x4c4>)
 8005dec:	f023 0304 	bic.w	r3, r3, #4
 8005df0:	6213      	str	r3, [r2, #32]
 8005df2:	e01c      	b.n	8005e2e <HAL_RCC_OscConfig+0x36e>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	2b05      	cmp	r3, #5
 8005dfa:	d10c      	bne.n	8005e16 <HAL_RCC_OscConfig+0x356>
 8005dfc:	4b61      	ldr	r3, [pc, #388]	@ (8005f84 <HAL_RCC_OscConfig+0x4c4>)
 8005dfe:	6a1b      	ldr	r3, [r3, #32]
 8005e00:	4a60      	ldr	r2, [pc, #384]	@ (8005f84 <HAL_RCC_OscConfig+0x4c4>)
 8005e02:	f043 0304 	orr.w	r3, r3, #4
 8005e06:	6213      	str	r3, [r2, #32]
 8005e08:	4b5e      	ldr	r3, [pc, #376]	@ (8005f84 <HAL_RCC_OscConfig+0x4c4>)
 8005e0a:	6a1b      	ldr	r3, [r3, #32]
 8005e0c:	4a5d      	ldr	r2, [pc, #372]	@ (8005f84 <HAL_RCC_OscConfig+0x4c4>)
 8005e0e:	f043 0301 	orr.w	r3, r3, #1
 8005e12:	6213      	str	r3, [r2, #32]
 8005e14:	e00b      	b.n	8005e2e <HAL_RCC_OscConfig+0x36e>
 8005e16:	4b5b      	ldr	r3, [pc, #364]	@ (8005f84 <HAL_RCC_OscConfig+0x4c4>)
 8005e18:	6a1b      	ldr	r3, [r3, #32]
 8005e1a:	4a5a      	ldr	r2, [pc, #360]	@ (8005f84 <HAL_RCC_OscConfig+0x4c4>)
 8005e1c:	f023 0301 	bic.w	r3, r3, #1
 8005e20:	6213      	str	r3, [r2, #32]
 8005e22:	4b58      	ldr	r3, [pc, #352]	@ (8005f84 <HAL_RCC_OscConfig+0x4c4>)
 8005e24:	6a1b      	ldr	r3, [r3, #32]
 8005e26:	4a57      	ldr	r2, [pc, #348]	@ (8005f84 <HAL_RCC_OscConfig+0x4c4>)
 8005e28:	f023 0304 	bic.w	r3, r3, #4
 8005e2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d015      	beq.n	8005e62 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e36:	f7fd fc63 	bl	8003700 <HAL_GetTick>
 8005e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e3c:	e00a      	b.n	8005e54 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e3e:	f7fd fc5f 	bl	8003700 <HAL_GetTick>
 8005e42:	4602      	mov	r2, r0
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d901      	bls.n	8005e54 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005e50:	2303      	movs	r3, #3
 8005e52:	e0b1      	b.n	8005fb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e54:	4b4b      	ldr	r3, [pc, #300]	@ (8005f84 <HAL_RCC_OscConfig+0x4c4>)
 8005e56:	6a1b      	ldr	r3, [r3, #32]
 8005e58:	f003 0302 	and.w	r3, r3, #2
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d0ee      	beq.n	8005e3e <HAL_RCC_OscConfig+0x37e>
 8005e60:	e014      	b.n	8005e8c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e62:	f7fd fc4d 	bl	8003700 <HAL_GetTick>
 8005e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e68:	e00a      	b.n	8005e80 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e6a:	f7fd fc49 	bl	8003700 <HAL_GetTick>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d901      	bls.n	8005e80 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	e09b      	b.n	8005fb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e80:	4b40      	ldr	r3, [pc, #256]	@ (8005f84 <HAL_RCC_OscConfig+0x4c4>)
 8005e82:	6a1b      	ldr	r3, [r3, #32]
 8005e84:	f003 0302 	and.w	r3, r3, #2
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d1ee      	bne.n	8005e6a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005e8c:	7dfb      	ldrb	r3, [r7, #23]
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d105      	bne.n	8005e9e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e92:	4b3c      	ldr	r3, [pc, #240]	@ (8005f84 <HAL_RCC_OscConfig+0x4c4>)
 8005e94:	69db      	ldr	r3, [r3, #28]
 8005e96:	4a3b      	ldr	r2, [pc, #236]	@ (8005f84 <HAL_RCC_OscConfig+0x4c4>)
 8005e98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e9c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	69db      	ldr	r3, [r3, #28]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	f000 8087 	beq.w	8005fb6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ea8:	4b36      	ldr	r3, [pc, #216]	@ (8005f84 <HAL_RCC_OscConfig+0x4c4>)
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	f003 030c 	and.w	r3, r3, #12
 8005eb0:	2b08      	cmp	r3, #8
 8005eb2:	d061      	beq.n	8005f78 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	69db      	ldr	r3, [r3, #28]
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d146      	bne.n	8005f4a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ebc:	4b33      	ldr	r3, [pc, #204]	@ (8005f8c <HAL_RCC_OscConfig+0x4cc>)
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ec2:	f7fd fc1d 	bl	8003700 <HAL_GetTick>
 8005ec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ec8:	e008      	b.n	8005edc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005eca:	f7fd fc19 	bl	8003700 <HAL_GetTick>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	d901      	bls.n	8005edc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005ed8:	2303      	movs	r3, #3
 8005eda:	e06d      	b.n	8005fb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005edc:	4b29      	ldr	r3, [pc, #164]	@ (8005f84 <HAL_RCC_OscConfig+0x4c4>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d1f0      	bne.n	8005eca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a1b      	ldr	r3, [r3, #32]
 8005eec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ef0:	d108      	bne.n	8005f04 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005ef2:	4b24      	ldr	r3, [pc, #144]	@ (8005f84 <HAL_RCC_OscConfig+0x4c4>)
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	4921      	ldr	r1, [pc, #132]	@ (8005f84 <HAL_RCC_OscConfig+0x4c4>)
 8005f00:	4313      	orrs	r3, r2
 8005f02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f04:	4b1f      	ldr	r3, [pc, #124]	@ (8005f84 <HAL_RCC_OscConfig+0x4c4>)
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a19      	ldr	r1, [r3, #32]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f14:	430b      	orrs	r3, r1
 8005f16:	491b      	ldr	r1, [pc, #108]	@ (8005f84 <HAL_RCC_OscConfig+0x4c4>)
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8005f8c <HAL_RCC_OscConfig+0x4cc>)
 8005f1e:	2201      	movs	r2, #1
 8005f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f22:	f7fd fbed 	bl	8003700 <HAL_GetTick>
 8005f26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005f28:	e008      	b.n	8005f3c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f2a:	f7fd fbe9 	bl	8003700 <HAL_GetTick>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	1ad3      	subs	r3, r2, r3
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d901      	bls.n	8005f3c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e03d      	b.n	8005fb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005f3c:	4b11      	ldr	r3, [pc, #68]	@ (8005f84 <HAL_RCC_OscConfig+0x4c4>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d0f0      	beq.n	8005f2a <HAL_RCC_OscConfig+0x46a>
 8005f48:	e035      	b.n	8005fb6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f4a:	4b10      	ldr	r3, [pc, #64]	@ (8005f8c <HAL_RCC_OscConfig+0x4cc>)
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f50:	f7fd fbd6 	bl	8003700 <HAL_GetTick>
 8005f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f56:	e008      	b.n	8005f6a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f58:	f7fd fbd2 	bl	8003700 <HAL_GetTick>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	d901      	bls.n	8005f6a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	e026      	b.n	8005fb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f6a:	4b06      	ldr	r3, [pc, #24]	@ (8005f84 <HAL_RCC_OscConfig+0x4c4>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1f0      	bne.n	8005f58 <HAL_RCC_OscConfig+0x498>
 8005f76:	e01e      	b.n	8005fb6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	69db      	ldr	r3, [r3, #28]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d107      	bne.n	8005f90 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e019      	b.n	8005fb8 <HAL_RCC_OscConfig+0x4f8>
 8005f84:	40021000 	.word	0x40021000
 8005f88:	40007000 	.word	0x40007000
 8005f8c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005f90:	4b0b      	ldr	r3, [pc, #44]	@ (8005fc0 <HAL_RCC_OscConfig+0x500>)
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a1b      	ldr	r3, [r3, #32]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d106      	bne.n	8005fb2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d001      	beq.n	8005fb6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e000      	b.n	8005fb8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3718      	adds	r7, #24
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	40021000 	.word	0x40021000

08005fc4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d101      	bne.n	8005fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e0d0      	b.n	800617a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005fd8:	4b6a      	ldr	r3, [pc, #424]	@ (8006184 <HAL_RCC_ClockConfig+0x1c0>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0307 	and.w	r3, r3, #7
 8005fe0:	683a      	ldr	r2, [r7, #0]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d910      	bls.n	8006008 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fe6:	4b67      	ldr	r3, [pc, #412]	@ (8006184 <HAL_RCC_ClockConfig+0x1c0>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f023 0207 	bic.w	r2, r3, #7
 8005fee:	4965      	ldr	r1, [pc, #404]	@ (8006184 <HAL_RCC_ClockConfig+0x1c0>)
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ff6:	4b63      	ldr	r3, [pc, #396]	@ (8006184 <HAL_RCC_ClockConfig+0x1c0>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 0307 	and.w	r3, r3, #7
 8005ffe:	683a      	ldr	r2, [r7, #0]
 8006000:	429a      	cmp	r2, r3
 8006002:	d001      	beq.n	8006008 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e0b8      	b.n	800617a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 0302 	and.w	r3, r3, #2
 8006010:	2b00      	cmp	r3, #0
 8006012:	d020      	beq.n	8006056 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 0304 	and.w	r3, r3, #4
 800601c:	2b00      	cmp	r3, #0
 800601e:	d005      	beq.n	800602c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006020:	4b59      	ldr	r3, [pc, #356]	@ (8006188 <HAL_RCC_ClockConfig+0x1c4>)
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	4a58      	ldr	r2, [pc, #352]	@ (8006188 <HAL_RCC_ClockConfig+0x1c4>)
 8006026:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800602a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0308 	and.w	r3, r3, #8
 8006034:	2b00      	cmp	r3, #0
 8006036:	d005      	beq.n	8006044 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006038:	4b53      	ldr	r3, [pc, #332]	@ (8006188 <HAL_RCC_ClockConfig+0x1c4>)
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	4a52      	ldr	r2, [pc, #328]	@ (8006188 <HAL_RCC_ClockConfig+0x1c4>)
 800603e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8006042:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006044:	4b50      	ldr	r3, [pc, #320]	@ (8006188 <HAL_RCC_ClockConfig+0x1c4>)
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	494d      	ldr	r1, [pc, #308]	@ (8006188 <HAL_RCC_ClockConfig+0x1c4>)
 8006052:	4313      	orrs	r3, r2
 8006054:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 0301 	and.w	r3, r3, #1
 800605e:	2b00      	cmp	r3, #0
 8006060:	d040      	beq.n	80060e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	2b01      	cmp	r3, #1
 8006068:	d107      	bne.n	800607a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800606a:	4b47      	ldr	r3, [pc, #284]	@ (8006188 <HAL_RCC_ClockConfig+0x1c4>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006072:	2b00      	cmp	r3, #0
 8006074:	d115      	bne.n	80060a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e07f      	b.n	800617a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	2b02      	cmp	r3, #2
 8006080:	d107      	bne.n	8006092 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006082:	4b41      	ldr	r3, [pc, #260]	@ (8006188 <HAL_RCC_ClockConfig+0x1c4>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800608a:	2b00      	cmp	r3, #0
 800608c:	d109      	bne.n	80060a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e073      	b.n	800617a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006092:	4b3d      	ldr	r3, [pc, #244]	@ (8006188 <HAL_RCC_ClockConfig+0x1c4>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 0302 	and.w	r3, r3, #2
 800609a:	2b00      	cmp	r3, #0
 800609c:	d101      	bne.n	80060a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e06b      	b.n	800617a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80060a2:	4b39      	ldr	r3, [pc, #228]	@ (8006188 <HAL_RCC_ClockConfig+0x1c4>)
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	f023 0203 	bic.w	r2, r3, #3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	4936      	ldr	r1, [pc, #216]	@ (8006188 <HAL_RCC_ClockConfig+0x1c4>)
 80060b0:	4313      	orrs	r3, r2
 80060b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80060b4:	f7fd fb24 	bl	8003700 <HAL_GetTick>
 80060b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060ba:	e00a      	b.n	80060d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060bc:	f7fd fb20 	bl	8003700 <HAL_GetTick>
 80060c0:	4602      	mov	r2, r0
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d901      	bls.n	80060d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	e053      	b.n	800617a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060d2:	4b2d      	ldr	r3, [pc, #180]	@ (8006188 <HAL_RCC_ClockConfig+0x1c4>)
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	f003 020c 	and.w	r2, r3, #12
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d1eb      	bne.n	80060bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80060e4:	4b27      	ldr	r3, [pc, #156]	@ (8006184 <HAL_RCC_ClockConfig+0x1c0>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 0307 	and.w	r3, r3, #7
 80060ec:	683a      	ldr	r2, [r7, #0]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d210      	bcs.n	8006114 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060f2:	4b24      	ldr	r3, [pc, #144]	@ (8006184 <HAL_RCC_ClockConfig+0x1c0>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f023 0207 	bic.w	r2, r3, #7
 80060fa:	4922      	ldr	r1, [pc, #136]	@ (8006184 <HAL_RCC_ClockConfig+0x1c0>)
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	4313      	orrs	r3, r2
 8006100:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006102:	4b20      	ldr	r3, [pc, #128]	@ (8006184 <HAL_RCC_ClockConfig+0x1c0>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 0307 	and.w	r3, r3, #7
 800610a:	683a      	ldr	r2, [r7, #0]
 800610c:	429a      	cmp	r2, r3
 800610e:	d001      	beq.n	8006114 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e032      	b.n	800617a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 0304 	and.w	r3, r3, #4
 800611c:	2b00      	cmp	r3, #0
 800611e:	d008      	beq.n	8006132 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006120:	4b19      	ldr	r3, [pc, #100]	@ (8006188 <HAL_RCC_ClockConfig+0x1c4>)
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	4916      	ldr	r1, [pc, #88]	@ (8006188 <HAL_RCC_ClockConfig+0x1c4>)
 800612e:	4313      	orrs	r3, r2
 8006130:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 0308 	and.w	r3, r3, #8
 800613a:	2b00      	cmp	r3, #0
 800613c:	d009      	beq.n	8006152 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800613e:	4b12      	ldr	r3, [pc, #72]	@ (8006188 <HAL_RCC_ClockConfig+0x1c4>)
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	00db      	lsls	r3, r3, #3
 800614c:	490e      	ldr	r1, [pc, #56]	@ (8006188 <HAL_RCC_ClockConfig+0x1c4>)
 800614e:	4313      	orrs	r3, r2
 8006150:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006152:	f000 f821 	bl	8006198 <HAL_RCC_GetSysClockFreq>
 8006156:	4602      	mov	r2, r0
 8006158:	4b0b      	ldr	r3, [pc, #44]	@ (8006188 <HAL_RCC_ClockConfig+0x1c4>)
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	091b      	lsrs	r3, r3, #4
 800615e:	f003 030f 	and.w	r3, r3, #15
 8006162:	490a      	ldr	r1, [pc, #40]	@ (800618c <HAL_RCC_ClockConfig+0x1c8>)
 8006164:	5ccb      	ldrb	r3, [r1, r3]
 8006166:	fa22 f303 	lsr.w	r3, r2, r3
 800616a:	4a09      	ldr	r2, [pc, #36]	@ (8006190 <HAL_RCC_ClockConfig+0x1cc>)
 800616c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800616e:	4b09      	ldr	r3, [pc, #36]	@ (8006194 <HAL_RCC_ClockConfig+0x1d0>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4618      	mov	r0, r3
 8006174:	f7fd fa82 	bl	800367c <HAL_InitTick>

  return HAL_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	3710      	adds	r7, #16
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	40022000 	.word	0x40022000
 8006188:	40021000 	.word	0x40021000
 800618c:	0800a470 	.word	0x0800a470
 8006190:	20000030 	.word	0x20000030
 8006194:	20000034 	.word	0x20000034

08006198 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006198:	b480      	push	{r7}
 800619a:	b087      	sub	sp, #28
 800619c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800619e:	2300      	movs	r3, #0
 80061a0:	60fb      	str	r3, [r7, #12]
 80061a2:	2300      	movs	r3, #0
 80061a4:	60bb      	str	r3, [r7, #8]
 80061a6:	2300      	movs	r3, #0
 80061a8:	617b      	str	r3, [r7, #20]
 80061aa:	2300      	movs	r3, #0
 80061ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80061ae:	2300      	movs	r3, #0
 80061b0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80061b2:	4b1e      	ldr	r3, [pc, #120]	@ (800622c <HAL_RCC_GetSysClockFreq+0x94>)
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f003 030c 	and.w	r3, r3, #12
 80061be:	2b04      	cmp	r3, #4
 80061c0:	d002      	beq.n	80061c8 <HAL_RCC_GetSysClockFreq+0x30>
 80061c2:	2b08      	cmp	r3, #8
 80061c4:	d003      	beq.n	80061ce <HAL_RCC_GetSysClockFreq+0x36>
 80061c6:	e027      	b.n	8006218 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80061c8:	4b19      	ldr	r3, [pc, #100]	@ (8006230 <HAL_RCC_GetSysClockFreq+0x98>)
 80061ca:	613b      	str	r3, [r7, #16]
      break;
 80061cc:	e027      	b.n	800621e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	0c9b      	lsrs	r3, r3, #18
 80061d2:	f003 030f 	and.w	r3, r3, #15
 80061d6:	4a17      	ldr	r2, [pc, #92]	@ (8006234 <HAL_RCC_GetSysClockFreq+0x9c>)
 80061d8:	5cd3      	ldrb	r3, [r2, r3]
 80061da:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d010      	beq.n	8006208 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80061e6:	4b11      	ldr	r3, [pc, #68]	@ (800622c <HAL_RCC_GetSysClockFreq+0x94>)
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	0c5b      	lsrs	r3, r3, #17
 80061ec:	f003 0301 	and.w	r3, r3, #1
 80061f0:	4a11      	ldr	r2, [pc, #68]	@ (8006238 <HAL_RCC_GetSysClockFreq+0xa0>)
 80061f2:	5cd3      	ldrb	r3, [r2, r3]
 80061f4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a0d      	ldr	r2, [pc, #52]	@ (8006230 <HAL_RCC_GetSysClockFreq+0x98>)
 80061fa:	fb03 f202 	mul.w	r2, r3, r2
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	fbb2 f3f3 	udiv	r3, r2, r3
 8006204:	617b      	str	r3, [r7, #20]
 8006206:	e004      	b.n	8006212 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a0c      	ldr	r2, [pc, #48]	@ (800623c <HAL_RCC_GetSysClockFreq+0xa4>)
 800620c:	fb02 f303 	mul.w	r3, r2, r3
 8006210:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	613b      	str	r3, [r7, #16]
      break;
 8006216:	e002      	b.n	800621e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006218:	4b05      	ldr	r3, [pc, #20]	@ (8006230 <HAL_RCC_GetSysClockFreq+0x98>)
 800621a:	613b      	str	r3, [r7, #16]
      break;
 800621c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800621e:	693b      	ldr	r3, [r7, #16]
}
 8006220:	4618      	mov	r0, r3
 8006222:	371c      	adds	r7, #28
 8006224:	46bd      	mov	sp, r7
 8006226:	bc80      	pop	{r7}
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	40021000 	.word	0x40021000
 8006230:	007a1200 	.word	0x007a1200
 8006234:	0800a488 	.word	0x0800a488
 8006238:	0800a498 	.word	0x0800a498
 800623c:	003d0900 	.word	0x003d0900

08006240 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006240:	b480      	push	{r7}
 8006242:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006244:	4b02      	ldr	r3, [pc, #8]	@ (8006250 <HAL_RCC_GetHCLKFreq+0x10>)
 8006246:	681b      	ldr	r3, [r3, #0]
}
 8006248:	4618      	mov	r0, r3
 800624a:	46bd      	mov	sp, r7
 800624c:	bc80      	pop	{r7}
 800624e:	4770      	bx	lr
 8006250:	20000030 	.word	0x20000030

08006254 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006258:	f7ff fff2 	bl	8006240 <HAL_RCC_GetHCLKFreq>
 800625c:	4602      	mov	r2, r0
 800625e:	4b05      	ldr	r3, [pc, #20]	@ (8006274 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	0a1b      	lsrs	r3, r3, #8
 8006264:	f003 0307 	and.w	r3, r3, #7
 8006268:	4903      	ldr	r1, [pc, #12]	@ (8006278 <HAL_RCC_GetPCLK1Freq+0x24>)
 800626a:	5ccb      	ldrb	r3, [r1, r3]
 800626c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006270:	4618      	mov	r0, r3
 8006272:	bd80      	pop	{r7, pc}
 8006274:	40021000 	.word	0x40021000
 8006278:	0800a480 	.word	0x0800a480

0800627c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006280:	f7ff ffde 	bl	8006240 <HAL_RCC_GetHCLKFreq>
 8006284:	4602      	mov	r2, r0
 8006286:	4b05      	ldr	r3, [pc, #20]	@ (800629c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	0adb      	lsrs	r3, r3, #11
 800628c:	f003 0307 	and.w	r3, r3, #7
 8006290:	4903      	ldr	r1, [pc, #12]	@ (80062a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006292:	5ccb      	ldrb	r3, [r1, r3]
 8006294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006298:	4618      	mov	r0, r3
 800629a:	bd80      	pop	{r7, pc}
 800629c:	40021000 	.word	0x40021000
 80062a0:	0800a480 	.word	0x0800a480

080062a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b085      	sub	sp, #20
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80062ac:	4b0a      	ldr	r3, [pc, #40]	@ (80062d8 <RCC_Delay+0x34>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a0a      	ldr	r2, [pc, #40]	@ (80062dc <RCC_Delay+0x38>)
 80062b2:	fba2 2303 	umull	r2, r3, r2, r3
 80062b6:	0a5b      	lsrs	r3, r3, #9
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	fb02 f303 	mul.w	r3, r2, r3
 80062be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80062c0:	bf00      	nop
  }
  while (Delay --);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	1e5a      	subs	r2, r3, #1
 80062c6:	60fa      	str	r2, [r7, #12]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d1f9      	bne.n	80062c0 <RCC_Delay+0x1c>
}
 80062cc:	bf00      	nop
 80062ce:	bf00      	nop
 80062d0:	3714      	adds	r7, #20
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bc80      	pop	{r7}
 80062d6:	4770      	bx	lr
 80062d8:	20000030 	.word	0x20000030
 80062dc:	10624dd3 	.word	0x10624dd3

080062e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b086      	sub	sp, #24
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80062e8:	2300      	movs	r3, #0
 80062ea:	613b      	str	r3, [r7, #16]
 80062ec:	2300      	movs	r3, #0
 80062ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 0301 	and.w	r3, r3, #1
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d07d      	beq.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80062fc:	2300      	movs	r3, #0
 80062fe:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006300:	4b4f      	ldr	r3, [pc, #316]	@ (8006440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006302:	69db      	ldr	r3, [r3, #28]
 8006304:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006308:	2b00      	cmp	r3, #0
 800630a:	d10d      	bne.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800630c:	4b4c      	ldr	r3, [pc, #304]	@ (8006440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800630e:	69db      	ldr	r3, [r3, #28]
 8006310:	4a4b      	ldr	r2, [pc, #300]	@ (8006440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006312:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006316:	61d3      	str	r3, [r2, #28]
 8006318:	4b49      	ldr	r3, [pc, #292]	@ (8006440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800631a:	69db      	ldr	r3, [r3, #28]
 800631c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006320:	60bb      	str	r3, [r7, #8]
 8006322:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006324:	2301      	movs	r3, #1
 8006326:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006328:	4b46      	ldr	r3, [pc, #280]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006330:	2b00      	cmp	r3, #0
 8006332:	d118      	bne.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006334:	4b43      	ldr	r3, [pc, #268]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a42      	ldr	r2, [pc, #264]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800633a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800633e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006340:	f7fd f9de 	bl	8003700 <HAL_GetTick>
 8006344:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006346:	e008      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006348:	f7fd f9da 	bl	8003700 <HAL_GetTick>
 800634c:	4602      	mov	r2, r0
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	2b64      	cmp	r3, #100	@ 0x64
 8006354:	d901      	bls.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006356:	2303      	movs	r3, #3
 8006358:	e06d      	b.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800635a:	4b3a      	ldr	r3, [pc, #232]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006362:	2b00      	cmp	r3, #0
 8006364:	d0f0      	beq.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006366:	4b36      	ldr	r3, [pc, #216]	@ (8006440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006368:	6a1b      	ldr	r3, [r3, #32]
 800636a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800636e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d02e      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	429a      	cmp	r2, r3
 8006382:	d027      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006384:	4b2e      	ldr	r3, [pc, #184]	@ (8006440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006386:	6a1b      	ldr	r3, [r3, #32]
 8006388:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800638c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800638e:	4b2e      	ldr	r3, [pc, #184]	@ (8006448 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006390:	2201      	movs	r2, #1
 8006392:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006394:	4b2c      	ldr	r3, [pc, #176]	@ (8006448 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006396:	2200      	movs	r2, #0
 8006398:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800639a:	4a29      	ldr	r2, [pc, #164]	@ (8006440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f003 0301 	and.w	r3, r3, #1
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d014      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063aa:	f7fd f9a9 	bl	8003700 <HAL_GetTick>
 80063ae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063b0:	e00a      	b.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063b2:	f7fd f9a5 	bl	8003700 <HAL_GetTick>
 80063b6:	4602      	mov	r2, r0
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	1ad3      	subs	r3, r2, r3
 80063bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d901      	bls.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80063c4:	2303      	movs	r3, #3
 80063c6:	e036      	b.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063c8:	4b1d      	ldr	r3, [pc, #116]	@ (8006440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063ca:	6a1b      	ldr	r3, [r3, #32]
 80063cc:	f003 0302 	and.w	r3, r3, #2
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d0ee      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063d4:	4b1a      	ldr	r3, [pc, #104]	@ (8006440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063d6:	6a1b      	ldr	r3, [r3, #32]
 80063d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	4917      	ldr	r1, [pc, #92]	@ (8006440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80063e6:	7dfb      	ldrb	r3, [r7, #23]
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d105      	bne.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063ec:	4b14      	ldr	r3, [pc, #80]	@ (8006440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063ee:	69db      	ldr	r3, [r3, #28]
 80063f0:	4a13      	ldr	r2, [pc, #76]	@ (8006440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80063f6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0302 	and.w	r3, r3, #2
 8006400:	2b00      	cmp	r3, #0
 8006402:	d008      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006404:	4b0e      	ldr	r3, [pc, #56]	@ (8006440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	490b      	ldr	r1, [pc, #44]	@ (8006440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006412:	4313      	orrs	r3, r2
 8006414:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 0310 	and.w	r3, r3, #16
 800641e:	2b00      	cmp	r3, #0
 8006420:	d008      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006422:	4b07      	ldr	r3, [pc, #28]	@ (8006440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	4904      	ldr	r1, [pc, #16]	@ (8006440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006430:	4313      	orrs	r3, r2
 8006432:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3718      	adds	r7, #24
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	40021000 	.word	0x40021000
 8006444:	40007000 	.word	0x40007000
 8006448:	42420440 	.word	0x42420440

0800644c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b082      	sub	sp, #8
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d101      	bne.n	800645e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e041      	b.n	80064e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006464:	b2db      	uxtb	r3, r3
 8006466:	2b00      	cmp	r3, #0
 8006468:	d106      	bne.n	8006478 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f7fc fef6 	bl	8003264 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2202      	movs	r2, #2
 800647c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	3304      	adds	r3, #4
 8006488:	4619      	mov	r1, r3
 800648a:	4610      	mov	r0, r2
 800648c:	f000 fdd4 	bl	8007038 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3708      	adds	r7, #8
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}

080064ea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b082      	sub	sp, #8
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d101      	bne.n	80064fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e041      	b.n	8006580 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006502:	b2db      	uxtb	r3, r3
 8006504:	2b00      	cmp	r3, #0
 8006506:	d106      	bne.n	8006516 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 f839 	bl	8006588 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2202      	movs	r2, #2
 800651a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	3304      	adds	r3, #4
 8006526:	4619      	mov	r1, r3
 8006528:	4610      	mov	r0, r2
 800652a:	f000 fd85 	bl	8007038 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2201      	movs	r2, #1
 8006532:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2201      	movs	r2, #1
 800653a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2201      	movs	r2, #1
 8006542:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2201      	movs	r2, #1
 800654a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2201      	movs	r2, #1
 8006552:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2201      	movs	r2, #1
 800655a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2201      	movs	r2, #1
 8006562:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2201      	movs	r2, #1
 800656a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2201      	movs	r2, #1
 8006572:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2201      	movs	r2, #1
 800657a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800657e:	2300      	movs	r3, #0
}
 8006580:	4618      	mov	r0, r3
 8006582:	3708      	adds	r7, #8
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006590:	bf00      	nop
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	bc80      	pop	{r7}
 8006598:	4770      	bx	lr
	...

0800659c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d109      	bne.n	80065c0 <HAL_TIM_PWM_Start+0x24>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	bf14      	ite	ne
 80065b8:	2301      	movne	r3, #1
 80065ba:	2300      	moveq	r3, #0
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	e022      	b.n	8006606 <HAL_TIM_PWM_Start+0x6a>
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	2b04      	cmp	r3, #4
 80065c4:	d109      	bne.n	80065da <HAL_TIM_PWM_Start+0x3e>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	bf14      	ite	ne
 80065d2:	2301      	movne	r3, #1
 80065d4:	2300      	moveq	r3, #0
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	e015      	b.n	8006606 <HAL_TIM_PWM_Start+0x6a>
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	2b08      	cmp	r3, #8
 80065de:	d109      	bne.n	80065f4 <HAL_TIM_PWM_Start+0x58>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	bf14      	ite	ne
 80065ec:	2301      	movne	r3, #1
 80065ee:	2300      	moveq	r3, #0
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	e008      	b.n	8006606 <HAL_TIM_PWM_Start+0x6a>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	bf14      	ite	ne
 8006600:	2301      	movne	r3, #1
 8006602:	2300      	moveq	r3, #0
 8006604:	b2db      	uxtb	r3, r3
 8006606:	2b00      	cmp	r3, #0
 8006608:	d001      	beq.n	800660e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e05e      	b.n	80066cc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d104      	bne.n	800661e <HAL_TIM_PWM_Start+0x82>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2202      	movs	r2, #2
 8006618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800661c:	e013      	b.n	8006646 <HAL_TIM_PWM_Start+0xaa>
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	2b04      	cmp	r3, #4
 8006622:	d104      	bne.n	800662e <HAL_TIM_PWM_Start+0x92>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2202      	movs	r2, #2
 8006628:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800662c:	e00b      	b.n	8006646 <HAL_TIM_PWM_Start+0xaa>
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	2b08      	cmp	r3, #8
 8006632:	d104      	bne.n	800663e <HAL_TIM_PWM_Start+0xa2>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2202      	movs	r2, #2
 8006638:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800663c:	e003      	b.n	8006646 <HAL_TIM_PWM_Start+0xaa>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2202      	movs	r2, #2
 8006642:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2201      	movs	r2, #1
 800664c:	6839      	ldr	r1, [r7, #0]
 800664e:	4618      	mov	r0, r3
 8006650:	f000 ff7e 	bl	8007550 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a1e      	ldr	r2, [pc, #120]	@ (80066d4 <HAL_TIM_PWM_Start+0x138>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d107      	bne.n	800666e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800666c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a18      	ldr	r2, [pc, #96]	@ (80066d4 <HAL_TIM_PWM_Start+0x138>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d00e      	beq.n	8006696 <HAL_TIM_PWM_Start+0xfa>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006680:	d009      	beq.n	8006696 <HAL_TIM_PWM_Start+0xfa>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a14      	ldr	r2, [pc, #80]	@ (80066d8 <HAL_TIM_PWM_Start+0x13c>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d004      	beq.n	8006696 <HAL_TIM_PWM_Start+0xfa>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a12      	ldr	r2, [pc, #72]	@ (80066dc <HAL_TIM_PWM_Start+0x140>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d111      	bne.n	80066ba <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	f003 0307 	and.w	r3, r3, #7
 80066a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2b06      	cmp	r3, #6
 80066a6:	d010      	beq.n	80066ca <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f042 0201 	orr.w	r2, r2, #1
 80066b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066b8:	e007      	b.n	80066ca <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f042 0201 	orr.w	r2, r2, #1
 80066c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066ca:	2300      	movs	r3, #0
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3710      	adds	r7, #16
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	40012c00 	.word	0x40012c00
 80066d8:	40000400 	.word	0x40000400
 80066dc:	40000800 	.word	0x40000800

080066e0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2200      	movs	r2, #0
 80066f0:	6839      	ldr	r1, [r7, #0]
 80066f2:	4618      	mov	r0, r3
 80066f4:	f000 ff2c 	bl	8007550 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a29      	ldr	r2, [pc, #164]	@ (80067a4 <HAL_TIM_PWM_Stop+0xc4>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d117      	bne.n	8006732 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	6a1a      	ldr	r2, [r3, #32]
 8006708:	f241 1311 	movw	r3, #4369	@ 0x1111
 800670c:	4013      	ands	r3, r2
 800670e:	2b00      	cmp	r3, #0
 8006710:	d10f      	bne.n	8006732 <HAL_TIM_PWM_Stop+0x52>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	6a1a      	ldr	r2, [r3, #32]
 8006718:	f240 4344 	movw	r3, #1092	@ 0x444
 800671c:	4013      	ands	r3, r2
 800671e:	2b00      	cmp	r3, #0
 8006720:	d107      	bne.n	8006732 <HAL_TIM_PWM_Stop+0x52>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006730:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	6a1a      	ldr	r2, [r3, #32]
 8006738:	f241 1311 	movw	r3, #4369	@ 0x1111
 800673c:	4013      	ands	r3, r2
 800673e:	2b00      	cmp	r3, #0
 8006740:	d10f      	bne.n	8006762 <HAL_TIM_PWM_Stop+0x82>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	6a1a      	ldr	r2, [r3, #32]
 8006748:	f240 4344 	movw	r3, #1092	@ 0x444
 800674c:	4013      	ands	r3, r2
 800674e:	2b00      	cmp	r3, #0
 8006750:	d107      	bne.n	8006762 <HAL_TIM_PWM_Stop+0x82>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f022 0201 	bic.w	r2, r2, #1
 8006760:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d104      	bne.n	8006772 <HAL_TIM_PWM_Stop+0x92>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006770:	e013      	b.n	800679a <HAL_TIM_PWM_Stop+0xba>
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	2b04      	cmp	r3, #4
 8006776:	d104      	bne.n	8006782 <HAL_TIM_PWM_Stop+0xa2>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006780:	e00b      	b.n	800679a <HAL_TIM_PWM_Stop+0xba>
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	2b08      	cmp	r3, #8
 8006786:	d104      	bne.n	8006792 <HAL_TIM_PWM_Stop+0xb2>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006790:	e003      	b.n	800679a <HAL_TIM_PWM_Stop+0xba>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2201      	movs	r2, #1
 8006796:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	3708      	adds	r7, #8
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	40012c00 	.word	0x40012c00

080067a8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067b2:	2300      	movs	r3, #0
 80067b4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d109      	bne.n	80067d0 <HAL_TIM_PWM_Start_IT+0x28>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	bf14      	ite	ne
 80067c8:	2301      	movne	r3, #1
 80067ca:	2300      	moveq	r3, #0
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	e022      	b.n	8006816 <HAL_TIM_PWM_Start_IT+0x6e>
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	2b04      	cmp	r3, #4
 80067d4:	d109      	bne.n	80067ea <HAL_TIM_PWM_Start_IT+0x42>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	2b01      	cmp	r3, #1
 80067e0:	bf14      	ite	ne
 80067e2:	2301      	movne	r3, #1
 80067e4:	2300      	moveq	r3, #0
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	e015      	b.n	8006816 <HAL_TIM_PWM_Start_IT+0x6e>
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	2b08      	cmp	r3, #8
 80067ee:	d109      	bne.n	8006804 <HAL_TIM_PWM_Start_IT+0x5c>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	bf14      	ite	ne
 80067fc:	2301      	movne	r3, #1
 80067fe:	2300      	moveq	r3, #0
 8006800:	b2db      	uxtb	r3, r3
 8006802:	e008      	b.n	8006816 <HAL_TIM_PWM_Start_IT+0x6e>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800680a:	b2db      	uxtb	r3, r3
 800680c:	2b01      	cmp	r3, #1
 800680e:	bf14      	ite	ne
 8006810:	2301      	movne	r3, #1
 8006812:	2300      	moveq	r3, #0
 8006814:	b2db      	uxtb	r3, r3
 8006816:	2b00      	cmp	r3, #0
 8006818:	d001      	beq.n	800681e <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e0a9      	b.n	8006972 <HAL_TIM_PWM_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d104      	bne.n	800682e <HAL_TIM_PWM_Start_IT+0x86>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2202      	movs	r2, #2
 8006828:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800682c:	e013      	b.n	8006856 <HAL_TIM_PWM_Start_IT+0xae>
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	2b04      	cmp	r3, #4
 8006832:	d104      	bne.n	800683e <HAL_TIM_PWM_Start_IT+0x96>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2202      	movs	r2, #2
 8006838:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800683c:	e00b      	b.n	8006856 <HAL_TIM_PWM_Start_IT+0xae>
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	2b08      	cmp	r3, #8
 8006842:	d104      	bne.n	800684e <HAL_TIM_PWM_Start_IT+0xa6>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2202      	movs	r2, #2
 8006848:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800684c:	e003      	b.n	8006856 <HAL_TIM_PWM_Start_IT+0xae>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2202      	movs	r2, #2
 8006852:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	2b0c      	cmp	r3, #12
 800685a:	d841      	bhi.n	80068e0 <HAL_TIM_PWM_Start_IT+0x138>
 800685c:	a201      	add	r2, pc, #4	@ (adr r2, 8006864 <HAL_TIM_PWM_Start_IT+0xbc>)
 800685e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006862:	bf00      	nop
 8006864:	08006899 	.word	0x08006899
 8006868:	080068e1 	.word	0x080068e1
 800686c:	080068e1 	.word	0x080068e1
 8006870:	080068e1 	.word	0x080068e1
 8006874:	080068ab 	.word	0x080068ab
 8006878:	080068e1 	.word	0x080068e1
 800687c:	080068e1 	.word	0x080068e1
 8006880:	080068e1 	.word	0x080068e1
 8006884:	080068bd 	.word	0x080068bd
 8006888:	080068e1 	.word	0x080068e1
 800688c:	080068e1 	.word	0x080068e1
 8006890:	080068e1 	.word	0x080068e1
 8006894:	080068cf 	.word	0x080068cf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68da      	ldr	r2, [r3, #12]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f042 0202 	orr.w	r2, r2, #2
 80068a6:	60da      	str	r2, [r3, #12]
      break;
 80068a8:	e01d      	b.n	80068e6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	68da      	ldr	r2, [r3, #12]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f042 0204 	orr.w	r2, r2, #4
 80068b8:	60da      	str	r2, [r3, #12]
      break;
 80068ba:	e014      	b.n	80068e6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	68da      	ldr	r2, [r3, #12]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f042 0208 	orr.w	r2, r2, #8
 80068ca:	60da      	str	r2, [r3, #12]
      break;
 80068cc:	e00b      	b.n	80068e6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68da      	ldr	r2, [r3, #12]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f042 0210 	orr.w	r2, r2, #16
 80068dc:	60da      	str	r2, [r3, #12]
      break;
 80068de:	e002      	b.n	80068e6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	73fb      	strb	r3, [r7, #15]
      break;
 80068e4:	bf00      	nop
  }

  if (status == HAL_OK)
 80068e6:	7bfb      	ldrb	r3, [r7, #15]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d141      	bne.n	8006970 <HAL_TIM_PWM_Start_IT+0x1c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2201      	movs	r2, #1
 80068f2:	6839      	ldr	r1, [r7, #0]
 80068f4:	4618      	mov	r0, r3
 80068f6:	f000 fe2b 	bl	8007550 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a1f      	ldr	r2, [pc, #124]	@ (800697c <HAL_TIM_PWM_Start_IT+0x1d4>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d107      	bne.n	8006914 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006912:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a18      	ldr	r2, [pc, #96]	@ (800697c <HAL_TIM_PWM_Start_IT+0x1d4>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d00e      	beq.n	800693c <HAL_TIM_PWM_Start_IT+0x194>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006926:	d009      	beq.n	800693c <HAL_TIM_PWM_Start_IT+0x194>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a14      	ldr	r2, [pc, #80]	@ (8006980 <HAL_TIM_PWM_Start_IT+0x1d8>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d004      	beq.n	800693c <HAL_TIM_PWM_Start_IT+0x194>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a13      	ldr	r2, [pc, #76]	@ (8006984 <HAL_TIM_PWM_Start_IT+0x1dc>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d111      	bne.n	8006960 <HAL_TIM_PWM_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	f003 0307 	and.w	r3, r3, #7
 8006946:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	2b06      	cmp	r3, #6
 800694c:	d010      	beq.n	8006970 <HAL_TIM_PWM_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f042 0201 	orr.w	r2, r2, #1
 800695c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800695e:	e007      	b.n	8006970 <HAL_TIM_PWM_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f042 0201 	orr.w	r2, r2, #1
 800696e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006970:	7bfb      	ldrb	r3, [r7, #15]
}
 8006972:	4618      	mov	r0, r3
 8006974:	3710      	adds	r7, #16
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	40012c00 	.word	0x40012c00
 8006980:	40000400 	.word	0x40000400
 8006984:	40000800 	.word	0x40000800

08006988 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006992:	2300      	movs	r3, #0
 8006994:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	2b0c      	cmp	r3, #12
 800699a:	d841      	bhi.n	8006a20 <HAL_TIM_PWM_Stop_IT+0x98>
 800699c:	a201      	add	r2, pc, #4	@ (adr r2, 80069a4 <HAL_TIM_PWM_Stop_IT+0x1c>)
 800699e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a2:	bf00      	nop
 80069a4:	080069d9 	.word	0x080069d9
 80069a8:	08006a21 	.word	0x08006a21
 80069ac:	08006a21 	.word	0x08006a21
 80069b0:	08006a21 	.word	0x08006a21
 80069b4:	080069eb 	.word	0x080069eb
 80069b8:	08006a21 	.word	0x08006a21
 80069bc:	08006a21 	.word	0x08006a21
 80069c0:	08006a21 	.word	0x08006a21
 80069c4:	080069fd 	.word	0x080069fd
 80069c8:	08006a21 	.word	0x08006a21
 80069cc:	08006a21 	.word	0x08006a21
 80069d0:	08006a21 	.word	0x08006a21
 80069d4:	08006a0f 	.word	0x08006a0f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68da      	ldr	r2, [r3, #12]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f022 0202 	bic.w	r2, r2, #2
 80069e6:	60da      	str	r2, [r3, #12]
      break;
 80069e8:	e01d      	b.n	8006a26 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	68da      	ldr	r2, [r3, #12]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f022 0204 	bic.w	r2, r2, #4
 80069f8:	60da      	str	r2, [r3, #12]
      break;
 80069fa:	e014      	b.n	8006a26 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	68da      	ldr	r2, [r3, #12]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f022 0208 	bic.w	r2, r2, #8
 8006a0a:	60da      	str	r2, [r3, #12]
      break;
 8006a0c:	e00b      	b.n	8006a26 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	68da      	ldr	r2, [r3, #12]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f022 0210 	bic.w	r2, r2, #16
 8006a1c:	60da      	str	r2, [r3, #12]
      break;
 8006a1e:	e002      	b.n	8006a26 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	73fb      	strb	r3, [r7, #15]
      break;
 8006a24:	bf00      	nop
  }

  if (status == HAL_OK)
 8006a26:	7bfb      	ldrb	r3, [r7, #15]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d157      	bne.n	8006adc <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2200      	movs	r2, #0
 8006a32:	6839      	ldr	r1, [r7, #0]
 8006a34:	4618      	mov	r0, r3
 8006a36:	f000 fd8b 	bl	8007550 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a2a      	ldr	r2, [pc, #168]	@ (8006ae8 <HAL_TIM_PWM_Stop_IT+0x160>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d117      	bne.n	8006a74 <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	6a1a      	ldr	r2, [r3, #32]
 8006a4a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006a4e:	4013      	ands	r3, r2
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d10f      	bne.n	8006a74 <HAL_TIM_PWM_Stop_IT+0xec>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	6a1a      	ldr	r2, [r3, #32]
 8006a5a:	f240 4344 	movw	r3, #1092	@ 0x444
 8006a5e:	4013      	ands	r3, r2
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d107      	bne.n	8006a74 <HAL_TIM_PWM_Stop_IT+0xec>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006a72:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	6a1a      	ldr	r2, [r3, #32]
 8006a7a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006a7e:	4013      	ands	r3, r2
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d10f      	bne.n	8006aa4 <HAL_TIM_PWM_Stop_IT+0x11c>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	6a1a      	ldr	r2, [r3, #32]
 8006a8a:	f240 4344 	movw	r3, #1092	@ 0x444
 8006a8e:	4013      	ands	r3, r2
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d107      	bne.n	8006aa4 <HAL_TIM_PWM_Stop_IT+0x11c>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f022 0201 	bic.w	r2, r2, #1
 8006aa2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d104      	bne.n	8006ab4 <HAL_TIM_PWM_Stop_IT+0x12c>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2201      	movs	r2, #1
 8006aae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ab2:	e013      	b.n	8006adc <HAL_TIM_PWM_Stop_IT+0x154>
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	2b04      	cmp	r3, #4
 8006ab8:	d104      	bne.n	8006ac4 <HAL_TIM_PWM_Stop_IT+0x13c>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2201      	movs	r2, #1
 8006abe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ac2:	e00b      	b.n	8006adc <HAL_TIM_PWM_Stop_IT+0x154>
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	2b08      	cmp	r3, #8
 8006ac8:	d104      	bne.n	8006ad4 <HAL_TIM_PWM_Stop_IT+0x14c>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2201      	movs	r2, #1
 8006ace:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ad2:	e003      	b.n	8006adc <HAL_TIM_PWM_Stop_IT+0x154>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8006adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3710      	adds	r7, #16
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	40012c00 	.word	0x40012c00

08006aec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	f003 0302 	and.w	r3, r3, #2
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d020      	beq.n	8006b50 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f003 0302 	and.w	r3, r3, #2
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d01b      	beq.n	8006b50 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f06f 0202 	mvn.w	r2, #2
 8006b20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2201      	movs	r2, #1
 8006b26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	699b      	ldr	r3, [r3, #24]
 8006b2e:	f003 0303 	and.w	r3, r3, #3
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d003      	beq.n	8006b3e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 fa63 	bl	8007002 <HAL_TIM_IC_CaptureCallback>
 8006b3c:	e005      	b.n	8006b4a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 fa56 	bl	8006ff0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 fa65 	bl	8007014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	f003 0304 	and.w	r3, r3, #4
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d020      	beq.n	8006b9c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f003 0304 	and.w	r3, r3, #4
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d01b      	beq.n	8006b9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f06f 0204 	mvn.w	r2, #4
 8006b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2202      	movs	r2, #2
 8006b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	699b      	ldr	r3, [r3, #24]
 8006b7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d003      	beq.n	8006b8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 fa3d 	bl	8007002 <HAL_TIM_IC_CaptureCallback>
 8006b88:	e005      	b.n	8006b96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 fa30 	bl	8006ff0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 fa3f 	bl	8007014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	f003 0308 	and.w	r3, r3, #8
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d020      	beq.n	8006be8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f003 0308 	and.w	r3, r3, #8
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d01b      	beq.n	8006be8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f06f 0208 	mvn.w	r2, #8
 8006bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2204      	movs	r2, #4
 8006bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	69db      	ldr	r3, [r3, #28]
 8006bc6:	f003 0303 	and.w	r3, r3, #3
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d003      	beq.n	8006bd6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 fa17 	bl	8007002 <HAL_TIM_IC_CaptureCallback>
 8006bd4:	e005      	b.n	8006be2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 fa0a 	bl	8006ff0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 fa19 	bl	8007014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	f003 0310 	and.w	r3, r3, #16
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d020      	beq.n	8006c34 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f003 0310 	and.w	r3, r3, #16
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d01b      	beq.n	8006c34 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f06f 0210 	mvn.w	r2, #16
 8006c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2208      	movs	r2, #8
 8006c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	69db      	ldr	r3, [r3, #28]
 8006c12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d003      	beq.n	8006c22 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 f9f1 	bl	8007002 <HAL_TIM_IC_CaptureCallback>
 8006c20:	e005      	b.n	8006c2e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 f9e4 	bl	8006ff0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 f9f3 	bl	8007014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	f003 0301 	and.w	r3, r3, #1
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d00c      	beq.n	8006c58 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f003 0301 	and.w	r3, r3, #1
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d007      	beq.n	8006c58 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f06f 0201 	mvn.w	r2, #1
 8006c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 f9c3 	bl	8006fde <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d00c      	beq.n	8006c7c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d007      	beq.n	8006c7c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 fcf5 	bl	8007666 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00c      	beq.n	8006ca0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d007      	beq.n	8006ca0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 f9c3 	bl	8007026 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	f003 0320 	and.w	r3, r3, #32
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00c      	beq.n	8006cc4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f003 0320 	and.w	r3, r3, #32
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d007      	beq.n	8006cc4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f06f 0220 	mvn.w	r2, #32
 8006cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 fcc8 	bl	8007654 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006cc4:	bf00      	nop
 8006cc6:	3710      	adds	r7, #16
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b086      	sub	sp, #24
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d101      	bne.n	8006cea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006ce6:	2302      	movs	r3, #2
 8006ce8:	e0ae      	b.n	8006e48 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2201      	movs	r2, #1
 8006cee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2b0c      	cmp	r3, #12
 8006cf6:	f200 809f 	bhi.w	8006e38 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006cfa:	a201      	add	r2, pc, #4	@ (adr r2, 8006d00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d00:	08006d35 	.word	0x08006d35
 8006d04:	08006e39 	.word	0x08006e39
 8006d08:	08006e39 	.word	0x08006e39
 8006d0c:	08006e39 	.word	0x08006e39
 8006d10:	08006d75 	.word	0x08006d75
 8006d14:	08006e39 	.word	0x08006e39
 8006d18:	08006e39 	.word	0x08006e39
 8006d1c:	08006e39 	.word	0x08006e39
 8006d20:	08006db7 	.word	0x08006db7
 8006d24:	08006e39 	.word	0x08006e39
 8006d28:	08006e39 	.word	0x08006e39
 8006d2c:	08006e39 	.word	0x08006e39
 8006d30:	08006df7 	.word	0x08006df7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68b9      	ldr	r1, [r7, #8]
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f000 f9ea 	bl	8007114 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	699a      	ldr	r2, [r3, #24]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f042 0208 	orr.w	r2, r2, #8
 8006d4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	699a      	ldr	r2, [r3, #24]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f022 0204 	bic.w	r2, r2, #4
 8006d5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	6999      	ldr	r1, [r3, #24]
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	691a      	ldr	r2, [r3, #16]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	430a      	orrs	r2, r1
 8006d70:	619a      	str	r2, [r3, #24]
      break;
 8006d72:	e064      	b.n	8006e3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	68b9      	ldr	r1, [r7, #8]
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f000 fa30 	bl	80071e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	699a      	ldr	r2, [r3, #24]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	699a      	ldr	r2, [r3, #24]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	6999      	ldr	r1, [r3, #24]
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	021a      	lsls	r2, r3, #8
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	430a      	orrs	r2, r1
 8006db2:	619a      	str	r2, [r3, #24]
      break;
 8006db4:	e043      	b.n	8006e3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68b9      	ldr	r1, [r7, #8]
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f000 fa79 	bl	80072b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	69da      	ldr	r2, [r3, #28]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f042 0208 	orr.w	r2, r2, #8
 8006dd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	69da      	ldr	r2, [r3, #28]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f022 0204 	bic.w	r2, r2, #4
 8006de0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	69d9      	ldr	r1, [r3, #28]
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	691a      	ldr	r2, [r3, #16]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	430a      	orrs	r2, r1
 8006df2:	61da      	str	r2, [r3, #28]
      break;
 8006df4:	e023      	b.n	8006e3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68b9      	ldr	r1, [r7, #8]
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f000 fac3 	bl	8007388 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	69da      	ldr	r2, [r3, #28]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	69da      	ldr	r2, [r3, #28]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	69d9      	ldr	r1, [r3, #28]
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	021a      	lsls	r2, r3, #8
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	430a      	orrs	r2, r1
 8006e34:	61da      	str	r2, [r3, #28]
      break;
 8006e36:	e002      	b.n	8006e3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	75fb      	strb	r3, [r7, #23]
      break;
 8006e3c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006e46:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3718      	adds	r7, #24
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d101      	bne.n	8006e6c <HAL_TIM_ConfigClockSource+0x1c>
 8006e68:	2302      	movs	r3, #2
 8006e6a:	e0b4      	b.n	8006fd6 <HAL_TIM_ConfigClockSource+0x186>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2202      	movs	r2, #2
 8006e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006e8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006e92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	68ba      	ldr	r2, [r7, #8]
 8006e9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ea4:	d03e      	beq.n	8006f24 <HAL_TIM_ConfigClockSource+0xd4>
 8006ea6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006eaa:	f200 8087 	bhi.w	8006fbc <HAL_TIM_ConfigClockSource+0x16c>
 8006eae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006eb2:	f000 8086 	beq.w	8006fc2 <HAL_TIM_ConfigClockSource+0x172>
 8006eb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006eba:	d87f      	bhi.n	8006fbc <HAL_TIM_ConfigClockSource+0x16c>
 8006ebc:	2b70      	cmp	r3, #112	@ 0x70
 8006ebe:	d01a      	beq.n	8006ef6 <HAL_TIM_ConfigClockSource+0xa6>
 8006ec0:	2b70      	cmp	r3, #112	@ 0x70
 8006ec2:	d87b      	bhi.n	8006fbc <HAL_TIM_ConfigClockSource+0x16c>
 8006ec4:	2b60      	cmp	r3, #96	@ 0x60
 8006ec6:	d050      	beq.n	8006f6a <HAL_TIM_ConfigClockSource+0x11a>
 8006ec8:	2b60      	cmp	r3, #96	@ 0x60
 8006eca:	d877      	bhi.n	8006fbc <HAL_TIM_ConfigClockSource+0x16c>
 8006ecc:	2b50      	cmp	r3, #80	@ 0x50
 8006ece:	d03c      	beq.n	8006f4a <HAL_TIM_ConfigClockSource+0xfa>
 8006ed0:	2b50      	cmp	r3, #80	@ 0x50
 8006ed2:	d873      	bhi.n	8006fbc <HAL_TIM_ConfigClockSource+0x16c>
 8006ed4:	2b40      	cmp	r3, #64	@ 0x40
 8006ed6:	d058      	beq.n	8006f8a <HAL_TIM_ConfigClockSource+0x13a>
 8006ed8:	2b40      	cmp	r3, #64	@ 0x40
 8006eda:	d86f      	bhi.n	8006fbc <HAL_TIM_ConfigClockSource+0x16c>
 8006edc:	2b30      	cmp	r3, #48	@ 0x30
 8006ede:	d064      	beq.n	8006faa <HAL_TIM_ConfigClockSource+0x15a>
 8006ee0:	2b30      	cmp	r3, #48	@ 0x30
 8006ee2:	d86b      	bhi.n	8006fbc <HAL_TIM_ConfigClockSource+0x16c>
 8006ee4:	2b20      	cmp	r3, #32
 8006ee6:	d060      	beq.n	8006faa <HAL_TIM_ConfigClockSource+0x15a>
 8006ee8:	2b20      	cmp	r3, #32
 8006eea:	d867      	bhi.n	8006fbc <HAL_TIM_ConfigClockSource+0x16c>
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d05c      	beq.n	8006faa <HAL_TIM_ConfigClockSource+0x15a>
 8006ef0:	2b10      	cmp	r3, #16
 8006ef2:	d05a      	beq.n	8006faa <HAL_TIM_ConfigClockSource+0x15a>
 8006ef4:	e062      	b.n	8006fbc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f06:	f000 fb04 	bl	8007512 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006f18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68ba      	ldr	r2, [r7, #8]
 8006f20:	609a      	str	r2, [r3, #8]
      break;
 8006f22:	e04f      	b.n	8006fc4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f34:	f000 faed 	bl	8007512 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	689a      	ldr	r2, [r3, #8]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006f46:	609a      	str	r2, [r3, #8]
      break;
 8006f48:	e03c      	b.n	8006fc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f56:	461a      	mov	r2, r3
 8006f58:	f000 fa64 	bl	8007424 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2150      	movs	r1, #80	@ 0x50
 8006f62:	4618      	mov	r0, r3
 8006f64:	f000 fabb 	bl	80074de <TIM_ITRx_SetConfig>
      break;
 8006f68:	e02c      	b.n	8006fc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f76:	461a      	mov	r2, r3
 8006f78:	f000 fa82 	bl	8007480 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2160      	movs	r1, #96	@ 0x60
 8006f82:	4618      	mov	r0, r3
 8006f84:	f000 faab 	bl	80074de <TIM_ITRx_SetConfig>
      break;
 8006f88:	e01c      	b.n	8006fc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f96:	461a      	mov	r2, r3
 8006f98:	f000 fa44 	bl	8007424 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2140      	movs	r1, #64	@ 0x40
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f000 fa9b 	bl	80074de <TIM_ITRx_SetConfig>
      break;
 8006fa8:	e00c      	b.n	8006fc4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	4610      	mov	r0, r2
 8006fb6:	f000 fa92 	bl	80074de <TIM_ITRx_SetConfig>
      break;
 8006fba:	e003      	b.n	8006fc4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	73fb      	strb	r3, [r7, #15]
      break;
 8006fc0:	e000      	b.n	8006fc4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006fc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3710      	adds	r7, #16
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}

08006fde <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006fde:	b480      	push	{r7}
 8006fe0:	b083      	sub	sp, #12
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006fe6:	bf00      	nop
 8006fe8:	370c      	adds	r7, #12
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bc80      	pop	{r7}
 8006fee:	4770      	bx	lr

08006ff0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ff8:	bf00      	nop
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bc80      	pop	{r7}
 8007000:	4770      	bx	lr

08007002 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007002:	b480      	push	{r7}
 8007004:	b083      	sub	sp, #12
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800700a:	bf00      	nop
 800700c:	370c      	adds	r7, #12
 800700e:	46bd      	mov	sp, r7
 8007010:	bc80      	pop	{r7}
 8007012:	4770      	bx	lr

08007014 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800701c:	bf00      	nop
 800701e:	370c      	adds	r7, #12
 8007020:	46bd      	mov	sp, r7
 8007022:	bc80      	pop	{r7}
 8007024:	4770      	bx	lr

08007026 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007026:	b480      	push	{r7}
 8007028:	b083      	sub	sp, #12
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800702e:	bf00      	nop
 8007030:	370c      	adds	r7, #12
 8007032:	46bd      	mov	sp, r7
 8007034:	bc80      	pop	{r7}
 8007036:	4770      	bx	lr

08007038 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007038:	b480      	push	{r7}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4a2f      	ldr	r2, [pc, #188]	@ (8007108 <TIM_Base_SetConfig+0xd0>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d00b      	beq.n	8007068 <TIM_Base_SetConfig+0x30>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007056:	d007      	beq.n	8007068 <TIM_Base_SetConfig+0x30>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4a2c      	ldr	r2, [pc, #176]	@ (800710c <TIM_Base_SetConfig+0xd4>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d003      	beq.n	8007068 <TIM_Base_SetConfig+0x30>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4a2b      	ldr	r2, [pc, #172]	@ (8007110 <TIM_Base_SetConfig+0xd8>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d108      	bne.n	800707a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800706e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	4313      	orrs	r3, r2
 8007078:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4a22      	ldr	r2, [pc, #136]	@ (8007108 <TIM_Base_SetConfig+0xd0>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d00b      	beq.n	800709a <TIM_Base_SetConfig+0x62>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007088:	d007      	beq.n	800709a <TIM_Base_SetConfig+0x62>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a1f      	ldr	r2, [pc, #124]	@ (800710c <TIM_Base_SetConfig+0xd4>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d003      	beq.n	800709a <TIM_Base_SetConfig+0x62>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a1e      	ldr	r2, [pc, #120]	@ (8007110 <TIM_Base_SetConfig+0xd8>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d108      	bne.n	80070ac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	68fa      	ldr	r2, [r7, #12]
 80070a8:	4313      	orrs	r3, r2
 80070aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	695b      	ldr	r3, [r3, #20]
 80070b6:	4313      	orrs	r3, r2
 80070b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	68fa      	ldr	r2, [r7, #12]
 80070be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	689a      	ldr	r2, [r3, #8]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	4a0d      	ldr	r2, [pc, #52]	@ (8007108 <TIM_Base_SetConfig+0xd0>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d103      	bne.n	80070e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	691a      	ldr	r2, [r3, #16]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	f003 0301 	and.w	r3, r3, #1
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d005      	beq.n	80070fe <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	f023 0201 	bic.w	r2, r3, #1
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	611a      	str	r2, [r3, #16]
  }
}
 80070fe:	bf00      	nop
 8007100:	3714      	adds	r7, #20
 8007102:	46bd      	mov	sp, r7
 8007104:	bc80      	pop	{r7}
 8007106:	4770      	bx	lr
 8007108:	40012c00 	.word	0x40012c00
 800710c:	40000400 	.word	0x40000400
 8007110:	40000800 	.word	0x40000800

08007114 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007114:	b480      	push	{r7}
 8007116:	b087      	sub	sp, #28
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a1b      	ldr	r3, [r3, #32]
 8007122:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6a1b      	ldr	r3, [r3, #32]
 8007128:	f023 0201 	bic.w	r2, r3, #1
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	699b      	ldr	r3, [r3, #24]
 800713a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f023 0303 	bic.w	r3, r3, #3
 800714a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	4313      	orrs	r3, r2
 8007154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	f023 0302 	bic.w	r3, r3, #2
 800715c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	697a      	ldr	r2, [r7, #20]
 8007164:	4313      	orrs	r3, r2
 8007166:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4a1c      	ldr	r2, [pc, #112]	@ (80071dc <TIM_OC1_SetConfig+0xc8>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d10c      	bne.n	800718a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	f023 0308 	bic.w	r3, r3, #8
 8007176:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	697a      	ldr	r2, [r7, #20]
 800717e:	4313      	orrs	r3, r2
 8007180:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	f023 0304 	bic.w	r3, r3, #4
 8007188:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4a13      	ldr	r2, [pc, #76]	@ (80071dc <TIM_OC1_SetConfig+0xc8>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d111      	bne.n	80071b6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007198:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80071a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	695b      	ldr	r3, [r3, #20]
 80071a6:	693a      	ldr	r2, [r7, #16]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	699b      	ldr	r3, [r3, #24]
 80071b0:	693a      	ldr	r2, [r7, #16]
 80071b2:	4313      	orrs	r3, r2
 80071b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	693a      	ldr	r2, [r7, #16]
 80071ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	685a      	ldr	r2, [r3, #4]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	697a      	ldr	r2, [r7, #20]
 80071ce:	621a      	str	r2, [r3, #32]
}
 80071d0:	bf00      	nop
 80071d2:	371c      	adds	r7, #28
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bc80      	pop	{r7}
 80071d8:	4770      	bx	lr
 80071da:	bf00      	nop
 80071dc:	40012c00 	.word	0x40012c00

080071e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b087      	sub	sp, #28
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a1b      	ldr	r3, [r3, #32]
 80071ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6a1b      	ldr	r3, [r3, #32]
 80071f4:	f023 0210 	bic.w	r2, r3, #16
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	699b      	ldr	r3, [r3, #24]
 8007206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800720e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007216:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	021b      	lsls	r3, r3, #8
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	4313      	orrs	r3, r2
 8007222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	f023 0320 	bic.w	r3, r3, #32
 800722a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	011b      	lsls	r3, r3, #4
 8007232:	697a      	ldr	r2, [r7, #20]
 8007234:	4313      	orrs	r3, r2
 8007236:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a1d      	ldr	r2, [pc, #116]	@ (80072b0 <TIM_OC2_SetConfig+0xd0>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d10d      	bne.n	800725c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007246:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	011b      	lsls	r3, r3, #4
 800724e:	697a      	ldr	r2, [r7, #20]
 8007250:	4313      	orrs	r3, r2
 8007252:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800725a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a14      	ldr	r2, [pc, #80]	@ (80072b0 <TIM_OC2_SetConfig+0xd0>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d113      	bne.n	800728c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800726a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007272:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	695b      	ldr	r3, [r3, #20]
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	693a      	ldr	r2, [r7, #16]
 800727c:	4313      	orrs	r3, r2
 800727e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	699b      	ldr	r3, [r3, #24]
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	693a      	ldr	r2, [r7, #16]
 8007288:	4313      	orrs	r3, r2
 800728a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	693a      	ldr	r2, [r7, #16]
 8007290:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	685a      	ldr	r2, [r3, #4]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	697a      	ldr	r2, [r7, #20]
 80072a4:	621a      	str	r2, [r3, #32]
}
 80072a6:	bf00      	nop
 80072a8:	371c      	adds	r7, #28
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bc80      	pop	{r7}
 80072ae:	4770      	bx	lr
 80072b0:	40012c00 	.word	0x40012c00

080072b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b087      	sub	sp, #28
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a1b      	ldr	r3, [r3, #32]
 80072c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6a1b      	ldr	r3, [r3, #32]
 80072c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	69db      	ldr	r3, [r3, #28]
 80072da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f023 0303 	bic.w	r3, r3, #3
 80072ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	68fa      	ldr	r2, [r7, #12]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80072fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	021b      	lsls	r3, r3, #8
 8007304:	697a      	ldr	r2, [r7, #20]
 8007306:	4313      	orrs	r3, r2
 8007308:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4a1d      	ldr	r2, [pc, #116]	@ (8007384 <TIM_OC3_SetConfig+0xd0>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d10d      	bne.n	800732e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007318:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	021b      	lsls	r3, r3, #8
 8007320:	697a      	ldr	r2, [r7, #20]
 8007322:	4313      	orrs	r3, r2
 8007324:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800732c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4a14      	ldr	r2, [pc, #80]	@ (8007384 <TIM_OC3_SetConfig+0xd0>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d113      	bne.n	800735e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800733c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007344:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	695b      	ldr	r3, [r3, #20]
 800734a:	011b      	lsls	r3, r3, #4
 800734c:	693a      	ldr	r2, [r7, #16]
 800734e:	4313      	orrs	r3, r2
 8007350:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	699b      	ldr	r3, [r3, #24]
 8007356:	011b      	lsls	r3, r3, #4
 8007358:	693a      	ldr	r2, [r7, #16]
 800735a:	4313      	orrs	r3, r2
 800735c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	693a      	ldr	r2, [r7, #16]
 8007362:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	68fa      	ldr	r2, [r7, #12]
 8007368:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	685a      	ldr	r2, [r3, #4]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	697a      	ldr	r2, [r7, #20]
 8007376:	621a      	str	r2, [r3, #32]
}
 8007378:	bf00      	nop
 800737a:	371c      	adds	r7, #28
 800737c:	46bd      	mov	sp, r7
 800737e:	bc80      	pop	{r7}
 8007380:	4770      	bx	lr
 8007382:	bf00      	nop
 8007384:	40012c00 	.word	0x40012c00

08007388 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007388:	b480      	push	{r7}
 800738a:	b087      	sub	sp, #28
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a1b      	ldr	r3, [r3, #32]
 8007396:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6a1b      	ldr	r3, [r3, #32]
 800739c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	69db      	ldr	r3, [r3, #28]
 80073ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80073be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	021b      	lsls	r3, r3, #8
 80073c6:	68fa      	ldr	r2, [r7, #12]
 80073c8:	4313      	orrs	r3, r2
 80073ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80073d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	031b      	lsls	r3, r3, #12
 80073da:	693a      	ldr	r2, [r7, #16]
 80073dc:	4313      	orrs	r3, r2
 80073de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4a0f      	ldr	r2, [pc, #60]	@ (8007420 <TIM_OC4_SetConfig+0x98>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d109      	bne.n	80073fc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80073ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	695b      	ldr	r3, [r3, #20]
 80073f4:	019b      	lsls	r3, r3, #6
 80073f6:	697a      	ldr	r2, [r7, #20]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	697a      	ldr	r2, [r7, #20]
 8007400:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	685a      	ldr	r2, [r3, #4]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	693a      	ldr	r2, [r7, #16]
 8007414:	621a      	str	r2, [r3, #32]
}
 8007416:	bf00      	nop
 8007418:	371c      	adds	r7, #28
 800741a:	46bd      	mov	sp, r7
 800741c:	bc80      	pop	{r7}
 800741e:	4770      	bx	lr
 8007420:	40012c00 	.word	0x40012c00

08007424 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007424:	b480      	push	{r7}
 8007426:	b087      	sub	sp, #28
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6a1b      	ldr	r3, [r3, #32]
 8007434:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	6a1b      	ldr	r3, [r3, #32]
 800743a:	f023 0201 	bic.w	r2, r3, #1
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800744e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	011b      	lsls	r3, r3, #4
 8007454:	693a      	ldr	r2, [r7, #16]
 8007456:	4313      	orrs	r3, r2
 8007458:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	f023 030a 	bic.w	r3, r3, #10
 8007460:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007462:	697a      	ldr	r2, [r7, #20]
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	4313      	orrs	r3, r2
 8007468:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	693a      	ldr	r2, [r7, #16]
 800746e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	697a      	ldr	r2, [r7, #20]
 8007474:	621a      	str	r2, [r3, #32]
}
 8007476:	bf00      	nop
 8007478:	371c      	adds	r7, #28
 800747a:	46bd      	mov	sp, r7
 800747c:	bc80      	pop	{r7}
 800747e:	4770      	bx	lr

08007480 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007480:	b480      	push	{r7}
 8007482:	b087      	sub	sp, #28
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6a1b      	ldr	r3, [r3, #32]
 8007490:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	6a1b      	ldr	r3, [r3, #32]
 8007496:	f023 0210 	bic.w	r2, r3, #16
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	699b      	ldr	r3, [r3, #24]
 80074a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80074aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	031b      	lsls	r3, r3, #12
 80074b0:	693a      	ldr	r2, [r7, #16]
 80074b2:	4313      	orrs	r3, r2
 80074b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80074bc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	011b      	lsls	r3, r3, #4
 80074c2:	697a      	ldr	r2, [r7, #20]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	693a      	ldr	r2, [r7, #16]
 80074cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	697a      	ldr	r2, [r7, #20]
 80074d2:	621a      	str	r2, [r3, #32]
}
 80074d4:	bf00      	nop
 80074d6:	371c      	adds	r7, #28
 80074d8:	46bd      	mov	sp, r7
 80074da:	bc80      	pop	{r7}
 80074dc:	4770      	bx	lr

080074de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80074de:	b480      	push	{r7}
 80074e0:	b085      	sub	sp, #20
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
 80074e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80074f6:	683a      	ldr	r2, [r7, #0]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	f043 0307 	orr.w	r3, r3, #7
 8007500:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	68fa      	ldr	r2, [r7, #12]
 8007506:	609a      	str	r2, [r3, #8]
}
 8007508:	bf00      	nop
 800750a:	3714      	adds	r7, #20
 800750c:	46bd      	mov	sp, r7
 800750e:	bc80      	pop	{r7}
 8007510:	4770      	bx	lr

08007512 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007512:	b480      	push	{r7}
 8007514:	b087      	sub	sp, #28
 8007516:	af00      	add	r7, sp, #0
 8007518:	60f8      	str	r0, [r7, #12]
 800751a:	60b9      	str	r1, [r7, #8]
 800751c:	607a      	str	r2, [r7, #4]
 800751e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800752c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	021a      	lsls	r2, r3, #8
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	431a      	orrs	r2, r3
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	4313      	orrs	r3, r2
 800753a:	697a      	ldr	r2, [r7, #20]
 800753c:	4313      	orrs	r3, r2
 800753e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	697a      	ldr	r2, [r7, #20]
 8007544:	609a      	str	r2, [r3, #8]
}
 8007546:	bf00      	nop
 8007548:	371c      	adds	r7, #28
 800754a:	46bd      	mov	sp, r7
 800754c:	bc80      	pop	{r7}
 800754e:	4770      	bx	lr

08007550 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007550:	b480      	push	{r7}
 8007552:	b087      	sub	sp, #28
 8007554:	af00      	add	r7, sp, #0
 8007556:	60f8      	str	r0, [r7, #12]
 8007558:	60b9      	str	r1, [r7, #8]
 800755a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	f003 031f 	and.w	r3, r3, #31
 8007562:	2201      	movs	r2, #1
 8007564:	fa02 f303 	lsl.w	r3, r2, r3
 8007568:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	6a1a      	ldr	r2, [r3, #32]
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	43db      	mvns	r3, r3
 8007572:	401a      	ands	r2, r3
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	6a1a      	ldr	r2, [r3, #32]
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	f003 031f 	and.w	r3, r3, #31
 8007582:	6879      	ldr	r1, [r7, #4]
 8007584:	fa01 f303 	lsl.w	r3, r1, r3
 8007588:	431a      	orrs	r2, r3
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	621a      	str	r2, [r3, #32]
}
 800758e:	bf00      	nop
 8007590:	371c      	adds	r7, #28
 8007592:	46bd      	mov	sp, r7
 8007594:	bc80      	pop	{r7}
 8007596:	4770      	bx	lr

08007598 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007598:	b480      	push	{r7}
 800759a:	b085      	sub	sp, #20
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d101      	bne.n	80075b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80075ac:	2302      	movs	r3, #2
 80075ae:	e046      	b.n	800763e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2202      	movs	r2, #2
 80075bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	68fa      	ldr	r2, [r7, #12]
 80075de:	4313      	orrs	r3, r2
 80075e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a16      	ldr	r2, [pc, #88]	@ (8007648 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d00e      	beq.n	8007612 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075fc:	d009      	beq.n	8007612 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a12      	ldr	r2, [pc, #72]	@ (800764c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d004      	beq.n	8007612 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a10      	ldr	r2, [pc, #64]	@ (8007650 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d10c      	bne.n	800762c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007618:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	68ba      	ldr	r2, [r7, #8]
 8007620:	4313      	orrs	r3, r2
 8007622:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	68ba      	ldr	r2, [r7, #8]
 800762a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3714      	adds	r7, #20
 8007642:	46bd      	mov	sp, r7
 8007644:	bc80      	pop	{r7}
 8007646:	4770      	bx	lr
 8007648:	40012c00 	.word	0x40012c00
 800764c:	40000400 	.word	0x40000400
 8007650:	40000800 	.word	0x40000800

08007654 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007654:	b480      	push	{r7}
 8007656:	b083      	sub	sp, #12
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800765c:	bf00      	nop
 800765e:	370c      	adds	r7, #12
 8007660:	46bd      	mov	sp, r7
 8007662:	bc80      	pop	{r7}
 8007664:	4770      	bx	lr

08007666 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007666:	b480      	push	{r7}
 8007668:	b083      	sub	sp, #12
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800766e:	bf00      	nop
 8007670:	370c      	adds	r7, #12
 8007672:	46bd      	mov	sp, r7
 8007674:	bc80      	pop	{r7}
 8007676:	4770      	bx	lr

08007678 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d101      	bne.n	800768a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	e042      	b.n	8007710 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007690:	b2db      	uxtb	r3, r3
 8007692:	2b00      	cmp	r3, #0
 8007694:	d106      	bne.n	80076a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f7fb fea0 	bl	80033e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2224      	movs	r2, #36	@ 0x24
 80076a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	68da      	ldr	r2, [r3, #12]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80076ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 fe4f 	bl	8008360 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	691a      	ldr	r2, [r3, #16]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80076d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	695a      	ldr	r2, [r3, #20]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80076e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	68da      	ldr	r2, [r3, #12]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80076f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2220      	movs	r2, #32
 80076fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2220      	movs	r2, #32
 8007704:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800770e:	2300      	movs	r3, #0
}
 8007710:	4618      	mov	r0, r3
 8007712:	3708      	adds	r7, #8
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b08a      	sub	sp, #40	@ 0x28
 800771c:	af02      	add	r7, sp, #8
 800771e:	60f8      	str	r0, [r7, #12]
 8007720:	60b9      	str	r1, [r7, #8]
 8007722:	603b      	str	r3, [r7, #0]
 8007724:	4613      	mov	r3, r2
 8007726:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007728:	2300      	movs	r3, #0
 800772a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007732:	b2db      	uxtb	r3, r3
 8007734:	2b20      	cmp	r3, #32
 8007736:	d175      	bne.n	8007824 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d002      	beq.n	8007744 <HAL_UART_Transmit+0x2c>
 800773e:	88fb      	ldrh	r3, [r7, #6]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d101      	bne.n	8007748 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	e06e      	b.n	8007826 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2200      	movs	r2, #0
 800774c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2221      	movs	r2, #33	@ 0x21
 8007752:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007756:	f7fb ffd3 	bl	8003700 <HAL_GetTick>
 800775a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	88fa      	ldrh	r2, [r7, #6]
 8007760:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	88fa      	ldrh	r2, [r7, #6]
 8007766:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007770:	d108      	bne.n	8007784 <HAL_UART_Transmit+0x6c>
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d104      	bne.n	8007784 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800777a:	2300      	movs	r3, #0
 800777c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	61bb      	str	r3, [r7, #24]
 8007782:	e003      	b.n	800778c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007788:	2300      	movs	r3, #0
 800778a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800778c:	e02e      	b.n	80077ec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	9300      	str	r3, [sp, #0]
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	2200      	movs	r2, #0
 8007796:	2180      	movs	r1, #128	@ 0x80
 8007798:	68f8      	ldr	r0, [r7, #12]
 800779a:	f000 fbb4 	bl	8007f06 <UART_WaitOnFlagUntilTimeout>
 800779e:	4603      	mov	r3, r0
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d005      	beq.n	80077b0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2220      	movs	r2, #32
 80077a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80077ac:	2303      	movs	r3, #3
 80077ae:	e03a      	b.n	8007826 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80077b0:	69fb      	ldr	r3, [r7, #28]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d10b      	bne.n	80077ce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80077b6:	69bb      	ldr	r3, [r7, #24]
 80077b8:	881b      	ldrh	r3, [r3, #0]
 80077ba:	461a      	mov	r2, r3
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80077c6:	69bb      	ldr	r3, [r7, #24]
 80077c8:	3302      	adds	r3, #2
 80077ca:	61bb      	str	r3, [r7, #24]
 80077cc:	e007      	b.n	80077de <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80077ce:	69fb      	ldr	r3, [r7, #28]
 80077d0:	781a      	ldrb	r2, [r3, #0]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80077d8:	69fb      	ldr	r3, [r7, #28]
 80077da:	3301      	adds	r3, #1
 80077dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	3b01      	subs	r3, #1
 80077e6:	b29a      	uxth	r2, r3
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d1cb      	bne.n	800778e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	9300      	str	r3, [sp, #0]
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	2200      	movs	r2, #0
 80077fe:	2140      	movs	r1, #64	@ 0x40
 8007800:	68f8      	ldr	r0, [r7, #12]
 8007802:	f000 fb80 	bl	8007f06 <UART_WaitOnFlagUntilTimeout>
 8007806:	4603      	mov	r3, r0
 8007808:	2b00      	cmp	r3, #0
 800780a:	d005      	beq.n	8007818 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2220      	movs	r2, #32
 8007810:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007814:	2303      	movs	r3, #3
 8007816:	e006      	b.n	8007826 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2220      	movs	r2, #32
 800781c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007820:	2300      	movs	r3, #0
 8007822:	e000      	b.n	8007826 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007824:	2302      	movs	r3, #2
  }
}
 8007826:	4618      	mov	r0, r3
 8007828:	3720      	adds	r7, #32
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}

0800782e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b08a      	sub	sp, #40	@ 0x28
 8007832:	af02      	add	r7, sp, #8
 8007834:	60f8      	str	r0, [r7, #12]
 8007836:	60b9      	str	r1, [r7, #8]
 8007838:	603b      	str	r3, [r7, #0]
 800783a:	4613      	mov	r3, r2
 800783c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800783e:	2300      	movs	r3, #0
 8007840:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007848:	b2db      	uxtb	r3, r3
 800784a:	2b20      	cmp	r3, #32
 800784c:	f040 8081 	bne.w	8007952 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d002      	beq.n	800785c <HAL_UART_Receive+0x2e>
 8007856:	88fb      	ldrh	r3, [r7, #6]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d101      	bne.n	8007860 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	e079      	b.n	8007954 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2200      	movs	r2, #0
 8007864:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2222      	movs	r2, #34	@ 0x22
 800786a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2200      	movs	r2, #0
 8007872:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007874:	f7fb ff44 	bl	8003700 <HAL_GetTick>
 8007878:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	88fa      	ldrh	r2, [r7, #6]
 800787e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	88fa      	ldrh	r2, [r7, #6]
 8007884:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800788e:	d108      	bne.n	80078a2 <HAL_UART_Receive+0x74>
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d104      	bne.n	80078a2 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8007898:	2300      	movs	r3, #0
 800789a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	61bb      	str	r3, [r7, #24]
 80078a0:	e003      	b.n	80078aa <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078a6:	2300      	movs	r3, #0
 80078a8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80078aa:	e047      	b.n	800793c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	9300      	str	r3, [sp, #0]
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	2200      	movs	r2, #0
 80078b4:	2120      	movs	r1, #32
 80078b6:	68f8      	ldr	r0, [r7, #12]
 80078b8:	f000 fb25 	bl	8007f06 <UART_WaitOnFlagUntilTimeout>
 80078bc:	4603      	mov	r3, r0
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d005      	beq.n	80078ce <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2220      	movs	r2, #32
 80078c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80078ca:	2303      	movs	r3, #3
 80078cc:	e042      	b.n	8007954 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80078ce:	69fb      	ldr	r3, [r7, #28]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d10c      	bne.n	80078ee <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	b29b      	uxth	r3, r3
 80078dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078e0:	b29a      	uxth	r2, r3
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80078e6:	69bb      	ldr	r3, [r7, #24]
 80078e8:	3302      	adds	r3, #2
 80078ea:	61bb      	str	r3, [r7, #24]
 80078ec:	e01f      	b.n	800792e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078f6:	d007      	beq.n	8007908 <HAL_UART_Receive+0xda>
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d10a      	bne.n	8007916 <HAL_UART_Receive+0xe8>
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	691b      	ldr	r3, [r3, #16]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d106      	bne.n	8007916 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	b2da      	uxtb	r2, r3
 8007910:	69fb      	ldr	r3, [r7, #28]
 8007912:	701a      	strb	r2, [r3, #0]
 8007914:	e008      	b.n	8007928 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	b2db      	uxtb	r3, r3
 800791e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007922:	b2da      	uxtb	r2, r3
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	3301      	adds	r3, #1
 800792c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007932:	b29b      	uxth	r3, r3
 8007934:	3b01      	subs	r3, #1
 8007936:	b29a      	uxth	r2, r3
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007940:	b29b      	uxth	r3, r3
 8007942:	2b00      	cmp	r3, #0
 8007944:	d1b2      	bne.n	80078ac <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2220      	movs	r2, #32
 800794a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800794e:	2300      	movs	r3, #0
 8007950:	e000      	b.n	8007954 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8007952:	2302      	movs	r3, #2
  }
}
 8007954:	4618      	mov	r0, r3
 8007956:	3720      	adds	r7, #32
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	4613      	mov	r3, r2
 8007968:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007970:	b2db      	uxtb	r3, r3
 8007972:	2b20      	cmp	r3, #32
 8007974:	d112      	bne.n	800799c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d002      	beq.n	8007982 <HAL_UART_Receive_IT+0x26>
 800797c:	88fb      	ldrh	r3, [r7, #6]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d101      	bne.n	8007986 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007982:	2301      	movs	r3, #1
 8007984:	e00b      	b.n	800799e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2200      	movs	r2, #0
 800798a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800798c:	88fb      	ldrh	r3, [r7, #6]
 800798e:	461a      	mov	r2, r3
 8007990:	68b9      	ldr	r1, [r7, #8]
 8007992:	68f8      	ldr	r0, [r7, #12]
 8007994:	f000 fb10 	bl	8007fb8 <UART_Start_Receive_IT>
 8007998:	4603      	mov	r3, r0
 800799a:	e000      	b.n	800799e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800799c:	2302      	movs	r3, #2
  }
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3710      	adds	r7, #16
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
	...

080079a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b0ba      	sub	sp, #232	@ 0xe8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	695b      	ldr	r3, [r3, #20]
 80079ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80079ce:	2300      	movs	r3, #0
 80079d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80079d4:	2300      	movs	r3, #0
 80079d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80079da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079de:	f003 030f 	and.w	r3, r3, #15
 80079e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80079e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d10f      	bne.n	8007a0e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80079ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079f2:	f003 0320 	and.w	r3, r3, #32
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d009      	beq.n	8007a0e <HAL_UART_IRQHandler+0x66>
 80079fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079fe:	f003 0320 	and.w	r3, r3, #32
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d003      	beq.n	8007a0e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 fbec 	bl	80081e4 <UART_Receive_IT>
      return;
 8007a0c:	e25b      	b.n	8007ec6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007a0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	f000 80de 	beq.w	8007bd4 <HAL_UART_IRQHandler+0x22c>
 8007a18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a1c:	f003 0301 	and.w	r3, r3, #1
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d106      	bne.n	8007a32 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007a24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a28:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f000 80d1 	beq.w	8007bd4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a36:	f003 0301 	and.w	r3, r3, #1
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d00b      	beq.n	8007a56 <HAL_UART_IRQHandler+0xae>
 8007a3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d005      	beq.n	8007a56 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a4e:	f043 0201 	orr.w	r2, r3, #1
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a5a:	f003 0304 	and.w	r3, r3, #4
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d00b      	beq.n	8007a7a <HAL_UART_IRQHandler+0xd2>
 8007a62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a66:	f003 0301 	and.w	r3, r3, #1
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d005      	beq.n	8007a7a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a72:	f043 0202 	orr.w	r2, r3, #2
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a7e:	f003 0302 	and.w	r3, r3, #2
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00b      	beq.n	8007a9e <HAL_UART_IRQHandler+0xf6>
 8007a86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a8a:	f003 0301 	and.w	r3, r3, #1
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d005      	beq.n	8007a9e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a96:	f043 0204 	orr.w	r2, r3, #4
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007aa2:	f003 0308 	and.w	r3, r3, #8
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d011      	beq.n	8007ace <HAL_UART_IRQHandler+0x126>
 8007aaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007aae:	f003 0320 	and.w	r3, r3, #32
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d105      	bne.n	8007ac2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007ab6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007aba:	f003 0301 	and.w	r3, r3, #1
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d005      	beq.n	8007ace <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ac6:	f043 0208 	orr.w	r2, r3, #8
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	f000 81f2 	beq.w	8007ebc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007adc:	f003 0320 	and.w	r3, r3, #32
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d008      	beq.n	8007af6 <HAL_UART_IRQHandler+0x14e>
 8007ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ae8:	f003 0320 	and.w	r3, r3, #32
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d002      	beq.n	8007af6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 fb77 	bl	80081e4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	695b      	ldr	r3, [r3, #20]
 8007afc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	bf14      	ite	ne
 8007b04:	2301      	movne	r3, #1
 8007b06:	2300      	moveq	r3, #0
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b12:	f003 0308 	and.w	r3, r3, #8
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d103      	bne.n	8007b22 <HAL_UART_IRQHandler+0x17a>
 8007b1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d04f      	beq.n	8007bc2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 fa81 	bl	800802a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	695b      	ldr	r3, [r3, #20]
 8007b2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d041      	beq.n	8007bba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	3314      	adds	r3, #20
 8007b3c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b40:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007b44:	e853 3f00 	ldrex	r3, [r3]
 8007b48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007b4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007b50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	3314      	adds	r3, #20
 8007b5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007b62:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007b66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007b6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007b72:	e841 2300 	strex	r3, r2, [r1]
 8007b76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007b7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d1d9      	bne.n	8007b36 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d013      	beq.n	8007bb2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b8e:	4a7e      	ldr	r2, [pc, #504]	@ (8007d88 <HAL_UART_IRQHandler+0x3e0>)
 8007b90:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b96:	4618      	mov	r0, r3
 8007b98:	f7fc fbfc 	bl	8004394 <HAL_DMA_Abort_IT>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d016      	beq.n	8007bd0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ba6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007bac:	4610      	mov	r0, r2
 8007bae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bb0:	e00e      	b.n	8007bd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 f993 	bl	8007ede <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bb8:	e00a      	b.n	8007bd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 f98f 	bl	8007ede <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bc0:	e006      	b.n	8007bd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 f98b 	bl	8007ede <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007bce:	e175      	b.n	8007ebc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bd0:	bf00      	nop
    return;
 8007bd2:	e173      	b.n	8007ebc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	f040 814f 	bne.w	8007e7c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007be2:	f003 0310 	and.w	r3, r3, #16
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	f000 8148 	beq.w	8007e7c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bf0:	f003 0310 	and.w	r3, r3, #16
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	f000 8141 	beq.w	8007e7c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	60bb      	str	r3, [r7, #8]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	60bb      	str	r3, [r7, #8]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	60bb      	str	r3, [r7, #8]
 8007c0e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	695b      	ldr	r3, [r3, #20]
 8007c16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	f000 80b6 	beq.w	8007d8c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c2c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	f000 8145 	beq.w	8007ec0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007c3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	f080 813e 	bcs.w	8007ec0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007c4a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c50:	699b      	ldr	r3, [r3, #24]
 8007c52:	2b20      	cmp	r3, #32
 8007c54:	f000 8088 	beq.w	8007d68 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	330c      	adds	r3, #12
 8007c5e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c62:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007c66:	e853 3f00 	ldrex	r3, [r3]
 8007c6a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007c6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007c72:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c76:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	330c      	adds	r3, #12
 8007c80:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007c84:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007c88:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c8c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007c90:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007c94:	e841 2300 	strex	r3, r2, [r1]
 8007c98:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007c9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d1d9      	bne.n	8007c58 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	3314      	adds	r3, #20
 8007caa:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007cae:	e853 3f00 	ldrex	r3, [r3]
 8007cb2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007cb4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007cb6:	f023 0301 	bic.w	r3, r3, #1
 8007cba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	3314      	adds	r3, #20
 8007cc4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007cc8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007ccc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cce:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007cd0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007cd4:	e841 2300 	strex	r3, r2, [r1]
 8007cd8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007cda:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d1e1      	bne.n	8007ca4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	3314      	adds	r3, #20
 8007ce6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007cea:	e853 3f00 	ldrex	r3, [r3]
 8007cee:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007cf0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007cf2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007cf6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	3314      	adds	r3, #20
 8007d00:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007d04:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007d06:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d08:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007d0a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007d0c:	e841 2300 	strex	r3, r2, [r1]
 8007d10:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007d12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d1e3      	bne.n	8007ce0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2220      	movs	r2, #32
 8007d1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	330c      	adds	r3, #12
 8007d2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d30:	e853 3f00 	ldrex	r3, [r3]
 8007d34:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007d36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d38:	f023 0310 	bic.w	r3, r3, #16
 8007d3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	330c      	adds	r3, #12
 8007d46:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007d4a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007d4c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d4e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007d50:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007d52:	e841 2300 	strex	r3, r2, [r1]
 8007d56:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007d58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d1e3      	bne.n	8007d26 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d62:	4618      	mov	r0, r3
 8007d64:	f7fc fada 	bl	800431c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2202      	movs	r2, #2
 8007d6c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	1ad3      	subs	r3, r2, r3
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 f8b6 	bl	8007ef0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007d84:	e09c      	b.n	8007ec0 <HAL_UART_IRQHandler+0x518>
 8007d86:	bf00      	nop
 8007d88:	080080ef 	.word	0x080080ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	1ad3      	subs	r3, r2, r3
 8007d98:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	f000 808e 	beq.w	8007ec4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007da8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	f000 8089 	beq.w	8007ec4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	330c      	adds	r3, #12
 8007db8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dbc:	e853 3f00 	ldrex	r3, [r3]
 8007dc0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007dc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007dc8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	330c      	adds	r3, #12
 8007dd2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007dd6:	647a      	str	r2, [r7, #68]	@ 0x44
 8007dd8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dda:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007ddc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007dde:	e841 2300 	strex	r3, r2, [r1]
 8007de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007de4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d1e3      	bne.n	8007db2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	3314      	adds	r3, #20
 8007df0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df4:	e853 3f00 	ldrex	r3, [r3]
 8007df8:	623b      	str	r3, [r7, #32]
   return(result);
 8007dfa:	6a3b      	ldr	r3, [r7, #32]
 8007dfc:	f023 0301 	bic.w	r3, r3, #1
 8007e00:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	3314      	adds	r3, #20
 8007e0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007e0e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e16:	e841 2300 	strex	r3, r2, [r1]
 8007e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d1e3      	bne.n	8007dea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2220      	movs	r2, #32
 8007e26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	330c      	adds	r3, #12
 8007e36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	e853 3f00 	ldrex	r3, [r3]
 8007e3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f023 0310 	bic.w	r3, r3, #16
 8007e46:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	330c      	adds	r3, #12
 8007e50:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007e54:	61fa      	str	r2, [r7, #28]
 8007e56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e58:	69b9      	ldr	r1, [r7, #24]
 8007e5a:	69fa      	ldr	r2, [r7, #28]
 8007e5c:	e841 2300 	strex	r3, r2, [r1]
 8007e60:	617b      	str	r3, [r7, #20]
   return(result);
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d1e3      	bne.n	8007e30 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2202      	movs	r2, #2
 8007e6c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007e72:	4619      	mov	r1, r3
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 f83b 	bl	8007ef0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007e7a:	e023      	b.n	8007ec4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d009      	beq.n	8007e9c <HAL_UART_IRQHandler+0x4f4>
 8007e88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d003      	beq.n	8007e9c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 f93e 	bl	8008116 <UART_Transmit_IT>
    return;
 8007e9a:	e014      	b.n	8007ec6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007e9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ea0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d00e      	beq.n	8007ec6 <HAL_UART_IRQHandler+0x51e>
 8007ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007eac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d008      	beq.n	8007ec6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 f97d 	bl	80081b4 <UART_EndTransmit_IT>
    return;
 8007eba:	e004      	b.n	8007ec6 <HAL_UART_IRQHandler+0x51e>
    return;
 8007ebc:	bf00      	nop
 8007ebe:	e002      	b.n	8007ec6 <HAL_UART_IRQHandler+0x51e>
      return;
 8007ec0:	bf00      	nop
 8007ec2:	e000      	b.n	8007ec6 <HAL_UART_IRQHandler+0x51e>
      return;
 8007ec4:	bf00      	nop
  }
}
 8007ec6:	37e8      	adds	r7, #232	@ 0xe8
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007ed4:	bf00      	nop
 8007ed6:	370c      	adds	r7, #12
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bc80      	pop	{r7}
 8007edc:	4770      	bx	lr

08007ede <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ede:	b480      	push	{r7}
 8007ee0:	b083      	sub	sp, #12
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007ee6:	bf00      	nop
 8007ee8:	370c      	adds	r7, #12
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bc80      	pop	{r7}
 8007eee:	4770      	bx	lr

08007ef0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b083      	sub	sp, #12
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	460b      	mov	r3, r1
 8007efa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007efc:	bf00      	nop
 8007efe:	370c      	adds	r7, #12
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bc80      	pop	{r7}
 8007f04:	4770      	bx	lr

08007f06 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007f06:	b580      	push	{r7, lr}
 8007f08:	b086      	sub	sp, #24
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	60f8      	str	r0, [r7, #12]
 8007f0e:	60b9      	str	r1, [r7, #8]
 8007f10:	603b      	str	r3, [r7, #0]
 8007f12:	4613      	mov	r3, r2
 8007f14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f16:	e03b      	b.n	8007f90 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f18:	6a3b      	ldr	r3, [r7, #32]
 8007f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f1e:	d037      	beq.n	8007f90 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f20:	f7fb fbee 	bl	8003700 <HAL_GetTick>
 8007f24:	4602      	mov	r2, r0
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	1ad3      	subs	r3, r2, r3
 8007f2a:	6a3a      	ldr	r2, [r7, #32]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d302      	bcc.n	8007f36 <UART_WaitOnFlagUntilTimeout+0x30>
 8007f30:	6a3b      	ldr	r3, [r7, #32]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d101      	bne.n	8007f3a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007f36:	2303      	movs	r3, #3
 8007f38:	e03a      	b.n	8007fb0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	68db      	ldr	r3, [r3, #12]
 8007f40:	f003 0304 	and.w	r3, r3, #4
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d023      	beq.n	8007f90 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	2b80      	cmp	r3, #128	@ 0x80
 8007f4c:	d020      	beq.n	8007f90 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	2b40      	cmp	r3, #64	@ 0x40
 8007f52:	d01d      	beq.n	8007f90 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f003 0308 	and.w	r3, r3, #8
 8007f5e:	2b08      	cmp	r3, #8
 8007f60:	d116      	bne.n	8007f90 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007f62:	2300      	movs	r3, #0
 8007f64:	617b      	str	r3, [r7, #20]
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	617b      	str	r3, [r7, #20]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	617b      	str	r3, [r7, #20]
 8007f76:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f78:	68f8      	ldr	r0, [r7, #12]
 8007f7a:	f000 f856 	bl	800802a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2208      	movs	r2, #8
 8007f82:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2200      	movs	r2, #0
 8007f88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	e00f      	b.n	8007fb0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	4013      	ands	r3, r2
 8007f9a:	68ba      	ldr	r2, [r7, #8]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	bf0c      	ite	eq
 8007fa0:	2301      	moveq	r3, #1
 8007fa2:	2300      	movne	r3, #0
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	79fb      	ldrb	r3, [r7, #7]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d0b4      	beq.n	8007f18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007fae:	2300      	movs	r3, #0
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3718      	adds	r7, #24
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b085      	sub	sp, #20
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	60f8      	str	r0, [r7, #12]
 8007fc0:	60b9      	str	r1, [r7, #8]
 8007fc2:	4613      	mov	r3, r2
 8007fc4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	68ba      	ldr	r2, [r7, #8]
 8007fca:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	88fa      	ldrh	r2, [r7, #6]
 8007fd0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	88fa      	ldrh	r2, [r7, #6]
 8007fd6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2222      	movs	r2, #34	@ 0x22
 8007fe2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	691b      	ldr	r3, [r3, #16]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d007      	beq.n	8007ffe <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	68da      	ldr	r2, [r3, #12]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007ffc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	695a      	ldr	r2, [r3, #20]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f042 0201 	orr.w	r2, r2, #1
 800800c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	68da      	ldr	r2, [r3, #12]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f042 0220 	orr.w	r2, r2, #32
 800801c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800801e:	2300      	movs	r3, #0
}
 8008020:	4618      	mov	r0, r3
 8008022:	3714      	adds	r7, #20
 8008024:	46bd      	mov	sp, r7
 8008026:	bc80      	pop	{r7}
 8008028:	4770      	bx	lr

0800802a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800802a:	b480      	push	{r7}
 800802c:	b095      	sub	sp, #84	@ 0x54
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	330c      	adds	r3, #12
 8008038:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800803a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800803c:	e853 3f00 	ldrex	r3, [r3]
 8008040:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008044:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008048:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	330c      	adds	r3, #12
 8008050:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008052:	643a      	str	r2, [r7, #64]	@ 0x40
 8008054:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008056:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008058:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800805a:	e841 2300 	strex	r3, r2, [r1]
 800805e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008062:	2b00      	cmp	r3, #0
 8008064:	d1e5      	bne.n	8008032 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	3314      	adds	r3, #20
 800806c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800806e:	6a3b      	ldr	r3, [r7, #32]
 8008070:	e853 3f00 	ldrex	r3, [r3]
 8008074:	61fb      	str	r3, [r7, #28]
   return(result);
 8008076:	69fb      	ldr	r3, [r7, #28]
 8008078:	f023 0301 	bic.w	r3, r3, #1
 800807c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	3314      	adds	r3, #20
 8008084:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008086:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008088:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800808a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800808c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800808e:	e841 2300 	strex	r3, r2, [r1]
 8008092:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008096:	2b00      	cmp	r3, #0
 8008098:	d1e5      	bne.n	8008066 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d119      	bne.n	80080d6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	330c      	adds	r3, #12
 80080a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	e853 3f00 	ldrex	r3, [r3]
 80080b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	f023 0310 	bic.w	r3, r3, #16
 80080b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	330c      	adds	r3, #12
 80080c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80080c2:	61ba      	str	r2, [r7, #24]
 80080c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c6:	6979      	ldr	r1, [r7, #20]
 80080c8:	69ba      	ldr	r2, [r7, #24]
 80080ca:	e841 2300 	strex	r3, r2, [r1]
 80080ce:	613b      	str	r3, [r7, #16]
   return(result);
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d1e5      	bne.n	80080a2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2220      	movs	r2, #32
 80080da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2200      	movs	r2, #0
 80080e2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80080e4:	bf00      	nop
 80080e6:	3754      	adds	r7, #84	@ 0x54
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bc80      	pop	{r7}
 80080ec:	4770      	bx	lr

080080ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b084      	sub	sp, #16
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2200      	movs	r2, #0
 8008100:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2200      	movs	r2, #0
 8008106:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008108:	68f8      	ldr	r0, [r7, #12]
 800810a:	f7ff fee8 	bl	8007ede <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800810e:	bf00      	nop
 8008110:	3710      	adds	r7, #16
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}

08008116 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008116:	b480      	push	{r7}
 8008118:	b085      	sub	sp, #20
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008124:	b2db      	uxtb	r3, r3
 8008126:	2b21      	cmp	r3, #33	@ 0x21
 8008128:	d13e      	bne.n	80081a8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008132:	d114      	bne.n	800815e <UART_Transmit_IT+0x48>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	691b      	ldr	r3, [r3, #16]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d110      	bne.n	800815e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6a1b      	ldr	r3, [r3, #32]
 8008140:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	881b      	ldrh	r3, [r3, #0]
 8008146:	461a      	mov	r2, r3
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008150:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6a1b      	ldr	r3, [r3, #32]
 8008156:	1c9a      	adds	r2, r3, #2
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	621a      	str	r2, [r3, #32]
 800815c:	e008      	b.n	8008170 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6a1b      	ldr	r3, [r3, #32]
 8008162:	1c59      	adds	r1, r3, #1
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	6211      	str	r1, [r2, #32]
 8008168:	781a      	ldrb	r2, [r3, #0]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008174:	b29b      	uxth	r3, r3
 8008176:	3b01      	subs	r3, #1
 8008178:	b29b      	uxth	r3, r3
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	4619      	mov	r1, r3
 800817e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008180:	2b00      	cmp	r3, #0
 8008182:	d10f      	bne.n	80081a4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	68da      	ldr	r2, [r3, #12]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008192:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	68da      	ldr	r2, [r3, #12]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80081a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80081a4:	2300      	movs	r3, #0
 80081a6:	e000      	b.n	80081aa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80081a8:	2302      	movs	r3, #2
  }
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3714      	adds	r7, #20
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bc80      	pop	{r7}
 80081b2:	4770      	bx	lr

080081b4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	68da      	ldr	r2, [r3, #12]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80081ca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2220      	movs	r2, #32
 80081d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f7ff fe79 	bl	8007ecc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80081da:	2300      	movs	r3, #0
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3708      	adds	r7, #8
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b08c      	sub	sp, #48	@ 0x30
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	2b22      	cmp	r3, #34	@ 0x22
 80081f6:	f040 80ae 	bne.w	8008356 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008202:	d117      	bne.n	8008234 <UART_Receive_IT+0x50>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	691b      	ldr	r3, [r3, #16]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d113      	bne.n	8008234 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800820c:	2300      	movs	r3, #0
 800820e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008214:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	b29b      	uxth	r3, r3
 800821e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008222:	b29a      	uxth	r2, r3
 8008224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008226:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800822c:	1c9a      	adds	r2, r3, #2
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	629a      	str	r2, [r3, #40]	@ 0x28
 8008232:	e026      	b.n	8008282 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008238:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800823a:	2300      	movs	r3, #0
 800823c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008246:	d007      	beq.n	8008258 <UART_Receive_IT+0x74>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d10a      	bne.n	8008266 <UART_Receive_IT+0x82>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	691b      	ldr	r3, [r3, #16]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d106      	bne.n	8008266 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	b2da      	uxtb	r2, r3
 8008260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008262:	701a      	strb	r2, [r3, #0]
 8008264:	e008      	b.n	8008278 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	b2db      	uxtb	r3, r3
 800826e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008272:	b2da      	uxtb	r2, r3
 8008274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008276:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800827c:	1c5a      	adds	r2, r3, #1
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008286:	b29b      	uxth	r3, r3
 8008288:	3b01      	subs	r3, #1
 800828a:	b29b      	uxth	r3, r3
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	4619      	mov	r1, r3
 8008290:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008292:	2b00      	cmp	r3, #0
 8008294:	d15d      	bne.n	8008352 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	68da      	ldr	r2, [r3, #12]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f022 0220 	bic.w	r2, r2, #32
 80082a4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	68da      	ldr	r2, [r3, #12]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80082b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	695a      	ldr	r2, [r3, #20]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f022 0201 	bic.w	r2, r2, #1
 80082c4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2220      	movs	r2, #32
 80082ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d135      	bne.n	8008348 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2200      	movs	r2, #0
 80082e0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	330c      	adds	r3, #12
 80082e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	e853 3f00 	ldrex	r3, [r3]
 80082f0:	613b      	str	r3, [r7, #16]
   return(result);
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	f023 0310 	bic.w	r3, r3, #16
 80082f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	330c      	adds	r3, #12
 8008300:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008302:	623a      	str	r2, [r7, #32]
 8008304:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008306:	69f9      	ldr	r1, [r7, #28]
 8008308:	6a3a      	ldr	r2, [r7, #32]
 800830a:	e841 2300 	strex	r3, r2, [r1]
 800830e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008310:	69bb      	ldr	r3, [r7, #24]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d1e5      	bne.n	80082e2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f003 0310 	and.w	r3, r3, #16
 8008320:	2b10      	cmp	r3, #16
 8008322:	d10a      	bne.n	800833a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008324:	2300      	movs	r3, #0
 8008326:	60fb      	str	r3, [r7, #12]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	60fb      	str	r3, [r7, #12]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	60fb      	str	r3, [r7, #12]
 8008338:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800833e:	4619      	mov	r1, r3
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f7ff fdd5 	bl	8007ef0 <HAL_UARTEx_RxEventCallback>
 8008346:	e002      	b.n	800834e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f7f9 ff25 	bl	8002198 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800834e:	2300      	movs	r3, #0
 8008350:	e002      	b.n	8008358 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008352:	2300      	movs	r3, #0
 8008354:	e000      	b.n	8008358 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008356:	2302      	movs	r3, #2
  }
}
 8008358:	4618      	mov	r0, r3
 800835a:	3730      	adds	r7, #48	@ 0x30
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	68da      	ldr	r2, [r3, #12]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	430a      	orrs	r2, r1
 800837c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	689a      	ldr	r2, [r3, #8]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	691b      	ldr	r3, [r3, #16]
 8008386:	431a      	orrs	r2, r3
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	695b      	ldr	r3, [r3, #20]
 800838c:	4313      	orrs	r3, r2
 800838e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	68db      	ldr	r3, [r3, #12]
 8008396:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800839a:	f023 030c 	bic.w	r3, r3, #12
 800839e:	687a      	ldr	r2, [r7, #4]
 80083a0:	6812      	ldr	r2, [r2, #0]
 80083a2:	68b9      	ldr	r1, [r7, #8]
 80083a4:	430b      	orrs	r3, r1
 80083a6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	695b      	ldr	r3, [r3, #20]
 80083ae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	699a      	ldr	r2, [r3, #24]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	430a      	orrs	r2, r1
 80083bc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a2c      	ldr	r2, [pc, #176]	@ (8008474 <UART_SetConfig+0x114>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d103      	bne.n	80083d0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80083c8:	f7fd ff58 	bl	800627c <HAL_RCC_GetPCLK2Freq>
 80083cc:	60f8      	str	r0, [r7, #12]
 80083ce:	e002      	b.n	80083d6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80083d0:	f7fd ff40 	bl	8006254 <HAL_RCC_GetPCLK1Freq>
 80083d4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80083d6:	68fa      	ldr	r2, [r7, #12]
 80083d8:	4613      	mov	r3, r2
 80083da:	009b      	lsls	r3, r3, #2
 80083dc:	4413      	add	r3, r2
 80083de:	009a      	lsls	r2, r3, #2
 80083e0:	441a      	add	r2, r3
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80083ec:	4a22      	ldr	r2, [pc, #136]	@ (8008478 <UART_SetConfig+0x118>)
 80083ee:	fba2 2303 	umull	r2, r3, r2, r3
 80083f2:	095b      	lsrs	r3, r3, #5
 80083f4:	0119      	lsls	r1, r3, #4
 80083f6:	68fa      	ldr	r2, [r7, #12]
 80083f8:	4613      	mov	r3, r2
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	4413      	add	r3, r2
 80083fe:	009a      	lsls	r2, r3, #2
 8008400:	441a      	add	r2, r3
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	fbb2 f2f3 	udiv	r2, r2, r3
 800840c:	4b1a      	ldr	r3, [pc, #104]	@ (8008478 <UART_SetConfig+0x118>)
 800840e:	fba3 0302 	umull	r0, r3, r3, r2
 8008412:	095b      	lsrs	r3, r3, #5
 8008414:	2064      	movs	r0, #100	@ 0x64
 8008416:	fb00 f303 	mul.w	r3, r0, r3
 800841a:	1ad3      	subs	r3, r2, r3
 800841c:	011b      	lsls	r3, r3, #4
 800841e:	3332      	adds	r3, #50	@ 0x32
 8008420:	4a15      	ldr	r2, [pc, #84]	@ (8008478 <UART_SetConfig+0x118>)
 8008422:	fba2 2303 	umull	r2, r3, r2, r3
 8008426:	095b      	lsrs	r3, r3, #5
 8008428:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800842c:	4419      	add	r1, r3
 800842e:	68fa      	ldr	r2, [r7, #12]
 8008430:	4613      	mov	r3, r2
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	4413      	add	r3, r2
 8008436:	009a      	lsls	r2, r3, #2
 8008438:	441a      	add	r2, r3
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	fbb2 f2f3 	udiv	r2, r2, r3
 8008444:	4b0c      	ldr	r3, [pc, #48]	@ (8008478 <UART_SetConfig+0x118>)
 8008446:	fba3 0302 	umull	r0, r3, r3, r2
 800844a:	095b      	lsrs	r3, r3, #5
 800844c:	2064      	movs	r0, #100	@ 0x64
 800844e:	fb00 f303 	mul.w	r3, r0, r3
 8008452:	1ad3      	subs	r3, r2, r3
 8008454:	011b      	lsls	r3, r3, #4
 8008456:	3332      	adds	r3, #50	@ 0x32
 8008458:	4a07      	ldr	r2, [pc, #28]	@ (8008478 <UART_SetConfig+0x118>)
 800845a:	fba2 2303 	umull	r2, r3, r2, r3
 800845e:	095b      	lsrs	r3, r3, #5
 8008460:	f003 020f 	and.w	r2, r3, #15
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	440a      	add	r2, r1
 800846a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800846c:	bf00      	nop
 800846e:	3710      	adds	r7, #16
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}
 8008474:	40013800 	.word	0x40013800
 8008478:	51eb851f 	.word	0x51eb851f

0800847c <std>:
 800847c:	2300      	movs	r3, #0
 800847e:	b510      	push	{r4, lr}
 8008480:	4604      	mov	r4, r0
 8008482:	e9c0 3300 	strd	r3, r3, [r0]
 8008486:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800848a:	6083      	str	r3, [r0, #8]
 800848c:	8181      	strh	r1, [r0, #12]
 800848e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008490:	81c2      	strh	r2, [r0, #14]
 8008492:	6183      	str	r3, [r0, #24]
 8008494:	4619      	mov	r1, r3
 8008496:	2208      	movs	r2, #8
 8008498:	305c      	adds	r0, #92	@ 0x5c
 800849a:	f000 faad 	bl	80089f8 <memset>
 800849e:	4b0d      	ldr	r3, [pc, #52]	@ (80084d4 <std+0x58>)
 80084a0:	6224      	str	r4, [r4, #32]
 80084a2:	6263      	str	r3, [r4, #36]	@ 0x24
 80084a4:	4b0c      	ldr	r3, [pc, #48]	@ (80084d8 <std+0x5c>)
 80084a6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80084a8:	4b0c      	ldr	r3, [pc, #48]	@ (80084dc <std+0x60>)
 80084aa:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80084ac:	4b0c      	ldr	r3, [pc, #48]	@ (80084e0 <std+0x64>)
 80084ae:	6323      	str	r3, [r4, #48]	@ 0x30
 80084b0:	4b0c      	ldr	r3, [pc, #48]	@ (80084e4 <std+0x68>)
 80084b2:	429c      	cmp	r4, r3
 80084b4:	d006      	beq.n	80084c4 <std+0x48>
 80084b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80084ba:	4294      	cmp	r4, r2
 80084bc:	d002      	beq.n	80084c4 <std+0x48>
 80084be:	33d0      	adds	r3, #208	@ 0xd0
 80084c0:	429c      	cmp	r4, r3
 80084c2:	d105      	bne.n	80084d0 <std+0x54>
 80084c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80084c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084cc:	f000 bb0c 	b.w	8008ae8 <__retarget_lock_init_recursive>
 80084d0:	bd10      	pop	{r4, pc}
 80084d2:	bf00      	nop
 80084d4:	08008849 	.word	0x08008849
 80084d8:	0800886b 	.word	0x0800886b
 80084dc:	080088a3 	.word	0x080088a3
 80084e0:	080088c7 	.word	0x080088c7
 80084e4:	200002b0 	.word	0x200002b0

080084e8 <stdio_exit_handler>:
 80084e8:	4a02      	ldr	r2, [pc, #8]	@ (80084f4 <stdio_exit_handler+0xc>)
 80084ea:	4903      	ldr	r1, [pc, #12]	@ (80084f8 <stdio_exit_handler+0x10>)
 80084ec:	4803      	ldr	r0, [pc, #12]	@ (80084fc <stdio_exit_handler+0x14>)
 80084ee:	f000 b869 	b.w	80085c4 <_fwalk_sglue>
 80084f2:	bf00      	nop
 80084f4:	2000003c 	.word	0x2000003c
 80084f8:	080093ad 	.word	0x080093ad
 80084fc:	2000004c 	.word	0x2000004c

08008500 <cleanup_stdio>:
 8008500:	6841      	ldr	r1, [r0, #4]
 8008502:	4b0c      	ldr	r3, [pc, #48]	@ (8008534 <cleanup_stdio+0x34>)
 8008504:	b510      	push	{r4, lr}
 8008506:	4299      	cmp	r1, r3
 8008508:	4604      	mov	r4, r0
 800850a:	d001      	beq.n	8008510 <cleanup_stdio+0x10>
 800850c:	f000 ff4e 	bl	80093ac <_fflush_r>
 8008510:	68a1      	ldr	r1, [r4, #8]
 8008512:	4b09      	ldr	r3, [pc, #36]	@ (8008538 <cleanup_stdio+0x38>)
 8008514:	4299      	cmp	r1, r3
 8008516:	d002      	beq.n	800851e <cleanup_stdio+0x1e>
 8008518:	4620      	mov	r0, r4
 800851a:	f000 ff47 	bl	80093ac <_fflush_r>
 800851e:	68e1      	ldr	r1, [r4, #12]
 8008520:	4b06      	ldr	r3, [pc, #24]	@ (800853c <cleanup_stdio+0x3c>)
 8008522:	4299      	cmp	r1, r3
 8008524:	d004      	beq.n	8008530 <cleanup_stdio+0x30>
 8008526:	4620      	mov	r0, r4
 8008528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800852c:	f000 bf3e 	b.w	80093ac <_fflush_r>
 8008530:	bd10      	pop	{r4, pc}
 8008532:	bf00      	nop
 8008534:	200002b0 	.word	0x200002b0
 8008538:	20000318 	.word	0x20000318
 800853c:	20000380 	.word	0x20000380

08008540 <global_stdio_init.part.0>:
 8008540:	b510      	push	{r4, lr}
 8008542:	4b0b      	ldr	r3, [pc, #44]	@ (8008570 <global_stdio_init.part.0+0x30>)
 8008544:	4c0b      	ldr	r4, [pc, #44]	@ (8008574 <global_stdio_init.part.0+0x34>)
 8008546:	4a0c      	ldr	r2, [pc, #48]	@ (8008578 <global_stdio_init.part.0+0x38>)
 8008548:	4620      	mov	r0, r4
 800854a:	601a      	str	r2, [r3, #0]
 800854c:	2104      	movs	r1, #4
 800854e:	2200      	movs	r2, #0
 8008550:	f7ff ff94 	bl	800847c <std>
 8008554:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008558:	2201      	movs	r2, #1
 800855a:	2109      	movs	r1, #9
 800855c:	f7ff ff8e 	bl	800847c <std>
 8008560:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008564:	2202      	movs	r2, #2
 8008566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800856a:	2112      	movs	r1, #18
 800856c:	f7ff bf86 	b.w	800847c <std>
 8008570:	200003e8 	.word	0x200003e8
 8008574:	200002b0 	.word	0x200002b0
 8008578:	080084e9 	.word	0x080084e9

0800857c <__sfp_lock_acquire>:
 800857c:	4801      	ldr	r0, [pc, #4]	@ (8008584 <__sfp_lock_acquire+0x8>)
 800857e:	f000 bab4 	b.w	8008aea <__retarget_lock_acquire_recursive>
 8008582:	bf00      	nop
 8008584:	200003f1 	.word	0x200003f1

08008588 <__sfp_lock_release>:
 8008588:	4801      	ldr	r0, [pc, #4]	@ (8008590 <__sfp_lock_release+0x8>)
 800858a:	f000 baaf 	b.w	8008aec <__retarget_lock_release_recursive>
 800858e:	bf00      	nop
 8008590:	200003f1 	.word	0x200003f1

08008594 <__sinit>:
 8008594:	b510      	push	{r4, lr}
 8008596:	4604      	mov	r4, r0
 8008598:	f7ff fff0 	bl	800857c <__sfp_lock_acquire>
 800859c:	6a23      	ldr	r3, [r4, #32]
 800859e:	b11b      	cbz	r3, 80085a8 <__sinit+0x14>
 80085a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085a4:	f7ff bff0 	b.w	8008588 <__sfp_lock_release>
 80085a8:	4b04      	ldr	r3, [pc, #16]	@ (80085bc <__sinit+0x28>)
 80085aa:	6223      	str	r3, [r4, #32]
 80085ac:	4b04      	ldr	r3, [pc, #16]	@ (80085c0 <__sinit+0x2c>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d1f5      	bne.n	80085a0 <__sinit+0xc>
 80085b4:	f7ff ffc4 	bl	8008540 <global_stdio_init.part.0>
 80085b8:	e7f2      	b.n	80085a0 <__sinit+0xc>
 80085ba:	bf00      	nop
 80085bc:	08008501 	.word	0x08008501
 80085c0:	200003e8 	.word	0x200003e8

080085c4 <_fwalk_sglue>:
 80085c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085c8:	4607      	mov	r7, r0
 80085ca:	4688      	mov	r8, r1
 80085cc:	4614      	mov	r4, r2
 80085ce:	2600      	movs	r6, #0
 80085d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80085d4:	f1b9 0901 	subs.w	r9, r9, #1
 80085d8:	d505      	bpl.n	80085e6 <_fwalk_sglue+0x22>
 80085da:	6824      	ldr	r4, [r4, #0]
 80085dc:	2c00      	cmp	r4, #0
 80085de:	d1f7      	bne.n	80085d0 <_fwalk_sglue+0xc>
 80085e0:	4630      	mov	r0, r6
 80085e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085e6:	89ab      	ldrh	r3, [r5, #12]
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d907      	bls.n	80085fc <_fwalk_sglue+0x38>
 80085ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80085f0:	3301      	adds	r3, #1
 80085f2:	d003      	beq.n	80085fc <_fwalk_sglue+0x38>
 80085f4:	4629      	mov	r1, r5
 80085f6:	4638      	mov	r0, r7
 80085f8:	47c0      	blx	r8
 80085fa:	4306      	orrs	r6, r0
 80085fc:	3568      	adds	r5, #104	@ 0x68
 80085fe:	e7e9      	b.n	80085d4 <_fwalk_sglue+0x10>

08008600 <iprintf>:
 8008600:	b40f      	push	{r0, r1, r2, r3}
 8008602:	b507      	push	{r0, r1, r2, lr}
 8008604:	4906      	ldr	r1, [pc, #24]	@ (8008620 <iprintf+0x20>)
 8008606:	ab04      	add	r3, sp, #16
 8008608:	6808      	ldr	r0, [r1, #0]
 800860a:	f853 2b04 	ldr.w	r2, [r3], #4
 800860e:	6881      	ldr	r1, [r0, #8]
 8008610:	9301      	str	r3, [sp, #4]
 8008612:	f000 fba1 	bl	8008d58 <_vfiprintf_r>
 8008616:	b003      	add	sp, #12
 8008618:	f85d eb04 	ldr.w	lr, [sp], #4
 800861c:	b004      	add	sp, #16
 800861e:	4770      	bx	lr
 8008620:	20000048 	.word	0x20000048

08008624 <_puts_r>:
 8008624:	6a03      	ldr	r3, [r0, #32]
 8008626:	b570      	push	{r4, r5, r6, lr}
 8008628:	4605      	mov	r5, r0
 800862a:	460e      	mov	r6, r1
 800862c:	6884      	ldr	r4, [r0, #8]
 800862e:	b90b      	cbnz	r3, 8008634 <_puts_r+0x10>
 8008630:	f7ff ffb0 	bl	8008594 <__sinit>
 8008634:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008636:	07db      	lsls	r3, r3, #31
 8008638:	d405      	bmi.n	8008646 <_puts_r+0x22>
 800863a:	89a3      	ldrh	r3, [r4, #12]
 800863c:	0598      	lsls	r0, r3, #22
 800863e:	d402      	bmi.n	8008646 <_puts_r+0x22>
 8008640:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008642:	f000 fa52 	bl	8008aea <__retarget_lock_acquire_recursive>
 8008646:	89a3      	ldrh	r3, [r4, #12]
 8008648:	0719      	lsls	r1, r3, #28
 800864a:	d502      	bpl.n	8008652 <_puts_r+0x2e>
 800864c:	6923      	ldr	r3, [r4, #16]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d135      	bne.n	80086be <_puts_r+0x9a>
 8008652:	4621      	mov	r1, r4
 8008654:	4628      	mov	r0, r5
 8008656:	f000 f979 	bl	800894c <__swsetup_r>
 800865a:	b380      	cbz	r0, 80086be <_puts_r+0x9a>
 800865c:	f04f 35ff 	mov.w	r5, #4294967295
 8008660:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008662:	07da      	lsls	r2, r3, #31
 8008664:	d405      	bmi.n	8008672 <_puts_r+0x4e>
 8008666:	89a3      	ldrh	r3, [r4, #12]
 8008668:	059b      	lsls	r3, r3, #22
 800866a:	d402      	bmi.n	8008672 <_puts_r+0x4e>
 800866c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800866e:	f000 fa3d 	bl	8008aec <__retarget_lock_release_recursive>
 8008672:	4628      	mov	r0, r5
 8008674:	bd70      	pop	{r4, r5, r6, pc}
 8008676:	2b00      	cmp	r3, #0
 8008678:	da04      	bge.n	8008684 <_puts_r+0x60>
 800867a:	69a2      	ldr	r2, [r4, #24]
 800867c:	429a      	cmp	r2, r3
 800867e:	dc17      	bgt.n	80086b0 <_puts_r+0x8c>
 8008680:	290a      	cmp	r1, #10
 8008682:	d015      	beq.n	80086b0 <_puts_r+0x8c>
 8008684:	6823      	ldr	r3, [r4, #0]
 8008686:	1c5a      	adds	r2, r3, #1
 8008688:	6022      	str	r2, [r4, #0]
 800868a:	7019      	strb	r1, [r3, #0]
 800868c:	68a3      	ldr	r3, [r4, #8]
 800868e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008692:	3b01      	subs	r3, #1
 8008694:	60a3      	str	r3, [r4, #8]
 8008696:	2900      	cmp	r1, #0
 8008698:	d1ed      	bne.n	8008676 <_puts_r+0x52>
 800869a:	2b00      	cmp	r3, #0
 800869c:	da11      	bge.n	80086c2 <_puts_r+0x9e>
 800869e:	4622      	mov	r2, r4
 80086a0:	210a      	movs	r1, #10
 80086a2:	4628      	mov	r0, r5
 80086a4:	f000 f913 	bl	80088ce <__swbuf_r>
 80086a8:	3001      	adds	r0, #1
 80086aa:	d0d7      	beq.n	800865c <_puts_r+0x38>
 80086ac:	250a      	movs	r5, #10
 80086ae:	e7d7      	b.n	8008660 <_puts_r+0x3c>
 80086b0:	4622      	mov	r2, r4
 80086b2:	4628      	mov	r0, r5
 80086b4:	f000 f90b 	bl	80088ce <__swbuf_r>
 80086b8:	3001      	adds	r0, #1
 80086ba:	d1e7      	bne.n	800868c <_puts_r+0x68>
 80086bc:	e7ce      	b.n	800865c <_puts_r+0x38>
 80086be:	3e01      	subs	r6, #1
 80086c0:	e7e4      	b.n	800868c <_puts_r+0x68>
 80086c2:	6823      	ldr	r3, [r4, #0]
 80086c4:	1c5a      	adds	r2, r3, #1
 80086c6:	6022      	str	r2, [r4, #0]
 80086c8:	220a      	movs	r2, #10
 80086ca:	701a      	strb	r2, [r3, #0]
 80086cc:	e7ee      	b.n	80086ac <_puts_r+0x88>
	...

080086d0 <puts>:
 80086d0:	4b02      	ldr	r3, [pc, #8]	@ (80086dc <puts+0xc>)
 80086d2:	4601      	mov	r1, r0
 80086d4:	6818      	ldr	r0, [r3, #0]
 80086d6:	f7ff bfa5 	b.w	8008624 <_puts_r>
 80086da:	bf00      	nop
 80086dc:	20000048 	.word	0x20000048

080086e0 <setvbuf>:
 80086e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80086e4:	461d      	mov	r5, r3
 80086e6:	4b57      	ldr	r3, [pc, #348]	@ (8008844 <setvbuf+0x164>)
 80086e8:	4604      	mov	r4, r0
 80086ea:	681f      	ldr	r7, [r3, #0]
 80086ec:	460e      	mov	r6, r1
 80086ee:	4690      	mov	r8, r2
 80086f0:	b127      	cbz	r7, 80086fc <setvbuf+0x1c>
 80086f2:	6a3b      	ldr	r3, [r7, #32]
 80086f4:	b913      	cbnz	r3, 80086fc <setvbuf+0x1c>
 80086f6:	4638      	mov	r0, r7
 80086f8:	f7ff ff4c 	bl	8008594 <__sinit>
 80086fc:	f1b8 0f02 	cmp.w	r8, #2
 8008700:	d006      	beq.n	8008710 <setvbuf+0x30>
 8008702:	f1b8 0f01 	cmp.w	r8, #1
 8008706:	f200 809a 	bhi.w	800883e <setvbuf+0x15e>
 800870a:	2d00      	cmp	r5, #0
 800870c:	f2c0 8097 	blt.w	800883e <setvbuf+0x15e>
 8008710:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008712:	07d9      	lsls	r1, r3, #31
 8008714:	d405      	bmi.n	8008722 <setvbuf+0x42>
 8008716:	89a3      	ldrh	r3, [r4, #12]
 8008718:	059a      	lsls	r2, r3, #22
 800871a:	d402      	bmi.n	8008722 <setvbuf+0x42>
 800871c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800871e:	f000 f9e4 	bl	8008aea <__retarget_lock_acquire_recursive>
 8008722:	4621      	mov	r1, r4
 8008724:	4638      	mov	r0, r7
 8008726:	f000 fe41 	bl	80093ac <_fflush_r>
 800872a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800872c:	b141      	cbz	r1, 8008740 <setvbuf+0x60>
 800872e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008732:	4299      	cmp	r1, r3
 8008734:	d002      	beq.n	800873c <setvbuf+0x5c>
 8008736:	4638      	mov	r0, r7
 8008738:	f000 f9e8 	bl	8008b0c <_free_r>
 800873c:	2300      	movs	r3, #0
 800873e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008740:	2300      	movs	r3, #0
 8008742:	61a3      	str	r3, [r4, #24]
 8008744:	6063      	str	r3, [r4, #4]
 8008746:	89a3      	ldrh	r3, [r4, #12]
 8008748:	061b      	lsls	r3, r3, #24
 800874a:	d503      	bpl.n	8008754 <setvbuf+0x74>
 800874c:	4638      	mov	r0, r7
 800874e:	6921      	ldr	r1, [r4, #16]
 8008750:	f000 f9dc 	bl	8008b0c <_free_r>
 8008754:	89a3      	ldrh	r3, [r4, #12]
 8008756:	f1b8 0f02 	cmp.w	r8, #2
 800875a:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800875e:	f023 0303 	bic.w	r3, r3, #3
 8008762:	81a3      	strh	r3, [r4, #12]
 8008764:	d061      	beq.n	800882a <setvbuf+0x14a>
 8008766:	ab01      	add	r3, sp, #4
 8008768:	466a      	mov	r2, sp
 800876a:	4621      	mov	r1, r4
 800876c:	4638      	mov	r0, r7
 800876e:	f000 fe45 	bl	80093fc <__swhatbuf_r>
 8008772:	89a3      	ldrh	r3, [r4, #12]
 8008774:	4318      	orrs	r0, r3
 8008776:	81a0      	strh	r0, [r4, #12]
 8008778:	bb2d      	cbnz	r5, 80087c6 <setvbuf+0xe6>
 800877a:	9d00      	ldr	r5, [sp, #0]
 800877c:	4628      	mov	r0, r5
 800877e:	f000 fa0d 	bl	8008b9c <malloc>
 8008782:	4606      	mov	r6, r0
 8008784:	2800      	cmp	r0, #0
 8008786:	d152      	bne.n	800882e <setvbuf+0x14e>
 8008788:	f8dd 9000 	ldr.w	r9, [sp]
 800878c:	45a9      	cmp	r9, r5
 800878e:	d140      	bne.n	8008812 <setvbuf+0x132>
 8008790:	f04f 35ff 	mov.w	r5, #4294967295
 8008794:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008798:	f043 0202 	orr.w	r2, r3, #2
 800879c:	81a2      	strh	r2, [r4, #12]
 800879e:	2200      	movs	r2, #0
 80087a0:	60a2      	str	r2, [r4, #8]
 80087a2:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 80087a6:	6022      	str	r2, [r4, #0]
 80087a8:	6122      	str	r2, [r4, #16]
 80087aa:	2201      	movs	r2, #1
 80087ac:	6162      	str	r2, [r4, #20]
 80087ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80087b0:	07d6      	lsls	r6, r2, #31
 80087b2:	d404      	bmi.n	80087be <setvbuf+0xde>
 80087b4:	0598      	lsls	r0, r3, #22
 80087b6:	d402      	bmi.n	80087be <setvbuf+0xde>
 80087b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087ba:	f000 f997 	bl	8008aec <__retarget_lock_release_recursive>
 80087be:	4628      	mov	r0, r5
 80087c0:	b003      	add	sp, #12
 80087c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80087c6:	2e00      	cmp	r6, #0
 80087c8:	d0d8      	beq.n	800877c <setvbuf+0x9c>
 80087ca:	6a3b      	ldr	r3, [r7, #32]
 80087cc:	b913      	cbnz	r3, 80087d4 <setvbuf+0xf4>
 80087ce:	4638      	mov	r0, r7
 80087d0:	f7ff fee0 	bl	8008594 <__sinit>
 80087d4:	f1b8 0f01 	cmp.w	r8, #1
 80087d8:	bf08      	it	eq
 80087da:	89a3      	ldrheq	r3, [r4, #12]
 80087dc:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80087e0:	bf04      	itt	eq
 80087e2:	f043 0301 	orreq.w	r3, r3, #1
 80087e6:	81a3      	strheq	r3, [r4, #12]
 80087e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087ec:	6026      	str	r6, [r4, #0]
 80087ee:	f013 0208 	ands.w	r2, r3, #8
 80087f2:	d01e      	beq.n	8008832 <setvbuf+0x152>
 80087f4:	07d9      	lsls	r1, r3, #31
 80087f6:	bf41      	itttt	mi
 80087f8:	2200      	movmi	r2, #0
 80087fa:	426d      	negmi	r5, r5
 80087fc:	60a2      	strmi	r2, [r4, #8]
 80087fe:	61a5      	strmi	r5, [r4, #24]
 8008800:	bf58      	it	pl
 8008802:	60a5      	strpl	r5, [r4, #8]
 8008804:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008806:	07d2      	lsls	r2, r2, #31
 8008808:	d401      	bmi.n	800880e <setvbuf+0x12e>
 800880a:	059b      	lsls	r3, r3, #22
 800880c:	d513      	bpl.n	8008836 <setvbuf+0x156>
 800880e:	2500      	movs	r5, #0
 8008810:	e7d5      	b.n	80087be <setvbuf+0xde>
 8008812:	4648      	mov	r0, r9
 8008814:	f000 f9c2 	bl	8008b9c <malloc>
 8008818:	4606      	mov	r6, r0
 800881a:	2800      	cmp	r0, #0
 800881c:	d0b8      	beq.n	8008790 <setvbuf+0xb0>
 800881e:	89a3      	ldrh	r3, [r4, #12]
 8008820:	464d      	mov	r5, r9
 8008822:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008826:	81a3      	strh	r3, [r4, #12]
 8008828:	e7cf      	b.n	80087ca <setvbuf+0xea>
 800882a:	2500      	movs	r5, #0
 800882c:	e7b2      	b.n	8008794 <setvbuf+0xb4>
 800882e:	46a9      	mov	r9, r5
 8008830:	e7f5      	b.n	800881e <setvbuf+0x13e>
 8008832:	60a2      	str	r2, [r4, #8]
 8008834:	e7e6      	b.n	8008804 <setvbuf+0x124>
 8008836:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008838:	f000 f958 	bl	8008aec <__retarget_lock_release_recursive>
 800883c:	e7e7      	b.n	800880e <setvbuf+0x12e>
 800883e:	f04f 35ff 	mov.w	r5, #4294967295
 8008842:	e7bc      	b.n	80087be <setvbuf+0xde>
 8008844:	20000048 	.word	0x20000048

08008848 <__sread>:
 8008848:	b510      	push	{r4, lr}
 800884a:	460c      	mov	r4, r1
 800884c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008850:	f000 f8fc 	bl	8008a4c <_read_r>
 8008854:	2800      	cmp	r0, #0
 8008856:	bfab      	itete	ge
 8008858:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800885a:	89a3      	ldrhlt	r3, [r4, #12]
 800885c:	181b      	addge	r3, r3, r0
 800885e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008862:	bfac      	ite	ge
 8008864:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008866:	81a3      	strhlt	r3, [r4, #12]
 8008868:	bd10      	pop	{r4, pc}

0800886a <__swrite>:
 800886a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800886e:	461f      	mov	r7, r3
 8008870:	898b      	ldrh	r3, [r1, #12]
 8008872:	4605      	mov	r5, r0
 8008874:	05db      	lsls	r3, r3, #23
 8008876:	460c      	mov	r4, r1
 8008878:	4616      	mov	r6, r2
 800887a:	d505      	bpl.n	8008888 <__swrite+0x1e>
 800887c:	2302      	movs	r3, #2
 800887e:	2200      	movs	r2, #0
 8008880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008884:	f000 f8d0 	bl	8008a28 <_lseek_r>
 8008888:	89a3      	ldrh	r3, [r4, #12]
 800888a:	4632      	mov	r2, r6
 800888c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008890:	81a3      	strh	r3, [r4, #12]
 8008892:	4628      	mov	r0, r5
 8008894:	463b      	mov	r3, r7
 8008896:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800889a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800889e:	f000 b8e7 	b.w	8008a70 <_write_r>

080088a2 <__sseek>:
 80088a2:	b510      	push	{r4, lr}
 80088a4:	460c      	mov	r4, r1
 80088a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088aa:	f000 f8bd 	bl	8008a28 <_lseek_r>
 80088ae:	1c43      	adds	r3, r0, #1
 80088b0:	89a3      	ldrh	r3, [r4, #12]
 80088b2:	bf15      	itete	ne
 80088b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80088b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80088ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80088be:	81a3      	strheq	r3, [r4, #12]
 80088c0:	bf18      	it	ne
 80088c2:	81a3      	strhne	r3, [r4, #12]
 80088c4:	bd10      	pop	{r4, pc}

080088c6 <__sclose>:
 80088c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088ca:	f000 b89d 	b.w	8008a08 <_close_r>

080088ce <__swbuf_r>:
 80088ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088d0:	460e      	mov	r6, r1
 80088d2:	4614      	mov	r4, r2
 80088d4:	4605      	mov	r5, r0
 80088d6:	b118      	cbz	r0, 80088e0 <__swbuf_r+0x12>
 80088d8:	6a03      	ldr	r3, [r0, #32]
 80088da:	b90b      	cbnz	r3, 80088e0 <__swbuf_r+0x12>
 80088dc:	f7ff fe5a 	bl	8008594 <__sinit>
 80088e0:	69a3      	ldr	r3, [r4, #24]
 80088e2:	60a3      	str	r3, [r4, #8]
 80088e4:	89a3      	ldrh	r3, [r4, #12]
 80088e6:	071a      	lsls	r2, r3, #28
 80088e8:	d501      	bpl.n	80088ee <__swbuf_r+0x20>
 80088ea:	6923      	ldr	r3, [r4, #16]
 80088ec:	b943      	cbnz	r3, 8008900 <__swbuf_r+0x32>
 80088ee:	4621      	mov	r1, r4
 80088f0:	4628      	mov	r0, r5
 80088f2:	f000 f82b 	bl	800894c <__swsetup_r>
 80088f6:	b118      	cbz	r0, 8008900 <__swbuf_r+0x32>
 80088f8:	f04f 37ff 	mov.w	r7, #4294967295
 80088fc:	4638      	mov	r0, r7
 80088fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008900:	6823      	ldr	r3, [r4, #0]
 8008902:	6922      	ldr	r2, [r4, #16]
 8008904:	b2f6      	uxtb	r6, r6
 8008906:	1a98      	subs	r0, r3, r2
 8008908:	6963      	ldr	r3, [r4, #20]
 800890a:	4637      	mov	r7, r6
 800890c:	4283      	cmp	r3, r0
 800890e:	dc05      	bgt.n	800891c <__swbuf_r+0x4e>
 8008910:	4621      	mov	r1, r4
 8008912:	4628      	mov	r0, r5
 8008914:	f000 fd4a 	bl	80093ac <_fflush_r>
 8008918:	2800      	cmp	r0, #0
 800891a:	d1ed      	bne.n	80088f8 <__swbuf_r+0x2a>
 800891c:	68a3      	ldr	r3, [r4, #8]
 800891e:	3b01      	subs	r3, #1
 8008920:	60a3      	str	r3, [r4, #8]
 8008922:	6823      	ldr	r3, [r4, #0]
 8008924:	1c5a      	adds	r2, r3, #1
 8008926:	6022      	str	r2, [r4, #0]
 8008928:	701e      	strb	r6, [r3, #0]
 800892a:	6962      	ldr	r2, [r4, #20]
 800892c:	1c43      	adds	r3, r0, #1
 800892e:	429a      	cmp	r2, r3
 8008930:	d004      	beq.n	800893c <__swbuf_r+0x6e>
 8008932:	89a3      	ldrh	r3, [r4, #12]
 8008934:	07db      	lsls	r3, r3, #31
 8008936:	d5e1      	bpl.n	80088fc <__swbuf_r+0x2e>
 8008938:	2e0a      	cmp	r6, #10
 800893a:	d1df      	bne.n	80088fc <__swbuf_r+0x2e>
 800893c:	4621      	mov	r1, r4
 800893e:	4628      	mov	r0, r5
 8008940:	f000 fd34 	bl	80093ac <_fflush_r>
 8008944:	2800      	cmp	r0, #0
 8008946:	d0d9      	beq.n	80088fc <__swbuf_r+0x2e>
 8008948:	e7d6      	b.n	80088f8 <__swbuf_r+0x2a>
	...

0800894c <__swsetup_r>:
 800894c:	b538      	push	{r3, r4, r5, lr}
 800894e:	4b29      	ldr	r3, [pc, #164]	@ (80089f4 <__swsetup_r+0xa8>)
 8008950:	4605      	mov	r5, r0
 8008952:	6818      	ldr	r0, [r3, #0]
 8008954:	460c      	mov	r4, r1
 8008956:	b118      	cbz	r0, 8008960 <__swsetup_r+0x14>
 8008958:	6a03      	ldr	r3, [r0, #32]
 800895a:	b90b      	cbnz	r3, 8008960 <__swsetup_r+0x14>
 800895c:	f7ff fe1a 	bl	8008594 <__sinit>
 8008960:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008964:	0719      	lsls	r1, r3, #28
 8008966:	d422      	bmi.n	80089ae <__swsetup_r+0x62>
 8008968:	06da      	lsls	r2, r3, #27
 800896a:	d407      	bmi.n	800897c <__swsetup_r+0x30>
 800896c:	2209      	movs	r2, #9
 800896e:	602a      	str	r2, [r5, #0]
 8008970:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008974:	f04f 30ff 	mov.w	r0, #4294967295
 8008978:	81a3      	strh	r3, [r4, #12]
 800897a:	e033      	b.n	80089e4 <__swsetup_r+0x98>
 800897c:	0758      	lsls	r0, r3, #29
 800897e:	d512      	bpl.n	80089a6 <__swsetup_r+0x5a>
 8008980:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008982:	b141      	cbz	r1, 8008996 <__swsetup_r+0x4a>
 8008984:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008988:	4299      	cmp	r1, r3
 800898a:	d002      	beq.n	8008992 <__swsetup_r+0x46>
 800898c:	4628      	mov	r0, r5
 800898e:	f000 f8bd 	bl	8008b0c <_free_r>
 8008992:	2300      	movs	r3, #0
 8008994:	6363      	str	r3, [r4, #52]	@ 0x34
 8008996:	89a3      	ldrh	r3, [r4, #12]
 8008998:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800899c:	81a3      	strh	r3, [r4, #12]
 800899e:	2300      	movs	r3, #0
 80089a0:	6063      	str	r3, [r4, #4]
 80089a2:	6923      	ldr	r3, [r4, #16]
 80089a4:	6023      	str	r3, [r4, #0]
 80089a6:	89a3      	ldrh	r3, [r4, #12]
 80089a8:	f043 0308 	orr.w	r3, r3, #8
 80089ac:	81a3      	strh	r3, [r4, #12]
 80089ae:	6923      	ldr	r3, [r4, #16]
 80089b0:	b94b      	cbnz	r3, 80089c6 <__swsetup_r+0x7a>
 80089b2:	89a3      	ldrh	r3, [r4, #12]
 80089b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80089b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089bc:	d003      	beq.n	80089c6 <__swsetup_r+0x7a>
 80089be:	4621      	mov	r1, r4
 80089c0:	4628      	mov	r0, r5
 80089c2:	f000 fd40 	bl	8009446 <__smakebuf_r>
 80089c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089ca:	f013 0201 	ands.w	r2, r3, #1
 80089ce:	d00a      	beq.n	80089e6 <__swsetup_r+0x9a>
 80089d0:	2200      	movs	r2, #0
 80089d2:	60a2      	str	r2, [r4, #8]
 80089d4:	6962      	ldr	r2, [r4, #20]
 80089d6:	4252      	negs	r2, r2
 80089d8:	61a2      	str	r2, [r4, #24]
 80089da:	6922      	ldr	r2, [r4, #16]
 80089dc:	b942      	cbnz	r2, 80089f0 <__swsetup_r+0xa4>
 80089de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80089e2:	d1c5      	bne.n	8008970 <__swsetup_r+0x24>
 80089e4:	bd38      	pop	{r3, r4, r5, pc}
 80089e6:	0799      	lsls	r1, r3, #30
 80089e8:	bf58      	it	pl
 80089ea:	6962      	ldrpl	r2, [r4, #20]
 80089ec:	60a2      	str	r2, [r4, #8]
 80089ee:	e7f4      	b.n	80089da <__swsetup_r+0x8e>
 80089f0:	2000      	movs	r0, #0
 80089f2:	e7f7      	b.n	80089e4 <__swsetup_r+0x98>
 80089f4:	20000048 	.word	0x20000048

080089f8 <memset>:
 80089f8:	4603      	mov	r3, r0
 80089fa:	4402      	add	r2, r0
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d100      	bne.n	8008a02 <memset+0xa>
 8008a00:	4770      	bx	lr
 8008a02:	f803 1b01 	strb.w	r1, [r3], #1
 8008a06:	e7f9      	b.n	80089fc <memset+0x4>

08008a08 <_close_r>:
 8008a08:	b538      	push	{r3, r4, r5, lr}
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	4d05      	ldr	r5, [pc, #20]	@ (8008a24 <_close_r+0x1c>)
 8008a0e:	4604      	mov	r4, r0
 8008a10:	4608      	mov	r0, r1
 8008a12:	602b      	str	r3, [r5, #0]
 8008a14:	f7fa face 	bl	8002fb4 <_close>
 8008a18:	1c43      	adds	r3, r0, #1
 8008a1a:	d102      	bne.n	8008a22 <_close_r+0x1a>
 8008a1c:	682b      	ldr	r3, [r5, #0]
 8008a1e:	b103      	cbz	r3, 8008a22 <_close_r+0x1a>
 8008a20:	6023      	str	r3, [r4, #0]
 8008a22:	bd38      	pop	{r3, r4, r5, pc}
 8008a24:	200003ec 	.word	0x200003ec

08008a28 <_lseek_r>:
 8008a28:	b538      	push	{r3, r4, r5, lr}
 8008a2a:	4604      	mov	r4, r0
 8008a2c:	4608      	mov	r0, r1
 8008a2e:	4611      	mov	r1, r2
 8008a30:	2200      	movs	r2, #0
 8008a32:	4d05      	ldr	r5, [pc, #20]	@ (8008a48 <_lseek_r+0x20>)
 8008a34:	602a      	str	r2, [r5, #0]
 8008a36:	461a      	mov	r2, r3
 8008a38:	f7fa fae0 	bl	8002ffc <_lseek>
 8008a3c:	1c43      	adds	r3, r0, #1
 8008a3e:	d102      	bne.n	8008a46 <_lseek_r+0x1e>
 8008a40:	682b      	ldr	r3, [r5, #0]
 8008a42:	b103      	cbz	r3, 8008a46 <_lseek_r+0x1e>
 8008a44:	6023      	str	r3, [r4, #0]
 8008a46:	bd38      	pop	{r3, r4, r5, pc}
 8008a48:	200003ec 	.word	0x200003ec

08008a4c <_read_r>:
 8008a4c:	b538      	push	{r3, r4, r5, lr}
 8008a4e:	4604      	mov	r4, r0
 8008a50:	4608      	mov	r0, r1
 8008a52:	4611      	mov	r1, r2
 8008a54:	2200      	movs	r2, #0
 8008a56:	4d05      	ldr	r5, [pc, #20]	@ (8008a6c <_read_r+0x20>)
 8008a58:	602a      	str	r2, [r5, #0]
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	f7fa fdd0 	bl	8003600 <_read>
 8008a60:	1c43      	adds	r3, r0, #1
 8008a62:	d102      	bne.n	8008a6a <_read_r+0x1e>
 8008a64:	682b      	ldr	r3, [r5, #0]
 8008a66:	b103      	cbz	r3, 8008a6a <_read_r+0x1e>
 8008a68:	6023      	str	r3, [r4, #0]
 8008a6a:	bd38      	pop	{r3, r4, r5, pc}
 8008a6c:	200003ec 	.word	0x200003ec

08008a70 <_write_r>:
 8008a70:	b538      	push	{r3, r4, r5, lr}
 8008a72:	4604      	mov	r4, r0
 8008a74:	4608      	mov	r0, r1
 8008a76:	4611      	mov	r1, r2
 8008a78:	2200      	movs	r2, #0
 8008a7a:	4d05      	ldr	r5, [pc, #20]	@ (8008a90 <_write_r+0x20>)
 8008a7c:	602a      	str	r2, [r5, #0]
 8008a7e:	461a      	mov	r2, r3
 8008a80:	f7fa fd92 	bl	80035a8 <_write>
 8008a84:	1c43      	adds	r3, r0, #1
 8008a86:	d102      	bne.n	8008a8e <_write_r+0x1e>
 8008a88:	682b      	ldr	r3, [r5, #0]
 8008a8a:	b103      	cbz	r3, 8008a8e <_write_r+0x1e>
 8008a8c:	6023      	str	r3, [r4, #0]
 8008a8e:	bd38      	pop	{r3, r4, r5, pc}
 8008a90:	200003ec 	.word	0x200003ec

08008a94 <__errno>:
 8008a94:	4b01      	ldr	r3, [pc, #4]	@ (8008a9c <__errno+0x8>)
 8008a96:	6818      	ldr	r0, [r3, #0]
 8008a98:	4770      	bx	lr
 8008a9a:	bf00      	nop
 8008a9c:	20000048 	.word	0x20000048

08008aa0 <__libc_init_array>:
 8008aa0:	b570      	push	{r4, r5, r6, lr}
 8008aa2:	2600      	movs	r6, #0
 8008aa4:	4d0c      	ldr	r5, [pc, #48]	@ (8008ad8 <__libc_init_array+0x38>)
 8008aa6:	4c0d      	ldr	r4, [pc, #52]	@ (8008adc <__libc_init_array+0x3c>)
 8008aa8:	1b64      	subs	r4, r4, r5
 8008aaa:	10a4      	asrs	r4, r4, #2
 8008aac:	42a6      	cmp	r6, r4
 8008aae:	d109      	bne.n	8008ac4 <__libc_init_array+0x24>
 8008ab0:	f000 fd46 	bl	8009540 <_init>
 8008ab4:	2600      	movs	r6, #0
 8008ab6:	4d0a      	ldr	r5, [pc, #40]	@ (8008ae0 <__libc_init_array+0x40>)
 8008ab8:	4c0a      	ldr	r4, [pc, #40]	@ (8008ae4 <__libc_init_array+0x44>)
 8008aba:	1b64      	subs	r4, r4, r5
 8008abc:	10a4      	asrs	r4, r4, #2
 8008abe:	42a6      	cmp	r6, r4
 8008ac0:	d105      	bne.n	8008ace <__libc_init_array+0x2e>
 8008ac2:	bd70      	pop	{r4, r5, r6, pc}
 8008ac4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ac8:	4798      	blx	r3
 8008aca:	3601      	adds	r6, #1
 8008acc:	e7ee      	b.n	8008aac <__libc_init_array+0xc>
 8008ace:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ad2:	4798      	blx	r3
 8008ad4:	3601      	adds	r6, #1
 8008ad6:	e7f2      	b.n	8008abe <__libc_init_array+0x1e>
 8008ad8:	0800a4d0 	.word	0x0800a4d0
 8008adc:	0800a4d0 	.word	0x0800a4d0
 8008ae0:	0800a4d0 	.word	0x0800a4d0
 8008ae4:	0800a4d4 	.word	0x0800a4d4

08008ae8 <__retarget_lock_init_recursive>:
 8008ae8:	4770      	bx	lr

08008aea <__retarget_lock_acquire_recursive>:
 8008aea:	4770      	bx	lr

08008aec <__retarget_lock_release_recursive>:
 8008aec:	4770      	bx	lr

08008aee <memcpy>:
 8008aee:	440a      	add	r2, r1
 8008af0:	4291      	cmp	r1, r2
 8008af2:	f100 33ff 	add.w	r3, r0, #4294967295
 8008af6:	d100      	bne.n	8008afa <memcpy+0xc>
 8008af8:	4770      	bx	lr
 8008afa:	b510      	push	{r4, lr}
 8008afc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b00:	4291      	cmp	r1, r2
 8008b02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b06:	d1f9      	bne.n	8008afc <memcpy+0xe>
 8008b08:	bd10      	pop	{r4, pc}
	...

08008b0c <_free_r>:
 8008b0c:	b538      	push	{r3, r4, r5, lr}
 8008b0e:	4605      	mov	r5, r0
 8008b10:	2900      	cmp	r1, #0
 8008b12:	d040      	beq.n	8008b96 <_free_r+0x8a>
 8008b14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b18:	1f0c      	subs	r4, r1, #4
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	bfb8      	it	lt
 8008b1e:	18e4      	addlt	r4, r4, r3
 8008b20:	f000 f8e6 	bl	8008cf0 <__malloc_lock>
 8008b24:	4a1c      	ldr	r2, [pc, #112]	@ (8008b98 <_free_r+0x8c>)
 8008b26:	6813      	ldr	r3, [r2, #0]
 8008b28:	b933      	cbnz	r3, 8008b38 <_free_r+0x2c>
 8008b2a:	6063      	str	r3, [r4, #4]
 8008b2c:	6014      	str	r4, [r2, #0]
 8008b2e:	4628      	mov	r0, r5
 8008b30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b34:	f000 b8e2 	b.w	8008cfc <__malloc_unlock>
 8008b38:	42a3      	cmp	r3, r4
 8008b3a:	d908      	bls.n	8008b4e <_free_r+0x42>
 8008b3c:	6820      	ldr	r0, [r4, #0]
 8008b3e:	1821      	adds	r1, r4, r0
 8008b40:	428b      	cmp	r3, r1
 8008b42:	bf01      	itttt	eq
 8008b44:	6819      	ldreq	r1, [r3, #0]
 8008b46:	685b      	ldreq	r3, [r3, #4]
 8008b48:	1809      	addeq	r1, r1, r0
 8008b4a:	6021      	streq	r1, [r4, #0]
 8008b4c:	e7ed      	b.n	8008b2a <_free_r+0x1e>
 8008b4e:	461a      	mov	r2, r3
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	b10b      	cbz	r3, 8008b58 <_free_r+0x4c>
 8008b54:	42a3      	cmp	r3, r4
 8008b56:	d9fa      	bls.n	8008b4e <_free_r+0x42>
 8008b58:	6811      	ldr	r1, [r2, #0]
 8008b5a:	1850      	adds	r0, r2, r1
 8008b5c:	42a0      	cmp	r0, r4
 8008b5e:	d10b      	bne.n	8008b78 <_free_r+0x6c>
 8008b60:	6820      	ldr	r0, [r4, #0]
 8008b62:	4401      	add	r1, r0
 8008b64:	1850      	adds	r0, r2, r1
 8008b66:	4283      	cmp	r3, r0
 8008b68:	6011      	str	r1, [r2, #0]
 8008b6a:	d1e0      	bne.n	8008b2e <_free_r+0x22>
 8008b6c:	6818      	ldr	r0, [r3, #0]
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	4408      	add	r0, r1
 8008b72:	6010      	str	r0, [r2, #0]
 8008b74:	6053      	str	r3, [r2, #4]
 8008b76:	e7da      	b.n	8008b2e <_free_r+0x22>
 8008b78:	d902      	bls.n	8008b80 <_free_r+0x74>
 8008b7a:	230c      	movs	r3, #12
 8008b7c:	602b      	str	r3, [r5, #0]
 8008b7e:	e7d6      	b.n	8008b2e <_free_r+0x22>
 8008b80:	6820      	ldr	r0, [r4, #0]
 8008b82:	1821      	adds	r1, r4, r0
 8008b84:	428b      	cmp	r3, r1
 8008b86:	bf01      	itttt	eq
 8008b88:	6819      	ldreq	r1, [r3, #0]
 8008b8a:	685b      	ldreq	r3, [r3, #4]
 8008b8c:	1809      	addeq	r1, r1, r0
 8008b8e:	6021      	streq	r1, [r4, #0]
 8008b90:	6063      	str	r3, [r4, #4]
 8008b92:	6054      	str	r4, [r2, #4]
 8008b94:	e7cb      	b.n	8008b2e <_free_r+0x22>
 8008b96:	bd38      	pop	{r3, r4, r5, pc}
 8008b98:	200003f8 	.word	0x200003f8

08008b9c <malloc>:
 8008b9c:	4b02      	ldr	r3, [pc, #8]	@ (8008ba8 <malloc+0xc>)
 8008b9e:	4601      	mov	r1, r0
 8008ba0:	6818      	ldr	r0, [r3, #0]
 8008ba2:	f000 b825 	b.w	8008bf0 <_malloc_r>
 8008ba6:	bf00      	nop
 8008ba8:	20000048 	.word	0x20000048

08008bac <sbrk_aligned>:
 8008bac:	b570      	push	{r4, r5, r6, lr}
 8008bae:	4e0f      	ldr	r6, [pc, #60]	@ (8008bec <sbrk_aligned+0x40>)
 8008bb0:	460c      	mov	r4, r1
 8008bb2:	6831      	ldr	r1, [r6, #0]
 8008bb4:	4605      	mov	r5, r0
 8008bb6:	b911      	cbnz	r1, 8008bbe <sbrk_aligned+0x12>
 8008bb8:	f000 fca4 	bl	8009504 <_sbrk_r>
 8008bbc:	6030      	str	r0, [r6, #0]
 8008bbe:	4621      	mov	r1, r4
 8008bc0:	4628      	mov	r0, r5
 8008bc2:	f000 fc9f 	bl	8009504 <_sbrk_r>
 8008bc6:	1c43      	adds	r3, r0, #1
 8008bc8:	d103      	bne.n	8008bd2 <sbrk_aligned+0x26>
 8008bca:	f04f 34ff 	mov.w	r4, #4294967295
 8008bce:	4620      	mov	r0, r4
 8008bd0:	bd70      	pop	{r4, r5, r6, pc}
 8008bd2:	1cc4      	adds	r4, r0, #3
 8008bd4:	f024 0403 	bic.w	r4, r4, #3
 8008bd8:	42a0      	cmp	r0, r4
 8008bda:	d0f8      	beq.n	8008bce <sbrk_aligned+0x22>
 8008bdc:	1a21      	subs	r1, r4, r0
 8008bde:	4628      	mov	r0, r5
 8008be0:	f000 fc90 	bl	8009504 <_sbrk_r>
 8008be4:	3001      	adds	r0, #1
 8008be6:	d1f2      	bne.n	8008bce <sbrk_aligned+0x22>
 8008be8:	e7ef      	b.n	8008bca <sbrk_aligned+0x1e>
 8008bea:	bf00      	nop
 8008bec:	200003f4 	.word	0x200003f4

08008bf0 <_malloc_r>:
 8008bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bf4:	1ccd      	adds	r5, r1, #3
 8008bf6:	f025 0503 	bic.w	r5, r5, #3
 8008bfa:	3508      	adds	r5, #8
 8008bfc:	2d0c      	cmp	r5, #12
 8008bfe:	bf38      	it	cc
 8008c00:	250c      	movcc	r5, #12
 8008c02:	2d00      	cmp	r5, #0
 8008c04:	4606      	mov	r6, r0
 8008c06:	db01      	blt.n	8008c0c <_malloc_r+0x1c>
 8008c08:	42a9      	cmp	r1, r5
 8008c0a:	d904      	bls.n	8008c16 <_malloc_r+0x26>
 8008c0c:	230c      	movs	r3, #12
 8008c0e:	6033      	str	r3, [r6, #0]
 8008c10:	2000      	movs	r0, #0
 8008c12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008cec <_malloc_r+0xfc>
 8008c1a:	f000 f869 	bl	8008cf0 <__malloc_lock>
 8008c1e:	f8d8 3000 	ldr.w	r3, [r8]
 8008c22:	461c      	mov	r4, r3
 8008c24:	bb44      	cbnz	r4, 8008c78 <_malloc_r+0x88>
 8008c26:	4629      	mov	r1, r5
 8008c28:	4630      	mov	r0, r6
 8008c2a:	f7ff ffbf 	bl	8008bac <sbrk_aligned>
 8008c2e:	1c43      	adds	r3, r0, #1
 8008c30:	4604      	mov	r4, r0
 8008c32:	d158      	bne.n	8008ce6 <_malloc_r+0xf6>
 8008c34:	f8d8 4000 	ldr.w	r4, [r8]
 8008c38:	4627      	mov	r7, r4
 8008c3a:	2f00      	cmp	r7, #0
 8008c3c:	d143      	bne.n	8008cc6 <_malloc_r+0xd6>
 8008c3e:	2c00      	cmp	r4, #0
 8008c40:	d04b      	beq.n	8008cda <_malloc_r+0xea>
 8008c42:	6823      	ldr	r3, [r4, #0]
 8008c44:	4639      	mov	r1, r7
 8008c46:	4630      	mov	r0, r6
 8008c48:	eb04 0903 	add.w	r9, r4, r3
 8008c4c:	f000 fc5a 	bl	8009504 <_sbrk_r>
 8008c50:	4581      	cmp	r9, r0
 8008c52:	d142      	bne.n	8008cda <_malloc_r+0xea>
 8008c54:	6821      	ldr	r1, [r4, #0]
 8008c56:	4630      	mov	r0, r6
 8008c58:	1a6d      	subs	r5, r5, r1
 8008c5a:	4629      	mov	r1, r5
 8008c5c:	f7ff ffa6 	bl	8008bac <sbrk_aligned>
 8008c60:	3001      	adds	r0, #1
 8008c62:	d03a      	beq.n	8008cda <_malloc_r+0xea>
 8008c64:	6823      	ldr	r3, [r4, #0]
 8008c66:	442b      	add	r3, r5
 8008c68:	6023      	str	r3, [r4, #0]
 8008c6a:	f8d8 3000 	ldr.w	r3, [r8]
 8008c6e:	685a      	ldr	r2, [r3, #4]
 8008c70:	bb62      	cbnz	r2, 8008ccc <_malloc_r+0xdc>
 8008c72:	f8c8 7000 	str.w	r7, [r8]
 8008c76:	e00f      	b.n	8008c98 <_malloc_r+0xa8>
 8008c78:	6822      	ldr	r2, [r4, #0]
 8008c7a:	1b52      	subs	r2, r2, r5
 8008c7c:	d420      	bmi.n	8008cc0 <_malloc_r+0xd0>
 8008c7e:	2a0b      	cmp	r2, #11
 8008c80:	d917      	bls.n	8008cb2 <_malloc_r+0xc2>
 8008c82:	1961      	adds	r1, r4, r5
 8008c84:	42a3      	cmp	r3, r4
 8008c86:	6025      	str	r5, [r4, #0]
 8008c88:	bf18      	it	ne
 8008c8a:	6059      	strne	r1, [r3, #4]
 8008c8c:	6863      	ldr	r3, [r4, #4]
 8008c8e:	bf08      	it	eq
 8008c90:	f8c8 1000 	streq.w	r1, [r8]
 8008c94:	5162      	str	r2, [r4, r5]
 8008c96:	604b      	str	r3, [r1, #4]
 8008c98:	4630      	mov	r0, r6
 8008c9a:	f000 f82f 	bl	8008cfc <__malloc_unlock>
 8008c9e:	f104 000b 	add.w	r0, r4, #11
 8008ca2:	1d23      	adds	r3, r4, #4
 8008ca4:	f020 0007 	bic.w	r0, r0, #7
 8008ca8:	1ac2      	subs	r2, r0, r3
 8008caa:	bf1c      	itt	ne
 8008cac:	1a1b      	subne	r3, r3, r0
 8008cae:	50a3      	strne	r3, [r4, r2]
 8008cb0:	e7af      	b.n	8008c12 <_malloc_r+0x22>
 8008cb2:	6862      	ldr	r2, [r4, #4]
 8008cb4:	42a3      	cmp	r3, r4
 8008cb6:	bf0c      	ite	eq
 8008cb8:	f8c8 2000 	streq.w	r2, [r8]
 8008cbc:	605a      	strne	r2, [r3, #4]
 8008cbe:	e7eb      	b.n	8008c98 <_malloc_r+0xa8>
 8008cc0:	4623      	mov	r3, r4
 8008cc2:	6864      	ldr	r4, [r4, #4]
 8008cc4:	e7ae      	b.n	8008c24 <_malloc_r+0x34>
 8008cc6:	463c      	mov	r4, r7
 8008cc8:	687f      	ldr	r7, [r7, #4]
 8008cca:	e7b6      	b.n	8008c3a <_malloc_r+0x4a>
 8008ccc:	461a      	mov	r2, r3
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	42a3      	cmp	r3, r4
 8008cd2:	d1fb      	bne.n	8008ccc <_malloc_r+0xdc>
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	6053      	str	r3, [r2, #4]
 8008cd8:	e7de      	b.n	8008c98 <_malloc_r+0xa8>
 8008cda:	230c      	movs	r3, #12
 8008cdc:	4630      	mov	r0, r6
 8008cde:	6033      	str	r3, [r6, #0]
 8008ce0:	f000 f80c 	bl	8008cfc <__malloc_unlock>
 8008ce4:	e794      	b.n	8008c10 <_malloc_r+0x20>
 8008ce6:	6005      	str	r5, [r0, #0]
 8008ce8:	e7d6      	b.n	8008c98 <_malloc_r+0xa8>
 8008cea:	bf00      	nop
 8008cec:	200003f8 	.word	0x200003f8

08008cf0 <__malloc_lock>:
 8008cf0:	4801      	ldr	r0, [pc, #4]	@ (8008cf8 <__malloc_lock+0x8>)
 8008cf2:	f7ff befa 	b.w	8008aea <__retarget_lock_acquire_recursive>
 8008cf6:	bf00      	nop
 8008cf8:	200003f0 	.word	0x200003f0

08008cfc <__malloc_unlock>:
 8008cfc:	4801      	ldr	r0, [pc, #4]	@ (8008d04 <__malloc_unlock+0x8>)
 8008cfe:	f7ff bef5 	b.w	8008aec <__retarget_lock_release_recursive>
 8008d02:	bf00      	nop
 8008d04:	200003f0 	.word	0x200003f0

08008d08 <__sfputc_r>:
 8008d08:	6893      	ldr	r3, [r2, #8]
 8008d0a:	b410      	push	{r4}
 8008d0c:	3b01      	subs	r3, #1
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	6093      	str	r3, [r2, #8]
 8008d12:	da07      	bge.n	8008d24 <__sfputc_r+0x1c>
 8008d14:	6994      	ldr	r4, [r2, #24]
 8008d16:	42a3      	cmp	r3, r4
 8008d18:	db01      	blt.n	8008d1e <__sfputc_r+0x16>
 8008d1a:	290a      	cmp	r1, #10
 8008d1c:	d102      	bne.n	8008d24 <__sfputc_r+0x1c>
 8008d1e:	bc10      	pop	{r4}
 8008d20:	f7ff bdd5 	b.w	80088ce <__swbuf_r>
 8008d24:	6813      	ldr	r3, [r2, #0]
 8008d26:	1c58      	adds	r0, r3, #1
 8008d28:	6010      	str	r0, [r2, #0]
 8008d2a:	7019      	strb	r1, [r3, #0]
 8008d2c:	4608      	mov	r0, r1
 8008d2e:	bc10      	pop	{r4}
 8008d30:	4770      	bx	lr

08008d32 <__sfputs_r>:
 8008d32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d34:	4606      	mov	r6, r0
 8008d36:	460f      	mov	r7, r1
 8008d38:	4614      	mov	r4, r2
 8008d3a:	18d5      	adds	r5, r2, r3
 8008d3c:	42ac      	cmp	r4, r5
 8008d3e:	d101      	bne.n	8008d44 <__sfputs_r+0x12>
 8008d40:	2000      	movs	r0, #0
 8008d42:	e007      	b.n	8008d54 <__sfputs_r+0x22>
 8008d44:	463a      	mov	r2, r7
 8008d46:	4630      	mov	r0, r6
 8008d48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d4c:	f7ff ffdc 	bl	8008d08 <__sfputc_r>
 8008d50:	1c43      	adds	r3, r0, #1
 8008d52:	d1f3      	bne.n	8008d3c <__sfputs_r+0xa>
 8008d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008d58 <_vfiprintf_r>:
 8008d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d5c:	460d      	mov	r5, r1
 8008d5e:	4614      	mov	r4, r2
 8008d60:	4698      	mov	r8, r3
 8008d62:	4606      	mov	r6, r0
 8008d64:	b09d      	sub	sp, #116	@ 0x74
 8008d66:	b118      	cbz	r0, 8008d70 <_vfiprintf_r+0x18>
 8008d68:	6a03      	ldr	r3, [r0, #32]
 8008d6a:	b90b      	cbnz	r3, 8008d70 <_vfiprintf_r+0x18>
 8008d6c:	f7ff fc12 	bl	8008594 <__sinit>
 8008d70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d72:	07d9      	lsls	r1, r3, #31
 8008d74:	d405      	bmi.n	8008d82 <_vfiprintf_r+0x2a>
 8008d76:	89ab      	ldrh	r3, [r5, #12]
 8008d78:	059a      	lsls	r2, r3, #22
 8008d7a:	d402      	bmi.n	8008d82 <_vfiprintf_r+0x2a>
 8008d7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d7e:	f7ff feb4 	bl	8008aea <__retarget_lock_acquire_recursive>
 8008d82:	89ab      	ldrh	r3, [r5, #12]
 8008d84:	071b      	lsls	r3, r3, #28
 8008d86:	d501      	bpl.n	8008d8c <_vfiprintf_r+0x34>
 8008d88:	692b      	ldr	r3, [r5, #16]
 8008d8a:	b99b      	cbnz	r3, 8008db4 <_vfiprintf_r+0x5c>
 8008d8c:	4629      	mov	r1, r5
 8008d8e:	4630      	mov	r0, r6
 8008d90:	f7ff fddc 	bl	800894c <__swsetup_r>
 8008d94:	b170      	cbz	r0, 8008db4 <_vfiprintf_r+0x5c>
 8008d96:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d98:	07dc      	lsls	r4, r3, #31
 8008d9a:	d504      	bpl.n	8008da6 <_vfiprintf_r+0x4e>
 8008d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008da0:	b01d      	add	sp, #116	@ 0x74
 8008da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008da6:	89ab      	ldrh	r3, [r5, #12]
 8008da8:	0598      	lsls	r0, r3, #22
 8008daa:	d4f7      	bmi.n	8008d9c <_vfiprintf_r+0x44>
 8008dac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008dae:	f7ff fe9d 	bl	8008aec <__retarget_lock_release_recursive>
 8008db2:	e7f3      	b.n	8008d9c <_vfiprintf_r+0x44>
 8008db4:	2300      	movs	r3, #0
 8008db6:	9309      	str	r3, [sp, #36]	@ 0x24
 8008db8:	2320      	movs	r3, #32
 8008dba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008dbe:	2330      	movs	r3, #48	@ 0x30
 8008dc0:	f04f 0901 	mov.w	r9, #1
 8008dc4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008dc8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008f74 <_vfiprintf_r+0x21c>
 8008dcc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008dd0:	4623      	mov	r3, r4
 8008dd2:	469a      	mov	sl, r3
 8008dd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008dd8:	b10a      	cbz	r2, 8008dde <_vfiprintf_r+0x86>
 8008dda:	2a25      	cmp	r2, #37	@ 0x25
 8008ddc:	d1f9      	bne.n	8008dd2 <_vfiprintf_r+0x7a>
 8008dde:	ebba 0b04 	subs.w	fp, sl, r4
 8008de2:	d00b      	beq.n	8008dfc <_vfiprintf_r+0xa4>
 8008de4:	465b      	mov	r3, fp
 8008de6:	4622      	mov	r2, r4
 8008de8:	4629      	mov	r1, r5
 8008dea:	4630      	mov	r0, r6
 8008dec:	f7ff ffa1 	bl	8008d32 <__sfputs_r>
 8008df0:	3001      	adds	r0, #1
 8008df2:	f000 80a7 	beq.w	8008f44 <_vfiprintf_r+0x1ec>
 8008df6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008df8:	445a      	add	r2, fp
 8008dfa:	9209      	str	r2, [sp, #36]	@ 0x24
 8008dfc:	f89a 3000 	ldrb.w	r3, [sl]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	f000 809f 	beq.w	8008f44 <_vfiprintf_r+0x1ec>
 8008e06:	2300      	movs	r3, #0
 8008e08:	f04f 32ff 	mov.w	r2, #4294967295
 8008e0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e10:	f10a 0a01 	add.w	sl, sl, #1
 8008e14:	9304      	str	r3, [sp, #16]
 8008e16:	9307      	str	r3, [sp, #28]
 8008e18:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008e1c:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e1e:	4654      	mov	r4, sl
 8008e20:	2205      	movs	r2, #5
 8008e22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e26:	4853      	ldr	r0, [pc, #332]	@ (8008f74 <_vfiprintf_r+0x21c>)
 8008e28:	f000 fb7c 	bl	8009524 <memchr>
 8008e2c:	9a04      	ldr	r2, [sp, #16]
 8008e2e:	b9d8      	cbnz	r0, 8008e68 <_vfiprintf_r+0x110>
 8008e30:	06d1      	lsls	r1, r2, #27
 8008e32:	bf44      	itt	mi
 8008e34:	2320      	movmi	r3, #32
 8008e36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e3a:	0713      	lsls	r3, r2, #28
 8008e3c:	bf44      	itt	mi
 8008e3e:	232b      	movmi	r3, #43	@ 0x2b
 8008e40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e44:	f89a 3000 	ldrb.w	r3, [sl]
 8008e48:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e4a:	d015      	beq.n	8008e78 <_vfiprintf_r+0x120>
 8008e4c:	4654      	mov	r4, sl
 8008e4e:	2000      	movs	r0, #0
 8008e50:	f04f 0c0a 	mov.w	ip, #10
 8008e54:	9a07      	ldr	r2, [sp, #28]
 8008e56:	4621      	mov	r1, r4
 8008e58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e5c:	3b30      	subs	r3, #48	@ 0x30
 8008e5e:	2b09      	cmp	r3, #9
 8008e60:	d94b      	bls.n	8008efa <_vfiprintf_r+0x1a2>
 8008e62:	b1b0      	cbz	r0, 8008e92 <_vfiprintf_r+0x13a>
 8008e64:	9207      	str	r2, [sp, #28]
 8008e66:	e014      	b.n	8008e92 <_vfiprintf_r+0x13a>
 8008e68:	eba0 0308 	sub.w	r3, r0, r8
 8008e6c:	fa09 f303 	lsl.w	r3, r9, r3
 8008e70:	4313      	orrs	r3, r2
 8008e72:	46a2      	mov	sl, r4
 8008e74:	9304      	str	r3, [sp, #16]
 8008e76:	e7d2      	b.n	8008e1e <_vfiprintf_r+0xc6>
 8008e78:	9b03      	ldr	r3, [sp, #12]
 8008e7a:	1d19      	adds	r1, r3, #4
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	9103      	str	r1, [sp, #12]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	bfbb      	ittet	lt
 8008e84:	425b      	neglt	r3, r3
 8008e86:	f042 0202 	orrlt.w	r2, r2, #2
 8008e8a:	9307      	strge	r3, [sp, #28]
 8008e8c:	9307      	strlt	r3, [sp, #28]
 8008e8e:	bfb8      	it	lt
 8008e90:	9204      	strlt	r2, [sp, #16]
 8008e92:	7823      	ldrb	r3, [r4, #0]
 8008e94:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e96:	d10a      	bne.n	8008eae <_vfiprintf_r+0x156>
 8008e98:	7863      	ldrb	r3, [r4, #1]
 8008e9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e9c:	d132      	bne.n	8008f04 <_vfiprintf_r+0x1ac>
 8008e9e:	9b03      	ldr	r3, [sp, #12]
 8008ea0:	3402      	adds	r4, #2
 8008ea2:	1d1a      	adds	r2, r3, #4
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	9203      	str	r2, [sp, #12]
 8008ea8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008eac:	9305      	str	r3, [sp, #20]
 8008eae:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008f78 <_vfiprintf_r+0x220>
 8008eb2:	2203      	movs	r2, #3
 8008eb4:	4650      	mov	r0, sl
 8008eb6:	7821      	ldrb	r1, [r4, #0]
 8008eb8:	f000 fb34 	bl	8009524 <memchr>
 8008ebc:	b138      	cbz	r0, 8008ece <_vfiprintf_r+0x176>
 8008ebe:	2240      	movs	r2, #64	@ 0x40
 8008ec0:	9b04      	ldr	r3, [sp, #16]
 8008ec2:	eba0 000a 	sub.w	r0, r0, sl
 8008ec6:	4082      	lsls	r2, r0
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	3401      	adds	r4, #1
 8008ecc:	9304      	str	r3, [sp, #16]
 8008ece:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ed2:	2206      	movs	r2, #6
 8008ed4:	4829      	ldr	r0, [pc, #164]	@ (8008f7c <_vfiprintf_r+0x224>)
 8008ed6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008eda:	f000 fb23 	bl	8009524 <memchr>
 8008ede:	2800      	cmp	r0, #0
 8008ee0:	d03f      	beq.n	8008f62 <_vfiprintf_r+0x20a>
 8008ee2:	4b27      	ldr	r3, [pc, #156]	@ (8008f80 <_vfiprintf_r+0x228>)
 8008ee4:	bb1b      	cbnz	r3, 8008f2e <_vfiprintf_r+0x1d6>
 8008ee6:	9b03      	ldr	r3, [sp, #12]
 8008ee8:	3307      	adds	r3, #7
 8008eea:	f023 0307 	bic.w	r3, r3, #7
 8008eee:	3308      	adds	r3, #8
 8008ef0:	9303      	str	r3, [sp, #12]
 8008ef2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ef4:	443b      	add	r3, r7
 8008ef6:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ef8:	e76a      	b.n	8008dd0 <_vfiprintf_r+0x78>
 8008efa:	460c      	mov	r4, r1
 8008efc:	2001      	movs	r0, #1
 8008efe:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f02:	e7a8      	b.n	8008e56 <_vfiprintf_r+0xfe>
 8008f04:	2300      	movs	r3, #0
 8008f06:	f04f 0c0a 	mov.w	ip, #10
 8008f0a:	4619      	mov	r1, r3
 8008f0c:	3401      	adds	r4, #1
 8008f0e:	9305      	str	r3, [sp, #20]
 8008f10:	4620      	mov	r0, r4
 8008f12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f16:	3a30      	subs	r2, #48	@ 0x30
 8008f18:	2a09      	cmp	r2, #9
 8008f1a:	d903      	bls.n	8008f24 <_vfiprintf_r+0x1cc>
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d0c6      	beq.n	8008eae <_vfiprintf_r+0x156>
 8008f20:	9105      	str	r1, [sp, #20]
 8008f22:	e7c4      	b.n	8008eae <_vfiprintf_r+0x156>
 8008f24:	4604      	mov	r4, r0
 8008f26:	2301      	movs	r3, #1
 8008f28:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f2c:	e7f0      	b.n	8008f10 <_vfiprintf_r+0x1b8>
 8008f2e:	ab03      	add	r3, sp, #12
 8008f30:	9300      	str	r3, [sp, #0]
 8008f32:	462a      	mov	r2, r5
 8008f34:	4630      	mov	r0, r6
 8008f36:	4b13      	ldr	r3, [pc, #76]	@ (8008f84 <_vfiprintf_r+0x22c>)
 8008f38:	a904      	add	r1, sp, #16
 8008f3a:	f3af 8000 	nop.w
 8008f3e:	4607      	mov	r7, r0
 8008f40:	1c78      	adds	r0, r7, #1
 8008f42:	d1d6      	bne.n	8008ef2 <_vfiprintf_r+0x19a>
 8008f44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f46:	07d9      	lsls	r1, r3, #31
 8008f48:	d405      	bmi.n	8008f56 <_vfiprintf_r+0x1fe>
 8008f4a:	89ab      	ldrh	r3, [r5, #12]
 8008f4c:	059a      	lsls	r2, r3, #22
 8008f4e:	d402      	bmi.n	8008f56 <_vfiprintf_r+0x1fe>
 8008f50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f52:	f7ff fdcb 	bl	8008aec <__retarget_lock_release_recursive>
 8008f56:	89ab      	ldrh	r3, [r5, #12]
 8008f58:	065b      	lsls	r3, r3, #25
 8008f5a:	f53f af1f 	bmi.w	8008d9c <_vfiprintf_r+0x44>
 8008f5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f60:	e71e      	b.n	8008da0 <_vfiprintf_r+0x48>
 8008f62:	ab03      	add	r3, sp, #12
 8008f64:	9300      	str	r3, [sp, #0]
 8008f66:	462a      	mov	r2, r5
 8008f68:	4630      	mov	r0, r6
 8008f6a:	4b06      	ldr	r3, [pc, #24]	@ (8008f84 <_vfiprintf_r+0x22c>)
 8008f6c:	a904      	add	r1, sp, #16
 8008f6e:	f000 f87d 	bl	800906c <_printf_i>
 8008f72:	e7e4      	b.n	8008f3e <_vfiprintf_r+0x1e6>
 8008f74:	0800a49a 	.word	0x0800a49a
 8008f78:	0800a4a0 	.word	0x0800a4a0
 8008f7c:	0800a4a4 	.word	0x0800a4a4
 8008f80:	00000000 	.word	0x00000000
 8008f84:	08008d33 	.word	0x08008d33

08008f88 <_printf_common>:
 8008f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f8c:	4616      	mov	r6, r2
 8008f8e:	4698      	mov	r8, r3
 8008f90:	688a      	ldr	r2, [r1, #8]
 8008f92:	690b      	ldr	r3, [r1, #16]
 8008f94:	4607      	mov	r7, r0
 8008f96:	4293      	cmp	r3, r2
 8008f98:	bfb8      	it	lt
 8008f9a:	4613      	movlt	r3, r2
 8008f9c:	6033      	str	r3, [r6, #0]
 8008f9e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008fa2:	460c      	mov	r4, r1
 8008fa4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008fa8:	b10a      	cbz	r2, 8008fae <_printf_common+0x26>
 8008faa:	3301      	adds	r3, #1
 8008fac:	6033      	str	r3, [r6, #0]
 8008fae:	6823      	ldr	r3, [r4, #0]
 8008fb0:	0699      	lsls	r1, r3, #26
 8008fb2:	bf42      	ittt	mi
 8008fb4:	6833      	ldrmi	r3, [r6, #0]
 8008fb6:	3302      	addmi	r3, #2
 8008fb8:	6033      	strmi	r3, [r6, #0]
 8008fba:	6825      	ldr	r5, [r4, #0]
 8008fbc:	f015 0506 	ands.w	r5, r5, #6
 8008fc0:	d106      	bne.n	8008fd0 <_printf_common+0x48>
 8008fc2:	f104 0a19 	add.w	sl, r4, #25
 8008fc6:	68e3      	ldr	r3, [r4, #12]
 8008fc8:	6832      	ldr	r2, [r6, #0]
 8008fca:	1a9b      	subs	r3, r3, r2
 8008fcc:	42ab      	cmp	r3, r5
 8008fce:	dc2b      	bgt.n	8009028 <_printf_common+0xa0>
 8008fd0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008fd4:	6822      	ldr	r2, [r4, #0]
 8008fd6:	3b00      	subs	r3, #0
 8008fd8:	bf18      	it	ne
 8008fda:	2301      	movne	r3, #1
 8008fdc:	0692      	lsls	r2, r2, #26
 8008fde:	d430      	bmi.n	8009042 <_printf_common+0xba>
 8008fe0:	4641      	mov	r1, r8
 8008fe2:	4638      	mov	r0, r7
 8008fe4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008fe8:	47c8      	blx	r9
 8008fea:	3001      	adds	r0, #1
 8008fec:	d023      	beq.n	8009036 <_printf_common+0xae>
 8008fee:	6823      	ldr	r3, [r4, #0]
 8008ff0:	6922      	ldr	r2, [r4, #16]
 8008ff2:	f003 0306 	and.w	r3, r3, #6
 8008ff6:	2b04      	cmp	r3, #4
 8008ff8:	bf14      	ite	ne
 8008ffa:	2500      	movne	r5, #0
 8008ffc:	6833      	ldreq	r3, [r6, #0]
 8008ffe:	f04f 0600 	mov.w	r6, #0
 8009002:	bf08      	it	eq
 8009004:	68e5      	ldreq	r5, [r4, #12]
 8009006:	f104 041a 	add.w	r4, r4, #26
 800900a:	bf08      	it	eq
 800900c:	1aed      	subeq	r5, r5, r3
 800900e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009012:	bf08      	it	eq
 8009014:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009018:	4293      	cmp	r3, r2
 800901a:	bfc4      	itt	gt
 800901c:	1a9b      	subgt	r3, r3, r2
 800901e:	18ed      	addgt	r5, r5, r3
 8009020:	42b5      	cmp	r5, r6
 8009022:	d11a      	bne.n	800905a <_printf_common+0xd2>
 8009024:	2000      	movs	r0, #0
 8009026:	e008      	b.n	800903a <_printf_common+0xb2>
 8009028:	2301      	movs	r3, #1
 800902a:	4652      	mov	r2, sl
 800902c:	4641      	mov	r1, r8
 800902e:	4638      	mov	r0, r7
 8009030:	47c8      	blx	r9
 8009032:	3001      	adds	r0, #1
 8009034:	d103      	bne.n	800903e <_printf_common+0xb6>
 8009036:	f04f 30ff 	mov.w	r0, #4294967295
 800903a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800903e:	3501      	adds	r5, #1
 8009040:	e7c1      	b.n	8008fc6 <_printf_common+0x3e>
 8009042:	2030      	movs	r0, #48	@ 0x30
 8009044:	18e1      	adds	r1, r4, r3
 8009046:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800904a:	1c5a      	adds	r2, r3, #1
 800904c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009050:	4422      	add	r2, r4
 8009052:	3302      	adds	r3, #2
 8009054:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009058:	e7c2      	b.n	8008fe0 <_printf_common+0x58>
 800905a:	2301      	movs	r3, #1
 800905c:	4622      	mov	r2, r4
 800905e:	4641      	mov	r1, r8
 8009060:	4638      	mov	r0, r7
 8009062:	47c8      	blx	r9
 8009064:	3001      	adds	r0, #1
 8009066:	d0e6      	beq.n	8009036 <_printf_common+0xae>
 8009068:	3601      	adds	r6, #1
 800906a:	e7d9      	b.n	8009020 <_printf_common+0x98>

0800906c <_printf_i>:
 800906c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009070:	7e0f      	ldrb	r7, [r1, #24]
 8009072:	4691      	mov	r9, r2
 8009074:	2f78      	cmp	r7, #120	@ 0x78
 8009076:	4680      	mov	r8, r0
 8009078:	460c      	mov	r4, r1
 800907a:	469a      	mov	sl, r3
 800907c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800907e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009082:	d807      	bhi.n	8009094 <_printf_i+0x28>
 8009084:	2f62      	cmp	r7, #98	@ 0x62
 8009086:	d80a      	bhi.n	800909e <_printf_i+0x32>
 8009088:	2f00      	cmp	r7, #0
 800908a:	f000 80d3 	beq.w	8009234 <_printf_i+0x1c8>
 800908e:	2f58      	cmp	r7, #88	@ 0x58
 8009090:	f000 80ba 	beq.w	8009208 <_printf_i+0x19c>
 8009094:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009098:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800909c:	e03a      	b.n	8009114 <_printf_i+0xa8>
 800909e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80090a2:	2b15      	cmp	r3, #21
 80090a4:	d8f6      	bhi.n	8009094 <_printf_i+0x28>
 80090a6:	a101      	add	r1, pc, #4	@ (adr r1, 80090ac <_printf_i+0x40>)
 80090a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80090ac:	08009105 	.word	0x08009105
 80090b0:	08009119 	.word	0x08009119
 80090b4:	08009095 	.word	0x08009095
 80090b8:	08009095 	.word	0x08009095
 80090bc:	08009095 	.word	0x08009095
 80090c0:	08009095 	.word	0x08009095
 80090c4:	08009119 	.word	0x08009119
 80090c8:	08009095 	.word	0x08009095
 80090cc:	08009095 	.word	0x08009095
 80090d0:	08009095 	.word	0x08009095
 80090d4:	08009095 	.word	0x08009095
 80090d8:	0800921b 	.word	0x0800921b
 80090dc:	08009143 	.word	0x08009143
 80090e0:	080091d5 	.word	0x080091d5
 80090e4:	08009095 	.word	0x08009095
 80090e8:	08009095 	.word	0x08009095
 80090ec:	0800923d 	.word	0x0800923d
 80090f0:	08009095 	.word	0x08009095
 80090f4:	08009143 	.word	0x08009143
 80090f8:	08009095 	.word	0x08009095
 80090fc:	08009095 	.word	0x08009095
 8009100:	080091dd 	.word	0x080091dd
 8009104:	6833      	ldr	r3, [r6, #0]
 8009106:	1d1a      	adds	r2, r3, #4
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	6032      	str	r2, [r6, #0]
 800910c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009110:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009114:	2301      	movs	r3, #1
 8009116:	e09e      	b.n	8009256 <_printf_i+0x1ea>
 8009118:	6833      	ldr	r3, [r6, #0]
 800911a:	6820      	ldr	r0, [r4, #0]
 800911c:	1d19      	adds	r1, r3, #4
 800911e:	6031      	str	r1, [r6, #0]
 8009120:	0606      	lsls	r6, r0, #24
 8009122:	d501      	bpl.n	8009128 <_printf_i+0xbc>
 8009124:	681d      	ldr	r5, [r3, #0]
 8009126:	e003      	b.n	8009130 <_printf_i+0xc4>
 8009128:	0645      	lsls	r5, r0, #25
 800912a:	d5fb      	bpl.n	8009124 <_printf_i+0xb8>
 800912c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009130:	2d00      	cmp	r5, #0
 8009132:	da03      	bge.n	800913c <_printf_i+0xd0>
 8009134:	232d      	movs	r3, #45	@ 0x2d
 8009136:	426d      	negs	r5, r5
 8009138:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800913c:	230a      	movs	r3, #10
 800913e:	4859      	ldr	r0, [pc, #356]	@ (80092a4 <_printf_i+0x238>)
 8009140:	e011      	b.n	8009166 <_printf_i+0xfa>
 8009142:	6821      	ldr	r1, [r4, #0]
 8009144:	6833      	ldr	r3, [r6, #0]
 8009146:	0608      	lsls	r0, r1, #24
 8009148:	f853 5b04 	ldr.w	r5, [r3], #4
 800914c:	d402      	bmi.n	8009154 <_printf_i+0xe8>
 800914e:	0649      	lsls	r1, r1, #25
 8009150:	bf48      	it	mi
 8009152:	b2ad      	uxthmi	r5, r5
 8009154:	2f6f      	cmp	r7, #111	@ 0x6f
 8009156:	6033      	str	r3, [r6, #0]
 8009158:	bf14      	ite	ne
 800915a:	230a      	movne	r3, #10
 800915c:	2308      	moveq	r3, #8
 800915e:	4851      	ldr	r0, [pc, #324]	@ (80092a4 <_printf_i+0x238>)
 8009160:	2100      	movs	r1, #0
 8009162:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009166:	6866      	ldr	r6, [r4, #4]
 8009168:	2e00      	cmp	r6, #0
 800916a:	bfa8      	it	ge
 800916c:	6821      	ldrge	r1, [r4, #0]
 800916e:	60a6      	str	r6, [r4, #8]
 8009170:	bfa4      	itt	ge
 8009172:	f021 0104 	bicge.w	r1, r1, #4
 8009176:	6021      	strge	r1, [r4, #0]
 8009178:	b90d      	cbnz	r5, 800917e <_printf_i+0x112>
 800917a:	2e00      	cmp	r6, #0
 800917c:	d04b      	beq.n	8009216 <_printf_i+0x1aa>
 800917e:	4616      	mov	r6, r2
 8009180:	fbb5 f1f3 	udiv	r1, r5, r3
 8009184:	fb03 5711 	mls	r7, r3, r1, r5
 8009188:	5dc7      	ldrb	r7, [r0, r7]
 800918a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800918e:	462f      	mov	r7, r5
 8009190:	42bb      	cmp	r3, r7
 8009192:	460d      	mov	r5, r1
 8009194:	d9f4      	bls.n	8009180 <_printf_i+0x114>
 8009196:	2b08      	cmp	r3, #8
 8009198:	d10b      	bne.n	80091b2 <_printf_i+0x146>
 800919a:	6823      	ldr	r3, [r4, #0]
 800919c:	07df      	lsls	r7, r3, #31
 800919e:	d508      	bpl.n	80091b2 <_printf_i+0x146>
 80091a0:	6923      	ldr	r3, [r4, #16]
 80091a2:	6861      	ldr	r1, [r4, #4]
 80091a4:	4299      	cmp	r1, r3
 80091a6:	bfde      	ittt	le
 80091a8:	2330      	movle	r3, #48	@ 0x30
 80091aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80091ae:	f106 36ff 	addle.w	r6, r6, #4294967295
 80091b2:	1b92      	subs	r2, r2, r6
 80091b4:	6122      	str	r2, [r4, #16]
 80091b6:	464b      	mov	r3, r9
 80091b8:	4621      	mov	r1, r4
 80091ba:	4640      	mov	r0, r8
 80091bc:	f8cd a000 	str.w	sl, [sp]
 80091c0:	aa03      	add	r2, sp, #12
 80091c2:	f7ff fee1 	bl	8008f88 <_printf_common>
 80091c6:	3001      	adds	r0, #1
 80091c8:	d14a      	bne.n	8009260 <_printf_i+0x1f4>
 80091ca:	f04f 30ff 	mov.w	r0, #4294967295
 80091ce:	b004      	add	sp, #16
 80091d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091d4:	6823      	ldr	r3, [r4, #0]
 80091d6:	f043 0320 	orr.w	r3, r3, #32
 80091da:	6023      	str	r3, [r4, #0]
 80091dc:	2778      	movs	r7, #120	@ 0x78
 80091de:	4832      	ldr	r0, [pc, #200]	@ (80092a8 <_printf_i+0x23c>)
 80091e0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80091e4:	6823      	ldr	r3, [r4, #0]
 80091e6:	6831      	ldr	r1, [r6, #0]
 80091e8:	061f      	lsls	r7, r3, #24
 80091ea:	f851 5b04 	ldr.w	r5, [r1], #4
 80091ee:	d402      	bmi.n	80091f6 <_printf_i+0x18a>
 80091f0:	065f      	lsls	r7, r3, #25
 80091f2:	bf48      	it	mi
 80091f4:	b2ad      	uxthmi	r5, r5
 80091f6:	6031      	str	r1, [r6, #0]
 80091f8:	07d9      	lsls	r1, r3, #31
 80091fa:	bf44      	itt	mi
 80091fc:	f043 0320 	orrmi.w	r3, r3, #32
 8009200:	6023      	strmi	r3, [r4, #0]
 8009202:	b11d      	cbz	r5, 800920c <_printf_i+0x1a0>
 8009204:	2310      	movs	r3, #16
 8009206:	e7ab      	b.n	8009160 <_printf_i+0xf4>
 8009208:	4826      	ldr	r0, [pc, #152]	@ (80092a4 <_printf_i+0x238>)
 800920a:	e7e9      	b.n	80091e0 <_printf_i+0x174>
 800920c:	6823      	ldr	r3, [r4, #0]
 800920e:	f023 0320 	bic.w	r3, r3, #32
 8009212:	6023      	str	r3, [r4, #0]
 8009214:	e7f6      	b.n	8009204 <_printf_i+0x198>
 8009216:	4616      	mov	r6, r2
 8009218:	e7bd      	b.n	8009196 <_printf_i+0x12a>
 800921a:	6833      	ldr	r3, [r6, #0]
 800921c:	6825      	ldr	r5, [r4, #0]
 800921e:	1d18      	adds	r0, r3, #4
 8009220:	6961      	ldr	r1, [r4, #20]
 8009222:	6030      	str	r0, [r6, #0]
 8009224:	062e      	lsls	r6, r5, #24
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	d501      	bpl.n	800922e <_printf_i+0x1c2>
 800922a:	6019      	str	r1, [r3, #0]
 800922c:	e002      	b.n	8009234 <_printf_i+0x1c8>
 800922e:	0668      	lsls	r0, r5, #25
 8009230:	d5fb      	bpl.n	800922a <_printf_i+0x1be>
 8009232:	8019      	strh	r1, [r3, #0]
 8009234:	2300      	movs	r3, #0
 8009236:	4616      	mov	r6, r2
 8009238:	6123      	str	r3, [r4, #16]
 800923a:	e7bc      	b.n	80091b6 <_printf_i+0x14a>
 800923c:	6833      	ldr	r3, [r6, #0]
 800923e:	2100      	movs	r1, #0
 8009240:	1d1a      	adds	r2, r3, #4
 8009242:	6032      	str	r2, [r6, #0]
 8009244:	681e      	ldr	r6, [r3, #0]
 8009246:	6862      	ldr	r2, [r4, #4]
 8009248:	4630      	mov	r0, r6
 800924a:	f000 f96b 	bl	8009524 <memchr>
 800924e:	b108      	cbz	r0, 8009254 <_printf_i+0x1e8>
 8009250:	1b80      	subs	r0, r0, r6
 8009252:	6060      	str	r0, [r4, #4]
 8009254:	6863      	ldr	r3, [r4, #4]
 8009256:	6123      	str	r3, [r4, #16]
 8009258:	2300      	movs	r3, #0
 800925a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800925e:	e7aa      	b.n	80091b6 <_printf_i+0x14a>
 8009260:	4632      	mov	r2, r6
 8009262:	4649      	mov	r1, r9
 8009264:	4640      	mov	r0, r8
 8009266:	6923      	ldr	r3, [r4, #16]
 8009268:	47d0      	blx	sl
 800926a:	3001      	adds	r0, #1
 800926c:	d0ad      	beq.n	80091ca <_printf_i+0x15e>
 800926e:	6823      	ldr	r3, [r4, #0]
 8009270:	079b      	lsls	r3, r3, #30
 8009272:	d413      	bmi.n	800929c <_printf_i+0x230>
 8009274:	68e0      	ldr	r0, [r4, #12]
 8009276:	9b03      	ldr	r3, [sp, #12]
 8009278:	4298      	cmp	r0, r3
 800927a:	bfb8      	it	lt
 800927c:	4618      	movlt	r0, r3
 800927e:	e7a6      	b.n	80091ce <_printf_i+0x162>
 8009280:	2301      	movs	r3, #1
 8009282:	4632      	mov	r2, r6
 8009284:	4649      	mov	r1, r9
 8009286:	4640      	mov	r0, r8
 8009288:	47d0      	blx	sl
 800928a:	3001      	adds	r0, #1
 800928c:	d09d      	beq.n	80091ca <_printf_i+0x15e>
 800928e:	3501      	adds	r5, #1
 8009290:	68e3      	ldr	r3, [r4, #12]
 8009292:	9903      	ldr	r1, [sp, #12]
 8009294:	1a5b      	subs	r3, r3, r1
 8009296:	42ab      	cmp	r3, r5
 8009298:	dcf2      	bgt.n	8009280 <_printf_i+0x214>
 800929a:	e7eb      	b.n	8009274 <_printf_i+0x208>
 800929c:	2500      	movs	r5, #0
 800929e:	f104 0619 	add.w	r6, r4, #25
 80092a2:	e7f5      	b.n	8009290 <_printf_i+0x224>
 80092a4:	0800a4ab 	.word	0x0800a4ab
 80092a8:	0800a4bc 	.word	0x0800a4bc

080092ac <__sflush_r>:
 80092ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80092b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092b2:	0716      	lsls	r6, r2, #28
 80092b4:	4605      	mov	r5, r0
 80092b6:	460c      	mov	r4, r1
 80092b8:	d454      	bmi.n	8009364 <__sflush_r+0xb8>
 80092ba:	684b      	ldr	r3, [r1, #4]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	dc02      	bgt.n	80092c6 <__sflush_r+0x1a>
 80092c0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	dd48      	ble.n	8009358 <__sflush_r+0xac>
 80092c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80092c8:	2e00      	cmp	r6, #0
 80092ca:	d045      	beq.n	8009358 <__sflush_r+0xac>
 80092cc:	2300      	movs	r3, #0
 80092ce:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80092d2:	682f      	ldr	r7, [r5, #0]
 80092d4:	6a21      	ldr	r1, [r4, #32]
 80092d6:	602b      	str	r3, [r5, #0]
 80092d8:	d030      	beq.n	800933c <__sflush_r+0x90>
 80092da:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80092dc:	89a3      	ldrh	r3, [r4, #12]
 80092de:	0759      	lsls	r1, r3, #29
 80092e0:	d505      	bpl.n	80092ee <__sflush_r+0x42>
 80092e2:	6863      	ldr	r3, [r4, #4]
 80092e4:	1ad2      	subs	r2, r2, r3
 80092e6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80092e8:	b10b      	cbz	r3, 80092ee <__sflush_r+0x42>
 80092ea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80092ec:	1ad2      	subs	r2, r2, r3
 80092ee:	2300      	movs	r3, #0
 80092f0:	4628      	mov	r0, r5
 80092f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80092f4:	6a21      	ldr	r1, [r4, #32]
 80092f6:	47b0      	blx	r6
 80092f8:	1c43      	adds	r3, r0, #1
 80092fa:	89a3      	ldrh	r3, [r4, #12]
 80092fc:	d106      	bne.n	800930c <__sflush_r+0x60>
 80092fe:	6829      	ldr	r1, [r5, #0]
 8009300:	291d      	cmp	r1, #29
 8009302:	d82b      	bhi.n	800935c <__sflush_r+0xb0>
 8009304:	4a28      	ldr	r2, [pc, #160]	@ (80093a8 <__sflush_r+0xfc>)
 8009306:	410a      	asrs	r2, r1
 8009308:	07d6      	lsls	r6, r2, #31
 800930a:	d427      	bmi.n	800935c <__sflush_r+0xb0>
 800930c:	2200      	movs	r2, #0
 800930e:	6062      	str	r2, [r4, #4]
 8009310:	6922      	ldr	r2, [r4, #16]
 8009312:	04d9      	lsls	r1, r3, #19
 8009314:	6022      	str	r2, [r4, #0]
 8009316:	d504      	bpl.n	8009322 <__sflush_r+0x76>
 8009318:	1c42      	adds	r2, r0, #1
 800931a:	d101      	bne.n	8009320 <__sflush_r+0x74>
 800931c:	682b      	ldr	r3, [r5, #0]
 800931e:	b903      	cbnz	r3, 8009322 <__sflush_r+0x76>
 8009320:	6560      	str	r0, [r4, #84]	@ 0x54
 8009322:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009324:	602f      	str	r7, [r5, #0]
 8009326:	b1b9      	cbz	r1, 8009358 <__sflush_r+0xac>
 8009328:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800932c:	4299      	cmp	r1, r3
 800932e:	d002      	beq.n	8009336 <__sflush_r+0x8a>
 8009330:	4628      	mov	r0, r5
 8009332:	f7ff fbeb 	bl	8008b0c <_free_r>
 8009336:	2300      	movs	r3, #0
 8009338:	6363      	str	r3, [r4, #52]	@ 0x34
 800933a:	e00d      	b.n	8009358 <__sflush_r+0xac>
 800933c:	2301      	movs	r3, #1
 800933e:	4628      	mov	r0, r5
 8009340:	47b0      	blx	r6
 8009342:	4602      	mov	r2, r0
 8009344:	1c50      	adds	r0, r2, #1
 8009346:	d1c9      	bne.n	80092dc <__sflush_r+0x30>
 8009348:	682b      	ldr	r3, [r5, #0]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d0c6      	beq.n	80092dc <__sflush_r+0x30>
 800934e:	2b1d      	cmp	r3, #29
 8009350:	d001      	beq.n	8009356 <__sflush_r+0xaa>
 8009352:	2b16      	cmp	r3, #22
 8009354:	d11d      	bne.n	8009392 <__sflush_r+0xe6>
 8009356:	602f      	str	r7, [r5, #0]
 8009358:	2000      	movs	r0, #0
 800935a:	e021      	b.n	80093a0 <__sflush_r+0xf4>
 800935c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009360:	b21b      	sxth	r3, r3
 8009362:	e01a      	b.n	800939a <__sflush_r+0xee>
 8009364:	690f      	ldr	r7, [r1, #16]
 8009366:	2f00      	cmp	r7, #0
 8009368:	d0f6      	beq.n	8009358 <__sflush_r+0xac>
 800936a:	0793      	lsls	r3, r2, #30
 800936c:	bf18      	it	ne
 800936e:	2300      	movne	r3, #0
 8009370:	680e      	ldr	r6, [r1, #0]
 8009372:	bf08      	it	eq
 8009374:	694b      	ldreq	r3, [r1, #20]
 8009376:	1bf6      	subs	r6, r6, r7
 8009378:	600f      	str	r7, [r1, #0]
 800937a:	608b      	str	r3, [r1, #8]
 800937c:	2e00      	cmp	r6, #0
 800937e:	ddeb      	ble.n	8009358 <__sflush_r+0xac>
 8009380:	4633      	mov	r3, r6
 8009382:	463a      	mov	r2, r7
 8009384:	4628      	mov	r0, r5
 8009386:	6a21      	ldr	r1, [r4, #32]
 8009388:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800938c:	47e0      	blx	ip
 800938e:	2800      	cmp	r0, #0
 8009390:	dc07      	bgt.n	80093a2 <__sflush_r+0xf6>
 8009392:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009396:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800939a:	f04f 30ff 	mov.w	r0, #4294967295
 800939e:	81a3      	strh	r3, [r4, #12]
 80093a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093a2:	4407      	add	r7, r0
 80093a4:	1a36      	subs	r6, r6, r0
 80093a6:	e7e9      	b.n	800937c <__sflush_r+0xd0>
 80093a8:	dfbffffe 	.word	0xdfbffffe

080093ac <_fflush_r>:
 80093ac:	b538      	push	{r3, r4, r5, lr}
 80093ae:	690b      	ldr	r3, [r1, #16]
 80093b0:	4605      	mov	r5, r0
 80093b2:	460c      	mov	r4, r1
 80093b4:	b913      	cbnz	r3, 80093bc <_fflush_r+0x10>
 80093b6:	2500      	movs	r5, #0
 80093b8:	4628      	mov	r0, r5
 80093ba:	bd38      	pop	{r3, r4, r5, pc}
 80093bc:	b118      	cbz	r0, 80093c6 <_fflush_r+0x1a>
 80093be:	6a03      	ldr	r3, [r0, #32]
 80093c0:	b90b      	cbnz	r3, 80093c6 <_fflush_r+0x1a>
 80093c2:	f7ff f8e7 	bl	8008594 <__sinit>
 80093c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d0f3      	beq.n	80093b6 <_fflush_r+0xa>
 80093ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80093d0:	07d0      	lsls	r0, r2, #31
 80093d2:	d404      	bmi.n	80093de <_fflush_r+0x32>
 80093d4:	0599      	lsls	r1, r3, #22
 80093d6:	d402      	bmi.n	80093de <_fflush_r+0x32>
 80093d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80093da:	f7ff fb86 	bl	8008aea <__retarget_lock_acquire_recursive>
 80093de:	4628      	mov	r0, r5
 80093e0:	4621      	mov	r1, r4
 80093e2:	f7ff ff63 	bl	80092ac <__sflush_r>
 80093e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80093e8:	4605      	mov	r5, r0
 80093ea:	07da      	lsls	r2, r3, #31
 80093ec:	d4e4      	bmi.n	80093b8 <_fflush_r+0xc>
 80093ee:	89a3      	ldrh	r3, [r4, #12]
 80093f0:	059b      	lsls	r3, r3, #22
 80093f2:	d4e1      	bmi.n	80093b8 <_fflush_r+0xc>
 80093f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80093f6:	f7ff fb79 	bl	8008aec <__retarget_lock_release_recursive>
 80093fa:	e7dd      	b.n	80093b8 <_fflush_r+0xc>

080093fc <__swhatbuf_r>:
 80093fc:	b570      	push	{r4, r5, r6, lr}
 80093fe:	460c      	mov	r4, r1
 8009400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009404:	4615      	mov	r5, r2
 8009406:	2900      	cmp	r1, #0
 8009408:	461e      	mov	r6, r3
 800940a:	b096      	sub	sp, #88	@ 0x58
 800940c:	da0c      	bge.n	8009428 <__swhatbuf_r+0x2c>
 800940e:	89a3      	ldrh	r3, [r4, #12]
 8009410:	2100      	movs	r1, #0
 8009412:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009416:	bf14      	ite	ne
 8009418:	2340      	movne	r3, #64	@ 0x40
 800941a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800941e:	2000      	movs	r0, #0
 8009420:	6031      	str	r1, [r6, #0]
 8009422:	602b      	str	r3, [r5, #0]
 8009424:	b016      	add	sp, #88	@ 0x58
 8009426:	bd70      	pop	{r4, r5, r6, pc}
 8009428:	466a      	mov	r2, sp
 800942a:	f000 f849 	bl	80094c0 <_fstat_r>
 800942e:	2800      	cmp	r0, #0
 8009430:	dbed      	blt.n	800940e <__swhatbuf_r+0x12>
 8009432:	9901      	ldr	r1, [sp, #4]
 8009434:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009438:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800943c:	4259      	negs	r1, r3
 800943e:	4159      	adcs	r1, r3
 8009440:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009444:	e7eb      	b.n	800941e <__swhatbuf_r+0x22>

08009446 <__smakebuf_r>:
 8009446:	898b      	ldrh	r3, [r1, #12]
 8009448:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800944a:	079d      	lsls	r5, r3, #30
 800944c:	4606      	mov	r6, r0
 800944e:	460c      	mov	r4, r1
 8009450:	d507      	bpl.n	8009462 <__smakebuf_r+0x1c>
 8009452:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009456:	6023      	str	r3, [r4, #0]
 8009458:	6123      	str	r3, [r4, #16]
 800945a:	2301      	movs	r3, #1
 800945c:	6163      	str	r3, [r4, #20]
 800945e:	b003      	add	sp, #12
 8009460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009462:	466a      	mov	r2, sp
 8009464:	ab01      	add	r3, sp, #4
 8009466:	f7ff ffc9 	bl	80093fc <__swhatbuf_r>
 800946a:	9f00      	ldr	r7, [sp, #0]
 800946c:	4605      	mov	r5, r0
 800946e:	4639      	mov	r1, r7
 8009470:	4630      	mov	r0, r6
 8009472:	f7ff fbbd 	bl	8008bf0 <_malloc_r>
 8009476:	b948      	cbnz	r0, 800948c <__smakebuf_r+0x46>
 8009478:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800947c:	059a      	lsls	r2, r3, #22
 800947e:	d4ee      	bmi.n	800945e <__smakebuf_r+0x18>
 8009480:	f023 0303 	bic.w	r3, r3, #3
 8009484:	f043 0302 	orr.w	r3, r3, #2
 8009488:	81a3      	strh	r3, [r4, #12]
 800948a:	e7e2      	b.n	8009452 <__smakebuf_r+0xc>
 800948c:	89a3      	ldrh	r3, [r4, #12]
 800948e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009492:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009496:	81a3      	strh	r3, [r4, #12]
 8009498:	9b01      	ldr	r3, [sp, #4]
 800949a:	6020      	str	r0, [r4, #0]
 800949c:	b15b      	cbz	r3, 80094b6 <__smakebuf_r+0x70>
 800949e:	4630      	mov	r0, r6
 80094a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094a4:	f000 f81e 	bl	80094e4 <_isatty_r>
 80094a8:	b128      	cbz	r0, 80094b6 <__smakebuf_r+0x70>
 80094aa:	89a3      	ldrh	r3, [r4, #12]
 80094ac:	f023 0303 	bic.w	r3, r3, #3
 80094b0:	f043 0301 	orr.w	r3, r3, #1
 80094b4:	81a3      	strh	r3, [r4, #12]
 80094b6:	89a3      	ldrh	r3, [r4, #12]
 80094b8:	431d      	orrs	r5, r3
 80094ba:	81a5      	strh	r5, [r4, #12]
 80094bc:	e7cf      	b.n	800945e <__smakebuf_r+0x18>
	...

080094c0 <_fstat_r>:
 80094c0:	b538      	push	{r3, r4, r5, lr}
 80094c2:	2300      	movs	r3, #0
 80094c4:	4d06      	ldr	r5, [pc, #24]	@ (80094e0 <_fstat_r+0x20>)
 80094c6:	4604      	mov	r4, r0
 80094c8:	4608      	mov	r0, r1
 80094ca:	4611      	mov	r1, r2
 80094cc:	602b      	str	r3, [r5, #0]
 80094ce:	f7f9 fd7c 	bl	8002fca <_fstat>
 80094d2:	1c43      	adds	r3, r0, #1
 80094d4:	d102      	bne.n	80094dc <_fstat_r+0x1c>
 80094d6:	682b      	ldr	r3, [r5, #0]
 80094d8:	b103      	cbz	r3, 80094dc <_fstat_r+0x1c>
 80094da:	6023      	str	r3, [r4, #0]
 80094dc:	bd38      	pop	{r3, r4, r5, pc}
 80094de:	bf00      	nop
 80094e0:	200003ec 	.word	0x200003ec

080094e4 <_isatty_r>:
 80094e4:	b538      	push	{r3, r4, r5, lr}
 80094e6:	2300      	movs	r3, #0
 80094e8:	4d05      	ldr	r5, [pc, #20]	@ (8009500 <_isatty_r+0x1c>)
 80094ea:	4604      	mov	r4, r0
 80094ec:	4608      	mov	r0, r1
 80094ee:	602b      	str	r3, [r5, #0]
 80094f0:	f7f9 fd7a 	bl	8002fe8 <_isatty>
 80094f4:	1c43      	adds	r3, r0, #1
 80094f6:	d102      	bne.n	80094fe <_isatty_r+0x1a>
 80094f8:	682b      	ldr	r3, [r5, #0]
 80094fa:	b103      	cbz	r3, 80094fe <_isatty_r+0x1a>
 80094fc:	6023      	str	r3, [r4, #0]
 80094fe:	bd38      	pop	{r3, r4, r5, pc}
 8009500:	200003ec 	.word	0x200003ec

08009504 <_sbrk_r>:
 8009504:	b538      	push	{r3, r4, r5, lr}
 8009506:	2300      	movs	r3, #0
 8009508:	4d05      	ldr	r5, [pc, #20]	@ (8009520 <_sbrk_r+0x1c>)
 800950a:	4604      	mov	r4, r0
 800950c:	4608      	mov	r0, r1
 800950e:	602b      	str	r3, [r5, #0]
 8009510:	f7f9 fd80 	bl	8003014 <_sbrk>
 8009514:	1c43      	adds	r3, r0, #1
 8009516:	d102      	bne.n	800951e <_sbrk_r+0x1a>
 8009518:	682b      	ldr	r3, [r5, #0]
 800951a:	b103      	cbz	r3, 800951e <_sbrk_r+0x1a>
 800951c:	6023      	str	r3, [r4, #0]
 800951e:	bd38      	pop	{r3, r4, r5, pc}
 8009520:	200003ec 	.word	0x200003ec

08009524 <memchr>:
 8009524:	4603      	mov	r3, r0
 8009526:	b510      	push	{r4, lr}
 8009528:	b2c9      	uxtb	r1, r1
 800952a:	4402      	add	r2, r0
 800952c:	4293      	cmp	r3, r2
 800952e:	4618      	mov	r0, r3
 8009530:	d101      	bne.n	8009536 <memchr+0x12>
 8009532:	2000      	movs	r0, #0
 8009534:	e003      	b.n	800953e <memchr+0x1a>
 8009536:	7804      	ldrb	r4, [r0, #0]
 8009538:	3301      	adds	r3, #1
 800953a:	428c      	cmp	r4, r1
 800953c:	d1f6      	bne.n	800952c <memchr+0x8>
 800953e:	bd10      	pop	{r4, pc}

08009540 <_init>:
 8009540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009542:	bf00      	nop
 8009544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009546:	bc08      	pop	{r3}
 8009548:	469e      	mov	lr, r3
 800954a:	4770      	bx	lr

0800954c <_fini>:
 800954c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800954e:	bf00      	nop
 8009550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009552:	bc08      	pop	{r3}
 8009554:	469e      	mov	lr, r3
 8009556:	4770      	bx	lr
