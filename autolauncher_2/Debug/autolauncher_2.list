
autolauncher_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fb8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  080060c8  080060c8  000160c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006464  08006464  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08006464  08006464  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006464  08006464  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006464  08006464  00016464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006468  08006468  00016468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800646c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  2000005c  080064c8  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  080064c8  00020354  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   000101d1  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002730  00000000  00000000  00030299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001000  00000000  00000000  000329d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c92  00000000  00000000  000339d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000187cd  00000000  00000000  00034662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000148fa  00000000  00000000  0004ce2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000901e4  00000000  00000000  00061729  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000049a0  00000000  00000000  000f1910  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000f62b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000005c 	.word	0x2000005c
 800012c:	00000000 	.word	0x00000000
 8000130:	080060b0 	.word	0x080060b0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000060 	.word	0x20000060
 800014c:	080060b0 	.word	0x080060b0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2f>:
 80008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000900:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000904:	bf24      	itt	cs
 8000906:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800090a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800090e:	d90d      	bls.n	800092c <__aeabi_d2f+0x30>
 8000910:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000914:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000918:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800091c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000920:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000924:	bf08      	it	eq
 8000926:	f020 0001 	biceq.w	r0, r0, #1
 800092a:	4770      	bx	lr
 800092c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000930:	d121      	bne.n	8000976 <__aeabi_d2f+0x7a>
 8000932:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000936:	bfbc      	itt	lt
 8000938:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800093c:	4770      	bxlt	lr
 800093e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000942:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000946:	f1c2 0218 	rsb	r2, r2, #24
 800094a:	f1c2 0c20 	rsb	ip, r2, #32
 800094e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000952:	fa20 f002 	lsr.w	r0, r0, r2
 8000956:	bf18      	it	ne
 8000958:	f040 0001 	orrne.w	r0, r0, #1
 800095c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000960:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000964:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000968:	ea40 000c 	orr.w	r0, r0, ip
 800096c:	fa23 f302 	lsr.w	r3, r3, r2
 8000970:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000974:	e7cc      	b.n	8000910 <__aeabi_d2f+0x14>
 8000976:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800097a:	d107      	bne.n	800098c <__aeabi_d2f+0x90>
 800097c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000980:	bf1e      	ittt	ne
 8000982:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000986:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800098a:	4770      	bxne	lr
 800098c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000990:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000994:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_f2iz>:
 800099c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80009a0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80009a4:	d30f      	bcc.n	80009c6 <__aeabi_f2iz+0x2a>
 80009a6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80009aa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80009ae:	d90d      	bls.n	80009cc <__aeabi_f2iz+0x30>
 80009b0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80009b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009b8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009bc:	fa23 f002 	lsr.w	r0, r3, r2
 80009c0:	bf18      	it	ne
 80009c2:	4240      	negne	r0, r0
 80009c4:	4770      	bx	lr
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	4770      	bx	lr
 80009cc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80009d0:	d101      	bne.n	80009d6 <__aeabi_f2iz+0x3a>
 80009d2:	0242      	lsls	r2, r0, #9
 80009d4:	d105      	bne.n	80009e2 <__aeabi_f2iz+0x46>
 80009d6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80009da:	bf08      	it	eq
 80009dc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009e0:	4770      	bx	lr
 80009e2:	f04f 0000 	mov.w	r0, #0
 80009e6:	4770      	bx	lr

080009e8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009f8:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <MX_ADC1_Init+0x74>)
 80009fa:	4a19      	ldr	r2, [pc, #100]	; (8000a60 <MX_ADC1_Init+0x78>)
 80009fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009fe:	4b17      	ldr	r3, [pc, #92]	; (8000a5c <MX_ADC1_Init+0x74>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a04:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <MX_ADC1_Init+0x74>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a0a:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <MX_ADC1_Init+0x74>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a10:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <MX_ADC1_Init+0x74>)
 8000a12:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000a16:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a18:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <MX_ADC1_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <MX_ADC1_Init+0x74>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a24:	480d      	ldr	r0, [pc, #52]	; (8000a5c <MX_ADC1_Init+0x74>)
 8000a26:	f001 f92d 	bl	8001c84 <HAL_ADC_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000a30:	f000 fe3e 	bl	80016b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000a34:	230a      	movs	r3, #10
 8000a36:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	4619      	mov	r1, r3
 8000a44:	4805      	ldr	r0, [pc, #20]	; (8000a5c <MX_ADC1_Init+0x74>)
 8000a46:	f001 fbe1 	bl	800220c <HAL_ADC_ConfigChannel>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000a50:	f000 fe2e 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a54:	bf00      	nop
 8000a56:	3710      	adds	r7, #16
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20000078 	.word	0x20000078
 8000a60:	40012400 	.word	0x40012400

08000a64 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000a74:	4b18      	ldr	r3, [pc, #96]	; (8000ad8 <MX_ADC2_Init+0x74>)
 8000a76:	4a19      	ldr	r2, [pc, #100]	; (8000adc <MX_ADC2_Init+0x78>)
 8000a78:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a7a:	4b17      	ldr	r3, [pc, #92]	; (8000ad8 <MX_ADC2_Init+0x74>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000a80:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <MX_ADC2_Init+0x74>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a86:	4b14      	ldr	r3, [pc, #80]	; (8000ad8 <MX_ADC2_Init+0x74>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a8c:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <MX_ADC2_Init+0x74>)
 8000a8e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000a92:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a94:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <MX_ADC2_Init+0x74>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000a9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <MX_ADC2_Init+0x74>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000aa0:	480d      	ldr	r0, [pc, #52]	; (8000ad8 <MX_ADC2_Init+0x74>)
 8000aa2:	f001 f8ef 	bl	8001c84 <HAL_ADC_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000aac:	f000 fe00 	bl	80016b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000ab0:	230b      	movs	r3, #11
 8000ab2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000abc:	1d3b      	adds	r3, r7, #4
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <MX_ADC2_Init+0x74>)
 8000ac2:	f001 fba3 	bl	800220c <HAL_ADC_ConfigChannel>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000acc:	f000 fdf0 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000ad0:	bf00      	nop
 8000ad2:	3710      	adds	r7, #16
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	200000a8 	.word	0x200000a8
 8000adc:	40012800 	.word	0x40012800

08000ae0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	; 0x28
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 0318 	add.w	r3, r7, #24
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a28      	ldr	r2, [pc, #160]	; (8000b9c <HAL_ADC_MspInit+0xbc>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d122      	bne.n	8000b46 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b00:	4b27      	ldr	r3, [pc, #156]	; (8000ba0 <HAL_ADC_MspInit+0xc0>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	4a26      	ldr	r2, [pc, #152]	; (8000ba0 <HAL_ADC_MspInit+0xc0>)
 8000b06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b0a:	6193      	str	r3, [r2, #24]
 8000b0c:	4b24      	ldr	r3, [pc, #144]	; (8000ba0 <HAL_ADC_MspInit+0xc0>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b14:	617b      	str	r3, [r7, #20]
 8000b16:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b18:	4b21      	ldr	r3, [pc, #132]	; (8000ba0 <HAL_ADC_MspInit+0xc0>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	4a20      	ldr	r2, [pc, #128]	; (8000ba0 <HAL_ADC_MspInit+0xc0>)
 8000b1e:	f043 0310 	orr.w	r3, r3, #16
 8000b22:	6193      	str	r3, [r2, #24]
 8000b24:	4b1e      	ldr	r3, [pc, #120]	; (8000ba0 <HAL_ADC_MspInit+0xc0>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	f003 0310 	and.w	r3, r3, #16
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b30:	2301      	movs	r3, #1
 8000b32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b34:	2303      	movs	r3, #3
 8000b36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b38:	f107 0318 	add.w	r3, r7, #24
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4819      	ldr	r0, [pc, #100]	; (8000ba4 <HAL_ADC_MspInit+0xc4>)
 8000b40:	f001 fddc 	bl	80026fc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000b44:	e026      	b.n	8000b94 <HAL_ADC_MspInit+0xb4>
  else if(adcHandle->Instance==ADC2)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a17      	ldr	r2, [pc, #92]	; (8000ba8 <HAL_ADC_MspInit+0xc8>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d121      	bne.n	8000b94 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000b50:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <HAL_ADC_MspInit+0xc0>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	4a12      	ldr	r2, [pc, #72]	; (8000ba0 <HAL_ADC_MspInit+0xc0>)
 8000b56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b5a:	6193      	str	r3, [r2, #24]
 8000b5c:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <HAL_ADC_MspInit+0xc0>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b68:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <HAL_ADC_MspInit+0xc0>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	4a0c      	ldr	r2, [pc, #48]	; (8000ba0 <HAL_ADC_MspInit+0xc0>)
 8000b6e:	f043 0310 	orr.w	r3, r3, #16
 8000b72:	6193      	str	r3, [r2, #24]
 8000b74:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <HAL_ADC_MspInit+0xc0>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	f003 0310 	and.w	r3, r3, #16
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b80:	2302      	movs	r3, #2
 8000b82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b84:	2303      	movs	r3, #3
 8000b86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b88:	f107 0318 	add.w	r3, r7, #24
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <HAL_ADC_MspInit+0xc4>)
 8000b90:	f001 fdb4 	bl	80026fc <HAL_GPIO_Init>
}
 8000b94:	bf00      	nop
 8000b96:	3728      	adds	r7, #40	; 0x28
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40012400 	.word	0x40012400
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	40011000 	.word	0x40011000
 8000ba8:	40012800 	.word	0x40012800

08000bac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b088      	sub	sp, #32
 8000bb0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb2:	f107 0310 	add.w	r3, r7, #16
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc0:	4b45      	ldr	r3, [pc, #276]	; (8000cd8 <MX_GPIO_Init+0x12c>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	4a44      	ldr	r2, [pc, #272]	; (8000cd8 <MX_GPIO_Init+0x12c>)
 8000bc6:	f043 0310 	orr.w	r3, r3, #16
 8000bca:	6193      	str	r3, [r2, #24]
 8000bcc:	4b42      	ldr	r3, [pc, #264]	; (8000cd8 <MX_GPIO_Init+0x12c>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	f003 0310 	and.w	r3, r3, #16
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bd8:	4b3f      	ldr	r3, [pc, #252]	; (8000cd8 <MX_GPIO_Init+0x12c>)
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	4a3e      	ldr	r2, [pc, #248]	; (8000cd8 <MX_GPIO_Init+0x12c>)
 8000bde:	f043 0320 	orr.w	r3, r3, #32
 8000be2:	6193      	str	r3, [r2, #24]
 8000be4:	4b3c      	ldr	r3, [pc, #240]	; (8000cd8 <MX_GPIO_Init+0x12c>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	f003 0320 	and.w	r3, r3, #32
 8000bec:	60bb      	str	r3, [r7, #8]
 8000bee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf0:	4b39      	ldr	r3, [pc, #228]	; (8000cd8 <MX_GPIO_Init+0x12c>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	4a38      	ldr	r2, [pc, #224]	; (8000cd8 <MX_GPIO_Init+0x12c>)
 8000bf6:	f043 0304 	orr.w	r3, r3, #4
 8000bfa:	6193      	str	r3, [r2, #24]
 8000bfc:	4b36      	ldr	r3, [pc, #216]	; (8000cd8 <MX_GPIO_Init+0x12c>)
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	f003 0304 	and.w	r3, r3, #4
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c08:	4b33      	ldr	r3, [pc, #204]	; (8000cd8 <MX_GPIO_Init+0x12c>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <MX_GPIO_Init+0x12c>)
 8000c0e:	f043 0308 	orr.w	r3, r3, #8
 8000c12:	6193      	str	r3, [r2, #24]
 8000c14:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <MX_GPIO_Init+0x12c>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	f003 0308 	and.w	r3, r3, #8
 8000c1c:	603b      	str	r3, [r7, #0]
 8000c1e:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin Output Level */
  /* original
  HAL_GPIO_WritePin(GPIOC, SSR_XBT3_Pin|SSR_XBT2_Pin|SSR_XBT1_Pin|ENABLE_M1_Pin
                          |DIR_Pin|RELAY_K7_Pin|RELAY_K1_Pin|RELAY_K2_Pin, GPIO_PIN_RESET);
                          */
  HAL_GPIO_WritePin(GPIOC, SSR_XBT3_Pin|SSR_XBT2_Pin|SSR_XBT1_Pin
 8000c20:	2200      	movs	r2, #0
 8000c22:	f64f 4110 	movw	r1, #64528	; 0xfc10
 8000c26:	482d      	ldr	r0, [pc, #180]	; (8000cdc <MX_GPIO_Init+0x130>)
 8000c28:	f001 feec 	bl	8002a04 <HAL_GPIO_WritePin>
                          |DIR_Pin|RELAY_K7_Pin|RELAY_K1_Pin|RELAY_K2_Pin, GPIO_PIN_RESET);
  // Start ENABLE_M1_Pin HIGH
  HAL_GPIO_WritePin(GPIOC, ENABLE_M1_Pin, GPIO_PIN_SET);
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	2104      	movs	r1, #4
 8000c30:	482a      	ldr	r0, [pc, #168]	; (8000cdc <MX_GPIO_Init+0x130>)
 8000c32:	f001 fee7 	bl	8002a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MUX_SELECT_Pin|RELAY_CAL_RES_Pin|RELAY_CAL_CONT_Pin|RELAY_GND_COND_Pin
 8000c36:	2200      	movs	r2, #0
 8000c38:	f649 1104 	movw	r1, #39172	; 0x9904
 8000c3c:	4828      	ldr	r0, [pc, #160]	; (8000ce0 <MX_GPIO_Init+0x134>)
 8000c3e:	f001 fee1 	bl	8002a04 <HAL_GPIO_WritePin>
                          |RELAY_K8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|RELAY_K4_Pin|RELAY_K5_Pin|RELAY_K6_Pin
 8000c42:	2200      	movs	r2, #0
 8000c44:	f240 313a 	movw	r1, #826	; 0x33a
 8000c48:	4826      	ldr	r0, [pc, #152]	; (8000ce4 <MX_GPIO_Init+0x138>)
 8000c4a:	f001 fedb 	bl	8002a04 <HAL_GPIO_WritePin>
                          |RELAY_RESET_1_Pin|SSR_XBT4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_K3_GPIO_Port, RELAY_K3_Pin, GPIO_PIN_RESET);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2104      	movs	r1, #4
 8000c52:	4825      	ldr	r0, [pc, #148]	; (8000ce8 <MX_GPIO_Init+0x13c>)
 8000c54:	f001 fed6 	bl	8002a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SSR_XBT3_Pin|SSR_XBT2_Pin|SSR_XBT1_Pin|ENABLE_M1_Pin
 8000c58:	f64f 4314 	movw	r3, #64532	; 0xfc14
 8000c5c:	613b      	str	r3, [r7, #16]
                          |DIR_Pin|RELAY_K7_Pin|RELAY_K1_Pin|RELAY_K2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c66:	2302      	movs	r3, #2
 8000c68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c6a:	f107 0310 	add.w	r3, r7, #16
 8000c6e:	4619      	mov	r1, r3
 8000c70:	481a      	ldr	r0, [pc, #104]	; (8000cdc <MX_GPIO_Init+0x130>)
 8000c72:	f001 fd43 	bl	80026fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = MUX_SELECT_Pin|RELAY_CAL_RES_Pin|RELAY_CAL_CONT_Pin|RELAY_GND_COND_Pin
 8000c76:	f649 1304 	movw	r3, #39172	; 0x9904
 8000c7a:	613b      	str	r3, [r7, #16]
                          |RELAY_K8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c84:	2302      	movs	r3, #2
 8000c86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c88:	f107 0310 	add.w	r3, r7, #16
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4814      	ldr	r0, [pc, #80]	; (8000ce0 <MX_GPIO_Init+0x134>)
 8000c90:	f001 fd34 	bl	80026fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = LED_Pin|RELAY_K4_Pin|RELAY_K5_Pin|RELAY_K6_Pin
 8000c94:	f240 333a 	movw	r3, #826	; 0x33a
 8000c98:	613b      	str	r3, [r7, #16]
                          |RELAY_RESET_1_Pin|SSR_XBT4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca6:	f107 0310 	add.w	r3, r7, #16
 8000caa:	4619      	mov	r1, r3
 8000cac:	480d      	ldr	r0, [pc, #52]	; (8000ce4 <MX_GPIO_Init+0x138>)
 8000cae:	f001 fd25 	bl	80026fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RELAY_K3_Pin;
 8000cb2:	2304      	movs	r3, #4
 8000cb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RELAY_K3_GPIO_Port, &GPIO_InitStruct);
 8000cc2:	f107 0310 	add.w	r3, r7, #16
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4807      	ldr	r0, [pc, #28]	; (8000ce8 <MX_GPIO_Init+0x13c>)
 8000cca:	f001 fd17 	bl	80026fc <HAL_GPIO_Init>

}
 8000cce:	bf00      	nop
 8000cd0:	3720      	adds	r7, #32
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	40011000 	.word	0x40011000
 8000ce0:	40010800 	.word	0x40010800
 8000ce4:	40010c00 	.word	0x40010c00
 8000ce8:	40011400 	.word	0x40011400

08000cec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <MX_I2C1_Init+0x50>)
 8000cf2:	4a13      	ldr	r2, [pc, #76]	; (8000d40 <MX_I2C1_Init+0x54>)
 8000cf4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000cf6:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <MX_I2C1_Init+0x50>)
 8000cf8:	4a12      	ldr	r2, [pc, #72]	; (8000d44 <MX_I2C1_Init+0x58>)
 8000cfa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <MX_I2C1_Init+0x50>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <MX_I2C1_Init+0x50>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d08:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <MX_I2C1_Init+0x50>)
 8000d0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d0e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d10:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <MX_I2C1_Init+0x50>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d16:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <MX_I2C1_Init+0x50>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d1c:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <MX_I2C1_Init+0x50>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <MX_I2C1_Init+0x50>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d28:	4804      	ldr	r0, [pc, #16]	; (8000d3c <MX_I2C1_Init+0x50>)
 8000d2a:	f001 fe9d 	bl	8002a68 <HAL_I2C_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d34:	f000 fcbc 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	200000d8 	.word	0x200000d8
 8000d40:	40005400 	.word	0x40005400
 8000d44:	000186a0 	.word	0x000186a0

08000d48 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b088      	sub	sp, #32
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d50:	f107 0310 	add.w	r3, r7, #16
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a15      	ldr	r2, [pc, #84]	; (8000db8 <HAL_I2C_MspInit+0x70>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d123      	bne.n	8000db0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d68:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <HAL_I2C_MspInit+0x74>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	4a13      	ldr	r2, [pc, #76]	; (8000dbc <HAL_I2C_MspInit+0x74>)
 8000d6e:	f043 0308 	orr.w	r3, r3, #8
 8000d72:	6193      	str	r3, [r2, #24]
 8000d74:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <HAL_I2C_MspInit+0x74>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	f003 0308 	and.w	r3, r3, #8
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d80:	23c0      	movs	r3, #192	; 0xc0
 8000d82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d84:	2312      	movs	r3, #18
 8000d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8c:	f107 0310 	add.w	r3, r7, #16
 8000d90:	4619      	mov	r1, r3
 8000d92:	480b      	ldr	r0, [pc, #44]	; (8000dc0 <HAL_I2C_MspInit+0x78>)
 8000d94:	f001 fcb2 	bl	80026fc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d98:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <HAL_I2C_MspInit+0x74>)
 8000d9a:	69db      	ldr	r3, [r3, #28]
 8000d9c:	4a07      	ldr	r2, [pc, #28]	; (8000dbc <HAL_I2C_MspInit+0x74>)
 8000d9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000da2:	61d3      	str	r3, [r2, #28]
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <HAL_I2C_MspInit+0x74>)
 8000da6:	69db      	ldr	r3, [r3, #28]
 8000da8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dac:	60bb      	str	r3, [r7, #8]
 8000dae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000db0:	bf00      	nop
 8000db2:	3720      	adds	r7, #32
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40005400 	.word	0x40005400
 8000dbc:	40021000 	.word	0x40021000
 8000dc0:	40010c00 	.word	0x40010c00

08000dc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dca:	f000 fed5 	bl	8001b78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dce:	f000 f841 	bl	8000e54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dd2:	f7ff feeb 	bl	8000bac <MX_GPIO_Init>
  MX_TIM3_Init();
 8000dd6:	f000 fd07 	bl	80017e8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000dda:	f000 fdcb 	bl	8001974 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000dde:	f7ff fe03 	bl	80009e8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000de2:	f7ff fe3f 	bl	8000a64 <MX_ADC2_Init>
  MX_I2C1_Init();
 8000de6:	f7ff ff81 	bl	8000cec <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000dea:	f000 fded 	bl	80019c8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(ENABLE_M1_GPIO_Port, ENABLE_M1_Pin, SET); // Active low >> start disabled
 8000dee:	2201      	movs	r2, #1
 8000df0:	2104      	movs	r1, #4
 8000df2:	4815      	ldr	r0, [pc, #84]	; (8000e48 <main+0x84>)
 8000df4:	f001 fe06 	bl	8002a04 <HAL_GPIO_WritePin>

  //uint8_t option = 0; // Initial option value
  char option = '\0';
 8000df8:	2300      	movs	r3, #0
 8000dfa:	71fb      	strb	r3, [r7, #7]
  uint8_t result = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	71bb      	strb	r3, [r7, #6]

  // SET = UART-tx / RESET = Din from GPS
  HAL_GPIO_WritePin(MUX_SELECT_GPIO_Port, MUX_SELECT_Pin, SET);
 8000e00:	2201      	movs	r2, #1
 8000e02:	2104      	movs	r1, #4
 8000e04:	4811      	ldr	r0, [pc, #68]	; (8000e4c <main+0x88>)
 8000e06:	f001 fdfd 	bl	8002a04 <HAL_GPIO_WritePin>

  // Initialize relay in reset state
  HAL_GPIO_WritePin(RELAY_RESET_1_GPIO_Port, RELAY_RESET_1_Pin, SET); // reset relay
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e10:	480f      	ldr	r0, [pc, #60]	; (8000e50 <main+0x8c>)
 8000e12:	f001 fdf7 	bl	8002a04 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000e16:	200a      	movs	r0, #10
 8000e18:	f000 ff10 	bl	8001c3c <HAL_Delay>
  HAL_GPIO_WritePin(RELAY_RESET_1_GPIO_Port, RELAY_RESET_1_Pin, RESET); // release reset coil
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e22:	480b      	ldr	r0, [pc, #44]	; (8000e50 <main+0x8c>)
 8000e24:	f001 fdee 	bl	8002a04 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000e28:	2005      	movs	r0, #5
 8000e2a:	f000 ff07 	bl	8001c3c <HAL_Delay>

  // Start timer for STEP signal
  //HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_3 ); // Start STEP signal >> counter toggle to toggle every 20/1000 sec = 50hz


  printWelcomeMessage();
 8000e2e:	f000 f861 	bl	8000ef4 <printWelcomeMessage>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  option = readInput();
 8000e32:	f000 f879 	bl	8000f28 <readInput>
 8000e36:	4603      	mov	r3, r0
 8000e38:	71fb      	strb	r3, [r7, #7]
	  result = processInput(option);
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f000 f897 	bl	8000f70 <processInput>
 8000e42:	4603      	mov	r3, r0
 8000e44:	71bb      	strb	r3, [r7, #6]
	  option = readInput();
 8000e46:	e7f4      	b.n	8000e32 <main+0x6e>
 8000e48:	40011000 	.word	0x40011000
 8000e4c:	40010800 	.word	0x40010800
 8000e50:	40010c00 	.word	0x40010c00

08000e54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b094      	sub	sp, #80	; 0x50
 8000e58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e5e:	2228      	movs	r2, #40	; 0x28
 8000e60:	2100      	movs	r1, #0
 8000e62:	4618      	mov	r0, r3
 8000e64:	f004 fc92 	bl	800578c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e78:	1d3b      	adds	r3, r7, #4
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e84:	2302      	movs	r3, #2
 8000e86:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e8c:	2310      	movs	r3, #16
 8000e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e90:	2300      	movs	r3, #0
 8000e92:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f002 fe19 	bl	8003ad0 <HAL_RCC_OscConfig>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000ea4:	f000 fc04 	bl	80016b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ea8:	230f      	movs	r3, #15
 8000eaa:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000eac:	2300      	movs	r3, #0
 8000eae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f003 f886 	bl	8003fd4 <HAL_RCC_ClockConfig>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000ece:	f000 fbef 	bl	80016b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eda:	1d3b      	adds	r3, r7, #4
 8000edc:	4618      	mov	r0, r3
 8000ede:	f003 fa07 	bl	80042f0 <HAL_RCCEx_PeriphCLKConfig>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ee8:	f000 fbe2 	bl	80016b0 <Error_Handler>
  }
}
 8000eec:	bf00      	nop
 8000eee:	3750      	adds	r7, #80	; 0x50
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <printWelcomeMessage>:

/* USER CODE BEGIN 4 */
void printWelcomeMessage(void){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, WELCOME_MSG, strlen(WELCOME_MSG), HAL_MAX_DELAY);
 8000ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8000efc:	222a      	movs	r2, #42	; 0x2a
 8000efe:	4907      	ldr	r1, [pc, #28]	; (8000f1c <printWelcomeMessage+0x28>)
 8000f00:	4807      	ldr	r0, [pc, #28]	; (8000f20 <printWelcomeMessage+0x2c>)
 8000f02:	f004 f985 	bl	8005210 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, menu, strlen(menu), HAL_MAX_DELAY);
 8000f06:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0a:	f44f 728c 	mov.w	r2, #280	; 0x118
 8000f0e:	4905      	ldr	r1, [pc, #20]	; (8000f24 <printWelcomeMessage+0x30>)
 8000f10:	4803      	ldr	r0, [pc, #12]	; (8000f20 <printWelcomeMessage+0x2c>)
 8000f12:	f004 f97d 	bl	8005210 <HAL_UART_Transmit>
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	080060c8 	.word	0x080060c8
 8000f20:	20000178 	.word	0x20000178
 8000f24:	080061d4 	.word	0x080061d4

08000f28 <readInput>:


/* Read user input and return the option selected 1-2-3*/
char readInput(void){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
	char rxBuffer[1];

	HAL_UART_Transmit(&huart1, PROMPT, strlen(PROMPT), HAL_MAX_DELAY);
 8000f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f32:	2213      	movs	r2, #19
 8000f34:	490b      	ldr	r1, [pc, #44]	; (8000f64 <readInput+0x3c>)
 8000f36:	480c      	ldr	r0, [pc, #48]	; (8000f68 <readInput+0x40>)
 8000f38:	f004 f96a 	bl	8005210 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, rxBuffer, 1, HAL_MAX_DELAY);
 8000f3c:	1d39      	adds	r1, r7, #4
 8000f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f42:	2201      	movs	r2, #1
 8000f44:	4808      	ldr	r0, [pc, #32]	; (8000f68 <readInput+0x40>)
 8000f46:	f004 f9e6 	bl	8005316 <HAL_UART_Receive>
	HAL_UART_Transmit(&huart1, rxBuffer, 1, HAL_MAX_DELAY); // echo
 8000f4a:	1d39      	adds	r1, r7, #4
 8000f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f50:	2201      	movs	r2, #1
 8000f52:	4805      	ldr	r0, [pc, #20]	; (8000f68 <readInput+0x40>)
 8000f54:	f004 f95c 	bl	8005210 <HAL_UART_Transmit>

	//return atoi(rxBuffer);
	return rxBuffer[0];
 8000f58:	793b      	ldrb	r3, [r7, #4]
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	080060f4 	.word	0x080060f4
 8000f68:	20000178 	.word	0x20000178
 8000f6c:	00000000 	.word	0x00000000

08000f70 <processInput>:

uint8_t processInput(char option){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b0a2      	sub	sp, #136	; 0x88
 8000f74:	af02      	add	r7, sp, #8
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
	// default
	char msg[30];
	// ADC measurement
	char adcmsg[30];
	float vin = 0.0;
 8000f7a:	f04f 0300 	mov.w	r3, #0
 8000f7e:	67bb      	str	r3, [r7, #120]	; 0x78
	uint16_t adcReading = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
	// EEPROM
	uint8_t chipAddress = 0xA0; // 0b1010000 7 bit address
 8000f86:	23a0      	movs	r3, #160	; 0xa0
 8000f88:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	uint8_t dataReceive[10];
	uint8_t dataByte[4]; // = {0x00, 5, 12, 4}; // store 5 in memory 0x00 and 12 in (n+1)= 0x01
	uint8_t startAddress[1] = {0x00};
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	f887 3020 	strb.w	r3, [r7, #32]
	char output[20];

	// print what was selected
	sprintf(msg, "\r\n> Executing OPTION %d...\r\n",option);
 8000f92:	79fa      	ldrb	r2, [r7, #7]
 8000f94:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f98:	4990      	ldr	r1, [pc, #576]	; (80011dc <processInput+0x26c>)
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f004 fbd6 	bl	800574c <siprintf>
	HAL_UART_Transmit(&huart1, msg, strlen(msg), HAL_MAX_DELAY);
 8000fa0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff f8d3 	bl	8000150 <strlen>
 8000faa:	4603      	mov	r3, r0
 8000fac:	b29a      	uxth	r2, r3
 8000fae:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8000fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb6:	488a      	ldr	r0, [pc, #552]	; (80011e0 <processInput+0x270>)
 8000fb8:	f004 f92a 	bl	8005210 <HAL_UART_Transmit>

	// Execute selected action
	switch(option){
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	3b30      	subs	r3, #48	; 0x30
 8000fc0:	2b35      	cmp	r3, #53	; 0x35
 8000fc2:	f200 834e 	bhi.w	8001662 <processInput+0x6f2>
 8000fc6:	a201      	add	r2, pc, #4	; (adr r2, 8000fcc <processInput+0x5c>)
 8000fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fcc:	080015ef 	.word	0x080015ef
 8000fd0:	0800115d 	.word	0x0800115d
 8000fd4:	08001169 	.word	0x08001169
 8000fd8:	080011b5 	.word	0x080011b5
 8000fdc:	080011f1 	.word	0x080011f1
 8000fe0:	08001361 	.word	0x08001361
 8000fe4:	080013ad 	.word	0x080013ad
 8000fe8:	080013bb 	.word	0x080013bb
 8000fec:	080013c9 	.word	0x080013c9
 8000ff0:	080014c5 	.word	0x080014c5
 8000ff4:	08001663 	.word	0x08001663
 8000ff8:	08001663 	.word	0x08001663
 8000ffc:	08001663 	.word	0x08001663
 8001000:	08001663 	.word	0x08001663
 8001004:	08001663 	.word	0x08001663
 8001008:	08001663 	.word	0x08001663
 800100c:	08001663 	.word	0x08001663
 8001010:	08001663 	.word	0x08001663
 8001014:	08001663 	.word	0x08001663
 8001018:	08001663 	.word	0x08001663
 800101c:	08001663 	.word	0x08001663
 8001020:	08001663 	.word	0x08001663
 8001024:	08001663 	.word	0x08001663
 8001028:	08001663 	.word	0x08001663
 800102c:	08001663 	.word	0x08001663
 8001030:	08001663 	.word	0x08001663
 8001034:	08001663 	.word	0x08001663
 8001038:	08001663 	.word	0x08001663
 800103c:	08001663 	.word	0x08001663
 8001040:	08001663 	.word	0x08001663
 8001044:	08001663 	.word	0x08001663
 8001048:	08001663 	.word	0x08001663
 800104c:	08001663 	.word	0x08001663
 8001050:	08001663 	.word	0x08001663
 8001054:	08001663 	.word	0x08001663
 8001058:	08001663 	.word	0x08001663
 800105c:	08001663 	.word	0x08001663
 8001060:	08001663 	.word	0x08001663
 8001064:	08001663 	.word	0x08001663
 8001068:	08001663 	.word	0x08001663
 800106c:	08001663 	.word	0x08001663
 8001070:	08001663 	.word	0x08001663
 8001074:	08001663 	.word	0x08001663
 8001078:	08001663 	.word	0x08001663
 800107c:	08001663 	.word	0x08001663
 8001080:	08001663 	.word	0x08001663
 8001084:	08001663 	.word	0x08001663
 8001088:	08001663 	.word	0x08001663
 800108c:	08001663 	.word	0x08001663
 8001090:	080010a5 	.word	0x080010a5
 8001094:	080010cd 	.word	0x080010cd
 8001098:	080010f1 	.word	0x080010f1
 800109c:	08001115 	.word	0x08001115
 80010a0:	08001139 	.word	0x08001139
	case 'a': // Set relay
		// SET relay k2
		HAL_GPIO_WritePin(RELAY_K2_GPIO_Port, RELAY_K2_Pin, SET); // set relay
 80010a4:	2201      	movs	r2, #1
 80010a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010aa:	484e      	ldr	r0, [pc, #312]	; (80011e4 <processInput+0x274>)
 80010ac:	f001 fcaa 	bl	8002a04 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 80010b0:	200a      	movs	r0, #10
 80010b2:	f000 fdc3 	bl	8001c3c <HAL_Delay>
		HAL_GPIO_WritePin(RELAY_K2_GPIO_Port, RELAY_K2_Pin, RESET); // release coil
 80010b6:	2200      	movs	r2, #0
 80010b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010bc:	4849      	ldr	r0, [pc, #292]	; (80011e4 <processInput+0x274>)
 80010be:	f001 fca1 	bl	8002a04 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 80010c2:	2005      	movs	r0, #5
 80010c4:	f000 fdba 	bl	8001c3c <HAL_Delay>
		return 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	e2df      	b.n	800168c <processInput+0x71c>
	case 'b': // Set relay
		// SET relay k3
		HAL_GPIO_WritePin(RELAY_K3_GPIO_Port, RELAY_K3_Pin, SET); // set relay
 80010cc:	2201      	movs	r2, #1
 80010ce:	2104      	movs	r1, #4
 80010d0:	4845      	ldr	r0, [pc, #276]	; (80011e8 <processInput+0x278>)
 80010d2:	f001 fc97 	bl	8002a04 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 80010d6:	200a      	movs	r0, #10
 80010d8:	f000 fdb0 	bl	8001c3c <HAL_Delay>
		HAL_GPIO_WritePin(RELAY_K3_GPIO_Port, RELAY_K3_Pin, RESET); // release coil
 80010dc:	2200      	movs	r2, #0
 80010de:	2104      	movs	r1, #4
 80010e0:	4841      	ldr	r0, [pc, #260]	; (80011e8 <processInput+0x278>)
 80010e2:	f001 fc8f 	bl	8002a04 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 80010e6:	2005      	movs	r0, #5
 80010e8:	f000 fda8 	bl	8001c3c <HAL_Delay>
		return 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	e2cd      	b.n	800168c <processInput+0x71c>
	case 'c': // Set relay
		// SET relay k4
		HAL_GPIO_WritePin(RELAY_K4_GPIO_Port, RELAY_K4_Pin, SET); // set relay
 80010f0:	2201      	movs	r2, #1
 80010f2:	2108      	movs	r1, #8
 80010f4:	483d      	ldr	r0, [pc, #244]	; (80011ec <processInput+0x27c>)
 80010f6:	f001 fc85 	bl	8002a04 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 80010fa:	200a      	movs	r0, #10
 80010fc:	f000 fd9e 	bl	8001c3c <HAL_Delay>
		HAL_GPIO_WritePin(RELAY_K4_GPIO_Port, RELAY_K4_Pin, RESET); // release coil
 8001100:	2200      	movs	r2, #0
 8001102:	2108      	movs	r1, #8
 8001104:	4839      	ldr	r0, [pc, #228]	; (80011ec <processInput+0x27c>)
 8001106:	f001 fc7d 	bl	8002a04 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 800110a:	2005      	movs	r0, #5
 800110c:	f000 fd96 	bl	8001c3c <HAL_Delay>
		return 0;
 8001110:	2300      	movs	r3, #0
 8001112:	e2bb      	b.n	800168c <processInput+0x71c>
	case 'd': // Set relay
		// SET relay k5
		HAL_GPIO_WritePin(RELAY_K5_GPIO_Port, RELAY_K5_Pin, SET); // set relay
 8001114:	2201      	movs	r2, #1
 8001116:	2110      	movs	r1, #16
 8001118:	4834      	ldr	r0, [pc, #208]	; (80011ec <processInput+0x27c>)
 800111a:	f001 fc73 	bl	8002a04 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 800111e:	200a      	movs	r0, #10
 8001120:	f000 fd8c 	bl	8001c3c <HAL_Delay>
		HAL_GPIO_WritePin(RELAY_K5_GPIO_Port, RELAY_K5_Pin, RESET); // release coil
 8001124:	2200      	movs	r2, #0
 8001126:	2110      	movs	r1, #16
 8001128:	4830      	ldr	r0, [pc, #192]	; (80011ec <processInput+0x27c>)
 800112a:	f001 fc6b 	bl	8002a04 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 800112e:	2005      	movs	r0, #5
 8001130:	f000 fd84 	bl	8001c3c <HAL_Delay>
		return 0;
 8001134:	2300      	movs	r3, #0
 8001136:	e2a9      	b.n	800168c <processInput+0x71c>
	case 'e': // Set relay
		// SET relay k6
		HAL_GPIO_WritePin(RELAY_K6_GPIO_Port, RELAY_K6_Pin, SET); // set relay
 8001138:	2201      	movs	r2, #1
 800113a:	2120      	movs	r1, #32
 800113c:	482b      	ldr	r0, [pc, #172]	; (80011ec <processInput+0x27c>)
 800113e:	f001 fc61 	bl	8002a04 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8001142:	200a      	movs	r0, #10
 8001144:	f000 fd7a 	bl	8001c3c <HAL_Delay>
		HAL_GPIO_WritePin(RELAY_K6_GPIO_Port, RELAY_K6_Pin, RESET); // release coil
 8001148:	2200      	movs	r2, #0
 800114a:	2120      	movs	r1, #32
 800114c:	4827      	ldr	r0, [pc, #156]	; (80011ec <processInput+0x27c>)
 800114e:	f001 fc59 	bl	8002a04 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 8001152:	2005      	movs	r0, #5
 8001154:	f000 fd72 	bl	8001c3c <HAL_Delay>
		return 0;
 8001158:	2300      	movs	r3, #0
 800115a:	e297      	b.n	800168c <processInput+0x71c>
	case '1': // toggle green led
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800115c:	2102      	movs	r1, #2
 800115e:	4823      	ldr	r0, [pc, #140]	; (80011ec <processInput+0x27c>)
 8001160:	f001 fc68 	bl	8002a34 <HAL_GPIO_TogglePin>
		return 0;
 8001164:	2300      	movs	r3, #0
 8001166:	e291      	b.n	800168c <processInput+0x71c>
	case '2': // Set relay
		// SET relay k1
		HAL_GPIO_WritePin(RELAY_K1_GPIO_Port, RELAY_K1_Pin, SET); // set relay
 8001168:	2201      	movs	r2, #1
 800116a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800116e:	481d      	ldr	r0, [pc, #116]	; (80011e4 <processInput+0x274>)
 8001170:	f001 fc48 	bl	8002a04 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8001174:	200a      	movs	r0, #10
 8001176:	f000 fd61 	bl	8001c3c <HAL_Delay>
		HAL_GPIO_WritePin(RELAY_K1_GPIO_Port, RELAY_K1_Pin, RESET); // release coil
 800117a:	2200      	movs	r2, #0
 800117c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001180:	4818      	ldr	r0, [pc, #96]	; (80011e4 <processInput+0x274>)
 8001182:	f001 fc3f 	bl	8002a04 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 8001186:	2005      	movs	r0, #5
 8001188:	f000 fd58 	bl	8001c3c <HAL_Delay>
		// SET SSR1 XBT1
		HAL_GPIO_WritePin(SSR_XBT1_GPIO_Port, SSR_XBT1_Pin, SET); // set SSR latch
 800118c:	2201      	movs	r2, #1
 800118e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001192:	4814      	ldr	r0, [pc, #80]	; (80011e4 <processInput+0x274>)
 8001194:	f001 fc36 	bl	8002a04 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8001198:	200a      	movs	r0, #10
 800119a:	f000 fd4f 	bl	8001c3c <HAL_Delay>
		HAL_GPIO_WritePin(SSR_XBT1_GPIO_Port, SSR_XBT1_Pin, RESET); // release SSR latch
 800119e:	2200      	movs	r2, #0
 80011a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011a4:	480f      	ldr	r0, [pc, #60]	; (80011e4 <processInput+0x274>)
 80011a6:	f001 fc2d 	bl	8002a04 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 80011aa:	2005      	movs	r0, #5
 80011ac:	f000 fd46 	bl	8001c3c <HAL_Delay>
		return 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	e26b      	b.n	800168c <processInput+0x71c>
	case '3': // Reset relay
		// RESET relay k1
		HAL_GPIO_WritePin(RELAY_RESET_1_GPIO_Port, RELAY_RESET_1_Pin, SET); // reset relay and SSR
 80011b4:	2201      	movs	r2, #1
 80011b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ba:	480c      	ldr	r0, [pc, #48]	; (80011ec <processInput+0x27c>)
 80011bc:	f001 fc22 	bl	8002a04 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 80011c0:	200a      	movs	r0, #10
 80011c2:	f000 fd3b 	bl	8001c3c <HAL_Delay>
		HAL_GPIO_WritePin(RELAY_RESET_1_GPIO_Port, RELAY_RESET_1_Pin, RESET); // release reset coil
 80011c6:	2200      	movs	r2, #0
 80011c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011cc:	4807      	ldr	r0, [pc, #28]	; (80011ec <processInput+0x27c>)
 80011ce:	f001 fc19 	bl	8002a04 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 80011d2:	2005      	movs	r0, #5
 80011d4:	f000 fd32 	bl	8001c3c <HAL_Delay>
		return 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	e257      	b.n	800168c <processInput+0x71c>
 80011dc:	08006108 	.word	0x08006108
 80011e0:	20000178 	.word	0x20000178
 80011e4:	40011000 	.word	0x40011000
 80011e8:	40011400 	.word	0x40011400
 80011ec:	40010c00 	.word	0x40010c00
	case '4': // Run motor CW
		HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_3 ); // Start STEP signal >> counter toggle to toggle every 20/1000 sec = 50hz
 80011f0:	2108      	movs	r1, #8
 80011f2:	48a7      	ldr	r0, [pc, #668]	; (8001490 <processInput+0x520>)
 80011f4:	f003 fa90 	bl	8004718 <HAL_TIM_OC_Start>
		// motor
		HAL_GPIO_WritePin(ENABLE_M1_GPIO_Port, ENABLE_M1_Pin, SET); // disable driver
 80011f8:	2201      	movs	r2, #1
 80011fa:	2104      	movs	r1, #4
 80011fc:	48a5      	ldr	r0, [pc, #660]	; (8001494 <processInput+0x524>)
 80011fe:	f001 fc01 	bl	8002a04 <HAL_GPIO_WritePin>
		HAL_Delay(500); // wait for the motor to stop
 8001202:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001206:	f000 fd19 	bl	8001c3c <HAL_Delay>
		HAL_GPIO_WritePin(DIR_GPIO_Port,DIR_Pin, SET); // set motor direction
 800120a:	2201      	movs	r2, #1
 800120c:	2110      	movs	r1, #16
 800120e:	48a1      	ldr	r0, [pc, #644]	; (8001494 <processInput+0x524>)
 8001210:	f001 fbf8 	bl	8002a04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENABLE_M1_GPIO_Port, ENABLE_M1_Pin, RESET); // enable driver to run motor
 8001214:	2200      	movs	r2, #0
 8001216:	2104      	movs	r1, #4
 8001218:	489e      	ldr	r0, [pc, #632]	; (8001494 <processInput+0x524>)
 800121a:	f001 fbf3 	bl	8002a04 <HAL_GPIO_WritePin>
		// read current
		HAL_ADC_Start(&hadc2);
 800121e:	489e      	ldr	r0, [pc, #632]	; (8001498 <processInput+0x528>)
 8001220:	f000 fe08 	bl	8001e34 <HAL_ADC_Start>

		HAL_ADC_PollForConversion(&hadc2, 100);
 8001224:	2164      	movs	r1, #100	; 0x64
 8001226:	489c      	ldr	r0, [pc, #624]	; (8001498 <processInput+0x528>)
 8001228:	f000 fede 	bl	8001fe8 <HAL_ADC_PollForConversion>
		adcReading = (uint16_t) HAL_ADC_GetValue(&hadc2);
 800122c:	489a      	ldr	r0, [pc, #616]	; (8001498 <processInput+0x528>)
 800122e:	f000 ffe1 	bl	80021f4 <HAL_ADC_GetValue>
 8001232:	4603      	mov	r3, r0
 8001234:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
		sprintf(adcmsg, "Im_1 = %d\r\n", (uint32_t) adcReading);
 8001238:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800123c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001240:	4996      	ldr	r1, [pc, #600]	; (800149c <processInput+0x52c>)
 8001242:	4618      	mov	r0, r3
 8001244:	f004 fa82 	bl	800574c <siprintf>
		HAL_UART_Transmit(&huart1, adcmsg, strlen(adcmsg), HAL_MAX_DELAY);
 8001248:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800124c:	4618      	mov	r0, r3
 800124e:	f7fe ff7f 	bl	8000150 <strlen>
 8001252:	4603      	mov	r3, r0
 8001254:	b29a      	uxth	r2, r3
 8001256:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800125a:	f04f 33ff 	mov.w	r3, #4294967295
 800125e:	4890      	ldr	r0, [pc, #576]	; (80014a0 <processInput+0x530>)
 8001260:	f003 ffd6 	bl	8005210 <HAL_UART_Transmit>
		HAL_Delay(1000);
 8001264:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001268:	f000 fce8 	bl	8001c3c <HAL_Delay>

		HAL_ADC_PollForConversion(&hadc2, 100);
 800126c:	2164      	movs	r1, #100	; 0x64
 800126e:	488a      	ldr	r0, [pc, #552]	; (8001498 <processInput+0x528>)
 8001270:	f000 feba 	bl	8001fe8 <HAL_ADC_PollForConversion>
		adcReading = (uint16_t) HAL_ADC_GetValue(&hadc2);
 8001274:	4888      	ldr	r0, [pc, #544]	; (8001498 <processInput+0x528>)
 8001276:	f000 ffbd 	bl	80021f4 <HAL_ADC_GetValue>
 800127a:	4603      	mov	r3, r0
 800127c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
		sprintf(adcmsg, "Im_2 = %d\r\n", (uint32_t) adcReading);
 8001280:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8001284:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001288:	4986      	ldr	r1, [pc, #536]	; (80014a4 <processInput+0x534>)
 800128a:	4618      	mov	r0, r3
 800128c:	f004 fa5e 	bl	800574c <siprintf>
		HAL_UART_Transmit(&huart1, adcmsg, strlen(adcmsg), HAL_MAX_DELAY);
 8001290:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001294:	4618      	mov	r0, r3
 8001296:	f7fe ff5b 	bl	8000150 <strlen>
 800129a:	4603      	mov	r3, r0
 800129c:	b29a      	uxth	r2, r3
 800129e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80012a2:	f04f 33ff 	mov.w	r3, #4294967295
 80012a6:	487e      	ldr	r0, [pc, #504]	; (80014a0 <processInput+0x530>)
 80012a8:	f003 ffb2 	bl	8005210 <HAL_UART_Transmit>
		HAL_Delay(1000);
 80012ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012b0:	f000 fcc4 	bl	8001c3c <HAL_Delay>

		HAL_ADC_PollForConversion(&hadc2, 100);
 80012b4:	2164      	movs	r1, #100	; 0x64
 80012b6:	4878      	ldr	r0, [pc, #480]	; (8001498 <processInput+0x528>)
 80012b8:	f000 fe96 	bl	8001fe8 <HAL_ADC_PollForConversion>
		adcReading = (uint16_t) HAL_ADC_GetValue(&hadc2);
 80012bc:	4876      	ldr	r0, [pc, #472]	; (8001498 <processInput+0x528>)
 80012be:	f000 ff99 	bl	80021f4 <HAL_ADC_GetValue>
 80012c2:	4603      	mov	r3, r0
 80012c4:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
		sprintf(adcmsg, "Im_3 = %d\r\n", (uint32_t) adcReading);
 80012c8:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80012cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012d0:	4975      	ldr	r1, [pc, #468]	; (80014a8 <processInput+0x538>)
 80012d2:	4618      	mov	r0, r3
 80012d4:	f004 fa3a 	bl	800574c <siprintf>
		HAL_UART_Transmit(&huart1, adcmsg, strlen(adcmsg), HAL_MAX_DELAY);
 80012d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012dc:	4618      	mov	r0, r3
 80012de:	f7fe ff37 	bl	8000150 <strlen>
 80012e2:	4603      	mov	r3, r0
 80012e4:	b29a      	uxth	r2, r3
 80012e6:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80012ea:	f04f 33ff 	mov.w	r3, #4294967295
 80012ee:	486c      	ldr	r0, [pc, #432]	; (80014a0 <processInput+0x530>)
 80012f0:	f003 ff8e 	bl	8005210 <HAL_UART_Transmit>
		HAL_Delay(1000);
 80012f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012f8:	f000 fca0 	bl	8001c3c <HAL_Delay>

		HAL_ADC_PollForConversion(&hadc2, 100);
 80012fc:	2164      	movs	r1, #100	; 0x64
 80012fe:	4866      	ldr	r0, [pc, #408]	; (8001498 <processInput+0x528>)
 8001300:	f000 fe72 	bl	8001fe8 <HAL_ADC_PollForConversion>
		adcReading = (uint16_t) HAL_ADC_GetValue(&hadc2);
 8001304:	4864      	ldr	r0, [pc, #400]	; (8001498 <processInput+0x528>)
 8001306:	f000 ff75 	bl	80021f4 <HAL_ADC_GetValue>
 800130a:	4603      	mov	r3, r0
 800130c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
		sprintf(adcmsg, "Im_4 = %d\r\n", (uint32_t) adcReading);
 8001310:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8001314:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001318:	4964      	ldr	r1, [pc, #400]	; (80014ac <processInput+0x53c>)
 800131a:	4618      	mov	r0, r3
 800131c:	f004 fa16 	bl	800574c <siprintf>
		HAL_UART_Transmit(&huart1, adcmsg, strlen(adcmsg), HAL_MAX_DELAY);
 8001320:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001324:	4618      	mov	r0, r3
 8001326:	f7fe ff13 	bl	8000150 <strlen>
 800132a:	4603      	mov	r3, r0
 800132c:	b29a      	uxth	r2, r3
 800132e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001332:	f04f 33ff 	mov.w	r3, #4294967295
 8001336:	485a      	ldr	r0, [pc, #360]	; (80014a0 <processInput+0x530>)
 8001338:	f003 ff6a 	bl	8005210 <HAL_UART_Transmit>
		HAL_Delay(1000);
 800133c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001340:	f000 fc7c 	bl	8001c3c <HAL_Delay>

		HAL_ADC_Stop(&hadc1);
 8001344:	485a      	ldr	r0, [pc, #360]	; (80014b0 <processInput+0x540>)
 8001346:	f000 fe23 	bl	8001f90 <HAL_ADC_Stop>

		//HAL_Delay(5000); // run 5 seconds
		HAL_GPIO_WritePin(ENABLE_M1_GPIO_Port, ENABLE_M1_Pin, SET); // disable driver
 800134a:	2201      	movs	r2, #1
 800134c:	2104      	movs	r1, #4
 800134e:	4851      	ldr	r0, [pc, #324]	; (8001494 <processInput+0x524>)
 8001350:	f001 fb58 	bl	8002a04 <HAL_GPIO_WritePin>
		HAL_TIM_OC_Stop(&htim3, TIM_CHANNEL_3 );
 8001354:	2108      	movs	r1, #8
 8001356:	484e      	ldr	r0, [pc, #312]	; (8001490 <processInput+0x520>)
 8001358:	f003 fa80 	bl	800485c <HAL_TIM_OC_Stop>

		return 0;
 800135c:	2300      	movs	r3, #0
 800135e:	e195      	b.n	800168c <processInput+0x71c>
	case '5': // Run motor CCW
		HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_3 );
 8001360:	2108      	movs	r1, #8
 8001362:	484b      	ldr	r0, [pc, #300]	; (8001490 <processInput+0x520>)
 8001364:	f003 f9d8 	bl	8004718 <HAL_TIM_OC_Start>
		// motor
		HAL_GPIO_WritePin(ENABLE_M1_GPIO_Port, ENABLE_M1_Pin, SET); // disable driver
 8001368:	2201      	movs	r2, #1
 800136a:	2104      	movs	r1, #4
 800136c:	4849      	ldr	r0, [pc, #292]	; (8001494 <processInput+0x524>)
 800136e:	f001 fb49 	bl	8002a04 <HAL_GPIO_WritePin>
		HAL_Delay(500); // wait for the motor to stop
 8001372:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001376:	f000 fc61 	bl	8001c3c <HAL_Delay>
		HAL_GPIO_WritePin(DIR_GPIO_Port,DIR_Pin, RESET); // set motor direction
 800137a:	2200      	movs	r2, #0
 800137c:	2110      	movs	r1, #16
 800137e:	4845      	ldr	r0, [pc, #276]	; (8001494 <processInput+0x524>)
 8001380:	f001 fb40 	bl	8002a04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENABLE_M1_GPIO_Port, ENABLE_M1_Pin, RESET); // enable driver to run motor
 8001384:	2200      	movs	r2, #0
 8001386:	2104      	movs	r1, #4
 8001388:	4842      	ldr	r0, [pc, #264]	; (8001494 <processInput+0x524>)
 800138a:	f001 fb3b 	bl	8002a04 <HAL_GPIO_WritePin>
		HAL_Delay(5000); // run 5 seconds
 800138e:	f241 3088 	movw	r0, #5000	; 0x1388
 8001392:	f000 fc53 	bl	8001c3c <HAL_Delay>
		HAL_GPIO_WritePin(ENABLE_M1_GPIO_Port, ENABLE_M1_Pin, SET); // disable driver
 8001396:	2201      	movs	r2, #1
 8001398:	2104      	movs	r1, #4
 800139a:	483e      	ldr	r0, [pc, #248]	; (8001494 <processInput+0x524>)
 800139c:	f001 fb32 	bl	8002a04 <HAL_GPIO_WritePin>

		HAL_TIM_OC_Stop(&htim3, TIM_CHANNEL_3 );
 80013a0:	2108      	movs	r1, #8
 80013a2:	483b      	ldr	r0, [pc, #236]	; (8001490 <processInput+0x520>)
 80013a4:	f003 fa5a 	bl	800485c <HAL_TIM_OC_Stop>
		return 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	e16f      	b.n	800168c <processInput+0x71c>
	case '6': // change MUX to GPS
		HAL_GPIO_WritePin(MUX_SELECT_GPIO_Port, MUX_SELECT_Pin, RESET);
 80013ac:	2200      	movs	r2, #0
 80013ae:	2104      	movs	r1, #4
 80013b0:	4840      	ldr	r0, [pc, #256]	; (80014b4 <processInput+0x544>)
 80013b2:	f001 fb27 	bl	8002a04 <HAL_GPIO_WritePin>
		return 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	e168      	b.n	800168c <processInput+0x71c>
	case '7': // change MUX to STM32
		HAL_GPIO_WritePin(MUX_SELECT_GPIO_Port, MUX_SELECT_Pin, SET);
 80013ba:	2201      	movs	r2, #1
 80013bc:	2104      	movs	r1, #4
 80013be:	483d      	ldr	r0, [pc, #244]	; (80014b4 <processInput+0x544>)
 80013c0:	f001 fb20 	bl	8002a04 <HAL_GPIO_WritePin>
		return 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	e161      	b.n	800168c <processInput+0x71c>
	case '8': // read ADC Vin
		HAL_ADC_Start(&hadc1);
 80013c8:	4839      	ldr	r0, [pc, #228]	; (80014b0 <processInput+0x540>)
 80013ca:	f000 fd33 	bl	8001e34 <HAL_ADC_Start>
		for(uint8_t i=0; i<10; i++){
 80013ce:	2300      	movs	r3, #0
 80013d0:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 80013d4:	e012      	b.n	80013fc <processInput+0x48c>
			HAL_ADC_PollForConversion(&hadc1, 100);
 80013d6:	2164      	movs	r1, #100	; 0x64
 80013d8:	4835      	ldr	r0, [pc, #212]	; (80014b0 <processInput+0x540>)
 80013da:	f000 fe05 	bl	8001fe8 <HAL_ADC_PollForConversion>
			adcReading += (uint16_t) HAL_ADC_GetValue(&hadc1);
 80013de:	4834      	ldr	r0, [pc, #208]	; (80014b0 <processInput+0x540>)
 80013e0:	f000 ff08 	bl	80021f4 <HAL_ADC_GetValue>
 80013e4:	4603      	mov	r3, r0
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80013ec:	4413      	add	r3, r2
 80013ee:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
		for(uint8_t i=0; i<10; i++){
 80013f2:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80013f6:	3301      	adds	r3, #1
 80013f8:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 80013fc:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8001400:	2b09      	cmp	r3, #9
 8001402:	d9e8      	bls.n	80013d6 <processInput+0x466>
		}
		HAL_ADC_Stop(&hadc1);
 8001404:	482a      	ldr	r0, [pc, #168]	; (80014b0 <processInput+0x540>)
 8001406:	f000 fdc3 	bl	8001f90 <HAL_ADC_Stop>
		adcReading = adcReading/10;
 800140a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800140e:	4a2a      	ldr	r2, [pc, #168]	; (80014b8 <processInput+0x548>)
 8001410:	fba2 2303 	umull	r2, r3, r2, r3
 8001414:	08db      	lsrs	r3, r3, #3
 8001416:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
		vin = adcReading * 17.0/1867.0;
 800141a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800141e:	4618      	mov	r0, r3
 8001420:	f7fe fff0 	bl	8000404 <__aeabi_i2d>
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	4b24      	ldr	r3, [pc, #144]	; (80014bc <processInput+0x54c>)
 800142a:	f7ff f855 	bl	80004d8 <__aeabi_dmul>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4610      	mov	r0, r2
 8001434:	4619      	mov	r1, r3
 8001436:	a314      	add	r3, pc, #80	; (adr r3, 8001488 <processInput+0x518>)
 8001438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143c:	f7ff f976 	bl	800072c <__aeabi_ddiv>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	4610      	mov	r0, r2
 8001446:	4619      	mov	r1, r3
 8001448:	f7ff fa58 	bl	80008fc <__aeabi_d2f>
 800144c:	4603      	mov	r3, r0
 800144e:	67bb      	str	r3, [r7, #120]	; 0x78

		//char adcmsg[30];
		sprintf(adcmsg, "Vin = %d ", (int)vin);
 8001450:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001452:	f7ff faa3 	bl	800099c <__aeabi_f2iz>
 8001456:	4602      	mov	r2, r0
 8001458:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800145c:	4918      	ldr	r1, [pc, #96]	; (80014c0 <processInput+0x550>)
 800145e:	4618      	mov	r0, r3
 8001460:	f004 f974 	bl	800574c <siprintf>
		HAL_UART_Transmit(&huart1, adcmsg, strlen(adcmsg), HAL_MAX_DELAY);
 8001464:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001468:	4618      	mov	r0, r3
 800146a:	f7fe fe71 	bl	8000150 <strlen>
 800146e:	4603      	mov	r3, r0
 8001470:	b29a      	uxth	r2, r3
 8001472:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001476:	f04f 33ff 	mov.w	r3, #4294967295
 800147a:	4809      	ldr	r0, [pc, #36]	; (80014a0 <processInput+0x530>)
 800147c:	f003 fec8 	bl	8005210 <HAL_UART_Transmit>
		return 0;
 8001480:	2300      	movs	r3, #0
 8001482:	e103      	b.n	800168c <processInput+0x71c>
 8001484:	f3af 8000 	nop.w
 8001488:	00000000 	.word	0x00000000
 800148c:	409d2c00 	.word	0x409d2c00
 8001490:	20000130 	.word	0x20000130
 8001494:	40011000 	.word	0x40011000
 8001498:	200000a8 	.word	0x200000a8
 800149c:	08006128 	.word	0x08006128
 80014a0:	20000178 	.word	0x20000178
 80014a4:	08006134 	.word	0x08006134
 80014a8:	08006140 	.word	0x08006140
 80014ac:	0800614c 	.word	0x0800614c
 80014b0:	20000078 	.word	0x20000078
 80014b4:	40010800 	.word	0x40010800
 80014b8:	cccccccd 	.word	0xcccccccd
 80014bc:	40310000 	.word	0x40310000
 80014c0:	08006158 	.word	0x08006158
	case '9':
		// get values to store in eeprom
		uint8_t a,b;
		char rxBuffer[1];
		HAL_UART_Transmit(&huart1, "Val-1= ", strlen("Val-1= "), HAL_MAX_DELAY);
 80014c4:	f04f 33ff 	mov.w	r3, #4294967295
 80014c8:	2207      	movs	r2, #7
 80014ca:	4972      	ldr	r1, [pc, #456]	; (8001694 <processInput+0x724>)
 80014cc:	4872      	ldr	r0, [pc, #456]	; (8001698 <processInput+0x728>)
 80014ce:	f003 fe9f 	bl	8005210 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart1, rxBuffer, 1, HAL_MAX_DELAY);
 80014d2:	f107 0108 	add.w	r1, r7, #8
 80014d6:	f04f 33ff 	mov.w	r3, #4294967295
 80014da:	2201      	movs	r2, #1
 80014dc:	486e      	ldr	r0, [pc, #440]	; (8001698 <processInput+0x728>)
 80014de:	f003 ff1a 	bl	8005316 <HAL_UART_Receive>
		HAL_UART_Transmit(&huart1, rxBuffer, 1, HAL_MAX_DELAY); // echo
 80014e2:	f107 0108 	add.w	r1, r7, #8
 80014e6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ea:	2201      	movs	r2, #1
 80014ec:	486a      	ldr	r0, [pc, #424]	; (8001698 <processInput+0x728>)
 80014ee:	f003 fe8f 	bl	8005210 <HAL_UART_Transmit>
		a = atoi(rxBuffer);
 80014f2:	f107 0308 	add.w	r3, r7, #8
 80014f6:	4618      	mov	r0, r3
 80014f8:	f004 f89c 	bl	8005634 <atoi>
 80014fc:	4603      	mov	r3, r0
 80014fe:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
		HAL_UART_Transmit(&huart1, "\r\nVal-2= ", strlen("\r\nVal-2= "), HAL_MAX_DELAY);
 8001502:	f04f 33ff 	mov.w	r3, #4294967295
 8001506:	2209      	movs	r2, #9
 8001508:	4964      	ldr	r1, [pc, #400]	; (800169c <processInput+0x72c>)
 800150a:	4863      	ldr	r0, [pc, #396]	; (8001698 <processInput+0x728>)
 800150c:	f003 fe80 	bl	8005210 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart1, rxBuffer, 1, HAL_MAX_DELAY);
 8001510:	f107 0108 	add.w	r1, r7, #8
 8001514:	f04f 33ff 	mov.w	r3, #4294967295
 8001518:	2201      	movs	r2, #1
 800151a:	485f      	ldr	r0, [pc, #380]	; (8001698 <processInput+0x728>)
 800151c:	f003 fefb 	bl	8005316 <HAL_UART_Receive>
		HAL_UART_Transmit(&huart1, rxBuffer, 1, HAL_MAX_DELAY); // echo
 8001520:	f107 0108 	add.w	r1, r7, #8
 8001524:	f04f 33ff 	mov.w	r3, #4294967295
 8001528:	2201      	movs	r2, #1
 800152a:	485b      	ldr	r0, [pc, #364]	; (8001698 <processInput+0x728>)
 800152c:	f003 fe70 	bl	8005210 <HAL_UART_Transmit>
		b = atoi(rxBuffer);
 8001530:	f107 0308 	add.w	r3, r7, #8
 8001534:	4618      	mov	r0, r3
 8001536:	f004 f87d 	bl	8005634 <atoi>
 800153a:	4603      	mov	r3, r0
 800153c:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75

		// store 2 bytes starting in address 0x00 total 1 kbit = 1024 bit = 128 bytes
		// 1 page = 8 bytes >> 16 pages >> (0x00) 0-7, 8-15, 16-23, ... 120-127 (0x7F)
		dataByte[0] = 0x00;
 8001540:	2300      	movs	r3, #0
 8001542:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		dataByte[1] = a;
 8001546:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800154a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		dataByte[2] = b;
 800154e:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8001552:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		dataByte[3] = 249; // 0-255 8bits
 8001556:	23f9      	movs	r3, #249	; 0xf9
 8001558:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		HAL_I2C_Master_Transmit(&hi2c1, chipAddress , dataByte, 4, HAL_MAX_DELAY); // send word address, value
 800155c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001560:	b299      	uxth	r1, r3
 8001562:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001566:	f04f 33ff 	mov.w	r3, #4294967295
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	2304      	movs	r3, #4
 800156e:	484c      	ldr	r0, [pc, #304]	; (80016a0 <processInput+0x730>)
 8001570:	f001 fbbe 	bl	8002cf0 <HAL_I2C_Master_Transmit>
		HAL_Delay(10);
 8001574:	200a      	movs	r0, #10
 8001576:	f000 fb61 	bl	8001c3c <HAL_Delay>

		// read 2 bytes from data address 0x00, 0x01
		HAL_I2C_Master_Transmit(&hi2c1, chipAddress , startAddress, 1, HAL_MAX_DELAY); // dummy write with word address 0x00 as starting address
 800157a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800157e:	b299      	uxth	r1, r3
 8001580:	f107 0220 	add.w	r2, r7, #32
 8001584:	f04f 33ff 	mov.w	r3, #4294967295
 8001588:	9300      	str	r3, [sp, #0]
 800158a:	2301      	movs	r3, #1
 800158c:	4844      	ldr	r0, [pc, #272]	; (80016a0 <processInput+0x730>)
 800158e:	f001 fbaf 	bl	8002cf0 <HAL_I2C_Master_Transmit>
		HAL_Delay(10);
 8001592:	200a      	movs	r0, #10
 8001594:	f000 fb52 	bl	8001c3c <HAL_Delay>
		HAL_I2C_Master_Receive(&hi2c1, chipAddress, dataReceive, 3, HAL_MAX_DELAY);
 8001598:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800159c:	b299      	uxth	r1, r3
 800159e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80015a2:	f04f 33ff 	mov.w	r3, #4294967295
 80015a6:	9300      	str	r3, [sp, #0]
 80015a8:	2303      	movs	r3, #3
 80015aa:	483d      	ldr	r0, [pc, #244]	; (80016a0 <processInput+0x730>)
 80015ac:	f001 fc9e 	bl	8002eec <HAL_I2C_Master_Receive>

		sprintf(output,"\r\nStored values: %i, %i, %i\r\n", dataReceive[0], dataReceive[1], dataReceive[2]);
 80015b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80015b4:	461a      	mov	r2, r3
 80015b6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80015ba:	4619      	mov	r1, r3
 80015bc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80015c0:	f107 000c 	add.w	r0, r7, #12
 80015c4:	9300      	str	r3, [sp, #0]
 80015c6:	460b      	mov	r3, r1
 80015c8:	4936      	ldr	r1, [pc, #216]	; (80016a4 <processInput+0x734>)
 80015ca:	f004 f8bf 	bl	800574c <siprintf>
		HAL_UART_Transmit(&huart1, output, strlen(output), HAL_MAX_DELAY);
 80015ce:	f107 030c 	add.w	r3, r7, #12
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7fe fdbc 	bl	8000150 <strlen>
 80015d8:	4603      	mov	r3, r0
 80015da:	b29a      	uxth	r2, r3
 80015dc:	f107 010c 	add.w	r1, r7, #12
 80015e0:	f04f 33ff 	mov.w	r3, #4294967295
 80015e4:	482c      	ldr	r0, [pc, #176]	; (8001698 <processInput+0x728>)
 80015e6:	f003 fe13 	bl	8005210 <HAL_UART_Transmit>
		return 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	e04e      	b.n	800168c <processInput+0x71c>
	case '0':
		// read 2 bytes from data address 0x00, 0x01
		HAL_I2C_Master_Transmit(&hi2c1, chipAddress , startAddress, 1, HAL_MAX_DELAY); // dummy write with word address 0x00 as starting address
 80015ee:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80015f2:	b299      	uxth	r1, r3
 80015f4:	f107 0220 	add.w	r2, r7, #32
 80015f8:	f04f 33ff 	mov.w	r3, #4294967295
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	2301      	movs	r3, #1
 8001600:	4827      	ldr	r0, [pc, #156]	; (80016a0 <processInput+0x730>)
 8001602:	f001 fb75 	bl	8002cf0 <HAL_I2C_Master_Transmit>
		HAL_Delay(10);
 8001606:	200a      	movs	r0, #10
 8001608:	f000 fb18 	bl	8001c3c <HAL_Delay>
		HAL_I2C_Master_Receive(&hi2c1, chipAddress, dataReceive, 3, HAL_MAX_DELAY);
 800160c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001610:	b299      	uxth	r1, r3
 8001612:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001616:	f04f 33ff 	mov.w	r3, #4294967295
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	2303      	movs	r3, #3
 800161e:	4820      	ldr	r0, [pc, #128]	; (80016a0 <processInput+0x730>)
 8001620:	f001 fc64 	bl	8002eec <HAL_I2C_Master_Receive>

		sprintf(output,"Stored values: %i, %i, %i\r\n", dataReceive[0], dataReceive[1], dataReceive[2]);
 8001624:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001628:	461a      	mov	r2, r3
 800162a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800162e:	4619      	mov	r1, r3
 8001630:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001634:	f107 000c 	add.w	r0, r7, #12
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	460b      	mov	r3, r1
 800163c:	491a      	ldr	r1, [pc, #104]	; (80016a8 <processInput+0x738>)
 800163e:	f004 f885 	bl	800574c <siprintf>
		HAL_UART_Transmit(&huart1, output, strlen(output), HAL_MAX_DELAY);
 8001642:	f107 030c 	add.w	r3, r7, #12
 8001646:	4618      	mov	r0, r3
 8001648:	f7fe fd82 	bl	8000150 <strlen>
 800164c:	4603      	mov	r3, r0
 800164e:	b29a      	uxth	r2, r3
 8001650:	f107 010c 	add.w	r1, r7, #12
 8001654:	f04f 33ff 	mov.w	r3, #4294967295
 8001658:	480f      	ldr	r0, [pc, #60]	; (8001698 <processInput+0x728>)
 800165a:	f003 fdd9 	bl	8005210 <HAL_UART_Transmit>
		return 0;
 800165e:	2300      	movs	r3, #0
 8001660:	e014      	b.n	800168c <processInput+0x71c>
	default:
		sprintf(msg, "\r\n> %d is not a valid option!");
 8001662:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001666:	4911      	ldr	r1, [pc, #68]	; (80016ac <processInput+0x73c>)
 8001668:	4618      	mov	r0, r3
 800166a:	f004 f86f 	bl	800574c <siprintf>
		HAL_UART_Transmit(&huart1, msg, strlen(msg), HAL_MAX_DELAY);
 800166e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001672:	4618      	mov	r0, r3
 8001674:	f7fe fd6c 	bl	8000150 <strlen>
 8001678:	4603      	mov	r3, r0
 800167a:	b29a      	uxth	r2, r3
 800167c:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8001680:	f04f 33ff 	mov.w	r3, #4294967295
 8001684:	4804      	ldr	r0, [pc, #16]	; (8001698 <processInput+0x728>)
 8001686:	f003 fdc3 	bl	8005210 <HAL_UART_Transmit>
		return 1;
 800168a:	2301      	movs	r3, #1

	}

}
 800168c:	4618      	mov	r0, r3
 800168e:	3780      	adds	r7, #128	; 0x80
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	08006164 	.word	0x08006164
 8001698:	20000178 	.word	0x20000178
 800169c:	0800616c 	.word	0x0800616c
 80016a0:	200000d8 	.word	0x200000d8
 80016a4:	08006178 	.word	0x08006178
 80016a8:	08006198 	.word	0x08006198
 80016ac:	080061b4 	.word	0x080061b4

080016b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016b4:	b672      	cpsid	i
}
 80016b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <Error_Handler+0x8>
	...

080016bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016c2:	4b15      	ldr	r3, [pc, #84]	; (8001718 <HAL_MspInit+0x5c>)
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	4a14      	ldr	r2, [pc, #80]	; (8001718 <HAL_MspInit+0x5c>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	6193      	str	r3, [r2, #24]
 80016ce:	4b12      	ldr	r3, [pc, #72]	; (8001718 <HAL_MspInit+0x5c>)
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	60bb      	str	r3, [r7, #8]
 80016d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016da:	4b0f      	ldr	r3, [pc, #60]	; (8001718 <HAL_MspInit+0x5c>)
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	4a0e      	ldr	r2, [pc, #56]	; (8001718 <HAL_MspInit+0x5c>)
 80016e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e4:	61d3      	str	r3, [r2, #28]
 80016e6:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <HAL_MspInit+0x5c>)
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ee:	607b      	str	r3, [r7, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016f2:	4b0a      	ldr	r3, [pc, #40]	; (800171c <HAL_MspInit+0x60>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	4a04      	ldr	r2, [pc, #16]	; (800171c <HAL_MspInit+0x60>)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800170e:	bf00      	nop
 8001710:	3714      	adds	r7, #20
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr
 8001718:	40021000 	.word	0x40021000
 800171c:	40010000 	.word	0x40010000

08001720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001724:	e7fe      	b.n	8001724 <NMI_Handler+0x4>

08001726 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800172a:	e7fe      	b.n	800172a <HardFault_Handler+0x4>

0800172c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001730:	e7fe      	b.n	8001730 <MemManage_Handler+0x4>

08001732 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001736:	e7fe      	b.n	8001736 <BusFault_Handler+0x4>

08001738 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800173c:	e7fe      	b.n	800173c <UsageFault_Handler+0x4>

0800173e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	46bd      	mov	sp, r7
 8001746:	bc80      	pop	{r7}
 8001748:	4770      	bx	lr

0800174a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr

08001756 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr

08001762 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001766:	f000 fa4d 	bl	8001c04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
	...

08001770 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001778:	4a14      	ldr	r2, [pc, #80]	; (80017cc <_sbrk+0x5c>)
 800177a:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <_sbrk+0x60>)
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001784:	4b13      	ldr	r3, [pc, #76]	; (80017d4 <_sbrk+0x64>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d102      	bne.n	8001792 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800178c:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <_sbrk+0x64>)
 800178e:	4a12      	ldr	r2, [pc, #72]	; (80017d8 <_sbrk+0x68>)
 8001790:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001792:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <_sbrk+0x64>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4413      	add	r3, r2
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	429a      	cmp	r2, r3
 800179e:	d207      	bcs.n	80017b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017a0:	f003 fffc 	bl	800579c <__errno>
 80017a4:	4603      	mov	r3, r0
 80017a6:	220c      	movs	r2, #12
 80017a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017aa:	f04f 33ff 	mov.w	r3, #4294967295
 80017ae:	e009      	b.n	80017c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017b0:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <_sbrk+0x64>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017b6:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <_sbrk+0x64>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4413      	add	r3, r2
 80017be:	4a05      	ldr	r2, [pc, #20]	; (80017d4 <_sbrk+0x64>)
 80017c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017c2:	68fb      	ldr	r3, [r7, #12]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3718      	adds	r7, #24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20005000 	.word	0x20005000
 80017d0:	00000400 	.word	0x00000400
 80017d4:	2000012c 	.word	0x2000012c
 80017d8:	20000358 	.word	0x20000358

080017dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr

080017e8 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08e      	sub	sp, #56	; 0x38
 80017ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]
 80017fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017fc:	f107 0320 	add.w	r3, r7, #32
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001806:	1d3b      	adds	r3, r7, #4
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
 8001814:	615a      	str	r2, [r3, #20]
 8001816:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001818:	4b2c      	ldr	r3, [pc, #176]	; (80018cc <MX_TIM3_Init+0xe4>)
 800181a:	4a2d      	ldr	r2, [pc, #180]	; (80018d0 <MX_TIM3_Init+0xe8>)
 800181c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 800181e:	4b2b      	ldr	r3, [pc, #172]	; (80018cc <MX_TIM3_Init+0xe4>)
 8001820:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001824:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001826:	4b29      	ldr	r3, [pc, #164]	; (80018cc <MX_TIM3_Init+0xe4>)
 8001828:	2200      	movs	r2, #0
 800182a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 15-1;
 800182c:	4b27      	ldr	r3, [pc, #156]	; (80018cc <MX_TIM3_Init+0xe4>)
 800182e:	220e      	movs	r2, #14
 8001830:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001832:	4b26      	ldr	r3, [pc, #152]	; (80018cc <MX_TIM3_Init+0xe4>)
 8001834:	2200      	movs	r2, #0
 8001836:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001838:	4b24      	ldr	r3, [pc, #144]	; (80018cc <MX_TIM3_Init+0xe4>)
 800183a:	2280      	movs	r2, #128	; 0x80
 800183c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800183e:	4823      	ldr	r0, [pc, #140]	; (80018cc <MX_TIM3_Init+0xe4>)
 8001840:	f002 fec2 	bl	80045c8 <HAL_TIM_Base_Init>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800184a:	f7ff ff31 	bl	80016b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800184e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001852:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001854:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001858:	4619      	mov	r1, r3
 800185a:	481c      	ldr	r0, [pc, #112]	; (80018cc <MX_TIM3_Init+0xe4>)
 800185c:	f003 f8be 	bl	80049dc <HAL_TIM_ConfigClockSource>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001866:	f7ff ff23 	bl	80016b0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800186a:	4818      	ldr	r0, [pc, #96]	; (80018cc <MX_TIM3_Init+0xe4>)
 800186c:	f002 fefb 	bl	8004666 <HAL_TIM_OC_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001876:	f7ff ff1b 	bl	80016b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800187a:	2300      	movs	r3, #0
 800187c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800187e:	2300      	movs	r3, #0
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001882:	f107 0320 	add.w	r3, r7, #32
 8001886:	4619      	mov	r1, r3
 8001888:	4810      	ldr	r0, [pc, #64]	; (80018cc <MX_TIM3_Init+0xe4>)
 800188a:	f003 fc13 	bl	80050b4 <HAL_TIMEx_MasterConfigSynchronization>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001894:	f7ff ff0c 	bl	80016b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001898:	2330      	movs	r3, #48	; 0x30
 800189a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80018a8:	1d3b      	adds	r3, r7, #4
 80018aa:	2208      	movs	r2, #8
 80018ac:	4619      	mov	r1, r3
 80018ae:	4807      	ldr	r0, [pc, #28]	; (80018cc <MX_TIM3_Init+0xe4>)
 80018b0:	f003 f838 	bl	8004924 <HAL_TIM_OC_ConfigChannel>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80018ba:	f7ff fef9 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80018be:	4803      	ldr	r0, [pc, #12]	; (80018cc <MX_TIM3_Init+0xe4>)
 80018c0:	f000 f826 	bl	8001910 <HAL_TIM_MspPostInit>

}
 80018c4:	bf00      	nop
 80018c6:	3738      	adds	r7, #56	; 0x38
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20000130 	.word	0x20000130
 80018d0:	40000400 	.word	0x40000400

080018d4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a09      	ldr	r2, [pc, #36]	; (8001908 <HAL_TIM_Base_MspInit+0x34>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d10b      	bne.n	80018fe <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018e6:	4b09      	ldr	r3, [pc, #36]	; (800190c <HAL_TIM_Base_MspInit+0x38>)
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	4a08      	ldr	r2, [pc, #32]	; (800190c <HAL_TIM_Base_MspInit+0x38>)
 80018ec:	f043 0302 	orr.w	r3, r3, #2
 80018f0:	61d3      	str	r3, [r2, #28]
 80018f2:	4b06      	ldr	r3, [pc, #24]	; (800190c <HAL_TIM_Base_MspInit+0x38>)
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80018fe:	bf00      	nop
 8001900:	3714      	adds	r7, #20
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr
 8001908:	40000400 	.word	0x40000400
 800190c:	40021000 	.word	0x40021000

08001910 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b088      	sub	sp, #32
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	f107 0310 	add.w	r3, r7, #16
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a0f      	ldr	r2, [pc, #60]	; (8001968 <HAL_TIM_MspPostInit+0x58>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d117      	bne.n	8001960 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001930:	4b0e      	ldr	r3, [pc, #56]	; (800196c <HAL_TIM_MspPostInit+0x5c>)
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	4a0d      	ldr	r2, [pc, #52]	; (800196c <HAL_TIM_MspPostInit+0x5c>)
 8001936:	f043 0308 	orr.w	r3, r3, #8
 800193a:	6193      	str	r3, [r2, #24]
 800193c:	4b0b      	ldr	r3, [pc, #44]	; (800196c <HAL_TIM_MspPostInit+0x5c>)
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	f003 0308 	and.w	r3, r3, #8
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001948:	2301      	movs	r3, #1
 800194a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194c:	2302      	movs	r3, #2
 800194e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001950:	2302      	movs	r3, #2
 8001952:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001954:	f107 0310 	add.w	r3, r7, #16
 8001958:	4619      	mov	r1, r3
 800195a:	4805      	ldr	r0, [pc, #20]	; (8001970 <HAL_TIM_MspPostInit+0x60>)
 800195c:	f000 fece 	bl	80026fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001960:	bf00      	nop
 8001962:	3720      	adds	r7, #32
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40000400 	.word	0x40000400
 800196c:	40021000 	.word	0x40021000
 8001970:	40010c00 	.word	0x40010c00

08001974 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001978:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <MX_USART1_UART_Init+0x4c>)
 800197a:	4a12      	ldr	r2, [pc, #72]	; (80019c4 <MX_USART1_UART_Init+0x50>)
 800197c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 4800;
 800197e:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <MX_USART1_UART_Init+0x4c>)
 8001980:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8001984:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001986:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <MX_USART1_UART_Init+0x4c>)
 8001988:	2200      	movs	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800198c:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <MX_USART1_UART_Init+0x4c>)
 800198e:	2200      	movs	r2, #0
 8001990:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001992:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <MX_USART1_UART_Init+0x4c>)
 8001994:	2200      	movs	r2, #0
 8001996:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001998:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <MX_USART1_UART_Init+0x4c>)
 800199a:	220c      	movs	r2, #12
 800199c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800199e:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <MX_USART1_UART_Init+0x4c>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <MX_USART1_UART_Init+0x4c>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019aa:	4805      	ldr	r0, [pc, #20]	; (80019c0 <MX_USART1_UART_Init+0x4c>)
 80019ac:	f003 fbe0 	bl	8005170 <HAL_UART_Init>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80019b6:	f7ff fe7b 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000178 	.word	0x20000178
 80019c4:	40013800 	.word	0x40013800

080019c8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019cc:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <MX_USART3_UART_Init+0x4c>)
 80019ce:	4a12      	ldr	r2, [pc, #72]	; (8001a18 <MX_USART3_UART_Init+0x50>)
 80019d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80019d2:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <MX_USART3_UART_Init+0x4c>)
 80019d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019da:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <MX_USART3_UART_Init+0x4c>)
 80019dc:	2200      	movs	r2, #0
 80019de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019e0:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <MX_USART3_UART_Init+0x4c>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019e6:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <MX_USART3_UART_Init+0x4c>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019ec:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <MX_USART3_UART_Init+0x4c>)
 80019ee:	220c      	movs	r2, #12
 80019f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019f2:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <MX_USART3_UART_Init+0x4c>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <MX_USART3_UART_Init+0x4c>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019fe:	4805      	ldr	r0, [pc, #20]	; (8001a14 <MX_USART3_UART_Init+0x4c>)
 8001a00:	f003 fbb6 	bl	8005170 <HAL_UART_Init>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001a0a:	f7ff fe51 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	200001c0 	.word	0x200001c0
 8001a18:	40004800 	.word	0x40004800

08001a1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08a      	sub	sp, #40	; 0x28
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a24:	f107 0318 	add.w	r3, r7, #24
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a38      	ldr	r2, [pc, #224]	; (8001b18 <HAL_UART_MspInit+0xfc>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d132      	bne.n	8001aa2 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a3c:	4b37      	ldr	r3, [pc, #220]	; (8001b1c <HAL_UART_MspInit+0x100>)
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	4a36      	ldr	r2, [pc, #216]	; (8001b1c <HAL_UART_MspInit+0x100>)
 8001a42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a46:	6193      	str	r3, [r2, #24]
 8001a48:	4b34      	ldr	r3, [pc, #208]	; (8001b1c <HAL_UART_MspInit+0x100>)
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a50:	617b      	str	r3, [r7, #20]
 8001a52:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a54:	4b31      	ldr	r3, [pc, #196]	; (8001b1c <HAL_UART_MspInit+0x100>)
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	4a30      	ldr	r2, [pc, #192]	; (8001b1c <HAL_UART_MspInit+0x100>)
 8001a5a:	f043 0304 	orr.w	r3, r3, #4
 8001a5e:	6193      	str	r3, [r2, #24]
 8001a60:	4b2e      	ldr	r3, [pc, #184]	; (8001b1c <HAL_UART_MspInit+0x100>)
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	613b      	str	r3, [r7, #16]
 8001a6a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a72:	2302      	movs	r3, #2
 8001a74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a76:	2303      	movs	r3, #3
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a7a:	f107 0318 	add.w	r3, r7, #24
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4827      	ldr	r0, [pc, #156]	; (8001b20 <HAL_UART_MspInit+0x104>)
 8001a82:	f000 fe3b 	bl	80026fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a94:	f107 0318 	add.w	r3, r7, #24
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4821      	ldr	r0, [pc, #132]	; (8001b20 <HAL_UART_MspInit+0x104>)
 8001a9c:	f000 fe2e 	bl	80026fc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001aa0:	e036      	b.n	8001b10 <HAL_UART_MspInit+0xf4>
  else if(uartHandle->Instance==USART3)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a1f      	ldr	r2, [pc, #124]	; (8001b24 <HAL_UART_MspInit+0x108>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d131      	bne.n	8001b10 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001aac:	4b1b      	ldr	r3, [pc, #108]	; (8001b1c <HAL_UART_MspInit+0x100>)
 8001aae:	69db      	ldr	r3, [r3, #28]
 8001ab0:	4a1a      	ldr	r2, [pc, #104]	; (8001b1c <HAL_UART_MspInit+0x100>)
 8001ab2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ab6:	61d3      	str	r3, [r2, #28]
 8001ab8:	4b18      	ldr	r3, [pc, #96]	; (8001b1c <HAL_UART_MspInit+0x100>)
 8001aba:	69db      	ldr	r3, [r3, #28]
 8001abc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac4:	4b15      	ldr	r3, [pc, #84]	; (8001b1c <HAL_UART_MspInit+0x100>)
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	4a14      	ldr	r2, [pc, #80]	; (8001b1c <HAL_UART_MspInit+0x100>)
 8001aca:	f043 0308 	orr.w	r3, r3, #8
 8001ace:	6193      	str	r3, [r2, #24]
 8001ad0:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <HAL_UART_MspInit+0x100>)
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	f003 0308 	and.w	r3, r3, #8
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001adc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ae0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aea:	f107 0318 	add.w	r3, r7, #24
 8001aee:	4619      	mov	r1, r3
 8001af0:	480d      	ldr	r0, [pc, #52]	; (8001b28 <HAL_UART_MspInit+0x10c>)
 8001af2:	f000 fe03 	bl	80026fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001af6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001afa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001afc:	2300      	movs	r3, #0
 8001afe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b04:	f107 0318 	add.w	r3, r7, #24
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4807      	ldr	r0, [pc, #28]	; (8001b28 <HAL_UART_MspInit+0x10c>)
 8001b0c:	f000 fdf6 	bl	80026fc <HAL_GPIO_Init>
}
 8001b10:	bf00      	nop
 8001b12:	3728      	adds	r7, #40	; 0x28
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40013800 	.word	0x40013800
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	40010800 	.word	0x40010800
 8001b24:	40004800 	.word	0x40004800
 8001b28:	40010c00 	.word	0x40010c00

08001b2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b2c:	f7ff fe56 	bl	80017dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b30:	480b      	ldr	r0, [pc, #44]	; (8001b60 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b32:	490c      	ldr	r1, [pc, #48]	; (8001b64 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b34:	4a0c      	ldr	r2, [pc, #48]	; (8001b68 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b38:	e002      	b.n	8001b40 <LoopCopyDataInit>

08001b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b3e:	3304      	adds	r3, #4

08001b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b44:	d3f9      	bcc.n	8001b3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b46:	4a09      	ldr	r2, [pc, #36]	; (8001b6c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b48:	4c09      	ldr	r4, [pc, #36]	; (8001b70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b4c:	e001      	b.n	8001b52 <LoopFillZerobss>

08001b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b50:	3204      	adds	r2, #4

08001b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b54:	d3fb      	bcc.n	8001b4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b56:	f003 fe27 	bl	80057a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b5a:	f7ff f933 	bl	8000dc4 <main>
  bx lr
 8001b5e:	4770      	bx	lr
  ldr r0, =_sdata
 8001b60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b64:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001b68:	0800646c 	.word	0x0800646c
  ldr r2, =_sbss
 8001b6c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001b70:	20000354 	.word	0x20000354

08001b74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b74:	e7fe      	b.n	8001b74 <ADC1_2_IRQHandler>
	...

08001b78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b7c:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <HAL_Init+0x28>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a07      	ldr	r2, [pc, #28]	; (8001ba0 <HAL_Init+0x28>)
 8001b82:	f043 0310 	orr.w	r3, r3, #16
 8001b86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b88:	2003      	movs	r0, #3
 8001b8a:	f000 fd83 	bl	8002694 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b8e:	200f      	movs	r0, #15
 8001b90:	f000 f808 	bl	8001ba4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b94:	f7ff fd92 	bl	80016bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40022000 	.word	0x40022000

08001ba4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bac:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <HAL_InitTick+0x54>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <HAL_InitTick+0x58>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f000 fd8d 	bl	80026e2 <HAL_SYSTICK_Config>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e00e      	b.n	8001bf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2b0f      	cmp	r3, #15
 8001bd6:	d80a      	bhi.n	8001bee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bd8:	2200      	movs	r2, #0
 8001bda:	6879      	ldr	r1, [r7, #4]
 8001bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001be0:	f000 fd63 	bl	80026aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001be4:	4a06      	ldr	r2, [pc, #24]	; (8001c00 <HAL_InitTick+0x5c>)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
 8001bec:	e000      	b.n	8001bf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	20000000 	.word	0x20000000
 8001bfc:	20000008 	.word	0x20000008
 8001c00:	20000004 	.word	0x20000004

08001c04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c08:	4b05      	ldr	r3, [pc, #20]	; (8001c20 <HAL_IncTick+0x1c>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <HAL_IncTick+0x20>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4413      	add	r3, r2
 8001c14:	4a03      	ldr	r2, [pc, #12]	; (8001c24 <HAL_IncTick+0x20>)
 8001c16:	6013      	str	r3, [r2, #0]
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr
 8001c20:	20000008 	.word	0x20000008
 8001c24:	20000208 	.word	0x20000208

08001c28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c2c:	4b02      	ldr	r3, [pc, #8]	; (8001c38 <HAL_GetTick+0x10>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr
 8001c38:	20000208 	.word	0x20000208

08001c3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c44:	f7ff fff0 	bl	8001c28 <HAL_GetTick>
 8001c48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c54:	d005      	beq.n	8001c62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c56:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <HAL_Delay+0x44>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	4413      	add	r3, r2
 8001c60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c62:	bf00      	nop
 8001c64:	f7ff ffe0 	bl	8001c28 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d8f7      	bhi.n	8001c64 <HAL_Delay+0x28>
  {
  }
}
 8001c74:	bf00      	nop
 8001c76:	bf00      	nop
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000008 	.word	0x20000008

08001c84 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001c90:	2300      	movs	r3, #0
 8001c92:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001c94:	2300      	movs	r3, #0
 8001c96:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e0be      	b.n	8001e24 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d109      	bne.n	8001cc8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7fe ff0c 	bl	8000ae0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f000 fbf1 	bl	80024b0 <ADC_ConversionStop_Disable>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd6:	f003 0310 	and.w	r3, r3, #16
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f040 8099 	bne.w	8001e12 <HAL_ADC_Init+0x18e>
 8001ce0:	7dfb      	ldrb	r3, [r7, #23]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f040 8095 	bne.w	8001e12 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001cf0:	f023 0302 	bic.w	r3, r3, #2
 8001cf4:	f043 0202 	orr.w	r2, r3, #2
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d04:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	7b1b      	ldrb	r3, [r3, #12]
 8001d0a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d0c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d0e:	68ba      	ldr	r2, [r7, #8]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d1c:	d003      	beq.n	8001d26 <HAL_ADC_Init+0xa2>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d102      	bne.n	8001d2c <HAL_ADC_Init+0xa8>
 8001d26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d2a:	e000      	b.n	8001d2e <HAL_ADC_Init+0xaa>
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	7d1b      	ldrb	r3, [r3, #20]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d119      	bne.n	8001d70 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	7b1b      	ldrb	r3, [r3, #12]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d109      	bne.n	8001d58 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	035a      	lsls	r2, r3, #13
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d54:	613b      	str	r3, [r7, #16]
 8001d56:	e00b      	b.n	8001d70 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5c:	f043 0220 	orr.w	r2, r3, #32
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d68:	f043 0201 	orr.w	r2, r3, #1
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	430a      	orrs	r2, r1
 8001d82:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	4b28      	ldr	r3, [pc, #160]	; (8001e2c <HAL_ADC_Init+0x1a8>)
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	6812      	ldr	r2, [r2, #0]
 8001d92:	68b9      	ldr	r1, [r7, #8]
 8001d94:	430b      	orrs	r3, r1
 8001d96:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001da0:	d003      	beq.n	8001daa <HAL_ADC_Init+0x126>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d104      	bne.n	8001db4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	3b01      	subs	r3, #1
 8001db0:	051b      	lsls	r3, r3, #20
 8001db2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dba:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	689a      	ldr	r2, [r3, #8]
 8001dce:	4b18      	ldr	r3, [pc, #96]	; (8001e30 <HAL_ADC_Init+0x1ac>)
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	68ba      	ldr	r2, [r7, #8]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d10b      	bne.n	8001df0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de2:	f023 0303 	bic.w	r3, r3, #3
 8001de6:	f043 0201 	orr.w	r2, r3, #1
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001dee:	e018      	b.n	8001e22 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df4:	f023 0312 	bic.w	r3, r3, #18
 8001df8:	f043 0210 	orr.w	r2, r3, #16
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e04:	f043 0201 	orr.w	r2, r3, #1
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e10:	e007      	b.n	8001e22 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e16:	f043 0210 	orr.w	r2, r3, #16
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e22:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3718      	adds	r7, #24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	ffe1f7fd 	.word	0xffe1f7fd
 8001e30:	ff1f0efe 	.word	0xff1f0efe

08001e34 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d101      	bne.n	8001e4e <HAL_ADC_Start+0x1a>
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	e098      	b.n	8001f80 <HAL_ADC_Start+0x14c>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 fad0 	bl	80023fc <ADC_Enable>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001e60:	7bfb      	ldrb	r3, [r7, #15]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f040 8087 	bne.w	8001f76 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e70:	f023 0301 	bic.w	r3, r3, #1
 8001e74:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a41      	ldr	r2, [pc, #260]	; (8001f88 <HAL_ADC_Start+0x154>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d105      	bne.n	8001e92 <HAL_ADC_Start+0x5e>
 8001e86:	4b41      	ldr	r3, [pc, #260]	; (8001f8c <HAL_ADC_Start+0x158>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d115      	bne.n	8001ebe <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e96:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d026      	beq.n	8001efa <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001eb4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ebc:	e01d      	b.n	8001efa <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a2f      	ldr	r2, [pc, #188]	; (8001f8c <HAL_ADC_Start+0x158>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d004      	beq.n	8001ede <HAL_ADC_Start+0xaa>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a2b      	ldr	r2, [pc, #172]	; (8001f88 <HAL_ADC_Start+0x154>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d10d      	bne.n	8001efa <HAL_ADC_Start+0xc6>
 8001ede:	4b2b      	ldr	r3, [pc, #172]	; (8001f8c <HAL_ADC_Start+0x158>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d007      	beq.n	8001efa <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ef2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d006      	beq.n	8001f14 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0a:	f023 0206 	bic.w	r2, r3, #6
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f12:	e002      	b.n	8001f1a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f06f 0202 	mvn.w	r2, #2
 8001f2a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001f36:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001f3a:	d113      	bne.n	8001f64 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001f40:	4a11      	ldr	r2, [pc, #68]	; (8001f88 <HAL_ADC_Start+0x154>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d105      	bne.n	8001f52 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001f46:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <HAL_ADC_Start+0x158>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d108      	bne.n	8001f64 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001f60:	609a      	str	r2, [r3, #8]
 8001f62:	e00c      	b.n	8001f7e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	689a      	ldr	r2, [r3, #8]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	e003      	b.n	8001f7e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3710      	adds	r7, #16
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40012800 	.word	0x40012800
 8001f8c:	40012400 	.word	0x40012400

08001f90 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d101      	bne.n	8001faa <HAL_ADC_Stop+0x1a>
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	e01a      	b.n	8001fe0 <HAL_ADC_Stop+0x50>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 fa7c 	bl	80024b0 <ADC_ConversionStop_Disable>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001fbc:	7bfb      	ldrb	r3, [r7, #15]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d109      	bne.n	8001fd6 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001fca:	f023 0301 	bic.w	r3, r3, #1
 8001fce:	f043 0201 	orr.w	r2, r3, #1
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3710      	adds	r7, #16
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001fe8:	b590      	push	{r4, r7, lr}
 8001fea:	b087      	sub	sp, #28
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001ffe:	f7ff fe13 	bl	8001c28 <HAL_GetTick>
 8002002:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00b      	beq.n	800202a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002016:	f043 0220 	orr.w	r2, r3, #32
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e0d3      	b.n	80021d2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002034:	2b00      	cmp	r3, #0
 8002036:	d131      	bne.n	800209c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002042:	2b00      	cmp	r3, #0
 8002044:	d12a      	bne.n	800209c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002046:	e021      	b.n	800208c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800204e:	d01d      	beq.n	800208c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d007      	beq.n	8002066 <HAL_ADC_PollForConversion+0x7e>
 8002056:	f7ff fde7 	bl	8001c28 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	429a      	cmp	r2, r3
 8002064:	d212      	bcs.n	800208c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d10b      	bne.n	800208c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002078:	f043 0204 	orr.w	r2, r3, #4
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e0a2      	b.n	80021d2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0d6      	beq.n	8002048 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800209a:	e070      	b.n	800217e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800209c:	4b4f      	ldr	r3, [pc, #316]	; (80021dc <HAL_ADC_PollForConversion+0x1f4>)
 800209e:	681c      	ldr	r4, [r3, #0]
 80020a0:	2002      	movs	r0, #2
 80020a2:	f002 f9db 	bl	800445c <HAL_RCCEx_GetPeriphCLKFreq>
 80020a6:	4603      	mov	r3, r0
 80020a8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6919      	ldr	r1, [r3, #16]
 80020b2:	4b4b      	ldr	r3, [pc, #300]	; (80021e0 <HAL_ADC_PollForConversion+0x1f8>)
 80020b4:	400b      	ands	r3, r1
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d118      	bne.n	80020ec <HAL_ADC_PollForConversion+0x104>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68d9      	ldr	r1, [r3, #12]
 80020c0:	4b48      	ldr	r3, [pc, #288]	; (80021e4 <HAL_ADC_PollForConversion+0x1fc>)
 80020c2:	400b      	ands	r3, r1
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d111      	bne.n	80020ec <HAL_ADC_PollForConversion+0x104>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6919      	ldr	r1, [r3, #16]
 80020ce:	4b46      	ldr	r3, [pc, #280]	; (80021e8 <HAL_ADC_PollForConversion+0x200>)
 80020d0:	400b      	ands	r3, r1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d108      	bne.n	80020e8 <HAL_ADC_PollForConversion+0x100>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	68d9      	ldr	r1, [r3, #12]
 80020dc:	4b43      	ldr	r3, [pc, #268]	; (80021ec <HAL_ADC_PollForConversion+0x204>)
 80020de:	400b      	ands	r3, r1
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d101      	bne.n	80020e8 <HAL_ADC_PollForConversion+0x100>
 80020e4:	2314      	movs	r3, #20
 80020e6:	e020      	b.n	800212a <HAL_ADC_PollForConversion+0x142>
 80020e8:	2329      	movs	r3, #41	; 0x29
 80020ea:	e01e      	b.n	800212a <HAL_ADC_PollForConversion+0x142>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6919      	ldr	r1, [r3, #16]
 80020f2:	4b3d      	ldr	r3, [pc, #244]	; (80021e8 <HAL_ADC_PollForConversion+0x200>)
 80020f4:	400b      	ands	r3, r1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d106      	bne.n	8002108 <HAL_ADC_PollForConversion+0x120>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68d9      	ldr	r1, [r3, #12]
 8002100:	4b3a      	ldr	r3, [pc, #232]	; (80021ec <HAL_ADC_PollForConversion+0x204>)
 8002102:	400b      	ands	r3, r1
 8002104:	2b00      	cmp	r3, #0
 8002106:	d00d      	beq.n	8002124 <HAL_ADC_PollForConversion+0x13c>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6919      	ldr	r1, [r3, #16]
 800210e:	4b38      	ldr	r3, [pc, #224]	; (80021f0 <HAL_ADC_PollForConversion+0x208>)
 8002110:	400b      	ands	r3, r1
 8002112:	2b00      	cmp	r3, #0
 8002114:	d108      	bne.n	8002128 <HAL_ADC_PollForConversion+0x140>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68d9      	ldr	r1, [r3, #12]
 800211c:	4b34      	ldr	r3, [pc, #208]	; (80021f0 <HAL_ADC_PollForConversion+0x208>)
 800211e:	400b      	ands	r3, r1
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <HAL_ADC_PollForConversion+0x140>
 8002124:	2354      	movs	r3, #84	; 0x54
 8002126:	e000      	b.n	800212a <HAL_ADC_PollForConversion+0x142>
 8002128:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800212a:	fb02 f303 	mul.w	r3, r2, r3
 800212e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002130:	e021      	b.n	8002176 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002138:	d01a      	beq.n	8002170 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d007      	beq.n	8002150 <HAL_ADC_PollForConversion+0x168>
 8002140:	f7ff fd72 	bl	8001c28 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	429a      	cmp	r2, r3
 800214e:	d20f      	bcs.n	8002170 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	429a      	cmp	r2, r3
 8002156:	d90b      	bls.n	8002170 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215c:	f043 0204 	orr.w	r2, r3, #4
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e030      	b.n	80021d2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	3301      	adds	r3, #1
 8002174:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	429a      	cmp	r2, r3
 800217c:	d8d9      	bhi.n	8002132 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f06f 0212 	mvn.w	r2, #18
 8002186:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800219e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80021a2:	d115      	bne.n	80021d0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d111      	bne.n	80021d0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d105      	bne.n	80021d0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c8:	f043 0201 	orr.w	r2, r3, #1
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	371c      	adds	r7, #28
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd90      	pop	{r4, r7, pc}
 80021da:	bf00      	nop
 80021dc:	20000000 	.word	0x20000000
 80021e0:	24924924 	.word	0x24924924
 80021e4:	00924924 	.word	0x00924924
 80021e8:	12492492 	.word	0x12492492
 80021ec:	00492492 	.word	0x00492492
 80021f0:	00249249 	.word	0x00249249

080021f4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002202:	4618      	mov	r0, r3
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr

0800220c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002216:	2300      	movs	r3, #0
 8002218:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800221a:	2300      	movs	r3, #0
 800221c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002224:	2b01      	cmp	r3, #1
 8002226:	d101      	bne.n	800222c <HAL_ADC_ConfigChannel+0x20>
 8002228:	2302      	movs	r3, #2
 800222a:	e0dc      	b.n	80023e6 <HAL_ADC_ConfigChannel+0x1da>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	2b06      	cmp	r3, #6
 800223a:	d81c      	bhi.n	8002276 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	4613      	mov	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	3b05      	subs	r3, #5
 800224e:	221f      	movs	r2, #31
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	43db      	mvns	r3, r3
 8002256:	4019      	ands	r1, r3
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	6818      	ldr	r0, [r3, #0]
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	4613      	mov	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	3b05      	subs	r3, #5
 8002268:	fa00 f203 	lsl.w	r2, r0, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	430a      	orrs	r2, r1
 8002272:	635a      	str	r2, [r3, #52]	; 0x34
 8002274:	e03c      	b.n	80022f0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2b0c      	cmp	r3, #12
 800227c:	d81c      	bhi.n	80022b8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	4613      	mov	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	3b23      	subs	r3, #35	; 0x23
 8002290:	221f      	movs	r2, #31
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	43db      	mvns	r3, r3
 8002298:	4019      	ands	r1, r3
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	6818      	ldr	r0, [r3, #0]
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	4613      	mov	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4413      	add	r3, r2
 80022a8:	3b23      	subs	r3, #35	; 0x23
 80022aa:	fa00 f203 	lsl.w	r2, r0, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	430a      	orrs	r2, r1
 80022b4:	631a      	str	r2, [r3, #48]	; 0x30
 80022b6:	e01b      	b.n	80022f0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	4613      	mov	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	3b41      	subs	r3, #65	; 0x41
 80022ca:	221f      	movs	r2, #31
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	43db      	mvns	r3, r3
 80022d2:	4019      	ands	r1, r3
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	6818      	ldr	r0, [r3, #0]
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685a      	ldr	r2, [r3, #4]
 80022dc:	4613      	mov	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	3b41      	subs	r3, #65	; 0x41
 80022e4:	fa00 f203 	lsl.w	r2, r0, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2b09      	cmp	r3, #9
 80022f6:	d91c      	bls.n	8002332 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68d9      	ldr	r1, [r3, #12]
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	4613      	mov	r3, r2
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	4413      	add	r3, r2
 8002308:	3b1e      	subs	r3, #30
 800230a:	2207      	movs	r2, #7
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	43db      	mvns	r3, r3
 8002312:	4019      	ands	r1, r3
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	6898      	ldr	r0, [r3, #8]
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	4613      	mov	r3, r2
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	4413      	add	r3, r2
 8002322:	3b1e      	subs	r3, #30
 8002324:	fa00 f203 	lsl.w	r2, r0, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	430a      	orrs	r2, r1
 800232e:	60da      	str	r2, [r3, #12]
 8002330:	e019      	b.n	8002366 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6919      	ldr	r1, [r3, #16]
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	4613      	mov	r3, r2
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	4413      	add	r3, r2
 8002342:	2207      	movs	r2, #7
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	43db      	mvns	r3, r3
 800234a:	4019      	ands	r1, r3
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	6898      	ldr	r0, [r3, #8]
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	4613      	mov	r3, r2
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	4413      	add	r3, r2
 800235a:	fa00 f203 	lsl.w	r2, r0, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	430a      	orrs	r2, r1
 8002364:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2b10      	cmp	r3, #16
 800236c:	d003      	beq.n	8002376 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002372:	2b11      	cmp	r3, #17
 8002374:	d132      	bne.n	80023dc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a1d      	ldr	r2, [pc, #116]	; (80023f0 <HAL_ADC_ConfigChannel+0x1e4>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d125      	bne.n	80023cc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d126      	bne.n	80023dc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800239c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2b10      	cmp	r3, #16
 80023a4:	d11a      	bne.n	80023dc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023a6:	4b13      	ldr	r3, [pc, #76]	; (80023f4 <HAL_ADC_ConfigChannel+0x1e8>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a13      	ldr	r2, [pc, #76]	; (80023f8 <HAL_ADC_ConfigChannel+0x1ec>)
 80023ac:	fba2 2303 	umull	r2, r3, r2, r3
 80023b0:	0c9a      	lsrs	r2, r3, #18
 80023b2:	4613      	mov	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4413      	add	r3, r2
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023bc:	e002      	b.n	80023c4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	3b01      	subs	r3, #1
 80023c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1f9      	bne.n	80023be <HAL_ADC_ConfigChannel+0x1b2>
 80023ca:	e007      	b.n	80023dc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d0:	f043 0220 	orr.w	r2, r3, #32
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80023e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3714      	adds	r7, #20
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr
 80023f0:	40012400 	.word	0x40012400
 80023f4:	20000000 	.word	0x20000000
 80023f8:	431bde83 	.word	0x431bde83

080023fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002404:	2300      	movs	r3, #0
 8002406:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002408:	2300      	movs	r3, #0
 800240a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b01      	cmp	r3, #1
 8002418:	d040      	beq.n	800249c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f042 0201 	orr.w	r2, r2, #1
 8002428:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800242a:	4b1f      	ldr	r3, [pc, #124]	; (80024a8 <ADC_Enable+0xac>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a1f      	ldr	r2, [pc, #124]	; (80024ac <ADC_Enable+0xb0>)
 8002430:	fba2 2303 	umull	r2, r3, r2, r3
 8002434:	0c9b      	lsrs	r3, r3, #18
 8002436:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002438:	e002      	b.n	8002440 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	3b01      	subs	r3, #1
 800243e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1f9      	bne.n	800243a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002446:	f7ff fbef 	bl	8001c28 <HAL_GetTick>
 800244a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800244c:	e01f      	b.n	800248e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800244e:	f7ff fbeb 	bl	8001c28 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d918      	bls.n	800248e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b01      	cmp	r3, #1
 8002468:	d011      	beq.n	800248e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246e:	f043 0210 	orr.w	r2, r3, #16
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247a:	f043 0201 	orr.w	r2, r3, #1
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e007      	b.n	800249e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b01      	cmp	r3, #1
 800249a:	d1d8      	bne.n	800244e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20000000 	.word	0x20000000
 80024ac:	431bde83 	.word	0x431bde83

080024b0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024b8:	2300      	movs	r3, #0
 80024ba:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d12e      	bne.n	8002528 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	689a      	ldr	r2, [r3, #8]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f022 0201 	bic.w	r2, r2, #1
 80024d8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80024da:	f7ff fba5 	bl	8001c28 <HAL_GetTick>
 80024de:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80024e0:	e01b      	b.n	800251a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80024e2:	f7ff fba1 	bl	8001c28 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d914      	bls.n	800251a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d10d      	bne.n	800251a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002502:	f043 0210 	orr.w	r2, r3, #16
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250e:	f043 0201 	orr.w	r2, r3, #1
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e007      	b.n	800252a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	2b01      	cmp	r3, #1
 8002526:	d0dc      	beq.n	80024e2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
	...

08002534 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002544:	4b0c      	ldr	r3, [pc, #48]	; (8002578 <__NVIC_SetPriorityGrouping+0x44>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800254a:	68ba      	ldr	r2, [r7, #8]
 800254c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002550:	4013      	ands	r3, r2
 8002552:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800255c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002564:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002566:	4a04      	ldr	r2, [pc, #16]	; (8002578 <__NVIC_SetPriorityGrouping+0x44>)
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	60d3      	str	r3, [r2, #12]
}
 800256c:	bf00      	nop
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	e000ed00 	.word	0xe000ed00

0800257c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002580:	4b04      	ldr	r3, [pc, #16]	; (8002594 <__NVIC_GetPriorityGrouping+0x18>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	0a1b      	lsrs	r3, r3, #8
 8002586:	f003 0307 	and.w	r3, r3, #7
}
 800258a:	4618      	mov	r0, r3
 800258c:	46bd      	mov	sp, r7
 800258e:	bc80      	pop	{r7}
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	e000ed00 	.word	0xe000ed00

08002598 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	6039      	str	r1, [r7, #0]
 80025a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	db0a      	blt.n	80025c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	490c      	ldr	r1, [pc, #48]	; (80025e4 <__NVIC_SetPriority+0x4c>)
 80025b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b6:	0112      	lsls	r2, r2, #4
 80025b8:	b2d2      	uxtb	r2, r2
 80025ba:	440b      	add	r3, r1
 80025bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025c0:	e00a      	b.n	80025d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	4908      	ldr	r1, [pc, #32]	; (80025e8 <__NVIC_SetPriority+0x50>)
 80025c8:	79fb      	ldrb	r3, [r7, #7]
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	3b04      	subs	r3, #4
 80025d0:	0112      	lsls	r2, r2, #4
 80025d2:	b2d2      	uxtb	r2, r2
 80025d4:	440b      	add	r3, r1
 80025d6:	761a      	strb	r2, [r3, #24]
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	e000e100 	.word	0xe000e100
 80025e8:	e000ed00 	.word	0xe000ed00

080025ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b089      	sub	sp, #36	; 0x24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	f1c3 0307 	rsb	r3, r3, #7
 8002606:	2b04      	cmp	r3, #4
 8002608:	bf28      	it	cs
 800260a:	2304      	movcs	r3, #4
 800260c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	3304      	adds	r3, #4
 8002612:	2b06      	cmp	r3, #6
 8002614:	d902      	bls.n	800261c <NVIC_EncodePriority+0x30>
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	3b03      	subs	r3, #3
 800261a:	e000      	b.n	800261e <NVIC_EncodePriority+0x32>
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002620:	f04f 32ff 	mov.w	r2, #4294967295
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	43da      	mvns	r2, r3
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	401a      	ands	r2, r3
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002634:	f04f 31ff 	mov.w	r1, #4294967295
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	fa01 f303 	lsl.w	r3, r1, r3
 800263e:	43d9      	mvns	r1, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002644:	4313      	orrs	r3, r2
         );
}
 8002646:	4618      	mov	r0, r3
 8002648:	3724      	adds	r7, #36	; 0x24
 800264a:	46bd      	mov	sp, r7
 800264c:	bc80      	pop	{r7}
 800264e:	4770      	bx	lr

08002650 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	3b01      	subs	r3, #1
 800265c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002660:	d301      	bcc.n	8002666 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002662:	2301      	movs	r3, #1
 8002664:	e00f      	b.n	8002686 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002666:	4a0a      	ldr	r2, [pc, #40]	; (8002690 <SysTick_Config+0x40>)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3b01      	subs	r3, #1
 800266c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800266e:	210f      	movs	r1, #15
 8002670:	f04f 30ff 	mov.w	r0, #4294967295
 8002674:	f7ff ff90 	bl	8002598 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002678:	4b05      	ldr	r3, [pc, #20]	; (8002690 <SysTick_Config+0x40>)
 800267a:	2200      	movs	r2, #0
 800267c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800267e:	4b04      	ldr	r3, [pc, #16]	; (8002690 <SysTick_Config+0x40>)
 8002680:	2207      	movs	r2, #7
 8002682:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	e000e010 	.word	0xe000e010

08002694 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f7ff ff49 	bl	8002534 <__NVIC_SetPriorityGrouping>
}
 80026a2:	bf00      	nop
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b086      	sub	sp, #24
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	4603      	mov	r3, r0
 80026b2:	60b9      	str	r1, [r7, #8]
 80026b4:	607a      	str	r2, [r7, #4]
 80026b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026b8:	2300      	movs	r3, #0
 80026ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026bc:	f7ff ff5e 	bl	800257c <__NVIC_GetPriorityGrouping>
 80026c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	68b9      	ldr	r1, [r7, #8]
 80026c6:	6978      	ldr	r0, [r7, #20]
 80026c8:	f7ff ff90 	bl	80025ec <NVIC_EncodePriority>
 80026cc:	4602      	mov	r2, r0
 80026ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026d2:	4611      	mov	r1, r2
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff ff5f 	bl	8002598 <__NVIC_SetPriority>
}
 80026da:	bf00      	nop
 80026dc:	3718      	adds	r7, #24
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b082      	sub	sp, #8
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7ff ffb0 	bl	8002650 <SysTick_Config>
 80026f0:	4603      	mov	r3, r0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
	...

080026fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b08b      	sub	sp, #44	; 0x2c
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002706:	2300      	movs	r3, #0
 8002708:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800270a:	2300      	movs	r3, #0
 800270c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800270e:	e169      	b.n	80029e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002710:	2201      	movs	r2, #1
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	69fa      	ldr	r2, [r7, #28]
 8002720:	4013      	ands	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	429a      	cmp	r2, r3
 800272a:	f040 8158 	bne.w	80029de <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	4a9a      	ldr	r2, [pc, #616]	; (800299c <HAL_GPIO_Init+0x2a0>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d05e      	beq.n	80027f6 <HAL_GPIO_Init+0xfa>
 8002738:	4a98      	ldr	r2, [pc, #608]	; (800299c <HAL_GPIO_Init+0x2a0>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d875      	bhi.n	800282a <HAL_GPIO_Init+0x12e>
 800273e:	4a98      	ldr	r2, [pc, #608]	; (80029a0 <HAL_GPIO_Init+0x2a4>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d058      	beq.n	80027f6 <HAL_GPIO_Init+0xfa>
 8002744:	4a96      	ldr	r2, [pc, #600]	; (80029a0 <HAL_GPIO_Init+0x2a4>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d86f      	bhi.n	800282a <HAL_GPIO_Init+0x12e>
 800274a:	4a96      	ldr	r2, [pc, #600]	; (80029a4 <HAL_GPIO_Init+0x2a8>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d052      	beq.n	80027f6 <HAL_GPIO_Init+0xfa>
 8002750:	4a94      	ldr	r2, [pc, #592]	; (80029a4 <HAL_GPIO_Init+0x2a8>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d869      	bhi.n	800282a <HAL_GPIO_Init+0x12e>
 8002756:	4a94      	ldr	r2, [pc, #592]	; (80029a8 <HAL_GPIO_Init+0x2ac>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d04c      	beq.n	80027f6 <HAL_GPIO_Init+0xfa>
 800275c:	4a92      	ldr	r2, [pc, #584]	; (80029a8 <HAL_GPIO_Init+0x2ac>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d863      	bhi.n	800282a <HAL_GPIO_Init+0x12e>
 8002762:	4a92      	ldr	r2, [pc, #584]	; (80029ac <HAL_GPIO_Init+0x2b0>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d046      	beq.n	80027f6 <HAL_GPIO_Init+0xfa>
 8002768:	4a90      	ldr	r2, [pc, #576]	; (80029ac <HAL_GPIO_Init+0x2b0>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d85d      	bhi.n	800282a <HAL_GPIO_Init+0x12e>
 800276e:	2b12      	cmp	r3, #18
 8002770:	d82a      	bhi.n	80027c8 <HAL_GPIO_Init+0xcc>
 8002772:	2b12      	cmp	r3, #18
 8002774:	d859      	bhi.n	800282a <HAL_GPIO_Init+0x12e>
 8002776:	a201      	add	r2, pc, #4	; (adr r2, 800277c <HAL_GPIO_Init+0x80>)
 8002778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800277c:	080027f7 	.word	0x080027f7
 8002780:	080027d1 	.word	0x080027d1
 8002784:	080027e3 	.word	0x080027e3
 8002788:	08002825 	.word	0x08002825
 800278c:	0800282b 	.word	0x0800282b
 8002790:	0800282b 	.word	0x0800282b
 8002794:	0800282b 	.word	0x0800282b
 8002798:	0800282b 	.word	0x0800282b
 800279c:	0800282b 	.word	0x0800282b
 80027a0:	0800282b 	.word	0x0800282b
 80027a4:	0800282b 	.word	0x0800282b
 80027a8:	0800282b 	.word	0x0800282b
 80027ac:	0800282b 	.word	0x0800282b
 80027b0:	0800282b 	.word	0x0800282b
 80027b4:	0800282b 	.word	0x0800282b
 80027b8:	0800282b 	.word	0x0800282b
 80027bc:	0800282b 	.word	0x0800282b
 80027c0:	080027d9 	.word	0x080027d9
 80027c4:	080027ed 	.word	0x080027ed
 80027c8:	4a79      	ldr	r2, [pc, #484]	; (80029b0 <HAL_GPIO_Init+0x2b4>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d013      	beq.n	80027f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80027ce:	e02c      	b.n	800282a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	623b      	str	r3, [r7, #32]
          break;
 80027d6:	e029      	b.n	800282c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	3304      	adds	r3, #4
 80027de:	623b      	str	r3, [r7, #32]
          break;
 80027e0:	e024      	b.n	800282c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	3308      	adds	r3, #8
 80027e8:	623b      	str	r3, [r7, #32]
          break;
 80027ea:	e01f      	b.n	800282c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	330c      	adds	r3, #12
 80027f2:	623b      	str	r3, [r7, #32]
          break;
 80027f4:	e01a      	b.n	800282c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d102      	bne.n	8002804 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80027fe:	2304      	movs	r3, #4
 8002800:	623b      	str	r3, [r7, #32]
          break;
 8002802:	e013      	b.n	800282c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d105      	bne.n	8002818 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800280c:	2308      	movs	r3, #8
 800280e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	69fa      	ldr	r2, [r7, #28]
 8002814:	611a      	str	r2, [r3, #16]
          break;
 8002816:	e009      	b.n	800282c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002818:	2308      	movs	r3, #8
 800281a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	69fa      	ldr	r2, [r7, #28]
 8002820:	615a      	str	r2, [r3, #20]
          break;
 8002822:	e003      	b.n	800282c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002824:	2300      	movs	r3, #0
 8002826:	623b      	str	r3, [r7, #32]
          break;
 8002828:	e000      	b.n	800282c <HAL_GPIO_Init+0x130>
          break;
 800282a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	2bff      	cmp	r3, #255	; 0xff
 8002830:	d801      	bhi.n	8002836 <HAL_GPIO_Init+0x13a>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	e001      	b.n	800283a <HAL_GPIO_Init+0x13e>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	3304      	adds	r3, #4
 800283a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	2bff      	cmp	r3, #255	; 0xff
 8002840:	d802      	bhi.n	8002848 <HAL_GPIO_Init+0x14c>
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	e002      	b.n	800284e <HAL_GPIO_Init+0x152>
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284a:	3b08      	subs	r3, #8
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	210f      	movs	r1, #15
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	fa01 f303 	lsl.w	r3, r1, r3
 800285c:	43db      	mvns	r3, r3
 800285e:	401a      	ands	r2, r3
 8002860:	6a39      	ldr	r1, [r7, #32]
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	fa01 f303 	lsl.w	r3, r1, r3
 8002868:	431a      	orrs	r2, r3
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002876:	2b00      	cmp	r3, #0
 8002878:	f000 80b1 	beq.w	80029de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800287c:	4b4d      	ldr	r3, [pc, #308]	; (80029b4 <HAL_GPIO_Init+0x2b8>)
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	4a4c      	ldr	r2, [pc, #304]	; (80029b4 <HAL_GPIO_Init+0x2b8>)
 8002882:	f043 0301 	orr.w	r3, r3, #1
 8002886:	6193      	str	r3, [r2, #24]
 8002888:	4b4a      	ldr	r3, [pc, #296]	; (80029b4 <HAL_GPIO_Init+0x2b8>)
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	60bb      	str	r3, [r7, #8]
 8002892:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002894:	4a48      	ldr	r2, [pc, #288]	; (80029b8 <HAL_GPIO_Init+0x2bc>)
 8002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002898:	089b      	lsrs	r3, r3, #2
 800289a:	3302      	adds	r3, #2
 800289c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	f003 0303 	and.w	r3, r3, #3
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	220f      	movs	r2, #15
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	43db      	mvns	r3, r3
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	4013      	ands	r3, r2
 80028b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a40      	ldr	r2, [pc, #256]	; (80029bc <HAL_GPIO_Init+0x2c0>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d013      	beq.n	80028e8 <HAL_GPIO_Init+0x1ec>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a3f      	ldr	r2, [pc, #252]	; (80029c0 <HAL_GPIO_Init+0x2c4>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d00d      	beq.n	80028e4 <HAL_GPIO_Init+0x1e8>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a3e      	ldr	r2, [pc, #248]	; (80029c4 <HAL_GPIO_Init+0x2c8>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d007      	beq.n	80028e0 <HAL_GPIO_Init+0x1e4>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a3d      	ldr	r2, [pc, #244]	; (80029c8 <HAL_GPIO_Init+0x2cc>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d101      	bne.n	80028dc <HAL_GPIO_Init+0x1e0>
 80028d8:	2303      	movs	r3, #3
 80028da:	e006      	b.n	80028ea <HAL_GPIO_Init+0x1ee>
 80028dc:	2304      	movs	r3, #4
 80028de:	e004      	b.n	80028ea <HAL_GPIO_Init+0x1ee>
 80028e0:	2302      	movs	r3, #2
 80028e2:	e002      	b.n	80028ea <HAL_GPIO_Init+0x1ee>
 80028e4:	2301      	movs	r3, #1
 80028e6:	e000      	b.n	80028ea <HAL_GPIO_Init+0x1ee>
 80028e8:	2300      	movs	r3, #0
 80028ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ec:	f002 0203 	and.w	r2, r2, #3
 80028f0:	0092      	lsls	r2, r2, #2
 80028f2:	4093      	lsls	r3, r2
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80028fa:	492f      	ldr	r1, [pc, #188]	; (80029b8 <HAL_GPIO_Init+0x2bc>)
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	089b      	lsrs	r3, r3, #2
 8002900:	3302      	adds	r3, #2
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d006      	beq.n	8002922 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002914:	4b2d      	ldr	r3, [pc, #180]	; (80029cc <HAL_GPIO_Init+0x2d0>)
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	492c      	ldr	r1, [pc, #176]	; (80029cc <HAL_GPIO_Init+0x2d0>)
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	4313      	orrs	r3, r2
 800291e:	608b      	str	r3, [r1, #8]
 8002920:	e006      	b.n	8002930 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002922:	4b2a      	ldr	r3, [pc, #168]	; (80029cc <HAL_GPIO_Init+0x2d0>)
 8002924:	689a      	ldr	r2, [r3, #8]
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	43db      	mvns	r3, r3
 800292a:	4928      	ldr	r1, [pc, #160]	; (80029cc <HAL_GPIO_Init+0x2d0>)
 800292c:	4013      	ands	r3, r2
 800292e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d006      	beq.n	800294a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800293c:	4b23      	ldr	r3, [pc, #140]	; (80029cc <HAL_GPIO_Init+0x2d0>)
 800293e:	68da      	ldr	r2, [r3, #12]
 8002940:	4922      	ldr	r1, [pc, #136]	; (80029cc <HAL_GPIO_Init+0x2d0>)
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	4313      	orrs	r3, r2
 8002946:	60cb      	str	r3, [r1, #12]
 8002948:	e006      	b.n	8002958 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800294a:	4b20      	ldr	r3, [pc, #128]	; (80029cc <HAL_GPIO_Init+0x2d0>)
 800294c:	68da      	ldr	r2, [r3, #12]
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	43db      	mvns	r3, r3
 8002952:	491e      	ldr	r1, [pc, #120]	; (80029cc <HAL_GPIO_Init+0x2d0>)
 8002954:	4013      	ands	r3, r2
 8002956:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d006      	beq.n	8002972 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002964:	4b19      	ldr	r3, [pc, #100]	; (80029cc <HAL_GPIO_Init+0x2d0>)
 8002966:	685a      	ldr	r2, [r3, #4]
 8002968:	4918      	ldr	r1, [pc, #96]	; (80029cc <HAL_GPIO_Init+0x2d0>)
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	4313      	orrs	r3, r2
 800296e:	604b      	str	r3, [r1, #4]
 8002970:	e006      	b.n	8002980 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002972:	4b16      	ldr	r3, [pc, #88]	; (80029cc <HAL_GPIO_Init+0x2d0>)
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	43db      	mvns	r3, r3
 800297a:	4914      	ldr	r1, [pc, #80]	; (80029cc <HAL_GPIO_Init+0x2d0>)
 800297c:	4013      	ands	r3, r2
 800297e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d021      	beq.n	80029d0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800298c:	4b0f      	ldr	r3, [pc, #60]	; (80029cc <HAL_GPIO_Init+0x2d0>)
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	490e      	ldr	r1, [pc, #56]	; (80029cc <HAL_GPIO_Init+0x2d0>)
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	4313      	orrs	r3, r2
 8002996:	600b      	str	r3, [r1, #0]
 8002998:	e021      	b.n	80029de <HAL_GPIO_Init+0x2e2>
 800299a:	bf00      	nop
 800299c:	10320000 	.word	0x10320000
 80029a0:	10310000 	.word	0x10310000
 80029a4:	10220000 	.word	0x10220000
 80029a8:	10210000 	.word	0x10210000
 80029ac:	10120000 	.word	0x10120000
 80029b0:	10110000 	.word	0x10110000
 80029b4:	40021000 	.word	0x40021000
 80029b8:	40010000 	.word	0x40010000
 80029bc:	40010800 	.word	0x40010800
 80029c0:	40010c00 	.word	0x40010c00
 80029c4:	40011000 	.word	0x40011000
 80029c8:	40011400 	.word	0x40011400
 80029cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80029d0:	4b0b      	ldr	r3, [pc, #44]	; (8002a00 <HAL_GPIO_Init+0x304>)
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	43db      	mvns	r3, r3
 80029d8:	4909      	ldr	r1, [pc, #36]	; (8002a00 <HAL_GPIO_Init+0x304>)
 80029da:	4013      	ands	r3, r2
 80029dc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	3301      	adds	r3, #1
 80029e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ea:	fa22 f303 	lsr.w	r3, r2, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f47f ae8e 	bne.w	8002710 <HAL_GPIO_Init+0x14>
  }
}
 80029f4:	bf00      	nop
 80029f6:	bf00      	nop
 80029f8:	372c      	adds	r7, #44	; 0x2c
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr
 8002a00:	40010400 	.word	0x40010400

08002a04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	807b      	strh	r3, [r7, #2]
 8002a10:	4613      	mov	r3, r2
 8002a12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a14:	787b      	ldrb	r3, [r7, #1]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a1a:	887a      	ldrh	r2, [r7, #2]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a20:	e003      	b.n	8002a2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a22:	887b      	ldrh	r3, [r7, #2]
 8002a24:	041a      	lsls	r2, r3, #16
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	611a      	str	r2, [r3, #16]
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr

08002a34 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a46:	887a      	ldrh	r2, [r7, #2]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	041a      	lsls	r2, r3, #16
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	43d9      	mvns	r1, r3
 8002a52:	887b      	ldrh	r3, [r7, #2]
 8002a54:	400b      	ands	r3, r1
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	611a      	str	r2, [r3, #16]
}
 8002a5c:	bf00      	nop
 8002a5e:	3714      	adds	r7, #20
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bc80      	pop	{r7}
 8002a64:	4770      	bx	lr
	...

08002a68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e12b      	b.n	8002cd2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d106      	bne.n	8002a94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7fe f95a 	bl	8000d48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2224      	movs	r2, #36	; 0x24
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 0201 	bic.w	r2, r2, #1
 8002aaa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002aba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002aca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002acc:	f001 fbca 	bl	8004264 <HAL_RCC_GetPCLK1Freq>
 8002ad0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	4a81      	ldr	r2, [pc, #516]	; (8002cdc <HAL_I2C_Init+0x274>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d807      	bhi.n	8002aec <HAL_I2C_Init+0x84>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4a80      	ldr	r2, [pc, #512]	; (8002ce0 <HAL_I2C_Init+0x278>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	bf94      	ite	ls
 8002ae4:	2301      	movls	r3, #1
 8002ae6:	2300      	movhi	r3, #0
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	e006      	b.n	8002afa <HAL_I2C_Init+0x92>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	4a7d      	ldr	r2, [pc, #500]	; (8002ce4 <HAL_I2C_Init+0x27c>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	bf94      	ite	ls
 8002af4:	2301      	movls	r3, #1
 8002af6:	2300      	movhi	r3, #0
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e0e7      	b.n	8002cd2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	4a78      	ldr	r2, [pc, #480]	; (8002ce8 <HAL_I2C_Init+0x280>)
 8002b06:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0a:	0c9b      	lsrs	r3, r3, #18
 8002b0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68ba      	ldr	r2, [r7, #8]
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	4a6a      	ldr	r2, [pc, #424]	; (8002cdc <HAL_I2C_Init+0x274>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d802      	bhi.n	8002b3c <HAL_I2C_Init+0xd4>
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	e009      	b.n	8002b50 <HAL_I2C_Init+0xe8>
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b42:	fb02 f303 	mul.w	r3, r2, r3
 8002b46:	4a69      	ldr	r2, [pc, #420]	; (8002cec <HAL_I2C_Init+0x284>)
 8002b48:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4c:	099b      	lsrs	r3, r3, #6
 8002b4e:	3301      	adds	r3, #1
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	6812      	ldr	r2, [r2, #0]
 8002b54:	430b      	orrs	r3, r1
 8002b56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	69db      	ldr	r3, [r3, #28]
 8002b5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	495c      	ldr	r1, [pc, #368]	; (8002cdc <HAL_I2C_Init+0x274>)
 8002b6c:	428b      	cmp	r3, r1
 8002b6e:	d819      	bhi.n	8002ba4 <HAL_I2C_Init+0x13c>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	1e59      	subs	r1, r3, #1
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b7e:	1c59      	adds	r1, r3, #1
 8002b80:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b84:	400b      	ands	r3, r1
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00a      	beq.n	8002ba0 <HAL_I2C_Init+0x138>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	1e59      	subs	r1, r3, #1
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b98:	3301      	adds	r3, #1
 8002b9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b9e:	e051      	b.n	8002c44 <HAL_I2C_Init+0x1dc>
 8002ba0:	2304      	movs	r3, #4
 8002ba2:	e04f      	b.n	8002c44 <HAL_I2C_Init+0x1dc>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d111      	bne.n	8002bd0 <HAL_I2C_Init+0x168>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	1e58      	subs	r0, r3, #1
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6859      	ldr	r1, [r3, #4]
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	440b      	add	r3, r1
 8002bba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	bf0c      	ite	eq
 8002bc8:	2301      	moveq	r3, #1
 8002bca:	2300      	movne	r3, #0
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	e012      	b.n	8002bf6 <HAL_I2C_Init+0x18e>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	1e58      	subs	r0, r3, #1
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6859      	ldr	r1, [r3, #4]
 8002bd8:	460b      	mov	r3, r1
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	440b      	add	r3, r1
 8002bde:	0099      	lsls	r1, r3, #2
 8002be0:	440b      	add	r3, r1
 8002be2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002be6:	3301      	adds	r3, #1
 8002be8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	bf0c      	ite	eq
 8002bf0:	2301      	moveq	r3, #1
 8002bf2:	2300      	movne	r3, #0
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <HAL_I2C_Init+0x196>
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e022      	b.n	8002c44 <HAL_I2C_Init+0x1dc>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10e      	bne.n	8002c24 <HAL_I2C_Init+0x1bc>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	1e58      	subs	r0, r3, #1
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6859      	ldr	r1, [r3, #4]
 8002c0e:	460b      	mov	r3, r1
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	440b      	add	r3, r1
 8002c14:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c18:	3301      	adds	r3, #1
 8002c1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c22:	e00f      	b.n	8002c44 <HAL_I2C_Init+0x1dc>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	1e58      	subs	r0, r3, #1
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6859      	ldr	r1, [r3, #4]
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	0099      	lsls	r1, r3, #2
 8002c34:	440b      	add	r3, r1
 8002c36:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	6809      	ldr	r1, [r1, #0]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	69da      	ldr	r2, [r3, #28]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	430a      	orrs	r2, r1
 8002c66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6911      	ldr	r1, [r2, #16]
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	68d2      	ldr	r2, [r2, #12]
 8002c7e:	4311      	orrs	r1, r2
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6812      	ldr	r2, [r2, #0]
 8002c84:	430b      	orrs	r3, r1
 8002c86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	695a      	ldr	r2, [r3, #20]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0201 	orr.w	r2, r2, #1
 8002cb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2220      	movs	r2, #32
 8002cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	000186a0 	.word	0x000186a0
 8002ce0:	001e847f 	.word	0x001e847f
 8002ce4:	003d08ff 	.word	0x003d08ff
 8002ce8:	431bde83 	.word	0x431bde83
 8002cec:	10624dd3 	.word	0x10624dd3

08002cf0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b088      	sub	sp, #32
 8002cf4:	af02      	add	r7, sp, #8
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	607a      	str	r2, [r7, #4]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	817b      	strh	r3, [r7, #10]
 8002d00:	4613      	mov	r3, r2
 8002d02:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d04:	f7fe ff90 	bl	8001c28 <HAL_GetTick>
 8002d08:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b20      	cmp	r3, #32
 8002d14:	f040 80e0 	bne.w	8002ed8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	2319      	movs	r3, #25
 8002d1e:	2201      	movs	r2, #1
 8002d20:	4970      	ldr	r1, [pc, #448]	; (8002ee4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f000 fc9e 	bl	8003664 <I2C_WaitOnFlagUntilTimeout>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002d2e:	2302      	movs	r3, #2
 8002d30:	e0d3      	b.n	8002eda <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d101      	bne.n	8002d40 <HAL_I2C_Master_Transmit+0x50>
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	e0cc      	b.n	8002eda <HAL_I2C_Master_Transmit+0x1ea>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d007      	beq.n	8002d66 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f042 0201 	orr.w	r2, r2, #1
 8002d64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d74:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2221      	movs	r2, #33	; 0x21
 8002d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2210      	movs	r2, #16
 8002d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	893a      	ldrh	r2, [r7, #8]
 8002d96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	4a50      	ldr	r2, [pc, #320]	; (8002ee8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002da6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002da8:	8979      	ldrh	r1, [r7, #10]
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	6a3a      	ldr	r2, [r7, #32]
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f000 fb08 	bl	80033c4 <I2C_MasterRequestWrite>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e08d      	b.n	8002eda <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	613b      	str	r3, [r7, #16]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	695b      	ldr	r3, [r3, #20]
 8002dc8:	613b      	str	r3, [r7, #16]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	613b      	str	r3, [r7, #16]
 8002dd2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002dd4:	e066      	b.n	8002ea4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	6a39      	ldr	r1, [r7, #32]
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f000 fd5c 	bl	8003898 <I2C_WaitOnTXEFlagUntilTimeout>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00d      	beq.n	8002e02 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d107      	bne.n	8002dfe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dfc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e06b      	b.n	8002eda <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e06:	781a      	ldrb	r2, [r3, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e12:	1c5a      	adds	r2, r3, #1
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	695b      	ldr	r3, [r3, #20]
 8002e38:	f003 0304 	and.w	r3, r3, #4
 8002e3c:	2b04      	cmp	r3, #4
 8002e3e:	d11b      	bne.n	8002e78 <HAL_I2C_Master_Transmit+0x188>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d017      	beq.n	8002e78 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	781a      	ldrb	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	1c5a      	adds	r2, r3, #1
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	3b01      	subs	r3, #1
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e70:	3b01      	subs	r3, #1
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	6a39      	ldr	r1, [r7, #32]
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f000 fd53 	bl	8003928 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00d      	beq.n	8002ea4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8c:	2b04      	cmp	r3, #4
 8002e8e:	d107      	bne.n	8002ea0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e9e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e01a      	b.n	8002eda <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d194      	bne.n	8002dd6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	e000      	b.n	8002eda <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002ed8:	2302      	movs	r3, #2
  }
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3718      	adds	r7, #24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	00100002 	.word	0x00100002
 8002ee8:	ffff0000 	.word	0xffff0000

08002eec <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b08c      	sub	sp, #48	; 0x30
 8002ef0:	af02      	add	r7, sp, #8
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	607a      	str	r2, [r7, #4]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	460b      	mov	r3, r1
 8002efa:	817b      	strh	r3, [r7, #10]
 8002efc:	4613      	mov	r3, r2
 8002efe:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002f00:	2300      	movs	r3, #0
 8002f02:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f04:	f7fe fe90 	bl	8001c28 <HAL_GetTick>
 8002f08:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b20      	cmp	r3, #32
 8002f14:	f040 824b 	bne.w	80033ae <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	2319      	movs	r3, #25
 8002f1e:	2201      	movs	r2, #1
 8002f20:	497f      	ldr	r1, [pc, #508]	; (8003120 <HAL_I2C_Master_Receive+0x234>)
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f000 fb9e 	bl	8003664 <I2C_WaitOnFlagUntilTimeout>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002f2e:	2302      	movs	r3, #2
 8002f30:	e23e      	b.n	80033b0 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d101      	bne.n	8002f40 <HAL_I2C_Master_Receive+0x54>
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	e237      	b.n	80033b0 <HAL_I2C_Master_Receive+0x4c4>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d007      	beq.n	8002f66 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f042 0201 	orr.w	r2, r2, #1
 8002f64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f74:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2222      	movs	r2, #34	; 0x22
 8002f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2210      	movs	r2, #16
 8002f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	893a      	ldrh	r2, [r7, #8]
 8002f96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	4a5f      	ldr	r2, [pc, #380]	; (8003124 <HAL_I2C_Master_Receive+0x238>)
 8002fa6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002fa8:	8979      	ldrh	r1, [r7, #10]
 8002faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f000 fa8a 	bl	80034c8 <I2C_MasterRequestRead>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e1f8      	b.n	80033b0 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d113      	bne.n	8002fee <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61fb      	str	r3, [r7, #28]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	61fb      	str	r3, [r7, #28]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	61fb      	str	r3, [r7, #28]
 8002fda:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	e1cc      	b.n	8003388 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d11e      	bne.n	8003034 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003004:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003006:	b672      	cpsid	i
}
 8003008:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800300a:	2300      	movs	r3, #0
 800300c:	61bb      	str	r3, [r7, #24]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	695b      	ldr	r3, [r3, #20]
 8003014:	61bb      	str	r3, [r7, #24]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	61bb      	str	r3, [r7, #24]
 800301e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800302e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003030:	b662      	cpsie	i
}
 8003032:	e035      	b.n	80030a0 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003038:	2b02      	cmp	r3, #2
 800303a:	d11e      	bne.n	800307a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800304a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800304c:	b672      	cpsid	i
}
 800304e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003050:	2300      	movs	r3, #0
 8003052:	617b      	str	r3, [r7, #20]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	617b      	str	r3, [r7, #20]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	617b      	str	r3, [r7, #20]
 8003064:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003074:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003076:	b662      	cpsie	i
}
 8003078:	e012      	b.n	80030a0 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003088:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800308a:	2300      	movs	r3, #0
 800308c:	613b      	str	r3, [r7, #16]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	613b      	str	r3, [r7, #16]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	613b      	str	r3, [r7, #16]
 800309e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80030a0:	e172      	b.n	8003388 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a6:	2b03      	cmp	r3, #3
 80030a8:	f200 811f 	bhi.w	80032ea <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d123      	bne.n	80030fc <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f000 fc7d 	bl	80039b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e173      	b.n	80033b0 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	691a      	ldr	r2, [r3, #16]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	b2d2      	uxtb	r2, r2
 80030d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030da:	1c5a      	adds	r2, r3, #1
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e4:	3b01      	subs	r3, #1
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	3b01      	subs	r3, #1
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030fa:	e145      	b.n	8003388 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003100:	2b02      	cmp	r3, #2
 8003102:	d152      	bne.n	80031aa <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003106:	9300      	str	r3, [sp, #0]
 8003108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310a:	2200      	movs	r2, #0
 800310c:	4906      	ldr	r1, [pc, #24]	; (8003128 <HAL_I2C_Master_Receive+0x23c>)
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f000 faa8 	bl	8003664 <I2C_WaitOnFlagUntilTimeout>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d008      	beq.n	800312c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e148      	b.n	80033b0 <HAL_I2C_Master_Receive+0x4c4>
 800311e:	bf00      	nop
 8003120:	00100002 	.word	0x00100002
 8003124:	ffff0000 	.word	0xffff0000
 8003128:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800312c:	b672      	cpsid	i
}
 800312e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800313e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	691a      	ldr	r2, [r3, #16]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	b2d2      	uxtb	r2, r2
 800314c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003152:	1c5a      	adds	r2, r3, #1
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800315c:	3b01      	subs	r3, #1
 800315e:	b29a      	uxth	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003168:	b29b      	uxth	r3, r3
 800316a:	3b01      	subs	r3, #1
 800316c:	b29a      	uxth	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003172:	b662      	cpsie	i
}
 8003174:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	691a      	ldr	r2, [r3, #16]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	b2d2      	uxtb	r2, r2
 8003182:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	1c5a      	adds	r2, r3, #1
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003192:	3b01      	subs	r3, #1
 8003194:	b29a      	uxth	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800319e:	b29b      	uxth	r3, r3
 80031a0:	3b01      	subs	r3, #1
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031a8:	e0ee      	b.n	8003388 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b0:	2200      	movs	r2, #0
 80031b2:	4981      	ldr	r1, [pc, #516]	; (80033b8 <HAL_I2C_Master_Receive+0x4cc>)
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f000 fa55 	bl	8003664 <I2C_WaitOnFlagUntilTimeout>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e0f5      	b.n	80033b0 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80031d4:	b672      	cpsid	i
}
 80031d6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	691a      	ldr	r2, [r3, #16]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	b2d2      	uxtb	r2, r2
 80031e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ea:	1c5a      	adds	r2, r3, #1
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f4:	3b01      	subs	r3, #1
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003200:	b29b      	uxth	r3, r3
 8003202:	3b01      	subs	r3, #1
 8003204:	b29a      	uxth	r2, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800320a:	4b6c      	ldr	r3, [pc, #432]	; (80033bc <HAL_I2C_Master_Receive+0x4d0>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	08db      	lsrs	r3, r3, #3
 8003210:	4a6b      	ldr	r2, [pc, #428]	; (80033c0 <HAL_I2C_Master_Receive+0x4d4>)
 8003212:	fba2 2303 	umull	r2, r3, r2, r3
 8003216:	0a1a      	lsrs	r2, r3, #8
 8003218:	4613      	mov	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	00da      	lsls	r2, r3, #3
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003224:	6a3b      	ldr	r3, [r7, #32]
 8003226:	3b01      	subs	r3, #1
 8003228:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800322a:	6a3b      	ldr	r3, [r7, #32]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d118      	bne.n	8003262 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2220      	movs	r2, #32
 800323a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	f043 0220 	orr.w	r2, r3, #32
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003252:	b662      	cpsie	i
}
 8003254:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e0a6      	b.n	80033b0 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	2b04      	cmp	r3, #4
 800326e:	d1d9      	bne.n	8003224 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800327e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	691a      	ldr	r2, [r3, #16]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328a:	b2d2      	uxtb	r2, r2
 800328c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	1c5a      	adds	r2, r3, #1
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800329c:	3b01      	subs	r3, #1
 800329e:	b29a      	uxth	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	3b01      	subs	r3, #1
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80032b2:	b662      	cpsie	i
}
 80032b4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	691a      	ldr	r2, [r3, #16]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c0:	b2d2      	uxtb	r2, r2
 80032c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c8:	1c5a      	adds	r2, r3, #1
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d2:	3b01      	subs	r3, #1
 80032d4:	b29a      	uxth	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032de:	b29b      	uxth	r3, r3
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032e8:	e04e      	b.n	8003388 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f000 fb62 	bl	80039b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e058      	b.n	80033b0 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	691a      	ldr	r2, [r3, #16]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003308:	b2d2      	uxtb	r2, r2
 800330a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003310:	1c5a      	adds	r2, r3, #1
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800331a:	3b01      	subs	r3, #1
 800331c:	b29a      	uxth	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003326:	b29b      	uxth	r3, r3
 8003328:	3b01      	subs	r3, #1
 800332a:	b29a      	uxth	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	f003 0304 	and.w	r3, r3, #4
 800333a:	2b04      	cmp	r3, #4
 800333c:	d124      	bne.n	8003388 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003342:	2b03      	cmp	r3, #3
 8003344:	d107      	bne.n	8003356 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003354:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	691a      	ldr	r2, [r3, #16]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	b2d2      	uxtb	r2, r2
 8003362:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003368:	1c5a      	adds	r2, r3, #1
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003372:	3b01      	subs	r3, #1
 8003374:	b29a      	uxth	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800337e:	b29b      	uxth	r3, r3
 8003380:	3b01      	subs	r3, #1
 8003382:	b29a      	uxth	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800338c:	2b00      	cmp	r3, #0
 800338e:	f47f ae88 	bne.w	80030a2 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2220      	movs	r2, #32
 8003396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80033aa:	2300      	movs	r3, #0
 80033ac:	e000      	b.n	80033b0 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80033ae:	2302      	movs	r3, #2
  }
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3728      	adds	r7, #40	; 0x28
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	00010004 	.word	0x00010004
 80033bc:	20000000 	.word	0x20000000
 80033c0:	14f8b589 	.word	0x14f8b589

080033c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b088      	sub	sp, #32
 80033c8:	af02      	add	r7, sp, #8
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	607a      	str	r2, [r7, #4]
 80033ce:	603b      	str	r3, [r7, #0]
 80033d0:	460b      	mov	r3, r1
 80033d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	2b08      	cmp	r3, #8
 80033de:	d006      	beq.n	80033ee <I2C_MasterRequestWrite+0x2a>
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d003      	beq.n	80033ee <I2C_MasterRequestWrite+0x2a>
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033ec:	d108      	bne.n	8003400 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	e00b      	b.n	8003418 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003404:	2b12      	cmp	r3, #18
 8003406:	d107      	bne.n	8003418 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003416:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	9300      	str	r3, [sp, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003424:	68f8      	ldr	r0, [r7, #12]
 8003426:	f000 f91d 	bl	8003664 <I2C_WaitOnFlagUntilTimeout>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00d      	beq.n	800344c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800343e:	d103      	bne.n	8003448 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003446:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e035      	b.n	80034b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003454:	d108      	bne.n	8003468 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003456:	897b      	ldrh	r3, [r7, #10]
 8003458:	b2db      	uxtb	r3, r3
 800345a:	461a      	mov	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003464:	611a      	str	r2, [r3, #16]
 8003466:	e01b      	b.n	80034a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003468:	897b      	ldrh	r3, [r7, #10]
 800346a:	11db      	asrs	r3, r3, #7
 800346c:	b2db      	uxtb	r3, r3
 800346e:	f003 0306 	and.w	r3, r3, #6
 8003472:	b2db      	uxtb	r3, r3
 8003474:	f063 030f 	orn	r3, r3, #15
 8003478:	b2da      	uxtb	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	490e      	ldr	r1, [pc, #56]	; (80034c0 <I2C_MasterRequestWrite+0xfc>)
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f000 f966 	bl	8003758 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e010      	b.n	80034b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003496:	897b      	ldrh	r3, [r7, #10]
 8003498:	b2da      	uxtb	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	4907      	ldr	r1, [pc, #28]	; (80034c4 <I2C_MasterRequestWrite+0x100>)
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f000 f956 	bl	8003758 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e000      	b.n	80034b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3718      	adds	r7, #24
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	00010008 	.word	0x00010008
 80034c4:	00010002 	.word	0x00010002

080034c8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b088      	sub	sp, #32
 80034cc:	af02      	add	r7, sp, #8
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	607a      	str	r2, [r7, #4]
 80034d2:	603b      	str	r3, [r7, #0]
 80034d4:	460b      	mov	r3, r1
 80034d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034dc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034ec:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	2b08      	cmp	r3, #8
 80034f2:	d006      	beq.n	8003502 <I2C_MasterRequestRead+0x3a>
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d003      	beq.n	8003502 <I2C_MasterRequestRead+0x3a>
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003500:	d108      	bne.n	8003514 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	e00b      	b.n	800352c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003518:	2b11      	cmp	r3, #17
 800351a:	d107      	bne.n	800352c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800352a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f000 f893 	bl	8003664 <I2C_WaitOnFlagUntilTimeout>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00d      	beq.n	8003560 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800354e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003552:	d103      	bne.n	800355c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f44f 7200 	mov.w	r2, #512	; 0x200
 800355a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e079      	b.n	8003654 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003568:	d108      	bne.n	800357c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800356a:	897b      	ldrh	r3, [r7, #10]
 800356c:	b2db      	uxtb	r3, r3
 800356e:	f043 0301 	orr.w	r3, r3, #1
 8003572:	b2da      	uxtb	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	611a      	str	r2, [r3, #16]
 800357a:	e05f      	b.n	800363c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800357c:	897b      	ldrh	r3, [r7, #10]
 800357e:	11db      	asrs	r3, r3, #7
 8003580:	b2db      	uxtb	r3, r3
 8003582:	f003 0306 	and.w	r3, r3, #6
 8003586:	b2db      	uxtb	r3, r3
 8003588:	f063 030f 	orn	r3, r3, #15
 800358c:	b2da      	uxtb	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	4930      	ldr	r1, [pc, #192]	; (800365c <I2C_MasterRequestRead+0x194>)
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f000 f8dc 	bl	8003758 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e054      	b.n	8003654 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80035aa:	897b      	ldrh	r3, [r7, #10]
 80035ac:	b2da      	uxtb	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	4929      	ldr	r1, [pc, #164]	; (8003660 <I2C_MasterRequestRead+0x198>)
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f000 f8cc 	bl	8003758 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e044      	b.n	8003654 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ca:	2300      	movs	r3, #0
 80035cc:	613b      	str	r3, [r7, #16]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	613b      	str	r3, [r7, #16]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	613b      	str	r3, [r7, #16]
 80035de:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035ee:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	9300      	str	r3, [sp, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f000 f831 	bl	8003664 <I2C_WaitOnFlagUntilTimeout>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00d      	beq.n	8003624 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003616:	d103      	bne.n	8003620 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800361e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e017      	b.n	8003654 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003624:	897b      	ldrh	r3, [r7, #10]
 8003626:	11db      	asrs	r3, r3, #7
 8003628:	b2db      	uxtb	r3, r3
 800362a:	f003 0306 	and.w	r3, r3, #6
 800362e:	b2db      	uxtb	r3, r3
 8003630:	f063 030e 	orn	r3, r3, #14
 8003634:	b2da      	uxtb	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	4907      	ldr	r1, [pc, #28]	; (8003660 <I2C_MasterRequestRead+0x198>)
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f000 f888 	bl	8003758 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e000      	b.n	8003654 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3718      	adds	r7, #24
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	00010008 	.word	0x00010008
 8003660:	00010002 	.word	0x00010002

08003664 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	603b      	str	r3, [r7, #0]
 8003670:	4613      	mov	r3, r2
 8003672:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003674:	e048      	b.n	8003708 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800367c:	d044      	beq.n	8003708 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800367e:	f7fe fad3 	bl	8001c28 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	429a      	cmp	r2, r3
 800368c:	d302      	bcc.n	8003694 <I2C_WaitOnFlagUntilTimeout+0x30>
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d139      	bne.n	8003708 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	0c1b      	lsrs	r3, r3, #16
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b01      	cmp	r3, #1
 800369c:	d10d      	bne.n	80036ba <I2C_WaitOnFlagUntilTimeout+0x56>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	43da      	mvns	r2, r3
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	4013      	ands	r3, r2
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	bf0c      	ite	eq
 80036b0:	2301      	moveq	r3, #1
 80036b2:	2300      	movne	r3, #0
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	461a      	mov	r2, r3
 80036b8:	e00c      	b.n	80036d4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	43da      	mvns	r2, r3
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	4013      	ands	r3, r2
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	bf0c      	ite	eq
 80036cc:	2301      	moveq	r3, #1
 80036ce:	2300      	movne	r3, #0
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	461a      	mov	r2, r3
 80036d4:	79fb      	ldrb	r3, [r7, #7]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d116      	bne.n	8003708 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2220      	movs	r2, #32
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f4:	f043 0220 	orr.w	r2, r3, #32
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e023      	b.n	8003750 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	0c1b      	lsrs	r3, r3, #16
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b01      	cmp	r3, #1
 8003710:	d10d      	bne.n	800372e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	43da      	mvns	r2, r3
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	4013      	ands	r3, r2
 800371e:	b29b      	uxth	r3, r3
 8003720:	2b00      	cmp	r3, #0
 8003722:	bf0c      	ite	eq
 8003724:	2301      	moveq	r3, #1
 8003726:	2300      	movne	r3, #0
 8003728:	b2db      	uxtb	r3, r3
 800372a:	461a      	mov	r2, r3
 800372c:	e00c      	b.n	8003748 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	43da      	mvns	r2, r3
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	4013      	ands	r3, r2
 800373a:	b29b      	uxth	r3, r3
 800373c:	2b00      	cmp	r3, #0
 800373e:	bf0c      	ite	eq
 8003740:	2301      	moveq	r3, #1
 8003742:	2300      	movne	r3, #0
 8003744:	b2db      	uxtb	r3, r3
 8003746:	461a      	mov	r2, r3
 8003748:	79fb      	ldrb	r3, [r7, #7]
 800374a:	429a      	cmp	r2, r3
 800374c:	d093      	beq.n	8003676 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
 8003764:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003766:	e071      	b.n	800384c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003776:	d123      	bne.n	80037c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003786:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003790:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2220      	movs	r2, #32
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ac:	f043 0204 	orr.w	r2, r3, #4
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e067      	b.n	8003890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c6:	d041      	beq.n	800384c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037c8:	f7fe fa2e 	bl	8001c28 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d302      	bcc.n	80037de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d136      	bne.n	800384c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	0c1b      	lsrs	r3, r3, #16
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d10c      	bne.n	8003802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	43da      	mvns	r2, r3
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	4013      	ands	r3, r2
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	bf14      	ite	ne
 80037fa:	2301      	movne	r3, #1
 80037fc:	2300      	moveq	r3, #0
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	e00b      	b.n	800381a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	43da      	mvns	r2, r3
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	4013      	ands	r3, r2
 800380e:	b29b      	uxth	r3, r3
 8003810:	2b00      	cmp	r3, #0
 8003812:	bf14      	ite	ne
 8003814:	2301      	movne	r3, #1
 8003816:	2300      	moveq	r3, #0
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d016      	beq.n	800384c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2220      	movs	r2, #32
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003838:	f043 0220 	orr.w	r2, r3, #32
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e021      	b.n	8003890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	0c1b      	lsrs	r3, r3, #16
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b01      	cmp	r3, #1
 8003854:	d10c      	bne.n	8003870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	43da      	mvns	r2, r3
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	4013      	ands	r3, r2
 8003862:	b29b      	uxth	r3, r3
 8003864:	2b00      	cmp	r3, #0
 8003866:	bf14      	ite	ne
 8003868:	2301      	movne	r3, #1
 800386a:	2300      	moveq	r3, #0
 800386c:	b2db      	uxtb	r3, r3
 800386e:	e00b      	b.n	8003888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	43da      	mvns	r2, r3
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	4013      	ands	r3, r2
 800387c:	b29b      	uxth	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	bf14      	ite	ne
 8003882:	2301      	movne	r3, #1
 8003884:	2300      	moveq	r3, #0
 8003886:	b2db      	uxtb	r3, r3
 8003888:	2b00      	cmp	r3, #0
 800388a:	f47f af6d 	bne.w	8003768 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038a4:	e034      	b.n	8003910 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 f8e3 	bl	8003a72 <I2C_IsAcknowledgeFailed>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e034      	b.n	8003920 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038bc:	d028      	beq.n	8003910 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038be:	f7fe f9b3 	bl	8001c28 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	68ba      	ldr	r2, [r7, #8]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d302      	bcc.n	80038d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d11d      	bne.n	8003910 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038de:	2b80      	cmp	r3, #128	; 0x80
 80038e0:	d016      	beq.n	8003910 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2220      	movs	r2, #32
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fc:	f043 0220 	orr.w	r2, r3, #32
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e007      	b.n	8003920 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800391a:	2b80      	cmp	r3, #128	; 0x80
 800391c:	d1c3      	bne.n	80038a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003934:	e034      	b.n	80039a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 f89b 	bl	8003a72 <I2C_IsAcknowledgeFailed>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e034      	b.n	80039b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394c:	d028      	beq.n	80039a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800394e:	f7fe f96b 	bl	8001c28 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	429a      	cmp	r2, r3
 800395c:	d302      	bcc.n	8003964 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d11d      	bne.n	80039a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	f003 0304 	and.w	r3, r3, #4
 800396e:	2b04      	cmp	r3, #4
 8003970:	d016      	beq.n	80039a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2220      	movs	r2, #32
 800397c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398c:	f043 0220 	orr.w	r2, r3, #32
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e007      	b.n	80039b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	f003 0304 	and.w	r3, r3, #4
 80039aa:	2b04      	cmp	r3, #4
 80039ac:	d1c3      	bne.n	8003936 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3710      	adds	r7, #16
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039c4:	e049      	b.n	8003a5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	f003 0310 	and.w	r3, r3, #16
 80039d0:	2b10      	cmp	r3, #16
 80039d2:	d119      	bne.n	8003a08 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f06f 0210 	mvn.w	r2, #16
 80039dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2220      	movs	r2, #32
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e030      	b.n	8003a6a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a08:	f7fe f90e 	bl	8001c28 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d302      	bcc.n	8003a1e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d11d      	bne.n	8003a5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a28:	2b40      	cmp	r3, #64	; 0x40
 8003a2a:	d016      	beq.n	8003a5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2220      	movs	r2, #32
 8003a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a46:	f043 0220 	orr.w	r2, r3, #32
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e007      	b.n	8003a6a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	695b      	ldr	r3, [r3, #20]
 8003a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a64:	2b40      	cmp	r3, #64	; 0x40
 8003a66:	d1ae      	bne.n	80039c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b083      	sub	sp, #12
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	695b      	ldr	r3, [r3, #20]
 8003a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a88:	d11b      	bne.n	8003ac2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a92:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	f043 0204 	orr.w	r2, r3, #4
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e000      	b.n	8003ac4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bc80      	pop	{r7}
 8003acc:	4770      	bx	lr
	...

08003ad0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e272      	b.n	8003fc8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f000 8087 	beq.w	8003bfe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003af0:	4b92      	ldr	r3, [pc, #584]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f003 030c 	and.w	r3, r3, #12
 8003af8:	2b04      	cmp	r3, #4
 8003afa:	d00c      	beq.n	8003b16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003afc:	4b8f      	ldr	r3, [pc, #572]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f003 030c 	and.w	r3, r3, #12
 8003b04:	2b08      	cmp	r3, #8
 8003b06:	d112      	bne.n	8003b2e <HAL_RCC_OscConfig+0x5e>
 8003b08:	4b8c      	ldr	r3, [pc, #560]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b14:	d10b      	bne.n	8003b2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b16:	4b89      	ldr	r3, [pc, #548]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d06c      	beq.n	8003bfc <HAL_RCC_OscConfig+0x12c>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d168      	bne.n	8003bfc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e24c      	b.n	8003fc8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b36:	d106      	bne.n	8003b46 <HAL_RCC_OscConfig+0x76>
 8003b38:	4b80      	ldr	r3, [pc, #512]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a7f      	ldr	r2, [pc, #508]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003b3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b42:	6013      	str	r3, [r2, #0]
 8003b44:	e02e      	b.n	8003ba4 <HAL_RCC_OscConfig+0xd4>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10c      	bne.n	8003b68 <HAL_RCC_OscConfig+0x98>
 8003b4e:	4b7b      	ldr	r3, [pc, #492]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a7a      	ldr	r2, [pc, #488]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003b54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b58:	6013      	str	r3, [r2, #0]
 8003b5a:	4b78      	ldr	r3, [pc, #480]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a77      	ldr	r2, [pc, #476]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003b60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b64:	6013      	str	r3, [r2, #0]
 8003b66:	e01d      	b.n	8003ba4 <HAL_RCC_OscConfig+0xd4>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b70:	d10c      	bne.n	8003b8c <HAL_RCC_OscConfig+0xbc>
 8003b72:	4b72      	ldr	r3, [pc, #456]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a71      	ldr	r2, [pc, #452]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003b78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b7c:	6013      	str	r3, [r2, #0]
 8003b7e:	4b6f      	ldr	r3, [pc, #444]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a6e      	ldr	r2, [pc, #440]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b88:	6013      	str	r3, [r2, #0]
 8003b8a:	e00b      	b.n	8003ba4 <HAL_RCC_OscConfig+0xd4>
 8003b8c:	4b6b      	ldr	r3, [pc, #428]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a6a      	ldr	r2, [pc, #424]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003b92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b96:	6013      	str	r3, [r2, #0]
 8003b98:	4b68      	ldr	r3, [pc, #416]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a67      	ldr	r2, [pc, #412]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003b9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ba2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d013      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bac:	f7fe f83c 	bl	8001c28 <HAL_GetTick>
 8003bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bb4:	f7fe f838 	bl	8001c28 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b64      	cmp	r3, #100	; 0x64
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e200      	b.n	8003fc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bc6:	4b5d      	ldr	r3, [pc, #372]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d0f0      	beq.n	8003bb4 <HAL_RCC_OscConfig+0xe4>
 8003bd2:	e014      	b.n	8003bfe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd4:	f7fe f828 	bl	8001c28 <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bdc:	f7fe f824 	bl	8001c28 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b64      	cmp	r3, #100	; 0x64
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e1ec      	b.n	8003fc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bee:	4b53      	ldr	r3, [pc, #332]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1f0      	bne.n	8003bdc <HAL_RCC_OscConfig+0x10c>
 8003bfa:	e000      	b.n	8003bfe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d063      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c0a:	4b4c      	ldr	r3, [pc, #304]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f003 030c 	and.w	r3, r3, #12
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00b      	beq.n	8003c2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003c16:	4b49      	ldr	r3, [pc, #292]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f003 030c 	and.w	r3, r3, #12
 8003c1e:	2b08      	cmp	r3, #8
 8003c20:	d11c      	bne.n	8003c5c <HAL_RCC_OscConfig+0x18c>
 8003c22:	4b46      	ldr	r3, [pc, #280]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d116      	bne.n	8003c5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c2e:	4b43      	ldr	r3, [pc, #268]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d005      	beq.n	8003c46 <HAL_RCC_OscConfig+0x176>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d001      	beq.n	8003c46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e1c0      	b.n	8003fc8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c46:	4b3d      	ldr	r3, [pc, #244]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	4939      	ldr	r1, [pc, #228]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c5a:	e03a      	b.n	8003cd2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d020      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c64:	4b36      	ldr	r3, [pc, #216]	; (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003c66:	2201      	movs	r2, #1
 8003c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c6a:	f7fd ffdd 	bl	8001c28 <HAL_GetTick>
 8003c6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c70:	e008      	b.n	8003c84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c72:	f7fd ffd9 	bl	8001c28 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d901      	bls.n	8003c84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e1a1      	b.n	8003fc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c84:	4b2d      	ldr	r3, [pc, #180]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d0f0      	beq.n	8003c72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c90:	4b2a      	ldr	r3, [pc, #168]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	695b      	ldr	r3, [r3, #20]
 8003c9c:	00db      	lsls	r3, r3, #3
 8003c9e:	4927      	ldr	r1, [pc, #156]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	600b      	str	r3, [r1, #0]
 8003ca4:	e015      	b.n	8003cd2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ca6:	4b26      	ldr	r3, [pc, #152]	; (8003d40 <HAL_RCC_OscConfig+0x270>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cac:	f7fd ffbc 	bl	8001c28 <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cb4:	f7fd ffb8 	bl	8001c28 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e180      	b.n	8003fc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cc6:	4b1d      	ldr	r3, [pc, #116]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1f0      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0308 	and.w	r3, r3, #8
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d03a      	beq.n	8003d54 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d019      	beq.n	8003d1a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ce6:	4b17      	ldr	r3, [pc, #92]	; (8003d44 <HAL_RCC_OscConfig+0x274>)
 8003ce8:	2201      	movs	r2, #1
 8003cea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cec:	f7fd ff9c 	bl	8001c28 <HAL_GetTick>
 8003cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cf2:	e008      	b.n	8003d06 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cf4:	f7fd ff98 	bl	8001c28 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e160      	b.n	8003fc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d06:	4b0d      	ldr	r3, [pc, #52]	; (8003d3c <HAL_RCC_OscConfig+0x26c>)
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d0f0      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003d12:	2001      	movs	r0, #1
 8003d14:	f000 face 	bl	80042b4 <RCC_Delay>
 8003d18:	e01c      	b.n	8003d54 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d1a:	4b0a      	ldr	r3, [pc, #40]	; (8003d44 <HAL_RCC_OscConfig+0x274>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d20:	f7fd ff82 	bl	8001c28 <HAL_GetTick>
 8003d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d26:	e00f      	b.n	8003d48 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d28:	f7fd ff7e 	bl	8001c28 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d908      	bls.n	8003d48 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e146      	b.n	8003fc8 <HAL_RCC_OscConfig+0x4f8>
 8003d3a:	bf00      	nop
 8003d3c:	40021000 	.word	0x40021000
 8003d40:	42420000 	.word	0x42420000
 8003d44:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d48:	4b92      	ldr	r3, [pc, #584]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1e9      	bne.n	8003d28 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0304 	and.w	r3, r3, #4
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 80a6 	beq.w	8003eae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d62:	2300      	movs	r3, #0
 8003d64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d66:	4b8b      	ldr	r3, [pc, #556]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003d68:	69db      	ldr	r3, [r3, #28]
 8003d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10d      	bne.n	8003d8e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d72:	4b88      	ldr	r3, [pc, #544]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003d74:	69db      	ldr	r3, [r3, #28]
 8003d76:	4a87      	ldr	r2, [pc, #540]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d7c:	61d3      	str	r3, [r2, #28]
 8003d7e:	4b85      	ldr	r3, [pc, #532]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003d80:	69db      	ldr	r3, [r3, #28]
 8003d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d86:	60bb      	str	r3, [r7, #8]
 8003d88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d8e:	4b82      	ldr	r3, [pc, #520]	; (8003f98 <HAL_RCC_OscConfig+0x4c8>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d118      	bne.n	8003dcc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d9a:	4b7f      	ldr	r3, [pc, #508]	; (8003f98 <HAL_RCC_OscConfig+0x4c8>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a7e      	ldr	r2, [pc, #504]	; (8003f98 <HAL_RCC_OscConfig+0x4c8>)
 8003da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003da4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003da6:	f7fd ff3f 	bl	8001c28 <HAL_GetTick>
 8003daa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dac:	e008      	b.n	8003dc0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dae:	f7fd ff3b 	bl	8001c28 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	2b64      	cmp	r3, #100	; 0x64
 8003dba:	d901      	bls.n	8003dc0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e103      	b.n	8003fc8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc0:	4b75      	ldr	r3, [pc, #468]	; (8003f98 <HAL_RCC_OscConfig+0x4c8>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d0f0      	beq.n	8003dae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d106      	bne.n	8003de2 <HAL_RCC_OscConfig+0x312>
 8003dd4:	4b6f      	ldr	r3, [pc, #444]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003dd6:	6a1b      	ldr	r3, [r3, #32]
 8003dd8:	4a6e      	ldr	r2, [pc, #440]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003dda:	f043 0301 	orr.w	r3, r3, #1
 8003dde:	6213      	str	r3, [r2, #32]
 8003de0:	e02d      	b.n	8003e3e <HAL_RCC_OscConfig+0x36e>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10c      	bne.n	8003e04 <HAL_RCC_OscConfig+0x334>
 8003dea:	4b6a      	ldr	r3, [pc, #424]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	4a69      	ldr	r2, [pc, #420]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003df0:	f023 0301 	bic.w	r3, r3, #1
 8003df4:	6213      	str	r3, [r2, #32]
 8003df6:	4b67      	ldr	r3, [pc, #412]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	4a66      	ldr	r2, [pc, #408]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003dfc:	f023 0304 	bic.w	r3, r3, #4
 8003e00:	6213      	str	r3, [r2, #32]
 8003e02:	e01c      	b.n	8003e3e <HAL_RCC_OscConfig+0x36e>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	2b05      	cmp	r3, #5
 8003e0a:	d10c      	bne.n	8003e26 <HAL_RCC_OscConfig+0x356>
 8003e0c:	4b61      	ldr	r3, [pc, #388]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	4a60      	ldr	r2, [pc, #384]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003e12:	f043 0304 	orr.w	r3, r3, #4
 8003e16:	6213      	str	r3, [r2, #32]
 8003e18:	4b5e      	ldr	r3, [pc, #376]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
 8003e1c:	4a5d      	ldr	r2, [pc, #372]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003e1e:	f043 0301 	orr.w	r3, r3, #1
 8003e22:	6213      	str	r3, [r2, #32]
 8003e24:	e00b      	b.n	8003e3e <HAL_RCC_OscConfig+0x36e>
 8003e26:	4b5b      	ldr	r3, [pc, #364]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	4a5a      	ldr	r2, [pc, #360]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003e2c:	f023 0301 	bic.w	r3, r3, #1
 8003e30:	6213      	str	r3, [r2, #32]
 8003e32:	4b58      	ldr	r3, [pc, #352]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	4a57      	ldr	r2, [pc, #348]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003e38:	f023 0304 	bic.w	r3, r3, #4
 8003e3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d015      	beq.n	8003e72 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e46:	f7fd feef 	bl	8001c28 <HAL_GetTick>
 8003e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e4c:	e00a      	b.n	8003e64 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e4e:	f7fd feeb 	bl	8001c28 <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e0b1      	b.n	8003fc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e64:	4b4b      	ldr	r3, [pc, #300]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003e66:	6a1b      	ldr	r3, [r3, #32]
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d0ee      	beq.n	8003e4e <HAL_RCC_OscConfig+0x37e>
 8003e70:	e014      	b.n	8003e9c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e72:	f7fd fed9 	bl	8001c28 <HAL_GetTick>
 8003e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e78:	e00a      	b.n	8003e90 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e7a:	f7fd fed5 	bl	8001c28 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d901      	bls.n	8003e90 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e09b      	b.n	8003fc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e90:	4b40      	ldr	r3, [pc, #256]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003e92:	6a1b      	ldr	r3, [r3, #32]
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1ee      	bne.n	8003e7a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e9c:	7dfb      	ldrb	r3, [r7, #23]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d105      	bne.n	8003eae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ea2:	4b3c      	ldr	r3, [pc, #240]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003ea4:	69db      	ldr	r3, [r3, #28]
 8003ea6:	4a3b      	ldr	r2, [pc, #236]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003ea8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	69db      	ldr	r3, [r3, #28]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f000 8087 	beq.w	8003fc6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003eb8:	4b36      	ldr	r3, [pc, #216]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f003 030c 	and.w	r3, r3, #12
 8003ec0:	2b08      	cmp	r3, #8
 8003ec2:	d061      	beq.n	8003f88 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	69db      	ldr	r3, [r3, #28]
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d146      	bne.n	8003f5a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ecc:	4b33      	ldr	r3, [pc, #204]	; (8003f9c <HAL_RCC_OscConfig+0x4cc>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed2:	f7fd fea9 	bl	8001c28 <HAL_GetTick>
 8003ed6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ed8:	e008      	b.n	8003eec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eda:	f7fd fea5 	bl	8001c28 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e06d      	b.n	8003fc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003eec:	4b29      	ldr	r3, [pc, #164]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1f0      	bne.n	8003eda <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f00:	d108      	bne.n	8003f14 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003f02:	4b24      	ldr	r3, [pc, #144]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	4921      	ldr	r1, [pc, #132]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f14:	4b1f      	ldr	r3, [pc, #124]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a19      	ldr	r1, [r3, #32]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f24:	430b      	orrs	r3, r1
 8003f26:	491b      	ldr	r1, [pc, #108]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f2c:	4b1b      	ldr	r3, [pc, #108]	; (8003f9c <HAL_RCC_OscConfig+0x4cc>)
 8003f2e:	2201      	movs	r2, #1
 8003f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f32:	f7fd fe79 	bl	8001c28 <HAL_GetTick>
 8003f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f38:	e008      	b.n	8003f4c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f3a:	f7fd fe75 	bl	8001c28 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d901      	bls.n	8003f4c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e03d      	b.n	8003fc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f4c:	4b11      	ldr	r3, [pc, #68]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d0f0      	beq.n	8003f3a <HAL_RCC_OscConfig+0x46a>
 8003f58:	e035      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f5a:	4b10      	ldr	r3, [pc, #64]	; (8003f9c <HAL_RCC_OscConfig+0x4cc>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f60:	f7fd fe62 	bl	8001c28 <HAL_GetTick>
 8003f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f66:	e008      	b.n	8003f7a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f68:	f7fd fe5e 	bl	8001c28 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e026      	b.n	8003fc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f7a:	4b06      	ldr	r3, [pc, #24]	; (8003f94 <HAL_RCC_OscConfig+0x4c4>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1f0      	bne.n	8003f68 <HAL_RCC_OscConfig+0x498>
 8003f86:	e01e      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	69db      	ldr	r3, [r3, #28]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d107      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e019      	b.n	8003fc8 <HAL_RCC_OscConfig+0x4f8>
 8003f94:	40021000 	.word	0x40021000
 8003f98:	40007000 	.word	0x40007000
 8003f9c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003fa0:	4b0b      	ldr	r3, [pc, #44]	; (8003fd0 <HAL_RCC_OscConfig+0x500>)
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a1b      	ldr	r3, [r3, #32]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d106      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d001      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e000      	b.n	8003fc8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3718      	adds	r7, #24
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	40021000 	.word	0x40021000

08003fd4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d101      	bne.n	8003fe8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e0d0      	b.n	800418a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fe8:	4b6a      	ldr	r3, [pc, #424]	; (8004194 <HAL_RCC_ClockConfig+0x1c0>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0307 	and.w	r3, r3, #7
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d910      	bls.n	8004018 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ff6:	4b67      	ldr	r3, [pc, #412]	; (8004194 <HAL_RCC_ClockConfig+0x1c0>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f023 0207 	bic.w	r2, r3, #7
 8003ffe:	4965      	ldr	r1, [pc, #404]	; (8004194 <HAL_RCC_ClockConfig+0x1c0>)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	4313      	orrs	r3, r2
 8004004:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004006:	4b63      	ldr	r3, [pc, #396]	; (8004194 <HAL_RCC_ClockConfig+0x1c0>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0307 	and.w	r3, r3, #7
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	429a      	cmp	r2, r3
 8004012:	d001      	beq.n	8004018 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e0b8      	b.n	800418a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0302 	and.w	r3, r3, #2
 8004020:	2b00      	cmp	r3, #0
 8004022:	d020      	beq.n	8004066 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0304 	and.w	r3, r3, #4
 800402c:	2b00      	cmp	r3, #0
 800402e:	d005      	beq.n	800403c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004030:	4b59      	ldr	r3, [pc, #356]	; (8004198 <HAL_RCC_ClockConfig+0x1c4>)
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	4a58      	ldr	r2, [pc, #352]	; (8004198 <HAL_RCC_ClockConfig+0x1c4>)
 8004036:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800403a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0308 	and.w	r3, r3, #8
 8004044:	2b00      	cmp	r3, #0
 8004046:	d005      	beq.n	8004054 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004048:	4b53      	ldr	r3, [pc, #332]	; (8004198 <HAL_RCC_ClockConfig+0x1c4>)
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	4a52      	ldr	r2, [pc, #328]	; (8004198 <HAL_RCC_ClockConfig+0x1c4>)
 800404e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004052:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004054:	4b50      	ldr	r3, [pc, #320]	; (8004198 <HAL_RCC_ClockConfig+0x1c4>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	494d      	ldr	r1, [pc, #308]	; (8004198 <HAL_RCC_ClockConfig+0x1c4>)
 8004062:	4313      	orrs	r3, r2
 8004064:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b00      	cmp	r3, #0
 8004070:	d040      	beq.n	80040f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d107      	bne.n	800408a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800407a:	4b47      	ldr	r3, [pc, #284]	; (8004198 <HAL_RCC_ClockConfig+0x1c4>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d115      	bne.n	80040b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e07f      	b.n	800418a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	2b02      	cmp	r3, #2
 8004090:	d107      	bne.n	80040a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004092:	4b41      	ldr	r3, [pc, #260]	; (8004198 <HAL_RCC_ClockConfig+0x1c4>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d109      	bne.n	80040b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e073      	b.n	800418a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040a2:	4b3d      	ldr	r3, [pc, #244]	; (8004198 <HAL_RCC_ClockConfig+0x1c4>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e06b      	b.n	800418a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040b2:	4b39      	ldr	r3, [pc, #228]	; (8004198 <HAL_RCC_ClockConfig+0x1c4>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f023 0203 	bic.w	r2, r3, #3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	4936      	ldr	r1, [pc, #216]	; (8004198 <HAL_RCC_ClockConfig+0x1c4>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040c4:	f7fd fdb0 	bl	8001c28 <HAL_GetTick>
 80040c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ca:	e00a      	b.n	80040e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040cc:	f7fd fdac 	bl	8001c28 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040da:	4293      	cmp	r3, r2
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e053      	b.n	800418a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040e2:	4b2d      	ldr	r3, [pc, #180]	; (8004198 <HAL_RCC_ClockConfig+0x1c4>)
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f003 020c 	and.w	r2, r3, #12
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d1eb      	bne.n	80040cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040f4:	4b27      	ldr	r3, [pc, #156]	; (8004194 <HAL_RCC_ClockConfig+0x1c0>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0307 	and.w	r3, r3, #7
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d210      	bcs.n	8004124 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004102:	4b24      	ldr	r3, [pc, #144]	; (8004194 <HAL_RCC_ClockConfig+0x1c0>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f023 0207 	bic.w	r2, r3, #7
 800410a:	4922      	ldr	r1, [pc, #136]	; (8004194 <HAL_RCC_ClockConfig+0x1c0>)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	4313      	orrs	r3, r2
 8004110:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004112:	4b20      	ldr	r3, [pc, #128]	; (8004194 <HAL_RCC_ClockConfig+0x1c0>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0307 	and.w	r3, r3, #7
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	429a      	cmp	r2, r3
 800411e:	d001      	beq.n	8004124 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e032      	b.n	800418a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0304 	and.w	r3, r3, #4
 800412c:	2b00      	cmp	r3, #0
 800412e:	d008      	beq.n	8004142 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004130:	4b19      	ldr	r3, [pc, #100]	; (8004198 <HAL_RCC_ClockConfig+0x1c4>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	4916      	ldr	r1, [pc, #88]	; (8004198 <HAL_RCC_ClockConfig+0x1c4>)
 800413e:	4313      	orrs	r3, r2
 8004140:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0308 	and.w	r3, r3, #8
 800414a:	2b00      	cmp	r3, #0
 800414c:	d009      	beq.n	8004162 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800414e:	4b12      	ldr	r3, [pc, #72]	; (8004198 <HAL_RCC_ClockConfig+0x1c4>)
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	00db      	lsls	r3, r3, #3
 800415c:	490e      	ldr	r1, [pc, #56]	; (8004198 <HAL_RCC_ClockConfig+0x1c4>)
 800415e:	4313      	orrs	r3, r2
 8004160:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004162:	f000 f821 	bl	80041a8 <HAL_RCC_GetSysClockFreq>
 8004166:	4602      	mov	r2, r0
 8004168:	4b0b      	ldr	r3, [pc, #44]	; (8004198 <HAL_RCC_ClockConfig+0x1c4>)
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	091b      	lsrs	r3, r3, #4
 800416e:	f003 030f 	and.w	r3, r3, #15
 8004172:	490a      	ldr	r1, [pc, #40]	; (800419c <HAL_RCC_ClockConfig+0x1c8>)
 8004174:	5ccb      	ldrb	r3, [r1, r3]
 8004176:	fa22 f303 	lsr.w	r3, r2, r3
 800417a:	4a09      	ldr	r2, [pc, #36]	; (80041a0 <HAL_RCC_ClockConfig+0x1cc>)
 800417c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800417e:	4b09      	ldr	r3, [pc, #36]	; (80041a4 <HAL_RCC_ClockConfig+0x1d0>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4618      	mov	r0, r3
 8004184:	f7fd fd0e 	bl	8001ba4 <HAL_InitTick>

  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3710      	adds	r7, #16
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	40022000 	.word	0x40022000
 8004198:	40021000 	.word	0x40021000
 800419c:	080062f0 	.word	0x080062f0
 80041a0:	20000000 	.word	0x20000000
 80041a4:	20000004 	.word	0x20000004

080041a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b087      	sub	sp, #28
 80041ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80041ae:	2300      	movs	r3, #0
 80041b0:	60fb      	str	r3, [r7, #12]
 80041b2:	2300      	movs	r3, #0
 80041b4:	60bb      	str	r3, [r7, #8]
 80041b6:	2300      	movs	r3, #0
 80041b8:	617b      	str	r3, [r7, #20]
 80041ba:	2300      	movs	r3, #0
 80041bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80041be:	2300      	movs	r3, #0
 80041c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80041c2:	4b1e      	ldr	r3, [pc, #120]	; (800423c <HAL_RCC_GetSysClockFreq+0x94>)
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f003 030c 	and.w	r3, r3, #12
 80041ce:	2b04      	cmp	r3, #4
 80041d0:	d002      	beq.n	80041d8 <HAL_RCC_GetSysClockFreq+0x30>
 80041d2:	2b08      	cmp	r3, #8
 80041d4:	d003      	beq.n	80041de <HAL_RCC_GetSysClockFreq+0x36>
 80041d6:	e027      	b.n	8004228 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80041d8:	4b19      	ldr	r3, [pc, #100]	; (8004240 <HAL_RCC_GetSysClockFreq+0x98>)
 80041da:	613b      	str	r3, [r7, #16]
      break;
 80041dc:	e027      	b.n	800422e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	0c9b      	lsrs	r3, r3, #18
 80041e2:	f003 030f 	and.w	r3, r3, #15
 80041e6:	4a17      	ldr	r2, [pc, #92]	; (8004244 <HAL_RCC_GetSysClockFreq+0x9c>)
 80041e8:	5cd3      	ldrb	r3, [r2, r3]
 80041ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d010      	beq.n	8004218 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80041f6:	4b11      	ldr	r3, [pc, #68]	; (800423c <HAL_RCC_GetSysClockFreq+0x94>)
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	0c5b      	lsrs	r3, r3, #17
 80041fc:	f003 0301 	and.w	r3, r3, #1
 8004200:	4a11      	ldr	r2, [pc, #68]	; (8004248 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004202:	5cd3      	ldrb	r3, [r2, r3]
 8004204:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a0d      	ldr	r2, [pc, #52]	; (8004240 <HAL_RCC_GetSysClockFreq+0x98>)
 800420a:	fb03 f202 	mul.w	r2, r3, r2
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	fbb2 f3f3 	udiv	r3, r2, r3
 8004214:	617b      	str	r3, [r7, #20]
 8004216:	e004      	b.n	8004222 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a0c      	ldr	r2, [pc, #48]	; (800424c <HAL_RCC_GetSysClockFreq+0xa4>)
 800421c:	fb02 f303 	mul.w	r3, r2, r3
 8004220:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	613b      	str	r3, [r7, #16]
      break;
 8004226:	e002      	b.n	800422e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004228:	4b05      	ldr	r3, [pc, #20]	; (8004240 <HAL_RCC_GetSysClockFreq+0x98>)
 800422a:	613b      	str	r3, [r7, #16]
      break;
 800422c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800422e:	693b      	ldr	r3, [r7, #16]
}
 8004230:	4618      	mov	r0, r3
 8004232:	371c      	adds	r7, #28
 8004234:	46bd      	mov	sp, r7
 8004236:	bc80      	pop	{r7}
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	40021000 	.word	0x40021000
 8004240:	007a1200 	.word	0x007a1200
 8004244:	08006308 	.word	0x08006308
 8004248:	08006318 	.word	0x08006318
 800424c:	003d0900 	.word	0x003d0900

08004250 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004250:	b480      	push	{r7}
 8004252:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004254:	4b02      	ldr	r3, [pc, #8]	; (8004260 <HAL_RCC_GetHCLKFreq+0x10>)
 8004256:	681b      	ldr	r3, [r3, #0]
}
 8004258:	4618      	mov	r0, r3
 800425a:	46bd      	mov	sp, r7
 800425c:	bc80      	pop	{r7}
 800425e:	4770      	bx	lr
 8004260:	20000000 	.word	0x20000000

08004264 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004268:	f7ff fff2 	bl	8004250 <HAL_RCC_GetHCLKFreq>
 800426c:	4602      	mov	r2, r0
 800426e:	4b05      	ldr	r3, [pc, #20]	; (8004284 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	0a1b      	lsrs	r3, r3, #8
 8004274:	f003 0307 	and.w	r3, r3, #7
 8004278:	4903      	ldr	r1, [pc, #12]	; (8004288 <HAL_RCC_GetPCLK1Freq+0x24>)
 800427a:	5ccb      	ldrb	r3, [r1, r3]
 800427c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004280:	4618      	mov	r0, r3
 8004282:	bd80      	pop	{r7, pc}
 8004284:	40021000 	.word	0x40021000
 8004288:	08006300 	.word	0x08006300

0800428c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004290:	f7ff ffde 	bl	8004250 <HAL_RCC_GetHCLKFreq>
 8004294:	4602      	mov	r2, r0
 8004296:	4b05      	ldr	r3, [pc, #20]	; (80042ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	0adb      	lsrs	r3, r3, #11
 800429c:	f003 0307 	and.w	r3, r3, #7
 80042a0:	4903      	ldr	r1, [pc, #12]	; (80042b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042a2:	5ccb      	ldrb	r3, [r1, r3]
 80042a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	40021000 	.word	0x40021000
 80042b0:	08006300 	.word	0x08006300

080042b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80042bc:	4b0a      	ldr	r3, [pc, #40]	; (80042e8 <RCC_Delay+0x34>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a0a      	ldr	r2, [pc, #40]	; (80042ec <RCC_Delay+0x38>)
 80042c2:	fba2 2303 	umull	r2, r3, r2, r3
 80042c6:	0a5b      	lsrs	r3, r3, #9
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	fb02 f303 	mul.w	r3, r2, r3
 80042ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80042d0:	bf00      	nop
  }
  while (Delay --);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	1e5a      	subs	r2, r3, #1
 80042d6:	60fa      	str	r2, [r7, #12]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d1f9      	bne.n	80042d0 <RCC_Delay+0x1c>
}
 80042dc:	bf00      	nop
 80042de:	bf00      	nop
 80042e0:	3714      	adds	r7, #20
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bc80      	pop	{r7}
 80042e6:	4770      	bx	lr
 80042e8:	20000000 	.word	0x20000000
 80042ec:	10624dd3 	.word	0x10624dd3

080042f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80042f8:	2300      	movs	r3, #0
 80042fa:	613b      	str	r3, [r7, #16]
 80042fc:	2300      	movs	r3, #0
 80042fe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0301 	and.w	r3, r3, #1
 8004308:	2b00      	cmp	r3, #0
 800430a:	d07d      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800430c:	2300      	movs	r3, #0
 800430e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004310:	4b4f      	ldr	r3, [pc, #316]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004312:	69db      	ldr	r3, [r3, #28]
 8004314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d10d      	bne.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800431c:	4b4c      	ldr	r3, [pc, #304]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800431e:	69db      	ldr	r3, [r3, #28]
 8004320:	4a4b      	ldr	r2, [pc, #300]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004322:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004326:	61d3      	str	r3, [r2, #28]
 8004328:	4b49      	ldr	r3, [pc, #292]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800432a:	69db      	ldr	r3, [r3, #28]
 800432c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004330:	60bb      	str	r3, [r7, #8]
 8004332:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004334:	2301      	movs	r3, #1
 8004336:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004338:	4b46      	ldr	r3, [pc, #280]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004340:	2b00      	cmp	r3, #0
 8004342:	d118      	bne.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004344:	4b43      	ldr	r3, [pc, #268]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a42      	ldr	r2, [pc, #264]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800434a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800434e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004350:	f7fd fc6a 	bl	8001c28 <HAL_GetTick>
 8004354:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004356:	e008      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004358:	f7fd fc66 	bl	8001c28 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b64      	cmp	r3, #100	; 0x64
 8004364:	d901      	bls.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e06d      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800436a:	4b3a      	ldr	r3, [pc, #232]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004372:	2b00      	cmp	r3, #0
 8004374:	d0f0      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004376:	4b36      	ldr	r3, [pc, #216]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800437e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d02e      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	429a      	cmp	r2, r3
 8004392:	d027      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004394:	4b2e      	ldr	r3, [pc, #184]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004396:	6a1b      	ldr	r3, [r3, #32]
 8004398:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800439c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800439e:	4b2e      	ldr	r3, [pc, #184]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80043a0:	2201      	movs	r2, #1
 80043a2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043a4:	4b2c      	ldr	r3, [pc, #176]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80043aa:	4a29      	ldr	r2, [pc, #164]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d014      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ba:	f7fd fc35 	bl	8001c28 <HAL_GetTick>
 80043be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043c0:	e00a      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043c2:	f7fd fc31 	bl	8001c28 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d901      	bls.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e036      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d8:	4b1d      	ldr	r3, [pc, #116]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043da:	6a1b      	ldr	r3, [r3, #32]
 80043dc:	f003 0302 	and.w	r3, r3, #2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d0ee      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043e4:	4b1a      	ldr	r3, [pc, #104]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043e6:	6a1b      	ldr	r3, [r3, #32]
 80043e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	4917      	ldr	r1, [pc, #92]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80043f6:	7dfb      	ldrb	r3, [r7, #23]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d105      	bne.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043fc:	4b14      	ldr	r3, [pc, #80]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043fe:	69db      	ldr	r3, [r3, #28]
 8004400:	4a13      	ldr	r2, [pc, #76]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004402:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004406:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0302 	and.w	r3, r3, #2
 8004410:	2b00      	cmp	r3, #0
 8004412:	d008      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004414:	4b0e      	ldr	r3, [pc, #56]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	490b      	ldr	r1, [pc, #44]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004422:	4313      	orrs	r3, r2
 8004424:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0310 	and.w	r3, r3, #16
 800442e:	2b00      	cmp	r3, #0
 8004430:	d008      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004432:	4b07      	ldr	r3, [pc, #28]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	4904      	ldr	r1, [pc, #16]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004440:	4313      	orrs	r3, r2
 8004442:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3718      	adds	r7, #24
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	40021000 	.word	0x40021000
 8004454:	40007000 	.word	0x40007000
 8004458:	42420440 	.word	0x42420440

0800445c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b088      	sub	sp, #32
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004464:	2300      	movs	r3, #0
 8004466:	617b      	str	r3, [r7, #20]
 8004468:	2300      	movs	r3, #0
 800446a:	61fb      	str	r3, [r7, #28]
 800446c:	2300      	movs	r3, #0
 800446e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004470:	2300      	movs	r3, #0
 8004472:	60fb      	str	r3, [r7, #12]
 8004474:	2300      	movs	r3, #0
 8004476:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b10      	cmp	r3, #16
 800447c:	d00a      	beq.n	8004494 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2b10      	cmp	r3, #16
 8004482:	f200 808a 	bhi.w	800459a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d045      	beq.n	8004518 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2b02      	cmp	r3, #2
 8004490:	d075      	beq.n	800457e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004492:	e082      	b.n	800459a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004494:	4b46      	ldr	r3, [pc, #280]	; (80045b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800449a:	4b45      	ldr	r3, [pc, #276]	; (80045b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d07b      	beq.n	800459e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	0c9b      	lsrs	r3, r3, #18
 80044aa:	f003 030f 	and.w	r3, r3, #15
 80044ae:	4a41      	ldr	r2, [pc, #260]	; (80045b4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80044b0:	5cd3      	ldrb	r3, [r2, r3]
 80044b2:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d015      	beq.n	80044ea <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80044be:	4b3c      	ldr	r3, [pc, #240]	; (80045b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	0c5b      	lsrs	r3, r3, #17
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	4a3b      	ldr	r2, [pc, #236]	; (80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80044ca:	5cd3      	ldrb	r3, [r2, r3]
 80044cc:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00d      	beq.n	80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80044d8:	4a38      	ldr	r2, [pc, #224]	; (80045bc <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	fb02 f303 	mul.w	r3, r2, r3
 80044e6:	61fb      	str	r3, [r7, #28]
 80044e8:	e004      	b.n	80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	4a34      	ldr	r2, [pc, #208]	; (80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80044ee:	fb02 f303 	mul.w	r3, r2, r3
 80044f2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80044f4:	4b2e      	ldr	r3, [pc, #184]	; (80045b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004500:	d102      	bne.n	8004508 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	61bb      	str	r3, [r7, #24]
      break;
 8004506:	e04a      	b.n	800459e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	005b      	lsls	r3, r3, #1
 800450c:	4a2d      	ldr	r2, [pc, #180]	; (80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800450e:	fba2 2303 	umull	r2, r3, r2, r3
 8004512:	085b      	lsrs	r3, r3, #1
 8004514:	61bb      	str	r3, [r7, #24]
      break;
 8004516:	e042      	b.n	800459e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004518:	4b25      	ldr	r3, [pc, #148]	; (80045b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004524:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004528:	d108      	bne.n	800453c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d003      	beq.n	800453c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004534:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004538:	61bb      	str	r3, [r7, #24]
 800453a:	e01f      	b.n	800457c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004542:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004546:	d109      	bne.n	800455c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004548:	4b19      	ldr	r3, [pc, #100]	; (80045b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800454a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454c:	f003 0302 	and.w	r3, r3, #2
 8004550:	2b00      	cmp	r3, #0
 8004552:	d003      	beq.n	800455c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004554:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004558:	61bb      	str	r3, [r7, #24]
 800455a:	e00f      	b.n	800457c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004562:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004566:	d11c      	bne.n	80045a2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004568:	4b11      	ldr	r3, [pc, #68]	; (80045b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d016      	beq.n	80045a2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004574:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004578:	61bb      	str	r3, [r7, #24]
      break;
 800457a:	e012      	b.n	80045a2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800457c:	e011      	b.n	80045a2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800457e:	f7ff fe85 	bl	800428c <HAL_RCC_GetPCLK2Freq>
 8004582:	4602      	mov	r2, r0
 8004584:	4b0a      	ldr	r3, [pc, #40]	; (80045b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	0b9b      	lsrs	r3, r3, #14
 800458a:	f003 0303 	and.w	r3, r3, #3
 800458e:	3301      	adds	r3, #1
 8004590:	005b      	lsls	r3, r3, #1
 8004592:	fbb2 f3f3 	udiv	r3, r2, r3
 8004596:	61bb      	str	r3, [r7, #24]
      break;
 8004598:	e004      	b.n	80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800459a:	bf00      	nop
 800459c:	e002      	b.n	80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800459e:	bf00      	nop
 80045a0:	e000      	b.n	80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80045a2:	bf00      	nop
    }
  }
  return (frequency);
 80045a4:	69bb      	ldr	r3, [r7, #24]
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3720      	adds	r7, #32
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	40021000 	.word	0x40021000
 80045b4:	0800631c 	.word	0x0800631c
 80045b8:	0800632c 	.word	0x0800632c
 80045bc:	007a1200 	.word	0x007a1200
 80045c0:	003d0900 	.word	0x003d0900
 80045c4:	aaaaaaab 	.word	0xaaaaaaab

080045c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d101      	bne.n	80045da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e041      	b.n	800465e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d106      	bne.n	80045f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f7fd f970 	bl	80018d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2202      	movs	r2, #2
 80045f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	3304      	adds	r3, #4
 8004604:	4619      	mov	r1, r3
 8004606:	4610      	mov	r0, r2
 8004608:	f000 fab0 	bl	8004b6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b082      	sub	sp, #8
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d101      	bne.n	8004678 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e041      	b.n	80046fc <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b00      	cmp	r3, #0
 8004682:	d106      	bne.n	8004692 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 f839 	bl	8004704 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2202      	movs	r2, #2
 8004696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	3304      	adds	r3, #4
 80046a2:	4619      	mov	r1, r3
 80046a4:	4610      	mov	r0, r2
 80046a6:	f000 fa61 	bl	8004b6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3708      	adds	r7, #8
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800470c:	bf00      	nop
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	bc80      	pop	{r7}
 8004714:	4770      	bx	lr
	...

08004718 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d109      	bne.n	800473c <HAL_TIM_OC_Start+0x24>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800472e:	b2db      	uxtb	r3, r3
 8004730:	2b01      	cmp	r3, #1
 8004732:	bf14      	ite	ne
 8004734:	2301      	movne	r3, #1
 8004736:	2300      	moveq	r3, #0
 8004738:	b2db      	uxtb	r3, r3
 800473a:	e022      	b.n	8004782 <HAL_TIM_OC_Start+0x6a>
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	2b04      	cmp	r3, #4
 8004740:	d109      	bne.n	8004756 <HAL_TIM_OC_Start+0x3e>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b01      	cmp	r3, #1
 800474c:	bf14      	ite	ne
 800474e:	2301      	movne	r3, #1
 8004750:	2300      	moveq	r3, #0
 8004752:	b2db      	uxtb	r3, r3
 8004754:	e015      	b.n	8004782 <HAL_TIM_OC_Start+0x6a>
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	2b08      	cmp	r3, #8
 800475a:	d109      	bne.n	8004770 <HAL_TIM_OC_Start+0x58>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004762:	b2db      	uxtb	r3, r3
 8004764:	2b01      	cmp	r3, #1
 8004766:	bf14      	ite	ne
 8004768:	2301      	movne	r3, #1
 800476a:	2300      	moveq	r3, #0
 800476c:	b2db      	uxtb	r3, r3
 800476e:	e008      	b.n	8004782 <HAL_TIM_OC_Start+0x6a>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004776:	b2db      	uxtb	r3, r3
 8004778:	2b01      	cmp	r3, #1
 800477a:	bf14      	ite	ne
 800477c:	2301      	movne	r3, #1
 800477e:	2300      	moveq	r3, #0
 8004780:	b2db      	uxtb	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e05e      	b.n	8004848 <HAL_TIM_OC_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d104      	bne.n	800479a <HAL_TIM_OC_Start+0x82>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2202      	movs	r2, #2
 8004794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004798:	e013      	b.n	80047c2 <HAL_TIM_OC_Start+0xaa>
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	2b04      	cmp	r3, #4
 800479e:	d104      	bne.n	80047aa <HAL_TIM_OC_Start+0x92>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2202      	movs	r2, #2
 80047a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047a8:	e00b      	b.n	80047c2 <HAL_TIM_OC_Start+0xaa>
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	2b08      	cmp	r3, #8
 80047ae:	d104      	bne.n	80047ba <HAL_TIM_OC_Start+0xa2>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2202      	movs	r2, #2
 80047b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047b8:	e003      	b.n	80047c2 <HAL_TIM_OC_Start+0xaa>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2202      	movs	r2, #2
 80047be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2201      	movs	r2, #1
 80047c8:	6839      	ldr	r1, [r7, #0]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 fc4e 	bl	800506c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a1e      	ldr	r2, [pc, #120]	; (8004850 <HAL_TIM_OC_Start+0x138>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d107      	bne.n	80047ea <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a18      	ldr	r2, [pc, #96]	; (8004850 <HAL_TIM_OC_Start+0x138>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d00e      	beq.n	8004812 <HAL_TIM_OC_Start+0xfa>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047fc:	d009      	beq.n	8004812 <HAL_TIM_OC_Start+0xfa>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a14      	ldr	r2, [pc, #80]	; (8004854 <HAL_TIM_OC_Start+0x13c>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d004      	beq.n	8004812 <HAL_TIM_OC_Start+0xfa>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a12      	ldr	r2, [pc, #72]	; (8004858 <HAL_TIM_OC_Start+0x140>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d111      	bne.n	8004836 <HAL_TIM_OC_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f003 0307 	and.w	r3, r3, #7
 800481c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2b06      	cmp	r3, #6
 8004822:	d010      	beq.n	8004846 <HAL_TIM_OC_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f042 0201 	orr.w	r2, r2, #1
 8004832:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004834:	e007      	b.n	8004846 <HAL_TIM_OC_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f042 0201 	orr.w	r2, r2, #1
 8004844:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3710      	adds	r7, #16
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	40012c00 	.word	0x40012c00
 8004854:	40000400 	.word	0x40000400
 8004858:	40000800 	.word	0x40000800

0800485c <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2200      	movs	r2, #0
 800486c:	6839      	ldr	r1, [r7, #0]
 800486e:	4618      	mov	r0, r3
 8004870:	f000 fbfc 	bl	800506c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a29      	ldr	r2, [pc, #164]	; (8004920 <HAL_TIM_OC_Stop+0xc4>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d117      	bne.n	80048ae <HAL_TIM_OC_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	6a1a      	ldr	r2, [r3, #32]
 8004884:	f241 1311 	movw	r3, #4369	; 0x1111
 8004888:	4013      	ands	r3, r2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d10f      	bne.n	80048ae <HAL_TIM_OC_Stop+0x52>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	6a1a      	ldr	r2, [r3, #32]
 8004894:	f240 4344 	movw	r3, #1092	; 0x444
 8004898:	4013      	ands	r3, r2
 800489a:	2b00      	cmp	r3, #0
 800489c:	d107      	bne.n	80048ae <HAL_TIM_OC_Stop+0x52>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	6a1a      	ldr	r2, [r3, #32]
 80048b4:	f241 1311 	movw	r3, #4369	; 0x1111
 80048b8:	4013      	ands	r3, r2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d10f      	bne.n	80048de <HAL_TIM_OC_Stop+0x82>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	6a1a      	ldr	r2, [r3, #32]
 80048c4:	f240 4344 	movw	r3, #1092	; 0x444
 80048c8:	4013      	ands	r3, r2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d107      	bne.n	80048de <HAL_TIM_OC_Stop+0x82>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f022 0201 	bic.w	r2, r2, #1
 80048dc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d104      	bne.n	80048ee <HAL_TIM_OC_Stop+0x92>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048ec:	e013      	b.n	8004916 <HAL_TIM_OC_Stop+0xba>
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	2b04      	cmp	r3, #4
 80048f2:	d104      	bne.n	80048fe <HAL_TIM_OC_Stop+0xa2>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048fc:	e00b      	b.n	8004916 <HAL_TIM_OC_Stop+0xba>
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	2b08      	cmp	r3, #8
 8004902:	d104      	bne.n	800490e <HAL_TIM_OC_Stop+0xb2>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800490c:	e003      	b.n	8004916 <HAL_TIM_OC_Stop+0xba>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2201      	movs	r2, #1
 8004912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3708      	adds	r7, #8
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	40012c00 	.word	0x40012c00

08004924 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b086      	sub	sp, #24
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004930:	2300      	movs	r3, #0
 8004932:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800493a:	2b01      	cmp	r3, #1
 800493c:	d101      	bne.n	8004942 <HAL_TIM_OC_ConfigChannel+0x1e>
 800493e:	2302      	movs	r3, #2
 8004940:	e048      	b.n	80049d4 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b0c      	cmp	r3, #12
 800494e:	d839      	bhi.n	80049c4 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004950:	a201      	add	r2, pc, #4	; (adr r2, 8004958 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004956:	bf00      	nop
 8004958:	0800498d 	.word	0x0800498d
 800495c:	080049c5 	.word	0x080049c5
 8004960:	080049c5 	.word	0x080049c5
 8004964:	080049c5 	.word	0x080049c5
 8004968:	0800499b 	.word	0x0800499b
 800496c:	080049c5 	.word	0x080049c5
 8004970:	080049c5 	.word	0x080049c5
 8004974:	080049c5 	.word	0x080049c5
 8004978:	080049a9 	.word	0x080049a9
 800497c:	080049c5 	.word	0x080049c5
 8004980:	080049c5 	.word	0x080049c5
 8004984:	080049c5 	.word	0x080049c5
 8004988:	080049b7 	.word	0x080049b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68b9      	ldr	r1, [r7, #8]
 8004992:	4618      	mov	r0, r3
 8004994:	f000 f94c 	bl	8004c30 <TIM_OC1_SetConfig>
      break;
 8004998:	e017      	b.n	80049ca <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68b9      	ldr	r1, [r7, #8]
 80049a0:	4618      	mov	r0, r3
 80049a2:	f000 f9ab 	bl	8004cfc <TIM_OC2_SetConfig>
      break;
 80049a6:	e010      	b.n	80049ca <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68b9      	ldr	r1, [r7, #8]
 80049ae:	4618      	mov	r0, r3
 80049b0:	f000 fa0e 	bl	8004dd0 <TIM_OC3_SetConfig>
      break;
 80049b4:	e009      	b.n	80049ca <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68b9      	ldr	r1, [r7, #8]
 80049bc:	4618      	mov	r0, r3
 80049be:	f000 fa71 	bl	8004ea4 <TIM_OC4_SetConfig>
      break;
 80049c2:	e002      	b.n	80049ca <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	75fb      	strb	r3, [r7, #23]
      break;
 80049c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3718      	adds	r7, #24
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049e6:	2300      	movs	r3, #0
 80049e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d101      	bne.n	80049f8 <HAL_TIM_ConfigClockSource+0x1c>
 80049f4:	2302      	movs	r3, #2
 80049f6:	e0b4      	b.n	8004b62 <HAL_TIM_ConfigClockSource+0x186>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2202      	movs	r2, #2
 8004a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68ba      	ldr	r2, [r7, #8]
 8004a26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a30:	d03e      	beq.n	8004ab0 <HAL_TIM_ConfigClockSource+0xd4>
 8004a32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a36:	f200 8087 	bhi.w	8004b48 <HAL_TIM_ConfigClockSource+0x16c>
 8004a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a3e:	f000 8086 	beq.w	8004b4e <HAL_TIM_ConfigClockSource+0x172>
 8004a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a46:	d87f      	bhi.n	8004b48 <HAL_TIM_ConfigClockSource+0x16c>
 8004a48:	2b70      	cmp	r3, #112	; 0x70
 8004a4a:	d01a      	beq.n	8004a82 <HAL_TIM_ConfigClockSource+0xa6>
 8004a4c:	2b70      	cmp	r3, #112	; 0x70
 8004a4e:	d87b      	bhi.n	8004b48 <HAL_TIM_ConfigClockSource+0x16c>
 8004a50:	2b60      	cmp	r3, #96	; 0x60
 8004a52:	d050      	beq.n	8004af6 <HAL_TIM_ConfigClockSource+0x11a>
 8004a54:	2b60      	cmp	r3, #96	; 0x60
 8004a56:	d877      	bhi.n	8004b48 <HAL_TIM_ConfigClockSource+0x16c>
 8004a58:	2b50      	cmp	r3, #80	; 0x50
 8004a5a:	d03c      	beq.n	8004ad6 <HAL_TIM_ConfigClockSource+0xfa>
 8004a5c:	2b50      	cmp	r3, #80	; 0x50
 8004a5e:	d873      	bhi.n	8004b48 <HAL_TIM_ConfigClockSource+0x16c>
 8004a60:	2b40      	cmp	r3, #64	; 0x40
 8004a62:	d058      	beq.n	8004b16 <HAL_TIM_ConfigClockSource+0x13a>
 8004a64:	2b40      	cmp	r3, #64	; 0x40
 8004a66:	d86f      	bhi.n	8004b48 <HAL_TIM_ConfigClockSource+0x16c>
 8004a68:	2b30      	cmp	r3, #48	; 0x30
 8004a6a:	d064      	beq.n	8004b36 <HAL_TIM_ConfigClockSource+0x15a>
 8004a6c:	2b30      	cmp	r3, #48	; 0x30
 8004a6e:	d86b      	bhi.n	8004b48 <HAL_TIM_ConfigClockSource+0x16c>
 8004a70:	2b20      	cmp	r3, #32
 8004a72:	d060      	beq.n	8004b36 <HAL_TIM_ConfigClockSource+0x15a>
 8004a74:	2b20      	cmp	r3, #32
 8004a76:	d867      	bhi.n	8004b48 <HAL_TIM_ConfigClockSource+0x16c>
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d05c      	beq.n	8004b36 <HAL_TIM_ConfigClockSource+0x15a>
 8004a7c:	2b10      	cmp	r3, #16
 8004a7e:	d05a      	beq.n	8004b36 <HAL_TIM_ConfigClockSource+0x15a>
 8004a80:	e062      	b.n	8004b48 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a92:	f000 facc 	bl	800502e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004aa4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	609a      	str	r2, [r3, #8]
      break;
 8004aae:	e04f      	b.n	8004b50 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ac0:	f000 fab5 	bl	800502e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	689a      	ldr	r2, [r3, #8]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ad2:	609a      	str	r2, [r3, #8]
      break;
 8004ad4:	e03c      	b.n	8004b50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	f000 fa2c 	bl	8004f40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2150      	movs	r1, #80	; 0x50
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 fa83 	bl	8004ffa <TIM_ITRx_SetConfig>
      break;
 8004af4:	e02c      	b.n	8004b50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b02:	461a      	mov	r2, r3
 8004b04:	f000 fa4a 	bl	8004f9c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2160      	movs	r1, #96	; 0x60
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 fa73 	bl	8004ffa <TIM_ITRx_SetConfig>
      break;
 8004b14:	e01c      	b.n	8004b50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b22:	461a      	mov	r2, r3
 8004b24:	f000 fa0c 	bl	8004f40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2140      	movs	r1, #64	; 0x40
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 fa63 	bl	8004ffa <TIM_ITRx_SetConfig>
      break;
 8004b34:	e00c      	b.n	8004b50 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4619      	mov	r1, r3
 8004b40:	4610      	mov	r0, r2
 8004b42:	f000 fa5a 	bl	8004ffa <TIM_ITRx_SetConfig>
      break;
 8004b46:	e003      	b.n	8004b50 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b4c:	e000      	b.n	8004b50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
	...

08004b6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a29      	ldr	r2, [pc, #164]	; (8004c24 <TIM_Base_SetConfig+0xb8>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d00b      	beq.n	8004b9c <TIM_Base_SetConfig+0x30>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b8a:	d007      	beq.n	8004b9c <TIM_Base_SetConfig+0x30>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a26      	ldr	r2, [pc, #152]	; (8004c28 <TIM_Base_SetConfig+0xbc>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d003      	beq.n	8004b9c <TIM_Base_SetConfig+0x30>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a25      	ldr	r2, [pc, #148]	; (8004c2c <TIM_Base_SetConfig+0xc0>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d108      	bne.n	8004bae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a1c      	ldr	r2, [pc, #112]	; (8004c24 <TIM_Base_SetConfig+0xb8>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d00b      	beq.n	8004bce <TIM_Base_SetConfig+0x62>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bbc:	d007      	beq.n	8004bce <TIM_Base_SetConfig+0x62>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a19      	ldr	r2, [pc, #100]	; (8004c28 <TIM_Base_SetConfig+0xbc>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d003      	beq.n	8004bce <TIM_Base_SetConfig+0x62>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a18      	ldr	r2, [pc, #96]	; (8004c2c <TIM_Base_SetConfig+0xc0>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d108      	bne.n	8004be0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	689a      	ldr	r2, [r3, #8]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a07      	ldr	r2, [pc, #28]	; (8004c24 <TIM_Base_SetConfig+0xb8>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d103      	bne.n	8004c14 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	691a      	ldr	r2, [r3, #16]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	615a      	str	r2, [r3, #20]
}
 8004c1a:	bf00      	nop
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bc80      	pop	{r7}
 8004c22:	4770      	bx	lr
 8004c24:	40012c00 	.word	0x40012c00
 8004c28:	40000400 	.word	0x40000400
 8004c2c:	40000800 	.word	0x40000800

08004c30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b087      	sub	sp, #28
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a1b      	ldr	r3, [r3, #32]
 8004c44:	f023 0201 	bic.w	r2, r3, #1
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f023 0303 	bic.w	r3, r3, #3
 8004c66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	f023 0302 	bic.w	r3, r3, #2
 8004c78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a1c      	ldr	r2, [pc, #112]	; (8004cf8 <TIM_OC1_SetConfig+0xc8>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d10c      	bne.n	8004ca6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	f023 0308 	bic.w	r3, r3, #8
 8004c92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	f023 0304 	bic.w	r3, r3, #4
 8004ca4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a13      	ldr	r2, [pc, #76]	; (8004cf8 <TIM_OC1_SetConfig+0xc8>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d111      	bne.n	8004cd2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004cbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	693a      	ldr	r2, [r7, #16]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	685a      	ldr	r2, [r3, #4]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	697a      	ldr	r2, [r7, #20]
 8004cea:	621a      	str	r2, [r3, #32]
}
 8004cec:	bf00      	nop
 8004cee:	371c      	adds	r7, #28
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bc80      	pop	{r7}
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	40012c00 	.word	0x40012c00

08004cfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b087      	sub	sp, #28
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a1b      	ldr	r3, [r3, #32]
 8004d10:	f023 0210 	bic.w	r2, r3, #16
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	021b      	lsls	r3, r3, #8
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	f023 0320 	bic.w	r3, r3, #32
 8004d46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	011b      	lsls	r3, r3, #4
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a1d      	ldr	r2, [pc, #116]	; (8004dcc <TIM_OC2_SetConfig+0xd0>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d10d      	bne.n	8004d78 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	011b      	lsls	r3, r3, #4
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a14      	ldr	r2, [pc, #80]	; (8004dcc <TIM_OC2_SetConfig+0xd0>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d113      	bne.n	8004da8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	693a      	ldr	r2, [r7, #16]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	685a      	ldr	r2, [r3, #4]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	697a      	ldr	r2, [r7, #20]
 8004dc0:	621a      	str	r2, [r3, #32]
}
 8004dc2:	bf00      	nop
 8004dc4:	371c      	adds	r7, #28
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bc80      	pop	{r7}
 8004dca:	4770      	bx	lr
 8004dcc:	40012c00 	.word	0x40012c00

08004dd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b087      	sub	sp, #28
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a1b      	ldr	r3, [r3, #32]
 8004de4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f023 0303 	bic.w	r3, r3, #3
 8004e06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	021b      	lsls	r3, r3, #8
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a1d      	ldr	r2, [pc, #116]	; (8004ea0 <TIM_OC3_SetConfig+0xd0>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d10d      	bne.n	8004e4a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	021b      	lsls	r3, r3, #8
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a14      	ldr	r2, [pc, #80]	; (8004ea0 <TIM_OC3_SetConfig+0xd0>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d113      	bne.n	8004e7a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	011b      	lsls	r3, r3, #4
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	011b      	lsls	r3, r3, #4
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	685a      	ldr	r2, [r3, #4]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	621a      	str	r2, [r3, #32]
}
 8004e94:	bf00      	nop
 8004e96:	371c      	adds	r7, #28
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bc80      	pop	{r7}
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	40012c00 	.word	0x40012c00

08004ea4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b087      	sub	sp, #28
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a1b      	ldr	r3, [r3, #32]
 8004eb8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	69db      	ldr	r3, [r3, #28]
 8004eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ed2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	021b      	lsls	r3, r3, #8
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004eee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	031b      	lsls	r3, r3, #12
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a0f      	ldr	r2, [pc, #60]	; (8004f3c <TIM_OC4_SetConfig+0x98>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d109      	bne.n	8004f18 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	019b      	lsls	r3, r3, #6
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	685a      	ldr	r2, [r3, #4]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	693a      	ldr	r2, [r7, #16]
 8004f30:	621a      	str	r2, [r3, #32]
}
 8004f32:	bf00      	nop
 8004f34:	371c      	adds	r7, #28
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bc80      	pop	{r7}
 8004f3a:	4770      	bx	lr
 8004f3c:	40012c00 	.word	0x40012c00

08004f40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b087      	sub	sp, #28
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6a1b      	ldr	r3, [r3, #32]
 8004f50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	f023 0201 	bic.w	r2, r3, #1
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	011b      	lsls	r3, r3, #4
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	f023 030a 	bic.w	r3, r3, #10
 8004f7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	621a      	str	r2, [r3, #32]
}
 8004f92:	bf00      	nop
 8004f94:	371c      	adds	r7, #28
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bc80      	pop	{r7}
 8004f9a:	4770      	bx	lr

08004f9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b087      	sub	sp, #28
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6a1b      	ldr	r3, [r3, #32]
 8004fac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6a1b      	ldr	r3, [r3, #32]
 8004fb2:	f023 0210 	bic.w	r2, r3, #16
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	031b      	lsls	r3, r3, #12
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004fd8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	011b      	lsls	r3, r3, #4
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	693a      	ldr	r2, [r7, #16]
 8004fe8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	621a      	str	r2, [r3, #32]
}
 8004ff0:	bf00      	nop
 8004ff2:	371c      	adds	r7, #28
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bc80      	pop	{r7}
 8004ff8:	4770      	bx	lr

08004ffa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ffa:	b480      	push	{r7}
 8004ffc:	b085      	sub	sp, #20
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
 8005002:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005010:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005012:	683a      	ldr	r2, [r7, #0]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	4313      	orrs	r3, r2
 8005018:	f043 0307 	orr.w	r3, r3, #7
 800501c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	609a      	str	r2, [r3, #8]
}
 8005024:	bf00      	nop
 8005026:	3714      	adds	r7, #20
 8005028:	46bd      	mov	sp, r7
 800502a:	bc80      	pop	{r7}
 800502c:	4770      	bx	lr

0800502e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800502e:	b480      	push	{r7}
 8005030:	b087      	sub	sp, #28
 8005032:	af00      	add	r7, sp, #0
 8005034:	60f8      	str	r0, [r7, #12]
 8005036:	60b9      	str	r1, [r7, #8]
 8005038:	607a      	str	r2, [r7, #4]
 800503a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005048:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	021a      	lsls	r2, r3, #8
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	431a      	orrs	r2, r3
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	4313      	orrs	r3, r2
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	4313      	orrs	r3, r2
 800505a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	609a      	str	r2, [r3, #8]
}
 8005062:	bf00      	nop
 8005064:	371c      	adds	r7, #28
 8005066:	46bd      	mov	sp, r7
 8005068:	bc80      	pop	{r7}
 800506a:	4770      	bx	lr

0800506c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800506c:	b480      	push	{r7}
 800506e:	b087      	sub	sp, #28
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	f003 031f 	and.w	r3, r3, #31
 800507e:	2201      	movs	r2, #1
 8005080:	fa02 f303 	lsl.w	r3, r2, r3
 8005084:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6a1a      	ldr	r2, [r3, #32]
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	43db      	mvns	r3, r3
 800508e:	401a      	ands	r2, r3
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6a1a      	ldr	r2, [r3, #32]
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	f003 031f 	and.w	r3, r3, #31
 800509e:	6879      	ldr	r1, [r7, #4]
 80050a0:	fa01 f303 	lsl.w	r3, r1, r3
 80050a4:	431a      	orrs	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	621a      	str	r2, [r3, #32]
}
 80050aa:	bf00      	nop
 80050ac:	371c      	adds	r7, #28
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bc80      	pop	{r7}
 80050b2:	4770      	bx	lr

080050b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b085      	sub	sp, #20
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d101      	bne.n	80050cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050c8:	2302      	movs	r3, #2
 80050ca:	e046      	b.n	800515a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2202      	movs	r2, #2
 80050d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a16      	ldr	r2, [pc, #88]	; (8005164 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d00e      	beq.n	800512e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005118:	d009      	beq.n	800512e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a12      	ldr	r2, [pc, #72]	; (8005168 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d004      	beq.n	800512e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a10      	ldr	r2, [pc, #64]	; (800516c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d10c      	bne.n	8005148 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005134:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	68ba      	ldr	r2, [r7, #8]
 800513c:	4313      	orrs	r3, r2
 800513e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68ba      	ldr	r2, [r7, #8]
 8005146:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3714      	adds	r7, #20
 800515e:	46bd      	mov	sp, r7
 8005160:	bc80      	pop	{r7}
 8005162:	4770      	bx	lr
 8005164:	40012c00 	.word	0x40012c00
 8005168:	40000400 	.word	0x40000400
 800516c:	40000800 	.word	0x40000800

08005170 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b082      	sub	sp, #8
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d101      	bne.n	8005182 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e042      	b.n	8005208 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b00      	cmp	r3, #0
 800518c:	d106      	bne.n	800519c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f7fc fc40 	bl	8001a1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2224      	movs	r2, #36	; 0x24
 80051a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68da      	ldr	r2, [r3, #12]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 f9af 	bl	8005518 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	691a      	ldr	r2, [r3, #16]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	695a      	ldr	r2, [r3, #20]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68da      	ldr	r2, [r3, #12]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2220      	movs	r2, #32
 80051f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2220      	movs	r2, #32
 80051fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3708      	adds	r7, #8
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b08a      	sub	sp, #40	; 0x28
 8005214:	af02      	add	r7, sp, #8
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	603b      	str	r3, [r7, #0]
 800521c:	4613      	mov	r3, r2
 800521e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005220:	2300      	movs	r3, #0
 8005222:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b20      	cmp	r3, #32
 800522e:	d16d      	bne.n	800530c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d002      	beq.n	800523c <HAL_UART_Transmit+0x2c>
 8005236:	88fb      	ldrh	r3, [r7, #6]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d101      	bne.n	8005240 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e066      	b.n	800530e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2221      	movs	r2, #33	; 0x21
 800524a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800524e:	f7fc fceb 	bl	8001c28 <HAL_GetTick>
 8005252:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	88fa      	ldrh	r2, [r7, #6]
 8005258:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	88fa      	ldrh	r2, [r7, #6]
 800525e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005268:	d108      	bne.n	800527c <HAL_UART_Transmit+0x6c>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d104      	bne.n	800527c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005272:	2300      	movs	r3, #0
 8005274:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	61bb      	str	r3, [r7, #24]
 800527a:	e003      	b.n	8005284 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005280:	2300      	movs	r3, #0
 8005282:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005284:	e02a      	b.n	80052dc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	9300      	str	r3, [sp, #0]
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	2200      	movs	r2, #0
 800528e:	2180      	movs	r1, #128	; 0x80
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	f000 f8d2 	bl	800543a <UART_WaitOnFlagUntilTimeout>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d001      	beq.n	80052a0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e036      	b.n	800530e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d10b      	bne.n	80052be <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	881b      	ldrh	r3, [r3, #0]
 80052aa:	461a      	mov	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	3302      	adds	r3, #2
 80052ba:	61bb      	str	r3, [r7, #24]
 80052bc:	e007      	b.n	80052ce <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	781a      	ldrb	r2, [r3, #0]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	3301      	adds	r3, #1
 80052cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	3b01      	subs	r3, #1
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1cf      	bne.n	8005286 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	9300      	str	r3, [sp, #0]
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	2200      	movs	r2, #0
 80052ee:	2140      	movs	r1, #64	; 0x40
 80052f0:	68f8      	ldr	r0, [r7, #12]
 80052f2:	f000 f8a2 	bl	800543a <UART_WaitOnFlagUntilTimeout>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d001      	beq.n	8005300 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80052fc:	2303      	movs	r3, #3
 80052fe:	e006      	b.n	800530e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2220      	movs	r2, #32
 8005304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005308:	2300      	movs	r3, #0
 800530a:	e000      	b.n	800530e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800530c:	2302      	movs	r3, #2
  }
}
 800530e:	4618      	mov	r0, r3
 8005310:	3720      	adds	r7, #32
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005316:	b580      	push	{r7, lr}
 8005318:	b08a      	sub	sp, #40	; 0x28
 800531a:	af02      	add	r7, sp, #8
 800531c:	60f8      	str	r0, [r7, #12]
 800531e:	60b9      	str	r1, [r7, #8]
 8005320:	603b      	str	r3, [r7, #0]
 8005322:	4613      	mov	r3, r2
 8005324:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005326:	2300      	movs	r3, #0
 8005328:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005330:	b2db      	uxtb	r3, r3
 8005332:	2b20      	cmp	r3, #32
 8005334:	d17c      	bne.n	8005430 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d002      	beq.n	8005342 <HAL_UART_Receive+0x2c>
 800533c:	88fb      	ldrh	r3, [r7, #6]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e075      	b.n	8005432 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2222      	movs	r2, #34	; 0x22
 8005350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800535a:	f7fc fc65 	bl	8001c28 <HAL_GetTick>
 800535e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	88fa      	ldrh	r2, [r7, #6]
 8005364:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	88fa      	ldrh	r2, [r7, #6]
 800536a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005374:	d108      	bne.n	8005388 <HAL_UART_Receive+0x72>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d104      	bne.n	8005388 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 800537e:	2300      	movs	r3, #0
 8005380:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	61bb      	str	r3, [r7, #24]
 8005386:	e003      	b.n	8005390 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800538c:	2300      	movs	r3, #0
 800538e:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005390:	e043      	b.n	800541a <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	9300      	str	r3, [sp, #0]
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	2200      	movs	r2, #0
 800539a:	2120      	movs	r1, #32
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f000 f84c 	bl	800543a <UART_WaitOnFlagUntilTimeout>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d001      	beq.n	80053ac <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	e042      	b.n	8005432 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d10c      	bne.n	80053cc <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053be:	b29a      	uxth	r2, r3
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	3302      	adds	r3, #2
 80053c8:	61bb      	str	r3, [r7, #24]
 80053ca:	e01f      	b.n	800540c <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053d4:	d007      	beq.n	80053e6 <HAL_UART_Receive+0xd0>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d10a      	bne.n	80053f4 <HAL_UART_Receive+0xde>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d106      	bne.n	80053f4 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	b2da      	uxtb	r2, r3
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	701a      	strb	r2, [r3, #0]
 80053f2:	e008      	b.n	8005406 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005400:	b2da      	uxtb	r2, r3
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	3301      	adds	r3, #1
 800540a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005410:	b29b      	uxth	r3, r3
 8005412:	3b01      	subs	r3, #1
 8005414:	b29a      	uxth	r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800541e:	b29b      	uxth	r3, r3
 8005420:	2b00      	cmp	r3, #0
 8005422:	d1b6      	bne.n	8005392 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2220      	movs	r2, #32
 8005428:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 800542c:	2300      	movs	r3, #0
 800542e:	e000      	b.n	8005432 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005430:	2302      	movs	r3, #2
  }
}
 8005432:	4618      	mov	r0, r3
 8005434:	3720      	adds	r7, #32
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}

0800543a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800543a:	b580      	push	{r7, lr}
 800543c:	b090      	sub	sp, #64	; 0x40
 800543e:	af00      	add	r7, sp, #0
 8005440:	60f8      	str	r0, [r7, #12]
 8005442:	60b9      	str	r1, [r7, #8]
 8005444:	603b      	str	r3, [r7, #0]
 8005446:	4613      	mov	r3, r2
 8005448:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800544a:	e050      	b.n	80054ee <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800544c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800544e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005452:	d04c      	beq.n	80054ee <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005456:	2b00      	cmp	r3, #0
 8005458:	d007      	beq.n	800546a <UART_WaitOnFlagUntilTimeout+0x30>
 800545a:	f7fc fbe5 	bl	8001c28 <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005466:	429a      	cmp	r2, r3
 8005468:	d241      	bcs.n	80054ee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	330c      	adds	r3, #12
 8005470:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005474:	e853 3f00 	ldrex	r3, [r3]
 8005478:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800547a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005480:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	330c      	adds	r3, #12
 8005488:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800548a:	637a      	str	r2, [r7, #52]	; 0x34
 800548c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800548e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005490:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005492:	e841 2300 	strex	r3, r2, [r1]
 8005496:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1e5      	bne.n	800546a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	3314      	adds	r3, #20
 80054a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	e853 3f00 	ldrex	r3, [r3]
 80054ac:	613b      	str	r3, [r7, #16]
   return(result);
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	f023 0301 	bic.w	r3, r3, #1
 80054b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	3314      	adds	r3, #20
 80054bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054be:	623a      	str	r2, [r7, #32]
 80054c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c2:	69f9      	ldr	r1, [r7, #28]
 80054c4:	6a3a      	ldr	r2, [r7, #32]
 80054c6:	e841 2300 	strex	r3, r2, [r1]
 80054ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1e5      	bne.n	800549e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2220      	movs	r2, #32
 80054d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2220      	movs	r2, #32
 80054de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e00f      	b.n	800550e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	4013      	ands	r3, r2
 80054f8:	68ba      	ldr	r2, [r7, #8]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	bf0c      	ite	eq
 80054fe:	2301      	moveq	r3, #1
 8005500:	2300      	movne	r3, #0
 8005502:	b2db      	uxtb	r3, r3
 8005504:	461a      	mov	r2, r3
 8005506:	79fb      	ldrb	r3, [r7, #7]
 8005508:	429a      	cmp	r2, r3
 800550a:	d09f      	beq.n	800544c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3740      	adds	r7, #64	; 0x40
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
	...

08005518 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	68da      	ldr	r2, [r3, #12]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	430a      	orrs	r2, r1
 8005534:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	689a      	ldr	r2, [r3, #8]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	431a      	orrs	r2, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	695b      	ldr	r3, [r3, #20]
 8005544:	4313      	orrs	r3, r2
 8005546:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005552:	f023 030c 	bic.w	r3, r3, #12
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	6812      	ldr	r2, [r2, #0]
 800555a:	68b9      	ldr	r1, [r7, #8]
 800555c:	430b      	orrs	r3, r1
 800555e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	699a      	ldr	r2, [r3, #24]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	430a      	orrs	r2, r1
 8005574:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a2c      	ldr	r2, [pc, #176]	; (800562c <UART_SetConfig+0x114>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d103      	bne.n	8005588 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005580:	f7fe fe84 	bl	800428c <HAL_RCC_GetPCLK2Freq>
 8005584:	60f8      	str	r0, [r7, #12]
 8005586:	e002      	b.n	800558e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005588:	f7fe fe6c 	bl	8004264 <HAL_RCC_GetPCLK1Freq>
 800558c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	4613      	mov	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	4413      	add	r3, r2
 8005596:	009a      	lsls	r2, r3, #2
 8005598:	441a      	add	r2, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a4:	4a22      	ldr	r2, [pc, #136]	; (8005630 <UART_SetConfig+0x118>)
 80055a6:	fba2 2303 	umull	r2, r3, r2, r3
 80055aa:	095b      	lsrs	r3, r3, #5
 80055ac:	0119      	lsls	r1, r3, #4
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	4613      	mov	r3, r2
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	4413      	add	r3, r2
 80055b6:	009a      	lsls	r2, r3, #2
 80055b8:	441a      	add	r2, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80055c4:	4b1a      	ldr	r3, [pc, #104]	; (8005630 <UART_SetConfig+0x118>)
 80055c6:	fba3 0302 	umull	r0, r3, r3, r2
 80055ca:	095b      	lsrs	r3, r3, #5
 80055cc:	2064      	movs	r0, #100	; 0x64
 80055ce:	fb00 f303 	mul.w	r3, r0, r3
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	011b      	lsls	r3, r3, #4
 80055d6:	3332      	adds	r3, #50	; 0x32
 80055d8:	4a15      	ldr	r2, [pc, #84]	; (8005630 <UART_SetConfig+0x118>)
 80055da:	fba2 2303 	umull	r2, r3, r2, r3
 80055de:	095b      	lsrs	r3, r3, #5
 80055e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055e4:	4419      	add	r1, r3
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	4613      	mov	r3, r2
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	4413      	add	r3, r2
 80055ee:	009a      	lsls	r2, r3, #2
 80055f0:	441a      	add	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80055fc:	4b0c      	ldr	r3, [pc, #48]	; (8005630 <UART_SetConfig+0x118>)
 80055fe:	fba3 0302 	umull	r0, r3, r3, r2
 8005602:	095b      	lsrs	r3, r3, #5
 8005604:	2064      	movs	r0, #100	; 0x64
 8005606:	fb00 f303 	mul.w	r3, r0, r3
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	011b      	lsls	r3, r3, #4
 800560e:	3332      	adds	r3, #50	; 0x32
 8005610:	4a07      	ldr	r2, [pc, #28]	; (8005630 <UART_SetConfig+0x118>)
 8005612:	fba2 2303 	umull	r2, r3, r2, r3
 8005616:	095b      	lsrs	r3, r3, #5
 8005618:	f003 020f 	and.w	r2, r3, #15
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	440a      	add	r2, r1
 8005622:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005624:	bf00      	nop
 8005626:	3710      	adds	r7, #16
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	40013800 	.word	0x40013800
 8005630:	51eb851f 	.word	0x51eb851f

08005634 <atoi>:
 8005634:	220a      	movs	r2, #10
 8005636:	2100      	movs	r1, #0
 8005638:	f000 b87e 	b.w	8005738 <strtol>

0800563c <_strtol_l.constprop.0>:
 800563c:	2b01      	cmp	r3, #1
 800563e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005642:	4686      	mov	lr, r0
 8005644:	4690      	mov	r8, r2
 8005646:	d001      	beq.n	800564c <_strtol_l.constprop.0+0x10>
 8005648:	2b24      	cmp	r3, #36	; 0x24
 800564a:	d906      	bls.n	800565a <_strtol_l.constprop.0+0x1e>
 800564c:	f000 f8a6 	bl	800579c <__errno>
 8005650:	2316      	movs	r3, #22
 8005652:	6003      	str	r3, [r0, #0]
 8005654:	2000      	movs	r0, #0
 8005656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800565a:	460d      	mov	r5, r1
 800565c:	4835      	ldr	r0, [pc, #212]	; (8005734 <_strtol_l.constprop.0+0xf8>)
 800565e:	462a      	mov	r2, r5
 8005660:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005664:	5d06      	ldrb	r6, [r0, r4]
 8005666:	f016 0608 	ands.w	r6, r6, #8
 800566a:	d1f8      	bne.n	800565e <_strtol_l.constprop.0+0x22>
 800566c:	2c2d      	cmp	r4, #45	; 0x2d
 800566e:	d12e      	bne.n	80056ce <_strtol_l.constprop.0+0x92>
 8005670:	2601      	movs	r6, #1
 8005672:	782c      	ldrb	r4, [r5, #0]
 8005674:	1c95      	adds	r5, r2, #2
 8005676:	2b00      	cmp	r3, #0
 8005678:	d057      	beq.n	800572a <_strtol_l.constprop.0+0xee>
 800567a:	2b10      	cmp	r3, #16
 800567c:	d109      	bne.n	8005692 <_strtol_l.constprop.0+0x56>
 800567e:	2c30      	cmp	r4, #48	; 0x30
 8005680:	d107      	bne.n	8005692 <_strtol_l.constprop.0+0x56>
 8005682:	782a      	ldrb	r2, [r5, #0]
 8005684:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8005688:	2a58      	cmp	r2, #88	; 0x58
 800568a:	d149      	bne.n	8005720 <_strtol_l.constprop.0+0xe4>
 800568c:	2310      	movs	r3, #16
 800568e:	786c      	ldrb	r4, [r5, #1]
 8005690:	3502      	adds	r5, #2
 8005692:	2200      	movs	r2, #0
 8005694:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8005698:	f10c 3cff 	add.w	ip, ip, #4294967295
 800569c:	fbbc f9f3 	udiv	r9, ip, r3
 80056a0:	4610      	mov	r0, r2
 80056a2:	fb03 ca19 	mls	sl, r3, r9, ip
 80056a6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80056aa:	2f09      	cmp	r7, #9
 80056ac:	d814      	bhi.n	80056d8 <_strtol_l.constprop.0+0x9c>
 80056ae:	463c      	mov	r4, r7
 80056b0:	42a3      	cmp	r3, r4
 80056b2:	dd20      	ble.n	80056f6 <_strtol_l.constprop.0+0xba>
 80056b4:	1c57      	adds	r7, r2, #1
 80056b6:	d007      	beq.n	80056c8 <_strtol_l.constprop.0+0x8c>
 80056b8:	4581      	cmp	r9, r0
 80056ba:	d319      	bcc.n	80056f0 <_strtol_l.constprop.0+0xb4>
 80056bc:	d101      	bne.n	80056c2 <_strtol_l.constprop.0+0x86>
 80056be:	45a2      	cmp	sl, r4
 80056c0:	db16      	blt.n	80056f0 <_strtol_l.constprop.0+0xb4>
 80056c2:	2201      	movs	r2, #1
 80056c4:	fb00 4003 	mla	r0, r0, r3, r4
 80056c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80056cc:	e7eb      	b.n	80056a6 <_strtol_l.constprop.0+0x6a>
 80056ce:	2c2b      	cmp	r4, #43	; 0x2b
 80056d0:	bf04      	itt	eq
 80056d2:	782c      	ldrbeq	r4, [r5, #0]
 80056d4:	1c95      	addeq	r5, r2, #2
 80056d6:	e7ce      	b.n	8005676 <_strtol_l.constprop.0+0x3a>
 80056d8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80056dc:	2f19      	cmp	r7, #25
 80056de:	d801      	bhi.n	80056e4 <_strtol_l.constprop.0+0xa8>
 80056e0:	3c37      	subs	r4, #55	; 0x37
 80056e2:	e7e5      	b.n	80056b0 <_strtol_l.constprop.0+0x74>
 80056e4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80056e8:	2f19      	cmp	r7, #25
 80056ea:	d804      	bhi.n	80056f6 <_strtol_l.constprop.0+0xba>
 80056ec:	3c57      	subs	r4, #87	; 0x57
 80056ee:	e7df      	b.n	80056b0 <_strtol_l.constprop.0+0x74>
 80056f0:	f04f 32ff 	mov.w	r2, #4294967295
 80056f4:	e7e8      	b.n	80056c8 <_strtol_l.constprop.0+0x8c>
 80056f6:	1c53      	adds	r3, r2, #1
 80056f8:	d108      	bne.n	800570c <_strtol_l.constprop.0+0xd0>
 80056fa:	2322      	movs	r3, #34	; 0x22
 80056fc:	4660      	mov	r0, ip
 80056fe:	f8ce 3000 	str.w	r3, [lr]
 8005702:	f1b8 0f00 	cmp.w	r8, #0
 8005706:	d0a6      	beq.n	8005656 <_strtol_l.constprop.0+0x1a>
 8005708:	1e69      	subs	r1, r5, #1
 800570a:	e006      	b.n	800571a <_strtol_l.constprop.0+0xde>
 800570c:	b106      	cbz	r6, 8005710 <_strtol_l.constprop.0+0xd4>
 800570e:	4240      	negs	r0, r0
 8005710:	f1b8 0f00 	cmp.w	r8, #0
 8005714:	d09f      	beq.n	8005656 <_strtol_l.constprop.0+0x1a>
 8005716:	2a00      	cmp	r2, #0
 8005718:	d1f6      	bne.n	8005708 <_strtol_l.constprop.0+0xcc>
 800571a:	f8c8 1000 	str.w	r1, [r8]
 800571e:	e79a      	b.n	8005656 <_strtol_l.constprop.0+0x1a>
 8005720:	2430      	movs	r4, #48	; 0x30
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1b5      	bne.n	8005692 <_strtol_l.constprop.0+0x56>
 8005726:	2308      	movs	r3, #8
 8005728:	e7b3      	b.n	8005692 <_strtol_l.constprop.0+0x56>
 800572a:	2c30      	cmp	r4, #48	; 0x30
 800572c:	d0a9      	beq.n	8005682 <_strtol_l.constprop.0+0x46>
 800572e:	230a      	movs	r3, #10
 8005730:	e7af      	b.n	8005692 <_strtol_l.constprop.0+0x56>
 8005732:	bf00      	nop
 8005734:	0800632f 	.word	0x0800632f

08005738 <strtol>:
 8005738:	4613      	mov	r3, r2
 800573a:	460a      	mov	r2, r1
 800573c:	4601      	mov	r1, r0
 800573e:	4802      	ldr	r0, [pc, #8]	; (8005748 <strtol+0x10>)
 8005740:	6800      	ldr	r0, [r0, #0]
 8005742:	f7ff bf7b 	b.w	800563c <_strtol_l.constprop.0>
 8005746:	bf00      	nop
 8005748:	20000058 	.word	0x20000058

0800574c <siprintf>:
 800574c:	b40e      	push	{r1, r2, r3}
 800574e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005752:	b500      	push	{lr}
 8005754:	b09c      	sub	sp, #112	; 0x70
 8005756:	ab1d      	add	r3, sp, #116	; 0x74
 8005758:	9002      	str	r0, [sp, #8]
 800575a:	9006      	str	r0, [sp, #24]
 800575c:	9107      	str	r1, [sp, #28]
 800575e:	9104      	str	r1, [sp, #16]
 8005760:	4808      	ldr	r0, [pc, #32]	; (8005784 <siprintf+0x38>)
 8005762:	4909      	ldr	r1, [pc, #36]	; (8005788 <siprintf+0x3c>)
 8005764:	f853 2b04 	ldr.w	r2, [r3], #4
 8005768:	9105      	str	r1, [sp, #20]
 800576a:	6800      	ldr	r0, [r0, #0]
 800576c:	a902      	add	r1, sp, #8
 800576e:	9301      	str	r3, [sp, #4]
 8005770:	f000 f98e 	bl	8005a90 <_svfiprintf_r>
 8005774:	2200      	movs	r2, #0
 8005776:	9b02      	ldr	r3, [sp, #8]
 8005778:	701a      	strb	r2, [r3, #0]
 800577a:	b01c      	add	sp, #112	; 0x70
 800577c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005780:	b003      	add	sp, #12
 8005782:	4770      	bx	lr
 8005784:	20000058 	.word	0x20000058
 8005788:	ffff0208 	.word	0xffff0208

0800578c <memset>:
 800578c:	4603      	mov	r3, r0
 800578e:	4402      	add	r2, r0
 8005790:	4293      	cmp	r3, r2
 8005792:	d100      	bne.n	8005796 <memset+0xa>
 8005794:	4770      	bx	lr
 8005796:	f803 1b01 	strb.w	r1, [r3], #1
 800579a:	e7f9      	b.n	8005790 <memset+0x4>

0800579c <__errno>:
 800579c:	4b01      	ldr	r3, [pc, #4]	; (80057a4 <__errno+0x8>)
 800579e:	6818      	ldr	r0, [r3, #0]
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	20000058 	.word	0x20000058

080057a8 <__libc_init_array>:
 80057a8:	b570      	push	{r4, r5, r6, lr}
 80057aa:	2600      	movs	r6, #0
 80057ac:	4d0c      	ldr	r5, [pc, #48]	; (80057e0 <__libc_init_array+0x38>)
 80057ae:	4c0d      	ldr	r4, [pc, #52]	; (80057e4 <__libc_init_array+0x3c>)
 80057b0:	1b64      	subs	r4, r4, r5
 80057b2:	10a4      	asrs	r4, r4, #2
 80057b4:	42a6      	cmp	r6, r4
 80057b6:	d109      	bne.n	80057cc <__libc_init_array+0x24>
 80057b8:	f000 fc7a 	bl	80060b0 <_init>
 80057bc:	2600      	movs	r6, #0
 80057be:	4d0a      	ldr	r5, [pc, #40]	; (80057e8 <__libc_init_array+0x40>)
 80057c0:	4c0a      	ldr	r4, [pc, #40]	; (80057ec <__libc_init_array+0x44>)
 80057c2:	1b64      	subs	r4, r4, r5
 80057c4:	10a4      	asrs	r4, r4, #2
 80057c6:	42a6      	cmp	r6, r4
 80057c8:	d105      	bne.n	80057d6 <__libc_init_array+0x2e>
 80057ca:	bd70      	pop	{r4, r5, r6, pc}
 80057cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80057d0:	4798      	blx	r3
 80057d2:	3601      	adds	r6, #1
 80057d4:	e7ee      	b.n	80057b4 <__libc_init_array+0xc>
 80057d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80057da:	4798      	blx	r3
 80057dc:	3601      	adds	r6, #1
 80057de:	e7f2      	b.n	80057c6 <__libc_init_array+0x1e>
 80057e0:	08006464 	.word	0x08006464
 80057e4:	08006464 	.word	0x08006464
 80057e8:	08006464 	.word	0x08006464
 80057ec:	08006468 	.word	0x08006468

080057f0 <__retarget_lock_acquire_recursive>:
 80057f0:	4770      	bx	lr

080057f2 <__retarget_lock_release_recursive>:
 80057f2:	4770      	bx	lr

080057f4 <_free_r>:
 80057f4:	b538      	push	{r3, r4, r5, lr}
 80057f6:	4605      	mov	r5, r0
 80057f8:	2900      	cmp	r1, #0
 80057fa:	d040      	beq.n	800587e <_free_r+0x8a>
 80057fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005800:	1f0c      	subs	r4, r1, #4
 8005802:	2b00      	cmp	r3, #0
 8005804:	bfb8      	it	lt
 8005806:	18e4      	addlt	r4, r4, r3
 8005808:	f000 f8dc 	bl	80059c4 <__malloc_lock>
 800580c:	4a1c      	ldr	r2, [pc, #112]	; (8005880 <_free_r+0x8c>)
 800580e:	6813      	ldr	r3, [r2, #0]
 8005810:	b933      	cbnz	r3, 8005820 <_free_r+0x2c>
 8005812:	6063      	str	r3, [r4, #4]
 8005814:	6014      	str	r4, [r2, #0]
 8005816:	4628      	mov	r0, r5
 8005818:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800581c:	f000 b8d8 	b.w	80059d0 <__malloc_unlock>
 8005820:	42a3      	cmp	r3, r4
 8005822:	d908      	bls.n	8005836 <_free_r+0x42>
 8005824:	6820      	ldr	r0, [r4, #0]
 8005826:	1821      	adds	r1, r4, r0
 8005828:	428b      	cmp	r3, r1
 800582a:	bf01      	itttt	eq
 800582c:	6819      	ldreq	r1, [r3, #0]
 800582e:	685b      	ldreq	r3, [r3, #4]
 8005830:	1809      	addeq	r1, r1, r0
 8005832:	6021      	streq	r1, [r4, #0]
 8005834:	e7ed      	b.n	8005812 <_free_r+0x1e>
 8005836:	461a      	mov	r2, r3
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	b10b      	cbz	r3, 8005840 <_free_r+0x4c>
 800583c:	42a3      	cmp	r3, r4
 800583e:	d9fa      	bls.n	8005836 <_free_r+0x42>
 8005840:	6811      	ldr	r1, [r2, #0]
 8005842:	1850      	adds	r0, r2, r1
 8005844:	42a0      	cmp	r0, r4
 8005846:	d10b      	bne.n	8005860 <_free_r+0x6c>
 8005848:	6820      	ldr	r0, [r4, #0]
 800584a:	4401      	add	r1, r0
 800584c:	1850      	adds	r0, r2, r1
 800584e:	4283      	cmp	r3, r0
 8005850:	6011      	str	r1, [r2, #0]
 8005852:	d1e0      	bne.n	8005816 <_free_r+0x22>
 8005854:	6818      	ldr	r0, [r3, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	4408      	add	r0, r1
 800585a:	6010      	str	r0, [r2, #0]
 800585c:	6053      	str	r3, [r2, #4]
 800585e:	e7da      	b.n	8005816 <_free_r+0x22>
 8005860:	d902      	bls.n	8005868 <_free_r+0x74>
 8005862:	230c      	movs	r3, #12
 8005864:	602b      	str	r3, [r5, #0]
 8005866:	e7d6      	b.n	8005816 <_free_r+0x22>
 8005868:	6820      	ldr	r0, [r4, #0]
 800586a:	1821      	adds	r1, r4, r0
 800586c:	428b      	cmp	r3, r1
 800586e:	bf01      	itttt	eq
 8005870:	6819      	ldreq	r1, [r3, #0]
 8005872:	685b      	ldreq	r3, [r3, #4]
 8005874:	1809      	addeq	r1, r1, r0
 8005876:	6021      	streq	r1, [r4, #0]
 8005878:	6063      	str	r3, [r4, #4]
 800587a:	6054      	str	r4, [r2, #4]
 800587c:	e7cb      	b.n	8005816 <_free_r+0x22>
 800587e:	bd38      	pop	{r3, r4, r5, pc}
 8005880:	2000034c 	.word	0x2000034c

08005884 <sbrk_aligned>:
 8005884:	b570      	push	{r4, r5, r6, lr}
 8005886:	4e0e      	ldr	r6, [pc, #56]	; (80058c0 <sbrk_aligned+0x3c>)
 8005888:	460c      	mov	r4, r1
 800588a:	6831      	ldr	r1, [r6, #0]
 800588c:	4605      	mov	r5, r0
 800588e:	b911      	cbnz	r1, 8005896 <sbrk_aligned+0x12>
 8005890:	f000 fbaa 	bl	8005fe8 <_sbrk_r>
 8005894:	6030      	str	r0, [r6, #0]
 8005896:	4621      	mov	r1, r4
 8005898:	4628      	mov	r0, r5
 800589a:	f000 fba5 	bl	8005fe8 <_sbrk_r>
 800589e:	1c43      	adds	r3, r0, #1
 80058a0:	d00a      	beq.n	80058b8 <sbrk_aligned+0x34>
 80058a2:	1cc4      	adds	r4, r0, #3
 80058a4:	f024 0403 	bic.w	r4, r4, #3
 80058a8:	42a0      	cmp	r0, r4
 80058aa:	d007      	beq.n	80058bc <sbrk_aligned+0x38>
 80058ac:	1a21      	subs	r1, r4, r0
 80058ae:	4628      	mov	r0, r5
 80058b0:	f000 fb9a 	bl	8005fe8 <_sbrk_r>
 80058b4:	3001      	adds	r0, #1
 80058b6:	d101      	bne.n	80058bc <sbrk_aligned+0x38>
 80058b8:	f04f 34ff 	mov.w	r4, #4294967295
 80058bc:	4620      	mov	r0, r4
 80058be:	bd70      	pop	{r4, r5, r6, pc}
 80058c0:	20000350 	.word	0x20000350

080058c4 <_malloc_r>:
 80058c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058c8:	1ccd      	adds	r5, r1, #3
 80058ca:	f025 0503 	bic.w	r5, r5, #3
 80058ce:	3508      	adds	r5, #8
 80058d0:	2d0c      	cmp	r5, #12
 80058d2:	bf38      	it	cc
 80058d4:	250c      	movcc	r5, #12
 80058d6:	2d00      	cmp	r5, #0
 80058d8:	4607      	mov	r7, r0
 80058da:	db01      	blt.n	80058e0 <_malloc_r+0x1c>
 80058dc:	42a9      	cmp	r1, r5
 80058de:	d905      	bls.n	80058ec <_malloc_r+0x28>
 80058e0:	230c      	movs	r3, #12
 80058e2:	2600      	movs	r6, #0
 80058e4:	603b      	str	r3, [r7, #0]
 80058e6:	4630      	mov	r0, r6
 80058e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80059c0 <_malloc_r+0xfc>
 80058f0:	f000 f868 	bl	80059c4 <__malloc_lock>
 80058f4:	f8d8 3000 	ldr.w	r3, [r8]
 80058f8:	461c      	mov	r4, r3
 80058fa:	bb5c      	cbnz	r4, 8005954 <_malloc_r+0x90>
 80058fc:	4629      	mov	r1, r5
 80058fe:	4638      	mov	r0, r7
 8005900:	f7ff ffc0 	bl	8005884 <sbrk_aligned>
 8005904:	1c43      	adds	r3, r0, #1
 8005906:	4604      	mov	r4, r0
 8005908:	d155      	bne.n	80059b6 <_malloc_r+0xf2>
 800590a:	f8d8 4000 	ldr.w	r4, [r8]
 800590e:	4626      	mov	r6, r4
 8005910:	2e00      	cmp	r6, #0
 8005912:	d145      	bne.n	80059a0 <_malloc_r+0xdc>
 8005914:	2c00      	cmp	r4, #0
 8005916:	d048      	beq.n	80059aa <_malloc_r+0xe6>
 8005918:	6823      	ldr	r3, [r4, #0]
 800591a:	4631      	mov	r1, r6
 800591c:	4638      	mov	r0, r7
 800591e:	eb04 0903 	add.w	r9, r4, r3
 8005922:	f000 fb61 	bl	8005fe8 <_sbrk_r>
 8005926:	4581      	cmp	r9, r0
 8005928:	d13f      	bne.n	80059aa <_malloc_r+0xe6>
 800592a:	6821      	ldr	r1, [r4, #0]
 800592c:	4638      	mov	r0, r7
 800592e:	1a6d      	subs	r5, r5, r1
 8005930:	4629      	mov	r1, r5
 8005932:	f7ff ffa7 	bl	8005884 <sbrk_aligned>
 8005936:	3001      	adds	r0, #1
 8005938:	d037      	beq.n	80059aa <_malloc_r+0xe6>
 800593a:	6823      	ldr	r3, [r4, #0]
 800593c:	442b      	add	r3, r5
 800593e:	6023      	str	r3, [r4, #0]
 8005940:	f8d8 3000 	ldr.w	r3, [r8]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d038      	beq.n	80059ba <_malloc_r+0xf6>
 8005948:	685a      	ldr	r2, [r3, #4]
 800594a:	42a2      	cmp	r2, r4
 800594c:	d12b      	bne.n	80059a6 <_malloc_r+0xe2>
 800594e:	2200      	movs	r2, #0
 8005950:	605a      	str	r2, [r3, #4]
 8005952:	e00f      	b.n	8005974 <_malloc_r+0xb0>
 8005954:	6822      	ldr	r2, [r4, #0]
 8005956:	1b52      	subs	r2, r2, r5
 8005958:	d41f      	bmi.n	800599a <_malloc_r+0xd6>
 800595a:	2a0b      	cmp	r2, #11
 800595c:	d917      	bls.n	800598e <_malloc_r+0xca>
 800595e:	1961      	adds	r1, r4, r5
 8005960:	42a3      	cmp	r3, r4
 8005962:	6025      	str	r5, [r4, #0]
 8005964:	bf18      	it	ne
 8005966:	6059      	strne	r1, [r3, #4]
 8005968:	6863      	ldr	r3, [r4, #4]
 800596a:	bf08      	it	eq
 800596c:	f8c8 1000 	streq.w	r1, [r8]
 8005970:	5162      	str	r2, [r4, r5]
 8005972:	604b      	str	r3, [r1, #4]
 8005974:	4638      	mov	r0, r7
 8005976:	f104 060b 	add.w	r6, r4, #11
 800597a:	f000 f829 	bl	80059d0 <__malloc_unlock>
 800597e:	f026 0607 	bic.w	r6, r6, #7
 8005982:	1d23      	adds	r3, r4, #4
 8005984:	1af2      	subs	r2, r6, r3
 8005986:	d0ae      	beq.n	80058e6 <_malloc_r+0x22>
 8005988:	1b9b      	subs	r3, r3, r6
 800598a:	50a3      	str	r3, [r4, r2]
 800598c:	e7ab      	b.n	80058e6 <_malloc_r+0x22>
 800598e:	42a3      	cmp	r3, r4
 8005990:	6862      	ldr	r2, [r4, #4]
 8005992:	d1dd      	bne.n	8005950 <_malloc_r+0x8c>
 8005994:	f8c8 2000 	str.w	r2, [r8]
 8005998:	e7ec      	b.n	8005974 <_malloc_r+0xb0>
 800599a:	4623      	mov	r3, r4
 800599c:	6864      	ldr	r4, [r4, #4]
 800599e:	e7ac      	b.n	80058fa <_malloc_r+0x36>
 80059a0:	4634      	mov	r4, r6
 80059a2:	6876      	ldr	r6, [r6, #4]
 80059a4:	e7b4      	b.n	8005910 <_malloc_r+0x4c>
 80059a6:	4613      	mov	r3, r2
 80059a8:	e7cc      	b.n	8005944 <_malloc_r+0x80>
 80059aa:	230c      	movs	r3, #12
 80059ac:	4638      	mov	r0, r7
 80059ae:	603b      	str	r3, [r7, #0]
 80059b0:	f000 f80e 	bl	80059d0 <__malloc_unlock>
 80059b4:	e797      	b.n	80058e6 <_malloc_r+0x22>
 80059b6:	6025      	str	r5, [r4, #0]
 80059b8:	e7dc      	b.n	8005974 <_malloc_r+0xb0>
 80059ba:	605b      	str	r3, [r3, #4]
 80059bc:	deff      	udf	#255	; 0xff
 80059be:	bf00      	nop
 80059c0:	2000034c 	.word	0x2000034c

080059c4 <__malloc_lock>:
 80059c4:	4801      	ldr	r0, [pc, #4]	; (80059cc <__malloc_lock+0x8>)
 80059c6:	f7ff bf13 	b.w	80057f0 <__retarget_lock_acquire_recursive>
 80059ca:	bf00      	nop
 80059cc:	20000348 	.word	0x20000348

080059d0 <__malloc_unlock>:
 80059d0:	4801      	ldr	r0, [pc, #4]	; (80059d8 <__malloc_unlock+0x8>)
 80059d2:	f7ff bf0e 	b.w	80057f2 <__retarget_lock_release_recursive>
 80059d6:	bf00      	nop
 80059d8:	20000348 	.word	0x20000348

080059dc <__ssputs_r>:
 80059dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059e0:	461f      	mov	r7, r3
 80059e2:	688e      	ldr	r6, [r1, #8]
 80059e4:	4682      	mov	sl, r0
 80059e6:	42be      	cmp	r6, r7
 80059e8:	460c      	mov	r4, r1
 80059ea:	4690      	mov	r8, r2
 80059ec:	680b      	ldr	r3, [r1, #0]
 80059ee:	d82c      	bhi.n	8005a4a <__ssputs_r+0x6e>
 80059f0:	898a      	ldrh	r2, [r1, #12]
 80059f2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80059f6:	d026      	beq.n	8005a46 <__ssputs_r+0x6a>
 80059f8:	6965      	ldr	r5, [r4, #20]
 80059fa:	6909      	ldr	r1, [r1, #16]
 80059fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a00:	eba3 0901 	sub.w	r9, r3, r1
 8005a04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a08:	1c7b      	adds	r3, r7, #1
 8005a0a:	444b      	add	r3, r9
 8005a0c:	106d      	asrs	r5, r5, #1
 8005a0e:	429d      	cmp	r5, r3
 8005a10:	bf38      	it	cc
 8005a12:	461d      	movcc	r5, r3
 8005a14:	0553      	lsls	r3, r2, #21
 8005a16:	d527      	bpl.n	8005a68 <__ssputs_r+0x8c>
 8005a18:	4629      	mov	r1, r5
 8005a1a:	f7ff ff53 	bl	80058c4 <_malloc_r>
 8005a1e:	4606      	mov	r6, r0
 8005a20:	b360      	cbz	r0, 8005a7c <__ssputs_r+0xa0>
 8005a22:	464a      	mov	r2, r9
 8005a24:	6921      	ldr	r1, [r4, #16]
 8005a26:	f000 fafd 	bl	8006024 <memcpy>
 8005a2a:	89a3      	ldrh	r3, [r4, #12]
 8005a2c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a34:	81a3      	strh	r3, [r4, #12]
 8005a36:	6126      	str	r6, [r4, #16]
 8005a38:	444e      	add	r6, r9
 8005a3a:	6026      	str	r6, [r4, #0]
 8005a3c:	463e      	mov	r6, r7
 8005a3e:	6165      	str	r5, [r4, #20]
 8005a40:	eba5 0509 	sub.w	r5, r5, r9
 8005a44:	60a5      	str	r5, [r4, #8]
 8005a46:	42be      	cmp	r6, r7
 8005a48:	d900      	bls.n	8005a4c <__ssputs_r+0x70>
 8005a4a:	463e      	mov	r6, r7
 8005a4c:	4632      	mov	r2, r6
 8005a4e:	4641      	mov	r1, r8
 8005a50:	6820      	ldr	r0, [r4, #0]
 8005a52:	f000 faaf 	bl	8005fb4 <memmove>
 8005a56:	2000      	movs	r0, #0
 8005a58:	68a3      	ldr	r3, [r4, #8]
 8005a5a:	1b9b      	subs	r3, r3, r6
 8005a5c:	60a3      	str	r3, [r4, #8]
 8005a5e:	6823      	ldr	r3, [r4, #0]
 8005a60:	4433      	add	r3, r6
 8005a62:	6023      	str	r3, [r4, #0]
 8005a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a68:	462a      	mov	r2, r5
 8005a6a:	f000 fae9 	bl	8006040 <_realloc_r>
 8005a6e:	4606      	mov	r6, r0
 8005a70:	2800      	cmp	r0, #0
 8005a72:	d1e0      	bne.n	8005a36 <__ssputs_r+0x5a>
 8005a74:	4650      	mov	r0, sl
 8005a76:	6921      	ldr	r1, [r4, #16]
 8005a78:	f7ff febc 	bl	80057f4 <_free_r>
 8005a7c:	230c      	movs	r3, #12
 8005a7e:	f8ca 3000 	str.w	r3, [sl]
 8005a82:	89a3      	ldrh	r3, [r4, #12]
 8005a84:	f04f 30ff 	mov.w	r0, #4294967295
 8005a88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a8c:	81a3      	strh	r3, [r4, #12]
 8005a8e:	e7e9      	b.n	8005a64 <__ssputs_r+0x88>

08005a90 <_svfiprintf_r>:
 8005a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a94:	4698      	mov	r8, r3
 8005a96:	898b      	ldrh	r3, [r1, #12]
 8005a98:	4607      	mov	r7, r0
 8005a9a:	061b      	lsls	r3, r3, #24
 8005a9c:	460d      	mov	r5, r1
 8005a9e:	4614      	mov	r4, r2
 8005aa0:	b09d      	sub	sp, #116	; 0x74
 8005aa2:	d50e      	bpl.n	8005ac2 <_svfiprintf_r+0x32>
 8005aa4:	690b      	ldr	r3, [r1, #16]
 8005aa6:	b963      	cbnz	r3, 8005ac2 <_svfiprintf_r+0x32>
 8005aa8:	2140      	movs	r1, #64	; 0x40
 8005aaa:	f7ff ff0b 	bl	80058c4 <_malloc_r>
 8005aae:	6028      	str	r0, [r5, #0]
 8005ab0:	6128      	str	r0, [r5, #16]
 8005ab2:	b920      	cbnz	r0, 8005abe <_svfiprintf_r+0x2e>
 8005ab4:	230c      	movs	r3, #12
 8005ab6:	603b      	str	r3, [r7, #0]
 8005ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8005abc:	e0d0      	b.n	8005c60 <_svfiprintf_r+0x1d0>
 8005abe:	2340      	movs	r3, #64	; 0x40
 8005ac0:	616b      	str	r3, [r5, #20]
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	9309      	str	r3, [sp, #36]	; 0x24
 8005ac6:	2320      	movs	r3, #32
 8005ac8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005acc:	2330      	movs	r3, #48	; 0x30
 8005ace:	f04f 0901 	mov.w	r9, #1
 8005ad2:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ad6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8005c78 <_svfiprintf_r+0x1e8>
 8005ada:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ade:	4623      	mov	r3, r4
 8005ae0:	469a      	mov	sl, r3
 8005ae2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ae6:	b10a      	cbz	r2, 8005aec <_svfiprintf_r+0x5c>
 8005ae8:	2a25      	cmp	r2, #37	; 0x25
 8005aea:	d1f9      	bne.n	8005ae0 <_svfiprintf_r+0x50>
 8005aec:	ebba 0b04 	subs.w	fp, sl, r4
 8005af0:	d00b      	beq.n	8005b0a <_svfiprintf_r+0x7a>
 8005af2:	465b      	mov	r3, fp
 8005af4:	4622      	mov	r2, r4
 8005af6:	4629      	mov	r1, r5
 8005af8:	4638      	mov	r0, r7
 8005afa:	f7ff ff6f 	bl	80059dc <__ssputs_r>
 8005afe:	3001      	adds	r0, #1
 8005b00:	f000 80a9 	beq.w	8005c56 <_svfiprintf_r+0x1c6>
 8005b04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b06:	445a      	add	r2, fp
 8005b08:	9209      	str	r2, [sp, #36]	; 0x24
 8005b0a:	f89a 3000 	ldrb.w	r3, [sl]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	f000 80a1 	beq.w	8005c56 <_svfiprintf_r+0x1c6>
 8005b14:	2300      	movs	r3, #0
 8005b16:	f04f 32ff 	mov.w	r2, #4294967295
 8005b1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b1e:	f10a 0a01 	add.w	sl, sl, #1
 8005b22:	9304      	str	r3, [sp, #16]
 8005b24:	9307      	str	r3, [sp, #28]
 8005b26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b2a:	931a      	str	r3, [sp, #104]	; 0x68
 8005b2c:	4654      	mov	r4, sl
 8005b2e:	2205      	movs	r2, #5
 8005b30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b34:	4850      	ldr	r0, [pc, #320]	; (8005c78 <_svfiprintf_r+0x1e8>)
 8005b36:	f000 fa67 	bl	8006008 <memchr>
 8005b3a:	9a04      	ldr	r2, [sp, #16]
 8005b3c:	b9d8      	cbnz	r0, 8005b76 <_svfiprintf_r+0xe6>
 8005b3e:	06d0      	lsls	r0, r2, #27
 8005b40:	bf44      	itt	mi
 8005b42:	2320      	movmi	r3, #32
 8005b44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b48:	0711      	lsls	r1, r2, #28
 8005b4a:	bf44      	itt	mi
 8005b4c:	232b      	movmi	r3, #43	; 0x2b
 8005b4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b52:	f89a 3000 	ldrb.w	r3, [sl]
 8005b56:	2b2a      	cmp	r3, #42	; 0x2a
 8005b58:	d015      	beq.n	8005b86 <_svfiprintf_r+0xf6>
 8005b5a:	4654      	mov	r4, sl
 8005b5c:	2000      	movs	r0, #0
 8005b5e:	f04f 0c0a 	mov.w	ip, #10
 8005b62:	9a07      	ldr	r2, [sp, #28]
 8005b64:	4621      	mov	r1, r4
 8005b66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b6a:	3b30      	subs	r3, #48	; 0x30
 8005b6c:	2b09      	cmp	r3, #9
 8005b6e:	d94d      	bls.n	8005c0c <_svfiprintf_r+0x17c>
 8005b70:	b1b0      	cbz	r0, 8005ba0 <_svfiprintf_r+0x110>
 8005b72:	9207      	str	r2, [sp, #28]
 8005b74:	e014      	b.n	8005ba0 <_svfiprintf_r+0x110>
 8005b76:	eba0 0308 	sub.w	r3, r0, r8
 8005b7a:	fa09 f303 	lsl.w	r3, r9, r3
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	46a2      	mov	sl, r4
 8005b82:	9304      	str	r3, [sp, #16]
 8005b84:	e7d2      	b.n	8005b2c <_svfiprintf_r+0x9c>
 8005b86:	9b03      	ldr	r3, [sp, #12]
 8005b88:	1d19      	adds	r1, r3, #4
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	9103      	str	r1, [sp, #12]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	bfbb      	ittet	lt
 8005b92:	425b      	neglt	r3, r3
 8005b94:	f042 0202 	orrlt.w	r2, r2, #2
 8005b98:	9307      	strge	r3, [sp, #28]
 8005b9a:	9307      	strlt	r3, [sp, #28]
 8005b9c:	bfb8      	it	lt
 8005b9e:	9204      	strlt	r2, [sp, #16]
 8005ba0:	7823      	ldrb	r3, [r4, #0]
 8005ba2:	2b2e      	cmp	r3, #46	; 0x2e
 8005ba4:	d10c      	bne.n	8005bc0 <_svfiprintf_r+0x130>
 8005ba6:	7863      	ldrb	r3, [r4, #1]
 8005ba8:	2b2a      	cmp	r3, #42	; 0x2a
 8005baa:	d134      	bne.n	8005c16 <_svfiprintf_r+0x186>
 8005bac:	9b03      	ldr	r3, [sp, #12]
 8005bae:	3402      	adds	r4, #2
 8005bb0:	1d1a      	adds	r2, r3, #4
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	9203      	str	r2, [sp, #12]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	bfb8      	it	lt
 8005bba:	f04f 33ff 	movlt.w	r3, #4294967295
 8005bbe:	9305      	str	r3, [sp, #20]
 8005bc0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8005c7c <_svfiprintf_r+0x1ec>
 8005bc4:	2203      	movs	r2, #3
 8005bc6:	4650      	mov	r0, sl
 8005bc8:	7821      	ldrb	r1, [r4, #0]
 8005bca:	f000 fa1d 	bl	8006008 <memchr>
 8005bce:	b138      	cbz	r0, 8005be0 <_svfiprintf_r+0x150>
 8005bd0:	2240      	movs	r2, #64	; 0x40
 8005bd2:	9b04      	ldr	r3, [sp, #16]
 8005bd4:	eba0 000a 	sub.w	r0, r0, sl
 8005bd8:	4082      	lsls	r2, r0
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	3401      	adds	r4, #1
 8005bde:	9304      	str	r3, [sp, #16]
 8005be0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005be4:	2206      	movs	r2, #6
 8005be6:	4826      	ldr	r0, [pc, #152]	; (8005c80 <_svfiprintf_r+0x1f0>)
 8005be8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005bec:	f000 fa0c 	bl	8006008 <memchr>
 8005bf0:	2800      	cmp	r0, #0
 8005bf2:	d038      	beq.n	8005c66 <_svfiprintf_r+0x1d6>
 8005bf4:	4b23      	ldr	r3, [pc, #140]	; (8005c84 <_svfiprintf_r+0x1f4>)
 8005bf6:	bb1b      	cbnz	r3, 8005c40 <_svfiprintf_r+0x1b0>
 8005bf8:	9b03      	ldr	r3, [sp, #12]
 8005bfa:	3307      	adds	r3, #7
 8005bfc:	f023 0307 	bic.w	r3, r3, #7
 8005c00:	3308      	adds	r3, #8
 8005c02:	9303      	str	r3, [sp, #12]
 8005c04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c06:	4433      	add	r3, r6
 8005c08:	9309      	str	r3, [sp, #36]	; 0x24
 8005c0a:	e768      	b.n	8005ade <_svfiprintf_r+0x4e>
 8005c0c:	460c      	mov	r4, r1
 8005c0e:	2001      	movs	r0, #1
 8005c10:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c14:	e7a6      	b.n	8005b64 <_svfiprintf_r+0xd4>
 8005c16:	2300      	movs	r3, #0
 8005c18:	f04f 0c0a 	mov.w	ip, #10
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	3401      	adds	r4, #1
 8005c20:	9305      	str	r3, [sp, #20]
 8005c22:	4620      	mov	r0, r4
 8005c24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c28:	3a30      	subs	r2, #48	; 0x30
 8005c2a:	2a09      	cmp	r2, #9
 8005c2c:	d903      	bls.n	8005c36 <_svfiprintf_r+0x1a6>
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d0c6      	beq.n	8005bc0 <_svfiprintf_r+0x130>
 8005c32:	9105      	str	r1, [sp, #20]
 8005c34:	e7c4      	b.n	8005bc0 <_svfiprintf_r+0x130>
 8005c36:	4604      	mov	r4, r0
 8005c38:	2301      	movs	r3, #1
 8005c3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c3e:	e7f0      	b.n	8005c22 <_svfiprintf_r+0x192>
 8005c40:	ab03      	add	r3, sp, #12
 8005c42:	9300      	str	r3, [sp, #0]
 8005c44:	462a      	mov	r2, r5
 8005c46:	4638      	mov	r0, r7
 8005c48:	4b0f      	ldr	r3, [pc, #60]	; (8005c88 <_svfiprintf_r+0x1f8>)
 8005c4a:	a904      	add	r1, sp, #16
 8005c4c:	f3af 8000 	nop.w
 8005c50:	1c42      	adds	r2, r0, #1
 8005c52:	4606      	mov	r6, r0
 8005c54:	d1d6      	bne.n	8005c04 <_svfiprintf_r+0x174>
 8005c56:	89ab      	ldrh	r3, [r5, #12]
 8005c58:	065b      	lsls	r3, r3, #25
 8005c5a:	f53f af2d 	bmi.w	8005ab8 <_svfiprintf_r+0x28>
 8005c5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c60:	b01d      	add	sp, #116	; 0x74
 8005c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c66:	ab03      	add	r3, sp, #12
 8005c68:	9300      	str	r3, [sp, #0]
 8005c6a:	462a      	mov	r2, r5
 8005c6c:	4638      	mov	r0, r7
 8005c6e:	4b06      	ldr	r3, [pc, #24]	; (8005c88 <_svfiprintf_r+0x1f8>)
 8005c70:	a904      	add	r1, sp, #16
 8005c72:	f000 f87d 	bl	8005d70 <_printf_i>
 8005c76:	e7eb      	b.n	8005c50 <_svfiprintf_r+0x1c0>
 8005c78:	0800642f 	.word	0x0800642f
 8005c7c:	08006435 	.word	0x08006435
 8005c80:	08006439 	.word	0x08006439
 8005c84:	00000000 	.word	0x00000000
 8005c88:	080059dd 	.word	0x080059dd

08005c8c <_printf_common>:
 8005c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c90:	4616      	mov	r6, r2
 8005c92:	4699      	mov	r9, r3
 8005c94:	688a      	ldr	r2, [r1, #8]
 8005c96:	690b      	ldr	r3, [r1, #16]
 8005c98:	4607      	mov	r7, r0
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	bfb8      	it	lt
 8005c9e:	4613      	movlt	r3, r2
 8005ca0:	6033      	str	r3, [r6, #0]
 8005ca2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ca6:	460c      	mov	r4, r1
 8005ca8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005cac:	b10a      	cbz	r2, 8005cb2 <_printf_common+0x26>
 8005cae:	3301      	adds	r3, #1
 8005cb0:	6033      	str	r3, [r6, #0]
 8005cb2:	6823      	ldr	r3, [r4, #0]
 8005cb4:	0699      	lsls	r1, r3, #26
 8005cb6:	bf42      	ittt	mi
 8005cb8:	6833      	ldrmi	r3, [r6, #0]
 8005cba:	3302      	addmi	r3, #2
 8005cbc:	6033      	strmi	r3, [r6, #0]
 8005cbe:	6825      	ldr	r5, [r4, #0]
 8005cc0:	f015 0506 	ands.w	r5, r5, #6
 8005cc4:	d106      	bne.n	8005cd4 <_printf_common+0x48>
 8005cc6:	f104 0a19 	add.w	sl, r4, #25
 8005cca:	68e3      	ldr	r3, [r4, #12]
 8005ccc:	6832      	ldr	r2, [r6, #0]
 8005cce:	1a9b      	subs	r3, r3, r2
 8005cd0:	42ab      	cmp	r3, r5
 8005cd2:	dc2b      	bgt.n	8005d2c <_printf_common+0xa0>
 8005cd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005cd8:	1e13      	subs	r3, r2, #0
 8005cda:	6822      	ldr	r2, [r4, #0]
 8005cdc:	bf18      	it	ne
 8005cde:	2301      	movne	r3, #1
 8005ce0:	0692      	lsls	r2, r2, #26
 8005ce2:	d430      	bmi.n	8005d46 <_printf_common+0xba>
 8005ce4:	4649      	mov	r1, r9
 8005ce6:	4638      	mov	r0, r7
 8005ce8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005cec:	47c0      	blx	r8
 8005cee:	3001      	adds	r0, #1
 8005cf0:	d023      	beq.n	8005d3a <_printf_common+0xae>
 8005cf2:	6823      	ldr	r3, [r4, #0]
 8005cf4:	6922      	ldr	r2, [r4, #16]
 8005cf6:	f003 0306 	and.w	r3, r3, #6
 8005cfa:	2b04      	cmp	r3, #4
 8005cfc:	bf14      	ite	ne
 8005cfe:	2500      	movne	r5, #0
 8005d00:	6833      	ldreq	r3, [r6, #0]
 8005d02:	f04f 0600 	mov.w	r6, #0
 8005d06:	bf08      	it	eq
 8005d08:	68e5      	ldreq	r5, [r4, #12]
 8005d0a:	f104 041a 	add.w	r4, r4, #26
 8005d0e:	bf08      	it	eq
 8005d10:	1aed      	subeq	r5, r5, r3
 8005d12:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005d16:	bf08      	it	eq
 8005d18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	bfc4      	itt	gt
 8005d20:	1a9b      	subgt	r3, r3, r2
 8005d22:	18ed      	addgt	r5, r5, r3
 8005d24:	42b5      	cmp	r5, r6
 8005d26:	d11a      	bne.n	8005d5e <_printf_common+0xd2>
 8005d28:	2000      	movs	r0, #0
 8005d2a:	e008      	b.n	8005d3e <_printf_common+0xb2>
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	4652      	mov	r2, sl
 8005d30:	4649      	mov	r1, r9
 8005d32:	4638      	mov	r0, r7
 8005d34:	47c0      	blx	r8
 8005d36:	3001      	adds	r0, #1
 8005d38:	d103      	bne.n	8005d42 <_printf_common+0xb6>
 8005d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d42:	3501      	adds	r5, #1
 8005d44:	e7c1      	b.n	8005cca <_printf_common+0x3e>
 8005d46:	2030      	movs	r0, #48	; 0x30
 8005d48:	18e1      	adds	r1, r4, r3
 8005d4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d4e:	1c5a      	adds	r2, r3, #1
 8005d50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d54:	4422      	add	r2, r4
 8005d56:	3302      	adds	r3, #2
 8005d58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d5c:	e7c2      	b.n	8005ce4 <_printf_common+0x58>
 8005d5e:	2301      	movs	r3, #1
 8005d60:	4622      	mov	r2, r4
 8005d62:	4649      	mov	r1, r9
 8005d64:	4638      	mov	r0, r7
 8005d66:	47c0      	blx	r8
 8005d68:	3001      	adds	r0, #1
 8005d6a:	d0e6      	beq.n	8005d3a <_printf_common+0xae>
 8005d6c:	3601      	adds	r6, #1
 8005d6e:	e7d9      	b.n	8005d24 <_printf_common+0x98>

08005d70 <_printf_i>:
 8005d70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d74:	7e0f      	ldrb	r7, [r1, #24]
 8005d76:	4691      	mov	r9, r2
 8005d78:	2f78      	cmp	r7, #120	; 0x78
 8005d7a:	4680      	mov	r8, r0
 8005d7c:	460c      	mov	r4, r1
 8005d7e:	469a      	mov	sl, r3
 8005d80:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d86:	d807      	bhi.n	8005d98 <_printf_i+0x28>
 8005d88:	2f62      	cmp	r7, #98	; 0x62
 8005d8a:	d80a      	bhi.n	8005da2 <_printf_i+0x32>
 8005d8c:	2f00      	cmp	r7, #0
 8005d8e:	f000 80d5 	beq.w	8005f3c <_printf_i+0x1cc>
 8005d92:	2f58      	cmp	r7, #88	; 0x58
 8005d94:	f000 80c1 	beq.w	8005f1a <_printf_i+0x1aa>
 8005d98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005da0:	e03a      	b.n	8005e18 <_printf_i+0xa8>
 8005da2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005da6:	2b15      	cmp	r3, #21
 8005da8:	d8f6      	bhi.n	8005d98 <_printf_i+0x28>
 8005daa:	a101      	add	r1, pc, #4	; (adr r1, 8005db0 <_printf_i+0x40>)
 8005dac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005db0:	08005e09 	.word	0x08005e09
 8005db4:	08005e1d 	.word	0x08005e1d
 8005db8:	08005d99 	.word	0x08005d99
 8005dbc:	08005d99 	.word	0x08005d99
 8005dc0:	08005d99 	.word	0x08005d99
 8005dc4:	08005d99 	.word	0x08005d99
 8005dc8:	08005e1d 	.word	0x08005e1d
 8005dcc:	08005d99 	.word	0x08005d99
 8005dd0:	08005d99 	.word	0x08005d99
 8005dd4:	08005d99 	.word	0x08005d99
 8005dd8:	08005d99 	.word	0x08005d99
 8005ddc:	08005f23 	.word	0x08005f23
 8005de0:	08005e49 	.word	0x08005e49
 8005de4:	08005edd 	.word	0x08005edd
 8005de8:	08005d99 	.word	0x08005d99
 8005dec:	08005d99 	.word	0x08005d99
 8005df0:	08005f45 	.word	0x08005f45
 8005df4:	08005d99 	.word	0x08005d99
 8005df8:	08005e49 	.word	0x08005e49
 8005dfc:	08005d99 	.word	0x08005d99
 8005e00:	08005d99 	.word	0x08005d99
 8005e04:	08005ee5 	.word	0x08005ee5
 8005e08:	682b      	ldr	r3, [r5, #0]
 8005e0a:	1d1a      	adds	r2, r3, #4
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	602a      	str	r2, [r5, #0]
 8005e10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e0a0      	b.n	8005f5e <_printf_i+0x1ee>
 8005e1c:	6820      	ldr	r0, [r4, #0]
 8005e1e:	682b      	ldr	r3, [r5, #0]
 8005e20:	0607      	lsls	r7, r0, #24
 8005e22:	f103 0104 	add.w	r1, r3, #4
 8005e26:	6029      	str	r1, [r5, #0]
 8005e28:	d501      	bpl.n	8005e2e <_printf_i+0xbe>
 8005e2a:	681e      	ldr	r6, [r3, #0]
 8005e2c:	e003      	b.n	8005e36 <_printf_i+0xc6>
 8005e2e:	0646      	lsls	r6, r0, #25
 8005e30:	d5fb      	bpl.n	8005e2a <_printf_i+0xba>
 8005e32:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005e36:	2e00      	cmp	r6, #0
 8005e38:	da03      	bge.n	8005e42 <_printf_i+0xd2>
 8005e3a:	232d      	movs	r3, #45	; 0x2d
 8005e3c:	4276      	negs	r6, r6
 8005e3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e42:	230a      	movs	r3, #10
 8005e44:	4859      	ldr	r0, [pc, #356]	; (8005fac <_printf_i+0x23c>)
 8005e46:	e012      	b.n	8005e6e <_printf_i+0xfe>
 8005e48:	682b      	ldr	r3, [r5, #0]
 8005e4a:	6820      	ldr	r0, [r4, #0]
 8005e4c:	1d19      	adds	r1, r3, #4
 8005e4e:	6029      	str	r1, [r5, #0]
 8005e50:	0605      	lsls	r5, r0, #24
 8005e52:	d501      	bpl.n	8005e58 <_printf_i+0xe8>
 8005e54:	681e      	ldr	r6, [r3, #0]
 8005e56:	e002      	b.n	8005e5e <_printf_i+0xee>
 8005e58:	0641      	lsls	r1, r0, #25
 8005e5a:	d5fb      	bpl.n	8005e54 <_printf_i+0xe4>
 8005e5c:	881e      	ldrh	r6, [r3, #0]
 8005e5e:	2f6f      	cmp	r7, #111	; 0x6f
 8005e60:	bf0c      	ite	eq
 8005e62:	2308      	moveq	r3, #8
 8005e64:	230a      	movne	r3, #10
 8005e66:	4851      	ldr	r0, [pc, #324]	; (8005fac <_printf_i+0x23c>)
 8005e68:	2100      	movs	r1, #0
 8005e6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e6e:	6865      	ldr	r5, [r4, #4]
 8005e70:	2d00      	cmp	r5, #0
 8005e72:	bfa8      	it	ge
 8005e74:	6821      	ldrge	r1, [r4, #0]
 8005e76:	60a5      	str	r5, [r4, #8]
 8005e78:	bfa4      	itt	ge
 8005e7a:	f021 0104 	bicge.w	r1, r1, #4
 8005e7e:	6021      	strge	r1, [r4, #0]
 8005e80:	b90e      	cbnz	r6, 8005e86 <_printf_i+0x116>
 8005e82:	2d00      	cmp	r5, #0
 8005e84:	d04b      	beq.n	8005f1e <_printf_i+0x1ae>
 8005e86:	4615      	mov	r5, r2
 8005e88:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e8c:	fb03 6711 	mls	r7, r3, r1, r6
 8005e90:	5dc7      	ldrb	r7, [r0, r7]
 8005e92:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e96:	4637      	mov	r7, r6
 8005e98:	42bb      	cmp	r3, r7
 8005e9a:	460e      	mov	r6, r1
 8005e9c:	d9f4      	bls.n	8005e88 <_printf_i+0x118>
 8005e9e:	2b08      	cmp	r3, #8
 8005ea0:	d10b      	bne.n	8005eba <_printf_i+0x14a>
 8005ea2:	6823      	ldr	r3, [r4, #0]
 8005ea4:	07de      	lsls	r6, r3, #31
 8005ea6:	d508      	bpl.n	8005eba <_printf_i+0x14a>
 8005ea8:	6923      	ldr	r3, [r4, #16]
 8005eaa:	6861      	ldr	r1, [r4, #4]
 8005eac:	4299      	cmp	r1, r3
 8005eae:	bfde      	ittt	le
 8005eb0:	2330      	movle	r3, #48	; 0x30
 8005eb2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005eb6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005eba:	1b52      	subs	r2, r2, r5
 8005ebc:	6122      	str	r2, [r4, #16]
 8005ebe:	464b      	mov	r3, r9
 8005ec0:	4621      	mov	r1, r4
 8005ec2:	4640      	mov	r0, r8
 8005ec4:	f8cd a000 	str.w	sl, [sp]
 8005ec8:	aa03      	add	r2, sp, #12
 8005eca:	f7ff fedf 	bl	8005c8c <_printf_common>
 8005ece:	3001      	adds	r0, #1
 8005ed0:	d14a      	bne.n	8005f68 <_printf_i+0x1f8>
 8005ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ed6:	b004      	add	sp, #16
 8005ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005edc:	6823      	ldr	r3, [r4, #0]
 8005ede:	f043 0320 	orr.w	r3, r3, #32
 8005ee2:	6023      	str	r3, [r4, #0]
 8005ee4:	2778      	movs	r7, #120	; 0x78
 8005ee6:	4832      	ldr	r0, [pc, #200]	; (8005fb0 <_printf_i+0x240>)
 8005ee8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005eec:	6823      	ldr	r3, [r4, #0]
 8005eee:	6829      	ldr	r1, [r5, #0]
 8005ef0:	061f      	lsls	r7, r3, #24
 8005ef2:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ef6:	d402      	bmi.n	8005efe <_printf_i+0x18e>
 8005ef8:	065f      	lsls	r7, r3, #25
 8005efa:	bf48      	it	mi
 8005efc:	b2b6      	uxthmi	r6, r6
 8005efe:	07df      	lsls	r7, r3, #31
 8005f00:	bf48      	it	mi
 8005f02:	f043 0320 	orrmi.w	r3, r3, #32
 8005f06:	6029      	str	r1, [r5, #0]
 8005f08:	bf48      	it	mi
 8005f0a:	6023      	strmi	r3, [r4, #0]
 8005f0c:	b91e      	cbnz	r6, 8005f16 <_printf_i+0x1a6>
 8005f0e:	6823      	ldr	r3, [r4, #0]
 8005f10:	f023 0320 	bic.w	r3, r3, #32
 8005f14:	6023      	str	r3, [r4, #0]
 8005f16:	2310      	movs	r3, #16
 8005f18:	e7a6      	b.n	8005e68 <_printf_i+0xf8>
 8005f1a:	4824      	ldr	r0, [pc, #144]	; (8005fac <_printf_i+0x23c>)
 8005f1c:	e7e4      	b.n	8005ee8 <_printf_i+0x178>
 8005f1e:	4615      	mov	r5, r2
 8005f20:	e7bd      	b.n	8005e9e <_printf_i+0x12e>
 8005f22:	682b      	ldr	r3, [r5, #0]
 8005f24:	6826      	ldr	r6, [r4, #0]
 8005f26:	1d18      	adds	r0, r3, #4
 8005f28:	6961      	ldr	r1, [r4, #20]
 8005f2a:	6028      	str	r0, [r5, #0]
 8005f2c:	0635      	lsls	r5, r6, #24
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	d501      	bpl.n	8005f36 <_printf_i+0x1c6>
 8005f32:	6019      	str	r1, [r3, #0]
 8005f34:	e002      	b.n	8005f3c <_printf_i+0x1cc>
 8005f36:	0670      	lsls	r0, r6, #25
 8005f38:	d5fb      	bpl.n	8005f32 <_printf_i+0x1c2>
 8005f3a:	8019      	strh	r1, [r3, #0]
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	4615      	mov	r5, r2
 8005f40:	6123      	str	r3, [r4, #16]
 8005f42:	e7bc      	b.n	8005ebe <_printf_i+0x14e>
 8005f44:	682b      	ldr	r3, [r5, #0]
 8005f46:	2100      	movs	r1, #0
 8005f48:	1d1a      	adds	r2, r3, #4
 8005f4a:	602a      	str	r2, [r5, #0]
 8005f4c:	681d      	ldr	r5, [r3, #0]
 8005f4e:	6862      	ldr	r2, [r4, #4]
 8005f50:	4628      	mov	r0, r5
 8005f52:	f000 f859 	bl	8006008 <memchr>
 8005f56:	b108      	cbz	r0, 8005f5c <_printf_i+0x1ec>
 8005f58:	1b40      	subs	r0, r0, r5
 8005f5a:	6060      	str	r0, [r4, #4]
 8005f5c:	6863      	ldr	r3, [r4, #4]
 8005f5e:	6123      	str	r3, [r4, #16]
 8005f60:	2300      	movs	r3, #0
 8005f62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f66:	e7aa      	b.n	8005ebe <_printf_i+0x14e>
 8005f68:	462a      	mov	r2, r5
 8005f6a:	4649      	mov	r1, r9
 8005f6c:	4640      	mov	r0, r8
 8005f6e:	6923      	ldr	r3, [r4, #16]
 8005f70:	47d0      	blx	sl
 8005f72:	3001      	adds	r0, #1
 8005f74:	d0ad      	beq.n	8005ed2 <_printf_i+0x162>
 8005f76:	6823      	ldr	r3, [r4, #0]
 8005f78:	079b      	lsls	r3, r3, #30
 8005f7a:	d413      	bmi.n	8005fa4 <_printf_i+0x234>
 8005f7c:	68e0      	ldr	r0, [r4, #12]
 8005f7e:	9b03      	ldr	r3, [sp, #12]
 8005f80:	4298      	cmp	r0, r3
 8005f82:	bfb8      	it	lt
 8005f84:	4618      	movlt	r0, r3
 8005f86:	e7a6      	b.n	8005ed6 <_printf_i+0x166>
 8005f88:	2301      	movs	r3, #1
 8005f8a:	4632      	mov	r2, r6
 8005f8c:	4649      	mov	r1, r9
 8005f8e:	4640      	mov	r0, r8
 8005f90:	47d0      	blx	sl
 8005f92:	3001      	adds	r0, #1
 8005f94:	d09d      	beq.n	8005ed2 <_printf_i+0x162>
 8005f96:	3501      	adds	r5, #1
 8005f98:	68e3      	ldr	r3, [r4, #12]
 8005f9a:	9903      	ldr	r1, [sp, #12]
 8005f9c:	1a5b      	subs	r3, r3, r1
 8005f9e:	42ab      	cmp	r3, r5
 8005fa0:	dcf2      	bgt.n	8005f88 <_printf_i+0x218>
 8005fa2:	e7eb      	b.n	8005f7c <_printf_i+0x20c>
 8005fa4:	2500      	movs	r5, #0
 8005fa6:	f104 0619 	add.w	r6, r4, #25
 8005faa:	e7f5      	b.n	8005f98 <_printf_i+0x228>
 8005fac:	08006440 	.word	0x08006440
 8005fb0:	08006451 	.word	0x08006451

08005fb4 <memmove>:
 8005fb4:	4288      	cmp	r0, r1
 8005fb6:	b510      	push	{r4, lr}
 8005fb8:	eb01 0402 	add.w	r4, r1, r2
 8005fbc:	d902      	bls.n	8005fc4 <memmove+0x10>
 8005fbe:	4284      	cmp	r4, r0
 8005fc0:	4623      	mov	r3, r4
 8005fc2:	d807      	bhi.n	8005fd4 <memmove+0x20>
 8005fc4:	1e43      	subs	r3, r0, #1
 8005fc6:	42a1      	cmp	r1, r4
 8005fc8:	d008      	beq.n	8005fdc <memmove+0x28>
 8005fca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005fce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005fd2:	e7f8      	b.n	8005fc6 <memmove+0x12>
 8005fd4:	4601      	mov	r1, r0
 8005fd6:	4402      	add	r2, r0
 8005fd8:	428a      	cmp	r2, r1
 8005fda:	d100      	bne.n	8005fde <memmove+0x2a>
 8005fdc:	bd10      	pop	{r4, pc}
 8005fde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005fe2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005fe6:	e7f7      	b.n	8005fd8 <memmove+0x24>

08005fe8 <_sbrk_r>:
 8005fe8:	b538      	push	{r3, r4, r5, lr}
 8005fea:	2300      	movs	r3, #0
 8005fec:	4d05      	ldr	r5, [pc, #20]	; (8006004 <_sbrk_r+0x1c>)
 8005fee:	4604      	mov	r4, r0
 8005ff0:	4608      	mov	r0, r1
 8005ff2:	602b      	str	r3, [r5, #0]
 8005ff4:	f7fb fbbc 	bl	8001770 <_sbrk>
 8005ff8:	1c43      	adds	r3, r0, #1
 8005ffa:	d102      	bne.n	8006002 <_sbrk_r+0x1a>
 8005ffc:	682b      	ldr	r3, [r5, #0]
 8005ffe:	b103      	cbz	r3, 8006002 <_sbrk_r+0x1a>
 8006000:	6023      	str	r3, [r4, #0]
 8006002:	bd38      	pop	{r3, r4, r5, pc}
 8006004:	20000344 	.word	0x20000344

08006008 <memchr>:
 8006008:	4603      	mov	r3, r0
 800600a:	b510      	push	{r4, lr}
 800600c:	b2c9      	uxtb	r1, r1
 800600e:	4402      	add	r2, r0
 8006010:	4293      	cmp	r3, r2
 8006012:	4618      	mov	r0, r3
 8006014:	d101      	bne.n	800601a <memchr+0x12>
 8006016:	2000      	movs	r0, #0
 8006018:	e003      	b.n	8006022 <memchr+0x1a>
 800601a:	7804      	ldrb	r4, [r0, #0]
 800601c:	3301      	adds	r3, #1
 800601e:	428c      	cmp	r4, r1
 8006020:	d1f6      	bne.n	8006010 <memchr+0x8>
 8006022:	bd10      	pop	{r4, pc}

08006024 <memcpy>:
 8006024:	440a      	add	r2, r1
 8006026:	4291      	cmp	r1, r2
 8006028:	f100 33ff 	add.w	r3, r0, #4294967295
 800602c:	d100      	bne.n	8006030 <memcpy+0xc>
 800602e:	4770      	bx	lr
 8006030:	b510      	push	{r4, lr}
 8006032:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006036:	4291      	cmp	r1, r2
 8006038:	f803 4f01 	strb.w	r4, [r3, #1]!
 800603c:	d1f9      	bne.n	8006032 <memcpy+0xe>
 800603e:	bd10      	pop	{r4, pc}

08006040 <_realloc_r>:
 8006040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006044:	4680      	mov	r8, r0
 8006046:	4614      	mov	r4, r2
 8006048:	460e      	mov	r6, r1
 800604a:	b921      	cbnz	r1, 8006056 <_realloc_r+0x16>
 800604c:	4611      	mov	r1, r2
 800604e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006052:	f7ff bc37 	b.w	80058c4 <_malloc_r>
 8006056:	b92a      	cbnz	r2, 8006064 <_realloc_r+0x24>
 8006058:	f7ff fbcc 	bl	80057f4 <_free_r>
 800605c:	4625      	mov	r5, r4
 800605e:	4628      	mov	r0, r5
 8006060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006064:	f000 f81b 	bl	800609e <_malloc_usable_size_r>
 8006068:	4284      	cmp	r4, r0
 800606a:	4607      	mov	r7, r0
 800606c:	d802      	bhi.n	8006074 <_realloc_r+0x34>
 800606e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006072:	d812      	bhi.n	800609a <_realloc_r+0x5a>
 8006074:	4621      	mov	r1, r4
 8006076:	4640      	mov	r0, r8
 8006078:	f7ff fc24 	bl	80058c4 <_malloc_r>
 800607c:	4605      	mov	r5, r0
 800607e:	2800      	cmp	r0, #0
 8006080:	d0ed      	beq.n	800605e <_realloc_r+0x1e>
 8006082:	42bc      	cmp	r4, r7
 8006084:	4622      	mov	r2, r4
 8006086:	4631      	mov	r1, r6
 8006088:	bf28      	it	cs
 800608a:	463a      	movcs	r2, r7
 800608c:	f7ff ffca 	bl	8006024 <memcpy>
 8006090:	4631      	mov	r1, r6
 8006092:	4640      	mov	r0, r8
 8006094:	f7ff fbae 	bl	80057f4 <_free_r>
 8006098:	e7e1      	b.n	800605e <_realloc_r+0x1e>
 800609a:	4635      	mov	r5, r6
 800609c:	e7df      	b.n	800605e <_realloc_r+0x1e>

0800609e <_malloc_usable_size_r>:
 800609e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060a2:	1f18      	subs	r0, r3, #4
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	bfbc      	itt	lt
 80060a8:	580b      	ldrlt	r3, [r1, r0]
 80060aa:	18c0      	addlt	r0, r0, r3
 80060ac:	4770      	bx	lr
	...

080060b0 <_init>:
 80060b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060b2:	bf00      	nop
 80060b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060b6:	bc08      	pop	{r3}
 80060b8:	469e      	mov	lr, r3
 80060ba:	4770      	bx	lr

080060bc <_fini>:
 80060bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060be:	bf00      	nop
 80060c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060c2:	bc08      	pop	{r3}
 80060c4:	469e      	mov	lr, r3
 80060c6:	4770      	bx	lr
