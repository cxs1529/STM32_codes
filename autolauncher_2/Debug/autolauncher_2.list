
autolauncher_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005454  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000344  08005560  08005560  00015560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058a4  080058a4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080058a4  080058a4  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080058a4  080058a4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058a4  080058a4  000158a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058a8  080058a8  000158a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080058ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  2000005c  08005908  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000030c  08005908  0002030c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010144  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000271d  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ff8  00000000  00000000  00032930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c8c  00000000  00000000  00033928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018737  00000000  00000000  000345b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001483f  00000000  00000000  0004cceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008fffd  00000000  00000000  0006152a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004840  00000000  00000000  000f1528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000f5d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005548 	.word	0x08005548

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08005548 	.word	0x08005548

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000162:	1d3b      	adds	r3, r7, #4
 8000164:	2200      	movs	r2, #0
 8000166:	601a      	str	r2, [r3, #0]
 8000168:	605a      	str	r2, [r3, #4]
 800016a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800016c:	4b18      	ldr	r3, [pc, #96]	; (80001d0 <MX_ADC1_Init+0x74>)
 800016e:	4a19      	ldr	r2, [pc, #100]	; (80001d4 <MX_ADC1_Init+0x78>)
 8000170:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000172:	4b17      	ldr	r3, [pc, #92]	; (80001d0 <MX_ADC1_Init+0x74>)
 8000174:	2200      	movs	r2, #0
 8000176:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000178:	4b15      	ldr	r3, [pc, #84]	; (80001d0 <MX_ADC1_Init+0x74>)
 800017a:	2200      	movs	r2, #0
 800017c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800017e:	4b14      	ldr	r3, [pc, #80]	; (80001d0 <MX_ADC1_Init+0x74>)
 8000180:	2200      	movs	r2, #0
 8000182:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <MX_ADC1_Init+0x74>)
 8000186:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800018a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800018c:	4b10      	ldr	r3, [pc, #64]	; (80001d0 <MX_ADC1_Init+0x74>)
 800018e:	2200      	movs	r2, #0
 8000190:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000192:	4b0f      	ldr	r3, [pc, #60]	; (80001d0 <MX_ADC1_Init+0x74>)
 8000194:	2201      	movs	r2, #1
 8000196:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000198:	480d      	ldr	r0, [pc, #52]	; (80001d0 <MX_ADC1_Init+0x74>)
 800019a:	f000 ffbf 	bl	800111c <HAL_ADC_Init>
 800019e:	4603      	mov	r3, r0
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d001      	beq.n	80001a8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80001a4:	f000 fd36 	bl	8000c14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80001a8:	230a      	movs	r3, #10
 80001aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80001ac:	2301      	movs	r3, #1
 80001ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001b0:	2300      	movs	r3, #0
 80001b2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001b4:	1d3b      	adds	r3, r7, #4
 80001b6:	4619      	mov	r1, r3
 80001b8:	4805      	ldr	r0, [pc, #20]	; (80001d0 <MX_ADC1_Init+0x74>)
 80001ba:	f001 fa73 	bl	80016a4 <HAL_ADC_ConfigChannel>
 80001be:	4603      	mov	r3, r0
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d001      	beq.n	80001c8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80001c4:	f000 fd26 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80001c8:	bf00      	nop
 80001ca:	3710      	adds	r7, #16
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bd80      	pop	{r7, pc}
 80001d0:	20000078 	.word	0x20000078
 80001d4:	40012400 	.word	0x40012400

080001d8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b084      	sub	sp, #16
 80001dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80001de:	1d3b      	adds	r3, r7, #4
 80001e0:	2200      	movs	r2, #0
 80001e2:	601a      	str	r2, [r3, #0]
 80001e4:	605a      	str	r2, [r3, #4]
 80001e6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80001e8:	4b18      	ldr	r3, [pc, #96]	; (800024c <MX_ADC2_Init+0x74>)
 80001ea:	4a19      	ldr	r2, [pc, #100]	; (8000250 <MX_ADC2_Init+0x78>)
 80001ec:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80001ee:	4b17      	ldr	r3, [pc, #92]	; (800024c <MX_ADC2_Init+0x74>)
 80001f0:	2200      	movs	r2, #0
 80001f2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80001f4:	4b15      	ldr	r3, [pc, #84]	; (800024c <MX_ADC2_Init+0x74>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80001fa:	4b14      	ldr	r3, [pc, #80]	; (800024c <MX_ADC2_Init+0x74>)
 80001fc:	2200      	movs	r2, #0
 80001fe:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000200:	4b12      	ldr	r3, [pc, #72]	; (800024c <MX_ADC2_Init+0x74>)
 8000202:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000206:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000208:	4b10      	ldr	r3, [pc, #64]	; (800024c <MX_ADC2_Init+0x74>)
 800020a:	2200      	movs	r2, #0
 800020c:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 800020e:	4b0f      	ldr	r3, [pc, #60]	; (800024c <MX_ADC2_Init+0x74>)
 8000210:	2201      	movs	r2, #1
 8000212:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000214:	480d      	ldr	r0, [pc, #52]	; (800024c <MX_ADC2_Init+0x74>)
 8000216:	f000 ff81 	bl	800111c <HAL_ADC_Init>
 800021a:	4603      	mov	r3, r0
 800021c:	2b00      	cmp	r3, #0
 800021e:	d001      	beq.n	8000224 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000220:	f000 fcf8 	bl	8000c14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000224:	230b      	movs	r3, #11
 8000226:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000228:	2301      	movs	r3, #1
 800022a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800022c:	2300      	movs	r3, #0
 800022e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000230:	1d3b      	adds	r3, r7, #4
 8000232:	4619      	mov	r1, r3
 8000234:	4805      	ldr	r0, [pc, #20]	; (800024c <MX_ADC2_Init+0x74>)
 8000236:	f001 fa35 	bl	80016a4 <HAL_ADC_ConfigChannel>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d001      	beq.n	8000244 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000240:	f000 fce8 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000244:	bf00      	nop
 8000246:	3710      	adds	r7, #16
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}
 800024c:	200000a8 	.word	0x200000a8
 8000250:	40012800 	.word	0x40012800

08000254 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b08a      	sub	sp, #40	; 0x28
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800025c:	f107 0318 	add.w	r3, r7, #24
 8000260:	2200      	movs	r2, #0
 8000262:	601a      	str	r2, [r3, #0]
 8000264:	605a      	str	r2, [r3, #4]
 8000266:	609a      	str	r2, [r3, #8]
 8000268:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	4a28      	ldr	r2, [pc, #160]	; (8000310 <HAL_ADC_MspInit+0xbc>)
 8000270:	4293      	cmp	r3, r2
 8000272:	d122      	bne.n	80002ba <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000274:	4b27      	ldr	r3, [pc, #156]	; (8000314 <HAL_ADC_MspInit+0xc0>)
 8000276:	699b      	ldr	r3, [r3, #24]
 8000278:	4a26      	ldr	r2, [pc, #152]	; (8000314 <HAL_ADC_MspInit+0xc0>)
 800027a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800027e:	6193      	str	r3, [r2, #24]
 8000280:	4b24      	ldr	r3, [pc, #144]	; (8000314 <HAL_ADC_MspInit+0xc0>)
 8000282:	699b      	ldr	r3, [r3, #24]
 8000284:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000288:	617b      	str	r3, [r7, #20]
 800028a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800028c:	4b21      	ldr	r3, [pc, #132]	; (8000314 <HAL_ADC_MspInit+0xc0>)
 800028e:	699b      	ldr	r3, [r3, #24]
 8000290:	4a20      	ldr	r2, [pc, #128]	; (8000314 <HAL_ADC_MspInit+0xc0>)
 8000292:	f043 0310 	orr.w	r3, r3, #16
 8000296:	6193      	str	r3, [r2, #24]
 8000298:	4b1e      	ldr	r3, [pc, #120]	; (8000314 <HAL_ADC_MspInit+0xc0>)
 800029a:	699b      	ldr	r3, [r3, #24]
 800029c:	f003 0310 	and.w	r3, r3, #16
 80002a0:	613b      	str	r3, [r7, #16]
 80002a2:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80002a4:	2301      	movs	r3, #1
 80002a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002a8:	2303      	movs	r3, #3
 80002aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002ac:	f107 0318 	add.w	r3, r7, #24
 80002b0:	4619      	mov	r1, r3
 80002b2:	4819      	ldr	r0, [pc, #100]	; (8000318 <HAL_ADC_MspInit+0xc4>)
 80002b4:	f001 fc6e 	bl	8001b94 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80002b8:	e026      	b.n	8000308 <HAL_ADC_MspInit+0xb4>
  else if(adcHandle->Instance==ADC2)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	4a17      	ldr	r2, [pc, #92]	; (800031c <HAL_ADC_MspInit+0xc8>)
 80002c0:	4293      	cmp	r3, r2
 80002c2:	d121      	bne.n	8000308 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80002c4:	4b13      	ldr	r3, [pc, #76]	; (8000314 <HAL_ADC_MspInit+0xc0>)
 80002c6:	699b      	ldr	r3, [r3, #24]
 80002c8:	4a12      	ldr	r2, [pc, #72]	; (8000314 <HAL_ADC_MspInit+0xc0>)
 80002ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002ce:	6193      	str	r3, [r2, #24]
 80002d0:	4b10      	ldr	r3, [pc, #64]	; (8000314 <HAL_ADC_MspInit+0xc0>)
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002d8:	60fb      	str	r3, [r7, #12]
 80002da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80002dc:	4b0d      	ldr	r3, [pc, #52]	; (8000314 <HAL_ADC_MspInit+0xc0>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	4a0c      	ldr	r2, [pc, #48]	; (8000314 <HAL_ADC_MspInit+0xc0>)
 80002e2:	f043 0310 	orr.w	r3, r3, #16
 80002e6:	6193      	str	r3, [r2, #24]
 80002e8:	4b0a      	ldr	r3, [pc, #40]	; (8000314 <HAL_ADC_MspInit+0xc0>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	f003 0310 	and.w	r3, r3, #16
 80002f0:	60bb      	str	r3, [r7, #8]
 80002f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80002f4:	2302      	movs	r3, #2
 80002f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002f8:	2303      	movs	r3, #3
 80002fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002fc:	f107 0318 	add.w	r3, r7, #24
 8000300:	4619      	mov	r1, r3
 8000302:	4805      	ldr	r0, [pc, #20]	; (8000318 <HAL_ADC_MspInit+0xc4>)
 8000304:	f001 fc46 	bl	8001b94 <HAL_GPIO_Init>
}
 8000308:	bf00      	nop
 800030a:	3728      	adds	r7, #40	; 0x28
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	40012400 	.word	0x40012400
 8000314:	40021000 	.word	0x40021000
 8000318:	40011000 	.word	0x40011000
 800031c:	40012800 	.word	0x40012800

08000320 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b088      	sub	sp, #32
 8000324:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000326:	f107 0310 	add.w	r3, r7, #16
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	605a      	str	r2, [r3, #4]
 8000330:	609a      	str	r2, [r3, #8]
 8000332:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000334:	4b32      	ldr	r3, [pc, #200]	; (8000400 <MX_GPIO_Init+0xe0>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	4a31      	ldr	r2, [pc, #196]	; (8000400 <MX_GPIO_Init+0xe0>)
 800033a:	f043 0310 	orr.w	r3, r3, #16
 800033e:	6193      	str	r3, [r2, #24]
 8000340:	4b2f      	ldr	r3, [pc, #188]	; (8000400 <MX_GPIO_Init+0xe0>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	f003 0310 	and.w	r3, r3, #16
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800034c:	4b2c      	ldr	r3, [pc, #176]	; (8000400 <MX_GPIO_Init+0xe0>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	4a2b      	ldr	r2, [pc, #172]	; (8000400 <MX_GPIO_Init+0xe0>)
 8000352:	f043 0304 	orr.w	r3, r3, #4
 8000356:	6193      	str	r3, [r2, #24]
 8000358:	4b29      	ldr	r3, [pc, #164]	; (8000400 <MX_GPIO_Init+0xe0>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	f003 0304 	and.w	r3, r3, #4
 8000360:	60bb      	str	r3, [r7, #8]
 8000362:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000364:	4b26      	ldr	r3, [pc, #152]	; (8000400 <MX_GPIO_Init+0xe0>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	4a25      	ldr	r2, [pc, #148]	; (8000400 <MX_GPIO_Init+0xe0>)
 800036a:	f043 0308 	orr.w	r3, r3, #8
 800036e:	6193      	str	r3, [r2, #24]
 8000370:	4b23      	ldr	r3, [pc, #140]	; (8000400 <MX_GPIO_Init+0xe0>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	f003 0308 	and.w	r3, r3, #8
 8000378:	607b      	str	r3, [r7, #4]
 800037a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SSR_XBT1_Pin|ENABLE_M1_Pin|DIR_Pin|RELAY_K1_Pin, GPIO_PIN_RESET);
 800037c:	2200      	movs	r2, #0
 800037e:	f648 0114 	movw	r1, #34836	; 0x8814
 8000382:	4820      	ldr	r0, [pc, #128]	; (8000404 <MX_GPIO_Init+0xe4>)
 8000384:	f001 fd8a 	bl	8001e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MUX_SELECT_GPIO_Port, MUX_SELECT_Pin, GPIO_PIN_RESET);
 8000388:	2200      	movs	r2, #0
 800038a:	2104      	movs	r1, #4
 800038c:	481e      	ldr	r0, [pc, #120]	; (8000408 <MX_GPIO_Init+0xe8>)
 800038e:	f001 fd85 	bl	8001e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|RESET_RELAY_Pin, GPIO_PIN_RESET);
 8000392:	2200      	movs	r2, #0
 8000394:	f44f 7181 	mov.w	r1, #258	; 0x102
 8000398:	481c      	ldr	r0, [pc, #112]	; (800040c <MX_GPIO_Init+0xec>)
 800039a:	f001 fd7f 	bl	8001e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SSR_XBT1_Pin|ENABLE_M1_Pin|DIR_Pin|RELAY_K1_Pin;
 800039e:	f648 0314 	movw	r3, #34836	; 0x8814
 80003a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a4:	2301      	movs	r3, #1
 80003a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a8:	2300      	movs	r3, #0
 80003aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ac:	2302      	movs	r3, #2
 80003ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003b0:	f107 0310 	add.w	r3, r7, #16
 80003b4:	4619      	mov	r1, r3
 80003b6:	4813      	ldr	r0, [pc, #76]	; (8000404 <MX_GPIO_Init+0xe4>)
 80003b8:	f001 fbec 	bl	8001b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MUX_SELECT_Pin;
 80003bc:	2304      	movs	r3, #4
 80003be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c0:	2301      	movs	r3, #1
 80003c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c4:	2300      	movs	r3, #0
 80003c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c8:	2302      	movs	r3, #2
 80003ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MUX_SELECT_GPIO_Port, &GPIO_InitStruct);
 80003cc:	f107 0310 	add.w	r3, r7, #16
 80003d0:	4619      	mov	r1, r3
 80003d2:	480d      	ldr	r0, [pc, #52]	; (8000408 <MX_GPIO_Init+0xe8>)
 80003d4:	f001 fbde 	bl	8001b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_Pin|RESET_RELAY_Pin;
 80003d8:	f44f 7381 	mov.w	r3, #258	; 0x102
 80003dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003de:	2301      	movs	r3, #1
 80003e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e2:	2300      	movs	r3, #0
 80003e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e6:	2302      	movs	r3, #2
 80003e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003ea:	f107 0310 	add.w	r3, r7, #16
 80003ee:	4619      	mov	r1, r3
 80003f0:	4806      	ldr	r0, [pc, #24]	; (800040c <MX_GPIO_Init+0xec>)
 80003f2:	f001 fbcf 	bl	8001b94 <HAL_GPIO_Init>

}
 80003f6:	bf00      	nop
 80003f8:	3720      	adds	r7, #32
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	40021000 	.word	0x40021000
 8000404:	40011000 	.word	0x40011000
 8000408:	40010800 	.word	0x40010800
 800040c:	40010c00 	.word	0x40010c00

08000410 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000414:	4b12      	ldr	r3, [pc, #72]	; (8000460 <MX_I2C1_Init+0x50>)
 8000416:	4a13      	ldr	r2, [pc, #76]	; (8000464 <MX_I2C1_Init+0x54>)
 8000418:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800041a:	4b11      	ldr	r3, [pc, #68]	; (8000460 <MX_I2C1_Init+0x50>)
 800041c:	4a12      	ldr	r2, [pc, #72]	; (8000468 <MX_I2C1_Init+0x58>)
 800041e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000420:	4b0f      	ldr	r3, [pc, #60]	; (8000460 <MX_I2C1_Init+0x50>)
 8000422:	2200      	movs	r2, #0
 8000424:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000426:	4b0e      	ldr	r3, [pc, #56]	; (8000460 <MX_I2C1_Init+0x50>)
 8000428:	2200      	movs	r2, #0
 800042a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800042c:	4b0c      	ldr	r3, [pc, #48]	; (8000460 <MX_I2C1_Init+0x50>)
 800042e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000432:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000434:	4b0a      	ldr	r3, [pc, #40]	; (8000460 <MX_I2C1_Init+0x50>)
 8000436:	2200      	movs	r2, #0
 8000438:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800043a:	4b09      	ldr	r3, [pc, #36]	; (8000460 <MX_I2C1_Init+0x50>)
 800043c:	2200      	movs	r2, #0
 800043e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000440:	4b07      	ldr	r3, [pc, #28]	; (8000460 <MX_I2C1_Init+0x50>)
 8000442:	2200      	movs	r2, #0
 8000444:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000446:	4b06      	ldr	r3, [pc, #24]	; (8000460 <MX_I2C1_Init+0x50>)
 8000448:	2200      	movs	r2, #0
 800044a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800044c:	4804      	ldr	r0, [pc, #16]	; (8000460 <MX_I2C1_Init+0x50>)
 800044e:	f001 fd57 	bl	8001f00 <HAL_I2C_Init>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d001      	beq.n	800045c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000458:	f000 fbdc 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800045c:	bf00      	nop
 800045e:	bd80      	pop	{r7, pc}
 8000460:	200000d8 	.word	0x200000d8
 8000464:	40005400 	.word	0x40005400
 8000468:	000186a0 	.word	0x000186a0

0800046c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b088      	sub	sp, #32
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000474:	f107 0310 	add.w	r3, r7, #16
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
 800047c:	605a      	str	r2, [r3, #4]
 800047e:	609a      	str	r2, [r3, #8]
 8000480:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4a15      	ldr	r2, [pc, #84]	; (80004dc <HAL_I2C_MspInit+0x70>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d123      	bne.n	80004d4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800048c:	4b14      	ldr	r3, [pc, #80]	; (80004e0 <HAL_I2C_MspInit+0x74>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	4a13      	ldr	r2, [pc, #76]	; (80004e0 <HAL_I2C_MspInit+0x74>)
 8000492:	f043 0308 	orr.w	r3, r3, #8
 8000496:	6193      	str	r3, [r2, #24]
 8000498:	4b11      	ldr	r3, [pc, #68]	; (80004e0 <HAL_I2C_MspInit+0x74>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	f003 0308 	and.w	r3, r3, #8
 80004a0:	60fb      	str	r3, [r7, #12]
 80004a2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80004a4:	23c0      	movs	r3, #192	; 0xc0
 80004a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004a8:	2312      	movs	r3, #18
 80004aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004ac:	2303      	movs	r3, #3
 80004ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004b0:	f107 0310 	add.w	r3, r7, #16
 80004b4:	4619      	mov	r1, r3
 80004b6:	480b      	ldr	r0, [pc, #44]	; (80004e4 <HAL_I2C_MspInit+0x78>)
 80004b8:	f001 fb6c 	bl	8001b94 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80004bc:	4b08      	ldr	r3, [pc, #32]	; (80004e0 <HAL_I2C_MspInit+0x74>)
 80004be:	69db      	ldr	r3, [r3, #28]
 80004c0:	4a07      	ldr	r2, [pc, #28]	; (80004e0 <HAL_I2C_MspInit+0x74>)
 80004c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004c6:	61d3      	str	r3, [r2, #28]
 80004c8:	4b05      	ldr	r3, [pc, #20]	; (80004e0 <HAL_I2C_MspInit+0x74>)
 80004ca:	69db      	ldr	r3, [r3, #28]
 80004cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004d0:	60bb      	str	r3, [r7, #8]
 80004d2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80004d4:	bf00      	nop
 80004d6:	3720      	adds	r7, #32
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	40005400 	.word	0x40005400
 80004e0:	40021000 	.word	0x40021000
 80004e4:	40010c00 	.word	0x40010c00

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ee:	f000 fd8f 	bl	8001010 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f2:	f000 f83f 	bl	8000574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f6:	f7ff ff13 	bl	8000320 <MX_GPIO_Init>
  MX_TIM3_Init();
 80004fa:	f000 fc27 	bl	8000d4c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80004fe:	f000 fceb 	bl	8000ed8 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000502:	f7ff fe2b 	bl	800015c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000506:	f7ff fe67 	bl	80001d8 <MX_ADC2_Init>
  MX_I2C1_Init();
 800050a:	f7ff ff81 	bl	8000410 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(ENABLE_M1_GPIO_Port, ENABLE_M1_Pin, SET); // Active low >> start disabled
 800050e:	2201      	movs	r2, #1
 8000510:	2104      	movs	r1, #4
 8000512:	4815      	ldr	r0, [pc, #84]	; (8000568 <main+0x80>)
 8000514:	f001 fcc2 	bl	8001e9c <HAL_GPIO_WritePin>

  uint8_t option = 0; // Initial option value
 8000518:	2300      	movs	r3, #0
 800051a:	71fb      	strb	r3, [r7, #7]
  uint8_t result = 0;
 800051c:	2300      	movs	r3, #0
 800051e:	71bb      	strb	r3, [r7, #6]

  // SET = UART-tx / RESET = Din from GPS
  HAL_GPIO_WritePin(MUX_SELECT_GPIO_Port, MUX_SELECT_Pin, SET);
 8000520:	2201      	movs	r2, #1
 8000522:	2104      	movs	r1, #4
 8000524:	4811      	ldr	r0, [pc, #68]	; (800056c <main+0x84>)
 8000526:	f001 fcb9 	bl	8001e9c <HAL_GPIO_WritePin>

  // Initialize relay in reset state
  HAL_GPIO_WritePin(RESET_RELAY_GPIO_Port, RESET_RELAY_Pin, SET); // reset relay
 800052a:	2201      	movs	r2, #1
 800052c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000530:	480f      	ldr	r0, [pc, #60]	; (8000570 <main+0x88>)
 8000532:	f001 fcb3 	bl	8001e9c <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000536:	200a      	movs	r0, #10
 8000538:	f000 fdcc 	bl	80010d4 <HAL_Delay>
  HAL_GPIO_WritePin(RESET_RELAY_GPIO_Port, RESET_RELAY_Pin, RESET); // release reset coil
 800053c:	2200      	movs	r2, #0
 800053e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000542:	480b      	ldr	r0, [pc, #44]	; (8000570 <main+0x88>)
 8000544:	f001 fcaa 	bl	8001e9c <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000548:	2005      	movs	r0, #5
 800054a:	f000 fdc3 	bl	80010d4 <HAL_Delay>

  // Start timer for STEP signal
  //HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_3 ); // Start STEP signal >> counter toggle to toggle every 20/1000 sec = 50hz


  printWelcomeMessage();
 800054e:	f000 f861 	bl	8000614 <printWelcomeMessage>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  option = readInput();
 8000552:	f000 f877 	bl	8000644 <readInput>
 8000556:	4603      	mov	r3, r0
 8000558:	71fb      	strb	r3, [r7, #7]
	  result = processInput(option);
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	4618      	mov	r0, r3
 800055e:	f000 f897 	bl	8000690 <processInput>
 8000562:	4603      	mov	r3, r0
 8000564:	71bb      	strb	r3, [r7, #6]
	  option = readInput();
 8000566:	e7f4      	b.n	8000552 <main+0x6a>
 8000568:	40011000 	.word	0x40011000
 800056c:	40010800 	.word	0x40010800
 8000570:	40010c00 	.word	0x40010c00

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b094      	sub	sp, #80	; 0x50
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800057e:	2228      	movs	r2, #40	; 0x28
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f004 fb4e 	bl	8004c24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000588:	f107 0314 	add.w	r3, r7, #20
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000598:	1d3b      	adds	r3, r7, #4
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a4:	2302      	movs	r3, #2
 80005a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a8:	2301      	movs	r3, #1
 80005aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ac:	2310      	movs	r3, #16
 80005ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005b0:	2300      	movs	r3, #0
 80005b2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005b8:	4618      	mov	r0, r3
 80005ba:	f002 fcd5 	bl	8002f68 <HAL_RCC_OscConfig>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80005c4:	f000 fb26 	bl	8000c14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c8:	230f      	movs	r3, #15
 80005ca:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005dc:	f107 0314 	add.w	r3, r7, #20
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f002 ff42 	bl	800346c <HAL_RCC_ClockConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80005ee:	f000 fb11 	bl	8000c14 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80005f2:	2302      	movs	r3, #2
 80005f4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80005f6:	2300      	movs	r3, #0
 80005f8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	4618      	mov	r0, r3
 80005fe:	f003 f8c3 	bl	8003788 <HAL_RCCEx_PeriphCLKConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000608:	f000 fb04 	bl	8000c14 <Error_Handler>
  }
}
 800060c:	bf00      	nop
 800060e:	3750      	adds	r7, #80	; 0x50
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <printWelcomeMessage>:

/* USER CODE BEGIN 4 */
void printWelcomeMessage(void){
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, WELCOME_MSG, strlen(WELCOME_MSG), HAL_MAX_DELAY);
 8000618:	f04f 33ff 	mov.w	r3, #4294967295
 800061c:	222a      	movs	r2, #42	; 0x2a
 800061e:	4906      	ldr	r1, [pc, #24]	; (8000638 <printWelcomeMessage+0x24>)
 8000620:	4806      	ldr	r0, [pc, #24]	; (800063c <printWelcomeMessage+0x28>)
 8000622:	f004 f841 	bl	80046a8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, MAIN_MENU, strlen(MAIN_MENU), HAL_MAX_DELAY);
 8000626:	f04f 33ff 	mov.w	r3, #4294967295
 800062a:	22c0      	movs	r2, #192	; 0xc0
 800062c:	4904      	ldr	r1, [pc, #16]	; (8000640 <printWelcomeMessage+0x2c>)
 800062e:	4803      	ldr	r0, [pc, #12]	; (800063c <printWelcomeMessage+0x28>)
 8000630:	f004 f83a 	bl	80046a8 <HAL_UART_Transmit>
}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}
 8000638:	08005560 	.word	0x08005560
 800063c:	20000178 	.word	0x20000178
 8000640:	0800558c 	.word	0x0800558c

08000644 <readInput>:


/* Read user input and return the option selected 1-2-3*/
uint8_t readInput(void){
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
	char rxBuffer[1];

	HAL_UART_Transmit(&huart1, PROMPT, strlen(PROMPT), HAL_MAX_DELAY);
 800064a:	f04f 33ff 	mov.w	r3, #4294967295
 800064e:	2213      	movs	r2, #19
 8000650:	490d      	ldr	r1, [pc, #52]	; (8000688 <readInput+0x44>)
 8000652:	480e      	ldr	r0, [pc, #56]	; (800068c <readInput+0x48>)
 8000654:	f004 f828 	bl	80046a8 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, rxBuffer, 1, HAL_MAX_DELAY);
 8000658:	1d39      	adds	r1, r7, #4
 800065a:	f04f 33ff 	mov.w	r3, #4294967295
 800065e:	2201      	movs	r2, #1
 8000660:	480a      	ldr	r0, [pc, #40]	; (800068c <readInput+0x48>)
 8000662:	f004 f8a4 	bl	80047ae <HAL_UART_Receive>
	HAL_UART_Transmit(&huart1, rxBuffer, 1, HAL_MAX_DELAY); // echo
 8000666:	1d39      	adds	r1, r7, #4
 8000668:	f04f 33ff 	mov.w	r3, #4294967295
 800066c:	2201      	movs	r2, #1
 800066e:	4807      	ldr	r0, [pc, #28]	; (800068c <readInput+0x48>)
 8000670:	f004 f81a 	bl	80046a8 <HAL_UART_Transmit>

	return atoi(rxBuffer);
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	4618      	mov	r0, r3
 8000678:	f004 fa28 	bl	8004acc <atoi>
 800067c:	4603      	mov	r3, r0
 800067e:	b2db      	uxtb	r3, r3
}
 8000680:	4618      	mov	r0, r3
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	08005650 	.word	0x08005650
 800068c:	20000178 	.word	0x20000178

08000690 <processInput>:

uint8_t processInput(uint8_t option){
 8000690:	b580      	push	{r7, lr}
 8000692:	b0a2      	sub	sp, #136	; 0x88
 8000694:	af02      	add	r7, sp, #8
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
	// default
	char msg[30];
	// ADC measurement
	char adcmsg[30];
	float vin = 0.0;
 800069a:	f04f 0300 	mov.w	r3, #0
 800069e:	67bb      	str	r3, [r7, #120]	; 0x78
	uint16_t adcReading = 0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
	// EEPROM
	uint8_t chipAddress = 0xA0; // 0b1010000 7 bit address
 80006a6:	23a0      	movs	r3, #160	; 0xa0
 80006a8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	uint8_t dataReceive[10];
	uint8_t dataByte[4]; // = {0x00, 5, 12, 4}; // store 5 in memory 0x00 and 12 in (n+1)= 0x01
	uint8_t startAddress[1] = {0x00};
 80006ac:	2300      	movs	r3, #0
 80006ae:	f887 3020 	strb.w	r3, [r7, #32]
	char output[20];

	// print what was selected
	sprintf(msg, "\r\n> Executing OPTION %d...\r\n",option);
 80006b2:	79fa      	ldrb	r2, [r7, #7]
 80006b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006b8:	49cd      	ldr	r1, [pc, #820]	; (80009f0 <processInput+0x360>)
 80006ba:	4618      	mov	r0, r3
 80006bc:	f004 fa92 	bl	8004be4 <siprintf>
	HAL_UART_Transmit(&huart1, msg, strlen(msg), HAL_MAX_DELAY);
 80006c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006c4:	4618      	mov	r0, r3
 80006c6:	f7ff fd41 	bl	800014c <strlen>
 80006ca:	4603      	mov	r3, r0
 80006cc:	b29a      	uxth	r2, r3
 80006ce:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80006d2:	f04f 33ff 	mov.w	r3, #4294967295
 80006d6:	48c7      	ldr	r0, [pc, #796]	; (80009f4 <processInput+0x364>)
 80006d8:	f003 ffe6 	bl	80046a8 <HAL_UART_Transmit>

	// Execute selected action
	switch(option){
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	2b09      	cmp	r3, #9
 80006e0:	f200 8271 	bhi.w	8000bc6 <processInput+0x536>
 80006e4:	a201      	add	r2, pc, #4	; (adr r2, 80006ec <processInput+0x5c>)
 80006e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ea:	bf00      	nop
 80006ec:	08000b53 	.word	0x08000b53
 80006f0:	08000715 	.word	0x08000715
 80006f4:	08000721 	.word	0x08000721
 80006f8:	0800076d 	.word	0x0800076d
 80006fc:	08000795 	.word	0x08000795
 8000700:	08000905 	.word	0x08000905
 8000704:	08000951 	.word	0x08000951
 8000708:	0800095f 	.word	0x0800095f
 800070c:	0800096d 	.word	0x0800096d
 8000710:	08000a29 	.word	0x08000a29
	case 1: // toggle green led
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000714:	2102      	movs	r1, #2
 8000716:	48b8      	ldr	r0, [pc, #736]	; (80009f8 <processInput+0x368>)
 8000718:	f001 fbd8 	bl	8001ecc <HAL_GPIO_TogglePin>
		return 0;
 800071c:	2300      	movs	r3, #0
 800071e:	e267      	b.n	8000bf0 <processInput+0x560>
	case 2: // Set relay
		// SET relay k1
		HAL_GPIO_WritePin(RELAY_K1_GPIO_Port, RELAY_K1_Pin, SET); // set relay
 8000720:	2201      	movs	r2, #1
 8000722:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000726:	48b5      	ldr	r0, [pc, #724]	; (80009fc <processInput+0x36c>)
 8000728:	f001 fbb8 	bl	8001e9c <HAL_GPIO_WritePin>
		HAL_Delay(10);
 800072c:	200a      	movs	r0, #10
 800072e:	f000 fcd1 	bl	80010d4 <HAL_Delay>
		HAL_GPIO_WritePin(RELAY_K1_GPIO_Port, RELAY_K1_Pin, RESET); // release coil
 8000732:	2200      	movs	r2, #0
 8000734:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000738:	48b0      	ldr	r0, [pc, #704]	; (80009fc <processInput+0x36c>)
 800073a:	f001 fbaf 	bl	8001e9c <HAL_GPIO_WritePin>
		HAL_Delay(5);
 800073e:	2005      	movs	r0, #5
 8000740:	f000 fcc8 	bl	80010d4 <HAL_Delay>
		// SET SSR1 XBT1
		HAL_GPIO_WritePin(SSR_XBT1_GPIO_Port, SSR_XBT1_Pin, SET); // set SSR latch
 8000744:	2201      	movs	r2, #1
 8000746:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800074a:	48ac      	ldr	r0, [pc, #688]	; (80009fc <processInput+0x36c>)
 800074c:	f001 fba6 	bl	8001e9c <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8000750:	200a      	movs	r0, #10
 8000752:	f000 fcbf 	bl	80010d4 <HAL_Delay>
		HAL_GPIO_WritePin(SSR_XBT1_GPIO_Port, SSR_XBT1_Pin, RESET); // release SSR latch
 8000756:	2200      	movs	r2, #0
 8000758:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800075c:	48a7      	ldr	r0, [pc, #668]	; (80009fc <processInput+0x36c>)
 800075e:	f001 fb9d 	bl	8001e9c <HAL_GPIO_WritePin>
		HAL_Delay(5);
 8000762:	2005      	movs	r0, #5
 8000764:	f000 fcb6 	bl	80010d4 <HAL_Delay>
		return 0;
 8000768:	2300      	movs	r3, #0
 800076a:	e241      	b.n	8000bf0 <processInput+0x560>
	case 3: // Reset relay
		// RESET relay k1
		HAL_GPIO_WritePin(RESET_RELAY_GPIO_Port, RESET_RELAY_Pin, SET); // reset relay and SSR
 800076c:	2201      	movs	r2, #1
 800076e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000772:	48a1      	ldr	r0, [pc, #644]	; (80009f8 <processInput+0x368>)
 8000774:	f001 fb92 	bl	8001e9c <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8000778:	200a      	movs	r0, #10
 800077a:	f000 fcab 	bl	80010d4 <HAL_Delay>
		HAL_GPIO_WritePin(RESET_RELAY_GPIO_Port, RESET_RELAY_Pin, RESET); // release reset coil
 800077e:	2200      	movs	r2, #0
 8000780:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000784:	489c      	ldr	r0, [pc, #624]	; (80009f8 <processInput+0x368>)
 8000786:	f001 fb89 	bl	8001e9c <HAL_GPIO_WritePin>
		HAL_Delay(5);
 800078a:	2005      	movs	r0, #5
 800078c:	f000 fca2 	bl	80010d4 <HAL_Delay>
		return 0;
 8000790:	2300      	movs	r3, #0
 8000792:	e22d      	b.n	8000bf0 <processInput+0x560>
	case 4: // Run motor CW
		HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_3 ); // Start STEP signal >> counter toggle to toggle every 20/1000 sec = 50hz
 8000794:	2108      	movs	r1, #8
 8000796:	489a      	ldr	r0, [pc, #616]	; (8000a00 <processInput+0x370>)
 8000798:	f003 fa0a 	bl	8003bb0 <HAL_TIM_OC_Start>
		// motor
		HAL_GPIO_WritePin(ENABLE_M1_GPIO_Port, ENABLE_M1_Pin, SET); // disable driver
 800079c:	2201      	movs	r2, #1
 800079e:	2104      	movs	r1, #4
 80007a0:	4896      	ldr	r0, [pc, #600]	; (80009fc <processInput+0x36c>)
 80007a2:	f001 fb7b 	bl	8001e9c <HAL_GPIO_WritePin>
		HAL_Delay(500); // wait for the motor to stop
 80007a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007aa:	f000 fc93 	bl	80010d4 <HAL_Delay>
		HAL_GPIO_WritePin(DIR_GPIO_Port,DIR_Pin, SET); // set motor direction
 80007ae:	2201      	movs	r2, #1
 80007b0:	2110      	movs	r1, #16
 80007b2:	4892      	ldr	r0, [pc, #584]	; (80009fc <processInput+0x36c>)
 80007b4:	f001 fb72 	bl	8001e9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENABLE_M1_GPIO_Port, ENABLE_M1_Pin, RESET); // enable driver to run motor
 80007b8:	2200      	movs	r2, #0
 80007ba:	2104      	movs	r1, #4
 80007bc:	488f      	ldr	r0, [pc, #572]	; (80009fc <processInput+0x36c>)
 80007be:	f001 fb6d 	bl	8001e9c <HAL_GPIO_WritePin>
		// read current
		HAL_ADC_Start(&hadc2);
 80007c2:	4890      	ldr	r0, [pc, #576]	; (8000a04 <processInput+0x374>)
 80007c4:	f000 fd82 	bl	80012cc <HAL_ADC_Start>

		HAL_ADC_PollForConversion(&hadc2, 100);
 80007c8:	2164      	movs	r1, #100	; 0x64
 80007ca:	488e      	ldr	r0, [pc, #568]	; (8000a04 <processInput+0x374>)
 80007cc:	f000 fe58 	bl	8001480 <HAL_ADC_PollForConversion>
		adcReading = (uint16_t) HAL_ADC_GetValue(&hadc2);
 80007d0:	488c      	ldr	r0, [pc, #560]	; (8000a04 <processInput+0x374>)
 80007d2:	f000 ff5b 	bl	800168c <HAL_ADC_GetValue>
 80007d6:	4603      	mov	r3, r0
 80007d8:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
		sprintf(adcmsg, "Im_1 = %d\r\n", (uint32_t) adcReading);
 80007dc:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80007e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80007e4:	4988      	ldr	r1, [pc, #544]	; (8000a08 <processInput+0x378>)
 80007e6:	4618      	mov	r0, r3
 80007e8:	f004 f9fc 	bl	8004be4 <siprintf>
		HAL_UART_Transmit(&huart1, adcmsg, strlen(adcmsg), HAL_MAX_DELAY);
 80007ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff fcab 	bl	800014c <strlen>
 80007f6:	4603      	mov	r3, r0
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80007fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000802:	487c      	ldr	r0, [pc, #496]	; (80009f4 <processInput+0x364>)
 8000804:	f003 ff50 	bl	80046a8 <HAL_UART_Transmit>
		HAL_Delay(1000);
 8000808:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800080c:	f000 fc62 	bl	80010d4 <HAL_Delay>

		HAL_ADC_PollForConversion(&hadc2, 100);
 8000810:	2164      	movs	r1, #100	; 0x64
 8000812:	487c      	ldr	r0, [pc, #496]	; (8000a04 <processInput+0x374>)
 8000814:	f000 fe34 	bl	8001480 <HAL_ADC_PollForConversion>
		adcReading = (uint16_t) HAL_ADC_GetValue(&hadc2);
 8000818:	487a      	ldr	r0, [pc, #488]	; (8000a04 <processInput+0x374>)
 800081a:	f000 ff37 	bl	800168c <HAL_ADC_GetValue>
 800081e:	4603      	mov	r3, r0
 8000820:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
		sprintf(adcmsg, "Im_2 = %d\r\n", (uint32_t) adcReading);
 8000824:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8000828:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800082c:	4977      	ldr	r1, [pc, #476]	; (8000a0c <processInput+0x37c>)
 800082e:	4618      	mov	r0, r3
 8000830:	f004 f9d8 	bl	8004be4 <siprintf>
		HAL_UART_Transmit(&huart1, adcmsg, strlen(adcmsg), HAL_MAX_DELAY);
 8000834:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff fc87 	bl	800014c <strlen>
 800083e:	4603      	mov	r3, r0
 8000840:	b29a      	uxth	r2, r3
 8000842:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000846:	f04f 33ff 	mov.w	r3, #4294967295
 800084a:	486a      	ldr	r0, [pc, #424]	; (80009f4 <processInput+0x364>)
 800084c:	f003 ff2c 	bl	80046a8 <HAL_UART_Transmit>
		HAL_Delay(1000);
 8000850:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000854:	f000 fc3e 	bl	80010d4 <HAL_Delay>

		HAL_ADC_PollForConversion(&hadc2, 100);
 8000858:	2164      	movs	r1, #100	; 0x64
 800085a:	486a      	ldr	r0, [pc, #424]	; (8000a04 <processInput+0x374>)
 800085c:	f000 fe10 	bl	8001480 <HAL_ADC_PollForConversion>
		adcReading = (uint16_t) HAL_ADC_GetValue(&hadc2);
 8000860:	4868      	ldr	r0, [pc, #416]	; (8000a04 <processInput+0x374>)
 8000862:	f000 ff13 	bl	800168c <HAL_ADC_GetValue>
 8000866:	4603      	mov	r3, r0
 8000868:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
		sprintf(adcmsg, "Im_3 = %d\r\n", (uint32_t) adcReading);
 800086c:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8000870:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000874:	4966      	ldr	r1, [pc, #408]	; (8000a10 <processInput+0x380>)
 8000876:	4618      	mov	r0, r3
 8000878:	f004 f9b4 	bl	8004be4 <siprintf>
		HAL_UART_Transmit(&huart1, adcmsg, strlen(adcmsg), HAL_MAX_DELAY);
 800087c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff fc63 	bl	800014c <strlen>
 8000886:	4603      	mov	r3, r0
 8000888:	b29a      	uxth	r2, r3
 800088a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800088e:	f04f 33ff 	mov.w	r3, #4294967295
 8000892:	4858      	ldr	r0, [pc, #352]	; (80009f4 <processInput+0x364>)
 8000894:	f003 ff08 	bl	80046a8 <HAL_UART_Transmit>
		HAL_Delay(1000);
 8000898:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800089c:	f000 fc1a 	bl	80010d4 <HAL_Delay>

		HAL_ADC_PollForConversion(&hadc2, 100);
 80008a0:	2164      	movs	r1, #100	; 0x64
 80008a2:	4858      	ldr	r0, [pc, #352]	; (8000a04 <processInput+0x374>)
 80008a4:	f000 fdec 	bl	8001480 <HAL_ADC_PollForConversion>
		adcReading = (uint16_t) HAL_ADC_GetValue(&hadc2);
 80008a8:	4856      	ldr	r0, [pc, #344]	; (8000a04 <processInput+0x374>)
 80008aa:	f000 feef 	bl	800168c <HAL_ADC_GetValue>
 80008ae:	4603      	mov	r3, r0
 80008b0:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
		sprintf(adcmsg, "Im_4 = %d\r\n", (uint32_t) adcReading);
 80008b4:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80008b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80008bc:	4955      	ldr	r1, [pc, #340]	; (8000a14 <processInput+0x384>)
 80008be:	4618      	mov	r0, r3
 80008c0:	f004 f990 	bl	8004be4 <siprintf>
		HAL_UART_Transmit(&huart1, adcmsg, strlen(adcmsg), HAL_MAX_DELAY);
 80008c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff fc3f 	bl	800014c <strlen>
 80008ce:	4603      	mov	r3, r0
 80008d0:	b29a      	uxth	r2, r3
 80008d2:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80008d6:	f04f 33ff 	mov.w	r3, #4294967295
 80008da:	4846      	ldr	r0, [pc, #280]	; (80009f4 <processInput+0x364>)
 80008dc:	f003 fee4 	bl	80046a8 <HAL_UART_Transmit>
		HAL_Delay(1000);
 80008e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008e4:	f000 fbf6 	bl	80010d4 <HAL_Delay>

		HAL_ADC_Stop(&hadc1);
 80008e8:	484b      	ldr	r0, [pc, #300]	; (8000a18 <processInput+0x388>)
 80008ea:	f000 fd9d 	bl	8001428 <HAL_ADC_Stop>

		//HAL_Delay(5000); // run 5 seconds
		HAL_GPIO_WritePin(ENABLE_M1_GPIO_Port, ENABLE_M1_Pin, SET); // disable driver
 80008ee:	2201      	movs	r2, #1
 80008f0:	2104      	movs	r1, #4
 80008f2:	4842      	ldr	r0, [pc, #264]	; (80009fc <processInput+0x36c>)
 80008f4:	f001 fad2 	bl	8001e9c <HAL_GPIO_WritePin>
		HAL_TIM_OC_Stop(&htim3, TIM_CHANNEL_3 );
 80008f8:	2108      	movs	r1, #8
 80008fa:	4841      	ldr	r0, [pc, #260]	; (8000a00 <processInput+0x370>)
 80008fc:	f003 f9fa 	bl	8003cf4 <HAL_TIM_OC_Stop>

		return 0;
 8000900:	2300      	movs	r3, #0
 8000902:	e175      	b.n	8000bf0 <processInput+0x560>
	case 5: // Run motor CCW
		HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_3 );
 8000904:	2108      	movs	r1, #8
 8000906:	483e      	ldr	r0, [pc, #248]	; (8000a00 <processInput+0x370>)
 8000908:	f003 f952 	bl	8003bb0 <HAL_TIM_OC_Start>
		// motor
		HAL_GPIO_WritePin(ENABLE_M1_GPIO_Port, ENABLE_M1_Pin, SET); // disable driver
 800090c:	2201      	movs	r2, #1
 800090e:	2104      	movs	r1, #4
 8000910:	483a      	ldr	r0, [pc, #232]	; (80009fc <processInput+0x36c>)
 8000912:	f001 fac3 	bl	8001e9c <HAL_GPIO_WritePin>
		HAL_Delay(500); // wait for the motor to stop
 8000916:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800091a:	f000 fbdb 	bl	80010d4 <HAL_Delay>
		HAL_GPIO_WritePin(DIR_GPIO_Port,DIR_Pin, RESET); // set motor direction
 800091e:	2200      	movs	r2, #0
 8000920:	2110      	movs	r1, #16
 8000922:	4836      	ldr	r0, [pc, #216]	; (80009fc <processInput+0x36c>)
 8000924:	f001 faba 	bl	8001e9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENABLE_M1_GPIO_Port, ENABLE_M1_Pin, RESET); // enable driver to run motor
 8000928:	2200      	movs	r2, #0
 800092a:	2104      	movs	r1, #4
 800092c:	4833      	ldr	r0, [pc, #204]	; (80009fc <processInput+0x36c>)
 800092e:	f001 fab5 	bl	8001e9c <HAL_GPIO_WritePin>
		HAL_Delay(5000); // run 5 seconds
 8000932:	f241 3088 	movw	r0, #5000	; 0x1388
 8000936:	f000 fbcd 	bl	80010d4 <HAL_Delay>
		HAL_GPIO_WritePin(ENABLE_M1_GPIO_Port, ENABLE_M1_Pin, SET); // disable driver
 800093a:	2201      	movs	r2, #1
 800093c:	2104      	movs	r1, #4
 800093e:	482f      	ldr	r0, [pc, #188]	; (80009fc <processInput+0x36c>)
 8000940:	f001 faac 	bl	8001e9c <HAL_GPIO_WritePin>

		HAL_TIM_OC_Stop(&htim3, TIM_CHANNEL_3 );
 8000944:	2108      	movs	r1, #8
 8000946:	482e      	ldr	r0, [pc, #184]	; (8000a00 <processInput+0x370>)
 8000948:	f003 f9d4 	bl	8003cf4 <HAL_TIM_OC_Stop>
		return 0;
 800094c:	2300      	movs	r3, #0
 800094e:	e14f      	b.n	8000bf0 <processInput+0x560>
	case 6: // change MUX to GPS
		HAL_GPIO_WritePin(MUX_SELECT_GPIO_Port, MUX_SELECT_Pin, RESET);
 8000950:	2200      	movs	r2, #0
 8000952:	2104      	movs	r1, #4
 8000954:	4831      	ldr	r0, [pc, #196]	; (8000a1c <processInput+0x38c>)
 8000956:	f001 faa1 	bl	8001e9c <HAL_GPIO_WritePin>
		return 0;
 800095a:	2300      	movs	r3, #0
 800095c:	e148      	b.n	8000bf0 <processInput+0x560>
	case 7: // change MUX to STM32
		HAL_GPIO_WritePin(MUX_SELECT_GPIO_Port, MUX_SELECT_Pin, SET);
 800095e:	2201      	movs	r2, #1
 8000960:	2104      	movs	r1, #4
 8000962:	482e      	ldr	r0, [pc, #184]	; (8000a1c <processInput+0x38c>)
 8000964:	f001 fa9a 	bl	8001e9c <HAL_GPIO_WritePin>
		return 0;
 8000968:	2300      	movs	r3, #0
 800096a:	e141      	b.n	8000bf0 <processInput+0x560>
	case 8: // read ADC Vin
		HAL_ADC_Start(&hadc1);
 800096c:	482a      	ldr	r0, [pc, #168]	; (8000a18 <processInput+0x388>)
 800096e:	f000 fcad 	bl	80012cc <HAL_ADC_Start>
		for(uint8_t i=0; i<10; i++){
 8000972:	2300      	movs	r3, #0
 8000974:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 8000978:	e012      	b.n	80009a0 <processInput+0x310>
			HAL_ADC_PollForConversion(&hadc1, 100);
 800097a:	2164      	movs	r1, #100	; 0x64
 800097c:	4826      	ldr	r0, [pc, #152]	; (8000a18 <processInput+0x388>)
 800097e:	f000 fd7f 	bl	8001480 <HAL_ADC_PollForConversion>
			adcReading += (uint16_t) HAL_ADC_GetValue(&hadc1);
 8000982:	4825      	ldr	r0, [pc, #148]	; (8000a18 <processInput+0x388>)
 8000984:	f000 fe82 	bl	800168c <HAL_ADC_GetValue>
 8000988:	4603      	mov	r3, r0
 800098a:	b29a      	uxth	r2, r3
 800098c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8000990:	4413      	add	r3, r2
 8000992:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
		for(uint8_t i=0; i<10; i++){
 8000996:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 800099a:	3301      	adds	r3, #1
 800099c:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 80009a0:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80009a4:	2b09      	cmp	r3, #9
 80009a6:	d9e8      	bls.n	800097a <processInput+0x2ea>
		}
		HAL_ADC_Stop(&hadc1);
 80009a8:	481b      	ldr	r0, [pc, #108]	; (8000a18 <processInput+0x388>)
 80009aa:	f000 fd3d 	bl	8001428 <HAL_ADC_Stop>
		adcReading = adcReading/10;
 80009ae:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80009b2:	4a1b      	ldr	r2, [pc, #108]	; (8000a20 <processInput+0x390>)
 80009b4:	fba2 2303 	umull	r2, r3, r2, r3
 80009b8:	08db      	lsrs	r3, r3, #3
 80009ba:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
		//vin = adcReading * 15.0/1862.0;

		//char adcmsg[30];
		sprintf(adcmsg, "Vin = %d ", adcReading);
 80009be:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80009c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009c6:	4917      	ldr	r1, [pc, #92]	; (8000a24 <processInput+0x394>)
 80009c8:	4618      	mov	r0, r3
 80009ca:	f004 f90b 	bl	8004be4 <siprintf>
		HAL_UART_Transmit(&huart1, adcmsg, strlen(adcmsg), HAL_MAX_DELAY);
 80009ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009d2:	4618      	mov	r0, r3
 80009d4:	f7ff fbba 	bl	800014c <strlen>
 80009d8:	4603      	mov	r3, r0
 80009da:	b29a      	uxth	r2, r3
 80009dc:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80009e0:	f04f 33ff 	mov.w	r3, #4294967295
 80009e4:	4803      	ldr	r0, [pc, #12]	; (80009f4 <processInput+0x364>)
 80009e6:	f003 fe5f 	bl	80046a8 <HAL_UART_Transmit>
		return 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	e100      	b.n	8000bf0 <processInput+0x560>
 80009ee:	bf00      	nop
 80009f0:	08005664 	.word	0x08005664
 80009f4:	20000178 	.word	0x20000178
 80009f8:	40010c00 	.word	0x40010c00
 80009fc:	40011000 	.word	0x40011000
 8000a00:	20000130 	.word	0x20000130
 8000a04:	200000a8 	.word	0x200000a8
 8000a08:	08005684 	.word	0x08005684
 8000a0c:	08005690 	.word	0x08005690
 8000a10:	0800569c 	.word	0x0800569c
 8000a14:	080056a8 	.word	0x080056a8
 8000a18:	20000078 	.word	0x20000078
 8000a1c:	40010800 	.word	0x40010800
 8000a20:	cccccccd 	.word	0xcccccccd
 8000a24:	080056b4 	.word	0x080056b4
	case 9:
		// get values to store in eeprom
		uint8_t a,b;
		char rxBuffer[1];
		HAL_UART_Transmit(&huart1, "Val-1= ", strlen("Val-1= "), HAL_MAX_DELAY);
 8000a28:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2c:	2207      	movs	r2, #7
 8000a2e:	4972      	ldr	r1, [pc, #456]	; (8000bf8 <processInput+0x568>)
 8000a30:	4872      	ldr	r0, [pc, #456]	; (8000bfc <processInput+0x56c>)
 8000a32:	f003 fe39 	bl	80046a8 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart1, rxBuffer, 1, HAL_MAX_DELAY);
 8000a36:	f107 0108 	add.w	r1, r7, #8
 8000a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a3e:	2201      	movs	r2, #1
 8000a40:	486e      	ldr	r0, [pc, #440]	; (8000bfc <processInput+0x56c>)
 8000a42:	f003 feb4 	bl	80047ae <HAL_UART_Receive>
		HAL_UART_Transmit(&huart1, rxBuffer, 1, HAL_MAX_DELAY); // echo
 8000a46:	f107 0108 	add.w	r1, r7, #8
 8000a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a4e:	2201      	movs	r2, #1
 8000a50:	486a      	ldr	r0, [pc, #424]	; (8000bfc <processInput+0x56c>)
 8000a52:	f003 fe29 	bl	80046a8 <HAL_UART_Transmit>
		a = atoi(rxBuffer);
 8000a56:	f107 0308 	add.w	r3, r7, #8
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f004 f836 	bl	8004acc <atoi>
 8000a60:	4603      	mov	r3, r0
 8000a62:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
		HAL_UART_Transmit(&huart1, "\r\nVal-2= ", strlen("\r\nVal-2= "), HAL_MAX_DELAY);
 8000a66:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6a:	2209      	movs	r2, #9
 8000a6c:	4964      	ldr	r1, [pc, #400]	; (8000c00 <processInput+0x570>)
 8000a6e:	4863      	ldr	r0, [pc, #396]	; (8000bfc <processInput+0x56c>)
 8000a70:	f003 fe1a 	bl	80046a8 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart1, rxBuffer, 1, HAL_MAX_DELAY);
 8000a74:	f107 0108 	add.w	r1, r7, #8
 8000a78:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	485f      	ldr	r0, [pc, #380]	; (8000bfc <processInput+0x56c>)
 8000a80:	f003 fe95 	bl	80047ae <HAL_UART_Receive>
		HAL_UART_Transmit(&huart1, rxBuffer, 1, HAL_MAX_DELAY); // echo
 8000a84:	f107 0108 	add.w	r1, r7, #8
 8000a88:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	485b      	ldr	r0, [pc, #364]	; (8000bfc <processInput+0x56c>)
 8000a90:	f003 fe0a 	bl	80046a8 <HAL_UART_Transmit>
		b = atoi(rxBuffer);
 8000a94:	f107 0308 	add.w	r3, r7, #8
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f004 f817 	bl	8004acc <atoi>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75

		// store 2 bytes starting in address 0x00
		dataByte[0] = 0x00;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		dataByte[1] = a;
 8000aaa:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8000aae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		dataByte[2] = b;
 8000ab2:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8000ab6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		dataByte[3] = 249;
 8000aba:	23f9      	movs	r3, #249	; 0xf9
 8000abc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		HAL_I2C_Master_Transmit(&hi2c1, chipAddress , dataByte, 4, HAL_MAX_DELAY); // send word address, value
 8000ac0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000ac4:	b299      	uxth	r1, r3
 8000ac6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000aca:	f04f 33ff 	mov.w	r3, #4294967295
 8000ace:	9300      	str	r3, [sp, #0]
 8000ad0:	2304      	movs	r3, #4
 8000ad2:	484c      	ldr	r0, [pc, #304]	; (8000c04 <processInput+0x574>)
 8000ad4:	f001 fb58 	bl	8002188 <HAL_I2C_Master_Transmit>
		HAL_Delay(10);
 8000ad8:	200a      	movs	r0, #10
 8000ada:	f000 fafb 	bl	80010d4 <HAL_Delay>

		// read 2 bytes from data address 0x00, 0x01
		HAL_I2C_Master_Transmit(&hi2c1, chipAddress , startAddress, 1, HAL_MAX_DELAY); // dummy write with word address 0x00 as starting address
 8000ade:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000ae2:	b299      	uxth	r1, r3
 8000ae4:	f107 0220 	add.w	r2, r7, #32
 8000ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8000aec:	9300      	str	r3, [sp, #0]
 8000aee:	2301      	movs	r3, #1
 8000af0:	4844      	ldr	r0, [pc, #272]	; (8000c04 <processInput+0x574>)
 8000af2:	f001 fb49 	bl	8002188 <HAL_I2C_Master_Transmit>
		HAL_Delay(10);
 8000af6:	200a      	movs	r0, #10
 8000af8:	f000 faec 	bl	80010d4 <HAL_Delay>
		HAL_I2C_Master_Receive(&hi2c1, chipAddress, dataReceive, 3, HAL_MAX_DELAY);
 8000afc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000b00:	b299      	uxth	r1, r3
 8000b02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000b06:	f04f 33ff 	mov.w	r3, #4294967295
 8000b0a:	9300      	str	r3, [sp, #0]
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	483d      	ldr	r0, [pc, #244]	; (8000c04 <processInput+0x574>)
 8000b10:	f001 fc38 	bl	8002384 <HAL_I2C_Master_Receive>

		sprintf(output,"\r\nStored values: %i, %i, %i\r\n", dataReceive[0], dataReceive[1], dataReceive[2]);
 8000b14:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000b18:	461a      	mov	r2, r3
 8000b1a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000b1e:	4619      	mov	r1, r3
 8000b20:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000b24:	f107 000c 	add.w	r0, r7, #12
 8000b28:	9300      	str	r3, [sp, #0]
 8000b2a:	460b      	mov	r3, r1
 8000b2c:	4936      	ldr	r1, [pc, #216]	; (8000c08 <processInput+0x578>)
 8000b2e:	f004 f859 	bl	8004be4 <siprintf>
		HAL_UART_Transmit(&huart1, output, strlen(output), HAL_MAX_DELAY);
 8000b32:	f107 030c 	add.w	r3, r7, #12
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff fb08 	bl	800014c <strlen>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	b29a      	uxth	r2, r3
 8000b40:	f107 010c 	add.w	r1, r7, #12
 8000b44:	f04f 33ff 	mov.w	r3, #4294967295
 8000b48:	482c      	ldr	r0, [pc, #176]	; (8000bfc <processInput+0x56c>)
 8000b4a:	f003 fdad 	bl	80046a8 <HAL_UART_Transmit>
		return 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	e04e      	b.n	8000bf0 <processInput+0x560>
	case 0:
		// read 2 bytes from data address 0x00, 0x01
		HAL_I2C_Master_Transmit(&hi2c1, chipAddress , startAddress, 1, HAL_MAX_DELAY); // dummy write with word address 0x00 as starting address
 8000b52:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000b56:	b299      	uxth	r1, r3
 8000b58:	f107 0220 	add.w	r2, r7, #32
 8000b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b60:	9300      	str	r3, [sp, #0]
 8000b62:	2301      	movs	r3, #1
 8000b64:	4827      	ldr	r0, [pc, #156]	; (8000c04 <processInput+0x574>)
 8000b66:	f001 fb0f 	bl	8002188 <HAL_I2C_Master_Transmit>
		HAL_Delay(10);
 8000b6a:	200a      	movs	r0, #10
 8000b6c:	f000 fab2 	bl	80010d4 <HAL_Delay>
		HAL_I2C_Master_Receive(&hi2c1, chipAddress, dataReceive, 3, HAL_MAX_DELAY);
 8000b70:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000b74:	b299      	uxth	r1, r3
 8000b76:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7e:	9300      	str	r3, [sp, #0]
 8000b80:	2303      	movs	r3, #3
 8000b82:	4820      	ldr	r0, [pc, #128]	; (8000c04 <processInput+0x574>)
 8000b84:	f001 fbfe 	bl	8002384 <HAL_I2C_Master_Receive>

		sprintf(output,"Stored values: %i, %i, %i\r\n", dataReceive[0], dataReceive[1], dataReceive[2]);
 8000b88:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000b92:	4619      	mov	r1, r3
 8000b94:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000b98:	f107 000c 	add.w	r0, r7, #12
 8000b9c:	9300      	str	r3, [sp, #0]
 8000b9e:	460b      	mov	r3, r1
 8000ba0:	491a      	ldr	r1, [pc, #104]	; (8000c0c <processInput+0x57c>)
 8000ba2:	f004 f81f 	bl	8004be4 <siprintf>
		HAL_UART_Transmit(&huart1, output, strlen(output), HAL_MAX_DELAY);
 8000ba6:	f107 030c 	add.w	r3, r7, #12
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff face 	bl	800014c <strlen>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	b29a      	uxth	r2, r3
 8000bb4:	f107 010c 	add.w	r1, r7, #12
 8000bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bbc:	480f      	ldr	r0, [pc, #60]	; (8000bfc <processInput+0x56c>)
 8000bbe:	f003 fd73 	bl	80046a8 <HAL_UART_Transmit>
		return 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	e014      	b.n	8000bf0 <processInput+0x560>
	default:
		sprintf(msg, "\r\n> %d is not a valid option!");
 8000bc6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000bca:	4911      	ldr	r1, [pc, #68]	; (8000c10 <processInput+0x580>)
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f004 f809 	bl	8004be4 <siprintf>
		HAL_UART_Transmit(&huart1, msg, strlen(msg), HAL_MAX_DELAY);
 8000bd2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff fab8 	bl	800014c <strlen>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	b29a      	uxth	r2, r3
 8000be0:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8000be4:	f04f 33ff 	mov.w	r3, #4294967295
 8000be8:	4804      	ldr	r0, [pc, #16]	; (8000bfc <processInput+0x56c>)
 8000bea:	f003 fd5d 	bl	80046a8 <HAL_UART_Transmit>
		return 1;
 8000bee:	2301      	movs	r3, #1

	}

}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3780      	adds	r7, #128	; 0x80
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	080056c0 	.word	0x080056c0
 8000bfc:	20000178 	.word	0x20000178
 8000c00:	080056c8 	.word	0x080056c8
 8000c04:	200000d8 	.word	0x200000d8
 8000c08:	080056d4 	.word	0x080056d4
 8000c0c:	080056f4 	.word	0x080056f4
 8000c10:	08005710 	.word	0x08005710

08000c14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c18:	b672      	cpsid	i
}
 8000c1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <Error_Handler+0x8>
	...

08000c20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c26:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <HAL_MspInit+0x5c>)
 8000c28:	699b      	ldr	r3, [r3, #24]
 8000c2a:	4a14      	ldr	r2, [pc, #80]	; (8000c7c <HAL_MspInit+0x5c>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	6193      	str	r3, [r2, #24]
 8000c32:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <HAL_MspInit+0x5c>)
 8000c34:	699b      	ldr	r3, [r3, #24]
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	60bb      	str	r3, [r7, #8]
 8000c3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <HAL_MspInit+0x5c>)
 8000c40:	69db      	ldr	r3, [r3, #28]
 8000c42:	4a0e      	ldr	r2, [pc, #56]	; (8000c7c <HAL_MspInit+0x5c>)
 8000c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c48:	61d3      	str	r3, [r2, #28]
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <HAL_MspInit+0x5c>)
 8000c4c:	69db      	ldr	r3, [r3, #28]
 8000c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c56:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <HAL_MspInit+0x60>)
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	4a04      	ldr	r2, [pc, #16]	; (8000c80 <HAL_MspInit+0x60>)
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c72:	bf00      	nop
 8000c74:	3714      	adds	r7, #20
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bc80      	pop	{r7}
 8000c7a:	4770      	bx	lr
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	40010000 	.word	0x40010000

08000c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <NMI_Handler+0x4>

08000c8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c8e:	e7fe      	b.n	8000c8e <HardFault_Handler+0x4>

08000c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <MemManage_Handler+0x4>

08000c96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <BusFault_Handler+0x4>

08000c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <UsageFault_Handler+0x4>

08000ca2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr

08000cae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr

08000cba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bc80      	pop	{r7}
 8000cc4:	4770      	bx	lr

08000cc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cca:	f000 f9e7 	bl	800109c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cdc:	4a14      	ldr	r2, [pc, #80]	; (8000d30 <_sbrk+0x5c>)
 8000cde:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <_sbrk+0x60>)
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce8:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <_sbrk+0x64>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d102      	bne.n	8000cf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf0:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <_sbrk+0x64>)
 8000cf2:	4a12      	ldr	r2, [pc, #72]	; (8000d3c <_sbrk+0x68>)
 8000cf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cf6:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <_sbrk+0x64>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d207      	bcs.n	8000d14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d04:	f003 ff96 	bl	8004c34 <__errno>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	220c      	movs	r2, #12
 8000d0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d12:	e009      	b.n	8000d28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <_sbrk+0x64>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d1a:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <_sbrk+0x64>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	4a05      	ldr	r2, [pc, #20]	; (8000d38 <_sbrk+0x64>)
 8000d24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d26:	68fb      	ldr	r3, [r7, #12]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3718      	adds	r7, #24
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20005000 	.word	0x20005000
 8000d34:	00000400 	.word	0x00000400
 8000d38:	2000012c 	.word	0x2000012c
 8000d3c:	20000310 	.word	0x20000310

08000d40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr

08000d4c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08e      	sub	sp, #56	; 0x38
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d60:	f107 0320 	add.w	r3, r7, #32
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
 8000d78:	615a      	str	r2, [r3, #20]
 8000d7a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d7c:	4b2c      	ldr	r3, [pc, #176]	; (8000e30 <MX_TIM3_Init+0xe4>)
 8000d7e:	4a2d      	ldr	r2, [pc, #180]	; (8000e34 <MX_TIM3_Init+0xe8>)
 8000d80:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 8000d82:	4b2b      	ldr	r3, [pc, #172]	; (8000e30 <MX_TIM3_Init+0xe4>)
 8000d84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d88:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d8a:	4b29      	ldr	r3, [pc, #164]	; (8000e30 <MX_TIM3_Init+0xe4>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 15-1;
 8000d90:	4b27      	ldr	r3, [pc, #156]	; (8000e30 <MX_TIM3_Init+0xe4>)
 8000d92:	220e      	movs	r2, #14
 8000d94:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d96:	4b26      	ldr	r3, [pc, #152]	; (8000e30 <MX_TIM3_Init+0xe4>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d9c:	4b24      	ldr	r3, [pc, #144]	; (8000e30 <MX_TIM3_Init+0xe4>)
 8000d9e:	2280      	movs	r2, #128	; 0x80
 8000da0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000da2:	4823      	ldr	r0, [pc, #140]	; (8000e30 <MX_TIM3_Init+0xe4>)
 8000da4:	f002 fe5c 	bl	8003a60 <HAL_TIM_Base_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000dae:	f7ff ff31 	bl	8000c14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000db2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000db6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000db8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	481c      	ldr	r0, [pc, #112]	; (8000e30 <MX_TIM3_Init+0xe4>)
 8000dc0:	f003 f858 	bl	8003e74 <HAL_TIM_ConfigClockSource>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000dca:	f7ff ff23 	bl	8000c14 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000dce:	4818      	ldr	r0, [pc, #96]	; (8000e30 <MX_TIM3_Init+0xe4>)
 8000dd0:	f002 fe95 	bl	8003afe <HAL_TIM_OC_Init>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000dda:	f7ff ff1b 	bl	8000c14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dde:	2300      	movs	r3, #0
 8000de0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000de2:	2300      	movs	r3, #0
 8000de4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000de6:	f107 0320 	add.w	r3, r7, #32
 8000dea:	4619      	mov	r1, r3
 8000dec:	4810      	ldr	r0, [pc, #64]	; (8000e30 <MX_TIM3_Init+0xe4>)
 8000dee:	f003 fbad 	bl	800454c <HAL_TIMEx_MasterConfigSynchronization>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000df8:	f7ff ff0c 	bl	8000c14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000dfc:	2330      	movs	r3, #48	; 0x30
 8000dfe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e04:	2300      	movs	r3, #0
 8000e06:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e0c:	1d3b      	adds	r3, r7, #4
 8000e0e:	2208      	movs	r2, #8
 8000e10:	4619      	mov	r1, r3
 8000e12:	4807      	ldr	r0, [pc, #28]	; (8000e30 <MX_TIM3_Init+0xe4>)
 8000e14:	f002 ffd2 	bl	8003dbc <HAL_TIM_OC_ConfigChannel>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000e1e:	f7ff fef9 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e22:	4803      	ldr	r0, [pc, #12]	; (8000e30 <MX_TIM3_Init+0xe4>)
 8000e24:	f000 f826 	bl	8000e74 <HAL_TIM_MspPostInit>

}
 8000e28:	bf00      	nop
 8000e2a:	3738      	adds	r7, #56	; 0x38
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20000130 	.word	0x20000130
 8000e34:	40000400 	.word	0x40000400

08000e38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a09      	ldr	r2, [pc, #36]	; (8000e6c <HAL_TIM_Base_MspInit+0x34>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d10b      	bne.n	8000e62 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e4a:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <HAL_TIM_Base_MspInit+0x38>)
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	4a08      	ldr	r2, [pc, #32]	; (8000e70 <HAL_TIM_Base_MspInit+0x38>)
 8000e50:	f043 0302 	orr.w	r3, r3, #2
 8000e54:	61d3      	str	r3, [r2, #28]
 8000e56:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <HAL_TIM_Base_MspInit+0x38>)
 8000e58:	69db      	ldr	r3, [r3, #28]
 8000e5a:	f003 0302 	and.w	r3, r3, #2
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000e62:	bf00      	nop
 8000e64:	3714      	adds	r7, #20
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr
 8000e6c:	40000400 	.word	0x40000400
 8000e70:	40021000 	.word	0x40021000

08000e74 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b088      	sub	sp, #32
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7c:	f107 0310 	add.w	r3, r7, #16
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a0f      	ldr	r2, [pc, #60]	; (8000ecc <HAL_TIM_MspPostInit+0x58>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d117      	bne.n	8000ec4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e94:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <HAL_TIM_MspPostInit+0x5c>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	4a0d      	ldr	r2, [pc, #52]	; (8000ed0 <HAL_TIM_MspPostInit+0x5c>)
 8000e9a:	f043 0308 	orr.w	r3, r3, #8
 8000e9e:	6193      	str	r3, [r2, #24]
 8000ea0:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <HAL_TIM_MspPostInit+0x5c>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	f003 0308 	and.w	r3, r3, #8
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000eac:	2301      	movs	r3, #1
 8000eae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb8:	f107 0310 	add.w	r3, r7, #16
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <HAL_TIM_MspPostInit+0x60>)
 8000ec0:	f000 fe68 	bl	8001b94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000ec4:	bf00      	nop
 8000ec6:	3720      	adds	r7, #32
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40000400 	.word	0x40000400
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	40010c00 	.word	0x40010c00

08000ed8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000edc:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <MX_USART1_UART_Init+0x4c>)
 8000ede:	4a12      	ldr	r2, [pc, #72]	; (8000f28 <MX_USART1_UART_Init+0x50>)
 8000ee0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 4800;
 8000ee2:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <MX_USART1_UART_Init+0x4c>)
 8000ee4:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8000ee8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000eea:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <MX_USART1_UART_Init+0x4c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <MX_USART1_UART_Init+0x4c>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ef6:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <MX_USART1_UART_Init+0x4c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000efc:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <MX_USART1_UART_Init+0x4c>)
 8000efe:	220c      	movs	r2, #12
 8000f00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f02:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <MX_USART1_UART_Init+0x4c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <MX_USART1_UART_Init+0x4c>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f0e:	4805      	ldr	r0, [pc, #20]	; (8000f24 <MX_USART1_UART_Init+0x4c>)
 8000f10:	f003 fb7a 	bl	8004608 <HAL_UART_Init>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f1a:	f7ff fe7b 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000178 	.word	0x20000178
 8000f28:	40013800 	.word	0x40013800

08000f2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b088      	sub	sp, #32
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f34:	f107 0310 	add.w	r3, r7, #16
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a1c      	ldr	r2, [pc, #112]	; (8000fb8 <HAL_UART_MspInit+0x8c>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d131      	bne.n	8000fb0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f4c:	4b1b      	ldr	r3, [pc, #108]	; (8000fbc <HAL_UART_MspInit+0x90>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	4a1a      	ldr	r2, [pc, #104]	; (8000fbc <HAL_UART_MspInit+0x90>)
 8000f52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f56:	6193      	str	r3, [r2, #24]
 8000f58:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <HAL_UART_MspInit+0x90>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f64:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <HAL_UART_MspInit+0x90>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	4a14      	ldr	r2, [pc, #80]	; (8000fbc <HAL_UART_MspInit+0x90>)
 8000f6a:	f043 0304 	orr.w	r3, r3, #4
 8000f6e:	6193      	str	r3, [r2, #24]
 8000f70:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <HAL_UART_MspInit+0x90>)
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	f003 0304 	and.w	r3, r3, #4
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f80:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f82:	2302      	movs	r3, #2
 8000f84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f86:	2303      	movs	r3, #3
 8000f88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8a:	f107 0310 	add.w	r3, r7, #16
 8000f8e:	4619      	mov	r1, r3
 8000f90:	480b      	ldr	r0, [pc, #44]	; (8000fc0 <HAL_UART_MspInit+0x94>)
 8000f92:	f000 fdff 	bl	8001b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa4:	f107 0310 	add.w	r3, r7, #16
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <HAL_UART_MspInit+0x94>)
 8000fac:	f000 fdf2 	bl	8001b94 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000fb0:	bf00      	nop
 8000fb2:	3720      	adds	r7, #32
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40013800 	.word	0x40013800
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	40010800 	.word	0x40010800

08000fc4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fc4:	f7ff febc 	bl	8000d40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fc8:	480b      	ldr	r0, [pc, #44]	; (8000ff8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000fca:	490c      	ldr	r1, [pc, #48]	; (8000ffc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000fcc:	4a0c      	ldr	r2, [pc, #48]	; (8001000 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000fce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fd0:	e002      	b.n	8000fd8 <LoopCopyDataInit>

08000fd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fd6:	3304      	adds	r3, #4

08000fd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fdc:	d3f9      	bcc.n	8000fd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fde:	4a09      	ldr	r2, [pc, #36]	; (8001004 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000fe0:	4c09      	ldr	r4, [pc, #36]	; (8001008 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fe2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe4:	e001      	b.n	8000fea <LoopFillZerobss>

08000fe6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fe6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe8:	3204      	adds	r2, #4

08000fea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fec:	d3fb      	bcc.n	8000fe6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fee:	f003 fe27 	bl	8004c40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ff2:	f7ff fa79 	bl	80004e8 <main>
  bx lr
 8000ff6:	4770      	bx	lr
  ldr r0, =_sdata
 8000ff8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ffc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001000:	080058ac 	.word	0x080058ac
  ldr r2, =_sbss
 8001004:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001008:	2000030c 	.word	0x2000030c

0800100c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800100c:	e7fe      	b.n	800100c <ADC1_2_IRQHandler>
	...

08001010 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001014:	4b08      	ldr	r3, [pc, #32]	; (8001038 <HAL_Init+0x28>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a07      	ldr	r2, [pc, #28]	; (8001038 <HAL_Init+0x28>)
 800101a:	f043 0310 	orr.w	r3, r3, #16
 800101e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001020:	2003      	movs	r0, #3
 8001022:	f000 fd83 	bl	8001b2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001026:	200f      	movs	r0, #15
 8001028:	f000 f808 	bl	800103c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800102c:	f7ff fdf8 	bl	8000c20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40022000 	.word	0x40022000

0800103c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <HAL_InitTick+0x54>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	4b12      	ldr	r3, [pc, #72]	; (8001094 <HAL_InitTick+0x58>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	4619      	mov	r1, r3
 800104e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001052:	fbb3 f3f1 	udiv	r3, r3, r1
 8001056:	fbb2 f3f3 	udiv	r3, r2, r3
 800105a:	4618      	mov	r0, r3
 800105c:	f000 fd8d 	bl	8001b7a <HAL_SYSTICK_Config>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e00e      	b.n	8001088 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2b0f      	cmp	r3, #15
 800106e:	d80a      	bhi.n	8001086 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001070:	2200      	movs	r2, #0
 8001072:	6879      	ldr	r1, [r7, #4]
 8001074:	f04f 30ff 	mov.w	r0, #4294967295
 8001078:	f000 fd63 	bl	8001b42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800107c:	4a06      	ldr	r2, [pc, #24]	; (8001098 <HAL_InitTick+0x5c>)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001082:	2300      	movs	r3, #0
 8001084:	e000      	b.n	8001088 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
}
 8001088:	4618      	mov	r0, r3
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000000 	.word	0x20000000
 8001094:	20000008 	.word	0x20000008
 8001098:	20000004 	.word	0x20000004

0800109c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010a0:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <HAL_IncTick+0x1c>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	461a      	mov	r2, r3
 80010a6:	4b05      	ldr	r3, [pc, #20]	; (80010bc <HAL_IncTick+0x20>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4413      	add	r3, r2
 80010ac:	4a03      	ldr	r2, [pc, #12]	; (80010bc <HAL_IncTick+0x20>)
 80010ae:	6013      	str	r3, [r2, #0]
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr
 80010b8:	20000008 	.word	0x20000008
 80010bc:	200001c0 	.word	0x200001c0

080010c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return uwTick;
 80010c4:	4b02      	ldr	r3, [pc, #8]	; (80010d0 <HAL_GetTick+0x10>)
 80010c6:	681b      	ldr	r3, [r3, #0]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr
 80010d0:	200001c0 	.word	0x200001c0

080010d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010dc:	f7ff fff0 	bl	80010c0 <HAL_GetTick>
 80010e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ec:	d005      	beq.n	80010fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ee:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <HAL_Delay+0x44>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	461a      	mov	r2, r3
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4413      	add	r3, r2
 80010f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010fa:	bf00      	nop
 80010fc:	f7ff ffe0 	bl	80010c0 <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	429a      	cmp	r2, r3
 800110a:	d8f7      	bhi.n	80010fc <HAL_Delay+0x28>
  {
  }
}
 800110c:	bf00      	nop
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000008 	.word	0x20000008

0800111c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001124:	2300      	movs	r3, #0
 8001126:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001128:	2300      	movs	r3, #0
 800112a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800112c:	2300      	movs	r3, #0
 800112e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001130:	2300      	movs	r3, #0
 8001132:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d101      	bne.n	800113e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e0be      	b.n	80012bc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001148:	2b00      	cmp	r3, #0
 800114a:	d109      	bne.n	8001160 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff f87a 	bl	8000254 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f000 fbf1 	bl	8001948 <ADC_ConversionStop_Disable>
 8001166:	4603      	mov	r3, r0
 8001168:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800116e:	f003 0310 	and.w	r3, r3, #16
 8001172:	2b00      	cmp	r3, #0
 8001174:	f040 8099 	bne.w	80012aa <HAL_ADC_Init+0x18e>
 8001178:	7dfb      	ldrb	r3, [r7, #23]
 800117a:	2b00      	cmp	r3, #0
 800117c:	f040 8095 	bne.w	80012aa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001184:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001188:	f023 0302 	bic.w	r3, r3, #2
 800118c:	f043 0202 	orr.w	r2, r3, #2
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800119c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	7b1b      	ldrb	r3, [r3, #12]
 80011a2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80011a4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011b4:	d003      	beq.n	80011be <HAL_ADC_Init+0xa2>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d102      	bne.n	80011c4 <HAL_ADC_Init+0xa8>
 80011be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011c2:	e000      	b.n	80011c6 <HAL_ADC_Init+0xaa>
 80011c4:	2300      	movs	r3, #0
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	7d1b      	ldrb	r3, [r3, #20]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d119      	bne.n	8001208 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	7b1b      	ldrb	r3, [r3, #12]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d109      	bne.n	80011f0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	3b01      	subs	r3, #1
 80011e2:	035a      	lsls	r2, r3, #13
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011ec:	613b      	str	r3, [r7, #16]
 80011ee:	e00b      	b.n	8001208 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f4:	f043 0220 	orr.w	r2, r3, #32
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001200:	f043 0201 	orr.w	r2, r3, #1
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	430a      	orrs	r2, r1
 800121a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	689a      	ldr	r2, [r3, #8]
 8001222:	4b28      	ldr	r3, [pc, #160]	; (80012c4 <HAL_ADC_Init+0x1a8>)
 8001224:	4013      	ands	r3, r2
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	6812      	ldr	r2, [r2, #0]
 800122a:	68b9      	ldr	r1, [r7, #8]
 800122c:	430b      	orrs	r3, r1
 800122e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001238:	d003      	beq.n	8001242 <HAL_ADC_Init+0x126>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d104      	bne.n	800124c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	691b      	ldr	r3, [r3, #16]
 8001246:	3b01      	subs	r3, #1
 8001248:	051b      	lsls	r3, r3, #20
 800124a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001252:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	430a      	orrs	r2, r1
 800125e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	689a      	ldr	r2, [r3, #8]
 8001266:	4b18      	ldr	r3, [pc, #96]	; (80012c8 <HAL_ADC_Init+0x1ac>)
 8001268:	4013      	ands	r3, r2
 800126a:	68ba      	ldr	r2, [r7, #8]
 800126c:	429a      	cmp	r2, r3
 800126e:	d10b      	bne.n	8001288 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800127a:	f023 0303 	bic.w	r3, r3, #3
 800127e:	f043 0201 	orr.w	r2, r3, #1
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001286:	e018      	b.n	80012ba <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800128c:	f023 0312 	bic.w	r3, r3, #18
 8001290:	f043 0210 	orr.w	r2, r3, #16
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800129c:	f043 0201 	orr.w	r2, r3, #1
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012a8:	e007      	b.n	80012ba <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ae:	f043 0210 	orr.w	r2, r3, #16
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80012ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3718      	adds	r7, #24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	ffe1f7fd 	.word	0xffe1f7fd
 80012c8:	ff1f0efe 	.word	0xff1f0efe

080012cc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012d4:	2300      	movs	r3, #0
 80012d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d101      	bne.n	80012e6 <HAL_ADC_Start+0x1a>
 80012e2:	2302      	movs	r3, #2
 80012e4:	e098      	b.n	8001418 <HAL_ADC_Start+0x14c>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2201      	movs	r2, #1
 80012ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f000 fad0 	bl	8001894 <ADC_Enable>
 80012f4:	4603      	mov	r3, r0
 80012f6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f040 8087 	bne.w	800140e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001304:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001308:	f023 0301 	bic.w	r3, r3, #1
 800130c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a41      	ldr	r2, [pc, #260]	; (8001420 <HAL_ADC_Start+0x154>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d105      	bne.n	800132a <HAL_ADC_Start+0x5e>
 800131e:	4b41      	ldr	r3, [pc, #260]	; (8001424 <HAL_ADC_Start+0x158>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d115      	bne.n	8001356 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800132e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001340:	2b00      	cmp	r3, #0
 8001342:	d026      	beq.n	8001392 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001348:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800134c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001354:	e01d      	b.n	8001392 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800135a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a2f      	ldr	r2, [pc, #188]	; (8001424 <HAL_ADC_Start+0x158>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d004      	beq.n	8001376 <HAL_ADC_Start+0xaa>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a2b      	ldr	r2, [pc, #172]	; (8001420 <HAL_ADC_Start+0x154>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d10d      	bne.n	8001392 <HAL_ADC_Start+0xc6>
 8001376:	4b2b      	ldr	r3, [pc, #172]	; (8001424 <HAL_ADC_Start+0x158>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800137e:	2b00      	cmp	r3, #0
 8001380:	d007      	beq.n	8001392 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001386:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800138a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001396:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d006      	beq.n	80013ac <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a2:	f023 0206 	bic.w	r2, r3, #6
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80013aa:	e002      	b.n	80013b2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f06f 0202 	mvn.w	r2, #2
 80013c2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80013ce:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80013d2:	d113      	bne.n	80013fc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80013d8:	4a11      	ldr	r2, [pc, #68]	; (8001420 <HAL_ADC_Start+0x154>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d105      	bne.n	80013ea <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80013de:	4b11      	ldr	r3, [pc, #68]	; (8001424 <HAL_ADC_Start+0x158>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d108      	bne.n	80013fc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	e00c      	b.n	8001416 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	689a      	ldr	r2, [r3, #8]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	e003      	b.n	8001416 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001416:	7bfb      	ldrb	r3, [r7, #15]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3710      	adds	r7, #16
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40012800 	.word	0x40012800
 8001424:	40012400 	.word	0x40012400

08001428 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001430:	2300      	movs	r3, #0
 8001432:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800143a:	2b01      	cmp	r3, #1
 800143c:	d101      	bne.n	8001442 <HAL_ADC_Stop+0x1a>
 800143e:	2302      	movs	r3, #2
 8001440:	e01a      	b.n	8001478 <HAL_ADC_Stop+0x50>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2201      	movs	r2, #1
 8001446:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f000 fa7c 	bl	8001948 <ADC_ConversionStop_Disable>
 8001450:	4603      	mov	r3, r0
 8001452:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001454:	7bfb      	ldrb	r3, [r7, #15]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d109      	bne.n	800146e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800145e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001462:	f023 0301 	bic.w	r3, r3, #1
 8001466:	f043 0201 	orr.w	r2, r3, #1
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001476:	7bfb      	ldrb	r3, [r7, #15]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001480:	b590      	push	{r4, r7, lr}
 8001482:	b087      	sub	sp, #28
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001496:	f7ff fe13 	bl	80010c0 <HAL_GetTick>
 800149a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d00b      	beq.n	80014c2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ae:	f043 0220 	orr.w	r2, r3, #32
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e0d3      	b.n	800166a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d131      	bne.n	8001534 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d12a      	bne.n	8001534 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80014de:	e021      	b.n	8001524 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014e6:	d01d      	beq.n	8001524 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d007      	beq.n	80014fe <HAL_ADC_PollForConversion+0x7e>
 80014ee:	f7ff fde7 	bl	80010c0 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d212      	bcs.n	8001524 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d10b      	bne.n	8001524 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001510:	f043 0204 	orr.w	r2, r3, #4
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e0a2      	b.n	800166a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d0d6      	beq.n	80014e0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001532:	e070      	b.n	8001616 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001534:	4b4f      	ldr	r3, [pc, #316]	; (8001674 <HAL_ADC_PollForConversion+0x1f4>)
 8001536:	681c      	ldr	r4, [r3, #0]
 8001538:	2002      	movs	r0, #2
 800153a:	f002 f9db 	bl	80038f4 <HAL_RCCEx_GetPeriphCLKFreq>
 800153e:	4603      	mov	r3, r0
 8001540:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6919      	ldr	r1, [r3, #16]
 800154a:	4b4b      	ldr	r3, [pc, #300]	; (8001678 <HAL_ADC_PollForConversion+0x1f8>)
 800154c:	400b      	ands	r3, r1
 800154e:	2b00      	cmp	r3, #0
 8001550:	d118      	bne.n	8001584 <HAL_ADC_PollForConversion+0x104>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	68d9      	ldr	r1, [r3, #12]
 8001558:	4b48      	ldr	r3, [pc, #288]	; (800167c <HAL_ADC_PollForConversion+0x1fc>)
 800155a:	400b      	ands	r3, r1
 800155c:	2b00      	cmp	r3, #0
 800155e:	d111      	bne.n	8001584 <HAL_ADC_PollForConversion+0x104>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6919      	ldr	r1, [r3, #16]
 8001566:	4b46      	ldr	r3, [pc, #280]	; (8001680 <HAL_ADC_PollForConversion+0x200>)
 8001568:	400b      	ands	r3, r1
 800156a:	2b00      	cmp	r3, #0
 800156c:	d108      	bne.n	8001580 <HAL_ADC_PollForConversion+0x100>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	68d9      	ldr	r1, [r3, #12]
 8001574:	4b43      	ldr	r3, [pc, #268]	; (8001684 <HAL_ADC_PollForConversion+0x204>)
 8001576:	400b      	ands	r3, r1
 8001578:	2b00      	cmp	r3, #0
 800157a:	d101      	bne.n	8001580 <HAL_ADC_PollForConversion+0x100>
 800157c:	2314      	movs	r3, #20
 800157e:	e020      	b.n	80015c2 <HAL_ADC_PollForConversion+0x142>
 8001580:	2329      	movs	r3, #41	; 0x29
 8001582:	e01e      	b.n	80015c2 <HAL_ADC_PollForConversion+0x142>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	6919      	ldr	r1, [r3, #16]
 800158a:	4b3d      	ldr	r3, [pc, #244]	; (8001680 <HAL_ADC_PollForConversion+0x200>)
 800158c:	400b      	ands	r3, r1
 800158e:	2b00      	cmp	r3, #0
 8001590:	d106      	bne.n	80015a0 <HAL_ADC_PollForConversion+0x120>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	68d9      	ldr	r1, [r3, #12]
 8001598:	4b3a      	ldr	r3, [pc, #232]	; (8001684 <HAL_ADC_PollForConversion+0x204>)
 800159a:	400b      	ands	r3, r1
 800159c:	2b00      	cmp	r3, #0
 800159e:	d00d      	beq.n	80015bc <HAL_ADC_PollForConversion+0x13c>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	6919      	ldr	r1, [r3, #16]
 80015a6:	4b38      	ldr	r3, [pc, #224]	; (8001688 <HAL_ADC_PollForConversion+0x208>)
 80015a8:	400b      	ands	r3, r1
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d108      	bne.n	80015c0 <HAL_ADC_PollForConversion+0x140>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	68d9      	ldr	r1, [r3, #12]
 80015b4:	4b34      	ldr	r3, [pc, #208]	; (8001688 <HAL_ADC_PollForConversion+0x208>)
 80015b6:	400b      	ands	r3, r1
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d101      	bne.n	80015c0 <HAL_ADC_PollForConversion+0x140>
 80015bc:	2354      	movs	r3, #84	; 0x54
 80015be:	e000      	b.n	80015c2 <HAL_ADC_PollForConversion+0x142>
 80015c0:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80015c2:	fb02 f303 	mul.w	r3, r2, r3
 80015c6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80015c8:	e021      	b.n	800160e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015d0:	d01a      	beq.n	8001608 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d007      	beq.n	80015e8 <HAL_ADC_PollForConversion+0x168>
 80015d8:	f7ff fd72 	bl	80010c0 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	683a      	ldr	r2, [r7, #0]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d20f      	bcs.n	8001608 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d90b      	bls.n	8001608 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f4:	f043 0204 	orr.w	r2, r3, #4
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e030      	b.n	800166a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	3301      	adds	r3, #1
 800160c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	429a      	cmp	r2, r3
 8001614:	d8d9      	bhi.n	80015ca <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f06f 0212 	mvn.w	r2, #18
 800161e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001624:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001636:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800163a:	d115      	bne.n	8001668 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001640:	2b00      	cmp	r3, #0
 8001642:	d111      	bne.n	8001668 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001648:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001654:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d105      	bne.n	8001668 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001660:	f043 0201 	orr.w	r2, r3, #1
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	371c      	adds	r7, #28
 800166e:	46bd      	mov	sp, r7
 8001670:	bd90      	pop	{r4, r7, pc}
 8001672:	bf00      	nop
 8001674:	20000000 	.word	0x20000000
 8001678:	24924924 	.word	0x24924924
 800167c:	00924924 	.word	0x00924924
 8001680:	12492492 	.word	0x12492492
 8001684:	00492492 	.word	0x00492492
 8001688:	00249249 	.word	0x00249249

0800168c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800169a:	4618      	mov	r0, r3
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr

080016a4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016ae:	2300      	movs	r3, #0
 80016b0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80016b2:	2300      	movs	r3, #0
 80016b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d101      	bne.n	80016c4 <HAL_ADC_ConfigChannel+0x20>
 80016c0:	2302      	movs	r3, #2
 80016c2:	e0dc      	b.n	800187e <HAL_ADC_ConfigChannel+0x1da>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2201      	movs	r2, #1
 80016c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	2b06      	cmp	r3, #6
 80016d2:	d81c      	bhi.n	800170e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	4613      	mov	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	4413      	add	r3, r2
 80016e4:	3b05      	subs	r3, #5
 80016e6:	221f      	movs	r2, #31
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	43db      	mvns	r3, r3
 80016ee:	4019      	ands	r1, r3
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	6818      	ldr	r0, [r3, #0]
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685a      	ldr	r2, [r3, #4]
 80016f8:	4613      	mov	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4413      	add	r3, r2
 80016fe:	3b05      	subs	r3, #5
 8001700:	fa00 f203 	lsl.w	r2, r0, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	430a      	orrs	r2, r1
 800170a:	635a      	str	r2, [r3, #52]	; 0x34
 800170c:	e03c      	b.n	8001788 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2b0c      	cmp	r3, #12
 8001714:	d81c      	bhi.n	8001750 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685a      	ldr	r2, [r3, #4]
 8001720:	4613      	mov	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4413      	add	r3, r2
 8001726:	3b23      	subs	r3, #35	; 0x23
 8001728:	221f      	movs	r2, #31
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43db      	mvns	r3, r3
 8001730:	4019      	ands	r1, r3
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	6818      	ldr	r0, [r3, #0]
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	4613      	mov	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	3b23      	subs	r3, #35	; 0x23
 8001742:	fa00 f203 	lsl.w	r2, r0, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	430a      	orrs	r2, r1
 800174c:	631a      	str	r2, [r3, #48]	; 0x30
 800174e:	e01b      	b.n	8001788 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685a      	ldr	r2, [r3, #4]
 800175a:	4613      	mov	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	3b41      	subs	r3, #65	; 0x41
 8001762:	221f      	movs	r2, #31
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	43db      	mvns	r3, r3
 800176a:	4019      	ands	r1, r3
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	6818      	ldr	r0, [r3, #0]
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	4613      	mov	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	3b41      	subs	r3, #65	; 0x41
 800177c:	fa00 f203 	lsl.w	r2, r0, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	430a      	orrs	r2, r1
 8001786:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2b09      	cmp	r3, #9
 800178e:	d91c      	bls.n	80017ca <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	68d9      	ldr	r1, [r3, #12]
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	4613      	mov	r3, r2
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	4413      	add	r3, r2
 80017a0:	3b1e      	subs	r3, #30
 80017a2:	2207      	movs	r2, #7
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	4019      	ands	r1, r3
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	6898      	ldr	r0, [r3, #8]
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	4613      	mov	r3, r2
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	4413      	add	r3, r2
 80017ba:	3b1e      	subs	r3, #30
 80017bc:	fa00 f203 	lsl.w	r2, r0, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	430a      	orrs	r2, r1
 80017c6:	60da      	str	r2, [r3, #12]
 80017c8:	e019      	b.n	80017fe <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	6919      	ldr	r1, [r3, #16]
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	4613      	mov	r3, r2
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	4413      	add	r3, r2
 80017da:	2207      	movs	r2, #7
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	4019      	ands	r1, r3
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	6898      	ldr	r0, [r3, #8]
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	4613      	mov	r3, r2
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	4413      	add	r3, r2
 80017f2:	fa00 f203 	lsl.w	r2, r0, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	430a      	orrs	r2, r1
 80017fc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2b10      	cmp	r3, #16
 8001804:	d003      	beq.n	800180e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800180a:	2b11      	cmp	r3, #17
 800180c:	d132      	bne.n	8001874 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a1d      	ldr	r2, [pc, #116]	; (8001888 <HAL_ADC_ConfigChannel+0x1e4>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d125      	bne.n	8001864 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d126      	bne.n	8001874 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001834:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2b10      	cmp	r3, #16
 800183c:	d11a      	bne.n	8001874 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800183e:	4b13      	ldr	r3, [pc, #76]	; (800188c <HAL_ADC_ConfigChannel+0x1e8>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a13      	ldr	r2, [pc, #76]	; (8001890 <HAL_ADC_ConfigChannel+0x1ec>)
 8001844:	fba2 2303 	umull	r2, r3, r2, r3
 8001848:	0c9a      	lsrs	r2, r3, #18
 800184a:	4613      	mov	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001854:	e002      	b.n	800185c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	3b01      	subs	r3, #1
 800185a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1f9      	bne.n	8001856 <HAL_ADC_ConfigChannel+0x1b2>
 8001862:	e007      	b.n	8001874 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001868:	f043 0220 	orr.w	r2, r3, #32
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800187c:	7bfb      	ldrb	r3, [r7, #15]
}
 800187e:	4618      	mov	r0, r3
 8001880:	3714      	adds	r7, #20
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr
 8001888:	40012400 	.word	0x40012400
 800188c:	20000000 	.word	0x20000000
 8001890:	431bde83 	.word	0x431bde83

08001894 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800189c:	2300      	movs	r3, #0
 800189e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d040      	beq.n	8001934 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	689a      	ldr	r2, [r3, #8]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f042 0201 	orr.w	r2, r2, #1
 80018c0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018c2:	4b1f      	ldr	r3, [pc, #124]	; (8001940 <ADC_Enable+0xac>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a1f      	ldr	r2, [pc, #124]	; (8001944 <ADC_Enable+0xb0>)
 80018c8:	fba2 2303 	umull	r2, r3, r2, r3
 80018cc:	0c9b      	lsrs	r3, r3, #18
 80018ce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80018d0:	e002      	b.n	80018d8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	3b01      	subs	r3, #1
 80018d6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f9      	bne.n	80018d2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80018de:	f7ff fbef 	bl	80010c0 <HAL_GetTick>
 80018e2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80018e4:	e01f      	b.n	8001926 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80018e6:	f7ff fbeb 	bl	80010c0 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d918      	bls.n	8001926 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d011      	beq.n	8001926 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001906:	f043 0210 	orr.w	r2, r3, #16
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001912:	f043 0201 	orr.w	r2, r3, #1
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e007      	b.n	8001936 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	2b01      	cmp	r3, #1
 8001932:	d1d8      	bne.n	80018e6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000000 	.word	0x20000000
 8001944:	431bde83 	.word	0x431bde83

08001948 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001950:	2300      	movs	r3, #0
 8001952:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	2b01      	cmp	r3, #1
 8001960:	d12e      	bne.n	80019c0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f022 0201 	bic.w	r2, r2, #1
 8001970:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001972:	f7ff fba5 	bl	80010c0 <HAL_GetTick>
 8001976:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001978:	e01b      	b.n	80019b2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800197a:	f7ff fba1 	bl	80010c0 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d914      	bls.n	80019b2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	2b01      	cmp	r3, #1
 8001994:	d10d      	bne.n	80019b2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199a:	f043 0210 	orr.w	r2, r3, #16
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a6:	f043 0201 	orr.w	r2, r3, #1
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e007      	b.n	80019c2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d0dc      	beq.n	800197a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
	...

080019cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019dc:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <__NVIC_SetPriorityGrouping+0x44>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019e2:	68ba      	ldr	r2, [r7, #8]
 80019e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019e8:	4013      	ands	r3, r2
 80019ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019fe:	4a04      	ldr	r2, [pc, #16]	; (8001a10 <__NVIC_SetPriorityGrouping+0x44>)
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	60d3      	str	r3, [r2, #12]
}
 8001a04:	bf00      	nop
 8001a06:	3714      	adds	r7, #20
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a18:	4b04      	ldr	r3, [pc, #16]	; (8001a2c <__NVIC_GetPriorityGrouping+0x18>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	0a1b      	lsrs	r3, r3, #8
 8001a1e:	f003 0307 	and.w	r3, r3, #7
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc80      	pop	{r7}
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	6039      	str	r1, [r7, #0]
 8001a3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	db0a      	blt.n	8001a5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	490c      	ldr	r1, [pc, #48]	; (8001a7c <__NVIC_SetPriority+0x4c>)
 8001a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4e:	0112      	lsls	r2, r2, #4
 8001a50:	b2d2      	uxtb	r2, r2
 8001a52:	440b      	add	r3, r1
 8001a54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a58:	e00a      	b.n	8001a70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	b2da      	uxtb	r2, r3
 8001a5e:	4908      	ldr	r1, [pc, #32]	; (8001a80 <__NVIC_SetPriority+0x50>)
 8001a60:	79fb      	ldrb	r3, [r7, #7]
 8001a62:	f003 030f 	and.w	r3, r3, #15
 8001a66:	3b04      	subs	r3, #4
 8001a68:	0112      	lsls	r2, r2, #4
 8001a6a:	b2d2      	uxtb	r2, r2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	761a      	strb	r2, [r3, #24]
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bc80      	pop	{r7}
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	e000e100 	.word	0xe000e100
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b089      	sub	sp, #36	; 0x24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	f1c3 0307 	rsb	r3, r3, #7
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	bf28      	it	cs
 8001aa2:	2304      	movcs	r3, #4
 8001aa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	2b06      	cmp	r3, #6
 8001aac:	d902      	bls.n	8001ab4 <NVIC_EncodePriority+0x30>
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	3b03      	subs	r3, #3
 8001ab2:	e000      	b.n	8001ab6 <NVIC_EncodePriority+0x32>
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43da      	mvns	r2, r3
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	401a      	ands	r2, r3
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001acc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad6:	43d9      	mvns	r1, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001adc:	4313      	orrs	r3, r2
         );
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3724      	adds	r7, #36	; 0x24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr

08001ae8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3b01      	subs	r3, #1
 8001af4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001af8:	d301      	bcc.n	8001afe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001afa:	2301      	movs	r3, #1
 8001afc:	e00f      	b.n	8001b1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001afe:	4a0a      	ldr	r2, [pc, #40]	; (8001b28 <SysTick_Config+0x40>)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3b01      	subs	r3, #1
 8001b04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b06:	210f      	movs	r1, #15
 8001b08:	f04f 30ff 	mov.w	r0, #4294967295
 8001b0c:	f7ff ff90 	bl	8001a30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b10:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <SysTick_Config+0x40>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b16:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <SysTick_Config+0x40>)
 8001b18:	2207      	movs	r2, #7
 8001b1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	e000e010 	.word	0xe000e010

08001b2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7ff ff49 	bl	80019cc <__NVIC_SetPriorityGrouping>
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b086      	sub	sp, #24
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	4603      	mov	r3, r0
 8001b4a:	60b9      	str	r1, [r7, #8]
 8001b4c:	607a      	str	r2, [r7, #4]
 8001b4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b54:	f7ff ff5e 	bl	8001a14 <__NVIC_GetPriorityGrouping>
 8001b58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	68b9      	ldr	r1, [r7, #8]
 8001b5e:	6978      	ldr	r0, [r7, #20]
 8001b60:	f7ff ff90 	bl	8001a84 <NVIC_EncodePriority>
 8001b64:	4602      	mov	r2, r0
 8001b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b6a:	4611      	mov	r1, r2
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff ff5f 	bl	8001a30 <__NVIC_SetPriority>
}
 8001b72:	bf00      	nop
 8001b74:	3718      	adds	r7, #24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b082      	sub	sp, #8
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff ffb0 	bl	8001ae8 <SysTick_Config>
 8001b88:	4603      	mov	r3, r0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
	...

08001b94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b08b      	sub	sp, #44	; 0x2c
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ba6:	e169      	b.n	8001e7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ba8:	2201      	movs	r2, #1
 8001baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	69fa      	ldr	r2, [r7, #28]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	f040 8158 	bne.w	8001e76 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	4a9a      	ldr	r2, [pc, #616]	; (8001e34 <HAL_GPIO_Init+0x2a0>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d05e      	beq.n	8001c8e <HAL_GPIO_Init+0xfa>
 8001bd0:	4a98      	ldr	r2, [pc, #608]	; (8001e34 <HAL_GPIO_Init+0x2a0>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d875      	bhi.n	8001cc2 <HAL_GPIO_Init+0x12e>
 8001bd6:	4a98      	ldr	r2, [pc, #608]	; (8001e38 <HAL_GPIO_Init+0x2a4>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d058      	beq.n	8001c8e <HAL_GPIO_Init+0xfa>
 8001bdc:	4a96      	ldr	r2, [pc, #600]	; (8001e38 <HAL_GPIO_Init+0x2a4>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d86f      	bhi.n	8001cc2 <HAL_GPIO_Init+0x12e>
 8001be2:	4a96      	ldr	r2, [pc, #600]	; (8001e3c <HAL_GPIO_Init+0x2a8>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d052      	beq.n	8001c8e <HAL_GPIO_Init+0xfa>
 8001be8:	4a94      	ldr	r2, [pc, #592]	; (8001e3c <HAL_GPIO_Init+0x2a8>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d869      	bhi.n	8001cc2 <HAL_GPIO_Init+0x12e>
 8001bee:	4a94      	ldr	r2, [pc, #592]	; (8001e40 <HAL_GPIO_Init+0x2ac>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d04c      	beq.n	8001c8e <HAL_GPIO_Init+0xfa>
 8001bf4:	4a92      	ldr	r2, [pc, #584]	; (8001e40 <HAL_GPIO_Init+0x2ac>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d863      	bhi.n	8001cc2 <HAL_GPIO_Init+0x12e>
 8001bfa:	4a92      	ldr	r2, [pc, #584]	; (8001e44 <HAL_GPIO_Init+0x2b0>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d046      	beq.n	8001c8e <HAL_GPIO_Init+0xfa>
 8001c00:	4a90      	ldr	r2, [pc, #576]	; (8001e44 <HAL_GPIO_Init+0x2b0>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d85d      	bhi.n	8001cc2 <HAL_GPIO_Init+0x12e>
 8001c06:	2b12      	cmp	r3, #18
 8001c08:	d82a      	bhi.n	8001c60 <HAL_GPIO_Init+0xcc>
 8001c0a:	2b12      	cmp	r3, #18
 8001c0c:	d859      	bhi.n	8001cc2 <HAL_GPIO_Init+0x12e>
 8001c0e:	a201      	add	r2, pc, #4	; (adr r2, 8001c14 <HAL_GPIO_Init+0x80>)
 8001c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c14:	08001c8f 	.word	0x08001c8f
 8001c18:	08001c69 	.word	0x08001c69
 8001c1c:	08001c7b 	.word	0x08001c7b
 8001c20:	08001cbd 	.word	0x08001cbd
 8001c24:	08001cc3 	.word	0x08001cc3
 8001c28:	08001cc3 	.word	0x08001cc3
 8001c2c:	08001cc3 	.word	0x08001cc3
 8001c30:	08001cc3 	.word	0x08001cc3
 8001c34:	08001cc3 	.word	0x08001cc3
 8001c38:	08001cc3 	.word	0x08001cc3
 8001c3c:	08001cc3 	.word	0x08001cc3
 8001c40:	08001cc3 	.word	0x08001cc3
 8001c44:	08001cc3 	.word	0x08001cc3
 8001c48:	08001cc3 	.word	0x08001cc3
 8001c4c:	08001cc3 	.word	0x08001cc3
 8001c50:	08001cc3 	.word	0x08001cc3
 8001c54:	08001cc3 	.word	0x08001cc3
 8001c58:	08001c71 	.word	0x08001c71
 8001c5c:	08001c85 	.word	0x08001c85
 8001c60:	4a79      	ldr	r2, [pc, #484]	; (8001e48 <HAL_GPIO_Init+0x2b4>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d013      	beq.n	8001c8e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c66:	e02c      	b.n	8001cc2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	623b      	str	r3, [r7, #32]
          break;
 8001c6e:	e029      	b.n	8001cc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	3304      	adds	r3, #4
 8001c76:	623b      	str	r3, [r7, #32]
          break;
 8001c78:	e024      	b.n	8001cc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	3308      	adds	r3, #8
 8001c80:	623b      	str	r3, [r7, #32]
          break;
 8001c82:	e01f      	b.n	8001cc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	330c      	adds	r3, #12
 8001c8a:	623b      	str	r3, [r7, #32]
          break;
 8001c8c:	e01a      	b.n	8001cc4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d102      	bne.n	8001c9c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c96:	2304      	movs	r3, #4
 8001c98:	623b      	str	r3, [r7, #32]
          break;
 8001c9a:	e013      	b.n	8001cc4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d105      	bne.n	8001cb0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ca4:	2308      	movs	r3, #8
 8001ca6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69fa      	ldr	r2, [r7, #28]
 8001cac:	611a      	str	r2, [r3, #16]
          break;
 8001cae:	e009      	b.n	8001cc4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cb0:	2308      	movs	r3, #8
 8001cb2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	69fa      	ldr	r2, [r7, #28]
 8001cb8:	615a      	str	r2, [r3, #20]
          break;
 8001cba:	e003      	b.n	8001cc4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	623b      	str	r3, [r7, #32]
          break;
 8001cc0:	e000      	b.n	8001cc4 <HAL_GPIO_Init+0x130>
          break;
 8001cc2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	2bff      	cmp	r3, #255	; 0xff
 8001cc8:	d801      	bhi.n	8001cce <HAL_GPIO_Init+0x13a>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	e001      	b.n	8001cd2 <HAL_GPIO_Init+0x13e>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	2bff      	cmp	r3, #255	; 0xff
 8001cd8:	d802      	bhi.n	8001ce0 <HAL_GPIO_Init+0x14c>
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	e002      	b.n	8001ce6 <HAL_GPIO_Init+0x152>
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	3b08      	subs	r3, #8
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	210f      	movs	r1, #15
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	401a      	ands	r2, r3
 8001cf8:	6a39      	ldr	r1, [r7, #32]
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001d00:	431a      	orrs	r2, r3
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f000 80b1 	beq.w	8001e76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d14:	4b4d      	ldr	r3, [pc, #308]	; (8001e4c <HAL_GPIO_Init+0x2b8>)
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	4a4c      	ldr	r2, [pc, #304]	; (8001e4c <HAL_GPIO_Init+0x2b8>)
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	6193      	str	r3, [r2, #24]
 8001d20:	4b4a      	ldr	r3, [pc, #296]	; (8001e4c <HAL_GPIO_Init+0x2b8>)
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	60bb      	str	r3, [r7, #8]
 8001d2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d2c:	4a48      	ldr	r2, [pc, #288]	; (8001e50 <HAL_GPIO_Init+0x2bc>)
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d30:	089b      	lsrs	r3, r3, #2
 8001d32:	3302      	adds	r3, #2
 8001d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	f003 0303 	and.w	r3, r3, #3
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	220f      	movs	r2, #15
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a40      	ldr	r2, [pc, #256]	; (8001e54 <HAL_GPIO_Init+0x2c0>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d013      	beq.n	8001d80 <HAL_GPIO_Init+0x1ec>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a3f      	ldr	r2, [pc, #252]	; (8001e58 <HAL_GPIO_Init+0x2c4>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d00d      	beq.n	8001d7c <HAL_GPIO_Init+0x1e8>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a3e      	ldr	r2, [pc, #248]	; (8001e5c <HAL_GPIO_Init+0x2c8>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d007      	beq.n	8001d78 <HAL_GPIO_Init+0x1e4>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a3d      	ldr	r2, [pc, #244]	; (8001e60 <HAL_GPIO_Init+0x2cc>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d101      	bne.n	8001d74 <HAL_GPIO_Init+0x1e0>
 8001d70:	2303      	movs	r3, #3
 8001d72:	e006      	b.n	8001d82 <HAL_GPIO_Init+0x1ee>
 8001d74:	2304      	movs	r3, #4
 8001d76:	e004      	b.n	8001d82 <HAL_GPIO_Init+0x1ee>
 8001d78:	2302      	movs	r3, #2
 8001d7a:	e002      	b.n	8001d82 <HAL_GPIO_Init+0x1ee>
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e000      	b.n	8001d82 <HAL_GPIO_Init+0x1ee>
 8001d80:	2300      	movs	r3, #0
 8001d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d84:	f002 0203 	and.w	r2, r2, #3
 8001d88:	0092      	lsls	r2, r2, #2
 8001d8a:	4093      	lsls	r3, r2
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d92:	492f      	ldr	r1, [pc, #188]	; (8001e50 <HAL_GPIO_Init+0x2bc>)
 8001d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d96:	089b      	lsrs	r3, r3, #2
 8001d98:	3302      	adds	r3, #2
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d006      	beq.n	8001dba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001dac:	4b2d      	ldr	r3, [pc, #180]	; (8001e64 <HAL_GPIO_Init+0x2d0>)
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	492c      	ldr	r1, [pc, #176]	; (8001e64 <HAL_GPIO_Init+0x2d0>)
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	608b      	str	r3, [r1, #8]
 8001db8:	e006      	b.n	8001dc8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001dba:	4b2a      	ldr	r3, [pc, #168]	; (8001e64 <HAL_GPIO_Init+0x2d0>)
 8001dbc:	689a      	ldr	r2, [r3, #8]
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	4928      	ldr	r1, [pc, #160]	; (8001e64 <HAL_GPIO_Init+0x2d0>)
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d006      	beq.n	8001de2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001dd4:	4b23      	ldr	r3, [pc, #140]	; (8001e64 <HAL_GPIO_Init+0x2d0>)
 8001dd6:	68da      	ldr	r2, [r3, #12]
 8001dd8:	4922      	ldr	r1, [pc, #136]	; (8001e64 <HAL_GPIO_Init+0x2d0>)
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	60cb      	str	r3, [r1, #12]
 8001de0:	e006      	b.n	8001df0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001de2:	4b20      	ldr	r3, [pc, #128]	; (8001e64 <HAL_GPIO_Init+0x2d0>)
 8001de4:	68da      	ldr	r2, [r3, #12]
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	43db      	mvns	r3, r3
 8001dea:	491e      	ldr	r1, [pc, #120]	; (8001e64 <HAL_GPIO_Init+0x2d0>)
 8001dec:	4013      	ands	r3, r2
 8001dee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d006      	beq.n	8001e0a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001dfc:	4b19      	ldr	r3, [pc, #100]	; (8001e64 <HAL_GPIO_Init+0x2d0>)
 8001dfe:	685a      	ldr	r2, [r3, #4]
 8001e00:	4918      	ldr	r1, [pc, #96]	; (8001e64 <HAL_GPIO_Init+0x2d0>)
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	604b      	str	r3, [r1, #4]
 8001e08:	e006      	b.n	8001e18 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e0a:	4b16      	ldr	r3, [pc, #88]	; (8001e64 <HAL_GPIO_Init+0x2d0>)
 8001e0c:	685a      	ldr	r2, [r3, #4]
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	43db      	mvns	r3, r3
 8001e12:	4914      	ldr	r1, [pc, #80]	; (8001e64 <HAL_GPIO_Init+0x2d0>)
 8001e14:	4013      	ands	r3, r2
 8001e16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d021      	beq.n	8001e68 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e24:	4b0f      	ldr	r3, [pc, #60]	; (8001e64 <HAL_GPIO_Init+0x2d0>)
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	490e      	ldr	r1, [pc, #56]	; (8001e64 <HAL_GPIO_Init+0x2d0>)
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	600b      	str	r3, [r1, #0]
 8001e30:	e021      	b.n	8001e76 <HAL_GPIO_Init+0x2e2>
 8001e32:	bf00      	nop
 8001e34:	10320000 	.word	0x10320000
 8001e38:	10310000 	.word	0x10310000
 8001e3c:	10220000 	.word	0x10220000
 8001e40:	10210000 	.word	0x10210000
 8001e44:	10120000 	.word	0x10120000
 8001e48:	10110000 	.word	0x10110000
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	40010000 	.word	0x40010000
 8001e54:	40010800 	.word	0x40010800
 8001e58:	40010c00 	.word	0x40010c00
 8001e5c:	40011000 	.word	0x40011000
 8001e60:	40011400 	.word	0x40011400
 8001e64:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e68:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <HAL_GPIO_Init+0x304>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	4909      	ldr	r1, [pc, #36]	; (8001e98 <HAL_GPIO_Init+0x304>)
 8001e72:	4013      	ands	r3, r2
 8001e74:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e78:	3301      	adds	r3, #1
 8001e7a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e82:	fa22 f303 	lsr.w	r3, r2, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f47f ae8e 	bne.w	8001ba8 <HAL_GPIO_Init+0x14>
  }
}
 8001e8c:	bf00      	nop
 8001e8e:	bf00      	nop
 8001e90:	372c      	adds	r7, #44	; 0x2c
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr
 8001e98:	40010400 	.word	0x40010400

08001e9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	807b      	strh	r3, [r7, #2]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001eac:	787b      	ldrb	r3, [r7, #1]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eb2:	887a      	ldrh	r2, [r7, #2]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001eb8:	e003      	b.n	8001ec2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001eba:	887b      	ldrh	r3, [r7, #2]
 8001ebc:	041a      	lsls	r2, r3, #16
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	611a      	str	r2, [r3, #16]
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr

08001ecc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ede:	887a      	ldrh	r2, [r7, #2]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	041a      	lsls	r2, r3, #16
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	43d9      	mvns	r1, r3
 8001eea:	887b      	ldrh	r3, [r7, #2]
 8001eec:	400b      	ands	r3, r1
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	611a      	str	r2, [r3, #16]
}
 8001ef4:	bf00      	nop
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc80      	pop	{r7}
 8001efc:	4770      	bx	lr
	...

08001f00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e12b      	b.n	800216a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d106      	bne.n	8001f2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7fe faa0 	bl	800046c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2224      	movs	r2, #36	; 0x24
 8001f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f022 0201 	bic.w	r2, r2, #1
 8001f42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f64:	f001 fbca 	bl	80036fc <HAL_RCC_GetPCLK1Freq>
 8001f68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	4a81      	ldr	r2, [pc, #516]	; (8002174 <HAL_I2C_Init+0x274>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d807      	bhi.n	8001f84 <HAL_I2C_Init+0x84>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4a80      	ldr	r2, [pc, #512]	; (8002178 <HAL_I2C_Init+0x278>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	bf94      	ite	ls
 8001f7c:	2301      	movls	r3, #1
 8001f7e:	2300      	movhi	r3, #0
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	e006      	b.n	8001f92 <HAL_I2C_Init+0x92>
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4a7d      	ldr	r2, [pc, #500]	; (800217c <HAL_I2C_Init+0x27c>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	bf94      	ite	ls
 8001f8c:	2301      	movls	r3, #1
 8001f8e:	2300      	movhi	r3, #0
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e0e7      	b.n	800216a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	4a78      	ldr	r2, [pc, #480]	; (8002180 <HAL_I2C_Init+0x280>)
 8001f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa2:	0c9b      	lsrs	r3, r3, #18
 8001fa4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68ba      	ldr	r2, [r7, #8]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	4a6a      	ldr	r2, [pc, #424]	; (8002174 <HAL_I2C_Init+0x274>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d802      	bhi.n	8001fd4 <HAL_I2C_Init+0xd4>
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	e009      	b.n	8001fe8 <HAL_I2C_Init+0xe8>
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001fda:	fb02 f303 	mul.w	r3, r2, r3
 8001fde:	4a69      	ldr	r2, [pc, #420]	; (8002184 <HAL_I2C_Init+0x284>)
 8001fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe4:	099b      	lsrs	r3, r3, #6
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	6812      	ldr	r2, [r2, #0]
 8001fec:	430b      	orrs	r3, r1
 8001fee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ffa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	495c      	ldr	r1, [pc, #368]	; (8002174 <HAL_I2C_Init+0x274>)
 8002004:	428b      	cmp	r3, r1
 8002006:	d819      	bhi.n	800203c <HAL_I2C_Init+0x13c>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	1e59      	subs	r1, r3, #1
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	fbb1 f3f3 	udiv	r3, r1, r3
 8002016:	1c59      	adds	r1, r3, #1
 8002018:	f640 73fc 	movw	r3, #4092	; 0xffc
 800201c:	400b      	ands	r3, r1
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00a      	beq.n	8002038 <HAL_I2C_Init+0x138>
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	1e59      	subs	r1, r3, #1
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002030:	3301      	adds	r3, #1
 8002032:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002036:	e051      	b.n	80020dc <HAL_I2C_Init+0x1dc>
 8002038:	2304      	movs	r3, #4
 800203a:	e04f      	b.n	80020dc <HAL_I2C_Init+0x1dc>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d111      	bne.n	8002068 <HAL_I2C_Init+0x168>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	1e58      	subs	r0, r3, #1
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6859      	ldr	r1, [r3, #4]
 800204c:	460b      	mov	r3, r1
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	440b      	add	r3, r1
 8002052:	fbb0 f3f3 	udiv	r3, r0, r3
 8002056:	3301      	adds	r3, #1
 8002058:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800205c:	2b00      	cmp	r3, #0
 800205e:	bf0c      	ite	eq
 8002060:	2301      	moveq	r3, #1
 8002062:	2300      	movne	r3, #0
 8002064:	b2db      	uxtb	r3, r3
 8002066:	e012      	b.n	800208e <HAL_I2C_Init+0x18e>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	1e58      	subs	r0, r3, #1
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6859      	ldr	r1, [r3, #4]
 8002070:	460b      	mov	r3, r1
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	440b      	add	r3, r1
 8002076:	0099      	lsls	r1, r3, #2
 8002078:	440b      	add	r3, r1
 800207a:	fbb0 f3f3 	udiv	r3, r0, r3
 800207e:	3301      	adds	r3, #1
 8002080:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002084:	2b00      	cmp	r3, #0
 8002086:	bf0c      	ite	eq
 8002088:	2301      	moveq	r3, #1
 800208a:	2300      	movne	r3, #0
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <HAL_I2C_Init+0x196>
 8002092:	2301      	movs	r3, #1
 8002094:	e022      	b.n	80020dc <HAL_I2C_Init+0x1dc>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10e      	bne.n	80020bc <HAL_I2C_Init+0x1bc>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	1e58      	subs	r0, r3, #1
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6859      	ldr	r1, [r3, #4]
 80020a6:	460b      	mov	r3, r1
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	440b      	add	r3, r1
 80020ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80020b0:	3301      	adds	r3, #1
 80020b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020ba:	e00f      	b.n	80020dc <HAL_I2C_Init+0x1dc>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	1e58      	subs	r0, r3, #1
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6859      	ldr	r1, [r3, #4]
 80020c4:	460b      	mov	r3, r1
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	440b      	add	r3, r1
 80020ca:	0099      	lsls	r1, r3, #2
 80020cc:	440b      	add	r3, r1
 80020ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80020d2:	3301      	adds	r3, #1
 80020d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	6809      	ldr	r1, [r1, #0]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69da      	ldr	r2, [r3, #28]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a1b      	ldr	r3, [r3, #32]
 80020f6:	431a      	orrs	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800210a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	6911      	ldr	r1, [r2, #16]
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	68d2      	ldr	r2, [r2, #12]
 8002116:	4311      	orrs	r1, r2
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	6812      	ldr	r2, [r2, #0]
 800211c:	430b      	orrs	r3, r1
 800211e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	695a      	ldr	r2, [r3, #20]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	431a      	orrs	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	430a      	orrs	r2, r1
 800213a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f042 0201 	orr.w	r2, r2, #1
 800214a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2220      	movs	r2, #32
 8002156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	000186a0 	.word	0x000186a0
 8002178:	001e847f 	.word	0x001e847f
 800217c:	003d08ff 	.word	0x003d08ff
 8002180:	431bde83 	.word	0x431bde83
 8002184:	10624dd3 	.word	0x10624dd3

08002188 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b088      	sub	sp, #32
 800218c:	af02      	add	r7, sp, #8
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	607a      	str	r2, [r7, #4]
 8002192:	461a      	mov	r2, r3
 8002194:	460b      	mov	r3, r1
 8002196:	817b      	strh	r3, [r7, #10]
 8002198:	4613      	mov	r3, r2
 800219a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800219c:	f7fe ff90 	bl	80010c0 <HAL_GetTick>
 80021a0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b20      	cmp	r3, #32
 80021ac:	f040 80e0 	bne.w	8002370 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	9300      	str	r3, [sp, #0]
 80021b4:	2319      	movs	r3, #25
 80021b6:	2201      	movs	r2, #1
 80021b8:	4970      	ldr	r1, [pc, #448]	; (800237c <HAL_I2C_Master_Transmit+0x1f4>)
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	f000 fc9e 	bl	8002afc <I2C_WaitOnFlagUntilTimeout>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80021c6:	2302      	movs	r3, #2
 80021c8:	e0d3      	b.n	8002372 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d101      	bne.n	80021d8 <HAL_I2C_Master_Transmit+0x50>
 80021d4:	2302      	movs	r3, #2
 80021d6:	e0cc      	b.n	8002372 <HAL_I2C_Master_Transmit+0x1ea>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d007      	beq.n	80021fe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f042 0201 	orr.w	r2, r2, #1
 80021fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800220c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2221      	movs	r2, #33	; 0x21
 8002212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2210      	movs	r2, #16
 800221a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	893a      	ldrh	r2, [r7, #8]
 800222e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002234:	b29a      	uxth	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	4a50      	ldr	r2, [pc, #320]	; (8002380 <HAL_I2C_Master_Transmit+0x1f8>)
 800223e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002240:	8979      	ldrh	r1, [r7, #10]
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	6a3a      	ldr	r2, [r7, #32]
 8002246:	68f8      	ldr	r0, [r7, #12]
 8002248:	f000 fb08 	bl	800285c <I2C_MasterRequestWrite>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e08d      	b.n	8002372 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002256:	2300      	movs	r3, #0
 8002258:	613b      	str	r3, [r7, #16]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	613b      	str	r3, [r7, #16]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	613b      	str	r3, [r7, #16]
 800226a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800226c:	e066      	b.n	800233c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	6a39      	ldr	r1, [r7, #32]
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f000 fd5c 	bl	8002d30 <I2C_WaitOnTXEFlagUntilTimeout>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00d      	beq.n	800229a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	2b04      	cmp	r3, #4
 8002284:	d107      	bne.n	8002296 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002294:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e06b      	b.n	8002372 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229e:	781a      	ldrb	r2, [r3, #0]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	3b01      	subs	r3, #1
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c2:	3b01      	subs	r3, #1
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	695b      	ldr	r3, [r3, #20]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b04      	cmp	r3, #4
 80022d6:	d11b      	bne.n	8002310 <HAL_I2C_Master_Transmit+0x188>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d017      	beq.n	8002310 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e4:	781a      	ldrb	r2, [r3, #0]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f0:	1c5a      	adds	r2, r3, #1
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	3b01      	subs	r3, #1
 80022fe:	b29a      	uxth	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002308:	3b01      	subs	r3, #1
 800230a:	b29a      	uxth	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002310:	697a      	ldr	r2, [r7, #20]
 8002312:	6a39      	ldr	r1, [r7, #32]
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	f000 fd53 	bl	8002dc0 <I2C_WaitOnBTFFlagUntilTimeout>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00d      	beq.n	800233c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002324:	2b04      	cmp	r3, #4
 8002326:	d107      	bne.n	8002338 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002336:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e01a      	b.n	8002372 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002340:	2b00      	cmp	r3, #0
 8002342:	d194      	bne.n	800226e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002352:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2220      	movs	r2, #32
 8002358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800236c:	2300      	movs	r3, #0
 800236e:	e000      	b.n	8002372 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002370:	2302      	movs	r3, #2
  }
}
 8002372:	4618      	mov	r0, r3
 8002374:	3718      	adds	r7, #24
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	00100002 	.word	0x00100002
 8002380:	ffff0000 	.word	0xffff0000

08002384 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b08c      	sub	sp, #48	; 0x30
 8002388:	af02      	add	r7, sp, #8
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	607a      	str	r2, [r7, #4]
 800238e:	461a      	mov	r2, r3
 8002390:	460b      	mov	r3, r1
 8002392:	817b      	strh	r3, [r7, #10]
 8002394:	4613      	mov	r3, r2
 8002396:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002398:	2300      	movs	r3, #0
 800239a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800239c:	f7fe fe90 	bl	80010c0 <HAL_GetTick>
 80023a0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b20      	cmp	r3, #32
 80023ac:	f040 824b 	bne.w	8002846 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	9300      	str	r3, [sp, #0]
 80023b4:	2319      	movs	r3, #25
 80023b6:	2201      	movs	r2, #1
 80023b8:	497f      	ldr	r1, [pc, #508]	; (80025b8 <HAL_I2C_Master_Receive+0x234>)
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	f000 fb9e 	bl	8002afc <I2C_WaitOnFlagUntilTimeout>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80023c6:	2302      	movs	r3, #2
 80023c8:	e23e      	b.n	8002848 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d101      	bne.n	80023d8 <HAL_I2C_Master_Receive+0x54>
 80023d4:	2302      	movs	r3, #2
 80023d6:	e237      	b.n	8002848 <HAL_I2C_Master_Receive+0x4c4>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d007      	beq.n	80023fe <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f042 0201 	orr.w	r2, r2, #1
 80023fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800240c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2222      	movs	r2, #34	; 0x22
 8002412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2210      	movs	r2, #16
 800241a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	893a      	ldrh	r2, [r7, #8]
 800242e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002434:	b29a      	uxth	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	4a5f      	ldr	r2, [pc, #380]	; (80025bc <HAL_I2C_Master_Receive+0x238>)
 800243e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002440:	8979      	ldrh	r1, [r7, #10]
 8002442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f000 fa8a 	bl	8002960 <I2C_MasterRequestRead>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e1f8      	b.n	8002848 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800245a:	2b00      	cmp	r3, #0
 800245c:	d113      	bne.n	8002486 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800245e:	2300      	movs	r3, #0
 8002460:	61fb      	str	r3, [r7, #28]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	61fb      	str	r3, [r7, #28]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	61fb      	str	r3, [r7, #28]
 8002472:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	e1cc      	b.n	8002820 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800248a:	2b01      	cmp	r3, #1
 800248c:	d11e      	bne.n	80024cc <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800249c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800249e:	b672      	cpsid	i
}
 80024a0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024a2:	2300      	movs	r3, #0
 80024a4:	61bb      	str	r3, [r7, #24]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	695b      	ldr	r3, [r3, #20]
 80024ac:	61bb      	str	r3, [r7, #24]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	61bb      	str	r3, [r7, #24]
 80024b6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80024c8:	b662      	cpsie	i
}
 80024ca:	e035      	b.n	8002538 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d11e      	bne.n	8002512 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80024e4:	b672      	cpsid	i
}
 80024e6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024e8:	2300      	movs	r3, #0
 80024ea:	617b      	str	r3, [r7, #20]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	617b      	str	r3, [r7, #20]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	617b      	str	r3, [r7, #20]
 80024fc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800250c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800250e:	b662      	cpsie	i
}
 8002510:	e012      	b.n	8002538 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002520:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002522:	2300      	movs	r3, #0
 8002524:	613b      	str	r3, [r7, #16]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	613b      	str	r3, [r7, #16]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	613b      	str	r3, [r7, #16]
 8002536:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002538:	e172      	b.n	8002820 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800253e:	2b03      	cmp	r3, #3
 8002540:	f200 811f 	bhi.w	8002782 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002548:	2b01      	cmp	r3, #1
 800254a:	d123      	bne.n	8002594 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800254c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800254e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f000 fc7d 	bl	8002e50 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e173      	b.n	8002848 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	691a      	ldr	r2, [r3, #16]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256a:	b2d2      	uxtb	r2, r2
 800256c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002572:	1c5a      	adds	r2, r3, #1
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800257c:	3b01      	subs	r3, #1
 800257e:	b29a      	uxth	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002588:	b29b      	uxth	r3, r3
 800258a:	3b01      	subs	r3, #1
 800258c:	b29a      	uxth	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002592:	e145      	b.n	8002820 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002598:	2b02      	cmp	r3, #2
 800259a:	d152      	bne.n	8002642 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	9300      	str	r3, [sp, #0]
 80025a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a2:	2200      	movs	r2, #0
 80025a4:	4906      	ldr	r1, [pc, #24]	; (80025c0 <HAL_I2C_Master_Receive+0x23c>)
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f000 faa8 	bl	8002afc <I2C_WaitOnFlagUntilTimeout>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d008      	beq.n	80025c4 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e148      	b.n	8002848 <HAL_I2C_Master_Receive+0x4c4>
 80025b6:	bf00      	nop
 80025b8:	00100002 	.word	0x00100002
 80025bc:	ffff0000 	.word	0xffff0000
 80025c0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80025c4:	b672      	cpsid	i
}
 80025c6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	691a      	ldr	r2, [r3, #16]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ea:	1c5a      	adds	r2, r3, #1
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f4:	3b01      	subs	r3, #1
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002600:	b29b      	uxth	r3, r3
 8002602:	3b01      	subs	r3, #1
 8002604:	b29a      	uxth	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800260a:	b662      	cpsie	i
}
 800260c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	691a      	ldr	r2, [r3, #16]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002618:	b2d2      	uxtb	r2, r2
 800261a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002620:	1c5a      	adds	r2, r3, #1
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262a:	3b01      	subs	r3, #1
 800262c:	b29a      	uxth	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002636:	b29b      	uxth	r3, r3
 8002638:	3b01      	subs	r3, #1
 800263a:	b29a      	uxth	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002640:	e0ee      	b.n	8002820 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002648:	2200      	movs	r2, #0
 800264a:	4981      	ldr	r1, [pc, #516]	; (8002850 <HAL_I2C_Master_Receive+0x4cc>)
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 fa55 	bl	8002afc <I2C_WaitOnFlagUntilTimeout>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e0f5      	b.n	8002848 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800266a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800266c:	b672      	cpsid	i
}
 800266e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	691a      	ldr	r2, [r3, #16]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267a:	b2d2      	uxtb	r2, r2
 800267c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	1c5a      	adds	r2, r3, #1
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800268c:	3b01      	subs	r3, #1
 800268e:	b29a      	uxth	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002698:	b29b      	uxth	r3, r3
 800269a:	3b01      	subs	r3, #1
 800269c:	b29a      	uxth	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80026a2:	4b6c      	ldr	r3, [pc, #432]	; (8002854 <HAL_I2C_Master_Receive+0x4d0>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	08db      	lsrs	r3, r3, #3
 80026a8:	4a6b      	ldr	r2, [pc, #428]	; (8002858 <HAL_I2C_Master_Receive+0x4d4>)
 80026aa:	fba2 2303 	umull	r2, r3, r2, r3
 80026ae:	0a1a      	lsrs	r2, r3, #8
 80026b0:	4613      	mov	r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	4413      	add	r3, r2
 80026b6:	00da      	lsls	r2, r3, #3
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80026bc:	6a3b      	ldr	r3, [r7, #32]
 80026be:	3b01      	subs	r3, #1
 80026c0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80026c2:	6a3b      	ldr	r3, [r7, #32]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d118      	bne.n	80026fa <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2220      	movs	r2, #32
 80026d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	f043 0220 	orr.w	r2, r3, #32
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80026ea:	b662      	cpsie	i
}
 80026ec:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e0a6      	b.n	8002848 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	2b04      	cmp	r3, #4
 8002706:	d1d9      	bne.n	80026bc <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002716:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	691a      	ldr	r2, [r3, #16]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	1c5a      	adds	r2, r3, #1
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002734:	3b01      	subs	r3, #1
 8002736:	b29a      	uxth	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002740:	b29b      	uxth	r3, r3
 8002742:	3b01      	subs	r3, #1
 8002744:	b29a      	uxth	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800274a:	b662      	cpsie	i
}
 800274c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	691a      	ldr	r2, [r3, #16]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002758:	b2d2      	uxtb	r2, r2
 800275a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002760:	1c5a      	adds	r2, r3, #1
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800276a:	3b01      	subs	r3, #1
 800276c:	b29a      	uxth	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002776:	b29b      	uxth	r3, r3
 8002778:	3b01      	subs	r3, #1
 800277a:	b29a      	uxth	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002780:	e04e      	b.n	8002820 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002784:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f000 fb62 	bl	8002e50 <I2C_WaitOnRXNEFlagUntilTimeout>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e058      	b.n	8002848 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	691a      	ldr	r2, [r3, #16]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a0:	b2d2      	uxtb	r2, r2
 80027a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a8:	1c5a      	adds	r2, r3, #1
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b2:	3b01      	subs	r3, #1
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027be:	b29b      	uxth	r3, r3
 80027c0:	3b01      	subs	r3, #1
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	f003 0304 	and.w	r3, r3, #4
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d124      	bne.n	8002820 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027da:	2b03      	cmp	r3, #3
 80027dc:	d107      	bne.n	80027ee <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ec:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	691a      	ldr	r2, [r3, #16]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002800:	1c5a      	adds	r2, r3, #1
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800280a:	3b01      	subs	r3, #1
 800280c:	b29a      	uxth	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002816:	b29b      	uxth	r3, r3
 8002818:	3b01      	subs	r3, #1
 800281a:	b29a      	uxth	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002824:	2b00      	cmp	r3, #0
 8002826:	f47f ae88 	bne.w	800253a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2220      	movs	r2, #32
 800282e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002842:	2300      	movs	r3, #0
 8002844:	e000      	b.n	8002848 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8002846:	2302      	movs	r3, #2
  }
}
 8002848:	4618      	mov	r0, r3
 800284a:	3728      	adds	r7, #40	; 0x28
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	00010004 	.word	0x00010004
 8002854:	20000000 	.word	0x20000000
 8002858:	14f8b589 	.word	0x14f8b589

0800285c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b088      	sub	sp, #32
 8002860:	af02      	add	r7, sp, #8
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	607a      	str	r2, [r7, #4]
 8002866:	603b      	str	r3, [r7, #0]
 8002868:	460b      	mov	r3, r1
 800286a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002870:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	2b08      	cmp	r3, #8
 8002876:	d006      	beq.n	8002886 <I2C_MasterRequestWrite+0x2a>
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d003      	beq.n	8002886 <I2C_MasterRequestWrite+0x2a>
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002884:	d108      	bne.n	8002898 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	e00b      	b.n	80028b0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289c:	2b12      	cmp	r3, #18
 800289e:	d107      	bne.n	80028b0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	9300      	str	r3, [sp, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f000 f91d 	bl	8002afc <I2C_WaitOnFlagUntilTimeout>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00d      	beq.n	80028e4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028d6:	d103      	bne.n	80028e0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e035      	b.n	8002950 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028ec:	d108      	bne.n	8002900 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028ee:	897b      	ldrh	r3, [r7, #10]
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	461a      	mov	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80028fc:	611a      	str	r2, [r3, #16]
 80028fe:	e01b      	b.n	8002938 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002900:	897b      	ldrh	r3, [r7, #10]
 8002902:	11db      	asrs	r3, r3, #7
 8002904:	b2db      	uxtb	r3, r3
 8002906:	f003 0306 	and.w	r3, r3, #6
 800290a:	b2db      	uxtb	r3, r3
 800290c:	f063 030f 	orn	r3, r3, #15
 8002910:	b2da      	uxtb	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	490e      	ldr	r1, [pc, #56]	; (8002958 <I2C_MasterRequestWrite+0xfc>)
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f000 f966 	bl	8002bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e010      	b.n	8002950 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800292e:	897b      	ldrh	r3, [r7, #10]
 8002930:	b2da      	uxtb	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	4907      	ldr	r1, [pc, #28]	; (800295c <I2C_MasterRequestWrite+0x100>)
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f000 f956 	bl	8002bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e000      	b.n	8002950 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3718      	adds	r7, #24
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	00010008 	.word	0x00010008
 800295c:	00010002 	.word	0x00010002

08002960 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b088      	sub	sp, #32
 8002964:	af02      	add	r7, sp, #8
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	607a      	str	r2, [r7, #4]
 800296a:	603b      	str	r3, [r7, #0]
 800296c:	460b      	mov	r3, r1
 800296e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002974:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002984:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	2b08      	cmp	r3, #8
 800298a:	d006      	beq.n	800299a <I2C_MasterRequestRead+0x3a>
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d003      	beq.n	800299a <I2C_MasterRequestRead+0x3a>
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002998:	d108      	bne.n	80029ac <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	e00b      	b.n	80029c4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b0:	2b11      	cmp	r3, #17
 80029b2:	d107      	bne.n	80029c4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	9300      	str	r3, [sp, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f000 f893 	bl	8002afc <I2C_WaitOnFlagUntilTimeout>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00d      	beq.n	80029f8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029ea:	d103      	bne.n	80029f4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e079      	b.n	8002aec <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a00:	d108      	bne.n	8002a14 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002a02:	897b      	ldrh	r3, [r7, #10]
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	f043 0301 	orr.w	r3, r3, #1
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	611a      	str	r2, [r3, #16]
 8002a12:	e05f      	b.n	8002ad4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a14:	897b      	ldrh	r3, [r7, #10]
 8002a16:	11db      	asrs	r3, r3, #7
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	f003 0306 	and.w	r3, r3, #6
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	f063 030f 	orn	r3, r3, #15
 8002a24:	b2da      	uxtb	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	4930      	ldr	r1, [pc, #192]	; (8002af4 <I2C_MasterRequestRead+0x194>)
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f000 f8dc 	bl	8002bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e054      	b.n	8002aec <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a42:	897b      	ldrh	r3, [r7, #10]
 8002a44:	b2da      	uxtb	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	4929      	ldr	r1, [pc, #164]	; (8002af8 <I2C_MasterRequestRead+0x198>)
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	f000 f8cc 	bl	8002bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e044      	b.n	8002aec <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a62:	2300      	movs	r3, #0
 8002a64:	613b      	str	r3, [r7, #16]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	613b      	str	r3, [r7, #16]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	613b      	str	r3, [r7, #16]
 8002a76:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a86:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	9300      	str	r3, [sp, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a94:	68f8      	ldr	r0, [r7, #12]
 8002a96:	f000 f831 	bl	8002afc <I2C_WaitOnFlagUntilTimeout>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00d      	beq.n	8002abc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aae:	d103      	bne.n	8002ab8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ab6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e017      	b.n	8002aec <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002abc:	897b      	ldrh	r3, [r7, #10]
 8002abe:	11db      	asrs	r3, r3, #7
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	f003 0306 	and.w	r3, r3, #6
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	f063 030e 	orn	r3, r3, #14
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	4907      	ldr	r1, [pc, #28]	; (8002af8 <I2C_MasterRequestRead+0x198>)
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 f888 	bl	8002bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e000      	b.n	8002aec <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3718      	adds	r7, #24
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	00010008 	.word	0x00010008
 8002af8:	00010002 	.word	0x00010002

08002afc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	603b      	str	r3, [r7, #0]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b0c:	e048      	b.n	8002ba0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b14:	d044      	beq.n	8002ba0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b16:	f7fe fad3 	bl	80010c0 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d302      	bcc.n	8002b2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d139      	bne.n	8002ba0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	0c1b      	lsrs	r3, r3, #16
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d10d      	bne.n	8002b52 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	695b      	ldr	r3, [r3, #20]
 8002b3c:	43da      	mvns	r2, r3
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	4013      	ands	r3, r2
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	bf0c      	ite	eq
 8002b48:	2301      	moveq	r3, #1
 8002b4a:	2300      	movne	r3, #0
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	461a      	mov	r2, r3
 8002b50:	e00c      	b.n	8002b6c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	43da      	mvns	r2, r3
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	bf0c      	ite	eq
 8002b64:	2301      	moveq	r3, #1
 8002b66:	2300      	movne	r3, #0
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	79fb      	ldrb	r3, [r7, #7]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d116      	bne.n	8002ba0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8c:	f043 0220 	orr.w	r2, r3, #32
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e023      	b.n	8002be8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	0c1b      	lsrs	r3, r3, #16
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d10d      	bne.n	8002bc6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	43da      	mvns	r2, r3
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	bf0c      	ite	eq
 8002bbc:	2301      	moveq	r3, #1
 8002bbe:	2300      	movne	r3, #0
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	e00c      	b.n	8002be0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	43da      	mvns	r2, r3
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	bf0c      	ite	eq
 8002bd8:	2301      	moveq	r3, #1
 8002bda:	2300      	movne	r3, #0
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	461a      	mov	r2, r3
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d093      	beq.n	8002b0e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
 8002bfc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bfe:	e071      	b.n	8002ce4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c0e:	d123      	bne.n	8002c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c1e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2220      	movs	r2, #32
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c44:	f043 0204 	orr.w	r2, r3, #4
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e067      	b.n	8002d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c5e:	d041      	beq.n	8002ce4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c60:	f7fe fa2e 	bl	80010c0 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d302      	bcc.n	8002c76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d136      	bne.n	8002ce4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	0c1b      	lsrs	r3, r3, #16
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d10c      	bne.n	8002c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	43da      	mvns	r2, r3
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	bf14      	ite	ne
 8002c92:	2301      	movne	r3, #1
 8002c94:	2300      	moveq	r3, #0
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	e00b      	b.n	8002cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	43da      	mvns	r2, r3
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	bf14      	ite	ne
 8002cac:	2301      	movne	r3, #1
 8002cae:	2300      	moveq	r3, #0
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d016      	beq.n	8002ce4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd0:	f043 0220 	orr.w	r2, r3, #32
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e021      	b.n	8002d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	0c1b      	lsrs	r3, r3, #16
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d10c      	bne.n	8002d08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	43da      	mvns	r2, r3
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	bf14      	ite	ne
 8002d00:	2301      	movne	r3, #1
 8002d02:	2300      	moveq	r3, #0
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	e00b      	b.n	8002d20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	43da      	mvns	r2, r3
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	4013      	ands	r3, r2
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	bf14      	ite	ne
 8002d1a:	2301      	movne	r3, #1
 8002d1c:	2300      	moveq	r3, #0
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f47f af6d 	bne.w	8002c00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d3c:	e034      	b.n	8002da8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f000 f8e3 	bl	8002f0a <I2C_IsAcknowledgeFailed>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e034      	b.n	8002db8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d54:	d028      	beq.n	8002da8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d56:	f7fe f9b3 	bl	80010c0 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	68ba      	ldr	r2, [r7, #8]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d302      	bcc.n	8002d6c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d11d      	bne.n	8002da8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d76:	2b80      	cmp	r3, #128	; 0x80
 8002d78:	d016      	beq.n	8002da8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2220      	movs	r2, #32
 8002d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d94:	f043 0220 	orr.w	r2, r3, #32
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e007      	b.n	8002db8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db2:	2b80      	cmp	r3, #128	; 0x80
 8002db4:	d1c3      	bne.n	8002d3e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dcc:	e034      	b.n	8002e38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f000 f89b 	bl	8002f0a <I2C_IsAcknowledgeFailed>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e034      	b.n	8002e48 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de4:	d028      	beq.n	8002e38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002de6:	f7fe f96b 	bl	80010c0 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	68ba      	ldr	r2, [r7, #8]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d302      	bcc.n	8002dfc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d11d      	bne.n	8002e38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	f003 0304 	and.w	r3, r3, #4
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	d016      	beq.n	8002e38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2220      	movs	r2, #32
 8002e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e24:	f043 0220 	orr.w	r2, r3, #32
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e007      	b.n	8002e48 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	f003 0304 	and.w	r3, r3, #4
 8002e42:	2b04      	cmp	r3, #4
 8002e44:	d1c3      	bne.n	8002dce <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e5c:	e049      	b.n	8002ef2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	f003 0310 	and.w	r3, r3, #16
 8002e68:	2b10      	cmp	r3, #16
 8002e6a:	d119      	bne.n	8002ea0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f06f 0210 	mvn.w	r2, #16
 8002e74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2220      	movs	r2, #32
 8002e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e030      	b.n	8002f02 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ea0:	f7fe f90e 	bl	80010c0 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	68ba      	ldr	r2, [r7, #8]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d302      	bcc.n	8002eb6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d11d      	bne.n	8002ef2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec0:	2b40      	cmp	r3, #64	; 0x40
 8002ec2:	d016      	beq.n	8002ef2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2220      	movs	r2, #32
 8002ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	f043 0220 	orr.w	r2, r3, #32
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e007      	b.n	8002f02 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	695b      	ldr	r3, [r3, #20]
 8002ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002efc:	2b40      	cmp	r3, #64	; 0x40
 8002efe:	d1ae      	bne.n	8002e5e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	b083      	sub	sp, #12
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f20:	d11b      	bne.n	8002f5a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f2a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2220      	movs	r2, #32
 8002f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	f043 0204 	orr.w	r2, r3, #4
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e000      	b.n	8002f5c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bc80      	pop	{r7}
 8002f64:	4770      	bx	lr
	...

08002f68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e272      	b.n	8003460 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f000 8087 	beq.w	8003096 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f88:	4b92      	ldr	r3, [pc, #584]	; (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f003 030c 	and.w	r3, r3, #12
 8002f90:	2b04      	cmp	r3, #4
 8002f92:	d00c      	beq.n	8002fae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f94:	4b8f      	ldr	r3, [pc, #572]	; (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f003 030c 	and.w	r3, r3, #12
 8002f9c:	2b08      	cmp	r3, #8
 8002f9e:	d112      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x5e>
 8002fa0:	4b8c      	ldr	r3, [pc, #560]	; (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fac:	d10b      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fae:	4b89      	ldr	r3, [pc, #548]	; (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d06c      	beq.n	8003094 <HAL_RCC_OscConfig+0x12c>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d168      	bne.n	8003094 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e24c      	b.n	8003460 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fce:	d106      	bne.n	8002fde <HAL_RCC_OscConfig+0x76>
 8002fd0:	4b80      	ldr	r3, [pc, #512]	; (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a7f      	ldr	r2, [pc, #508]	; (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8002fd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fda:	6013      	str	r3, [r2, #0]
 8002fdc:	e02e      	b.n	800303c <HAL_RCC_OscConfig+0xd4>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10c      	bne.n	8003000 <HAL_RCC_OscConfig+0x98>
 8002fe6:	4b7b      	ldr	r3, [pc, #492]	; (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a7a      	ldr	r2, [pc, #488]	; (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8002fec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ff0:	6013      	str	r3, [r2, #0]
 8002ff2:	4b78      	ldr	r3, [pc, #480]	; (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a77      	ldr	r2, [pc, #476]	; (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8002ff8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ffc:	6013      	str	r3, [r2, #0]
 8002ffe:	e01d      	b.n	800303c <HAL_RCC_OscConfig+0xd4>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003008:	d10c      	bne.n	8003024 <HAL_RCC_OscConfig+0xbc>
 800300a:	4b72      	ldr	r3, [pc, #456]	; (80031d4 <HAL_RCC_OscConfig+0x26c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a71      	ldr	r2, [pc, #452]	; (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8003010:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003014:	6013      	str	r3, [r2, #0]
 8003016:	4b6f      	ldr	r3, [pc, #444]	; (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a6e      	ldr	r2, [pc, #440]	; (80031d4 <HAL_RCC_OscConfig+0x26c>)
 800301c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003020:	6013      	str	r3, [r2, #0]
 8003022:	e00b      	b.n	800303c <HAL_RCC_OscConfig+0xd4>
 8003024:	4b6b      	ldr	r3, [pc, #428]	; (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a6a      	ldr	r2, [pc, #424]	; (80031d4 <HAL_RCC_OscConfig+0x26c>)
 800302a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800302e:	6013      	str	r3, [r2, #0]
 8003030:	4b68      	ldr	r3, [pc, #416]	; (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a67      	ldr	r2, [pc, #412]	; (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8003036:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800303a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d013      	beq.n	800306c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003044:	f7fe f83c 	bl	80010c0 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800304c:	f7fe f838 	bl	80010c0 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b64      	cmp	r3, #100	; 0x64
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e200      	b.n	8003460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800305e:	4b5d      	ldr	r3, [pc, #372]	; (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0f0      	beq.n	800304c <HAL_RCC_OscConfig+0xe4>
 800306a:	e014      	b.n	8003096 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306c:	f7fe f828 	bl	80010c0 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003074:	f7fe f824 	bl	80010c0 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b64      	cmp	r3, #100	; 0x64
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e1ec      	b.n	8003460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003086:	4b53      	ldr	r3, [pc, #332]	; (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f0      	bne.n	8003074 <HAL_RCC_OscConfig+0x10c>
 8003092:	e000      	b.n	8003096 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d063      	beq.n	800316a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030a2:	4b4c      	ldr	r3, [pc, #304]	; (80031d4 <HAL_RCC_OscConfig+0x26c>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f003 030c 	and.w	r3, r3, #12
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00b      	beq.n	80030c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80030ae:	4b49      	ldr	r3, [pc, #292]	; (80031d4 <HAL_RCC_OscConfig+0x26c>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f003 030c 	and.w	r3, r3, #12
 80030b6:	2b08      	cmp	r3, #8
 80030b8:	d11c      	bne.n	80030f4 <HAL_RCC_OscConfig+0x18c>
 80030ba:	4b46      	ldr	r3, [pc, #280]	; (80031d4 <HAL_RCC_OscConfig+0x26c>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d116      	bne.n	80030f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030c6:	4b43      	ldr	r3, [pc, #268]	; (80031d4 <HAL_RCC_OscConfig+0x26c>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d005      	beq.n	80030de <HAL_RCC_OscConfig+0x176>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d001      	beq.n	80030de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e1c0      	b.n	8003460 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030de:	4b3d      	ldr	r3, [pc, #244]	; (80031d4 <HAL_RCC_OscConfig+0x26c>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	4939      	ldr	r1, [pc, #228]	; (80031d4 <HAL_RCC_OscConfig+0x26c>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030f2:	e03a      	b.n	800316a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d020      	beq.n	800313e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030fc:	4b36      	ldr	r3, [pc, #216]	; (80031d8 <HAL_RCC_OscConfig+0x270>)
 80030fe:	2201      	movs	r2, #1
 8003100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003102:	f7fd ffdd 	bl	80010c0 <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003108:	e008      	b.n	800311c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800310a:	f7fd ffd9 	bl	80010c0 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e1a1      	b.n	8003460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800311c:	4b2d      	ldr	r3, [pc, #180]	; (80031d4 <HAL_RCC_OscConfig+0x26c>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0f0      	beq.n	800310a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003128:	4b2a      	ldr	r3, [pc, #168]	; (80031d4 <HAL_RCC_OscConfig+0x26c>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	4927      	ldr	r1, [pc, #156]	; (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8003138:	4313      	orrs	r3, r2
 800313a:	600b      	str	r3, [r1, #0]
 800313c:	e015      	b.n	800316a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800313e:	4b26      	ldr	r3, [pc, #152]	; (80031d8 <HAL_RCC_OscConfig+0x270>)
 8003140:	2200      	movs	r2, #0
 8003142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003144:	f7fd ffbc 	bl	80010c0 <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800314c:	f7fd ffb8 	bl	80010c0 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e180      	b.n	8003460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800315e:	4b1d      	ldr	r3, [pc, #116]	; (80031d4 <HAL_RCC_OscConfig+0x26c>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1f0      	bne.n	800314c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0308 	and.w	r3, r3, #8
 8003172:	2b00      	cmp	r3, #0
 8003174:	d03a      	beq.n	80031ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d019      	beq.n	80031b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800317e:	4b17      	ldr	r3, [pc, #92]	; (80031dc <HAL_RCC_OscConfig+0x274>)
 8003180:	2201      	movs	r2, #1
 8003182:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003184:	f7fd ff9c 	bl	80010c0 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800318c:	f7fd ff98 	bl	80010c0 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e160      	b.n	8003460 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800319e:	4b0d      	ldr	r3, [pc, #52]	; (80031d4 <HAL_RCC_OscConfig+0x26c>)
 80031a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0f0      	beq.n	800318c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80031aa:	2001      	movs	r0, #1
 80031ac:	f000 face 	bl	800374c <RCC_Delay>
 80031b0:	e01c      	b.n	80031ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031b2:	4b0a      	ldr	r3, [pc, #40]	; (80031dc <HAL_RCC_OscConfig+0x274>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031b8:	f7fd ff82 	bl	80010c0 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031be:	e00f      	b.n	80031e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031c0:	f7fd ff7e 	bl	80010c0 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d908      	bls.n	80031e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e146      	b.n	8003460 <HAL_RCC_OscConfig+0x4f8>
 80031d2:	bf00      	nop
 80031d4:	40021000 	.word	0x40021000
 80031d8:	42420000 	.word	0x42420000
 80031dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031e0:	4b92      	ldr	r3, [pc, #584]	; (800342c <HAL_RCC_OscConfig+0x4c4>)
 80031e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1e9      	bne.n	80031c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0304 	and.w	r3, r3, #4
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f000 80a6 	beq.w	8003346 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031fa:	2300      	movs	r3, #0
 80031fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031fe:	4b8b      	ldr	r3, [pc, #556]	; (800342c <HAL_RCC_OscConfig+0x4c4>)
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10d      	bne.n	8003226 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800320a:	4b88      	ldr	r3, [pc, #544]	; (800342c <HAL_RCC_OscConfig+0x4c4>)
 800320c:	69db      	ldr	r3, [r3, #28]
 800320e:	4a87      	ldr	r2, [pc, #540]	; (800342c <HAL_RCC_OscConfig+0x4c4>)
 8003210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003214:	61d3      	str	r3, [r2, #28]
 8003216:	4b85      	ldr	r3, [pc, #532]	; (800342c <HAL_RCC_OscConfig+0x4c4>)
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321e:	60bb      	str	r3, [r7, #8]
 8003220:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003222:	2301      	movs	r3, #1
 8003224:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003226:	4b82      	ldr	r3, [pc, #520]	; (8003430 <HAL_RCC_OscConfig+0x4c8>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800322e:	2b00      	cmp	r3, #0
 8003230:	d118      	bne.n	8003264 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003232:	4b7f      	ldr	r3, [pc, #508]	; (8003430 <HAL_RCC_OscConfig+0x4c8>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a7e      	ldr	r2, [pc, #504]	; (8003430 <HAL_RCC_OscConfig+0x4c8>)
 8003238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800323c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800323e:	f7fd ff3f 	bl	80010c0 <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003244:	e008      	b.n	8003258 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003246:	f7fd ff3b 	bl	80010c0 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b64      	cmp	r3, #100	; 0x64
 8003252:	d901      	bls.n	8003258 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e103      	b.n	8003460 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003258:	4b75      	ldr	r3, [pc, #468]	; (8003430 <HAL_RCC_OscConfig+0x4c8>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003260:	2b00      	cmp	r3, #0
 8003262:	d0f0      	beq.n	8003246 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d106      	bne.n	800327a <HAL_RCC_OscConfig+0x312>
 800326c:	4b6f      	ldr	r3, [pc, #444]	; (800342c <HAL_RCC_OscConfig+0x4c4>)
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	4a6e      	ldr	r2, [pc, #440]	; (800342c <HAL_RCC_OscConfig+0x4c4>)
 8003272:	f043 0301 	orr.w	r3, r3, #1
 8003276:	6213      	str	r3, [r2, #32]
 8003278:	e02d      	b.n	80032d6 <HAL_RCC_OscConfig+0x36e>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10c      	bne.n	800329c <HAL_RCC_OscConfig+0x334>
 8003282:	4b6a      	ldr	r3, [pc, #424]	; (800342c <HAL_RCC_OscConfig+0x4c4>)
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	4a69      	ldr	r2, [pc, #420]	; (800342c <HAL_RCC_OscConfig+0x4c4>)
 8003288:	f023 0301 	bic.w	r3, r3, #1
 800328c:	6213      	str	r3, [r2, #32]
 800328e:	4b67      	ldr	r3, [pc, #412]	; (800342c <HAL_RCC_OscConfig+0x4c4>)
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	4a66      	ldr	r2, [pc, #408]	; (800342c <HAL_RCC_OscConfig+0x4c4>)
 8003294:	f023 0304 	bic.w	r3, r3, #4
 8003298:	6213      	str	r3, [r2, #32]
 800329a:	e01c      	b.n	80032d6 <HAL_RCC_OscConfig+0x36e>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	2b05      	cmp	r3, #5
 80032a2:	d10c      	bne.n	80032be <HAL_RCC_OscConfig+0x356>
 80032a4:	4b61      	ldr	r3, [pc, #388]	; (800342c <HAL_RCC_OscConfig+0x4c4>)
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	4a60      	ldr	r2, [pc, #384]	; (800342c <HAL_RCC_OscConfig+0x4c4>)
 80032aa:	f043 0304 	orr.w	r3, r3, #4
 80032ae:	6213      	str	r3, [r2, #32]
 80032b0:	4b5e      	ldr	r3, [pc, #376]	; (800342c <HAL_RCC_OscConfig+0x4c4>)
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	4a5d      	ldr	r2, [pc, #372]	; (800342c <HAL_RCC_OscConfig+0x4c4>)
 80032b6:	f043 0301 	orr.w	r3, r3, #1
 80032ba:	6213      	str	r3, [r2, #32]
 80032bc:	e00b      	b.n	80032d6 <HAL_RCC_OscConfig+0x36e>
 80032be:	4b5b      	ldr	r3, [pc, #364]	; (800342c <HAL_RCC_OscConfig+0x4c4>)
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	4a5a      	ldr	r2, [pc, #360]	; (800342c <HAL_RCC_OscConfig+0x4c4>)
 80032c4:	f023 0301 	bic.w	r3, r3, #1
 80032c8:	6213      	str	r3, [r2, #32]
 80032ca:	4b58      	ldr	r3, [pc, #352]	; (800342c <HAL_RCC_OscConfig+0x4c4>)
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	4a57      	ldr	r2, [pc, #348]	; (800342c <HAL_RCC_OscConfig+0x4c4>)
 80032d0:	f023 0304 	bic.w	r3, r3, #4
 80032d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d015      	beq.n	800330a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032de:	f7fd feef 	bl	80010c0 <HAL_GetTick>
 80032e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e4:	e00a      	b.n	80032fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032e6:	f7fd feeb 	bl	80010c0 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d901      	bls.n	80032fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e0b1      	b.n	8003460 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032fc:	4b4b      	ldr	r3, [pc, #300]	; (800342c <HAL_RCC_OscConfig+0x4c4>)
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d0ee      	beq.n	80032e6 <HAL_RCC_OscConfig+0x37e>
 8003308:	e014      	b.n	8003334 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800330a:	f7fd fed9 	bl	80010c0 <HAL_GetTick>
 800330e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003310:	e00a      	b.n	8003328 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003312:	f7fd fed5 	bl	80010c0 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003320:	4293      	cmp	r3, r2
 8003322:	d901      	bls.n	8003328 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e09b      	b.n	8003460 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003328:	4b40      	ldr	r3, [pc, #256]	; (800342c <HAL_RCC_OscConfig+0x4c4>)
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1ee      	bne.n	8003312 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003334:	7dfb      	ldrb	r3, [r7, #23]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d105      	bne.n	8003346 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800333a:	4b3c      	ldr	r3, [pc, #240]	; (800342c <HAL_RCC_OscConfig+0x4c4>)
 800333c:	69db      	ldr	r3, [r3, #28]
 800333e:	4a3b      	ldr	r2, [pc, #236]	; (800342c <HAL_RCC_OscConfig+0x4c4>)
 8003340:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003344:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	2b00      	cmp	r3, #0
 800334c:	f000 8087 	beq.w	800345e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003350:	4b36      	ldr	r3, [pc, #216]	; (800342c <HAL_RCC_OscConfig+0x4c4>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f003 030c 	and.w	r3, r3, #12
 8003358:	2b08      	cmp	r3, #8
 800335a:	d061      	beq.n	8003420 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	69db      	ldr	r3, [r3, #28]
 8003360:	2b02      	cmp	r3, #2
 8003362:	d146      	bne.n	80033f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003364:	4b33      	ldr	r3, [pc, #204]	; (8003434 <HAL_RCC_OscConfig+0x4cc>)
 8003366:	2200      	movs	r2, #0
 8003368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800336a:	f7fd fea9 	bl	80010c0 <HAL_GetTick>
 800336e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003370:	e008      	b.n	8003384 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003372:	f7fd fea5 	bl	80010c0 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d901      	bls.n	8003384 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e06d      	b.n	8003460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003384:	4b29      	ldr	r3, [pc, #164]	; (800342c <HAL_RCC_OscConfig+0x4c4>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1f0      	bne.n	8003372 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003398:	d108      	bne.n	80033ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800339a:	4b24      	ldr	r3, [pc, #144]	; (800342c <HAL_RCC_OscConfig+0x4c4>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	4921      	ldr	r1, [pc, #132]	; (800342c <HAL_RCC_OscConfig+0x4c4>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033ac:	4b1f      	ldr	r3, [pc, #124]	; (800342c <HAL_RCC_OscConfig+0x4c4>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a19      	ldr	r1, [r3, #32]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033bc:	430b      	orrs	r3, r1
 80033be:	491b      	ldr	r1, [pc, #108]	; (800342c <HAL_RCC_OscConfig+0x4c4>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033c4:	4b1b      	ldr	r3, [pc, #108]	; (8003434 <HAL_RCC_OscConfig+0x4cc>)
 80033c6:	2201      	movs	r2, #1
 80033c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ca:	f7fd fe79 	bl	80010c0 <HAL_GetTick>
 80033ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033d0:	e008      	b.n	80033e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033d2:	f7fd fe75 	bl	80010c0 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d901      	bls.n	80033e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e03d      	b.n	8003460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033e4:	4b11      	ldr	r3, [pc, #68]	; (800342c <HAL_RCC_OscConfig+0x4c4>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d0f0      	beq.n	80033d2 <HAL_RCC_OscConfig+0x46a>
 80033f0:	e035      	b.n	800345e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f2:	4b10      	ldr	r3, [pc, #64]	; (8003434 <HAL_RCC_OscConfig+0x4cc>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f8:	f7fd fe62 	bl	80010c0 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003400:	f7fd fe5e 	bl	80010c0 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e026      	b.n	8003460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003412:	4b06      	ldr	r3, [pc, #24]	; (800342c <HAL_RCC_OscConfig+0x4c4>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1f0      	bne.n	8003400 <HAL_RCC_OscConfig+0x498>
 800341e:	e01e      	b.n	800345e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	69db      	ldr	r3, [r3, #28]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d107      	bne.n	8003438 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e019      	b.n	8003460 <HAL_RCC_OscConfig+0x4f8>
 800342c:	40021000 	.word	0x40021000
 8003430:	40007000 	.word	0x40007000
 8003434:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003438:	4b0b      	ldr	r3, [pc, #44]	; (8003468 <HAL_RCC_OscConfig+0x500>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	429a      	cmp	r2, r3
 800344a:	d106      	bne.n	800345a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003456:	429a      	cmp	r2, r3
 8003458:	d001      	beq.n	800345e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e000      	b.n	8003460 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3718      	adds	r7, #24
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	40021000 	.word	0x40021000

0800346c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d101      	bne.n	8003480 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e0d0      	b.n	8003622 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003480:	4b6a      	ldr	r3, [pc, #424]	; (800362c <HAL_RCC_ClockConfig+0x1c0>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	429a      	cmp	r2, r3
 800348c:	d910      	bls.n	80034b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800348e:	4b67      	ldr	r3, [pc, #412]	; (800362c <HAL_RCC_ClockConfig+0x1c0>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f023 0207 	bic.w	r2, r3, #7
 8003496:	4965      	ldr	r1, [pc, #404]	; (800362c <HAL_RCC_ClockConfig+0x1c0>)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	4313      	orrs	r3, r2
 800349c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800349e:	4b63      	ldr	r3, [pc, #396]	; (800362c <HAL_RCC_ClockConfig+0x1c0>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d001      	beq.n	80034b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e0b8      	b.n	8003622 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d020      	beq.n	80034fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0304 	and.w	r3, r3, #4
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d005      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034c8:	4b59      	ldr	r3, [pc, #356]	; (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	4a58      	ldr	r2, [pc, #352]	; (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 80034ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80034d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0308 	and.w	r3, r3, #8
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d005      	beq.n	80034ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034e0:	4b53      	ldr	r3, [pc, #332]	; (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	4a52      	ldr	r2, [pc, #328]	; (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 80034e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80034ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034ec:	4b50      	ldr	r3, [pc, #320]	; (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	494d      	ldr	r1, [pc, #308]	; (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d040      	beq.n	800358c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d107      	bne.n	8003522 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003512:	4b47      	ldr	r3, [pc, #284]	; (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d115      	bne.n	800354a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e07f      	b.n	8003622 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2b02      	cmp	r3, #2
 8003528:	d107      	bne.n	800353a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800352a:	4b41      	ldr	r3, [pc, #260]	; (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d109      	bne.n	800354a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e073      	b.n	8003622 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800353a:	4b3d      	ldr	r3, [pc, #244]	; (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e06b      	b.n	8003622 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800354a:	4b39      	ldr	r3, [pc, #228]	; (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f023 0203 	bic.w	r2, r3, #3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	4936      	ldr	r1, [pc, #216]	; (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 8003558:	4313      	orrs	r3, r2
 800355a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800355c:	f7fd fdb0 	bl	80010c0 <HAL_GetTick>
 8003560:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003562:	e00a      	b.n	800357a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003564:	f7fd fdac 	bl	80010c0 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003572:	4293      	cmp	r3, r2
 8003574:	d901      	bls.n	800357a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e053      	b.n	8003622 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800357a:	4b2d      	ldr	r3, [pc, #180]	; (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f003 020c 	and.w	r2, r3, #12
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	429a      	cmp	r2, r3
 800358a:	d1eb      	bne.n	8003564 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800358c:	4b27      	ldr	r3, [pc, #156]	; (800362c <HAL_RCC_ClockConfig+0x1c0>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	429a      	cmp	r2, r3
 8003598:	d210      	bcs.n	80035bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800359a:	4b24      	ldr	r3, [pc, #144]	; (800362c <HAL_RCC_ClockConfig+0x1c0>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f023 0207 	bic.w	r2, r3, #7
 80035a2:	4922      	ldr	r1, [pc, #136]	; (800362c <HAL_RCC_ClockConfig+0x1c0>)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035aa:	4b20      	ldr	r3, [pc, #128]	; (800362c <HAL_RCC_ClockConfig+0x1c0>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0307 	and.w	r3, r3, #7
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d001      	beq.n	80035bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e032      	b.n	8003622 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d008      	beq.n	80035da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035c8:	4b19      	ldr	r3, [pc, #100]	; (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	4916      	ldr	r1, [pc, #88]	; (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0308 	and.w	r3, r3, #8
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d009      	beq.n	80035fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035e6:	4b12      	ldr	r3, [pc, #72]	; (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	490e      	ldr	r1, [pc, #56]	; (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035fa:	f000 f821 	bl	8003640 <HAL_RCC_GetSysClockFreq>
 80035fe:	4602      	mov	r2, r0
 8003600:	4b0b      	ldr	r3, [pc, #44]	; (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	091b      	lsrs	r3, r3, #4
 8003606:	f003 030f 	and.w	r3, r3, #15
 800360a:	490a      	ldr	r1, [pc, #40]	; (8003634 <HAL_RCC_ClockConfig+0x1c8>)
 800360c:	5ccb      	ldrb	r3, [r1, r3]
 800360e:	fa22 f303 	lsr.w	r3, r2, r3
 8003612:	4a09      	ldr	r2, [pc, #36]	; (8003638 <HAL_RCC_ClockConfig+0x1cc>)
 8003614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003616:	4b09      	ldr	r3, [pc, #36]	; (800363c <HAL_RCC_ClockConfig+0x1d0>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4618      	mov	r0, r3
 800361c:	f7fd fd0e 	bl	800103c <HAL_InitTick>

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	40022000 	.word	0x40022000
 8003630:	40021000 	.word	0x40021000
 8003634:	08005730 	.word	0x08005730
 8003638:	20000000 	.word	0x20000000
 800363c:	20000004 	.word	0x20000004

08003640 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003640:	b480      	push	{r7}
 8003642:	b087      	sub	sp, #28
 8003644:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003646:	2300      	movs	r3, #0
 8003648:	60fb      	str	r3, [r7, #12]
 800364a:	2300      	movs	r3, #0
 800364c:	60bb      	str	r3, [r7, #8]
 800364e:	2300      	movs	r3, #0
 8003650:	617b      	str	r3, [r7, #20]
 8003652:	2300      	movs	r3, #0
 8003654:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003656:	2300      	movs	r3, #0
 8003658:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800365a:	4b1e      	ldr	r3, [pc, #120]	; (80036d4 <HAL_RCC_GetSysClockFreq+0x94>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f003 030c 	and.w	r3, r3, #12
 8003666:	2b04      	cmp	r3, #4
 8003668:	d002      	beq.n	8003670 <HAL_RCC_GetSysClockFreq+0x30>
 800366a:	2b08      	cmp	r3, #8
 800366c:	d003      	beq.n	8003676 <HAL_RCC_GetSysClockFreq+0x36>
 800366e:	e027      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003670:	4b19      	ldr	r3, [pc, #100]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003672:	613b      	str	r3, [r7, #16]
      break;
 8003674:	e027      	b.n	80036c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	0c9b      	lsrs	r3, r3, #18
 800367a:	f003 030f 	and.w	r3, r3, #15
 800367e:	4a17      	ldr	r2, [pc, #92]	; (80036dc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003680:	5cd3      	ldrb	r3, [r2, r3]
 8003682:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d010      	beq.n	80036b0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800368e:	4b11      	ldr	r3, [pc, #68]	; (80036d4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	0c5b      	lsrs	r3, r3, #17
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	4a11      	ldr	r2, [pc, #68]	; (80036e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800369a:	5cd3      	ldrb	r3, [r2, r3]
 800369c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a0d      	ldr	r2, [pc, #52]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80036a2:	fb03 f202 	mul.w	r2, r3, r2
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ac:	617b      	str	r3, [r7, #20]
 80036ae:	e004      	b.n	80036ba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a0c      	ldr	r2, [pc, #48]	; (80036e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80036b4:	fb02 f303 	mul.w	r3, r2, r3
 80036b8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	613b      	str	r3, [r7, #16]
      break;
 80036be:	e002      	b.n	80036c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036c0:	4b05      	ldr	r3, [pc, #20]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80036c2:	613b      	str	r3, [r7, #16]
      break;
 80036c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036c6:	693b      	ldr	r3, [r7, #16]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	371c      	adds	r7, #28
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bc80      	pop	{r7}
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	40021000 	.word	0x40021000
 80036d8:	007a1200 	.word	0x007a1200
 80036dc:	08005748 	.word	0x08005748
 80036e0:	08005758 	.word	0x08005758
 80036e4:	003d0900 	.word	0x003d0900

080036e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036ec:	4b02      	ldr	r3, [pc, #8]	; (80036f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80036ee:	681b      	ldr	r3, [r3, #0]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bc80      	pop	{r7}
 80036f6:	4770      	bx	lr
 80036f8:	20000000 	.word	0x20000000

080036fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003700:	f7ff fff2 	bl	80036e8 <HAL_RCC_GetHCLKFreq>
 8003704:	4602      	mov	r2, r0
 8003706:	4b05      	ldr	r3, [pc, #20]	; (800371c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	0a1b      	lsrs	r3, r3, #8
 800370c:	f003 0307 	and.w	r3, r3, #7
 8003710:	4903      	ldr	r1, [pc, #12]	; (8003720 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003712:	5ccb      	ldrb	r3, [r1, r3]
 8003714:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003718:	4618      	mov	r0, r3
 800371a:	bd80      	pop	{r7, pc}
 800371c:	40021000 	.word	0x40021000
 8003720:	08005740 	.word	0x08005740

08003724 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003728:	f7ff ffde 	bl	80036e8 <HAL_RCC_GetHCLKFreq>
 800372c:	4602      	mov	r2, r0
 800372e:	4b05      	ldr	r3, [pc, #20]	; (8003744 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	0adb      	lsrs	r3, r3, #11
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	4903      	ldr	r1, [pc, #12]	; (8003748 <HAL_RCC_GetPCLK2Freq+0x24>)
 800373a:	5ccb      	ldrb	r3, [r1, r3]
 800373c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003740:	4618      	mov	r0, r3
 8003742:	bd80      	pop	{r7, pc}
 8003744:	40021000 	.word	0x40021000
 8003748:	08005740 	.word	0x08005740

0800374c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003754:	4b0a      	ldr	r3, [pc, #40]	; (8003780 <RCC_Delay+0x34>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a0a      	ldr	r2, [pc, #40]	; (8003784 <RCC_Delay+0x38>)
 800375a:	fba2 2303 	umull	r2, r3, r2, r3
 800375e:	0a5b      	lsrs	r3, r3, #9
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	fb02 f303 	mul.w	r3, r2, r3
 8003766:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003768:	bf00      	nop
  }
  while (Delay --);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	1e5a      	subs	r2, r3, #1
 800376e:	60fa      	str	r2, [r7, #12]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1f9      	bne.n	8003768 <RCC_Delay+0x1c>
}
 8003774:	bf00      	nop
 8003776:	bf00      	nop
 8003778:	3714      	adds	r7, #20
 800377a:	46bd      	mov	sp, r7
 800377c:	bc80      	pop	{r7}
 800377e:	4770      	bx	lr
 8003780:	20000000 	.word	0x20000000
 8003784:	10624dd3 	.word	0x10624dd3

08003788 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003790:	2300      	movs	r3, #0
 8003792:	613b      	str	r3, [r7, #16]
 8003794:	2300      	movs	r3, #0
 8003796:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d07d      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80037a4:	2300      	movs	r3, #0
 80037a6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037a8:	4b4f      	ldr	r3, [pc, #316]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037aa:	69db      	ldr	r3, [r3, #28]
 80037ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10d      	bne.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037b4:	4b4c      	ldr	r3, [pc, #304]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037b6:	69db      	ldr	r3, [r3, #28]
 80037b8:	4a4b      	ldr	r2, [pc, #300]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037be:	61d3      	str	r3, [r2, #28]
 80037c0:	4b49      	ldr	r3, [pc, #292]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037c2:	69db      	ldr	r3, [r3, #28]
 80037c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c8:	60bb      	str	r3, [r7, #8]
 80037ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037cc:	2301      	movs	r3, #1
 80037ce:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d0:	4b46      	ldr	r3, [pc, #280]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d118      	bne.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037dc:	4b43      	ldr	r3, [pc, #268]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a42      	ldr	r2, [pc, #264]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037e8:	f7fd fc6a 	bl	80010c0 <HAL_GetTick>
 80037ec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ee:	e008      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037f0:	f7fd fc66 	bl	80010c0 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b64      	cmp	r3, #100	; 0x64
 80037fc:	d901      	bls.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e06d      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003802:	4b3a      	ldr	r3, [pc, #232]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800380a:	2b00      	cmp	r3, #0
 800380c:	d0f0      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800380e:	4b36      	ldr	r3, [pc, #216]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003816:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d02e      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	429a      	cmp	r2, r3
 800382a:	d027      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800382c:	4b2e      	ldr	r3, [pc, #184]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003834:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003836:	4b2e      	ldr	r3, [pc, #184]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003838:	2201      	movs	r2, #1
 800383a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800383c:	4b2c      	ldr	r3, [pc, #176]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800383e:	2200      	movs	r2, #0
 8003840:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003842:	4a29      	ldr	r2, [pc, #164]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	d014      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003852:	f7fd fc35 	bl	80010c0 <HAL_GetTick>
 8003856:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003858:	e00a      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800385a:	f7fd fc31 	bl	80010c0 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	f241 3288 	movw	r2, #5000	; 0x1388
 8003868:	4293      	cmp	r3, r2
 800386a:	d901      	bls.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e036      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003870:	4b1d      	ldr	r3, [pc, #116]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003872:	6a1b      	ldr	r3, [r3, #32]
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d0ee      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800387c:	4b1a      	ldr	r3, [pc, #104]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	4917      	ldr	r1, [pc, #92]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800388a:	4313      	orrs	r3, r2
 800388c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800388e:	7dfb      	ldrb	r3, [r7, #23]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d105      	bne.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003894:	4b14      	ldr	r3, [pc, #80]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003896:	69db      	ldr	r3, [r3, #28]
 8003898:	4a13      	ldr	r2, [pc, #76]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800389a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800389e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d008      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038ac:	4b0e      	ldr	r3, [pc, #56]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	490b      	ldr	r1, [pc, #44]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0310 	and.w	r3, r3, #16
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d008      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038ca:	4b07      	ldr	r3, [pc, #28]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	4904      	ldr	r1, [pc, #16]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3718      	adds	r7, #24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	40021000 	.word	0x40021000
 80038ec:	40007000 	.word	0x40007000
 80038f0:	42420440 	.word	0x42420440

080038f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b088      	sub	sp, #32
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80038fc:	2300      	movs	r3, #0
 80038fe:	617b      	str	r3, [r7, #20]
 8003900:	2300      	movs	r3, #0
 8003902:	61fb      	str	r3, [r7, #28]
 8003904:	2300      	movs	r3, #0
 8003906:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003908:	2300      	movs	r3, #0
 800390a:	60fb      	str	r3, [r7, #12]
 800390c:	2300      	movs	r3, #0
 800390e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b10      	cmp	r3, #16
 8003914:	d00a      	beq.n	800392c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2b10      	cmp	r3, #16
 800391a:	f200 808a 	bhi.w	8003a32 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d045      	beq.n	80039b0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b02      	cmp	r3, #2
 8003928:	d075      	beq.n	8003a16 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800392a:	e082      	b.n	8003a32 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800392c:	4b46      	ldr	r3, [pc, #280]	; (8003a48 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003932:	4b45      	ldr	r3, [pc, #276]	; (8003a48 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d07b      	beq.n	8003a36 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	0c9b      	lsrs	r3, r3, #18
 8003942:	f003 030f 	and.w	r3, r3, #15
 8003946:	4a41      	ldr	r2, [pc, #260]	; (8003a4c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003948:	5cd3      	ldrb	r3, [r2, r3]
 800394a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d015      	beq.n	8003982 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003956:	4b3c      	ldr	r3, [pc, #240]	; (8003a48 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	0c5b      	lsrs	r3, r3, #17
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	4a3b      	ldr	r2, [pc, #236]	; (8003a50 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003962:	5cd3      	ldrb	r3, [r2, r3]
 8003964:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00d      	beq.n	800398c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003970:	4a38      	ldr	r2, [pc, #224]	; (8003a54 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	fbb2 f2f3 	udiv	r2, r2, r3
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	fb02 f303 	mul.w	r3, r2, r3
 800397e:	61fb      	str	r3, [r7, #28]
 8003980:	e004      	b.n	800398c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	4a34      	ldr	r2, [pc, #208]	; (8003a58 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003986:	fb02 f303 	mul.w	r3, r2, r3
 800398a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800398c:	4b2e      	ldr	r3, [pc, #184]	; (8003a48 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003994:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003998:	d102      	bne.n	80039a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	61bb      	str	r3, [r7, #24]
      break;
 800399e:	e04a      	b.n	8003a36 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	4a2d      	ldr	r2, [pc, #180]	; (8003a5c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80039a6:	fba2 2303 	umull	r2, r3, r2, r3
 80039aa:	085b      	lsrs	r3, r3, #1
 80039ac:	61bb      	str	r3, [r7, #24]
      break;
 80039ae:	e042      	b.n	8003a36 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80039b0:	4b25      	ldr	r3, [pc, #148]	; (8003a48 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039c0:	d108      	bne.n	80039d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d003      	beq.n	80039d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80039cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039d0:	61bb      	str	r3, [r7, #24]
 80039d2:	e01f      	b.n	8003a14 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039de:	d109      	bne.n	80039f4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80039e0:	4b19      	ldr	r3, [pc, #100]	; (8003a48 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80039e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d003      	beq.n	80039f4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80039ec:	f649 4340 	movw	r3, #40000	; 0x9c40
 80039f0:	61bb      	str	r3, [r7, #24]
 80039f2:	e00f      	b.n	8003a14 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039fe:	d11c      	bne.n	8003a3a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003a00:	4b11      	ldr	r3, [pc, #68]	; (8003a48 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d016      	beq.n	8003a3a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003a0c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003a10:	61bb      	str	r3, [r7, #24]
      break;
 8003a12:	e012      	b.n	8003a3a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003a14:	e011      	b.n	8003a3a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003a16:	f7ff fe85 	bl	8003724 <HAL_RCC_GetPCLK2Freq>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	4b0a      	ldr	r3, [pc, #40]	; (8003a48 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	0b9b      	lsrs	r3, r3, #14
 8003a22:	f003 0303 	and.w	r3, r3, #3
 8003a26:	3301      	adds	r3, #1
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2e:	61bb      	str	r3, [r7, #24]
      break;
 8003a30:	e004      	b.n	8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003a32:	bf00      	nop
 8003a34:	e002      	b.n	8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003a36:	bf00      	nop
 8003a38:	e000      	b.n	8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003a3a:	bf00      	nop
    }
  }
  return (frequency);
 8003a3c:	69bb      	ldr	r3, [r7, #24]
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3720      	adds	r7, #32
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	0800575c 	.word	0x0800575c
 8003a50:	0800576c 	.word	0x0800576c
 8003a54:	007a1200 	.word	0x007a1200
 8003a58:	003d0900 	.word	0x003d0900
 8003a5c:	aaaaaaab 	.word	0xaaaaaaab

08003a60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e041      	b.n	8003af6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d106      	bne.n	8003a8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f7fd f9d6 	bl	8000e38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2202      	movs	r2, #2
 8003a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	3304      	adds	r3, #4
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	4610      	mov	r0, r2
 8003aa0:	f000 fab0 	bl	8004004 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3708      	adds	r7, #8
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b082      	sub	sp, #8
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d101      	bne.n	8003b10 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e041      	b.n	8003b94 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d106      	bne.n	8003b2a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 f839 	bl	8003b9c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2202      	movs	r2, #2
 8003b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	3304      	adds	r3, #4
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	4610      	mov	r0, r2
 8003b3e:	f000 fa61 	bl	8004004 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3708      	adds	r7, #8
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bc80      	pop	{r7}
 8003bac:	4770      	bx	lr
	...

08003bb0 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d109      	bne.n	8003bd4 <HAL_TIM_OC_Start+0x24>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	bf14      	ite	ne
 8003bcc:	2301      	movne	r3, #1
 8003bce:	2300      	moveq	r3, #0
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	e022      	b.n	8003c1a <HAL_TIM_OC_Start+0x6a>
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	d109      	bne.n	8003bee <HAL_TIM_OC_Start+0x3e>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	bf14      	ite	ne
 8003be6:	2301      	movne	r3, #1
 8003be8:	2300      	moveq	r3, #0
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	e015      	b.n	8003c1a <HAL_TIM_OC_Start+0x6a>
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	2b08      	cmp	r3, #8
 8003bf2:	d109      	bne.n	8003c08 <HAL_TIM_OC_Start+0x58>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	bf14      	ite	ne
 8003c00:	2301      	movne	r3, #1
 8003c02:	2300      	moveq	r3, #0
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	e008      	b.n	8003c1a <HAL_TIM_OC_Start+0x6a>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	bf14      	ite	ne
 8003c14:	2301      	movne	r3, #1
 8003c16:	2300      	moveq	r3, #0
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e05e      	b.n	8003ce0 <HAL_TIM_OC_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d104      	bne.n	8003c32 <HAL_TIM_OC_Start+0x82>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c30:	e013      	b.n	8003c5a <HAL_TIM_OC_Start+0xaa>
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	2b04      	cmp	r3, #4
 8003c36:	d104      	bne.n	8003c42 <HAL_TIM_OC_Start+0x92>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c40:	e00b      	b.n	8003c5a <HAL_TIM_OC_Start+0xaa>
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	2b08      	cmp	r3, #8
 8003c46:	d104      	bne.n	8003c52 <HAL_TIM_OC_Start+0xa2>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c50:	e003      	b.n	8003c5a <HAL_TIM_OC_Start+0xaa>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2202      	movs	r2, #2
 8003c56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	6839      	ldr	r1, [r7, #0]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f000 fc4e 	bl	8004504 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a1e      	ldr	r2, [pc, #120]	; (8003ce8 <HAL_TIM_OC_Start+0x138>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d107      	bne.n	8003c82 <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c80:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a18      	ldr	r2, [pc, #96]	; (8003ce8 <HAL_TIM_OC_Start+0x138>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d00e      	beq.n	8003caa <HAL_TIM_OC_Start+0xfa>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c94:	d009      	beq.n	8003caa <HAL_TIM_OC_Start+0xfa>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a14      	ldr	r2, [pc, #80]	; (8003cec <HAL_TIM_OC_Start+0x13c>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d004      	beq.n	8003caa <HAL_TIM_OC_Start+0xfa>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a12      	ldr	r2, [pc, #72]	; (8003cf0 <HAL_TIM_OC_Start+0x140>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d111      	bne.n	8003cce <HAL_TIM_OC_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f003 0307 	and.w	r3, r3, #7
 8003cb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2b06      	cmp	r3, #6
 8003cba:	d010      	beq.n	8003cde <HAL_TIM_OC_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f042 0201 	orr.w	r2, r2, #1
 8003cca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ccc:	e007      	b.n	8003cde <HAL_TIM_OC_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f042 0201 	orr.w	r2, r2, #1
 8003cdc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3710      	adds	r7, #16
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	40012c00 	.word	0x40012c00
 8003cec:	40000400 	.word	0x40000400
 8003cf0:	40000800 	.word	0x40000800

08003cf4 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2200      	movs	r2, #0
 8003d04:	6839      	ldr	r1, [r7, #0]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 fbfc 	bl	8004504 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a29      	ldr	r2, [pc, #164]	; (8003db8 <HAL_TIM_OC_Stop+0xc4>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d117      	bne.n	8003d46 <HAL_TIM_OC_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	6a1a      	ldr	r2, [r3, #32]
 8003d1c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003d20:	4013      	ands	r3, r2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10f      	bne.n	8003d46 <HAL_TIM_OC_Stop+0x52>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	6a1a      	ldr	r2, [r3, #32]
 8003d2c:	f240 4344 	movw	r3, #1092	; 0x444
 8003d30:	4013      	ands	r3, r2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d107      	bne.n	8003d46 <HAL_TIM_OC_Stop+0x52>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d44:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	6a1a      	ldr	r2, [r3, #32]
 8003d4c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003d50:	4013      	ands	r3, r2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10f      	bne.n	8003d76 <HAL_TIM_OC_Stop+0x82>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	6a1a      	ldr	r2, [r3, #32]
 8003d5c:	f240 4344 	movw	r3, #1092	; 0x444
 8003d60:	4013      	ands	r3, r2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d107      	bne.n	8003d76 <HAL_TIM_OC_Stop+0x82>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f022 0201 	bic.w	r2, r2, #1
 8003d74:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d104      	bne.n	8003d86 <HAL_TIM_OC_Stop+0x92>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d84:	e013      	b.n	8003dae <HAL_TIM_OC_Stop+0xba>
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	2b04      	cmp	r3, #4
 8003d8a:	d104      	bne.n	8003d96 <HAL_TIM_OC_Stop+0xa2>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d94:	e00b      	b.n	8003dae <HAL_TIM_OC_Stop+0xba>
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	2b08      	cmp	r3, #8
 8003d9a:	d104      	bne.n	8003da6 <HAL_TIM_OC_Stop+0xb2>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003da4:	e003      	b.n	8003dae <HAL_TIM_OC_Stop+0xba>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3708      	adds	r7, #8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	40012c00 	.word	0x40012c00

08003dbc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d101      	bne.n	8003dda <HAL_TIM_OC_ConfigChannel+0x1e>
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	e048      	b.n	8003e6c <HAL_TIM_OC_ConfigChannel+0xb0>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2b0c      	cmp	r3, #12
 8003de6:	d839      	bhi.n	8003e5c <HAL_TIM_OC_ConfigChannel+0xa0>
 8003de8:	a201      	add	r2, pc, #4	; (adr r2, 8003df0 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dee:	bf00      	nop
 8003df0:	08003e25 	.word	0x08003e25
 8003df4:	08003e5d 	.word	0x08003e5d
 8003df8:	08003e5d 	.word	0x08003e5d
 8003dfc:	08003e5d 	.word	0x08003e5d
 8003e00:	08003e33 	.word	0x08003e33
 8003e04:	08003e5d 	.word	0x08003e5d
 8003e08:	08003e5d 	.word	0x08003e5d
 8003e0c:	08003e5d 	.word	0x08003e5d
 8003e10:	08003e41 	.word	0x08003e41
 8003e14:	08003e5d 	.word	0x08003e5d
 8003e18:	08003e5d 	.word	0x08003e5d
 8003e1c:	08003e5d 	.word	0x08003e5d
 8003e20:	08003e4f 	.word	0x08003e4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68b9      	ldr	r1, [r7, #8]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f000 f94c 	bl	80040c8 <TIM_OC1_SetConfig>
      break;
 8003e30:	e017      	b.n	8003e62 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68b9      	ldr	r1, [r7, #8]
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f000 f9ab 	bl	8004194 <TIM_OC2_SetConfig>
      break;
 8003e3e:	e010      	b.n	8003e62 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68b9      	ldr	r1, [r7, #8]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f000 fa0e 	bl	8004268 <TIM_OC3_SetConfig>
      break;
 8003e4c:	e009      	b.n	8003e62 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68b9      	ldr	r1, [r7, #8]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f000 fa71 	bl	800433c <TIM_OC4_SetConfig>
      break;
 8003e5a:	e002      	b.n	8003e62 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	75fb      	strb	r3, [r7, #23]
      break;
 8003e60:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3718      	adds	r7, #24
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d101      	bne.n	8003e90 <HAL_TIM_ConfigClockSource+0x1c>
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	e0b4      	b.n	8003ffa <HAL_TIM_ConfigClockSource+0x186>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003eae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003eb6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68ba      	ldr	r2, [r7, #8]
 8003ebe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ec8:	d03e      	beq.n	8003f48 <HAL_TIM_ConfigClockSource+0xd4>
 8003eca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ece:	f200 8087 	bhi.w	8003fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ed2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ed6:	f000 8086 	beq.w	8003fe6 <HAL_TIM_ConfigClockSource+0x172>
 8003eda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ede:	d87f      	bhi.n	8003fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ee0:	2b70      	cmp	r3, #112	; 0x70
 8003ee2:	d01a      	beq.n	8003f1a <HAL_TIM_ConfigClockSource+0xa6>
 8003ee4:	2b70      	cmp	r3, #112	; 0x70
 8003ee6:	d87b      	bhi.n	8003fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ee8:	2b60      	cmp	r3, #96	; 0x60
 8003eea:	d050      	beq.n	8003f8e <HAL_TIM_ConfigClockSource+0x11a>
 8003eec:	2b60      	cmp	r3, #96	; 0x60
 8003eee:	d877      	bhi.n	8003fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ef0:	2b50      	cmp	r3, #80	; 0x50
 8003ef2:	d03c      	beq.n	8003f6e <HAL_TIM_ConfigClockSource+0xfa>
 8003ef4:	2b50      	cmp	r3, #80	; 0x50
 8003ef6:	d873      	bhi.n	8003fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ef8:	2b40      	cmp	r3, #64	; 0x40
 8003efa:	d058      	beq.n	8003fae <HAL_TIM_ConfigClockSource+0x13a>
 8003efc:	2b40      	cmp	r3, #64	; 0x40
 8003efe:	d86f      	bhi.n	8003fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8003f00:	2b30      	cmp	r3, #48	; 0x30
 8003f02:	d064      	beq.n	8003fce <HAL_TIM_ConfigClockSource+0x15a>
 8003f04:	2b30      	cmp	r3, #48	; 0x30
 8003f06:	d86b      	bhi.n	8003fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8003f08:	2b20      	cmp	r3, #32
 8003f0a:	d060      	beq.n	8003fce <HAL_TIM_ConfigClockSource+0x15a>
 8003f0c:	2b20      	cmp	r3, #32
 8003f0e:	d867      	bhi.n	8003fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d05c      	beq.n	8003fce <HAL_TIM_ConfigClockSource+0x15a>
 8003f14:	2b10      	cmp	r3, #16
 8003f16:	d05a      	beq.n	8003fce <HAL_TIM_ConfigClockSource+0x15a>
 8003f18:	e062      	b.n	8003fe0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f2a:	f000 facc 	bl	80044c6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68ba      	ldr	r2, [r7, #8]
 8003f44:	609a      	str	r2, [r3, #8]
      break;
 8003f46:	e04f      	b.n	8003fe8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f58:	f000 fab5 	bl	80044c6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	689a      	ldr	r2, [r3, #8]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f6a:	609a      	str	r2, [r3, #8]
      break;
 8003f6c:	e03c      	b.n	8003fe8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	f000 fa2c 	bl	80043d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2150      	movs	r1, #80	; 0x50
 8003f86:	4618      	mov	r0, r3
 8003f88:	f000 fa83 	bl	8004492 <TIM_ITRx_SetConfig>
      break;
 8003f8c:	e02c      	b.n	8003fe8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	f000 fa4a 	bl	8004434 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2160      	movs	r1, #96	; 0x60
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 fa73 	bl	8004492 <TIM_ITRx_SetConfig>
      break;
 8003fac:	e01c      	b.n	8003fe8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fba:	461a      	mov	r2, r3
 8003fbc:	f000 fa0c 	bl	80043d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2140      	movs	r1, #64	; 0x40
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 fa63 	bl	8004492 <TIM_ITRx_SetConfig>
      break;
 8003fcc:	e00c      	b.n	8003fe8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	4610      	mov	r0, r2
 8003fda:	f000 fa5a 	bl	8004492 <TIM_ITRx_SetConfig>
      break;
 8003fde:	e003      	b.n	8003fe8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	73fb      	strb	r3, [r7, #15]
      break;
 8003fe4:	e000      	b.n	8003fe8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003fe6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
	...

08004004 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a29      	ldr	r2, [pc, #164]	; (80040bc <TIM_Base_SetConfig+0xb8>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d00b      	beq.n	8004034 <TIM_Base_SetConfig+0x30>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004022:	d007      	beq.n	8004034 <TIM_Base_SetConfig+0x30>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a26      	ldr	r2, [pc, #152]	; (80040c0 <TIM_Base_SetConfig+0xbc>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d003      	beq.n	8004034 <TIM_Base_SetConfig+0x30>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a25      	ldr	r2, [pc, #148]	; (80040c4 <TIM_Base_SetConfig+0xc0>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d108      	bne.n	8004046 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800403a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	4313      	orrs	r3, r2
 8004044:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a1c      	ldr	r2, [pc, #112]	; (80040bc <TIM_Base_SetConfig+0xb8>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d00b      	beq.n	8004066 <TIM_Base_SetConfig+0x62>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004054:	d007      	beq.n	8004066 <TIM_Base_SetConfig+0x62>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a19      	ldr	r2, [pc, #100]	; (80040c0 <TIM_Base_SetConfig+0xbc>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d003      	beq.n	8004066 <TIM_Base_SetConfig+0x62>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a18      	ldr	r2, [pc, #96]	; (80040c4 <TIM_Base_SetConfig+0xc0>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d108      	bne.n	8004078 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800406c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	4313      	orrs	r3, r2
 8004076:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	4313      	orrs	r3, r2
 8004084:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	689a      	ldr	r2, [r3, #8]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a07      	ldr	r2, [pc, #28]	; (80040bc <TIM_Base_SetConfig+0xb8>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d103      	bne.n	80040ac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	691a      	ldr	r2, [r3, #16]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	615a      	str	r2, [r3, #20]
}
 80040b2:	bf00      	nop
 80040b4:	3714      	adds	r7, #20
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bc80      	pop	{r7}
 80040ba:	4770      	bx	lr
 80040bc:	40012c00 	.word	0x40012c00
 80040c0:	40000400 	.word	0x40000400
 80040c4:	40000800 	.word	0x40000800

080040c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b087      	sub	sp, #28
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	f023 0201 	bic.w	r2, r3, #1
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f023 0303 	bic.w	r3, r3, #3
 80040fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	4313      	orrs	r3, r2
 8004108:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	f023 0302 	bic.w	r3, r3, #2
 8004110:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	4313      	orrs	r3, r2
 800411a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a1c      	ldr	r2, [pc, #112]	; (8004190 <TIM_OC1_SetConfig+0xc8>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d10c      	bne.n	800413e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	f023 0308 	bic.w	r3, r3, #8
 800412a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	4313      	orrs	r3, r2
 8004134:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	f023 0304 	bic.w	r3, r3, #4
 800413c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a13      	ldr	r2, [pc, #76]	; (8004190 <TIM_OC1_SetConfig+0xc8>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d111      	bne.n	800416a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800414c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004154:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	4313      	orrs	r3, r2
 800415e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	4313      	orrs	r3, r2
 8004168:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	685a      	ldr	r2, [r3, #4]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	697a      	ldr	r2, [r7, #20]
 8004182:	621a      	str	r2, [r3, #32]
}
 8004184:	bf00      	nop
 8004186:	371c      	adds	r7, #28
 8004188:	46bd      	mov	sp, r7
 800418a:	bc80      	pop	{r7}
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	40012c00 	.word	0x40012c00

08004194 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004194:	b480      	push	{r7}
 8004196:	b087      	sub	sp, #28
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a1b      	ldr	r3, [r3, #32]
 80041a8:	f023 0210 	bic.w	r2, r3, #16
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	021b      	lsls	r3, r3, #8
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	f023 0320 	bic.w	r3, r3, #32
 80041de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	011b      	lsls	r3, r3, #4
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a1d      	ldr	r2, [pc, #116]	; (8004264 <TIM_OC2_SetConfig+0xd0>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d10d      	bne.n	8004210 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	011b      	lsls	r3, r3, #4
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	4313      	orrs	r3, r2
 8004206:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800420e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a14      	ldr	r2, [pc, #80]	; (8004264 <TIM_OC2_SetConfig+0xd0>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d113      	bne.n	8004240 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800421e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004226:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	695b      	ldr	r3, [r3, #20]
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	693a      	ldr	r2, [r7, #16]
 8004230:	4313      	orrs	r3, r2
 8004232:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	4313      	orrs	r3, r2
 800423e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685a      	ldr	r2, [r3, #4]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	621a      	str	r2, [r3, #32]
}
 800425a:	bf00      	nop
 800425c:	371c      	adds	r7, #28
 800425e:	46bd      	mov	sp, r7
 8004260:	bc80      	pop	{r7}
 8004262:	4770      	bx	lr
 8004264:	40012c00 	.word	0x40012c00

08004268 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004268:	b480      	push	{r7}
 800426a:	b087      	sub	sp, #28
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a1b      	ldr	r3, [r3, #32]
 800427c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f023 0303 	bic.w	r3, r3, #3
 800429e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	021b      	lsls	r3, r3, #8
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a1d      	ldr	r2, [pc, #116]	; (8004338 <TIM_OC3_SetConfig+0xd0>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d10d      	bne.n	80042e2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	021b      	lsls	r3, r3, #8
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a14      	ldr	r2, [pc, #80]	; (8004338 <TIM_OC3_SetConfig+0xd0>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d113      	bne.n	8004312 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	011b      	lsls	r3, r3, #4
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	4313      	orrs	r3, r2
 8004304:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	011b      	lsls	r3, r3, #4
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	4313      	orrs	r3, r2
 8004310:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	685a      	ldr	r2, [r3, #4]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	621a      	str	r2, [r3, #32]
}
 800432c:	bf00      	nop
 800432e:	371c      	adds	r7, #28
 8004330:	46bd      	mov	sp, r7
 8004332:	bc80      	pop	{r7}
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	40012c00 	.word	0x40012c00

0800433c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800433c:	b480      	push	{r7}
 800433e:	b087      	sub	sp, #28
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a1b      	ldr	r3, [r3, #32]
 800434a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a1b      	ldr	r3, [r3, #32]
 8004350:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	69db      	ldr	r3, [r3, #28]
 8004362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800436a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004372:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	021b      	lsls	r3, r3, #8
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	4313      	orrs	r3, r2
 800437e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004386:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	031b      	lsls	r3, r3, #12
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	4313      	orrs	r3, r2
 8004392:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a0f      	ldr	r2, [pc, #60]	; (80043d4 <TIM_OC4_SetConfig+0x98>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d109      	bne.n	80043b0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	019b      	lsls	r3, r3, #6
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685a      	ldr	r2, [r3, #4]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	621a      	str	r2, [r3, #32]
}
 80043ca:	bf00      	nop
 80043cc:	371c      	adds	r7, #28
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bc80      	pop	{r7}
 80043d2:	4770      	bx	lr
 80043d4:	40012c00 	.word	0x40012c00

080043d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043d8:	b480      	push	{r7}
 80043da:	b087      	sub	sp, #28
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6a1b      	ldr	r3, [r3, #32]
 80043e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	f023 0201 	bic.w	r2, r3, #1
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004402:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	011b      	lsls	r3, r3, #4
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	4313      	orrs	r3, r2
 800440c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	f023 030a 	bic.w	r3, r3, #10
 8004414:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004416:	697a      	ldr	r2, [r7, #20]
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	4313      	orrs	r3, r2
 800441c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	697a      	ldr	r2, [r7, #20]
 8004428:	621a      	str	r2, [r3, #32]
}
 800442a:	bf00      	nop
 800442c:	371c      	adds	r7, #28
 800442e:	46bd      	mov	sp, r7
 8004430:	bc80      	pop	{r7}
 8004432:	4770      	bx	lr

08004434 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004434:	b480      	push	{r7}
 8004436:	b087      	sub	sp, #28
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6a1b      	ldr	r3, [r3, #32]
 8004444:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	f023 0210 	bic.w	r2, r3, #16
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800445e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	031b      	lsls	r3, r3, #12
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	4313      	orrs	r3, r2
 8004468:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004470:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	011b      	lsls	r3, r3, #4
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	4313      	orrs	r3, r2
 800447a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	693a      	ldr	r2, [r7, #16]
 8004480:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	621a      	str	r2, [r3, #32]
}
 8004488:	bf00      	nop
 800448a:	371c      	adds	r7, #28
 800448c:	46bd      	mov	sp, r7
 800448e:	bc80      	pop	{r7}
 8004490:	4770      	bx	lr

08004492 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004492:	b480      	push	{r7}
 8004494:	b085      	sub	sp, #20
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
 800449a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044aa:	683a      	ldr	r2, [r7, #0]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	f043 0307 	orr.w	r3, r3, #7
 80044b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	609a      	str	r2, [r3, #8]
}
 80044bc:	bf00      	nop
 80044be:	3714      	adds	r7, #20
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bc80      	pop	{r7}
 80044c4:	4770      	bx	lr

080044c6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044c6:	b480      	push	{r7}
 80044c8:	b087      	sub	sp, #28
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	60f8      	str	r0, [r7, #12]
 80044ce:	60b9      	str	r1, [r7, #8]
 80044d0:	607a      	str	r2, [r7, #4]
 80044d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044e0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	021a      	lsls	r2, r3, #8
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	431a      	orrs	r2, r3
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	697a      	ldr	r2, [r7, #20]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	609a      	str	r2, [r3, #8]
}
 80044fa:	bf00      	nop
 80044fc:	371c      	adds	r7, #28
 80044fe:	46bd      	mov	sp, r7
 8004500:	bc80      	pop	{r7}
 8004502:	4770      	bx	lr

08004504 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004504:	b480      	push	{r7}
 8004506:	b087      	sub	sp, #28
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	f003 031f 	and.w	r3, r3, #31
 8004516:	2201      	movs	r2, #1
 8004518:	fa02 f303 	lsl.w	r3, r2, r3
 800451c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6a1a      	ldr	r2, [r3, #32]
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	43db      	mvns	r3, r3
 8004526:	401a      	ands	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6a1a      	ldr	r2, [r3, #32]
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	f003 031f 	and.w	r3, r3, #31
 8004536:	6879      	ldr	r1, [r7, #4]
 8004538:	fa01 f303 	lsl.w	r3, r1, r3
 800453c:	431a      	orrs	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	621a      	str	r2, [r3, #32]
}
 8004542:	bf00      	nop
 8004544:	371c      	adds	r7, #28
 8004546:	46bd      	mov	sp, r7
 8004548:	bc80      	pop	{r7}
 800454a:	4770      	bx	lr

0800454c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800455c:	2b01      	cmp	r3, #1
 800455e:	d101      	bne.n	8004564 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004560:	2302      	movs	r3, #2
 8004562:	e046      	b.n	80045f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2202      	movs	r2, #2
 8004570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800458a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	4313      	orrs	r3, r2
 8004594:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a16      	ldr	r2, [pc, #88]	; (80045fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d00e      	beq.n	80045c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045b0:	d009      	beq.n	80045c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a12      	ldr	r2, [pc, #72]	; (8004600 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d004      	beq.n	80045c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a10      	ldr	r2, [pc, #64]	; (8004604 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d10c      	bne.n	80045e0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	68ba      	ldr	r2, [r7, #8]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68ba      	ldr	r2, [r7, #8]
 80045de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3714      	adds	r7, #20
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bc80      	pop	{r7}
 80045fa:	4770      	bx	lr
 80045fc:	40012c00 	.word	0x40012c00
 8004600:	40000400 	.word	0x40000400
 8004604:	40000800 	.word	0x40000800

08004608 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e042      	b.n	80046a0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d106      	bne.n	8004634 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7fc fc7c 	bl	8000f2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2224      	movs	r2, #36	; 0x24
 8004638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68da      	ldr	r2, [r3, #12]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800464a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 f9af 	bl	80049b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	691a      	ldr	r2, [r3, #16]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004660:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	695a      	ldr	r2, [r3, #20]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004670:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68da      	ldr	r2, [r3, #12]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004680:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2220      	movs	r2, #32
 800468c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2220      	movs	r2, #32
 8004694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3708      	adds	r7, #8
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b08a      	sub	sp, #40	; 0x28
 80046ac:	af02      	add	r7, sp, #8
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	603b      	str	r3, [r7, #0]
 80046b4:	4613      	mov	r3, r2
 80046b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80046b8:	2300      	movs	r3, #0
 80046ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	2b20      	cmp	r3, #32
 80046c6:	d16d      	bne.n	80047a4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d002      	beq.n	80046d4 <HAL_UART_Transmit+0x2c>
 80046ce:	88fb      	ldrh	r3, [r7, #6]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d101      	bne.n	80046d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e066      	b.n	80047a6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2221      	movs	r2, #33	; 0x21
 80046e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046e6:	f7fc fceb 	bl	80010c0 <HAL_GetTick>
 80046ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	88fa      	ldrh	r2, [r7, #6]
 80046f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	88fa      	ldrh	r2, [r7, #6]
 80046f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004700:	d108      	bne.n	8004714 <HAL_UART_Transmit+0x6c>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d104      	bne.n	8004714 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800470a:	2300      	movs	r3, #0
 800470c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	61bb      	str	r3, [r7, #24]
 8004712:	e003      	b.n	800471c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004718:	2300      	movs	r3, #0
 800471a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800471c:	e02a      	b.n	8004774 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	9300      	str	r3, [sp, #0]
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	2200      	movs	r2, #0
 8004726:	2180      	movs	r1, #128	; 0x80
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	f000 f8d2 	bl	80048d2 <UART_WaitOnFlagUntilTimeout>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d001      	beq.n	8004738 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e036      	b.n	80047a6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10b      	bne.n	8004756 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	881b      	ldrh	r3, [r3, #0]
 8004742:	461a      	mov	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800474c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	3302      	adds	r3, #2
 8004752:	61bb      	str	r3, [r7, #24]
 8004754:	e007      	b.n	8004766 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	781a      	ldrb	r2, [r3, #0]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	3301      	adds	r3, #1
 8004764:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800476a:	b29b      	uxth	r3, r3
 800476c:	3b01      	subs	r3, #1
 800476e:	b29a      	uxth	r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004778:	b29b      	uxth	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1cf      	bne.n	800471e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	9300      	str	r3, [sp, #0]
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	2200      	movs	r2, #0
 8004786:	2140      	movs	r1, #64	; 0x40
 8004788:	68f8      	ldr	r0, [r7, #12]
 800478a:	f000 f8a2 	bl	80048d2 <UART_WaitOnFlagUntilTimeout>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d001      	beq.n	8004798 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e006      	b.n	80047a6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2220      	movs	r2, #32
 800479c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80047a0:	2300      	movs	r3, #0
 80047a2:	e000      	b.n	80047a6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80047a4:	2302      	movs	r3, #2
  }
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3720      	adds	r7, #32
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b08a      	sub	sp, #40	; 0x28
 80047b2:	af02      	add	r7, sp, #8
 80047b4:	60f8      	str	r0, [r7, #12]
 80047b6:	60b9      	str	r1, [r7, #8]
 80047b8:	603b      	str	r3, [r7, #0]
 80047ba:	4613      	mov	r3, r2
 80047bc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047be:	2300      	movs	r3, #0
 80047c0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b20      	cmp	r3, #32
 80047cc:	d17c      	bne.n	80048c8 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d002      	beq.n	80047da <HAL_UART_Receive+0x2c>
 80047d4:	88fb      	ldrh	r3, [r7, #6]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e075      	b.n	80048ca <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2200      	movs	r2, #0
 80047e2:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2222      	movs	r2, #34	; 0x22
 80047e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047f2:	f7fc fc65 	bl	80010c0 <HAL_GetTick>
 80047f6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	88fa      	ldrh	r2, [r7, #6]
 80047fc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	88fa      	ldrh	r2, [r7, #6]
 8004802:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800480c:	d108      	bne.n	8004820 <HAL_UART_Receive+0x72>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d104      	bne.n	8004820 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8004816:	2300      	movs	r3, #0
 8004818:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	61bb      	str	r3, [r7, #24]
 800481e:	e003      	b.n	8004828 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004824:	2300      	movs	r3, #0
 8004826:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004828:	e043      	b.n	80048b2 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	9300      	str	r3, [sp, #0]
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	2200      	movs	r2, #0
 8004832:	2120      	movs	r1, #32
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f000 f84c 	bl	80048d2 <UART_WaitOnFlagUntilTimeout>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d001      	beq.n	8004844 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e042      	b.n	80048ca <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10c      	bne.n	8004864 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	b29b      	uxth	r3, r3
 8004852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004856:	b29a      	uxth	r2, r3
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	3302      	adds	r3, #2
 8004860:	61bb      	str	r3, [r7, #24]
 8004862:	e01f      	b.n	80048a4 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800486c:	d007      	beq.n	800487e <HAL_UART_Receive+0xd0>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d10a      	bne.n	800488c <HAL_UART_Receive+0xde>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d106      	bne.n	800488c <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	b2da      	uxtb	r2, r3
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	701a      	strb	r2, [r3, #0]
 800488a:	e008      	b.n	800489e <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	b2db      	uxtb	r3, r3
 8004894:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004898:	b2da      	uxtb	r2, r3
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	3301      	adds	r3, #1
 80048a2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	3b01      	subs	r3, #1
 80048ac:	b29a      	uxth	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1b6      	bne.n	800482a <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2220      	movs	r2, #32
 80048c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 80048c4:	2300      	movs	r3, #0
 80048c6:	e000      	b.n	80048ca <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80048c8:	2302      	movs	r3, #2
  }
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3720      	adds	r7, #32
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b090      	sub	sp, #64	; 0x40
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	60f8      	str	r0, [r7, #12]
 80048da:	60b9      	str	r1, [r7, #8]
 80048dc:	603b      	str	r3, [r7, #0]
 80048de:	4613      	mov	r3, r2
 80048e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048e2:	e050      	b.n	8004986 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ea:	d04c      	beq.n	8004986 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80048ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d007      	beq.n	8004902 <UART_WaitOnFlagUntilTimeout+0x30>
 80048f2:	f7fc fbe5 	bl	80010c0 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048fe:	429a      	cmp	r2, r3
 8004900:	d241      	bcs.n	8004986 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	330c      	adds	r3, #12
 8004908:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490c:	e853 3f00 	ldrex	r3, [r3]
 8004910:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004914:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004918:	63fb      	str	r3, [r7, #60]	; 0x3c
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	330c      	adds	r3, #12
 8004920:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004922:	637a      	str	r2, [r7, #52]	; 0x34
 8004924:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004926:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004928:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800492a:	e841 2300 	strex	r3, r2, [r1]
 800492e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1e5      	bne.n	8004902 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	3314      	adds	r3, #20
 800493c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	e853 3f00 	ldrex	r3, [r3]
 8004944:	613b      	str	r3, [r7, #16]
   return(result);
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	f023 0301 	bic.w	r3, r3, #1
 800494c:	63bb      	str	r3, [r7, #56]	; 0x38
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	3314      	adds	r3, #20
 8004954:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004956:	623a      	str	r2, [r7, #32]
 8004958:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495a:	69f9      	ldr	r1, [r7, #28]
 800495c:	6a3a      	ldr	r2, [r7, #32]
 800495e:	e841 2300 	strex	r3, r2, [r1]
 8004962:	61bb      	str	r3, [r7, #24]
   return(result);
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1e5      	bne.n	8004936 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2220      	movs	r2, #32
 800496e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2220      	movs	r2, #32
 8004976:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e00f      	b.n	80049a6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	4013      	ands	r3, r2
 8004990:	68ba      	ldr	r2, [r7, #8]
 8004992:	429a      	cmp	r2, r3
 8004994:	bf0c      	ite	eq
 8004996:	2301      	moveq	r3, #1
 8004998:	2300      	movne	r3, #0
 800499a:	b2db      	uxtb	r3, r3
 800499c:	461a      	mov	r2, r3
 800499e:	79fb      	ldrb	r3, [r7, #7]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d09f      	beq.n	80048e4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3740      	adds	r7, #64	; 0x40
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
	...

080049b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	68da      	ldr	r2, [r3, #12]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	430a      	orrs	r2, r1
 80049cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	689a      	ldr	r2, [r3, #8]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	431a      	orrs	r2, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	695b      	ldr	r3, [r3, #20]
 80049dc:	4313      	orrs	r3, r2
 80049de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80049ea:	f023 030c 	bic.w	r3, r3, #12
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	6812      	ldr	r2, [r2, #0]
 80049f2:	68b9      	ldr	r1, [r7, #8]
 80049f4:	430b      	orrs	r3, r1
 80049f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	699a      	ldr	r2, [r3, #24]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a2c      	ldr	r2, [pc, #176]	; (8004ac4 <UART_SetConfig+0x114>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d103      	bne.n	8004a20 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004a18:	f7fe fe84 	bl	8003724 <HAL_RCC_GetPCLK2Freq>
 8004a1c:	60f8      	str	r0, [r7, #12]
 8004a1e:	e002      	b.n	8004a26 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004a20:	f7fe fe6c 	bl	80036fc <HAL_RCC_GetPCLK1Freq>
 8004a24:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	4413      	add	r3, r2
 8004a2e:	009a      	lsls	r2, r3, #2
 8004a30:	441a      	add	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a3c:	4a22      	ldr	r2, [pc, #136]	; (8004ac8 <UART_SetConfig+0x118>)
 8004a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a42:	095b      	lsrs	r3, r3, #5
 8004a44:	0119      	lsls	r1, r3, #4
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	4613      	mov	r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	4413      	add	r3, r2
 8004a4e:	009a      	lsls	r2, r3, #2
 8004a50:	441a      	add	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a5c:	4b1a      	ldr	r3, [pc, #104]	; (8004ac8 <UART_SetConfig+0x118>)
 8004a5e:	fba3 0302 	umull	r0, r3, r3, r2
 8004a62:	095b      	lsrs	r3, r3, #5
 8004a64:	2064      	movs	r0, #100	; 0x64
 8004a66:	fb00 f303 	mul.w	r3, r0, r3
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	011b      	lsls	r3, r3, #4
 8004a6e:	3332      	adds	r3, #50	; 0x32
 8004a70:	4a15      	ldr	r2, [pc, #84]	; (8004ac8 <UART_SetConfig+0x118>)
 8004a72:	fba2 2303 	umull	r2, r3, r2, r3
 8004a76:	095b      	lsrs	r3, r3, #5
 8004a78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a7c:	4419      	add	r1, r3
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	4613      	mov	r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	4413      	add	r3, r2
 8004a86:	009a      	lsls	r2, r3, #2
 8004a88:	441a      	add	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a94:	4b0c      	ldr	r3, [pc, #48]	; (8004ac8 <UART_SetConfig+0x118>)
 8004a96:	fba3 0302 	umull	r0, r3, r3, r2
 8004a9a:	095b      	lsrs	r3, r3, #5
 8004a9c:	2064      	movs	r0, #100	; 0x64
 8004a9e:	fb00 f303 	mul.w	r3, r0, r3
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	011b      	lsls	r3, r3, #4
 8004aa6:	3332      	adds	r3, #50	; 0x32
 8004aa8:	4a07      	ldr	r2, [pc, #28]	; (8004ac8 <UART_SetConfig+0x118>)
 8004aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8004aae:	095b      	lsrs	r3, r3, #5
 8004ab0:	f003 020f 	and.w	r2, r3, #15
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	440a      	add	r2, r1
 8004aba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004abc:	bf00      	nop
 8004abe:	3710      	adds	r7, #16
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	40013800 	.word	0x40013800
 8004ac8:	51eb851f 	.word	0x51eb851f

08004acc <atoi>:
 8004acc:	220a      	movs	r2, #10
 8004ace:	2100      	movs	r1, #0
 8004ad0:	f000 b87e 	b.w	8004bd0 <strtol>

08004ad4 <_strtol_l.constprop.0>:
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ada:	4686      	mov	lr, r0
 8004adc:	4690      	mov	r8, r2
 8004ade:	d001      	beq.n	8004ae4 <_strtol_l.constprop.0+0x10>
 8004ae0:	2b24      	cmp	r3, #36	; 0x24
 8004ae2:	d906      	bls.n	8004af2 <_strtol_l.constprop.0+0x1e>
 8004ae4:	f000 f8a6 	bl	8004c34 <__errno>
 8004ae8:	2316      	movs	r3, #22
 8004aea:	6003      	str	r3, [r0, #0]
 8004aec:	2000      	movs	r0, #0
 8004aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004af2:	460d      	mov	r5, r1
 8004af4:	4835      	ldr	r0, [pc, #212]	; (8004bcc <_strtol_l.constprop.0+0xf8>)
 8004af6:	462a      	mov	r2, r5
 8004af8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004afc:	5d06      	ldrb	r6, [r0, r4]
 8004afe:	f016 0608 	ands.w	r6, r6, #8
 8004b02:	d1f8      	bne.n	8004af6 <_strtol_l.constprop.0+0x22>
 8004b04:	2c2d      	cmp	r4, #45	; 0x2d
 8004b06:	d12e      	bne.n	8004b66 <_strtol_l.constprop.0+0x92>
 8004b08:	2601      	movs	r6, #1
 8004b0a:	782c      	ldrb	r4, [r5, #0]
 8004b0c:	1c95      	adds	r5, r2, #2
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d057      	beq.n	8004bc2 <_strtol_l.constprop.0+0xee>
 8004b12:	2b10      	cmp	r3, #16
 8004b14:	d109      	bne.n	8004b2a <_strtol_l.constprop.0+0x56>
 8004b16:	2c30      	cmp	r4, #48	; 0x30
 8004b18:	d107      	bne.n	8004b2a <_strtol_l.constprop.0+0x56>
 8004b1a:	782a      	ldrb	r2, [r5, #0]
 8004b1c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8004b20:	2a58      	cmp	r2, #88	; 0x58
 8004b22:	d149      	bne.n	8004bb8 <_strtol_l.constprop.0+0xe4>
 8004b24:	2310      	movs	r3, #16
 8004b26:	786c      	ldrb	r4, [r5, #1]
 8004b28:	3502      	adds	r5, #2
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8004b30:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004b34:	fbbc f9f3 	udiv	r9, ip, r3
 8004b38:	4610      	mov	r0, r2
 8004b3a:	fb03 ca19 	mls	sl, r3, r9, ip
 8004b3e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8004b42:	2f09      	cmp	r7, #9
 8004b44:	d814      	bhi.n	8004b70 <_strtol_l.constprop.0+0x9c>
 8004b46:	463c      	mov	r4, r7
 8004b48:	42a3      	cmp	r3, r4
 8004b4a:	dd20      	ble.n	8004b8e <_strtol_l.constprop.0+0xba>
 8004b4c:	1c57      	adds	r7, r2, #1
 8004b4e:	d007      	beq.n	8004b60 <_strtol_l.constprop.0+0x8c>
 8004b50:	4581      	cmp	r9, r0
 8004b52:	d319      	bcc.n	8004b88 <_strtol_l.constprop.0+0xb4>
 8004b54:	d101      	bne.n	8004b5a <_strtol_l.constprop.0+0x86>
 8004b56:	45a2      	cmp	sl, r4
 8004b58:	db16      	blt.n	8004b88 <_strtol_l.constprop.0+0xb4>
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	fb00 4003 	mla	r0, r0, r3, r4
 8004b60:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004b64:	e7eb      	b.n	8004b3e <_strtol_l.constprop.0+0x6a>
 8004b66:	2c2b      	cmp	r4, #43	; 0x2b
 8004b68:	bf04      	itt	eq
 8004b6a:	782c      	ldrbeq	r4, [r5, #0]
 8004b6c:	1c95      	addeq	r5, r2, #2
 8004b6e:	e7ce      	b.n	8004b0e <_strtol_l.constprop.0+0x3a>
 8004b70:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8004b74:	2f19      	cmp	r7, #25
 8004b76:	d801      	bhi.n	8004b7c <_strtol_l.constprop.0+0xa8>
 8004b78:	3c37      	subs	r4, #55	; 0x37
 8004b7a:	e7e5      	b.n	8004b48 <_strtol_l.constprop.0+0x74>
 8004b7c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8004b80:	2f19      	cmp	r7, #25
 8004b82:	d804      	bhi.n	8004b8e <_strtol_l.constprop.0+0xba>
 8004b84:	3c57      	subs	r4, #87	; 0x57
 8004b86:	e7df      	b.n	8004b48 <_strtol_l.constprop.0+0x74>
 8004b88:	f04f 32ff 	mov.w	r2, #4294967295
 8004b8c:	e7e8      	b.n	8004b60 <_strtol_l.constprop.0+0x8c>
 8004b8e:	1c53      	adds	r3, r2, #1
 8004b90:	d108      	bne.n	8004ba4 <_strtol_l.constprop.0+0xd0>
 8004b92:	2322      	movs	r3, #34	; 0x22
 8004b94:	4660      	mov	r0, ip
 8004b96:	f8ce 3000 	str.w	r3, [lr]
 8004b9a:	f1b8 0f00 	cmp.w	r8, #0
 8004b9e:	d0a6      	beq.n	8004aee <_strtol_l.constprop.0+0x1a>
 8004ba0:	1e69      	subs	r1, r5, #1
 8004ba2:	e006      	b.n	8004bb2 <_strtol_l.constprop.0+0xde>
 8004ba4:	b106      	cbz	r6, 8004ba8 <_strtol_l.constprop.0+0xd4>
 8004ba6:	4240      	negs	r0, r0
 8004ba8:	f1b8 0f00 	cmp.w	r8, #0
 8004bac:	d09f      	beq.n	8004aee <_strtol_l.constprop.0+0x1a>
 8004bae:	2a00      	cmp	r2, #0
 8004bb0:	d1f6      	bne.n	8004ba0 <_strtol_l.constprop.0+0xcc>
 8004bb2:	f8c8 1000 	str.w	r1, [r8]
 8004bb6:	e79a      	b.n	8004aee <_strtol_l.constprop.0+0x1a>
 8004bb8:	2430      	movs	r4, #48	; 0x30
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d1b5      	bne.n	8004b2a <_strtol_l.constprop.0+0x56>
 8004bbe:	2308      	movs	r3, #8
 8004bc0:	e7b3      	b.n	8004b2a <_strtol_l.constprop.0+0x56>
 8004bc2:	2c30      	cmp	r4, #48	; 0x30
 8004bc4:	d0a9      	beq.n	8004b1a <_strtol_l.constprop.0+0x46>
 8004bc6:	230a      	movs	r3, #10
 8004bc8:	e7af      	b.n	8004b2a <_strtol_l.constprop.0+0x56>
 8004bca:	bf00      	nop
 8004bcc:	0800576f 	.word	0x0800576f

08004bd0 <strtol>:
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	460a      	mov	r2, r1
 8004bd4:	4601      	mov	r1, r0
 8004bd6:	4802      	ldr	r0, [pc, #8]	; (8004be0 <strtol+0x10>)
 8004bd8:	6800      	ldr	r0, [r0, #0]
 8004bda:	f7ff bf7b 	b.w	8004ad4 <_strtol_l.constprop.0>
 8004bde:	bf00      	nop
 8004be0:	20000058 	.word	0x20000058

08004be4 <siprintf>:
 8004be4:	b40e      	push	{r1, r2, r3}
 8004be6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004bea:	b500      	push	{lr}
 8004bec:	b09c      	sub	sp, #112	; 0x70
 8004bee:	ab1d      	add	r3, sp, #116	; 0x74
 8004bf0:	9002      	str	r0, [sp, #8]
 8004bf2:	9006      	str	r0, [sp, #24]
 8004bf4:	9107      	str	r1, [sp, #28]
 8004bf6:	9104      	str	r1, [sp, #16]
 8004bf8:	4808      	ldr	r0, [pc, #32]	; (8004c1c <siprintf+0x38>)
 8004bfa:	4909      	ldr	r1, [pc, #36]	; (8004c20 <siprintf+0x3c>)
 8004bfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c00:	9105      	str	r1, [sp, #20]
 8004c02:	6800      	ldr	r0, [r0, #0]
 8004c04:	a902      	add	r1, sp, #8
 8004c06:	9301      	str	r3, [sp, #4]
 8004c08:	f000 f98e 	bl	8004f28 <_svfiprintf_r>
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	9b02      	ldr	r3, [sp, #8]
 8004c10:	701a      	strb	r2, [r3, #0]
 8004c12:	b01c      	add	sp, #112	; 0x70
 8004c14:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c18:	b003      	add	sp, #12
 8004c1a:	4770      	bx	lr
 8004c1c:	20000058 	.word	0x20000058
 8004c20:	ffff0208 	.word	0xffff0208

08004c24 <memset>:
 8004c24:	4603      	mov	r3, r0
 8004c26:	4402      	add	r2, r0
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d100      	bne.n	8004c2e <memset+0xa>
 8004c2c:	4770      	bx	lr
 8004c2e:	f803 1b01 	strb.w	r1, [r3], #1
 8004c32:	e7f9      	b.n	8004c28 <memset+0x4>

08004c34 <__errno>:
 8004c34:	4b01      	ldr	r3, [pc, #4]	; (8004c3c <__errno+0x8>)
 8004c36:	6818      	ldr	r0, [r3, #0]
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	20000058 	.word	0x20000058

08004c40 <__libc_init_array>:
 8004c40:	b570      	push	{r4, r5, r6, lr}
 8004c42:	2600      	movs	r6, #0
 8004c44:	4d0c      	ldr	r5, [pc, #48]	; (8004c78 <__libc_init_array+0x38>)
 8004c46:	4c0d      	ldr	r4, [pc, #52]	; (8004c7c <__libc_init_array+0x3c>)
 8004c48:	1b64      	subs	r4, r4, r5
 8004c4a:	10a4      	asrs	r4, r4, #2
 8004c4c:	42a6      	cmp	r6, r4
 8004c4e:	d109      	bne.n	8004c64 <__libc_init_array+0x24>
 8004c50:	f000 fc7a 	bl	8005548 <_init>
 8004c54:	2600      	movs	r6, #0
 8004c56:	4d0a      	ldr	r5, [pc, #40]	; (8004c80 <__libc_init_array+0x40>)
 8004c58:	4c0a      	ldr	r4, [pc, #40]	; (8004c84 <__libc_init_array+0x44>)
 8004c5a:	1b64      	subs	r4, r4, r5
 8004c5c:	10a4      	asrs	r4, r4, #2
 8004c5e:	42a6      	cmp	r6, r4
 8004c60:	d105      	bne.n	8004c6e <__libc_init_array+0x2e>
 8004c62:	bd70      	pop	{r4, r5, r6, pc}
 8004c64:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c68:	4798      	blx	r3
 8004c6a:	3601      	adds	r6, #1
 8004c6c:	e7ee      	b.n	8004c4c <__libc_init_array+0xc>
 8004c6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c72:	4798      	blx	r3
 8004c74:	3601      	adds	r6, #1
 8004c76:	e7f2      	b.n	8004c5e <__libc_init_array+0x1e>
 8004c78:	080058a4 	.word	0x080058a4
 8004c7c:	080058a4 	.word	0x080058a4
 8004c80:	080058a4 	.word	0x080058a4
 8004c84:	080058a8 	.word	0x080058a8

08004c88 <__retarget_lock_acquire_recursive>:
 8004c88:	4770      	bx	lr

08004c8a <__retarget_lock_release_recursive>:
 8004c8a:	4770      	bx	lr

08004c8c <_free_r>:
 8004c8c:	b538      	push	{r3, r4, r5, lr}
 8004c8e:	4605      	mov	r5, r0
 8004c90:	2900      	cmp	r1, #0
 8004c92:	d040      	beq.n	8004d16 <_free_r+0x8a>
 8004c94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c98:	1f0c      	subs	r4, r1, #4
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	bfb8      	it	lt
 8004c9e:	18e4      	addlt	r4, r4, r3
 8004ca0:	f000 f8dc 	bl	8004e5c <__malloc_lock>
 8004ca4:	4a1c      	ldr	r2, [pc, #112]	; (8004d18 <_free_r+0x8c>)
 8004ca6:	6813      	ldr	r3, [r2, #0]
 8004ca8:	b933      	cbnz	r3, 8004cb8 <_free_r+0x2c>
 8004caa:	6063      	str	r3, [r4, #4]
 8004cac:	6014      	str	r4, [r2, #0]
 8004cae:	4628      	mov	r0, r5
 8004cb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004cb4:	f000 b8d8 	b.w	8004e68 <__malloc_unlock>
 8004cb8:	42a3      	cmp	r3, r4
 8004cba:	d908      	bls.n	8004cce <_free_r+0x42>
 8004cbc:	6820      	ldr	r0, [r4, #0]
 8004cbe:	1821      	adds	r1, r4, r0
 8004cc0:	428b      	cmp	r3, r1
 8004cc2:	bf01      	itttt	eq
 8004cc4:	6819      	ldreq	r1, [r3, #0]
 8004cc6:	685b      	ldreq	r3, [r3, #4]
 8004cc8:	1809      	addeq	r1, r1, r0
 8004cca:	6021      	streq	r1, [r4, #0]
 8004ccc:	e7ed      	b.n	8004caa <_free_r+0x1e>
 8004cce:	461a      	mov	r2, r3
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	b10b      	cbz	r3, 8004cd8 <_free_r+0x4c>
 8004cd4:	42a3      	cmp	r3, r4
 8004cd6:	d9fa      	bls.n	8004cce <_free_r+0x42>
 8004cd8:	6811      	ldr	r1, [r2, #0]
 8004cda:	1850      	adds	r0, r2, r1
 8004cdc:	42a0      	cmp	r0, r4
 8004cde:	d10b      	bne.n	8004cf8 <_free_r+0x6c>
 8004ce0:	6820      	ldr	r0, [r4, #0]
 8004ce2:	4401      	add	r1, r0
 8004ce4:	1850      	adds	r0, r2, r1
 8004ce6:	4283      	cmp	r3, r0
 8004ce8:	6011      	str	r1, [r2, #0]
 8004cea:	d1e0      	bne.n	8004cae <_free_r+0x22>
 8004cec:	6818      	ldr	r0, [r3, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	4408      	add	r0, r1
 8004cf2:	6010      	str	r0, [r2, #0]
 8004cf4:	6053      	str	r3, [r2, #4]
 8004cf6:	e7da      	b.n	8004cae <_free_r+0x22>
 8004cf8:	d902      	bls.n	8004d00 <_free_r+0x74>
 8004cfa:	230c      	movs	r3, #12
 8004cfc:	602b      	str	r3, [r5, #0]
 8004cfe:	e7d6      	b.n	8004cae <_free_r+0x22>
 8004d00:	6820      	ldr	r0, [r4, #0]
 8004d02:	1821      	adds	r1, r4, r0
 8004d04:	428b      	cmp	r3, r1
 8004d06:	bf01      	itttt	eq
 8004d08:	6819      	ldreq	r1, [r3, #0]
 8004d0a:	685b      	ldreq	r3, [r3, #4]
 8004d0c:	1809      	addeq	r1, r1, r0
 8004d0e:	6021      	streq	r1, [r4, #0]
 8004d10:	6063      	str	r3, [r4, #4]
 8004d12:	6054      	str	r4, [r2, #4]
 8004d14:	e7cb      	b.n	8004cae <_free_r+0x22>
 8004d16:	bd38      	pop	{r3, r4, r5, pc}
 8004d18:	20000304 	.word	0x20000304

08004d1c <sbrk_aligned>:
 8004d1c:	b570      	push	{r4, r5, r6, lr}
 8004d1e:	4e0e      	ldr	r6, [pc, #56]	; (8004d58 <sbrk_aligned+0x3c>)
 8004d20:	460c      	mov	r4, r1
 8004d22:	6831      	ldr	r1, [r6, #0]
 8004d24:	4605      	mov	r5, r0
 8004d26:	b911      	cbnz	r1, 8004d2e <sbrk_aligned+0x12>
 8004d28:	f000 fbaa 	bl	8005480 <_sbrk_r>
 8004d2c:	6030      	str	r0, [r6, #0]
 8004d2e:	4621      	mov	r1, r4
 8004d30:	4628      	mov	r0, r5
 8004d32:	f000 fba5 	bl	8005480 <_sbrk_r>
 8004d36:	1c43      	adds	r3, r0, #1
 8004d38:	d00a      	beq.n	8004d50 <sbrk_aligned+0x34>
 8004d3a:	1cc4      	adds	r4, r0, #3
 8004d3c:	f024 0403 	bic.w	r4, r4, #3
 8004d40:	42a0      	cmp	r0, r4
 8004d42:	d007      	beq.n	8004d54 <sbrk_aligned+0x38>
 8004d44:	1a21      	subs	r1, r4, r0
 8004d46:	4628      	mov	r0, r5
 8004d48:	f000 fb9a 	bl	8005480 <_sbrk_r>
 8004d4c:	3001      	adds	r0, #1
 8004d4e:	d101      	bne.n	8004d54 <sbrk_aligned+0x38>
 8004d50:	f04f 34ff 	mov.w	r4, #4294967295
 8004d54:	4620      	mov	r0, r4
 8004d56:	bd70      	pop	{r4, r5, r6, pc}
 8004d58:	20000308 	.word	0x20000308

08004d5c <_malloc_r>:
 8004d5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d60:	1ccd      	adds	r5, r1, #3
 8004d62:	f025 0503 	bic.w	r5, r5, #3
 8004d66:	3508      	adds	r5, #8
 8004d68:	2d0c      	cmp	r5, #12
 8004d6a:	bf38      	it	cc
 8004d6c:	250c      	movcc	r5, #12
 8004d6e:	2d00      	cmp	r5, #0
 8004d70:	4607      	mov	r7, r0
 8004d72:	db01      	blt.n	8004d78 <_malloc_r+0x1c>
 8004d74:	42a9      	cmp	r1, r5
 8004d76:	d905      	bls.n	8004d84 <_malloc_r+0x28>
 8004d78:	230c      	movs	r3, #12
 8004d7a:	2600      	movs	r6, #0
 8004d7c:	603b      	str	r3, [r7, #0]
 8004d7e:	4630      	mov	r0, r6
 8004d80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d84:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004e58 <_malloc_r+0xfc>
 8004d88:	f000 f868 	bl	8004e5c <__malloc_lock>
 8004d8c:	f8d8 3000 	ldr.w	r3, [r8]
 8004d90:	461c      	mov	r4, r3
 8004d92:	bb5c      	cbnz	r4, 8004dec <_malloc_r+0x90>
 8004d94:	4629      	mov	r1, r5
 8004d96:	4638      	mov	r0, r7
 8004d98:	f7ff ffc0 	bl	8004d1c <sbrk_aligned>
 8004d9c:	1c43      	adds	r3, r0, #1
 8004d9e:	4604      	mov	r4, r0
 8004da0:	d155      	bne.n	8004e4e <_malloc_r+0xf2>
 8004da2:	f8d8 4000 	ldr.w	r4, [r8]
 8004da6:	4626      	mov	r6, r4
 8004da8:	2e00      	cmp	r6, #0
 8004daa:	d145      	bne.n	8004e38 <_malloc_r+0xdc>
 8004dac:	2c00      	cmp	r4, #0
 8004dae:	d048      	beq.n	8004e42 <_malloc_r+0xe6>
 8004db0:	6823      	ldr	r3, [r4, #0]
 8004db2:	4631      	mov	r1, r6
 8004db4:	4638      	mov	r0, r7
 8004db6:	eb04 0903 	add.w	r9, r4, r3
 8004dba:	f000 fb61 	bl	8005480 <_sbrk_r>
 8004dbe:	4581      	cmp	r9, r0
 8004dc0:	d13f      	bne.n	8004e42 <_malloc_r+0xe6>
 8004dc2:	6821      	ldr	r1, [r4, #0]
 8004dc4:	4638      	mov	r0, r7
 8004dc6:	1a6d      	subs	r5, r5, r1
 8004dc8:	4629      	mov	r1, r5
 8004dca:	f7ff ffa7 	bl	8004d1c <sbrk_aligned>
 8004dce:	3001      	adds	r0, #1
 8004dd0:	d037      	beq.n	8004e42 <_malloc_r+0xe6>
 8004dd2:	6823      	ldr	r3, [r4, #0]
 8004dd4:	442b      	add	r3, r5
 8004dd6:	6023      	str	r3, [r4, #0]
 8004dd8:	f8d8 3000 	ldr.w	r3, [r8]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d038      	beq.n	8004e52 <_malloc_r+0xf6>
 8004de0:	685a      	ldr	r2, [r3, #4]
 8004de2:	42a2      	cmp	r2, r4
 8004de4:	d12b      	bne.n	8004e3e <_malloc_r+0xe2>
 8004de6:	2200      	movs	r2, #0
 8004de8:	605a      	str	r2, [r3, #4]
 8004dea:	e00f      	b.n	8004e0c <_malloc_r+0xb0>
 8004dec:	6822      	ldr	r2, [r4, #0]
 8004dee:	1b52      	subs	r2, r2, r5
 8004df0:	d41f      	bmi.n	8004e32 <_malloc_r+0xd6>
 8004df2:	2a0b      	cmp	r2, #11
 8004df4:	d917      	bls.n	8004e26 <_malloc_r+0xca>
 8004df6:	1961      	adds	r1, r4, r5
 8004df8:	42a3      	cmp	r3, r4
 8004dfa:	6025      	str	r5, [r4, #0]
 8004dfc:	bf18      	it	ne
 8004dfe:	6059      	strne	r1, [r3, #4]
 8004e00:	6863      	ldr	r3, [r4, #4]
 8004e02:	bf08      	it	eq
 8004e04:	f8c8 1000 	streq.w	r1, [r8]
 8004e08:	5162      	str	r2, [r4, r5]
 8004e0a:	604b      	str	r3, [r1, #4]
 8004e0c:	4638      	mov	r0, r7
 8004e0e:	f104 060b 	add.w	r6, r4, #11
 8004e12:	f000 f829 	bl	8004e68 <__malloc_unlock>
 8004e16:	f026 0607 	bic.w	r6, r6, #7
 8004e1a:	1d23      	adds	r3, r4, #4
 8004e1c:	1af2      	subs	r2, r6, r3
 8004e1e:	d0ae      	beq.n	8004d7e <_malloc_r+0x22>
 8004e20:	1b9b      	subs	r3, r3, r6
 8004e22:	50a3      	str	r3, [r4, r2]
 8004e24:	e7ab      	b.n	8004d7e <_malloc_r+0x22>
 8004e26:	42a3      	cmp	r3, r4
 8004e28:	6862      	ldr	r2, [r4, #4]
 8004e2a:	d1dd      	bne.n	8004de8 <_malloc_r+0x8c>
 8004e2c:	f8c8 2000 	str.w	r2, [r8]
 8004e30:	e7ec      	b.n	8004e0c <_malloc_r+0xb0>
 8004e32:	4623      	mov	r3, r4
 8004e34:	6864      	ldr	r4, [r4, #4]
 8004e36:	e7ac      	b.n	8004d92 <_malloc_r+0x36>
 8004e38:	4634      	mov	r4, r6
 8004e3a:	6876      	ldr	r6, [r6, #4]
 8004e3c:	e7b4      	b.n	8004da8 <_malloc_r+0x4c>
 8004e3e:	4613      	mov	r3, r2
 8004e40:	e7cc      	b.n	8004ddc <_malloc_r+0x80>
 8004e42:	230c      	movs	r3, #12
 8004e44:	4638      	mov	r0, r7
 8004e46:	603b      	str	r3, [r7, #0]
 8004e48:	f000 f80e 	bl	8004e68 <__malloc_unlock>
 8004e4c:	e797      	b.n	8004d7e <_malloc_r+0x22>
 8004e4e:	6025      	str	r5, [r4, #0]
 8004e50:	e7dc      	b.n	8004e0c <_malloc_r+0xb0>
 8004e52:	605b      	str	r3, [r3, #4]
 8004e54:	deff      	udf	#255	; 0xff
 8004e56:	bf00      	nop
 8004e58:	20000304 	.word	0x20000304

08004e5c <__malloc_lock>:
 8004e5c:	4801      	ldr	r0, [pc, #4]	; (8004e64 <__malloc_lock+0x8>)
 8004e5e:	f7ff bf13 	b.w	8004c88 <__retarget_lock_acquire_recursive>
 8004e62:	bf00      	nop
 8004e64:	20000300 	.word	0x20000300

08004e68 <__malloc_unlock>:
 8004e68:	4801      	ldr	r0, [pc, #4]	; (8004e70 <__malloc_unlock+0x8>)
 8004e6a:	f7ff bf0e 	b.w	8004c8a <__retarget_lock_release_recursive>
 8004e6e:	bf00      	nop
 8004e70:	20000300 	.word	0x20000300

08004e74 <__ssputs_r>:
 8004e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e78:	461f      	mov	r7, r3
 8004e7a:	688e      	ldr	r6, [r1, #8]
 8004e7c:	4682      	mov	sl, r0
 8004e7e:	42be      	cmp	r6, r7
 8004e80:	460c      	mov	r4, r1
 8004e82:	4690      	mov	r8, r2
 8004e84:	680b      	ldr	r3, [r1, #0]
 8004e86:	d82c      	bhi.n	8004ee2 <__ssputs_r+0x6e>
 8004e88:	898a      	ldrh	r2, [r1, #12]
 8004e8a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004e8e:	d026      	beq.n	8004ede <__ssputs_r+0x6a>
 8004e90:	6965      	ldr	r5, [r4, #20]
 8004e92:	6909      	ldr	r1, [r1, #16]
 8004e94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e98:	eba3 0901 	sub.w	r9, r3, r1
 8004e9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ea0:	1c7b      	adds	r3, r7, #1
 8004ea2:	444b      	add	r3, r9
 8004ea4:	106d      	asrs	r5, r5, #1
 8004ea6:	429d      	cmp	r5, r3
 8004ea8:	bf38      	it	cc
 8004eaa:	461d      	movcc	r5, r3
 8004eac:	0553      	lsls	r3, r2, #21
 8004eae:	d527      	bpl.n	8004f00 <__ssputs_r+0x8c>
 8004eb0:	4629      	mov	r1, r5
 8004eb2:	f7ff ff53 	bl	8004d5c <_malloc_r>
 8004eb6:	4606      	mov	r6, r0
 8004eb8:	b360      	cbz	r0, 8004f14 <__ssputs_r+0xa0>
 8004eba:	464a      	mov	r2, r9
 8004ebc:	6921      	ldr	r1, [r4, #16]
 8004ebe:	f000 fafd 	bl	80054bc <memcpy>
 8004ec2:	89a3      	ldrh	r3, [r4, #12]
 8004ec4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004ec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ecc:	81a3      	strh	r3, [r4, #12]
 8004ece:	6126      	str	r6, [r4, #16]
 8004ed0:	444e      	add	r6, r9
 8004ed2:	6026      	str	r6, [r4, #0]
 8004ed4:	463e      	mov	r6, r7
 8004ed6:	6165      	str	r5, [r4, #20]
 8004ed8:	eba5 0509 	sub.w	r5, r5, r9
 8004edc:	60a5      	str	r5, [r4, #8]
 8004ede:	42be      	cmp	r6, r7
 8004ee0:	d900      	bls.n	8004ee4 <__ssputs_r+0x70>
 8004ee2:	463e      	mov	r6, r7
 8004ee4:	4632      	mov	r2, r6
 8004ee6:	4641      	mov	r1, r8
 8004ee8:	6820      	ldr	r0, [r4, #0]
 8004eea:	f000 faaf 	bl	800544c <memmove>
 8004eee:	2000      	movs	r0, #0
 8004ef0:	68a3      	ldr	r3, [r4, #8]
 8004ef2:	1b9b      	subs	r3, r3, r6
 8004ef4:	60a3      	str	r3, [r4, #8]
 8004ef6:	6823      	ldr	r3, [r4, #0]
 8004ef8:	4433      	add	r3, r6
 8004efa:	6023      	str	r3, [r4, #0]
 8004efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f00:	462a      	mov	r2, r5
 8004f02:	f000 fae9 	bl	80054d8 <_realloc_r>
 8004f06:	4606      	mov	r6, r0
 8004f08:	2800      	cmp	r0, #0
 8004f0a:	d1e0      	bne.n	8004ece <__ssputs_r+0x5a>
 8004f0c:	4650      	mov	r0, sl
 8004f0e:	6921      	ldr	r1, [r4, #16]
 8004f10:	f7ff febc 	bl	8004c8c <_free_r>
 8004f14:	230c      	movs	r3, #12
 8004f16:	f8ca 3000 	str.w	r3, [sl]
 8004f1a:	89a3      	ldrh	r3, [r4, #12]
 8004f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f24:	81a3      	strh	r3, [r4, #12]
 8004f26:	e7e9      	b.n	8004efc <__ssputs_r+0x88>

08004f28 <_svfiprintf_r>:
 8004f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f2c:	4698      	mov	r8, r3
 8004f2e:	898b      	ldrh	r3, [r1, #12]
 8004f30:	4607      	mov	r7, r0
 8004f32:	061b      	lsls	r3, r3, #24
 8004f34:	460d      	mov	r5, r1
 8004f36:	4614      	mov	r4, r2
 8004f38:	b09d      	sub	sp, #116	; 0x74
 8004f3a:	d50e      	bpl.n	8004f5a <_svfiprintf_r+0x32>
 8004f3c:	690b      	ldr	r3, [r1, #16]
 8004f3e:	b963      	cbnz	r3, 8004f5a <_svfiprintf_r+0x32>
 8004f40:	2140      	movs	r1, #64	; 0x40
 8004f42:	f7ff ff0b 	bl	8004d5c <_malloc_r>
 8004f46:	6028      	str	r0, [r5, #0]
 8004f48:	6128      	str	r0, [r5, #16]
 8004f4a:	b920      	cbnz	r0, 8004f56 <_svfiprintf_r+0x2e>
 8004f4c:	230c      	movs	r3, #12
 8004f4e:	603b      	str	r3, [r7, #0]
 8004f50:	f04f 30ff 	mov.w	r0, #4294967295
 8004f54:	e0d0      	b.n	80050f8 <_svfiprintf_r+0x1d0>
 8004f56:	2340      	movs	r3, #64	; 0x40
 8004f58:	616b      	str	r3, [r5, #20]
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	9309      	str	r3, [sp, #36]	; 0x24
 8004f5e:	2320      	movs	r3, #32
 8004f60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f64:	2330      	movs	r3, #48	; 0x30
 8004f66:	f04f 0901 	mov.w	r9, #1
 8004f6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f6e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8005110 <_svfiprintf_r+0x1e8>
 8004f72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f76:	4623      	mov	r3, r4
 8004f78:	469a      	mov	sl, r3
 8004f7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f7e:	b10a      	cbz	r2, 8004f84 <_svfiprintf_r+0x5c>
 8004f80:	2a25      	cmp	r2, #37	; 0x25
 8004f82:	d1f9      	bne.n	8004f78 <_svfiprintf_r+0x50>
 8004f84:	ebba 0b04 	subs.w	fp, sl, r4
 8004f88:	d00b      	beq.n	8004fa2 <_svfiprintf_r+0x7a>
 8004f8a:	465b      	mov	r3, fp
 8004f8c:	4622      	mov	r2, r4
 8004f8e:	4629      	mov	r1, r5
 8004f90:	4638      	mov	r0, r7
 8004f92:	f7ff ff6f 	bl	8004e74 <__ssputs_r>
 8004f96:	3001      	adds	r0, #1
 8004f98:	f000 80a9 	beq.w	80050ee <_svfiprintf_r+0x1c6>
 8004f9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f9e:	445a      	add	r2, fp
 8004fa0:	9209      	str	r2, [sp, #36]	; 0x24
 8004fa2:	f89a 3000 	ldrb.w	r3, [sl]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	f000 80a1 	beq.w	80050ee <_svfiprintf_r+0x1c6>
 8004fac:	2300      	movs	r3, #0
 8004fae:	f04f 32ff 	mov.w	r2, #4294967295
 8004fb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fb6:	f10a 0a01 	add.w	sl, sl, #1
 8004fba:	9304      	str	r3, [sp, #16]
 8004fbc:	9307      	str	r3, [sp, #28]
 8004fbe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004fc2:	931a      	str	r3, [sp, #104]	; 0x68
 8004fc4:	4654      	mov	r4, sl
 8004fc6:	2205      	movs	r2, #5
 8004fc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fcc:	4850      	ldr	r0, [pc, #320]	; (8005110 <_svfiprintf_r+0x1e8>)
 8004fce:	f000 fa67 	bl	80054a0 <memchr>
 8004fd2:	9a04      	ldr	r2, [sp, #16]
 8004fd4:	b9d8      	cbnz	r0, 800500e <_svfiprintf_r+0xe6>
 8004fd6:	06d0      	lsls	r0, r2, #27
 8004fd8:	bf44      	itt	mi
 8004fda:	2320      	movmi	r3, #32
 8004fdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fe0:	0711      	lsls	r1, r2, #28
 8004fe2:	bf44      	itt	mi
 8004fe4:	232b      	movmi	r3, #43	; 0x2b
 8004fe6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fea:	f89a 3000 	ldrb.w	r3, [sl]
 8004fee:	2b2a      	cmp	r3, #42	; 0x2a
 8004ff0:	d015      	beq.n	800501e <_svfiprintf_r+0xf6>
 8004ff2:	4654      	mov	r4, sl
 8004ff4:	2000      	movs	r0, #0
 8004ff6:	f04f 0c0a 	mov.w	ip, #10
 8004ffa:	9a07      	ldr	r2, [sp, #28]
 8004ffc:	4621      	mov	r1, r4
 8004ffe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005002:	3b30      	subs	r3, #48	; 0x30
 8005004:	2b09      	cmp	r3, #9
 8005006:	d94d      	bls.n	80050a4 <_svfiprintf_r+0x17c>
 8005008:	b1b0      	cbz	r0, 8005038 <_svfiprintf_r+0x110>
 800500a:	9207      	str	r2, [sp, #28]
 800500c:	e014      	b.n	8005038 <_svfiprintf_r+0x110>
 800500e:	eba0 0308 	sub.w	r3, r0, r8
 8005012:	fa09 f303 	lsl.w	r3, r9, r3
 8005016:	4313      	orrs	r3, r2
 8005018:	46a2      	mov	sl, r4
 800501a:	9304      	str	r3, [sp, #16]
 800501c:	e7d2      	b.n	8004fc4 <_svfiprintf_r+0x9c>
 800501e:	9b03      	ldr	r3, [sp, #12]
 8005020:	1d19      	adds	r1, r3, #4
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	9103      	str	r1, [sp, #12]
 8005026:	2b00      	cmp	r3, #0
 8005028:	bfbb      	ittet	lt
 800502a:	425b      	neglt	r3, r3
 800502c:	f042 0202 	orrlt.w	r2, r2, #2
 8005030:	9307      	strge	r3, [sp, #28]
 8005032:	9307      	strlt	r3, [sp, #28]
 8005034:	bfb8      	it	lt
 8005036:	9204      	strlt	r2, [sp, #16]
 8005038:	7823      	ldrb	r3, [r4, #0]
 800503a:	2b2e      	cmp	r3, #46	; 0x2e
 800503c:	d10c      	bne.n	8005058 <_svfiprintf_r+0x130>
 800503e:	7863      	ldrb	r3, [r4, #1]
 8005040:	2b2a      	cmp	r3, #42	; 0x2a
 8005042:	d134      	bne.n	80050ae <_svfiprintf_r+0x186>
 8005044:	9b03      	ldr	r3, [sp, #12]
 8005046:	3402      	adds	r4, #2
 8005048:	1d1a      	adds	r2, r3, #4
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	9203      	str	r2, [sp, #12]
 800504e:	2b00      	cmp	r3, #0
 8005050:	bfb8      	it	lt
 8005052:	f04f 33ff 	movlt.w	r3, #4294967295
 8005056:	9305      	str	r3, [sp, #20]
 8005058:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8005114 <_svfiprintf_r+0x1ec>
 800505c:	2203      	movs	r2, #3
 800505e:	4650      	mov	r0, sl
 8005060:	7821      	ldrb	r1, [r4, #0]
 8005062:	f000 fa1d 	bl	80054a0 <memchr>
 8005066:	b138      	cbz	r0, 8005078 <_svfiprintf_r+0x150>
 8005068:	2240      	movs	r2, #64	; 0x40
 800506a:	9b04      	ldr	r3, [sp, #16]
 800506c:	eba0 000a 	sub.w	r0, r0, sl
 8005070:	4082      	lsls	r2, r0
 8005072:	4313      	orrs	r3, r2
 8005074:	3401      	adds	r4, #1
 8005076:	9304      	str	r3, [sp, #16]
 8005078:	f814 1b01 	ldrb.w	r1, [r4], #1
 800507c:	2206      	movs	r2, #6
 800507e:	4826      	ldr	r0, [pc, #152]	; (8005118 <_svfiprintf_r+0x1f0>)
 8005080:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005084:	f000 fa0c 	bl	80054a0 <memchr>
 8005088:	2800      	cmp	r0, #0
 800508a:	d038      	beq.n	80050fe <_svfiprintf_r+0x1d6>
 800508c:	4b23      	ldr	r3, [pc, #140]	; (800511c <_svfiprintf_r+0x1f4>)
 800508e:	bb1b      	cbnz	r3, 80050d8 <_svfiprintf_r+0x1b0>
 8005090:	9b03      	ldr	r3, [sp, #12]
 8005092:	3307      	adds	r3, #7
 8005094:	f023 0307 	bic.w	r3, r3, #7
 8005098:	3308      	adds	r3, #8
 800509a:	9303      	str	r3, [sp, #12]
 800509c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800509e:	4433      	add	r3, r6
 80050a0:	9309      	str	r3, [sp, #36]	; 0x24
 80050a2:	e768      	b.n	8004f76 <_svfiprintf_r+0x4e>
 80050a4:	460c      	mov	r4, r1
 80050a6:	2001      	movs	r0, #1
 80050a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80050ac:	e7a6      	b.n	8004ffc <_svfiprintf_r+0xd4>
 80050ae:	2300      	movs	r3, #0
 80050b0:	f04f 0c0a 	mov.w	ip, #10
 80050b4:	4619      	mov	r1, r3
 80050b6:	3401      	adds	r4, #1
 80050b8:	9305      	str	r3, [sp, #20]
 80050ba:	4620      	mov	r0, r4
 80050bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050c0:	3a30      	subs	r2, #48	; 0x30
 80050c2:	2a09      	cmp	r2, #9
 80050c4:	d903      	bls.n	80050ce <_svfiprintf_r+0x1a6>
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d0c6      	beq.n	8005058 <_svfiprintf_r+0x130>
 80050ca:	9105      	str	r1, [sp, #20]
 80050cc:	e7c4      	b.n	8005058 <_svfiprintf_r+0x130>
 80050ce:	4604      	mov	r4, r0
 80050d0:	2301      	movs	r3, #1
 80050d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80050d6:	e7f0      	b.n	80050ba <_svfiprintf_r+0x192>
 80050d8:	ab03      	add	r3, sp, #12
 80050da:	9300      	str	r3, [sp, #0]
 80050dc:	462a      	mov	r2, r5
 80050de:	4638      	mov	r0, r7
 80050e0:	4b0f      	ldr	r3, [pc, #60]	; (8005120 <_svfiprintf_r+0x1f8>)
 80050e2:	a904      	add	r1, sp, #16
 80050e4:	f3af 8000 	nop.w
 80050e8:	1c42      	adds	r2, r0, #1
 80050ea:	4606      	mov	r6, r0
 80050ec:	d1d6      	bne.n	800509c <_svfiprintf_r+0x174>
 80050ee:	89ab      	ldrh	r3, [r5, #12]
 80050f0:	065b      	lsls	r3, r3, #25
 80050f2:	f53f af2d 	bmi.w	8004f50 <_svfiprintf_r+0x28>
 80050f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050f8:	b01d      	add	sp, #116	; 0x74
 80050fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050fe:	ab03      	add	r3, sp, #12
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	462a      	mov	r2, r5
 8005104:	4638      	mov	r0, r7
 8005106:	4b06      	ldr	r3, [pc, #24]	; (8005120 <_svfiprintf_r+0x1f8>)
 8005108:	a904      	add	r1, sp, #16
 800510a:	f000 f87d 	bl	8005208 <_printf_i>
 800510e:	e7eb      	b.n	80050e8 <_svfiprintf_r+0x1c0>
 8005110:	0800586f 	.word	0x0800586f
 8005114:	08005875 	.word	0x08005875
 8005118:	08005879 	.word	0x08005879
 800511c:	00000000 	.word	0x00000000
 8005120:	08004e75 	.word	0x08004e75

08005124 <_printf_common>:
 8005124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005128:	4616      	mov	r6, r2
 800512a:	4699      	mov	r9, r3
 800512c:	688a      	ldr	r2, [r1, #8]
 800512e:	690b      	ldr	r3, [r1, #16]
 8005130:	4607      	mov	r7, r0
 8005132:	4293      	cmp	r3, r2
 8005134:	bfb8      	it	lt
 8005136:	4613      	movlt	r3, r2
 8005138:	6033      	str	r3, [r6, #0]
 800513a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800513e:	460c      	mov	r4, r1
 8005140:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005144:	b10a      	cbz	r2, 800514a <_printf_common+0x26>
 8005146:	3301      	adds	r3, #1
 8005148:	6033      	str	r3, [r6, #0]
 800514a:	6823      	ldr	r3, [r4, #0]
 800514c:	0699      	lsls	r1, r3, #26
 800514e:	bf42      	ittt	mi
 8005150:	6833      	ldrmi	r3, [r6, #0]
 8005152:	3302      	addmi	r3, #2
 8005154:	6033      	strmi	r3, [r6, #0]
 8005156:	6825      	ldr	r5, [r4, #0]
 8005158:	f015 0506 	ands.w	r5, r5, #6
 800515c:	d106      	bne.n	800516c <_printf_common+0x48>
 800515e:	f104 0a19 	add.w	sl, r4, #25
 8005162:	68e3      	ldr	r3, [r4, #12]
 8005164:	6832      	ldr	r2, [r6, #0]
 8005166:	1a9b      	subs	r3, r3, r2
 8005168:	42ab      	cmp	r3, r5
 800516a:	dc2b      	bgt.n	80051c4 <_printf_common+0xa0>
 800516c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005170:	1e13      	subs	r3, r2, #0
 8005172:	6822      	ldr	r2, [r4, #0]
 8005174:	bf18      	it	ne
 8005176:	2301      	movne	r3, #1
 8005178:	0692      	lsls	r2, r2, #26
 800517a:	d430      	bmi.n	80051de <_printf_common+0xba>
 800517c:	4649      	mov	r1, r9
 800517e:	4638      	mov	r0, r7
 8005180:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005184:	47c0      	blx	r8
 8005186:	3001      	adds	r0, #1
 8005188:	d023      	beq.n	80051d2 <_printf_common+0xae>
 800518a:	6823      	ldr	r3, [r4, #0]
 800518c:	6922      	ldr	r2, [r4, #16]
 800518e:	f003 0306 	and.w	r3, r3, #6
 8005192:	2b04      	cmp	r3, #4
 8005194:	bf14      	ite	ne
 8005196:	2500      	movne	r5, #0
 8005198:	6833      	ldreq	r3, [r6, #0]
 800519a:	f04f 0600 	mov.w	r6, #0
 800519e:	bf08      	it	eq
 80051a0:	68e5      	ldreq	r5, [r4, #12]
 80051a2:	f104 041a 	add.w	r4, r4, #26
 80051a6:	bf08      	it	eq
 80051a8:	1aed      	subeq	r5, r5, r3
 80051aa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80051ae:	bf08      	it	eq
 80051b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051b4:	4293      	cmp	r3, r2
 80051b6:	bfc4      	itt	gt
 80051b8:	1a9b      	subgt	r3, r3, r2
 80051ba:	18ed      	addgt	r5, r5, r3
 80051bc:	42b5      	cmp	r5, r6
 80051be:	d11a      	bne.n	80051f6 <_printf_common+0xd2>
 80051c0:	2000      	movs	r0, #0
 80051c2:	e008      	b.n	80051d6 <_printf_common+0xb2>
 80051c4:	2301      	movs	r3, #1
 80051c6:	4652      	mov	r2, sl
 80051c8:	4649      	mov	r1, r9
 80051ca:	4638      	mov	r0, r7
 80051cc:	47c0      	blx	r8
 80051ce:	3001      	adds	r0, #1
 80051d0:	d103      	bne.n	80051da <_printf_common+0xb6>
 80051d2:	f04f 30ff 	mov.w	r0, #4294967295
 80051d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051da:	3501      	adds	r5, #1
 80051dc:	e7c1      	b.n	8005162 <_printf_common+0x3e>
 80051de:	2030      	movs	r0, #48	; 0x30
 80051e0:	18e1      	adds	r1, r4, r3
 80051e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051e6:	1c5a      	adds	r2, r3, #1
 80051e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051ec:	4422      	add	r2, r4
 80051ee:	3302      	adds	r3, #2
 80051f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051f4:	e7c2      	b.n	800517c <_printf_common+0x58>
 80051f6:	2301      	movs	r3, #1
 80051f8:	4622      	mov	r2, r4
 80051fa:	4649      	mov	r1, r9
 80051fc:	4638      	mov	r0, r7
 80051fe:	47c0      	blx	r8
 8005200:	3001      	adds	r0, #1
 8005202:	d0e6      	beq.n	80051d2 <_printf_common+0xae>
 8005204:	3601      	adds	r6, #1
 8005206:	e7d9      	b.n	80051bc <_printf_common+0x98>

08005208 <_printf_i>:
 8005208:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800520c:	7e0f      	ldrb	r7, [r1, #24]
 800520e:	4691      	mov	r9, r2
 8005210:	2f78      	cmp	r7, #120	; 0x78
 8005212:	4680      	mov	r8, r0
 8005214:	460c      	mov	r4, r1
 8005216:	469a      	mov	sl, r3
 8005218:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800521a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800521e:	d807      	bhi.n	8005230 <_printf_i+0x28>
 8005220:	2f62      	cmp	r7, #98	; 0x62
 8005222:	d80a      	bhi.n	800523a <_printf_i+0x32>
 8005224:	2f00      	cmp	r7, #0
 8005226:	f000 80d5 	beq.w	80053d4 <_printf_i+0x1cc>
 800522a:	2f58      	cmp	r7, #88	; 0x58
 800522c:	f000 80c1 	beq.w	80053b2 <_printf_i+0x1aa>
 8005230:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005234:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005238:	e03a      	b.n	80052b0 <_printf_i+0xa8>
 800523a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800523e:	2b15      	cmp	r3, #21
 8005240:	d8f6      	bhi.n	8005230 <_printf_i+0x28>
 8005242:	a101      	add	r1, pc, #4	; (adr r1, 8005248 <_printf_i+0x40>)
 8005244:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005248:	080052a1 	.word	0x080052a1
 800524c:	080052b5 	.word	0x080052b5
 8005250:	08005231 	.word	0x08005231
 8005254:	08005231 	.word	0x08005231
 8005258:	08005231 	.word	0x08005231
 800525c:	08005231 	.word	0x08005231
 8005260:	080052b5 	.word	0x080052b5
 8005264:	08005231 	.word	0x08005231
 8005268:	08005231 	.word	0x08005231
 800526c:	08005231 	.word	0x08005231
 8005270:	08005231 	.word	0x08005231
 8005274:	080053bb 	.word	0x080053bb
 8005278:	080052e1 	.word	0x080052e1
 800527c:	08005375 	.word	0x08005375
 8005280:	08005231 	.word	0x08005231
 8005284:	08005231 	.word	0x08005231
 8005288:	080053dd 	.word	0x080053dd
 800528c:	08005231 	.word	0x08005231
 8005290:	080052e1 	.word	0x080052e1
 8005294:	08005231 	.word	0x08005231
 8005298:	08005231 	.word	0x08005231
 800529c:	0800537d 	.word	0x0800537d
 80052a0:	682b      	ldr	r3, [r5, #0]
 80052a2:	1d1a      	adds	r2, r3, #4
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	602a      	str	r2, [r5, #0]
 80052a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052b0:	2301      	movs	r3, #1
 80052b2:	e0a0      	b.n	80053f6 <_printf_i+0x1ee>
 80052b4:	6820      	ldr	r0, [r4, #0]
 80052b6:	682b      	ldr	r3, [r5, #0]
 80052b8:	0607      	lsls	r7, r0, #24
 80052ba:	f103 0104 	add.w	r1, r3, #4
 80052be:	6029      	str	r1, [r5, #0]
 80052c0:	d501      	bpl.n	80052c6 <_printf_i+0xbe>
 80052c2:	681e      	ldr	r6, [r3, #0]
 80052c4:	e003      	b.n	80052ce <_printf_i+0xc6>
 80052c6:	0646      	lsls	r6, r0, #25
 80052c8:	d5fb      	bpl.n	80052c2 <_printf_i+0xba>
 80052ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 80052ce:	2e00      	cmp	r6, #0
 80052d0:	da03      	bge.n	80052da <_printf_i+0xd2>
 80052d2:	232d      	movs	r3, #45	; 0x2d
 80052d4:	4276      	negs	r6, r6
 80052d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052da:	230a      	movs	r3, #10
 80052dc:	4859      	ldr	r0, [pc, #356]	; (8005444 <_printf_i+0x23c>)
 80052de:	e012      	b.n	8005306 <_printf_i+0xfe>
 80052e0:	682b      	ldr	r3, [r5, #0]
 80052e2:	6820      	ldr	r0, [r4, #0]
 80052e4:	1d19      	adds	r1, r3, #4
 80052e6:	6029      	str	r1, [r5, #0]
 80052e8:	0605      	lsls	r5, r0, #24
 80052ea:	d501      	bpl.n	80052f0 <_printf_i+0xe8>
 80052ec:	681e      	ldr	r6, [r3, #0]
 80052ee:	e002      	b.n	80052f6 <_printf_i+0xee>
 80052f0:	0641      	lsls	r1, r0, #25
 80052f2:	d5fb      	bpl.n	80052ec <_printf_i+0xe4>
 80052f4:	881e      	ldrh	r6, [r3, #0]
 80052f6:	2f6f      	cmp	r7, #111	; 0x6f
 80052f8:	bf0c      	ite	eq
 80052fa:	2308      	moveq	r3, #8
 80052fc:	230a      	movne	r3, #10
 80052fe:	4851      	ldr	r0, [pc, #324]	; (8005444 <_printf_i+0x23c>)
 8005300:	2100      	movs	r1, #0
 8005302:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005306:	6865      	ldr	r5, [r4, #4]
 8005308:	2d00      	cmp	r5, #0
 800530a:	bfa8      	it	ge
 800530c:	6821      	ldrge	r1, [r4, #0]
 800530e:	60a5      	str	r5, [r4, #8]
 8005310:	bfa4      	itt	ge
 8005312:	f021 0104 	bicge.w	r1, r1, #4
 8005316:	6021      	strge	r1, [r4, #0]
 8005318:	b90e      	cbnz	r6, 800531e <_printf_i+0x116>
 800531a:	2d00      	cmp	r5, #0
 800531c:	d04b      	beq.n	80053b6 <_printf_i+0x1ae>
 800531e:	4615      	mov	r5, r2
 8005320:	fbb6 f1f3 	udiv	r1, r6, r3
 8005324:	fb03 6711 	mls	r7, r3, r1, r6
 8005328:	5dc7      	ldrb	r7, [r0, r7]
 800532a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800532e:	4637      	mov	r7, r6
 8005330:	42bb      	cmp	r3, r7
 8005332:	460e      	mov	r6, r1
 8005334:	d9f4      	bls.n	8005320 <_printf_i+0x118>
 8005336:	2b08      	cmp	r3, #8
 8005338:	d10b      	bne.n	8005352 <_printf_i+0x14a>
 800533a:	6823      	ldr	r3, [r4, #0]
 800533c:	07de      	lsls	r6, r3, #31
 800533e:	d508      	bpl.n	8005352 <_printf_i+0x14a>
 8005340:	6923      	ldr	r3, [r4, #16]
 8005342:	6861      	ldr	r1, [r4, #4]
 8005344:	4299      	cmp	r1, r3
 8005346:	bfde      	ittt	le
 8005348:	2330      	movle	r3, #48	; 0x30
 800534a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800534e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005352:	1b52      	subs	r2, r2, r5
 8005354:	6122      	str	r2, [r4, #16]
 8005356:	464b      	mov	r3, r9
 8005358:	4621      	mov	r1, r4
 800535a:	4640      	mov	r0, r8
 800535c:	f8cd a000 	str.w	sl, [sp]
 8005360:	aa03      	add	r2, sp, #12
 8005362:	f7ff fedf 	bl	8005124 <_printf_common>
 8005366:	3001      	adds	r0, #1
 8005368:	d14a      	bne.n	8005400 <_printf_i+0x1f8>
 800536a:	f04f 30ff 	mov.w	r0, #4294967295
 800536e:	b004      	add	sp, #16
 8005370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005374:	6823      	ldr	r3, [r4, #0]
 8005376:	f043 0320 	orr.w	r3, r3, #32
 800537a:	6023      	str	r3, [r4, #0]
 800537c:	2778      	movs	r7, #120	; 0x78
 800537e:	4832      	ldr	r0, [pc, #200]	; (8005448 <_printf_i+0x240>)
 8005380:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005384:	6823      	ldr	r3, [r4, #0]
 8005386:	6829      	ldr	r1, [r5, #0]
 8005388:	061f      	lsls	r7, r3, #24
 800538a:	f851 6b04 	ldr.w	r6, [r1], #4
 800538e:	d402      	bmi.n	8005396 <_printf_i+0x18e>
 8005390:	065f      	lsls	r7, r3, #25
 8005392:	bf48      	it	mi
 8005394:	b2b6      	uxthmi	r6, r6
 8005396:	07df      	lsls	r7, r3, #31
 8005398:	bf48      	it	mi
 800539a:	f043 0320 	orrmi.w	r3, r3, #32
 800539e:	6029      	str	r1, [r5, #0]
 80053a0:	bf48      	it	mi
 80053a2:	6023      	strmi	r3, [r4, #0]
 80053a4:	b91e      	cbnz	r6, 80053ae <_printf_i+0x1a6>
 80053a6:	6823      	ldr	r3, [r4, #0]
 80053a8:	f023 0320 	bic.w	r3, r3, #32
 80053ac:	6023      	str	r3, [r4, #0]
 80053ae:	2310      	movs	r3, #16
 80053b0:	e7a6      	b.n	8005300 <_printf_i+0xf8>
 80053b2:	4824      	ldr	r0, [pc, #144]	; (8005444 <_printf_i+0x23c>)
 80053b4:	e7e4      	b.n	8005380 <_printf_i+0x178>
 80053b6:	4615      	mov	r5, r2
 80053b8:	e7bd      	b.n	8005336 <_printf_i+0x12e>
 80053ba:	682b      	ldr	r3, [r5, #0]
 80053bc:	6826      	ldr	r6, [r4, #0]
 80053be:	1d18      	adds	r0, r3, #4
 80053c0:	6961      	ldr	r1, [r4, #20]
 80053c2:	6028      	str	r0, [r5, #0]
 80053c4:	0635      	lsls	r5, r6, #24
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	d501      	bpl.n	80053ce <_printf_i+0x1c6>
 80053ca:	6019      	str	r1, [r3, #0]
 80053cc:	e002      	b.n	80053d4 <_printf_i+0x1cc>
 80053ce:	0670      	lsls	r0, r6, #25
 80053d0:	d5fb      	bpl.n	80053ca <_printf_i+0x1c2>
 80053d2:	8019      	strh	r1, [r3, #0]
 80053d4:	2300      	movs	r3, #0
 80053d6:	4615      	mov	r5, r2
 80053d8:	6123      	str	r3, [r4, #16]
 80053da:	e7bc      	b.n	8005356 <_printf_i+0x14e>
 80053dc:	682b      	ldr	r3, [r5, #0]
 80053de:	2100      	movs	r1, #0
 80053e0:	1d1a      	adds	r2, r3, #4
 80053e2:	602a      	str	r2, [r5, #0]
 80053e4:	681d      	ldr	r5, [r3, #0]
 80053e6:	6862      	ldr	r2, [r4, #4]
 80053e8:	4628      	mov	r0, r5
 80053ea:	f000 f859 	bl	80054a0 <memchr>
 80053ee:	b108      	cbz	r0, 80053f4 <_printf_i+0x1ec>
 80053f0:	1b40      	subs	r0, r0, r5
 80053f2:	6060      	str	r0, [r4, #4]
 80053f4:	6863      	ldr	r3, [r4, #4]
 80053f6:	6123      	str	r3, [r4, #16]
 80053f8:	2300      	movs	r3, #0
 80053fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053fe:	e7aa      	b.n	8005356 <_printf_i+0x14e>
 8005400:	462a      	mov	r2, r5
 8005402:	4649      	mov	r1, r9
 8005404:	4640      	mov	r0, r8
 8005406:	6923      	ldr	r3, [r4, #16]
 8005408:	47d0      	blx	sl
 800540a:	3001      	adds	r0, #1
 800540c:	d0ad      	beq.n	800536a <_printf_i+0x162>
 800540e:	6823      	ldr	r3, [r4, #0]
 8005410:	079b      	lsls	r3, r3, #30
 8005412:	d413      	bmi.n	800543c <_printf_i+0x234>
 8005414:	68e0      	ldr	r0, [r4, #12]
 8005416:	9b03      	ldr	r3, [sp, #12]
 8005418:	4298      	cmp	r0, r3
 800541a:	bfb8      	it	lt
 800541c:	4618      	movlt	r0, r3
 800541e:	e7a6      	b.n	800536e <_printf_i+0x166>
 8005420:	2301      	movs	r3, #1
 8005422:	4632      	mov	r2, r6
 8005424:	4649      	mov	r1, r9
 8005426:	4640      	mov	r0, r8
 8005428:	47d0      	blx	sl
 800542a:	3001      	adds	r0, #1
 800542c:	d09d      	beq.n	800536a <_printf_i+0x162>
 800542e:	3501      	adds	r5, #1
 8005430:	68e3      	ldr	r3, [r4, #12]
 8005432:	9903      	ldr	r1, [sp, #12]
 8005434:	1a5b      	subs	r3, r3, r1
 8005436:	42ab      	cmp	r3, r5
 8005438:	dcf2      	bgt.n	8005420 <_printf_i+0x218>
 800543a:	e7eb      	b.n	8005414 <_printf_i+0x20c>
 800543c:	2500      	movs	r5, #0
 800543e:	f104 0619 	add.w	r6, r4, #25
 8005442:	e7f5      	b.n	8005430 <_printf_i+0x228>
 8005444:	08005880 	.word	0x08005880
 8005448:	08005891 	.word	0x08005891

0800544c <memmove>:
 800544c:	4288      	cmp	r0, r1
 800544e:	b510      	push	{r4, lr}
 8005450:	eb01 0402 	add.w	r4, r1, r2
 8005454:	d902      	bls.n	800545c <memmove+0x10>
 8005456:	4284      	cmp	r4, r0
 8005458:	4623      	mov	r3, r4
 800545a:	d807      	bhi.n	800546c <memmove+0x20>
 800545c:	1e43      	subs	r3, r0, #1
 800545e:	42a1      	cmp	r1, r4
 8005460:	d008      	beq.n	8005474 <memmove+0x28>
 8005462:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005466:	f803 2f01 	strb.w	r2, [r3, #1]!
 800546a:	e7f8      	b.n	800545e <memmove+0x12>
 800546c:	4601      	mov	r1, r0
 800546e:	4402      	add	r2, r0
 8005470:	428a      	cmp	r2, r1
 8005472:	d100      	bne.n	8005476 <memmove+0x2a>
 8005474:	bd10      	pop	{r4, pc}
 8005476:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800547a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800547e:	e7f7      	b.n	8005470 <memmove+0x24>

08005480 <_sbrk_r>:
 8005480:	b538      	push	{r3, r4, r5, lr}
 8005482:	2300      	movs	r3, #0
 8005484:	4d05      	ldr	r5, [pc, #20]	; (800549c <_sbrk_r+0x1c>)
 8005486:	4604      	mov	r4, r0
 8005488:	4608      	mov	r0, r1
 800548a:	602b      	str	r3, [r5, #0]
 800548c:	f7fb fc22 	bl	8000cd4 <_sbrk>
 8005490:	1c43      	adds	r3, r0, #1
 8005492:	d102      	bne.n	800549a <_sbrk_r+0x1a>
 8005494:	682b      	ldr	r3, [r5, #0]
 8005496:	b103      	cbz	r3, 800549a <_sbrk_r+0x1a>
 8005498:	6023      	str	r3, [r4, #0]
 800549a:	bd38      	pop	{r3, r4, r5, pc}
 800549c:	200002fc 	.word	0x200002fc

080054a0 <memchr>:
 80054a0:	4603      	mov	r3, r0
 80054a2:	b510      	push	{r4, lr}
 80054a4:	b2c9      	uxtb	r1, r1
 80054a6:	4402      	add	r2, r0
 80054a8:	4293      	cmp	r3, r2
 80054aa:	4618      	mov	r0, r3
 80054ac:	d101      	bne.n	80054b2 <memchr+0x12>
 80054ae:	2000      	movs	r0, #0
 80054b0:	e003      	b.n	80054ba <memchr+0x1a>
 80054b2:	7804      	ldrb	r4, [r0, #0]
 80054b4:	3301      	adds	r3, #1
 80054b6:	428c      	cmp	r4, r1
 80054b8:	d1f6      	bne.n	80054a8 <memchr+0x8>
 80054ba:	bd10      	pop	{r4, pc}

080054bc <memcpy>:
 80054bc:	440a      	add	r2, r1
 80054be:	4291      	cmp	r1, r2
 80054c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80054c4:	d100      	bne.n	80054c8 <memcpy+0xc>
 80054c6:	4770      	bx	lr
 80054c8:	b510      	push	{r4, lr}
 80054ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054ce:	4291      	cmp	r1, r2
 80054d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054d4:	d1f9      	bne.n	80054ca <memcpy+0xe>
 80054d6:	bd10      	pop	{r4, pc}

080054d8 <_realloc_r>:
 80054d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054dc:	4680      	mov	r8, r0
 80054de:	4614      	mov	r4, r2
 80054e0:	460e      	mov	r6, r1
 80054e2:	b921      	cbnz	r1, 80054ee <_realloc_r+0x16>
 80054e4:	4611      	mov	r1, r2
 80054e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054ea:	f7ff bc37 	b.w	8004d5c <_malloc_r>
 80054ee:	b92a      	cbnz	r2, 80054fc <_realloc_r+0x24>
 80054f0:	f7ff fbcc 	bl	8004c8c <_free_r>
 80054f4:	4625      	mov	r5, r4
 80054f6:	4628      	mov	r0, r5
 80054f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054fc:	f000 f81b 	bl	8005536 <_malloc_usable_size_r>
 8005500:	4284      	cmp	r4, r0
 8005502:	4607      	mov	r7, r0
 8005504:	d802      	bhi.n	800550c <_realloc_r+0x34>
 8005506:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800550a:	d812      	bhi.n	8005532 <_realloc_r+0x5a>
 800550c:	4621      	mov	r1, r4
 800550e:	4640      	mov	r0, r8
 8005510:	f7ff fc24 	bl	8004d5c <_malloc_r>
 8005514:	4605      	mov	r5, r0
 8005516:	2800      	cmp	r0, #0
 8005518:	d0ed      	beq.n	80054f6 <_realloc_r+0x1e>
 800551a:	42bc      	cmp	r4, r7
 800551c:	4622      	mov	r2, r4
 800551e:	4631      	mov	r1, r6
 8005520:	bf28      	it	cs
 8005522:	463a      	movcs	r2, r7
 8005524:	f7ff ffca 	bl	80054bc <memcpy>
 8005528:	4631      	mov	r1, r6
 800552a:	4640      	mov	r0, r8
 800552c:	f7ff fbae 	bl	8004c8c <_free_r>
 8005530:	e7e1      	b.n	80054f6 <_realloc_r+0x1e>
 8005532:	4635      	mov	r5, r6
 8005534:	e7df      	b.n	80054f6 <_realloc_r+0x1e>

08005536 <_malloc_usable_size_r>:
 8005536:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800553a:	1f18      	subs	r0, r3, #4
 800553c:	2b00      	cmp	r3, #0
 800553e:	bfbc      	itt	lt
 8005540:	580b      	ldrlt	r3, [r1, r0]
 8005542:	18c0      	addlt	r0, r0, r3
 8005544:	4770      	bx	lr
	...

08005548 <_init>:
 8005548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800554a:	bf00      	nop
 800554c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800554e:	bc08      	pop	{r3}
 8005550:	469e      	mov	lr, r3
 8005552:	4770      	bx	lr

08005554 <_fini>:
 8005554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005556:	bf00      	nop
 8005558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800555a:	bc08      	pop	{r3}
 800555c:	469e      	mov	lr, r3
 800555e:	4770      	bx	lr
